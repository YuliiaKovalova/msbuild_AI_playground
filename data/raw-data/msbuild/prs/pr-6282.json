{
  "number": 6282,
  "title": "Remove ContainsKey where relevant",
  "body": "Each instance of ContainsKey that I deleted was followed by querying the same dictionary for the same key. These can be done at the same time, so I replaced them.\r\n\r\nI do not expect that this will have any substantial user impact, but it theoretically improves perf, and it's a pet peeve of mine.",
  "state": "MERGED",
  "createdAt": "2021-03-19T19:10:33Z",
  "updatedAt": "2021-03-31T06:48:58Z",
  "closedAt": "2021-03-31T06:48:57Z",
  "mergedAt": "2021-03-31T06:48:57Z",
  "additions": 163,
  "deletions": 308,
  "changedFiles": 45,
  "headRefName": "remove-contains",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "928968c80100dfb1ad55808050b6a970eeb93089",
          "message": "Reduce dictionary accesses\n\np2\n\np3\n\np4\n\np5\n\nP6\n\np7",
          "committedDate": "2021-03-23T21:45:08Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "52845eab53c813bcf718b56bba59f4ae635a2222",
          "message": "PR comments",
          "committedDate": "2021-03-24T15:00:02Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This change technically means removing hostContext isn't atomic, but I don't think that's an issue.",
              "createdAt": "2021-03-19T19:16:54Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs",
              "diffHunk": "@@ -484,10 +484,7 @@ internal bool AcquireAndSetUpHost(HandshakeOptions hostContext, INodePacketFacto\n         /// </summary>\n         internal void DisconnectFromHost(HandshakeOptions hostContext)\n         {\n-            ErrorUtilities.VerifyThrow(_nodeIdToPacketFactory.ContainsKey((int)hostContext) && _nodeIdToPacketHandler.ContainsKey((int)hostContext), \"Why are we trying to disconnect from a context that we already disconnected from?  Did we call DisconnectFromHost twice?\");\n-\n-            _nodeIdToPacketFactory.Remove((int)hostContext);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I would slightly prefer the actual logic to be on its own lines and not part the `VerifyThrow()` call. It makes it easier to read for me when error handling does not mutate the state.",
              "createdAt": "2021-03-24T10:38:58Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs",
              "diffHunk": "@@ -484,10 +484,7 @@ internal bool AcquireAndSetUpHost(HandshakeOptions hostContext, INodePacketFacto\n         /// </summary>\n         internal void DisconnectFromHost(HandshakeOptions hostContext)\n         {\n-            ErrorUtilities.VerifyThrow(_nodeIdToPacketFactory.ContainsKey((int)hostContext) && _nodeIdToPacketHandler.ContainsKey((int)hostContext), \"Why are we trying to disconnect from a context that we already disconnected from?  Did we call DisconnectFromHost twice?\");\n-\n-            _nodeIdToPacketFactory.Remove((int)hostContext);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Note the absence of `!`. Finding it in the dictionary means it cannot be added, so ContainsKey and TryAdd return opposite values here.",
              "createdAt": "2021-03-19T19:35:38Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -229,18 +229,17 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n \n             string destinationFolder = Path.GetDirectoryName(destinationFileState.Name);\n \n-            if (!string.IsNullOrEmpty(destinationFolder) && !_directoriesKnownToExist.ContainsKey(destinationFolder))\n+            if (!string.IsNullOrEmpty(destinationFolder) &&\n+                // It's very common for a lot of files to be copied to the same folder. \n+                // Eg., \"c:\\foo\\a\"->\"c:\\bar\\a\", \"c:\\foo\\b\"->\"c:\\bar\\b\" and so forth.\n+                // We don't want to check whether this folder exists for every single file we copy. So store which we've checked.\n+                _directoriesKnownToExist.TryAdd(destinationFolder, true))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It appears this prevented the creation of some directories where necessary, so I removed it.",
              "createdAt": "2021-03-23T22:06:29Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -229,18 +229,17 @@ private void LogDiagnostic(string message, params object[] messageArgs)\n \n             string destinationFolder = Path.GetDirectoryName(destinationFileState.Name);\n \n-            if (!string.IsNullOrEmpty(destinationFolder) && !_directoriesKnownToExist.ContainsKey(destinationFolder))\n+            if (!string.IsNullOrEmpty(destinationFolder) &&\n+                // It's very common for a lot of files to be copied to the same folder. \n+                // Eg., \"c:\\foo\\a\"->\"c:\\bar\\a\", \"c:\\foo\\b\"->\"c:\\bar\\b\" and so forth.\n+                // We don't want to check whether this folder exists for every single file we copy. So store which we've checked.\n+                _directoriesKnownToExist.TryAdd(destinationFolder, true))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "There are numerous cases in which we could eliminate another dictionary access via TryAdd or some similar method, but that isn't available on Framework, sadly.",
              "createdAt": "2021-03-19T19:36:54Z",
              "path": "src/Tasks/ManifestUtil/ApplicationManifest.cs",
              "diffHunk": "@@ -421,25 +421,25 @@ private void ValidateCom()\n                             if (!String.IsNullOrEmpty(comInfo.ClsId))\n                             {\n                                 string key = comInfo.ClsId.ToLowerInvariant();\n-                                if (!clsidList.ContainsKey(key))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Was the old code really doing case-insensitive comparison? `traversalInstance.Targets` looks case sensitive.",
              "createdAt": "2021-03-24T09:19:02Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -783,7 +783,7 @@ private void EvaluateAndAddProjects(List<ProjectInSolution> projectsInOrder, Lis\n                 AddTraversalTargetForProject(traversalInstance, project, projectConfiguration, \"Publish\", null, canBuildDirectly);\n \n                 // Add any other targets specified by the user that were not already added\n-                foreach (string targetName in _targetNames.Where(i => !traversalInstance.Targets.ContainsKey(i)))\n+                foreach (string targetName in _targetNames.Except(traversalInstance.Targets.Keys, StringComparer.OrdinalIgnoreCase))",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I'd initially had it case-sensitive, and it failed in a way that made this look guilty, but I found a couple other bugs since then. Let me try again and get back to you.",
              "createdAt": "2021-03-24T14:43:54Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -783,7 +783,7 @@ private void EvaluateAndAddProjects(List<ProjectInSolution> projectsInOrder, Lis\n                 AddTraversalTargetForProject(traversalInstance, project, projectConfiguration, \"Publish\", null, canBuildDirectly);\n \n                 // Add any other targets specified by the user that were not already added\n-                foreach (string targetName in _targetNames.Where(i => !traversalInstance.Targets.ContainsKey(i)))\n+                foreach (string targetName in _targetNames.Except(traversalInstance.Targets.Keys, StringComparer.OrdinalIgnoreCase))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "SolutionProjectGenerator_Tests.IllegalUserTargetNamesDoNotThrow(forceCaseDifference: True) was the test that failed. Looking at it, it explicitly changes the casing to be different and still expects it to work the same. I would assume that if we should do case-insensitive comparisons at one point, we should do it everywhere in SolutionProjectGenerator when looking at targets' names, though I'm open to being wrong.",
              "createdAt": "2021-03-24T14:56:27Z",
              "path": "src/Build/Construction/Solution/SolutionProjectGenerator.cs",
              "diffHunk": "@@ -783,7 +783,7 @@ private void EvaluateAndAddProjects(List<ProjectInSolution> projectsInOrder, Lis\n                 AddTraversalTargetForProject(traversalInstance, project, projectConfiguration, \"Publish\", null, canBuildDirectly);\n \n                 // Add any other targets specified by the user that were not already added\n-                foreach (string targetName in _targetNames.Where(i => !traversalInstance.Targets.ContainsKey(i)))\n+                foreach (string targetName in _targetNames.Except(traversalInstance.Targets.Keys, StringComparer.OrdinalIgnoreCase))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Is the bit-wise OR intentional here? Would it work as well with `||` which is more natural for bool values?",
              "createdAt": "2021-03-24T09:29:38Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -849,14 +849,10 @@ private void PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n                             _itemDefinitionGroupElements.Add(itemDefinitionGroup);\n                             break;\n                         case ProjectTargetElement target:\n-                            if (_projectSupportsReturnsAttribute.ContainsKey(currentProjectOrImport))\n-                            {\n-                                _projectSupportsReturnsAttribute[currentProjectOrImport] |= (target.Returns != null);\n-                            }\n-                            else\n-                            {\n-                                _projectSupportsReturnsAttribute[currentProjectOrImport] = (target.Returns != null);\n-                            }\n+                            // Defaults to false\n+                            _projectSupportsReturnsAttribute.TryGetValue(currentProjectOrImport, out NGen<bool> projectSupportsReturnsAttribute);\n+\n+                            _projectSupportsReturnsAttribute[currentProjectOrImport] = projectSupportsReturnsAttribute | (target.Returns != null);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I was just maintaining how it was before, but I agree that's more natural. Thanks!",
              "createdAt": "2021-03-24T14:40:52Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -849,14 +849,10 @@ private void PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n                             _itemDefinitionGroupElements.Add(itemDefinitionGroup);\n                             break;\n                         case ProjectTargetElement target:\n-                            if (_projectSupportsReturnsAttribute.ContainsKey(currentProjectOrImport))\n-                            {\n-                                _projectSupportsReturnsAttribute[currentProjectOrImport] |= (target.Returns != null);\n-                            }\n-                            else\n-                            {\n-                                _projectSupportsReturnsAttribute[currentProjectOrImport] = (target.Returns != null);\n-                            }\n+                            // Defaults to false\n+                            _projectSupportsReturnsAttribute.TryGetValue(currentProjectOrImport, out NGen<bool> projectSupportsReturnsAttribute);\n+\n+                            _projectSupportsReturnsAttribute[currentProjectOrImport] = projectSupportsReturnsAttribute | (target.Returns != null);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Typo `retrive`.",
              "createdAt": "2021-03-24T09:42:08Z",
              "path": "src/Build/Logging/ParallelLogger/ParallelLoggerHelpers.cs",
              "diffHunk": "@@ -47,31 +47,26 @@ internal void AddProjectStartedEvent(ProjectStartedEventArgs e, bool requireTime\n                     int projectTargetKeyLocal = 1;\n                     int projectIncrementKeyLocal;\n                     // If we haven't seen this project before (by full path) then\n-                    // allocate a new key for it and save it away\n-                    if (!_projectKey.ContainsKey(e.ProjectFile))\n+                    // allocate a new key for it and save it away. Otherwise, retrive it.",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "![image](https://user-images.githubusercontent.com/12206368/112296271-082b4000-8c95-11eb-9b8a-1c2c4d8b42ad.png)\r\n",
              "createdAt": "2021-03-24T10:27:45Z",
              "path": "src/Tasks/AssemblyDependency/GlobalAssemblyCache.cs",
              "diffHunk": "@@ -280,9 +280,8 @@ bool specificVersion\n                 }\n                 else\n                 {\n-                    if (fusionNameToResolvedPath.ContainsKey(strongName))\n+                    if (fusionNameToResolvedPath.TryGetValue(strongName, out string fusionName))\n                     {\n-                        fusionNameToResolvedPath.TryGetValue(strongName, out string fusionName);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}