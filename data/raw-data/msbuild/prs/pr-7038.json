{
  "number": 7038,
  "title": "Code cleanup: Remove references to FxCop",
  "body": "### Context\r\n\r\nFxCop is deprecated and many of the constructs in the code base that claim to have been done to \"make FxCop happy\" are not needed anymore.\r\n\r\n### Changes Made\r\n\r\n- Removed FxCop exclusion files.\r\n- Removed random references to FxCop, primarily from unit tests.\r\n- Removed FxCop from comments and fixed the code as appropriate.\r\n\r\n### Testing\r\n\r\nCI and experimental insertion with the exclusion files removed.\r\n",
  "state": "MERGED",
  "createdAt": "2021-11-15T13:56:02Z",
  "updatedAt": "2021-11-22T17:09:11Z",
  "closedAt": "2021-11-22T17:09:07Z",
  "mergedAt": "2021-11-22T17:09:07Z",
  "additions": 143,
  "deletions": 1387,
  "changedFiles": 30,
  "headRefName": "nofxcop",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "88c3368fb00df06b0e3d9481c2db19dac640df90",
          "message": "Remove FxCop exclusion files",
          "committedDate": "2021-11-15T11:15:24Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "205b2f5a25b10ad0d2549cb22bd1abc2d9f0c63e",
          "message": "Remove references to FxCop and fix code where appropriate",
          "committedDate": "2021-11-15T12:09:05Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9ee6328278db56acded77dced8ffdd3b9ea5b0e7",
          "message": "PR feedback: Use switch statements",
          "committedDate": "2021-11-16T09:30:10Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0ce93f1ce2159a23bf2bb1bc5c2695244fee5100",
          "message": "PR feedback: Use 'more specific type' instead of 'down-cast'",
          "committedDate": "2021-11-18T10:46:09Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Do you think it's worth making this change in `Deprecated/`? I usually try to leave that alone. On the other hand you already did it and it should be fine . . .",
              "createdAt": "2021-11-15T15:02:20Z",
              "path": "src/Deprecated/Conversion/Microsoft.Build.Conversion.csproj",
              "diffHunk": "@@ -15,7 +15,6 @@\n     <Compile Include=\"AssemblyInfo.cs\" />\n     <Compile Include=\"AssemblyResources.cs\" />\n     <Compile Include=\"Constants.cs\" />\n-    <Compile Include=\"FxCopExclusions\\Microsoft.Build.Conversion.Suppressions.cs\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I would lean towards making the change. Although not under active development the code still benefits from cleanup (a bit faster git operations, a bit faster build).",
              "createdAt": "2021-11-16T09:43:50Z",
              "path": "src/Deprecated/Conversion/Microsoft.Build.Conversion.csproj",
              "diffHunk": "@@ -15,7 +15,6 @@\n     <Compile Include=\"AssemblyInfo.cs\" />\n     <Compile Include=\"AssemblyResources.cs\" />\n     <Compile Include=\"Constants.cs\" />\n-    <Compile Include=\"FxCopExclusions\\Microsoft.Build.Conversion.Suppressions.cs\" />",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit:\r\nMaybe nicer as a switch statement?",
              "createdAt": "2021-11-15T19:21:07Z",
              "path": "src/Build/BackEnd/Components/Logging/EventSourceSink.cs",
              "diffHunk": "@@ -217,66 +217,63 @@ public void Consume(BuildEventArgs buildEvent, int sinkId)\n         /// </summary>\n         public void Consume(BuildEventArgs buildEvent)\n         {\n-            // FXCop may complain that there are unecessary casts here, and there are, but\n-            // using \"as\" and allocating another variable for each event is extremely costly\n-            // and is much slower then this approach even with the additional casts\n-            if (buildEvent is BuildMessageEventArgs)\n+            if (buildEvent is BuildMessageEventArgs buildMessageEvent)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I completely forgot about this feature. Done, thank you! Too bad switch expressions cannot be used here, they would make it even nicer.",
              "createdAt": "2021-11-16T09:39:01Z",
              "path": "src/Build/BackEnd/Components/Logging/EventSourceSink.cs",
              "diffHunk": "@@ -217,66 +217,63 @@ public void Consume(BuildEventArgs buildEvent, int sinkId)\n         /// </summary>\n         public void Consume(BuildEventArgs buildEvent)\n         {\n-            // FXCop may complain that there are unecessary casts here, and there are, but\n-            // using \"as\" and allocating another variable for each event is extremely costly\n-            // and is much slower then this approach even with the additional casts\n-            if (buildEvent is BuildMessageEventArgs)\n+            if (buildEvent is BuildMessageEventArgs buildMessageEvent)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Wait, isn't this an upcast? to the more specific type? That matches my understanding of the \"direction\".",
              "createdAt": "2021-11-17T16:29:03Z",
              "path": "src/Deprecated/Engine/Engine/EventSource.cs",
              "diffHunk": "@@ -520,40 +520,57 @@ internal void RaiseAnyEvent(object sender, BuildEventArgs e)\n         }\n \n         /// <summary>\n-        /// Raises the given event to all registered loggers. This method up-cast the events\n+        /// Raises the given event to all registered loggers. This method down-casts the events",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "[StackOverflow](https://stackoverflow.com/questions/23414090/what-is-the-difference-between-up-casting-and-down-casting-with-respect-to-class) says upcasting is to a supertype. I wasn't familiar with either terminology; maybe just change it to \"This method casts all the events extracted from the queue to their more specific form\" or something like that?",
              "createdAt": "2021-11-17T16:39:25Z",
              "path": "src/Deprecated/Engine/Engine/EventSource.cs",
              "diffHunk": "@@ -520,40 +520,57 @@ internal void RaiseAnyEvent(object sender, BuildEventArgs e)\n         }\n \n         /// <summary>\n-        /// Raises the given event to all registered loggers. This method up-cast the events\n+        /// Raises the given event to all registered loggers. This method down-casts the events",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "huh, it appears to be used that way in other dotnet repos too. Yet more fuel for my \"don't use terminology that implies a direction\" fire.",
              "createdAt": "2021-11-17T16:45:57Z",
              "path": "src/Deprecated/Engine/Engine/EventSource.cs",
              "diffHunk": "@@ -520,40 +520,57 @@ internal void RaiseAnyEvent(object sender, BuildEventArgs e)\n         }\n \n         /// <summary>\n-        /// Raises the given event to all registered loggers. This method up-cast the events\n+        /// Raises the given event to all registered loggers. This method down-casts the events",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I've replaced it with direction-free wording.\r\n\r\n(Reminds me of my confusion every time someone talks about LEFT JOIN and RIGHT JOIN.)",
              "createdAt": "2021-11-18T10:49:04Z",
              "path": "src/Deprecated/Engine/Engine/EventSource.cs",
              "diffHunk": "@@ -520,40 +520,57 @@ internal void RaiseAnyEvent(object sender, BuildEventArgs e)\n         }\n \n         /// <summary>\n-        /// Raises the given event to all registered loggers. This method up-cast the events\n+        /// Raises the given event to all registered loggers. This method down-casts the events",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}