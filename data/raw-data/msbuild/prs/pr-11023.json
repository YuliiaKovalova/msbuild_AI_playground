{
  "number": 11023,
  "title": "EmbeddedResource Culture Check",
  "body": "Fixes #9882, #9154\r\n\r\n### Context\r\nThis is the initial implementation of the `EmbeddedResourceCheck` class, which is a built-in analyzer that checks for the presence of the `Culture` metadata in `EmbeddedResource` items.\r\n\r\n### Testing\r\nTailored tests\r\n+ tests for https://github.com/dotnet/msbuild/pull/11000\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2024-11-22T17:28:45Z",
  "updatedAt": "2024-11-27T08:44:29Z",
  "closedAt": "2024-11-27T08:44:28Z",
  "mergedAt": "2024-11-27T08:44:28Z",
  "additions": 691,
  "deletions": 5,
  "changedFiles": 25,
  "headRefName": "proto/embeddedresource-check",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a646216f50064a05dcc50067f53c6731d4156329",
          "message": "in progress work",
          "committedDate": "2024-11-21T08:51:41Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b60d30348abeea4e85ff01c46141cb3aee0f10e3",
          "message": "Initial version of the Check",
          "committedDate": "2024-11-22T17:24:08Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0a08e11e81bbc0c3f754c8fa4bd681ed1f42056d",
          "message": "Merge branch 'proto/embeddedresource-check' of https://github.com/dotnet/msbuild into proto/embeddedresource-check",
          "committedDate": "2024-11-22T17:26:53Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bc2785e5b51da76237a7514d79205f4024c45bdf",
          "message": "Add check documentation",
          "committedDate": "2024-11-25T12:03:02Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6fcd6af7058dd0ccc201e8d42f9c4e047ca71638",
          "message": "Fix analyzers",
          "committedDate": "2024-11-25T12:09:24Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "374af67321b597fe2ff75eacee4c6bbb79814983",
          "message": "Make the check report same extension as the AssighCulture task would",
          "committedDate": "2024-11-26T09:52:53Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "882be59c9cbcb74714d1308839a4b0ad01e9d5e3",
          "message": "Reflect PR comments",
          "committedDate": "2024-11-27T07:49:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we care about some weid stuff like `\"aaa.b.c..xy\"` which evaluates to True and then returns 'b' from the GetMiddleExtension?\r\nNow I don't know what sort of spice there would be for a file to have such a format and maybe we can let it burn in such case.\r\n",
              "createdAt": "2024-11-26T08:41:04Z",
              "path": "src/Build/BuildCheck/Checks/EmbeddedResourceCheck.cs",
              "diffHunk": "@@ -0,0 +1,114 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using System.Collections.Generic;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.BuildCheck.Checks;\n+internal class EmbeddedResourceCheck : Check\n+{\n+    private const string RuleId = \"BC0105\";\n+    public static CheckRule SupportedRule = new CheckRule(RuleId, \"EmbeddedResourceCulture\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0105_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0105_MessageFmt\")!,\n+        new CheckConfiguration() { RuleId = \"BC0105\", Severity = CheckResultSeverity.Warning });\n+\n+    public override string FriendlyName => \"MSBuild.EmbeddedResourceCulture\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedItemsAction(EvaluatedItemsAction);\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    private readonly HashSet<string> _projects = new(MSBuildNameIgnoreCaseComparer.Default);\n+\n+    private void EvaluatedItemsAction(BuildCheckDataContext<EvaluatedItemsCheckData> context)\n+    {\n+        // Deduplication\n+        if (!_projects.Add(context.Data.ProjectFilePath))\n+        {\n+            return;\n+        }\n+\n+        foreach (ItemData itemData in context.Data.EnumerateItemsOfType(\"EmbeddedResource\"))\n+        {\n+            string evaluatedEmbedItem = itemData.EvaluatedInclude;\n+            bool hasDoubleExtension = HasDoubleExtension(evaluatedEmbedItem);\n+\n+            if (!hasDoubleExtension)\n+            {\n+                continue;\n+            }\n+\n+            bool hasNeededMetadata = false;\n+            foreach (KeyValuePair<string, string> keyValuePair in itemData.EnumerateMetadata())\n+            {\n+                if (MSBuildNameIgnoreCaseComparer.Default.Equals(keyValuePair.Key, ItemMetadataNames.culture))\n+                {\n+                    hasNeededMetadata = true;\n+                    break;\n+                }\n+\n+                if (MSBuildNameIgnoreCaseComparer.Default.Equals(keyValuePair.Key, ItemMetadataNames.withCulture) &&\n+                    keyValuePair.Value.IsMSBuildFalseString())\n+                {\n+                    hasNeededMetadata = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!hasNeededMetadata)\n+            {\n+                context.ReportResult(BuildCheckResult.Create(\n+                    SupportedRule,\n+                    // Populating precise location tracked via https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=58661732\n+                    ElementLocation.EmptyLocation,\n+                    Path.GetFileName(context.Data.ProjectFilePath),\n+                    evaluatedEmbedItem,\n+                    GetMiddleExtension(evaluatedEmbedItem)));\n+            }\n+        }\n+    }\n+\n+    private static bool HasDoubleExtension(string s, char extensionSeparator = '.')\n+    {",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "We already would process it in the `AssignCulture` this way: https://github.com/dotnet/msbuild/blob/bd5cf8aa916817730e3c55c8714af78608887c4f/src/Tasks/Culture.cs#L49-L80\r\n\r\nThough - we should get the second extension from end to be consistent in reporting - so lm adjust the `GetMiddleExtension`",
              "createdAt": "2024-11-26T09:09:57Z",
              "path": "src/Build/BuildCheck/Checks/EmbeddedResourceCheck.cs",
              "diffHunk": "@@ -0,0 +1,114 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using System.Collections.Generic;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.BuildCheck.Checks;\n+internal class EmbeddedResourceCheck : Check\n+{\n+    private const string RuleId = \"BC0105\";\n+    public static CheckRule SupportedRule = new CheckRule(RuleId, \"EmbeddedResourceCulture\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0105_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0105_MessageFmt\")!,\n+        new CheckConfiguration() { RuleId = \"BC0105\", Severity = CheckResultSeverity.Warning });\n+\n+    public override string FriendlyName => \"MSBuild.EmbeddedResourceCulture\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedItemsAction(EvaluatedItemsAction);\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    private readonly HashSet<string> _projects = new(MSBuildNameIgnoreCaseComparer.Default);\n+\n+    private void EvaluatedItemsAction(BuildCheckDataContext<EvaluatedItemsCheckData> context)\n+    {\n+        // Deduplication\n+        if (!_projects.Add(context.Data.ProjectFilePath))\n+        {\n+            return;\n+        }\n+\n+        foreach (ItemData itemData in context.Data.EnumerateItemsOfType(\"EmbeddedResource\"))\n+        {\n+            string evaluatedEmbedItem = itemData.EvaluatedInclude;\n+            bool hasDoubleExtension = HasDoubleExtension(evaluatedEmbedItem);\n+\n+            if (!hasDoubleExtension)\n+            {\n+                continue;\n+            }\n+\n+            bool hasNeededMetadata = false;\n+            foreach (KeyValuePair<string, string> keyValuePair in itemData.EnumerateMetadata())\n+            {\n+                if (MSBuildNameIgnoreCaseComparer.Default.Equals(keyValuePair.Key, ItemMetadataNames.culture))\n+                {\n+                    hasNeededMetadata = true;\n+                    break;\n+                }\n+\n+                if (MSBuildNameIgnoreCaseComparer.Default.Equals(keyValuePair.Key, ItemMetadataNames.withCulture) &&\n+                    keyValuePair.Value.IsMSBuildFalseString())\n+                {\n+                    hasNeededMetadata = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!hasNeededMetadata)\n+            {\n+                context.ReportResult(BuildCheckResult.Create(\n+                    SupportedRule,\n+                    // Populating precise location tracked via https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=58661732\n+                    ElementLocation.EmptyLocation,\n+                    Path.GetFileName(context.Data.ProjectFilePath),\n+                    evaluatedEmbedItem,\n+                    GetMiddleExtension(evaluatedEmbedItem)));\n+            }\n+        }\n+    }\n+\n+    private static bool HasDoubleExtension(string s, char extensionSeparator = '.')\n+    {",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Fixed",
              "createdAt": "2024-11-26T09:53:19Z",
              "path": "src/Build/BuildCheck/Checks/EmbeddedResourceCheck.cs",
              "diffHunk": "@@ -0,0 +1,114 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using System.Collections.Generic;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.BuildCheck.Checks;\n+internal class EmbeddedResourceCheck : Check\n+{\n+    private const string RuleId = \"BC0105\";\n+    public static CheckRule SupportedRule = new CheckRule(RuleId, \"EmbeddedResourceCulture\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0105_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0105_MessageFmt\")!,\n+        new CheckConfiguration() { RuleId = \"BC0105\", Severity = CheckResultSeverity.Warning });\n+\n+    public override string FriendlyName => \"MSBuild.EmbeddedResourceCulture\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedItemsAction(EvaluatedItemsAction);\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    private readonly HashSet<string> _projects = new(MSBuildNameIgnoreCaseComparer.Default);\n+\n+    private void EvaluatedItemsAction(BuildCheckDataContext<EvaluatedItemsCheckData> context)\n+    {\n+        // Deduplication\n+        if (!_projects.Add(context.Data.ProjectFilePath))\n+        {\n+            return;\n+        }\n+\n+        foreach (ItemData itemData in context.Data.EnumerateItemsOfType(\"EmbeddedResource\"))\n+        {\n+            string evaluatedEmbedItem = itemData.EvaluatedInclude;\n+            bool hasDoubleExtension = HasDoubleExtension(evaluatedEmbedItem);\n+\n+            if (!hasDoubleExtension)\n+            {\n+                continue;\n+            }\n+\n+            bool hasNeededMetadata = false;\n+            foreach (KeyValuePair<string, string> keyValuePair in itemData.EnumerateMetadata())\n+            {\n+                if (MSBuildNameIgnoreCaseComparer.Default.Equals(keyValuePair.Key, ItemMetadataNames.culture))\n+                {\n+                    hasNeededMetadata = true;\n+                    break;\n+                }\n+\n+                if (MSBuildNameIgnoreCaseComparer.Default.Equals(keyValuePair.Key, ItemMetadataNames.withCulture) &&\n+                    keyValuePair.Value.IsMSBuildFalseString())\n+                {\n+                    hasNeededMetadata = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!hasNeededMetadata)\n+            {\n+                context.ReportResult(BuildCheckResult.Create(\n+                    SupportedRule,\n+                    // Populating precise location tracked via https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=58661732\n+                    ElementLocation.EmptyLocation,\n+                    Path.GetFileName(context.Data.ProjectFilePath),\n+                    evaluatedEmbedItem,\n+                    GetMiddleExtension(evaluatedEmbedItem)));\n+            }\n+        }\n+    }\n+\n+    private static bool HasDoubleExtension(string s, char extensionSeparator = '.')\n+    {",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        new CheckConfiguration() { RuleId = RuleId, Severity = CheckResultSeverity.Warning });\r\n```",
              "createdAt": "2024-11-26T09:18:06Z",
              "path": "src/Build/BuildCheck/Checks/EmbeddedResourceCheck.cs",
              "diffHunk": "@@ -0,0 +1,114 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using System.Collections.Generic;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.BuildCheck.Checks;\n+internal class EmbeddedResourceCheck : Check\n+{\n+    private const string RuleId = \"BC0105\";\n+    public static CheckRule SupportedRule = new CheckRule(RuleId, \"EmbeddedResourceCulture\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0105_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0105_MessageFmt\")!,\n+        new CheckConfiguration() { RuleId = \"BC0105\", Severity = CheckResultSeverity.Warning });",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "shouldn't it be experimental like here: https://github.com/dotnet/msbuild/commit/e73ffcba1fa42ca60551be5dadbcf05c9ad9d914#diff-951f6c95a7d6d4934896c8ce5cde580b46a09adeea37d7f52fa5bfb75fdd7822 ?",
              "createdAt": "2024-11-26T09:21:53Z",
              "path": "src/Build/BuildCheck/Checks/EmbeddedResourceCheck.cs",
              "diffHunk": "@@ -0,0 +1,114 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using System.Collections.Generic;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.BuildCheck.Checks;",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "why DefaultScope is now empty?",
              "createdAt": "2024-11-26T14:17:05Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -4,10 +4,11 @@ Report codes are chosen to conform to suggested guidelines. Those guidelines are\n \n | Diagnostic&nbsp;Code | Default Severity | Default Scope | Available from SDK | Reason |\n |:-----|-------|-------|-------|----------|\n-| [BC0101](#bc0101---shared-output-path) | Warning | Project | 9.0.100 | Shared output path. |\n-| [BC0102](#bc0102---double-writes) | Warning | Project | 9.0.100 | Double writes. |\n+| [BC0101](#bc0101---shared-output-path) | Warning | | 9.0.100 | Shared output path. |",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "I put 'N/A' instead and clarified below the table",
              "createdAt": "2024-11-27T07:42:07Z",
              "path": "documentation/specs/BuildCheck/Codes.md",
              "diffHunk": "@@ -4,10 +4,11 @@ Report codes are chosen to conform to suggested guidelines. Those guidelines are\n \n | Diagnostic&nbsp;Code | Default Severity | Default Scope | Available from SDK | Reason |\n |:-----|-------|-------|-------|----------|\n-| [BC0101](#bc0101---shared-output-path) | Warning | Project | 9.0.100 | Shared output path. |\n-| [BC0102](#bc0102---double-writes) | Warning | Project | 9.0.100 | Double writes. |\n+| [BC0101](#bc0101---shared-output-path) | Warning | | 9.0.100 | Shared output path. |",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "small nit: adding comments for each step from Microsoft.Build.Tasks.Culture.GetItemCultureInfo, but not necessary since it says in the summary where to look",
              "createdAt": "2024-11-26T15:17:11Z",
              "path": "src/Build/BuildCheck/Checks/EmbeddedResourceCheck.cs",
              "diffHunk": "@@ -0,0 +1,114 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.IO;\n+using System.Collections.Generic;\n+using Microsoft.Build.Collections;\n+using Microsoft.Build.Construction;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.BuildCheck.Checks;\n+internal class EmbeddedResourceCheck : Check\n+{\n+    private const string RuleId = \"BC0105\";\n+    public static CheckRule SupportedRule = new CheckRule(RuleId, \"EmbeddedResourceCulture\",\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0105_Title\")!,\n+        ResourceUtilities.GetResourceString(\"BuildCheck_BC0105_MessageFmt\")!,\n+        new CheckConfiguration() { RuleId = \"BC0105\", Severity = CheckResultSeverity.Warning });\n+\n+    public override string FriendlyName => \"MSBuild.EmbeddedResourceCulture\";\n+\n+    public override IReadOnlyList<CheckRule> SupportedRules { get; } = [SupportedRule];\n+\n+    public override void Initialize(ConfigurationContext configurationContext)\n+    {\n+        /* This is it - no custom configuration */\n+    }\n+\n+    public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)\n+    {\n+        registrationContext.RegisterEvaluatedItemsAction(EvaluatedItemsAction);\n+    }\n+\n+    internal override bool IsBuiltIn => true;\n+\n+    private readonly HashSet<string> _projects = new(MSBuildNameIgnoreCaseComparer.Default);\n+\n+    private void EvaluatedItemsAction(BuildCheckDataContext<EvaluatedItemsCheckData> context)\n+    {\n+        // Deduplication\n+        if (!_projects.Add(context.Data.ProjectFilePath))\n+        {\n+            return;\n+        }\n+\n+        foreach (ItemData itemData in context.Data.EnumerateItemsOfType(\"EmbeddedResource\"))\n+        {\n+            string evaluatedEmbedItem = itemData.EvaluatedInclude;\n+            bool hasDoubleExtension = HasDoubleExtension(evaluatedEmbedItem);\n+\n+            if (!hasDoubleExtension)\n+            {\n+                continue;\n+            }\n+\n+            bool hasNeededMetadata = false;\n+            foreach (KeyValuePair<string, string> keyValuePair in itemData.EnumerateMetadata())\n+            {\n+                if (MSBuildNameIgnoreCaseComparer.Default.Equals(keyValuePair.Key, ItemMetadataNames.culture))\n+                {\n+                    hasNeededMetadata = true;\n+                    break;\n+                }\n+\n+                if (MSBuildNameIgnoreCaseComparer.Default.Equals(keyValuePair.Key, ItemMetadataNames.withCulture) &&\n+                    keyValuePair.Value.IsMSBuildFalseString())\n+                {\n+                    hasNeededMetadata = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!hasNeededMetadata)\n+            {\n+                context.ReportResult(BuildCheckResult.Create(\n+                    SupportedRule,\n+                    // Populating precise location tracked via https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=58661732\n+                    ElementLocation.EmptyLocation,\n+                    Path.GetFileName(context.Data.ProjectFilePath),\n+                    evaluatedEmbedItem,\n+                    GetSupposedCultureExtension(evaluatedEmbedItem)));\n+            }\n+        }\n+    }\n+\n+    private static bool HasDoubleExtension(string s)\n+    {\n+        const char extensionSeparator = '.';\n+        int firstIndex;\n+        return\n+            !string.IsNullOrEmpty(s) &&\n+            (firstIndex = s.IndexOf(extensionSeparator)) > -1 &&\n+            // We need at least 2 chars for this extension - separator and one char of extension,\n+            // so next extension can start closest 2 chars from this one\n+            // (this is to grace handle double dot - which is not double extension)\n+            firstIndex + 2 <= s.Length &&\n+            s.IndexOf(extensionSeparator, firstIndex + 2) > -1;\n+    }\n+\n+    /// <summary>\n+    /// Returns the extension that is supposed to implicitly denote the culture.\n+    /// This is mimicking the behavior of Microsoft.Build.Tasks.Culture.GetItemCultureInfo\n+    /// </summary>\n+    private string GetSupposedCultureExtension(string s)\n+    {",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "what does `MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION` do?",
              "createdAt": "2024-11-26T15:36:50Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -640,7 +747,6 @@ private void PrepareSampleProjectsAndConfig(\n         _env.SetCurrentDirectory(Path.GetDirectoryName(projectFile.Path));\n \n         _env.SetEnvironmentVariable(\"MSBUILDNOINPROCNODE\", buildInOutOfProcessNode ? \"1\" : \"0\");\n-        _env.SetEnvironmentVariable(\"MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION\", \"1\");",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "This ensures that evaluated properties and items are sent back to the main node. This is not default behavior.\r\nThe BuildCheck forwarding and central loggers now make sure this is happening - the tests do not need to request that explicitly",
              "createdAt": "2024-11-27T07:44:43Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -640,7 +747,6 @@ private void PrepareSampleProjectsAndConfig(\n         _env.SetCurrentDirectory(Path.GetDirectoryName(projectFile.Path));\n \n         _env.SetEnvironmentVariable(\"MSBUILDNOINPROCNODE\", buildInOutOfProcessNode ? \"1\" : \"0\");\n-        _env.SetEnvironmentVariable(\"MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION\", \"1\");",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd add xml docs here that the backing implementation throws if there is a non-bool value. It could surprise someone who used this method as this is a side effect not clear from the name.",
              "createdAt": "2024-11-26T15:50:00Z",
              "path": "src/Shared/StringExtensions.cs",
              "diffHunk": "@@ -92,5 +92,10 @@ public static void WriteLine(this TextWriter writer, ReadOnlySpan<char> buffer)\n             writer.WriteLine(buffer.ToString());\n         }\n #endif\n+\n+        public static bool IsMSBuildTrueString(this string msbuildString) =>",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      }
    ]
  }
}