{
  "number": 9680,
  "title": "Shared EvaluationContext for graph construction",
  "body": "Fix #9678 by creating a single shared `EvaluationContext` in the `Graph` object and using it when creating `ProjectInstance`s using the default factory.\n\nThis is similar to how NuGet static-graph restore already works: https://github.com/NuGet/NuGet.Client/blob/b83566ec2369c4e9fd07e6f95d734dfe370a1e66/src/NuGet.Core/NuGet.Build.Tasks.Console/MSBuildStaticGraphRestore.cs#L885\n\nSince we're evaluating the projects in the graph in parallel and \"all at once\", the shared caches in the `EvaluationContext` should be a solid improvement.\n",
  "state": "MERGED",
  "createdAt": "2024-01-24T23:15:12Z",
  "updatedAt": "2024-04-24T18:46:58Z",
  "closedAt": "2024-04-24T18:46:57Z",
  "mergedAt": "2024-04-24T18:46:57Z",
  "additions": 48,
  "deletions": 5,
  "changedFiles": 3,
  "headRefName": "exp/context-for-graph",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f74240ff17212263b0ea1d6eaddd1fc46efd4ea7",
          "message": "Shared EvaluationContext for graph construction\n\nFix #9678 by creating a single shared `EvaluationContext` in the `Graph`\nobject and using it when creating `ProjectInstance`s using the default\nfactory.\n\nThis is similar to how NuGet static-graph restore already works: https://github.com/NuGet/NuGet.Client/blob/b83566ec2369c4e9fd07e6f95d734dfe370a1e66/src/NuGet.Core/NuGet.Build.Tasks.Console/MSBuildStaticGraphRestore.cs#L885\n\nSince we're evaluating the projects in the graph in parallel and \"all at\nonce\", the shared caches in the `EvaluationContext` should be a solid\nimprovement.",
          "committedDate": "2024-01-24T23:10:02Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5588b799a308f32ace46b7a26a61eafa109e9cbb",
          "message": "Pass interactive along in ProjectInstance ctor overload",
          "committedDate": "2024-01-25T15:53:37Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1cd624606fb7b6841ca13af8845fb79f3c59d543",
          "message": "Add doc comments",
          "committedDate": "2024-01-25T19:07:51Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f633ba1338a957d213a2e0cd65ba8f3be600d705",
          "message": "Merge remote-tracking branch 'upstream/main' into exp/context-for-graph",
          "committedDate": "2024-04-22T20:24:38Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c462521c50d5a760d373b68423942beadb522750",
          "message": "Make new ProjectInstance ctor internal (no other public EvaluationContext ones)",
          "committedDate": "2024-04-22T21:14:57Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4e8f138dd88c2af97daab06d39ec4ec0d8c294ff",
          "message": "Avoid allocating unneeded EvaluationContext",
          "committedDate": "2024-04-22T21:15:54Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Nice job. Have you measured it? If not I can do that on VCProj, would be nice to know.\r\n\r\nDo you remember what you were thinking of about VCProj? Was it for building the graph that part of the VS repo? If so this won't help: those scenarios already had good SDK resolution caching; it's the simple API calls like `new ProjectGraph(project)` that this will help.",
        "createdAt": "2024-04-22T18:59:20Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I think you should be passing `interactive` through here",
              "createdAt": "2024-01-24T23:40:46Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -248,6 +248,11 @@ public ProjectInstance(string projectFile, IDictionary<string, string> globalPro\n         {\n         }\n \n+        public ProjectInstance(string projectFile, IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectCollection projectCollection, EvaluationContext context, bool interactive = false)\n+            : this(projectFile, globalProperties, toolsVersion, subToolsetVersion, projectCollection, projectLoadSettings: null, evaluationContext: context, directoryCacheFactory: null, interactive: false)",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`internal`? Or new public interface OK?",
              "createdAt": "2024-01-24T23:41:21Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -248,6 +248,11 @@ public ProjectInstance(string projectFile, IDictionary<string, string> globalPro\n         {\n         }\n \n+        public ProjectInstance(string projectFile, IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectCollection projectCollection, EvaluationContext context, bool interactive = false)",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "This feels useful to me in general and there are many public overloads already (it needs doc comments though).",
              "createdAt": "2024-01-25T15:52:04Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -248,6 +248,11 @@ public ProjectInstance(string projectFile, IDictionary<string, string> globalPro\n         {\n         }\n \n+        public ProjectInstance(string projectFile, IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectCollection projectCollection, EvaluationContext context, bool interactive = false)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Looking at this further, none of the public overloads feature an `EvaluationContext` so I think this was right after all.",
              "createdAt": "2024-04-22T20:21:39Z",
              "path": "src/Build/Instance/ProjectInstance.cs",
              "diffHunk": "@@ -248,6 +248,11 @@ public ProjectInstance(string projectFile, IDictionary<string, string> globalPro\n         {\n         }\n \n+        public ProjectInstance(string projectFile, IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectCollection projectCollection, EvaluationContext context, bool interactive = false)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Unsure if it's worth it: `static`?",
              "createdAt": "2024-01-24T23:42:05Z",
              "path": "src/Build/Graph/ProjectGraph.cs",
              "diffHunk": "@@ -56,6 +57,8 @@ public sealed class ProjectGraph\n \n         private readonly Lazy<IReadOnlyCollection<ProjectGraphNode>> _projectNodesTopologicallySorted;\n \n+        private readonly EvaluationContext _evaluationContext = EvaluationContext.Create(EvaluationContext.SharingPolicy.Shared);",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Nvm, wouldn't want to share across different graphs, which might be constructed at different times.\r\n",
              "createdAt": "2024-01-24T23:42:36Z",
              "path": "src/Build/Graph/ProjectGraph.cs",
              "diffHunk": "@@ -56,6 +57,8 @@ public sealed class ProjectGraph\n \n         private readonly Lazy<IReadOnlyCollection<ProjectGraphNode>> _projectNodesTopologicallySorted;\n \n+        private readonly EvaluationContext _evaluationContext = EvaluationContext.Create(EvaluationContext.SharingPolicy.Shared);",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Might be overthinking this, but this seems the `EvaluationContext` in scope for the lifetime of the graph when it's only needed for graph construction.\r\n\r\nConsider something like this instead, which is effectively what we do for QuickBuild:\r\n\r\n```cs\r\nif (projectInstanceFactory == null)\r\n{\r\n    EvaluationContext evaluationContext = EvaluationContext.Create(EvaluationContext.SharingPolicy.Shared);\r\n   projectInstanceFactory = (string projectPath, Dictionary<string, string> globalProperties, ProjectCollection projectCollection) =>new ProjectInstance(\r\n                projectPath,\r\n                globalProperties,\r\n                MSBuildConstants.CurrentToolsVersion,\r\n                subToolsetVersion: null,\r\n                projectCollection,\r\n                evaluationContext);\r\n}\r\n```",
              "createdAt": "2024-01-24T23:48:28Z",
              "path": "src/Build/Graph/ProjectGraph.cs",
              "diffHunk": "@@ -742,16 +745,31 @@ private static ImmutableList<string> ExpandDefaultTargets(ImmutableList<string>\n             return targets;\n         }\n \n-        internal static ProjectInstance DefaultProjectInstanceFactory(\n+        internal ProjectInstance DefaultProjectInstanceFactory(",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "I guess the `ProjectInstance` objects hold onto the `EvaluationContext` anyway, so probably doesn't matter. I guess it avoids one `EvaluationContext` allocation if a factory isn't provided, but that's pretty small potatoes.",
              "createdAt": "2024-01-24T23:56:06Z",
              "path": "src/Build/Graph/ProjectGraph.cs",
              "diffHunk": "@@ -742,16 +745,31 @@ private static ImmutableList<string> ExpandDefaultTargets(ImmutableList<string>\n             return targets;\n         }\n \n-        internal static ProjectInstance DefaultProjectInstanceFactory(\n+        internal ProjectInstance DefaultProjectInstanceFactory(",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "This would keep the existing allocations for the existing cases where the factory is provided, I like it.",
              "createdAt": "2024-04-22T19:00:34Z",
              "path": "src/Build/Graph/ProjectGraph.cs",
              "diffHunk": "@@ -742,16 +745,31 @@ private static ImmutableList<string> ExpandDefaultTargets(ImmutableList<string>\n             return targets;\n         }\n \n-        internal static ProjectInstance DefaultProjectInstanceFactory(\n+        internal ProjectInstance DefaultProjectInstanceFactory(",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh actually there's a smaller code change to accomplish the same goal, which I'm going to take: only initialize the context if necessary.",
              "createdAt": "2024-04-22T20:23:59Z",
              "path": "src/Build/Graph/ProjectGraph.cs",
              "diffHunk": "@@ -742,16 +745,31 @@ private static ImmutableList<string> ExpandDefaultTargets(ImmutableList<string>\n             return targets;\n         }\n \n-        internal static ProjectInstance DefaultProjectInstanceFactory(\n+        internal ProjectInstance DefaultProjectInstanceFactory(",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}