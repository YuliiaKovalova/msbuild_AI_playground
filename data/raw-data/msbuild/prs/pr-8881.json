{
  "number": 8881,
  "title": "Misc fixes for /question build",
  "body": " - Fix an merge error in GenerateResource.NothingOutOfDate\r\n - Avoid the complex state in WriteLines when Lines are empty.  /question just always returns true.  Add a test.\r\n - Add Tracker to bootstrap, makes dogfooding C++ easier.\r\n - Add SkipUnchangedFiles to avoid extra copy.",
  "state": "MERGED",
  "createdAt": "2023-06-14T00:39:25Z",
  "updatedAt": "2023-08-04T08:17:35Z",
  "closedAt": "2023-08-04T08:17:35Z",
  "mergedAt": "2023-08-04T08:17:35Z",
  "additions": 62,
  "deletions": 5,
  "changedFiles": 5,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "yuehuang010"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0ae82589f60cea5bcf493f6c88e904bfe6790a64",
          "message": "Dev/yuehuang/main rar (#1)\n\n* Add Question switch to stop the build when targets are not incremental.\r\n\r\n* Add question property to tasks.\r\n\r\n* Add tests\r\n\r\n* Clean up IIncrementalTask interface.\r\n\r\n* Add additional tasks.\r\n\r\n* Test and Question on this repro.\r\n\r\n* fix build\r\n\r\n* Fix question in -m.  Fix BindingRedirect to target incremental.\r\n\r\n* Fix tests for Linux.\r\n\r\n* WIP\r\n\r\n* Fix feedbacks\r\n\r\n* .\r\n\r\n* Revert condition.\r\n\r\n* fix feedback.\r\n\r\n* touch to rerun.\r\n\r\n* Fix merge.\r\n\r\n* Fix merge pt2\r\n\r\n* Fix merge p3\r\n\r\n* Fix fileState when it couldn't resolve some files.\r\n\r\n* Fix merge\r\n\r\n* Address feedbacks\r\n\r\n* Fix test.\r\n\r\n* Clean up.\r\n\r\n* WIP\r\n\r\n* Fix Feedback\r\n\r\n* Fix Feedback.\r\n\r\n* Update tests\r\n\r\n* Address some feedbacks.\r\n\r\n* Fix merge conflict\r\n\r\n* .",
          "committedDate": "2023-06-14T00:31:28Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dbdd2e06961e783254a66f7f3729532e49b3a510",
          "message": "Improve the messaging for ResGen in question mode.",
          "committedDate": "2023-06-15T23:38:13Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "058d5fc24191a713f099293e820e32610cdbd96e",
          "message": "Fix Style",
          "committedDate": "2023-06-20T22:16:41Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ce6e1ec527cf17276959d9efba083425153b890a",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild",
          "committedDate": "2023-06-21T19:15:10Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "658956a863e2007e4032bfadd3100c309e75b200",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild",
          "committedDate": "2023-06-27T21:49:27Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3ed64bf0a3765e8c0131e681b18c0e2e725d4c3b",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild",
          "committedDate": "2023-07-25T19:30:34Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d955f2ef66e54542328cd11dfe5e90cbebc25ecf",
          "message": "Revert GenerateResource into separate PR.",
          "committedDate": "2023-07-25T19:33:47Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@yuehuang010 - would it be possible to split into separate PRs? I know it's small changes, but it's easier to review single intent.\r\n\r\n* The `WriteLines` change looks good to me. \r\n* Tracker possibly as well. \r\n* GenerateResource.NothingOutOfDate I'm possibly misunderstanding (`NothingOutOfDate` is now used for both states of condition - that feels strange) - explanation would help. \r\n* SkipUnchangedFiles - I need more details for that one.",
        "createdAt": "2023-06-15T10:25:43Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> * GenerateResource.NothingOutOfDate I'm possibly misunderstanding (`NothingOutOfDate` is now used for both states of condition - that feels strange) - explanation would help.\r\n\r\nAh, the message changed.  I might need to add another message.  The goal is to Log.Error then fail fast the task.  Hopefully the Error can provide an starting point for investigation.\r\n\r\n> * SkipUnchangedFiles - I need more details for that one.\r\n\r\nThis parameter will avoid copying the file if it determines if the source and destination are the same.  It will avoid an unnecessary disk write.\r\n\r\n",
        "createdAt": "2023-06-15T21:20:46Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "@yuehuang010 - your changes looks good and helpful! Do you want to spin off the GenerateResource incrementality into separate PR so that we can get this through signoff? (or improving it as part of this PR works great as well - if you'd agree with that).\r\nThank you!",
        "createdAt": "2023-07-25T10:42:06Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Oh snap, I forgot about this PR.  Lets quickly spin off GenRes.",
        "createdAt": "2023-07-25T17:16:33Z",
        "author": {
          "login": "yuehuang010"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "`\"Processing resource file \"{0}\" into \"{1}\".\"` lacks the information why this is an error.\r\nI'd suggest adding a new message which would be more explicit - something like `\"Incremental resource genearation was requested via 'FailIfNotIncremental' task parametr, however following inputs have changed: {0}\"`",
              "createdAt": "2023-06-22T12:01:46Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -725,7 +725,16 @@ public override bool Execute()\n                 }\n                 else if (FailIfNotIncremental)\n                 {\n-                    Log.LogErrorFromResources(\"GenerateResource.OutOfDate\");\n+                    int maxCount = Math.Min(inputsToProcess.Count, outputsToProcess.Count);\n+                    maxCount = Math.Min(maxCount, 5);  // Limit to just 5\n+\n+                    for (int index = 0; index < maxCount; index++)\n+                    {\n+                        // Log the file that would be process as an error.\n+                        Log.LogErrorFromResources(\"GenerateResource.ProcessingFile\", inputsToProcess[index], outputsToProcess[index]);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "The design is to use similar message for the \"work\" that would have started but error as a fail fast.  Incremental diagnostic message should be added regardless of `FailIfNotIncremental` but that would be beyond the scope of this PR.  New suggestion \ud83d\ude04.",
              "createdAt": "2023-06-23T00:34:41Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -725,7 +725,16 @@ public override bool Execute()\n                 }\n                 else if (FailIfNotIncremental)\n                 {\n-                    Log.LogErrorFromResources(\"GenerateResource.OutOfDate\");\n+                    int maxCount = Math.Min(inputsToProcess.Count, outputsToProcess.Count);\n+                    maxCount = Math.Min(maxCount, 5);  // Limit to just 5\n+\n+                    for (int index = 0; index < maxCount; index++)\n+                    {\n+                        // Log the file that would be process as an error.\n+                        Log.LogErrorFromResources(\"GenerateResource.ProcessingFile\", inputsToProcess[index], outputsToProcess[index]);",
              "author": {
                "login": "yuehuang010"
              }
            },
            {
              "body": "I like the idea of adding those as low-pri messages in all cases! That would be indeed helpful.\r\n\r\nIn case of error case - I'd like to see a message that is self descriptive and doesn't require code search when somebody hits this couple years down the road and reports it as an issue.",
              "createdAt": "2023-06-23T09:09:35Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -725,7 +725,16 @@ public override bool Execute()\n                 }\n                 else if (FailIfNotIncremental)\n                 {\n-                    Log.LogErrorFromResources(\"GenerateResource.OutOfDate\");\n+                    int maxCount = Math.Min(inputsToProcess.Count, outputsToProcess.Count);\n+                    maxCount = Math.Min(maxCount, 5);  // Limit to just 5\n+\n+                    for (int index = 0; index < maxCount; index++)\n+                    {\n+                        // Log the file that would be process as an error.\n+                        Log.LogErrorFromResources(\"GenerateResource.ProcessingFile\", inputsToProcess[index], outputsToProcess[index]);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}