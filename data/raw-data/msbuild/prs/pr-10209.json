{
  "number": 10209,
  "title": "Permit throwaway parameters",
  "body": "Fixes #\r\n\r\n### Context\r\nThis is to permit users to use functions with out parameters and ref parameters as long as they don't care about the values that come out of them. Specifically, if a parameter is specified by '_', it will look for any method with the right name from the right assembly and try to match based on number of parameters. If there are multiple options, it will throw; if there is only one, it will execute it after tweaking all the _ to have the right type.\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\nI used this project file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net9.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <FooProp>$([System.Int32]::TryParse(\"bah\", _))</FooProp>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"Foo\">\r\n    <Message Importance=\"High\" Text=\"Found value $(FooProp)\" />\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\nThis printed out 'Found value False' when built with /t:Foo. I replaced 'bah' with '3', and it printed 'Found value True' instead.\r\n\r\n### Notes\r\n/cc: @baronfel @rainersigwald This is currently a draft for three reasons:\r\n1. ~~I'm not a huge fan of requiring outParamType, but I'm not sure if there's a better way of doing this. I figure it would be good to get feedback on that and/or think about it more.~~ This is cleaner now.\r\n2. I haven't tested this all that much.\r\n3. ~~I'd _like_ to make it so you can specify a property, and we'll take the output parameter and stuff it in that. That might be hard, though, so I'm not fully committed to that yet.~~ rainersigwald suggested I shouldn't worry about this, and baronfel said it was fine to leave out, at least for a first iteration.",
  "state": "MERGED",
  "createdAt": "2024-06-06T17:35:02Z",
  "updatedAt": "2024-07-19T06:56:42Z",
  "closedAt": "2024-07-19T06:56:41Z",
  "mergedAt": "2024-07-19T06:56:41Z",
  "additions": 154,
  "deletions": 2,
  "changedFiles": 16,
  "headRefName": "add-int-parse-function",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0b184d3665413631a60de3aeecefd7612b28a137",
          "message": "Permit throwaway parameters",
          "committedDate": "2024-06-06T17:30:54Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a35f0df8fe575d4b368324b83a471244a072bcce",
          "message": "Switch to _",
          "committedDate": "2024-06-06T19:22:37Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3218e256c7bd8064d94237740e9298e9641bffdf",
          "message": "Fix NRE",
          "committedDate": "2024-06-06T19:55:06Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e77f97745c7dc32599120ecd7a62aa4306ea336e",
          "message": "Real NRE fix",
          "committedDate": "2024-06-06T20:37:43Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a81b73d4e1927bce59cfff2d202f297a731a0b2e",
          "message": "Create real string",
          "committedDate": "2024-06-07T17:14:23Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8d6c0f24d905151c85a05218205989231ce9329d",
          "message": "Refactor and make work again",
          "committedDate": "2024-06-07T19:04:24Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2dbbbcf9ec49005f58ac76fdb530402385041611",
          "message": "With TESTS!",
          "committedDate": "2024-06-07T19:04:33Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> If there are multiple options, it will throw; if there is only one, it will execute it after tweaking all the _ to have the right type.\r\n\r\nI am a bit concerned about this behavior. What if the msbuild project will be written assuming the only overload of some function exists and this changes - for example a new overload of the function will be added, having the same parameters except for the out parameter? This will break build. \r\n\r\nIf it were a C# code, the error would be thrown by a compiler about ambiguity when the dependency version is upgraded. In this case the project will stop correctly build with all higher msbuild versions, if I understand it correctly.",
        "createdAt": "2024-06-11T15:35:07Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "> > If there are multiple options, it will throw; if there is only one, it will execute it after tweaking all the _ to have the right type.\r\n> \r\n> I am a bit concerned about this behavior. What if the msbuild project will be written assuming the only overload of some function exists and this changes - for example a new overload of the function will be added, having the same parameters except for the out parameter? This will break build.\r\n> \r\n> If it were a C# code, the error would be thrown by a compiler about ambiguity when the dependency version is upgraded. In this case the project will stop correctly build with all higher msbuild versions, if I understand it correctly.\r\n\r\nI think your concern here is totally valid. In fact, the first way I implemented this got around that as a potential problem by having the user specify which type they wanted for every out parameter, so it would look like this:\r\n$([System.Int32]::TryParse($(VariableThatMightBeAnInteger), outParamSystem.Int32))\r\n\r\nThe positive side of that is that it would resolve any possible ambiguities by having the user resolve them for us. The downside is that that notation is ugly and nonintuitive. Since _ is what C# uses, that's more intuitive as well as being much cleaner.\r\n\r\nI honestly don't know how common this would be as a problem. Since C# permits you to specify out parameters with _, I would hope that they don't have ambiguous terms like that built into the language\u2014would adding one count as a breaking change for C#?\u2014but they may exist. I did put in a custom error message that would hopefully be clear enough that any user encountering it would know what went wrong and how to fix it, but I know error messages are never as clear to users as they are to the people who created them.\r\n\r\nOne saving grace for this PR is that it explicitly does not break anything that currently works. You can't currently specify a parameter with _ in MSBuild. The only code path that this PR affects is if you start doing that. So although you're right that someone could start relying on this change, then be suddenly broken by a change in C# that adds a new overload for a method, I believe that's the only way they could be broken\u2014they won't be broken by this change until they decide to use it.\r\n\r\nI'm honestly ok going down either path: pretty parameter or no possibility of a change in some assembly breaking someone's build through this feature.",
        "createdAt": "2024-06-11T18:26:13Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Nice improvement.\r\n> \r\n> Let's please request the https://learn.microsoft.com/en-us/visualstudio/msbuild/property-functions documentation update (via https://github.com/dotnet/docs/issues, or direct PR in https://github.com/MicrosoftDocs/visualstudio-docs-pr) and make it explicit there is a limitation with possible backwards compatibility issues\r\n\r\nDone!",
        "createdAt": "2024-07-18T15:52:16Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}