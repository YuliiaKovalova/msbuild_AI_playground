{
  "number": 5994,
  "title": "Support gathering additional arbitrary properties from referenced projects",
  "body": "This allows additional properties to be gathered from project references via the project reference protocol.  This is in order to support generating an error when a self-contained Executable references a non-SelfContained Executable, or vice versa, as described in dotnet/sdk#15117.\r\n\r\nThe referenced project can declare what additional properties should be gathered with `AdditionalTargetFrameworkInfoProperty` items:\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <AdditionalTargetFrameworkInfoProperty Include=\"SelfContained\"/>\r\n    <AdditionalTargetFrameworkInfoProperty Include=\"_IsExecutable\"/>\r\n  </ItemGroup>\r\n```\r\n\r\nThese items will then be included in the `AdditionalPropertiesFromProject` metadata on the `_MSBuildProjectReferenceExistent` items.  This value will have `PropertyName=PropertyValue` combinations joined by semicolons, and those sets of properties for the different `TargetFramework` values will be joined by double semicolons.  For example, a project multitargeted to two TargetFrameworks may have the following for the `AdditionalPropertiesFromProject` metadata:\r\n\r\n```\r\nSelfContained=true;_IsExecutable=true;;SelfContained=false;_IsExecutable=true\r\n```\r\n\r\nFinding the right set of properties from the referenced project will required looking up the index of the `NearestTargetFramework` in the `TargetFrameworks`, and using that index to select the set of properties in the `AdditionalPropertiesFromProject` metadata.  For example:\r\n\r\n```C#\r\nstring nearestTargetFramework = project.GetMetadata(\"NearestTargetFramework\");\r\nint targetFrameworkIndex = project.GetMetadata(\"TargetFrameworks\").Split(';').ToList().IndexOf(nearestTargetFramework);\r\nstring projectAdditionalPropertiesMetadata = project.GetMetadata(\"AdditionalPropertiesFromProject\").Split(new[] { \";;\" }, StringSplitOptions.None)[targetFrameworkIndex];\r\nDictionary<string, string> projectAdditionalProperties = new(StringComparer.OrdinalIgnoreCase);\r\nforeach (var propAndValue in projectAdditionalPropertiesMetadata.Split(';'))\r\n{\r\n    var split = propAndValue.Split('=');\r\n    projectAdditionalProperties[split[0]] = split[1];\r\n}\r\n```\r\n\r\nThis is implemented in dotnet/sdk#15134.\r\n\r\nIf anyone has suggestions for a better separator than a double semicolon to separate the list of property/values for each TargetFramework, let me know.",
  "state": "MERGED",
  "createdAt": "2020-12-31T03:04:33Z",
  "updatedAt": "2021-06-22T16:32:41Z",
  "closedAt": "2021-02-03T19:10:39Z",
  "mergedAt": "2021-02-03T19:10:39Z",
  "additions": 202,
  "deletions": 0,
  "changedFiles": 9,
  "headRefName": "additional-targetframeworkinfo-properties",
  "isDraft": false,
  "author": {
    "login": "dsplaisted"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "19284a38bc567cccc2610d0f3220358c98eb519b",
          "message": "Support gathering additional arbitrary properties from referenced projects",
          "committedDate": "2020-12-31T02:51:27Z",
          "author": {
            "name": "Daniel Plaisted",
            "email": "daplaist@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9ca4269df444fc19a6dbc429b6d1f49a42b7ba4f",
          "message": "Use Xml for gathering additional properties from referenced projects",
          "committedDate": "2021-01-26T06:48:33Z",
          "author": {
            "name": "Daniel Plaisted",
            "email": "daplaist@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "63cd06efa36f70d815a266b3dc7f5292ef75cbfe",
          "message": "Fix tasks when inputs not set",
          "committedDate": "2021-01-27T02:42:03Z",
          "author": {
            "name": "Daniel Plaisted",
            "email": "daplaist@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8682eb1fdbfe57b0f50defe97caa7e08478543e2",
          "message": "Apply code review feedback",
          "committedDate": "2021-01-29T20:10:35Z",
          "author": {
            "name": "Daniel Plaisted",
            "email": "daplaist@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@forgind I think it will handle empty properties and empty lists of properties correctly, though I'm not 100% sure.\r\n\r\nSomething like `Net472AdditionalPropertiesFromProject` won't work, as it needs to collect properties from whatever target frameworks the referenced project defines, which is an open set.  See  dotnet/sdk#15134 for how this would be used.",
        "createdAt": "2020-12-31T19:21:44Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "This was my case:\r\n```\r\n<PropertyGroup>\r\n<EmptyProperty Condition=\"false\">x</EmptyProperty>\r\n<NotEmpty Condition=\"true\">value</NotEmpty>\r\n<AlsoNotEmpty Condition=\"true\">otherVal</AlsoNotEmpty>\r\n</PropertyGroup>\r\n...\r\n<PropertyGroup>\r\n<UsesProperties>$(AlsoNotEmpty);$(EmptyProperty);$(NotEmpty)</UsesProperties>\r\n</PropertyGroup>\r\n...\r\n```\r\n\r\nand then trying to pass that to another project. I'm not sure either, mostly because I get confused sometimes by item transforms and such. As I understand it, it would accept UsesProperties as a valid property (which it is) and add it to AdditionalPropertiesFromProject, then parsing would break the property in two, get confused, and silently use it incorrectly. I could be wrong.",
        "createdAt": "2020-12-31T21:14:27Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@cdmihai How would this interact with static graph?",
        "createdAt": "2021-01-06T01:15:37Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "High-level questions (this implementation looks ok but I wonder if we can improve the overall design).\r\n\r\n1. Would this be better as one-metadatum-per-TF? With names like `AdditionalPropertiesFromProject_net472`? That'd be somewhat harder to assemble but avoids (one layer of) the delimiting problem.\r\n2. Another option would be to pass it back as an XML blob. That's what solutions do for similar reasons.\r\n\r\nThose are both harder to implement with MSBuild logic and would suggest writing a new `AggregateMultitargetingInformation` task, but that'd probably be easy to implement and understand.\r\n\r\nIf we stick with delimited, maybe consider using one of the fancier unicode characters like [`INFORMATION SEPARATOR TWO`](https://www.fileformat.info/info/unicode/char/001e/index.htm)?",
        "createdAt": "2021-01-06T21:09:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Looks fine for static graph, as the msbuild task calling patterns haven't changed, just the data ferried by the calls, which is opaque to static graph builds.",
        "createdAt": "2021-01-06T23:33:34Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Can you also update the [protocol doc](https://github.com/dotnet/msbuild/blob/master/documentation/ProjectReference-Protocol.md) in this PR?",
        "createdAt": "2021-01-06T23:36:10Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Team triage:\r\n@dsplaisted\r\nJust checking whether the feedback on this was clear\u2014we don't think this is mergeable as-is without one of the changes rainersigwald proposed. If it's just that there are other things higher on your priority list, carry on.",
        "createdAt": "2021-01-22T23:57:58Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind I've updated this to use Xml to pass the data around",
        "createdAt": "2021-01-26T06:51:36Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Are the tests for this new flow in the sdk repo? If not, add some here?",
        "createdAt": "2021-01-27T02:08:37Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> Are the tests for this new flow in the sdk repo? If not, add some here?\r\n\r\nYes, tests for this are in dotnet/sdk#15134",
        "createdAt": "2021-01-27T02:11:00Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I've applied the code review feedback and retargeted this to the master branch for VS 16.10.",
        "createdAt": "2021-01-29T20:12:03Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Looks like this broke WCF as it doesn't handle cases like `portable-net45+win8+wp8`",
        "createdAt": "2021-06-21T23:01:10Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "> Looks like this broke WCF as it doesn't handle cases like `portable-net45+win8+wp8`\r\n\r\n@ericstj Do you have more details on how it broke?  Is it something we need to fix?  I don't know if we support the old PCL TFMs anymore.",
        "createdAt": "2021-06-22T01:09:31Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I filed https://github.com/dotnet/msbuild/issues/6603 to track the regression.  It was due to an invalid XML character in the TargetFramework.  I imagine a fix would be to make sure you escape the strings which seems like something you might want to do regardless.\r\n\r\nI was able to help WCF find a workaround since they aren't actually building for PCLs (they are just trying to use CSProj + pack to correctly represent a package which overlaps with the PCL targeting packs).  https://github.com/ericstj/wcf/commit/66e68f2da8699c913c7f3887bc9e32942f9053f1",
        "createdAt": "2021-06-22T16:32:40Z",
        "author": {
          "login": "ericstj"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "What does including `, ';;'` do? My test* didn't look like it did anything.\r\n\r\n\\* Looked at J's metadata after:\r\n```\r\n<I Include=\"\"initial\"\">\r\n<M>hi=one;not=two;;hi=three;or=four</M>\r\n</I>\r\n<J Include=\"\"@(I)\"\">\r\n<ExtraProp>@(I->'%(M)', ';;')</ExtraProp>\r\n<ExtraPropTwo>@(I->'%(M)')</ExtraPropTwo>\r\n</J>\r\n```",
              "createdAt": "2020-12-31T17:16:36Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1730,6 +1730,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n         <TargetFrameworks>@(_TargetFrameworkInfo)</TargetFrameworks>\n         <TargetFrameworkMonikers>@(_TargetFrameworkInfo->'%(TargetFrameworkMonikers)')</TargetFrameworkMonikers>\n         <TargetPlatformMonikers>@(_TargetFrameworkInfo->'%(TargetPlatformMonikers)')</TargetPlatformMonikers>\n+        <AdditionalPropertiesFromProject>@(_TargetFrameworkInfo->'%(AdditionalPropertiesFromProject)', ';;')</AdditionalPropertiesFromProject>",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It specifies what should be used to separate the items in the list when the list is converted to a string: https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-display-an-item-list-separated-with-commas?view=vs-2019\r\n\r\nYou would need more than one `I` item when testing it to see the difference.",
              "createdAt": "2020-12-31T19:15:58Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1730,6 +1730,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n         <TargetFrameworks>@(_TargetFrameworkInfo)</TargetFrameworks>\n         <TargetFrameworkMonikers>@(_TargetFrameworkInfo->'%(TargetFrameworkMonikers)')</TargetFrameworkMonikers>\n         <TargetPlatformMonikers>@(_TargetFrameworkInfo->'%(TargetPlatformMonikers)')</TargetPlatformMonikers>\n+        <AdditionalPropertiesFromProject>@(_TargetFrameworkInfo->'%(AdditionalPropertiesFromProject)', ';;')</AdditionalPropertiesFromProject>",
              "author": {
                "login": "dsplaisted"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "copyright header",
              "createdAt": "2021-01-26T16:49:51Z",
              "path": "src/Tasks/CombineTargetFrameworkInfoProperties.cs",
              "diffHunk": "@@ -0,0 +1,34 @@\n+\ufeffusing Microsoft.Build.Framework;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "copyright header",
              "createdAt": "2021-01-26T16:49:59Z",
              "path": "src/Tasks/CombineXmlElements.cs",
              "diffHunk": "@@ -0,0 +1,34 @@\n+\ufeffusing Microsoft.Build.Framework;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "return !HasLoggedErrors? Same below.",
              "createdAt": "2021-01-26T23:15:11Z",
              "path": "src/Tasks/CombineTargetFrameworkInfoProperties.cs",
              "diffHunk": "@@ -0,0 +1,34 @@\n+\ufeffusing Microsoft.Build.Framework;\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using System.Xml.Linq;\n+\n+namespace Microsoft.Build.Tasks\n+{\n+    public class CombineTargetFrameworkInfoProperties : TaskExtension\n+    {\n+        public string RootElementName { get; set; }\n+\n+        public ITaskItem[] PropertiesAndValues { get; set; }\n+\n+        [Output]\n+        public string Result { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            XElement root = new XElement(RootElementName);\n+\n+            foreach (var item in PropertiesAndValues)\n+            {\n+                root.Add(new XElement(item.ItemSpec, item.GetMetadata(\"Value\")));\n+            }\n+\n+            Result = root.ToString();\n+\n+            return true;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Required annotations for these?",
              "createdAt": "2021-01-26T23:17:34Z",
              "path": "src/Tasks/CombineXmlElements.cs",
              "diffHunk": "@@ -0,0 +1,34 @@\n+\ufeffusing Microsoft.Build.Framework;\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using System.Xml.Linq;\n+\n+namespace Microsoft.Build.Tasks\n+{\n+    public class CombineXmlElements : TaskExtension\n+    {\n+        public string RootElementName { get; set; }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I didn't realize you could have a metadata reference as an identifier for a property. Neat!",
              "createdAt": "2021-01-26T23:19:33Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -1743,12 +1751,26 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   <Target Name=\"GetTargetFrameworksWithPlatformForSingleTargetFramework\"\n         Returns=\"@(_TargetFrameworkInfo)\">\n \n+    <ItemGroup>\n+      <_AdditionalTargetFrameworkInfoPropertyWithValue Include=\"@(AdditionalTargetFrameworkInfoProperty)\">\n+        <Value>$(%(AdditionalTargetFrameworkInfoProperty.Identity))</Value>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}