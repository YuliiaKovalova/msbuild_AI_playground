{
  "number": 11802,
  "title": "Several allocation fixes in Scheduler.cs",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "OPEN",
  "createdAt": "2025-05-07T22:03:19Z",
  "updatedAt": "2025-05-15T15:05:33Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 53,
  "deletions": 26,
  "changedFiles": 1,
  "headRefName": "dev/erarndt/scheduler",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2c46b9634d845b47260b05337b2c3b5dd9d70829",
          "message": "Several allocation fixes in Scheduler.cs",
          "committedDate": "2025-05-06T23:57:35Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9e29441c779058e57b6c31995c2244bc1a18b04d",
          "message": "Remove unnecessary comment",
          "committedDate": "2025-05-13T17:39:28Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "This appears to have killed all the pipelines in a weird way.\r\nIf/when the last one dies, we can try re-running to see if this reproduces consistently. If yes, then a second look is in order.\r\nBtw. how can a pipeline run for more than a day without getting killed/timing out? ",
        "createdAt": "2025-05-09T12:25:51Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "> [msbuild-pr (Windows Full Release (no bootstrap))](https://github.com/dotnet/msbuild/pull/11802/checks?check_run_id=42159458853)Started 2 days ago \u2014 This check has started...\r\nI'm not sure I ever saw something similar. Shouldn't it time out or something?",
        "createdAt": "2025-05-15T14:24:34Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "Not sure why AzDO reported an indefinite hang to GitHub but it looks like this change fully breaks MSBuild -- all the build jobs that bootstrap hung immediately and I guess the tests hung on the don't-bootstrap (full/release) leg.",
        "createdAt": "2025-05-15T15:05:31Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "The loop order in AssignUnscheduledRequestsFIFO has been reversed, which may affect the intended FIFO scheduling behavior. Please verify that iterating unscheduled requests first and then idle nodes produces the expected request assignment order.\n```suggestion\n            foreach (int nodeId in idleNodes)\n```",
              "createdAt": "2025-05-07T22:04:14Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1246,7 +1247,7 @@ private void AssignUnscheduledRequestsWithMaxWaitingRequests2(List<ScheduleRespo\n         private void AssignUnscheduledRequestsFIFO(List<ScheduleResponse> responses, HashSet<int> idleNodes)\n         {\n             // Assign requests on a first-come/first-serve basis\n-            foreach (int nodeId in idleNodes)\n+            foreach (SchedulableRequest unscheduledRequest in _schedulingData.UnscheduledRequestsWhichCanBeScheduled)",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Using _schedulingData.UnscheduledRequestsCount as the list capacity assumes it matches the actual number of unscheduled requests. Please ensure that this value is always in sync with _schedulingData.UnscheduledRequestsWhichCanBeScheduled to avoid potential resizing during list population.\n```suggestion\n                List<SchedulableRequest> unscheduledRequests = new List<SchedulableRequest>(_schedulingData.UnscheduledRequestsWhichCanBeScheduled.Count);\n```",
              "createdAt": "2025-05-07T22:04:14Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -991,7 +991,8 @@ private void AssignUnscheduledRequestsToInProcNode(List<ScheduleResponse> respon\n         {\n             if (idleNodes.Contains(InProcNodeId))\n             {\n-                List<SchedulableRequest> unscheduledRequests = new List<SchedulableRequest>(_schedulingData.UnscheduledRequestsWhichCanBeScheduled);\n+                List<SchedulableRequest> unscheduledRequests = new List<SchedulableRequest>(_schedulingData.UnscheduledRequestsCount);",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you elaborate on this? Doesn't the next line realize the configs?",
              "createdAt": "2025-05-12T15:35:56Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2076,6 +2089,21 @@ bool SkipNonexistentTargetsIfExistentTargetsHaveResults(BuildRequest buildReques\n                 // to skip nonexistent targets.\n                 return true;\n             }\n+\n+            static Action<ILoggingService> GetLoggingServiceAction(IConfigCache configCache, BuildRequest request, SchedulingData schedulingData)\n+            {\n+                // retrieving the configs is not quite free, so avoid computing them eagerly",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh this is copy/pasted from the original. Not sure I see the benefit of this extraction, does it cause some subtle allocation thing?",
              "createdAt": "2025-05-12T15:43:03Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2076,6 +2089,21 @@ bool SkipNonexistentTargetsIfExistentTargetsHaveResults(BuildRequest buildReques\n                 // to skip nonexistent targets.\n                 return true;\n             }\n+\n+            static Action<ILoggingService> GetLoggingServiceAction(IConfigCache configCache, BuildRequest request, SchedulingData schedulingData)\n+            {\n+                // retrieving the configs is not quite free, so avoid computing them eagerly",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The goal here is to avoid the allocation of a closure object, and an unfortunate consequence is that if there's a capture anywhere in the body of the method, the closure object is created. This happens regardless of if the code that would use the closure is called.  For example this:\r\n\r\n        public static Action Test(int input)\r\n        {\r\n            Action action;\r\n\r\n            if (input < int.MinValue)\r\n            {\r\n                action = () => Console.WriteLine(input);\r\n            }\r\n            else\r\n            {\r\n                action = () => { };\r\n            }\r\n\r\n            return action;\r\n        }\r\n\r\nCompiles to this:\r\n\r\n\tpublic static Action Test(int input)\r\n\t{\r\n\t\t<>c__DisplayClass1_0 <>c__DisplayClass1_ = new <>c__DisplayClass1_0();\r\n\t\t<>c__DisplayClass1_.input = input;\r\n\t\tif (<>c__DisplayClass1_.input < int.MinValue)\r\n\t\t{\r\n\t\t\treturn <>c__DisplayClass1_.<Test>b__0;\r\n\t\t}\r\n\t\treturn <>c.<>9__1_1 ?? (<>c.<>9__1_1 = <>c.<>9.<Test>b__1_1);\r\n\t}\r\n\r\n`c__DisplayClass1_0` is unconditionally allocated.\r\n\r\nBy pulling the offending code into a local function, we avoid the unconditional allocation:\r\n\r\n        public static Action Test(int input)\r\n        {\r\n            Action action;\r\n\r\n            if (input < int.MinValue)\r\n            {\r\n                action = WriteConsoleAction();\r\n            }\r\n            else\r\n            {\r\n                action = () => { };\r\n            }\r\n\r\n            return action;\r\n\r\n            Action WriteConsoleAction()\r\n            {\r\n                return () => Console.WriteLine(input);\r\n            }\r\n        }\r\n        \r\n Instead, we only allocate when we call the local function:\r\n\r\n\tpublic static Action Test(int input)\r\n\t{\r\n\t\tif (input < int.MinValue)\r\n\t\t{\r\n\t\t\treturn WriteConsoleAction(input);\r\n\t\t}\r\n\t\treturn <>c.<>9__1_0 ?? (<>c.<>9__1_0 = <>c.<>9.<Test>b__1_0);\r\n\t\tstatic Action WriteConsoleAction(int input)\r\n\t\t{\r\n\t\t\t<>c__DisplayClass1_0 <>c__DisplayClass1_ = new <>c__DisplayClass1_0();\r\n\t\t\t<>c__DisplayClass1_.input = input;\r\n\t\t\treturn <>c__DisplayClass1_.<Test>b__2;\r\n\t\t}\r\n\t}\r\n\r\nCreating the `Action` requires capturing some state objects, and we can avoid this by moving to a static local function. I can add comments or clarify this somehow. What would help?",
              "createdAt": "2025-05-12T18:40:53Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2076,6 +2089,21 @@ bool SkipNonexistentTargetsIfExistentTargetsHaveResults(BuildRequest buildReques\n                 // to skip nonexistent targets.\n                 return true;\n             }\n+\n+            static Action<ILoggingService> GetLoggingServiceAction(IConfigCache configCache, BuildRequest request, SchedulingData schedulingData)\n+            {\n+                // retrieving the configs is not quite free, so avoid computing them eagerly",
              "author": {
                "login": "Erarndt"
              }
            },
            {
              "body": "One note, this statement `return <>c.<>9__1_0 ?? (<>c.<>9__1_0 = <>c.<>9.<Test>b__1_0);` assigns the non-capturing delegate to a static field that gets reused. No additional allocations here.",
              "createdAt": "2025-05-12T18:42:53Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2076,6 +2089,21 @@ bool SkipNonexistentTargetsIfExistentTargetsHaveResults(BuildRequest buildReques\n                 // to skip nonexistent targets.\n                 return true;\n             }\n+\n+            static Action<ILoggingService> GetLoggingServiceAction(IConfigCache configCache, BuildRequest request, SchedulingData schedulingData)\n+            {\n+                // retrieving the configs is not quite free, so avoid computing them eagerly",
              "author": {
                "login": "Erarndt"
              }
            },
            {
              "body": "> if there's a capture anywhere in the body of the method, the closure object is created.\r\n\r\nTIL. This makes sense then. I'd remove the comment since it's meaningless in this context--the idea was \"don't create the context if you won't need it\" but if this method is called you need it.",
              "createdAt": "2025-05-12T18:45:27Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -2076,6 +2089,21 @@ bool SkipNonexistentTargetsIfExistentTargetsHaveResults(BuildRequest buildReques\n                 // to skip nonexistent targets.\n                 return true;\n             }\n+\n+            static Action<ILoggingService> GetLoggingServiceAction(IConfigCache configCache, BuildRequest request, SchedulingData schedulingData)\n+            {\n+                // retrieving the configs is not quite free, so avoid computing them eagerly",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What's the motivation for the switch? Document in a comment.",
              "createdAt": "2025-05-12T15:36:34Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1246,7 +1247,7 @@ private void AssignUnscheduledRequestsWithMaxWaitingRequests2(List<ScheduleRespo\n         private void AssignUnscheduledRequestsFIFO(List<ScheduleResponse> responses, HashSet<int> idleNodes)\n         {\n             // Assign requests on a first-come/first-serve basis\n-            foreach (int nodeId in idleNodes)\n+            foreach (SchedulableRequest unscheduledRequest in _schedulingData.UnscheduledRequestsWhichCanBeScheduled)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Enumerating over `UnscheduledRequestsWhichCanBeScheduled` is more expensive than enumerating over `idleNodes` (`HashSet<int>`). To enumerate `UnscheduledRequestsWhichCanBeScheduled`, we allocate a new enumerator each time (from the yield return) and the linked list enumeration is slightly slower too. I can add a comment to clarify if we want to keep this change.",
              "createdAt": "2025-05-12T18:22:40Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -1246,7 +1247,7 @@ private void AssignUnscheduledRequestsWithMaxWaitingRequests2(List<ScheduleRespo\n         private void AssignUnscheduledRequestsFIFO(List<ScheduleResponse> responses, HashSet<int> idleNodes)\n         {\n             // Assign requests on a first-come/first-serve basis\n-            foreach (int nodeId in idleNodes)\n+            foreach (SchedulableRequest unscheduledRequest in _schedulingData.UnscheduledRequestsWhichCanBeScheduled)",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      }
    ]
  }
}