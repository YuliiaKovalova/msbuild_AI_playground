{
  "number": 6368,
  "title": "Improve plugin exception logging",
  "body": "### Context\r\nTreat project cache exceptions similar to how MSBuild treats exceptions from `ILogger.Initialize` and `ILogger.Shutdown`. This avoids the \"file an issue against the MSBuild team\" console messages.\r\nTreat errors logged by the project cache similar to how MSBuild treats errors logged by tasks. Which is to check whether they logged an error and if yes, shut the build down (project cache does not do \"continue on error\").\r\n\r\n### Changes Made\r\n- Adds a `ProjectCacheException` which gets handled similarly to `LoggerException`\r\n\r\n### Testing\r\n- Beefed up the existing exception handling tests to also assert what happens when the project cache logs errors instead of throwing exceptions.",
  "state": "MERGED",
  "createdAt": "2021-04-22T23:20:55Z",
  "updatedAt": "2021-04-27T01:27:26Z",
  "closedAt": "2021-04-27T01:27:21Z",
  "mergedAt": "2021-04-27T01:27:21Z",
  "additions": 439,
  "deletions": 146,
  "changedFiles": 24,
  "headRefName": "improvePluginExceptionLogging",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5e3136da7ade856a68cd8f1ce984022826cfca4a",
          "message": "Add ProjectCacheException",
          "committedDate": "2021-04-23T18:28:58Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bf8c2f7bec4300b82cad87dbc29cb80919828fdc",
          "message": "use pattern matching",
          "committedDate": "2021-04-23T18:28:58Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fe5091dd1797dd05952515509c64b4e32d8a5273",
          "message": "Print unhandled exceptions from the project cache on the cmdline",
          "committedDate": "2021-04-23T18:28:59Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5809a656fe619be1ce97baab048000a95f202f67",
          "message": "rename",
          "committedDate": "2021-04-23T18:28:59Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "becaa3eca628df775fcf3addb0c6fe14f96d68ed",
          "message": "Update tests to assert for logged errors",
          "committedDate": "2021-04-23T18:28:59Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1d3b2b434c5fbae50059aa836cb7ff43a6ca6fdd",
          "message": "Use a new logger instance for each API call\n\nFixes the issue of Logger.HasLoggedErrors leaking between API calls",
          "committedDate": "2021-04-23T18:28:59Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f7914cf92b9295b351da6e9b68c9d154dec6409c",
          "message": "Print the exception message even when the cache logged an error\n\nIn this case the exception is not what the cache printed, but MSBuild's message that the cache logged an error",
          "committedDate": "2021-04-23T18:28:59Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a617a422ecb2e857e001dfeb23e2989643e7e1d0",
          "message": "update refs",
          "committedDate": "2021-04-23T18:28:59Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "252e02390f126adbcf1fae820a165c9b56ef7d65",
          "message": "Use ProjectCacheException in other places in BuildManager which catch user errors w.r.t. project cache",
          "committedDate": "2021-04-24T01:29:51Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "de4b85dc4cdcd4fa5b5ceacdfc0eeae6f7137eb2",
          "message": "Update src/Build/Resources/Strings.resx\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2021-04-26T21:03:06Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4956ba47518be3c580c8a81cc5f983898118a0d2",
          "message": "Remove spurious reference\n\nThere's a glob include for the entire ProjectCache directory above.",
          "committedDate": "2021-04-26T21:17:18Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "17b85792d8aea31a64693d35eae2a7e8f4a8f3b1",
          "message": "update xlf",
          "committedDate": "2021-04-26T21:30:50Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <value>MSB4273: The project cache threw an unhandled exception from the {0} method.</value>\r\n```\r\n\r\n```sh-session\r\n\u276f rg MSB427\\d -g *.resx\r\nsrc\\Build\\Resources\\Strings.resx\r\n322:    <value>MSB4271: Environment variable MSBuildDisableFeaturesFromVersion is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</value>\r\n323:    <comment>{StrBegin=\"MSB4271: \"}UE: Value should be of the format: xx.yy</comment>\r\n326:    <value>MSB4272: Environment variable MSBuildDisableFeaturesFromVersion is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</value>\r\n327:    <comment>{StrBegin=\"MSB4272: \"}</comment>\r\n1889:    <value>MSB4270: No project cache plugins found in assembly \"{0}\". Expected one.</value>\r\n```\r\n\r\n",
              "createdAt": "2021-04-26T19:08:55Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1888,6 +1888,9 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n   <data name=\"NoProjectCachePluginFoundInAssembly\" xml:space=\"preserve\">\n     <value>MSB4270: No project cache plugins found in assembly \"{0}\". Expected one.</value>\n   </data>\n+  <data name=\"ProjectCacheException\" xml:space=\"preserve\">\n+    <value>MSB4271: The project cache threw an unhandled exception from the {0} method.</value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good catch!",
              "createdAt": "2021-04-26T21:03:19Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1888,6 +1888,9 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n   <data name=\"NoProjectCachePluginFoundInAssembly\" xml:space=\"preserve\">\n     <value>MSB4270: No project cache plugins found in assembly \"{0}\". Expected one.</value>\n   </data>\n+  <data name=\"ProjectCacheException\" xml:space=\"preserve\">\n+    <value>MSB4271: The project cache threw an unhandled exception from the {0} method.</value>",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems bad either way it's spelled. Why not annotate the method as returning a nullable?",
              "createdAt": "2021-04-26T19:13:01Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -83,9 +92,7 @@ private static ProjectCachePluginBase GetPluginInstance(ProjectCacheDescriptor p\n \n             ErrorUtilities.ThrowInternalErrorUnreachable();\n \n-#pragma warning disable CS8603 // Possible null reference return.\n-            return null;\n-#pragma warning restore CS8603 // Possible null reference return.\n+            return null!;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yea, unfortunate inconvenient nullable pitfall. The method this is in should either return a cache instance or fail. The line above this one throws if execution reaches this point hence the `return null!` will never execute.",
              "createdAt": "2021-04-26T21:14:33Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -83,9 +92,7 @@ private static ProjectCachePluginBase GetPluginInstance(ProjectCacheDescriptor p\n \n             ErrorUtilities.ThrowInternalErrorUnreachable();\n \n-#pragma warning disable CS8603 // Possible null reference return.\n-            return null;\n-#pragma warning restore CS8603 // Possible null reference return.\n+            return null!;",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Ohhh, gotcha. There's an annotation for that which I'll roll out someday :(",
              "createdAt": "2021-04-26T21:17:21Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -83,9 +92,7 @@ private static ProjectCachePluginBase GetPluginInstance(ProjectCacheDescriptor p\n \n             ErrorUtilities.ThrowInternalErrorUnreachable();\n \n-#pragma warning disable CS8603 // Possible null reference return.\n-            return null;\n-#pragma warning restore CS8603 // Possible null reference return.\n+            return null!;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this do something? Can it be removed?",
              "createdAt": "2021-04-26T19:50:19Z",
              "path": "src/Build/Microsoft.Build.csproj",
              "diffHunk": "@@ -801,4 +801,10 @@\n     <Compile Remove=\"Collections\\RetrievableEntryHashSet\\Originals\\*\" />\n   </ItemGroup>\n \n+  <ItemGroup>\n+    <Compile Update=\"BackEnd\\Components\\ProjectCache\\ProjectCacheException.cs\">\n+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yup, this was automatically added by VS. I'll remove it.",
              "createdAt": "2021-04-26T21:15:20Z",
              "path": "src/Build/Microsoft.Build.csproj",
              "diffHunk": "@@ -801,4 +801,10 @@\n     <Compile Remove=\"Collections\\RetrievableEntryHashSet\\Originals\\*\" />\n   </ItemGroup>\n \n+  <ItemGroup>\n+    <Compile Update=\"BackEnd\\Components\\ProjectCache\\ProjectCacheException.cs\">\n+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could this (and others) be wrapped in a new VerifyThrow instead?",
              "createdAt": "2021-04-26T22:52:45Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1943,16 +1947,18 @@ private DisposablePluginService SearchAndInitializeProjectCachePluginFromGraph(P\n                 return new DisposablePluginService(null);\n             }\n \n-            ErrorUtilities.VerifyThrowInvalidOperation(\n-                cacheItems.Count == 1,\n-                \"OnlyOneCachePluginMustBeSpecified\",\n-                string.Join(\"; \", cacheItems.Select(ci => ci.PluginPath)));\n+            if (cacheItems.Count != 1)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Could be, but it may end up looking uglier since there's specific details like the exception type and what specific args to send to its particular constructor.",
              "createdAt": "2021-04-26T23:03:57Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1943,16 +1947,18 @@ private DisposablePluginService SearchAndInitializeProjectCachePluginFromGraph(P\n                 return new DisposablePluginService(null);\n             }\n \n-            ErrorUtilities.VerifyThrowInvalidOperation(\n-                cacheItems.Count == 1,\n-                \"OnlyOneCachePluginMustBeSpecified\",\n-                string.Join(\"; \", cacheItems.Select(ci => ci.PluginPath)));\n+            if (cacheItems.Count != 1)",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I was considering commenting similar, maybe the next iteration creates some plugin-specific ErrorUtilities method.",
              "createdAt": "2021-04-26T23:05:59Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1943,16 +1947,18 @@ private DisposablePluginService SearchAndInitializeProjectCachePluginFromGraph(P\n                 return new DisposablePluginService(null);\n             }\n \n-            ErrorUtilities.VerifyThrowInvalidOperation(\n-                cacheItems.Count == 1,\n-                \"OnlyOneCachePluginMustBeSpecified\",\n-                string.Join(\"; \", cacheItems.Select(ci => ci.PluginPath)));\n+            if (cacheItems.Count != 1)",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "The exception creation patterns are so particular to ProjectCacheException I'd rather just have factory methods on the type. We could pass in lambdas to ErrorUtilities but I think that would just complicate it without much benefit.",
              "createdAt": "2021-04-26T23:09:44Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1943,16 +1947,18 @@ private DisposablePluginService SearchAndInitializeProjectCachePluginFromGraph(P\n                 return new DisposablePluginService(null);\n             }\n \n-            ErrorUtilities.VerifyThrowInvalidOperation(\n-                cacheItems.Count == 1,\n-                \"OnlyOneCachePluginMustBeSpecified\",\n-                string.Join(\"; \", cacheItems.Select(ci => ci.PluginPath)));\n+            if (cacheItems.Count != 1)",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Specific exception?",
              "createdAt": "2021-04-26T22:54:59Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -143,16 +155,25 @@ public async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildRequest\n                                    $\"\\n\\tTargets:[{string.Join(\", \", buildRequest.TargetNames)}]\" +\n                                    $\"\\n\\tGlobal Properties: {{{string.Join(\",\", buildRequest.GlobalProperties.Select(kvp => $\"{kvp.Name}={kvp.EvaluatedValue}\"))}}}\";\n \n-            _logger.LogMessage(\n+            var logger = _loggerFactory();\n+\n+            logger.LogMessage(\n                 \"\\n====== Querying project cache for project \" + queryDescription,\n                 MessageImportance.High);\n \n-            var cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, _logger, _cancellationToken);\n+            CacheResult cacheResult = null!;\n+            try\n+            {\n+                cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, logger, _cancellationToken);\n+            }\n+            catch (Exception e)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Looking at what this actually means, just filter out critical exceptions?",
              "createdAt": "2021-04-26T22:57:00Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -143,16 +155,25 @@ public async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildRequest\n                                    $\"\\n\\tTargets:[{string.Join(\", \", buildRequest.TargetNames)}]\" +\n                                    $\"\\n\\tGlobal Properties: {{{string.Join(\",\", buildRequest.GlobalProperties.Select(kvp => $\"{kvp.Name}={kvp.EvaluatedValue}\"))}}}\";\n \n-            _logger.LogMessage(\n+            var logger = _loggerFactory();\n+\n+            logger.LogMessage(\n                 \"\\n====== Querying project cache for project \" + queryDescription,\n                 MessageImportance.High);\n \n-            var cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, _logger, _cancellationToken);\n+            CacheResult cacheResult = null!;\n+            try\n+            {\n+                cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, logger, _cancellationToken);\n+            }\n+            catch (Exception e)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It needs to be Exception because the cache can throw any exception type if it malfunctions. Filtering is done in `HandlePluginException` to avoid repeating it.",
              "createdAt": "2021-04-26T23:08:01Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -143,16 +155,25 @@ public async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildRequest\n                                    $\"\\n\\tTargets:[{string.Join(\", \", buildRequest.TargetNames)}]\" +\n                                    $\"\\n\\tGlobal Properties: {{{string.Join(\",\", buildRequest.GlobalProperties.Select(kvp => $\"{kvp.Name}={kvp.EvaluatedValue}\"))}}}\";\n \n-            _logger.LogMessage(\n+            var logger = _loggerFactory();\n+\n+            logger.LogMessage(\n                 \"\\n====== Querying project cache for project \" + queryDescription,\n                 MessageImportance.High);\n \n-            var cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, _logger, _cancellationToken);\n+            CacheResult cacheResult = null!;\n+            try\n+            {\n+                cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, logger, _cancellationToken);\n+            }\n+            catch (Exception e)",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}