{
  "number": 9814,
  "title": "Improve performance for RAR on a single node invocation",
  "body": "## Fixes \r\nSlightly improve ResolveAssemblyReference for .NetFramework msbuild instance:\r\nrelated to https://github.com/dotnet/msbuild/issues/9592\r\n\r\n\r\nChanging to IORedist gives an improvement on ReferenceTable.ComputeClosure() invocation from RAR\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/98708e60-54e7-4f45-86d0-f1bb68846a07)\r\n",
  "state": "MERGED",
  "createdAt": "2024-03-04T10:23:10Z",
  "updatedAt": "2024-03-13T08:23:02Z",
  "closedAt": "2024-03-13T08:23:02Z",
  "mergedAt": "2024-03-13T08:23:02Z",
  "additions": 9,
  "deletions": 8,
  "changedFiles": 4,
  "headRefName": "dev/ykovalova/improve_perf_multiple_nodes",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "19e127e9a3fdff4aaedc4db2ed0116c47053ba9c",
          "message": "use IORedist for directory traversal",
          "committedDate": "2024-02-08T08:45:12Z",
          "author": {
            "name": "Yuliia Kovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "50db6621ee2c51d9061e46a4fe8d27fc6bc45a1f",
          "message": "Merge remote-tracking branch 'origin/main' into dev/ykovalova/improve_perf_multiple_nodes",
          "committedDate": "2024-02-28T14:39:31Z",
          "author": {
            "name": "Yuliia Kovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a50417e7dddccb41a0613f82c1034aa51efe21d7",
          "message": "remove extra line",
          "committedDate": "2024-03-04T10:23:03Z",
          "author": {
            "name": "Yuliia Kovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "58518e3c9233c73c83e45049d2be31b460d75e88",
          "message": "fix review comments",
          "committedDate": "2024-03-08T14:48:15Z",
          "author": {
            "name": "Yuliia Kovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "87213da7246648223510c5a83efd01e5587c33d5",
          "message": "remove IEnumerable",
          "committedDate": "2024-03-08T15:36:27Z",
          "author": {
            "name": "Yuliia Kovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "75461e599ee5f076e6baa303382db540aab2a603",
          "message": "switch back to string[]",
          "committedDate": "2024-03-08T15:56:01Z",
          "author": {
            "name": "Yuliia Kovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "68ee4f5ff22d27cac2c3572e77faf8c60fef8f97",
          "message": "fix review comment with Any() -> Length",
          "committedDate": "2024-03-12T14:19:59Z",
          "author": {
            "name": "Yuliia Kovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5662a26a2a3c896ada7d844c4abd5ce5d77c9409",
          "message": "fix formatting",
          "committedDate": "2024-03-13T06:50:56Z",
          "author": {
            "name": "Yuliia Kovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@JanKrivanek , IEnumerable absence didn't spoil the result\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/76e5712f-9a13-41bf-9ea5-3dcbb90e5505)\r\n",
        "createdAt": "2024-03-12T17:42:39Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: commented empty line ",
              "createdAt": "2024-03-06T22:23:31Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -3208,7 +3209,12 @@ public override bool Execute()\n             return Execute(\n                 p => FileUtilities.FileExistsNoThrow(p),\n                 p => FileUtilities.DirectoryExistsNoThrow(p),\n+#if NETFRAMEWORK\n+                (p, searchPattern) => FileSystems.Default.EnumerateDirectories(p, searchPattern),\n+#else\n                 (p, searchPattern) => Directory.GetDirectories(p, searchPattern),\n+#endif\n+                //",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is it needed?",
              "createdAt": "2024-03-07T12:20:43Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -10,6 +10,7 @@\n using System.Linq;\n using System.Runtime.Versioning;\n using Microsoft.Build.BackEnd;\n+using Microsoft.Build.Eventing;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we really want to cache enumerable as is? It works now as Directory.EnumerateDirectories returns state machine that performs the search on each enumeration, but it is not guaranteed, plus it's unnecessary I/Os.\r\n\r\nShould we rather wrap with our own type, that for array just stores as is, and for IEnumerable, performs the enumeration of target just on the first call, but stores the result for the subsequent calls?",
              "createdAt": "2024-03-07T12:35:47Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -631,18 +632,18 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)\n         /// </summary>\n         /// <param name=\"path\"></param>\n         /// <param name=\"pattern\"></param>\n-        /// <returns></returns>\n-        private string[] GetDirectories(string path, string pattern)\n+        /// <returns>The list of directories from the specified path.</returns>\n+        private IEnumerable<string> GetDirectories(string path, string pattern)\n         {\n             // Only cache the *. pattern. This is by far the most common pattern\n             // and generalized caching would require a call to Path.Combine which\n             // is a string-copy.\n             if (pattern == \"*\")\n             {\n-                instanceLocalDirectories.TryGetValue(path, out string[] cached);\n+                instanceLocalDirectories.TryGetValue(path, out IEnumerable<string> cached);\n                 if (cached == null)\n                 {\n-                    string[] directories = getDirectories(path, pattern);\n+                    IEnumerable<string> directories = getDirectories(path, pattern);\n                     instanceLocalDirectories[path] = directories;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Other option is to expose and bubble-up a 'bool HasAnyDirectory(string path, string pattern)' method",
              "createdAt": "2024-03-07T12:43:02Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -631,18 +632,18 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)\n         /// </summary>\n         /// <param name=\"path\"></param>\n         /// <param name=\"pattern\"></param>\n-        /// <returns></returns>\n-        private string[] GetDirectories(string path, string pattern)\n+        /// <returns>The list of directories from the specified path.</returns>\n+        private IEnumerable<string> GetDirectories(string path, string pattern)\n         {\n             // Only cache the *. pattern. This is by far the most common pattern\n             // and generalized caching would require a call to Path.Combine which\n             // is a string-copy.\n             if (pattern == \"*\")\n             {\n-                instanceLocalDirectories.TryGetValue(path, out string[] cached);\n+                instanceLocalDirectories.TryGetValue(path, out IEnumerable<string> cached);\n                 if (cached == null)\n                 {\n-                    string[] directories = getDirectories(path, pattern);\n+                    IEnumerable<string> directories = getDirectories(path, pattern);\n                     instanceLocalDirectories[path] = directories;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "discussed with @rokonec offline and get back to string[]",
              "createdAt": "2024-03-08T15:37:47Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -631,18 +632,18 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)\n         /// </summary>\n         /// <param name=\"path\"></param>\n         /// <param name=\"pattern\"></param>\n-        /// <returns></returns>\n-        private string[] GetDirectories(string path, string pattern)\n+        /// <returns>The list of directories from the specified path.</returns>\n+        private IEnumerable<string> GetDirectories(string path, string pattern)\n         {\n             // Only cache the *. pattern. This is by far the most common pattern\n             // and generalized caching would require a call to Path.Combine which\n             // is a string-copy.\n             if (pattern == \"*\")\n             {\n-                instanceLocalDirectories.TryGetValue(path, out string[] cached);\n+                instanceLocalDirectories.TryGetValue(path, out IEnumerable<string> cached);\n                 if (cached == null)\n                 {\n-                    string[] directories = getDirectories(path, pattern);\n+                    IEnumerable<string> directories = getDirectories(path, pattern);\n                     instanceLocalDirectories[path] = directories;",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This deserves a comment - why is this not a better choice on core as well?",
              "createdAt": "2024-03-07T12:38:19Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -3208,7 +3209,12 @@ public override bool Execute()\n             return Execute(\n                 p => FileUtilities.FileExistsNoThrow(p),\n                 p => FileUtilities.DirectoryExistsNoThrow(p),\n+#if NETFRAMEWORK\n+                (p, searchPattern) => FileSystems.Default.EnumerateDirectories(p, searchPattern),\n+#else\n                 (p, searchPattern) => Directory.GetDirectories(p, searchPattern),\n+#endif",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "NIT: Since we are touching it, please consider to inline `subDirectories`",
              "createdAt": "2024-03-08T15:52:23Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -961,8 +961,8 @@ private void SetPrimaryFileItem(ITaskItem referenceAssemblyFile)\n                     return;\n                 }\n \n-                string[] subDirectories = _getDirectories(reference.DirectoryName, \"*\");\n-                string sateliteFilename = subDirectories.Length > 0\n+                IEnumerable<string> subDirectories = _getDirectories(reference.DirectoryName, \"*\");\n+                string satelliteFilename = subDirectories.Any()",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "On not. It is good as it is.",
              "createdAt": "2024-03-08T15:57:49Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -961,8 +961,8 @@ private void SetPrimaryFileItem(ITaskItem referenceAssemblyFile)\n                     return;\n                 }\n \n-                string[] subDirectories = _getDirectories(reference.DirectoryName, \"*\");\n-                string sateliteFilename = subDirectories.Length > 0\n+                IEnumerable<string> subDirectories = _getDirectories(reference.DirectoryName, \"*\");\n+                string satelliteFilename = subDirectories.Any()",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "NIT: white spaces has been lost, now become inconsistent with related #region indentation",
              "createdAt": "2024-03-08T16:00:27Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -3228,6 +3229,6 @@ public override bool Execute()\n                 p => ReferenceTable.ReadMachineTypeFromPEHeader(p));\n         }\n \n-        #endregion\n+#endregion",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If the collection created here is short lived, `ToList()` may allocate less than `ToArray()`, as it doesn't have to trim the buffer to the right size.",
              "createdAt": "2024-03-09T00:19:48Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -3208,7 +3209,7 @@ public override bool Execute()\n             return Execute(\n                 p => FileUtilities.FileExistsNoThrow(p),\n                 p => FileUtilities.DirectoryExistsNoThrow(p),\n-                (p, searchPattern) => Directory.GetDirectories(p, searchPattern),\n+                (p, searchPattern) => FileSystems.Default.EnumerateDirectories(p, searchPattern).ToArray(),",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "Wasn't the main perf gain in the fact that we avoided enmurating all the matching directories on the disk (and with `Any()` we could break early)?",
              "createdAt": "2024-03-11T13:08:22Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -3208,7 +3209,7 @@ public override bool Execute()\n             return Execute(\n                 p => FileUtilities.FileExistsNoThrow(p),\n                 p => FileUtilities.DirectoryExistsNoThrow(p),\n-                (p, searchPattern) => Directory.GetDirectories(p, searchPattern),\n+                (p, searchPattern) => FileSystems.Default.EnumerateDirectories(p, searchPattern).ToArray(),",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Nope, the idea was to switch to IO.Redist usage that has better perf then System.IO",
              "createdAt": "2024-03-11T13:52:58Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -3208,7 +3209,7 @@ public override bool Execute()\n             return Execute(\n                 p => FileUtilities.FileExistsNoThrow(p),\n                 p => FileUtilities.DirectoryExistsNoThrow(p),\n-                (p, searchPattern) => Directory.GetDirectories(p, searchPattern),\n+                (p, searchPattern) => FileSystems.Default.EnumerateDirectories(p, searchPattern).ToArray(),",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "This is good advice but since it'd require changing the signature I'm willing to wait to do it.",
              "createdAt": "2024-03-11T21:22:06Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -3208,7 +3209,7 @@ public override bool Execute()\n             return Execute(\n                 p => FileUtilities.FileExistsNoThrow(p),\n                 p => FileUtilities.DirectoryExistsNoThrow(p),\n-                (p, searchPattern) => Directory.GetDirectories(p, searchPattern),\n+                (p, searchPattern) => FileSystems.Default.EnumerateDirectories(p, searchPattern).ToArray(),",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "is this really improving the performance? similar PRs merged in runtime usually remove LINQ for performance boost and make the opposite change (keep the current code)\r\n@eerhardt",
              "createdAt": "2024-03-10T18:04:10Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -962,7 +962,7 @@ private void SetPrimaryFileItem(ITaskItem referenceAssemblyFile)\n                 }\n \n                 string[] subDirectories = _getDirectories(reference.DirectoryName, \"*\");\n-                string sateliteFilename = subDirectories.Length > 0\n+                string satelliteFilename = subDirectories.Any()",
              "author": {
                "login": "kasperk81"
              }
            },
            {
              "body": "We discussed this today and decided to leave it at `Length > 0`.",
              "createdAt": "2024-03-11T21:23:09Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -962,7 +962,7 @@ private void SetPrimaryFileItem(ITaskItem referenceAssemblyFile)\n                 }\n \n                 string[] subDirectories = _getDirectories(reference.DirectoryName, \"*\");\n-                string sateliteFilename = subDirectories.Length > 0\n+                string satelliteFilename = subDirectories.Any()",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}