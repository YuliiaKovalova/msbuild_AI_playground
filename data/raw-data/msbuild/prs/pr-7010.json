{
  "number": 7010,
  "title": "Remove locker object from LazyFormattedBuildEventArgs",
  "body": "Fixes #6002 \r\n\r\n### Context\r\n\r\nAs pointed out in #6002, the locker object is not necessarily needed in `LazyFormattedBuildEventArgs`. It guarantees that formatting the message and nulling out the `arguments` field happens atomically to prevent double-formatting. The rest of the code running under the lock is idempotent.\r\n\r\n### Changes Made\r\n\r\n- Removed the locker object.\r\n- Simply removed locking from idempotent code. Compensated by making the `message` field volatile to guarantee thread safety. The `if (RawMessage == null) ... RawMessage =` pattern falls into this case.\r\n- Implemented formatting atomicity by replacing `object[] arguments` with `object argumentsOrFormattedMessage`. The lazy `Message` getter reads arguments from this field and writes the formatted message into the same field. The run-time type determines if the message is already formatted or not.\r\n\r\n### Testing\r\n\r\nExisting unit tests, manual log and binlog smoke test.\r\n\r\n### Notes\r\n\r\n- The locker object is part of public surface so technically this is a breaking change.\r\n- After `LazyFormattedBuildEventArgs.Message` runs the object may reference two strings - the original unformatted message and the newly created formatted one. This may have memory impact if the object is kept alive after the message is formatted.",
  "state": "MERGED",
  "createdAt": "2021-11-02T12:39:15Z",
  "updatedAt": "2021-11-23T15:42:18Z",
  "closedAt": "2021-11-23T15:42:17Z",
  "mergedAt": "2021-11-23T15:42:17Z",
  "additions": 123,
  "deletions": 175,
  "changedFiles": 12,
  "headRefName": "lockfree-eventargs",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0114adcb60b0df92a21d5ed773657c4a9d723e71",
          "message": "Remove locker object from LazyFormattedBuildEventArgs",
          "committedDate": "2021-11-02T11:34:51Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "344af2a3bfe1e5fbabc9f24ee0e817153bfbdf83",
          "message": "Rename the new WriteToStream overload to not break reflection invocation",
          "committedDate": "2021-11-02T12:52:52Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8689469920b83bf292f3cd619ecf0fec5531461b",
          "message": "Fix the logic; should fix failing tests",
          "committedDate": "2021-11-02T14:32:41Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "977d614e4d9753337ef6ff3f3c46fc930e49c153",
          "message": "Remove the union, add an 'unformattedMessage' field",
          "committedDate": "2021-11-09T11:03:45Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e2cf6e31c52f1cd853956e79484576b9a221a71b",
          "message": "Revert \"Remove the union, add an 'unformattedMessage' field\"\n\nThis reverts commit 977d614e4d9753337ef6ff3f3c46fc930e49c153.",
          "committedDate": "2021-11-22T13:54:10Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9db4975c37369175724a59f52e87c9ab1eebaa96",
          "message": "Merge remote-tracking branch 'upstream/main' into lockfree-eventargs\n\nConflicts:\n\tref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs\n\tref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs",
          "committedDate": "2021-11-22T22:26:22Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I think this looks good and roughly what I envisioned too.\r\n\r\nWe should confirm this, but my theory is that these are only getting called under a lock anyway (when the message args are getting delivered to the Console loggers). Console loggers are the only ones in the product to my knowledge that should realize the formatted message (both packet translator and binary logger never touch the Message).\r\n\r\nWe should validate this by placing a breakpoint in that code and running a single-process build and a /m build, and see who ends up calling to realize the Message. I'll bet you'll find we're already under a lock, so the extra locking wasn't needed in the first place. But even if not, the idempotence looks fine.",
        "createdAt": "2021-11-02T18:12:32Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "\r\n> We should confirm this, but my theory is that these are only getting called under a lock anyway (when the message args are getting delivered to the Console loggers). Console loggers are the only ones in the product to my knowledge that should realize the formatted message (both packet translator and binary logger never touch the Message).\r\n> \r\n> We should validate this by placing a breakpoint in that code and running a single-process build and a /m build, and see who ends up calling to realize the Message. I'll bet you'll find we're already under a lock, so the extra locking wasn't needed in the first place. But even if not, the idempotence looks fine.\r\n\r\nThank you, this is a great hint. One question, though. The functionality being changed here is exposed to external callers. Not sure if it was intentional; presumably the `locker` field was supposed to be `private protected` rather than `protected` but it's unlikely that anyone would depend on it externally. And if they do, their code would just stop working, so it looks OK to remove it. The `Message` property is public, though, and probably rightly so. Do you think that, in case **we** call it only under a lock, it is safe to remove the thread safety guarantee for everyone? The failure mode for someone depending on this is worse (sporadic hard-to-debug crashes etc.)",
        "createdAt": "2021-11-02T21:00:37Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> I would consider to use `lock(this)` to eliminate `locker object` allocation as it seem to me, opiniated, as lesser evil comparing to `volatile` lockless approach and its related increased code complexity\r\n\r\nThat would be a no-brainer if these were internal classes but the hierarchy is exposed from `Microsoft.Build.Framework`. There's definitely some breaking potential if we start locking on this. Not to mention violating a best practice and in a public API, no less.",
        "createdAt": "2021-11-02T21:10:51Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Do you think that, in case we call it only under a lock, it is safe to remove the thread safety guarantee for everyone?\r\n\r\nLet's brainstorm what races are possible here. Suppose someone calls Message outside the lock, what's the worst thing that can happen, with your implementation?\r\n\r\nI'm trying to see where do we even call Message, and seeing a couple things:\r\nhttps://source.dot.net/#Microsoft.Build.Framework/LazyFormattedBuildEventArgs.cs,47248b3c047a28b3,references\r\n\r\nSlightly worrying that we would format the message here, for example:\r\nhttps://source.dot.net/#Microsoft.Build/BackEnd/Components/Logging/LoggingService.cs,1435",
        "createdAt": "2021-11-03T23:30:52Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I've filed https://github.com/dotnet/msbuild/issues/7015 to look at removing culture info.",
        "createdAt": "2021-11-03T23:46:30Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@rokonec @KirillOsenkov I pushed one additional commit where I implemented Roman's idea of keeping the original unformatted message in a separate field. Advantage: no more union, thus more readable code. Disadvantage: the size of `LazyFormattedBuildEventArgs` is not reduced, we just eliminate the lock object allocation.\r\n\r\nI don't have a strong preference. May I ask you to express yours? Thank you!",
        "createdAt": "2021-11-09T12:09:55Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I like where we reduced the object size, it does add up. I'm not as worried about locking.",
        "createdAt": "2021-11-09T20:20:55Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I think the main driving principle that made me file the issue is to reduce the object size. Not sure this PR is even worth the churn without those gains.",
        "createdAt": "2021-11-15T16:41:00Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> I think the main driving principle that made me file the issue is to reduce the object size. Not sure this PR is even worth the churn without those gains.\r\n\r\nPreviously the object was allocating another empty object so that's 2 pointer sized values saved by killing `locker`. We can make it 3 with the union. I'd say it's worth the churn either way. The concern is that the union hurts readability.",
        "createdAt": "2021-11-15T16:51:08Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I\u2019m strongly in favor of the union to squeeze as much memory as we can out of this. Remember there are millions of these objects flying around in each node.",
        "createdAt": "2021-11-15T16:57:48Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I have reverted the last commit on @KirillOsenkov's preference. This should be ready to go now.",
        "createdAt": "2021-11-22T13:58:50Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "If I understand it correctly we need to achieve `exactly once` LazyFormating or have LazyFormating idempotent.\r\nIdempotency seems to complicate the code a little bit.\r\nI feel like we can achieve lockless 'exactly once' lazy formatting by:\r\n```C#\r\nvar args = _arguments;\r\nif (args != null) {\r\n  args = CompareAndExchange(ref _arguments, null, args);\r\n  if (args != null)\r\n     base.Message = FormateMe(args);\r\n   return base.Message\r\n}\r\n```",
              "createdAt": "2021-11-02T16:58:43Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -17,33 +16,34 @@ public class LazyFormattedBuildEventArgs : BuildEventArgs\n         /// <summary>\n         /// Stores the message arguments.\n         /// </summary>\n-        private object[] arguments;\n+        private volatile object argumentsOrFormattedMessage;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I think this might be an overkill - let's confirm whether we're already being called under a lock anyway. ",
              "createdAt": "2021-11-02T18:13:43Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -17,33 +16,34 @@ public class LazyFormattedBuildEventArgs : BuildEventArgs\n         /// <summary>\n         /// Stores the message arguments.\n         /// </summary>\n-        private object[] arguments;\n+        private volatile object argumentsOrFormattedMessage;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "> ```cs\r\n> var args = _arguments;\r\n> if (args != null) {\r\n>   args = CompareAndExchange(ref _arguments, null, args);\r\n>   if (args != null)\r\n>      base.Message = FormateMe(args);\r\n>    return base.Message\r\n> }\r\n> ```\r\n\r\nThis doesn't quite work. We need all threads calling this code to get the formatted message. In your snippet there is a race window between the winning thread getting non-null result from `CompareAndExchange` and storing the formatted message to `base.Message`. During this time other threads would be getting the original unformatted message.",
              "createdAt": "2021-11-02T20:21:40Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -17,33 +16,34 @@ public class LazyFormattedBuildEventArgs : BuildEventArgs\n         /// <summary>\n         /// Stores the message arguments.\n         /// </summary>\n-        private object[] arguments;\n+        private volatile object argumentsOrFormattedMessage;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "> I think this might be an overkill - let's confirm whether we're already being called under a lock anyway.\r\n\r\nNot having to worry about thread safety would be ideal!",
              "createdAt": "2021-11-02T20:23:02Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -17,33 +16,34 @@ public class LazyFormattedBuildEventArgs : BuildEventArgs\n         /// <summary>\n         /// Stores the message arguments.\n         /// </summary>\n-        private object[] arguments;\n+        private volatile object argumentsOrFormattedMessage;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "> In your snippet there is a race window\r\n\r\nYou are right. I think it is impossible to implement non-blocking `exactly once`. We have to stick to idempotency. \r\nIf  we put both unformatted string and arguments into `LazyFormattedBuildEventArgs` we can idempotently build formatted message.\r\n\r\n```C#\r\npublic override string Message\r\n{\r\n    get\r\n    {\r\n        if (RawMessage == null)\r\n        {\r\n            RawMessage = FormatString(_unformated, _args);\r\n        }\r\n\r\n        return RawMessage;\r\n    }\r\n}\r\n```\r\nThis approach is already used in many EventArgs derives like for example `ProjectStartedEventArgs` or `TaskFinishedEventArgs`\r\n\r\nDisadvantage of that is that it will increase memory footprint of LazyFormattedBuildEventArgs by another reference, i.e. 8 bytes.",
              "createdAt": "2021-11-03T12:36:52Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -17,33 +16,34 @@ public class LazyFormattedBuildEventArgs : BuildEventArgs\n         /// <summary>\n         /// Stores the message arguments.\n         /// </summary>\n-        private object[] arguments;\n+        private volatile object argumentsOrFormattedMessage;",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It just occurs to me that getting CurrentCulture might not be super cheap, should we do it outside the loop and cache in a local variable?",
              "createdAt": "2021-11-02T18:20:32Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -125,37 +127,26 @@ public override string Message\n         /// <param name=\"writer\">Binary writer which is attached to the stream the event will be serialized into.</param>\n         internal override void WriteToStream(BinaryWriter writer)\n         {\n-            // Locking is needed here as this is invoked on the serialization thread,\n-            // whereas a local logger (a distributed logger) may concurrently invoke this.Message\n-            // which will trigger formatting and thus the exception below\n-            lock (locker)\n+            object argsOrMessage = argumentsOrFormattedMessage;\n+            if (argsOrMessage is object[] arguments && arguments.Length > 0)\n             {\n-                bool hasArguments = arguments != null;\n-                base.WriteToStream(writer);\n+                base.WriteToStreamWithExplicitMessage(writer, base.Message);\n+                writer.Write(arguments.Length);\n \n-                if (hasArguments && arguments == null)\n+                foreach (object argument in arguments)\n                 {\n-                    throw new InvalidOperationException(\"BuildEventArgs has formatted message while serializing!\");\n+                    // Arguments may be ints, etc, so explicitly convert\n+                    // Convert.ToString returns String.Empty when it cannot convert, rather than throwing\n+                    writer.Write(Convert.ToString(argument, CultureInfo.CurrentCulture));",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm afraid this might be problematic, since RawMessage was explicitly designed to get access to the underlying unformatted message, for both packet translator and binlog reader/writer. Now we're going to realize the formatted message when sending it across the wire.",
              "createdAt": "2021-11-02T18:23:34Z",
              "path": "src/Framework/BuildEventArgs.cs",
              "diffHunk": "@@ -144,10 +143,19 @@ public virtual string Message\n         /// </summary>\n         protected internal string RawMessage\n         {\n-            get => message;\n+            get => FormattedMessage;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "As part of validation for this PR we should ensure that message and arguments remain unrealized when roundtripped across the node packet translator and BuildEventArgsReader/Writer. We should have tests for this, but if not, we should add one for each of both.",
              "createdAt": "2021-11-02T18:25:04Z",
              "path": "src/Framework/BuildEventArgs.cs",
              "diffHunk": "@@ -144,10 +143,19 @@ public virtual string Message\n         /// </summary>\n         protected internal string RawMessage\n         {\n-            get => message;\n+            get => FormattedMessage;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "> Now we're going to realize the formatted message when sending it across the wire.\r\n\r\nThis actually behaves exactly like before. If the message has been realized it is returned. Otherwise the caller gets the unformatted string. It does not trigger the formatting code - apologies if the names are misleading.",
              "createdAt": "2021-11-02T21:05:34Z",
              "path": "src/Framework/BuildEventArgs.cs",
              "diffHunk": "@@ -144,10 +143,19 @@ public virtual string Message\n         /// </summary>\n         protected internal string RawMessage\n         {\n-            get => message;\n+            get => FormattedMessage;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Indeed, thanks.",
              "createdAt": "2021-11-03T23:33:34Z",
              "path": "src/Framework/BuildEventArgs.cs",
              "diffHunk": "@@ -144,10 +143,19 @@ public virtual string Message\n         /// </summary>\n         protected internal string RawMessage\n         {\n-            get => message;\n+            get => FormattedMessage;",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Out of curiosity, why did you decide to store the union for both here, instead of utilizing RawMessage to access the message field in the base type?",
              "createdAt": "2021-11-02T18:25:58Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -17,33 +16,34 @@ public class LazyFormattedBuildEventArgs : BuildEventArgs\n         /// <summary>\n         /// Stores the message arguments.\n         /// </summary>\n-        private object[] arguments;\n+        private volatile object argumentsOrFormattedMessage;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "For thread-safety I need the formatting to result in only one reference write (guaranteed to be atomic by the platform). Swapping one string for another wouldn't work because you wouldn't know if the string you're looking at has already been formatted or not. So I swap the arguments array for the new string, for which I need to emulate a union. It is possible that I am missing something, please elaborate if I sound off base :smile:",
              "createdAt": "2021-11-02T21:17:17Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -17,33 +16,34 @@ public class LazyFormattedBuildEventArgs : BuildEventArgs\n         /// <summary>\n         /// Stores the message arguments.\n         /// </summary>\n-        private object[] arguments;\n+        private volatile object argumentsOrFormattedMessage;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Let's think if we need to store the culture name AND the actual culture object. How are they used? Can we reduce two fields to just one, perhaps?",
              "createdAt": "2021-11-02T18:28:36Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -17,33 +16,34 @@ public class LazyFormattedBuildEventArgs : BuildEventArgs\n         /// <summary>\n         /// Stores the message arguments.\n         /// </summary>\n-        private object[] arguments;\n+        private volatile object argumentsOrFormattedMessage;\n \n         /// <summary>\n         /// Exposes the underlying arguments field to serializers.\n         /// </summary>\n         internal object[] RawArguments\n         {\n-            get => arguments;\n-            set => arguments = value;\n+            get => (argumentsOrFormattedMessage is object[] arguments) ? arguments : null;\n         }\n \n         /// <summary>\n-        /// Stores the original culture for String.Format.\n+        /// Exposes the formatted message string to serializers.\n         /// </summary>\n-        private string originalCultureName;\n+        private protected override string FormattedMessage\n+        {\n+            get => (argumentsOrFormattedMessage is string formattedMessage) ? formattedMessage : base.FormattedMessage;\n+        }\n \n         /// <summary>\n-        /// Non-serializable CultureInfo object\n+        /// Stores the original culture for String.Format.\n         /// </summary>\n-        [NonSerialized]\n-        private CultureInfo originalCultureInfo;\n+        private string originalCultureName;",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This place was always bugging me. Why access the CurrentCulture twice? Are we sure we need to store both? Should we store just the culture name and recover culture on demand? Or store the culture and recover the name on demand?\r\n\r\nDo we even need to store the culture in the first place? Are we ever in a situation where we have more than one culture?",
              "createdAt": "2021-11-02T18:30:02Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -79,10 +79,9 @@ public LazyFormattedBuildEventArgs\n         )\n             : base(message, helpKeyword, senderName, eventTimestamp)\n         {\n-            arguments = messageArgs;\n+            argumentsOrFormattedMessage = messageArgs;\n             originalCultureName = CultureInfo.CurrentCulture.Name;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "But perhaps we should revisit the culture in a separate PR, one thing at a time.",
              "createdAt": "2021-11-02T18:30:39Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -79,10 +79,9 @@ public LazyFormattedBuildEventArgs\n         )\n             : base(message, helpKeyword, senderName, eventTimestamp)\n         {\n-            arguments = messageArgs;\n+            argumentsOrFormattedMessage = messageArgs;\n             originalCultureName = CultureInfo.CurrentCulture.Name;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Also, the culture name is only needed when converting args to string, In a case where we format message before serialization we always have Current CultureInfo, when we serialize we can use that to convert into culture aware string and `originalCultureName` does not need to become part of de/ser.",
              "createdAt": "2021-11-02T21:11:11Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -79,10 +79,9 @@ public LazyFormattedBuildEventArgs\n         )\n             : base(message, helpKeyword, senderName, eventTimestamp)\n         {\n-            arguments = messageArgs;\n+            argumentsOrFormattedMessage = messageArgs;\n             originalCultureName = CultureInfo.CurrentCulture.Name;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "We'll work on culture related fields separately. Tracked with #7015 (thank you!). I am resolving this conversation.",
              "createdAt": "2021-11-09T08:46:42Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -79,10 +79,9 @@ public LazyFormattedBuildEventArgs\n         )\n             : base(message, helpKeyword, senderName, eventTimestamp)\n         {\n-            arguments = messageArgs;\n+            argumentsOrFormattedMessage = messageArgs;\n             originalCultureName = CultureInfo.CurrentCulture.Name;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is music to my ears, we save on allocations as well as 4 (or 8) bytes per args instance.",
              "createdAt": "2021-11-02T18:31:16Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -91,7 +90,6 @@ public LazyFormattedBuildEventArgs\n         protected LazyFormattedBuildEventArgs()\n             : base()\n         {\n-            locker = new Object();",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I know that something in these assemblies implements a custom log message\r\n\r\nhttps://github.com/dotnet/msbuild/blob/37c61113335898d83fcae3203846402f2af31bf1/src/MSBuild/app.config#L120-L131\r\n\r\nI don't know if that implements `LazyFormattedBuildEventArgs` or something else. Can you run this through a VS insertion to double-check that this doesn't break that use? If it doesn't, I think #1675 will mean that this \"breaking\" change isn't a problem.",
              "createdAt": "2021-11-15T17:53:00Z",
              "path": "ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs",
              "diffHunk": "@@ -354,8 +354,6 @@ public partial interface ITaskItem2 : Microsoft.Build.Framework.ITaskItem\n     }\n     public partial class LazyFormattedBuildEventArgs : Microsoft.Build.Framework.BuildEventArgs\n     {\n-        [System.NonSerializedAttribute]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's probably [this class](https://dev.azure.com/devdiv/DevDiv/_git/VS?path=/src/edev/StaticAnalysis/fxcoptask/CodeAnalysisErrorEventArgs.cs) and [this class](https://dev.azure.com/devdiv/DevDiv/_git/VS?path=/src/edev/StaticAnalysis/fxcoptask/CodeAnalysisWarningEventArgs.cs). They indeed indirectly derive from `LazyFormattedBuildEventArgs` and I don't see references to the `locker` field so we should be fine. Waiting for an experimental insertion just in case.",
              "createdAt": "2021-11-19T16:11:08Z",
              "path": "ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs",
              "diffHunk": "@@ -354,8 +354,6 @@ public partial interface ITaskItem2 : Microsoft.Build.Framework.ITaskItem\n     }\n     public partial class LazyFormattedBuildEventArgs : Microsoft.Build.Framework.BuildEventArgs\n     {\n-        [System.NonSerializedAttribute]",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "No issues found in the experimental insertion.",
              "createdAt": "2021-11-22T13:53:12Z",
              "path": "ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs",
              "diffHunk": "@@ -354,8 +354,6 @@ public partial interface ITaskItem2 : Microsoft.Build.Framework.ITaskItem\n     }\n     public partial class LazyFormattedBuildEventArgs : Microsoft.Build.Framework.BuildEventArgs\n     {\n-        [System.NonSerializedAttribute]",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Understanding check: There's no longer a race here because we no longer set `arguments = null` on formatting? Does that mean that we hold onto objects in `arguments` for a longer time? Is that bad?",
              "createdAt": "2021-11-15T17:59:50Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -125,20 +130,17 @@ public override string Message\n         /// <param name=\"writer\">Binary writer which is attached to the stream the event will be serialized into.</param>\n         internal override void WriteToStream(BinaryWriter writer)\n         {\n-            // Locking is needed here as this is invoked on the serialization thread,\n-            // whereas a local logger (a distributed logger) may concurrently invoke this.Message\n-            // which will trigger formatting and thus the exception below\n-            lock (locker)\n+            string formattedMessage = base.Message;\n+            if (formattedMessage != null)\n             {\n-                bool hasArguments = arguments != null;\n-                base.WriteToStream(writer);\n-\n-                if (hasArguments && arguments == null)\n-                {\n-                    throw new InvalidOperationException(\"BuildEventArgs has formatted message while serializing!\");\n-                }\n-\n-                if (arguments != null)\n+                // We've already formatted the message, write it to the stream and omit arguments.\n+                base.WriteToStreamWithExplicitMessage(writer, formattedMessage);\n+                writer.Write(-1);\n+            }\n+            else\n+            {\n+                base.WriteToStreamWithExplicitMessage(writer, unformattedMessage);\n+                if (arguments?.Length > 0)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I believe that in vast majority of cases formatting is at the end of EventArgs litetime. It is taken out of queue, sinked to all loggers, some logger might format it, and than collected by next `GC.Collect`. In both, former and new behavior, both EventArgs and its `this.arguments` will be collected be same GC collection. ",
              "createdAt": "2021-11-15T18:27:08Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -125,20 +130,17 @@ public override string Message\n         /// <param name=\"writer\">Binary writer which is attached to the stream the event will be serialized into.</param>\n         internal override void WriteToStream(BinaryWriter writer)\n         {\n-            // Locking is needed here as this is invoked on the serialization thread,\n-            // whereas a local logger (a distributed logger) may concurrently invoke this.Message\n-            // which will trigger formatting and thus the exception below\n-            lock (locker)\n+            string formattedMessage = base.Message;\n+            if (formattedMessage != null)\n             {\n-                bool hasArguments = arguments != null;\n-                base.WriteToStream(writer);\n-\n-                if (hasArguments && arguments == null)\n-                {\n-                    throw new InvalidOperationException(\"BuildEventArgs has formatted message while serializing!\");\n-                }\n-\n-                if (arguments != null)\n+                // We've already formatted the message, write it to the stream and omit arguments.\n+                base.WriteToStreamWithExplicitMessage(writer, formattedMessage);\n+                writer.Write(-1);\n+            }\n+            else\n+            {\n+                base.WriteToStreamWithExplicitMessage(writer, unformattedMessage);\n+                if (arguments?.Length > 0)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}