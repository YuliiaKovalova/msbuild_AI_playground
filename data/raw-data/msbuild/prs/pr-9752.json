{
  "number": 9752,
  "title": "Question Switch and Readme",
  "body": "Add Question.md\r\n",
  "state": "MERGED",
  "createdAt": "2024-02-16T01:55:32Z",
  "updatedAt": "2024-11-06T17:47:20Z",
  "closedAt": "2024-11-06T17:47:19Z",
  "mergedAt": "2024-11-06T17:47:19Z",
  "additions": 85,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "yuehuang010"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1812ddb068924a5a3f90e80bf40fffde5f1fca8e",
          "message": "Add Question.md",
          "committedDate": "2024-04-15T20:57:31Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1a55143bcb940ba937fa942b881cff2b0d030da5",
          "message": "Update documentation/specs/question.md\n\nCo-authored-by: MichalPavlik <michalpavlik@outlook.com>",
          "committedDate": "2024-08-29T16:55:16Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b87f02308f4e248b1b17da47c2f7ea2a0ac0f3d9",
          "message": "Merge branch 'main' into main",
          "committedDate": "2024-08-29T16:56:01Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "FYI. Squashed and re-merge.",
        "createdAt": "2024-04-15T20:59:09Z",
        "author": {
          "login": "yuehuang010"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nQuestion switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. \r\n```",
              "createdAt": "2024-02-16T10:47:40Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. Recommend to use binlog logging to gather all the information. Targets or task that don't have an up-to-date check will build normally. ",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for a CI.\r\n```",
              "createdAt": "2024-02-16T10:52:51Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. Recommend to use binlog logging to gather all the information. Targets or task that don't have an up-to-date check will build normally. \n+\n+Fast Up-To-Date is a system that is implemented by a IDE that decides if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for CI.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Btw. the FUTD check mention here feels a bit confusing. If we want to keep it, we might want to explicitly mention that it is an extra layer over msbuild, that is not of concern for the /question check.\r\n\r\nThoughts?",
              "createdAt": "2024-02-16T10:56:01Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. Recommend to use binlog logging to gather all the information. Targets or task that don't have an up-to-date check will build normally. \n+\n+Fast Up-To-Date is a system that is implemented by a IDE that decides if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for CI.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I think I want to remove it.  I doesn't fit in this context.",
              "createdAt": "2024-02-17T02:03:34Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. Recommend to use binlog logging to gather all the information. Targets or task that don't have an up-to-date check will build normally. \n+\n+Fast Up-To-Date is a system that is implemented by a IDE that decides if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for CI.",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nMSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\r\n```",
              "createdAt": "2024-02-16T10:54:16Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nQuestion mode is designed to be used on the command line.  Run your normal build, then run again with /question.\r\n```",
              "createdAt": "2024-02-16T10:56:32Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. Recommend to use binlog logging to gather all the information. Targets or task that don't have an up-to-date check will build normally. \n+\n+Fast Up-To-Date is a system that is implemented by a IDE that decides if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for CI.\n+\n+## Usage\n+Question is designed to be used on the command line.  Run your normal build, then run again with /question.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nIf there are no errors, then your build is up-to-date.  \r\n```",
              "createdAt": "2024-02-16T10:57:05Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. Recommend to use binlog logging to gather all the information. Targets or task that don't have an up-to-date check will build normally. \n+\n+Fast Up-To-Date is a system that is implemented by a IDE that decides if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for CI.\n+\n+## Usage\n+Question is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If no errors, then your build is up-to-date.  ",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nTask author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, do not modify any files on disk.\r\n```",
              "createdAt": "2024-02-16T10:57:46Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. Recommend to use binlog logging to gather all the information. Targets or task that don't have an up-to-date check will build normally. \n+\n+Fast Up-To-Date is a system that is implemented by a IDE that decides if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for CI.\n+\n+## Usage\n+Question is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when /question switch is used. The custom task will need to decide how it want to handle their behavior.  For example.  If there is already a message describing why the task cannot be skipped, then simply convert the message to a error. Remember to return false to stop the build.  For the best reproducibility, do not modify any files on disk.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nWhen `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\r\n```",
              "createdAt": "2024-02-16T10:59:56Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. Recommend to use binlog logging to gather all the information. Targets or task that don't have an up-to-date check will build normally. \n+\n+Fast Up-To-Date is a system that is implemented by a IDE that decides if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for CI.\n+\n+## Usage\n+Question is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when /question switch is used. The custom task will need to decide how it want to handle their behavior.  For example.  If there is already a message describing why the task cannot be skipped, then simply convert the message to a error. Remember to return false to stop the build.  For the best reproducibility, do not modify any files on disk.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+## Shipping Tasks\n+When question switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nDoesn't have an up-to-date check.  It will always run.\r\n```",
              "createdAt": "2024-02-16T11:00:09Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. Recommend to use binlog logging to gather all the information. Targets or task that don't have an up-to-date check will build normally. \n+\n+Fast Up-To-Date is a system that is implemented by a IDE that decides if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for CI.\n+\n+## Usage\n+Question is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when /question switch is used. The custom task will need to decide how it want to handle their behavior.  For example.  If there is already a message describing why the task cannot be skipped, then simply convert the message to a error. Remember to return false to stop the build.  For the best reproducibility, do not modify any files on disk.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+## Shipping Tasks\n+When question switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have a up-to-date check.  It will always run.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nErrors out when inherited ToolTask overrides `SkipTaskExecution()` and returns `false`.\r\n```",
              "createdAt": "2024-02-16T11:00:29Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. Recommend to use binlog logging to gather all the information. Targets or task that don't have an up-to-date check will build normally. \n+\n+Fast Up-To-Date is a system that is implemented by a IDE that decides if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for CI.\n+\n+## Usage\n+Question is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when /question switch is used. The custom task will need to decide how it want to handle their behavior.  For example.  If there is already a message describing why the task cannot be skipped, then simply convert the message to a error. Remember to return false to stop the build.  For the best reproducibility, do not modify any files on disk.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+## Shipping Tasks\n+When question switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have a up-to-date check.  It will always run.\n+\n+`ToolTask`\n+Error when inherited ToolTask overrides `SkipTaskExecution()` and returns false.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nWarns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\r\n```",
              "createdAt": "2024-02-16T11:01:08Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. Recommend to use binlog logging to gather all the information. Targets or task that don't have an up-to-date check will build normally. \n+\n+Fast Up-To-Date is a system that is implemented by a IDE that decides if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for CI.\n+\n+## Usage\n+Question is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when /question switch is used. The custom task will need to decide how it want to handle their behavior.  For example.  If there is already a message describing why the task cannot be skipped, then simply convert the message to a error. Remember to return false to stop the build.  For the best reproducibility, do not modify any files on disk.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+## Shipping Tasks\n+When question switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have a up-to-date check.  It will always run.\n+\n+`ToolTask`\n+Error when inherited ToolTask overrides `SkipTaskExecution()` and returns false.\n+\n+`Touch`\n+Warn when a file touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nErrors out when any copy action occurs.\r\n```",
              "createdAt": "2024-02-16T11:01:26Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files. Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. Recommend to use binlog logging to gather all the information. Targets or task that don't have an up-to-date check will build normally. \n+\n+Fast Up-To-Date is a system that is implemented by a IDE that decides if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for CI.\n+\n+## Usage\n+Question is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when /question switch is used. The custom task will need to decide how it want to handle their behavior.  For example.  If there is already a message describing why the task cannot be skipped, then simply convert the message to a error. Remember to return false to stop the build.  For the best reproducibility, do not modify any files on disk.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+## Shipping Tasks\n+When question switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have a up-to-date check.  It will always run.\n+\n+`ToolTask`\n+Error when inherited ToolTask overrides `SkipTaskExecution()` and returns false.\n+\n+`Touch`\n+Warn when a file touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Error when any copy action.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need to force users to choose the mode? Can `/question` default to previous behavior (both - targets and tasks inspected)?",
              "createdAt": "2024-02-16T11:06:11Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -3195,6 +3198,33 @@ internal static ISet<string> ProcessWarnNotAsErrorSwitch(CommandLineSwitches com\n             return ProcessWarningRelatedSwitch(commandLineSwitches, CommandLineSwitches.ParameterizedSwitch.WarningsNotAsErrors);\n         }\n \n+        internal static QuestionMode ProcessQuestionModeSwitch(string[] parameters)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Forking this part as a separate PR.\r\n\r\nThe previous behavior will include both.",
              "createdAt": "2024-02-17T02:05:43Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -3195,6 +3198,33 @@ internal static ISet<string> ProcessWarnNotAsErrorSwitch(CommandLineSwitches com\n             return ProcessWarningRelatedSwitch(commandLineSwitches, CommandLineSwitches.ParameterizedSwitch.WarningsNotAsErrors);\n         }\n \n+        internal static QuestionMode ProcessQuestionModeSwitch(string[] parameters)",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nErrors out when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\r\n```",
              "createdAt": "2024-02-27T08:55:03Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n## Common Up-To-Date Errors\r\n```",
              "createdAt": "2024-02-27T08:55:16Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\n+\n+`Move`\n+No warning or errors.  This task is effectively a no-op as files could not exist anymore.\n+\n+`DownloadFile`\n+Error if SkipUnchangedFiles is true.\n+\n+`GenerateResource` \n+Error if any files would be generated.\n+\n+`MakeDir`\n+Error if folder doesn't exist.\n+\n+`RemoveDir`\n+Error if folder still exist.\n+\n+`Unzip`\n+Error if SkipUnchangedFiles is true.\n+\n+`ZipDirectory`\n+Error if the destination zip file doesn't exists.\n+\n+## Common Up-To-Date Error",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nWarns that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\r\n```",
              "createdAt": "2024-02-27T08:55:29Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nNo warnings nor errors are output.  This task is effectively a no-op as files could not exist anymore.\r\n```",
              "createdAt": "2024-02-27T08:56:28Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\n+\n+`Move`\n+No warning or errors.  This task is effectively a no-op as files could not exist anymore.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nErrors out if SkipUnchangedFiles is true.\r\n```",
              "createdAt": "2024-02-27T08:56:38Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\n+\n+`Move`\n+No warning or errors.  This task is effectively a no-op as files could not exist anymore.\n+\n+`DownloadFile`\n+Error if SkipUnchangedFiles is true.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nErrors out if any files would be generated.\r\n```",
              "createdAt": "2024-02-27T08:56:47Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\n+\n+`Move`\n+No warning or errors.  This task is effectively a no-op as files could not exist anymore.\n+\n+`DownloadFile`\n+Error if SkipUnchangedFiles is true.\n+\n+`GenerateResource` \n+Error if any files would be generated.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nErrors out if folder doesn't exist.\r\n```",
              "createdAt": "2024-02-27T08:57:00Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\n+\n+`Move`\n+No warning or errors.  This task is effectively a no-op as files could not exist anymore.\n+\n+`DownloadFile`\n+Error if SkipUnchangedFiles is true.\n+\n+`GenerateResource` \n+Error if any files would be generated.\n+\n+`MakeDir`\n+Error if folder doesn't exist.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nErrors out if given folder still exist.\r\n```",
              "createdAt": "2024-02-27T08:57:23Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\n+\n+`Move`\n+No warning or errors.  This task is effectively a no-op as files could not exist anymore.\n+\n+`DownloadFile`\n+Error if SkipUnchangedFiles is true.\n+\n+`GenerateResource` \n+Error if any files would be generated.\n+\n+`MakeDir`\n+Error if folder doesn't exist.\n+\n+`RemoveDir`\n+Error if folder still exist.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nErrors out if `SkipUnchangedFiles` is `true`.\r\n```",
              "createdAt": "2024-02-27T08:57:47Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\n+\n+`Move`\n+No warning or errors.  This task is effectively a no-op as files could not exist anymore.\n+\n+`DownloadFile`\n+Error if SkipUnchangedFiles is true.\n+\n+`GenerateResource` \n+Error if any files would be generated.\n+\n+`MakeDir`\n+Error if folder doesn't exist.\n+\n+`RemoveDir`\n+Error if folder still exist.\n+\n+`Unzip`\n+Error if SkipUnchangedFiles is true.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nErrors out if the destination zip file doesn't exists.\r\n```",
              "createdAt": "2024-02-27T08:57:58Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\n+\n+`Move`\n+No warning or errors.  This task is effectively a no-op as files could not exist anymore.\n+\n+`DownloadFile`\n+Error if SkipUnchangedFiles is true.\n+\n+`GenerateResource` \n+Error if any files would be generated.\n+\n+`MakeDir`\n+Error if folder doesn't exist.\n+\n+`RemoveDir`\n+Error if folder still exist.\n+\n+`Unzip`\n+Error if SkipUnchangedFiles is true.\n+\n+`ZipDirectory`\n+Error if the destination zip file doesn't exists.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nWhen `/question` switch is used, it will modify the shipping task behavior as follows.  Note: this is still experimental and can change.\r\n```",
              "createdAt": "2024-02-27T09:00:34Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n- **Double Checks**.  Since target and task could be incremental, if both employ incrementality checks, then it can lead to skipping the task but not the calling target.  For example, a Target has inputs A and outputs B.  If A is newer, than B, then the target will start.  If the task called by that target compares the content of A and B and deems nothing has changed, then B is not updated.  In such case, it will lead to the target rerunning.\r\n```\r\n\r\nBtw. is there any advice to this case, how to avoid the situation? E.g. - would it ba advicable to use a temprary file with hash of the real input as the input to the target?",
              "createdAt": "2024-02-27T09:07:00Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\n+\n+`Move`\n+No warning or errors.  This task is effectively a no-op as files could not exist anymore.\n+\n+`DownloadFile`\n+Error if SkipUnchangedFiles is true.\n+\n+`GenerateResource` \n+Error if any files would be generated.\n+\n+`MakeDir`\n+Error if folder doesn't exist.\n+\n+`RemoveDir`\n+Error if folder still exist.\n+\n+`Unzip`\n+Error if SkipUnchangedFiles is true.\n+\n+`ZipDirectory`\n+Error if the destination zip file doesn't exists.\n+\n+## Common Up-To-Date Error\n+- **Typographical error**. Spelling or incorrect path.  Check if the target inputs and outputs real files.\n+- **Casing**. While MSBuild on Windows is case insenstive, some command line comparision and hashing tool are case senstive.  Paths and Project Refernces are a common source of casing issues.\n+- **Cross Product**. Inputs and Outputs are sometimes used for Cross Product. Try to move all to `Outputs` parameter or `Returns` parameter instead of Inputs.\n+- **Exec Task** are not Skipable, thus they should be wrapped with Target Inputs and Outputs or other systems.  For backwards compatibility, Question will not issue an error.\n+- **FileWritten**.  The common clean system will remove files that aren't in the FileWritten itemgroup.  Sometimes task output won't be add to FileWritten itemgroup.\n+- **Build, Build, Build**.  Sometimes, a 2nd build will expose up to date issue.  Verify building 3 times. For example, 1st Build, Question 2nd build, Run 2nd Build, and Question 3rd build.\n+- **Double Checks**.  Since target and task could be incremental, if both are implemented, then it can lead task skipping but not the task.  For example, a Target has inputs A and outputs B.  If A is newer, than B, then the target will start.  If the task compares the content of A and B and deems nothing has changed, then B is not updated.  If such case, this leads to target rerunning.",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "It will differ case by case, but in general, to consolidate the checks into a single location and remove the other.  The author would need to decide what is the best course of action.  ",
              "createdAt": "2024-02-27T22:13:19Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\n+\n+`Move`\n+No warning or errors.  This task is effectively a no-op as files could not exist anymore.\n+\n+`DownloadFile`\n+Error if SkipUnchangedFiles is true.\n+\n+`GenerateResource` \n+Error if any files would be generated.\n+\n+`MakeDir`\n+Error if folder doesn't exist.\n+\n+`RemoveDir`\n+Error if folder still exist.\n+\n+`Unzip`\n+Error if SkipUnchangedFiles is true.\n+\n+`ZipDirectory`\n+Error if the destination zip file doesn't exists.\n+\n+## Common Up-To-Date Error\n+- **Typographical error**. Spelling or incorrect path.  Check if the target inputs and outputs real files.\n+- **Casing**. While MSBuild on Windows is case insenstive, some command line comparision and hashing tool are case senstive.  Paths and Project Refernces are a common source of casing issues.\n+- **Cross Product**. Inputs and Outputs are sometimes used for Cross Product. Try to move all to `Outputs` parameter or `Returns` parameter instead of Inputs.\n+- **Exec Task** are not Skipable, thus they should be wrapped with Target Inputs and Outputs or other systems.  For backwards compatibility, Question will not issue an error.\n+- **FileWritten**.  The common clean system will remove files that aren't in the FileWritten itemgroup.  Sometimes task output won't be add to FileWritten itemgroup.\n+- **Build, Build, Build**.  Sometimes, a 2nd build will expose up to date issue.  Verify building 3 times. For example, 1st Build, Question 2nd build, Run 2nd Build, and Question 3rd build.\n+- **Double Checks**.  Since target and task could be incremental, if both are implemented, then it can lead task skipping but not the task.  For example, a Target has inputs A and outputs B.  If A is newer, than B, then the target will start.  If the task compares the content of A and B and deems nothing has changed, then B is not updated.  If such case, this leads to target rerunning.",
              "author": {
                "login": "yuehuang010"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The numbers are confusing here - should it be ``Build 3 times, after each run, run the build with `/question` switch` to reveal possible incrementality issues.`` ?",
              "createdAt": "2024-02-27T09:12:13Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\n+\n+`Move`\n+No warning or errors.  This task is effectively a no-op as files could not exist anymore.\n+\n+`DownloadFile`\n+Error if SkipUnchangedFiles is true.\n+\n+`GenerateResource` \n+Error if any files would be generated.\n+\n+`MakeDir`\n+Error if folder doesn't exist.\n+\n+`RemoveDir`\n+Error if folder still exist.\n+\n+`Unzip`\n+Error if SkipUnchangedFiles is true.\n+\n+`ZipDirectory`\n+Error if the destination zip file doesn't exists.\n+\n+## Common Up-To-Date Error\n+- **Typographical error**. Spelling or incorrect path.  Check if the target inputs and outputs real files.\n+- **Casing**. While MSBuild on Windows is case insenstive, some command line comparision and hashing tool are case senstive.  Paths and Project Refernces are a common source of casing issues.\n+- **Cross Product**. Inputs and Outputs are sometimes used for Cross Product. Try to move all to `Outputs` parameter or `Returns` parameter instead of Inputs.\n+- **Exec Task** are not Skipable, thus they should be wrapped with Target Inputs and Outputs or other systems.  For backwards compatibility, Question will not issue an error.\n+- **FileWritten**.  The common clean system will remove files that aren't in the FileWritten itemgroup.  Sometimes task output won't be add to FileWritten itemgroup.\n+- **Build, Build, Build**.  Sometimes, a 2nd build will expose up to date issue.  Verify building 3 times. For example, 1st Build, Question 2nd build, Run 2nd Build, and Question 3rd build.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is a 'Cross Product'?\r\nDoes this need an explanation or link? I'm not able to understand this one due to that lack of knowledge.",
              "createdAt": "2024-02-27T09:14:26Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,84 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally. Question is a check to help ensure minimal builds with zeros changes, and thus, faster build with small changes.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface. Question is not and does not replace Fast Up-To-Date Check.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.  \n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when `/question` switch is used. The custom task will need to decide how it want to handle its behavior.  For example - if there is already a message describing why the task cannot be skipped, then simply convert the message to an error. Remember to return `false` to stop the build.  For the best reproducibility, try to preserve the input state and exit early.\n+\n+```C#\n+if (FailIfNotIncremental)\n+{\n+  TaskLoggingHelper.LogErrorWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+  return false;\n+}\n+else\n+{\n+  TaskLoggingHelper.LogMessageWithCodeFromResources(\"ToolTask.NotUpToDate\");\n+}\n+```\n+\n+\n+### `ToolTask`\n+If inheriting from ToolTask, your custom task can override `SkipTaskExecution()`.  When it returns `false`, TookTask will exit with error.\n+\n+## Shipping Tasks\n+When `/question` switch is used, it will modify the shipping task with these behavior.  Note: this is still experimental and can change.\n+\n+`Exec`\n+Doesn't have an up-to-date check.  It will always run.  Use Target Inputs and Outputs to skip the exec task.\n+\n+`Touch`\n+Warns when a file is touched.  It is unclear if the file touched will participate in the build as it is a common practice to touch a file to signal external tool to run.  Use Target Inputs and Outputs to skip this task.\n+\n+`Copy`\n+Errors out when any copy action occurs.\n+\n+`WriteLinesToFile`\n+Error when WriteOnlyWhenDifferent is true.  This task could be used to append to a log file that isn't participating in the build itself.\n+\n+`Delete`\n+Warn that a file still exists and is to be deleted.  It is unclear if the file is part of the build or it is deleting an accessary file outside of the build.\n+\n+`Move`\n+No warning or errors.  This task is effectively a no-op as files could not exist anymore.\n+\n+`DownloadFile`\n+Error if SkipUnchangedFiles is true.\n+\n+`GenerateResource` \n+Error if any files would be generated.\n+\n+`MakeDir`\n+Error if folder doesn't exist.\n+\n+`RemoveDir`\n+Error if folder still exist.\n+\n+`Unzip`\n+Error if SkipUnchangedFiles is true.\n+\n+`ZipDirectory`\n+Error if the destination zip file doesn't exists.\n+\n+## Common Up-To-Date Error\n+- **Typographical error**. Spelling or incorrect path.  Check if the target inputs and outputs real files.\n+- **Casing**. While MSBuild on Windows is case insenstive, some command line comparision and hashing tool are case senstive.  Paths and Project Refernces are a common source of casing issues.\n+- **Cross Product**. Inputs and Outputs are sometimes used for Cross Product. Try to move all to `Outputs` parameter or `Returns` parameter instead of Inputs.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nTask author can implement the optional `IIncrementalTask` interface that will expose `FailIfNotIncremental`. `FailIfNotIncremental` is true when /question switch is used. The custom task will need to decide how it want to handle their behavior.  For example.  If there is already a message describing why the task cannot be skipped, then simply convert the message to a error. Remember to return false to stop the build.  For the best reproducibility, do not modify any files on disk.\r\n```",
              "createdAt": "2024-08-29T12:40:07Z",
              "path": "documentation/specs/question.md",
              "diffHunk": "@@ -0,0 +1,83 @@\n+\n+# Question the build (Is Up-To-Date?)\n+\n+MSBuild can skip Target or Task from running again by implementing some checks. Targets uses the Inputs and Outputs parameters to compare the timestamp of input and output files (see ['Build incrementally'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-incrementally) for details). Tasks have different behavior and thus have different rules. See below for details of each task shipped with MSBuild. Custom tasks can implement `IIncrementalTask` interface.\n+\n+Question switch ask if the next build is up-to-date. It will start a build, but will error out as soon as a target or task is not up-to-date. This error stops the build and allows investigation at the point of failure. It is recommended to use binlog logging to gather all the information. Targets or tasks that don't have an up-to-date check will build normally.\n+\n+[Fast Up-To-Date Check](https://github.com/dotnet/project-system/blob/cd275918ef9f181f6efab96715a91db7aabec832/docs/up-to-date-check.md) is a system that is implemented by the Project System, that decides, if it needs to run MSBuild.  MSBuild takes a non-trival amount of time to load, evaluate, and run through each target and task.  Fast Up-To-Date is faster, but can be less accurate, suitable for an IDE and a human interface.  It is not accurate enough for a CI.\n+\n+## Usage\n+Question mode is designed to be used on the command line.  Run your normal build, then run again with /question.\n+```\n+msbuild /p:Configuration=Debug Project1.csproj /bl:build.binlog\n+msbuild /p:Configuration=Debug Project1.csproj /bl:incremental.binlog /question\n+```\n+If there are no errors, then your build is up-to-date.\n+If there are errors, then investigate the error.  See common errors below.  Keep both logs to help with your investigation.\n+\n+## Custom Tasks\n+Task author can implement the optional `IIncrementalTask` interface that will explose `FailIfNotIncremental`. `FailIfNotIncremental` is true when /question switch is used. The custom task will need to decide how it want to handle their behavior.  For example.  If there is already a message describing why the task cannot be skipped, then simply convert the message to a error. Remember to return false to stop the build.  For the best reproducibility, do not modify any files on disk.",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}