{
  "number": 6999,
  "title": "Simplify verify throw and remove unnecessary usings",
  "body": "This has a little random cleanup plus moving the condition outside VerifyThrow calls if simply calling the method would do a nontrivial amount of work. The fourth commit switches VerifyThrow* to Throw* as appropriate.\r\n\r\nI haven't measured the performance impact. The first and fourth commits should have ~0 impact, though technically the fourth commit makes it slightly faster in the failure case (by one branch). The third helps us avoid a couple small allocations. The second lets us avoid a nontrivial amount of work in an extremely common case, so if this has a positive perf impact, I would suspect that commit.\r\n\r\nIt should be easiest to look at this commit-by-commit.",
  "state": "MERGED",
  "createdAt": "2021-10-29T00:20:32Z",
  "updatedAt": "2021-11-02T13:31:46Z",
  "closedAt": "2021-11-02T13:31:46Z",
  "mergedAt": "2021-11-02T13:31:46Z",
  "additions": 148,
  "deletions": 159,
  "changedFiles": 43,
  "headRefName": "verifyThrow2",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "110571dae0e5b9960ffb7071e3a69583db03a9b6",
          "message": "Remove unnecessary usings",
          "committedDate": "2021-10-29T00:15:49Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "96c8fa02b0c51a048a3ab96c28ff327d684949ce",
          "message": "Move condition outside VerifyThrow\n\nThese statements only do anything if the condition is false, but they evaluate their arguments either way. These do nontrivial work when evaluating their arguments, so figure out if we should skip it early. This is specifically tuned to BoolEvaluate (part of evaluating conditions)",
          "committedDate": "2021-10-29T00:15:49Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c3929adb024d5447be282114743279afcd8e9011",
          "message": "Other VerifyThrow simplifications\n\nSlightly reduce other work done",
          "committedDate": "2021-10-29T00:15:49Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "84c7a23d25b05f08d18f199c3a21af1095b18f34",
          "message": "Directly throw exceptions\n\nRather than checking whether false is false.",
          "committedDate": "2021-10-29T15:22:04Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udc97 simple change yet the code is FAR more readable",
              "createdAt": "2021-10-29T17:01:01Z",
              "path": "src/Build/Evaluation/Conditionals/NumericComparisonExpressionNode.cs",
              "diffHunk": "@@ -43,14 +43,16 @@ internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState\n             bool isRightNum = RightChild.TryNumericEvaluate(state, out double rightNum);\n             bool isRightVersion = RightChild.TryVersionEvaluate(state, out Version rightVersion);\n \n-            ProjectErrorUtilities.VerifyThrowInvalidProject\n-                ((isLeftNum || isLeftVersion) && (isRightNum || isRightVersion),\n-                 state.ElementLocation,\n-                \"ComparisonOnNonNumericExpression\",\n-                 state.Condition,\n-                 /* helpfully display unexpanded token and expanded result in error message */\n-                 isLeftNum ? RightChild.GetUnexpandedValue(state) : LeftChild.GetUnexpandedValue(state),\n-                 isLeftNum ? RightChild.GetExpandedValue(state) : LeftChild.GetExpandedValue(state));\n+            if ((!isLeftNum && !isLeftVersion) || (!isRightNum && !isRightVersion))",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Not to mention performant! This prevents us from randomly expanding values when we don't expect to need them.",
              "createdAt": "2021-10-29T17:14:04Z",
              "path": "src/Build/Evaluation/Conditionals/NumericComparisonExpressionNode.cs",
              "diffHunk": "@@ -43,14 +43,16 @@ internal override bool BoolEvaluate(ConditionEvaluator.IConditionEvaluationState\n             bool isRightNum = RightChild.TryNumericEvaluate(state, out double rightNum);\n             bool isRightVersion = RightChild.TryVersionEvaluate(state, out Version rightVersion);\n \n-            ProjectErrorUtilities.VerifyThrowInvalidProject\n-                ((isLeftNum || isLeftVersion) && (isRightNum || isRightVersion),\n-                 state.ElementLocation,\n-                \"ComparisonOnNonNumericExpression\",\n-                 state.Condition,\n-                 /* helpfully display unexpanded token and expanded result in error message */\n-                 isLeftNum ? RightChild.GetUnexpandedValue(state) : LeftChild.GetUnexpandedValue(state),\n-                 isLeftNum ? RightChild.GetExpandedValue(state) : LeftChild.GetExpandedValue(state));\n+            if ((!isLeftNum && !isLeftVersion) || (!isRightNum && !isRightVersion))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: Since every other `VerifyThrow(false,...` was turned into `Throw(...`, should we make an overload for this?",
              "createdAt": "2021-10-29T17:03:50Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2843,7 +2843,7 @@ DirectoryGetFiles getFiles\n                 // If there is more than one solution file in the current directory we have no idea which one to use\n                 else if (actualSolutionFiles.Count > 1)\n                 {\n-                    InitializationException.VerifyThrow(false, projectDirectory == null ? \"AmbiguousProjectError\" : \"AmbiguousProjectDirectoryError\", null, projectDirectory);\n+                    InitializationException.VerifyThrow(false, projectDirectory == null ? \"AmbiguousProjectError\" : \"AmbiguousProjectDirectoryError\", null, projectDirectory, false);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "There kinda already is one:\r\n`InitializationException.Throw(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(projectDirectory == null ? \"AmbiguousProjectError\" : \"AmbiguousProjectDirectoryError\", projectDirectory), null);`\r\n\r\nDo you like that better? I don't really care either way. The VerifyThrow --> Throw change should have virtually no user impact.",
              "createdAt": "2021-10-29T17:26:11Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2843,7 +2843,7 @@ DirectoryGetFiles getFiles\n                 // If there is more than one solution file in the current directory we have no idea which one to use\n                 else if (actualSolutionFiles.Count > 1)\n                 {\n-                    InitializationException.VerifyThrow(false, projectDirectory == null ? \"AmbiguousProjectError\" : \"AmbiguousProjectDirectoryError\", null, projectDirectory);\n+                    InitializationException.VerifyThrow(false, projectDirectory == null ? \"AmbiguousProjectError\" : \"AmbiguousProjectDirectoryError\", null, projectDirectory, false);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}