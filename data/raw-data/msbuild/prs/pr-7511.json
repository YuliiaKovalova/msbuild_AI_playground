{
  "number": 7511,
  "title": "Platform Negotiation: Platform is considered a referenced project's DEFAULT platform",
  "body": "Reduces the number of evaluations in platform-negotiated builds.\r\n\r\n### Context\r\nA (Platform=x86) -> B (Platforms=x64;x86, Platform=x86) (A, a project built as x86 references B, a project that _can_ build as x86 or x64, but will default to x86 if built in isolation)\r\n\r\nPrior to this change, platform negotiation would build B with `SetPlatform=Platform=x86`, causing a new evaluation. This can be avoided because it would have built as `x86` with or without that global property being passed.\r\n\r\n### Changes Made\r\n`GetTargetFrameworks` target now also returns the `Platform` property from the target. During platform negotiation, if the referenced project's platform matches the current project's platform, we now decide to build that project **without** passing a global `Platform` property. This prevents a new evaluation and will maximize the number of re-used evaluations during platform negotiation.\r\n\r\n### Testing\r\nCreated new UT for this.\r\n\r\n### Notes\r\nCommit by commit review may make it easier.",
  "state": "MERGED",
  "createdAt": "2022-04-01T20:15:06Z",
  "updatedAt": "2022-05-11T08:21:50Z",
  "closedAt": "2022-05-11T08:21:50Z",
  "mergedAt": "2022-05-11T08:21:50Z",
  "additions": 135,
  "deletions": 32,
  "changedFiles": 19,
  "headRefName": "setplatform-defaultplatform",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [
    "merge-when-branch-open",
    "changewave17.4"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4167a33be4cc0070ea381082e910be9fb583a6f2",
          "message": "GetTargetFrameworks now returns Platform",
          "committedDate": "2022-05-10T19:24:51Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "23278871e2a35ae2c5ba76c1e532cd6c94df7060",
          "message": "Platform property is default when possible",
          "committedDate": "2022-05-10T19:24:51Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "833b4864fb85c4658bd0df306b6928f1dd793406",
          "message": "Create resource for choosing a 'default' platform",
          "committedDate": "2022-05-10T19:24:51Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ffc1512da5145227fcd744e2ff9fda926055334e",
          "message": "Update message when no Platforms or Platform is given",
          "committedDate": "2022-05-10T19:24:51Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d681193735acce8579e0169fba71086e95a75b9f",
          "message": "Add unit test",
          "committedDate": "2022-05-10T19:24:51Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "072147cad3bf7d2097f59fd0455479b0ff071f0b",
          "message": "[PR Feedback] Fix string comparison, adjust comment",
          "committedDate": "2022-05-10T19:24:51Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9dcb59b3fea78737268c6bda9c40e97296031963",
          "message": "Add escape hatch for pulling out Platform metadata",
          "committedDate": "2022-05-10T19:24:51Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "601e963cb3d29a51cbc63b07b5b4f4876536d1dc",
          "message": "Add changewave check for 17.3",
          "committedDate": "2022-05-10T19:24:52Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e38c2215aa3385c9754ae546f62d2dc2a39ecc41",
          "message": "Fix parens",
          "committedDate": "2022-05-10T19:24:52Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ed2162ba571361c9170ecd5c52024bff32158993",
          "message": "Update change wave to 17.4",
          "committedDate": "2022-05-10T19:24:52Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "340e5998410860e78ba2d21011e6a37de0d88dff",
          "message": "Add to 17.4 changewave doc",
          "committedDate": "2022-05-10T19:25:49Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@BenVillalobos, is this ready for merge-when-branch-open?",
        "createdAt": "2022-05-09T15:03:48Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Rebased on main and added a new entry for this changewave feature",
        "createdAt": "2022-05-10T19:26:22Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "\"it should always build as\" should probably be \"it build as by default\"",
              "createdAt": "2022-04-01T20:20:00Z",
              "path": "src/Tasks/GetCompatiblePlatform.cs",
              "diffHunk": "@@ -58,29 +58,35 @@ public override bool Execute()\n             {\n                 AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);\n \n-                string projectReferencePlatformMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"Platforms\");\n+                string referencedProjectPlatform = AssignedProjectsWithPlatform[i].GetMetadata(\"Platform\");\n+                string projectReferencePlatformsMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"Platforms\");\n+                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"PlatformLookupTable\");\n \n-                if (string.IsNullOrEmpty(projectReferencePlatformMetadata))\n+                if (string.IsNullOrEmpty(projectReferencePlatformsMetadata) && string.IsNullOrEmpty(referencedProjectPlatform))\n                 {\n                     Log.LogWarningWithCodeFromResources(\"GetCompatiblePlatform.NoPlatformsListed\", AssignedProjectsWithPlatform[i].ItemSpec);\n                     continue;\n                 }\n \n-                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"PlatformLookupTable\");\n                 // Pull platformlookuptable metadata from the referenced project. This allows custom\n                 // mappings on a per-ProjectReference basis.\n                 Dictionary<string, string>? projectReferenceLookupTable = ExtractLookupTable(projectReferenceLookupTableMetadata);\n \n                 HashSet<string> projectReferencePlatforms = new HashSet<string>();\n-                foreach (string s in projectReferencePlatformMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))\n+                foreach (string s in projectReferencePlatformsMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))\n                 {\n                     projectReferencePlatforms.Add(s);\n                 }\n \n                 string buildProjectReferenceAs = string.Empty;\n \n+                // If the referenced project has a defined `Platform` it should always build as _and_ it's compatible, build it without passing any global properties to reuse the evaluation.",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Case-sensitivity?",
              "createdAt": "2022-04-01T20:20:31Z",
              "path": "src/Tasks/GetCompatiblePlatform.cs",
              "diffHunk": "@@ -58,29 +58,35 @@ public override bool Execute()\n             {\n                 AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);\n \n-                string projectReferencePlatformMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"Platforms\");\n+                string referencedProjectPlatform = AssignedProjectsWithPlatform[i].GetMetadata(\"Platform\");\n+                string projectReferencePlatformsMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"Platforms\");\n+                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"PlatformLookupTable\");\n \n-                if (string.IsNullOrEmpty(projectReferencePlatformMetadata))\n+                if (string.IsNullOrEmpty(projectReferencePlatformsMetadata) && string.IsNullOrEmpty(referencedProjectPlatform))\n                 {\n                     Log.LogWarningWithCodeFromResources(\"GetCompatiblePlatform.NoPlatformsListed\", AssignedProjectsWithPlatform[i].ItemSpec);\n                     continue;\n                 }\n \n-                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"PlatformLookupTable\");\n                 // Pull platformlookuptable metadata from the referenced project. This allows custom\n                 // mappings on a per-ProjectReference basis.\n                 Dictionary<string, string>? projectReferenceLookupTable = ExtractLookupTable(projectReferenceLookupTableMetadata);\n \n                 HashSet<string> projectReferencePlatforms = new HashSet<string>();\n-                foreach (string s in projectReferencePlatformMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))\n+                foreach (string s in projectReferencePlatformsMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))\n                 {\n                     projectReferencePlatforms.Add(s);\n                 }\n \n                 string buildProjectReferenceAs = string.Empty;\n \n+                // If the referenced project has a defined `Platform` it should always build as _and_ it's compatible, build it without passing any global properties to reuse the evaluation.\n+                if (!string.IsNullOrEmpty(referencedProjectPlatform) && referencedProjectPlatform.Equals(CurrentProjectPlatform))",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Good catch \ud83d\ude2c",
              "createdAt": "2022-04-01T20:30:00Z",
              "path": "src/Tasks/GetCompatiblePlatform.cs",
              "diffHunk": "@@ -58,29 +58,35 @@ public override bool Execute()\n             {\n                 AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);\n \n-                string projectReferencePlatformMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"Platforms\");\n+                string referencedProjectPlatform = AssignedProjectsWithPlatform[i].GetMetadata(\"Platform\");\n+                string projectReferencePlatformsMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"Platforms\");\n+                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"PlatformLookupTable\");\n \n-                if (string.IsNullOrEmpty(projectReferencePlatformMetadata))\n+                if (string.IsNullOrEmpty(projectReferencePlatformsMetadata) && string.IsNullOrEmpty(referencedProjectPlatform))\n                 {\n                     Log.LogWarningWithCodeFromResources(\"GetCompatiblePlatform.NoPlatformsListed\", AssignedProjectsWithPlatform[i].ItemSpec);\n                     continue;\n                 }\n \n-                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"PlatformLookupTable\");\n                 // Pull platformlookuptable metadata from the referenced project. This allows custom\n                 // mappings on a per-ProjectReference basis.\n                 Dictionary<string, string>? projectReferenceLookupTable = ExtractLookupTable(projectReferenceLookupTableMetadata);\n \n                 HashSet<string> projectReferencePlatforms = new HashSet<string>();\n-                foreach (string s in projectReferencePlatformMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))\n+                foreach (string s in projectReferencePlatformsMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))\n                 {\n                     projectReferencePlatforms.Add(s);\n                 }\n \n                 string buildProjectReferenceAs = string.Empty;\n \n+                // If the referenced project has a defined `Platform` it should always build as _and_ it's compatible, build it without passing any global properties to reuse the evaluation.\n+                if (!string.IsNullOrEmpty(referencedProjectPlatform) && referencedProjectPlatform.Equals(CurrentProjectPlatform))",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do you need to return in order to avoid the `AssignedProjectsWithPlatform[i].SetMetadata(\"NearestPlatform\", buildProjectReferenceAs);` below?",
              "createdAt": "2022-04-01T20:21:20Z",
              "path": "src/Tasks/GetCompatiblePlatform.cs",
              "diffHunk": "@@ -58,29 +58,35 @@ public override bool Execute()\n             {\n                 AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);\n \n-                string projectReferencePlatformMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"Platforms\");\n+                string referencedProjectPlatform = AssignedProjectsWithPlatform[i].GetMetadata(\"Platform\");\n+                string projectReferencePlatformsMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"Platforms\");\n+                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"PlatformLookupTable\");\n \n-                if (string.IsNullOrEmpty(projectReferencePlatformMetadata))\n+                if (string.IsNullOrEmpty(projectReferencePlatformsMetadata) && string.IsNullOrEmpty(referencedProjectPlatform))\n                 {\n                     Log.LogWarningWithCodeFromResources(\"GetCompatiblePlatform.NoPlatformsListed\", AssignedProjectsWithPlatform[i].ItemSpec);\n                     continue;\n                 }\n \n-                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"PlatformLookupTable\");\n                 // Pull platformlookuptable metadata from the referenced project. This allows custom\n                 // mappings on a per-ProjectReference basis.\n                 Dictionary<string, string>? projectReferenceLookupTable = ExtractLookupTable(projectReferenceLookupTableMetadata);\n \n                 HashSet<string> projectReferencePlatforms = new HashSet<string>();\n-                foreach (string s in projectReferencePlatformMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))\n+                foreach (string s in projectReferencePlatformsMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))\n                 {\n                     projectReferencePlatforms.Add(s);\n                 }\n \n                 string buildProjectReferenceAs = string.Empty;\n \n+                // If the referenced project has a defined `Platform` it should always build as _and_ it's compatible, build it without passing any global properties to reuse the evaluation.\n+                if (!string.IsNullOrEmpty(referencedProjectPlatform) && referencedProjectPlatform.Equals(CurrentProjectPlatform))\n+                {\n+                    Log.LogMessageFromResources(MessageImportance.Low, \"GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform\", AssignedProjectsWithPlatform[i].ItemSpec, referencedProjectPlatform);",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Actually it's `string.Empty` so maybe doesn't matter? I forget if an empty global property value is the same as a missing global property",
              "createdAt": "2022-04-01T20:23:48Z",
              "path": "src/Tasks/GetCompatiblePlatform.cs",
              "diffHunk": "@@ -58,29 +58,35 @@ public override bool Execute()\n             {\n                 AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);\n \n-                string projectReferencePlatformMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"Platforms\");\n+                string referencedProjectPlatform = AssignedProjectsWithPlatform[i].GetMetadata(\"Platform\");\n+                string projectReferencePlatformsMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"Platforms\");\n+                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"PlatformLookupTable\");\n \n-                if (string.IsNullOrEmpty(projectReferencePlatformMetadata))\n+                if (string.IsNullOrEmpty(projectReferencePlatformsMetadata) && string.IsNullOrEmpty(referencedProjectPlatform))\n                 {\n                     Log.LogWarningWithCodeFromResources(\"GetCompatiblePlatform.NoPlatformsListed\", AssignedProjectsWithPlatform[i].ItemSpec);\n                     continue;\n                 }\n \n-                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"PlatformLookupTable\");\n                 // Pull platformlookuptable metadata from the referenced project. This allows custom\n                 // mappings on a per-ProjectReference basis.\n                 Dictionary<string, string>? projectReferenceLookupTable = ExtractLookupTable(projectReferenceLookupTableMetadata);\n \n                 HashSet<string> projectReferencePlatforms = new HashSet<string>();\n-                foreach (string s in projectReferencePlatformMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))\n+                foreach (string s in projectReferencePlatformsMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))\n                 {\n                     projectReferencePlatforms.Add(s);\n                 }\n \n                 string buildProjectReferenceAs = string.Empty;\n \n+                // If the referenced project has a defined `Platform` it should always build as _and_ it's compatible, build it without passing any global properties to reuse the evaluation.\n+                if (!string.IsNullOrEmpty(referencedProjectPlatform) && referencedProjectPlatform.Equals(CurrentProjectPlatform))\n+                {\n+                    Log.LogMessageFromResources(MessageImportance.Low, \"GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform\", AssignedProjectsWithPlatform[i].ItemSpec, referencedProjectPlatform);",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Nope! `buildProjectReferenceAs` is defaulted to `string.Empty`, which the targets will detect and handle for us. See the conditions on `NearestPlatform` here:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/c7cdc43a9d2ff9e448744774b09e5eca66a28d15/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1669-L1678",
              "createdAt": "2022-04-01T20:29:51Z",
              "path": "src/Tasks/GetCompatiblePlatform.cs",
              "diffHunk": "@@ -58,29 +58,35 @@ public override bool Execute()\n             {\n                 AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);\n \n-                string projectReferencePlatformMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"Platforms\");\n+                string referencedProjectPlatform = AssignedProjectsWithPlatform[i].GetMetadata(\"Platform\");\n+                string projectReferencePlatformsMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"Platforms\");\n+                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"PlatformLookupTable\");\n \n-                if (string.IsNullOrEmpty(projectReferencePlatformMetadata))\n+                if (string.IsNullOrEmpty(projectReferencePlatformsMetadata) && string.IsNullOrEmpty(referencedProjectPlatform))\n                 {\n                     Log.LogWarningWithCodeFromResources(\"GetCompatiblePlatform.NoPlatformsListed\", AssignedProjectsWithPlatform[i].ItemSpec);\n                     continue;\n                 }\n \n-                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata(\"PlatformLookupTable\");\n                 // Pull platformlookuptable metadata from the referenced project. This allows custom\n                 // mappings on a per-ProjectReference basis.\n                 Dictionary<string, string>? projectReferenceLookupTable = ExtractLookupTable(projectReferenceLookupTableMetadata);\n \n                 HashSet<string> projectReferencePlatforms = new HashSet<string>();\n-                foreach (string s in projectReferencePlatformMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))\n+                foreach (string s in projectReferencePlatformsMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))\n                 {\n                     projectReferencePlatforms.Add(s);\n                 }\n \n                 string buildProjectReferenceAs = string.Empty;\n \n+                // If the referenced project has a defined `Platform` it should always build as _and_ it's compatible, build it without passing any global properties to reuse the evaluation.\n+                if (!string.IsNullOrEmpty(referencedProjectPlatform) && referencedProjectPlatform.Equals(CurrentProjectPlatform))\n+                {\n+                    Log.LogMessageFromResources(MessageImportance.Low, \"GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform\", AssignedProjectsWithPlatform[i].ItemSpec, referencedProjectPlatform);",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      }
    ]
  }
}