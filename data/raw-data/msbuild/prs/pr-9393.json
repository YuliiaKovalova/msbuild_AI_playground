{
  "number": 9393,
  "title": "Log ETW for SDK resolution again",
  "body": "`EventSource.WriteEvent()` can, instead of writing the specified event, instead create `Microsoft-Build/EventSourceMessage` events that look like\r\n    \r\n    EventSourceException while processing event \"SdkResolverResolveSdkStop\": Null passed as a event argument.\r\n    EventSourceException while processing event \"CachedSdkResolverServiceResolveSdkStop\": Null passed as a event argument.\r\n    \r\nFix instances of this by enabling nullable analysis in `MSBuildEventSource.cs` and then fixing the errors that arose.\r\n    \r\nFixes #8519.\r\n\r\nWhile investigating this I noticed one event that had had a field added but no version bump, so I fixed that too.\r\n\r\n~With this change I see events:~\r\n![image](https://github.com/dotnet/msbuild/assets/3347530/2de18ae5-64fa-4848-af49-7ef421e1b959)\r\n",
  "state": "MERGED",
  "createdAt": "2023-11-03T15:18:49Z",
  "updatedAt": "2023-11-30T22:05:23Z",
  "closedAt": "2023-11-30T22:05:22Z",
  "mergedAt": "2023-11-30T22:05:22Z",
  "additions": 13,
  "deletions": 15,
  "changedFiles": 6,
  "headRefName": "fix-sdk-resolver-events",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cfe74c94c24fc7d2255b75626499eb98448e694d",
          "message": "Update ETW Version for modified event\n\nPer https://learn.microsoft.com/dotnet/api/system.diagnostics.tracing.eventsource#conventions,\nthe version field for events must increment any time the payload is\nadded to.\n\nI looked at https://github.com/dotnet/msbuild/blame/31c4d335325e858a3c4dba66d921d0e31bdee5ff/src/Framework/MSBuildEventSource.cs\nand added a version bump to every event that wasn't from 45e27c1,\nad3e7d0, or an introduction of the event, and found only this one.",
          "committedDate": "2023-11-03T15:11:16Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "187da8097a2f6db9aad994d852d17ec3050840cc",
          "message": "Never log a null string ETW arg\n\n`EventSource.WriteEvent()` can, instead of writing the specified event, instead\ncreate `Microsoft-Build/EventSourceMessage` events that look like\n\n```\nEventSourceException while processing event \"SdkResolverResolveSdkStop\": Null passed as a event argument.\nEventSourceException while processing event \"CachedSdkResolverServiceResolveSdkStop\": Null passed as a event argument.\n```\n\nFix all instances of this by enabling nullable analysis in\n`MSBuildEventSource.cs` and then fixing the errors that arose.\n\nFixes #8519.",
          "committedDate": "2023-11-03T15:11:16Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d8d045848038c4512302b4b50ff483fbe5aacaeb",
          "message": "Avoid logging null ETW strings in SDK resolvers",
          "committedDate": "2023-11-03T16:09:44Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e77aa194169d9bd990806c3f026706dd61b2fe59",
          "message": "Use named constant for default set of targets",
          "committedDate": "2023-11-10T19:34:45Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "v1 of this fix is incomplete, because it didn't actually fix `SdkResolverResolveSdkStop`/`CachedSdkResolverServiceResolveSdkStop`. They only work in solution context today. Trying to figure out if there's a good way to ensure a fix for the whole category of bug.",
        "createdAt": "2023-11-03T16:02:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Trying to figure out if there's a good way to ensure a fix for the whole category of bug.\r\n\r\nTried https://github.com/dotnet/msbuild/pull/9395 but I think our normal build with the text perf log doesn't fire enough of the events to catch the SDK ones that are known (now) to be broken.",
        "createdAt": "2023-11-03T22:02:51Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is string.Empty the right default here? I'm wondering if we should put \"exit type could not be determined\" or something, though ideally we should always know the exit type.",
              "createdAt": "2023-11-06T22:09:47Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -225,7 +225,7 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n \n                 ReadPacketsLoop(cancellationToken);\n \n-                MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Agreed that we should always know it. I don't feel too bad about empty-string here because we're also logging the enum value.",
              "createdAt": "2023-11-10T19:36:46Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -225,7 +225,7 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n \n                 ReadPacketsLoop(cancellationToken);\n \n-                MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "possibly future nit:\r\nlocalize?\r\n\r\nIt'd be higher priority, but I don't think non-experts use this very much, so it might not matter.",
              "createdAt": "2023-11-06T22:11:04Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -525,7 +525,7 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques\n \n                     ErrorUtilities.VerifyThrow(plugin.Instance != null, \"Plugin '{0}' instance is null\", plugin.Name);\n \n-                    MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(plugin.Name, buildRequest.ProjectFullPath, targetNames);\n+                    MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(plugin.Name, buildRequest.ProjectFullPath, targetNames ?? \"<default>\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "IMO the ETW doesn't need localization, and even if it did--the targets don't have localized names, so this doesn't seem unreasonable.",
              "createdAt": "2023-11-08T22:16:04Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -525,7 +525,7 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques\n \n                     ErrorUtilities.VerifyThrow(plugin.Instance != null, \"Plugin '{0}' instance is null\", plugin.Name);\n \n-                    MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(plugin.Name, buildRequest.ProjectFullPath, targetNames);\n+                    MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(plugin.Name, buildRequest.ProjectFullPath, targetNames ?? \"<default>\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm guessing exactly one of these is null? Should we verify that before calling this?",
              "createdAt": "2023-11-06T22:12:10Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs",
              "diffHunk": "@@ -41,7 +41,7 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging\n \n             bool wasResultCached = true;\n \n-            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);\n+            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath ?? string.Empty, projectPath ?? string.Empty);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Why do you think that? I think we could resolve an SDK from an in-memory project (no path) that doesn't have a solution.",
              "createdAt": "2023-11-06T22:40:11Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs",
              "diffHunk": "@@ -41,7 +41,7 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging\n \n             bool wasResultCached = true;\n \n-            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);\n+            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath ?? string.Empty, projectPath ?? string.Empty);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I can go back and check. I thought in-memory projects have fake paths we use for caching and such. I seem to remember a bug where we neglected to check if a project existed before we tried to open it, but I may be thinking of solution metaprojects specifically.",
              "createdAt": "2023-11-06T23:14:11Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs",
              "diffHunk": "@@ -41,7 +41,7 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging\n \n             bool wasResultCached = true;\n \n-            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);\n+            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath ?? string.Empty, projectPath ?? string.Empty);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this is verifiably not null, though if the full path does not contain any directory information (not entirely clear on how this could be, but it's in a comment), it may be empty. Not sure if that's a meaningful distinction you care to capture.",
              "createdAt": "2023-11-06T22:15:54Z",
              "path": "src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs",
              "diffHunk": "@@ -104,7 +104,7 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build\n                             string[] includeSplitFilesEscaped;\n                             if (MSBuildEventSource.Log.IsEnabled())\n                             {\n-                                MSBuildEventSource.Log.ExpandGlobStart(_rootDirectory, glob, string.Join(\", \", excludePatternsForGlobs));\n+                                MSBuildEventSource.Log.ExpandGlobStart(_rootDirectory ?? string.Empty, glob, string.Join(\", \", excludePatternsForGlobs));",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this should never be null?",
              "createdAt": "2023-11-06T22:18:26Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -248,7 +248,7 @@ private List<SdkResolver> GetResolvers(IList<SdkResolverManifest> resolversManif\n                             MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();\n                             newResolvers = _sdkResolverLoader.LoadResolversFromManifest(resolverManifest, loggingContext, sdkReferenceLocation);\n                             _manifestToResolvers[resolverManifest] = newResolvers;\n-                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(resolverManifest.DisplayName, newResolvers.Count);\n+                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(resolverManifest.DisplayName ?? string.Empty, newResolvers.Count);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "For various of these: yeah, hopefully a future nullability pass will get rid of this stuff. But for now null checks are cheap so I put them in everywhere that flagged.",
              "createdAt": "2023-11-08T22:18:03Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -248,7 +248,7 @@ private List<SdkResolver> GetResolvers(IList<SdkResolverManifest> resolversManif\n                             MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();\n                             newResolvers = _sdkResolverLoader.LoadResolversFromManifest(resolverManifest, loggingContext, sdkReferenceLocation);\n                             _manifestToResolvers[resolverManifest] = newResolvers;\n-                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(resolverManifest.DisplayName, newResolvers.Count);\n+                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(resolverManifest.DisplayName ?? string.Empty, newResolvers.Count);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Hello, sorry for jumping in,  asking out of curiosity: will it make sence to move the \"<default>\" to constants for possible future re-usage? ",
              "createdAt": "2023-11-09T12:32:49Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -525,7 +525,7 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques\n \n                     ErrorUtilities.VerifyThrow(plugin.Instance != null, \"Plugin '{0}' instance is null\", plugin.Name);\n \n-                    MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(plugin.Name, buildRequest.ProjectFullPath, targetNames);\n+                    MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(plugin.Name, buildRequest.ProjectFullPath, targetNames ?? \"<default>\");",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "In fact, there was a preexisting constant for this meaning that I should have used, thanks!",
              "createdAt": "2023-11-10T19:34:53Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -525,7 +525,7 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques\n \n                     ErrorUtilities.VerifyThrow(plugin.Instance != null, \"Plugin '{0}' instance is null\", plugin.Name);\n \n-                    MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(plugin.Name, buildRequest.ProjectFullPath, targetNames);\n+                    MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(plugin.Name, buildRequest.ProjectFullPath, targetNames ?? \"<default>\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do we need this `Version = 1`",
              "createdAt": "2023-11-13T19:18:20Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -242,7 +240,7 @@ public void RarOverallStart()\n             WriteEvent(27);\n         }\n \n-        [Event(28, Keywords = Keywords.All | Keywords.PerformanceLog)]\n+        [Event(28, Keywords = Keywords.All | Keywords.PerformanceLog, Version = 1)]",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "The [rules for these events](https://learn.microsoft.com/dotnet/api/system.diagnostics.tracing.eventsource?view=net-7.0#conventions) say \r\n\r\n> Attempt to keep [EventSource](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventsource?view=net-7.0) objects backwards compatible and version them appropriately. The default version for an event is `0`. The version can be can be changed by setting [Version](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventattribute.version?view=net-7.0#system-diagnostics-tracing-eventattribute-version). Change the version of an event whenever you change properties of the payload. Always add new payload properties to the end of the event declaration. If this is not possible, create a new event with a new ID to replace the old one.\r\n\r\nIn #6410 I added fields to this event but didn't bump its version. Fixing that retroactively. (This was the only one I saw, looking through a `git blame` of this file.)",
              "createdAt": "2023-11-13T19:45:37Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -242,7 +240,7 @@ public void RarOverallStart()\n             WriteEvent(27);\n         }\n \n-        [Event(28, Keywords = Keywords.All | Keywords.PerformanceLog)]\n+        [Event(28, Keywords = Keywords.All | Keywords.PerformanceLog, Version = 1)]",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}