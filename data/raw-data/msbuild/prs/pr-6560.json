{
  "number": 6560,
  "title": "Move ref assembly to the obj folder",
  "body": "\r\nFixes #6543\r\n\r\n### Context\r\n\r\nThe location of this file is mostly irrelevant, and users find it\r\nconfusing when it's in the output folder.\r\n\r\n### Changes Made\r\n\r\nChanged the compiler's obj output to a folder named `refint` and changed the\r\n\"final\" output ref assembly to live in `obj/ref` (modulo other variables).\r\n\r\nDid this under a double opt-out: it's in the 17.0 changewave, and there's a new property `$(ProduceReferenceAssemblyInBin)`.\r\n\r\n### Notes\r\n\r\nNaming on . . . everything is up for debate.\r\n",
  "state": "MERGED",
  "createdAt": "2021-06-14T20:46:01Z",
  "updatedAt": "2021-09-07T22:18:07Z",
  "closedAt": "2021-07-20T20:19:15Z",
  "mergedAt": "2021-07-20T20:19:14Z",
  "additions": 6,
  "deletions": 3,
  "changedFiles": 2,
  "headRefName": "hide-ref-assemblies",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open",
    "changewave17.0"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9591bca4aeacd7f7555b8889af4868132427bca2",
          "message": "Move ref assembly to the obj folder\n\nThe location of this file is mostly irrelevant, and users find it\nconfusing when it's in the output folder.",
          "committedDate": "2021-06-14T20:13:02Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9e33e1d8ab8bbf47e5f854a542a0e964decd03d2",
          "message": "Move the compiler output so it doesn't conflict with the final bin location (and the CopyRefAssembly task can work)",
          "committedDate": "2021-06-14T20:53:16Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c06c78ed5315f7adca46315327cb61bcadacec90",
          "message": "Create ref-assembly target directory",
          "committedDate": "2021-06-14T22:40:27Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4577bd22fb428ede06093ecd5d69f2f341881e50",
          "message": "what if I close a paren? I mean, just, theoretically",
          "committedDate": "2021-06-15T14:25:26Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4d1a2bd4e262b71afb5020f7b4e88fb234159e97",
          "message": "Update the old way",
          "committedDate": "2021-06-15T15:54:11Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ff27236db2dda4ba9f75ae06532cc3d0ba992cf2",
          "message": "Merge remote-tracking branch 'upstream/main' into hide-ref-assemblies",
          "committedDate": "2021-07-12T14:39:59Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "71bee2637d54f3bd026b9781db18364b7c544793",
          "message": "Changewave doc",
          "committedDate": "2021-07-12T14:41:09Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6e18cd0ce074c323a98e1f294f4a02a9fbb2b143",
          "message": "Create correct ref output directory in both cases",
          "committedDate": "2021-07-13T21:06:52Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "29b0904bf9ba631d579df2c08eb75df2ba9968cd",
          "message": "Rename to ProduceReferenceAssemblyInOutDir\n\nThis is closer to the customization we document.\n\nCo-Authored-By: Nirmal Guru <Nirmal4G@gmail.com>",
          "committedDate": "2021-07-13T21:07:20Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Changed the compiler's obj output to a folder named refint and changed the\r\n\r\nMissing where `refint` is specified. Can you help me see that? ",
        "createdAt": "2021-06-14T20:50:32Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "> Can you help me see that?\r\n\r\nI have decided to do this using the advanced technique of \"actually doing what I said I did instead of lying\". Sorry!",
        "createdAt": "2021-06-14T20:54:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "If we have time for another build, can you modify the list in https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves.md to include this PR?",
        "createdAt": "2021-06-28T21:48:32Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "tbh I think it is a non-issue (or rather an issue related to projects that are not ``classlib`` projects), I have classlib projects and I depend on this for packaging reference assembles up into the same package as the actual runtime assemblies so that way if they try to browse the source from the nuget reference they will only see public members and not private implementation details (unless they look at the code on github).\r\n\r\nI did this for a reason because 1, I think it is too much to package a version for \"reference\", and then package a separate one for \"runtime\" when I can produce just 1 package for both and it still works like I intend it to. Other projects might also came to depend on this. Unless this just changes for projects targeting *only* the 6.0 TFM. But I think the changes should only be targeted towards non-classlibs so classlibs that depend on the behavior before this PR can not be broken much.",
        "createdAt": "2021-07-01T10:20:59Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "This achieves what I was talking about in the issue, completely preserving the old way of outputting the ref assembly!\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <ProduceReferenceAssemblyInOutputPath Condition=\"'$(ProduceReferenceAssemblyInOutputPath)' == '' and $([MSBuild]::AreFeaturesEnabled('17.0'))\">false</ProduceReferenceAssemblyInOutputPath>\r\n    <ProduceReferenceAssemblyInOutputPath Condition=\"'$(ProduceReferenceAssemblyInOutputPath)' == ''\">true</ProduceReferenceAssemblyInOutputPath>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <TargetRefPath Condition=\"'$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' and '$(ProduceReferenceAssemblyInOutputPath)' == 'false'\">$([MSBuild]::NormalizePath('$(IntermediateOutputPath)', 'ref', '$(TargetFileName)'))</TargetRefPath>\r\n    <TargetRefPath Condition=\"'$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true'\">$([MSBuild]::NormalizePath('$(TargetDir)', 'ref', '$(TargetFileName)'))</TargetRefPath>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\"'$(ProduceReferenceAssembly)' == 'true' and '$(ProduceReferenceAssemblyInOutputPath)' == 'true'\">\r\n    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)ref\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\r\n    <CreateDirectory Include=\"@(IntermediateRefAssembly->'%(RootDir)%(Directory)')\" />\r\n    <!-- Shouldn't this be $(TargetDir) instead of $(OutDir) -->\r\n    <CreateDirectory Include=\"$(OutDir)ref\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup Condition=\"'$(ProduceReferenceAssembly)' == 'true' and '$(ProduceReferenceAssemblyInOutputPath)' == 'false'\">\r\n    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)refint\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\r\n    <CreateDirectory Include=\"@(IntermediateRefAssembly->'%(RootDir)%(Directory)')\" />\r\n    <CreateDirectory Include=\"$(IntermediateOutputPath)ref\" />\r\n  </ItemGroup>\r\n```",
        "createdAt": "2021-07-13T18:28:57Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "I agree I think moving the ref assemblies to the obj folder should be opt-in only to preserve codebases that expect them in the bin folder.",
        "createdAt": "2021-07-13T21:54:47Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "I think we need to make this change, and make sure it's in our breaking change docs, along with the information for opting out of the new behavior. \r\n\r\nFor most people, most of the time, this directory makes more sense in obj",
        "createdAt": "2021-07-14T22:53:16Z",
        "author": {
          "login": "KathleenDollard"
        }
      },
      {
        "body": "preemptively linking to our [change wave docs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves.md#how-do-they-work) for info on how to opt out",
        "createdAt": "2021-07-14T23:15:07Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@KathleenDollard\n\nIt's okay to make a change but how we do it either makes it better or worse. Also, this feature is not for most users. For those who use this, they'd want the final output either in `bin` or in a new folder outside of `bin`/`obj` (_mostly preferred_).\n\nSee <https://github.com/dotnet/msbuild/issues/6543#issuecomment-861172816>, <https://github.com/dotnet/msbuild/pull/6560#discussion_r669202570>",
        "createdAt": "2021-07-15T00:38:32Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> I agree I think moving the ref assemblies to the obj folder should be opt-in only to preserve codebases that expect them in the bin folder.\r\n\r\nWhy? The default today is to put the ref assemblies, which have zero impact on program execution, into bin which is where customers typically deploy from. \r\n\r\nThis is particularly confusing for the new user case. They should know, and need to know, nothing about reference assemblies to code in .NET. But we are forcing them to learn about it by putting it directly in the place where we tell them to look for their program / build output. \r\n\r\nref assemblies are essentially an implementation detail of the build system. We shouldn't be putting it in place where we have observable output. ",
        "createdAt": "2021-07-15T03:24:09Z",
        "author": {
          "login": "jaredpar"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Seems redundant to have this in a change wave _and_ have an opt in for it. By design shouldn't it be one or the other?",
              "createdAt": "2021-06-14T21:46:07Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -323,7 +323,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <!-- Example, C:\\MyProjects\\MyProject\\bin\\Debug\\MyAssembly.dll -->\n     <TargetPath Condition=\" '$(TargetPath)' == '' \">$(TargetDir)$(TargetFileName)</TargetPath>\n \n-    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' and ('$(ProduceReferenceAssemblyInBin)' == 'true' or '$([MSBuild]::AreFeaturesEnabled(17.0))' != 'true' ) \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I expect this to be controversial enough to have a permanent flag. The changewave is just there since we have a big lever for \"do stuff the old way\".",
              "createdAt": "2021-06-15T15:46:43Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -323,7 +323,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <!-- Example, C:\\MyProjects\\MyProject\\bin\\Debug\\MyAssembly.dll -->\n     <TargetPath Condition=\" '$(TargetPath)' == '' \">$(TargetDir)$(TargetFileName)</TargetPath>\n \n-    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' and ('$(ProduceReferenceAssemblyInBin)' == 'true' or '$([MSBuild]::AreFeaturesEnabled(17.0))' != 'true' ) \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Why not `ProduceReferenceAssemblyInOutDir` or `ProduceReferenceAssemblyInOutputPath`?",
              "createdAt": "2021-07-13T17:35:26Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -323,7 +323,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <!-- Example, C:\\MyProjects\\MyProject\\bin\\Debug\\MyAssembly.dll -->\n     <TargetPath Condition=\" '$(TargetPath)' == '' \">$(TargetDir)$(TargetFileName)</TargetPath>\n \n-    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' and ('$(ProduceReferenceAssemblyInBin)' == 'true' or '$([MSBuild]::AreFeaturesEnabled(17.0))' != 'true' ) \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this one point to `refint`?",
              "createdAt": "2021-06-14T21:46:34Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -323,7 +323,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <!-- Example, C:\\MyProjects\\MyProject\\bin\\Debug\\MyAssembly.dll -->\n     <TargetPath Condition=\" '$(TargetPath)' == '' \">$(TargetDir)$(TargetFileName)</TargetPath>\n \n-    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' and ('$(ProduceReferenceAssemblyInBin)' == 'true' or '$([MSBuild]::AreFeaturesEnabled(17.0))' != 'true' ) \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(IntermediateOutputPath), 'ref', $(TargetFileName)))</TargetRefPath>",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "There are two ref assemblies:\r\n\r\n1. The one that the compiler produces as an output. This one is written to any time the compiler runs.\r\n2. The one that other projects reference. This one is copied from the former but _only if it has changed_, allowing the better incremental build of referencing projects.\r\n\r\nTargetRefPath is the path of the latter; IntermediateRefAssembly the former.",
              "createdAt": "2021-06-15T15:48:03Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -323,7 +323,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <!-- Example, C:\\MyProjects\\MyProject\\bin\\Debug\\MyAssembly.dll -->\n     <TargetPath Condition=\" '$(TargetPath)' == '' \">$(TargetDir)$(TargetFileName)</TargetPath>\n \n-    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' and ('$(ProduceReferenceAssemblyInBin)' == 'true' or '$([MSBuild]::AreFeaturesEnabled(17.0))' != 'true' ) \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(IntermediateOutputPath), 'ref', $(TargetFileName)))</TargetRefPath>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "@sharwell @jaredpar\r\n\r\nShouldn't the compiler generate the `ref` assembly only, if it detects the change (_i.e. when doing a 2nd build or the 3rd, etc\u2026_)?\r\nGenerating every-time incurs perf cost, doesn't it? Is it possible to input the files already generated by the compiler to determine determinism? \ud83d\ude0f\r\n\r\npardon my ignorance!",
              "createdAt": "2021-07-13T17:30:06Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -323,7 +323,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <!-- Example, C:\\MyProjects\\MyProject\\bin\\Debug\\MyAssembly.dll -->\n     <TargetPath Condition=\" '$(TargetPath)' == '' \">$(TargetDir)$(TargetFileName)</TargetPath>\n \n-    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' and ('$(ProduceReferenceAssemblyInBin)' == 'true' or '$([MSBuild]::AreFeaturesEnabled(17.0))' != 'true' ) \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(IntermediateOutputPath), 'ref', $(TargetFileName)))</TargetRefPath>",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "> Shouldn't the compiler generate the ref assembly only, if it detects the change (i.e. when doing a 2nd build or the 3rd, etc\u2026)?\r\n\r\nNo because that violates the areas of concern. The compiler is not a build system, it's a compiler. It's job is to take source and produce binaries (or more often errors). Once invoked the compiler should always produce the desired outputs. MSBuild, and the compiler MSBuild task, has the responsibilities of the build system and that includes up to date checks and such. \r\n\r\nThe way this works at a high level is that the `CoreCompile` target has two outputs: the ref and the impl assembly. The core compiler itself will always produce the ref and impl assembly when invoked. The Compiler MSBuild task, which wraps the compiler, essentially looks at the ref assembly output and determines if it is equal to the previous ref assembly output (just compare the MVID). If not then it doesn't update the ref assembly output from the task. Hence the output of the `CoreCompile` target has two outputs (ref + impl) but one is up to date because it has the same timestamp (the ref assembly) and the other is not up to date (the impl assembly). This lets MSBuild effectively short circuit later evaluations that depend only on the ref assembly.\r\n\r\n> pardon my ignorance!\r\n\r\nNot ignorance at all. This is a tricky area to understand if you're not deeply involved. And most likely @rainersigwald is going to correct a few details I got wrong \ud83d\ude04 \r\n",
              "createdAt": "2021-07-13T18:55:33Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -323,7 +323,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <!-- Example, C:\\MyProjects\\MyProject\\bin\\Debug\\MyAssembly.dll -->\n     <TargetPath Condition=\" '$(TargetPath)' == '' \">$(TargetDir)$(TargetFileName)</TargetPath>\n \n-    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' and ('$(ProduceReferenceAssemblyInBin)' == 'true' or '$([MSBuild]::AreFeaturesEnabled(17.0))' != 'true' ) \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(IntermediateOutputPath), 'ref', $(TargetFileName)))</TargetRefPath>",
              "author": {
                "login": "jaredpar"
              }
            },
            {
              "body": "> And most likely @rainersigwald is going to correct a few details I got wrong \ud83d\ude04\r\n\r\nI've only got one small nit . . .\r\n\r\n> The Compiler MSBuild task, which wraps the compiler, essentially looks at the ref assembly output and determines if it is equal to the previous ref assembly output (just compare the MVID).\r\n\r\nThis is actually done by a separate task that lives in Roslyn, [`CopyRefAssembly`](https://github.com/dotnet/roslyn/blob/dec4f470707b7337e2271c918e3a6531d0c71ff5/src/Compilers/Core/MSBuildTask/CopyRefAssembly.cs), which is called here:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/d150e93ff1f8828bb8b0b5fda64f4582d61a7e73/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4524-L4534",
              "createdAt": "2021-07-13T19:17:17Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -323,7 +323,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <!-- Example, C:\\MyProjects\\MyProject\\bin\\Debug\\MyAssembly.dll -->\n     <TargetPath Condition=\" '$(TargetPath)' == '' \">$(TargetDir)$(TargetFileName)</TargetPath>\n \n-    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' and ('$(ProduceReferenceAssemblyInBin)' == 'true' or '$([MSBuild]::AreFeaturesEnabled(17.0))' != 'true' ) \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(IntermediateOutputPath), 'ref', $(TargetFileName)))</TargetRefPath>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I was so close! ",
              "createdAt": "2021-07-13T20:23:00Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -323,7 +323,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <!-- Example, C:\\MyProjects\\MyProject\\bin\\Debug\\MyAssembly.dll -->\n     <TargetPath Condition=\" '$(TargetPath)' == '' \">$(TargetDir)$(TargetFileName)</TargetPath>\n \n-    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' and ('$(ProduceReferenceAssemblyInBin)' == 'true' or '$([MSBuild]::AreFeaturesEnabled(17.0))' != 'true' ) \">$([MSBuild]::NormalizePath($(TargetDir), 'ref', $(TargetFileName)))</TargetRefPath>\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(ProduceReferenceAssembly)' == 'true' \">$([MSBuild]::NormalizePath($(IntermediateOutputPath), 'ref', $(TargetFileName)))</TargetRefPath>",
              "author": {
                "login": "jaredpar"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This should use `TargetRefPath`?",
              "createdAt": "2021-06-14T21:48:40Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -392,7 +393,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </ItemGroup>\n \n   <ItemGroup Condition=\"'$(ProduceReferenceAssembly)' == 'true'\">\n-    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)ref\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\n+    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)refint\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "see above",
              "createdAt": "2021-06-15T15:48:36Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -392,7 +393,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </ItemGroup>\n \n   <ItemGroup Condition=\"'$(ProduceReferenceAssembly)' == 'true'\">\n-    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)ref\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\n+    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)refint\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Shouldn't this one and the change below be under `ProduceReferenceAssemblyInOutputPath` opt-in?",
              "createdAt": "2021-07-13T18:28:39Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -392,7 +393,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </ItemGroup>\n \n   <ItemGroup Condition=\"'$(ProduceReferenceAssembly)' == 'true'\">\n-    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)ref\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\n+    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)refint\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />",
              "author": {
                "login": "Nirmal4G"
              }
            },
            {
              "body": "Why do you think this should be conditional? Do you know of people who reach directly into `obj\\ref` today?",
              "createdAt": "2021-07-13T20:56:59Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -392,7 +393,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </ItemGroup>\n \n   <ItemGroup Condition=\"'$(ProduceReferenceAssembly)' == 'true'\">\n-    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)ref\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\n+    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)refint\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "We have a logic that does that. But that is not the only argument\u2026\n\nIt would be best for users, to either preserve compat all the way (_helps not to have problems down the road_) or break it and document the change to agree on one way of doing things by default.\n\nTo get the older behavior, right now, I'd have to change atleast **three** variables. With my proposal, we'll only need to change **single** variable.",
              "createdAt": "2021-07-14T00:49:15Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -392,7 +393,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </ItemGroup>\n \n   <ItemGroup Condition=\"'$(ProduceReferenceAssembly)' == 'true'\">\n-    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)ref\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\n+    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)refint\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I feel like `$(IntermediateOutputPath)refint` should be added to this item. Does adding it to `IntermediateRefAssembly` ensure the path is getting created elsewhere?",
              "createdAt": "2021-06-21T18:40:40Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -392,9 +393,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </ItemGroup>\n \n   <ItemGroup Condition=\"'$(ProduceReferenceAssembly)' == 'true'\">\n-    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)ref\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\n+    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)refint\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\n     <CreateDirectory Include=\"@(IntermediateRefAssembly->'%(RootDir)%(Directory)')\" />\n-    <CreateDirectory Include=\"$(OutDir)ref\" />\n+    <CreateDirectory Include=\"$(IntermediateOutputPath)ref\" />",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "That's what the prior entry does:\r\n\r\n```\r\n@(IntermediateRefAssembly->'%(RootDir)%(Directory)')\r\n```",
              "createdAt": "2021-06-21T20:17:25Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -392,9 +393,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </ItemGroup>\n \n   <ItemGroup Condition=\"'$(ProduceReferenceAssembly)' == 'true'\">\n-    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)ref\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\n+    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)refint\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\n     <CreateDirectory Include=\"@(IntermediateRefAssembly->'%(RootDir)%(Directory)')\" />\n-    <CreateDirectory Include=\"$(OutDir)ref\" />\n+    <CreateDirectory Include=\"$(IntermediateOutputPath)ref\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Shouldn't this and the above change also be under the opt-in property?",
              "createdAt": "2021-07-13T18:15:12Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -392,9 +393,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n   </ItemGroup>\n \n   <ItemGroup Condition=\"'$(ProduceReferenceAssembly)' == 'true'\">\n-    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)ref\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\n+    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)refint\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\n     <CreateDirectory Include=\"@(IntermediateRefAssembly->'%(RootDir)%(Directory)')\" />\n-    <CreateDirectory Include=\"$(OutDir)ref\" />\n+    <CreateDirectory Include=\"$(IntermediateOutputPath)ref\" />",
              "author": {
                "login": "Nirmal4G"
              }
            }
          ]
        }
      }
    ]
  }
}