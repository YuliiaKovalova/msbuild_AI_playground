{
  "number": 5864,
  "title": "Refactor ChangeWaves to use Versions",
  "body": "Various changes & improvements:\r\n\r\n- ChangeWaves use Version objects rather than strings\r\n- ApplyChangeWave no longer runs through logic if it had already been called\r\n- Code & Comment refactoring\r\n- Codes assigned to thrown warnings\r\n\r\n## 11-10-20 Update:\r\nThere were major refactors in the unit tests. I created a helper function, `buildSimpleProjectAndValidateChangeWave`, to reduce duplicated code and further improve readability. It takes the following arguments and uses them as you would imagine.\r\n```c#\r\nTestEnvironment testEnvironment,\r\nVersion waveToCheck, \r\nVersion changeWaveShouldUltimatelyResolveTo, \r\nparams string[] warningCodesLogShouldContain\r\n```\r\n\r\n### 11-17-20 Update:\r\nChangeWaves are now internal! \ud83c\udf89 Done by moving ChangeWaves over to Microsoft.Build.Framework because it already had IVT to other projects (except Microsoft.Build.Engine.OM.UnitTests which I added).",
  "state": "MERGED",
  "createdAt": "2020-11-05T21:49:28Z",
  "updatedAt": "2020-12-17T00:08:46Z",
  "closedAt": "2020-12-17T00:08:44Z",
  "mergedAt": "2020-12-17T00:08:44Z",
  "additions": 440,
  "deletions": 638,
  "changedFiles": 29,
  "headRefName": "changewave-refactor",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ac1a8e9cc4686433bd19ecdb5f3c0e08cbe6358f",
          "message": "Refactor ChangeWaves. Using Version objects now",
          "committedDate": "2020-11-05T21:30:50Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "40e9982879b95d348a42a1877f6b8f2c6b036cac",
          "message": "Update resource strings to include current change waves",
          "committedDate": "2020-11-05T21:36:41Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d704c8fbb8beef2cb9da8752f3bbc1a5e81413b3",
          "message": "Update docs to use Version instead of string",
          "committedDate": "2020-11-05T21:45:19Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bf9f1044c747076b8760994d3c3abf18a020e522",
          "message": "Major test refactor for better readability and easy future testing",
          "committedDate": "2020-11-11T05:28:28Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "21c17cd746bb6c5a80987ecd7920fa27255c02e5",
          "message": "Remove unnecessary returns & redundant check",
          "committedDate": "2020-11-12T01:18:40Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a677cb40fd33ce40fa7bf860f1e1ae80ea5579cb",
          "message": "Don't use traits from ChangeWaves.cs",
          "committedDate": "2020-11-17T23:07:51Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a4683b39772ae180690017a6f029e04b967c06e8",
          "message": "ChangeWaves now internal. Remove constants.cs from m.b.e.om.unittests.",
          "committedDate": "2020-11-17T23:31:21Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "96815c2c62e27a52f3456e409de38ed6ade57692",
          "message": "ChangeWaves lives in Microsoft.Build.Framework. use ITestOutputHelper",
          "committedDate": "2020-11-20T20:41:26Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "122a3f68d5178c1c310b294aacc9bbfb00e81c19",
          "message": "PR feedback checkpoint 1",
          "committedDate": "2020-12-05T00:29:26Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f95e75b428e8929f5b01890b46a3a398662aaa40",
          "message": "Document params of helper function",
          "committedDate": "2020-12-05T00:53:22Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9656652f5ce69c40e756f3db91afd80b30b376ab",
          "message": "Document parameters for helper function. Rename params to (hopefully) improve readability",
          "committedDate": "2020-12-05T01:17:54Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a7b1f42c32829ab29b2adf6a1ac1569f8c0556a1",
          "message": "Added summaries for TestEnvironment.SetChangeWave",
          "committedDate": "2020-12-05T01:19:37Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "48f6981336ef25939462a14947ff671fd0113d10",
          "message": "Remove ChangeWaves from TestEnvironmentHelper and remove IVT from m.b.framework->m.b.OM.UnitTests",
          "committedDate": "2020-12-07T22:43:30Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "664b3988ab66740b13d5d198748c35d1da206991",
          "message": "Update docs, revert testenvironment to reset buildenvironmenthelper and set env var to empty, set empty env var for specific test",
          "committedDate": "2020-12-07T23:42:31Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "736f50bf103db95945dd0ca2d74c67e5815facd9",
          "message": "Ensure resetting static ChangeWave variables between tests",
          "committedDate": "2020-12-08T00:42:49Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "483ed07c62becebbcfbcc314b385f13825595176",
          "message": "Update dev docs with proper test logic",
          "committedDate": "2020-12-15T18:52:16Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "52a977934b46a05d03cb1d1482a7201271b8499b",
          "message": "Merge branch 'master' into changewave-refactor",
          "committedDate": "2020-12-15T18:54:06Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7281247be4b5da17578ca826808d6547dffc2320",
          "message": "Run build.cmd to update localization",
          "committedDate": "2020-12-15T19:21:08Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I'm not currently convinced by:\r\n```\r\nChangeWaves use Version objects rather than strings\r\nApplyChangeWave no longer runs through logic if it had already been called\r\n```\r\n\r\nWhat is your goal with using Versions? Allocations? Clarity? As-is, you don't really reduce allocations, and I don't think it's noticeably cleaner.\r\nYou already had [an early exit](https://github.com/dotnet/msbuild/pull/5864/files#diff-8603edda209606b97af1384bcbbcd72f23240df7329f25d566329fab3dcbb98aL177); can you explain more about why this is necessary, and you can't just move a beefed-up check earlier?",
        "createdAt": "2020-11-10T17:46:16Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind the primary benefit here is clarity and a slight perf gain. Previously whenever someone called `AreFeaturesEnabled(ChangeWaves.Wave16_8)`, this resulted in a version parse because `ChangeWaves.Wave16_8` was a string when it could have just been a version. The \"slight perf gain\" doesn't mean much now, but I feel it'll pay off down the line. I envision a point in time where we have sets of features behind 3 active change waves potentially under some hot paths. \r\n\r\nThe new early exit prevents a \"purely hypothetical scenario\" where the ChangeWaveState and the `_cachedWave` are out of sync somehow. I can't imagine a scenario that they would be, but I'm going with the extra safe route here considering it's just an extra null check.",
        "createdAt": "2020-11-10T19:16:21Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> I'm not really convinced that ChangeWaveConversionState should exist, since it sounds like all its information is contained in _currentVersion anyway.\r\n\r\nThis isn't true. When we throw the warning there's no way to tell if the cached disabled wave was set to `EnableAllVersions` because `MSBuildDisableFeaturesFromVersion` was set to some garbage value, or was never set at all. I suppose this check could happen at the time the warning is called, but I prefer the readability of a nice enum.",
        "createdAt": "2020-11-11T05:36:36Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> > I'm not really convinced that ChangeWaveConversionState should exist, since it sounds like all its information is contained in _currentVersion anyway.\r\n> \r\n> This isn't true. When we throw the warning there's no way to tell if the cached disabled wave was set to `EnableAllVersions` because `MSBuildDisableFeaturesFromVersion` was set to some garbage value, or was never set at all. I suppose this check could happen at the time the warning is called, but I prefer the readability of a nice enum.\r\n\r\nI was thinking that in the ideal case, we set the enum once and consume it once, and those are very close together. Instead of setting more state (and needing to keep that state updated), you could either pass enough information to ChangeWaves.cs to log the warning there or return information to Evaluator that would let it log a warning if necessary.\r\n\r\nI don't feel too strongly about this. I always prefer to minimize the number of lines of code total, but enums are pretty readable.",
        "createdAt": "2020-11-11T19:27:12Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Found this in `ProjectErrorUtilities.cs` when moving it over to `Microsoft.Build.Framework` (which has InternalsVisibleTo all other projects)\r\n\r\n```\r\n/******************************************************************************\r\n * \r\n *                              !! WARNING !!\r\n * \r\n * This class depends on the build engine assembly! Do not share this class\r\n * into any assembly that is not supposed to take a dependency on the build\r\n * engine assembly!\r\n * \r\n * \r\n ******************************************************************************/\r\n```\r\n\r\nEDIT: This post is irrelevant now.",
        "createdAt": "2020-11-16T20:44:40Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I know you're not ready for this yet, but I'd also like to see this in an exp/ branch before merging.",
        "createdAt": "2020-11-16T23:23:12Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I believe this PR can merge (after a rebase) when https://github.com/dotnet/msbuild/pull/5895 is merged. It would also be blocked on https://github.com/dotnet/core-eng/issues/11458",
        "createdAt": "2020-11-20T00:32:59Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "TODO: \r\n\r\n- [x] Add ITestOutputHelper and log info from unit test helper function.\r\n- [x] Move changewaves.cs out of shared and into microsoft.build.framework\r\n- [x] Ask Daniel about adding this item to the agenda for the monday sync up.\r\n- [x] Check out an `exp/` branch\r\n - ~~https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=4245218&view=results~~\r\n - https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=4245643&view=results",
        "createdAt": "2020-11-20T16:56:23Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "VS PR is here: https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/289258",
        "createdAt": "2020-11-21T00:30:53Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Looks like it passed RPS but failed a required test. That part doesn't matter too much, but I started it running again anyway.",
        "createdAt": "2020-11-21T22:19:44Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind thanks for the second run, looks like all is green.",
        "createdAt": "2020-11-23T18:14:01Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "It would be good to check AllWaves[AllWaves.Length - 1] but expect the opposite result so you know the test is working properly.",
              "createdAt": "2020-11-10T23:56:51Z",
              "path": "src/Build.UnitTests/ChangeWaves_Tests.cs",
              "diffHunk": "@@ -255,9 +228,9 @@ public void CorrectlyDetermineEnabledFeatures()\n                 env.SetChangeWave(ChangeWaves.HighestWave);\n                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();\n \n-                for (int i = 0; i < ChangeWaves.AllWaves.Length-1; i++)\n+                for (int i = 0; i < ChangeWaves.AllWaves.Length - 1; i++)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            _cachedWave = AllWaves.First((x) => x > _cachedWave);\r\n```\r\nStill an unnecessary allocation, but this is clean, at least.",
              "createdAt": "2020-11-11T00:18:59Z",
              "path": "src/Shared/ChangeWaves.cs",
              "diffHunk": "@@ -88,121 +105,81 @@ internal static ChangeWaveConversionState ConversionState\n         }\n \n         /// <summary>\n-        /// Ensure the the environment variable MSBuildDisableFeaturesFromWave is set to a proper value.\n+        /// Read from environment variable `MSBuildDisableFeaturesFromVersion`, correct it if required, cache it and its ConversionState.\n         /// </summary>\n-        /// <returns> String representation of the set change wave. \"999.999\" if unset or invalid, and clamped if out of bounds. </returns>\n         internal static void ApplyChangeWave()\n         {\n-            Version changeWave;\n+            // Once set, change wave should not need to be set again.\n+            if (!ShouldApplyChangeWave)\n+            {\n+                return;\n+            }\n \n-            // If unset, enable all features.\n-            if (DisabledWave.Length == 0 || DisabledWave.Equals(EnableAllFeatures, StringComparison.OrdinalIgnoreCase))\n+            // Most common case, `MSBuildDisableFeaturesFromVersion` unset\n+            if (string.IsNullOrEmpty(Traits.Instance.MSBuildDisableFeaturesFromVersion))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-\n-            // If the version is of invalid format, log a warning and enable all features.\n-            if (!Version.TryParse(DisabledWave, out changeWave))\n+            else if (_cachedWave == null && !Version.TryParse(Traits.Instance.MSBuildDisableFeaturesFromVersion, out _cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.InvalidFormat;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-            // If the version is 999.999, we're done.\n-            else if (changeWave == EnableAllFeaturesAsVersion)\n+            else if (_cachedWave == EnableAllFeatures || AllWaves.Contains(_cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = changeWave.ToString();\n                 return;\n             }\n-            // If the version is out of rotation, log a warning and clamp the value.\n-            else if (changeWave < LowestWaveAsVersion)\n+            else if (_cachedWave < LowestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = LowestWave;\n+                _cachedWave = LowestWave;\n                 return;\n             }\n-            else if (changeWave > HighestWaveAsVersion)\n+            else if (_cachedWave > HighestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = HighestWave;\n+                _cachedWave = HighestWave;\n                 return;\n             }\n \n-            // Ensure it's set to an existing version within the current rotation\n-            if (!AllWavesAsVersion.Contains(changeWave))\n-            {\n-                foreach (Version wave in AllWavesAsVersion)\n-                {\n-                    if (wave > changeWave)\n-                    {\n-                        ConversionState = ChangeWaveConversionState.Valid;\n-                        DisabledWave = wave.ToString();\n-                        return;\n-                    }\n-                }\n-            }\n-\n+            // _cachedWave is somewhere between valid waves, find the next valid version.\n+            _cachedWave = AllWaves.Where((x) => x > _cachedWave).First();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This makes me wonder, would we ever advise setting the env var to something like `16.9`? I remember we mentioned something like this recently.",
              "createdAt": "2020-11-11T03:37:57Z",
              "path": "src/Shared/ChangeWaves.cs",
              "diffHunk": "@@ -88,121 +105,81 @@ internal static ChangeWaveConversionState ConversionState\n         }\n \n         /// <summary>\n-        /// Ensure the the environment variable MSBuildDisableFeaturesFromWave is set to a proper value.\n+        /// Read from environment variable `MSBuildDisableFeaturesFromVersion`, correct it if required, cache it and its ConversionState.\n         /// </summary>\n-        /// <returns> String representation of the set change wave. \"999.999\" if unset or invalid, and clamped if out of bounds. </returns>\n         internal static void ApplyChangeWave()\n         {\n-            Version changeWave;\n+            // Once set, change wave should not need to be set again.\n+            if (!ShouldApplyChangeWave)\n+            {\n+                return;\n+            }\n \n-            // If unset, enable all features.\n-            if (DisabledWave.Length == 0 || DisabledWave.Equals(EnableAllFeatures, StringComparison.OrdinalIgnoreCase))\n+            // Most common case, `MSBuildDisableFeaturesFromVersion` unset\n+            if (string.IsNullOrEmpty(Traits.Instance.MSBuildDisableFeaturesFromVersion))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-\n-            // If the version is of invalid format, log a warning and enable all features.\n-            if (!Version.TryParse(DisabledWave, out changeWave))\n+            else if (_cachedWave == null && !Version.TryParse(Traits.Instance.MSBuildDisableFeaturesFromVersion, out _cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.InvalidFormat;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-            // If the version is 999.999, we're done.\n-            else if (changeWave == EnableAllFeaturesAsVersion)\n+            else if (_cachedWave == EnableAllFeatures || AllWaves.Contains(_cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = changeWave.ToString();\n                 return;\n             }\n-            // If the version is out of rotation, log a warning and clamp the value.\n-            else if (changeWave < LowestWaveAsVersion)\n+            else if (_cachedWave < LowestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = LowestWave;\n+                _cachedWave = LowestWave;\n                 return;\n             }\n-            else if (changeWave > HighestWaveAsVersion)\n+            else if (_cachedWave > HighestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = HighestWave;\n+                _cachedWave = HighestWave;\n                 return;\n             }\n \n-            // Ensure it's set to an existing version within the current rotation\n-            if (!AllWavesAsVersion.Contains(changeWave))\n-            {\n-                foreach (Version wave in AllWavesAsVersion)\n-                {\n-                    if (wave > changeWave)\n-                    {\n-                        ConversionState = ChangeWaveConversionState.Valid;\n-                        DisabledWave = wave.ToString();\n-                        return;\n-                    }\n-                }\n-            }\n-\n+            // _cachedWave is somewhere between valid waves, find the next valid version.\n+            _cachedWave = AllWaves.Where((x) => x > _cachedWave).First();",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is captured by the next statement, right?",
              "createdAt": "2020-11-11T00:28:01Z",
              "path": "src/Shared/ChangeWaves.cs",
              "diffHunk": "@@ -88,121 +105,81 @@ internal static ChangeWaveConversionState ConversionState\n         }\n \n         /// <summary>\n-        /// Ensure the the environment variable MSBuildDisableFeaturesFromWave is set to a proper value.\n+        /// Read from environment variable `MSBuildDisableFeaturesFromVersion`, correct it if required, cache it and its ConversionState.\n         /// </summary>\n-        /// <returns> String representation of the set change wave. \"999.999\" if unset or invalid, and clamped if out of bounds. </returns>\n         internal static void ApplyChangeWave()\n         {\n-            Version changeWave;\n+            // Once set, change wave should not need to be set again.\n+            if (!ShouldApplyChangeWave)\n+            {\n+                return;\n+            }\n \n-            // If unset, enable all features.\n-            if (DisabledWave.Length == 0 || DisabledWave.Equals(EnableAllFeatures, StringComparison.OrdinalIgnoreCase))\n+            // Most common case, `MSBuildDisableFeaturesFromVersion` unset\n+            if (string.IsNullOrEmpty(Traits.Instance.MSBuildDisableFeaturesFromVersion))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-\n-            // If the version is of invalid format, log a warning and enable all features.\n-            if (!Version.TryParse(DisabledWave, out changeWave))\n+            else if (_cachedWave == null && !Version.TryParse(Traits.Instance.MSBuildDisableFeaturesFromVersion, out _cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.InvalidFormat;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-            // If the version is 999.999, we're done.\n-            else if (changeWave == EnableAllFeaturesAsVersion)\n+            else if (_cachedWave == EnableAllFeatures || AllWaves.Contains(_cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = changeWave.ToString();\n                 return;\n             }\n-            // If the version is out of rotation, log a warning and clamp the value.\n-            else if (changeWave < LowestWaveAsVersion)\n+            else if (_cachedWave < LowestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = LowestWave;\n+                _cachedWave = LowestWave;\n                 return;\n             }\n-            else if (changeWave > HighestWaveAsVersion)\n+            else if (_cachedWave > HighestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = HighestWave;\n+                _cachedWave = HighestWave;\n                 return;\n             }\n \n-            // Ensure it's set to an existing version within the current rotation\n-            if (!AllWavesAsVersion.Contains(changeWave))\n-            {\n-                foreach (Version wave in AllWavesAsVersion)\n-                {\n-                    if (wave > changeWave)\n-                    {\n-                        ConversionState = ChangeWaveConversionState.Valid;\n-                        DisabledWave = wave.ToString();\n-                        return;\n-                    }\n-                }\n-            }\n-\n+            // _cachedWave is somewhere between valid waves, find the next valid version.\n+            _cachedWave = AllWaves.Where((x) => x > _cachedWave).First();\n             ConversionState = ChangeWaveConversionState.Valid;\n-            DisabledWave = changeWave.ToString();\n         }\n \n         /// <summary>\n-        /// Compares the passed wave to the MSBuildDisableFeaturesFromVersion environment variable.\n-        /// Version MUST be of the format: \"xx.yy\".\n+        /// Determines whether features behind the given wave are enabled.\n         /// </summary>\n         /// <param name=\"wave\">The version to compare.</param>\n-        /// <returns>A bool indicating whether the feature behind a version is enabled.</returns>\n-        public static bool AreFeaturesEnabled(string wave)\n-        {\n-            Version waveToCheck;\n-\n-            // When a caller passes an invalid wave, fail the build.\n-            ErrorUtilities.VerifyThrow(Version.TryParse(wave.ToString(), out waveToCheck),\n-                                       $\"Argument 'wave' passed with invalid format.\" +\n-                                       $\"Please use pre-existing const strings or define one with format 'xx.yy\");\n-\n-            return AreFeaturesEnabled(waveToCheck);\n-        }\n-\n-        /// <summary>\n-        /// Compares the passed wave to the MSBuildDisableFeaturesFromVersion environment variable.\n-        /// </summary>\n-        /// <param name=\"wave\">The version to compare.</param>\n-        /// <returns>A bool indicating whether the version is enabled.</returns>\n+        /// <returns>A bool indicating whether the change wave is enabled.</returns>\n         public static bool AreFeaturesEnabled(Version wave)\n         {\n-            if (_state == ChangeWaveConversionState.NotConvertedYet)\n+            if (ShouldApplyChangeWave)\n             {\n                 ApplyChangeWave();\n             }\n \n-            // This is opt out behavior, all waves are enabled by default.\n-            if (DisabledWave.Length == 0 || DisabledWave.Equals(EnableAllFeatures, StringComparison.OrdinalIgnoreCase))\n-            {\n-                return true;\n-            }\n-\n-            Version currentSetWave;\n-\n-            // If we can't parse the environment variable, default to enabling features.\n-            if (!Version.TryParse(DisabledWave, out currentSetWave))\n+            // Check if we cached the special value to enable all features behind change waves.\n+            if (_cachedWave == EnableAllFeatures)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "You're absolutely correct \ud83e\udd26\u200d\u2642\ufe0f",
              "createdAt": "2020-11-11T03:29:21Z",
              "path": "src/Shared/ChangeWaves.cs",
              "diffHunk": "@@ -88,121 +105,81 @@ internal static ChangeWaveConversionState ConversionState\n         }\n \n         /// <summary>\n-        /// Ensure the the environment variable MSBuildDisableFeaturesFromWave is set to a proper value.\n+        /// Read from environment variable `MSBuildDisableFeaturesFromVersion`, correct it if required, cache it and its ConversionState.\n         /// </summary>\n-        /// <returns> String representation of the set change wave. \"999.999\" if unset or invalid, and clamped if out of bounds. </returns>\n         internal static void ApplyChangeWave()\n         {\n-            Version changeWave;\n+            // Once set, change wave should not need to be set again.\n+            if (!ShouldApplyChangeWave)\n+            {\n+                return;\n+            }\n \n-            // If unset, enable all features.\n-            if (DisabledWave.Length == 0 || DisabledWave.Equals(EnableAllFeatures, StringComparison.OrdinalIgnoreCase))\n+            // Most common case, `MSBuildDisableFeaturesFromVersion` unset\n+            if (string.IsNullOrEmpty(Traits.Instance.MSBuildDisableFeaturesFromVersion))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-\n-            // If the version is of invalid format, log a warning and enable all features.\n-            if (!Version.TryParse(DisabledWave, out changeWave))\n+            else if (_cachedWave == null && !Version.TryParse(Traits.Instance.MSBuildDisableFeaturesFromVersion, out _cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.InvalidFormat;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-            // If the version is 999.999, we're done.\n-            else if (changeWave == EnableAllFeaturesAsVersion)\n+            else if (_cachedWave == EnableAllFeatures || AllWaves.Contains(_cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = changeWave.ToString();\n                 return;\n             }\n-            // If the version is out of rotation, log a warning and clamp the value.\n-            else if (changeWave < LowestWaveAsVersion)\n+            else if (_cachedWave < LowestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = LowestWave;\n+                _cachedWave = LowestWave;\n                 return;\n             }\n-            else if (changeWave > HighestWaveAsVersion)\n+            else if (_cachedWave > HighestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = HighestWave;\n+                _cachedWave = HighestWave;\n                 return;\n             }\n \n-            // Ensure it's set to an existing version within the current rotation\n-            if (!AllWavesAsVersion.Contains(changeWave))\n-            {\n-                foreach (Version wave in AllWavesAsVersion)\n-                {\n-                    if (wave > changeWave)\n-                    {\n-                        ConversionState = ChangeWaveConversionState.Valid;\n-                        DisabledWave = wave.ToString();\n-                        return;\n-                    }\n-                }\n-            }\n-\n+            // _cachedWave is somewhere between valid waves, find the next valid version.\n+            _cachedWave = AllWaves.Where((x) => x > _cachedWave).First();\n             ConversionState = ChangeWaveConversionState.Valid;\n-            DisabledWave = changeWave.ToString();\n         }\n \n         /// <summary>\n-        /// Compares the passed wave to the MSBuildDisableFeaturesFromVersion environment variable.\n-        /// Version MUST be of the format: \"xx.yy\".\n+        /// Determines whether features behind the given wave are enabled.\n         /// </summary>\n         /// <param name=\"wave\">The version to compare.</param>\n-        /// <returns>A bool indicating whether the feature behind a version is enabled.</returns>\n-        public static bool AreFeaturesEnabled(string wave)\n-        {\n-            Version waveToCheck;\n-\n-            // When a caller passes an invalid wave, fail the build.\n-            ErrorUtilities.VerifyThrow(Version.TryParse(wave.ToString(), out waveToCheck),\n-                                       $\"Argument 'wave' passed with invalid format.\" +\n-                                       $\"Please use pre-existing const strings or define one with format 'xx.yy\");\n-\n-            return AreFeaturesEnabled(waveToCheck);\n-        }\n-\n-        /// <summary>\n-        /// Compares the passed wave to the MSBuildDisableFeaturesFromVersion environment variable.\n-        /// </summary>\n-        /// <param name=\"wave\">The version to compare.</param>\n-        /// <returns>A bool indicating whether the version is enabled.</returns>\n+        /// <returns>A bool indicating whether the change wave is enabled.</returns>\n         public static bool AreFeaturesEnabled(Version wave)\n         {\n-            if (_state == ChangeWaveConversionState.NotConvertedYet)\n+            if (ShouldApplyChangeWave)\n             {\n                 ApplyChangeWave();\n             }\n \n-            // This is opt out behavior, all waves are enabled by default.\n-            if (DisabledWave.Length == 0 || DisabledWave.Equals(EnableAllFeatures, StringComparison.OrdinalIgnoreCase))\n-            {\n-                return true;\n-            }\n-\n-            Version currentSetWave;\n-\n-            // If we can't parse the environment variable, default to enabling features.\n-            if (!Version.TryParse(DisabledWave, out currentSetWave))\n+            // Check if we cached the special value to enable all features behind change waves.\n+            if (_cachedWave == EnableAllFeatures)",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Only tangentially related to this PR, I know you were working on some public-facing documentation as well. Does that need updating?",
              "createdAt": "2020-11-11T19:31:54Z",
              "path": "documentation/wiki/ChangeWaves-Dev.md",
              "diffHunk": "@@ -25,21 +25,21 @@ The Process:\n \n ## Creating a Change Wave\n 1. In the `Microsoft.Build` project, open `SharedUtilities\\ChangeWaves.cs`.\n-2. Add a const string to identify the new wave, following the format:\n+2. Add a static readonly Version to identify the new wave, following the format:\n ```c#\n-public const string Wave17_4 = \"17.4\";\n+public static readonly Version Wave17_4 = \"17.4\";",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Not in this case. The visual studio doc page for this is more reflective of the `ChangeWaves.md` file rather than the dev file. No changes needed there.",
              "createdAt": "2020-11-12T01:17:12Z",
              "path": "documentation/wiki/ChangeWaves-Dev.md",
              "diffHunk": "@@ -25,21 +25,21 @@ The Process:\n \n ## Creating a Change Wave\n 1. In the `Microsoft.Build` project, open `SharedUtilities\\ChangeWaves.cs`.\n-2. Add a const string to identify the new wave, following the format:\n+2. Add a static readonly Version to identify the new wave, following the format:\n ```c#\n-public const string Wave17_4 = \"17.4\";\n+public static readonly Version Wave17_4 = \"17.4\";",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This check is covered in ApplyChangeWave. Also, is there any time ApplyChangeWave could miss being called from Evaluator or that AreFeaturesEnabled could be called earlier than ApplyChangeWave in Evaluate? Wondering if you can get rid of this entirely.",
              "createdAt": "2020-11-11T20:26:32Z",
              "path": "src/Shared/ChangeWaves.cs",
              "diffHunk": "@@ -88,120 +105,74 @@ internal static ChangeWaveConversionState ConversionState\n         }\n \n         /// <summary>\n-        /// Ensure the the environment variable MSBuildDisableFeaturesFromWave is set to a proper value.\n+        /// Read from environment variable `MSBuildDisableFeaturesFromVersion`, correct it if required, cache it and its ConversionState.\n         /// </summary>\n-        /// <returns> String representation of the set change wave. \"999.999\" if unset or invalid, and clamped if out of bounds. </returns>\n         internal static void ApplyChangeWave()\n         {\n-            Version changeWave;\n+            // Once set, change wave should not need to be set again.\n+            if (!ShouldApplyChangeWave)\n+            {\n+                return;\n+            }\n \n-            // If unset, enable all features.\n-            if (DisabledWave.Length == 0 || DisabledWave.Equals(EnableAllFeatures, StringComparison.OrdinalIgnoreCase))\n+            // Most common case, `MSBuildDisableFeaturesFromVersion` unset\n+            if (string.IsNullOrEmpty(Traits.Instance.MSBuildDisableFeaturesFromVersion))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-\n-            // If the version is of invalid format, log a warning and enable all features.\n-            if (!Version.TryParse(DisabledWave, out changeWave))\n+            else if (_cachedWave == null && !Version.TryParse(Traits.Instance.MSBuildDisableFeaturesFromVersion, out _cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.InvalidFormat;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-            // If the version is 999.999, we're done.\n-            else if (changeWave == EnableAllFeaturesAsVersion)\n+            else if (_cachedWave == EnableAllFeatures || AllWaves.Contains(_cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = changeWave.ToString();\n                 return;\n             }\n-            // If the version is out of rotation, log a warning and clamp the value.\n-            else if (changeWave < LowestWaveAsVersion)\n+            else if (_cachedWave < LowestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = LowestWave;\n+                _cachedWave = LowestWave;\n                 return;\n             }\n-            else if (changeWave > HighestWaveAsVersion)\n+            else if (_cachedWave > HighestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = HighestWave;\n+                _cachedWave = HighestWave;\n                 return;\n             }\n \n-            // Ensure it's set to an existing version within the current rotation\n-            if (!AllWavesAsVersion.Contains(changeWave))\n-            {\n-                foreach (Version wave in AllWavesAsVersion)\n-                {\n-                    if (wave > changeWave)\n-                    {\n-                        ConversionState = ChangeWaveConversionState.Valid;\n-                        DisabledWave = wave.ToString();\n-                        return;\n-                    }\n-                }\n-            }\n-\n+            // _cachedWave is somewhere between valid waves, find the next valid version.\n+            _cachedWave = AllWaves.First((x) => x > _cachedWave);\n             ConversionState = ChangeWaveConversionState.Valid;\n-            DisabledWave = changeWave.ToString();\n-        }\n-\n-        /// <summary>\n-        /// Compares the passed wave to the MSBuildDisableFeaturesFromVersion environment variable.\n-        /// Version MUST be of the format: \"xx.yy\".\n-        /// </summary>\n-        /// <param name=\"wave\">The version to compare.</param>\n-        /// <returns>A bool indicating whether the feature behind a version is enabled.</returns>\n-        public static bool AreFeaturesEnabled(string wave)\n-        {\n-            Version waveToCheck;\n-\n-            // When a caller passes an invalid wave, fail the build.\n-            ErrorUtilities.VerifyThrow(Version.TryParse(wave.ToString(), out waveToCheck),\n-                                       $\"Argument 'wave' passed with invalid format.\" +\n-                                       $\"Please use pre-existing const strings or define one with format 'xx.yy\");\n-\n-            return AreFeaturesEnabled(waveToCheck);\n         }\n \n         /// <summary>\n-        /// Compares the passed wave to the MSBuildDisableFeaturesFromVersion environment variable.\n+        /// Determines whether features behind the given wave are enabled.\n         /// </summary>\n         /// <param name=\"wave\">The version to compare.</param>\n-        /// <returns>A bool indicating whether the version is enabled.</returns>\n+        /// <returns>A bool indicating whether the change wave is enabled.</returns>\n         public static bool AreFeaturesEnabled(Version wave)\n         {\n-            if (_state == ChangeWaveConversionState.NotConvertedYet)\n+            if (ShouldApplyChangeWave)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Good point, I can get rid of this check. I can't get rid of the call to `ApplyChangeWave` in this function though.\r\n\r\n> lso, is there any time ApplyChangeWave could miss being called from Evaluator or that AreFeaturesEnabled could be called earlier than ApplyChangeWave in Evaluate?\r\n\r\nYes, it doesn't miss being called but `AreFeaturesEnabled` (and therefore `ApplyChangeWave`) is first called from [XMake](https://github.com/dotnet/msbuild/blob/master/src/MSBuild/XMake.cs#L1733).",
              "createdAt": "2020-11-12T01:04:02Z",
              "path": "src/Shared/ChangeWaves.cs",
              "diffHunk": "@@ -88,120 +105,74 @@ internal static ChangeWaveConversionState ConversionState\n         }\n \n         /// <summary>\n-        /// Ensure the the environment variable MSBuildDisableFeaturesFromWave is set to a proper value.\n+        /// Read from environment variable `MSBuildDisableFeaturesFromVersion`, correct it if required, cache it and its ConversionState.\n         /// </summary>\n-        /// <returns> String representation of the set change wave. \"999.999\" if unset or invalid, and clamped if out of bounds. </returns>\n         internal static void ApplyChangeWave()\n         {\n-            Version changeWave;\n+            // Once set, change wave should not need to be set again.\n+            if (!ShouldApplyChangeWave)\n+            {\n+                return;\n+            }\n \n-            // If unset, enable all features.\n-            if (DisabledWave.Length == 0 || DisabledWave.Equals(EnableAllFeatures, StringComparison.OrdinalIgnoreCase))\n+            // Most common case, `MSBuildDisableFeaturesFromVersion` unset\n+            if (string.IsNullOrEmpty(Traits.Instance.MSBuildDisableFeaturesFromVersion))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-\n-            // If the version is of invalid format, log a warning and enable all features.\n-            if (!Version.TryParse(DisabledWave, out changeWave))\n+            else if (_cachedWave == null && !Version.TryParse(Traits.Instance.MSBuildDisableFeaturesFromVersion, out _cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.InvalidFormat;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-            // If the version is 999.999, we're done.\n-            else if (changeWave == EnableAllFeaturesAsVersion)\n+            else if (_cachedWave == EnableAllFeatures || AllWaves.Contains(_cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = changeWave.ToString();\n                 return;\n             }\n-            // If the version is out of rotation, log a warning and clamp the value.\n-            else if (changeWave < LowestWaveAsVersion)\n+            else if (_cachedWave < LowestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = LowestWave;\n+                _cachedWave = LowestWave;\n                 return;\n             }\n-            else if (changeWave > HighestWaveAsVersion)\n+            else if (_cachedWave > HighestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = HighestWave;\n+                _cachedWave = HighestWave;\n                 return;\n             }\n \n-            // Ensure it's set to an existing version within the current rotation\n-            if (!AllWavesAsVersion.Contains(changeWave))\n-            {\n-                foreach (Version wave in AllWavesAsVersion)\n-                {\n-                    if (wave > changeWave)\n-                    {\n-                        ConversionState = ChangeWaveConversionState.Valid;\n-                        DisabledWave = wave.ToString();\n-                        return;\n-                    }\n-                }\n-            }\n-\n+            // _cachedWave is somewhere between valid waves, find the next valid version.\n+            _cachedWave = AllWaves.First((x) => x > _cachedWave);\n             ConversionState = ChangeWaveConversionState.Valid;\n-            DisabledWave = changeWave.ToString();\n-        }\n-\n-        /// <summary>\n-        /// Compares the passed wave to the MSBuildDisableFeaturesFromVersion environment variable.\n-        /// Version MUST be of the format: \"xx.yy\".\n-        /// </summary>\n-        /// <param name=\"wave\">The version to compare.</param>\n-        /// <returns>A bool indicating whether the feature behind a version is enabled.</returns>\n-        public static bool AreFeaturesEnabled(string wave)\n-        {\n-            Version waveToCheck;\n-\n-            // When a caller passes an invalid wave, fail the build.\n-            ErrorUtilities.VerifyThrow(Version.TryParse(wave.ToString(), out waveToCheck),\n-                                       $\"Argument 'wave' passed with invalid format.\" +\n-                                       $\"Please use pre-existing const strings or define one with format 'xx.yy\");\n-\n-            return AreFeaturesEnabled(waveToCheck);\n         }\n \n         /// <summary>\n-        /// Compares the passed wave to the MSBuildDisableFeaturesFromVersion environment variable.\n+        /// Determines whether features behind the given wave are enabled.\n         /// </summary>\n         /// <param name=\"wave\">The version to compare.</param>\n-        /// <returns>A bool indicating whether the version is enabled.</returns>\n+        /// <returns>A bool indicating whether the change wave is enabled.</returns>\n         public static bool AreFeaturesEnabled(Version wave)\n         {\n-            if (_state == ChangeWaveConversionState.NotConvertedYet)\n+            if (ShouldApplyChangeWave)",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You can get rid of all the `return`s above if you wrap this in an else.",
              "createdAt": "2020-11-11T20:30:06Z",
              "path": "src/Shared/ChangeWaves.cs",
              "diffHunk": "@@ -88,120 +105,74 @@ internal static ChangeWaveConversionState ConversionState\n         }\n \n         /// <summary>\n-        /// Ensure the the environment variable MSBuildDisableFeaturesFromWave is set to a proper value.\n+        /// Read from environment variable `MSBuildDisableFeaturesFromVersion`, correct it if required, cache it and its ConversionState.\n         /// </summary>\n-        /// <returns> String representation of the set change wave. \"999.999\" if unset or invalid, and clamped if out of bounds. </returns>\n         internal static void ApplyChangeWave()\n         {\n-            Version changeWave;\n+            // Once set, change wave should not need to be set again.\n+            if (!ShouldApplyChangeWave)\n+            {\n+                return;\n+            }\n \n-            // If unset, enable all features.\n-            if (DisabledWave.Length == 0 || DisabledWave.Equals(EnableAllFeatures, StringComparison.OrdinalIgnoreCase))\n+            // Most common case, `MSBuildDisableFeaturesFromVersion` unset\n+            if (string.IsNullOrEmpty(Traits.Instance.MSBuildDisableFeaturesFromVersion))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-\n-            // If the version is of invalid format, log a warning and enable all features.\n-            if (!Version.TryParse(DisabledWave, out changeWave))\n+            else if (_cachedWave == null && !Version.TryParse(Traits.Instance.MSBuildDisableFeaturesFromVersion, out _cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.InvalidFormat;\n-                DisabledWave = ChangeWaves.EnableAllFeatures;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n                 return;\n             }\n-            // If the version is 999.999, we're done.\n-            else if (changeWave == EnableAllFeaturesAsVersion)\n+            else if (_cachedWave == EnableAllFeatures || AllWaves.Contains(_cachedWave))\n             {\n                 ConversionState = ChangeWaveConversionState.Valid;\n-                DisabledWave = changeWave.ToString();\n                 return;\n             }\n-            // If the version is out of rotation, log a warning and clamp the value.\n-            else if (changeWave < LowestWaveAsVersion)\n+            else if (_cachedWave < LowestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = LowestWave;\n+                _cachedWave = LowestWave;\n                 return;\n             }\n-            else if (changeWave > HighestWaveAsVersion)\n+            else if (_cachedWave > HighestWave)\n             {\n                 ConversionState = ChangeWaveConversionState.OutOfRotation;\n-                DisabledWave = HighestWave;\n+                _cachedWave = HighestWave;\n                 return;\n             }\n \n-            // Ensure it's set to an existing version within the current rotation\n-            if (!AllWavesAsVersion.Contains(changeWave))\n-            {\n-                foreach (Version wave in AllWavesAsVersion)\n-                {\n-                    if (wave > changeWave)\n-                    {\n-                        ConversionState = ChangeWaveConversionState.Valid;\n-                        DisabledWave = wave.ToString();\n-                        return;\n-                    }\n-                }\n-            }\n-\n+            // _cachedWave is somewhere between valid waves, find the next valid version.\n+            _cachedWave = AllWaves.First((x) => x > _cachedWave);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            MockLogger log = new MockLogger(_output);\r\n```",
              "createdAt": "2020-11-20T16:56:25Z",
              "path": "src/Build.UnitTests/ChangeWaves_Tests.cs",
              "diffHunk": "@@ -19,200 +19,146 @@ public ChangeWaves_Tests(ITestOutputHelper output)\n             _output = output;\n         }\n \n-        [Theory]\n-        [InlineData(\"16.8\")]\n-        [InlineData(\"16.10\")]\n-        [InlineData(\"17.0\")]\n-        [InlineData(\"25.87\")]\n-        [InlineData(\"102.87\")]\n-        public void EnableAllFeaturesBehindChangeWavesEnablesAllFeaturesBehindChangeWaves(string featureWave)\n+        /// <summary>\n+        /// Helper function to build a simple project based on a particular change wave being set.\n+        /// Call SetChangeWave on your TestEnvironment before calling this function.\n+        /// </summary>\n+        private void buildSimpleProjectAndValidateChangeWave(TestEnvironment testEnvironment, Version waveToCheck, Version changeWaveShouldUltimatelyResolveTo, params string[] warningCodesLogShouldContain)\n         {\n-            using (TestEnvironment env = TestEnvironment.Create())\n-            {\n-                env.SetChangeWave(ChangeWaves.EnableAllFeatures);\n-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();\n-                ChangeWaves.AreFeaturesEnabled(featureWave).ShouldBe(true);\n+            bool isThisWaveEnabled = waveToCheck < changeWaveShouldUltimatelyResolveTo || changeWaveShouldUltimatelyResolveTo == ChangeWaves.EnableAllFeatures;\n+\n+            ChangeWaves.ResetStateForTests();\n+            ChangeWaves.AreFeaturesEnabled(waveToCheck).ShouldBe(isThisWaveEnabled);\n \n-                string projectFile = $\"\" +\n-                    $\"<Project>\" +\n-                        $\"<Target Name='HelloWorld' Condition=\\\"'$(MSBUILDDISABLEFEATURESFROMVERSION)' == '{ChangeWaves.EnableAllFeatures}' and $([MSBuild]::AreFeaturesEnabled('{featureWave}'))\\\">\" +\n-                            $\"<Message Text='Hello World!'/>\" +\n-                        $\"</Target>\" +\n-                    $\"</Project>\";\n+            string projectFile = $\"\" +\n+                $\"<Project>\" +\n+                    $\"<Target Name='HelloWorld' Condition=\\\"$([MSBuild]::AreFeaturesEnabled('{waveToCheck}')) and '$(MSBUILDDISABLEFEATURESFROMVERSION)' == '{changeWaveShouldUltimatelyResolveTo}'\\\">\" +\n+                        $\"<Message Text='Hello World!'/>\" +\n+                    $\"</Target>\" +\n+                $\"</Project>\";\n \n-                TransientTestFile file = env.CreateFile(\"proj.csproj\", projectFile);\n+            TransientTestFile file = testEnvironment.CreateFile(\"proj.csproj\", projectFile);\n \n-                ProjectCollection collection = new ProjectCollection();\n-                MockLogger log = new MockLogger();\n-                collection.RegisterLogger(log);\n+            ProjectCollection collection = new ProjectCollection();\n+            MockLogger log = new MockLogger();",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How necessary is this? Part of the idea of having a split between `Engine` and `Engine.OM` is that the latter is intended to test only the public API surface and thus explicitly _not_ have IVT.",
              "createdAt": "2020-12-04T17:23:59Z",
              "path": "src/Framework/Properties/AssemblyInfo.cs",
              "diffHunk": "@@ -45,6 +45,7 @@\n [assembly: InternalsVisibleTo(\"MSBuild, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n [assembly: InternalsVisibleTo(\"Microsoft.Build.Conversion.Core, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n \n+[assembly: InternalsVisibleTo(\"Microsoft.Build.Engine.OM.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4\")]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This was required to be able to reset change wave state from `TestEnvironment`. I can move the `SetChangeWave` function out of `TestEnvironment` and keep it all in `ChangeWaves_Tests`, we'd wouldn't be able to \"nicely\" clean up change waves as `TestEnvironment` disposes.",
              "createdAt": "2020-12-05T01:25:23Z",
              "path": "src/Framework/Properties/AssemblyInfo.cs",
              "diffHunk": "@@ -45,6 +45,7 @@\n [assembly: InternalsVisibleTo(\"MSBuild, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n [assembly: InternalsVisibleTo(\"Microsoft.Build.Conversion.Core, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n \n+[assembly: InternalsVisibleTo(\"Microsoft.Build.Engine.OM.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4\")]",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Notes as I'm doing this change: This makes it slightly messier to reset change waves before each test uses it. But if it prevents IVT on a project that was intended not to have it, it's a small price to pay & small doc update.\r\n\r\nTests go from `env.SetChangeWave` to \r\n```\r\n            ChangeWaves.ResetStateForTests();\r\n            env.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", wave);\r\n            BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();\r\n```",
              "createdAt": "2020-12-07T22:40:28Z",
              "path": "src/Framework/Properties/AssemblyInfo.cs",
              "diffHunk": "@@ -45,6 +45,7 @@\n [assembly: InternalsVisibleTo(\"MSBuild, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n [assembly: InternalsVisibleTo(\"Microsoft.Build.Conversion.Core, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n \n+[assembly: InternalsVisibleTo(\"Microsoft.Build.Engine.OM.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4\")]",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Tests also need to reset changewaves once the test is complete, to prevent tests that are affected by the new behavior (ChangeWaves are opt-**out**, not in).\r\n\r\nSay `Test A` runs and set changewave to 16.8 to test a change in behavior. `Test B` (from the same assembly) will see changewave set to 16.8, and instead of running its existing behavior to test it, it will go down the ChangeWave code path.\r\n\r\nSo every test that calls changewaves will need to call \r\n```\r\nChangeWaves.ResetStateForTests();\r\nenv.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", TheirWave);\r\nBuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();\r\n```\r\nAt the beginning and end of each test, and the end call should pass `String.Empty`",
              "createdAt": "2020-12-07T22:55:35Z",
              "path": "src/Framework/Properties/AssemblyInfo.cs",
              "diffHunk": "@@ -45,6 +45,7 @@\n [assembly: InternalsVisibleTo(\"MSBuild, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n [assembly: InternalsVisibleTo(\"Microsoft.Build.Conversion.Core, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n \n+[assembly: InternalsVisibleTo(\"Microsoft.Build.Engine.OM.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4\")]",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "hmm, I definitely prefer the `env.SetChangeWave` approach. Is the problem that resetting is not accessible to the environment itself? Maybe we should finally go through with splitting out a TestHelpers assembly that can have IVT?",
              "createdAt": "2020-12-07T23:29:48Z",
              "path": "src/Framework/Properties/AssemblyInfo.cs",
              "diffHunk": "@@ -45,6 +45,7 @@\n [assembly: InternalsVisibleTo(\"MSBuild, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n [assembly: InternalsVisibleTo(\"Microsoft.Build.Conversion.Core, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n \n+[assembly: InternalsVisibleTo(\"Microsoft.Build.Engine.OM.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4\")]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "So after touching this up a bit, the only thing ChangeWaves tests have to do is:\r\n```\r\nChangeWaves.ResetStateForTests();\r\nenv.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", TheirWave);\r\nBuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();\r\n```\r\n\r\n~~And nothing at the end of the test. I forget TestEnvironment can still set the env var to empty (bypassing the variant) and call and `BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();` at `Dispose` time .~~ See 2 comments below.",
              "createdAt": "2020-12-07T23:48:37Z",
              "path": "src/Framework/Properties/AssemblyInfo.cs",
              "diffHunk": "@@ -45,6 +45,7 @@\n [assembly: InternalsVisibleTo(\"MSBuild, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n [assembly: InternalsVisibleTo(\"Microsoft.Build.Conversion.Core, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n \n+[assembly: InternalsVisibleTo(\"Microsoft.Build.Engine.OM.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4\")]",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I wonder if `BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly()` even needs to be called when they reset state and set the environment variable?",
              "createdAt": "2020-12-07T23:49:29Z",
              "path": "src/Framework/Properties/AssemblyInfo.cs",
              "diffHunk": "@@ -45,6 +45,7 @@\n [assembly: InternalsVisibleTo(\"MSBuild, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n [assembly: InternalsVisibleTo(\"Microsoft.Build.Conversion.Core, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n \n+[assembly: InternalsVisibleTo(\"Microsoft.Build.Engine.OM.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4\")]",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I lied. We still need to call `ChangeWaves.ResetStateForTests` at the end of each function that uses `ChangeWaves`. A perfect example is `ExpandAllIntoStringNotTruncated` and `ExpandAllIntoStringTruncated`. `ExpandAllIntoStringNotTruncated` tests functionality if users opt-out of that wave so it sets the ChangeWave to `16.8`. `ExpandAllIntoStringTruncated` runs after it and expects the opt-in behavior to happen, but it doesn't because the static ChangeWave was set and not reset.\r\n\r\nSo ultimately it looks like we need to call this at the end of each test _just in case_, but it's a small price to pay. I'm interested in your idea of splitting `TestHelpers` out, but I think that can be handled/tracked by a different issue/PR.",
              "createdAt": "2020-12-08T00:41:59Z",
              "path": "src/Framework/Properties/AssemblyInfo.cs",
              "diffHunk": "@@ -45,6 +45,7 @@\n [assembly: InternalsVisibleTo(\"MSBuild, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n [assembly: InternalsVisibleTo(\"Microsoft.Build.Conversion.Core, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n \n+[assembly: InternalsVisibleTo(\"Microsoft.Build.Engine.OM.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4\")]",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "> Is the problem that resetting is not accessible to the environment itself?\r\n\r\nYes, we can't reset state unless we have IVT here. ",
              "createdAt": "2020-12-08T00:49:13Z",
              "path": "src/Framework/Properties/AssemblyInfo.cs",
              "diffHunk": "@@ -45,6 +45,7 @@\n [assembly: InternalsVisibleTo(\"MSBuild, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n [assembly: InternalsVisibleTo(\"Microsoft.Build.Conversion.Core, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293\")]\n \n+[assembly: InternalsVisibleTo(\"Microsoft.Build.Engine.OM.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4\")]",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n\r\n        public void SetChangeWave(Version wave)\r\n```",
              "createdAt": "2020-12-04T17:24:11Z",
              "path": "src/Shared/UnitTests/TestEnvironment.cs",
              "diffHunk": "@@ -94,11 +94,16 @@ private void Cleanup()\n                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();\n             }\n         }\n+        public void SetChangeWave(Version wave)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Can you add doc comments for these?",
              "createdAt": "2020-12-04T17:25:37Z",
              "path": "src/Shared/UnitTests/TestEnvironment.cs",
              "diffHunk": "@@ -94,11 +94,16 @@ private void Cleanup()\n                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();\n             }\n         }\n+        public void SetChangeWave(Version wave)\n+        {\n+            SetChangeWave(wave.ToString());\n+        }\n \n         public void SetChangeWave(string wave)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n1. In the `Microsoft.Build.Framework` project, open `ChangeWaves.cs`.\r\n```",
              "createdAt": "2020-12-04T17:26:11Z",
              "path": "documentation/wiki/ChangeWaves-Dev.md",
              "diffHunk": "@@ -25,21 +25,21 @@ The Process:\n \n ## Creating a Change Wave\n 1. In the `Microsoft.Build` project, open `SharedUtilities\\ChangeWaves.cs`.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\npublic static readonly Version Wave17_4 = new(17, 4);\r\n```",
              "createdAt": "2020-12-04T17:26:43Z",
              "path": "documentation/wiki/ChangeWaves-Dev.md",
              "diffHunk": "@@ -25,21 +25,21 @@ The Process:\n \n ## Creating a Change Wave\n 1. In the `Microsoft.Build` project, open `SharedUtilities\\ChangeWaves.cs`.\n-2. Add a const string to identify the new wave, following the format:\n+2. Add a static readonly Version to identify the new wave, following the format:\n ```c#\n-public const string Wave17_4 = \"17.4\";\n+public static readonly Version Wave17_4 = \"17.4\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: as an \"I give up\" value, it's more descriptive to do:\r\n\r\n```suggestion\r\n                    arg0 = default;\r\n```",
              "createdAt": "2020-12-04T17:36:38Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -4302,6 +4302,30 @@ private static bool TryGetArg(object[] args, out int arg0)\n                 return TryConvertToInt(args[0], out arg0);\n             }\n \n+            private static bool TryGetArg(object[] args, out Version arg0)\n+            {\n+                if (args.Length != 1)\n+                {\n+                    arg0 = new Version();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    arg0 = default;\r\n```",
              "createdAt": "2020-12-04T17:37:49Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -4302,6 +4302,30 @@ private static bool TryGetArg(object[] args, out int arg0)\n                 return TryConvertToInt(args[0], out arg0);\n             }\n \n+            private static bool TryGetArg(object[] args, out Version arg0)\n+            {\n+                if (args.Length != 1)\n+                {\n+                    arg0 = new Version();\n+                    return false;\n+                }\n+\n+                return TryConvertToVersion(args[0], out arg0);\n+            }\n+\n+            private static bool TryConvertToVersion(object value, out Version arg0)\n+            {\n+                string val = value as string;\n+\n+                if (string.IsNullOrEmpty(val) || !Version.TryParse(val, out arg0))\n+                {\n+                    arg0 = new Version();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's worth noting this will result in arg0 being null rather than an empty value, but it shouldn't matter because the standard has been to not use arg0 if the check failed",
              "createdAt": "2020-12-05T00:19:07Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -4302,6 +4302,30 @@ private static bool TryGetArg(object[] args, out int arg0)\n                 return TryConvertToInt(args[0], out arg0);\n             }\n \n+            private static bool TryGetArg(object[] args, out Version arg0)\n+            {\n+                if (args.Length != 1)\n+                {\n+                    arg0 = new Version();\n+                    return false;\n+                }\n+\n+                return TryConvertToVersion(args[0], out arg0);\n+            }\n+\n+            private static bool TryConvertToVersion(object value, out Version arg0)\n+            {\n+                string val = value as string;\n+\n+                if (string.IsNullOrEmpty(val) || !Version.TryParse(val, out arg0))\n+                {\n+                    arg0 = new Version();",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "When will `_cachedWave` be null and still hit this line?",
              "createdAt": "2020-12-04T17:42:34Z",
              "path": "src/Framework/ChangeWaves.cs",
              "diffHunk": "@@ -0,0 +1,173 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.Linq;\n+\n+namespace Microsoft.Build.Utilities\n+{\n+    internal enum ChangeWaveConversionState\n+    {\n+        NotConvertedYet,\n+        Valid,\n+        InvalidFormat,\n+        OutOfRotation\n+    }\n+\n+    /// <summary>\n+    /// Coupled together with the MSBUILDDISABLEFEATURESFROMVERSION environment variable,\n+    /// this class acts as a way to make risky changes while giving customers an opt-out.\n+    /// </summary>\n+    /// See docs here: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves.md\n+    /// For dev docs: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves-Dev.md\n+    internal class ChangeWaves\n+    {\n+        internal static readonly Version Wave16_8 = new Version(16, 8);\n+        internal static readonly Version Wave16_10 = new Version(16, 10);\n+        internal static readonly Version Wave17_0 = new Version(17, 0);\n+        internal static readonly Version[] AllWaves = { Wave16_8, Wave16_10, Wave17_0 };\n+\n+        /// <summary>\n+        /// Special value indicating that all features behind all Change Waves should be enabled.\n+        /// </summary>\n+        internal static readonly Version EnableAllFeatures = new Version(999, 999);\n+\n+        /// <summary>\n+        /// The lowest wave in the current rotation of Change Waves.\n+        /// </summary>\n+        internal static Version LowestWave\n+        {\n+            get\n+            {\n+                return AllWaves[0];\n+            }\n+        }\n+\n+        /// <summary>\n+        /// The highest wave in the current rotation of Change Waves.\n+        /// </summary>\n+        internal static Version HighestWave\n+        {\n+            get\n+            {\n+                return AllWaves[AllWaves.Length - 1];\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Checks the conditions for whether or not we want ApplyChangeWave to be called again.\n+        /// </summary>\n+        private static bool ShouldApplyChangeWave\n+        {\n+            get\n+            {\n+                return ConversionState == ChangeWaveConversionState.NotConvertedYet || _cachedWave == null;\n+            }\n+        }\n+\n+        private static Version _cachedWave;\n+\n+        /// <summary>\n+        /// The current disabled wave.\n+        /// </summary>\n+        internal static Version DisabledWave\n+        {\n+            get\n+            {\n+                if (ShouldApplyChangeWave)\n+                {\n+                    ApplyChangeWave();\n+                }\n+\n+                return _cachedWave;\n+            }\n+        }\n+\n+        private static ChangeWaveConversionState _state;\n+\n+        /// <summary>\n+        /// The status of how the disabled wave was set.\n+        /// </summary>\n+        internal static ChangeWaveConversionState ConversionState\n+        {\n+            get\n+            {\n+                return _state;\n+            }\n+            set\n+            {\n+                // Keep state persistent.\n+                if (_state == ChangeWaveConversionState.NotConvertedYet)\n+                {\n+                    _state = value;\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Read from environment variable `MSBuildDisableFeaturesFromVersion`, correct it if required, cache it and its ConversionState.\n+        /// </summary>\n+        internal static void ApplyChangeWave()\n+        {\n+            // Once set, change wave should not need to be set again.\n+            string mSBuildDisableFeaturesFromVersion = Environment.GetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\");\n+            if (!ShouldApplyChangeWave)\n+            {\n+                return;\n+            }\n+            // Most common case, `MSBuildDisableFeaturesFromVersion` unset\n+            else if (string.IsNullOrEmpty(mSBuildDisableFeaturesFromVersion))\n+            {\n+                ConversionState = ChangeWaveConversionState.Valid;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n+            }\n+            else if (_cachedWave == null && !Version.TryParse(mSBuildDisableFeaturesFromVersion, out _cachedWave))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The first time this method runs and the environment variable is set. Beyond that, the null check acts as a short-circuit so we aren't trying to parse a version every time this is called.",
              "createdAt": "2020-12-05T01:28:29Z",
              "path": "src/Framework/ChangeWaves.cs",
              "diffHunk": "@@ -0,0 +1,173 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.Linq;\n+\n+namespace Microsoft.Build.Utilities\n+{\n+    internal enum ChangeWaveConversionState\n+    {\n+        NotConvertedYet,\n+        Valid,\n+        InvalidFormat,\n+        OutOfRotation\n+    }\n+\n+    /// <summary>\n+    /// Coupled together with the MSBUILDDISABLEFEATURESFROMVERSION environment variable,\n+    /// this class acts as a way to make risky changes while giving customers an opt-out.\n+    /// </summary>\n+    /// See docs here: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves.md\n+    /// For dev docs: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves-Dev.md\n+    internal class ChangeWaves\n+    {\n+        internal static readonly Version Wave16_8 = new Version(16, 8);\n+        internal static readonly Version Wave16_10 = new Version(16, 10);\n+        internal static readonly Version Wave17_0 = new Version(17, 0);\n+        internal static readonly Version[] AllWaves = { Wave16_8, Wave16_10, Wave17_0 };\n+\n+        /// <summary>\n+        /// Special value indicating that all features behind all Change Waves should be enabled.\n+        /// </summary>\n+        internal static readonly Version EnableAllFeatures = new Version(999, 999);\n+\n+        /// <summary>\n+        /// The lowest wave in the current rotation of Change Waves.\n+        /// </summary>\n+        internal static Version LowestWave\n+        {\n+            get\n+            {\n+                return AllWaves[0];\n+            }\n+        }\n+\n+        /// <summary>\n+        /// The highest wave in the current rotation of Change Waves.\n+        /// </summary>\n+        internal static Version HighestWave\n+        {\n+            get\n+            {\n+                return AllWaves[AllWaves.Length - 1];\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Checks the conditions for whether or not we want ApplyChangeWave to be called again.\n+        /// </summary>\n+        private static bool ShouldApplyChangeWave\n+        {\n+            get\n+            {\n+                return ConversionState == ChangeWaveConversionState.NotConvertedYet || _cachedWave == null;\n+            }\n+        }\n+\n+        private static Version _cachedWave;\n+\n+        /// <summary>\n+        /// The current disabled wave.\n+        /// </summary>\n+        internal static Version DisabledWave\n+        {\n+            get\n+            {\n+                if (ShouldApplyChangeWave)\n+                {\n+                    ApplyChangeWave();\n+                }\n+\n+                return _cachedWave;\n+            }\n+        }\n+\n+        private static ChangeWaveConversionState _state;\n+\n+        /// <summary>\n+        /// The status of how the disabled wave was set.\n+        /// </summary>\n+        internal static ChangeWaveConversionState ConversionState\n+        {\n+            get\n+            {\n+                return _state;\n+            }\n+            set\n+            {\n+                // Keep state persistent.\n+                if (_state == ChangeWaveConversionState.NotConvertedYet)\n+                {\n+                    _state = value;\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Read from environment variable `MSBuildDisableFeaturesFromVersion`, correct it if required, cache it and its ConversionState.\n+        /// </summary>\n+        internal static void ApplyChangeWave()\n+        {\n+            // Once set, change wave should not need to be set again.\n+            string mSBuildDisableFeaturesFromVersion = Environment.GetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\");\n+            if (!ShouldApplyChangeWave)\n+            {\n+                return;\n+            }\n+            // Most common case, `MSBuildDisableFeaturesFromVersion` unset\n+            else if (string.IsNullOrEmpty(mSBuildDisableFeaturesFromVersion))\n+            {\n+                ConversionState = ChangeWaveConversionState.Valid;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n+            }\n+            else if (_cachedWave == null && !Version.TryParse(mSBuildDisableFeaturesFromVersion, out _cachedWave))",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I find the mutation of `_cachedWave` here to be a bit confusing and think it might have been a bit clearer to use a local and always assign `_cachedWave` later. But not enough to rewrite. Likewise this might have been clearer with a pattern matching expression. But neither is worth rewriting at this point.",
              "createdAt": "2020-12-04T17:48:29Z",
              "path": "src/Framework/ChangeWaves.cs",
              "diffHunk": "@@ -0,0 +1,173 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.Linq;\n+\n+namespace Microsoft.Build.Utilities\n+{\n+    internal enum ChangeWaveConversionState\n+    {\n+        NotConvertedYet,\n+        Valid,\n+        InvalidFormat,\n+        OutOfRotation\n+    }\n+\n+    /// <summary>\n+    /// Coupled together with the MSBUILDDISABLEFEATURESFROMVERSION environment variable,\n+    /// this class acts as a way to make risky changes while giving customers an opt-out.\n+    /// </summary>\n+    /// See docs here: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves.md\n+    /// For dev docs: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves-Dev.md\n+    internal class ChangeWaves\n+    {\n+        internal static readonly Version Wave16_8 = new Version(16, 8);\n+        internal static readonly Version Wave16_10 = new Version(16, 10);\n+        internal static readonly Version Wave17_0 = new Version(17, 0);\n+        internal static readonly Version[] AllWaves = { Wave16_8, Wave16_10, Wave17_0 };\n+\n+        /// <summary>\n+        /// Special value indicating that all features behind all Change Waves should be enabled.\n+        /// </summary>\n+        internal static readonly Version EnableAllFeatures = new Version(999, 999);\n+\n+        /// <summary>\n+        /// The lowest wave in the current rotation of Change Waves.\n+        /// </summary>\n+        internal static Version LowestWave\n+        {\n+            get\n+            {\n+                return AllWaves[0];\n+            }\n+        }\n+\n+        /// <summary>\n+        /// The highest wave in the current rotation of Change Waves.\n+        /// </summary>\n+        internal static Version HighestWave\n+        {\n+            get\n+            {\n+                return AllWaves[AllWaves.Length - 1];\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Checks the conditions for whether or not we want ApplyChangeWave to be called again.\n+        /// </summary>\n+        private static bool ShouldApplyChangeWave\n+        {\n+            get\n+            {\n+                return ConversionState == ChangeWaveConversionState.NotConvertedYet || _cachedWave == null;\n+            }\n+        }\n+\n+        private static Version _cachedWave;\n+\n+        /// <summary>\n+        /// The current disabled wave.\n+        /// </summary>\n+        internal static Version DisabledWave\n+        {\n+            get\n+            {\n+                if (ShouldApplyChangeWave)\n+                {\n+                    ApplyChangeWave();\n+                }\n+\n+                return _cachedWave;\n+            }\n+        }\n+\n+        private static ChangeWaveConversionState _state;\n+\n+        /// <summary>\n+        /// The status of how the disabled wave was set.\n+        /// </summary>\n+        internal static ChangeWaveConversionState ConversionState\n+        {\n+            get\n+            {\n+                return _state;\n+            }\n+            set\n+            {\n+                // Keep state persistent.\n+                if (_state == ChangeWaveConversionState.NotConvertedYet)\n+                {\n+                    _state = value;\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Read from environment variable `MSBuildDisableFeaturesFromVersion`, correct it if required, cache it and its ConversionState.\n+        /// </summary>\n+        internal static void ApplyChangeWave()\n+        {\n+            // Once set, change wave should not need to be set again.\n+            string mSBuildDisableFeaturesFromVersion = Environment.GetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\");\n+            if (!ShouldApplyChangeWave)\n+            {\n+                return;\n+            }\n+            // Most common case, `MSBuildDisableFeaturesFromVersion` unset\n+            else if (string.IsNullOrEmpty(mSBuildDisableFeaturesFromVersion))\n+            {\n+                ConversionState = ChangeWaveConversionState.Valid;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n+            }\n+            else if (_cachedWave == null && !Version.TryParse(mSBuildDisableFeaturesFromVersion, out _cachedWave))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Now that you mention it, I agree it would be clearer. Adding this to a list of stuff I'll add in a touch-up PR.",
              "createdAt": "2020-12-07T23:50:09Z",
              "path": "src/Framework/ChangeWaves.cs",
              "diffHunk": "@@ -0,0 +1,173 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.Linq;\n+\n+namespace Microsoft.Build.Utilities\n+{\n+    internal enum ChangeWaveConversionState\n+    {\n+        NotConvertedYet,\n+        Valid,\n+        InvalidFormat,\n+        OutOfRotation\n+    }\n+\n+    /// <summary>\n+    /// Coupled together with the MSBUILDDISABLEFEATURESFROMVERSION environment variable,\n+    /// this class acts as a way to make risky changes while giving customers an opt-out.\n+    /// </summary>\n+    /// See docs here: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves.md\n+    /// For dev docs: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves-Dev.md\n+    internal class ChangeWaves\n+    {\n+        internal static readonly Version Wave16_8 = new Version(16, 8);\n+        internal static readonly Version Wave16_10 = new Version(16, 10);\n+        internal static readonly Version Wave17_0 = new Version(17, 0);\n+        internal static readonly Version[] AllWaves = { Wave16_8, Wave16_10, Wave17_0 };\n+\n+        /// <summary>\n+        /// Special value indicating that all features behind all Change Waves should be enabled.\n+        /// </summary>\n+        internal static readonly Version EnableAllFeatures = new Version(999, 999);\n+\n+        /// <summary>\n+        /// The lowest wave in the current rotation of Change Waves.\n+        /// </summary>\n+        internal static Version LowestWave\n+        {\n+            get\n+            {\n+                return AllWaves[0];\n+            }\n+        }\n+\n+        /// <summary>\n+        /// The highest wave in the current rotation of Change Waves.\n+        /// </summary>\n+        internal static Version HighestWave\n+        {\n+            get\n+            {\n+                return AllWaves[AllWaves.Length - 1];\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Checks the conditions for whether or not we want ApplyChangeWave to be called again.\n+        /// </summary>\n+        private static bool ShouldApplyChangeWave\n+        {\n+            get\n+            {\n+                return ConversionState == ChangeWaveConversionState.NotConvertedYet || _cachedWave == null;\n+            }\n+        }\n+\n+        private static Version _cachedWave;\n+\n+        /// <summary>\n+        /// The current disabled wave.\n+        /// </summary>\n+        internal static Version DisabledWave\n+        {\n+            get\n+            {\n+                if (ShouldApplyChangeWave)\n+                {\n+                    ApplyChangeWave();\n+                }\n+\n+                return _cachedWave;\n+            }\n+        }\n+\n+        private static ChangeWaveConversionState _state;\n+\n+        /// <summary>\n+        /// The status of how the disabled wave was set.\n+        /// </summary>\n+        internal static ChangeWaveConversionState ConversionState\n+        {\n+            get\n+            {\n+                return _state;\n+            }\n+            set\n+            {\n+                // Keep state persistent.\n+                if (_state == ChangeWaveConversionState.NotConvertedYet)\n+                {\n+                    _state = value;\n+                }\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Read from environment variable `MSBuildDisableFeaturesFromVersion`, correct it if required, cache it and its ConversionState.\n+        /// </summary>\n+        internal static void ApplyChangeWave()\n+        {\n+            // Once set, change wave should not need to be set again.\n+            string mSBuildDisableFeaturesFromVersion = Environment.GetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\");\n+            if (!ShouldApplyChangeWave)\n+            {\n+                return;\n+            }\n+            // Most common case, `MSBuildDisableFeaturesFromVersion` unset\n+            else if (string.IsNullOrEmpty(mSBuildDisableFeaturesFromVersion))\n+            {\n+                ConversionState = ChangeWaveConversionState.Valid;\n+                _cachedWave = ChangeWaves.EnableAllFeatures;\n+            }\n+            else if (_cachedWave == null && !Version.TryParse(mSBuildDisableFeaturesFromVersion, out _cachedWave))",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you comment these please?",
              "createdAt": "2020-12-04T17:52:48Z",
              "path": "src/Build.UnitTests/ChangeWaves_Tests.cs",
              "diffHunk": "@@ -19,200 +19,146 @@ public ChangeWaves_Tests(ITestOutputHelper output)\n             _output = output;\n         }\n \n-        [Theory]\n-        [InlineData(\"16.8\")]\n-        [InlineData(\"16.10\")]\n-        [InlineData(\"17.0\")]\n-        [InlineData(\"25.87\")]\n-        [InlineData(\"102.87\")]\n-        public void EnableAllFeaturesBehindChangeWavesEnablesAllFeaturesBehindChangeWaves(string featureWave)\n+        /// <summary>\n+        /// Helper function to build a simple project based on a particular change wave being set.\n+        /// Call SetChangeWave on your TestEnvironment before calling this function.\n+        /// </summary>\n+        private void buildSimpleProjectAndValidateChangeWave(TestEnvironment testEnvironment, Version waveToCheck, Version changeWaveShouldUltimatelyResolveTo, params string[] warningCodesLogShouldContain)\n         {\n-            using (TestEnvironment env = TestEnvironment.Create())\n-            {\n-                env.SetChangeWave(ChangeWaves.EnableAllFeatures);\n-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();\n-                ChangeWaves.AreFeaturesEnabled(featureWave).ShouldBe(true);\n+            bool isThisWaveEnabled = waveToCheck < changeWaveShouldUltimatelyResolveTo || changeWaveShouldUltimatelyResolveTo == ChangeWaves.EnableAllFeatures;\n+\n+            ChangeWaves.ResetStateForTests();\n+            ChangeWaves.AreFeaturesEnabled(waveToCheck).ShouldBe(isThisWaveEnabled);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: this could be a theory and would produce clearer errors on failure if it was. but xunit makes it kind of annoying to use a member from another class as a list data source so meh.",
              "createdAt": "2020-12-04T17:58:02Z",
              "path": "src/Build.UnitTests/ChangeWaves_Tests.cs",
              "diffHunk": "@@ -19,200 +19,146 @@ public ChangeWaves_Tests(ITestOutputHelper output)\n             _output = output;\n         }\n \n-        [Theory]\n-        [InlineData(\"16.8\")]\n-        [InlineData(\"16.10\")]\n-        [InlineData(\"17.0\")]\n-        [InlineData(\"25.87\")]\n-        [InlineData(\"102.87\")]\n-        public void EnableAllFeaturesBehindChangeWavesEnablesAllFeaturesBehindChangeWaves(string featureWave)\n+        /// <summary>\n+        /// Helper function to build a simple project based on a particular change wave being set.\n+        /// Call SetChangeWave on your TestEnvironment before calling this function.\n+        /// </summary>\n+        private void buildSimpleProjectAndValidateChangeWave(TestEnvironment testEnvironment, Version waveToCheck, Version changeWaveShouldUltimatelyResolveTo, params string[] warningCodesLogShouldContain)\n         {\n-            using (TestEnvironment env = TestEnvironment.Create())\n-            {\n-                env.SetChangeWave(ChangeWaves.EnableAllFeatures);\n-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();\n-                ChangeWaves.AreFeaturesEnabled(featureWave).ShouldBe(true);\n+            bool isThisWaveEnabled = waveToCheck < changeWaveShouldUltimatelyResolveTo || changeWaveShouldUltimatelyResolveTo == ChangeWaves.EnableAllFeatures;\n+\n+            ChangeWaves.ResetStateForTests();\n+            ChangeWaves.AreFeaturesEnabled(waveToCheck).ShouldBe(isThisWaveEnabled);\n+\n+            string projectFile = $\"\" +\n+                $\"<Project>\" +\n+                    $\"<Target Name='HelloWorld' Condition=\\\"$([MSBuild]::AreFeaturesEnabled('{waveToCheck}')) and '$(MSBUILDDISABLEFEATURESFROMVERSION)' == '{changeWaveShouldUltimatelyResolveTo}'\\\">\" +\n+                        $\"<Message Text='Hello World!'/>\" +\n+                    $\"</Target>\" +\n+                $\"</Project>\";\n+\n+            TransientTestFile file = testEnvironment.CreateFile(\"proj.csproj\", projectFile);\n \n-                string projectFile = $\"\" +\n-                    $\"<Project>\" +\n-                        $\"<Target Name='HelloWorld' Condition=\\\"'$(MSBUILDDISABLEFEATURESFROMVERSION)' == '{ChangeWaves.EnableAllFeatures}' and $([MSBuild]::AreFeaturesEnabled('{featureWave}'))\\\">\" +\n-                            $\"<Message Text='Hello World!'/>\" +\n-                        $\"</Target>\" +\n-                    $\"</Project>\";\n+            ProjectCollection collection = new ProjectCollection();\n+            MockLogger log = new MockLogger(_output);\n+            collection.RegisterLogger(log);\n \n-                TransientTestFile file = env.CreateFile(\"proj.csproj\", projectFile);\n+            Project p = collection.LoadProject(file.Path);\n+            p.Build().ShouldBeTrue();\n \n-                ProjectCollection collection = new ProjectCollection();\n-                MockLogger log = new MockLogger();\n-                collection.RegisterLogger(log);\n+            log.FullLog.Contains(\"Hello World!\").ShouldBe(isThisWaveEnabled);\n \n-                collection.LoadProject(file.Path).Build().ShouldBeTrue();\n-                log.AssertLogContains(\"Hello World!\");\n-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();\n+            if (warningCodesLogShouldContain != null)\n+            {\n+                log.WarningCount.ShouldBe(warningCodesLogShouldContain.Length);\n+                log.AssertLogContains(warningCodesLogShouldContain);\n             }\n         }\n \n-        [Theory]\n-        [InlineData(\"16.8\")]\n-        [InlineData(\"16.10\")]\n-        [InlineData(\"17.0\")]\n-        [InlineData(\"27.3\")]\n-        public void NoChangeWaveSetMeansAllChangeWavesAreEnabled(string featureWave)\n+        [Fact]\n+        public void EnableAllFeaturesBehindChangeWavesEnablesAllFeaturesBehindChangeWaves()",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "can you do doc comments for the arguments too? Not sure I totally grok.",
              "createdAt": "2020-12-04T18:00:47Z",
              "path": "src/Build.UnitTests/ChangeWaves_Tests.cs",
              "diffHunk": "@@ -19,200 +19,146 @@ public ChangeWaves_Tests(ITestOutputHelper output)\n             _output = output;\n         }\n \n-        [Theory]\n-        [InlineData(\"16.8\")]\n-        [InlineData(\"16.10\")]\n-        [InlineData(\"17.0\")]\n-        [InlineData(\"25.87\")]\n-        [InlineData(\"102.87\")]\n-        public void EnableAllFeaturesBehindChangeWavesEnablesAllFeaturesBehindChangeWaves(string featureWave)\n+        /// <summary>\n+        /// Helper function to build a simple project based on a particular change wave being set.\n+        /// Call SetChangeWave on your TestEnvironment before calling this function.\n+        /// </summary>\n+        private void buildSimpleProjectAndValidateChangeWave(TestEnvironment testEnvironment, Version waveToCheck, Version changeWaveShouldUltimatelyResolveTo, params string[] warningCodesLogShouldContain)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Part of the confusion may be that this helper function basically does all the checking for you. I added the comments.",
              "createdAt": "2020-12-05T01:09:31Z",
              "path": "src/Build.UnitTests/ChangeWaves_Tests.cs",
              "diffHunk": "@@ -19,200 +19,146 @@ public ChangeWaves_Tests(ITestOutputHelper output)\n             _output = output;\n         }\n \n-        [Theory]\n-        [InlineData(\"16.8\")]\n-        [InlineData(\"16.10\")]\n-        [InlineData(\"17.0\")]\n-        [InlineData(\"25.87\")]\n-        [InlineData(\"102.87\")]\n-        public void EnableAllFeaturesBehindChangeWavesEnablesAllFeaturesBehindChangeWaves(string featureWave)\n+        /// <summary>\n+        /// Helper function to build a simple project based on a particular change wave being set.\n+        /// Call SetChangeWave on your TestEnvironment before calling this function.\n+        /// </summary>\n+        private void buildSimpleProjectAndValidateChangeWave(TestEnvironment testEnvironment, Version waveToCheck, Version changeWaveShouldUltimatelyResolveTo, params string[] warningCodesLogShouldContain)",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Add BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly in docs",
              "createdAt": "2020-12-11T22:37:50Z",
              "path": "documentation/wiki/ChangeWaves-Dev.md",
              "diffHunk": "@@ -57,18 +57,19 @@ Create tests as you normally would. Include one test with environment variable `\n ```c#\n TestEnvironment env = TestEnvironment.Create()\n \n-env.SetChangeWave(ChangeWaves.Wave17_4);\n+ChangeWaves.ResetStateForTests();\n+// Important: use the version here\n+env.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", ChangeWaves.Wave17_4.ToString());\n ```\n-When the TestEnvironment is disposed, it handles special logic to properly reset Change Waves for future tests.\n \n **Important!** If you need to build a project to test your feature (say, for tasks or targets), build via `ProjectCollection` in your test.\n \n Example:\n ```c#\n using (TestEnvironment env = TestEnvironment.Create())\n {\n-    // Important: use the version here\n-    env.SetChangeWave(ChangeWaves.Wave17_4);\n+    ChangeWaves.ResetStateForTests();\n+    env.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", ChangeWaves.Wave17_4.ToString());",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      }
    ]
  }
}