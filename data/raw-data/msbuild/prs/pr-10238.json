{
  "number": 10238,
  "title": "Normalize paths to remove \\ on UNIX when fetching them from props in BuildCheck",
  "body": "Fixes #10072 \r\n\r\n### Context\r\nBackground: the \\ appears due to targets and properties default values having hardcoded \\ in them. Changing this is out of scope of solving this bug.\r\n\r\n\r\n### Changes Made\r\nAdded an extension TryGetPathValue method  for dictionaries with string values to FileUtilities which normalizes the value to a path. Use this method to get the value in SharedOutputPathAnalyzer (BuildCheck).\r\n\r\n### Testing\r\nManually tested it fixes the issue on UNIX.\r\n\r\n### Notes\r\nThis seems like a hack. Removing all \\ from targets and props would solve the issue at its root, but I can't see the consequences of that.\r\nIf the extension method is an acceptable solution we might want to make it public so other BuildCheckAnalyzer creators can use it.\r\nAlternative approaches I considered:\r\n1. normalize every time after extracting a path-y string - explicit in what it does but people writing other buildchecks might forget\r\n2. a method in EvaluatedPropertiesAnalysisData - localized to the issue but I suppose this issue might arise in other parts of MSBuild so there should be a method for that available for them\r\n3. non-extension static method - seems slightly worse due to weirder syntax when used",
  "state": "MERGED",
  "createdAt": "2024-06-13T16:18:06Z",
  "updatedAt": "2024-06-17T07:32:02Z",
  "closedAt": "2024-06-17T07:32:02Z",
  "mergedAt": "2024-06-17T07:32:02Z",
  "additions": 23,
  "deletions": 3,
  "changedFiles": 2,
  "headRefName": "dev/janpro/buildcheck-unix-path-bug",
  "isDraft": false,
  "author": {
    "login": "JanProvaznik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "08df94cb3badc669d0f8031209e065d3085cf966",
          "message": "add an extension method for getting paths from dictionaries, use it in BuildCheck",
          "committedDate": "2024-06-13T16:06:56Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I like this for our internal needs. For the public BuildCheck API we're building we should expose a similar operation @JanKrivanek.",
              "createdAt": "2024-06-14T14:56:57Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -576,6 +576,26 @@ internal static string MaybeAdjustFilePath(string value, string baseDirectory =\n             return shouldAdjust ? newValue.ToString() : value;\n         }\n \n+        /// <summary>\n+        /// Gets the path value that is associated with the specified key in a dictionary with <see cref=\"string\"/> values.\n+        /// Normalizes the value as a path.\n+        /// </summary>\n+        /// <param name=\"dictionary\">The dictionary to search.</param>\n+        /// <param name=\"key\">The key to locate.</param>\n+        /// <param name=\"value\">When this method returns, the value associated with the specified key normalized as a path, if the key is found; otherwise <see langword=\"null\"/>.</param>\n+        /// <returns><see langword=\"true\"/> if the dictionary contains an element that has the specified key; otherwise, <see langword=\"false\"/>.</returns>\n+        /// <remarks>Use this method to get paths from dictionaries of properties whose default values may contain backslashes.</remarks>\n+        internal static bool TryGetPathValue<TKey>(this IReadOnlyDictionary<TKey, string> dictionary, TKey key, out string value)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "@rainersigwald ,do we have any ways to catch it earlier , e.g. during evaluation?\r\nWe managed to find this spot, but not sure if Jan had a change to try it: https://github.com/dotnet/msbuild/blob/a9efffc4de9609e9ecb45c6c2d41487a4ed70d6f/src/Build/Evaluation/Expander.cs#L1599",
              "createdAt": "2024-06-14T15:52:19Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -576,6 +576,26 @@ internal static string MaybeAdjustFilePath(string value, string baseDirectory =\n             return shouldAdjust ? newValue.ToString() : value;\n         }\n \n+        /// <summary>\n+        /// Gets the path value that is associated with the specified key in a dictionary with <see cref=\"string\"/> values.\n+        /// Normalizes the value as a path.\n+        /// </summary>\n+        /// <param name=\"dictionary\">The dictionary to search.</param>\n+        /// <param name=\"key\">The key to locate.</param>\n+        /// <param name=\"value\">When this method returns, the value associated with the specified key normalized as a path, if the key is found; otherwise <see langword=\"null\"/>.</param>\n+        /// <returns><see langword=\"true\"/> if the dictionary contains an element that has the specified key; otherwise, <see langword=\"false\"/>.</returns>\n+        /// <remarks>Use this method to get paths from dictionaries of properties whose default values may contain backslashes.</remarks>\n+        internal static bool TryGetPathValue<TKey>(this IReadOnlyDictionary<TKey, string> dictionary, TKey key, out string value)",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Unfortunately I don't think there's any 100% reliable way to know during evaluation whether a property is a path or not, unless it already calls `NormalizePath`.\r\n\r\nThis ties into the longer-term idea of having some more type data in MSBuild so we could say \"this property is a partial path\" or \"this item doesn't represent a file\".",
              "createdAt": "2024-06-14T17:31:12Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -576,6 +576,26 @@ internal static string MaybeAdjustFilePath(string value, string baseDirectory =\n             return shouldAdjust ? newValue.ToString() : value;\n         }\n \n+        /// <summary>\n+        /// Gets the path value that is associated with the specified key in a dictionary with <see cref=\"string\"/> values.\n+        /// Normalizes the value as a path.\n+        /// </summary>\n+        /// <param name=\"dictionary\">The dictionary to search.</param>\n+        /// <param name=\"key\">The key to locate.</param>\n+        /// <param name=\"value\">When this method returns, the value associated with the specified key normalized as a path, if the key is found; otherwise <see langword=\"null\"/>.</param>\n+        /// <returns><see langword=\"true\"/> if the dictionary contains an element that has the specified key; otherwise, <see langword=\"false\"/>.</returns>\n+        /// <remarks>Use this method to get paths from dictionaries of properties whose default values may contain backslashes.</remarks>\n+        internal static bool TryGetPathValue<TKey>(this IReadOnlyDictionary<TKey, string> dictionary, TKey key, out string value)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}