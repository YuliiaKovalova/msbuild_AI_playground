{
  "number": 11318,
  "title": "Adding a static factory for the TerminalLogger",
  "body": "Fixes #10998\r\n\r\n### Context\r\nAlthough I created the SDK hotfix to always use the `ConsoleLogger`, we want to use `TerminalLogger` when it's possible.\r\n\r\n### Changes Made\r\nAdded a static factory that can return instance of Terminal or Console logger based on current environment. The usage of TerminalLogger in this scenario can be explicitly disabled by using of already existing env. variable or CLI argument `--tl:off`.\r\nThis change also prevents emitting of progress indication when the verbosity is set to `quiet`.",
  "state": "MERGED",
  "createdAt": "2025-01-21T13:36:04Z",
  "updatedAt": "2025-02-24T16:50:39Z",
  "closedAt": "2025-02-24T16:50:35Z",
  "mergedAt": "2025-02-24T16:50:35Z",
  "additions": 2363,
  "deletions": 2269,
  "changedFiles": 145,
  "headRefName": "dev/mipavlik/tl-static-factory",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Terminal Logger"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a8e7cc008f98ccb5c740ebadb3f43efcde904d84",
          "message": "Adds a static factory that can create a TerminalLogger or ConsoleLogger instance based on settings and terminal capabilities.",
          "committedDate": "2024-11-21T07:24:38Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f0cbec2d7dfae5262ab6e704c6de2eecf1af9b80",
          "message": "Disable TL progress ctrl codes when verbosity is 'quiet'",
          "committedDate": "2025-01-20T13:00:27Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16852843f50f40a0a844001d1c17e3f17625e4f0",
          "message": "Added --tl:<val> arg support",
          "committedDate": "2025-01-21T13:20:55Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "db35e8acffe349c8fd387d145eff3929d5b34949",
          "message": "Removing debugging code",
          "committedDate": "2025-01-21T13:27:22Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d38dd700d12c29d472a54dfac0b4efa1ffb47450",
          "message": "Merge branch 'main' into dev/mipavlik/tl-static-factory",
          "committedDate": "2025-01-21T13:37:20Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8dbfeb89d9261f14574943078d75f4aa0428b846",
          "message": "Merge branch 'main' into dev/mipavlik/tl-static-factory",
          "committedDate": "2025-02-05T09:26:46Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d040fd9c33bd96b2edcd79126957ab2fe261b1e4",
          "message": "Fixed failing tests",
          "committedDate": "2025-02-05T10:23:23Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "94a1378116450bfb578229e6fbd5761a8815a934",
          "message": "The factory method is now public",
          "committedDate": "2025-02-05T16:24:27Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "01607a8a6624b11b61de721faa8852c6ddb218d1",
          "message": "Unnecessary usings were removed",
          "committedDate": "2025-02-05T16:30:20Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9eb546492adf44d6e2b4eafcc2f28cac29cae29a",
          "message": "Moving the TerminalLogger back due to issues with shared sources. Added unit test",
          "committedDate": "2025-02-07T09:40:05Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d2dbfce9decc8b78cda4203c51b9152dd65f3bb7",
          "message": "Updated parameter doc",
          "committedDate": "2025-02-07T09:43:01Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2defbfe08dd9347b5416345e84c1e2e1bd013c42",
          "message": "Addded support for more args prefixes and returned --tl:on option",
          "committedDate": "2025-02-07T14:56:16Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eb0ead3fcc25848de5485b1dfeae793b8a9e1c70",
          "message": "Moving Terminal Logger once again, but making it public now. All ctors are internal.",
          "committedDate": "2025-02-19T14:28:52Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8dbee80082ebb5c565d836575536f50bee581541",
          "message": "Fixed tests",
          "committedDate": "2025-02-20T07:30:14Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6d014a67491efb4193ae44d77da735e2b767a71a",
          "message": "Merge branch 'main' into dev/mipavlik/tl-static-factory",
          "committedDate": "2025-02-20T07:35:10Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "74a4d2306ddc32563796cb0419b467e65a2d81a7",
          "message": "Updated XLFs",
          "committedDate": "2025-02-20T07:39:49Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "018d49075908000a9e277b0236f96f0e442de31c",
          "message": "Fixed TL activation",
          "committedDate": "2025-02-20T08:17:07Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab081828b125a2faad1f3514bbb364a72a2ad522",
          "message": "Changing namespace to align with other public loggers. Some types were renamed to avoid confusion.",
          "committedDate": "2025-02-20T10:28:35Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3ac2ee07929907536dd7a1d7cd1954f44ff9c9e3",
          "message": "Added verbosity parsing capability",
          "committedDate": "2025-02-20T13:50:30Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "74cf0c327411e874ab06122e1bcddd1c13c3924b",
          "message": "Merge branch 'main' into dev/mipavlik/tl-static-factory",
          "committedDate": "2025-02-21T14:39:19Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f7cbe77b09da2c0454acfa6bd9fbb4754727ffa9",
          "message": "Factory now recognizes the \"false\" value",
          "committedDate": "2025-02-24T11:49:25Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@baronfel, I know you would like to have full support for CLI logger configuration, but it will require some refactoring as the code for argument parsing is mostly placed in XMake. I wanted to break up XMake years ago, but now we have a valid reason to refactor at least part of the huge file :) If you don't mind, I would create a separate issue for this work.",
        "createdAt": "2025-01-21T13:48:15Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "> @baronfel, I know you would like to have full support for CLI logger configuration, but it will require some refactoring as the code for argument parsing is mostly placed in XMake. I wanted to break up XMake years ago, but now we have a valid reason to refactor at least part of the huge file :) If you don't mind, I would create a separate issue for this work.\r\n\r\nYeah, that is quite a large unit of work - makes sense to carve it out.",
        "createdAt": "2025-01-21T17:12:44Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> LGTM, but should we use this factory in our own codebase to dogfood?\r\n\r\nI wanted to do it from the beginning, but the entry point logic emits global messages when it detects that TL couldn't be used. The easiest solution is to make the list of deferred messages in `XMake` internal, but I don't like it from an engineering point of view (separation of concerns, class coupling, etc.).\r\n\r\nI think we could move the factory to some already public type like `ConsoleLogger`, so the CLI doesn't have to use reflection. Then we could move the list of deferred messages from `XMake` to the `Logger` class and use it directly in the factory or, in a cleaner way, return some indication of why the TL cannot be used and let `XMake` create the messages. Let's sync offline.\r\n\r\nEdit: I'm looking at `XMake` once again, and actually, there are multiple things that make dogfooding the factory... problematic :(",
        "createdAt": "2025-01-22T10:06:17Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "We decided to reuse parameters parsing logic to support all CL and TL logger parameters in this case.",
        "createdAt": "2025-01-27T14:13:37Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "We agreed to use the factory as is and make it public. Support for all parameters will be added later.",
        "createdAt": "2025-02-05T16:37:56Z",
        "author": {
          "login": "MichalPavlik"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this the correct parsing of the argument? Is there some sanitization/ of the args before? In the docs `-terminalLogger` also exists, https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-reference\r\nand the prefix also can be different: `-tl` or `/tl` or `--tl`",
              "createdAt": "2025-02-07T10:41:53Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -328,6 +332,40 @@ protected WriteHandler WriteHandler\n \n         #region Methods\n \n+        /// <summary>\n+        /// Creates a Terminal logger if possible, or a Console logger.\n+        /// </summary>\n+        /// <param name=\"verbosity\">Level of detail to show in the log.</param>\n+        /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only '--tl:off' is supported to disable TerminalLogger.</param>\n+        public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)\n+        {\n+            (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+            return CreateTerminalOrConsoleLogger(verbosity, args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+        }\n+\n+        internal static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+        {\n+            string tlArg = args?.LastOrDefault(a => a.StartsWith(\"--tl:\", StringComparison.InvariantCultureIgnoreCase)) ?? string.Empty;",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "True, I see -tl:false used most often, or at least that is what I use.",
              "createdAt": "2025-02-07T12:51:40Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -328,6 +332,40 @@ protected WriteHandler WriteHandler\n \n         #region Methods\n \n+        /// <summary>\n+        /// Creates a Terminal logger if possible, or a Console logger.\n+        /// </summary>\n+        /// <param name=\"verbosity\">Level of detail to show in the log.</param>\n+        /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only '--tl:off' is supported to disable TerminalLogger.</param>\n+        public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)\n+        {\n+            (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+            return CreateTerminalOrConsoleLogger(verbosity, args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+        }\n+\n+        internal static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+        {\n+            string tlArg = args?.LastOrDefault(a => a.StartsWith(\"--tl:\", StringComparison.InvariantCultureIgnoreCase)) ?? string.Empty;",
              "author": {
                "login": "nohwnd"
              }
            },
            {
              "body": "This was primarily designed for the SDK and parameters passed to `dotnet run`. In this case, `--tl:` is the only documented format. Our long-term goal is to support all parameters in all formats with the already implemented parsing logic, but we need to provide this API to our friends from the testing team soon :)",
              "createdAt": "2025-02-07T12:53:54Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -328,6 +332,40 @@ protected WriteHandler WriteHandler\n \n         #region Methods\n \n+        /// <summary>\n+        /// Creates a Terminal logger if possible, or a Console logger.\n+        /// </summary>\n+        /// <param name=\"verbosity\">Level of detail to show in the log.</param>\n+        /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only '--tl:off' is supported to disable TerminalLogger.</param>\n+        public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)\n+        {\n+            (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+            return CreateTerminalOrConsoleLogger(verbosity, args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+        }\n+\n+        internal static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+        {\n+            string tlArg = args?.LastOrDefault(a => a.StartsWith(\"--tl:\", StringComparison.InvariantCultureIgnoreCase)) ?? string.Empty;",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "@nohwnd, are you using `-tl:...` for SDK build/run or for MSBuild.exe build?",
              "createdAt": "2025-02-07T13:08:13Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -328,6 +332,40 @@ protected WriteHandler WriteHandler\n \n         #region Methods\n \n+        /// <summary>\n+        /// Creates a Terminal logger if possible, or a Console logger.\n+        /// </summary>\n+        /// <param name=\"verbosity\">Level of detail to show in the log.</param>\n+        /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only '--tl:off' is supported to disable TerminalLogger.</param>\n+        public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)\n+        {\n+            (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+            return CreateTerminalOrConsoleLogger(verbosity, args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+        }\n+\n+        internal static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+        {\n+            string tlArg = args?.LastOrDefault(a => a.StartsWith(\"--tl:\", StringComparison.InvariantCultureIgnoreCase)) ?? string.Empty;",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "I do `dotnet test -tl:false` most often",
              "createdAt": "2025-02-07T13:22:14Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -328,6 +332,40 @@ protected WriteHandler WriteHandler\n \n         #region Methods\n \n+        /// <summary>\n+        /// Creates a Terminal logger if possible, or a Console logger.\n+        /// </summary>\n+        /// <param name=\"verbosity\">Level of detail to show in the log.</param>\n+        /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only '--tl:off' is supported to disable TerminalLogger.</param>\n+        public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)\n+        {\n+            (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+            return CreateTerminalOrConsoleLogger(verbosity, args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+        }\n+\n+        internal static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+        {\n+            string tlArg = args?.LastOrDefault(a => a.StartsWith(\"--tl:\", StringComparison.InvariantCultureIgnoreCase)) ?? string.Empty;",
              "author": {
                "login": "nohwnd"
              }
            },
            {
              "body": "but also dotnet build -tl:false",
              "createdAt": "2025-02-07T13:22:26Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -328,6 +332,40 @@ protected WriteHandler WriteHandler\n \n         #region Methods\n \n+        /// <summary>\n+        /// Creates a Terminal logger if possible, or a Console logger.\n+        /// </summary>\n+        /// <param name=\"verbosity\">Level of detail to show in the log.</param>\n+        /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only '--tl:off' is supported to disable TerminalLogger.</param>\n+        public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)\n+        {\n+            (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+            return CreateTerminalOrConsoleLogger(verbosity, args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+        }\n+\n+        internal static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+        {\n+            string tlArg = args?.LastOrDefault(a => a.StartsWith(\"--tl:\", StringComparison.InvariantCultureIgnoreCase)) ?? string.Empty;",
              "author": {
                "login": "nohwnd"
              }
            },
            {
              "body": "That's not by the [book](https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-run), but you convinced me :D",
              "createdAt": "2025-02-07T14:45:25Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -328,6 +332,40 @@ protected WriteHandler WriteHandler\n \n         #region Methods\n \n+        /// <summary>\n+        /// Creates a Terminal logger if possible, or a Console logger.\n+        /// </summary>\n+        /// <param name=\"verbosity\">Level of detail to show in the log.</param>\n+        /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only '--tl:off' is supported to disable TerminalLogger.</param>\n+        public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)\n+        {\n+            (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+            return CreateTerminalOrConsoleLogger(verbosity, args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+        }\n+\n+        internal static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+        {\n+            string tlArg = args?.LastOrDefault(a => a.StartsWith(\"--tl:\", StringComparison.InvariantCultureIgnoreCase)) ?? string.Empty;",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "OK, I added support for more prefixes. And I returned `tl:on`, which I mistakenly removed.",
              "createdAt": "2025-02-07T14:57:39Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -328,6 +332,40 @@ protected WriteHandler WriteHandler\n \n         #region Methods\n \n+        /// <summary>\n+        /// Creates a Terminal logger if possible, or a Console logger.\n+        /// </summary>\n+        /// <param name=\"verbosity\">Level of detail to show in the log.</param>\n+        /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only '--tl:off' is supported to disable TerminalLogger.</param>\n+        public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)\n+        {\n+            (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+            return CreateTerminalOrConsoleLogger(verbosity, args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+        }\n+\n+        internal static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+        {\n+            string tlArg = args?.LastOrDefault(a => a.StartsWith(\"--tl:\", StringComparison.InvariantCultureIgnoreCase)) ?? string.Empty;",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think we need to support the long form too, which makes this complex enough that I lean to \"screw it use a regex\"\r\n\r\n```regex\r\n(?:/|-|--)(?:tl|terminallogger):(?'value'on|off)\r\n```",
              "createdAt": "2025-02-07T21:56:15Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -328,6 +332,45 @@ protected WriteHandler WriteHandler\n \n         #region Methods\n \n+        /// <summary>\n+        /// Creates a Terminal logger if possible, or a Console logger.\n+        /// </summary>\n+        /// <param name=\"verbosity\">Level of detail to show in the log.</param>\n+        /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only '--tl:off' and '--tl:on' are supported right now.</param>\n+        public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)\n+        {\n+            (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+            return CreateTerminalOrConsoleLogger(verbosity, args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+        }\n+\n+        internal static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+        {\n+            string tlArg = args?\n+                .LastOrDefault(a =>\n+                    a.StartsWith(\"/tl:\", StringComparison.InvariantCultureIgnoreCase) ||\n+                    a.StartsWith(\"-tl:\", StringComparison.InvariantCultureIgnoreCase) ||\n+                    a.StartsWith(\"--tl:\", StringComparison.InvariantCultureIgnoreCase)) ?? string.Empty;\n+\n+            bool isDisabled =\n+                tlArg.EndsWith(\"tl:on\", StringComparison.InvariantCultureIgnoreCase) ? false :\n+                tlArg.EndsWith(\"tl:off\", StringComparison.InvariantCultureIgnoreCase) ? true :",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why un-glob?",
              "createdAt": "2025-02-07T21:57:32Z",
              "path": "src/MSBuild/MSBuild.csproj",
              "diffHunk": "@@ -136,7 +136,6 @@\n     <Compile Include=\"CommandLineSwitchException.cs\" />\n     <Compile Include=\"..\\Shared\\CoreCLRAssemblyLoader.cs\" Condition=\"'$(TargetFrameworkIdentifier)' != '.NETFramework'\" />\n     <Compile Include=\"DistributedLoggerRecord.cs\" />\n-    <Compile Include=\"TerminalLogger\\*.cs\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Because Visual Studio :) I added it back.",
              "createdAt": "2025-02-20T10:42:25Z",
              "path": "src/MSBuild/MSBuild.csproj",
              "diffHunk": "@@ -136,7 +136,6 @@\n     <Compile Include=\"CommandLineSwitchException.cs\" />\n     <Compile Include=\"..\\Shared\\CoreCLRAssemblyLoader.cs\" Condition=\"'$(TargetFrameworkIdentifier)' != '.NETFramework'\" />\n     <Compile Include=\"DistributedLoggerRecord.cs\" />\n-    <Compile Include=\"TerminalLogger\\*.cs\" />",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm not sure I see why \"quiet\" implies \"don't make the spinner go\", can you elaborate on that a bit?",
              "createdAt": "2025-02-07T22:01:42Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -396,7 +403,7 @@ private void BuildStarted(object sender, BuildStartedEventArgs e)\n \n         _buildStartTime = e.Timestamp;\n \n-        if (Terminal.SupportsProgressReporting)\n+        if (Terminal.SupportsProgressReporting && Verbosity != LoggerVerbosity.Quiet)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Requested by @baronfel ",
              "createdAt": "2025-02-19T14:30:33Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -396,7 +403,7 @@ private void BuildStarted(object sender, BuildStartedEventArgs e)\n \n         _buildStartTime = e.Timestamp;\n \n-        if (Terminal.SupportsProgressReporting)\n+        if (Terminal.SupportsProgressReporting && Verbosity != LoggerVerbosity.Quiet)",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Exactly - users think of `--quiet` as `--silent` in other tools - meaning there should be no observable change at all if possible. In lieu of another explicit \"don't do progress/spinners/etc\" flag that should disable the spinner because it mangles the output.",
              "createdAt": "2025-02-21T15:31:20Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -396,7 +403,7 @@ private void BuildStarted(object sender, BuildStartedEventArgs e)\n \n         _buildStartTime = e.Timestamp;\n \n-        if (Terminal.SupportsProgressReporting)\n+        if (Terminal.SupportsProgressReporting && Verbosity != LoggerVerbosity.Quiet)",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`TestEnvironment` has helpers for this, can you switch to them?",
              "createdAt": "2025-02-07T22:02:45Z",
              "path": "src/Build.UnitTests/ConsoleLogger_Tests.cs",
              "diffHunk": "@@ -134,6 +134,32 @@ public ConsoleLoggerTest(ITestOutputHelper output)\n             _output = output;\n         }\n \n+        [Theory]\n+        [InlineData(null, false, false, \"\", nameof(ConsoleLogger))]\n+        [InlineData(null, true, false, \"\", nameof(ConsoleLogger))]\n+        [InlineData(null, false, true, \"\", nameof(ConsoleLogger))]\n+        [InlineData(null, true, true, \"off\", nameof(ConsoleLogger))]\n+        [InlineData(\"--tl:off\", true, true, \"\", nameof(ConsoleLogger))]\n+        [InlineData(null, true, true, \"\", \"TerminalLogger\")]\n+        [InlineData(\"-tl:on\", true, true, \"off\", \"TerminalLogger\")]\n+        public void CreateTerminalOrConsoleLogger_CreatesCorrectLoggerInstance(string argsString, bool supportsAnsi, bool outputIsScreen, string evnVariableValue, string expectedLoggerName)\n+        {\n+            string originalValue = Environment.GetEnvironmentVariable(\"MSBUILDTERMINALLOGGER\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It is surprising to me that we're not extracting the verbosity from the command line too. Should we?",
              "createdAt": "2025-02-07T22:03:57Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -328,6 +332,45 @@ protected WriteHandler WriteHandler\n \n         #region Methods\n \n+        /// <summary>\n+        /// Creates a Terminal logger if possible, or a Console logger.\n+        /// </summary>\n+        /// <param name=\"verbosity\">Level of detail to show in the log.</param>\n+        /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only '--tl:off' and '--tl:on' are supported right now.</param>\n+        public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This API was designed to be internal for the SDK, but you are right. Since we made it public, it makes sense not to mix explicit verbosity and command line arguments. Verbosity can be explicitly set via `ILogger.Verbosity` after creation if needed.",
              "createdAt": "2025-02-20T13:58:56Z",
              "path": "src/Build/Logging/ConsoleLogger.cs",
              "diffHunk": "@@ -328,6 +332,45 @@ protected WriteHandler WriteHandler\n \n         #region Methods\n \n+        /// <summary>\n+        /// Creates a Terminal logger if possible, or a Console logger.\n+        /// </summary>\n+        /// <param name=\"verbosity\">Level of detail to show in the log.</param>\n+        /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only '--tl:off' and '--tl:on' are supported right now.</param>\n+        public static ILogger CreateTerminalOrConsoleLogger(LoggerVerbosity verbosity, string[] args)",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "this is different than creating Terminal logger in Xmake \ud83d\ude29 - there it recognizes \"false\" and \"0\" as well. (it's a bit silly part of Xmake) https://github.com/dotnet/msbuild/blob/072c659ff4d49bdf70069cd36df6dc9e44719432/src/MSBuild/XMake.cs#L2966\r\n\r\nAlso could this code live in Traits?",
              "createdAt": "2025-02-21T15:29:15Z",
              "path": "src/Build/Logging/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -250,6 +229,72 @@ internal TerminalLogger(ITerminal terminal)\n         _manualRefresh = true;\n     }\n \n+    /// <summary>\n+    /// Private constructor invoked by static factory.\n+    /// </summary>\n+    internal TerminalLogger(LoggerVerbosity verbosity, uint? originalConsoleMode) : this()\n+    {\n+        Verbosity = verbosity;\n+        _originalConsoleMode = originalConsoleMode;\n+    }\n+\n+    /// <summary>\n+    /// Creates a Terminal logger if possible, or a Console logger.\n+    /// </summary>\n+    /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only 'tl|terminallogger' and 'v|verbosity' are supported right now.</param>\n+    public static ILogger CreateTerminalOrConsoleLogger(string[]? args = null)\n+    {\n+        (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+        return CreateTerminalOrConsoleLogger(args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+    }\n+\n+    internal static ILogger CreateTerminalOrConsoleLogger(string[]? args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+    {\n+        LoggerVerbosity verbosity = LoggerVerbosity.Normal;\n+        string tlArg = string.Empty;\n+        string? verbosityArg = string.Empty;\n+\n+        if (args != null)\n+        {\n+            string argsString = string.Join(\" \", args);\n+\n+            MatchCollection tlMatches = Regex.Matches(argsString, @\"(?:/|-|--)(?:tl|terminallogger):(?'value'on|off)\", RegexOptions.IgnoreCase);\n+            tlArg = tlMatches.OfType<Match>().LastOrDefault()?.Groups[\"value\"].Value ?? string.Empty;\n+\n+            MatchCollection verbosityMatches = Regex.Matches(argsString, @\"(?:/|-|--)(?:v|verbosity):(?'value'\\w+)\", RegexOptions.IgnoreCase);\n+            verbosityArg = verbosityMatches.OfType<Match>().LastOrDefault()?.Groups[\"value\"].Value;\n+        }\n+\n+        verbosityArg = verbosityArg?.ToLowerInvariant() switch\n+        {\n+            \"q\" => \"quiet\",\n+            \"m\" => \"minimal\",\n+            \"n\" => \"normal\",\n+            \"d\" => \"detailed\",\n+            \"diag\" => \"diagnostic\",\n+            _ => verbosityArg,\n+        };\n+\n+        if (Enum.TryParse(verbosityArg, true, out LoggerVerbosity parsedVerbosity))\n+        {\n+            verbosity = parsedVerbosity;\n+        }\n+\n+        bool isDisabled =\n+            tlArg.Equals(\"on\", StringComparison.InvariantCultureIgnoreCase) ? false :\n+            tlArg.Equals(\"off\", StringComparison.InvariantCultureIgnoreCase) ? true :\n+            (Environment.GetEnvironmentVariable(\"MSBUILDTERMINALLOGGER\") ?? string.Empty).Equals(\"off\", StringComparison.InvariantCultureIgnoreCase);",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "I'm probably blind, but the `NormalizeIntoBooleanValues()` is testing the variable for `on` and `off` values :)\r\n\r\nI want to use Traits eventually, but there is a set of tasks that I want to resolve first.\r\n- We need to place all our resources to single assembly\r\n- Then we can get rid of shared sources from MSBuild and use InternalsVisibleTo without type conflicts\r\n- Then we can move the CommandLineSwitches* to Microsoft.Build\r\n- Then we can move the arg parsing logic from XMake to this project and invoke the factory from XMake",
              "createdAt": "2025-02-21T16:18:01Z",
              "path": "src/Build/Logging/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -250,6 +229,72 @@ internal TerminalLogger(ITerminal terminal)\n         _manualRefresh = true;\n     }\n \n+    /// <summary>\n+    /// Private constructor invoked by static factory.\n+    /// </summary>\n+    internal TerminalLogger(LoggerVerbosity verbosity, uint? originalConsoleMode) : this()\n+    {\n+        Verbosity = verbosity;\n+        _originalConsoleMode = originalConsoleMode;\n+    }\n+\n+    /// <summary>\n+    /// Creates a Terminal logger if possible, or a Console logger.\n+    /// </summary>\n+    /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only 'tl|terminallogger' and 'v|verbosity' are supported right now.</param>\n+    public static ILogger CreateTerminalOrConsoleLogger(string[]? args = null)\n+    {\n+        (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+        return CreateTerminalOrConsoleLogger(args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+    }\n+\n+    internal static ILogger CreateTerminalOrConsoleLogger(string[]? args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+    {\n+        LoggerVerbosity verbosity = LoggerVerbosity.Normal;\n+        string tlArg = string.Empty;\n+        string? verbosityArg = string.Empty;\n+\n+        if (args != null)\n+        {\n+            string argsString = string.Join(\" \", args);\n+\n+            MatchCollection tlMatches = Regex.Matches(argsString, @\"(?:/|-|--)(?:tl|terminallogger):(?'value'on|off)\", RegexOptions.IgnoreCase);\n+            tlArg = tlMatches.OfType<Match>().LastOrDefault()?.Groups[\"value\"].Value ?? string.Empty;\n+\n+            MatchCollection verbosityMatches = Regex.Matches(argsString, @\"(?:/|-|--)(?:v|verbosity):(?'value'\\w+)\", RegexOptions.IgnoreCase);\n+            verbosityArg = verbosityMatches.OfType<Match>().LastOrDefault()?.Groups[\"value\"].Value;\n+        }\n+\n+        verbosityArg = verbosityArg?.ToLowerInvariant() switch\n+        {\n+            \"q\" => \"quiet\",\n+            \"m\" => \"minimal\",\n+            \"n\" => \"normal\",\n+            \"d\" => \"detailed\",\n+            \"diag\" => \"diagnostic\",\n+            _ => verbosityArg,\n+        };\n+\n+        if (Enum.TryParse(verbosityArg, true, out LoggerVerbosity parsedVerbosity))\n+        {\n+            verbosity = parsedVerbosity;\n+        }\n+\n+        bool isDisabled =\n+            tlArg.Equals(\"on\", StringComparison.InvariantCultureIgnoreCase) ? false :\n+            tlArg.Equals(\"off\", StringComparison.InvariantCultureIgnoreCase) ? true :\n+            (Environment.GetEnvironmentVariable(\"MSBUILDTERMINALLOGGER\") ?? string.Empty).Equals(\"off\", StringComparison.InvariantCultureIgnoreCase);",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "oops I meant to link the whole method processing tl args https://github.com/dotnet/msbuild/blob/072c659ff4d49bdf70069cd36df6dc9e44719432/src/MSBuild/XMake.cs#L2826 , normalize is just one part of it\r\n\r\n\r\nthe logic is basically:\r\n1. try getting -tl: value from console or from the env var\r\n2. convert \"on\" to \"true\", \"off\" to \"false\"\r\n3. parse a boolean from a string -> the actual info whether to use terminal logger\r\n\r\n(at this point I am confused what it'll do for 0 and 1, but for true and false it'll definitely set the tl on or off)",
              "createdAt": "2025-02-21T16:48:31Z",
              "path": "src/Build/Logging/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -250,6 +229,72 @@ internal TerminalLogger(ITerminal terminal)\n         _manualRefresh = true;\n     }\n \n+    /// <summary>\n+    /// Private constructor invoked by static factory.\n+    /// </summary>\n+    internal TerminalLogger(LoggerVerbosity verbosity, uint? originalConsoleMode) : this()\n+    {\n+        Verbosity = verbosity;\n+        _originalConsoleMode = originalConsoleMode;\n+    }\n+\n+    /// <summary>\n+    /// Creates a Terminal logger if possible, or a Console logger.\n+    /// </summary>\n+    /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only 'tl|terminallogger' and 'v|verbosity' are supported right now.</param>\n+    public static ILogger CreateTerminalOrConsoleLogger(string[]? args = null)\n+    {\n+        (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+        return CreateTerminalOrConsoleLogger(args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+    }\n+\n+    internal static ILogger CreateTerminalOrConsoleLogger(string[]? args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+    {\n+        LoggerVerbosity verbosity = LoggerVerbosity.Normal;\n+        string tlArg = string.Empty;\n+        string? verbosityArg = string.Empty;\n+\n+        if (args != null)\n+        {\n+            string argsString = string.Join(\" \", args);\n+\n+            MatchCollection tlMatches = Regex.Matches(argsString, @\"(?:/|-|--)(?:tl|terminallogger):(?'value'on|off)\", RegexOptions.IgnoreCase);\n+            tlArg = tlMatches.OfType<Match>().LastOrDefault()?.Groups[\"value\"].Value ?? string.Empty;\n+\n+            MatchCollection verbosityMatches = Regex.Matches(argsString, @\"(?:/|-|--)(?:v|verbosity):(?'value'\\w+)\", RegexOptions.IgnoreCase);\n+            verbosityArg = verbosityMatches.OfType<Match>().LastOrDefault()?.Groups[\"value\"].Value;\n+        }\n+\n+        verbosityArg = verbosityArg?.ToLowerInvariant() switch\n+        {\n+            \"q\" => \"quiet\",\n+            \"m\" => \"minimal\",\n+            \"n\" => \"normal\",\n+            \"d\" => \"detailed\",\n+            \"diag\" => \"diagnostic\",\n+            _ => verbosityArg,\n+        };\n+\n+        if (Enum.TryParse(verbosityArg, true, out LoggerVerbosity parsedVerbosity))\n+        {\n+            verbosity = parsedVerbosity;\n+        }\n+\n+        bool isDisabled =\n+            tlArg.Equals(\"on\", StringComparison.InvariantCultureIgnoreCase) ? false :\n+            tlArg.Equals(\"off\", StringComparison.InvariantCultureIgnoreCase) ? true :\n+            (Environment.GetEnvironmentVariable(\"MSBUILDTERMINALLOGGER\") ?? string.Empty).Equals(\"off\", StringComparison.InvariantCultureIgnoreCase);",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "Yes, it recognizes `true` and `false` values, although I'm not sure if it's intentional :) With all these local functions, it's difficult to read the code sequentially... Anyway, I added support for `false` value and I will switch to `Traits` in the second phase. I don't know if we still need to support `MSBUILDLIVELOGGER` variable in .NET 10.",
              "createdAt": "2025-02-24T11:52:10Z",
              "path": "src/Build/Logging/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -250,6 +229,72 @@ internal TerminalLogger(ITerminal terminal)\n         _manualRefresh = true;\n     }\n \n+    /// <summary>\n+    /// Private constructor invoked by static factory.\n+    /// </summary>\n+    internal TerminalLogger(LoggerVerbosity verbosity, uint? originalConsoleMode) : this()\n+    {\n+        Verbosity = verbosity;\n+        _originalConsoleMode = originalConsoleMode;\n+    }\n+\n+    /// <summary>\n+    /// Creates a Terminal logger if possible, or a Console logger.\n+    /// </summary>\n+    /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only 'tl|terminallogger' and 'v|verbosity' are supported right now.</param>\n+    public static ILogger CreateTerminalOrConsoleLogger(string[]? args = null)\n+    {\n+        (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+        return CreateTerminalOrConsoleLogger(args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+    }\n+\n+    internal static ILogger CreateTerminalOrConsoleLogger(string[]? args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+    {\n+        LoggerVerbosity verbosity = LoggerVerbosity.Normal;\n+        string tlArg = string.Empty;\n+        string? verbosityArg = string.Empty;\n+\n+        if (args != null)\n+        {\n+            string argsString = string.Join(\" \", args);\n+\n+            MatchCollection tlMatches = Regex.Matches(argsString, @\"(?:/|-|--)(?:tl|terminallogger):(?'value'on|off)\", RegexOptions.IgnoreCase);\n+            tlArg = tlMatches.OfType<Match>().LastOrDefault()?.Groups[\"value\"].Value ?? string.Empty;\n+\n+            MatchCollection verbosityMatches = Regex.Matches(argsString, @\"(?:/|-|--)(?:v|verbosity):(?'value'\\w+)\", RegexOptions.IgnoreCase);\n+            verbosityArg = verbosityMatches.OfType<Match>().LastOrDefault()?.Groups[\"value\"].Value;\n+        }\n+\n+        verbosityArg = verbosityArg?.ToLowerInvariant() switch\n+        {\n+            \"q\" => \"quiet\",\n+            \"m\" => \"minimal\",\n+            \"n\" => \"normal\",\n+            \"d\" => \"detailed\",\n+            \"diag\" => \"diagnostic\",\n+            _ => verbosityArg,\n+        };\n+\n+        if (Enum.TryParse(verbosityArg, true, out LoggerVerbosity parsedVerbosity))\n+        {\n+            verbosity = parsedVerbosity;\n+        }\n+\n+        bool isDisabled =\n+            tlArg.Equals(\"on\", StringComparison.InvariantCultureIgnoreCase) ? false :\n+            tlArg.Equals(\"off\", StringComparison.InvariantCultureIgnoreCase) ? true :\n+            (Environment.GetEnvironmentVariable(\"MSBUILDTERMINALLOGGER\") ?? string.Empty).Equals(\"off\", StringComparison.InvariantCultureIgnoreCase);",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is the namespace change required? It feels slightly noisy to me, but I'm not saying to back it out :)",
              "createdAt": "2025-02-24T15:22:36Z",
              "path": "src/Build/Logging/TerminalLogger/ITerminal.cs",
              "diffHunk": "@@ -2,8 +2,9 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+using Microsoft.Build.Framework.Logging;\n \n-namespace Microsoft.Build.Logging.TerminalLogger;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I changed the namespace of the public TL type to follow the existing pattern for other public loggers. Consequently, it seemed appropriate to apply this change to all TL-related types in this project. Additionally, having a type with the same name as the last part of the namespace caused confusion on the consumer side, requiring us to use aliases in our code. While this may be a bit of a hassle for the PR review, it is ultimately for the greater good :) I also renamed some supporting types to make it clear where they belong just by their names. The `Project` type, now renamed to `TerminalProjectInfo`, had a very generic name that caused type name conflicts.",
              "createdAt": "2025-02-24T16:26:14Z",
              "path": "src/Build/Logging/TerminalLogger/ITerminal.cs",
              "diffHunk": "@@ -2,8 +2,9 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+using Microsoft.Build.Framework.Logging;\n \n-namespace Microsoft.Build.Logging.TerminalLogger;",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Yeah as I went through it made more and more sense. :shipit:",
              "createdAt": "2025-02-24T16:33:10Z",
              "path": "src/Build/Logging/TerminalLogger/ITerminal.cs",
              "diffHunk": "@@ -2,8 +2,9 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n+using Microsoft.Build.Framework.Logging;\n \n-namespace Microsoft.Build.Logging.TerminalLogger;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "My understanding is that the moved strings should be immediately relocalized in their new home without much effort so this looks fine to me.",
              "createdAt": "2025-02-24T15:29:09Z",
              "path": "src/Build/Resources/xlf/Strings.cs.xlf",
              "diffHunk": "",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please file a bug to follow these up with a static/generated regex.",
              "createdAt": "2025-02-24T16:12:29Z",
              "path": "src/Build/Logging/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -250,6 +229,73 @@ internal TerminalLogger(ITerminal terminal)\n         _manualRefresh = true;\n     }\n \n+    /// <summary>\n+    /// Private constructor invoked by static factory.\n+    /// </summary>\n+    internal TerminalLogger(LoggerVerbosity verbosity, uint? originalConsoleMode) : this()\n+    {\n+        Verbosity = verbosity;\n+        _originalConsoleMode = originalConsoleMode;\n+    }\n+\n+    /// <summary>\n+    /// Creates a Terminal logger if possible, or a Console logger.\n+    /// </summary>\n+    /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only 'tl|terminallogger' and 'v|verbosity' are supported right now.</param>\n+    public static ILogger CreateTerminalOrConsoleLogger(string[]? args = null)\n+    {\n+        (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+        return CreateTerminalOrConsoleLogger(args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+    }\n+\n+    internal static ILogger CreateTerminalOrConsoleLogger(string[]? args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+    {\n+        LoggerVerbosity verbosity = LoggerVerbosity.Normal;\n+        string tlEnvVariable = Environment.GetEnvironmentVariable(\"MSBUILDTERMINALLOGGER\") ?? string.Empty;\n+        string tlArg = string.Empty;\n+        string? verbosityArg = string.Empty;\n+\n+        if (args != null)\n+        {\n+            string argsString = string.Join(\" \", args);\n+\n+            MatchCollection tlMatches = Regex.Matches(argsString, @\"(?:/|-|--)(?:tl|terminallogger):(?'value'on|off)\", RegexOptions.IgnoreCase);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "We want to support all switches (+RSP files) and use the already existing logic, so the args processing here is temporary anyway. This is not a hot path (one call per build), so the perf hit is IMO negligible.",
              "createdAt": "2025-02-24T16:17:30Z",
              "path": "src/Build/Logging/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -250,6 +229,73 @@ internal TerminalLogger(ITerminal terminal)\n         _manualRefresh = true;\n     }\n \n+    /// <summary>\n+    /// Private constructor invoked by static factory.\n+    /// </summary>\n+    internal TerminalLogger(LoggerVerbosity verbosity, uint? originalConsoleMode) : this()\n+    {\n+        Verbosity = verbosity;\n+        _originalConsoleMode = originalConsoleMode;\n+    }\n+\n+    /// <summary>\n+    /// Creates a Terminal logger if possible, or a Console logger.\n+    /// </summary>\n+    /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only 'tl|terminallogger' and 'v|verbosity' are supported right now.</param>\n+    public static ILogger CreateTerminalOrConsoleLogger(string[]? args = null)\n+    {\n+        (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+        return CreateTerminalOrConsoleLogger(args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+    }\n+\n+    internal static ILogger CreateTerminalOrConsoleLogger(string[]? args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+    {\n+        LoggerVerbosity verbosity = LoggerVerbosity.Normal;\n+        string tlEnvVariable = Environment.GetEnvironmentVariable(\"MSBUILDTERMINALLOGGER\") ?? string.Empty;\n+        string tlArg = string.Empty;\n+        string? verbosityArg = string.Empty;\n+\n+        if (args != null)\n+        {\n+            string argsString = string.Join(\" \", args);\n+\n+            MatchCollection tlMatches = Regex.Matches(argsString, @\"(?:/|-|--)(?:tl|terminallogger):(?'value'on|off)\", RegexOptions.IgnoreCase);",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "I created a tracking issue: #11486",
              "createdAt": "2025-02-24T16:37:40Z",
              "path": "src/Build/Logging/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -250,6 +229,73 @@ internal TerminalLogger(ITerminal terminal)\n         _manualRefresh = true;\n     }\n \n+    /// <summary>\n+    /// Private constructor invoked by static factory.\n+    /// </summary>\n+    internal TerminalLogger(LoggerVerbosity verbosity, uint? originalConsoleMode) : this()\n+    {\n+        Verbosity = verbosity;\n+        _originalConsoleMode = originalConsoleMode;\n+    }\n+\n+    /// <summary>\n+    /// Creates a Terminal logger if possible, or a Console logger.\n+    /// </summary>\n+    /// <param name=\"args\">Command line arguments for the logger configuration. Currently, only 'tl|terminallogger' and 'v|verbosity' are supported right now.</param>\n+    public static ILogger CreateTerminalOrConsoleLogger(string[]? args = null)\n+    {\n+        (bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes();\n+\n+        return CreateTerminalOrConsoleLogger(args, supportsAnsi, outputIsScreen, originalConsoleMode);\n+    }\n+\n+    internal static ILogger CreateTerminalOrConsoleLogger(string[]? args, bool supportsAnsi, bool outputIsScreen, uint? originalConsoleMode)\n+    {\n+        LoggerVerbosity verbosity = LoggerVerbosity.Normal;\n+        string tlEnvVariable = Environment.GetEnvironmentVariable(\"MSBUILDTERMINALLOGGER\") ?? string.Empty;\n+        string tlArg = string.Empty;\n+        string? verbosityArg = string.Empty;\n+\n+        if (args != null)\n+        {\n+            string argsString = string.Join(\" \", args);\n+\n+            MatchCollection tlMatches = Regex.Matches(argsString, @\"(?:/|-|--)(?:tl|terminallogger):(?'value'on|off)\", RegexOptions.IgnoreCase);",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}