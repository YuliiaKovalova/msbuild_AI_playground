{
  "number": 9966,
  "title": "Support cancellation in GetFileHash and VerifyFileHash",
  "body": "",
  "state": "MERGED",
  "createdAt": "2024-04-02T18:28:33Z",
  "updatedAt": "2024-04-30T14:40:39Z",
  "closedAt": "2024-04-29T07:29:03Z",
  "mergedAt": "2024-04-29T07:29:03Z",
  "additions": 28,
  "deletions": 6,
  "changedFiles": 2,
  "headRefName": "cancel-file-hash",
  "isDraft": false,
  "author": {
    "login": "hickford"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f820ede88f55633fdfb284f90d009e7d9d687dc2",
          "message": "Support cancellation in GetFileHash and VerifyFileHash",
          "committedDate": "2024-04-02T18:26:51Z",
          "author": {
            "name": "M Hickford",
            "email": "mirth.hickford@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: `CancellationTokenSource` implements `IDisposable` and should have its `Dispose` called when we're done with it. Non-blocking comment as we have this pattern in many other tasks and it's not really causing issues. There's a chance we will want to address this as we harden the code against leaks, though.",
              "createdAt": "2024-04-05T07:36:36Z",
              "path": "src/Tasks/FileIO/GetFileHash.cs",
              "diffHunk": "@@ -115,6 +118,13 @@ public override bool Execute()\n             return !Log.HasLoggedErrors;\n         }\n \n+        private readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I leave that to you.",
              "createdAt": "2024-04-25T20:03:33Z",
              "path": "src/Tasks/FileIO/GetFileHash.cs",
              "diffHunk": "@@ -115,6 +118,13 @@ public override bool Execute()\n             return !Log.HasLoggedErrors;\n         }\n \n+        private readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();",
              "author": {
                "login": "hickford"
              }
            }
          ]
        }
      }
    ]
  }
}