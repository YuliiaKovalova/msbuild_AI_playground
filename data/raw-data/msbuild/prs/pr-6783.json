{
  "number": 6783,
  "title": "Allow an Override Flag in UsingTasks",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/5541\r\n\r\n### Context\r\nWhen we define multiple usingtasks like so:\r\n```xml\r\n  <UsingTask TaskName=\"VSCTCompiler\" AssemblyFile=\"$(VsSDKAssemblyFile)\" />\r\n  <UsingTask TaskName=\"VSCTCompiler\" AssemblyFile=\"$(VsSDKAssemblyFile)\" Architecture=\"x86\" />\r\n```\r\n\r\nand call the task without specifying `Architecture`, the architecture-specific `UsingTask` should be returned when MSBuild searches for the task. Currently, MSBuild prefers the most \"exact match\".\r\n\r\nThis change allows the following:\r\n```xml\r\n  <UsingTask TaskName=\"VSCTCompiler\" AssemblyFile=\"$(VsSDKAssemblyFile)\" />\r\n  <UsingTask TaskName=\"VSCTCompiler\" AssemblyFile=\"$(VsSDKAssemblyFile)\" Override=\"true\" Architecture=\"x86\" />\r\n```\r\nUsers can specify `Override=\"true\"` in a `UsingTask` element. This will modify the TaskRegistry to _always return that task registration_ when attempting to call that task.\r\n\r\n### Changes Made\r\nThe TaskRegistry will return the first usingtask marked with `Override=\"true\"` when searching for a task.\r\n\r\n### Testing\r\nA test showing that:\r\n\r\n- Multiple usingtasks overriding the same task will log MSB4275\r\n- If a usingtask overrides, it is preferred over other usingtasks.\r\n\r\n### Notes\r\nDon't review commit by commit.\r\n\r\n# Expected behaviors\r\n### If multiple overrides override a task with the _exact same name_ (fully qualified), MSB4275 will be logged\r\n### Prioritization order of usingtasks:\r\n1. Project-level usingtask override\r\n2. *.tasks/*.overridetasks file\r\n3. UsingTask defined elsewhere",
  "state": "MERGED",
  "createdAt": "2021-08-23T23:20:19Z",
  "updatedAt": "2022-02-23T13:20:55Z",
  "closedAt": "2022-02-23T13:20:55Z",
  "mergedAt": "2022-02-23T13:20:54Z",
  "additions": 330,
  "deletions": 10,
  "changedFiles": 22,
  "headRefName": "taskregistry-firstdefined",
  "isDraft": false,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d464a0ea893312c915f3b0651af20f94f5694b91",
          "message": "Code cleanup, only TryGetValue when looking for an exact match. When not looking for an exact match, taskregistry will now return the first-defined usingtask",
          "committedDate": "2021-11-23T22:35:34Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "69e06fb04fbf777703ea3d5c3b09a85fad5cdd8f",
          "message": "WIP - Prioritize task entries that define Architecture",
          "committedDate": "2021-11-23T22:35:35Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a87d24372ba5f1c99c336b90be359e9f8d643063",
          "message": "Revert \"WIP - Prioritize task entries that define Architecture\"\n\nThis reverts commit 7f34e08a16fe3aae1e8908156eabfc06b95a4da3.",
          "committedDate": "2021-11-23T22:35:35Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "47460554513cb7c062ee0836e09867c51ec9a40d",
          "message": "WIP - Add 'important' usingtasks to a collection, try to draw from that collection when pulling tasks from the registry",
          "committedDate": "2021-11-23T22:35:36Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2066bba8505c86d06a63ee5f4c9fc131b377c084",
          "message": "Return new structure to a single item to prioritize the first-defined usingtask with architecture metadata",
          "committedDate": "2021-11-23T22:35:36Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a9eb2ae366da8b0c69990a6630a61087816400b6",
          "message": "Add specific tests that check prioritization of UsingTasks when Architecture is defined",
          "committedDate": "2021-11-23T22:35:38Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dde67afc3bbc04644ac369cd4d0c099ad313cceb",
          "message": "Add boolean to help with unit tests",
          "committedDate": "2021-11-23T22:35:40Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2cb88b0033c091ea5ddd72df0b83c06ab533930c",
          "message": "Revert to previous exact-match logic",
          "committedDate": "2021-11-23T22:35:41Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5306bdc5151acc95d62e68362ce2cc57b7e635bc",
          "message": "WIP - Work around architecture-check for tests specifically",
          "committedDate": "2021-11-23T22:35:42Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "809d6a4152bd2b72c16d55f274850b4dfdd9f2bf",
          "message": "Allow Override parameter on usingtask",
          "committedDate": "2021-11-23T22:35:43Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "533398bb1528861eebe22bd4e1b39966629d9e36",
          "message": "Add properties for supporting Override as a parameter. Extract Override when extracting Runtime and Architecture",
          "committedDate": "2021-11-23T22:35:44Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bf2dcdfa16c537875fd88551375b0794438c6a2a",
          "message": "Add ref files",
          "committedDate": "2021-11-23T22:37:37Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "01876a043c816c53997bb88c1dd137106f9de1da",
          "message": "Overridden tasks get prioritized now",
          "committedDate": "2021-11-23T22:37:42Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0fd46ae0f55f6c07a46f9acc46a5cb0b1f0c0bbd",
          "message": "Revert \"Add boolean to help with unit tests\"\n\nThis reverts commit 11a5e1d8516028b0ce64109b1642d1dbce297833.",
          "committedDate": "2021-11-23T22:37:42Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e28ac84c4dca30bc8706f470d6e16089c85d7cb3",
          "message": "Remove new boolean",
          "committedDate": "2021-11-23T22:37:43Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c987f002e1fcc5fd46572e791ad4adfb3c233604",
          "message": "Modify tests",
          "committedDate": "2021-11-23T22:37:43Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eeafb739316c6063802c9e4889b767dae861b542",
          "message": "AlwaysWins test should check x64",
          "committedDate": "2021-11-23T22:37:43Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "732c7e35eab3e267e250950bbe444ddb13dd12fc",
          "message": "Add early-return logic down one layer. Prevent multiple overrides.",
          "committedDate": "2021-11-23T22:37:44Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8e848a170b8cf9962a6926e2f64e786321d3fb1b",
          "message": "Remove change in directory.build.props",
          "committedDate": "2021-11-23T22:37:44Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "382461893aecc69e009d1e5ec7e78a45fbf4a8d4",
          "message": "Revert \"Modify tests\"\n\nThis reverts commit 04cd6fab3512373bebde86dcd5b3cc745c8ebc90.",
          "committedDate": "2021-11-23T22:37:44Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6a2add64c93ce7d11beb478436bcf4ee945a5fdc",
          "message": "Undo unit test changes",
          "committedDate": "2021-11-23T22:37:45Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cd2fc9ba4c886a5526678c5f11313701d5bb2d4e",
          "message": "Theorize up unit test",
          "committedDate": "2021-11-23T22:37:45Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "37cbf8ab7826e5be9eafa9c38f0b5b90925c0644",
          "message": "Clean up removedFromCache bool",
          "committedDate": "2021-11-23T22:37:46Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7fb9dc956815af66eb53d0daf85a481b6c4bf337",
          "message": "Log a message or warning when registering an override",
          "committedDate": "2021-11-23T22:37:47Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0b47f5755abc08c47f6afbc445e6b896f73f0d6b",
          "message": "V1 log a message when an overridden task is chosen",
          "committedDate": "2021-11-23T22:37:47Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f03ca28bebd59c68fda2429d2330479575b73c24",
          "message": "V2 Log a low importance message when an override usingtask is chosen",
          "committedDate": "2021-11-23T22:37:49Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4f9bcf61ce2428dffc0591398885a22e04b267f7",
          "message": "Formatting improvements",
          "committedDate": "2021-11-23T22:37:50Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fd2a4dec8a05b9cb471669d4a54851e7cd3bd238",
          "message": "Finalize MSB4276 test.",
          "committedDate": "2021-11-23T22:37:51Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e74b8b1f260b17bfe62a39c585d0bf235c2a078c",
          "message": "Use ValidBooleanTrue when checking Override. Also make ValidBooleanTrue internal",
          "committedDate": "2021-11-23T22:37:52Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aa11c51dfbb0d4ecdcc5495fe090461a7123a512",
          "message": "Add Override & OverrideLocation to the public API",
          "committedDate": "2021-11-24T19:12:43Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fbcbc9818a9efcf166f3dae88a879292701020d9",
          "message": "Log an error instead of a warning when duplicate overrides are created",
          "committedDate": "2021-11-24T19:16:46Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a8aa234097468905beea639611f306376bf4deb0",
          "message": "Remove ref file",
          "committedDate": "2021-12-06T23:47:57Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c167c0b6e1753bf21765dd2d6cfc1b783500d011",
          "message": "Remove netstandard ref file",
          "committedDate": "2021-12-06T23:54:41Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2b6fbb08fbf02a849bae16b0fb100390c26846e4",
          "message": "Remove comment logging when picking an overridden task. Decrement msb error code.",
          "committedDate": "2021-12-07T01:06:07Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e3e4fd78d1e31e6eea79aa56366d293de474b1d5",
          "message": "Account for decremented error code in test.",
          "committedDate": "2021-12-08T21:18:54Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "304d0bb2cb9a35ac48a7600c52ee4aa97a67b95e",
          "message": "Finalize task lookup logic",
          "committedDate": "2021-12-09T00:16:28Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4976a816a43f4435e3f8368d6fc58e080fb1d3d5",
          "message": "PR Feedback. Code & comment cleanup",
          "committedDate": "2022-01-12T00:03:01Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "60c65ab68b3da2aea23825e80beffbfccf499888",
          "message": "Fix CA1825",
          "committedDate": "2022-01-12T00:24:09Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2134e290682900364ed2724cf387eda888e58dca",
          "message": "Merge upstream/main",
          "committedDate": "2022-01-31T19:00:02Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6c860e901ebfa43c3431f1378e53218f265230c2",
          "message": "Fix shipped API for analyzers",
          "committedDate": "2022-01-31T19:40:22Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f6f96daa1263fa8e78189456d2ecc52340eaa956",
          "message": "Log where the override usingtask was created",
          "committedDate": "2022-02-10T23:28:10Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5d9c246dfd05523ef9bd19a21c6afe0a983632aa",
          "message": "Add resource update",
          "committedDate": "2022-02-10T23:49:28Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7058577a15910677778417ef8b976c5bc66410b3",
          "message": "Merge branch 'main' into taskregistry-firstdefined",
          "committedDate": "2022-02-16T17:10:30Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Thinking out loud, is #5541 more about when a task has `Architecture` defined? Maybe we can add a check that prioritizes the usingtask that has `Architecture` (and any other \"high priority\" attributes) defined when trying to find the task from the registry?",
        "createdAt": "2021-08-23T23:35:13Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Thinking out loud, is #5541 more about when a task has `Architecture` defined?\r\n\r\nI think so; the question is \"given an old poorly-annotated x86 task + target buried in a NuGet package or old SDK or something, is there something a user project can do to fix the build?\" With other things (like targets or properties or items) you can override behavior if you can get the ordering right. But here you can't.\r\n\r\n> Maybe we can add a check that prioritizes the usingtask that has `Architecture` (and any other \"high priority\" attributes) defined when trying to find the task from the registry?\r\n\r\nI think so? Architecture is the only one we care about right now, maybe someday we'll want core/framework.",
        "createdAt": "2021-08-24T03:08:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Current thought for this PR is to have some Dictionary containing <Name of task that has an Architecture-specific usingtask, The registration record for that task>. And I'll short-circuit the task lookup method when the task we're looking for happens to have an architecture-specific version.",
        "createdAt": "2021-08-31T19:27:00Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "NTS: I didn't consider there potentially being multiple usingtasks that define Architecture but I haven't gotten to the selection process for preferred usingtasks yet. GenerateResource so far has multiple usingtasks.",
        "createdAt": "2021-08-31T22:08:11Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> NTS: I didn't consider there potentially being multiple usingtasks that define Architecture but I haven't gotten to the selection process for preferred usingtasks yet. GenerateResource so far has multiple usingtasks.\r\n\r\nFrom standup today, if multiple UsingTasks define `Architecture`, first one wins.",
        "createdAt": "2021-09-01T18:01:48Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "NTS: But what about different tasks with the same name? Might need to check the dll its coming from as well.",
        "createdAt": "2021-09-01T18:51:57Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Because this will be modifying behavior of `UsingTasks`, we should update https://docs.microsoft.com/en-us/visualstudio/msbuild/usingtask-element-msbuild?view=vs-2019 when this merges.",
        "createdAt": "2021-09-01T23:49:39Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "NTS: Need to modify tests in such a way that account for _any_ usingtask with Architecture defined is prioritized. The problem is _many_ tests check for Architecture/Runtime when doing their tests. Might be able to get away without the bool \"hack\".",
        "createdAt": "2021-09-02T01:44:19Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Notes after chatting with @rainersigwald\r\n\r\nKeep in mind that we'll want to generalize this for `Runtime` as a parameter as well.\r\n\r\nThe arch/runtime should match the current arch/runtime.\r\n\r\nFinal thoughts we came to: A usingtask should specify some `Override=\"true\"` to opt into this. If that's the case, it should override ANY call to a task with that name. **Even if there are two tasks with the same name from two separate assemblies.** At that point a user can call `Namespace.Class.Foo` to call the specific task they want.\r\n\r\nWe were looking at a project with the following usingtasks:\r\n\r\n```xml\r\n  \r\n<UsingTask TaskName=\"Foo\" AssemblyFile=\"$(Outdir)task.dll\" Architecture=\"x86\" />\r\n<UsingTask TaskName=\"Foo\" AssemblyFile=\"$(Outdir)task.dll\"/>\r\n<UsingTask TaskName=\"Foo\" AssemblyFile=\"$(Outdir)task234.dll\"/>\r\n<!-- Problem: If Foo is called, the second declaration here will be \r\n       found on \"Exact\" match before fuzzy search happens. -->\r\n\r\n  <Target Name=\"Foo\" AfterTargets=\"Build\">\r\n    <Foo/>\r\n  </Target>\r\n\r\n```\r\n\r\nThe first UsingTask will be stored in a dictionary of <(TaskName, TaskIdentity), List<Assemblies>>.\r\n\r\nHigh level ordering of relevant functions when finding a task with a given name:\r\n\r\n- FindTaskInRegistry <- First attempts exact match then fuzzy\r\n\t- GetRegisteredTask\r\n\t\t- GetTaskRegistrationRecord\r\n\t\t\t- // If fuzzy match\r\n\t\t\t\t- GetRelevantRegistrations <- Returns Dictionary<TaskIdentity, List<RegisteredTaskRecord>>\r\n\t\t\t\t\t- for each registration\r\n\t\t\t\t\t\t- GetMatchingRegistration <- Finds the **first partial match**\r\n\r\nWe're thinking the bulk of the change should be made in `GetRelevantRegistrations` or `RegisterTask`.\r\n\r\nOptions if we modify GetRelevantRegistrations:\r\n- Sort usingtasks based on this Override flag, always return that one.\r\n- Store tasks marked as Override in a separate collection, short circuit this method if the task being searched for has an `Override` usingtask defined.\r\n\r\nOptions if we modify RegisterTask:\r\n- If some task `Foo` has `Override` specified, delete or modify existing entries of the `Foo` task to specifically use this usingtask.",
        "createdAt": "2021-11-02T21:17:32Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Informational level message you mean? I think \"Override\" is clear enough that we shouldn't give a warning.",
        "createdAt": "2021-11-15T18:20:15Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Yeah, an informational level message is the correct term.",
        "createdAt": "2021-11-15T18:24:10Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> would a user ever want to know about this decision being made? if so, should there be a reason why the decision was made? e.g a OverrideReason attribute where inline doc could be added, so we could add a MS1000000: Task 'TaskName' from assembly 'AssemblyName' was chosen instead of 'other task options' because of 'OverrideReason' informational-level warning.\r\n\r\nA message sounds reasonable when registering an overridden task. Related to another comment in this thread, should we log a warning when multiple usingtasks are marked as `Override=true` (with the same task name)?",
        "createdAt": "2021-11-18T21:15:05Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> \r\n> \r\n> > would a user ever want to know about this decision being made? if so, should there be a reason why the decision was made? e.g a OverrideReason attribute where inline doc could be added, so we could add a MS1000000: Task 'TaskName' from assembly 'AssemblyName' was chosen instead of 'other task options' because of 'OverrideReason' informational-level warning.\r\n> \r\n> A message sounds reasonable when registering an overridden task. Related to another comment in this thread, should we log a warning when multiple usingtasks are marked as `Override=true` (with the same task name)?\r\n\r\nI think yes, because at that point we had to make a judgement call (first seen, last seen, random based on entropy seed generated from a bee's wings) as to which Task's configuration was actually used. I think anytime we have to make a judgement call like that, the user should be told about it.",
        "createdAt": "2021-11-18T21:24:37Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I think the current test failure has to do with the build context when calling this task directly? I haven't seen an issue like this before. Will try to check for the logged warning case by building a full project that has multiple usingtasks in it, instead of calling the method directly.",
        "createdAt": "2021-11-20T00:24:02Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-02-03T22:39:23Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-02-03T22:39:33Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "> ### Prioritization order of usingtasks:\r\n> 1. Project-level usingtask override\r\n> 2. _.tasks/_.overridetasks file\r\n> 3. UsingTask defined elsewhere\r\n\r\nIs this right? Shouldn't it be\r\n\r\n1. Project-level UsingTask override\r\n2. `.overridetasks` file\r\n3. Project-level UsingTask\r\n4. `.tasks` file\r\n\r\n?",
        "createdAt": "2022-02-04T13:04:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2022-02-14T17:08:46Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2022-02-14T17:08:57Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "@BenVillalobos, resolved a merge conflict in case you want to look at it, but it was pretty straightforward.",
        "createdAt": "2022-02-16T17:11:14Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Right spot?",
              "createdAt": "2021-11-08T17:12:01Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -411,10 +412,10 @@ ElementLocation elementLocation\n         )\n         {\n             TaskFactoryWrapper taskFactory = null;\n-            bool retrievedFromCache;\n-\n+            bool retrievedFromCache = false;\n+            \n             // If there are no usingtask tags in the project don't bother caching or looking for tasks locally\n-            RegisteredTaskRecord record = GetTaskRegistrationRecord(taskName, taskProjectFile, taskIdentityParameters, exactMatchRequired, targetLoggingContext, elementLocation, out retrievedFromCache);\n+            RegisteredTaskRecord record = overriddenTasks.ContainsKey(taskName) ? overriddenTasks[taskName] : GetTaskRegistrationRecord(taskName, taskProjectFile, taskIdentityParameters, exactMatchRequired, targetLoggingContext, elementLocation, out retrievedFromCache);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Note for reviewers: Is this the right spot to be returning early?",
              "createdAt": "2021-11-08T17:15:15Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -411,10 +412,10 @@ ElementLocation elementLocation\n         )\n         {\n             TaskFactoryWrapper taskFactory = null;\n-            bool retrievedFromCache;\n-\n+            bool retrievedFromCache = false;\n+            \n             // If there are no usingtask tags in the project don't bother caching or looking for tasks locally\n-            RegisteredTaskRecord record = GetTaskRegistrationRecord(taskName, taskProjectFile, taskIdentityParameters, exactMatchRequired, targetLoggingContext, elementLocation, out retrievedFromCache);\n+            RegisteredTaskRecord record = overriddenTasks.ContainsKey(taskName) ? overriddenTasks[taskName] : GetTaskRegistrationRecord(taskName, taskProjectFile, taskIdentityParameters, exactMatchRequired, targetLoggingContext, elementLocation, out retrievedFromCache);",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Note: I moved this check down 1 layer from `GetRegisteredTask` to `GetTaskRegistrationRecord` since the former calls the latter no matter what.\r\n\r\nUnit tests also call directly into the latter.",
              "createdAt": "2021-11-08T23:37:47Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -471,6 +472,12 @@ internal RegisteredTaskRecord GetTaskRegistrationRecord\n             retrievedFromCache = false;\n             RegisteredTaskIdentity taskIdentity = new RegisteredTaskIdentity(taskName, taskIdentityParameters);\n \n+            // was this task overridden?\n+            if (overriddenTasks.TryGetValue(taskName, out RegisteredTaskRecord rec))",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why this slew of test changes? It makes it look like there's a serious breaking change in here. There shouldn't need to be any test changes, right?",
              "createdAt": "2021-11-15T21:56:56Z",
              "path": "src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs",
              "diffHunk": "@@ -651,7 +744,7 @@ public void RetrieveFromCacheFuzzyMatchingParameters()\n                     shouldBeRetrieved: true,\n                     shouldBeRetrievedFromCache: false,\n                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,\n-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Ah these are holdovers from the previous solution. Will need to revert the commit that changed all these tests.",
              "createdAt": "2021-11-15T23:21:58Z",
              "path": "src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs",
              "diffHunk": "@@ -651,7 +744,7 @@ public void RetrieveFromCacheFuzzyMatchingParameters()\n                     shouldBeRetrieved: true,\n                     shouldBeRetrievedFromCache: false,\n                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.clr4,\n-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you combine these two Facts into a Theory then add a case for element having Architecture = \"x64\" and Override set to \"false\" then secondElement having Architecture \"x86\" and Override \"true\"?",
              "createdAt": "2021-11-15T22:00:54Z",
              "path": "src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs",
              "diffHunk": "@@ -622,6 +622,99 @@ public void RetrieveFromCacheMatchingExactParameters_AdditionalParameters()\n                 );\n         }\n \n+        [Fact]\n+        public void OverriddenTask_AlwaysWins()\n+        {",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why this change? You can inline it instead if you want with ...out bool retrievedFromCache);",
              "createdAt": "2021-11-15T22:03:44Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -411,8 +412,8 @@ ElementLocation elementLocation\n         )\n         {\n             TaskFactoryWrapper taskFactory = null;\n-            bool retrievedFromCache;\n-\n+            bool retrievedFromCache = false;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It seems like you should be able to override an override.\r\n```suggestion\r\n            if (overrideTask)\r\n```\r\nMaybe a warning?",
              "createdAt": "2021-11-15T22:05:18Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +671,14 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask && !overriddenTasks.ContainsKey(taskName))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "That's debatable, depending on where we want to go with this. @baronfel  may lean one way or the other?\r\n\r\nEither way, I agree a warning should be logged.",
              "createdAt": "2021-11-15T23:23:07Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +671,14 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask && !overriddenTasks.ContainsKey(taskName))",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "When would this happen? Some complex `Condition` evaluation that a user thought was exhaustive but didn't quite catch one particular corner case?  It's my understanding that most `<UsingTask>`s are done in a block, with conditions and such to make sure that the best one is chosen. That would mean multiple `Overrides` applying would be unexpected.",
              "createdAt": "2021-11-18T21:24:35Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +671,14 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask && !overriddenTasks.ContainsKey(taskName))",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm split but leaning slightly towards that you should always override it, so essentially moving overridenTasks[taskName] = newRecord; out of this if/else part. Warning/message difference should still exist though.",
              "createdAt": "2021-11-22T15:46:33Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +681,22 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask)\n+            {\n+                if (overriddenTasks.ContainsKey(taskName))\n+                {\n+                    loggingService.LogWarning(context, null, new BuildEventFileInfo(projectUsingTaskInXml.OverrideLocation), \"DuplicateOverrideUsingTaskElement\", taskName);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "That would make it last-one-wins, where normal behavior for UsingTasks is first-one-wins, so I think I prefer the current approach.",
              "createdAt": "2021-11-23T20:37:47Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +681,22 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask)\n+            {\n+                if (overriddenTasks.ContainsKey(taskName))\n+                {\n+                    loggingService.LogWarning(context, null, new BuildEventFileInfo(projectUsingTaskInXml.OverrideLocation), \"DuplicateOverrideUsingTaskElement\", taskName);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I might argue that we don't have a default yet for overriding usingtasks, and this is more similar to how we do things in other parts of MSBuild, but I'm fine with this.",
              "createdAt": "2021-11-23T22:12:23Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +681,22 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask)\n+            {\n+                if (overriddenTasks.ContainsKey(taskName))\n+                {\n+                    loggingService.LogWarning(context, null, new BuildEventFileInfo(projectUsingTaskInXml.OverrideLocation), \"DuplicateOverrideUsingTaskElement\", taskName);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do all of these need error codes? I would've thought just the DuplicateOverrideUsingTaskElement should.",
              "createdAt": "2021-11-22T15:49:05Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -331,6 +331,18 @@\n   </data>\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n+  </data>\n+    <data name=\"OverrideUsingTaskElementCreated\" xml:space=\"preserve\">",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Split onto two lines",
              "createdAt": "2021-11-22T15:54:24Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -635,11 +642,25 @@ private static bool IsTaskFactoryClass(Type type, object unused)\n             return relevantTaskRegistrations;\n         }\n \n+        // Create another set containing architecture-specific task entries.\n+        // Then when we look for them, check if the name exists in that.\n+        Dictionary<string, RegisteredTaskRecord> overriddenTasks = new Dictionary<string, RegisteredTaskRecord>();\n+\n         /// <summary>\n         /// Registers an evaluated using task tag for future\n         /// consultation\n         /// </summary>\n-        private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, string taskFactory, Dictionary<string, string> taskFactoryParameters, RegisteredTaskRecord.ParameterGroupAndTaskElementRecord inlineTaskRecord)\n+        private void RegisterTask\n+        (\n+            string taskName,\n+            AssemblyLoadInfo assemblyLoadInfo,\n+            string taskFactory,\n+            Dictionary<string, string> taskFactoryParameters,\n+            RegisteredTaskRecord.ParameterGroupAndTaskElementRecord inlineTaskRecord,\n+            ILoggingService loggingService, BuildEventContext context,",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you rebase on main to pick up the PublicApiAnalyzer? that'll force you to rebuild this stuff.",
              "createdAt": "2021-11-23T20:24:02Z",
              "path": "ref/Microsoft.Build/net/Microsoft.Build.cs",
              "diffHunk": "@@ -412,6 +412,8 @@ public partial class ProjectUsingTaskElement : Microsoft.Build.Construction.Proj\n         public Microsoft.Build.Construction.ElementLocation AssemblyFileLocation { get { throw null; } }\n         public string AssemblyName { get { throw null; } set { } }\n         public Microsoft.Build.Construction.ElementLocation AssemblyNameLocation { get { throw null; } }\n+        public string Override { get { throw null; } set { } }\n+        public Microsoft.Build.Construction.ElementLocation OverrideLocation { get { throw null; } }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Rebased!",
              "createdAt": "2021-11-23T22:59:27Z",
              "path": "ref/Microsoft.Build/net/Microsoft.Build.cs",
              "diffHunk": "@@ -412,6 +412,8 @@ public partial class ProjectUsingTaskElement : Microsoft.Build.Construction.Proj\n         public Microsoft.Build.Construction.ElementLocation AssemblyFileLocation { get { throw null; } }\n         public string AssemblyName { get { throw null; } set { } }\n         public Microsoft.Build.Construction.ElementLocation AssemblyNameLocation { get { throw null; } }\n+        public string Override { get { throw null; } set { } }\n+        public Microsoft.Build.Construction.ElementLocation OverrideLocation { get { throw null; } }",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there a test that this gets thrown? I didn't see one.",
              "createdAt": "2021-11-23T20:27:56Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -331,6 +331,18 @@\n   </data>\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n+  </data>\n+    <data name=\"OverrideUsingTaskElementCreated\" xml:space=\"preserve\">\n+    <value>MSB4275: Created an override using task: {0}</value>\n+    <comment>{StrBegin=\"MSB4275: \"}</comment>\n+  </data>\n+  <data name=\"DuplicateOverrideUsingTaskElement\" xml:space=\"preserve\">\n+    <value>MSB4276: Attempted to create multiple overrides of the same task: {0}</value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Just added it :)",
              "createdAt": "2021-11-23T22:12:38Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -331,6 +331,18 @@\n   </data>\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n+  </data>\n+    <data name=\"OverrideUsingTaskElementCreated\" xml:space=\"preserve\">\n+    <value>MSB4275: Created an override using task: {0}</value>\n+    <comment>{StrBegin=\"MSB4275: \"}</comment>\n+  </data>\n+  <data name=\"DuplicateOverrideUsingTaskElement\" xml:space=\"preserve\">\n+    <value>MSB4276: Attempted to create multiple overrides of the same task: {0}</value>",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord, loggingService, buildEventContext, projectUsingTaskXml, ConversionUtilities.ValidBooleanTrue(overrideUsingTask));\r\n```\r\n\r\n(this handles more cases including some terrifying ones)",
              "createdAt": "2021-11-23T20:30:51Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -386,7 +387,7 @@ IFileSystem fileSystem\n                 taskFactoryParameters.Add(XMakeAttributes.architecture, architecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : architecture);\n             }\n \n-            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord);\n+            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord, loggingService, buildEventContext, projectUsingTaskXml, overrideUsingTask.Equals(\"true\", StringComparison.OrdinalIgnoreCase));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Do we have any data on how often some of the less-used \"valid booleans\" are actually used? The reason I ask\u2014if 99.9999% of people say true/false, 99.9999% of people are wasting time looking through all the other options in the \"false\" case\u2014and we check truthiness or falsiness very often in MSBuild. The 0.0001% of people would have to change their code, so it's clearly a breaking change, but it would be a pretty straightforward change. Just curious if we've ever done a cost-benefit analysis.\r\n\r\n--Troublemaker",
              "createdAt": "2021-11-23T22:16:09Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -386,7 +387,7 @@ IFileSystem fileSystem\n                 taskFactoryParameters.Add(XMakeAttributes.architecture, architecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : architecture);\n             }\n \n-            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord);\n+            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord, loggingService, buildEventContext, projectUsingTaskXml, overrideUsingTask.Equals(\"true\", StringComparison.OrdinalIgnoreCase));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'd like to see a profile showing that it's a significant cost before considering this further.",
              "createdAt": "2021-11-23T23:10:59Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -386,7 +387,7 @@ IFileSystem fileSystem\n                 taskFactoryParameters.Add(XMakeAttributes.architecture, architecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : architecture);\n             }\n \n-            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord);\n+            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord, loggingService, buildEventContext, projectUsingTaskXml, overrideUsingTask.Equals(\"true\", StringComparison.OrdinalIgnoreCase));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I tested this, and it didn't seem nearly as impactful as I'd hoped. There may be an argument for reordering them, but I would count it very low priority.",
              "createdAt": "2021-11-23T23:56:56Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -386,7 +387,7 @@ IFileSystem fileSystem\n                 taskFactoryParameters.Add(XMakeAttributes.architecture, architecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : architecture);\n             }\n \n-            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord);\n+            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord, loggingService, buildEventContext, projectUsingTaskXml, overrideUsingTask.Equals(\"true\", StringComparison.OrdinalIgnoreCase));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Just saw this again--`ValidBooleanTrue` and `ValidBooleanFalse` are candidates for a source-generated regex, once we have the ability to do that. Then the source generator could optimize the search using full knowledge of all valid options and vectorize comparisons.",
              "createdAt": "2022-02-11T15:04:14Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -386,7 +387,7 @@ IFileSystem fileSystem\n                 taskFactoryParameters.Add(XMakeAttributes.architecture, architecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : architecture);\n             }\n \n-            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord);\n+            taskRegistry.RegisterTask(taskName, AssemblyLoadInfo.Create(assemblyName, assemblyFile), taskFactory, taskFactoryParameters, parameterGroupAndTaskElementRecord, loggingService, buildEventContext, projectUsingTaskXml, overrideUsingTask.Equals(\"true\", StringComparison.OrdinalIgnoreCase));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this have a pointer to the XML location of the override? If it's wrong (which is the only time I can think of to care about this message) that's probably interesting.",
              "createdAt": "2021-11-23T20:33:26Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -331,6 +331,18 @@\n   </data>\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n+  </data>\n+    <data name=\"OverrideUsingTaskElementCreated\" xml:space=\"preserve\">\n+    <value>MSB4275: Created an override using task: {0}</value>\n+    <comment>{StrBegin=\"MSB4275: \"}</comment>\n+  </data>\n+  <data name=\"DuplicateOverrideUsingTaskElement\" xml:space=\"preserve\">\n+    <value>MSB4276: Attempted to create multiple overrides of the same task: {0}</value>\n+    <comment>{StrBegin=\"MSB4276: \"}</comment>\n+  </data>\n+    <data name=\"OverriddenUsingTaskElementChosen\" xml:space=\"preserve\">\n+    <value>MSB4277: Overridden task chosen when calling task: {0}</value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Now that this message is gone, do you think it'd be useful to log the location when the overridetask is registered? It currently only logs the task name.",
              "createdAt": "2021-12-07T01:04:28Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -331,6 +331,18 @@\n   </data>\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n+  </data>\n+    <data name=\"OverrideUsingTaskElementCreated\" xml:space=\"preserve\">\n+    <value>MSB4275: Created an override using task: {0}</value>\n+    <comment>{StrBegin=\"MSB4275: \"}</comment>\n+  </data>\n+  <data name=\"DuplicateOverrideUsingTaskElement\" xml:space=\"preserve\">\n+    <value>MSB4276: Attempted to create multiple overrides of the same task: {0}</value>\n+    <comment>{StrBegin=\"MSB4276: \"}</comment>\n+  </data>\n+    <data name=\"OverriddenUsingTaskElementChosen\" xml:space=\"preserve\">\n+    <value>MSB4277: Overridden task chosen when calling task: {0}</value>",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need _both_ this and the \"chosen\" one? I feel like one or the other would do.",
              "createdAt": "2021-11-23T20:34:06Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -331,6 +331,18 @@\n   </data>\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n+  </data>\n+    <data name=\"OverrideUsingTaskElementCreated\" xml:space=\"preserve\">\n+    <value>MSB4275: Created an override using task: {0}</value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ping on this question.",
              "createdAt": "2021-11-29T15:48:04Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -331,6 +331,18 @@\n   </data>\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n+  </data>\n+    <data name=\"OverrideUsingTaskElementCreated\" xml:space=\"preserve\">\n+    <value>MSB4275: Created an override using task: {0}</value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "At first I figured why not have both, but notifying the build every time we picked a specific task doesn't provide much value. Especially when we can see the binary the task came from in the logs.\r\n\r\nI'll remove the logic/resource for logging a message when an overridden task is chosen.",
              "createdAt": "2021-12-07T00:55:14Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -331,6 +331,18 @@\n   </data>\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n+  </data>\n+    <data name=\"OverrideUsingTaskElementCreated\" xml:space=\"preserve\">\n+    <value>MSB4275: Created an override using task: {0}</value>",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The cool kids are doing it this way now (I don't actually care which you do):\r\n\r\n```suggestion\r\n            RegisteredTaskRecord newRecord = new(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\r\n```",
              "createdAt": "2021-11-23T20:35:08Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +682,22 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You're keying off of a `string` name--how does that work with the partial-class-name resolution that normal task lookup does? Does this require an exact match to the invocation?",
              "createdAt": "2021-11-23T20:36:58Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -635,11 +642,26 @@ private static bool IsTaskFactoryClass(Type type, object unused)\n             return relevantTaskRegistrations;\n         }\n \n+        // Create another set containing architecture-specific task entries.\n+        // Then when we look for them, check if the name exists in that.\n+        Dictionary<string, RegisteredTaskRecord> overriddenTasks = new Dictionary<string, RegisteredTaskRecord>();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "That's a wrinkle in this solution, at the moment it requires an exact match at the calling site. Another aspect to consider, how should this play with the overridetasks file?",
              "createdAt": "2021-11-24T00:09:41Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -635,11 +642,26 @@ private static bool IsTaskFactoryClass(Type type, object unused)\n             return relevantTaskRegistrations;\n         }\n \n+        // Create another set containing architecture-specific task entries.\n+        // Then when we look for them, check if the name exists in that.\n+        Dictionary<string, RegisteredTaskRecord> overriddenTasks = new Dictionary<string, RegisteredTaskRecord>();",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "How hard would it be to do \"if the task comes from .overridetasks _and_ there's something elsewhere with an override, error\"?",
              "createdAt": "2021-11-29T15:47:27Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -635,11 +642,26 @@ private static bool IsTaskFactoryClass(Type type, object unused)\n             return relevantTaskRegistrations;\n         }\n \n+        // Create another set containing architecture-specific task entries.\n+        // Then when we look for them, check if the name exists in that.\n+        Dictionary<string, RegisteredTaskRecord> overriddenTasks = new Dictionary<string, RegisteredTaskRecord>();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Found an area that documentation will need to be updated (if we change it): https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-tasks?view=vs-2022#overridden-tasks\r\n\r\n>Tasks in these files override any other tasks with the same names, including tasks in the project file.\r\n\r\nLooks like precedence will be:\r\n1. Project UsingTask with Override attribute\r\n2. Anything in .overridetasks (or .tasks?)\r\n3. Project files\r\n\r\n> How hard would it be to do \"if the task comes from .overridetasks and there's something elsewhere with an override, error\"?\r\n\r\nIf we tried to go that route, one issue would be the lack of state in this class. When parsing a .tasks or .overridetasks file (see `RegisterOverrideTasks`), it calls `LoadAndRegisterFromTasksFile` which calls the static `RegisterTasksFromUsingTaskElement`. I guess we could try and determine whether we're in a .tasks or .overridetasks based on the `IFileSystem` that gets passed? Doesn't look like we can get the current file through it though.",
              "createdAt": "2021-12-07T00:52:40Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -635,11 +642,26 @@ private static bool IsTaskFactoryClass(Type type, object unused)\n             return relevantTaskRegistrations;\n         }\n \n+        // Create another set containing architecture-specific task entries.\n+        // Then when we look for them, check if the name exists in that.\n+        Dictionary<string, RegisteredTaskRecord> overriddenTasks = new Dictionary<string, RegisteredTaskRecord>();",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why a warning and not an error?",
              "createdAt": "2021-11-23T20:37:59Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +682,22 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask)\n+            {\n+                if (overriddenTasks.ContainsKey(taskName))\n+                {\n+                    loggingService.LogWarning(context, null, new BuildEventFileInfo(projectUsingTaskInXml.OverrideLocation), \"DuplicateOverrideUsingTaskElement\", taskName);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "https://github.com/dotnet/msbuild/pull/6783#issuecomment-973283563\r\n\r\nThe conversation has mostly been about whether or not to log a warning, but could also be applied for logging an error. \r\n\r\nIMO it's not worth failing the whole build over. My thinking is the resulting build could still be valid if the user sees this warning. \r\n\r\n> **could** still be valid\r\n\r\nOr is that precisely why it's worth failing the whole build over?",
              "createdAt": "2021-11-23T23:08:13Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +682,22 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask)\n+            {\n+                if (overriddenTasks.ContainsKey(taskName))\n+                {\n+                    loggingService.LogWarning(context, null, new BuildEventFileInfo(projectUsingTaskInXml.OverrideLocation), \"DuplicateOverrideUsingTaskElement\", taskName);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "My thinking is: we can always back it down to a warning if we discover a good reason to. But if we start as a warning we can't go to an error if we discover a good reason that way. So I prefer errors for new scenarios.",
              "createdAt": "2021-11-23T23:09:33Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +682,22 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask)\n+            {\n+                if (overriddenTasks.ContainsKey(taskName))\n+                {\n+                    loggingService.LogWarning(context, null, new BuildEventFileInfo(projectUsingTaskInXml.OverrideLocation), \"DuplicateOverrideUsingTaskElement\", taskName);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Looks like this file got brought back in the merge. Delete again please?",
              "createdAt": "2021-11-29T15:46:14Z",
              "path": "ref/Microsoft.Build/net/Microsoft.Build.cs",
              "diffHunk": "@@ -0,0 +1,2165 @@\n+// Copyright (c) Microsoft. All rights reserved.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                string unqualifiedTaskName = taskName.Split('.').Last();\r\n```",
              "createdAt": "2021-12-14T23:16:04Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +693,45 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask)\n+            {\n+                // Key the dictionary based on UNqualified task names\n+                // This is to support partial matches on tasks like Foo.Bar and Baz.Bar\n+                string unqualifiedTaskName = taskName;\n+\n+                if (unqualifiedTaskName.Contains('.'))\n+                {\n+                    unqualifiedTaskName = taskName.Split('.').Last();\n+                }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please only include useful comments. This and the past two comments added nothing to the line of code immediately below them. Comments are easily forgotten when changing code.",
              "createdAt": "2021-12-14T23:18:45Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +693,45 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask)\n+            {\n+                // Key the dictionary based on UNqualified task names\n+                // This is to support partial matches on tasks like Foo.Bar and Baz.Bar\n+                string unqualifiedTaskName = taskName;\n+\n+                if (unqualifiedTaskName.Contains('.'))\n+                {\n+                    unqualifiedTaskName = taskName.Split('.').Last();\n+                }\n+\n+                // Is the task already registered?\n+                if (overriddenTasks.TryGetValue(unqualifiedTaskName, out List<RegisteredTaskRecord> recs))\n+                {\n+                    // check every registration that exists in the list.\n+                    foreach (RegisteredTaskRecord rec in recs)\n+                    {\n+                        // Does the same registration already exist? (same exact name)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    // New record's name may be fully qualified. Use it anyway to account for partial matches.\r\n                    List<RegisteredTaskRecord> unqualifiedTaskNameMatches = new();\r\n                    unqualifiedTaskNameMatches.Add(newRecord);\r\n                    overriddenTasks.Add(unqualifiedTaskName, unqualifiedTaskNameMatches);\r\n```\r\n?\r\n\r\nSaves a dictionary access, too.",
              "createdAt": "2021-12-14T23:26:21Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -660,7 +693,45 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask)\n+            {\n+                // Key the dictionary based on UNqualified task names\n+                // This is to support partial matches on tasks like Foo.Bar and Baz.Bar\n+                string unqualifiedTaskName = taskName;\n+\n+                if (unqualifiedTaskName.Contains('.'))\n+                {\n+                    unqualifiedTaskName = taskName.Split('.').Last();\n+                }\n+\n+                // Is the task already registered?\n+                if (overriddenTasks.TryGetValue(unqualifiedTaskName, out List<RegisteredTaskRecord> recs))\n+                {\n+                    // check every registration that exists in the list.\n+                    foreach (RegisteredTaskRecord rec in recs)\n+                    {\n+                        // Does the same registration already exist? (same exact name)\n+                        if (rec.RegisteredName.Equals(taskIdentity.Name, StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            loggingService.LogError(context, null, new BuildEventFileInfo(projectUsingTaskInXml.OverrideLocation), \"DuplicateOverrideUsingTaskElement\", taskName);\n+                            break;\n+                        }\n+                    }\n+                    recs.Add(newRecord);\n+                }\n+                else\n+                {\n+                    // Create a dictionary containing the unqualified name (for quick lookups when the task is called).\n+                    // Place the new record using the potentially fully qualified name to account for partial matches.\n+                    overriddenTasks.Add(unqualifiedTaskName, new List<RegisteredTaskRecord>());\n+                    overriddenTasks[unqualifiedTaskName].Add(newRecord);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "assert result true/false?",
              "createdAt": "2022-02-04T13:06:45Z",
              "path": "src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs",
              "diffHunk": "@@ -624,6 +628,94 @@ public void RetrieveFromCacheMatchingExactParameters_AdditionalParameters()\n                 );\n         }\n \n+        [Theory]\n+        [InlineData(\"x64\",\"true\",\"x86\",\"\", \"x64\")] // x64 wins\n+        [InlineData(\"x64\", \"false\", \"x86\", \"true\", \"x86\")] // x86 wins\n+        public void OverriddenTask_AlwaysWins(string firstArch, string firstOverride, string secondArch, string secondOverride, string expectedArch)\n+        {\n+            Assert.NotNull(_testTaskLocation); // \"Need a test task to run this test\"\n+\n+            List<ProjectUsingTaskElement> elementList = new List<ProjectUsingTaskElement>();\n+            ProjectRootElement project = ProjectRootElement.Create();\n+\n+            ProjectUsingTaskElement element = project.AddUsingTask(TestTaskName, _testTaskLocation, null);\n+            element.Architecture = firstArch;\n+            element.Override = firstOverride;\n+            elementList.Add(element);\n+\n+            ProjectUsingTaskElement secondElement = project.AddUsingTask(TestTaskName, _testTaskLocation, null);\n+            secondElement.Architecture = secondArch;\n+            secondElement.Override = secondOverride;\n+            elementList.Add(secondElement);\n+\n+            TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);\n+\n+            // no parameters\n+            RetrieveAndValidateRegisteredTaskRecord\n+                (\n+                    registry,\n+                    exactMatchRequired: false,\n+                    runtime: null,\n+                    architecture: null,\n+                    shouldBeRetrieved: true,\n+                    shouldBeRetrievedFromCache: false,\n+                    expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,\n+                    expectedArchitecture: expectedArch\n+                );\n+\n+            // no parameters, fuzzy match\n+            RetrieveAndValidateRegisteredTaskRecord\n+                (\n+                    registry,\n+                    exactMatchRequired: false,\n+                    runtime: null,\n+                    architecture: null,\n+                    shouldBeRetrieved: true,\n+                    shouldBeRetrievedFromCache: false,\n+                    expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,\n+                    expectedArchitecture: expectedArch\n+                );\n+        }\n+\n+        [Fact]\n+        public void OverriddenTask_MultipleOverridesCauseMSB4275()\n+        {\n+            string proj =\n+                $\"<Project>\" +\n+                    $\"<Target Name='Bar'/>\" +\n+                    $\"<UsingTask TaskName='Foo' AssemblyFile='$(Outdir)task.dll' Override='true' Architecture='x64' />\" +\n+                    $\"<UsingTask TaskName='Foo' AssemblyFile='$(Outdir)task2.dll' Override='true' Architecture='x86'/>\" +\n+                $\"</Project>\";\n+\n+            MockLogger logger = new MockLogger(_output);\n+            using (var env = TestEnvironment.Create(_output))\n+            {\n+                var testProject = env.CreateTestProjectWithFiles(ObjectModelHelpers.CleanupFileContents(proj));\n+\n+                using (var buildManager = new BuildManager())\n+                {\n+                    BuildParameters parameters = new BuildParameters()\n+                    {\n+                        Loggers = new[] { logger }\n+                    };\n+\n+                    var request = new BuildRequestData(\n+                        testProject.ProjectFile,\n+                        new Dictionary<string, string>(),\n+                        MSBuildConstants.CurrentToolsVersion,\n+                        Array.Empty<string>(),\n+                        null);\n+\n+                    var result = buildManager.Build(",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd say it's worth avoiding Linq for this.\r\n```suggestion\r\n                string[] nameComponents = taskName.Split('.');\r\n                string unqualifiedTaskName = nameComponents[nameComponents.Length];\r\n```\r\n\r\n(sadly we can't use `[^1]` since we don't have `System.Index` in our net472 target)",
              "createdAt": "2022-02-04T13:18:01Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -662,7 +695,38 @@ private void RegisterTask(string taskName, AssemblyLoadInfo assemblyLoadInfo, st\n                 _taskRegistrations[taskIdentity] = registeredTaskEntries;\n             }\n \n-            registeredTaskEntries.Add(new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord));\n+            RegisteredTaskRecord newRecord = new RegisteredTaskRecord(taskName, assemblyLoadInfo, taskFactory, taskFactoryParameters, inlineTaskRecord);\n+\n+            if (overrideTask)\n+            {\n+                // Key the dictionary based on Unqualified task names\n+                // This is to support partial matches on tasks like Foo.Bar and Baz.Bar\n+                string unqualifiedTaskName = taskName.Split('.').Last();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Removable (see below)",
              "createdAt": "2022-02-04T13:18:12Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -22,6 +22,7 @@\n using Microsoft.Build.Shared.FileSystem;\n \n using Microsoft.NET.StringTools;\n+using System.Linq;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you show an example of this message? Is it possible to point to both locations?",
              "createdAt": "2022-02-04T13:23:31Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -332,6 +332,13 @@\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n   </data>\n+  <data name=\"DuplicateOverrideUsingTaskElement\" xml:space=\"preserve\">\n+    <value>MSB4275: Attempted to create multiple overrides of the same task: {0}</value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "There doesn't seem to be a convenient way to get location from a `RegisteredTaskRecord`, which is the only reference we have to the other usingtask at the point that this is logged.",
              "createdAt": "2022-02-10T23:20:10Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -332,6 +332,13 @@\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n   </data>\n+  <data name=\"DuplicateOverrideUsingTaskElement\" xml:space=\"preserve\">\n+    <value>MSB4275: Attempted to create multiple overrides of the same task: {0}</value>",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Here's the log after a unit test:\r\n\r\n```\r\nBuild started.\r\nEvaluation started (\"C:\\Users\\bevillal\\AppData\\Local\\Temp\\pm3tsjgb.5xz\\Temporary458011a3c99d422e8e03cf88a5710645\\build.proj\")\r\nCreated an override using task: Foo at C:\\Users\\bevillal\\AppData\\Local\\Temp\\pm3tsjgb.5xz\\Temporary458011a3c99d422e8e03cf88a5710645\\build.proj (1,89)\r\nC:\\Users\\bevillal\\AppData\\Local\\Temp\\pm3tsjgb.5xz\\Temporary458011a3c99d422e8e03cf88a5710645\\build.proj(1,186):  error MSB4275: Attempted to create multiple overrides of the same task: Foo\r\nEvaluation finished (\"C:\\Users\\bevillal\\AppData\\Local\\Temp\\pm3tsjgb.5xz\\Temporary458011a3c99d422e8e03cf88a5710645\\build.proj\")\r\nProject \"build.proj\" (default targets):\r\nTarget \"Bar\" in project \"C:\\Users\\bevillal\\AppData\\Local\\Temp\\pm3tsjgb.5xz\\Temporary458011a3c99d422e8e03cf88a5710645\\build.proj\" (entry point):\r\nDone building target \"Bar\" in project \"build.proj\".\r\nDone building project \"build.proj\".\r\nBuild succeeded.\r\n```",
              "createdAt": "2022-02-10T23:52:25Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -332,6 +332,13 @@\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n   </data>\n+  <data name=\"DuplicateOverrideUsingTaskElement\" xml:space=\"preserve\">\n+    <value>MSB4275: Attempted to create multiple overrides of the same task: {0}</value>",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "This is confusing since they're on the same line but I think that's just an artifact of the test construction?\r\n\r\nIn any case there are messages for each that have a location so I'm pretty good with that.",
              "createdAt": "2022-02-11T12:39:23Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -332,6 +332,13 @@\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n   </data>\n+  <data name=\"DuplicateOverrideUsingTaskElement\" xml:space=\"preserve\">\n+    <value>MSB4275: Attempted to create multiple overrides of the same task: {0}</value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this have the location?",
              "createdAt": "2022-02-04T13:24:05Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -332,6 +332,13 @@\n   <data name=\"TryingExtensionsPath\" xml:space=\"preserve\">\n     <value>Trying to import {0} using extensions path {1}</value>\n   </data>\n+  <data name=\"DuplicateOverrideUsingTaskElement\" xml:space=\"preserve\">\n+    <value>MSB4275: Attempted to create multiple overrides of the same task: {0}</value>\n+    <comment>{StrBegin=\"MSB4275: \"}</comment>\n+  </data>\n+  <data name=\"OverrideUsingTaskElementCreated\" xml:space=\"preserve\">\n+    <value>Created an override using task: {0}</value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}