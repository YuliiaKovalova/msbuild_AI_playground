{
  "number": 8532,
  "title": "Add resource for failing to copy via hardlink",
  "body": "Fixes https://github.com/dotnet/msbuild/pull/8238/files#r1125001007\r\n\r\n### Context\r\n#8238 added a reference to \"Copy.LinkLibraryFailedPrefix\" but didn't actually add that to our .resx. This adds it.\r\n\r\n### Changes Made\r\nAdded a resource\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-03-03T21:14:05Z",
  "updatedAt": "2023-03-09T01:54:21Z",
  "closedAt": "2023-03-09T01:54:20Z",
  "mergedAt": "2023-03-09T01:54:20Z",
  "additions": 1,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "add-resource",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1c1e0b19d2bd6189b9e744c688cad89e7046d7a9",
          "message": "Add resource\n\n#8238 added a reference to \"Copy.LinkLibraryFailedPrefix\" but didn't actually add that to our .resx. This adds it.",
          "committedDate": "2023-03-03T21:13:32Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "87af39bdac921330645a454d6d3657988797a051",
          "message": "Use previously extant resource",
          "committedDate": "2023-03-03T21:19:40Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Can we add a test too - for a hardlink creation failing?",
        "createdAt": "2023-03-03T21:27:06Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "@Forgind Sorry for awkward error.  The new added test failed since there are not hard link creating failures in the same parent directory.  we need a good way to inject failures for hardlink or symlink creation.",
        "createdAt": "2023-03-06T10:31:10Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Try making a 000 directory",
        "createdAt": "2023-03-06T16:11:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Try making a 000 directory\r\n\r\nThat doesn't work.  @Forgind I'm thinking if we could merge the product code fixes and skip the test cases at first.   When we have the way to fail the hyperlink, we can enable the test case.\r\n",
        "createdAt": "2023-03-07T07:02:59Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "I agreed with @rainersigwald that since it's difficult to concoct a unit test that fails to create a hardlink on linux, I'd just test it manually and delete the unit test. My results from manual testing show:\r\nCould not use a link to copy \"/home/forgind/dotnet-install.sh\" to \"/mnt/c/Users/forgind/Desktop/di.sh\". Copying the file instead. The link() library call failed with the following error code: 18. (TaskId:37)",
        "createdAt": "2023-03-08T22:07:57Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Also validate that it contains `Copy.RetryingAsFileCopy`?",
              "createdAt": "2023-03-03T23:32:08Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -84,6 +84,38 @@ public void Dispose()\n             Copy.RefreshInternalEnvironmentValues();\n         }\n \n+        [Fact]\n+        [SkipOnPlatform(TestPlatforms.Windows, \"The error message derived directly from the hardlink creation failure is not provided by MSBuild, so including what it actually logs would be artificial.\")]\n+        public void TestErrorOnHardlinkFailUnix()\n+        {\n+            using TestEnvironment env = TestEnvironment.Create();\n+            TransientTestFile testFile = env.CreateFile();\n+            Copy copy = null;\n+            MockEngine logger = new(_testOutputHelper);\n+            for (int i = 0; i < 2000; i++)\n+            {\n+                copy = new()\n+                {\n+                    BuildEngine = logger,\n+                    SourceFiles = new ITaskItem[] { new TaskItem(testFile.Path) },\n+                    DestinationFiles = new ITaskItem[] { new TaskItem(testFile.Path + i) },\n+                    UseHardlinksIfPossible = true,\n+                    OverwriteReadOnlyFiles = true,\n+                    Retries = 0,\n+                    SkipUnchangedFiles = false,\n+                };\n+\n+                if (!copy.Execute())\n+                {\n+                    break;\n+                }\n+            }\n+\n+            string comparisonString = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"Copy.NonWindowsLinkErrorMessage\", \"link()\", \"foo\");\n+            comparisonString = comparisonString.Substring(0, comparisonString.IndexOf(':'));\n+            logger.AssertLogContains(comparisonString);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why not `AssertLogContainsMessageFromResource` as other places in this file?",
              "createdAt": "2023-03-03T23:32:59Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -84,6 +84,38 @@ public void Dispose()\n             Copy.RefreshInternalEnvironmentValues();\n         }\n \n+        [Fact]\n+        [SkipOnPlatform(TestPlatforms.Windows, \"The error message derived directly from the hardlink creation failure is not provided by MSBuild, so including what it actually logs would be artificial.\")]\n+        public void TestErrorOnHardlinkFailUnix()\n+        {\n+            using TestEnvironment env = TestEnvironment.Create();\n+            TransientTestFile testFile = env.CreateFile();\n+            Copy copy = null;\n+            MockEngine logger = new(_testOutputHelper);\n+            for (int i = 0; i < 2000; i++)\n+            {\n+                copy = new()\n+                {\n+                    BuildEngine = logger,\n+                    SourceFiles = new ITaskItem[] { new TaskItem(testFile.Path) },\n+                    DestinationFiles = new ITaskItem[] { new TaskItem(testFile.Path + i) },\n+                    UseHardlinksIfPossible = true,\n+                    OverwriteReadOnlyFiles = true,\n+                    Retries = 0,\n+                    SkipUnchangedFiles = false,\n+                };\n+\n+                if (!copy.Execute())\n+                {\n+                    break;\n+                }\n+            }\n+\n+            string comparisonString = ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"Copy.NonWindowsLinkErrorMessage\", \"link()\", \"foo\");\n+            comparisonString = comparisonString.Substring(0, comparisonString.IndexOf(':'));\n+            logger.AssertLogContains(comparisonString);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This doesn't make sense to me. Isn't it unix-only because we have an OS-specific p/invoke?",
              "createdAt": "2023-03-03T23:34:52Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -84,6 +84,38 @@ public void Dispose()\n             Copy.RefreshInternalEnvironmentValues();\n         }\n \n+        [Fact]\n+        [SkipOnPlatform(TestPlatforms.Windows, \"The error message derived directly from the hardlink creation failure is not provided by MSBuild, so including what it actually logs would be artificial.\")]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "We have matching p/invokes per OS, so one could suppose we could easily craft the appropriate error message a la:\r\nif (NativeMethodsShared.IsWindows)\r\n{\r\n    errorMessage = ...\r\n}\r\nelse\r\n{\r\n    errorMessage = ...\r\n}\r\n\r\nBut that doesn't work because the windows version isn't from MSBuild and isn't preserved in any particularly relevant form. We can't craft an appropriate error from what's in the test, and I don't think it's worth it to try to plumb the error message back out to some output variable.",
              "createdAt": "2023-03-03T23:44:19Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -84,6 +84,38 @@ public void Dispose()\n             Copy.RefreshInternalEnvironmentValues();\n         }\n \n+        [Fact]\n+        [SkipOnPlatform(TestPlatforms.Windows, \"The error message derived directly from the hardlink creation failure is not provided by MSBuild, so including what it actually logs would be artificial.\")]",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you put this in `CopyHardLink_Tests` instead of the base class so it isn't run multiple times?",
              "createdAt": "2023-03-03T23:35:13Z",
              "path": "src/Tasks.UnitTests/Copy_Tests.cs",
              "diffHunk": "@@ -84,6 +84,38 @@ public void Dispose()\n             Copy.RefreshInternalEnvironmentValues();\n         }\n \n+        [Fact]\n+        [SkipOnPlatform(TestPlatforms.Windows, \"The error message derived directly from the hardlink creation failure is not provided by MSBuild, so including what it actually logs would be artificial.\")]\n+        public void TestErrorOnHardlinkFailUnix()",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}