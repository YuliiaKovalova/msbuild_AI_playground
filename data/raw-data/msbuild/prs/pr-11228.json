{
  "number": 11228,
  "title": "replacing a batch of Regex with their generated variant",
  "body": "continuation of https://github.com/dotnet/msbuild/pull/11210\r\n\r\ncontributing to https://github.com/dotnet/msbuild/issues/7598\r\n\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-06T14:17:46Z",
  "updatedAt": "2025-01-27T12:10:02Z",
  "closedAt": "2025-01-27T12:10:00Z",
  "mergedAt": "2025-01-27T12:10:00Z",
  "additions": 23,
  "deletions": 3,
  "changedFiles": 1,
  "headRefName": "generated-regex-vol2",
  "isDraft": false,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e45343bc19d6fac59aa7e4725d56cab215a2409c",
          "message": "removed the disputable cases of Regex. keeping the one that should matter the most",
          "committedDate": "2025-01-21T13:17:18Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n\r\n```suggestion\r\n        // lang=regex\r\n        private const string RegistrySdkSpecification = @\"^HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Microsoft SDKs\\\\Windows\\\\v(\\d+\\.\\d+)$\";\r\n```\r\n\r\nThis gets syntax coloring for the regex grammar.",
              "createdAt": "2025-01-07T22:53:44Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -31,13 +31,32 @@ namespace Microsoft.Build.Evaluation\n     /// The Intrinsic class provides static methods that can be accessed from MSBuild's\n     /// property functions using $([MSBuild]::Function(x,y)).\n     /// </summary>\n-    internal static class IntrinsicFunctions\n+    internal static partial class IntrinsicFunctions\n     {\n+        private const string RegistrySdkSpecification = @\"^HKEY_LOCAL_MACHINE\\\\Software\\\\Microsoft\\\\Microsoft SDKs\\\\Windows\\\\v(\\d+\\.\\d+)$\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Since we're semi-deprecating this class I'm not sure we should make this change. It's not a _bad_ thing but I assume it'll increase code size for no benefit if we don't use this class right?",
              "createdAt": "2025-01-07T22:56:09Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -35,14 +35,13 @@ namespace Microsoft.Build.Construction\n     /// This class contains the functionality to parse a solution file and return a corresponding\n     /// MSBuild project file containing the projects and dependencies defined in the solution.\n     /// </remarks>\n-    public sealed class SolutionFile\n+    public sealed partial class SolutionFile",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ah, I didn't realize we were deprecating this class. Is this connected to the .slnx parser @surayya-MS was working on?",
              "createdAt": "2025-01-08T09:58:36Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -35,14 +35,13 @@ namespace Microsoft.Build.Construction\n     /// This class contains the functionality to parse a solution file and return a corresponding\n     /// MSBuild project file containing the projects and dependencies defined in the solution.\n     /// </remarks>\n-    public sealed class SolutionFile\n+    public sealed partial class SolutionFile",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Yes exactly, we now prefer to use the library version, and keep this only for compat and changewave reasons.",
              "createdAt": "2025-01-08T14:33:53Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -35,14 +35,13 @@ namespace Microsoft.Build.Construction\n     /// This class contains the functionality to parse a solution file and return a corresponding\n     /// MSBuild project file containing the projects and dependencies defined in the solution.\n     /// </remarks>\n-    public sealed class SolutionFile\n+    public sealed partial class SolutionFile",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                CrackProjectLineSpecification,\r\n```",
              "createdAt": "2025-01-07T22:59:13Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -51,22 +50,61 @@ public sealed class SolutionFile\n                 + \"\\\"(?<RELATIVEPATH>.*)\\\"\"\n                 + \"\\\\s*,\\\\s*\" // Any amount of whitespace plus \",\" plus any amount of whitespace\n                 + \"\\\"(?<PROJECTGUID>.*)\\\"\"\n-                + \"$\", // End-of-line\n-                RegexOptions.Compiled));\n+                + \"$\"; // End-of-line\n \n         // An example of a property line looks like this:\n         //      AspNetCompiler.VirtualPath = \"/webprecompile\"\n         // Because website projects now include the target framework moniker as\n         // one of their properties, <PROPERTYVALUE> may now have '=' in it.\n-\n-        private static readonly Lazy<Regex> s_crackPropertyLine = new Lazy<Regex>(\n-            () => new Regex(\n+        private const string CrackPropertyLineSpecification =\n                 \"^\" // Beginning of line\n                 + \"(?<PROPERTYNAME>[^=]*)\"\n                 + \"\\\\s*=\\\\s*\" // Any amount of whitespace plus \"=\" plus any amount of whitespace\n                 + \"(?<PROPERTYVALUE>.*)\"\n-                + \"$\", // End-of-line\n+                + \"$\"; // End-of-line\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(CrackProjectLineSpecification)]\n+        private static partial Regex s_crackProjectLinePattern();\n+\n+        [GeneratedRegex(CrackPropertyLineSpecification)]\n+        private static partial Regex s_crackPropertyLinePattern();\n+\n+#else\n+        private static readonly Lazy<Regex> s_crackProjectLinePattern = new Lazy<Regex>(\n+            () => new Regex(\n+                CrackProjectLineSpecification, // End-of-line",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                CrackPropertyLineSpecification,\r\n```",
              "createdAt": "2025-01-07T22:59:24Z",
              "path": "src/Build/Construction/Solution/SolutionFile.cs",
              "diffHunk": "@@ -51,22 +50,61 @@ public sealed class SolutionFile\n                 + \"\\\"(?<RELATIVEPATH>.*)\\\"\"\n                 + \"\\\\s*,\\\\s*\" // Any amount of whitespace plus \",\" plus any amount of whitespace\n                 + \"\\\"(?<PROJECTGUID>.*)\\\"\"\n-                + \"$\", // End-of-line\n-                RegexOptions.Compiled));\n+                + \"$\"; // End-of-line\n \n         // An example of a property line looks like this:\n         //      AspNetCompiler.VirtualPath = \"/webprecompile\"\n         // Because website projects now include the target framework moniker as\n         // one of their properties, <PROPERTYVALUE> may now have '=' in it.\n-\n-        private static readonly Lazy<Regex> s_crackPropertyLine = new Lazy<Regex>(\n-            () => new Regex(\n+        private const string CrackPropertyLineSpecification =\n                 \"^\" // Beginning of line\n                 + \"(?<PROPERTYNAME>[^=]*)\"\n                 + \"\\\\s*=\\\\s*\" // Any amount of whitespace plus \"=\" plus any amount of whitespace\n                 + \"(?<PROPERTYVALUE>.*)\"\n-                + \"$\", // End-of-line\n+                + \"$\"; // End-of-line\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(CrackProjectLineSpecification)]\n+        private static partial Regex s_crackProjectLinePattern();\n+\n+        [GeneratedRegex(CrackPropertyLineSpecification)]\n+        private static partial Regex s_crackPropertyLinePattern();\n+\n+#else\n+        private static readonly Lazy<Regex> s_crackProjectLinePattern = new Lazy<Regex>(\n+            () => new Regex(\n+                CrackProjectLineSpecification, // End-of-line\n+                RegexOptions.Compiled));\n+\n+        private static readonly Lazy<Regex> s_crackPropertyLinePattern = new Lazy<Regex>(\n+            () => new Regex(\n+                CrackPropertyLineSpecification, // End-of-line",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "For some of these where we weren't even using `RegexOptions.Compiled` before I'm not sure if the value is here or not.",
              "createdAt": "2025-01-07T23:11:31Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -58,11 +58,29 @@ public class ProjectRootElement : ProjectElementContainer\n \n         private static readonly ProjectRootElementCacheBase.OpenProjectRootElement s_openLoaderPreserveFormattingDelegate = OpenLoaderPreserveFormatting;\n \n+        private const string XmlDeclarationRegExSpecification = @\"\\A\\s*\\<\\?\\s*xml.*\\?\\>\\s*\\Z\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(XmlDeclarationRegExSpecification, RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture)]\n+        private static partial Regex XmlDeclarationRegExPattern();\n+#else\n+        private static readonly Lazy<Regex> XmlDeclarationRegExPattern = new Lazy<Regex>(() => new Regex(XmlDeclarationRegExSpecification), isThreadSafe: true);\n+#endif\n+\n         /// <summary>\n         /// Used to determine if a file is an empty XML file if it ONLY contains an XML declaration like &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;.\n         /// </summary>\n-        private static readonly Lazy<Regex> XmlDeclarationRegEx = new Lazy<Regex>(() => new Regex(@\"\\A\\s*\\<\\?\\s*xml.*\\?\\>\\s*\\Z\"), isThreadSafe: true);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "That is a good point. I was somewhat mechanically going over the lazy regexes so this could be a case where its not worth it.\r\n(didn't get to do all of them, there is a bunch of them in CanonicalError.cs that I was somewhat hesitant to replace since there is a lot of them so it would get messy)\r\n\r\nI have a follow up question: is there a merit of having the Regex here be lazy since it's not even compiled? (my idea of using lazy was to postpone the compilation until it's needed)",
              "createdAt": "2025-01-08T10:04:22Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -58,11 +58,29 @@ public class ProjectRootElement : ProjectElementContainer\n \n         private static readonly ProjectRootElementCacheBase.OpenProjectRootElement s_openLoaderPreserveFormattingDelegate = OpenLoaderPreserveFormatting;\n \n+        private const string XmlDeclarationRegExSpecification = @\"\\A\\s*\\<\\?\\s*xml.*\\?\\>\\s*\\Z\";\n+\n+#if NET7_0_OR_GREATER\n+        [GeneratedRegex(XmlDeclarationRegExSpecification, RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture)]\n+        private static partial Regex XmlDeclarationRegExPattern();\n+#else\n+        private static readonly Lazy<Regex> XmlDeclarationRegExPattern = new Lazy<Regex>(() => new Regex(XmlDeclarationRegExSpecification), isThreadSafe: true);\n+#endif\n+\n         /// <summary>\n         /// Used to determine if a file is an empty XML file if it ONLY contains an XML declaration like &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;.\n         /// </summary>\n-        private static readonly Lazy<Regex> XmlDeclarationRegEx = new Lazy<Regex>(() => new Regex(@\"\\A\\s*\\<\\?\\s*xml.*\\?\\>\\s*\\Z\"), isThreadSafe: true);",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      }
    ]
  }
}