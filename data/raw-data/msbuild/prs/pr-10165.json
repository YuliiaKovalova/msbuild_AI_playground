{
  "number": 10165,
  "title": "Wrap DumpExceptionToFile with try/catch for outofmemory",
  "body": "Fixes #\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/1748184\r\n\r\n## Context\r\nSome customers catch out of memory on our attempt to dump errors to local file.\r\nThis change prevents a crash from that.",
  "state": "MERGED",
  "createdAt": "2024-05-21T18:18:48Z",
  "updatedAt": "2024-05-25T09:05:00Z",
  "closedAt": "2024-05-25T09:05:00Z",
  "mergedAt": "2024-05-25T09:05:00Z",
  "additions": 37,
  "deletions": 27,
  "changedFiles": 1,
  "headRefName": "dev/ykovalova/wrap_DumpExceptionToFile",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9a8abd3f21ca41611657b00bce172cacdd021601",
          "message": "Wrap DumpExceptionToFile with try/catch for outofmemory",
          "committedDate": "2024-05-21T18:17:24Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b564ec7f2736cc62ebff837154a366994fa3aca9",
          "message": "add empty catch\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-05-21T20:23:29Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "83b6ddae6109a9fb8e762867b54487a22ac6fb92",
          "message": "add comment",
          "committedDate": "2024-05-22T13:35:13Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9eb3a0a9509387d75707109033315038de692989",
          "message": "Update src/Shared/ExceptionHandling.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-05-24T15:11:58Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I think I might want to make this fully best-effort, never fail if possible:\r\n\r\n```suggestion\r\n            catch\r\n            {\r\n            }\r\n```",
              "createdAt": "2024-05-21T20:08:25Z",
              "path": "src/Shared/ExceptionHandling.cs",
              "diffHunk": "@@ -335,39 +335,46 @@ internal static void UnhandledExceptionHandler(object sender, UnhandledException\n         /// </summary>\n         internal static void DumpExceptionToFile(Exception ex)\n         {\n-            // Locking on a type is not recommended.  However, we are doing it here to be extra cautious about compatibility because\n-            //  this method previously had a [MethodImpl(MethodImplOptions.Synchronized)] attribute, which does lock on the type when\n-            //  applied to a static method.\n-            lock (typeof(ExceptionHandling))\n+            try\n             {\n-                if (s_dumpFileName == null)\n+                // Locking on a type is not recommended.  However, we are doing it here to be extra cautious about compatibility because\n+                //  this method previously had a [MethodImpl(MethodImplOptions.Synchronized)] attribute, which does lock on the type when\n+                //  applied to a static method.\n+                lock (typeof(ExceptionHandling))\n                 {\n-                    Guid guid = Guid.NewGuid();\n-\n-                    // For some reason we get Watson buckets because GetTempPath gives us a folder here that doesn't exist.\n-                    // Either because %TMP% is misdefined, or because they deleted the temp folder during the build.\n-                    // If this throws, no sense catching it, we can't log it now, and we're here\n-                    // because we're a child node with no console to log to, so die\n-                    Directory.CreateDirectory(DebugDumpPath);\n-\n-                    var pid = Process.GetCurrentProcess().Id;\n-                    // This naming pattern is assumed in ReadAnyExceptionFromFile\n-                    s_dumpFileName = Path.Combine(DebugDumpPath, $\"MSBuild_pid-{pid}_{guid:n}.failure.txt\");\n+                    if (s_dumpFileName == null)\n+                    {\n+                        Guid guid = Guid.NewGuid();\n+\n+                        // For some reason we get Watson buckets because GetTempPath gives us a folder here that doesn't exist.\n+                        // Either because %TMP% is misdefined, or because they deleted the temp folder during the build.\n+                        // If this throws, no sense catching it, we can't log it now, and we're here\n+                        // because we're a child node with no console to log to, so die\n+                        Directory.CreateDirectory(DebugDumpPath);\n+\n+                        var pid = Process.GetCurrentProcess().Id;\n+                        // This naming pattern is assumed in ReadAnyExceptionFromFile\n+                        s_dumpFileName = Path.Combine(DebugDumpPath, $\"MSBuild_pid-{pid}_{guid:n}.failure.txt\");\n+\n+                        using (StreamWriter writer = FileUtilities.OpenWrite(s_dumpFileName, append: true))\n+                        {\n+                            writer.WriteLine(\"UNHANDLED EXCEPTIONS FROM PROCESS {0}:\", pid);\n+                            writer.WriteLine(\"=====================\");\n+                        }\n+                    }\n \n                     using (StreamWriter writer = FileUtilities.OpenWrite(s_dumpFileName, append: true))\n                     {\n-                        writer.WriteLine(\"UNHANDLED EXCEPTIONS FROM PROCESS {0}:\", pid);\n-                        writer.WriteLine(\"=====================\");\n+                        // \"G\" format is, e.g., 6/15/2008 9:15:07 PM\n+                        writer.WriteLine(DateTime.Now.ToString(\"G\", CultureInfo.CurrentCulture));\n+                        writer.WriteLine(ex.ToString());\n+                        writer.WriteLine(\"===================\");\n                     }\n                 }\n-\n-                using (StreamWriter writer = FileUtilities.OpenWrite(s_dumpFileName, append: true))\n-                {\n-                    // \"G\" format is, e.g., 6/15/2008 9:15:07 PM\n-                    writer.WriteLine(DateTime.Now.ToString(\"G\", CultureInfo.CurrentCulture));\n-                    writer.WriteLine(ex.ToString());\n-                    writer.WriteLine(\"===================\");\n-                }\n+            }\n+            catch (OutOfMemoryException)\n+            {\n+                throw;\n             }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: How about writing a small comment here concerning which exception might occur here and why we do not want to throw?",
              "createdAt": "2024-05-22T11:56:07Z",
              "path": "src/Shared/ExceptionHandling.cs",
              "diffHunk": "@@ -335,39 +335,45 @@ internal static void UnhandledExceptionHandler(object sender, UnhandledException\n         /// </summary>\n         internal static void DumpExceptionToFile(Exception ex)\n         {\n-            // Locking on a type is not recommended.  However, we are doing it here to be extra cautious about compatibility because\n-            //  this method previously had a [MethodImpl(MethodImplOptions.Synchronized)] attribute, which does lock on the type when\n-            //  applied to a static method.\n-            lock (typeof(ExceptionHandling))\n+            try\n             {\n-                if (s_dumpFileName == null)\n+                // Locking on a type is not recommended.  However, we are doing it here to be extra cautious about compatibility because\n+                //  this method previously had a [MethodImpl(MethodImplOptions.Synchronized)] attribute, which does lock on the type when\n+                //  applied to a static method.\n+                lock (typeof(ExceptionHandling))\n                 {\n-                    Guid guid = Guid.NewGuid();\n-\n-                    // For some reason we get Watson buckets because GetTempPath gives us a folder here that doesn't exist.\n-                    // Either because %TMP% is misdefined, or because they deleted the temp folder during the build.\n-                    // If this throws, no sense catching it, we can't log it now, and we're here\n-                    // because we're a child node with no console to log to, so die\n-                    Directory.CreateDirectory(DebugDumpPath);\n-\n-                    var pid = Process.GetCurrentProcess().Id;\n-                    // This naming pattern is assumed in ReadAnyExceptionFromFile\n-                    s_dumpFileName = Path.Combine(DebugDumpPath, $\"MSBuild_pid-{pid}_{guid:n}.failure.txt\");\n+                    if (s_dumpFileName == null)\n+                    {\n+                        Guid guid = Guid.NewGuid();\n+\n+                        // For some reason we get Watson buckets because GetTempPath gives us a folder here that doesn't exist.\n+                        // Either because %TMP% is misdefined, or because they deleted the temp folder during the build.\n+                        // If this throws, no sense catching it, we can't log it now, and we're here\n+                        // because we're a child node with no console to log to, so die\n+                        Directory.CreateDirectory(DebugDumpPath);\n+\n+                        var pid = Process.GetCurrentProcess().Id;\n+                        // This naming pattern is assumed in ReadAnyExceptionFromFile\n+                        s_dumpFileName = Path.Combine(DebugDumpPath, $\"MSBuild_pid-{pid}_{guid:n}.failure.txt\");\n+\n+                        using (StreamWriter writer = FileUtilities.OpenWrite(s_dumpFileName, append: true))\n+                        {\n+                            writer.WriteLine(\"UNHANDLED EXCEPTIONS FROM PROCESS {0}:\", pid);\n+                            writer.WriteLine(\"=====================\");\n+                        }\n+                    }\n \n                     using (StreamWriter writer = FileUtilities.OpenWrite(s_dumpFileName, append: true))\n                     {\n-                        writer.WriteLine(\"UNHANDLED EXCEPTIONS FROM PROCESS {0}:\", pid);\n-                        writer.WriteLine(\"=====================\");\n+                        // \"G\" format is, e.g., 6/15/2008 9:15:07 PM\n+                        writer.WriteLine(DateTime.Now.ToString(\"G\", CultureInfo.CurrentCulture));\n+                        writer.WriteLine(ex.ToString());\n+                        writer.WriteLine(\"===================\");\n                     }\n                 }\n-\n-                using (StreamWriter writer = FileUtilities.OpenWrite(s_dumpFileName, append: true))\n-                {\n-                    // \"G\" format is, e.g., 6/15/2008 9:15:07 PM\n-                    writer.WriteLine(DateTime.Now.ToString(\"G\", CultureInfo.CurrentCulture));\n-                    writer.WriteLine(ex.ToString());\n-                    writer.WriteLine(\"===================\");\n-                }\n+            }\n+            catch\n+            {",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would this be accurate?\r\n\r\n```suggestion\r\n            // This catch helps to prevent the application from crashing in this best-effort dump-diagnostics path,\r\n            // but doesn't prevent the overall crash from going to Watson.\r\n```",
              "createdAt": "2024-05-22T13:46:58Z",
              "path": "src/Shared/ExceptionHandling.cs",
              "diffHunk": "@@ -335,39 +335,48 @@ internal static void UnhandledExceptionHandler(object sender, UnhandledException\n         /// </summary>\n         internal static void DumpExceptionToFile(Exception ex)\n         {\n-            // Locking on a type is not recommended.  However, we are doing it here to be extra cautious about compatibility because\n-            //  this method previously had a [MethodImpl(MethodImplOptions.Synchronized)] attribute, which does lock on the type when\n-            //  applied to a static method.\n-            lock (typeof(ExceptionHandling))\n+            try\n             {\n-                if (s_dumpFileName == null)\n+                // Locking on a type is not recommended.  However, we are doing it here to be extra cautious about compatibility because\n+                //  this method previously had a [MethodImpl(MethodImplOptions.Synchronized)] attribute, which does lock on the type when\n+                //  applied to a static method.\n+                lock (typeof(ExceptionHandling))\n                 {\n-                    Guid guid = Guid.NewGuid();\n-\n-                    // For some reason we get Watson buckets because GetTempPath gives us a folder here that doesn't exist.\n-                    // Either because %TMP% is misdefined, or because they deleted the temp folder during the build.\n-                    // If this throws, no sense catching it, we can't log it now, and we're here\n-                    // because we're a child node with no console to log to, so die\n-                    Directory.CreateDirectory(DebugDumpPath);\n-\n-                    var pid = Process.GetCurrentProcess().Id;\n-                    // This naming pattern is assumed in ReadAnyExceptionFromFile\n-                    s_dumpFileName = Path.Combine(DebugDumpPath, $\"MSBuild_pid-{pid}_{guid:n}.failure.txt\");\n+                    if (s_dumpFileName == null)\n+                    {\n+                        Guid guid = Guid.NewGuid();\n+\n+                        // For some reason we get Watson buckets because GetTempPath gives us a folder here that doesn't exist.\n+                        // Either because %TMP% is misdefined, or because they deleted the temp folder during the build.\n+                        // If this throws, no sense catching it, we can't log it now, and we're here\n+                        // because we're a child node with no console to log to, so die\n+                        Directory.CreateDirectory(DebugDumpPath);\n+\n+                        var pid = Process.GetCurrentProcess().Id;\n+                        // This naming pattern is assumed in ReadAnyExceptionFromFile\n+                        s_dumpFileName = Path.Combine(DebugDumpPath, $\"MSBuild_pid-{pid}_{guid:n}.failure.txt\");\n+\n+                        using (StreamWriter writer = FileUtilities.OpenWrite(s_dumpFileName, append: true))\n+                        {\n+                            writer.WriteLine(\"UNHANDLED EXCEPTIONS FROM PROCESS {0}:\", pid);\n+                            writer.WriteLine(\"=====================\");\n+                        }\n+                    }\n \n                     using (StreamWriter writer = FileUtilities.OpenWrite(s_dumpFileName, append: true))\n                     {\n-                        writer.WriteLine(\"UNHANDLED EXCEPTIONS FROM PROCESS {0}:\", pid);\n-                        writer.WriteLine(\"=====================\");\n+                        // \"G\" format is, e.g., 6/15/2008 9:15:07 PM\n+                        writer.WriteLine(DateTime.Now.ToString(\"G\", CultureInfo.CurrentCulture));\n+                        writer.WriteLine(ex.ToString());\n+                        writer.WriteLine(\"===================\");\n                     }\n                 }\n-\n-                using (StreamWriter writer = FileUtilities.OpenWrite(s_dumpFileName, append: true))\n-                {\n-                    // \"G\" format is, e.g., 6/15/2008 9:15:07 PM\n-                    writer.WriteLine(DateTime.Now.ToString(\"G\", CultureInfo.CurrentCulture));\n-                    writer.WriteLine(ex.ToString());\n-                    writer.WriteLine(\"===================\");\n-                }\n+            }\n+            \n+            // Some customers experience exceptions such as 'OutOfMemory' errors when msbuild attempts to log errors to a local file.\n+            // This catch helps to prevent the application from crashing.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}