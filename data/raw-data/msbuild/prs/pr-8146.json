{
  "number": 8146,
  "title": "Log and include response files in binlog",
  "body": "Fixes #7214\r\n\r\n### Context\r\nWhen using response files, it can be easy to lose track of all switches used. For that reason, it would be helpful to log a message at the beginning of each build and also include them in the binary logger. \r\n\r\n### Changes Made\r\n- A message with normal verbosity is logged for each file at the beginning of every build\r\n- A new event type `ResponseFileUsedEventArgs` was implemented\r\n- The BinaryLogger responds to such event by including the response file it returns\r\n\r\n### Testing\r\nTesting was done with several resp files\r\n\r\n### Notes\r\nChanges are only applicable to standalone msbuild, as with dotnet, dotnet itself analyzes and expands the response files",
  "state": "MERGED",
  "createdAt": "2022-11-09T01:58:58Z",
  "updatedAt": "2022-12-20T02:14:59Z",
  "closedAt": "2022-12-14T07:23:50Z",
  "mergedAt": "2022-12-14T07:23:50Z",
  "additions": 170,
  "deletions": 5,
  "changedFiles": 14,
  "headRefName": "edvilme-response-files",
  "isDraft": false,
  "author": {
    "login": "edvilme"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "75c40859b4d8a485c02f5af974257496afd6c637",
          "message": "Added logging message for tasks that fail without error\n\nFixes #6633",
          "committedDate": "2022-11-03T21:24:58Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ae3422c532e88943db2d9e24c6656520c2a6079d",
          "message": "Removed specific version targeting from global.json\n\nSpecific version was added to avoid conflicts with newest internal version of dotnet and VS. Removed for PR",
          "committedDate": "2022-11-03T21:56:13Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "50890816bff88b332828ef0166e74c7c1dbe4fd0",
          "message": "Add better comments\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-11-03T21:57:36Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16665a84385526abe9e4865c122732080b34b5fc",
          "message": "global.json back to upstream/main",
          "committedDate": "2022-11-03T22:00:59Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8fb4ac850583a8efdaff41d30ccfaf7d800d9ca9",
          "message": "Removed blank line after else statement",
          "committedDate": "2022-11-04T18:20:09Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9529aadbb88639b1a4ba09eed0098bd560431bfa",
          "message": "Merge branch 'dotnet:main' into main",
          "committedDate": "2022-11-09T01:51:42Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "32d93ce12ac32582a8bb440cb25447c27cba1a3b",
          "message": "Log every response file used\n\nAddresses #7214. A message is logged at the beginning og a build whenever a response file(s) is used.",
          "committedDate": "2022-11-21T19:20:50Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e9911900f699bdd25b3df1f739c8d7bc63f42587",
          "message": "Response files are now included inside binlogs\n\nAddresses #7214. Using custom events, the binlogger includes the response files used when running MSBuild.",
          "committedDate": "2022-11-21T19:20:50Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5a79d9701ccd4674c53528ca62167dca9d480de7",
          "message": "Restore global.json",
          "committedDate": "2022-11-21T19:20:50Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab3e0385d0d41c2e6a81c9c490263468f29a1597",
          "message": "Fix code formatting issues\n\nCode formatting. Fixes identation, spacing and adds missing comments",
          "committedDate": "2022-11-21T19:20:50Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ecc30bec35675e9cbcf45c95a752aa24a093b0f6",
          "message": "Removed DeferredResponseFile struct\n\nFor greater flexibility and avoiding massive changes in the codebase, DeferredResponseFile has been removed. Instead, DeferredBuildMessage now has a FilePath member that when not blank, will inlcude the specified file in the binlogger",
          "committedDate": "2022-11-21T19:20:50Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a3f1084f8362a291ec83121868f842a173c240ec",
          "message": "Removed nullable disable from ResponseFileUsedEventArgs\n\nResponseFilePath member is initialized as an empty string by default.",
          "committedDate": "2022-11-21T19:20:51Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7d065012fa3f0bb4320362af32e7d8143dc27d31",
          "message": "Fixed code formatting issues",
          "committedDate": "2022-11-21T19:20:51Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7248c43abddc580250c5ca6681e215233d718d79",
          "message": "Default filepath for DeferredBuildMessages is now null",
          "committedDate": "2022-11-21T19:20:51Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "11362f7e6f32258bf17fa43dfa873613a8ca3e74",
          "message": "Update src/Build/BackEnd/BuildManager/BuildManager.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-11-21T19:20:51Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7b96e9754ec5c3fa6f707321d589d93999265980",
          "message": "Fix code formatting issues\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2022-11-21T19:20:51Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "933cbd4997328d2f6e4f98f95e84e7afbf11a01f",
          "message": "Removed default constructor for ResponseFileUsedEventArgs",
          "committedDate": "2022-11-21T19:20:51Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "84aaded1ed86c79cc085465d73e5269a2f53671a",
          "message": "Added check for empty response file paths",
          "committedDate": "2022-11-21T19:45:08Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f962e139732dade61d4d2e47a0079c6ea9c60adb",
          "message": "Added serialization logic in LogMessagePackedBase for ResponseFileUsedEventArgs",
          "committedDate": "2022-11-22T00:03:58Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3b58636549000687aae51eb8776f70d79fff1115",
          "message": "Code styling for LogMessagePacketBase.cs",
          "committedDate": "2022-11-22T18:40:54Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9ffc8613576869043aa125101860fdf8889e0b6e",
          "message": "Added RoundtripResponseFileUsedEventArgs unit test\n\nAdded RoadtripResponseFileUsedEventArgs test and specific methods at BuildEventArgsReader.cs and BuildEventArgsWriter.cs for ResponseFileUsedEventArgs",
          "committedDate": "2022-11-23T00:28:15Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9a90b617eaaf8430bf174de7eff84c85ac41845f",
          "message": "Fix style and mismatched test\n\nAdded trailing comma to enum BinaryLogRecordKind, and replaced Message ith ResponseFilePath in tests",
          "committedDate": "2022-11-28T18:10:08Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9b7eefe1e28d1edcd0dc9192987639c91df70ff6",
          "message": "Remove nullable disable",
          "committedDate": "2022-11-30T22:50:40Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4ea50118d2a045bd8d91d48447d1f361863b2c55",
          "message": "Fixed code issues\n\nFixed styling, removed unused code and did testing",
          "committedDate": "2022-12-02T01:50:19Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4a90a55ed9cccc3d18f378a9a071a27a1b755f6c",
          "message": "Commented bugy line",
          "committedDate": "2022-12-02T18:08:20Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eb94d5bdc6dac4d2aceac4cadc8132c9b7d8ef2b",
          "message": "Revert to previous",
          "committedDate": "2022-12-02T22:57:19Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2c2ffd3a7cd0d8060ee033cfe729c248b945b336",
          "message": "Bumped File Format Version number\n\nBumped to support ResponseFileUedEventArgs",
          "committedDate": "2022-12-07T21:07:31Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8cb8bba50a65df6f6ccb06d5657a74282d3992fc",
          "message": "Merge branch 'main' of https://github.com/edvilme/msbuild into edvilme-response-files",
          "committedDate": "2022-12-07T22:37:46Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c11f6c724201876a744afd6adbb9d5b8aea66911",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into edvilme-response-files",
          "committedDate": "2022-12-07T22:39:26Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "198c71a1777155719bd7351a56cf71cd9781a6e5",
          "message": "Fixed bugs that caused tests to fail\n\nHopefully works now \ud83e\udd1e",
          "committedDate": "2022-12-09T22:05:41Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f1d65a9df5a42776329eb62b62623da58fdc186d",
          "message": "Add missing line\n\nLine for assigning ResponseFilePath to ResponseFileUsedEventArgs was removed by mistake",
          "committedDate": "2022-12-09T22:09:17Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eaf7c2ec9ac7751fd9c8040a6562612160e4226e",
          "message": "Removed commented code",
          "committedDate": "2022-12-09T22:10:22Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6f42fd2d3aba3a63d9649e1ebaa701a78d85b107",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into edvilme-response-files",
          "committedDate": "2022-12-09T22:37:00Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b35c3af5550404b4259cb8351f85983c413b705e",
          "message": "Converted messagesToLogInBuildLoggers to List, and added spaces before comments",
          "committedDate": "2022-12-09T23:23:18Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a7896e2f2a56dbfc1cb6475aa0b213bfb352129d",
          "message": "Avoid static for deferred messages",
          "committedDate": "2022-12-13T22:56:45Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cb4a6a08cbc414ee5c8274a390e9bceb85a5c797",
          "message": "respect deferred-message escape hatch",
          "committedDate": "2022-12-13T22:58:39Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Lot of commits here. @dotnet/kitten please make sure to squash :)",
        "createdAt": "2022-12-13T23:02:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This looks good, the only thing I'd change is rename to just `FileUsedEventArgs` and `FilePath`",
        "createdAt": "2022-12-15T23:40:25Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Binlog viewer version 2.1.758 has support for binlog format version 15",
        "createdAt": "2022-12-20T02:14:58Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Was this intentional? Looks like it's misaligned now",
              "createdAt": "2022-11-09T15:32:02Z",
              "path": "global.json",
              "diffHunk": "@@ -1,7 +1,7 @@\n {\n-  \"sdk\": {\n-    \"allowPrerelease\": true\n-  },\n+    \"sdk\": {",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Ohhh, not intentional. Missed that \ud83d\ude28 ",
              "createdAt": "2022-11-10T04:21:07Z",
              "path": "global.json",
              "diffHunk": "@@ -1,7 +1,7 @@\n {\n-  \"sdk\": {\n-    \"allowPrerelease\": true\n-  },\n+    \"sdk\": {",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "tiny nit: add a space",
              "createdAt": "2022-11-09T22:14:26Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -251,7 +252,14 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable\n         /// </summary>\n         private DateTime _instantiationTimeUtc;\n \n+        /// <summary>\n+        /// Messages to be logged\n+        /// </summary>\n         private IEnumerable<DeferredBuildMessage> _deferredBuildMessages;\n+        /// <summary>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "TODO...\r\n\r\nI'm also wondering if these DeferredResponseFiles should be more general...DeferredBuildMessage? Then we could reuse it in the future. If you think that's overengineering, go ahead and ignore me \ud83d\ude42",
              "createdAt": "2022-11-09T22:14:39Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -401,6 +409,18 @@ public DeferredBuildMessage(string text, MessageImportance importance)\n             }\n         }\n \n+        // TOOD: Add commment",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "copyright header",
              "createdAt": "2022-11-09T22:22:42Z",
              "path": "src/Framework/ResponseFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,25 @@\n+using System;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It probably doesn't matter too much just because there probably aren't too many response files, but this is probably faster if you add to lists. (I'm happy trying to verify or falsify that with you if you'd like to see how Benchmark.NET works!)",
              "createdAt": "2022-11-09T22:57:36Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1335,7 +1344,20 @@ string[] commandLine\n                         messagesToLogInBuildLoggers = GetMessagesToLogInBuildLoggers(commandLineString);\n                     }\n \n-                    buildManager.BeginBuild(parameters, messagesToLogInBuildLoggers);\n+                    // Log a message for every response file and include it in log\n+                    foreach (var responseFilePath in s_includedResponseFiles)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I definitely agree here. Collect the initial list with `.ToList()`, then add to it in this loop. I think it can continue to be a local variable, too.",
              "createdAt": "2022-11-14T17:02:16Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1335,7 +1344,20 @@ string[] commandLine\n                         messagesToLogInBuildLoggers = GetMessagesToLogInBuildLoggers(commandLineString);\n                     }\n \n-                    buildManager.BeginBuild(parameters, messagesToLogInBuildLoggers);\n+                    // Log a message for every response file and include it in log\n+                    foreach (var responseFilePath in s_includedResponseFiles)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ping on this \ud83d\ude42",
              "createdAt": "2022-11-30T23:42:44Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1335,7 +1344,20 @@ string[] commandLine\n                         messagesToLogInBuildLoggers = GetMessagesToLogInBuildLoggers(commandLineString);\n                     }\n \n-                    buildManager.BeginBuild(parameters, messagesToLogInBuildLoggers);\n+                    // Log a message for every response file and include it in log\n+                    foreach (var responseFilePath in s_includedResponseFiles)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "For new files, please don't use `#nullable disable`. We have it in most of our files since we haven't had a concerted effort to go back and clean up, but we'd like to get the analysis where we can.",
              "createdAt": "2022-11-09T23:12:07Z",
              "path": "src/Framework/ResponseFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,25 @@\n+using System;\n+\n+#nullable disable",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Ping on this.",
              "createdAt": "2022-11-28T18:12:01Z",
              "path": "src/Framework/ResponseFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,25 @@\n+using System;\n+\n+#nullable disable",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why did this need to be added?",
              "createdAt": "2022-11-10T21:57:32Z",
              "path": "src/Framework/BuildMessageEventArgs.cs",
              "diffHunk": "@@ -227,6 +227,10 @@ public BuildMessageEventArgs\n             this.endColumnNumber = endColumnNumber;\n         }\n \n+        public BuildMessageEventArgs(string message)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh you're right. Probably messed up some VS refactoring stuff",
              "createdAt": "2022-11-10T23:59:16Z",
              "path": "src/Framework/BuildMessageEventArgs.cs",
              "diffHunk": "@@ -227,6 +227,10 @@ public BuildMessageEventArgs\n             this.endColumnNumber = endColumnNumber;\n         }\n \n+        public BuildMessageEventArgs(string message)",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n\r\n        public void LogResponseFile(BuildEventContext buildEventContext, string filePath)\r\n```",
              "createdAt": "2022-11-10T21:59:03Z",
              "path": "src/Build.UnitTests/BackEnd/MockLoggingService.cs",
              "diffHunk": "@@ -632,6 +632,9 @@ public ICollection<string> GetWarningsAsMessages(BuildEventContext context)\n         {\n             throw new NotImplementedException();\n         }\n+        public void LogResponseFile(BuildEventContext buildEventContext, string filePath)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n\r\n```suggestion\r\n```",
              "createdAt": "2022-11-14T16:51:30Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -394,13 +398,23 @@ public static BuildManager DefaultBuildManager\n \n             public string Text { get; }\n \n+            public string FilePath { get; }\n+\n             public DeferredBuildMessage(string text, MessageImportance importance)\n             {\n                 Importance = importance;\n                 Text = text;\n+                FilePath = \"\";\n+            }\n+            public DeferredBuildMessage(string text, MessageImportance importance, string filePath)\n+            {\n+                Importance = importance;\n+                Text = text;\n+                FilePath = filePath;\n             }\n         }\n \n+",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n```suggestion\r\n\r\n            public DeferredBuildMessage(string text, MessageImportance importance, string filePath)\r\n```",
              "createdAt": "2022-11-14T16:51:43Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -394,13 +398,23 @@ public static BuildManager DefaultBuildManager\n \n             public string Text { get; }\n \n+            public string FilePath { get; }\n+\n             public DeferredBuildMessage(string text, MessageImportance importance)\n             {\n                 Importance = importance;\n                 Text = text;\n+                FilePath = \"\";\n+            }\n+            public DeferredBuildMessage(string text, MessageImportance importance, string filePath)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd leave this as `null`, personally--that's generally a better marker of \"not specified\".",
              "createdAt": "2022-11-14T16:52:45Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -394,13 +398,23 @@ public static BuildManager DefaultBuildManager\n \n             public string Text { get; }\n \n+            public string FilePath { get; }\n+\n             public DeferredBuildMessage(string text, MessageImportance importance)\n             {\n                 Importance = importance;\n                 Text = text;\n+                FilePath = \"\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Likewise here I'd check as \r\n```suggestion\r\n                if (message.FilePath is not null)\r\n```",
              "createdAt": "2022-11-14T16:53:05Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -2866,6 +2881,11 @@ private static void LogDeferredMessages(ILoggingService loggingService, IEnumera\n             foreach (var message in deferredBuildMessages)\n             {\n                 loggingService.LogCommentFromText(BuildEventContext.Invalid, message.Importance, message.Text);\n+                // If message includes a file path, include that file\n+                if (message.FilePath != \"\")",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "When is this constructor called? If it can be avoided, it'd be easy to constrain `ResponseFilePath` to be \"set to some non-empty value\" which would be a nice property to have.",
              "createdAt": "2022-11-14T16:54:57Z",
              "path": "src/Framework/ResponseFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the response file used event\n+    /// </summary>\n+    [Serializable]\n+    public class ResponseFileUsedEventArgs : CustomBuildEventArgs\n+    {\n+        /// <summary>\n+        /// Initialize a new instance of the ResponseFileUsedEventArgs class.\n+        /// </summary>\n+        public ResponseFileUsedEventArgs() : base() {\n+            ResponseFilePath = \"\";",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "So throw an error when it is not set instead of providing a default constructor you mean?",
              "createdAt": "2022-11-18T23:09:34Z",
              "path": "src/Framework/ResponseFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the response file used event\n+    /// </summary>\n+    [Serializable]\n+    public class ResponseFileUsedEventArgs : CustomBuildEventArgs\n+    {\n+        /// <summary>\n+        /// Initialize a new instance of the ResponseFileUsedEventArgs class.\n+        /// </summary>\n+        public ResponseFileUsedEventArgs() : base() {\n+            ResponseFilePath = \"\";",
              "author": {
                "login": "edvilme"
              }
            },
            {
              "body": "Yes, I think that's what I'm hoping for.",
              "createdAt": "2022-11-21T15:04:23Z",
              "path": "src/Framework/ResponseFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the response file used event\n+    /// </summary>\n+    [Serializable]\n+    public class ResponseFileUsedEventArgs : CustomBuildEventArgs\n+    {\n+        /// <summary>\n+        /// Initialize a new instance of the ResponseFileUsedEventArgs class.\n+        /// </summary>\n+        public ResponseFileUsedEventArgs() : base() {\n+            ResponseFilePath = \"\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@Forgind do we need this on log message types any more? I think we can just remove it now, right?",
              "createdAt": "2022-11-14T16:55:15Z",
              "path": "src/Framework/ResponseFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the response file used event\n+    /// </summary>\n+    [Serializable]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Correct\u2014[Serializable] is for BinaryFormatter-serialized types. That said, you'll want to explicitly implement serialization logic in LogMessagePackagetBase.cs\u2014WriteToStream and ReadFromStream are the relevant methods there.",
              "createdAt": "2022-11-14T18:15:17Z",
              "path": "src/Framework/ResponseFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,28 @@\n+// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the response file used event\n+    /// </summary>\n+    [Serializable]",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Looks like some of the newer stuff got mixed into these changes--can you rebase it away, please?",
              "createdAt": "2022-11-21T15:03:39Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,307 @@\n+\ufeffusing System;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh! Didn't catch that. I will look into it. Thanks!",
              "createdAt": "2022-11-21T19:14:08Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -0,0 +1,307 @@\n+\ufeffusing System;",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems a bit surprising. Under what circumstances is the event used in MSBuildTaskHost.exe? In general, new stuff doesn't go there because it exists only for compat with ancient tasks.",
              "createdAt": "2022-11-22T16:10:23Z",
              "path": "src/MSBuildTaskHost/MSBuildTaskHost.csproj",
              "diffHunk": "@@ -62,6 +62,7 @@\n       <Link>ITaskItem2.cs</Link>\n     </Compile>\n     <Compile Include=\"..\\Framework\\AssemblyUtilities.cs\" />\n+    <Compile Include=\"..\\Framework\\ResponseFileUsedEventArgs.cs\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh, is it because it's touched in LogMessagePacketBase? That would make sense and be fine.",
              "createdAt": "2022-11-22T16:11:45Z",
              "path": "src/MSBuildTaskHost/MSBuildTaskHost.csproj",
              "diffHunk": "@@ -62,6 +62,7 @@\n       <Link>ITaskItem2.cs</Link>\n     </Compile>\n     <Compile Include=\"..\\Framework\\AssemblyUtilities.cs\" />\n+    <Compile Include=\"..\\Framework\\ResponseFileUsedEventArgs.cs\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yup. Otherwise it won't build ",
              "createdAt": "2022-11-22T18:30:50Z",
              "path": "src/MSBuildTaskHost/MSBuildTaskHost.csproj",
              "diffHunk": "@@ -62,6 +62,7 @@\n       <Link>ITaskItem2.cs</Link>\n     </Compile>\n     <Compile Include=\"..\\Framework\\AssemblyUtilities.cs\" />\n+    <Compile Include=\"..\\Framework\\ResponseFileUsedEventArgs.cs\" />",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd feel more comfortable with\r\n\r\n```suggestion\r\n                LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),\r\n```",
              "createdAt": "2022-11-22T16:12:14Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -517,6 +522,7 @@ private BuildEventArgs GetBuildEventArgFromId()\n                 LoggingEventType.TaskFinishedEvent => new TaskFinishedEventArgs(null, null, null, null, null, false),\n                 LoggingEventType.TaskCommandLineEvent => new TaskCommandLineEventArgs(null, null, MessageImportance.Normal),\n                 LoggingEventType.EnvironmentVariableReadEvent => new EnvironmentVariableReadEventArgs(),\n+                LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(\"\"),",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\ud83d\udc40",
              "createdAt": "2022-11-22T16:18:08Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -800,6 +813,13 @@ private void WriteBuildMessageEventToStream(BuildMessageEventArgs buildMessageEv\n             translator.TranslateEnum(ref importance, (int)importance);\n         }\n \n+        private void WriteResponseFileUsedEventToStream(ResponseFileUsedEventArgs responseFileUsedEventArgs, ITranslator translator)\n+        {\n+            // code code code code",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oops sorry about that. Left it as a placeholder while trying to solve an issue and forgot to remove it",
              "createdAt": "2022-11-22T18:35:55Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -800,6 +813,13 @@ private void WriteBuildMessageEventToStream(BuildMessageEventArgs buildMessageEv\n             translator.TranslateEnum(ref importance, (int)importance);\n         }\n \n+        private void WriteResponseFileUsedEventToStream(ResponseFileUsedEventArgs responseFileUsedEventArgs, ITranslator translator)\n+        {\n+            // code code code code",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need to translate an importance for this? It doesn't look like we need it at deserialization time.",
              "createdAt": "2022-11-22T16:19:52Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -800,6 +813,13 @@ private void WriteBuildMessageEventToStream(BuildMessageEventArgs buildMessageEv\n             translator.TranslateEnum(ref importance, (int)importance);\n         }\n \n+        private void WriteResponseFileUsedEventToStream(ResponseFileUsedEventArgs responseFileUsedEventArgs, ITranslator translator)\n+        {\n+            // code code code code\n+            MessageImportance importance = MessageImportance.Normal;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "AFAIK, `ResponseFileUsedEventArgs` only contains information on the response file path, so I am not sure what else should be translated in this method",
              "createdAt": "2022-11-22T18:37:04Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -800,6 +813,13 @@ private void WriteBuildMessageEventToStream(BuildMessageEventArgs buildMessageEv\n             translator.TranslateEnum(ref importance, (int)importance);\n         }\n \n+        private void WriteResponseFileUsedEventToStream(ResponseFileUsedEventArgs responseFileUsedEventArgs, ITranslator translator)\n+        {\n+            // code code code code\n+            MessageImportance importance = MessageImportance.Normal;",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You should send the string response file path too.",
              "createdAt": "2022-11-22T16:20:23Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -800,6 +813,13 @@ private void WriteBuildMessageEventToStream(BuildMessageEventArgs buildMessageEv\n             translator.TranslateEnum(ref importance, (int)importance);\n         }\n \n+        private void WriteResponseFileUsedEventToStream(ResponseFileUsedEventArgs responseFileUsedEventArgs, ITranslator translator)\n+        {\n+            // code code code code\n+            MessageImportance importance = MessageImportance.Normal;\n+            translator.TranslateEnum(ref importance, (int)importance);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: if you use trailing commas in this type of situation, the next addition/deletion of items will be a single-line diff rather than the added line + adding a comma.\r\n\r\n```suggestion\r\n        ResponseFileUsed,\r\n```",
              "createdAt": "2022-11-28T14:33:07Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs",
              "diffHunk": "@@ -29,6 +29,7 @@ internal enum BinaryLogRecordKind\n         PropertyInitialValueSet,\n         NameValueList,\n         String,\n-        TaskParameter\n+        TaskParameter,\n+        ResponseFileUsed",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why `Message` here, rather than `ResponseFilePath`?",
              "createdAt": "2022-11-28T15:02:56Z",
              "path": "src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs",
              "diffHunk": "@@ -305,6 +305,14 @@ public void RoundtripBuildMessageEventArgs(bool useArguments)\n                 e => string.Join(\", \", e.RawArguments ?? Array.Empty<object>()));\n         }\n \n+        [Fact]\n+        public void RoundtripResponseFileUsedEventArgs()\n+        {\n+            var args = new ResponseFileUsedEventArgs(\"MSBuild.rsp\"); \n+            Roundtrip(args,\n+                e => e.Message);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "You're right, forgot to change it. Thanks",
              "createdAt": "2022-11-28T18:14:37Z",
              "path": "src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs",
              "diffHunk": "@@ -305,6 +305,14 @@ public void RoundtripBuildMessageEventArgs(bool useArguments)\n                 e => string.Join(\", \", e.RawArguments ?? Array.Empty<object>()));\n         }\n \n+        [Fact]\n+        public void RoundtripResponseFileUsedEventArgs()\n+        {\n+            var args = new ResponseFileUsedEventArgs(\"MSBuild.rsp\"); \n+            Roundtrip(args,\n+                e => e.Message);",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this also throw like the methods above?",
              "createdAt": "2022-11-30T23:36:25Z",
              "path": "src/Build.UnitTests/BackEnd/MockLoggingService.cs",
              "diffHunk": "@@ -633,6 +633,10 @@ public ICollection<string> GetWarningsAsMessages(BuildEventContext context)\n             throw new NotImplementedException();\n         }\n \n+        public void LogIncludeFile(BuildEventContext buildEventContext, string filePath)\n+        {\n+        }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "!= null?",
              "createdAt": "2022-11-30T23:39:15Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -270,6 +270,10 @@ private void CollectImports(BuildEventArgs e)\n             {\n                 projectImportsCollector.AddFileFromMemory(metaprojectArgs.ProjectFile, metaprojectArgs.metaprojectXml);\n             }\n+            else if (e is ResponseFileUsedEventArgs responseFileArgs && responseFileArgs.ResponseFilePath != \"\")",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm a little confused by the mismatches here between ReadResponseFileUsedEventFromStream and WriteResponseFileUsedEventToStream. Writing only ever writes the response file path, whereas this first reads the importance then reads the response file path. That feels wrong. Is it correct?",
              "createdAt": "2022-11-30T23:44:44Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -1218,6 +1241,16 @@ private BuildMessageEventArgs ReadBuildMessageEventFromStream(ITranslator transl\n             return buildEvent;\n         }\n \n+        private ResponseFileUsedEventArgs ReadResponseFileUsedEventFromStream(ITranslator translator, string message, string helpKeyword, string senderName)\n+        {\n+            MessageImportance importance = MessageImportance.Normal;\n+            translator.TranslateEnum(ref importance, (int)importance);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm unclear on why this has to exist at all, but \u00af\\\\_(\u30c4)_/\u00af",
              "createdAt": "2022-12-10T01:37:19Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1082,6 +1082,11 @@ private static void ResetGatheringSwitchesState()\n         /// </summary>\n         private const string msbuildLogFileName = \"msbuild.log\";\n \n+        /// <summary>\n+        /// Messages to be logged into loggrers\n+        /// </summary>\n+        private static IEnumerable<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = Enumerable.Empty<BuildManager.DeferredBuildMessage>();",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}