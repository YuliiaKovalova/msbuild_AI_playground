{
  "number": 7135,
  "title": "Fix possible race condition in ProjectRootElementCache.Get",
  "body": "Fixes possible race condition in `ProjectRootElementCache.Get` supposedly introduced in #6680.\r\n\r\n### Context\r\nPassing a load function that uses `ProjectRootElementCache.Get` to `ProjectRootElementCache.Get` function could lead to failure (to verify a path in the loaded ProjectRootElement), due to a race condition. We eliminate calling `ProjectRootElementCache.Get` inside the load function, eliminating an unnecessary double entry to `ProjectRootElementCache.Get` function.\r\n\r\n### Changes Made\r\n- Remove double entry to `ProjectRootElementCache.Get` function that could cause race condition.\r\n- Adjust path verification in `ProjectRootElementCache` and `SimpleProjectRootElementCache` to be more safe and to have more information.\r\n\r\n### Testing\r\nUnit tests + manual testing\r\n\r\n### Notes\r\nThe stack trace of failure:\r\n\r\n```\r\n> ##[error]C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): Error : MSB0001: Internal MSBuild Error: Got project back with incorrect path \r\n> at Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(String message, Exception innerException, Object[] args) \r\n> at Microsoft.Build.Evaluation.ProjectRootElementCache.Get(String projectFile, OpenProjectRootElement openProjectRootElement, Boolean isExplicitlyLoaded, Nullable1 preserveFormatting) \r\n> at Microsoft.Build.Evaluation.Evaluator4.ExpandAndLoadImportsFromUnescapedImportExpression(String directoryOfImportingFile, ProjectImportElement importElement, String unescapedExpression, Boolean throwOnFileNotExistsError, List1& imports) \r\n> at Microsoft.Build.Evaluation.Evaluator4.ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(String directoryOfImportingFile, ProjectImportElement importElement, List1& projects, SdkResult& sdkResult, Boolean throwOnFileNotExistsError) \r\n> at Microsoft.Build.Evaluation.Evaluator4.ExpandAndLoadImports(String directoryOfImportingFile, ProjectImportElement importElement, SdkResult& sdkResult) \r\n> at Microsoft.Build.Evaluation.Evaluator4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement) \r\n> at Microsoft.Build.Evaluation.Evaluator4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport) \r\n> at Microsoft.Build.Evaluation.Evaluator4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement) \r\n> at Microsoft.Build.Evaluation.Evaluator4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport) \r\n> at Microsoft.Build.Evaluation.Evaluator4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement) \r\n> at Microsoft.Build.Evaluation.Evaluator4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport) \r\n> at Microsoft.Build.Evaluation.Evaluator4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement) \r\n> at Microsoft.Build.Evaluation.Evaluator4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport) \r\n> at Microsoft.Build.Evaluation.Evaluator4.Evaluate() \r\n\r\n```\r\n",
  "state": "MERGED",
  "createdAt": "2021-12-08T15:38:02Z",
  "updatedAt": "2021-12-23T04:20:42Z",
  "closedAt": "2021-12-23T04:20:42Z",
  "mergedAt": "2021-12-23T04:20:42Z",
  "additions": 103,
  "deletions": 75,
  "changedFiles": 4,
  "headRefName": "fix-race-condition-ProjectRootElementCache-Get",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "be85bd665b37cbccd6543891f85234cb10328b72",
          "message": "Remove double Get call in load function.",
          "committedDate": "2021-12-08T10:08:16Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6634a662997a37fb5f7223260e604946c1875364",
          "message": "Fix path verification in Get function of ProjectRootElementCache.",
          "committedDate": "2021-12-08T18:24:18Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b43968f3dc0f78bfbc2057d8b1182c25646a14c1",
          "message": "Add debug asserts & rename function to prevent futher errors.",
          "committedDate": "2021-12-14T15:18:03Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5e2eb99b126862b578b7f7753abc07560d76491d",
          "message": "Move debug value decrement to finally section.",
          "committedDate": "2021-12-14T17:49:11Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d3c5ca6123e1bc03052cf8b202001bfe1fe9419b",
          "message": "Remove Interlocked.Increment and Interlocked.Decrement.",
          "committedDate": "2021-12-16T10:55:15Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Would you mind pasting a stack that shows the double call into the PR description? I remember this looked good when we talked about it but I've forgotten the details and they'd be good to have here for posterity.",
        "createdAt": "2021-12-08T18:29:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "No, it should not affect perf at all. Posted a stack trace of the error in the description.\r\n\r\nThe problem here is that we had double entry into Get() function of a cache, which is completely unnecessary and under some conditions it may lead to modifying `FullPath` right after line 276 in `ProjectRootElementCache.cs` and before the check on line 278. Logic is following: If load function `openProjectRootElement` has a Get() call inside, we do not load the xml and instead take element from a cache. 'projectRootElement ' is no more only locally accessible variable and some other thread could change it. Therefore, the check fails.",
        "createdAt": "2021-12-08T18:39:56Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "The stack trace does not show the double call, cause the error happens in the time when we are already in the first call and just came out of the second call. (presumably)",
        "createdAt": "2021-12-08T18:53:22Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "@rainersigwald \r\n\r\n> Would you mind pasting a stack that shows the double call into the PR description? I remember this looked good when we talked about it but I've forgotten the details and they'd be good to have here for posterity.\r\n\r\nIt was OK, but recently we have made changes that `Get` was not in one atomic lock but split into multiple lock se we can run loading of XML outside of lock, and this is sensitive against `Get` same thread reentrancy/recursion.\r\n\r\n",
        "createdAt": "2021-12-09T13:53:58Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This line basically checks if `projectFile` that came to this function is indeed a full path, as it should be.  ",
              "createdAt": "2021-12-08T17:38:20Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -275,7 +275,13 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n \n                 projectRootElement = openProjectRootElement(projectFile, this);\n                 ErrorUtilities.VerifyThrowInternalNull(projectRootElement, \"projectRootElement\");\n-                ErrorUtilities.VerifyThrow(projectRootElement.FullPath == projectFile, \"Got project back with incorrect path\");\n+                ErrorUtilities.VerifyThrow(",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\ndelete commented out code",
              "createdAt": "2021-12-08T18:16:46Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -275,7 +275,13 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n \n                 projectRootElement = openProjectRootElement(projectFile, this);\n                 ErrorUtilities.VerifyThrowInternalNull(projectRootElement, \"projectRootElement\");\n-                ErrorUtilities.VerifyThrow(projectRootElement.FullPath == projectFile, \"Got project back with incorrect path\");\n+                ErrorUtilities.VerifyThrow(\n+                    projectRootElement.FullPath.Equals(projectFile, StringComparison.OrdinalIgnoreCase),\n+                    \"Got project back with incorrect path. Expected path: {0}, received path: {1}.\",\n+                    projectFile,\n+                    projectRootElement.FullPath\n+                );\n+                //ErrorUtilities.VerifyThrow(projectRootElement.FullPath == projectFile, \"Got project back with incorrect path, first path = {1} {}\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "oh, right",
              "createdAt": "2021-12-08T18:22:28Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -275,7 +275,13 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n \n                 projectRootElement = openProjectRootElement(projectFile, this);\n                 ErrorUtilities.VerifyThrowInternalNull(projectRootElement, \"projectRootElement\");\n-                ErrorUtilities.VerifyThrow(projectRootElement.FullPath == projectFile, \"Got project back with incorrect path\");\n+                ErrorUtilities.VerifyThrow(\n+                    projectRootElement.FullPath.Equals(projectFile, StringComparison.OrdinalIgnoreCase),\n+                    \"Got project back with incorrect path. Expected path: {0}, received path: {1}.\",\n+                    projectFile,\n+                    projectRootElement.FullPath\n+                );\n+                //ErrorUtilities.VerifyThrow(projectRootElement.FullPath == projectFile, \"Got project back with incorrect path, first path = {1} {}\");",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`Interlocked.Increment(ref s_getEntriesNumber)` perhaps?",
              "createdAt": "2021-12-13T22:51:30Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -209,13 +218,18 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n         /// If item is found, boosts it to the top of the strong cache.\n         /// </remarks>\n         /// <param name=\"projectFile\">The project file which contains the ProjectRootElement.  Must be a full path.</param>\n-        /// <param name=\"openProjectRootElement\">The delegate to use to load if necessary. May be null. Must not update the cache.</param>\n+        /// <param name=\"loadProjectRootElement\">The delegate to use to load if necessary. May be null. Must not update the cache.</param>\n         /// <param name=\"isExplicitlyLoaded\"><code>true</code> if the project is explicitly loaded, otherwise <code>false</code>.</param>\n         /// <param name=\"preserveFormatting\"><code>true</code> to the project was loaded with the formated preserved, otherwise <code>false</code>.</param>\n         /// <returns>The ProjectRootElement instance if one exists.  Null otherwise.</returns>\n-        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement openProjectRootElement, bool isExplicitlyLoaded,\n+        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement, bool isExplicitlyLoaded,\n             bool? preserveFormatting)\n         {\n+#if DEBUG\n+            s_getEntriesNumber++;",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Yes, indeed. Forgot to return this back on my way while was removing and adding back the thread static modifier.",
              "createdAt": "2021-12-14T09:38:26Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -209,13 +218,18 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n         /// If item is found, boosts it to the top of the strong cache.\n         /// </remarks>\n         /// <param name=\"projectFile\">The project file which contains the ProjectRootElement.  Must be a full path.</param>\n-        /// <param name=\"openProjectRootElement\">The delegate to use to load if necessary. May be null. Must not update the cache.</param>\n+        /// <param name=\"loadProjectRootElement\">The delegate to use to load if necessary. May be null. Must not update the cache.</param>\n         /// <param name=\"isExplicitlyLoaded\"><code>true</code> if the project is explicitly loaded, otherwise <code>false</code>.</param>\n         /// <param name=\"preserveFormatting\"><code>true</code> to the project was loaded with the formated preserved, otherwise <code>false</code>.</param>\n         /// <returns>The ProjectRootElement instance if one exists.  Null otherwise.</returns>\n-        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement openProjectRootElement, bool isExplicitlyLoaded,\n+        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement, bool isExplicitlyLoaded,\n             bool? preserveFormatting)\n         {\n+#if DEBUG\n+            s_getEntriesNumber++;",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`Interlocked.Decrement`",
              "createdAt": "2021-12-13T22:51:51Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -253,15 +267,21 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n                 ForgetEntryIfExists(projectRootElement);\n             }\n \n-            if (openProjectRootElement == null)\n+            if (loadProjectRootElement == null)\n             {\n                 if (projectRootElement == null || projectRootElementIsInvalid)\n                 {\n+#if DEBUG\n+                    s_getEntriesNumber--;",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should you be verifying the return value of `Interlocked.Increment` instead?",
              "createdAt": "2021-12-15T17:18:56Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -209,92 +222,115 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n         /// If item is found, boosts it to the top of the strong cache.\n         /// </remarks>\n         /// <param name=\"projectFile\">The project file which contains the ProjectRootElement.  Must be a full path.</param>\n-        /// <param name=\"openProjectRootElement\">The delegate to use to load if necessary. May be null. Must not update the cache.</param>\n+        /// <param name=\"loadProjectRootElement\">The delegate to use to load if necessary. May be null. Must not update the cache.</param>\n         /// <param name=\"isExplicitlyLoaded\"><code>true</code> if the project is explicitly loaded, otherwise <code>false</code>.</param>\n         /// <param name=\"preserveFormatting\"><code>true</code> to the project was loaded with the formated preserved, otherwise <code>false</code>.</param>\n         /// <returns>The ProjectRootElement instance if one exists.  Null otherwise.</returns>\n-        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement openProjectRootElement, bool isExplicitlyLoaded,\n+        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement, bool isExplicitlyLoaded,\n             bool? preserveFormatting)\n         {\n-            // Should already have been canonicalized\n-            ErrorUtilities.VerifyThrowInternalRooted(projectFile);\n+#if DEBUG\n+            // Verify that loadProjectRootElement delegate does not call ProjectRootElementCache.Get().\n+            Interlocked.Increment(ref s_getEntriesNumber);\n+            ErrorUtilities.VerifyThrow(\n+                s_getEntriesNumber == 1,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good point, there\u2019s a window between the increment and the check where the value could have changed again. ",
              "createdAt": "2021-12-15T17:59:16Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -209,92 +222,115 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n         /// If item is found, boosts it to the top of the strong cache.\n         /// </remarks>\n         /// <param name=\"projectFile\">The project file which contains the ProjectRootElement.  Must be a full path.</param>\n-        /// <param name=\"openProjectRootElement\">The delegate to use to load if necessary. May be null. Must not update the cache.</param>\n+        /// <param name=\"loadProjectRootElement\">The delegate to use to load if necessary. May be null. Must not update the cache.</param>\n         /// <param name=\"isExplicitlyLoaded\"><code>true</code> if the project is explicitly loaded, otherwise <code>false</code>.</param>\n         /// <param name=\"preserveFormatting\"><code>true</code> to the project was loaded with the formated preserved, otherwise <code>false</code>.</param>\n         /// <returns>The ProjectRootElement instance if one exists.  Null otherwise.</returns>\n-        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement openProjectRootElement, bool isExplicitlyLoaded,\n+        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement, bool isExplicitlyLoaded,\n             bool? preserveFormatting)\n         {\n-            // Should already have been canonicalized\n-            ErrorUtilities.VerifyThrowInternalRooted(projectFile);\n+#if DEBUG\n+            // Verify that loadProjectRootElement delegate does not call ProjectRootElementCache.Get().\n+            Interlocked.Increment(ref s_getEntriesNumber);\n+            ErrorUtilities.VerifyThrow(\n+                s_getEntriesNumber == 1,",
              "author": {
                "login": "KirillOsenkov"
              }
            },
            {
              "body": "Hmm, it seems i was a bit confused when I changed to `Interlocked.Increment`. We do not need it, cause the value `s_getEntriesNumber` is thread static, not just static. Our goal is to catch if we have two `Get()` calls in the call stack (possibly from different instances of `ProjectRootElementCache`). So, there is no chance that value would be changed from some other thread. I will return back to usual increments/decrements here.",
              "createdAt": "2021-12-16T10:37:10Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -209,92 +222,115 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n         /// If item is found, boosts it to the top of the strong cache.\n         /// </remarks>\n         /// <param name=\"projectFile\">The project file which contains the ProjectRootElement.  Must be a full path.</param>\n-        /// <param name=\"openProjectRootElement\">The delegate to use to load if necessary. May be null. Must not update the cache.</param>\n+        /// <param name=\"loadProjectRootElement\">The delegate to use to load if necessary. May be null. Must not update the cache.</param>\n         /// <param name=\"isExplicitlyLoaded\"><code>true</code> if the project is explicitly loaded, otherwise <code>false</code>.</param>\n         /// <param name=\"preserveFormatting\"><code>true</code> to the project was loaded with the formated preserved, otherwise <code>false</code>.</param>\n         /// <returns>The ProjectRootElement instance if one exists.  Null otherwise.</returns>\n-        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement openProjectRootElement, bool isExplicitlyLoaded,\n+        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement, bool isExplicitlyLoaded,\n             bool? preserveFormatting)\n         {\n-            // Should already have been canonicalized\n-            ErrorUtilities.VerifyThrowInternalRooted(projectFile);\n+#if DEBUG\n+            // Verify that loadProjectRootElement delegate does not call ProjectRootElementCache.Get().\n+            Interlocked.Increment(ref s_getEntriesNumber);\n+            ErrorUtilities.VerifyThrow(\n+                s_getEntriesNumber == 1,",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "makes sense",
              "createdAt": "2021-12-16T17:19:04Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -209,92 +222,115 @@ private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootEl\n         /// If item is found, boosts it to the top of the strong cache.\n         /// </remarks>\n         /// <param name=\"projectFile\">The project file which contains the ProjectRootElement.  Must be a full path.</param>\n-        /// <param name=\"openProjectRootElement\">The delegate to use to load if necessary. May be null. Must not update the cache.</param>\n+        /// <param name=\"loadProjectRootElement\">The delegate to use to load if necessary. May be null. Must not update the cache.</param>\n         /// <param name=\"isExplicitlyLoaded\"><code>true</code> if the project is explicitly loaded, otherwise <code>false</code>.</param>\n         /// <param name=\"preserveFormatting\"><code>true</code> to the project was loaded with the formated preserved, otherwise <code>false</code>.</param>\n         /// <returns>The ProjectRootElement instance if one exists.  Null otherwise.</returns>\n-        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement openProjectRootElement, bool isExplicitlyLoaded,\n+        internal override ProjectRootElement Get(string projectFile, OpenProjectRootElement loadProjectRootElement, bool isExplicitlyLoaded,\n             bool? preserveFormatting)\n         {\n-            // Should already have been canonicalized\n-            ErrorUtilities.VerifyThrowInternalRooted(projectFile);\n+#if DEBUG\n+            // Verify that loadProjectRootElement delegate does not call ProjectRootElementCache.Get().\n+            Interlocked.Increment(ref s_getEntriesNumber);\n+            ErrorUtilities.VerifyThrow(\n+                s_getEntriesNumber == 1,",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      }
    ]
  }
}