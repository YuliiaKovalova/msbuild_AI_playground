{
  "number": 7778,
  "title": "Emmit BuildTelemetry event",
  "body": "### Context\r\nFor purpose of msbuild server and other we need to be able to collect and analyze build engine usage.\r\n\r\n### Changes Made\r\nData are collected at both msbuild client and msbuild server and then emitted when build is finished by BuildManager.\r\n\r\n### Testing\r\nUnit tests.\r\nManual debug tests.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-07-01T16:13:02Z",
  "updatedAt": "2022-07-12T18:42:49Z",
  "closedAt": "2022-07-12T18:42:49Z",
  "mergedAt": "2022-07-12T18:42:49Z",
  "additions": 485,
  "deletions": 13,
  "changedFiles": 13,
  "headRefName": "rokonec/msbuild-server/telemetry",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8080b4c167af3a46db4092eac4a71e1b3545a969",
          "message": "Solving memory leak by reusing BuildManager and ProjectRoolElementCache",
          "committedDate": "2022-05-31T08:12:53Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e41cf8a6ff737fe197b89d7c856444a9f39b89b6",
          "message": "Do not clear project root element cache if in auto reload.",
          "committedDate": "2022-05-31T08:13:09Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "447225c121b96cdadf7bec6ca0e8d2ffb15900e2",
          "message": "Reduce if\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2022-05-31T08:13:21Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c2691b13d7e734359fbbccc5c759844648ffbe19",
          "message": "Merge branch 'feature/msbuild-server' of https://github.com/dotnet/msbuild into feature/msbuild-server",
          "committedDate": "2022-06-07T12:57:54Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "60179f8bfc42219edee6158e0ab29363f05decdc",
          "message": "Merge branch 'feature/msbuild-server' of https://github.com/dotnet/msbuild into feature/msbuild-server",
          "committedDate": "2022-06-20T08:49:48Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c9948384c7b338842d72602275ab4eee092a320d",
          "message": "Merge branch 'feature/msbuild-server' of https://github.com/dotnet/msbuild into feature/msbuild-server",
          "committedDate": "2022-06-21T14:14:56Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8904e83cd24a88001f756c4593ee883e06ab0798",
          "message": "Merge branch 'feature/msbuild-server' of https://github.com/dotnet/msbuild into feature/msbuild-server",
          "committedDate": "2022-06-24T13:46:16Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "100887b95e7216227fd33cffc51531ae02d057ad",
          "message": "Emmit BuildTelemetry",
          "committedDate": "2022-07-01T13:01:49Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b40795c08bdc061c5ead562c4e230fe0f291b9d5",
          "message": "Unit tests",
          "committedDate": "2022-07-01T16:11:54Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "af99810dbda852dec2fe599b013c832c7bf556d2",
          "message": "Fix unit tests",
          "committedDate": "2022-07-04T15:51:16Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b96e4e3553121722590fc2b5b7e6c1cde3792bd6",
          "message": "Clean forgotten line.",
          "committedDate": "2022-07-12T16:44:00Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Making sure I understand - this field is how we would detect if the build was run via MSbuild Server or not? `InitialServerState = null' meaning no, `InitialServerState in (cold, hot)` meaning yes?",
              "createdAt": "2022-07-05T16:46:24Z",
              "path": "src/Framework/Telemetry/BuildTelemetry.cs",
              "diffHunk": "@@ -0,0 +1,145 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.Globalization;\n+\n+namespace Microsoft.Build.Framework.Telemetry\n+{\n+    /// <summary>\n+    /// Telemetry of build.\n+    /// </summary>\n+    internal class BuildTelemetry : TelemetryBase\n+    {\n+        public override string EventName => \"build\";\n+\n+        /// <summary>\n+        /// Time at which build have started.\n+        /// </summary>\n+        /// <remarks>\n+        /// It is time when build started, not when BuildManager start executing build.\n+        /// For example in case of MSBuild Server it is time before we connected or launched MSBuild Server.\n+        /// </remarks>\n+        public DateTime? StartAt { get; set; }\n+\n+        /// <summary>\n+        /// Time at which inner build have started.\n+        /// </summary>\n+        /// <remarks>\n+        /// It is time when build internally started, i.e. when BuildManager starts it.\n+        /// In case of MSBuild Server it is time when Server starts build.\n+        /// </remarks>\n+        public DateTime? InnerStartAt { get; set; }\n+\n+        /// <summary>\n+        /// Time at which build have finished.\n+        /// </summary>\n+        public DateTime? FinishedAt { get; set; }\n+\n+        /// <summary>\n+        /// Overall build success.\n+        /// </summary>\n+        public bool? Success { get; set; }\n+\n+        /// <summary>\n+        /// Build Target.\n+        /// </summary>\n+        public string? Target { get; set; }\n+\n+        /// <summary>\n+        /// MSBuild server fallback reason.\n+        /// Either \"ServerBusy\", \"ConnectionError\" or null (no fallback).\n+        /// </summary>\n+        public string? ServerFallbackReason { get; set; }\n+\n+        /// <summary>\n+        /// Version of MSBuild.\n+        /// </summary>\n+        public Version? Version { get; set; }\n+\n+        /// <summary>\n+        /// Display version of the Engine suitable for display to a user.\n+        /// </summary>\n+        public string? DisplayVersion { get; set; }\n+\n+        /// <summary>\n+        /// Path to project file.\n+        /// </summary>\n+        public string? Project { get; set; }\n+\n+        /// <summary>\n+        /// Host in which MSBuild build was executed.\n+        /// For example: \"VS\", \"VSCode\", \"Azure DevOps\", \"GitHub Action\", \"CLI\", ...\n+        /// </summary>\n+        public string? Host { get; set; }\n+\n+        /// <summary>\n+        /// State of MSBuild server process before this build.\n+        /// One of 'cold', 'hot', null (if not run as server)\n+        /// </summary>\n+        public string? InitialServerState { get; set; }",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "correct, null = no server",
              "createdAt": "2022-07-12T15:22:03Z",
              "path": "src/Framework/Telemetry/BuildTelemetry.cs",
              "diffHunk": "@@ -0,0 +1,145 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.Globalization;\n+\n+namespace Microsoft.Build.Framework.Telemetry\n+{\n+    /// <summary>\n+    /// Telemetry of build.\n+    /// </summary>\n+    internal class BuildTelemetry : TelemetryBase\n+    {\n+        public override string EventName => \"build\";\n+\n+        /// <summary>\n+        /// Time at which build have started.\n+        /// </summary>\n+        /// <remarks>\n+        /// It is time when build started, not when BuildManager start executing build.\n+        /// For example in case of MSBuild Server it is time before we connected or launched MSBuild Server.\n+        /// </remarks>\n+        public DateTime? StartAt { get; set; }\n+\n+        /// <summary>\n+        /// Time at which inner build have started.\n+        /// </summary>\n+        /// <remarks>\n+        /// It is time when build internally started, i.e. when BuildManager starts it.\n+        /// In case of MSBuild Server it is time when Server starts build.\n+        /// </remarks>\n+        public DateTime? InnerStartAt { get; set; }\n+\n+        /// <summary>\n+        /// Time at which build have finished.\n+        /// </summary>\n+        public DateTime? FinishedAt { get; set; }\n+\n+        /// <summary>\n+        /// Overall build success.\n+        /// </summary>\n+        public bool? Success { get; set; }\n+\n+        /// <summary>\n+        /// Build Target.\n+        /// </summary>\n+        public string? Target { get; set; }\n+\n+        /// <summary>\n+        /// MSBuild server fallback reason.\n+        /// Either \"ServerBusy\", \"ConnectionError\" or null (no fallback).\n+        /// </summary>\n+        public string? ServerFallbackReason { get; set; }\n+\n+        /// <summary>\n+        /// Version of MSBuild.\n+        /// </summary>\n+        public Version? Version { get; set; }\n+\n+        /// <summary>\n+        /// Display version of the Engine suitable for display to a user.\n+        /// </summary>\n+        public string? DisplayVersion { get; set; }\n+\n+        /// <summary>\n+        /// Path to project file.\n+        /// </summary>\n+        public string? Project { get; set; }\n+\n+        /// <summary>\n+        /// Host in which MSBuild build was executed.\n+        /// For example: \"VS\", \"VSCode\", \"Azure DevOps\", \"GitHub Action\", \"CLI\", ...\n+        /// </summary>\n+        public string? Host { get; set; }\n+\n+        /// <summary>\n+        /// State of MSBuild server process before this build.\n+        /// One of 'cold', 'hot', null (if not run as server)\n+        /// </summary>\n+        public string? InitialServerState { get; set; }",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@rainersigwald this is the motivation for the question I asked you last week - it might make sense for the MSBuild APIs to allow for some way of declaring the execution host for telemetry purposes.",
              "createdAt": "2022-07-05T16:47:18Z",
              "path": "src/Framework/Telemetry/BuildTelemetry.cs",
              "diffHunk": "@@ -0,0 +1,145 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.Globalization;\n+\n+namespace Microsoft.Build.Framework.Telemetry\n+{\n+    /// <summary>\n+    /// Telemetry of build.\n+    /// </summary>\n+    internal class BuildTelemetry : TelemetryBase\n+    {\n+        public override string EventName => \"build\";\n+\n+        /// <summary>\n+        /// Time at which build have started.\n+        /// </summary>\n+        /// <remarks>\n+        /// It is time when build started, not when BuildManager start executing build.\n+        /// For example in case of MSBuild Server it is time before we connected or launched MSBuild Server.\n+        /// </remarks>\n+        public DateTime? StartAt { get; set; }\n+\n+        /// <summary>\n+        /// Time at which inner build have started.\n+        /// </summary>\n+        /// <remarks>\n+        /// It is time when build internally started, i.e. when BuildManager starts it.\n+        /// In case of MSBuild Server it is time when Server starts build.\n+        /// </remarks>\n+        public DateTime? InnerStartAt { get; set; }\n+\n+        /// <summary>\n+        /// Time at which build have finished.\n+        /// </summary>\n+        public DateTime? FinishedAt { get; set; }\n+\n+        /// <summary>\n+        /// Overall build success.\n+        /// </summary>\n+        public bool? Success { get; set; }\n+\n+        /// <summary>\n+        /// Build Target.\n+        /// </summary>\n+        public string? Target { get; set; }\n+\n+        /// <summary>\n+        /// MSBuild server fallback reason.\n+        /// Either \"ServerBusy\", \"ConnectionError\" or null (no fallback).\n+        /// </summary>\n+        public string? ServerFallbackReason { get; set; }\n+\n+        /// <summary>\n+        /// Version of MSBuild.\n+        /// </summary>\n+        public Version? Version { get; set; }\n+\n+        /// <summary>\n+        /// Display version of the Engine suitable for display to a user.\n+        /// </summary>\n+        public string? DisplayVersion { get; set; }\n+\n+        /// <summary>\n+        /// Path to project file.\n+        /// </summary>\n+        public string? Project { get; set; }\n+\n+        /// <summary>\n+        /// Host in which MSBuild build was executed.\n+        /// For example: \"VS\", \"VSCode\", \"Azure DevOps\", \"GitHub Action\", \"CLI\", ...\n+        /// </summary>\n+        public string? Host { get; set; }",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Could this be an enum?",
              "createdAt": "2022-07-11T15:38:30Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -152,6 +153,10 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n \n             // Start server it if is not running.\n             bool serverIsAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);\n+            if (KnownTelemetry.BuildTelemetry != null)\n+            {\n+                KnownTelemetry.BuildTelemetry.InitialServerState = serverIsAlreadyRunning ? \"hot\" : \"cold\";",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I prefer it this way. For telemetry data I like the simplicity of adding new value and transparent passing to telemetry storage. ",
              "createdAt": "2022-07-12T16:43:21Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -152,6 +153,10 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)\n \n             // Start server it if is not running.\n             bool serverIsAlreadyRunning = ServerNamedMutex.WasOpen(serverRunningMutexName);\n+            if (KnownTelemetry.BuildTelemetry != null)\n+            {\n+                KnownTelemetry.BuildTelemetry.InitialServerState = serverIsAlreadyRunning ? \"hot\" : \"cold\";",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "My general worry with allocating a lot of strings here for telemetry is that although it isn't a huge deal because it's a cold path, it worsens perf for users without helping them in any way, just helping us help them. Am I wrong about that? Are these telemetry events helpful to users in some way?",
              "createdAt": "2022-07-11T23:33:56Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -796,6 +805,13 @@ public BuildSubmission PendBuildRequest(BuildRequestData requestData)\n                 VerifyStateInternal(BuildManagerState.Building);\n \n                 var newSubmission = new BuildSubmission(this, GetNextSubmissionId(), requestData, _buildParameters.LegacyThreadingSemantics);\n+\n+                if (KnownTelemetry.BuildTelemetry != null)\n+                {\n+                    KnownTelemetry.BuildTelemetry.Project ??= requestData.ProjectFullPath;\n+                    KnownTelemetry.BuildTelemetry.Target ??= string.Join(\",\", requestData.TargetNames);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "There is no direct value for users. They could subscribe to our telemetry events in their own logger and somehow process it, but this scenarios is farfetched.\r\nHowever, this is only one telemetry allocation per whole build and its affect on overall performance will be negligible.",
              "createdAt": "2022-07-12T16:35:19Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -796,6 +805,13 @@ public BuildSubmission PendBuildRequest(BuildRequestData requestData)\n                 VerifyStateInternal(BuildManagerState.Building);\n \n                 var newSubmission = new BuildSubmission(this, GetNextSubmissionId(), requestData, _buildParameters.LegacyThreadingSemantics);\n+\n+                if (KnownTelemetry.BuildTelemetry != null)\n+                {\n+                    KnownTelemetry.BuildTelemetry.Project ??= requestData.ProjectFullPath;\n+                    KnownTelemetry.BuildTelemetry.Target ??= string.Join(\",\", requestData.TargetNames);",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can there be multiple graph entry points? If so, is this right?",
              "createdAt": "2022-07-11T23:34:31Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -817,6 +833,13 @@ public GraphBuildSubmission PendBuildRequest(GraphBuildRequestData requestData)\n                 VerifyStateInternal(BuildManagerState.Building);\n \n                 var newSubmission = new GraphBuildSubmission(this, GetNextSubmissionId(), requestData);\n+\n+                if (KnownTelemetry.BuildTelemetry != null)\n+                {\n+                    KnownTelemetry.BuildTelemetry.Project ??= requestData.ProjectGraphEntryPoints?.FirstOrDefault().ProjectFile;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "There can be, however, this is probably very rare situation and we are fine to have it slightly wrong.\r\n'BuildTelemetry.Project' is designed to be used for events correlations it will correlate build telemetry even when it include just one entry point.",
              "createdAt": "2022-07-12T16:41:09Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -817,6 +833,13 @@ public GraphBuildSubmission PendBuildRequest(GraphBuildRequestData requestData)\n                 VerifyStateInternal(BuildManagerState.Building);\n \n                 var newSubmission = new GraphBuildSubmission(this, GetNextSubmissionId(), requestData);\n+\n+                if (KnownTelemetry.BuildTelemetry != null)\n+                {\n+                    KnownTelemetry.BuildTelemetry.Project ??= requestData.ProjectGraphEntryPoints?.FirstOrDefault().ProjectFile;",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Did you mean to assign something to this?",
              "createdAt": "2022-07-11T23:34:53Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -965,6 +988,36 @@ public void EndBuild()\n                         }\n \n                         loggingService.LogBuildFinished(_overallBuildSuccess);\n+\n+                        if (KnownTelemetry.BuildTelemetry != null)\n+                        {\n+                            KnownTelemetry.BuildTelemetry.FinishedAt = DateTime.UtcNow;\n+                            KnownTelemetry.BuildTelemetry.Success = _overallBuildSuccess;\n+                            KnownTelemetry.BuildTelemetry.Version = ProjectCollection.Version;\n+                            KnownTelemetry.BuildTelemetry.DisplayVersion = ProjectCollection.DisplayVersion;\n+                            KnownTelemetry.BuildTelemetry.FrameworkName = NativeMethodsShared.FrameworkName;\n+                            NativeMethodsShared.GetOSNameForExtensionsPath();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Good catch, it is leftover after refactoring. Deleted;.",
              "createdAt": "2022-07-12T16:42:17Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -965,6 +988,36 @@ public void EndBuild()\n                         }\n \n                         loggingService.LogBuildFinished(_overallBuildSuccess);\n+\n+                        if (KnownTelemetry.BuildTelemetry != null)\n+                        {\n+                            KnownTelemetry.BuildTelemetry.FinishedAt = DateTime.UtcNow;\n+                            KnownTelemetry.BuildTelemetry.Success = _overallBuildSuccess;\n+                            KnownTelemetry.BuildTelemetry.Version = ProjectCollection.Version;\n+                            KnownTelemetry.BuildTelemetry.DisplayVersion = ProjectCollection.DisplayVersion;\n+                            KnownTelemetry.BuildTelemetry.FrameworkName = NativeMethodsShared.FrameworkName;\n+                            NativeMethodsShared.GetOSNameForExtensionsPath();",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}