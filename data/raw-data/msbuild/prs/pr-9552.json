{
  "number": 9552,
  "title": "Build properties of telemetry on fly",
  "body": "Fixes #9550\r\n\r\n### Context\r\nThere is a possibility to access LoggingConfigurationTelemetry Properties field from different threads, which makes it possible to have curruption of data. \r\nhttps://github.com/dotnet/msbuild/blob/b0e2b79230019c8f28ad7bedd82ecaa85a114761/src/Build/BackEnd/BuildManager/BuildManager.cs#L580\r\n\r\n### Changes Made\r\nUpdate access level of Properties, Lock the update or fetch properties in LoggingConfigurationTelemetry implementations. \r\n\r\n### Testing\r\nAll existing tests should pass",
  "state": "MERGED",
  "createdAt": "2023-12-15T10:31:24Z",
  "updatedAt": "2024-06-14T10:04:50Z",
  "closedAt": "2023-12-19T08:31:47Z",
  "mergedAt": "2023-12-19T08:31:47Z",
  "additions": 84,
  "deletions": 91,
  "changedFiles": 7,
  "headRefName": "dev/f-alizada/lock-logtelemtry-properties",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "63d96c7ad0e705842f5d4596033ae092ce03fac4",
          "message": "Lock Telemetry properties for updating/retrieving",
          "committedDate": "2023-12-15T10:25:10Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bae4a07805719dea74adf56a87738a6443bc0139",
          "message": "Combine GetProperties with UpdateProperties functionality. Remove public UpdateProperties from TelemetryBase",
          "committedDate": "2023-12-18T14:06:02Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28acecf45d1e247464296862f705958776567c39",
          "message": "Update summary of the method",
          "committedDate": "2023-12-18T15:47:19Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Hello! I noticed that you're targeting one of our servicing branches. Please consider updating the version.",
        "createdAt": "2023-12-15T10:31:30Z",
        "author": null
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: I would recommend to create some generic method like :\r\n```\r\n void SetPropertyIfNotNull(string propertyName, object value)\r\n{\r\n    if (value != null)\r\n    {\r\n        Properties[propertyName] = value;\r\n    }\r\n}\r\n```\r\n",
              "createdAt": "2023-12-15T12:03:10Z",
              "path": "src/Framework/Telemetry/LoggingConfigurationTelemetry.cs",
              "diffHunk": "@@ -97,54 +100,65 @@ internal class LoggingConfigurationTelemetry : TelemetryBase\n     /// </summary>\n     public bool BinaryLoggerUsedDefaultName { get; set; }\n \n-    public override void UpdateEventProperties()\n+    public override IDictionary<string, string> GetProperties()\n     {\n-        Properties[\"TerminalLogger\"] = TerminalLogger.ToString(CultureInfo.InvariantCulture);\n-\n-        if (TerminalLoggerUserIntent != null)\n+        lock (_propertiesLock)\n         {\n-            Properties[\"TerminalLoggerUserIntent\"] = TerminalLoggerUserIntent;\n-        }\n-\n-        if (TerminalLoggerUserIntentSource != null)\n-        {\n-            Properties[\"TerminalLoggerUserIntentSource\"] = TerminalLoggerUserIntentSource;\n-        }\n-\n-        if (TerminalLoggerDefault != null)\n-        {\n-            Properties[\"TerminalLoggerDefault\"] = TerminalLoggerDefault;\n-        }\n-\n-        if (TerminalLoggerDefaultSource != null)\n-        {\n-            Properties[\"TerminalLoggerDefaultSource\"] = TerminalLoggerDefaultSource;\n-        }\n-\n-        Properties[\"ConsoleLogger\"] = ConsoleLogger.ToString(CultureInfo.InvariantCulture);\n-        if (ConsoleLoggerType != null)\n-        {\n-            Properties[\"ConsoleLoggerType\"] = ConsoleLoggerType;\n-        }\n-\n-        if (ConsoleLoggerVerbosity != null)\n-        {\n-            Properties[\"ConsoleLoggerVerbosity\"] = ConsoleLoggerVerbosity;\n-        }\n-\n-        Properties[\"FileLogger\"] = FileLogger.ToString(CultureInfo.InvariantCulture);\n-        if (FileLoggerType != null)\n-        {\n-            Properties[\"FileLoggerType\"] = FileLoggerType;\n-            Properties[\"FileLoggersCount\"] = FileLoggersCount.ToString(CultureInfo.InvariantCulture);\n+            return new Dictionary<string, string>(Properties);\n         }\n+    }\n \n-        if (FileLoggerVerbosity != null)\n+    public override void UpdateEventProperties()\n+    {\n+        lock (_propertiesLock)\n         {\n-            Properties[\"FileLoggerVerbosity\"] = FileLoggerVerbosity;\n+            Properties[\"TerminalLogger\"] = TerminalLogger.ToString(CultureInfo.InvariantCulture);\n+\n+            if (TerminalLoggerUserIntent != null)\n+            {\n+                Properties[\"TerminalLoggerUserIntent\"] = TerminalLoggerUserIntent;\n+            }\n+\n+            if (TerminalLoggerUserIntentSource != null)\n+            {\n+                Properties[\"TerminalLoggerUserIntentSource\"] = TerminalLoggerUserIntentSource;\n+            }\n+\n+            if (TerminalLoggerDefault != null)\n+            {\n+                Properties[\"TerminalLoggerDefault\"] = TerminalLoggerDefault;\n+            }\n+\n+            if (TerminalLoggerDefaultSource != null)\n+            {\n+                Properties[\"TerminalLoggerDefaultSource\"] = TerminalLoggerDefaultSource;\n+            }\n+\n+            Properties[\"ConsoleLogger\"] = ConsoleLogger.ToString(CultureInfo.InvariantCulture);\n+            if (ConsoleLoggerType != null)\n+            {\n+                Properties[\"ConsoleLoggerType\"] = ConsoleLoggerType;\n+            }\n+\n+            if (ConsoleLoggerVerbosity != null)\n+            {\n+                Properties[\"ConsoleLoggerVerbosity\"] = ConsoleLoggerVerbosity;\n+            }\n+\n+            Properties[\"FileLogger\"] = FileLogger.ToString(CultureInfo.InvariantCulture);\n+            if (FileLoggerType != null)\n+            {\n+                Properties[\"FileLoggerType\"] = FileLoggerType;\n+                Properties[\"FileLoggersCount\"] = FileLoggersCount.ToString(CultureInfo.InvariantCulture);\n+            }\n+\n+            if (FileLoggerVerbosity != null)\n+            {",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Thank you for the looking into the PR! \r\nDo you mind if this kind of refactoring/improvements would be made in separate PRs? ",
              "createdAt": "2023-12-15T12:10:06Z",
              "path": "src/Framework/Telemetry/LoggingConfigurationTelemetry.cs",
              "diffHunk": "@@ -97,54 +100,65 @@ internal class LoggingConfigurationTelemetry : TelemetryBase\n     /// </summary>\n     public bool BinaryLoggerUsedDefaultName { get; set; }\n \n-    public override void UpdateEventProperties()\n+    public override IDictionary<string, string> GetProperties()\n     {\n-        Properties[\"TerminalLogger\"] = TerminalLogger.ToString(CultureInfo.InvariantCulture);\n-\n-        if (TerminalLoggerUserIntent != null)\n+        lock (_propertiesLock)\n         {\n-            Properties[\"TerminalLoggerUserIntent\"] = TerminalLoggerUserIntent;\n-        }\n-\n-        if (TerminalLoggerUserIntentSource != null)\n-        {\n-            Properties[\"TerminalLoggerUserIntentSource\"] = TerminalLoggerUserIntentSource;\n-        }\n-\n-        if (TerminalLoggerDefault != null)\n-        {\n-            Properties[\"TerminalLoggerDefault\"] = TerminalLoggerDefault;\n-        }\n-\n-        if (TerminalLoggerDefaultSource != null)\n-        {\n-            Properties[\"TerminalLoggerDefaultSource\"] = TerminalLoggerDefaultSource;\n-        }\n-\n-        Properties[\"ConsoleLogger\"] = ConsoleLogger.ToString(CultureInfo.InvariantCulture);\n-        if (ConsoleLoggerType != null)\n-        {\n-            Properties[\"ConsoleLoggerType\"] = ConsoleLoggerType;\n-        }\n-\n-        if (ConsoleLoggerVerbosity != null)\n-        {\n-            Properties[\"ConsoleLoggerVerbosity\"] = ConsoleLoggerVerbosity;\n-        }\n-\n-        Properties[\"FileLogger\"] = FileLogger.ToString(CultureInfo.InvariantCulture);\n-        if (FileLoggerType != null)\n-        {\n-            Properties[\"FileLoggerType\"] = FileLoggerType;\n-            Properties[\"FileLoggersCount\"] = FileLoggersCount.ToString(CultureInfo.InvariantCulture);\n+            return new Dictionary<string, string>(Properties);\n         }\n+    }\n \n-        if (FileLoggerVerbosity != null)\n+    public override void UpdateEventProperties()\n+    {\n+        lock (_propertiesLock)\n         {\n-            Properties[\"FileLoggerVerbosity\"] = FileLoggerVerbosity;\n+            Properties[\"TerminalLogger\"] = TerminalLogger.ToString(CultureInfo.InvariantCulture);\n+\n+            if (TerminalLoggerUserIntent != null)\n+            {\n+                Properties[\"TerminalLoggerUserIntent\"] = TerminalLoggerUserIntent;\n+            }\n+\n+            if (TerminalLoggerUserIntentSource != null)\n+            {\n+                Properties[\"TerminalLoggerUserIntentSource\"] = TerminalLoggerUserIntentSource;\n+            }\n+\n+            if (TerminalLoggerDefault != null)\n+            {\n+                Properties[\"TerminalLoggerDefault\"] = TerminalLoggerDefault;\n+            }\n+\n+            if (TerminalLoggerDefaultSource != null)\n+            {\n+                Properties[\"TerminalLoggerDefaultSource\"] = TerminalLoggerDefaultSource;\n+            }\n+\n+            Properties[\"ConsoleLogger\"] = ConsoleLogger.ToString(CultureInfo.InvariantCulture);\n+            if (ConsoleLoggerType != null)\n+            {\n+                Properties[\"ConsoleLoggerType\"] = ConsoleLoggerType;\n+            }\n+\n+            if (ConsoleLoggerVerbosity != null)\n+            {\n+                Properties[\"ConsoleLoggerVerbosity\"] = ConsoleLoggerVerbosity;\n+            }\n+\n+            Properties[\"FileLogger\"] = FileLogger.ToString(CultureInfo.InvariantCulture);\n+            if (FileLoggerType != null)\n+            {\n+                Properties[\"FileLoggerType\"] = FileLoggerType;\n+                Properties[\"FileLoggersCount\"] = FileLoggersCount.ToString(CultureInfo.InvariantCulture);\n+            }\n+\n+            if (FileLoggerVerbosity != null)\n+            {",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "As you wish :)\r\nIt's just a suggestion, feel free to ignore ",
              "createdAt": "2023-12-15T12:18:25Z",
              "path": "src/Framework/Telemetry/LoggingConfigurationTelemetry.cs",
              "diffHunk": "@@ -97,54 +100,65 @@ internal class LoggingConfigurationTelemetry : TelemetryBase\n     /// </summary>\n     public bool BinaryLoggerUsedDefaultName { get; set; }\n \n-    public override void UpdateEventProperties()\n+    public override IDictionary<string, string> GetProperties()\n     {\n-        Properties[\"TerminalLogger\"] = TerminalLogger.ToString(CultureInfo.InvariantCulture);\n-\n-        if (TerminalLoggerUserIntent != null)\n+        lock (_propertiesLock)\n         {\n-            Properties[\"TerminalLoggerUserIntent\"] = TerminalLoggerUserIntent;\n-        }\n-\n-        if (TerminalLoggerUserIntentSource != null)\n-        {\n-            Properties[\"TerminalLoggerUserIntentSource\"] = TerminalLoggerUserIntentSource;\n-        }\n-\n-        if (TerminalLoggerDefault != null)\n-        {\n-            Properties[\"TerminalLoggerDefault\"] = TerminalLoggerDefault;\n-        }\n-\n-        if (TerminalLoggerDefaultSource != null)\n-        {\n-            Properties[\"TerminalLoggerDefaultSource\"] = TerminalLoggerDefaultSource;\n-        }\n-\n-        Properties[\"ConsoleLogger\"] = ConsoleLogger.ToString(CultureInfo.InvariantCulture);\n-        if (ConsoleLoggerType != null)\n-        {\n-            Properties[\"ConsoleLoggerType\"] = ConsoleLoggerType;\n-        }\n-\n-        if (ConsoleLoggerVerbosity != null)\n-        {\n-            Properties[\"ConsoleLoggerVerbosity\"] = ConsoleLoggerVerbosity;\n-        }\n-\n-        Properties[\"FileLogger\"] = FileLogger.ToString(CultureInfo.InvariantCulture);\n-        if (FileLoggerType != null)\n-        {\n-            Properties[\"FileLoggerType\"] = FileLoggerType;\n-            Properties[\"FileLoggersCount\"] = FileLoggersCount.ToString(CultureInfo.InvariantCulture);\n+            return new Dictionary<string, string>(Properties);\n         }\n+    }\n \n-        if (FileLoggerVerbosity != null)\n+    public override void UpdateEventProperties()\n+    {\n+        lock (_propertiesLock)\n         {\n-            Properties[\"FileLoggerVerbosity\"] = FileLoggerVerbosity;\n+            Properties[\"TerminalLogger\"] = TerminalLogger.ToString(CultureInfo.InvariantCulture);\n+\n+            if (TerminalLoggerUserIntent != null)\n+            {\n+                Properties[\"TerminalLoggerUserIntent\"] = TerminalLoggerUserIntent;\n+            }\n+\n+            if (TerminalLoggerUserIntentSource != null)\n+            {\n+                Properties[\"TerminalLoggerUserIntentSource\"] = TerminalLoggerUserIntentSource;\n+            }\n+\n+            if (TerminalLoggerDefault != null)\n+            {\n+                Properties[\"TerminalLoggerDefault\"] = TerminalLoggerDefault;\n+            }\n+\n+            if (TerminalLoggerDefaultSource != null)\n+            {\n+                Properties[\"TerminalLoggerDefaultSource\"] = TerminalLoggerDefaultSource;\n+            }\n+\n+            Properties[\"ConsoleLogger\"] = ConsoleLogger.ToString(CultureInfo.InvariantCulture);\n+            if (ConsoleLoggerType != null)\n+            {\n+                Properties[\"ConsoleLoggerType\"] = ConsoleLoggerType;\n+            }\n+\n+            if (ConsoleLoggerVerbosity != null)\n+            {\n+                Properties[\"ConsoleLoggerVerbosity\"] = ConsoleLoggerVerbosity;\n+            }\n+\n+            Properties[\"FileLogger\"] = FileLogger.ToString(CultureInfo.InvariantCulture);\n+            if (FileLoggerType != null)\n+            {\n+                Properties[\"FileLoggerType\"] = FileLoggerType;\n+                Properties[\"FileLoggersCount\"] = FileLoggersCount.ToString(CultureInfo.InvariantCulture);\n+            }\n+\n+            if (FileLoggerVerbosity != null)\n+            {",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Thank you!  just wanted to keep the changes as small as possible :) Will definetly address the suggestion! ",
              "createdAt": "2023-12-15T12:21:04Z",
              "path": "src/Framework/Telemetry/LoggingConfigurationTelemetry.cs",
              "diffHunk": "@@ -97,54 +100,65 @@ internal class LoggingConfigurationTelemetry : TelemetryBase\n     /// </summary>\n     public bool BinaryLoggerUsedDefaultName { get; set; }\n \n-    public override void UpdateEventProperties()\n+    public override IDictionary<string, string> GetProperties()\n     {\n-        Properties[\"TerminalLogger\"] = TerminalLogger.ToString(CultureInfo.InvariantCulture);\n-\n-        if (TerminalLoggerUserIntent != null)\n+        lock (_propertiesLock)\n         {\n-            Properties[\"TerminalLoggerUserIntent\"] = TerminalLoggerUserIntent;\n-        }\n-\n-        if (TerminalLoggerUserIntentSource != null)\n-        {\n-            Properties[\"TerminalLoggerUserIntentSource\"] = TerminalLoggerUserIntentSource;\n-        }\n-\n-        if (TerminalLoggerDefault != null)\n-        {\n-            Properties[\"TerminalLoggerDefault\"] = TerminalLoggerDefault;\n-        }\n-\n-        if (TerminalLoggerDefaultSource != null)\n-        {\n-            Properties[\"TerminalLoggerDefaultSource\"] = TerminalLoggerDefaultSource;\n-        }\n-\n-        Properties[\"ConsoleLogger\"] = ConsoleLogger.ToString(CultureInfo.InvariantCulture);\n-        if (ConsoleLoggerType != null)\n-        {\n-            Properties[\"ConsoleLoggerType\"] = ConsoleLoggerType;\n-        }\n-\n-        if (ConsoleLoggerVerbosity != null)\n-        {\n-            Properties[\"ConsoleLoggerVerbosity\"] = ConsoleLoggerVerbosity;\n-        }\n-\n-        Properties[\"FileLogger\"] = FileLogger.ToString(CultureInfo.InvariantCulture);\n-        if (FileLoggerType != null)\n-        {\n-            Properties[\"FileLoggerType\"] = FileLoggerType;\n-            Properties[\"FileLoggersCount\"] = FileLoggersCount.ToString(CultureInfo.InvariantCulture);\n+            return new Dictionary<string, string>(Properties);\n         }\n+    }\n \n-        if (FileLoggerVerbosity != null)\n+    public override void UpdateEventProperties()\n+    {\n+        lock (_propertiesLock)\n         {\n-            Properties[\"FileLoggerVerbosity\"] = FileLoggerVerbosity;\n+            Properties[\"TerminalLogger\"] = TerminalLogger.ToString(CultureInfo.InvariantCulture);\n+\n+            if (TerminalLoggerUserIntent != null)\n+            {\n+                Properties[\"TerminalLoggerUserIntent\"] = TerminalLoggerUserIntent;\n+            }\n+\n+            if (TerminalLoggerUserIntentSource != null)\n+            {\n+                Properties[\"TerminalLoggerUserIntentSource\"] = TerminalLoggerUserIntentSource;\n+            }\n+\n+            if (TerminalLoggerDefault != null)\n+            {\n+                Properties[\"TerminalLoggerDefault\"] = TerminalLoggerDefault;\n+            }\n+\n+            if (TerminalLoggerDefaultSource != null)\n+            {\n+                Properties[\"TerminalLoggerDefaultSource\"] = TerminalLoggerDefaultSource;\n+            }\n+\n+            Properties[\"ConsoleLogger\"] = ConsoleLogger.ToString(CultureInfo.InvariantCulture);\n+            if (ConsoleLoggerType != null)\n+            {\n+                Properties[\"ConsoleLoggerType\"] = ConsoleLoggerType;\n+            }\n+\n+            if (ConsoleLoggerVerbosity != null)\n+            {\n+                Properties[\"ConsoleLoggerVerbosity\"] = ConsoleLoggerVerbosity;\n+            }\n+\n+            Properties[\"FileLogger\"] = FileLogger.ToString(CultureInfo.InvariantCulture);\n+            if (FileLoggerType != null)\n+            {\n+                Properties[\"FileLoggerType\"] = FileLoggerType;\n+                Properties[\"FileLoggersCount\"] = FileLoggersCount.ToString(CultureInfo.InvariantCulture);\n+            }\n+\n+            if (FileLoggerVerbosity != null)\n+            {",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Can you please add a comment explaining why this one requires locking while the other override in `BuildTelemetry` does not?",
              "createdAt": "2023-12-18T12:56:39Z",
              "path": "src/Framework/Telemetry/LoggingConfigurationTelemetry.cs",
              "diffHunk": "@@ -97,54 +100,65 @@ internal class LoggingConfigurationTelemetry : TelemetryBase\n     /// </summary>\n     public bool BinaryLoggerUsedDefaultName { get; set; }\n \n-    public override void UpdateEventProperties()\n+    public override IDictionary<string, string> GetProperties()",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Thank you for the review! \r\nI'm going to move the PR to draft state and will check the possibility to make those two operation atomic + changing the api of the base telemetry (most probably). ",
              "createdAt": "2023-12-18T13:35:50Z",
              "path": "src/Framework/Telemetry/LoggingConfigurationTelemetry.cs",
              "diffHunk": "@@ -97,54 +100,65 @@ internal class LoggingConfigurationTelemetry : TelemetryBase\n     /// </summary>\n     public bool BinaryLoggerUsedDefaultName { get; set; }\n \n-    public override void UpdateEventProperties()\n+    public override IDictionary<string, string> GetProperties()",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please consider moving this comment to GetProperties",
              "createdAt": "2023-12-18T14:49:10Z",
              "path": "src/Framework/Telemetry/TelemetryBase.cs",
              "diffHunk": "@@ -13,12 +13,7 @@ internal abstract class TelemetryBase\n     public abstract string EventName { get; }\n \n     /// <summary>\n-    /// Gets or sets a list of properties associated with the event.\n+    /// Fetches current properties wrapped in Dictionary\n     /// </summary>\n-    public IDictionary<string, string> Properties { get; set; } = new Dictionary<string, string>();\n-\n-    /// <summary>\n-    /// Translate all derived type members into properties which will be used to build <see cref=\"TelemetryEventArgs\"/>.",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Thank you! Updated the comment ",
              "createdAt": "2023-12-18T15:48:11Z",
              "path": "src/Framework/Telemetry/TelemetryBase.cs",
              "diffHunk": "@@ -13,12 +13,7 @@ internal abstract class TelemetryBase\n     public abstract string EventName { get; }\n \n     /// <summary>\n-    /// Gets or sets a list of properties associated with the event.\n+    /// Fetches current properties wrapped in Dictionary\n     /// </summary>\n-    public IDictionary<string, string> Properties { get; set; } = new Dictionary<string, string>();\n-\n-    /// <summary>\n-    /// Translate all derived type members into properties which will be used to build <see cref=\"TelemetryEventArgs\"/>.",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}