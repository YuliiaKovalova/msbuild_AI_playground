{
  "number": 3625,
  "title": "Add ContainsItem item intrinsic function",
  "body": "Realized this is really cumbersome to do during evaluation time.",
  "state": "CLOSED",
  "createdAt": "2018-08-17T00:57:37Z",
  "updatedAt": "2020-12-30T22:53:05Z",
  "closedAt": "2018-08-17T16:08:58Z",
  "mergedAt": null,
  "additions": 54,
  "deletions": 0,
  "changedFiles": 2,
  "headRefName": "AddContainsItem",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4919c286d3bbf5cf1740860eefaea2b8c4e21b94",
          "message": "Add ContainsItem item intrinsic function",
          "committedDate": "2018-08-17T00:56:46Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Closing as I didn't think of `AnyHaveMetadataValue('Identity', whatever)`. No use adding multiple ways to do the same thing, and the metadata function is not that bad.",
        "createdAt": "2018-08-17T16:08:58Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This is pretty different from the return pattern in `AnyHaveMetadataValue` which is otherwise similar:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/4919c286d3bbf5cf1740860eefaea2b8c4e21b94/src/Build/Evaluation/Expander.cs#L2615-L2627\r\n\r\nDo you know what changes downstream if we don't return the first matching item?",
              "createdAt": "2018-08-17T14:53:10Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -2553,6 +2553,30 @@ internal static ItemTransformFunction GetItemTransformFunction(IElementLocation\n                     }\n                 }\n \n+                /// <summary>\n+                /// Intrinsic function that returns a boolean to indicate if any of the items have the given value\n+                /// Using a case insensitive comparison\n+                /// </summary>\n+                internal static IEnumerable<Pair<string, S>> ContainsItem(Expander<P, I> expander, IElementLocation elementLocation, bool includeNullEntries, string functionName, IEnumerable<Pair<string, S>> itemsOfType, string[] arguments)\n+                {\n+                    ProjectErrorUtilities.VerifyThrowInvalidProject(arguments != null && arguments.Length == 1, elementLocation, \"InvalidItemFunctionSyntax\", functionName, (arguments == null ? 0 : arguments.Length));\n+\n+                    var hasItem = false;\n+\n+                    var searchedItem = arguments[0];\n+\n+                    foreach (var item in itemsOfType)\n+                    {\n+                        if (item.Key.Equals(searchedItem, StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            hasItem = true;\n+                            break;\n+                        }\n+                    }\n+\n+                    yield return new Pair<string, S>(hasItem ? \"true\" : \"false\", null /* no base item */);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}