{
  "number": 6040,
  "title": "Tasks `Log.HasLoggedError` now respects `MSBuildWarningsAsErrors`",
  "body": "Fixes #5511\r\n\r\n### Context\r\nTasks have a Log.HasLoggedErrors property that does not respect warnings that were thrown as errors when listed under `MSBuildWarningsAsErrors`.\r\n\r\nFor an easier code review, commits 1 & 3 are the most relevant. Then check the main diff.\r\n\r\n### Changes Made\r\n- `LoggingService` now exposes its `ShouldLogWarningAsError` method through the `ILoggingService` interface.\r\n- IBuildEngine8 exposes a `HashSet<string>` that contains all warning codes that were logged as errors.\r\n- TaskHost adds all warning codes that were logged as errors to a HashSet<string>.\r\n- The TaskLoggingHelper's `HasLoggedErrors` property returns whether it logged an error OR if its build engine has thrown a warning that the task previously logged.\r\n\r\n### Testing\r\n- [x] Confirmed this fixes the repro in the linked issue.\r\n- [ ] Need to test batched builds, as a `TaskHost` is generated per 'bucket'\r\n\r\n### Notes\r\nComment from Rainer in previous PR about this: https://github.com/dotnet/msbuild/pull/5957 \r\n\r\n> The PR that introduced warning-as-error is #1355--#1928 extended it to allow the project level properties.\r\n> \r\n> Since that's done in the logging infrastructure rather than at the point of logging, I think that's the problem. Unfortunately I don't know if there's an easy way to move it. Can you investigate that angle? Is the warning-as-errors stuff available in TaskHost and if not how hard would it be to get it there?\r\n> \r\n> I don't think we should attack the problem for TaskLoggingHelper alone--if you attack it at the IBuildEngine API layer, it'll work for everything, not just tasks that use the helper classes.",
  "state": "CLOSED",
  "createdAt": "2021-01-15T02:59:59Z",
  "updatedAt": "2021-02-18T21:49:59Z",
  "closedAt": "2021-02-18T21:49:59Z",
  "mergedAt": null,
  "additions": 140,
  "deletions": 5,
  "changedFiles": 13,
  "headRefName": "warningsaserrors-fix",
  "isDraft": true,
  "author": {
    "login": "benvillalobos"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e214725557a3128a7e3663a3bdd0f82ccc5e2c8a",
          "message": "WIP - added method to ILoggingService to expose whether a warning code would be an error",
          "committedDate": "2021-01-12T23:06:51Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "99de27df9422908e4a4263b7194f7236ec1e3009",
          "message": "WIP add ibuildengine8 and an event that notifies tasks when it logs a warning as an error",
          "committedDate": "2021-01-13T02:57:01Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1448bd0f5931274f61227515ad5d9e6fd2035664",
          "message": "TaskHost now exposes what warnings codes it converted into errors.",
          "committedDate": "2021-01-15T02:29:44Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "70489c6e7e813a1b07ea4184108f9a32a39bdf21",
          "message": "Code cleanup",
          "committedDate": "2021-01-15T02:59:33Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Brain dump:\r\nWhat if we made all `HasLoggedWarning` methods return a boolean, where true = success and false = turned into error.\r\nLogWarning -> BuildEngine.LogWarning -/> LoggingService.LogWarning . It breaks between BuildEngine.LogWarning and LoggingService.LogWarning because the logging is done async.\r\n- Actually, after it calls the async function we could potentially return true or false. However, this would change the signature of every `LogWarning` method.\r\n\r\nThe problem in general with fixing this is that it would require overhauling how warnings are turned into errors. The current implementation is that everything generically gets logged and potentially sent async to a queue of generic build events. It then gets processed and converted accordingly, but by the time it's processed we can't tell the task that logged the warning that it was converted to an error.\r\n\r\nI thought about trying to use the `HasBuildSubmissionLoggedError` method exposed by `ILoggingService`, but a build submission is more than a single task execution.\r\n\r\n### Potential solutions\r\n1. Change signature of LogWarning to acount for whether or not it was logged as a warning or an error.\r\n2. Get the set of warnings that will be turned into errors and give it to the TaskHost as it's created.\r\n   - How does this affect the outofproc task host?",
        "createdAt": "2021-01-20T22:27:08Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "NTS: Current latest is on `warnaserr-fix` branch.",
        "createdAt": "2021-02-09T01:07:22Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this thread safe?",
              "createdAt": "2021-01-22T16:30:17Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -1016,6 +1043,9 @@ public void LogWarning\n             // that gives the user something.\n             bool fillInLocation = (String.IsNullOrEmpty(file) && (lineNumber == 0) && (columnNumber == 0));\n \n+            // Keep track of warnings logged and compare to the what the build engine logged as an error.\n+            _warningCodesLogged.Add(warningCode);",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Likely not, I can add a lock here.\r\n\r\nPart of me wants to give every taskhost (on creation) the entire set of warnings as errors. Then I can make every task logger check their taskhost and, instead of logging a warning that will eventually be turned into an error, just have it log the error ahead of time.\r\n\r\nThat'd require:\r\n1. Making sure every logger has access to a taskhost (or the set of warningsaserrors)\r\n2. Ensuring every logger does this check when they want to log a warning\r\n3. Ensuring this isn't a breaking change somehow\r\n \r\nNot sure exactly how this would affect an outofproc task host. Any thoughts or suggestions?",
              "createdAt": "2021-01-22T17:23:32Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -1016,6 +1043,9 @@ public void LogWarning\n             // that gives the user something.\n             bool fillInLocation = (String.IsNullOrEmpty(file) && (lineNumber == 0) && (columnNumber == 0));\n \n+            // Keep track of warnings logged and compare to the what the build engine logged as an error.\n+            _warningCodesLogged.Add(warningCode);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Yea, either lock (this class apparently already has a lock object) or concurrent collection.\r\n\r\nRegarding the entire-set-of-warnings-for-each-taskhost approach, there's two benefits right?\r\n- it works with out of proc task host whereas the current approach doesn't because the out of proc task host does not have access to a logging service.\r\n- it's easier to reason about\r\n\r\n---\r\nIn reply to: [562785330](https://github.com/dotnet/msbuild/pull/6040#discussion_r562785330) [](ancestors = 562785330)",
              "createdAt": "2021-01-30T00:59:06Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -1016,6 +1043,9 @@ public void LogWarning\n             // that gives the user something.\n             bool fillInLocation = (String.IsNullOrEmpty(file) && (lineNumber == 0) && (columnNumber == 0));\n \n+            // Keep track of warnings logged and compare to the what the build engine logged as an error.\n+            _warningCodesLogged.Add(warningCode);",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}