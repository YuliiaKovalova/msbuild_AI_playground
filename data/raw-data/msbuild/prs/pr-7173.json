{
  "number": 7173,
  "title": "Random cleanup",
  "body": "I was doing this as part of the TaskHost change. In most cases, it made it easier to understand why tests were failing. Then I went a little further on a couple points, most notably exceptions.\r\n\r\nI think the commits are pretty clean. Most are also quite short.",
  "state": "MERGED",
  "createdAt": "2021-12-29T19:33:54Z",
  "updatedAt": "2022-01-11T15:21:42Z",
  "closedAt": "2022-01-11T15:21:40Z",
  "mergedAt": "2022-01-11T15:21:40Z",
  "additions": 272,
  "deletions": 763,
  "changedFiles": 59,
  "headRefName": "clean-taskhost",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ece10a6f8da311983dcf0ed68f807d73990046df",
          "message": "Use Shouldly",
          "committedDate": "2021-12-29T17:59:37Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d3d7f3c0c4ef299745b0c8ffd7638efabc17f93e",
          "message": "Delete ToolsVersion and xmlns",
          "committedDate": "2021-12-29T17:59:37Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dcf30e57a7ef1b3e504cb77c14d7216faaf85e26",
          "message": "new() without type",
          "committedDate": "2021-12-29T17:59:37Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f4b6729f43c66567c1e6c7658d65efc07d8bf77f",
          "message": "Use $ to format string literals",
          "committedDate": "2021-12-29T17:59:37Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6eb5b4808be87b9e491dc99bcec2026786440740",
          "message": "Clean up exceptions",
          "committedDate": "2021-12-29T19:18:49Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "67b91d93fabb63bd98d0b0143e8033dd8cb732e6",
          "message": "Inline variable declaration",
          "committedDate": "2021-12-29T19:32:20Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e66628f3fd29fe7c0a81ff79ab06e603f8692e35",
          "message": "=> for simple methods",
          "committedDate": "2021-12-29T19:32:20Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c669c980405a1901dc9f2e7d438d10183d61c7a7",
          "message": "Add space",
          "committedDate": "2022-01-06T19:01:55Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cd50fe3b62a67b02af54edeaf98b7f88ba62d673",
          "message": "PR comments",
          "committedDate": "2022-01-06T19:02:01Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d609930a1ebfebec27472cd73c30a7d2a671f3ab",
          "message": "Use named functions to clarify meaning of exceptions",
          "committedDate": "2022-01-10T19:07:50Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "59b556e602bf40297c8955a4a4aebefcad8e3b69",
          "message": "Use ContainsKey",
          "committedDate": "2022-01-10T22:50:22Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "While we're here might as well bring back the message:\r\n\r\n```suggestion\r\n                project.Build(logger).ShouldBeTrue(\"Build failed.  See test output (Attachments in Azure Pipelines) for details\");\r\n```",
              "createdAt": "2022-01-05T17:26:12Z",
              "path": "src/Build.UnitTests/EscapingInProjects_Tests.cs",
              "diffHunk": "@@ -734,8 +735,7 @@ public void EscapedWildcardsShouldNotBeExpanded_InTaskHost()\n                 </Project>\n                 \");\n \n-                bool success = project.Build(logger);\n-                Assert.True(success); // \"Build failed.  See test output (Attachments in Azure Pipelines) for details\"\n+                project.Build(logger).ShouldBeTrue(); // \"Build failed.  See test output (Attachments in Azure Pipelines) for details\"",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I personally prefer the whitespace here; do you feel strongly about it?",
              "createdAt": "2022-01-05T17:28:22Z",
              "path": "src/Utilities/MuxLogger.cs",
              "diffHunk": "@@ -651,7 +651,6 @@ private void RaiseMessageEvent(object sender, BuildMessageEventArgs buildEvent)\n                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings\n                             // if a fellow logger is throwing in an event handler.\n                             UnregisterAllEventHandlers();\n-",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Only a slight preference, but I do have a stronger preference for either whitespace or no whitespace rather than mixed\u2014the catch (LoggerException) right above this has no space, for instance.",
              "createdAt": "2022-01-06T00:54:40Z",
              "path": "src/Utilities/MuxLogger.cs",
              "diffHunk": "@@ -651,7 +651,6 @@ private void RaiseMessageEvent(object sender, BuildMessageEventArgs buildEvent)\n                             // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings\n                             // if a fellow logger is throwing in an event handler.\n                             UnregisterAllEventHandlers();\n-",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this is actually different, and you should not make this change: `throw e;` and `throw;` have different results, because `throw e;` throws _from this stack location_, while `throw;` _rethrows_ the existing exception with its own stack location.",
              "createdAt": "2022-01-05T21:00:50Z",
              "path": "src/Shared/BuildEnvironmentHelper.cs",
              "diffHunk": "@@ -51,14 +51,8 @@ public static BuildEnvironment Instance\n                 }\n                 catch (TypeInitializationException e)\n                 {\n-                    if (e.InnerException != null)\n-                    {\n-                        // Throw the error that caused the TypeInitializationException.\n-                        // (likely InvalidOperationException)\n-                        throw e.InnerException;\n-                    }\n-\n-                    throw;\n+                    // Throw the error that caused the TypeInitializationException, likely InvalidOperationException.\n+                    throw e.InnerException ?? e;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "In other cases you dropped the comment. Why not here?",
              "createdAt": "2022-01-05T21:03:40Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1447,18 +1437,13 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo\n \n                                 return false;\n                             }\n-                            catch (Exception e) // Catching Exception, but rethrowing unless it's a well-known exception.\n+                            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e)) // Catching Exception, but rethrowing unless it's a well-known exception.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "In other cases you dropped the comment. Why not here?",
              "createdAt": "2022-01-05T21:03:41Z",
              "path": "src/Build/Instance/TaskRegistry.cs",
              "diffHunk": "@@ -1447,18 +1437,13 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo\n \n                                 return false;\n                             }\n-                            catch (Exception e) // Catching Exception, but rethrowing unless it's a well-known exception.\n+                            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e)) // Catching Exception, but rethrowing unless it's a well-known exception.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            catch (DirectoryNotFoundException e) when (e is DirectoryNotFoundException || e is UnauthorizedAccessException)\r\n```\r\n\r\ninstead?",
              "createdAt": "2022-01-05T21:08:50Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -1005,14 +1005,14 @@ private ITranslator GetConfigurationTranslator(TranslationDirection direction)\n                     return BinaryTranslator.GetReadTranslator(File.OpenRead(cacheFile), null);\n                 }\n             }\n-            catch (Exception e)\n+            catch (DirectoryNotFoundException e)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't understand the \"handle them the same\" part of this comment. Maybe just delete the comment?",
              "createdAt": "2022-01-05T21:25:27Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -824,17 +815,7 @@ private async Task BuildAndReport()\n \n                 thrownException = ex;\n             }\n-            catch (LoggerException ex)\n-            {\n-                // Polite logger failure\n-                thrownException = ex;\n-            }\n-            catch (InternalLoggerException ex)\n-            {\n-                // Logger threw arbitrary exception\n-                thrownException = ex;\n-            }\n-            catch (Exception ex)\n+            catch (Exception ex) // LoggerException is a polite logger failure. InternalLoggerException is an arbitrary exception. Handle them the same.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do you think it's ok to catch this now? Or should we leave the comment that we shouldn't be but are \"temporarily\"?",
              "createdAt": "2022-01-05T21:27:14Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1640,14 +1596,10 @@ private void DisplayCancelWaitMessage()\n             {\n                 _taskLoggingContext.LogWarningFromText(null, warningCode, helpKeyword, new BuildEventFileInfo(_taskLocation), message);\n             }\n-            catch (InternalErrorException) // BUGBUG, should never catch this",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This didn't really sound like it was a bug to me. Sure, it would be better if we never threw that exception, and we could accomplish something like that by having something to check whether we were cancelled before throwing, but having a catch feels equivalent to me as long as there aren't other ways internal exceptions can come through here. Perhaps it would be slightly better if we had `catch (InternalException) when (!_taskLoggingContext.IsValid && weWerentCancelled)`, but for a try/catch around a single logging statement, that feels like overkill.",
              "createdAt": "2022-01-06T19:12:12Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1640,14 +1596,10 @@ private void DisplayCancelWaitMessage()\n             {\n                 _taskLoggingContext.LogWarningFromText(null, warningCode, helpKeyword, new BuildEventFileInfo(_taskLocation), message);\n             }\n-            catch (InternalErrorException) // BUGBUG, should never catch this",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are we sure this change does not affect test code path. I mean does it do exactly same as before?",
              "createdAt": "2022-01-10T15:18:42Z",
              "path": "src/Build.UnitTests/EscapingInProjects_Tests.cs",
              "diffHunk": "@@ -715,14 +716,14 @@ public void EscapedWildcardsShouldNotBeExpanded()\n         [Trait(\"Category\", \"mono-osx-failing\")]\n         public void EscapedWildcardsShouldNotBeExpanded_InTaskHost()\n         {\n-            MockLogger logger = new MockLogger();\n+            MockLogger logger = new();\n \n             try\n             {\n                 // Populate the project directory with three physical files on disk -- a.weirdo, b.weirdo, c.weirdo.\n                 EscapingInProjectsHelper.CreateThreeWeirdoFiles();\n                 Project project = ObjectModelHelpers.CreateInMemoryProject(@\"\n-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I believe so. Every time I've asked about them, the answer has been that it's a red herring because they don't do anything. Since they're still supported, it can be useful to make sure there's at least a few cases somewhere in our code base, but there are currently plenty. Also, I think dfederm has a PR out to remove a lot more.",
              "createdAt": "2022-01-10T19:51:17Z",
              "path": "src/Build.UnitTests/EscapingInProjects_Tests.cs",
              "diffHunk": "@@ -715,14 +716,14 @@ public void EscapedWildcardsShouldNotBeExpanded()\n         [Trait(\"Category\", \"mono-osx-failing\")]\n         public void EscapedWildcardsShouldNotBeExpanded_InTaskHost()\n         {\n-            MockLogger logger = new MockLogger();\n+            MockLogger logger = new();\n \n             try\n             {\n                 // Populate the project directory with three physical files on disk -- a.weirdo, b.weirdo, c.weirdo.\n                 EscapingInProjectsHelper.CreateThreeWeirdoFiles();\n                 Project project = ObjectModelHelpers.CreateInMemoryProject(@\"\n-                <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`http://schemas.microsoft.com/developer/msbuild/2003`>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "NIT: I prefer separation of action and assert as I believe it is more readable and maintainable.",
              "createdAt": "2022-01-10T15:20:04Z",
              "path": "src/Build.UnitTests/EscapingInProjects_Tests.cs",
              "diffHunk": "@@ -734,8 +735,7 @@ public void EscapedWildcardsShouldNotBeExpanded_InTaskHost()\n                 </Project>\n                 \");\n \n-                bool success = project.Build(logger);\n-                Assert.True(success); // \"Build failed.  See test output (Attachments in Azure Pipelines) for details\"\n+                project.Build(logger).ShouldBeTrue(\"Build failed.  See test output (Attachments in Azure Pipelines) for details\");",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "For complicated cases, I agree. Here, build succeeding/failing in a test is a very common pattern, and it's only asserting truthiness, so I prefer one line.",
              "createdAt": "2022-01-10T19:54:56Z",
              "path": "src/Build.UnitTests/EscapingInProjects_Tests.cs",
              "diffHunk": "@@ -734,8 +735,7 @@ public void EscapedWildcardsShouldNotBeExpanded_InTaskHost()\n                 </Project>\n                 \");\n \n-                bool success = project.Build(logger);\n-                Assert.True(success); // \"Build failed.  See test output (Attachments in Azure Pipelines) for details\"\n+                project.Build(logger).ShouldBeTrue(\"Build failed.  See test output (Attachments in Azure Pipelines) for details\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please consider to use `ContainsKey` instead.",
              "createdAt": "2022-01-10T15:41:17Z",
              "path": "src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs",
              "diffHunk": "@@ -455,9 +455,8 @@ internal static string GetMSBuildLocationFromHostContext(HandshakeOptions hostCo\n         /// </summary>\n         internal bool AcquireAndSetUpHost(HandshakeOptions hostContext, INodePacketFactory factory, INodePacketHandler handler, TaskHostConfiguration configuration)\n         {\n-            NodeContext context;\n             bool nodeCreationSucceeded;\n-            if (!_nodeContexts.TryGetValue(hostContext, out context))\n+            if (!_nodeContexts.TryGetValue(hostContext, out _))",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Make a named function here.",
              "createdAt": "2022-01-10T16:57:33Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -288,19 +288,10 @@ public void WaitForCancelCompletion()\n                 {\n                     taskCleanedUp = _requestTask.Wait(BuildParameters.RequestBuilderShutdownTimeout);\n                 }\n-                catch (AggregateException e)\n+                catch (AggregateException e) when (e.Flatten().InnerExceptions.All(ex => ex is TaskCanceledException || ex is OperationCanceledException))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It is not equivalent: `ex.InnerException is ConfigurationErrorsException` is also true for all exceptions derived from ConfigurationErrorsException while `ex.InnerException.GetType() != typeof(ConfigurationErrorsException` test exact type.\r\nFrom logic of the code your version is most probably better because if runtime creates new exception derived from  `ConfigurationErrorsException` our code would not need to change and will continue to work as intended.\r\nPlease verify that this is correct behavior.",
              "createdAt": "2022-01-10T18:58:18Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -137,17 +137,12 @@ static MSBuildApp()\n \n                 s_initialized = true;\n             }\n-            catch (TypeInitializationException ex)\n-            {\n-                if (ex.InnerException == null\n-#if !FEATURE_SYSTEM_CONFIGURATION\n-                )\n-#else\n-                    || ex.InnerException.GetType() != typeof(ConfigurationErrorsException))\n+            catch (TypeInitializationException ex) when (ex.InnerException is not null\n+#if FEATURE_SYSTEM_CONFIGURATION\n+            && ex.InnerException is ConfigurationErrorsException",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Good point\u2014I hadn't noticed that. I'll try to think about whether this is valid after my meeting.",
              "createdAt": "2022-01-10T19:59:18Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -137,17 +137,12 @@ static MSBuildApp()\n \n                 s_initialized = true;\n             }\n-            catch (TypeInitializationException ex)\n-            {\n-                if (ex.InnerException == null\n-#if !FEATURE_SYSTEM_CONFIGURATION\n-                )\n-#else\n-                    || ex.InnerException.GetType() != typeof(ConfigurationErrorsException))\n+            catch (TypeInitializationException ex) when (ex.InnerException is not null\n+#if FEATURE_SYSTEM_CONFIGURATION\n+            && ex.InnerException is ConfigurationErrorsException",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Having looked at it a little, I think this should be legitimate. Actually, I think any ConfigurationException should be valid, but a ConfigurationErrorsException is a ConfigurationException, and this stays closer to what it was before, so I think this is good enough. Sound reasonable to you?",
              "createdAt": "2022-01-10T22:50:08Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -137,17 +137,12 @@ static MSBuildApp()\n \n                 s_initialized = true;\n             }\n-            catch (TypeInitializationException ex)\n-            {\n-                if (ex.InnerException == null\n-#if !FEATURE_SYSTEM_CONFIGURATION\n-                )\n-#else\n-                    || ex.InnerException.GetType() != typeof(ConfigurationErrorsException))\n+            catch (TypeInitializationException ex) when (ex.InnerException is not null\n+#if FEATURE_SYSTEM_CONFIGURATION\n+            && ex.InnerException is ConfigurationErrorsException",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes, I also think it is better this way.",
              "createdAt": "2022-01-10T23:47:53Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -137,17 +137,12 @@ static MSBuildApp()\n \n                 s_initialized = true;\n             }\n-            catch (TypeInitializationException ex)\n-            {\n-                if (ex.InnerException == null\n-#if !FEATURE_SYSTEM_CONFIGURATION\n-                )\n-#else\n-                    || ex.InnerException.GetType() != typeof(ConfigurationErrorsException))\n+            catch (TypeInitializationException ex) when (ex.InnerException is not null\n+#if FEATURE_SYSTEM_CONFIGURATION\n+            && ex.InnerException is ConfigurationErrorsException",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`i != 5` is not equivalent of `i < 5`. I like this change as it is, if I understand it correctly, safer against infinite loop.\r\nI don't think of any negative consequences of the code as is, do you?",
              "createdAt": "2022-01-10T19:02:39Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -487,17 +487,13 @@ private static Delegate CreateDelegateRobust(Type type, Object firstArgument, Me\n                     delegateMethod = methodInfo.CreateDelegate(type, firstArgument);\n #endif\n                 }\n-                catch (FileLoadException)\n+                catch (FileLoadException) when (i < 5)",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Yeah; I think it's good.",
              "createdAt": "2022-01-10T20:01:09Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -487,17 +487,13 @@ private static Delegate CreateDelegateRobust(Type type, Object firstArgument, Me\n                     delegateMethod = methodInfo.CreateDelegate(type, firstArgument);\n #endif\n                 }\n-                catch (FileLoadException)\n+                catch (FileLoadException) when (i < 5)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Leaving this case of 3+ clauses in because I'd added a comment previously.",
              "createdAt": "2022-01-10T19:02:56Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1395,14 +1360,10 @@ object parameterValue\n                     new BuildEventFileInfo(_taskLocation),\n                     _taskName);\n             }\n-            catch (Exception e)\n+            // If a logger has failed, abort immediately. This is the polite LoggerException.\n+            // InternalLoggerException is an arbitrary logger exception.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Same",
              "createdAt": "2022-01-10T19:04:00Z",
              "path": "src/Build/Logging/LoggerDescription.cs",
              "diffHunk": "@@ -167,22 +167,10 @@ internal IForwardingLogger CreateForwardingLogger()\n                     InternalLoggerException.Throw(null, null, \"LoggerNotFoundError\", true, this.Name);\n                 }\n             }\n-            catch (Exception e /* Wrap all other exceptions in a more meaningful exception*/)\n+            catch (Exception e) // Wrap other exceptions in a more meaningful exception. LoggerException and InternalLoggerException are already meaningful.\n+            when (!(e is LoggerException /* Polite logger Failure*/ || e is InternalLoggerException /* LoggerClass not found*/ || ExceptionHandling.IsCriticalException(e)))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why not just throw le? (I saw the comment, but I don't see why making a new exception would preserve the stack trace, whereas throwing the exception that had the stack trace wouldn't.)",
              "createdAt": "2022-01-10T19:04:37Z",
              "path": "src/Build/Logging/LoggerDescription.cs",
              "diffHunk": "@@ -238,25 +226,15 @@ private ILogger CreateLogger(bool forwardingLogger)\n                 string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"LoggerInstantiationFailureErrorInvalidCast\", _loggerClassName, _loggerAssembly.AssemblyLocation, e.Message);\n                 throw new LoggerException(message, e.InnerException);\n             }\n-            catch (TargetInvocationException e)\n+            catch (TargetInvocationException e) when (e.InnerException is LoggerException le)\n             {\n                 // At this point, the interesting stack is the internal exception;\n                 // the outer exception is System.Reflection stuff that says nothing\n                 // about the nature of the logger failure.\n-                Exception innerException = e.InnerException;\n-\n-                if (innerException is LoggerException)\n-                {\n-                    // Logger failed politely during construction. In order to preserve\n-                    // the stack trace at which the error occurred we wrap the original\n-                    // exception instead of throwing.\n-                    LoggerException l = ((LoggerException)innerException);\n-                    throw new LoggerException(l.Message, innerException, l.ErrorCode, l.HelpKeyword);\n-                }\n-                else\n-                {\n-                    throw;\n-                }\n+                // Logger failed politely during construction. In order to preserve\n+                // the stack trace at which the error occurred we wrap the original\n+                // exception instead of throwing.\n+                throw new LoggerException(le.Message, le, le.ErrorCode, le.HelpKeyword);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please consider to move this comment to new code somehow. I believe it is worthy comment.",
              "createdAt": "2022-01-10T19:05:22Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -877,19 +877,10 @@ internal static void DeleteDirectory(string dir)\n \n                     break;\n                 }\n-                catch (Exception ex)\n+                // After all the retries fail, we fail with the actual problem instead of some difficult-to-understand issue later.\n+                catch (Exception ex) when (retries < 4)\n                 {\n-                    if (retries < 4)\n-                    {\n-                        Console.WriteLine(ex.ToString());\n-                    }\n-                    else\n-                    {\n-                        // All the retries have failed. We will now fail with the",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I put it right above the catch.",
              "createdAt": "2022-01-10T22:41:09Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -877,19 +877,10 @@ internal static void DeleteDirectory(string dir)\n \n                     break;\n                 }\n-                catch (Exception ex)\n+                // After all the retries fail, we fail with the actual problem instead of some difficult-to-understand issue later.\n+                catch (Exception ex) when (retries < 4)\n                 {\n-                    if (retries < 4)\n-                    {\n-                        Console.WriteLine(ex.ToString());\n-                    }\n-                    else\n-                    {\n-                        // All the retries have failed. We will now fail with the",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please keep this comment somewhere.",
              "createdAt": "2022-01-10T19:05:45Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -924,19 +915,10 @@ internal static string CreateFileInTempProjectDirectory(string fileRelativePath,\n                     }\n                     break;\n                 }\n-                catch (Exception ex)\n+                // After all the retries fail, we fail with the actual problem instead of some difficult-to-understand issue later.\n+                catch (Exception ex) when (retries < 4)\n                 {\n-                    if (retries < 4)\n-                    {\n-                        Console.WriteLine(ex.ToString());\n-                    }\n-                    else\n-                    {\n-                        // All the retries have failed. We will now fail with the",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I put it above the catch.",
              "createdAt": "2022-01-10T22:41:16Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -924,19 +915,10 @@ internal static string CreateFileInTempProjectDirectory(string fileRelativePath,\n                     }\n                     break;\n                 }\n-                catch (Exception ex)\n+                // After all the retries fail, we fail with the actual problem instead of some difficult-to-understand issue later.\n+                catch (Exception ex) when (retries < 4)\n                 {\n-                    if (retries < 4)\n-                    {\n-                        Console.WriteLine(ex.ToString());\n-                    }\n-                    else\n-                    {\n-                        // All the retries have failed. We will now fail with the",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}