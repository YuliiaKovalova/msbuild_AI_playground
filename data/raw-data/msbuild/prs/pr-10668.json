{
  "number": 10668,
  "title": "Proto/buildcheck warns promotability",
  "body": "Fixes #10618 and #10071\r\n\r\n### Context\r\nThere are 2 problems:\r\n\r\n* BuildCheck diagnostics created during evaluation, couldn't be promoted/demoted - as Warn2Errors/Warn2Messages is only set AFTER evaluation is done.\r\n* The WarnAsErrors and WarnAsMessges and others (WarningsNotAsErrors, global, per code, per project ...) used to be set only in the logging service that performed the build request, but not in the main node. Hence if buildcheck errors were created in main node - there were not properly processed\r\n\r\n### Changes Made\r\n* BuildCheck warnings created during evaluation are buffered and reported deffered, only once the Evaluation is done\r\n* Warn2Errors/Warn2Messages state is being (de)serialized and communicated from worker node to main node via `ProjectStartedEventArgs`\r\n\r\n### Alternatives\r\n\r\nWe still need the delayed reporting of the BuildCheckWarnings that happens during evaluation - there is no way around it (otherwise they would not respect WarnAsError property that's only recognized during evaluation).\r\n\r\nWe as well need to send the WarnAsError information back to main node - as it is only present in the worker node, but the BuildCheck creates diagnostics in the main node.\r\n\r\nThere are alternatives in how we send the WarnAsError information back to main node:\r\n\r\n1. Sending it before `ProjectEvaluationFinishedEventArgs` - only a tailored event for this specific eval info would be possible (as no other event has guarantee of such data being available) - that has disadvantages of introducing new event + disadvantages of using `ProjectEvaluationFinishedEventArgs`\r\n2. We could send that with `ProjectEvaluationFinishedEventArgs` - however at that point of time we do not yet have `ProjectContextId` available (it's only created with creation of `ProjectStartedEventArgs`) - so we would not be able to fully mount the data in receiving LoggingService\r\n3. `ProjectStartedEventArgs` - current implementation\r\n4. post `ProjectStartedEventArgs` - then all info is available, but we are unnecesarily holding of too long. Hence some buildchek diagnostics can be created post evaluation, but prior this event.\r\n\r\n### Testing\r\nTailored E2E test added for promoting/demoting of diagnostic warning created during evaluation.\r\n",
  "state": "MERGED",
  "createdAt": "2024-09-16T12:51:15Z",
  "updatedAt": "2024-09-16T19:46:06Z",
  "closedAt": "2024-09-16T19:46:05Z",
  "mergedAt": "2024-09-16T19:46:05Z",
  "additions": 415,
  "deletions": 41,
  "changedFiles": 18,
  "headRefName": "proto/buildcheck-warns-promotability",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a808cf8b2416396ccfa27e23e59c0282aa24c556",
          "message": "Initial version of evaluation time warnings deferring",
          "committedDate": "2024-09-13T17:07:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d3f5e3b690c11abc46f5133ab17f66dc5a81b4c4",
          "message": "Transfer the warn as error/msg info via event args",
          "committedDate": "2024-09-16T12:44:20Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0a60ee769e762564e60663aa3a9bd3e830c08079",
          "message": "Reflect PR review suggestions",
          "committedDate": "2024-09-16T13:28:36Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b7295e730ccabc305ec979607ecbc6cccd850d90",
          "message": "Accomodate buildcheck build errors happening in the main node",
          "committedDate": "2024-09-16T17:34:30Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5f4438018d17ecd335e07800917e97d4fc4a49a6",
          "message": "Tailor the build error case for buildcheck",
          "committedDate": "2024-09-16T19:08:08Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this variable needed? I don't see it's usage...",
              "createdAt": "2024-09-16T13:01:41Z",
              "path": "src/Build.UnitTests/BackEnd/MockLoggingService.cs",
              "diffHunk": "@@ -550,6 +550,33 @@ public BuildEventContext LogProjectStarted(\n             return new BuildEventContext(0, 0, 0, 0);\n         }\n \n+        public void LogProjectStarted(ProjectStartedEventArgs args)\n+        { }\n+\n+        public ProjectStartedEventArgs CreateProjectStarted(\n+            BuildEventContext nodeBuildEventContext,\n+            int submissionId,\n+            int configurationId,\n+            BuildEventContext parentBuildEventContext,\n+            string projectFile,\n+            string targetNames,\n+            IEnumerable<DictionaryEntry> properties,\n+            IEnumerable<DictionaryEntry> items,\n+            int evaluationId = BuildEventContext.InvalidEvaluationId,\n+            int projectContextId = BuildEventContext.InvalidProjectContextId)\n+        {\n+            var ctx = new BuildEventContext(0, 0, 0, 0);",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This method should be probably named `WriteStringCollection` (and the param name `collection`) as this method accepts `ICollection<string>`.",
              "createdAt": "2024-09-16T13:14:08Z",
              "path": "src/Framework/ProjectStartedEventArgs.cs",
              "diffHunk": "@@ -457,7 +470,48 @@ internal override void CreateFromStream(BinaryReader reader, int version)\n \n                 properties = dictionaryList;\n             }\n+\n+            WarningsAsErrors = ReadSet(reader);\n+            WarningsNotAsErrors = ReadSet(reader);\n+            WarningsAsMessages = ReadSet(reader);\n         }\n+\n+        private static void WriteSet(BinaryWriter writer, ICollection<string>? set)",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This method should be named `ReadStringSet`. Overloaded members in C# may not differ by only return type, so it allows to add another overload for different type argument in the future.",
              "createdAt": "2024-09-16T13:18:06Z",
              "path": "src/Framework/ProjectStartedEventArgs.cs",
              "diffHunk": "@@ -457,7 +470,48 @@ internal override void CreateFromStream(BinaryReader reader, int version)\n \n                 properties = dictionaryList;\n             }\n+\n+            WarningsAsErrors = ReadSet(reader);\n+            WarningsNotAsErrors = ReadSet(reader);\n+            WarningsAsMessages = ReadSet(reader);\n         }\n+\n+        private static void WriteSet(BinaryWriter writer, ICollection<string>? set)\n+        {\n+            if (set == null)\n+            {\n+                writer.Write((byte)0);\n+            }\n+            else\n+            {\n+                writer.Write((byte)1);\n+                writer.Write(set.Count);\n+                foreach (string item in set)\n+                {\n+                    writer.Write(item);\n+                }\n+            }\n+        }\n+\n+        private static ISet<string>? ReadSet(BinaryReader reader)",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Just to verify - this is the only event that needs delayed logging, right?",
              "createdAt": "2024-09-16T15:28:25Z",
              "path": "src/Build/BackEnd/Components/Logging/ILoggingService.cs",
              "diffHunk": "@@ -555,6 +555,20 @@ BuildEventContext LogProjectStarted(\n             int evaluationId = BuildEventContext.InvalidEvaluationId,\n             int projectContextId = BuildEventContext.InvalidProjectContextId);\n \n+        void LogProjectStarted(ProjectStartedEventArgs args);",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "This is actually logged immediately - we just do not log it 'implicitly' in the depths of `NodeLoggingContext.LogProjectStarted`, but instead create the event explicitly - so that additional data can be attached - and then immediately log",
              "createdAt": "2024-09-16T17:36:32Z",
              "path": "src/Build/BackEnd/Components/Logging/ILoggingService.cs",
              "diffHunk": "@@ -555,6 +555,20 @@ BuildEventContext LogProjectStarted(\n             int evaluationId = BuildEventContext.InvalidEvaluationId,\n             int projectContextId = BuildEventContext.InvalidProjectContextId);\n \n+        void LogProjectStarted(ProjectStartedEventArgs args);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: is it required for the change? What is the pros? ",
              "createdAt": "2024-09-16T19:09:27Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -1409,7 +1430,7 @@ private void ConfigureKnownImmutableFolders()\n             }\n         }\n \n-        private ISet<string> ParseWarningCodes(string warnings)\n+        private static ISet<string> ParseWarningCodes(string warnings)",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "Not necessary, but makes it more understandable that there cannot be any side-effects",
              "createdAt": "2024-09-16T19:19:21Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -1409,7 +1430,7 @@ private void ConfigureKnownImmutableFolders()\n             }\n         }\n \n-        private ISet<string> ParseWarningCodes(string warnings)\n+        private static ISet<string> ParseWarningCodes(string warnings)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Is the change required within this pr? ",
              "createdAt": "2024-09-16T19:11:28Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -1105,11 +1106,11 @@ private async Task<BuildResult> BuildProject()\n             ErrorUtilities.VerifyThrow(_targetBuilder != null, \"Target builder is null\");\n \n             // We consider this the entrypoint for the project build for purposes of BuildCheck processing \n-            bool isRestoring = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring] is null;\n+            bool isRestoring = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring] is not null;",
              "author": {
                "login": "f-alizada"
              }
            },
            {
              "body": "not necessary - but make the code more understandable.\r\n\r\nI spent >20 minutes debugging the code with conditional breakpoints skipping the restore phase - only to find out that `isRestoring` means 'The current phase is *not* Restore'",
              "createdAt": "2024-09-16T19:20:56Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -1105,11 +1106,11 @@ private async Task<BuildResult> BuildProject()\n             ErrorUtilities.VerifyThrow(_targetBuilder != null, \"Target builder is null\");\n \n             // We consider this the entrypoint for the project build for purposes of BuildCheck processing \n-            bool isRestoring = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring] is null;\n+            bool isRestoring = _requestEntry.RequestConfiguration.GlobalProperties[MSBuildConstants.MSBuildIsRestoring] is not null;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}