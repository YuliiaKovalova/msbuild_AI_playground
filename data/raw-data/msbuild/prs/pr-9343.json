{
  "number": 9343,
  "title": "Cache Platform Negotiation in graph build",
  "body": "Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1834963\r\n\r\n### Context\r\nPR  https://github.com/dotnet/msbuild/pull/7699 caused perf regression when running large-graphs-with-platform-negotiation kind of build.\r\n\r\nChanges:\r\nhttps://github.com/dotnet/msbuild/blob/867e26043663966e3fa29450476179aea148cd9e/src/Build/Graph/ProjectInterpretation.cs#L182-L184\r\nhave caused that dependency projects were evaluated for Platform Negotiation purpose (with null global properties) for each incoming dependency.\r\n\r\n### Changes Made\r\nCaching \"evaluation for Platform Negotiation purpose\".\r\n\r\n### Testing\r\nUnit tests.\r\nLocal.\r\n\r\n### Notes\r\nWithout changes it was running 6K evaluations (for VS/VC build) and it took 132 s.\r\n![image](https://github.com/dotnet/msbuild/assets/25249058/25ef0c6d-0d47-471f-8d1e-eef70a2d0765)\r\n\r\nAfter changes only 1.5K evaluations with duration of 33 s.\r\n![image](https://github.com/dotnet/msbuild/assets/25249058/edb7d502-4619-4022-a521-3b2fc5a124fe)\r\n\r\nThe fact that every dependency has to be specially evaluated for Platform Negotiation purposes has big enough, IMO, negative impact on performance, to reevaluate this approach.\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2023-10-18T15:33:09Z",
  "updatedAt": "2023-10-27T08:39:21Z",
  "closedAt": "2023-10-27T08:39:20Z",
  "mergedAt": "2023-10-27T08:39:20Z",
  "additions": 15,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "rokonec/grahp-build-nego-perf-fix",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "80ded6185dbd37252467b1d20a9e6e4105c9cb1a",
          "message": "Cache Platform Negotiation in graph build",
          "committedDate": "2023-10-18T15:04:22Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "53581164de8cc25a7b54bf89f77fbc3fbec07da2",
          "message": "Clean it after build.",
          "committedDate": "2023-10-18T15:32:41Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@yuehuang010 It might be related to slowness you have been experiencing.",
        "createdAt": "2023-10-18T15:39:16Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Nice improvement!  I think the issue is still present, because the evaluation per second remains the same. 6395/132 = 48 vs 1525/33 = 46.  This change reduces the total number of evaluations during graph build and thus, reduces the total time.  It is still a win.\r\n\r\nThe issue showed two behaviors, 1) the time spent in GC was really high of over 50%, 2) enabling gcServer speed it up at the cost of more memory.  A quick way of testing this is to modify the msbuild.exe.config with \r\n```xml\r\n<configuration>\r\n   <runtime>\r\n      <gcServer enabled=\"true\"/>\r\n   </runtime>\r\n</configuration>\r\n```",
        "createdAt": "2023-10-18T18:31:01Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "Aside, do we know where most of these allocations are? Perhaps in something like XmlReader below MSBuild? 50% GC is collossal.",
        "createdAt": "2023-10-19T20:00:50Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> Aside, do we know where most of these allocations are? Perhaps in something like XmlReader below MSBuild? 50% GC is collossal.\r\n\r\nI wasn't able to track it down.  Here are my findings.  ProjectEvaluationEvent uses a lot of memory, but when I removed it, it made no impact on total time.  Enabling filelogger or binarylogger increases graph processing time by 25%.  I prototyped a change to discard the Evaluations during graph but that didn't improve the total time.  The prototype kept the total memory below the 300mb, so GC won't overreact to high memory usage.  \r\n\r\nRuling those out Total memory, my next theories are a bug in GC or a data structure that GC doesn't like.  Sadly my timebox ran out, so I wish the next person best of luck.",
        "createdAt": "2023-10-26T17:47:34Z",
        "author": {
          "login": "yuehuang010"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}