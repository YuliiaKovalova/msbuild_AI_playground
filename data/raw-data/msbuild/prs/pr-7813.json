{
  "number": 7813,
  "title": "Null annotate some build event args types",
  "body": "While consuming some of these types last week I was tripped up by null values a few times. This commit adds annotations for the types I experienced issues with, to hopefully avoid such problems for others in future.\r\n\r\nIn general these annotations have no run-time impact. There were a few places I had to add behaviour changes to address warnings once this code was marked `#nullable enable`.",
  "state": "MERGED",
  "createdAt": "2022-07-12T02:21:36Z",
  "updatedAt": "2022-07-16T23:15:16Z",
  "closedAt": "2022-07-16T02:11:13Z",
  "mergedAt": "2022-07-16T02:11:13Z",
  "additions": 98,
  "deletions": 121,
  "changedFiles": 12,
  "headRefName": "null-annotate-some-build-event-args",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7fddd33a2b35f75efbb4b9b8319a1a08f7e26cd6",
          "message": "Null annotate some build event args types\n\nWhile consuming some of these types last week I was tripped up by null values a few times. This commit adds annotations for the types I experienced issues with, to hopefully avoid such problems for others in future.\n\nIn general these annotations have no run-time impact. There were a few places I had to add behaviour changes to address warnings once this code was marked `#nullable enable`.",
          "committedDate": "2022-07-12T02:20:21Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1b85dbd41f452c3ea5448a100d9ed503edfcf674",
          "message": "Review feedback",
          "committedDate": "2022-07-13T01:02:21Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Behaviour change.",
              "createdAt": "2022-07-12T02:23:56Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -84,17 +82,17 @@ protected LazyFormattedBuildEventArgs()\n         /// <summary>\n         /// Gets the formatted message.\n         /// </summary>\n-        public override string Message\n+        public override string? Message\n         {\n             get\n             {\n-                object argsOrMessage = argumentsOrFormattedMessage;\n+                object? argsOrMessage = argumentsOrFormattedMessage;\n                 if (argsOrMessage is string formattedMessage)\n                 {\n                     return formattedMessage;\n                 }\n \n-                if (argsOrMessage is object[] arguments && arguments.Length > 0)\n+                if (argsOrMessage is object[] arguments && arguments.Length > 0 && base.Message is not null)",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Behaviour change.",
              "createdAt": "2022-07-12T02:24:01Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -121,7 +119,7 @@ internal override void WriteToStream(BinaryWriter writer)\n                 {\n                     // Arguments may be ints, etc, so explicitly convert\n                     // Convert.ToString returns String.Empty when it cannot convert, rather than throwing\n-                    writer.Write(Convert.ToString(argument, CultureInfo.CurrentCulture));\n+                    writer.Write(Convert.ToString(argument, CultureInfo.CurrentCulture) ?? \"\");",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "Same as other comment",
              "createdAt": "2022-07-12T16:58:27Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -121,7 +119,7 @@ internal override void WriteToStream(BinaryWriter writer)\n                 {\n                     // Arguments may be ints, etc, so explicitly convert\n                     // Convert.ToString returns String.Empty when it cannot convert, rather than throwing\n-                    writer.Write(Convert.ToString(argument, CultureInfo.CurrentCulture));\n+                    writer.Write(Convert.ToString(argument, CultureInfo.CurrentCulture) ?? \"\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: delete or update this comment? It appears to be right for other overloads but the `object` one used here can return `null` per https://docs.microsoft.com/en-us/dotnet/api/system.convert.tostring?view=net-6.0#system-convert-tostring(system-object).",
              "createdAt": "2022-07-12T13:59:09Z",
              "path": "src/Framework/LazyFormattedBuildEventArgs.cs",
              "diffHunk": "@@ -121,7 +119,7 @@ internal override void WriteToStream(BinaryWriter writer)\n                 {\n                     // Arguments may be ints, etc, so explicitly convert\n                     // Convert.ToString returns String.Empty when it cannot convert, rather than throwing",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Hm. Looks like we could push the constraint to the type system by changing the default ctor, which currently does nothing, to set it to empty-string. I think that ctor is used during deserialization (and then the fields immediately filled in), so there might be some overhead involved with that. It also looks like the long-form ctor that sets `targetNames` is sometimes called with an explicit null (during our private deserialization):\r\n\r\nhttps://github.com/dotnet/msbuild/blob/7d628917b66fcfc524fa42bc3f07aab4605d35ec/src/Shared/LogMessagePacketBase.cs#L506\r\n\r\nSo I think I've just talked myself into thinking this is a good approach . . . :)",
              "createdAt": "2022-07-12T14:12:02Z",
              "path": "src/Framework/ProjectStartedEventArgs.cs",
              "diffHunk": "@@ -367,7 +365,7 @@ internal override void WriteToStream(BinaryWriter writer)\n             writer.WriteOptionalString(projectFile);\n \n             // TargetNames cannot be null as per the constructor\n-            writer.Write(targetNames);\n+            writer.Write(targetNames!);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Which is the good approach, the current, or your proposal?\r\n\r\nThe suppression here mirrors the comment on the line above, so I didn't dig further. I don't think there are any other suppressions on this field, so the problem isn't so widespread, and a null that snuck through here, behind the implied contract, would blow up and I'm sure we'd hear about it.",
              "createdAt": "2022-07-13T00:57:24Z",
              "path": "src/Framework/ProjectStartedEventArgs.cs",
              "diffHunk": "@@ -367,7 +365,7 @@ internal override void WriteToStream(BinaryWriter writer)\n             writer.WriteOptionalString(projectFile);\n \n             // TargetNames cannot be null as per the constructor\n-            writer.Write(targetNames);\n+            writer.Write(targetNames!);",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "I'm fine with the current approach, sorry. :shipit:",
              "createdAt": "2022-07-15T14:47:51Z",
              "path": "src/Framework/ProjectStartedEventArgs.cs",
              "diffHunk": "@@ -367,7 +365,7 @@ internal override void WriteToStream(BinaryWriter writer)\n             writer.WriteOptionalString(projectFile);\n \n             // TargetNames cannot be null as per the constructor\n-            writer.Write(targetNames);\n+            writer.Write(targetNames!);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is it better to write an empty string here rather than null? At first glance, I'd prefer writer.Write be able to take null strings.",
              "createdAt": "2022-07-12T16:57:48Z",
              "path": "src/Framework/ProjectStartedEventArgs.cs",
              "diffHunk": "@@ -391,7 +389,7 @@ internal override void WriteToStream(BinaryWriter writer)\n                 foreach (var propertyPair in validProperties)\n                 {\n                     writer.Write((string)propertyPair.Key);\n-                    writer.Write((string)propertyPair.Value);\n+                    writer.Write((string?)propertyPair.Value ?? \"\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The previous code would throw an exception if it received a null.\r\n\r\nChanging this to write a null would require a change in the binary format, which I suspect is not something we can freely do here.",
              "createdAt": "2022-07-13T01:00:11Z",
              "path": "src/Framework/ProjectStartedEventArgs.cs",
              "diffHunk": "@@ -391,7 +389,7 @@ internal override void WriteToStream(BinaryWriter writer)\n                 foreach (var propertyPair in validProperties)\n                 {\n                     writer.Write((string)propertyPair.Key);\n-                    writer.Write((string)propertyPair.Value);\n+                    writer.Write((string?)propertyPair.Value ?? \"\");",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "We have an extension method already, actually. WriteOptionalString writes 0 if it's null or 1 if not, then proceeds to write the string. If it previously threw an exception for null, though, I imagine there's no need to worry about it being null even semi-often, so this is probably better as-is.",
              "createdAt": "2022-07-14T03:18:55Z",
              "path": "src/Framework/ProjectStartedEventArgs.cs",
              "diffHunk": "@@ -391,7 +389,7 @@ internal override void WriteToStream(BinaryWriter writer)\n                 foreach (var propertyPair in validProperties)\n                 {\n                     writer.Write((string)propertyPair.Key);\n-                    writer.Write((string)propertyPair.Value);\n+                    writer.Write((string?)propertyPair.Value ?? \"\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}