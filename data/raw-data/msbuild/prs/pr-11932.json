{
  "number": 11932,
  "title": "adding a cache for FileMatcher regexes to avoid repeated allocations",
  "body": "Fixes #11872\r\n\r\n### Context\r\nAdding a Regex Cache to FileMatcher to avoid repeated Regex creation.\r\n\r\n### Changes Made\r\nFileMatcher.cs -> added a cache.\r\n\r\n### Testing\r\nExisting tests.\r\n\r\n### Notes\r\n",
  "state": "OPEN",
  "createdAt": "2025-05-30T08:10:38Z",
  "updatedAt": "2025-06-02T18:07:45Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 22,
  "deletions": 1,
  "changedFiles": 1,
  "headRefName": "perf/issue-11872-add-regex-cache",
  "isDraft": false,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b62685dbb1f119aeaa76fab4432a4d90f40b85f5",
          "message": "adding a cache for FileMatcher regexes to avoid repeated allocations",
          "committedDate": "2025-05-30T08:08:09Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I added a repro in the issue.",
        "createdAt": "2025-05-31T00:57:39Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider whether the regex cache could be defined as static instead of an instance member if FileMatcher is stateless, to allow sharing the cache across all instances and further reduce repeated allocations.\n```suggestion\n        private static ConcurrentDictionary<string, (Regex regex, bool needsRecursion, bool isLegalFileSpec)> regexCache =\n```",
              "createdAt": "2025-05-30T08:10:56Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -38,6 +38,10 @@ internal class FileMatcher\n         private static readonly char[] s_wildcardCharacters = { '*', '?' };\n         private static readonly char[] s_wildcardAndSemicolonCharacters = { '*', '?', ';' };\n \n+        private ConcurrentDictionary<string, (Regex regex, bool needsRecursion, bool isLegalFileSpec)> regexCache =",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            },
            {
              "body": "@KirillOsenkov \r\nI just noticed some other caches nearby, is there any reason/benefit to going static as:\r\n`private static readonly Lazy<ConcurrentDictionary<string, IReadOnlyList<string>>> s_cachedGlobExpansions`\r\n?\r\nIt would probably mean flushing it together with the others, but that is not a big issue.\r\nIf I read correctly, we currently live and die with an evaluation context so flushing isn't an issue.",
              "createdAt": "2025-05-30T08:17:06Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -38,6 +38,10 @@ internal class FileMatcher\n         private static readonly char[] s_wildcardCharacters = { '*', '?' };\n         private static readonly char[] s_wildcardAndSemicolonCharacters = { '*', '?', ';' };\n \n+        private ConcurrentDictionary<string, (Regex regex, bool needsRecursion, bool isLegalFileSpec)> regexCache =",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "I didn't read the code but seems reasonable to make static and reuse across evaluations for more savings, do what the other static caches do in that area",
              "createdAt": "2025-05-30T15:17:29Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -38,6 +38,10 @@ internal class FileMatcher\n         private static readonly char[] s_wildcardCharacters = { '*', '?' };\n         private static readonly char[] s_wildcardAndSemicolonCharacters = { '*', '?', ';' };\n \n+        private ConcurrentDictionary<string, (Regex regex, bool needsRecursion, bool isLegalFileSpec)> regexCache =",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I am concerned about having a cache with unbounded size. How big does this get, for example, on evaluating OrchardCore in graph mode in a single proc? What about dotnet/runtime?\r\n\r\nThis is especially concerning since the Regex ctor maintains internal caching so we know the optimal cache size is \"bigger than that\".",
              "createdAt": "2025-05-30T15:17:41Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -1507,6 +1511,23 @@ internal void GetFileSpecInfoWithRegexObject(\n             }\n         }\n \n+        // PERF: Cache the Regex generation to avoid repeated allocations.\n+        internal void GetFileSpecInfoWithRegexObject(\n+           string filespec,\n+           out Regex regexFileMatch,\n+           out bool needsRecursion,\n+           out bool isLegalFileSpec)\n+        {\n+            var result = regexCache.GetOrAdd(filespec, spec =>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It will grow proportionate to the number of glob patterns used in the codebase, I think it was under 10 for our largish codebase. I certainly don't envision it to grow past 100 elements but I'm in full agreement that we should get that data from Orchard Core and friends.",
              "createdAt": "2025-06-02T18:07:45Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -1507,6 +1511,23 @@ internal void GetFileSpecInfoWithRegexObject(\n             }\n         }\n \n+        // PERF: Cache the Regex generation to avoid repeated allocations.\n+        internal void GetFileSpecInfoWithRegexObject(\n+           string filespec,\n+           out Regex regexFileMatch,\n+           out bool needsRecursion,\n+           out bool isLegalFileSpec)\n+        {\n+            var result = regexCache.GetOrAdd(filespec, spec =>",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      }
    ]
  }
}