{
  "number": 9540,
  "title": "extend logging on DeleteNoThrow",
  "body": "### Context\r\nIt's an attempt to extend logging to understand the nature of this bug \r\nhttps://github.com/dotnet/msbuild/issues/9250\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2023-12-14T12:16:08Z",
  "updatedAt": "2024-03-04T09:10:39Z",
  "closedAt": "2024-03-04T09:10:39Z",
  "mergedAt": null,
  "additions": 77,
  "deletions": 2,
  "changedFiles": 1,
  "headRefName": "dev/ykovalova/extend_logging",
  "isDraft": true,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d640e70fdcd5a46624db9c12b0a5f6988279b430",
          "message": "extend logging on DeleteNoThrow",
          "committedDate": "2023-12-14T12:14:42Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "108fc2d0f3bcd1631076ae1e0218ee2c1212bcb7",
          "message": "add lsof invocation",
          "committedDate": "2023-12-15T10:48:52Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "97a2e29de5cbfa94b8e71062d613ba63050a18d0",
          "message": "update lsof run condition",
          "committedDate": "2023-12-15T11:13:01Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "669eff6e2a7ccdb18b951cc34fff217081e2be12",
          "message": "print warning on Lsof run instead of error",
          "committedDate": "2023-12-15T16:11:46Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Also, have you tried to measure the performance of this? I suspect that building ~anything that includes overwriting a bunch of files will suddenly be _very_ slow with this change as-is.",
        "createdAt": "2023-12-21T22:58:59Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Also, have you tried to measure the performance of this? I suspect that building ~anything that includes overwriting a bunch of files will suddenly be _very_ slow with this change as-is.\r\n\r\nThis is a draft PR just for collecting more logs for the existing problem on App Services specifically. The sdk with the patched msbuild was already given to the team which experiences this error. Of course, we don't plan to merge these changes, but that you for your comments in any case :)",
        "createdAt": "2023-12-21T23:02:08Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm not sure that there's a better answer for this part, but do not that this may rearrange the output and the error.",
              "createdAt": "2023-12-21T22:54:45Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -361,6 +391,42 @@ private void LogAlwaysRetryDiagnosticFromResources(string messageResourceName, p\n             return true;\n         }\n \n+        private void RunLsof()\n+        {\n+            try\n+            {\n+                using (Process process = new Process())\n+                {\n+                    process.StartInfo.FileName = \"lsof\";\n+\n+                    process.StartInfo.RedirectStandardOutput = true;\n+                    process.StartInfo.RedirectStandardError = true;\n+                    process.StartInfo.UseShellExecute = false;\n+                    process.StartInfo.CreateNoWindow = true;\n+\n+                    process.Start();\n+\n+                    string output = process.StandardOutput.ReadToEnd();\n+                    string error = process.StandardError.ReadToEnd();\n+\n+                    process.WaitForExit();\n+                    if (!string.IsNullOrEmpty(output))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm not clear on the benefit of including this in the catches. Either it successfully ran in the try part, in which case this is just duplicate information, or it failed in the try, and there's no reason to suspect it will succeed here?",
              "createdAt": "2023-12-21T22:55:11Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -290,7 +291,36 @@ private void LogAlwaysRetryDiagnosticFromResources(string messageResourceName, p\n                 destinationFileState.FileExists &&\n                 !destinationFileState.IsReadOnly)\n             {\n-                FileUtilities.DeleteNoThrow(destinationFileState.Name);\n+                try\n+                {\n+                    if (NativeMethodsShared.IsLinux)\n+                    {\n+                        Log.LogMessage($\"Run lsof before DeleteNoThrow: {destinationFileState.Name}\");\n+                        RunLsof();\n+                    }\n+\n+                    Log.LogMessage($\"Try to delete with no throw: {destinationFileState.Name}\");\n+                    FileUtilities.DeleteNoThrow(destinationFileState.Name);\n+                }\n+                catch (Exception ex) when (ExceptionHandling.IsIoRelatedException(ex))\n+                {\n+                    Log.LogErrorFromException(ex, showStackTrace: true, showDetail: true, destinationFileState.Name);\n+                    if (NativeMethodsShared.IsLinux)\n+                    {\n+                        Log.LogMessage($\"Run lsof before DeleteNoThrow with IsIoRelatedException condition: {destinationFileState.Name}\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Any reason this is better than 'throw;' ?",
              "createdAt": "2023-12-21T22:55:25Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -290,7 +291,36 @@ private void LogAlwaysRetryDiagnosticFromResources(string messageResourceName, p\n                 destinationFileState.FileExists &&\n                 !destinationFileState.IsReadOnly)\n             {\n-                FileUtilities.DeleteNoThrow(destinationFileState.Name);\n+                try\n+                {\n+                    if (NativeMethodsShared.IsLinux)\n+                    {\n+                        Log.LogMessage($\"Run lsof before DeleteNoThrow: {destinationFileState.Name}\");\n+                        RunLsof();\n+                    }\n+\n+                    Log.LogMessage($\"Try to delete with no throw: {destinationFileState.Name}\");\n+                    FileUtilities.DeleteNoThrow(destinationFileState.Name);\n+                }\n+                catch (Exception ex) when (ExceptionHandling.IsIoRelatedException(ex))\n+                {\n+                    Log.LogErrorFromException(ex, showStackTrace: true, showDetail: true, destinationFileState.Name);\n+                    if (NativeMethodsShared.IsLinux)\n+                    {\n+                        Log.LogMessage($\"Run lsof before DeleteNoThrow with IsIoRelatedException condition: {destinationFileState.Name}\");\n+                        RunLsof();\n+                    }\n+                }\n+                catch (Exception ex)\n+                {\n+                    if (NativeMethodsShared.IsLinux)\n+                    {\n+                        Log.LogMessage($\"Run lsof after failed DeleteNoThrow: {destinationFileState.Name}\");\n+                        RunLsof();\n+                    }\n+\n+                    Log.LogErrorFromException(ex, showStackTrace: true, showDetail: true, destinationFileState.Name);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm not convinced at the moment that failing in this kind of logging really deserves to take a no-error, no-warning case and turn it into an error/warning case...",
              "createdAt": "2023-12-21T22:56:02Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -361,6 +391,42 @@ private void LogAlwaysRetryDiagnosticFromResources(string messageResourceName, p\n             return true;\n         }\n \n+        private void RunLsof()\n+        {\n+            try\n+            {\n+                using (Process process = new Process())\n+                {\n+                    process.StartInfo.FileName = \"lsof\";\n+\n+                    process.StartInfo.RedirectStandardOutput = true;\n+                    process.StartInfo.RedirectStandardError = true;\n+                    process.StartInfo.UseShellExecute = false;\n+                    process.StartInfo.CreateNoWindow = true;\n+\n+                    process.Start();\n+\n+                    string output = process.StandardOutput.ReadToEnd();\n+                    string error = process.StandardError.ReadToEnd();\n+\n+                    process.WaitForExit();\n+                    if (!string.IsNullOrEmpty(output))\n+                    {\n+                        Log.LogMessage($\"lsof output:\\n{output}\");\n+                    }\n+\n+                    if (!string.IsNullOrEmpty(error))\n+                    {\n+                        Log.LogError($\"lsof error:\\n{error}\");\n+                    }\n+                }\n+            }\n+            catch\n+            {\n+                Log.LogWarning(\"lsof invocation has failed.\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do you need this?",
              "createdAt": "2023-12-21T22:56:30Z",
              "path": "src/Tasks/Copy.cs",
              "diffHunk": "@@ -951,7 +1017,16 @@ private static string GetLockedFileMessage(string file)\n         /// <returns></returns>\n         public override bool Execute()\n         {\n-            return Execute(CopyFileWithLogging, s_parallelism);\n+            try\n+            {\n+                return Execute(CopyFileWithLogging, s_parallelism);\n+            }\n+            catch (Exception ex)\n+            {\n+                Log.LogErrorFromException(ex, showStackTrace: true);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}