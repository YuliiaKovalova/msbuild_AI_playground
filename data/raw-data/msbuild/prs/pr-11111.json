{
  "number": 11111,
  "title": "Improve support for loading MSBuild in a non-default ALC.",
  "body": "Fixes #6794.\r\n\r\n* Instead of `AssemblyLoadContext.Default` we use the ALC that hosts MSBuild's own assemblies.\r\n* `MSBuildLoadContext` is created as unloadable if the ALC that hosts MSBuild's own assemblies is unloadable.\r\n  * We don't do that always to avoid impacting performance and compatibility when not necessary, and plugin load contexts cannot be unloaded individually without more changes either way.\r\n\r\nIn most cases, including when running the MSBuild CLI, MSBuild is already loaded in the default ALC so this PR wouldn't change any behavior.",
  "state": "OPEN",
  "createdAt": "2024-12-08T03:03:07Z",
  "updatedAt": "2024-12-16T14:33:18Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 21,
  "deletions": 35,
  "changedFiles": 3,
  "headRefName": "alc-default",
  "isDraft": false,
  "author": {
    "login": "teo-tsirpanis"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8b8306843ee1a76ad95c7e79580417405d7477aa",
          "message": "Replace mentions to `AssemblyLoadContext.Default` with whatever ALC the MSBuild assemblies are loaded in.",
          "committedDate": "2024-12-08T02:45:58Z",
          "author": {
            "name": "Theodore Tsirpanis",
            "email": "teo@tsirpanis.gr"
          }
        }
      },
      {
        "commit": {
          "oid": "888a0a5ff95ae0a1ad59dafba778be57ba18f3a3",
          "message": "Support unloading plugin ALCs.\nIf MSBuild is loaded in a collectible ALC, its plugin ALCs will be collectible as well.",
          "committedDate": "2024-12-08T02:45:58Z",
          "author": {
            "name": "Theodore Tsirpanis",
            "email": "teo@tsirpanis.gr"
          }
        }
      },
      {
        "commit": {
          "oid": "2b522211c9026b017b4055a03da8b5480a2848bb",
          "message": "Simplify and inline `TryGetWellKnownAssembly`.",
          "committedDate": "2024-12-08T03:12:42Z",
          "author": {
            "name": "Theodore Tsirpanis",
            "email": "teo@tsirpanis.gr"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Lucky PR number! \ud83c\udf40",
        "createdAt": "2024-12-08T03:04:00Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This class seems to be doing an AppDomain-specific thing, and [all but one](https://github.com/teo-tsirpanis/msbuild/blob/888a0a5ff95ae0a1ad59dafba778be57ba18f3a3/src/Build/Instance/TaskRegistry.cs#L1398-L1406) uses of it are guarded behind `FEATURE_APPDOMAIN`.\r\n\r\nDoes the class' functionality make sense for ALCs?",
              "createdAt": "2024-12-08T03:06:44Z",
              "path": "src/Shared/TaskEngineAssemblyResolver.cs",
              "diffHunk": "",
              "author": {
                "login": "teo-tsirpanis"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this achieves the same goal in a much more straightforward way. And since we load a specific name in a specific context we don't need to patch the version.",
              "createdAt": "2024-12-08T03:20:08Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -108,33 +106,16 @@ private Assembly LoadUsingPluginContext(string fullPath)\n             }\n         }\n \n-        private Assembly TryGetWellKnownAssembly(AssemblyLoadContext context, AssemblyName assemblyName)\n-        {\n-            if (!MSBuildLoadContext.WellKnownAssemblyNames.Contains(assemblyName.Name))\n-            {\n-                return null;\n-            }\n-\n-            // Ensure we are attempting to load a matching version\n-            // of the Microsoft.Build.* assembly.\n-            assemblyName.Version = _currentAssemblyVersion;\n-\n-            string[] searchPaths = [Assembly.GetExecutingAssembly().Location];\n-            return TryResolveAssemblyFromPaths(context, assemblyName, searchPaths);\n-        }\n-\n         private Assembly TryResolveAssembly(AssemblyLoadContext context, AssemblyName assemblyName)\n         {\n             lock (_guard)\n             {\n-                Assembly assembly = TryGetWellKnownAssembly(context, assemblyName);\n-\n-                if (assembly != null)\n+                if (MSBuildLoadContext.WellKnownAssemblyNames.Contains(assemblyName.Name))\n                 {\n-                    return assembly;\n+                    return MSBuildLoadContext.ThisAssemblyLoadContext.LoadFromAssemblyName(assemblyName);",
              "author": {
                "login": "teo-tsirpanis"
              }
            }
          ]
        }
      }
    ]
  }
}