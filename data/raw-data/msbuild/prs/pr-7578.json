{
  "number": 7578,
  "title": "Simplify AssemblyName creation",
  "body": "The S.R.M version didn't include PublicKeyToken, apparently because it isn't part of the metadata.\r\n\r\nFixes internally reported issue\r\n\r\n### Context\r\nPublicKey was being added to an AssemblyName but not PublicKeyToken. When cloning the AssemblyName, it tried to access the token and failed, throwing an error. The particular case was in trying to figure out an appropriate binding redirect. An assembly had version x and y with x > y. y was primary, and it decided to make x primary after deciding it should unify on x. That led it to clone the AssemblyName, but the PublicKeyToken was missing.\r\n\r\n### Changes Made\r\nCreate full AssemblyName.\r\n\r\n### Testing\r\nReran the repro with this version of MSBuild, and the issue no longer reproduces.",
  "state": "MERGED",
  "createdAt": "2022-04-26T22:15:28Z",
  "updatedAt": "2022-04-27T16:58:35Z",
  "closedAt": "2022-04-27T16:58:34Z",
  "mergedAt": "2022-04-27T16:58:34Z",
  "additions": 2,
  "deletions": 39,
  "changedFiles": 1,
  "headRefName": "add-publickey-token",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "11c8c2b57c40fa0808cfbc772eccb30dd510ad25",
          "message": "Simplify AssemblyName creation\n\nThe S.R.M version didn't include PublicKeyToken, apparently because it isn't part of the metadata.",
          "committedDate": "2022-04-26T22:12:39Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cd92afa260095c015bc783202b04de1325aa0f8e",
          "message": "Unify on Framework version",
          "committedDate": "2022-04-26T22:22:32Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5d306a4bd08b2bf5194e90c771b2c7021d533cc7",
          "message": "Tweak comment",
          "committedDate": "2022-04-27T16:20:33Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Looks like you could collapse the whole `#if` back to the full-framework case (since the API we needed was added in . . . \ud83e\udd41 . . . .NET Core 2.0).",
              "createdAt": "2022-04-26T22:19:52Z",
              "path": "src/Shared/AssemblyNameExtension.cs",
              "diffHunk": "@@ -230,15 +230,7 @@ internal static AssemblyNameExtension GetAssemblyNameEx(string path)\n                     }\n                 }\n \n-                var metadataReader = peFile.GetMetadataReader();\n-                var entry = metadataReader.GetAssemblyDefinition();\n-\n-                assemblyName = new AssemblyName();\n-                assemblyName.Name = metadataReader.GetString(entry.Name);\n-                assemblyName.Version = entry.Version;\n-                assemblyName.CultureName = metadataReader.GetString(entry.Culture);\n-                assemblyName.SetPublicKey(metadataReader.GetBlobBytes(entry.PublicKey));\n-                assemblyName.Flags = (AssemblyNameFlags)(int)entry.Flags;\n+                assemblyName = AssemblyName.GetAssemblyName(path);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Works for me! I agree it would've felt wrong to have #if do x #else do x \ud83d\ude01",
              "createdAt": "2022-04-26T22:23:27Z",
              "path": "src/Shared/AssemblyNameExtension.cs",
              "diffHunk": "@@ -230,15 +230,7 @@ internal static AssemblyNameExtension GetAssemblyNameEx(string path)\n                     }\n                 }\n \n-                var metadataReader = peFile.GetMetadataReader();\n-                var entry = metadataReader.GetAssemblyDefinition();\n-\n-                assemblyName = new AssemblyName();\n-                assemblyName.Name = metadataReader.GetString(entry.Name);\n-                assemblyName.Version = entry.Version;\n-                assemblyName.CultureName = metadataReader.GetString(entry.Culture);\n-                assemblyName.SetPublicKey(metadataReader.GetBlobBytes(entry.PublicKey));\n-                assemblyName.Flags = (AssemblyNameFlags)(int)entry.Flags;\n+                assemblyName = AssemblyName.GetAssemblyName(path);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is simpler and I _think_ it's right because `GetAssemblyName` appears to always return non-null when it doesn't throw, but the comments still mention \"the assemblyName == null behavior below\". Can you either restore that or fix the comment?",
              "createdAt": "2022-04-27T14:07:05Z",
              "path": "src/Shared/AssemblyNameExtension.cs",
              "diffHunk": "@@ -207,41 +205,8 @@ internal static AssemblyNameExtension GetAssemblyNameEx(string path)\n             {\n                 // Its pretty hard to get here, also since we do a file existence check right before calling this method so it can only happen if the file got deleted between that check and this call.\n             }\n-#else\n-            using (var stream = File.OpenRead(path))\n-            using (var peFile = new PEReader(stream))\n-            {\n-                bool hasMetadata = false;\n-                try\n-                {\n-                    // This can throw if the stream is too small, which means\n-                    // the assembly doesn't have metadata.\n-                    hasMetadata = peFile.HasMetadata;\n-                }\n-                finally\n-                {\n-                    // If the file does not contain PE metadata, throw BadImageFormatException to preserve\n-                    // behavior from AssemblyName.GetAssemblyName(). RAR will deal with this correctly.\n-                    if (!hasMetadata)\n-                    {\n-                        throw new BadImageFormatException(string.Format(CultureInfo.CurrentCulture,\n-                            AssemblyResources.GetString(\"ResolveAssemblyReference.AssemblyDoesNotContainPEMetadata\"),\n-                            path));\n-                    }\n-                }\n-\n-                var metadataReader = peFile.GetMetadataReader();\n-                var entry = metadataReader.GetAssemblyDefinition();\n \n-                assemblyName = new AssemblyName();\n-                assemblyName.Name = metadataReader.GetString(entry.Name);\n-                assemblyName.Version = entry.Version;\n-                assemblyName.CultureName = metadataReader.GetString(entry.Culture);\n-                assemblyName.SetPublicKey(metadataReader.GetBlobBytes(entry.PublicKey));\n-                assemblyName.Flags = (AssemblyNameFlags)(int)entry.Flags;\n-            }\n-#endif\n-            return assemblyName == null ? null : new AssemblyNameExtension(assemblyName);\n+            return null;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "My reason for thinking this is fine is that AssemblyName.cs seems to have nullable enabled, and [it returns AssemblyName rather than AssemblyName?](https://github.com/dotnet/runtime/blob/b54561a957729ed479914db30dcda5b6873c21c7/src/libraries/System.Private.CoreLib/src/System/Reflection/AssemblyName.cs#L190).\r\n\r\nI'll change the comment.",
              "createdAt": "2022-04-27T15:31:20Z",
              "path": "src/Shared/AssemblyNameExtension.cs",
              "diffHunk": "@@ -207,41 +205,8 @@ internal static AssemblyNameExtension GetAssemblyNameEx(string path)\n             {\n                 // Its pretty hard to get here, also since we do a file existence check right before calling this method so it can only happen if the file got deleted between that check and this call.\n             }\n-#else\n-            using (var stream = File.OpenRead(path))\n-            using (var peFile = new PEReader(stream))\n-            {\n-                bool hasMetadata = false;\n-                try\n-                {\n-                    // This can throw if the stream is too small, which means\n-                    // the assembly doesn't have metadata.\n-                    hasMetadata = peFile.HasMetadata;\n-                }\n-                finally\n-                {\n-                    // If the file does not contain PE metadata, throw BadImageFormatException to preserve\n-                    // behavior from AssemblyName.GetAssemblyName(). RAR will deal with this correctly.\n-                    if (!hasMetadata)\n-                    {\n-                        throw new BadImageFormatException(string.Format(CultureInfo.CurrentCulture,\n-                            AssemblyResources.GetString(\"ResolveAssemblyReference.AssemblyDoesNotContainPEMetadata\"),\n-                            path));\n-                    }\n-                }\n-\n-                var metadataReader = peFile.GetMetadataReader();\n-                var entry = metadataReader.GetAssemblyDefinition();\n \n-                assemblyName = new AssemblyName();\n-                assemblyName.Name = metadataReader.GetString(entry.Name);\n-                assemblyName.Version = entry.Version;\n-                assemblyName.CultureName = metadataReader.GetString(entry.Culture);\n-                assemblyName.SetPublicKey(metadataReader.GetBlobBytes(entry.PublicKey));\n-                assemblyName.Flags = (AssemblyNameFlags)(int)entry.Flags;\n-            }\n-#endif\n-            return assemblyName == null ? null : new AssemblyNameExtension(assemblyName);\n+            return null;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}