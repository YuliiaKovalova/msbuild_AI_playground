{
  "number": 8916,
  "title": "ResolveAssemblyReference CPU optimizations",
  "body": "### Context\r\n\r\nLow-hanging fruit is showing in RAR performance profiles.\r\n\r\n### Changes Made\r\n\r\n1. Avoided constructing `AssemblyName` on a hot path as the constructor makes expensive Fusion calls on .NET Framework. The problematic code was introduced in #8688.\r\n\r\n2. Added a metadata bulk-set operation to the internal `IMetadataContainer` interface. Calling `SetMetadata` for more than a couple of metadata is slow if `ImmutableDictionary` is used as its backing storage. RAR is heavy on metadata manipulation and switching to the new operation saves about 10% of RAR run-time when building OrchardCore. \r\n\r\n### Testing\r\n\r\nExisting and new unit tests. Measured the perf impact by building OC.\r\n",
  "state": "MERGED",
  "createdAt": "2023-06-20T11:21:29Z",
  "updatedAt": "2023-07-10T13:58:55Z",
  "closedAt": "2023-07-10T12:43:52Z",
  "mergedAt": "2023-07-10T12:43:52Z",
  "additions": 154,
  "deletions": 38,
  "changedFiles": 8,
  "headRefName": "rar-cpu-optimizations",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3fd4714c4fc1e8f7106332aa461a211dc970a023",
          "message": "Avoid creating System.Reflection.AssemblyName",
          "committedDate": "2023-06-19T09:59:45Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "23c13f6ac0b759c3110fc137e40e5d6450e9da80",
          "message": "Optimize bulk metadata set",
          "committedDate": "2023-06-20T11:18:45Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "010c8f10fa2e65b973f558a26a13e23127680ded",
          "message": "Add unit tests for IMetadataContainer.ImportMetadata",
          "committedDate": "2023-06-20T15:06:30Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e988878c16d0f4b4a006590274e33144fa0d1a73",
          "message": "Update src/Framework/IMetadataContainer.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2023-06-27T09:47:51Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "ladi.prosek@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d1843f830ac4b487c63b8b44d7baea161199cb9b",
          "message": "Move local function to the end of containing method",
          "committedDate": "2023-06-27T10:07:44Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fce36d2b13cffc8e4c6f2511f2d5b4d8313931ef",
          "message": "Add ImportMetadataAddsAndOverwrites test case",
          "committedDate": "2023-06-27T11:39:31Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you also have a test that validates that using `ImportMetadata` doesn't delete existing metadata with different keys and does overwrite existing metadata with the same key?",
              "createdAt": "2023-06-21T14:58:29Z",
              "path": "src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs",
              "diffHunk": "@@ -95,6 +95,26 @@ public void AccessorsWithMetadata()\n             Assert.Equal(\"v2\", item.GetMetadataValue(\"m2\"));\n         }\n \n+        /// <summary>\n+        /// Basic ProjectItemInstance with metadata added using ImportMetadata\n+        /// </summary>\n+        [Fact]\n+        public void AccessorsWithImportedMetadata()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Done!",
              "createdAt": "2023-06-27T11:40:02Z",
              "path": "src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs",
              "diffHunk": "@@ -95,6 +95,26 @@ public void AccessorsWithMetadata()\n             Assert.Equal(\"v2\", item.GetMetadataValue(\"m2\"));\n         }\n \n+        /// <summary>\n+        /// Basic ProjectItemInstance with metadata added using ImportMetadata\n+        /// </summary>\n+        [Fact]\n+        public void AccessorsWithImportedMetadata()",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// <see cref=\"ITaskItem.SetMetadata\"/> on all metadata, but takes\r\n```",
              "createdAt": "2023-06-21T14:58:49Z",
              "path": "src/Framework/IMetadataContainer.cs",
              "diffHunk": "@@ -20,5 +20,17 @@ internal interface IMetadataContainer\n         /// in the binary logger.\n         /// </summary>\n         IEnumerable<KeyValuePair<string, string>> EnumerateMetadata();\n+\n+        /// <summary>\n+        /// Sets the given metadata. The operation is equivalent to calling\n+        /// <see cref=\"ITaskItem.SetMetadata\"/> on all items, but taking",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thank you!",
              "createdAt": "2023-06-27T09:48:19Z",
              "path": "src/Framework/IMetadataContainer.cs",
              "diffHunk": "@@ -20,5 +20,17 @@ internal interface IMetadataContainer\n         /// in the binary logger.\n         /// </summary>\n         IEnumerable<KeyValuePair<string, string>> EnumerateMetadata();\n+\n+        /// <summary>\n+        /// Sets the given metadata. The operation is equivalent to calling\n+        /// <see cref=\"ITaskItem.SetMetadata\"/> on all items, but taking",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why NIE instead of a loop implementation?",
              "createdAt": "2023-06-21T15:24:41Z",
              "path": "src/Framework/TaskItemData.cs",
              "diffHunk": "@@ -49,6 +49,9 @@ public TaskItemData(ITaskItem original)\n \n         IEnumerable<KeyValuePair<string, string>> IMetadataContainer.EnumerateMetadata() => Metadata;\n \n+        void IMetadataContainer.ImportMetadata(IEnumerable<KeyValuePair<string, string>> metadata)\n+            => throw new NotImplementedException();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This is a read-only implementation of `ITaskItem`. `SetMatadata` also throws NIE.",
              "createdAt": "2023-06-27T09:50:50Z",
              "path": "src/Framework/TaskItemData.cs",
              "diffHunk": "@@ -49,6 +49,9 @@ public TaskItemData(ITaskItem original)\n \n         IEnumerable<KeyValuePair<string, string>> IMetadataContainer.EnumerateMetadata() => Metadata;\n \n+        void IMetadataContainer.ImportMetadata(IEnumerable<KeyValuePair<string, string>> metadata)\n+            => throw new NotImplementedException();",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Ah, that explains it. I'll come back after this and change them to `InvalidOperationException`.",
              "createdAt": "2023-06-27T13:30:57Z",
              "path": "src/Framework/TaskItemData.cs",
              "diffHunk": "@@ -49,6 +49,9 @@ public TaskItemData(ITaskItem original)\n \n         IEnumerable<KeyValuePair<string, string>> IMetadataContainer.EnumerateMetadata() => Metadata;\n \n+        void IMetadataContainer.ImportMetadata(IEnumerable<KeyValuePair<string, string>> metadata)\n+            => throw new NotImplementedException();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "https://github.com/dotnet/msbuild/pull/9003",
              "createdAt": "2023-07-10T13:58:54Z",
              "path": "src/Framework/TaskItemData.cs",
              "diffHunk": "@@ -49,6 +49,9 @@ public TaskItemData(ITaskItem original)\n \n         IEnumerable<KeyValuePair<string, string>> IMetadataContainer.EnumerateMetadata() => Metadata;\n \n+        void IMetadataContainer.ImportMetadata(IEnumerable<KeyValuePair<string, string>> metadata)\n+            => throw new NotImplementedException();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The in-place local-function-ification is great for the diff but can you move it to the end of the method in another commit please?",
              "createdAt": "2023-06-21T15:29:48Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2677,37 +2676,45 @@ private ITaskItem SetItemMetadata(List<ITaskItem> relatedItems, List<ITaskItem>\n             // Set up the main item.\n             TaskItem referenceItem = new TaskItem();\n             referenceItem.ItemSpec = reference.FullPath;\n-            referenceItem.SetMetadata(ItemMetadataNames.resolvedFrom, reference.ResolvedSearchPath);\n \n-            // Set the CopyLocal metadata.\n-            referenceItem.SetMetadata(ItemMetadataNames.copyLocal, reference.IsCopyLocal ? \"true\" : \"false\");\n-\n-            // Set the Redist name metadata.\n-            if (!String.IsNullOrEmpty(reference.RedistName))\n+            // Enumerate common metadata with an iterator to allow using a more efficient bulk-set operation.\n+            IEnumerable<KeyValuePair<string, string>> EnumerateCommonMetadata()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Done. I find having the function close to its (only) call site better for readability and I wasn't aware of the convention to keep local function at the end of the containing methods. In this case I would have used a lambda if it supported iterators.",
              "createdAt": "2023-06-27T11:43:14Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -2677,37 +2676,45 @@ private ITaskItem SetItemMetadata(List<ITaskItem> relatedItems, List<ITaskItem>\n             // Set up the main item.\n             TaskItem referenceItem = new TaskItem();\n             referenceItem.ItemSpec = reference.FullPath;\n-            referenceItem.SetMetadata(ItemMetadataNames.resolvedFrom, reference.ResolvedSearchPath);\n \n-            // Set the CopyLocal metadata.\n-            referenceItem.SetMetadata(ItemMetadataNames.copyLocal, reference.IsCopyLocal ? \"true\" : \"false\");\n-\n-            // Set the Redist name metadata.\n-            if (!String.IsNullOrEmpty(reference.RedistName))\n+            // Enumerate common metadata with an iterator to allow using a more efficient bulk-set operation.\n+            IEnumerable<KeyValuePair<string, string>> EnumerateCommonMetadata()",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}