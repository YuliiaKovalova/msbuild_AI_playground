{
  "number": 9353,
  "title": "Use AssemblyLoadContext Name instead of AppDomain",
  "body": "Fixes #9348\r\n\r\n### Context\r\n\r\nWhen MSBuild was updated to isolate tasks into a custom `AssemblyLoadContext`, `AssemblyLoadsTracker` was not updated to be aware of this change. This means that the log messages always say `AppDomain: [Default]` and don't show any information about which `AssemblyLoadContext` was used to load the assembly.\r\n\r\n### Changes Made\r\n\r\nWhen `FEATURE_ASSEMBLYLOADCONTEXT` is defined:\r\n- `AssemblyLoadsTracker` now populates `AssemblyLoadBuildEventArgs` with the name of the `AssemblyLoadContext` used to load the assembly . The `appDomainDescriptor` parameter is re-used to do this.\r\n- A new string resource has been added to update the text of `AssemblyLoadBuildEventArgs.Message` to use label the `AppDomainDescriptor` value as \"AssemblyLoadContext\" instead of \"AppDomain\".\r\n\r\n### Testing\r\n~~I couldn't find any existing tests that covered `AssemblyLoadsTracker` behavior, so I haven't updated or added any tests yet.~~ Unit tests added.\r\n\r\n### Notes\r\n\r\n`AssemblyLoadContext.GetLoadContext` can return `null`, but only if the assembly loaded isn't derived from `RuntimeAssembly`. The only way I'm aware that would be true is if `MetadataLoadContext` was used to load the assembly as `ReflectionOnly`, and I wouldn't think that would be a relevant case here. For now, if it was `null` for some reason, I've made `appDomainDescriptor` have the value \"unknown\". Otherwise, if I let the `null` through, `AssemblyLoadBuildEventArgs` would print \"[Default]\" in its message, which would not be correct.\r\n\r\nI added a new string resource in a separate commit because I wasn't sure if that would be okay or not. I know that means there's some translation work to do. Looking at the existing translations for `TaskAssemblyLoaded`, since \"AppDomain\" isn't translated, it looks like it should just be a matter of copying the existing one and replacing that one word.",
  "state": "MERGED",
  "createdAt": "2023-10-21T04:25:35Z",
  "updatedAt": "2023-10-26T15:54:24Z",
  "closedAt": "2023-10-26T15:53:16Z",
  "mergedAt": "2023-10-26T15:53:16Z",
  "additions": 113,
  "deletions": 7,
  "changedFiles": 18,
  "headRefName": "assembly-loads-use-assemblyloadcontext",
  "isDraft": false,
  "author": {
    "login": "bording"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "23c813fa0f647fb5753112486e9f8da5f5374dac",
          "message": "Use AssemblyLoadContext Name instead of AppDomain",
          "committedDate": "2023-10-21T19:21:05Z",
          "author": {
            "name": "Brandon Ording",
            "email": "bording@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "95f0f6499e07989d97262e0a75223a1397ff0a6b",
          "message": "Add new message format for AssemblyLoadContext",
          "committedDate": "2023-10-21T19:37:49Z",
          "author": {
            "name": "Brandon Ording",
            "email": "bording@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5821a90068132e90c73b7f421e0ec10f4bc21ba5",
          "message": "Update tests to check for AppDomain/AssemblyLoadContext in log message",
          "committedDate": "2023-10-25T00:31:37Z",
          "author": {
            "name": "Brandon Ording",
            "email": "bording@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ac922524e7a33a2781e7a9c9941815886b7531da",
          "message": "Adjust ifdefs to set resource name only",
          "committedDate": "2023-10-25T15:02:14Z",
          "author": {
            "name": "Brandon Ording",
            "email": "bording@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "\r\n> ### Testing\r\n> I couldn't find any existing tests that covered `AssemblyLoadsTracker` behavior, so I haven't updated or added any tests yet.\r\n> \r\n\r\nCould you possibly reuse/repurpose this integration test for assembly loads tracking?: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/BinaryLogger_Tests.cs#L192-L250 (plus if needed we have `DotNetOnlyFact\\Theory` and `WindowsFullFrameworkOnlyFact\\Theory` attributes to annotate tests running only on particular platform)\r\n\r\n> \r\n> I added a new string resource in a separate commit because I wasn't sure if that would be okay or not. I know that means there's some translation work to do. Looking at the existing translations for `TaskAssemblyLoaded`, since \"AppDomain\" isn't translated, it looks like it should just be a matter of copying the existing one and replacing that one word.\r\n\r\nAll good.\r\nTranslations happens via separate automations in delayed automated PRs and it *should* be able to reuse (though in this case it probably won't as the strings differ - but that's no harm at all).",
        "createdAt": "2023-10-23T16:43:43Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Could you possibly reuse/repurpose this integration test for assembly loads tracking?: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/BinaryLogger_Tests.cs#L192-L250 (plus if needed we have DotNetOnlyFact\\Theory and WindowsFullFrameworkOnlyFact\\Theory attributes to annotate tests running only on particular platform)\r\n\r\nI did see that test, so I'll take a look at extending it out a bit to cover the relevant part of the log change.",
        "createdAt": "2023-10-23T16:49:27Z",
        "author": {
          "login": "bording"
        }
      },
      {
        "body": "@JanKrivanek I took the test and split it into two versions, one that looks for the presence of `AppDomain: [Default]` being in the text, and the other looking for `AssemblyLoadContext: Default`.\r\n\r\nDo you think it would be worth having a test that actually shows a task loading into a non-default `AssemblyLoadContext`? If so, can you point me to an example test of how to actually get a task assembly loaded in a test?",
        "createdAt": "2023-10-23T23:33:53Z",
        "author": {
          "login": "bording"
        }
      },
      {
        "body": "> @JanKrivanek I took the test and split it into two versions, one that looks for the presence of `AppDomain: [Default]` being in the text, and the other looking for `AssemblyLoadContext: Default`.\r\n> \r\n> Do you think it would be worth having a test that actually shows a task loading into a non-default `AssemblyLoadContext`? If so, can you point me to an example test of how to actually get a task assembly loaded in a test?\r\n\r\nI leave up on you :-)\r\n\r\nIf you'd have to test another load context you'd need to have a task in separate assembly - all our tests use tasks that are compiled within the already loaded test assemblies, so you'd either need to add a separate project (too heavyweight for the test) or build one-off temp assembly within the test.\r\nThen you can have test test the custom load context - similar to:\r\n\r\n```\r\nAssembly loaded during TaskRun: another-lib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null (location: <path>\\another-lib.dll, MVID: 19ab2034-81ba-45df-b164-1ba0cb66da6b, AssemblyLoadContext: MSBuild plugin <path>\\another-lib.dll)\r\nUsing \"SimpleTask1\" task from assembly \"<path>\\another-lib.dll\".\r\n```\r\n\r\nIf you'll leave the test as is (totally fine for the purpose they're validating) - those 2 differ only in that single assertion string - it'd be more readable if those 2 call a single helper giving it the assertion string as param.\r\n\r\n```\r\n[WindowsFullFrameworkOnlyFact]\r\nTest1()\r\n{\r\n  TestImpl(\"Assertion text a\");\r\n}\r\n\r\n[DotNetOnlyFact]\r\nTest2()\r\n{\r\n  TestImpl(\"Assertion text b\");\r\n}\r\n```",
        "createdAt": "2023-10-24T09:42:45Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> all our tests use tasks that are compiled within the already loaded test assemblies\r\n\r\nNot all of them! One is actually perfect for this; check out https://github.com/dotnet/msbuild/blob/08494c73128451a3f7cfb47a5e9cbd63f5507a1f/src/Shared/UnitTests/TypeLoader_Dependencies_Tests.cs",
        "createdAt": "2023-10-24T13:19:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@JanKrivanek I pushed up a new commit that adjusts the first test in the way you suggested, and I augmented the test @rainersigwald pointed out as well. How does that look?",
        "createdAt": "2023-10-25T00:34:34Z",
        "author": {
          "login": "bording"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Technically this can be executed in different execution context (e.g. binlog viewer) - so ideally the LoadContext vs AppDomain info would be already part of the EventArgs. That would however require a version contract update - and it's not worth it. Just mentioning it here :-)",
              "createdAt": "2023-10-23T16:33:58Z",
              "path": "src/Framework/AssemblyLoadBuildEventArgs.cs",
              "diffHunk": "@@ -77,7 +78,11 @@ public override string Message\n                 if (RawMessage == null)\n                 {\n                     string? loadingInitiator = LoadingInitiator == null ? null : $\" ({LoadingInitiator})\";\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword(\"TaskAssemblyLoadedWithAssemblyLoadContext\", LoadingContext.ToString(), loadingInitiator, AssemblyName, AssemblyPath, MVID.ToString(), AppDomainDescriptor ?? DefaultAppDomainDescriptor);\n+#else\n                     RawMessage = FormatResourceStringIgnoreCodeAndKeyword(\"TaskAssemblyLoaded\", LoadingContext.ToString(), loadingInitiator, AssemblyName, AssemblyPath, MVID.ToString(), AppDomainDescriptor ?? DefaultAppDomainDescriptor);\n+#endif",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Just to be clear, there's nothing you want me to do regarding this comment, right?",
              "createdAt": "2023-10-25T15:05:57Z",
              "path": "src/Framework/AssemblyLoadBuildEventArgs.cs",
              "diffHunk": "@@ -77,7 +78,11 @@ public override string Message\n                 if (RawMessage == null)\n                 {\n                     string? loadingInitiator = LoadingInitiator == null ? null : $\" ({LoadingInitiator})\";\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword(\"TaskAssemblyLoadedWithAssemblyLoadContext\", LoadingContext.ToString(), loadingInitiator, AssemblyName, AssemblyPath, MVID.ToString(), AppDomainDescriptor ?? DefaultAppDomainDescriptor);\n+#else\n                     RawMessage = FormatResourceStringIgnoreCodeAndKeyword(\"TaskAssemblyLoaded\", LoadingContext.ToString(), loadingInitiator, AssemblyName, AssemblyPath, MVID.ToString(), AppDomainDescriptor ?? DefaultAppDomainDescriptor);\n+#endif",
              "author": {
                "login": "bording"
              }
            },
            {
              "body": "Sorry - it was rather a confusing self-mumbling :-)\r\nAll good here",
              "createdAt": "2023-10-26T15:53:12Z",
              "path": "src/Framework/AssemblyLoadBuildEventArgs.cs",
              "diffHunk": "@@ -77,7 +78,11 @@ public override string Message\n                 if (RawMessage == null)\n                 {\n                     string? loadingInitiator = LoadingInitiator == null ? null : $\" ({LoadingInitiator})\";\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword(\"TaskAssemblyLoadedWithAssemblyLoadContext\", LoadingContext.ToString(), loadingInitiator, AssemblyName, AssemblyPath, MVID.ToString(), AppDomainDescriptor ?? DefaultAppDomainDescriptor);\n+#else\n                     RawMessage = FormatResourceStringIgnoreCodeAndKeyword(\"TaskAssemblyLoaded\", LoadingContext.ToString(), loadingInitiator, AssemblyName, AssemblyPath, MVID.ToString(), AppDomainDescriptor ?? DefaultAppDomainDescriptor);\n+#endif",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I have a minor preference for `#if`ing only the resource name so this can't change between worlds, but it's not a big deal either way.",
              "createdAt": "2023-10-25T10:01:58Z",
              "path": "src/Framework/AssemblyLoadBuildEventArgs.cs",
              "diffHunk": "@@ -77,7 +78,11 @@ public override string Message\n                 if (RawMessage == null)\n                 {\n                     string? loadingInitiator = LoadingInitiator == null ? null : $\" ({LoadingInitiator})\";\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword(\"TaskAssemblyLoadedWithAssemblyLoadContext\", LoadingContext.ToString(), loadingInitiator, AssemblyName, AssemblyPath, MVID.ToString(), AppDomainDescriptor ?? DefaultAppDomainDescriptor);\n+#else\n                     RawMessage = FormatResourceStringIgnoreCodeAndKeyword(\"TaskAssemblyLoaded\", LoadingContext.ToString(), loadingInitiator, AssemblyName, AssemblyPath, MVID.ToString(), AppDomainDescriptor ?? DefaultAppDomainDescriptor);\n+#endif",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Sure, that makes sense. I can make that adjustment.",
              "createdAt": "2023-10-25T14:42:09Z",
              "path": "src/Framework/AssemblyLoadBuildEventArgs.cs",
              "diffHunk": "@@ -77,7 +78,11 @@ public override string Message\n                 if (RawMessage == null)\n                 {\n                     string? loadingInitiator = LoadingInitiator == null ? null : $\" ({LoadingInitiator})\";\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+                    RawMessage = FormatResourceStringIgnoreCodeAndKeyword(\"TaskAssemblyLoadedWithAssemblyLoadContext\", LoadingContext.ToString(), loadingInitiator, AssemblyName, AssemblyPath, MVID.ToString(), AppDomainDescriptor ?? DefaultAppDomainDescriptor);\n+#else\n                     RawMessage = FormatResourceStringIgnoreCodeAndKeyword(\"TaskAssemblyLoaded\", LoadingContext.ToString(), loadingInitiator, AssemblyName, AssemblyPath, MVID.ToString(), AppDomainDescriptor ?? DefaultAppDomainDescriptor);\n+#endif",
              "author": {
                "login": "bording"
              }
            }
          ]
        }
      }
    ]
  }
}