{
  "number": 6632,
  "title": "Don't compile globbing regexes on .NET Framework",
  "body": "Fixes #6599\r\n\r\n### Context\r\n\r\nCompiled regular expressions have a high first-call cost on .NET Framework, especially when running in a 64-bit process. At best, they need to be used thousands of times to make up for the compilation cost. In some cases compiled regexes are even slower than interpreted ones.\r\n\r\n### Changes Made\r\n\r\nSwitched regexes used in `MSBuildGlob` to interpreted on .NET Framework. Also optimized capture groups as suggested by @ToddGrun and removed a couple of unused fields.\r\n\r\n### Testing\r\n\r\n- Existing unit tests with added coverage for `MSBuildGlob.MatchInfoResult`.\r\n- Experimental insertion to confirm the CPU time win.",
  "state": "MERGED",
  "createdAt": "2021-06-28T13:40:53Z",
  "updatedAt": "2021-07-09T18:41:42Z",
  "closedAt": "2021-07-09T18:41:42Z",
  "mergedAt": "2021-07-09T18:41:42Z",
  "additions": 76,
  "deletions": 47,
  "changedFiles": 5,
  "headRefName": "6599-dont-compile-regex",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open",
    "changewaves",
    "changewave17.0"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5f8dc8334f797ec6a70409447324de85d8f6e4ab",
          "message": "Don't compile globbing regexes on .NET Framework",
          "committedDate": "2021-06-28T13:38:28Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9e406351915cc7920461b3027adb880069ec0759",
          "message": "PR feedback: String -> string",
          "committedDate": "2021-06-28T20:38:19Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "57cfe3e5df95afd4dbc09319601c6d676ea79a0f",
          "message": "Fix unit test on Mac, Linux",
          "committedDate": "2021-06-28T21:09:21Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "895b6f1f1ba17f12ceb10b90d00fcfc2de22fbbf",
          "message": "Fix unit test on Mac, Linux (attempt #2)",
          "committedDate": "2021-06-28T21:36:22Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d938e8d0e5542a21b5f36f829abe115fde87638f",
          "message": "Fix unit test on Mac, Linux (attempt #3)",
          "committedDate": "2021-06-28T21:52:19Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1163dd7feeab34a410a9c1553871809762e49891",
          "message": "Revert \"Fix unit test on Mac, Linux (attempt #3)\"\n\nThis reverts commit d938e8d0e5542a21b5f36f829abe115fde87638f.",
          "committedDate": "2021-06-29T07:10:20Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "69a59104342a08d9d9caa2137404bdf1331f948b",
          "message": "Fix unit test on Mac, Linux (attempt #4, after sleeping on it)",
          "committedDate": "2021-06-29T08:27:16Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "62024836e9fc9ce8c02f9f0a672b7bc9afc4e3a3",
          "message": "Update ChangeWaves.md",
          "committedDate": "2021-06-29T08:32:45Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "70b8d34d9d6d584cbd2641f9f71041f0ecfbe553",
          "message": "Merge branch 'main' into 6599-dont-compile-regex",
          "committedDate": "2021-07-09T17:32:20Z",
          "author": {
            "name": "Ben Villalobos",
            "email": "4691428+BenVillalobos@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "As a change in this PR, can you modify the list in https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves.md?",
        "createdAt": "2021-06-28T21:47:33Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Don't we generally prefer lower-case `string`, since it always refers to the right type while `String` might be some other type?",
              "createdAt": "2021-06-28T14:15:44Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -1869,20 +1864,17 @@ out matchResult.isLegalFileSpec\n             string fileToMatch,\n             Regex fileSpecRegex,\n             out bool isMatch,\n-            out string fixedDirectoryPart,\n             out string wildcardDirectoryPart,\n             out string filenamePart)\n         {\n             Match match = fileSpecRegex.Match(fileToMatch);\n \n             isMatch = match.Success;\n-            fixedDirectoryPart = string.Empty;\n             wildcardDirectoryPart = String.Empty;\n-            filenamePart = string.Empty;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Fixed, thank you.",
              "createdAt": "2021-06-28T21:17:51Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -1869,20 +1864,17 @@ out matchResult.isLegalFileSpec\n             string fileToMatch,\n             Regex fileSpecRegex,\n             out bool isMatch,\n-            out string fixedDirectoryPart,\n             out string wildcardDirectoryPart,\n             out string filenamePart)\n         {\n             Match match = fileSpecRegex.Match(fileToMatch);\n \n             isMatch = match.Success;\n-            fixedDirectoryPart = string.Empty;\n             wildcardDirectoryPart = String.Empty;\n-            filenamePart = string.Empty;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "These aren't things I would expect to change in the middle of a build. Should we save off the RegexOptions earlier and use it multiple times?",
              "createdAt": "2021-06-28T14:16:56Z",
              "path": "src/Build/Globbing/MSBuildGlob.cs",
              "diffHunk": "@@ -202,8 +206,20 @@ public static MSBuildGlob Parse(string globRoot, string fileSpec)\n \n                     if (regex == null)\n                     {\n+                        RegexOptions regexOptions = FileMatcher.DefaultRegexOptions;\n                         // compile the regex since it's expected to be used multiple times\n-                        Regex newRegex = new Regex(matchFileExpression, FileMatcher.DefaultRegexOptions | RegexOptions.Compiled);\n+                        // For the kind of regexes used here, compilation on .NET Framework tends to be expensive and not worth the small\n+                        // run-time boost so it's enabled only on .NET Core by default.\n+#if RUNTIME_TYPE_NETCORE\n+                        bool compileRegex = true;\n+#else",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Checking the changewave and OR'ing two integers is very cheap. Unless I am misunderstanding I would argue that it's not worth adding a cache for this.",
              "createdAt": "2021-06-28T21:21:16Z",
              "path": "src/Build/Globbing/MSBuildGlob.cs",
              "diffHunk": "@@ -202,8 +206,20 @@ public static MSBuildGlob Parse(string globRoot, string fileSpec)\n \n                     if (regex == null)\n                     {\n+                        RegexOptions regexOptions = FileMatcher.DefaultRegexOptions;\n                         // compile the regex since it's expected to be used multiple times\n-                        Regex newRegex = new Regex(matchFileExpression, FileMatcher.DefaultRegexOptions | RegexOptions.Compiled);\n+                        // For the kind of regexes used here, compilation on .NET Framework tends to be expensive and not worth the small\n+                        // run-time boost so it's enabled only on .NET Core by default.\n+#if RUNTIME_TYPE_NETCORE\n+                        bool compileRegex = true;\n+#else",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "~~Is there any chance this would be a `\\\\server\\share` style (UNC) path? If so, this would break it.~~ \r\n\r\nOh I see this is test code \ud83d\ude04 ",
              "createdAt": "2021-06-29T23:09:56Z",
              "path": "src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs",
              "diffHunk": "@@ -326,20 +326,39 @@ public void GlobMatchingShouldWorkWithComplexRelativeLiterals()\n         [InlineData(\n             @\"a/b\\c\",\n             @\"d/e\\f/**\\a.cs\",\n-            @\"d\\e/f\\g/h\\i/a.cs\")]\n+            @\"d\\e/f\\g/h\\i/a.cs\",\n+            @\"d\\e/f\\\", @\"g/h\\i/\", @\"a.cs\")]\n         [InlineData(\n             @\"a/b\\c\",\n             @\"d/e\\f/*b*\\*.cs\",\n-            @\"d\\e/f\\abc/a.cs\")]\n+            @\"d\\e/f\\abc/a.cs\",\n+            @\"d\\e/f\\\", @\"abc/\", @\"a.cs\")]\n         [InlineData(\n             @\"a/b/\\c\",\n             @\"d/e\\/*b*/\\*.cs\",\n-            @\"d\\e\\\\abc/\\a.cs\")]\n-        public void GlobMatchingIgnoresSlashOrientationAndRepetitions(string globRoot, string fileSpec, string stringToMatch)\n+            @\"d\\e\\\\abc/\\a.cs\",\n+            @\"d\\e\\\\\", @\"abc\\\\\", @\"a.cs\")]\n+        public void GlobMatchingIgnoresSlashOrientationAndRepetitions(string globRoot, string fileSpec, string stringToMatch,\n+            string fixedDirectoryPart, string wildcardDirectoryPart, string filenamePart)\n         {\n             var glob = MSBuildGlob.Parse(globRoot, fileSpec);\n \n             Assert.True(glob.IsMatch(stringToMatch));\n+\n+            MSBuildGlob.MatchInfoResult result = glob.MatchInfo(stringToMatch);\n+            Assert.True(result.IsMatch);\n+\n+            string NormalizeSlashes(string path)\n+            {\n+                string normalizedPath = path.Replace(Path.DirectorySeparatorChar == '/' ? '\\\\' : '/', Path.DirectorySeparatorChar);\n+                return NativeMethodsShared.IsWindows ? normalizedPath.Replace(\"\\\\\\\\\", \"\\\\\") : normalizedPath;",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "Yep, this is test code. I just wanted to add something for `FixedDirectoryPartMatchGroup`, `WildcardDirectoryPartMatchGroup`, and `FilenamePartMatchGroup` because they had no coverage at all. The platform-specific path normalization logic makes this somewhat less elegant. Oh, and I made sure the test case passes without my changes, too.\r\n\r\nBtw, I took a cursory look at CPS and project-system sources and don't see these properties used. Do you happen to know if they ever were used or maybe about some other component calling `IMSBuildGlob.MatchInfo`? Thank you!",
              "createdAt": "2021-06-30T07:45:54Z",
              "path": "src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs",
              "diffHunk": "@@ -326,20 +326,39 @@ public void GlobMatchingShouldWorkWithComplexRelativeLiterals()\n         [InlineData(\n             @\"a/b\\c\",\n             @\"d/e\\f/**\\a.cs\",\n-            @\"d\\e/f\\g/h\\i/a.cs\")]\n+            @\"d\\e/f\\g/h\\i/a.cs\",\n+            @\"d\\e/f\\\", @\"g/h\\i/\", @\"a.cs\")]\n         [InlineData(\n             @\"a/b\\c\",\n             @\"d/e\\f/*b*\\*.cs\",\n-            @\"d\\e/f\\abc/a.cs\")]\n+            @\"d\\e/f\\abc/a.cs\",\n+            @\"d\\e/f\\\", @\"abc/\", @\"a.cs\")]\n         [InlineData(\n             @\"a/b/\\c\",\n             @\"d/e\\/*b*/\\*.cs\",\n-            @\"d\\e\\\\abc/\\a.cs\")]\n-        public void GlobMatchingIgnoresSlashOrientationAndRepetitions(string globRoot, string fileSpec, string stringToMatch)\n+            @\"d\\e\\\\abc/\\a.cs\",\n+            @\"d\\e\\\\\", @\"abc\\\\\", @\"a.cs\")]\n+        public void GlobMatchingIgnoresSlashOrientationAndRepetitions(string globRoot, string fileSpec, string stringToMatch,\n+            string fixedDirectoryPart, string wildcardDirectoryPart, string filenamePart)\n         {\n             var glob = MSBuildGlob.Parse(globRoot, fileSpec);\n \n             Assert.True(glob.IsMatch(stringToMatch));\n+\n+            MSBuildGlob.MatchInfoResult result = glob.MatchInfo(stringToMatch);\n+            Assert.True(result.IsMatch);\n+\n+            string NormalizeSlashes(string path)\n+            {\n+                string normalizedPath = path.Replace(Path.DirectorySeparatorChar == '/' ? '\\\\' : '/', Path.DirectorySeparatorChar);\n+                return NativeMethodsShared.IsWindows ? normalizedPath.Replace(\"\\\\\\\\\", \"\\\\\") : normalizedPath;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I see no reference to any of those three properties in the history of CPS or dotnet/project-system. I also see no reference to `MSBuildGlob.MatchInfoResult` (is that the type you meant?).",
              "createdAt": "2021-07-01T04:37:36Z",
              "path": "src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs",
              "diffHunk": "@@ -326,20 +326,39 @@ public void GlobMatchingShouldWorkWithComplexRelativeLiterals()\n         [InlineData(\n             @\"a/b\\c\",\n             @\"d/e\\f/**\\a.cs\",\n-            @\"d\\e/f\\g/h\\i/a.cs\")]\n+            @\"d\\e/f\\g/h\\i/a.cs\",\n+            @\"d\\e/f\\\", @\"g/h\\i/\", @\"a.cs\")]\n         [InlineData(\n             @\"a/b\\c\",\n             @\"d/e\\f/*b*\\*.cs\",\n-            @\"d\\e/f\\abc/a.cs\")]\n+            @\"d\\e/f\\abc/a.cs\",\n+            @\"d\\e/f\\\", @\"abc/\", @\"a.cs\")]\n         [InlineData(\n             @\"a/b/\\c\",\n             @\"d/e\\/*b*/\\*.cs\",\n-            @\"d\\e\\\\abc/\\a.cs\")]\n-        public void GlobMatchingIgnoresSlashOrientationAndRepetitions(string globRoot, string fileSpec, string stringToMatch)\n+            @\"d\\e\\\\abc/\\a.cs\",\n+            @\"d\\e\\\\\", @\"abc\\\\\", @\"a.cs\")]\n+        public void GlobMatchingIgnoresSlashOrientationAndRepetitions(string globRoot, string fileSpec, string stringToMatch,\n+            string fixedDirectoryPart, string wildcardDirectoryPart, string filenamePart)\n         {\n             var glob = MSBuildGlob.Parse(globRoot, fileSpec);\n \n             Assert.True(glob.IsMatch(stringToMatch));\n+\n+            MSBuildGlob.MatchInfoResult result = glob.MatchInfo(stringToMatch);\n+            Assert.True(result.IsMatch);\n+\n+            string NormalizeSlashes(string path)\n+            {\n+                string normalizedPath = path.Replace(Path.DirectorySeparatorChar == '/' ? '\\\\' : '/', Path.DirectorySeparatorChar);\n+                return NativeMethodsShared.IsWindows ? normalizedPath.Replace(\"\\\\\\\\\", \"\\\\\") : normalizedPath;",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "Thank you for confirming! (Yes, that's the type, it is available only on `MSBuildGlob` not on `IMSBuildGlob`, sorry for the confusion.)",
              "createdAt": "2021-07-01T07:06:57Z",
              "path": "src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs",
              "diffHunk": "@@ -326,20 +326,39 @@ public void GlobMatchingShouldWorkWithComplexRelativeLiterals()\n         [InlineData(\n             @\"a/b\\c\",\n             @\"d/e\\f/**\\a.cs\",\n-            @\"d\\e/f\\g/h\\i/a.cs\")]\n+            @\"d\\e/f\\g/h\\i/a.cs\",\n+            @\"d\\e/f\\\", @\"g/h\\i/\", @\"a.cs\")]\n         [InlineData(\n             @\"a/b\\c\",\n             @\"d/e\\f/*b*\\*.cs\",\n-            @\"d\\e/f\\abc/a.cs\")]\n+            @\"d\\e/f\\abc/a.cs\",\n+            @\"d\\e/f\\\", @\"abc/\", @\"a.cs\")]\n         [InlineData(\n             @\"a/b/\\c\",\n             @\"d/e\\/*b*/\\*.cs\",\n-            @\"d\\e\\\\abc/\\a.cs\")]\n-        public void GlobMatchingIgnoresSlashOrientationAndRepetitions(string globRoot, string fileSpec, string stringToMatch)\n+            @\"d\\e\\\\abc/\\a.cs\",\n+            @\"d\\e\\\\\", @\"abc\\\\\", @\"a.cs\")]\n+        public void GlobMatchingIgnoresSlashOrientationAndRepetitions(string globRoot, string fileSpec, string stringToMatch,\n+            string fixedDirectoryPart, string wildcardDirectoryPart, string filenamePart)\n         {\n             var glob = MSBuildGlob.Parse(globRoot, fileSpec);\n \n             Assert.True(glob.IsMatch(stringToMatch));\n+\n+            MSBuildGlob.MatchInfoResult result = glob.MatchInfo(stringToMatch);\n+            Assert.True(result.IsMatch);\n+\n+            string NormalizeSlashes(string path)\n+            {\n+                string normalizedPath = path.Replace(Path.DirectorySeparatorChar == '/' ? '\\\\' : '/', Path.DirectorySeparatorChar);\n+                return NativeMethodsShared.IsWindows ? normalizedPath.Replace(\"\\\\\\\\\", \"\\\\\") : normalizedPath;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}