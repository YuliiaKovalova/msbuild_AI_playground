{
  "number": 7812,
  "title": "Don't allocate closure objects when enumerating properties",
  "body": "This requires passing an argument via the stack, rather than on a heap allocated closure.\r\n\r\nThis change was sitting in my workspace for a while, and I'm working through those changes now. It was motivated by allocations I saw in a trace, but I don't have any numbers available offhand.",
  "state": "MERGED",
  "createdAt": "2022-07-12T02:05:57Z",
  "updatedAt": "2022-07-15T18:50:33Z",
  "closedAt": "2022-07-15T18:50:33Z",
  "mergedAt": "2022-07-15T18:50:33Z",
  "additions": 9,
  "deletions": 9,
  "changedFiles": 4,
  "headRefName": "no-enumeration-closure-allocation",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "07417a59c55816a80c25f3ae902a8acc101c1717",
          "message": "Don't allocate closure objects when enumerating properties\n\nThis requires passing an argument via the stack, rather than on a heap allocated closure.",
          "committedDate": "2022-07-12T02:02:52Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "What's different is that the old lambdas accessed the `list` variable which is in the enclosing scope, so the compiler had allocate a closure object (since there's a unique `list` local variable, which is different from `list` the next time through the function). By changing the pattern so that that's passed in, the compiler can generate a static lambda that doesn't have a closure--so there can be only one.",
        "createdAt": "2022-07-12T19:25:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yep; that's what I was thinking though maybe didn't explain well. Sounds good to me!",
        "createdAt": "2022-07-12T21:05:30Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I might be wrong, but is the idea here that every `kvp => <listName>.Add...` delegate is new and therefore allocated, whereas making it `(list, kvp => list.Add...` is the same no matter which list you pass in, which makes it only allocated once?\r\n\r\nYou can hover over the `=>` in VS and see what is captured in a lambda. You can have `lambda` which is the equivalent to `static (args)` or captures `this, x, y`.\r\n\r\nsharplab.io is quite useful to explain what's going on.\r\n\r\n[Captureless](https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAOgBlYBHAbkwQGZ8lcBhXAb01w91gBdcAzKAFMANgBMqGTvjo9cAWQAUPANoBdXBABOmgDRcYvYQHsAxhGEBKdpzaSpnBAHYN2wgGUArmAUAPXAF4APlwfCwkpAF9MCKA) \r\n\r\n[Captureless static](https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAOgBlYBHAbkwQGZ8lcBhXAb01w91gBdcAzKAFMANgBMqGTvjo9cAWQAUPANoBdXBABOmgDRcYvYQHsAxhGEBKdpzaSpnBAHYN2wgGUArmAUEAbLgAPXABeAD5AiwkpAF9MaKA) \r\n\r\n[Captures this](https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAOgBlYBHAbkwQGZ8lcBhXAb01w91gBdcAzKAFMANgBMqGTvjo9cAWQAUPANoBdXBABOmgDRcYvYQHsAxhGEBKdpzaSpnBAHYN2wgGUArmAUAPXAF4APn4hMVwAalwfCwkpAF9MOKA) \r\n\r\n[Captures local](https://sharplab.io/#v2:EYLgtghglgdgPgAQEwEYCwAoBAGABAlAOgBlYBHAbkwQGZ8lcBhXAb01w91gBdcAzKAFMANgBMqGTvjo9cAWQAUPANoBdXBABOmgDRcYvYQHsAxhGEBKdpzaSpnBAHYN2wgGUArmAUAPXAF4APlxjM2FcAGpcHwsJKQBfTHigA==) ",
        "createdAt": "2022-07-13T14:18:10Z",
        "author": {
          "login": "Therzok"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I think a rename like this would have helped me understand the idea.\r\n\r\n```suggestion\r\n        public static void EnumerateProperties<TAccumulator>(IEnumerable properties, TAccumulator accumulator, Action<TAccumulator, KeyValuePair<string, string>> callback)\r\n```",
              "createdAt": "2022-07-12T14:29:43Z",
              "path": "src/Build/Utilities/Utilities.cs",
              "diffHunk": "@@ -618,7 +618,7 @@ public static T[] ToArray<T>(this IEnumerator<T> enumerator)\n             return enumerator.ToEnumerable().ToArray();\n         }\n \n-        public static void EnumerateProperties(IEnumerable properties, Action<KeyValuePair<string, string>> callback)\n+        public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, Action<TArg, KeyValuePair<string, string>> callback)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "`TArg` is the name commonly used for this pattern, such as in [`System.Collections.Immutable.ImmutableInterlocked`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.immutable.immutableinterlocked?view=net-6.0) and [`System.Collections.Concurrent.ConcurrentDictionary<TKey,TValue>`](https://docs.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2?view=net-6.0).\r\n\r\nDoes that change your mind? Feel free to commit your suggestion.\r\n",
              "createdAt": "2022-07-12T22:53:44Z",
              "path": "src/Build/Utilities/Utilities.cs",
              "diffHunk": "@@ -618,7 +618,7 @@ public static T[] ToArray<T>(this IEnumerator<T> enumerator)\n             return enumerator.ToEnumerable().ToArray();\n         }\n \n-        public static void EnumerateProperties(IEnumerable properties, Action<KeyValuePair<string, string>> callback)\n+        public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, Action<TArg, KeyValuePair<string, string>> callback)",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "My $0.02 would be that `TAccumulator` makes sense when you need the collection element type, as `TArg` refers to an arbitrary argument.\r\n\r\nExpressed in c#, generic constraints would be expressed as `Sum<T, TArg, TAccumulator>(this T target, TArg arg, TAccumulator initial) where T:IEnumerable<TAccumulator>`",
              "createdAt": "2022-07-13T14:23:48Z",
              "path": "src/Build/Utilities/Utilities.cs",
              "diffHunk": "@@ -618,7 +618,7 @@ public static T[] ToArray<T>(this IEnumerator<T> enumerator)\n             return enumerator.ToEnumerable().ToArray();\n         }\n \n-        public static void EnumerateProperties(IEnumerable properties, Action<KeyValuePair<string, string>> callback)\n+        public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, Action<TArg, KeyValuePair<string, string>> callback)",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "Did we end on using TArg or TAccumulator here? I don't have much of a preference myself; just want to know if it's ready to merge or not.",
              "createdAt": "2022-07-14T18:50:42Z",
              "path": "src/Build/Utilities/Utilities.cs",
              "diffHunk": "@@ -618,7 +618,7 @@ public static T[] ToArray<T>(this IEnumerator<T> enumerator)\n             return enumerator.ToEnumerable().ToArray();\n         }\n \n-        public static void EnumerateProperties(IEnumerable properties, Action<KeyValuePair<string, string>> callback)\n+        public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, Action<TArg, KeyValuePair<string, string>> callback)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I still prefer `TAccumulator` but not enough to block the merge on it :)",
              "createdAt": "2022-07-15T15:41:26Z",
              "path": "src/Build/Utilities/Utilities.cs",
              "diffHunk": "@@ -618,7 +618,7 @@ public static T[] ToArray<T>(this IEnumerator<T> enumerator)\n             return enumerator.ToEnumerable().ToArray();\n         }\n \n-        public static void EnumerateProperties(IEnumerable properties, Action<KeyValuePair<string, string>> callback)\n+        public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, Action<TArg, KeyValuePair<string, string>> callback)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}