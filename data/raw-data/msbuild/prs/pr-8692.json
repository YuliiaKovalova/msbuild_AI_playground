{
  "number": 8692,
  "title": "Emit relative path to output",
  "body": "A top comment from the folks who've seen this is that the absolute paths take up a bunch of space and making them relative would be a UX nicety. This is the simplest possible approach for that: string prefix truncation with no path comparison anything.",
  "state": "MERGED",
  "createdAt": "2023-04-22T01:59:41Z",
  "updatedAt": "2023-04-25T23:13:53Z",
  "closedAt": "2023-04-25T23:13:52Z",
  "mergedAt": "2023-04-25T23:13:52Z",
  "additions": 19,
  "deletions": 2,
  "changedFiles": 1,
  "headRefName": "livelogger-relative-path",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1170ac47451a8360fce7e3d7daeb13042b787051",
          "message": "Emit relative path to output",
          "committedDate": "2023-04-13T17:11:52Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dc86d5346c9286addb17d05049311c9e4a747df4",
          "message": "Case-insensitive comparison and fix links",
          "committedDate": "2023-04-24T14:36:31Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "750d47a1050e7818115a95ec3847b40b2b947f9e",
          "message": "Guard against short output paths",
          "committedDate": "2023-04-25T16:02:39Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fbfeb40645c7646c0dd0106bc03f6775a99351e5",
          "message": "Merge remote-tracking branch 'upstream/main' into livelogger-relative-path",
          "committedDate": "2023-04-25T16:35:24Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d46e3a60c4cde5fa61ebaa24d61a29812d403698",
          "message": "Merge remote-tracking branch 'upstream/main' into livelogger-relative-path",
          "committedDate": "2023-04-25T22:06:56Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Here's a short recording of what it looks like:\r\n\r\n![fsac-build-shortoutput](https://user-images.githubusercontent.com/573979/233801790-e36ae45f-5f33-420b-8b78-d16b8523d2b8.gif)\r\n\r\nIt does help a lot over using absolute paths! This is a reasonable sized terminal window (~1100x600) and it was still legible for this small, 7ish project repo.",
        "createdAt": "2023-04-22T18:58:24Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This should be done later when printing the link so that we can use the full absolute path for link target and the relative path for the text. Windows doesn't know how to open a relative link:\r\n\r\n![image](https://user-images.githubusercontent.com/12206368/233922071-927d94bf-433e-4916-b563-8738396fc53d.png)\r\n",
              "createdAt": "2023-04-24T07:01:19Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -468,6 +473,12 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)\n                     _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n                 {\n                     ReadOnlyMemory<char> outputPath = e.Message.AsMemory().Slice(index + 4);\n+\n+                    if (outputPath.Span.Slice(0, _initialWorkingDirectory.Length).SequenceEqual(_initialWorkingDirectory.AsSpan()))\n+                    {\n+                        outputPath = outputPath.Slice(_initialWorkingDirectory.Length + 1);\n+                    }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Nice catch, thanks.",
              "createdAt": "2023-04-24T14:38:06Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -468,6 +473,12 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)\n                     _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n                 {\n                     ReadOnlyMemory<char> outputPath = e.Message.AsMemory().Slice(index + 4);\n+\n+                    if (outputPath.Span.Slice(0, _initialWorkingDirectory.Length).SequenceEqual(_initialWorkingDirectory.AsSpan()))\n+                    {\n+                        outputPath = outputPath.Slice(_initialWorkingDirectory.Length + 1);\n+                    }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This comparison should be case insensitive on Windows. The strings we get here from the `CopyFilesToOutputDirectory` message include a user-specified part that could have a different casing than what `Environment.CurrentDirectory` returns.\r\n\r\n![image](https://user-images.githubusercontent.com/12206368/233923001-e4f7fe9c-42b0-42ce-92d4-6370202926f8.png)\r\n",
              "createdAt": "2023-04-24T07:05:23Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -468,6 +473,12 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)\n                     _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n                 {\n                     ReadOnlyMemory<char> outputPath = e.Message.AsMemory().Slice(index + 4);\n+\n+                    if (outputPath.Span.Slice(0, _initialWorkingDirectory.Length).SequenceEqual(_initialWorkingDirectory.AsSpan()))",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It's not possible for `outputPathSpan` to be the same as `_initialWorkingDirectory` to cause a crash here, is it?",
              "createdAt": "2023-04-24T14:53:42Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -360,10 +366,20 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)\n                         {\n                             // Ignore any GetDirectoryName exceptions.\n                         }\n+\n+                        // If the output path is under the initial working directory, make the console output relative to that to save space.\n+                        if (outputPathSpan.StartsWith(_initialWorkingDirectory.AsSpan(), FileUtilities.PathComparison)\n+                            && (outputPathSpan[_initialWorkingDirectory.Length] == Path.DirectorySeparatorChar",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Hm. Not normally, but we can't control what projects might emit, so we should definitely guard against this.",
              "createdAt": "2023-04-25T15:13:32Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -360,10 +366,20 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)\n                         {\n                             // Ignore any GetDirectoryName exceptions.\n                         }\n+\n+                        // If the output path is under the initial working directory, make the console output relative to that to save space.\n+                        if (outputPathSpan.StartsWith(_initialWorkingDirectory.AsSpan(), FileUtilities.PathComparison)\n+                            && (outputPathSpan[_initialWorkingDirectory.Length] == Path.DirectorySeparatorChar",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}