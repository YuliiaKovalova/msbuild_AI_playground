{
  "number": 8465,
  "title": "[LiveLogger] Report build time",
  "body": "Fixes #8450\r\n\r\n### Context\r\nThe console logger shows the total time elapsed for the build in the summary. It should also be shown on the summary for the LiveLogger\r\n\r\n### Changes Made\r\nThe difference between the time at build start and build end is displayed in the summary at the end of the build.\r\n\r\n### Testing\r\nManual testing\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-02-16T19:21:24Z",
  "updatedAt": "2023-02-22T02:01:20Z",
  "closedAt": "2023-02-22T02:01:20Z",
  "mergedAt": "2023-02-22T02:01:20Z",
  "additions": 23,
  "deletions": 13,
  "changedFiles": 1,
  "headRefName": "edvilme-ll-time",
  "isDraft": false,
  "author": {
    "login": "edvilme"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6309f3fa04c95b4516b984938ed2167f9310e107",
          "message": "Added time elapsed",
          "committedDate": "2023-02-16T19:17:34Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "548d6b0206e6515934b9f306fb6d925fe07d4946",
          "message": "Round time and reformat completion message",
          "committedDate": "2023-02-17T15:24:19Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "72c952207e4cd7a652fec8e942471380de12591f",
          "message": "Switch to stopwatch",
          "committedDate": "2023-02-17T15:30:28Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bd13ff7d3284637809392330b630391308a08353",
          "message": "Merge branch 'main' into edvilme-ll-time",
          "committedDate": "2023-02-21T00:59:40Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ff3fb2596132554c2e8f72245690c0d1fcca9fbf",
          "message": "Fixed bugs",
          "committedDate": "2023-02-21T02:53:57Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "eduardo.villalpando.mello@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I pushed a couple of changes to riff on/think about.",
        "createdAt": "2023-02-17T16:04:58Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Technically, I think these should be UTCNow...I'm not kidding when I say I saw a bug at one point from someone who built in different time zones and saw errors as a result. It 100% shouldn't matter in this case, but just thought I'd mention it.",
              "createdAt": "2023-02-16T21:43:13Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -119,10 +122,12 @@ private void UpdateFooter()\n         // Build\n         private void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)\n         {\n+            startTime = DateTime.Now;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'd think about calling and storing [`Stopwatch.StartNew()`](https://learn.microsoft.com/dotnet/api/system.diagnostics.stopwatch.startnew) instead. It's designed to deal with exactly the monotonic-clock situation, though it generally has more accuracy than we care about for build scenarios (we care about seconds, and ticks/15ms timer accuracy are irrelevant).",
              "createdAt": "2023-02-16T22:09:38Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -119,10 +122,12 @@ private void UpdateFooter()\n         // Build\n         private void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)\n         {\n+            startTime = DateTime.Now;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I definitely want this rounded down, nobody cares about their build time to the ten-thousandth of a second :)\r\n\r\nBut you got me thinking, how do we feel about something like this instead?\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/219503315-b1b39029-89e7-47c3-8ae3-3122e2a852ee.png)\r\n",
              "createdAt": "2023-02-16T22:41:54Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -311,15 +317,15 @@ public void Shutdown()\n             if (succeeded)\n             {\n                 Console.WriteLine(ANSIBuilder.Formatting.Color(\"Build succeeded.\", ANSIBuilder.Formatting.ForegroundColor.Green));\n-                Console.WriteLine($\"\\t{warningCount} Warning(s)\");\n-                Console.WriteLine($\"\\t{errorCount} Error(s)\");\n             }\n             else\n             {\n                 Console.WriteLine(ANSIBuilder.Formatting.Color(\"Build failed.\", ANSIBuilder.Formatting.ForegroundColor.Red));\n-                Console.WriteLine($\"\\t{warningCount} Warnings(s)\");\n-                Console.WriteLine($\"\\t{errorCount} Errors(s)\");\n             }\n+            Console.WriteLine($\"\\t{warningCount} Warnings(s)\");\n+            Console.WriteLine($\"\\t{errorCount} Errors(s)\");\n+            Console.WriteLine();\n+            Console.WriteLine($\"Time elapsed {buildDuration.ToString()}\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'm good with that \ud83d\ude42",
              "createdAt": "2023-02-17T01:01:01Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -311,15 +317,15 @@ public void Shutdown()\n             if (succeeded)\n             {\n                 Console.WriteLine(ANSIBuilder.Formatting.Color(\"Build succeeded.\", ANSIBuilder.Formatting.ForegroundColor.Green));\n-                Console.WriteLine($\"\\t{warningCount} Warning(s)\");\n-                Console.WriteLine($\"\\t{errorCount} Error(s)\");\n             }\n             else\n             {\n                 Console.WriteLine(ANSIBuilder.Formatting.Color(\"Build failed.\", ANSIBuilder.Formatting.ForegroundColor.Red));\n-                Console.WriteLine($\"\\t{warningCount} Warnings(s)\");\n-                Console.WriteLine($\"\\t{errorCount} Errors(s)\");\n             }\n+            Console.WriteLine($\"\\t{warningCount} Warnings(s)\");\n+            Console.WriteLine($\"\\t{errorCount} Errors(s)\");\n+            Console.WriteLine();\n+            Console.WriteLine($\"Time elapsed {buildDuration.ToString()}\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "So you mean only minutes:seconds and not fractions of a second?",
              "createdAt": "2023-02-17T01:03:26Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -311,15 +317,15 @@ public void Shutdown()\n             if (succeeded)\n             {\n                 Console.WriteLine(ANSIBuilder.Formatting.Color(\"Build succeeded.\", ANSIBuilder.Formatting.ForegroundColor.Green));\n-                Console.WriteLine($\"\\t{warningCount} Warning(s)\");\n-                Console.WriteLine($\"\\t{errorCount} Error(s)\");\n             }\n             else\n             {\n                 Console.WriteLine(ANSIBuilder.Formatting.Color(\"Build failed.\", ANSIBuilder.Formatting.ForegroundColor.Red));\n-                Console.WriteLine($\"\\t{warningCount} Warnings(s)\");\n-                Console.WriteLine($\"\\t{errorCount} Errors(s)\");\n             }\n+            Console.WriteLine($\"\\t{warningCount} Warnings(s)\");\n+            Console.WriteLine($\"\\t{errorCount} Errors(s)\");\n+            Console.WriteLine();\n+            Console.WriteLine($\"Time elapsed {buildDuration.ToString()}\");",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      }
    ]
  }
}