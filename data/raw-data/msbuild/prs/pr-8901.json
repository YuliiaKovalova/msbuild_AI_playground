{
  "number": 8901,
  "title": "[Don't merge] RAR cache file optimization",
  "body": "Attempts to fix #8635\r\n\r\n### Context\r\n\r\nThe per-project RAR cache is always read from disk and deserialized prior to actual RAR execution. This is wasteful in situations when we already have all required data in memory - when RAR is hosted in a long-running process like MSBuild server or out-of-proc node. This PR attempts to implement a mechanism by which the load could be avoided, while maintaining the guarantee that the cache file has well-defined contents after RAR is done.\r\n\r\n### Changes Made\r\n\r\n- Made loading of the cache file lazy/on demand. If everything is satisfied from the process-wide cache, the file is not loaded. When the file is loaded, its contents are merged with what we've calculated to be the per-project cached data so far.\r\n- Made saving of the cache file conditional as well, by following an elaborate scheme. We cache metadata about the file in memory to decide if it should be saved after RAR has done executing.\r\n\r\n### Testing\r\n\r\n- Functional: Verified that when building with MSBuild server enabled and `/m:1`, in large solutions like OrchardCore zero loads and saves of cache files occur in incremental builds. Everything is satisfied from memory.\r\n- Performance: Measured the wall clock time savings in incremental build compared to baseline. Even with the baseline being larger cache files without #8802, the best I could get was ~5% faster RAR.\r\n\r\n### Notes\r\n\r\nI am opening the PR for posterity but the impact is currently not high enough to justify the churn and added complexity. The 5% cited above is achievable only in very special cases like server + `/m:1`. In real-world parallel builds, due to non-deterministic scheduling of projects to nodes, it takes a very long time for all nodes to get warmed up to the point where most cache loads can actually be avoided.\r\n\r\nWe could do better if we loosen up the requirements for saves (see [this comment](https://github.com/dotnet/msbuild/commit/45f704e55f1afd8ac3e804d723777d0adc49d32e#diff-81a7afe73fef8c5ab9186b64cfc47b8eb107a3a8ac4080e3fa825a8eb0744f55R2069-R2091)) but I'm afraid that would come back to bite us in the future.",
  "state": "CLOSED",
  "createdAt": "2023-06-16T07:45:44Z",
  "updatedAt": "2023-06-16T07:45:52Z",
  "closedAt": "2023-06-16T07:45:52Z",
  "mergedAt": null,
  "additions": 656,
  "deletions": 312,
  "changedFiles": 6,
  "headRefName": "rar-cache-file-optimization",
  "isDraft": true,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "do-not-merge"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e230803b86df7c8dab4c13f25428031db9c4fb57",
          "message": "Split SystemState into ResolveAssemblyReferenceCache (on-disk cache) and memory cache",
          "committedDate": "2023-06-12T14:24:04Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "576ae20452ba7a0b259b09f5375125e47c1417b6",
          "message": "Implement lazy loading of RAR on-disk cache",
          "committedDate": "2023-06-12T14:24:28Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "45f704e55f1afd8ac3e804d723777d0adc49d32e",
          "message": "Make on-disk cache contents deterministic",
          "committedDate": "2023-06-12T14:25:36Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d876eee0650d8e486003aa4b57df9d00133aa2cf",
          "message": "Various fixes (incomplete)",
          "committedDate": "2023-06-16T07:14:44Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": []
  }
}