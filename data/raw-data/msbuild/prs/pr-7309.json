{
  "number": 7309,
  "title": "Implement warnnotaserror Fixes #3062",
  "body": "Fixes #3062\r\n\r\n### Context\r\nWe previously had warnaserror (and a property for it) that, when you specified error codes, upgraded those error codes from warnings to errors. If you just left it empty, it upgraded all warnings to errors. (Null meant don't upgrade.)\r\n\r\nThis adds that you can ask for all error codes to be upgraded, then downgrade just a few of them (via codes) back to warnings.\r\n\r\n### Changes Made\r\nImplement WarnNotAsError both as a command line switch and as a property.\r\n\r\n### Testing\r\nAdded a unit test. Tried it out from the command line.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-01-21T01:21:39Z",
  "updatedAt": "2022-02-23T20:56:47Z",
  "closedAt": "2022-02-16T01:45:49Z",
  "mergedAt": "2022-02-16T01:45:48Z",
  "additions": 892,
  "deletions": 118,
  "changedFiles": 33,
  "headRefName": "warn-not-as-error",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": {
    "title": "VS 17.2"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "977e445778aa2aa75266a7616fdb3f95ab718059",
          "message": "Only log warnings with WarnNotAsError\n\nFixes #3062",
          "committedDate": "2022-01-20T21:59:45Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d83e8598f5a089441785d021076696afe05145c2",
          "message": "Support WarnNotAsError elsewhere\n\nShould now work for:\nTaskHosts\nIf set via property (and then only for that project)",
          "committedDate": "2022-01-21T01:19:32Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b399154e1e7515ab091d53555d060719fe9c8ab7",
          "message": "Add test",
          "committedDate": "2022-01-21T01:19:40Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "97867fc569cf9bf809fddc4fa5a0382569f8e5a8",
          "message": "Fix failing tests",
          "committedDate": "2022-01-21T14:53:32Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "576149aa190bd0a4f44a597c47dd5789303bb7ab",
          "message": "PR comments",
          "committedDate": "2022-01-25T00:14:12Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "98084887e643edf65573fd2ab9456b960f90b1dc",
          "message": "Add more comprehensive tests",
          "committedDate": "2022-01-25T00:14:20Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "95d2962d62dc73bb857c427b4c5f89442b4022ad",
          "message": "Little fix",
          "committedDate": "2022-01-26T19:36:36Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "21c54b2a8fe3697bd9fabd09e22bff2edfbf84cd",
          "message": "Merge branch 'main' into warn-not-as-error",
          "committedDate": "2022-01-31T16:40:58Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "06fa9fa3f109f6be0bd18ce6fe6c85a4a67127c6",
          "message": "Add comments",
          "committedDate": "2022-01-31T17:33:14Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "de263ad8fd8443c47f6f8991c2e690d442c0b405",
          "message": "Merge branch 'warn-not-as-error' of https://github.com/Forgind/msbuild into warn-not-as-error",
          "committedDate": "2022-01-31T17:33:18Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8f0f08ffa3261780916ba3cfea5a4719ac21a36a",
          "message": "Bad merge?\n\nI really don't know how this is even vaguely possible\u2014but it looks like main is wrong?",
          "committedDate": "2022-01-31T17:54:38Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a777eb335eac97930652535be9c828a11d6cdf1d",
          "message": "Move BuildThreadPriority to unshipped",
          "committedDate": "2022-01-31T19:04:25Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    <value>MSBUILD : error MSB1060: Specify one or more warning codes when using the -warnNotAsError switch.</value>\r\n```",
              "createdAt": "2022-01-21T15:42:28Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -1258,6 +1274,14 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       LOCALIZATION: The prefix \"MSBUILD : error MSBxxxx:\" should not be localized.\n     </comment>\n   </data>\n+  <data name=\"MissingWarnNotAsErrorParameterError\" UESanitized=\"true\" Visibility=\"Public\">\n+    <value>MSBUILD : error MSB1060: Specify one or more warning codes to keep as warnings despite a global -warnaserror when using the -warnNotAsError switch.</value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why not error if `-warnaserror` is not on?",
              "createdAt": "2022-01-21T15:45:17Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -824,6 +824,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.\n     </comment>\n   </data>\n+  <data name=\"HelpMessage_40_WarnNotAsErrorSwitch\" Visibility=\"Public\">\n+    <value>\n+      -warnNotAsError[:code[;code2]]\n+                     List of warning codes to treats not treat as errors.\n+                     Use a semicolon or a comma to separate\n+                     multiple warning codes. Has no effect if the -warnaserror\n+                     switch is not set.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "If `warnaserror` is not set at all, no warnings are promoted to errors anyway, so there's nothing to revert to a warning.\r\n\r\nMore generally, you can clear the warnaserror switch, so I thought of this as only important if the user asked all warnings to be promoted. That said, I'm not opposed to make it revert error codes even if there are only a few warnings promoted to errors. I'm curious as to whether it's more confusing, if someone is unaware of the WarningsNotAsErrors switch, to have a switch clearly set but not doing anything versus rely on all warnings to be promoted and have one just not be.",
              "createdAt": "2022-01-21T20:58:16Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -824,6 +824,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.\n     </comment>\n   </data>\n+  <data name=\"HelpMessage_40_WarnNotAsErrorSwitch\" Visibility=\"Public\">\n+    <value>\n+      -warnNotAsError[:code[;code2]]\n+                     List of warning codes to treats not treat as errors.\n+                     Use a semicolon or a comma to separate\n+                     multiple warning codes. Has no effect if the -warnaserror\n+                     switch is not set.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'm proposing emitting a new warning at command-line-parsing time that says \" you said warnnotaserror but didn't have any warnaserrors\"",
              "createdAt": "2022-01-21T20:59:56Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -824,6 +824,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.\n     </comment>\n   </data>\n+  <data name=\"HelpMessage_40_WarnNotAsErrorSwitch\" Visibility=\"Public\">\n+    <value>\n+      -warnNotAsError[:code[;code2]]\n+                     List of warning codes to treats not treat as errors.\n+                     Use a semicolon or a comma to separate\n+                     multiple warning codes. Has no effect if the -warnaserror\n+                     switch is not set.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "You could still have a project-level warnaserror that you wanted not promoted, right?",
              "createdAt": "2022-01-24T15:32:34Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -824,6 +824,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.\n     </comment>\n   </data>\n+  <data name=\"HelpMessage_40_WarnNotAsErrorSwitch\" Visibility=\"Public\">\n+    <value>\n+      -warnNotAsError[:code[;code2]]\n+                     List of warning codes to treats not treat as errors.\n+                     Use a semicolon or a comma to separate\n+                     multiple warning codes. Has no effect if the -warnaserror\n+                     switch is not set.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "NTS: error",
              "createdAt": "2022-01-24T16:23:25Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -824,6 +824,22 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.\n     </comment>\n   </data>\n+  <data name=\"HelpMessage_40_WarnNotAsErrorSwitch\" Visibility=\"Public\">\n+    <value>\n+      -warnNotAsError[:code[;code2]]\n+                     List of warning codes to treats not treat as errors.\n+                     Use a semicolon or a comma to separate\n+                     multiple warning codes. Has no effect if the -warnaserror\n+                     switch is not set.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is fairly confusing. Extract to a named local function and add comments?",
              "createdAt": "2022-01-21T15:48:31Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs",
              "diffHunk": "@@ -748,7 +768,7 @@ public bool ShouldTreatWarningAsError(string warningCode)\n             }\n \n             // An empty set means all warnings are errors.\n-            return WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningCode);\n+            return (WarningsAsErrors.Count == 0 && (WarningsNotAsErrors == null || !WarningsNotAsErrors.Contains(warningCode))) || WarningsAsErrors.Contains(warningCode);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'll hold off on this for now until we've nailed down whether -warnaserror:FOR123 -warnnotaserror:FOR123 should have the warning promoted to an error or not. This should clean itself up if we go with it being just a warning.",
              "createdAt": "2022-01-21T20:59:30Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs",
              "diffHunk": "@@ -748,7 +768,7 @@ public bool ShouldTreatWarningAsError(string warningCode)\n             }\n \n             // An empty set means all warnings are errors.\n-            return WarningsAsErrors.Count == 0 || WarningsAsErrors.Contains(warningCode);\n+            return (WarningsAsErrors.Count == 0 && (WarningsNotAsErrors == null || !WarningsNotAsErrors.Contains(warningCode))) || WarningsAsErrors.Contains(warningCode);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            new ParameterizedSwitchInfo(  new string[] { \"warnnotaserror\", \"noerr\" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           \"MissingWarnNotAsErrorParameterError\", true,   false ),\r\n```",
              "createdAt": "2022-01-21T15:55:14Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -263,6 +264,7 @@ bool emptyParametersAllowed\n             new ParameterizedSwitchInfo(  new string[] { \"preprocess\", \"pp\" },                  ParameterizedSwitch.Preprocess,                 null,                           false,          null,                                  true,   false  ),\n             new ParameterizedSwitchInfo(  new string[] { \"targets\", \"ts\" },                     ParameterizedSwitch.Targets,                    null,                           false,          null,                                  true,   false  ),\n             new ParameterizedSwitchInfo(  new string[] { \"warnaserror\", \"err\" },                ParameterizedSwitch.WarningsAsErrors,           null,                           true,           null,                                  true,   true   ),\n+            new ParameterizedSwitchInfo(  new string[] { \"warnnotaserror\", \"noerr\" },           ParameterizedSwitch.WarningsNotAsErrors,        null,                           true,           \"MissingWarnNotAsErrorParameterError\", true,   true   ),",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Sounds like you're making a decision that it's invalid to build with `-warnaserrors:AB1234,CD5678` and then in a project set `<MSBuildWarningsNotAsErrors>AB1234</MSBuildWarningsNotAsErrors>`. Do you think that's right? I'm not sure myself.",
              "createdAt": "2022-01-21T16:02:32Z",
              "path": "src/Build/BackEnd/Components/Logging/ILoggingService.cs",
              "diffHunk": "@@ -163,6 +163,15 @@ ISet<string> WarningsAsErrors\n             set;\n         }\n \n+        /// <summary>\n+        /// Set of warnings to not treat as errors. Only has any effect if WarningsAsErrors is non-null but empty.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I know this is copy-pasted from above but the return type is not hashset:\r\n\r\n```suggestion\r\n        /// Get the warnings that will not be promoted to error for the specified context.\r\n```\r\n\r\n?",
              "createdAt": "2022-01-21T16:03:30Z",
              "path": "src/Build/BackEnd/Components/Logging/ILoggingService.cs",
              "diffHunk": "@@ -248,6 +264,13 @@ MessageImportance MinimumRequiredMessageImportance\n         /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>\n         ICollection<string> GetWarningsAsErrors(BuildEventContext context);\n \n+        /// <summary>\n+        /// Returns a hashset of warnings not to be logged as errors for the specified project instance ID.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// <returns>A collection of warning codes that should not be treated as errors.</returns>\r\n```",
              "createdAt": "2022-01-21T16:04:36Z",
              "path": "src/Build/BackEnd/Components/Logging/ILoggingService.cs",
              "diffHunk": "@@ -248,6 +264,13 @@ MessageImportance MinimumRequiredMessageImportance\n         /// <returns>A Hashset containing warning codes that should be treated as errors.</returns>\n         ICollection<string> GetWarningsAsErrors(BuildEventContext context);\n \n+        /// <summary>\n+        /// Returns a hashset of warnings not to be logged as errors for the specified project instance ID.\n+        /// </summary>\n+        /// <param name=\"context\">The build context through which warnings will not be logged as errors.</param>\n+        /// <returns>A Hashset containing warning codes that should not be treated as errors.</returns>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n```",
              "createdAt": "2022-01-21T16:07:55Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2493,18 +2502,18 @@ internal static TextWriter ProcessTargetsSwitch(string[] parameters)\n             return writer;\n         }\n \n-        internal static ISet<string> ProcessWarnAsErrorSwitch(CommandLineSwitches commandLineSwitches)\n+        private static ISet<string> ProcessWarningRelatedSwitch(CommandLineSwitches commandLineSwitches, CommandLineSwitches.ParameterizedSwitch warningSwitch)\n         {\n             // TODO: Parse an environment variable as well?\n ",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This behavior wasn't present on warnasmessage before. Should it be now?",
              "createdAt": "2022-01-21T16:34:53Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2513,37 +2522,30 @@ internal static ISet<string> ProcessWarnAsErrorSwitch(CommandLineSwitches comman\n                 {\n                     // An empty /warnaserror is added as \"null\".  In this case, the list is cleared\n                     // so that all warnings are treated errors\n-                    warningsAsErrors.Clear();\n+                    warningSwitches.Clear();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good catch, but also, I'd vote yes. It could theoretically break someone who has /warnasmessage:FOR123 /warnasmessage:, but if you were doing something bad, I'd say you deserve that. It's very logical to assume that converting warnings to errors/messages should work the same way, so we should do that.",
              "createdAt": "2022-01-24T22:36:31Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2513,37 +2522,30 @@ internal static ISet<string> ProcessWarnAsErrorSwitch(CommandLineSwitches comman\n                 {\n                     // An empty /warnaserror is added as \"null\".  In this case, the list is cleared\n                     // so that all warnings are treated errors\n-                    warningsAsErrors.Clear();\n+                    warningSwitches.Clear();",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Hm. Starting to wonder if the public API promotion should be in `main` rather than the release branch, since it will be an annoying merge here. But we also _just_ checked in a revert that changed public API after forking so maybe not?",
              "createdAt": "2022-01-21T16:36:09Z",
              "path": "src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt",
              "diffHunk": "@@ -10,4 +10,6 @@ Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path,\n Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool\n Microsoft.Build.FileSystem.IDirectoryCacheFactory\n Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache\n-static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob\n\\ No newline at end of file\n+static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "*cough*",
              "createdAt": "2022-01-21T16:45:30Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -220,6 +220,11 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu\n         /// </summary>\n         private IDictionary<int, ISet<string>> _warningsAsErrorsByProject;\n \n+        /// <summary>\n+        /// A list of warnings to treat as errors for an associated <see cref=\"BuildEventContext\"/>.  If an empty set, all warnings are treated as errors.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Comments please",
              "createdAt": "2022-01-21T16:56:11Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -570,76 +584,65 @@ public bool HasBuildSubmissionLoggedErrors(int submissionId)\n         /// </returns>\n         public ICollection<string> GetWarningsAsErrors(BuildEventContext context)\n         {\n-            int key = GetWarningsAsErrorOrMessageKey(context);\n-\n-            if (_warningsAsErrorsByProject != null && _warningsAsErrorsByProject.TryGetValue(key, out ISet<string> warningsAsErrors))\n-            {\n-                if (WarningsAsErrors != null)\n-                {\n-                    warningsAsErrors.UnionWith(WarningsAsErrors);\n-                }\n+            return GetWarningsForProject(context, _warningsAsErrorsByProject, WarningsAsErrors);\n+        }\n \n-                return warningsAsErrors;\n-            }\n-            else\n-            {\n-                return WarningsAsErrors;\n-            }\n+        public ICollection<string> GetWarningsNotAsErrors(BuildEventContext context)\n+        {\n+            return GetWarningsForProject(context, _warningsNotAsErrorsByProject, WarningsNotAsErrors);\n         }\n \n         public ICollection<string> GetWarningsAsMessages(BuildEventContext context)\n+        {\n+            return GetWarningsForProject(context, _warningsAsMessagesByProject, WarningsAsMessages);\n+        }\n+\n+        private ICollection<string> GetWarningsForProject(BuildEventContext context, IDictionary<int, ISet<string>> warningsByProject, ISet<string> warnings)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}