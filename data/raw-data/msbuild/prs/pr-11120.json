{
  "number": 11120,
  "title": "Option to avoid \"fixing\" \\ in new TaskItem() ",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/11083\r\n\r\n### Context\r\nSometimes `TaskItems` are not file paths, and we currently treat all of them as file paths and try to fix backslashes into slashes. \r\n\r\n### Changes Made\r\nAdded an option where `TaskItems` can be created without a reference to a path, and it will not try to fix it.\r\n",
  "state": "MERGED",
  "createdAt": "2024-12-10T17:29:54Z",
  "updatedAt": "2025-03-10T15:05:20Z",
  "closedAt": "2024-12-13T16:41:44Z",
  "mergedAt": "2024-12-13T16:41:44Z",
  "additions": 21,
  "deletions": 4,
  "changedFiles": 1,
  "headRefName": "11083",
  "isDraft": false,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "18023726134a4d7325eb4028e399ff8ddc2754a3",
          "message": "check if it is filepath",
          "committedDate": "2024-12-10T17:27:25Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6d2c46a634a601a1f7d2ceb2be9bf74ffd5abf94",
          "message": "Note to self: avoid coding when very tired",
          "committedDate": "2024-12-11T10:21:04Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "84606017152f3c382a7ea6de601f97fbae6aa964",
          "message": "Keep old constructor",
          "committedDate": "2024-12-11T14:48:16Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2ef5117e0d29ebaf740384eb1a52f3debb49e136",
          "message": "Removed default value",
          "committedDate": "2024-12-13T12:19:39Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "23a7761116bc843ee5a812248785b9555bd23722",
          "message": "Fix build error",
          "committedDate": "2024-12-13T13:24:02Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "862c796f1c58510a0695f3e17848c9145c22888f",
          "message": "Updated comments from PR suggestions",
          "committedDate": "2024-12-13T15:51:02Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e4474a63108c8d004342614e969b41db2d95892f",
          "message": "File was not saved with all the changes -_-",
          "committedDate": "2024-12-13T15:53:52Z",
          "author": {
            "name": "Mariana Dematte",
            "email": "magarces@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// If <param name=\"treatAsFilePath\" /> is set to <see langword=\"true\" />, the value in <param name=\"itemSpec\" /> will be fixed up as path by having backslashes replaced with slashes.\r\n```",
              "createdAt": "2024-12-10T17:40:10Z",
              "path": "src/Utilities/TaskItem.cs",
              "diffHunk": "@@ -75,14 +75,23 @@ public TaskItem()\n         /// <summary>\n         /// This constructor creates a new task item, given the item spec.\n         /// </summary>\n-        /// <comments>Assumes the itemspec passed in is escaped.</comments>\n+        /// <comments>\n+        /// Assumes the itemspec passed in is escaped.\n+        /// If tratAsFilePath is set to true, it will try to fix itemSpac backslashes into slashes.",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// <param name=\"treatAsFilePath\">Specifies whether or not to treat the value in <param name=\"itemSpec\" /> as a file path and attempt to normalize it.  Defaults to <see langword=\"true\" />.</param>\r\n```",
              "createdAt": "2024-12-10T17:41:19Z",
              "path": "src/Utilities/TaskItem.cs",
              "diffHunk": "@@ -75,14 +75,23 @@ public TaskItem()\n         /// <summary>\n         /// This constructor creates a new task item, given the item spec.\n         /// </summary>\n-        /// <comments>Assumes the itemspec passed in is escaped.</comments>\n+        /// <comments>\n+        /// Assumes the itemspec passed in is escaped.\n+        /// If tratAsFilePath is set to true, it will try to fix itemSpac backslashes into slashes.\n+        /// </comments>\n         /// <param name=\"itemSpec\">The item-spec string.</param>\n+        /// <param name=\"treatAsFilePath\">If item-spec string is a path or not.</param>",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This isn't setting `_itemSpec` if `treatAsFilePath` is `false`.\r\n\r\n```suggestion\r\n            _itemSpec = treatAsFilePath ? FileUtilities.FixFilePath(itemSpec) : itemSpec;\r\n```",
              "createdAt": "2024-12-10T17:43:09Z",
              "path": "src/Utilities/TaskItem.cs",
              "diffHunk": "@@ -75,14 +75,23 @@ public TaskItem()\n         /// <summary>\n         /// This constructor creates a new task item, given the item spec.\n         /// </summary>\n-        /// <comments>Assumes the itemspec passed in is escaped.</comments>\n+        /// <comments>\n+        /// Assumes the itemspec passed in is escaped.\n+        /// If tratAsFilePath is set to true, it will try to fix itemSpac backslashes into slashes.\n+        /// </comments>\n         /// <param name=\"itemSpec\">The item-spec string.</param>\n+        /// <param name=\"treatAsFilePath\">If item-spec string is a path or not.</param>\n         public TaskItem(\n-            string itemSpec)\n+            string itemSpec,\n+            bool treatAsFilePath = true)\n         {\n             ErrorUtilities.VerifyThrowArgumentNull(itemSpec);\n \n-            _itemSpec = FileUtilities.FixFilePath(itemSpec);\n+            if (treatAsFilePath)\n+            {\n+\n+                _itemSpec = FileUtilities.FixFilePath(itemSpec);\n+            }",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I *believe* combining 'coliding' explicit signature with and without default params is an antipattern.\r\nCan we make the `treatAsFilePath` mandatory here? ",
              "createdAt": "2024-12-11T15:30:32Z",
              "path": "src/Utilities/TaskItem.cs",
              "diffHunk": "@@ -77,12 +77,28 @@ public TaskItem()\n         /// </summary>\n         /// <comments>Assumes the itemspec passed in is escaped.</comments>\n         /// <param name=\"itemSpec\">The item-spec string.</param>\n+        public TaskItem(string itemSpec) => new TaskItem(itemSpec, treatAsFilePath: true);\n+\n+        /// <summary>\n+        /// This constructor creates a new task item, given the item spec.\n+        /// </summary>\n+        /// <comments>\n+        /// Assumes the itemspec passed in is escaped.\n+        /// If <see name=\"treatAsFilePath\" /> is set to <see langword=\"true\" />, the value in <see name=\"itemSpec\" />\n+        /// will be fixed up as path by having backslashes replaced with slashes.\n+        /// </comments>\n+        /// <param name=\"itemSpec\">The item-spec string.</param>\n+        /// <param name=\"treatAsFilePath\">\n+        /// Specifies whether or not to treat the value in <see name=\"itemSpec\" />\n+        /// as a file path and attempt to normalize it.  Defaults to <see langword=\"true\" />.\n+        /// </param>\n         public TaskItem(\n-            string itemSpec)\n+            string itemSpec,\n+            bool treatAsFilePath = true)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// will be fixed up as a path by having any backslashes replaced with slashes.\r\n```",
              "createdAt": "2024-12-13T15:23:57Z",
              "path": "src/Utilities/TaskItem.cs",
              "diffHunk": "@@ -77,12 +77,29 @@ public TaskItem()\n         /// </summary>\n         /// <comments>Assumes the itemspec passed in is escaped.</comments>\n         /// <param name=\"itemSpec\">The item-spec string.</param>\n+        public TaskItem(string itemSpec)\n+            : this(itemSpec, treatAsFilePath: true) { }\n+\n+        /// <summary>\n+        /// This constructor creates a new task item, given the item spec.\n+        /// </summary>\n+        /// <comments>\n+        /// Assumes the itemspec passed in is escaped.\n+        /// If <see name=\"treatAsFilePath\" /> is set to <see langword=\"true\" />, the value in <see name=\"itemSpec\" />\n+        /// will be fixed up as path by having backslashes replaced with slashes.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: it doesn't default to `true`; the older overload passes true.\r\n\r\n```suggestion\r\n        /// as a file path and attempt to normalize it.\r\n```",
              "createdAt": "2024-12-13T15:24:52Z",
              "path": "src/Utilities/TaskItem.cs",
              "diffHunk": "@@ -77,12 +77,29 @@ public TaskItem()\n         /// </summary>\n         /// <comments>Assumes the itemspec passed in is escaped.</comments>\n         /// <param name=\"itemSpec\">The item-spec string.</param>\n+        public TaskItem(string itemSpec)\n+            : this(itemSpec, treatAsFilePath: true) { }\n+\n+        /// <summary>\n+        /// This constructor creates a new task item, given the item spec.\n+        /// </summary>\n+        /// <comments>\n+        /// Assumes the itemspec passed in is escaped.\n+        /// If <see name=\"treatAsFilePath\" /> is set to <see langword=\"true\" />, the value in <see name=\"itemSpec\" />\n+        /// will be fixed up as path by having backslashes replaced with slashes.\n+        /// </comments>\n+        /// <param name=\"itemSpec\">The item-spec string.</param>\n+        /// <param name=\"treatAsFilePath\">\n+        /// Specifies whether or not to treat the value in <see name=\"itemSpec\" />\n+        /// as a file path and attempt to normalize it.  Defaults to <see langword=\"true\" />.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// <comments>Assumes the itemspec passed in is escaped and represents a file path.</comments>\r\n```",
              "createdAt": "2024-12-13T15:25:30Z",
              "path": "src/Utilities/TaskItem.cs",
              "diffHunk": "@@ -77,12 +77,29 @@ public TaskItem()\n         /// </summary>\n         /// <comments>Assumes the itemspec passed in is escaped.</comments>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}