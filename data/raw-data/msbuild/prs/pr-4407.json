{
  "number": 4407,
  "title": "[Static Graph] Skipped results do not trigger cache miss enforcement",
  "body": "Closes #4343\r\n\r\nPR is based on #4379, review that one first.\r\n\r\nIf a project has skipped targets, subsequent requests for those targets trigger the re-execution of the targets. This erroneously causes the static graph constraint of no cache misses. To fix it, `BuildParameters.IsolateProjects` will cause the `ResultsCache` to not issue a cache miss on skipped targets. This seems quite reasonable because in an isolated graph build, a project is visited only once.",
  "state": "MERGED",
  "createdAt": "2019-05-29T01:31:50Z",
  "updatedAt": "2020-12-30T22:53:50Z",
  "closedAt": "2019-06-12T21:41:59Z",
  "mergedAt": "2019-06-12T21:41:59Z",
  "additions": 197,
  "deletions": 106,
  "changedFiles": 10,
  "headRefName": "schedulerBug",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ba7eb06f506fc37006cd05c3e9453a891df00786",
          "message": "Add Tests",
          "committedDate": "2019-06-11T22:43:10Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4f0c4e9858b58861d42b068105896bb9a5ddcd37",
          "message": "Skipped results do not trigger cache miss enforcement\n\ncloses #4343",
          "committedDate": "2019-06-11T22:43:10Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this perf sensitive code? Historically we kept LINQ out of the codebase, or at least out of perf sensitive places. It tends to have hidden costs.",
              "createdAt": "2019-05-29T18:05:05Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -710,6 +714,47 @@ public List<string> GetAfterTargetsForDefaultTargets(BuildRequest request)\n             return null;\n         }\n \n+        private Func<string, bool> shouldSkipStaticGraphIsolationOnReference;\n+\n+        public bool ShouldSkipIsolationConstraintsForReference(string referenceFullPath)\n+        {\n+            ErrorUtilities.VerifyThrowInternalNull(Project, nameof(Project));\n+            ErrorUtilities.VerifyThrowInternalLength(referenceFullPath, nameof(referenceFullPath));\n+            ErrorUtilities.VerifyThrow(Path.IsPathRooted(referenceFullPath), \"Method does not treat path normalization cases\");\n+\n+            if (shouldSkipStaticGraphIsolationOnReference == null)\n+            {\n+                shouldSkipStaticGraphIsolationOnReference = GetReferenceFilter();\n+            }\n+\n+            return shouldSkipStaticGraphIsolationOnReference(referenceFullPath);\n+\n+            Func<string, bool> GetReferenceFilter()\n+            {\n+                lock (_syncLock)\n+                {\n+                    if (shouldSkipStaticGraphIsolationOnReference != null)\n+                    {\n+                        return shouldSkipStaticGraphIsolationOnReference;\n+                    }\n+\n+                    var items = Project.GetItems(ItemTypeNames.ReferencesToSkipGraphIsolationConstraintsOn);\n+\n+                    if (items.Count == 0 || items.All(i => string.IsNullOrWhiteSpace(i.EvaluatedInclude)))\n+                    {\n+                        return _ => false;\n+                    }\n+\n+                    var fragments = items.SelectMany(i => ExpressionShredder.SplitSemiColonSeparatedList(i.EvaluatedInclude));\n+                    var glob = new CompositeGlob(\n+                        fragments\n+                            .Select(s => MSBuildGlob.Parse(Project.Directory, s)));",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Moved discussion to https://github.com/microsoft/msbuild/pull/4379/files#r289095009. This change belongs to #4379.",
              "createdAt": "2019-05-30T17:41:12Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -710,6 +714,47 @@ public List<string> GetAfterTargetsForDefaultTargets(BuildRequest request)\n             return null;\n         }\n \n+        private Func<string, bool> shouldSkipStaticGraphIsolationOnReference;\n+\n+        public bool ShouldSkipIsolationConstraintsForReference(string referenceFullPath)\n+        {\n+            ErrorUtilities.VerifyThrowInternalNull(Project, nameof(Project));\n+            ErrorUtilities.VerifyThrowInternalLength(referenceFullPath, nameof(referenceFullPath));\n+            ErrorUtilities.VerifyThrow(Path.IsPathRooted(referenceFullPath), \"Method does not treat path normalization cases\");\n+\n+            if (shouldSkipStaticGraphIsolationOnReference == null)\n+            {\n+                shouldSkipStaticGraphIsolationOnReference = GetReferenceFilter();\n+            }\n+\n+            return shouldSkipStaticGraphIsolationOnReference(referenceFullPath);\n+\n+            Func<string, bool> GetReferenceFilter()\n+            {\n+                lock (_syncLock)\n+                {\n+                    if (shouldSkipStaticGraphIsolationOnReference != null)\n+                    {\n+                        return shouldSkipStaticGraphIsolationOnReference;\n+                    }\n+\n+                    var items = Project.GetItems(ItemTypeNames.ReferencesToSkipGraphIsolationConstraintsOn);\n+\n+                    if (items.Count == 0 || items.All(i => string.IsNullOrWhiteSpace(i.EvaluatedInclude)))\n+                    {\n+                        return _ => false;\n+                    }\n+\n+                    var fragments = items.SelectMany(i => ExpressionShredder.SplitSemiColonSeparatedList(i.EvaluatedInclude));\n+                    var glob = new CompositeGlob(\n+                        fragments\n+                            .Select(s => MSBuildGlob.Parse(Project.Directory, s)));",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think the other messages put \" around paths.",
              "createdAt": "2019-05-29T18:05:35Z",
              "path": "src/Build/Resources/xlf/Strings.cs.xlf",
              "diffHunk": "@@ -106,6 +106,13 @@\n         <note>\n       {StrBegin=\"MSB4250: \"}\n       LOCALIZATION:  Do not localize the following words: ProjectGraph, ProjectReference, ToolsVersion.\n+    </note>\n+      </trans-unit>\n+      <trans-unit id=\"SkippedConstraintsOnRequest\">\n+        <source>MSB4260: Project {0} skipped graph isolation constraints on referenced project {1}</source>",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Moved to https://github.com/microsoft/msbuild/pull/4379/files#r289096539",
              "createdAt": "2019-05-30T17:43:19Z",
              "path": "src/Build/Resources/xlf/Strings.cs.xlf",
              "diffHunk": "@@ -106,6 +106,13 @@\n         <note>\n       {StrBegin=\"MSB4250: \"}\n       LOCALIZATION:  Do not localize the following words: ProjectGraph, ProjectReference, ToolsVersion.\n+    </note>\n+      </trans-unit>\n+      <trans-unit id=\"SkippedConstraintsOnRequest\">\n+        <source>MSB4260: Project {0} skipped graph isolation constraints on referenced project {1}</source>",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}