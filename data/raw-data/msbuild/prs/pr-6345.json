{
  "number": 6345,
  "title": "Fix project cache plugin exception handling",
  "body": "### Context\r\nThe project cache plugin can fail with exceptions from any of its APIs. Currently some exceptions from certain APIs get lost and the build fails with no errors.\r\n\r\nThis PR ensures that:\r\n- no exceptions get lost\r\n- the build is marked as failed when any plugin API fails\r\n\r\n### Changes Made\r\n- `BuildManager.ExecuteSubmission(BuildSubmission)` always completes the build submission with the exception when it detects that it's running in a detached thread.\r\n- `BuildManager.BuildGraph` observes the exceptions captured above and rethrows them to mimic what happens when `ExecuteSubmission(BuildSubmission)` does not run in a detached thread.\r\n- `BuildManager.EndBuild` marks the overall build result as failed if exceptions are thrown in `BM.EndBuild`.\r\n\r\n### Testing\r\nAdded unit tests to ensure that exceptions thrown from any possible plugin API are observable.\r\n\r\n### Notes\r\nThis is an intermediary implementation to avoid lost exceptions. A better implementation which I'm working on, builds upon this one and actually logs the plugin exceptions to the `LoggingService` in a similar way to which logger errors get handled.",
  "state": "MERGED",
  "createdAt": "2021-04-14T01:02:26Z",
  "updatedAt": "2021-04-23T18:27:27Z",
  "closedAt": "2021-04-23T18:00:24Z",
  "mergedAt": "2021-04-23T18:00:24Z",
  "additions": 218,
  "deletions": 65,
  "changedFiles": 2,
  "headRefName": "fixPluginExceptionHandling",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0f9ab9109cd5cde91d308811b23a912f05f25ff6",
          "message": "rename",
          "committedDate": "2021-04-07T23:01:26Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f5adec7b78b35f714d5e7b21fd9e972bb4e54ae8",
          "message": "All exceptions must be caught somewhere",
          "committedDate": "2021-04-13T19:14:10Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c06509aec1122aacd53303fbee0e085443b9f9bf",
          "message": "All plugin exceptions should lead to a build failed event",
          "committedDate": "2021-04-13T23:19:41Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1472b628aa65b2743b3abf068bcc2e4dc107c9f9",
          "message": "Preserve EndBuild invalid state exception",
          "committedDate": "2021-04-14T22:41:18Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do you need to allocate a new list here and below rather than just iterating over _buildSubmissions.Values?",
              "createdAt": "2021-04-18T14:34:11Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -754,26 +754,29 @@ public void EndBuild()\n                 ErrorIfState(BuildManagerState.Idle, \"NoBuildInProgress\");\n                 VerifyStateInternal(BuildManagerState.Building);\n \n-                // If there are any submissions which never started, remove them now.\n-                var submissionsToCheck = new List<BuildSubmission>(_buildSubmissions.Values);\n-                foreach (BuildSubmission submission in submissionsToCheck)\n-                {\n-                    CheckSubmissionCompletenessAndRemove(submission);\n-                }\n-\n-                var graphSubmissionsToCheck = new List<GraphBuildSubmission>(_graphBuildSubmissions.Values);\n-                foreach (GraphBuildSubmission submission in graphSubmissionsToCheck)\n-                {\n-                    CheckSubmissionCompletenessAndRemove(submission);\n-                }\n-\n                 _buildManagerState = BuildManagerState.WaitingForBuildToComplete;\n             }\n \n-            ILoggingService loggingService = ((IBuildComponentHost)this).LoggingService;\n+            var exceptionsThrownInEndBuild = false;\n \n             try\n             {\n+                lock (_syncLock)\n+                {\n+                    // If there are any submissions which never started, remove them now.\n+                    var submissionsToCheck = new List<BuildSubmission>(_buildSubmissions.Values);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This is just existing code from above that I moved into the try/catch to fail the build in case any exception gets thrown from it, it's not added by me :)\r\nBut if I had to guess why, I'd guess that it's cloning the list to protect itself from potential concurrent modifications of the list. Since the access is locked by `_syncLock`, it's either useless copying, or the list can be modified outside the lock. On the other hand there aren't many entries in these lists so it's a not a perf problem.",
              "createdAt": "2021-04-19T14:56:33Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -754,26 +754,29 @@ public void EndBuild()\n                 ErrorIfState(BuildManagerState.Idle, \"NoBuildInProgress\");\n                 VerifyStateInternal(BuildManagerState.Building);\n \n-                // If there are any submissions which never started, remove them now.\n-                var submissionsToCheck = new List<BuildSubmission>(_buildSubmissions.Values);\n-                foreach (BuildSubmission submission in submissionsToCheck)\n-                {\n-                    CheckSubmissionCompletenessAndRemove(submission);\n-                }\n-\n-                var graphSubmissionsToCheck = new List<GraphBuildSubmission>(_graphBuildSubmissions.Values);\n-                foreach (GraphBuildSubmission submission in graphSubmissionsToCheck)\n-                {\n-                    CheckSubmissionCompletenessAndRemove(submission);\n-                }\n-\n                 _buildManagerState = BuildManagerState.WaitingForBuildToComplete;\n             }\n \n-            ILoggingService loggingService = ((IBuildComponentHost)this).LoggingService;\n+            var exceptionsThrownInEndBuild = false;\n \n             try\n             {\n+                lock (_syncLock)\n+                {\n+                    // If there are any submissions which never started, remove them now.\n+                    var submissionsToCheck = new List<BuildSubmission>(_buildSubmissions.Values);",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you specify the exception?",
              "createdAt": "2021-04-18T14:43:14Z",
              "path": "src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs",
              "diffHunk": "@@ -807,57 +807,157 @@ public static IEnumerable<object[]> CacheExceptionLocationsTestData\n \n         [Theory]\n         [MemberData(nameof(CacheExceptionLocationsTestData))]\n-        public void EngineShouldHandleExceptionsFromCachePlugin(ExceptionLocations exceptionLocations)\n+        public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(ExceptionLocations exceptionLocations)\n         {\n             _env.DoNotLaunchDebugger();\n \n+            SetEnvironmentForExceptionLocations(exceptionLocations);\n+\n             var project = _env.CreateFile(\"1.proj\", @$\"\n                     <Project>\n                         <Target Name=`Build`>\n-                            <Message Text=`Hello EngineShouldHandleExceptionsFromCachePlugin` Importance=`High` />\n+                            <Message Text=`Hello World` Importance=`High` />\n                         </Target>\n                     </Project>\".Cleanup());\n \n+            Helpers.BuildManagerSession? buildSession = null;\n+            MockLogger logger;\n+\n+            try\n+            {\n+                buildSession = new Helpers.BuildManagerSession(\n+                    _env,\n+                    new BuildParameters\n+                    {\n+                        UseSynchronousLogging = true,\n+                        ProjectCacheDescriptor = ProjectCacheDescriptor.FromAssemblyPath(\n+                            SamplePluginAssemblyPath.Value,\n+                            new[] {new ProjectGraphEntryPoint(project.Path)},\n+                            null)\n+                    });\n+\n+                logger = buildSession.Logger;\n+                var buildResult = buildSession.BuildProjectFile(project.Path);\n+\n+                // Plugin construction, initialization, and query all end up throwing in BuildManager.ExecuteSubmission and thus\n+                // mark the submission as failed with exception.\n+                var exceptionsThatEndUpInBuildResult =\n+                    ExceptionLocations.Constructor | ExceptionLocations.BeginBuildAsync | ExceptionLocations.GetCacheResultAsync;\n+\n+                if ((exceptionsThatEndUpInBuildResult & exceptionLocations) != 0)\n+                {\n+                    buildResult.OverallResult.ShouldBe(BuildResultCode.Failure);\n+                    buildResult.Exception.Message.ShouldContain(\"Cache plugin exception from\");\n+                }\n+\n+                // BuildManager.EndBuild calls plugin.EndBuild, so if only plugin.EndBuild fails it means everything else passed,\n+                // so the build submission should be successful.\n+                if (exceptionLocations == ExceptionLocations.EndBuildAsync)\n+                {\n+                    buildResult.OverallResult.ShouldBe(BuildResultCode.Success);\n+                }\n+            }\n+            finally\n+            {\n+                // These exceptions prevent the creation of a plugin so there's no plugin to shutdown.\n+                var exceptionsThatPreventEndBuildFromThrowing = ExceptionLocations.Constructor |\n+                                                                ExceptionLocations.BeginBuildAsync;\n+\n+                if ((exceptionLocations & exceptionsThatPreventEndBuildFromThrowing) != 0 ||\n+                    !exceptionLocations.HasFlag(ExceptionLocations.EndBuildAsync))\n+                {\n+                    Should.NotThrow(() => buildSession!.Dispose());\n+                }\n+                else if (exceptionLocations.HasFlag(ExceptionLocations.EndBuildAsync))\n+                {\n+                    var e = Should.Throw<Exception>(() => buildSession!.Dispose());",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The thrown exception is actually an `Exception`. That's what the mock cache is throwing. I'm going to wrap all project cache exceptions inside a `ProjectCacheException` but not in this PR.",
              "createdAt": "2021-04-19T16:42:04Z",
              "path": "src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs",
              "diffHunk": "@@ -807,57 +807,157 @@ public static IEnumerable<object[]> CacheExceptionLocationsTestData\n \n         [Theory]\n         [MemberData(nameof(CacheExceptionLocationsTestData))]\n-        public void EngineShouldHandleExceptionsFromCachePlugin(ExceptionLocations exceptionLocations)\n+        public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(ExceptionLocations exceptionLocations)\n         {\n             _env.DoNotLaunchDebugger();\n \n+            SetEnvironmentForExceptionLocations(exceptionLocations);\n+\n             var project = _env.CreateFile(\"1.proj\", @$\"\n                     <Project>\n                         <Target Name=`Build`>\n-                            <Message Text=`Hello EngineShouldHandleExceptionsFromCachePlugin` Importance=`High` />\n+                            <Message Text=`Hello World` Importance=`High` />\n                         </Target>\n                     </Project>\".Cleanup());\n \n+            Helpers.BuildManagerSession? buildSession = null;\n+            MockLogger logger;\n+\n+            try\n+            {\n+                buildSession = new Helpers.BuildManagerSession(\n+                    _env,\n+                    new BuildParameters\n+                    {\n+                        UseSynchronousLogging = true,\n+                        ProjectCacheDescriptor = ProjectCacheDescriptor.FromAssemblyPath(\n+                            SamplePluginAssemblyPath.Value,\n+                            new[] {new ProjectGraphEntryPoint(project.Path)},\n+                            null)\n+                    });\n+\n+                logger = buildSession.Logger;\n+                var buildResult = buildSession.BuildProjectFile(project.Path);\n+\n+                // Plugin construction, initialization, and query all end up throwing in BuildManager.ExecuteSubmission and thus\n+                // mark the submission as failed with exception.\n+                var exceptionsThatEndUpInBuildResult =\n+                    ExceptionLocations.Constructor | ExceptionLocations.BeginBuildAsync | ExceptionLocations.GetCacheResultAsync;\n+\n+                if ((exceptionsThatEndUpInBuildResult & exceptionLocations) != 0)\n+                {\n+                    buildResult.OverallResult.ShouldBe(BuildResultCode.Failure);\n+                    buildResult.Exception.Message.ShouldContain(\"Cache plugin exception from\");\n+                }\n+\n+                // BuildManager.EndBuild calls plugin.EndBuild, so if only plugin.EndBuild fails it means everything else passed,\n+                // so the build submission should be successful.\n+                if (exceptionLocations == ExceptionLocations.EndBuildAsync)\n+                {\n+                    buildResult.OverallResult.ShouldBe(BuildResultCode.Success);\n+                }\n+            }\n+            finally\n+            {\n+                // These exceptions prevent the creation of a plugin so there's no plugin to shutdown.\n+                var exceptionsThatPreventEndBuildFromThrowing = ExceptionLocations.Constructor |\n+                                                                ExceptionLocations.BeginBuildAsync;\n+\n+                if ((exceptionLocations & exceptionsThatPreventEndBuildFromThrowing) != 0 ||\n+                    !exceptionLocations.HasFlag(ExceptionLocations.EndBuildAsync))\n+                {\n+                    Should.NotThrow(() => buildSession!.Dispose());\n+                }\n+                else if (exceptionLocations.HasFlag(ExceptionLocations.EndBuildAsync))\n+                {\n+                    var e = Should.Throw<Exception>(() => buildSession!.Dispose());",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "To be done in the follow-up PR, or is this leftover? \ud83e\udd14",
              "createdAt": "2021-04-21T22:40:22Z",
              "path": "src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs",
              "diffHunk": "@@ -807,57 +807,157 @@ public static IEnumerable<object[]> CacheExceptionLocationsTestData\n \n         [Theory]\n         [MemberData(nameof(CacheExceptionLocationsTestData))]\n-        public void EngineShouldHandleExceptionsFromCachePlugin(ExceptionLocations exceptionLocations)\n+        public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(ExceptionLocations exceptionLocations)\n         {\n             _env.DoNotLaunchDebugger();\n \n+            SetEnvironmentForExceptionLocations(exceptionLocations);\n+\n             var project = _env.CreateFile(\"1.proj\", @$\"\n                     <Project>\n                         <Target Name=`Build`>\n-                            <Message Text=`Hello EngineShouldHandleExceptionsFromCachePlugin` Importance=`High` />\n+                            <Message Text=`Hello World` Importance=`High` />\n                         </Target>\n                     </Project>\".Cleanup());\n \n+            Helpers.BuildManagerSession? buildSession = null;\n+            MockLogger logger;\n+\n+            try\n+            {\n+                buildSession = new Helpers.BuildManagerSession(\n+                    _env,\n+                    new BuildParameters\n+                    {\n+                        UseSynchronousLogging = true,\n+                        ProjectCacheDescriptor = ProjectCacheDescriptor.FromAssemblyPath(\n+                            SamplePluginAssemblyPath.Value,\n+                            new[] {new ProjectGraphEntryPoint(project.Path)},\n+                            null)\n+                    });\n+\n+                logger = buildSession.Logger;\n+                var buildResult = buildSession.BuildProjectFile(project.Path);\n+\n+                // Plugin construction, initialization, and query all end up throwing in BuildManager.ExecuteSubmission and thus\n+                // mark the submission as failed with exception.\n+                var exceptionsThatEndUpInBuildResult =\n+                    ExceptionLocations.Constructor | ExceptionLocations.BeginBuildAsync | ExceptionLocations.GetCacheResultAsync;\n+\n+                if ((exceptionsThatEndUpInBuildResult & exceptionLocations) != 0)\n+                {\n+                    buildResult.OverallResult.ShouldBe(BuildResultCode.Failure);\n+                    buildResult.Exception.Message.ShouldContain(\"Cache plugin exception from\");\n+                }\n+\n+                // BuildManager.EndBuild calls plugin.EndBuild, so if only plugin.EndBuild fails it means everything else passed,\n+                // so the build submission should be successful.\n+                if (exceptionLocations == ExceptionLocations.EndBuildAsync)\n+                {\n+                    buildResult.OverallResult.ShouldBe(BuildResultCode.Success);\n+                }\n+            }\n+            finally\n+            {\n+                // These exceptions prevent the creation of a plugin so there's no plugin to shutdown.\n+                var exceptionsThatPreventEndBuildFromThrowing = ExceptionLocations.Constructor |\n+                                                                ExceptionLocations.BeginBuildAsync;\n+\n+                if ((exceptionLocations & exceptionsThatPreventEndBuildFromThrowing) != 0 ||\n+                    !exceptionLocations.HasFlag(ExceptionLocations.EndBuildAsync))\n+                {\n+                    Should.NotThrow(() => buildSession!.Dispose());\n+                }\n+                else if (exceptionLocations.HasFlag(ExceptionLocations.EndBuildAsync))\n+                {\n+                    var e = Should.Throw<Exception>(() => buildSession!.Dispose());\n+                    e.Message.ShouldContain(\"Cache plugin exception from EndBuildAsync\");\n+                }\n+                else\n+                {\n+                    throw new NotImplementedException();\n+                }\n+            }\n+\n+            logger.BuildFinishedEvents.First().Succeeded.ShouldBeFalse();\n+\n+            // Plugin query must happen after plugin init. So if plugin init fails, then the plugin should not get queried.\n+            var exceptionsThatShouldPreventCacheQueryAndEndBuildAsync = ExceptionLocations.Constructor | ExceptionLocations.BeginBuildAsync;\n+\n+            if ((exceptionsThatShouldPreventCacheQueryAndEndBuildAsync & exceptionLocations) != 0)\n+            {\n+                logger.FullLog.ShouldNotContain($\"{AssemblyMockCache}: GetCacheResultAsync for\");\n+                logger.FullLog.ShouldNotContain($\"{AssemblyMockCache}: EndBuildAsync\");\n+            }\n+            else\n+            {\n+                StringShouldContainSubstring(logger.FullLog, $\"{AssemblyMockCache}: GetCacheResultAsync for\", expectedOccurrences: 1);\n+                StringShouldContainSubstring(logger.FullLog, $\"{AssemblyMockCache}: EndBuildAsync\", expectedOccurrences: 1);\n+            }\n+\n+            // TODO: this ain't right now is it?",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Yup, followup-pr: #6368\r\nThis PR just fixes the exception handling part, follow-up PR does the logging.",
              "createdAt": "2021-04-22T18:33:21Z",
              "path": "src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs",
              "diffHunk": "@@ -807,57 +807,157 @@ public static IEnumerable<object[]> CacheExceptionLocationsTestData\n \n         [Theory]\n         [MemberData(nameof(CacheExceptionLocationsTestData))]\n-        public void EngineShouldHandleExceptionsFromCachePlugin(ExceptionLocations exceptionLocations)\n+        public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(ExceptionLocations exceptionLocations)\n         {\n             _env.DoNotLaunchDebugger();\n \n+            SetEnvironmentForExceptionLocations(exceptionLocations);\n+\n             var project = _env.CreateFile(\"1.proj\", @$\"\n                     <Project>\n                         <Target Name=`Build`>\n-                            <Message Text=`Hello EngineShouldHandleExceptionsFromCachePlugin` Importance=`High` />\n+                            <Message Text=`Hello World` Importance=`High` />\n                         </Target>\n                     </Project>\".Cleanup());\n \n+            Helpers.BuildManagerSession? buildSession = null;\n+            MockLogger logger;\n+\n+            try\n+            {\n+                buildSession = new Helpers.BuildManagerSession(\n+                    _env,\n+                    new BuildParameters\n+                    {\n+                        UseSynchronousLogging = true,\n+                        ProjectCacheDescriptor = ProjectCacheDescriptor.FromAssemblyPath(\n+                            SamplePluginAssemblyPath.Value,\n+                            new[] {new ProjectGraphEntryPoint(project.Path)},\n+                            null)\n+                    });\n+\n+                logger = buildSession.Logger;\n+                var buildResult = buildSession.BuildProjectFile(project.Path);\n+\n+                // Plugin construction, initialization, and query all end up throwing in BuildManager.ExecuteSubmission and thus\n+                // mark the submission as failed with exception.\n+                var exceptionsThatEndUpInBuildResult =\n+                    ExceptionLocations.Constructor | ExceptionLocations.BeginBuildAsync | ExceptionLocations.GetCacheResultAsync;\n+\n+                if ((exceptionsThatEndUpInBuildResult & exceptionLocations) != 0)\n+                {\n+                    buildResult.OverallResult.ShouldBe(BuildResultCode.Failure);\n+                    buildResult.Exception.Message.ShouldContain(\"Cache plugin exception from\");\n+                }\n+\n+                // BuildManager.EndBuild calls plugin.EndBuild, so if only plugin.EndBuild fails it means everything else passed,\n+                // so the build submission should be successful.\n+                if (exceptionLocations == ExceptionLocations.EndBuildAsync)\n+                {\n+                    buildResult.OverallResult.ShouldBe(BuildResultCode.Success);\n+                }\n+            }\n+            finally\n+            {\n+                // These exceptions prevent the creation of a plugin so there's no plugin to shutdown.\n+                var exceptionsThatPreventEndBuildFromThrowing = ExceptionLocations.Constructor |\n+                                                                ExceptionLocations.BeginBuildAsync;\n+\n+                if ((exceptionLocations & exceptionsThatPreventEndBuildFromThrowing) != 0 ||\n+                    !exceptionLocations.HasFlag(ExceptionLocations.EndBuildAsync))\n+                {\n+                    Should.NotThrow(() => buildSession!.Dispose());\n+                }\n+                else if (exceptionLocations.HasFlag(ExceptionLocations.EndBuildAsync))\n+                {\n+                    var e = Should.Throw<Exception>(() => buildSession!.Dispose());\n+                    e.Message.ShouldContain(\"Cache plugin exception from EndBuildAsync\");\n+                }\n+                else\n+                {\n+                    throw new NotImplementedException();\n+                }\n+            }\n+\n+            logger.BuildFinishedEvents.First().Succeeded.ShouldBeFalse();\n+\n+            // Plugin query must happen after plugin init. So if plugin init fails, then the plugin should not get queried.\n+            var exceptionsThatShouldPreventCacheQueryAndEndBuildAsync = ExceptionLocations.Constructor | ExceptionLocations.BeginBuildAsync;\n+\n+            if ((exceptionsThatShouldPreventCacheQueryAndEndBuildAsync & exceptionLocations) != 0)\n+            {\n+                logger.FullLog.ShouldNotContain($\"{AssemblyMockCache}: GetCacheResultAsync for\");\n+                logger.FullLog.ShouldNotContain($\"{AssemblyMockCache}: EndBuildAsync\");\n+            }\n+            else\n+            {\n+                StringShouldContainSubstring(logger.FullLog, $\"{AssemblyMockCache}: GetCacheResultAsync for\", expectedOccurrences: 1);\n+                StringShouldContainSubstring(logger.FullLog, $\"{AssemblyMockCache}: EndBuildAsync\", expectedOccurrences: 1);\n+            }\n+\n+            // TODO: this ain't right now is it?",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}