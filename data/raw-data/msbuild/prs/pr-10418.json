{
  "number": 10418,
  "title": "add CacheGet and CacheSet tasks",
  "body": "### Context\r\n\r\nTo allow MSBuild target authors to take advantage of the build cache without having to write custom tasks.\r\n\r\n### Changes Made\r\n\r\nAdded `Microsoft.Build.Tasks.CacheGet` and `Microsoft.Build.Tasks.CacheSet`.\r\n\r\n### Testing\r\n\r\nNone yet.\r\n\r\n### Notes\r\n\r\nI'm sure there's plenty to be done to get this into an acceptable state, but I wanted to start a discussion about the feasibility of this feature before proceeding further, and a draft PR seemed like the easiest way to demonstrate what I'm proposing.",
  "state": "OPEN",
  "createdAt": "2024-07-20T21:20:22Z",
  "updatedAt": "2025-04-25T10:29:39Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 50,
  "deletions": 0,
  "changedFiles": 3,
  "headRefName": "cache-tasks",
  "isDraft": false,
  "author": {
    "login": "adamralph"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7eda5f79aed30a725a3fca5d33cd5ea72dd87704",
          "message": "add CacheGet and CacheSet tasks",
          "committedDate": "2025-04-25T10:22:58Z",
          "author": {
            "name": "Adam Ralph",
            "email": "adam@adamralph.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Interesting idea. Can you provide some context about how you'd expect to use this?",
        "createdAt": "2024-07-22T14:33:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald sure, see https://github.com/adamralph/minver/pull/1021\r\n\r\nAt the moment I'm including my own versions of these classes in the PR.\r\n\r\nThe use case is: the targets file spawns an external process to do some resource intensive work, based on a number of inputs. The output is always the same for a given set of inputs. Before spawning that process, I want to see if there is already a cached output value for the given inputs. If there is, I skip the resource intensive process and use that value. If there isn't, I run the resource intensive process and cache the output value. The target is embedded in project files, so in a given solution, with many projects, it will be executed many times, and usually with the same inputs.",
        "createdAt": "2024-07-22T14:40:43Z",
        "author": {
          "login": "adamralph"
        }
      },
      {
        "body": "Really the only problem I have with this is a usability one - as proposed we'd only be able to store strings in the cache. Would we want to be able to store other data types that Tasks can accept, like bool, ITaskItem, arrays of these?",
        "createdAt": "2024-07-22T14:50:13Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@baronfel assuming MSBuild can marshal as task parameters of type `object`, we can change the types of both the key and the value to `object` (and remove the ` ?? \"\"` in `CacheGet`), since that's what `GetRegisteredTaskObject` and `RegisterTaskObject` both use.\r\n\r\n~Also, I was wondering if either of `lifetime` and `allowEarlyCollection` should be exposed as task parameters, but that could come later.~ _see https://github.com/adamralph/minver/pull/1021#discussion_r1687128240_\r\n\r\nAlso, I was wondering if `lifetime`should be exposed as a task parameter, but that could come later.",
        "createdAt": "2024-07-22T15:33:33Z",
        "author": {
          "login": "adamralph"
        }
      },
      {
        "body": "FYI I tried to change the types to `object` but I got:\r\n\r\n> error MSB4069: The \"System.Object\" type of the \"Key\" parameter of the \"CacheGet\" task is not supported by MSBuild.\r\n\r\nSo I'm not sure how to support those other types. Maybe we would need separate tasks for each type? Personally, I think supporting strings is a very good start, and would probably cover most cases. Also, a lot of types can be converted to and from strings by the calling targets. These two tasks could have `String` in their names to make the type support clear. E.g. `StringCacheGet` and `StringCacheSet`.",
        "createdAt": "2024-07-22T23:11:40Z",
        "author": {
          "login": "adamralph"
        }
      },
      {
        "body": "String is probably fine for a first pass - I think the way this would be tackled without `object` support in MSBuild would be separately-named input and output parameters, one for each kind of input/output. Super gross.",
        "createdAt": "2024-07-22T23:46:26Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Hello @adamralph, @rainersigwald, @baronfel ,I'm going over older pull requests and so I found this one.\r\nAre there any plans to move forward with the draft please?\r\n",
        "createdAt": "2025-01-03T12:01:22Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "@SimaTian I'm willing to go ahead. It really depends on the maintainers.",
        "createdAt": "2025-01-06T05:44:41Z",
        "author": {
          "login": "adamralph"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Using an explicit cast may throw an exception if the retrieved object is not a string. Consider using a safe cast (e.g., 'as string') and handling the potential null result more gracefully.\n```suggestion\n            Value = BuildEngine4.GetRegisteredTaskObject(Key, RegisteredTaskObjectLifetime.Build) as string ?? \"\";\n```",
              "createdAt": "2025-04-25T10:29:39Z",
              "path": "src/Tasks/CacheGet.cs",
              "diffHunk": "@@ -0,0 +1,24 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using Microsoft.Build.Framework;\n+\n+#nullable disable\n+\n+namespace Microsoft.Build.Tasks\n+{\n+    public class CacheGet : TaskExtension\n+    {\n+        [Required]\n+        public string Key { get; set; }\n+\n+        [Output]\n+        public string Value { get; set; }\n+\n+        public override bool Execute()\n+        {\n+            Value = (string)BuildEngine4.GetRegisteredTaskObject(Key, RegisteredTaskObjectLifetime.Build) ?? \"\";",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      }
    ]
  }
}