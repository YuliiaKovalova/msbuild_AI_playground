{
  "number": 7185,
  "title": "CA1836 Prefer IsEmpty over Count",
  "body": "Relates to #7174",
  "state": "MERGED",
  "createdAt": "2021-12-30T03:24:29Z",
  "updatedAt": "2022-01-11T21:02:29Z",
  "closedAt": "2022-01-11T15:21:15Z",
  "mergedAt": "2022-01-11T15:21:15Z",
  "additions": 13,
  "deletions": 12,
  "changedFiles": 9,
  "headRefName": "CA1836",
  "isDraft": false,
  "author": {
    "login": "elachlan"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e39bbf5942ad52d5ac0e258be04e8073f0b994b7",
          "message": "CA1836 Prefer IsEmpty over Count",
          "committedDate": "2021-12-30T03:24:03Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cb17b4370b7bfaf7c703e46a1bbc803e34278a65",
          "message": "Update src/Build/BackEnd/BuildManager/BuildManager.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2021-12-30T05:02:24Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c91e0feb9461b06e667c4bfa4ba1e7d920fa6ae1",
          "message": "Update src/Build/BackEnd/BuildManager/BuildManager.cs\n\nCo-authored-by: Forgind <Forgind@users.noreply.github.com>",
          "committedDate": "2021-12-30T05:02:29Z",
          "author": {
            "name": "Lachlan Ennis",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "14e50befa9ec0360edbac856a8251734c07f73bb",
          "message": "Revert CodeAnalysis.ruleset",
          "committedDate": "2022-01-08T04:52:50Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a0ec95a2f0fb272b9c4fcf81a63786f3e9876f9a",
          "message": "merge master",
          "committedDate": "2022-01-08T04:53:00Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bb127270f01a449f1fdc85485ba0811a173edea0",
          "message": "enable warning on CA1836",
          "committedDate": "2022-01-08T04:53:47Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ecff315122e569858c5dd77b018a3e373a30a537",
          "message": "Fix remaining occurrences of CA1836 violations",
          "committedDate": "2022-01-08T04:57:29Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f17563de98455bb80193d15c228c7a63416b2c43",
          "message": "Merge branch 'CA1836' of github.com:elachlan/msbuild into CA1836",
          "committedDate": "2022-01-08T04:57:43Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8b78e45281b63a65d879a4c0027d193d729f3a1a",
          "message": "convert !.IsEmpty to .Any()",
          "committedDate": "2022-01-10T22:48:23Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "69e207ebc95ef97538464470a45c80a19da654ce",
          "message": "Change from code review",
          "committedDate": "2022-01-11T00:01:02Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c71ba2cf4678f6528fc980954d743035e0d225fb",
          "message": "Fix Additional usages of IsEmpty",
          "committedDate": "2022-01-11T00:16:57Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            return BuildEnvironmentHelper.Instance.RunningInVisualStudio && !ProjectCacheItems.IsEmpty;\r\n```",
              "createdAt": "2021-12-30T05:00:34Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1200,7 +1200,7 @@ bool ProjectCacheIsPresent()\n \n         private static bool ProjectCachePresentViaVisualStudioWorkaround()\n         {\n-            return BuildEnvironmentHelper.Instance.RunningInVisualStudio && ProjectCacheItems.Count > 0;\n+            return BuildEnvironmentHelper.Instance.RunningInVisualStudio && ProjectCacheItems.IsEmpty;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                !ProjectCacheItems.IsEmpty &&\r\n```",
              "createdAt": "2021-12-30T05:00:45Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1259,7 +1259,7 @@ private ProjectCacheService GetProjectCacheService()\n         private void AutomaticallyDetectAndInstantiateProjectCacheServiceForVisualStudio()\n         {\n             if (BuildEnvironmentHelper.Instance.RunningInVisualStudio &&\n-                ProjectCacheItems.Count > 0 &&\n+                ProjectCacheItems.IsEmpty &&",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Maybe convert !<thing>.IsEmpty to <thing>.Any()?",
              "createdAt": "2022-01-10T16:13:12Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1261,7 +1261,7 @@ private ProjectCacheService GetProjectCacheService()\n         private void AutomaticallyDetectAndInstantiateProjectCacheServiceForVisualStudio()\n         {\n             if (BuildEnvironmentHelper.Instance.RunningInVisualStudio &&\n-                ProjectCacheItems.Count > 0 &&\n+                !ProjectCacheItems.IsEmpty &&",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Also .Any?",
              "createdAt": "2022-01-10T23:43:27Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1202,7 +1202,7 @@ bool ProjectCacheIsPresent()\n \n         private static bool ProjectCachePresentViaVisualStudioWorkaround()\n         {\n-            return BuildEnvironmentHelper.Instance.RunningInVisualStudio && ProjectCacheItems.Count > 0;\n+            return BuildEnvironmentHelper.Instance.RunningInVisualStudio && !ProjectCacheItems.IsEmpty;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Also .Any?",
              "createdAt": "2022-01-10T23:43:34Z",
              "path": "src/Tasks/GetSDKReferenceFiles.cs",
              "diffHunk": "@@ -273,7 +273,7 @@ internal bool Execute(GetAssemblyName getAssemblyName, GetAssemblyRuntimeVersion\n \n                 GenerateOutputItems();\n \n-                if (_exceptions.Count > 0 && LogCacheFileExceptions)\n+                if (!_exceptions.IsEmpty && LogCacheFileExceptions)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@Forgind when we were talking about this did we talk about `.Any()` possibly being worse than `! .IsEmpty` because the former is an extension method that might have higher overhead?\r\n\r\n|  Method | ActuallyEmpty |         Mean |     Error |    StdDev | Allocated |\r\n|-------- |-------------- |-------------:|----------:|----------:|----------:|\r\n| IsEmpty |         False |     2.484 ns | 0.0534 ns | 0.0473 ns |         - |\r\n|     Any |         False | 1,361.709 ns | 5.7049 ns | 5.0573 ns |         - |\r\n| IsEmpty |          True |   178.694 ns | 1.1384 ns | 1.0649 ns |         - |\r\n|     Any |          True |   177.720 ns | 1.7098 ns | 1.5993 ns |         - |\r\n\r\n```c#\r\nusing System;\r\nusing System.Collections.Concurrent;\r\nusing System.Linq;\r\n\r\nusing BenchmarkDotNet;\r\nusing BenchmarkDotNet.Attributes;\r\n\r\nnamespace any_count;\r\n\r\n[MemoryDiagnoser]\r\npublic class Benchmarks\r\n{\r\n    public static ConcurrentDictionary<string, string> emptyDictionary = new ConcurrentDictionary<string, string>();\r\n\r\n    public static ConcurrentDictionary<string, string> nonEmptyDictionary = new ConcurrentDictionary<string, string>();\r\n\r\n    static Benchmarks()\r\n    {\r\n        for (int i = 0; i < 100; i++)\r\n        {\r\n            nonEmptyDictionary.TryAdd(i.ToString(), i.ToString());\r\n        }\r\n    }\r\n\r\n    [Params(true, false)]\r\n    public bool ActuallyEmpty;\r\n\r\n    [Benchmark]\r\n    public bool IsEmpty() => (ActuallyEmpty? emptyDictionary : nonEmptyDictionary).IsEmpty;\r\n\r\n    [Benchmark]\r\n    public bool Any() => (ActuallyEmpty? emptyDictionary : nonEmptyDictionary).Any();\r\n}\r\n```",
              "createdAt": "2022-01-11T16:55:00Z",
              "path": "src/Build/Logging/ProfilerLogger.cs",
              "diffHunk": "@@ -134,7 +134,7 @@ internal ProfilerResult GetAggregatedResult(bool pruneSmallItems = true)\n             // So keeping that map here\n             var originalLocations = new Dictionary<EvaluationLocation, EvaluationLocation>(EvaluationLocationIdAgnosticComparer.Singleton);\n \n-            while (!_profiledResults.IsEmpty)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "> @Forgind when we were talking about this did we talk about `.Any()` possibly being worse than `! .IsEmpty` because the former is an extension method that might have higher overhead?\r\n\r\nOh, I'm sorry; I didn't add a new comment after that part, and it slipped my mind. So do you think it's worth replacing .Any() with !.IsEmpty? (If so, sorry elachlan...)",
              "createdAt": "2022-01-11T17:00:37Z",
              "path": "src/Build/Logging/ProfilerLogger.cs",
              "diffHunk": "@@ -134,7 +134,7 @@ internal ProfilerResult GetAggregatedResult(bool pruneSmallItems = true)\n             // So keeping that map here\n             var originalLocations = new Dictionary<EvaluationLocation, EvaluationLocation>(EvaluationLocationIdAgnosticComparer.Singleton);\n \n-            while (!_profiledResults.IsEmpty)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> > @Forgind when we were talking about this did we talk about `.Any()` possibly being worse than `! .IsEmpty` because the former is an extension method that might have higher overhead?\r\n> \r\n> Oh, I'm sorry; I didn't add a new comment after that part, and it slipped my mind. So do you think it's worth replacing .Any() with !.IsEmpty? (If so, sorry elachlan...)\r\n\r\nI am happy to. I will make another PR and replace all any calls where I can. That time difference is massive.",
              "createdAt": "2022-01-11T21:02:29Z",
              "path": "src/Build/Logging/ProfilerLogger.cs",
              "diffHunk": "@@ -134,7 +134,7 @@ internal ProfilerResult GetAggregatedResult(bool pruneSmallItems = true)\n             // So keeping that map here\n             var originalLocations = new Dictionary<EvaluationLocation, EvaluationLocation>(EvaluationLocationIdAgnosticComparer.Singleton);\n \n-            while (!_profiledResults.IsEmpty)",
              "author": {
                "login": "elachlan"
              }
            }
          ]
        }
      }
    ]
  }
}