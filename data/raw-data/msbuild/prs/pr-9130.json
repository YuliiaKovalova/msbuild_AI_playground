{
  "number": 9130,
  "title": "Populate unproxied targets to avoid dropping requested targets",
  "body": "Fixes #9117\r\n\r\nFor project cache plugins to only partially handle a build request, it makes sense for it to only proxy some targets and not others. For example, in VS the build request has:\r\n\r\n```\r\n\"Build\"\r\n\"BuiltProjectOutputGroup\"\r\n\"BuiltProjectOutputGroupDependencies\"\r\n\"DebugSymbolsProjectOutputGroup\"\r\n\"DebugSymbolsProjectOutputGroupDependencies\"\r\n\"DocumentationProjectOutputGroup\"\r\n\"DocumentationProjectOutputGroupDependencies\"\r\n\"SatelliteDllsProjectOutputGroup\"\r\n\"SatelliteDllsProjectOutputGroupDependencies\"\r\n\"SGenFilesOutputGroup\"\r\n\"SGenFilesOutputGroupDependencies\"\r\n```\r\n\r\n\"Build\" is the only relevant one that a plugin would want to handle, and would likely redirect to \"GetTargetPath\", while the rest are \"information gathering\" targets which should just be \"passed through\" and allowed to execute as-is.\r\n\r\nToday if the plugin does this, the targets it does not proxy are dropped entire, which would make the caller confused about not getting results for a target they specifically requested. This change instead just fills in the remaining targets which were not proxied.\r\n\r\nExample:\r\nOriginal request: `Build, BuiltProjectOutputGroup, BuiltProjectOutputGroupDependencies, ...`\r\nCache plugin returns proxy targets `Build -> GetTargetPath`, and nothing more.\r\nNew request: `GetTargetPath, BuiltProjectOutputGroup, BuiltProjectOutputGroupDependencies, ...`\r\n\r\nThis fixes #9117 indirectly by not requiring a plugin to handle targets it wants to pass through at all, allowing it to just ignore them.",
  "state": "MERGED",
  "createdAt": "2023-08-15T14:51:36Z",
  "updatedAt": "2023-10-20T22:30:56Z",
  "closedAt": "2023-10-17T14:08:14Z",
  "mergedAt": "2023-10-17T14:08:14Z",
  "additions": 109,
  "deletions": 36,
  "changedFiles": 6,
  "headRefName": "proxy-targets-fill-missing",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": {
    "title": "VS 17.9"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3469cf03d1a020a785c7e13482b710c2e54423d0",
          "message": "Populate unproxied targets to avoid dropping requested targets",
          "committedDate": "2023-08-14T17:09:35Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4d7a742732ab0e557a16874bd177adf2f8d78084",
          "message": "Fix for when no targets (and thus default targets) are requested",
          "committedDate": "2023-08-15T16:34:08Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9e10861969baaea2f95c905c90d9cb7a1351cc7d",
          "message": "PR comments",
          "committedDate": "2023-08-16T20:06:01Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm thinking that this probably more logically fits into `ProxyTargets` class. The string comparison used would then be defined in the single spot (not prone to mismatches)",
              "createdAt": "2023-08-16T10:51:45Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1727,15 +1727,38 @@ private static void AddBuildRequestToSubmission(BuildSubmission submission, int\n \n         private static void AddProxyBuildRequestToSubmission(\n             BuildSubmission submission,\n-            int configurationId,\n+            BuildRequestConfiguration configuration,\n             ProxyTargets proxyTargets,\n             int projectContextId)\n         {\n+            // Reverse the map so we can look up requested targets\n+            // The ProxyTargetToRealTargetMap is \"backwards\" from how most users would want to use it and doesn't provide as much flexibility as it could if reversed.\n+            // Unfortunately this is part of a public API so cannot easily change at this point.\n+            Dictionary<string, string> realTargetsToProxyTargets = new(proxyTargets.ProxyTargetToRealTargetMap.Count, StringComparer.OrdinalIgnoreCase);\n+            foreach (KeyValuePair<string, string> kvp in proxyTargets.ProxyTargetToRealTargetMap)\n+            {\n+                // In the case of multiple proxy targets pointing to the same real target, the last one wins. Another awkwardness of ProxyTargetToRealTargetMap being \"backwards\".\n+                realTargetsToProxyTargets[kvp.Value] = kvp.Key;\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}