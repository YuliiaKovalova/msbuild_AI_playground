{
  "number": 9576,
  "title": "BuildIncludeOperation optimizations",
  "body": "Working on [AB#1827820](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1827820)\r\n\r\n### Context\r\nBuildIncludeOperation is allocate-y. davkean found a case in which it was allocating over 900 MB/s. This tries to make it a bit better.\r\n\r\n### Changes Made\r\nPlease review commit-by-commit. I'm not 100% confident in all of them, but I tried to separate them into disjoint pieces so we can accept or reject them as relevant.\r\n\r\n### Testing\r\nI tried building OrchardCore before and after these changes, and MSBuild as a whole allocated about 0.5% less. When not everyone is on break, I may try to get help with finding a percent change within BuildIncludeOperation specifically, since that was my target \ud83d\ude42\r\n\r\n### Notes\r\nImmutableArray outperforms ImmutableList if either the number of items in the array/list is small, or adding to it is very rare. As far as I know, the ones I changed are never modified after they're created, so I changed them to arrays.",
  "state": "CLOSED",
  "createdAt": "2023-12-28T00:04:44Z",
  "updatedAt": "2024-08-19T15:57:07Z",
  "closedAt": "2024-08-19T15:57:07Z",
  "mergedAt": null,
  "additions": 72,
  "deletions": 66,
  "changedFiles": 6,
  "headRefName": "buildincludeoperation-optimizations",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d774fd1e4b3ecb9c77ff21db6122ab8746d472be",
          "message": "Inline ItemType",
          "committedDate": "2023-12-27T22:38:23Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "263b0e9e809f8706d5b28c40a3c2daa547e9067d",
          "message": "_excludes is a non-nullable type",
          "committedDate": "2023-12-27T22:41:08Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b74bea288841d87a3b7cb1f93c6d9c65e6ee604b",
          "message": "Use _excludes directly",
          "committedDate": "2023-12-27T22:43:06Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7ef316b5eba0a0dd2a0cf540cdedd50be882313a",
          "message": "No Lazy\n\nUnless nothing is going to get in (and even sometimes then), every lazy in this list would be evaluated anyway...so don't store anything for that. Also don't make random intermediates.",
          "committedDate": "2023-12-27T22:57:30Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f3d5a37daa9bddaae253cc7e315f72ac7d0972a0",
          "message": "Eliminate some Linq and switch to ImmutableArray",
          "committedDate": "2023-12-27T23:48:07Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "94f4e851f368afcc936bf7f601eb47a731a34402",
          "message": "Simplify conditions that all ended up in the same place",
          "committedDate": "2023-12-27T23:54:12Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "51f3ded12e0ae1606b7eb8be91d3e116386b3c07",
          "message": "Use default",
          "committedDate": "2023-12-27T23:54:19Z",
          "author": {
            "name": "Forgind",
            "email": "12969783+Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I have measured it carefully for both CPU and allocation but have not detected good significant improvements. It allocates about 2% (5MB less) in scope of `BuildIncludeOperation` and CPU diff is not measurable.\r\nIs  there any particular use case which can leverage these changes?\r\n\r\n",
        "createdAt": "2024-01-24T15:00:17Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}