{
  "number": 10758,
  "title": "use collection expressions in (non-test) sources",
  "body": "few places were missing the modern syntax. excluding tests.",
  "state": "MERGED",
  "createdAt": "2024-10-04T15:42:59Z",
  "updatedAt": "2024-10-08T08:46:15Z",
  "closedAt": "2024-10-08T08:27:16Z",
  "mergedAt": "2024-10-08T08:27:16Z",
  "additions": 377,
  "deletions": 393,
  "changedFiles": 112,
  "headRefName": "collection-expr",
  "isDraft": false,
  "author": {
    "login": "kasperk81"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "215401e720ba6abfb744b94044c5cee2f3ead62c",
          "message": "use collection expressions in (non-test) sources",
          "committedDate": "2024-10-04T15:40:33Z",
          "author": {
            "name": "kasperk81",
            "email": "83082615+kasperk81@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d517346d21f47392f6b01d8f0c2fc5b51f7b5b7e",
          "message": "a few more",
          "committedDate": "2024-10-04T16:42:05Z",
          "author": {
            "name": "kasperk81",
            "email": "83082615+kasperk81@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2be114ce3c854b9c534b5bbcacd5d373036831e0",
          "message": "enumerable.empty",
          "committedDate": "2024-10-04T17:35:39Z",
          "author": {
            "name": "kasperk81",
            "email": "83082615+kasperk81@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4e8f16dac138567906b361f667b712d1a8988e0a",
          "message": "fb",
          "committedDate": "2024-10-04T17:47:22Z",
          "author": {
            "name": "kasperk81",
            "email": "83082615+kasperk81@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "45de787fb1f6b2185a8007a33878fd618c218424",
          "message": "Update src/Shared/ReadOnlyEmptyDictionary.cs",
          "committedDate": "2024-10-04T18:17:45Z",
          "author": {
            "name": "kasperk81",
            "email": "83082615+kasperk81@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "505380f58d96c190d7f8dfccdf7ec4bafe372824",
          "message": "fix",
          "committedDate": "2024-10-04T19:42:23Z",
          "author": {
            "name": "kasperk81",
            "email": "83082615+kasperk81@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6b1570059ae6d9318a3e01d313872428a468140d",
          "message": "use concrete type for private member",
          "committedDate": "2024-10-04T20:35:09Z",
          "author": {
            "name": "kasperk81",
            "email": "83082615+kasperk81@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "All automated refactoring or did you do anything manually? (assessing risk here :))\r\n",
        "createdAt": "2024-10-04T15:54:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> All automated refactoring or did you do anything manually? (assessing risk here :))\r\n\r\nall manual `git grep -ln 'new\\s*\\w*\\[\\]' | grep -vi test`, updated them by hand and then ran the build",
        "createdAt": "2024-10-04T16:46:10Z",
        "author": {
          "login": "kasperk81"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Revert this one please, this folder is due for deletion.",
              "createdAt": "2024-10-04T15:55:13Z",
              "path": "src/Deprecated/Conversion/ProjectFileConverter.cs",
              "diffHunk": "",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't find this clearer. Move the `string[]` to the `var` in the `foreach`?",
              "createdAt": "2024-10-04T15:57:15Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -148,11 +148,11 @@ private Assembly TryResolveAssemblyFromPaths(AssemblyLoadContext context, Assemb\n             foreach (var cultureSubfolder in string.IsNullOrEmpty(assemblyName.CultureName)\n                 // If no culture is specified, attempt to load directly from\n                 // the known dependency paths.\n-                ? new[] { string.Empty }\n+                ? (string[])[string.Empty]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "this is unfortunately not possible today https://github.com/dotnet/csharplang/discussions/8461",
              "createdAt": "2024-10-04T16:42:50Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -148,11 +148,11 @@ private Assembly TryResolveAssemblyFromPaths(AssemblyLoadContext context, Assemb\n             foreach (var cultureSubfolder in string.IsNullOrEmpty(assemblyName.CultureName)\n                 // If no culture is specified, attempt to load directly from\n                 // the known dependency paths.\n-                ? new[] { string.Empty }\n+                ? (string[])[string.Empty]",
              "author": {
                "login": "kasperk81"
              }
            },
            {
              "body": "Boo. Ok . . . but I still kinda prefer `new[]` in that case. Wouldn't block on it though.",
              "createdAt": "2024-10-04T16:44:35Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -148,11 +148,11 @@ private Assembly TryResolveAssemblyFromPaths(AssemblyLoadContext context, Assemb\n             foreach (var cultureSubfolder in string.IsNullOrEmpty(assemblyName.CultureName)\n                 // If no culture is specified, attempt to load directly from\n                 // the known dependency paths.\n-                ? new[] { string.Empty }\n+                ? (string[])[string.Empty]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "reverted.",
              "createdAt": "2024-10-04T17:47:41Z",
              "path": "src/Shared/CoreCLRAssemblyLoader.cs",
              "diffHunk": "@@ -148,11 +148,11 @@ private Assembly TryResolveAssemblyFromPaths(AssemblyLoadContext context, Assemb\n             foreach (var cultureSubfolder in string.IsNullOrEmpty(assemblyName.CultureName)\n                 // If no culture is specified, attempt to load directly from\n                 // the known dependency paths.\n-                ? new[] { string.Empty }\n+                ? (string[])[string.Empty]",
              "author": {
                "login": "kasperk81"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Yeah, still don't like these casts aesthetically :-/",
              "createdAt": "2024-10-04T16:03:22Z",
              "path": "src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs",
              "diffHunk": "@@ -562,11 +562,11 @@ internal bool TryResolveAssemblyReferences(TaskLoggingHelper log, RoslynCodeTask\n                     ? reference\n                     : $\"{reference}.dll\";\n \n-                string resolvedDir = new[]\n-                {\n+                string resolvedDir =\n+                ((string[])[",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                return [item.Xml, ..relevantElementsAfterInclude];\r\n```\r\n\r\n?",
              "createdAt": "2024-10-04T16:08:21Z",
              "path": "src/Build/Definition/Project.cs",
              "diffHunk": "@@ -2763,7 +2763,7 @@ private static IEnumerable<ProjectItemElement> GetItemElementsThatMightAffectIte\n                         itemElement.RemoveLocation == null);\n \n                 // add the include operation that created the project item element\n-                return new[] { item.Xml }.Concat(relevantElementsAfterInclude);\n+                return ((ProjectItemElement[])[item.Xml]).Concat(relevantElementsAfterInclude);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Hey, this one will actually hit the optimized-custom-class case for collection expressions!",
              "createdAt": "2024-10-04T16:59:32Z",
              "path": "src/Tasks/WriteCodeFragment.cs",
              "diffHunk": "@@ -34,7 +34,7 @@ public class WriteCodeFragment : TaskExtension\n     {\n         private const string TypeNameSuffix = \"_TypeName\";\n         private const string IsLiteralSuffix = \"_IsLiteral\";\n-        private static readonly IEnumerable<string> NamespaceImports = new string[] { \"System\", \"System.Reflection\" };\n+        private static readonly IEnumerable<string> NamespaceImports = [\"System\", \"System.Reflection\"];",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Question on these substitutions: as I read the docs on collection expressions, `[]` isn't guaranteed to be `Array.Empty<T>`; it depends on static analysis. Should we leave these? Or are we guaranteed to fall into that case because it worked before?",
              "createdAt": "2024-10-04T17:01:33Z",
              "path": "src/Utilities/ToolLocationHelper.cs",
              "diffHunk": "@@ -1060,7 +1060,7 @@ private static string[] GetLegacyTargetPlatformReferences(string targetPlatformI\n                 ErrorUtilities.DebugTraceMessage(\"GetLegacyTargetPlatformReferences\", \"Encountered exception trying to gather the platform references: {0}\", e.Message);\n             }\n \n-            return Array.Empty<string>();\n+            return [];",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "according to https://github.com/dotnet/docs/issues/39157#issuecomment-1945746443, it seems so?",
              "createdAt": "2024-10-04T17:41:53Z",
              "path": "src/Utilities/ToolLocationHelper.cs",
              "diffHunk": "@@ -1060,7 +1060,7 @@ private static string[] GetLegacyTargetPlatformReferences(string targetPlatformI\n                 ErrorUtilities.DebugTraceMessage(\"GetLegacyTargetPlatformReferences\", \"Encountered exception trying to gather the platform references: {0}\", e.Message);\n             }\n \n-            return Array.Empty<string>();\n+            return [];",
              "author": {
                "login": "kasperk81"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Getting rid of ifdefs? \ud83d\ude4c\ud83c\udffb",
              "createdAt": "2024-10-04T18:03:33Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -1003,12 +1003,7 @@ private IEnumerable<KeyValuePair<string, string>> EnumerateMetadataEager()\n             {\n                 if (_customEscapedMetadata == null || _customEscapedMetadata.Count == 0)\n                 {\n-#if TASKHOST",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yeah, figured .NET 3.5 compatibility wasn't that big of a deal anymore \ud83d\ude05",
              "createdAt": "2024-10-04T18:20:23Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -1003,12 +1003,7 @@ private IEnumerable<KeyValuePair<string, string>> EnumerateMetadataEager()\n             {\n                 if (_customEscapedMetadata == null || _customEscapedMetadata.Count == 0)\n                 {\n-#if TASKHOST",
              "author": {
                "login": "kasperk81"
              }
            },
            {
              "body": "Oh how I wish that were true \ud83d\ude2d\r\n\r\nAt least we can let the compiler deal with it!",
              "createdAt": "2024-10-04T18:56:33Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -1003,12 +1003,7 @@ private IEnumerable<KeyValuePair<string, string>> EnumerateMetadataEager()\n             {\n                 if (_customEscapedMetadata == null || _customEscapedMetadata.Count == 0)\n                 {\n-#if TASKHOST",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nonblocking nit: I prefer the old way for this too; clearer to see that it should be a singleton.",
              "createdAt": "2024-10-04T18:08:38Z",
              "path": "src/Shared/ReadOnlyEmptyDictionary.cs",
              "diffHunk": "@@ -256,7 +256,8 @@ public bool Remove(KeyValuePair<K, V> item)\n         /// </summary>\n         public IEnumerator<KeyValuePair<K, V>> GetEnumerator()\n         {\n-            return Enumerable.Empty<KeyValuePair<K, V>>().GetEnumerator();\n+            IEnumerable<KeyValuePair<K, V>> enumerable = [];\n+            return enumerable.GetEnumerator();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}