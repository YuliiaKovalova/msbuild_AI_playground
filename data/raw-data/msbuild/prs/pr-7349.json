{
  "number": 7349,
  "title": "CA2007 Consider calling ConfigureAwait on the awaited task",
  "body": "Relates to #7174\r\nhttps://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2007",
  "state": "CLOSED",
  "createdAt": "2022-01-29T00:46:31Z",
  "updatedAt": "2022-08-06T12:20:12Z",
  "closedAt": "2022-08-06T12:20:12Z",
  "mergedAt": null,
  "additions": 66,
  "deletions": 66,
  "changedFiles": 20,
  "headRefName": "CA2007",
  "isDraft": true,
  "author": {
    "login": "elachlan"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e50a0a1dd3c3841f9f98af89867b80ccaae8c58e",
          "message": "CA2007 Consider calling ConfigureAwait on the awaited task",
          "committedDate": "2022-01-29T00:43:52Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1bd70ffbd9c64f4438774a517fe0c71034490a9e",
          "message": "Changes to ConfigureAwait based on article",
          "committedDate": "2022-02-06T01:24:22Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fc40697250792d7173b5f9ecd851fcd64bb4d512",
          "message": "Missed one of the test",
          "committedDate": "2022-02-06T02:42:20Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I see you call `ConfigureAwait(false)` everywhere. How did you validate that it's ok to change the threading guarantees in that way in each case?",
        "createdAt": "2022-01-31T15:34:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I have not validated it yet. This was to get the areas flagged where changes are needed and to see if any of the tests fail.\r\n\r\nI will go through each instance and check if it is appropriate. I will be using this as a reference: https://devblogs.microsoft.com/dotnet/configureawait-faq/ \r\n\r\nI have really only used `ConfigureAwait(false)` in my library code to avoid deadlocks. Based on this article there should be a few cases where it may not be needed.\r\n",
        "createdAt": "2022-01-31T21:58:36Z",
        "author": {
          "login": "elachlan"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "The change to true here was done because the file is used as apart of MSBuild. So its not apart of \"library code\". Additionally If you follow the calls up its executed on its own thread. ",
              "createdAt": "2022-02-06T01:28:50Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -465,7 +465,7 @@ internal static async Task<int> ReadAsync(Stream stream, byte[] buffer, int byte\n             int totalBytesRead = 0;\n             while (totalBytesRead < bytesToRead)\n             {\n-                int bytesRead = await stream.ReadAsync(buffer.AsMemory(totalBytesRead, bytesToRead - totalBytesRead), CancellationToken.None).ConfigureAwait(false);\n+                int bytesRead = await stream.ReadAsync(buffer.AsMemory(totalBytesRead, bytesToRead - totalBytesRead), CancellationToken.None).ConfigureAwait(true);",
              "author": {
                "login": "elachlan"
              }
            }
          ]
        }
      }
    ]
  }
}