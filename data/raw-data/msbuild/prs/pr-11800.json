{
  "number": 11800,
  "title": "Remove APM use outside of TaskHost node provider / endpoint",
  "body": "Switches preprocessor directives to allow .NET Framework to use TPL-based concurrency over the old APM model. Since `MSBuildClientPacketPump` and `NodeProviderOutOfProcBase` never run on the TaskHost, this allows removing a chunk of (now) dead code.\r\n\r\n(3rd part of re-attempting #11546)",
  "state": "CLOSED",
  "createdAt": "2025-05-07T03:03:10Z",
  "updatedAt": "2025-05-30T22:31:25Z",
  "closedAt": "2025-05-30T22:31:25Z",
  "mergedAt": null,
  "additions": 139,
  "deletions": 170,
  "changedFiles": 4,
  "headRefName": "dev/chcasta/dead-ifdefs",
  "isDraft": false,
  "author": {
    "login": "ccastanedaucf"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "84432ff0e7cd49686401b8beb7a05a9c3bb9ad81",
          "message": "Remove APM use from node provider",
          "committedDate": "2025-05-16T03:24:42Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "20dffbcc81a1a65403296df6cc7dd349707f924d",
          "message": "Avoid additional allocations from AsTask() and AsyncWaitHandle",
          "committedDate": "2025-05-16T03:24:42Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "76c78ac87905d48441489cf84a65a46acd4c45f5",
          "message": "Dispose reset event",
          "committedDate": "2025-05-16T03:24:42Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eeb762a3667650b862c3ac17931325165f5c17eb",
          "message": "MSBuildServer: Fix infinite wait",
          "committedDate": "2025-05-16T03:24:42Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0072bc618a61465237299a0983e8c40f04233920",
          "message": "Force test re-run",
          "committedDate": "2025-05-16T03:24:43Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2af59933d4bc90ced408deb66b7d4d00975c67ca",
          "message": "Avoid action delegate + async state machine allocations on packet header read",
          "committedDate": "2025-05-16T03:24:43Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6ba7ddc4a19bf28a2edca072c0beeef0bb206209",
          "message": "Reduce more Task-related allocations",
          "committedDate": "2025-05-16T03:26:41Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1a1273b1c33e5160c14a43601e4b4e1ef0474495",
          "message": "Use sync wrappers when already blocking",
          "committedDate": "2025-05-16T04:40:46Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1f4ddd9c289c6bba836b297169cbe6b06a205448",
          "message": "Code analysis err",
          "committedDate": "2025-05-16T04:48:47Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d6485abc7377f5546ffc9f314b42712bc4a03203",
          "message": "Fix MSBuild server early dispose",
          "committedDate": "2025-05-16T06:03:52Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f8dfc2fa510bf9ab704a2cd5ee3f270545b4be3c",
          "message": "Skip forced allocs from double buffer",
          "committedDate": "2025-05-16T09:55:24Z",
          "author": {
            "name": "Christian Castaneda",
            "email": "chcasta@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Looks good to me. Removing ancient way of doing stuff in favor of the more modern one.\r\nJust to be extra safe (since we had some issues before) I will run our battery of perf tests.",
        "createdAt": "2025-05-07T08:48:39Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "Unfortunately this probably still regresses. I'll cc @ccastanedaucf with the internal link.\r\n",
        "createdAt": "2025-05-13T15:33:14Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "Got a min repro on a basic benchmark. Essentially the use of `AsyncWaitHandle` is the problem:\r\n```cs\r\nTask<int> readTask = CommunicationsUtilities.ReadAsync(localReadPipe, headerByte, headerByte.Length).AsTask();\r\n// ...\r\nhandles[0] = ((IAsyncResult)readTask).AsyncWaitHandle;\r\n```\r\n\r\nBesides the `Task` allocation, generating an `AsyncWaitHandle` via `IAsyncResult` creates a ton of overhead when the task completes synchronously (e.g. the packet body read). It allocates synchronization objects which are only there for back-compat with APM code and never get executed in the TPL path (even if a task is threadpool queued), but now you pay for both allocations. Harder to get a 1:1 comparison on the async path, but I'll assume the same allocation story and see if the next perf run says otherwise.\r\n\r\nLooks straightforward to fix though \ud83d\udc4d\r\n\r\n| Method                 | Median      | Min         | Gen0   | Gen1   | Allocated |\r\n|----------------------- |------------:|------------:|-------:|-------:|----------:|\r\n| Baseline_ReadIAsyncResult       | 3,227.53 ns | 3,129.66 ns | 0.0126 |      - |     129 B |\r\n| PR_ReadTaskAsIAsyncResult | 2,439.62 ns | 2,346.57 ns | 0.0383 | 0.0192 |     273 B |\r\n| ReadTask               |    79.58 ns |    78.00 ns | 0.0136 |      - |      80 B |\r\n| ReadValueTask          |    67.98 ns |    67.81 ns |      - |      - |         - |\r\n\r\n\r\n```cs\r\n[Benchmark]\r\n[ArgumentsSource(nameof(MemStream))]\r\npublic int Baseline_ReadIAsyncResult(MemoryStream memStream)\r\n{\r\n    memStream.Position = 0;\r\n    IAsyncResult result = memStream.BeginRead(_buffer, 0, (int)memStream.Length, null, null);\r\n    int i = memStream.EndRead(result);\r\n    return i;\r\n}\r\n\r\n[Benchmark]\r\n[ArgumentsSource(nameof(MemStream))]\r\npublic int PR_ReadTaskAsIAsyncResult(MemoryStream memStream)\r\n{\r\n    memStream.Position = 0;\r\n    Task<int> readTask = ReadAsync(memStream).AsTask();\r\n    ((IAsyncResult)readTask).AsyncWaitHandle.WaitOne();\r\n    return readTask.Result;\r\n}\r\n\r\n[Benchmark]\r\n[ArgumentsSource(nameof(MemStream))]\r\npublic int ReadTask(MemoryStream memStream)\r\n{\r\n    memStream.Position = 0;\r\n    Task<int> readTask = ReadAsync(memStream).AsTask();\r\n    return readTask.Result;\r\n}\r\n\r\n[Benchmark]\r\n[ArgumentsSource(nameof(MemStream))]\r\npublic int ReadValueTask(MemoryStream memStream)\r\n{\r\n    memStream.Position = 0;\r\n    ValueTask<int> readTask = ReadAsync(memStream);\r\n    return readTask.Result;\r\n}\r\n\r\npublic async ValueTask<int> ReadAsync(MemoryStream memStream)\r\n{\r\n    return await memStream.ReadAsync(_buffer, 0, (int)memStream.Length, CancellationToken.None);\r\n}\r\n```",
        "createdAt": "2025-05-14T02:28:03Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "Okay this is the other culprit. 1KB of allocations *just* from the most basic async state machine on .NET Framework \ud83d\ude05. Lines up with seeing `System.Action` and `System.Threading.ExecutionContext` as hot in the perf scenario.\r\n\r\nManually queueing a continuation + a static delegate seems to solve this, which should be fine for the header since it's just a single 5 byte read and doesn't need a full read loop. (Otherwise I'm stumped tbh).\r\n\r\n| Method                | Allocated |\r\n|---------------------- |----------:|\r\n| TPL_ContinueWith      |         - |\r\n| TPL_AsyncStateMachine |    1024 B |\r\n\r\n```cs\r\n        [Benchmark]\r\n        public int TPL_ContinueWith()\r\n        {\r\n            ValueTask<int> readTask = TestContinueWith(_autoResetEvent);\r\n            _autoResetEvent.WaitOne();\r\n            return readTask.Result;\r\n        }\r\n\r\n        [Benchmark]\r\n        public int TPL_AsyncStateMachine()\r\n        {\r\n            ValueTask<int> readTask = TestAsyncStateMachine(_autoResetEvent);\r\n            _autoResetEvent.WaitOne();\r\n            return readTask.Result;\r\n        }\r\n\r\n        public ValueTask<int> TestContinueWith(AutoResetEvent autoResetEvent)\r\n        {\r\n            Task task = Task.Delay(10);\r\n            Task<int> readTask = task.ContinueWith(static (completedTask, state) =>\r\n            {\r\n                ((AutoResetEvent)state).Set();\r\n                return 0;\r\n            }, autoResetEvent, TaskContinuationOptions.ExecuteSynchronously);\r\n\r\n            return new ValueTask<int>(readTask);\r\n        }\r\n\r\n        public async ValueTask<int> TestAsyncStateMachine(AutoResetEvent autoResetEvent)\r\n        {\r\n            await Task.Delay(10);\r\n            autoResetEvent.Set();\r\n            return 0;\r\n        }\r\n\r\n```\r\n",
        "createdAt": "2025-05-15T11:21:38Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "This is evil.\r\n\r\n`PipeStream` on .NET Framework just defers to the default `ReadAsync()` implementation in `Stream`, which never properly supported TPL so just wraps a task over the derived `Begin/End`. So every `PipeStream.ReadAsync()` ends up being pure allocation overhead. On top of Tasks just being super unoptimized for allocations on .NET Framework.\r\nhttps://referencesource.microsoft.com/#mscorlib/system/io/stream.cs,426\r\nhttps://referencesource.microsoft.com/#System.Core/System/IO/Pipes/PipeStream.cs,240\r\n\r\nAnd on TPL in general, see [here](https://devblogs.microsoft.com/dotnet/how-async-await-really-works/#compiler-transform) and cry how an extremely simple Task loop has a 145MB difference between Framework and Core \ud83e\udee0\r\n![image](https://github.com/user-attachments/assets/a33d30b5-e53f-49bc-87b8-d8c9227d67a6)\r\n![image](https://github.com/user-attachments/assets/f19d6cd9-77ad-49c7-acfc-a59ed16f8184)\r\n\r\n\r\n\r\nSo last idea here is to actually still use APM on .NET Framework but trim out the areas where it's allocating on top (small reads from passing to translator, wrapping in Tasks, ect.). On top of avoiding the extra WaitHandle allocs on .NET Core.\r\n\r\nThat means there's still a mix of two codepaths but hopefully this gets them closer in behavior. Pretty unfortunate that the least allocat-ey paths for both happen to be completely different async models.",
        "createdAt": "2025-05-16T04:59:50Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "Locally it runs fine. However it somehow still kills pipelines - even after a retry.",
        "createdAt": "2025-05-22T10:18:43Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "Closing this in favor of more targeted changes",
        "createdAt": "2025-05-30T22:31:25Z",
        "author": {
          "login": "ccastanedaucf"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Consider adding an inline comment here to clarify that '!TASKHOST' triggers TPL-based concurrency and that APM logic is reserved for TaskHost builds.\n```suggestion\n#endif\n// The '!TASKHOST' directive triggers TPL-based concurrency by including System.Threading.Tasks.\n// APM (Asynchronous Programming Model) logic is reserved for TaskHost builds.\n```",
              "createdAt": "2025-05-07T03:03:55Z",
              "path": "src/Shared/NodeEndpointOutOfProcBase.cs",
              "diffHunk": "@@ -21,7 +21,7 @@\n using System.Security.Principal;\n \n #endif",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Ensure that TASKHOST is defined only for TaskHost scenarios since it now controls the use of legacy APM code in this section.\n```suggestion\n                    // Wait for a connection\n// Ensure TASKHOST is defined only for TaskHost scenarios, as it controls the use of legacy APM code.\n```",
              "createdAt": "2025-05-07T03:03:55Z",
              "path": "src/Shared/NodeEndpointOutOfProcBase.cs",
              "diffHunk": "@@ -368,7 +368,7 @@ private void PacketPumpProc()\n                 try\n                 {\n                     // Wait for a connection",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This serves the same purpose as `((IAsyncResult)readTask).AsyncWaitHandle` while shaving off at min ~200 bytes per packet, so hopefully this account for the difference.",
              "createdAt": "2025-05-14T09:42:25Z",
              "path": "src/Shared/CommunicationsUtilities.cs",
              "diffHunk": "@@ -587,6 +587,19 @@ internal static int ReadIntForHandshake(this PipeStream stream, byte? byteToAcce\n #nullable disable\n \n #if !TASKHOST\n+        /// <summary>\n+        /// Allow interop with EAP / Event-based wait handles without additional allocations.\n+        /// </summary>\n+        internal static async ValueTask<int> ReadAsync(Stream stream, byte[] buffer, int bytesToRead, AutoResetEvent autoResetEvent)\n+        {\n+            int result = await ReadAsync(stream, buffer, bytesToRead).ConfigureAwait(false);\n+\n+            // Signal to the caller that the read is complete.\n+            _ = autoResetEvent.Set();",
              "author": {
                "login": "ccastanedaucf"
              }
            }
          ]
        }
      }
    ]
  }
}