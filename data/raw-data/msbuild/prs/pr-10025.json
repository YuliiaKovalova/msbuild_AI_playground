{
  "number": 10025,
  "title": "Specify the usage of quotes in property values",
  "body": "Fixes #9944\r\n\r\n### Context\r\nDuring exploring and investigation different issues it is sometimes not clear how to escape special chars inside different apps when calling msbuild.exe. PR contains introduction of new topic: quotes in property values and how to pass it from cmd, powershell windows, powershell core to msbuild\r\n\r\n### Changes Made\r\nUpdate of the documetation. \r\n\r\n### Testing\r\nDocs Not tested",
  "state": "MERGED",
  "createdAt": "2024-04-17T08:22:35Z",
  "updatedAt": "2024-06-14T10:04:18Z",
  "closedAt": "2024-04-18T06:17:12Z",
  "mergedAt": "2024-04-18T06:17:12Z",
  "additions": 38,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "dev/f-alizada/quotes-in-command-docs",
  "isDraft": false,
  "author": {
    "login": "f-alizada"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7c5adcd2b29062244abc46a9365a2a2b90573541",
          "message": "Specify the usage of quotes in the command line",
          "committedDate": "2024-04-17T08:12:32Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5ee0700d47c78b3c3861bbd8d30202f7ceb1b258",
          "message": "Fix naming",
          "committedDate": "2024-04-17T08:19:29Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4b1be8e106791a14d2af345abf47299da583c5a7",
          "message": "Update documentation/wiki/MSBuild-Tips-&-Tricks.md\n\nCo-authored-by: Jan Krivanek <krivanek.j@hotmail.com>",
          "committedDate": "2024-04-17T13:32:31Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "104755925+f-alizada@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "785ff9ab765439431a0a0a1c7cdc04ac5aa07786",
          "message": "Update documentation/wiki/MSBuild-Tips-&-Tricks.md\n\nCo-authored-by: Jan Krivanek <krivanek.j@hotmail.com>",
          "committedDate": "2024-04-17T13:34:12Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "104755925+f-alizada@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6d0f645eaaa9f3aff0cdee03197af38411498297",
          "message": "Address PR comments",
          "committedDate": "2024-04-17T15:08:57Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ba64a85b7b0fe9f411872d06edbd56208838c8ea",
          "message": "Merge branch 'dev/f-alizada/quotes-in-command-docs' of https://github.com/f-alizada/msbuild into dev/f-alizada/quotes-in-command-docs",
          "committedDate": "2024-04-17T15:17:46Z",
          "author": {
            "name": "Farhad Alizada",
            "email": "falizada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nThere are times when MSBuild needs to be invoked with property arguments using the `/p:propertyName=propertyValue` syntax. However, the way of achieving the proper result can vary depending on the shell used to run the MSBuild (PowerShell, PowerShell Core, Command Prompt, etc.). \r\n```",
              "createdAt": "2024-04-17T12:46:17Z",
              "path": "documentation/wiki/MSBuild-Tips-&-Tricks.md",
              "diffHunk": "@@ -120,3 +120,41 @@ The above explanations are only half the truth, though.\n * The `Directory.*.props`, `Directory.*.targets` et. al. also offer ways to extend your build. They are fairly well-known and documented:\n   * [`Directory.Build.props` and `Directory.Build.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-by-directory)\n   * [`Directory.Solution.props` and `Directory.Solution.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-solution-build) as well as `before.{solutionname}.sln.targets` and `after.{solutionname}.sln.targets` can be used to inject properties, item definitions, items and targets into your build\n+\n+\n+## Using quotes in MSBuild properties\n+There are times when MSBuild needs to be invoked with property arguments using the `/p:propertyName=propertyValue` syntax. However, the behavior of this command can vary depending on the application used to run MSBuild (PowerShell, PowerShell Core, Command Prompt). ",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nWhen the property value contains quotes (`\"`), it may be handled differently depending on the interpreting shell.\r\n```",
              "createdAt": "2024-04-17T12:46:51Z",
              "path": "documentation/wiki/MSBuild-Tips-&-Tricks.md",
              "diffHunk": "@@ -120,3 +120,41 @@ The above explanations are only half the truth, though.\n * The `Directory.*.props`, `Directory.*.targets` et. al. also offer ways to extend your build. They are fairly well-known and documented:\n   * [`Directory.Build.props` and `Directory.Build.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-by-directory)\n   * [`Directory.Solution.props` and `Directory.Solution.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-solution-build) as well as `before.{solutionname}.sln.targets` and `after.{solutionname}.sln.targets` can be used to inject properties, item definitions, items and targets into your build\n+\n+\n+## Using quotes in MSBuild properties\n+There are times when MSBuild needs to be invoked with property arguments using the `/p:propertyName=propertyValue` syntax. However, the behavior of this command can vary depending on the application used to run MSBuild (PowerShell, PowerShell Core, Command Prompt). \n+\n+When the property value contains quotes (`\"`), it may be handled differently depending on the application.",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "When linking to Microsoft docs, please strip the locale from the URL so that the site can respect the user's configuration (or autodetect):\r\n```suggestion\r\n  For more details about parsing in CMD and usage of special characters, please visit [this page](https://learn.microsoft.com/windows-server/administration/windows-commands/cmd)\r\n```",
              "createdAt": "2024-04-17T13:52:45Z",
              "path": "documentation/wiki/MSBuild-Tips-&-Tricks.md",
              "diffHunk": "@@ -120,3 +120,41 @@ The above explanations are only half the truth, though.\n * The `Directory.*.props`, `Directory.*.targets` et. al. also offer ways to extend your build. They are fairly well-known and documented:\n   * [`Directory.Build.props` and `Directory.Build.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-by-directory)\n   * [`Directory.Solution.props` and `Directory.Solution.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-solution-build) as well as `before.{solutionname}.sln.targets` and `after.{solutionname}.sln.targets` can be used to inject properties, item definitions, items and targets into your build\n+\n+\n+## Using quotes in MSBuild properties\n+There are times when MSBuild needs to be invoked with property arguments using the `/p:propertyName=propertyValue` syntax. However, the way of achieving the proper result can vary depending on the shell used to run the MSBuild (PowerShell, PowerShell Core, Command Prompt, etc.). \n+\n+When the property value contains quotes (`\"`), it may be handled differently depending on the interpreting shell.\n+\n+Let's explore the ways to pass property values that contain special symbols like `\"`:\n+\n+Example project: \n+```\n+<Project>\n+  <Target Name=\"PrintPropertyValue\">\n+      <Message Text=\"Property value = ($(propertyValue))\" Importance=\"high\" />\n+  </Target>\n+</Project>\n+```\n+\n+- CMD:\n+  ```\n+  msbuild.exe filename.proj /p:propertyValue=\"Hello, \\\"World!\\\"\"\n+  ```\n+\n+  For more details about parsing in CMD and usage of special characters, please visit [this page](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/cmd)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This is updated, thank you",
              "createdAt": "2024-04-17T15:21:06Z",
              "path": "documentation/wiki/MSBuild-Tips-&-Tricks.md",
              "diffHunk": "@@ -120,3 +120,41 @@ The above explanations are only half the truth, though.\n * The `Directory.*.props`, `Directory.*.targets` et. al. also offer ways to extend your build. They are fairly well-known and documented:\n   * [`Directory.Build.props` and `Directory.Build.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-by-directory)\n   * [`Directory.Solution.props` and `Directory.Solution.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-solution-build) as well as `before.{solutionname}.sln.targets` and `after.{solutionname}.sln.targets` can be used to inject properties, item definitions, items and targets into your build\n+\n+\n+## Using quotes in MSBuild properties\n+There are times when MSBuild needs to be invoked with property arguments using the `/p:propertyName=propertyValue` syntax. However, the way of achieving the proper result can vary depending on the shell used to run the MSBuild (PowerShell, PowerShell Core, Command Prompt, etc.). \n+\n+When the property value contains quotes (`\"`), it may be handled differently depending on the interpreting shell.\n+\n+Let's explore the ways to pass property values that contain special symbols like `\"`:\n+\n+Example project: \n+```\n+<Project>\n+  <Target Name=\"PrintPropertyValue\">\n+      <Message Text=\"Property value = ($(propertyValue))\" Importance=\"high\" />\n+  </Target>\n+</Project>\n+```\n+\n+- CMD:\n+  ```\n+  msbuild.exe filename.proj /p:propertyValue=\"Hello, \\\"World!\\\"\"\n+  ```\n+\n+  For more details about parsing in CMD and usage of special characters, please visit [this page](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/cmd)",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm taking the branding of legacy PS from https://learn.microsoft.com/en-us/powershell/scripting/whats-new/differences-from-windows-powershell?view=powershell-7.4:\r\n\r\n```suggestion\r\n  For more details about parsing in Windows PowerShell 5.1 and usage of special characters, please visit [this page](https://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_parsing?view=powershell-5.1)\r\n```",
              "createdAt": "2024-04-17T13:53:51Z",
              "path": "documentation/wiki/MSBuild-Tips-&-Tricks.md",
              "diffHunk": "@@ -120,3 +120,41 @@ The above explanations are only half the truth, though.\n * The `Directory.*.props`, `Directory.*.targets` et. al. also offer ways to extend your build. They are fairly well-known and documented:\n   * [`Directory.Build.props` and `Directory.Build.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-by-directory)\n   * [`Directory.Solution.props` and `Directory.Solution.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-solution-build) as well as `before.{solutionname}.sln.targets` and `after.{solutionname}.sln.targets` can be used to inject properties, item definitions, items and targets into your build\n+\n+\n+## Using quotes in MSBuild properties\n+There are times when MSBuild needs to be invoked with property arguments using the `/p:propertyName=propertyValue` syntax. However, the way of achieving the proper result can vary depending on the shell used to run the MSBuild (PowerShell, PowerShell Core, Command Prompt, etc.). \n+\n+When the property value contains quotes (`\"`), it may be handled differently depending on the interpreting shell.\n+\n+Let's explore the ways to pass property values that contain special symbols like `\"`:\n+\n+Example project: \n+```\n+<Project>\n+  <Target Name=\"PrintPropertyValue\">\n+      <Message Text=\"Property value = ($(propertyValue))\" Importance=\"high\" />\n+  </Target>\n+</Project>\n+```\n+\n+- CMD:\n+  ```\n+  msbuild.exe filename.proj /p:propertyValue=\"Hello, \\\"World!\\\"\"\n+  ```\n+\n+  For more details about parsing in CMD and usage of special characters, please visit [this page](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/cmd)\n+\n+- Windows PowerShell:\n+  ```\n+  msbuild.exe filename.proj /p:propertyValue=\"Hello, \\`\"World!\\`\"\"\n+  ```\n+\n+  For more details about parsing in PowerShell (5.1) and usage of special characters, please visit [this page](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing?view=powershell-5.1)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thank you, updated",
              "createdAt": "2024-04-17T15:21:45Z",
              "path": "documentation/wiki/MSBuild-Tips-&-Tricks.md",
              "diffHunk": "@@ -120,3 +120,41 @@ The above explanations are only half the truth, though.\n * The `Directory.*.props`, `Directory.*.targets` et. al. also offer ways to extend your build. They are fairly well-known and documented:\n   * [`Directory.Build.props` and `Directory.Build.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-by-directory)\n   * [`Directory.Solution.props` and `Directory.Solution.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-solution-build) as well as `before.{solutionname}.sln.targets` and `after.{solutionname}.sln.targets` can be used to inject properties, item definitions, items and targets into your build\n+\n+\n+## Using quotes in MSBuild properties\n+There are times when MSBuild needs to be invoked with property arguments using the `/p:propertyName=propertyValue` syntax. However, the way of achieving the proper result can vary depending on the shell used to run the MSBuild (PowerShell, PowerShell Core, Command Prompt, etc.). \n+\n+When the property value contains quotes (`\"`), it may be handled differently depending on the interpreting shell.\n+\n+Let's explore the ways to pass property values that contain special symbols like `\"`:\n+\n+Example project: \n+```\n+<Project>\n+  <Target Name=\"PrintPropertyValue\">\n+      <Message Text=\"Property value = ($(propertyValue))\" Importance=\"high\" />\n+  </Target>\n+</Project>\n+```\n+\n+- CMD:\n+  ```\n+  msbuild.exe filename.proj /p:propertyValue=\"Hello, \\\"World!\\\"\"\n+  ```\n+\n+  For more details about parsing in CMD and usage of special characters, please visit [this page](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/cmd)\n+\n+- Windows PowerShell:\n+  ```\n+  msbuild.exe filename.proj /p:propertyValue=\"Hello, \\`\"World!\\`\"\"\n+  ```\n+\n+  For more details about parsing in PowerShell (5.1) and usage of special characters, please visit [this page](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing?view=powershell-5.1)",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n  For more details about parsing in PowerShell (7.4 and higher) and usage of special characters, please visit [this page](https://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_parsing?view=powershell-7.4)\r\n```",
              "createdAt": "2024-04-17T14:05:12Z",
              "path": "documentation/wiki/MSBuild-Tips-&-Tricks.md",
              "diffHunk": "@@ -120,3 +120,41 @@ The above explanations are only half the truth, though.\n * The `Directory.*.props`, `Directory.*.targets` et. al. also offer ways to extend your build. They are fairly well-known and documented:\n   * [`Directory.Build.props` and `Directory.Build.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-by-directory)\n   * [`Directory.Solution.props` and `Directory.Solution.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-solution-build) as well as `before.{solutionname}.sln.targets` and `after.{solutionname}.sln.targets` can be used to inject properties, item definitions, items and targets into your build\n+\n+\n+## Using quotes in MSBuild properties\n+There are times when MSBuild needs to be invoked with property arguments using the `/p:propertyName=propertyValue` syntax. However, the way of achieving the proper result can vary depending on the shell used to run the MSBuild (PowerShell, PowerShell Core, Command Prompt, etc.). \n+\n+When the property value contains quotes (`\"`), it may be handled differently depending on the interpreting shell.\n+\n+Let's explore the ways to pass property values that contain special symbols like `\"`:\n+\n+Example project: \n+```\n+<Project>\n+  <Target Name=\"PrintPropertyValue\">\n+      <Message Text=\"Property value = ($(propertyValue))\" Importance=\"high\" />\n+  </Target>\n+</Project>\n+```\n+\n+- CMD:\n+  ```\n+  msbuild.exe filename.proj /p:propertyValue=\"Hello, \\\"World!\\\"\"\n+  ```\n+\n+  For more details about parsing in CMD and usage of special characters, please visit [this page](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/cmd)\n+\n+- Windows PowerShell:\n+  ```\n+  msbuild.exe filename.proj /p:propertyValue=\"Hello, \\`\"World!\\`\"\"\n+  ```\n+\n+  For more details about parsing in PowerShell (5.1) and usage of special characters, please visit [this page](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing?view=powershell-5.1)\n+\n+- PowerShell Core:\n+  ```\n+  msbuild.exe filename.proj /p:propertyValue=\"Hello, `\"World!`\"\"\n+  ```\n+\n+  For more details about parsing in PowerShell Core (7.4) and usage of special characters, please visit [this page](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing?view=powershell-7.4)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Updated, thank you! ",
              "createdAt": "2024-04-17T15:22:15Z",
              "path": "documentation/wiki/MSBuild-Tips-&-Tricks.md",
              "diffHunk": "@@ -120,3 +120,41 @@ The above explanations are only half the truth, though.\n * The `Directory.*.props`, `Directory.*.targets` et. al. also offer ways to extend your build. They are fairly well-known and documented:\n   * [`Directory.Build.props` and `Directory.Build.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-by-directory)\n   * [`Directory.Solution.props` and `Directory.Solution.targets`](https://learn.microsoft.com/visualstudio/msbuild/customize-solution-build) as well as `before.{solutionname}.sln.targets` and `after.{solutionname}.sln.targets` can be used to inject properties, item definitions, items and targets into your build\n+\n+\n+## Using quotes in MSBuild properties\n+There are times when MSBuild needs to be invoked with property arguments using the `/p:propertyName=propertyValue` syntax. However, the way of achieving the proper result can vary depending on the shell used to run the MSBuild (PowerShell, PowerShell Core, Command Prompt, etc.). \n+\n+When the property value contains quotes (`\"`), it may be handled differently depending on the interpreting shell.\n+\n+Let's explore the ways to pass property values that contain special symbols like `\"`:\n+\n+Example project: \n+```\n+<Project>\n+  <Target Name=\"PrintPropertyValue\">\n+      <Message Text=\"Property value = ($(propertyValue))\" Importance=\"high\" />\n+  </Target>\n+</Project>\n+```\n+\n+- CMD:\n+  ```\n+  msbuild.exe filename.proj /p:propertyValue=\"Hello, \\\"World!\\\"\"\n+  ```\n+\n+  For more details about parsing in CMD and usage of special characters, please visit [this page](https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/cmd)\n+\n+- Windows PowerShell:\n+  ```\n+  msbuild.exe filename.proj /p:propertyValue=\"Hello, \\`\"World!\\`\"\"\n+  ```\n+\n+  For more details about parsing in PowerShell (5.1) and usage of special characters, please visit [this page](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing?view=powershell-5.1)\n+\n+- PowerShell Core:\n+  ```\n+  msbuild.exe filename.proj /p:propertyValue=\"Hello, `\"World!`\"\"\n+  ```\n+\n+  For more details about parsing in PowerShell Core (7.4) and usage of special characters, please visit [this page](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing?view=powershell-7.4)",
              "author": {
                "login": "f-alizada"
              }
            }
          ]
        }
      }
    ]
  }
}