{
  "number": 10812,
  "title": "Use CallerArgumentExpression for internal assert-like constructs",
  "body": "[`CallerArgumentExpression`](https://learn.microsoft.com/dotnet/csharp/language-reference/proposals/csharp-10.0/caller-argument-expression) is a new (C# 10) language feature that allows us to simplify a bunch of our assert-like code to drop the redundant specifications of, like, \"which argument is `null`?\".\n\nI *strongly* recommend reviewing commit-by-commit; the bulk of the changes are a regex replace on top of a framework that is fairly small.",
  "state": "MERGED",
  "createdAt": "2024-10-14T19:11:46Z",
  "updatedAt": "2024-11-05T10:26:48Z",
  "closedAt": "2024-11-05T10:26:47Z",
  "mergedAt": "2024-11-05T10:26:47Z",
  "additions": 718,
  "deletions": 698,
  "changedFiles": 200,
  "headRefName": "callerargumentexpression",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "68270e4493cbfe5cad889625c5b14ef3cf93d90f",
          "message": "Add polyfill for CallerArgumentExpression\n\nBut don't use it anywhere yet.",
          "committedDate": "2024-10-14T21:28:20Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "687541be07b909ad543a2795d308efd88b876011",
          "message": "Add CallerArgumentExpression in ErrorUtilities\n\nIncludes some nullability adjustments to work with the new paradigm.",
          "committedDate": "2024-10-14T21:28:20Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c1a2c6e965f7de11b930ff25d457747bbae52382",
          "message": "Do the Framework VerifyThrowInternalNull too",
          "committedDate": "2024-10-24T20:51:57Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f53d9c91fb3eaa30d7e1eea63b0f63db16375561",
          "message": "Regex update CallerArgument pattern\n\nFrom\n\n```\nErrorUtilities\\.VerifyThrowArgumentNull\\(([a-zA-Z0-9]+), nameof\\(\\1\\)\\);\n```\n\nto\n\n```\nErrorUtilities.VerifyThrowArgumentNull($1);\n```\n\n(And then revert `src/Deprecated`.)",
          "committedDate": "2024-10-24T20:51:57Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a5c376e63bb83f9439f2e99d9441270fd3bd0b8f",
          "message": "Regex update CallerArgument pattern\n\nFrom\n\n```\nErrorUtilities\\.VerifyThrowArgumentLength\\(([a-zA-Z0-9]+), nameof\\(\\1\\)\\);\n```\n\nto\n\n```\nErrorUtilities.VerifyThrowArgumentLength($1);\n```\n\nAnd revert `src/Deprecated`.",
          "committedDate": "2024-10-24T20:51:57Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5b7ef3c3d4ffa4c2cc513a71adb6f7b6e8f220ea",
          "message": "Regex update CallerArgument pattern\n\nFrom\n\n```\nErrorUtilities\\.VerifyThrowInternalNull\\(([a-zA-Z0-9]+), nameof\\(\\1\\)\\);\n```\n\nto\n\n```\nErrorUtilities.VerifyThrowInternalNull($1);\n```\n\nand revert `src/Deprecated`.",
          "committedDate": "2024-10-24T20:51:57Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2024-10-24T19:39:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2024-10-24T19:40:02Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "```\r\n[mlibc++abi: terminating due to uncaught exception of type PAL_SEHException\r\nExecuting [/Users/runner/work/1/s/.dotnet/dotnet \"/Users/runner/work/1/s/artifacts/bin/Microsoft.Build.CommandLine.UnitTests/Debug/net9.0/MSBuild.dll\" /var/folders/z0/m_s6x1rn5799ttl3khp8n86r0000gn/T/aaev4ycc.fr4/MSBuildTemprunner/Temporary1e6a54b3e9f040aeb48b6b1aa0094d93/testProject.proj]\r\n```\r\n\r\non macOS???",
        "createdAt": "2024-10-24T22:05:59Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why is this needed? - I'd expect this change to not cause weaker nullability guarantee",
              "createdAt": "2024-10-20T17:46:25Z",
              "path": "src/Shared/ErrorUtilities.cs",
              "diffHunk": "@@ -467,7 +468,7 @@ internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition\n         /// Throws an argument out of range exception.\n         /// </summary>\n         [DoesNotReturn]\n-        internal static void ThrowArgumentOutOfRange(string parameterName)\n+        internal static void ThrowArgumentOutOfRange(string? parameterName)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Yeah this is a bit unfortunate. To use `[CallerMemberName]` you have to provide a default value, and the one for `string parameterName` that makes the most sense IMO is `null`. But then there's a possibility that `null` flows through the other overload of `ThrowArgumentOutOfRange` to here.\r\n\r\nI think I prefer this to swapping it for `\"\"` but if you feel strongly the other way I can swap it. Definitely not a strong preference on my side.",
              "createdAt": "2024-10-24T20:31:07Z",
              "path": "src/Shared/ErrorUtilities.cs",
              "diffHunk": "@@ -467,7 +468,7 @@ internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition\n         /// Throws an argument out of range exception.\n         /// </summary>\n         [DoesNotReturn]\n-        internal static void ThrowArgumentOutOfRange(string parameterName)\n+        internal static void ThrowArgumentOutOfRange(string? parameterName)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh - makes sense.\r\nI'm fine with this.",
              "createdAt": "2024-11-05T10:26:44Z",
              "path": "src/Shared/ErrorUtilities.cs",
              "diffHunk": "@@ -467,7 +468,7 @@ internal static void VerifyThrowArgument([DoesNotReturnIf(false)] bool condition\n         /// Throws an argument out of range exception.\n         /// </summary>\n         [DoesNotReturn]\n-        internal static void ThrowArgumentOutOfRange(string parameterName)\n+        internal static void ThrowArgumentOutOfRange(string? parameterName)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we at least keep this as a comment here?",
              "createdAt": "2024-10-20T17:48:32Z",
              "path": "src/Framework/AssemblyUtilities.cs",
              "diffHunk": "@@ -168,7 +168,7 @@ private static CultureInfo[] GetValidCultures()\n \n             var cultures = s_cultureInfoGetCultureMethod.Invoke(null, [allCulturesEnumValue]) as CultureInfo[];\n \n-            FrameworkErrorUtilities.VerifyThrowInternalNull(cultures, \"CultureInfo.GetCultures should work if all reflection checks pass\");",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}