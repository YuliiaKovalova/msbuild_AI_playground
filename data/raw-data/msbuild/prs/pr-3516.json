{
  "number": 3516,
  "title": "Unqualified metadata case sensitivity fix",
  "body": "_(This is my first PR in a microsoft repository (or any popular repository for that matter)... so any feedback would be greatly appreciated.)_\r\n\r\nThis PR attempts to fix #2870 \r\n\r\nNote: I wasn't sure were exactly to put the tests. I hope i haven't missed it quite as much \ud83d\ude04 ",
  "state": "MERGED",
  "createdAt": "2018-07-15T16:09:04Z",
  "updatedAt": "2022-05-17T23:17:32Z",
  "closedAt": "2018-07-17T17:48:15Z",
  "mergedAt": "2018-07-17T17:48:15Z",
  "additions": 80,
  "deletions": 2,
  "changedFiles": 2,
  "headRefName": "UnqualifiedMetadataCaseSensitivityFix",
  "isDraft": false,
  "author": {
    "login": "MeikTranel"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "eed12b0a64fd56cd6948a900e22acb716ca4fd57",
          "message": "Pass down .Contains(string key) responsibility to the IDictionary implementation\n\nThis resolves unqualified metadata references not passing the \"HasMetadata\" test by passing the responsibility down to the underlying dictionary implementation, which uses the MSBuildNameIgnoreCaseComparer instead of running it straight into the string collection indexer where no comparer can be passed.\n\nFixes #2870",
          "committedDate": "2018-07-17T17:46:43Z",
          "author": {
            "name": "Meik Tranel",
            "email": "tranelmeik@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald do you know what's happening with the osx build? From what I can gather it seems to be unrelated to my changes.",
        "createdAt": "2018-07-15T17:34:15Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "@MeikTranel @rainersigwald \r\n\r\nMoved the tests closer to the place of failure, the Expander. Also switched them to what some of the other Expander tests are doing, which is do a build and assert output. Looks OK?",
        "createdAt": "2018-07-16T20:41:46Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@MeikTranel I removed the merge commit in favor of rebase to have history show better, and I had to force push to your branch.",
        "createdAt": "2018-07-16T20:47:26Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai i added the changes requested by @rainersigwald \r\n\r\nGiven that these builds all follow through, everything looks good on my end \ud83d\ude09 \r\n\r\nP.S.: I didn't even know this force push thing on other peoples' forks even works. i guess its the \"allow edits from maintainers\" option. very cool :smile:",
        "createdAt": "2018-07-16T21:28:54Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "@MeikTranel \r\nSquashed and merged. Thank you for your contribution!",
        "createdAt": "2018-07-17T17:48:39Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Did you consider\r\n\r\n```c#\r\nreturn _properties.ContainsKey(key);\r\n```\r\n\r\n? That seems a bit more straightforward, and avoids memory allocations for the unneeded `T`.",
              "createdAt": "2018-07-16T19:04:15Z",
              "path": "src/Build/Collections/CopyOnWritePropertyDictionary.cs",
              "diffHunk": "@@ -299,7 +299,8 @@ public bool Equals(CopyOnWritePropertyDictionary<T> other)\n         /// </summary>\n         bool IDictionary<string, T>.ContainsKey(string key)\n         {\n-            return PropertyNames.Contains(key);\n+            T discard;\n+            return ((IDictionary<string, T>)this).TryGetValue(key, out discard);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "No, i didnt even see that.  That works, too.",
              "createdAt": "2018-07-16T20:28:22Z",
              "path": "src/Build/Collections/CopyOnWritePropertyDictionary.cs",
              "diffHunk": "@@ -299,7 +299,8 @@ public bool Equals(CopyOnWritePropertyDictionary<T> other)\n         /// </summary>\n         bool IDictionary<string, T>.ContainsKey(string key)\n         {\n-            return PropertyNames.Contains(key);\n+            T discard;\n+            return ((IDictionary<string, T>)this).TryGetValue(key, out discard);",
              "author": {
                "login": "MeikTranel"
              }
            },
            {
              "body": "I stepped through this to compare what's happening. Aside from the allocation this is better in other ways. the sheer decrease in branch depth is worth it from my perspective. \r\nthe old solution went through tons of functions before eventually landing where the case insensitive lookup was happening; by going through the wrapped dictionary's containskey that path is way more direct. \r\n\r\nGood call",
              "createdAt": "2018-07-16T21:23:08Z",
              "path": "src/Build/Collections/CopyOnWritePropertyDictionary.cs",
              "diffHunk": "@@ -299,7 +299,8 @@ public bool Equals(CopyOnWritePropertyDictionary<T> other)\n         /// </summary>\n         bool IDictionary<string, T>.ContainsKey(string key)\n         {\n-            return PropertyNames.Contains(key);\n+            T discard;\n+            return ((IDictionary<string, T>)this).TryGetValue(key, out discard);",
              "author": {
                "login": "MeikTranel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you change this to use more-modern syntax like\r\n\r\n```xml\r\n<PropertyGroup>\r\n <Qualified>%(Foo.FileName)=%(Foo.sensitive)</Qualified>\r\n <Unqualified>%(Foo.FileName)=%(sensitive)</Unqualified>\r\n</PropertyGroup>\r\n```",
              "createdAt": "2018-07-16T19:07:28Z",
              "path": "src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs",
              "diffHunk": "@@ -650,5 +652,100 @@ public void MetadataPropertyFunctionBug()\n \n             ObjectModelHelpers.AssertItems(new[] { $\"{prefix}foo\" }, items, expectedMetadata);\n         }\n+\n+        [Fact]\n+        public void ItemMetadataShouldBeEvaluatedCaseInsensitively()\n+        {\n+            var projectContents =\n+            @\"<Project>\n+                <ItemGroup>\n+                    <Foo Include=`Foo`>\n+                        <SensitiVE>X</SensitiVE>\n+                    </Foo>\n+                </ItemGroup>\n+                <Target Name=`AccessItemMetadata`>\n+                    <CreateProperty Value=`%(Foo.FileName)=%(Foo.sensitive)`>  \n+                        <Output TaskParameter=`Value` PropertyName=`Qualified` />  \n+                    </CreateProperty>          \n+                    <CreateProperty Value=`%(Foo.FileName)=%(sensitive)`>  \n+                        <Output TaskParameter=`Value` PropertyName=`Unqualified` />  \n+                    </CreateProperty>  ",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This one is funny. Structured log viewer got me so focused on always using tasks over shorthand property/itemgroups, because CreateProperty etc. give better binary logs. Maybe i should raise an issue over at https://github.com/KirillOsenkov/MSBuildStructuredLog :smile:",
              "createdAt": "2018-07-16T20:33:03Z",
              "path": "src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs",
              "diffHunk": "@@ -650,5 +652,100 @@ public void MetadataPropertyFunctionBug()\n \n             ObjectModelHelpers.AssertItems(new[] { $\"{prefix}foo\" }, items, expectedMetadata);\n         }\n+\n+        [Fact]\n+        public void ItemMetadataShouldBeEvaluatedCaseInsensitively()\n+        {\n+            var projectContents =\n+            @\"<Project>\n+                <ItemGroup>\n+                    <Foo Include=`Foo`>\n+                        <SensitiVE>X</SensitiVE>\n+                    </Foo>\n+                </ItemGroup>\n+                <Target Name=`AccessItemMetadata`>\n+                    <CreateProperty Value=`%(Foo.FileName)=%(Foo.sensitive)`>  \n+                        <Output TaskParameter=`Value` PropertyName=`Qualified` />  \n+                    </CreateProperty>          \n+                    <CreateProperty Value=`%(Foo.FileName)=%(sensitive)`>  \n+                        <Output TaskParameter=`Value` PropertyName=`Unqualified` />  \n+                    </CreateProperty>  ",
              "author": {
                "login": "MeikTranel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you change these asserts to additionally check the content of the properties for good measure?",
              "createdAt": "2018-07-16T19:21:34Z",
              "path": "src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs",
              "diffHunk": "@@ -650,5 +652,100 @@ public void MetadataPropertyFunctionBug()\n \n             ObjectModelHelpers.AssertItems(new[] { $\"{prefix}foo\" }, items, expectedMetadata);\n         }\n+\n+        [Fact]\n+        public void ItemMetadataShouldBeEvaluatedCaseInsensitively()\n+        {\n+            var projectContents =\n+            @\"<Project>\n+                <ItemGroup>\n+                    <Foo Include=`Foo`>\n+                        <SensitiVE>X</SensitiVE>\n+                    </Foo>\n+                </ItemGroup>\n+                <Target Name=`AccessItemMetadata`>\n+                    <CreateProperty Value=`%(Foo.FileName)=%(Foo.sensitive)`>  \n+                        <Output TaskParameter=`Value` PropertyName=`Qualified` />  \n+                    </CreateProperty>          \n+                    <CreateProperty Value=`%(Foo.FileName)=%(sensitive)`>  \n+                        <Output TaskParameter=`Value` PropertyName=`Unqualified` />  \n+                    </CreateProperty>  \n+                </Target>\n+            </Project>\".Cleanup();\n+\n+            ProjectInstance project = new Project(\n+                XmlReader.Create(\n+                    new StringReader(projectContents)\n+                )\n+            ).CreateProjectInstance();\n+\n+            project.Build();\n+\n+            Assert.NotNull(project.GetProperty(\"Qualified\"));\n+            Assert.NotNull(project.GetProperty(\"Unqualified\"));",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I was trying to avoid using the log assertions, because i thought they would introduce lots of overhead and asserting via lookup over large strings didn't feel as precise to me? Is there a big advantage to these that i am missing?",
              "createdAt": "2018-07-16T21:09:27Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -1138,6 +1137,85 @@ public void HasMetadata()\n             logger.AssertLogContains(\"[One|Three|Four]\");\n         }\n \n+        [Fact]\n+        public void DirectItemMetadataReferenceShouldBeCaseInsensitive()\n+        {\n+            MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@\"\n+                <Project>\n+                  <ItemGroup>\n+                    <Foo Include=`Foo`>\n+                      <SENSITIVE>X</SENSITIVE>\n+                    </Foo>\n+                  </ItemGroup>\n+                  <Target Name=`Build`>\n+                    <Message Importance=`high` Text=`QualifiedNotMatchCase %(Foo.FileName)=%(Foo.sensitive)`/>\n+                    <Message Importance=`high` Text=`QualifiedMatchCase %(Foo.FileName)=%(Foo.SENSITIVE)`/>\n+                    \n+                    <Message Importance=`high` Text=`UnqualifiedNotMatchCase %(Foo.FileName)=%(sensitive)`/>\n+                    <Message Importance=`high` Text=`UnqualifiedMatchCase %(Foo.FileName)=%(SENSITIVE)`/>\n+                  </Target>\n+                </Project>\n+                \");\n+\n+            logger.AssertLogContains(\"QualifiedNotMatchCase Foo=X\");\n+            logger.AssertLogContains(\"QualifiedMatchCase Foo=X\");\n+            logger.AssertLogContains(\"UnqualifiedNotMatchCase Foo=X\");\n+            logger.AssertLogContains(\"UnqualifiedMatchCase Foo=X\");",
              "author": {
                "login": "MeikTranel"
              }
            },
            {
              "body": "IMO the advantage is consistency with the other similar tests, which outweighs the efficiency problems.",
              "createdAt": "2018-07-16T21:52:07Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -1138,6 +1137,85 @@ public void HasMetadata()\n             logger.AssertLogContains(\"[One|Three|Four]\");\n         }\n \n+        [Fact]\n+        public void DirectItemMetadataReferenceShouldBeCaseInsensitive()\n+        {\n+            MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@\"\n+                <Project>\n+                  <ItemGroup>\n+                    <Foo Include=`Foo`>\n+                      <SENSITIVE>X</SENSITIVE>\n+                    </Foo>\n+                  </ItemGroup>\n+                  <Target Name=`Build`>\n+                    <Message Importance=`high` Text=`QualifiedNotMatchCase %(Foo.FileName)=%(Foo.sensitive)`/>\n+                    <Message Importance=`high` Text=`QualifiedMatchCase %(Foo.FileName)=%(Foo.SENSITIVE)`/>\n+                    \n+                    <Message Importance=`high` Text=`UnqualifiedNotMatchCase %(Foo.FileName)=%(sensitive)`/>\n+                    <Message Importance=`high` Text=`UnqualifiedMatchCase %(Foo.FileName)=%(SENSITIVE)`/>\n+                  </Target>\n+                </Project>\n+                \");\n+\n+            logger.AssertLogContains(\"QualifiedNotMatchCase Foo=X\");\n+            logger.AssertLogContains(\"QualifiedMatchCase Foo=X\");\n+            logger.AssertLogContains(\"UnqualifiedNotMatchCase Foo=X\");\n+            logger.AssertLogContains(\"UnqualifiedMatchCase Foo=X\");",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "That's true. I can see that.",
              "createdAt": "2018-07-16T22:13:07Z",
              "path": "src/Build.UnitTests/Evaluation/Expander_Tests.cs",
              "diffHunk": "@@ -1138,6 +1137,85 @@ public void HasMetadata()\n             logger.AssertLogContains(\"[One|Three|Four]\");\n         }\n \n+        [Fact]\n+        public void DirectItemMetadataReferenceShouldBeCaseInsensitive()\n+        {\n+            MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess(@\"\n+                <Project>\n+                  <ItemGroup>\n+                    <Foo Include=`Foo`>\n+                      <SENSITIVE>X</SENSITIVE>\n+                    </Foo>\n+                  </ItemGroup>\n+                  <Target Name=`Build`>\n+                    <Message Importance=`high` Text=`QualifiedNotMatchCase %(Foo.FileName)=%(Foo.sensitive)`/>\n+                    <Message Importance=`high` Text=`QualifiedMatchCase %(Foo.FileName)=%(Foo.SENSITIVE)`/>\n+                    \n+                    <Message Importance=`high` Text=`UnqualifiedNotMatchCase %(Foo.FileName)=%(sensitive)`/>\n+                    <Message Importance=`high` Text=`UnqualifiedMatchCase %(Foo.FileName)=%(SENSITIVE)`/>\n+                  </Target>\n+                </Project>\n+                \");\n+\n+            logger.AssertLogContains(\"QualifiedNotMatchCase Foo=X\");\n+            logger.AssertLogContains(\"QualifiedMatchCase Foo=X\");\n+            logger.AssertLogContains(\"UnqualifiedNotMatchCase Foo=X\");\n+            logger.AssertLogContains(\"UnqualifiedMatchCase Foo=X\");",
              "author": {
                "login": "MeikTranel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@cdmihai although it is kind of pointless because the hint @rainersigwald was totally right and improves this further than just the avoided allocation of discard...\r\nwhat happens with the discard underscore in terms of IL? does it just completely avoid the allocation?",
              "createdAt": "2018-07-16T21:17:36Z",
              "path": "src/Build/Collections/CopyOnWritePropertyDictionary.cs",
              "diffHunk": "@@ -299,8 +299,7 @@ public bool Equals(CopyOnWritePropertyDictionary<T> other)\n         /// </summary>\n         bool IDictionary<string, T>.ContainsKey(string key)\n         {\n-            T discard;\n-            return ((IDictionary<string, T>)this).TryGetValue(key, out discard);\n+            return ((IDictionary<string, T>)this).TryGetValue(key, out _);",
              "author": {
                "login": "MeikTranel"
              }
            },
            {
              "body": "I think it's just cleaner to look at and produces almost-identical IL (except that the local variable isn't named). Example IL from https://dotnetfiddle.net/zOkQjl\r\n\r\n```\r\n    .locals init ([0] class DataClass V_0)\r\n...\r\n    IL_0001:  ldc.i4.3\r\n    IL_0002:  ldloca.s   V_0\r\n    IL_0004:  call       void Program::Method(int32,\r\n                                              class DataClass&)\r\n```\r\n\r\nSo it still has to allocate the local and pass it to the method with the `out` param, but it's easier to tell at the call site that we don't care about the answer. I don't know if the JIT does anything clever; I don't see anything about that in [the docs](https://docs.microsoft.com/en-us/dotnet/csharp/discards#calls-to-methods-with-out-parameters).",
              "createdAt": "2018-07-16T21:51:38Z",
              "path": "src/Build/Collections/CopyOnWritePropertyDictionary.cs",
              "diffHunk": "@@ -299,8 +299,7 @@ public bool Equals(CopyOnWritePropertyDictionary<T> other)\n         /// </summary>\n         bool IDictionary<string, T>.ContainsKey(string key)\n         {\n-            T discard;\n-            return ((IDictionary<string, T>)this).TryGetValue(key, out discard);\n+            return ((IDictionary<string, T>)this).TryGetValue(key, out _);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}