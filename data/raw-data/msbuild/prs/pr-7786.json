{
  "number": 7786,
  "title": "Reduce allocations in ProjectCollection locking",
  "body": "The previous code would allocate two objects per call to `EnterUpgradeableReadLock` or `EnterWriteLock`:\r\n\r\n1. An instance of `DisposableDelegate`\r\n2. An instance of `Action` for the lambda\r\n\r\n~~These objects are safe for re-use with the current design. This change caches them in fields to avoid per-call allocations.~~\r\n\r\nThe design evolved during review.\r\n",
  "state": "MERGED",
  "createdAt": "2022-07-05T01:59:25Z",
  "updatedAt": "2022-07-16T23:15:05Z",
  "closedAt": "2022-07-16T02:12:17Z",
  "mergedAt": "2022-07-16T02:12:17Z",
  "additions": 116,
  "deletions": 81,
  "changedFiles": 3,
  "headRefName": "dev/drnoakes/rwlock-allocations",
  "isDraft": false,
  "author": {
    "login": "drewnoakes"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "Area: Engine",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7e1f012b49394c98ae6d2624b61862ac123c7e89",
          "message": "Reduce allocations in ProjectCollection locking\n\nThe previous code would allocate two objects per call to `EnterUpgradeableReadLock` or `EnterWriteLock`:\n\n1. An instance of `DisposableDelegate`\n2. An instance of `Action` for the lambda\n\nThis change uses a value type and avoids allocations while still allowing `using` blocks to guarantee locks are released correctly in the case of exceptions, without requiring a `try`/`catch` at each call site.",
          "committedDate": "2022-07-13T00:51:19Z",
          "author": {
            "name": "Drew Noakes",
            "email": "git@drewnoakes.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4adcb06d11d671a7a90e821c660df6a304ad054c",
          "message": "Merge branch 'main' into dev/drnoakes/rwlock-allocations",
          "committedDate": "2022-07-15T18:54:40Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "No numbers. I saw this while reading code today and took five for a PR. It would be easy to measure these allocations in a trace. I was on a new laptop without those tools. \n\nThe previous code would have had the same problem with double dispose.",
        "createdAt": "2022-07-05T15:00:56Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "> I saw this while reading code today and took five for a PR.\r\n\r\n\u2764\ufe0f\r\n\r\nI found some [docs on multiple dispose](https://docs.microsoft.com/dotnet/api/system.idisposable.dispose?redirectedfrom=MSDN&view=net-6.0#remarks):\r\n\r\n> If an object's [Dispose](https://docs.microsoft.com/en-us/dotnet/api/system.idisposable.dispose?view=net-6.0) method is called more than once, the object must ignore all calls after the first one. The object must not throw an exception if its [Dispose](https://docs.microsoft.com/en-us/dotnet/api/system.idisposable.dispose?view=net-6.0) method is called multiple times. Instance methods other than [Dispose](https://docs.microsoft.com/en-us/dotnet/api/system.idisposable.dispose?view=net-6.0) can throw an [ObjectDisposedException](https://docs.microsoft.com/en-us/dotnet/api/system.objectdisposedexception?view=net-6.0) when resources are already disposed.\r\n\r\nSo this would technically validate that, I just don't know how much we care since it should be safe.\r\n\r\nThe previous code disposes only once, since it's creating a new (wasteful) object for each call, right?",
        "createdAt": "2022-07-05T15:06:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> The object must not throw an exception if its [Dispose](https://docs.microsoft.com/en-us/dotnet/api/system.idisposable.dispose?view=net-6.0) method is called multiple times\r\n\r\nThe previous code could throw if you disposed multiple times, as it would attempt to release a lock that might not be held.\r\n\r\n```c#\r\nIDisposable d = _lock.EnterUpgradeableReadLock();\r\nd.Dispose();\r\nd.Dispose(); // \ud83d\udca5\r\n```\r\n\r\nThe new code is no different in that regard.\r\n\r\nFor the private nested `DisposableReaderWriterLockSlim` type, all consumption is private to the parent type, and no caller can multi-dispose. Given the 1:1 correspondence between requesting the disposables and disposing them, it felt to me that on balance this change was safe.",
        "createdAt": "2022-07-08T03:31:26Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "We talked about this in our PR review meeting and agreed Therzok's disposable structs plan seems like the best way forward.",
        "createdAt": "2022-07-11T23:30:57Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Updated!",
        "createdAt": "2022-07-12T02:50:23Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "```\r\nChild node \"4\" exited prematurely. Shutting down. Diagnostic information may be found in files in \"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\\" and will be named MSBuild_*.failure.txt. This location can be changed by setting the MSBUILDDEBUGPATH environment variable to a different directory.\r\nC:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\MSBuild_pid-3700_c161752c7d4c478c909264afcee5c254.failure.txt:\r\nUNHANDLED EXCEPTIONS FROM PROCESS 3700:\r\n=====================\r\n7/12/2022 2:52:12 AM\r\nSystem.Threading.LockRecursionException: Upgradeable lock may not be acquired with write lock held in this mode. Acquiring Upgradeable lock gives the ability to read along with an option to upgrade to a writer.\r\n   at System.Threading.ReaderWriterLockSlim.TryEnterUpgradeableReadLockCore(TimeoutTracker timeout)\r\n   at System.Threading.ReaderWriterLockSlim.EnterUpgradeableReadLock()\r\n   at Microsoft.Build.Internal.ReaderWriterLockSlimExtensions.EnterDisposableUpgradeableReadLock(ReaderWriterLockSlim rwLock) in /_/src/Build/Utilities/ReaderWriterLockSlimExtensions.cs:line 15\r\n   at Microsoft.Build.Evaluation.ProjectCollection.get_Toolsets() in /_/src/Build/Definition/ProjectCollection.cs:line 616\r\n   at Microsoft.Build.Evaluation.ProjectCollection.RemoveAllToolsets() in /_/src/Build/Definition/ProjectCollection.cs:line 1018\r\n   at Microsoft.Build.Execution.OutOfProcNode.HandleNodeConfiguration(NodeConfiguration configuration) in /_/src/Build/BackEnd/Node/OutOfProcNode.cs:line 704\r\n   at Microsoft.Build.Execution.OutOfProcNode.HandlePacket(INodePacket packet) in /_/src/Build/BackEnd/Node/OutOfProcNode.cs:line 609\r\n   at Microsoft.Build.Execution.OutOfProcNode.Run(Boolean enableReuse, Boolean lowPriority, Exception& shutdownException) in /_/src/Build/BackEnd/Node/OutOfProcNode.cs:line 267\r\n   at Microsoft.Build.CommandLine.MSBuildApp.StartLocalNode(CommandLineSwitches commandLineSwitches, Boolean lowpriority) in /_/src/MSBuild/XMake.cs:line 2620\r\n   at Microsoft.Build.CommandLine.MSBuildApp.ProcessCommandLineSwitches(CommandLineSwitches switchesFromAutoResponseFile, CommandLineSwitches switchesNotFromAutoResponseFile, String& projectFile, String[]& targets, String& toolsVersion, Dictionary`2& globalProperties, ILogger[]& loggers, LoggerVerbosity& verbosity, List`1& distributedLoggerRecords, Int32& cpuCount, Boolean& enableNodeReuse, TextWriter& preprocessWriter, TextWriter& targetsWriter, Boolean& detailedSummary, ISet`1& warningsAsErrors, ISet`1& warningsNotAsErrors, ISet`1& warningsAsMessages, Boolean& enableRestore, Boolean& interactive, ProfilerLogger& profilerLogger, Boolean& enableProfiler, Dictionary`2& restoreProperties, Boolean& isolateProjects, GraphBuildOptions& graphBuild, String[]& inputResultsCaches, String& outputResultsCache, Boolean& lowPriority, Boolean recursing, String commandLine) in /_/src/MSBuild/XMake.cs:line 2108\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Execute(String[] commandLine) in /_/src/MSBuild/XMake.cs:line 571\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Main(String[] args) in /_/src/MSBuild/XMake.cs:line 220\r\n===================\r\n```",
        "createdAt": "2022-07-12T21:41:04Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Wouldn't a struct disposable achieve the same without allocations?",
              "createdAt": "2022-07-11T11:37:02Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -89,18 +89,29 @@ public class ProjectCollection : IToolsetProvider, IBuildComponent, IDisposable\n         private class DisposableReaderWriterLockSlim\n         {\n             private readonly ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);\n+\n+            // Cache these so that we don't allocate per-call\n+            private readonly IDisposable _exitUpgradeableReadLock;\n+            private readonly IDisposable _exitWriteLock;\n+\n+            public DisposableReaderWriterLockSlim()\n+            {\n+                _exitUpgradeableReadLock = new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n+                _exitWriteLock = new DelegateDisposable(() => _lock.ExitWriteLock());\n+            }\n+\n             public bool IsWriteLockHeld => _lock.IsWriteLockHeld;\n \n             public IDisposable EnterUpgradeableReadLock()\n             {\n                 _lock.EnterUpgradeableReadLock();\n-                return new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n+                return _exitUpgradeableReadLock;",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "Unlike `foreach`, `using` doesn't support disposal via structs (in my testing on .NET Framework at least). You can make this type a struct, but then it gets boxed (which is an allocation) for the virtual `IDisposable.Dispose` call.",
              "createdAt": "2022-07-11T11:55:03Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -89,18 +89,29 @@ public class ProjectCollection : IToolsetProvider, IBuildComponent, IDisposable\n         private class DisposableReaderWriterLockSlim\n         {\n             private readonly ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);\n+\n+            // Cache these so that we don't allocate per-call\n+            private readonly IDisposable _exitUpgradeableReadLock;\n+            private readonly IDisposable _exitWriteLock;\n+\n+            public DisposableReaderWriterLockSlim()\n+            {\n+                _exitUpgradeableReadLock = new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n+                _exitWriteLock = new DelegateDisposable(() => _lock.ExitWriteLock());\n+            }\n+\n             public bool IsWriteLockHeld => _lock.IsWriteLockHeld;\n \n             public IDisposable EnterUpgradeableReadLock()\n             {\n                 _lock.EnterUpgradeableReadLock();\n-                return new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n+                return _exitUpgradeableReadLock;",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "> using doesn't support disposal via structs\r\n\r\nI have personally used the pattern, and so does roslyn. See here: https://sourceroslyn.io/#Microsoft.CodeAnalysis/InternalUtilities/SemaphoreSlimExtensions.cs,174ce3d1a7cbf2bb\r\n\r\nThe idea is to return the struct type, and then it won't box. I'm not sure if it's exposed as an IDisposable in the API, but I just saw this is an internal class.\r\n\r\n",
              "createdAt": "2022-07-11T13:06:05Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -89,18 +89,29 @@ public class ProjectCollection : IToolsetProvider, IBuildComponent, IDisposable\n         private class DisposableReaderWriterLockSlim\n         {\n             private readonly ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);\n+\n+            // Cache these so that we don't allocate per-call\n+            private readonly IDisposable _exitUpgradeableReadLock;\n+            private readonly IDisposable _exitWriteLock;\n+\n+            public DisposableReaderWriterLockSlim()\n+            {\n+                _exitUpgradeableReadLock = new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n+                _exitWriteLock = new DelegateDisposable(() => _lock.ExitWriteLock());\n+            }\n+\n             public bool IsWriteLockHeld => _lock.IsWriteLockHeld;\n \n             public IDisposable EnterUpgradeableReadLock()\n             {\n                 _lock.EnterUpgradeableReadLock();\n-                return new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n+                return _exitUpgradeableReadLock;",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "Looks like I was wrong. `using` does support struct disposables without boxing, even on .NET Framework. I'd written an example on sharplab and saw boxing, but I don't have that to hand anymore so don't know what I was doing wrong.\r\n\r\nHere's an updated [sharplab example](https://sharplab.io/#v2:EYLgHgbALANALiAlgGwD4AEBMBGAsAKHQAYACdbAOgBUALAJwFMBDAE0QDsBzAbgOLOwBWXvj7YIZTCQDCBAN4ESSgRPRQSAWQAUASkXKF+ZcZIA3JnRIBnBgFsmABxoB7RiQC8JdgwDuJAMp2ji6M/siItlrYOiL6JmSkWjb2Tq4MFAAiiFYOzlZMwMgMAOpMiHC6ekbxJIY1JuQAnFoARMXlNBwkyM4AxgDWLTFxJgC+I+P4kwQccAx07EzIKpIBQamh4bYAomBz7FaIzgfyI+gAzCuBKSEMWTl58yT3ufmFJWUVcJ1WazdpYQi1nWtxgMiY7F6DGQyCYcCO7Cozn6DHYJF6EKhMLhCKRKLRnhYDAAZkwAK7IOBVYx1GrJYJpCilcpaDGQ6Gw+HHPGo4bVeLoADsXl8fwZjBejzoSRBaT5xmm/JIs3mi2WVjgdDJvTgYo2d2yryeIBIAElJW8iiNafEHHREOY5nrboDbCQAPr0/WxJXGC7OtIW+Zaa7ihiu4H/RjUmo2+oer23DyRsMieqK+r+tTPQ2PXQjGkFmrmSyJtJIoPJ03sOZ0HoDBgsCi7Xo0CGcBhaRjEhOyxhg9gU5B8ovxRA9mVRhgV3M2ZW/QcwmPx2qj+PfOjOPzePwAeWAACsGDqgywWwwHFz2FoACQtfzOWwMFx+Ji1RZP5zEkN9g0PGx0DoozziQwAMBwnAkGw/6NiQcA+IgUIUEMaYriQGZoWWjAzjBFAAErQswNi6Kh8STAqBCjEAA===) showing no boxing:\r\n\r\n```\r\n        .try\r\n        {\r\n            IL_0015: ldstr \"Within lock\"\r\n            IL_001a: call void [mscorlib]System.Console::WriteLine(string)\r\n            IL_001f: leave.s IL_002f\r\n        } // end .try\r\n        finally\r\n        {\r\n            // sequence point: hidden\r\n            IL_0021: ldloca.s 0\r\n            IL_0023: constrained. SemaphoreSlimExtensions/SemaphoreDisposer\r\n            IL_0029: callvirt instance void [mscorlib]System.IDisposable::Dispose()\r\n            IL_002e: endfinally\r\n        } // end handler\r\n```",
              "createdAt": "2022-07-12T02:50:13Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -89,18 +89,29 @@ public class ProjectCollection : IToolsetProvider, IBuildComponent, IDisposable\n         private class DisposableReaderWriterLockSlim\n         {\n             private readonly ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);\n+\n+            // Cache these so that we don't allocate per-call\n+            private readonly IDisposable _exitUpgradeableReadLock;\n+            private readonly IDisposable _exitWriteLock;\n+\n+            public DisposableReaderWriterLockSlim()\n+            {\n+                _exitUpgradeableReadLock = new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n+                _exitWriteLock = new DelegateDisposable(() => _lock.ExitWriteLock());\n+            }\n+\n             public bool IsWriteLockHeld => _lock.IsWriteLockHeld;\n \n             public IDisposable EnterUpgradeableReadLock()\n             {\n                 _lock.EnterUpgradeableReadLock();\n-                return new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n+                return _exitUpgradeableReadLock;",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "I initially thought that [Pattern-based Dispose](https://github.com/dotnet/roslyn/blob/ec6da663c592238cca8e145044e7410c4ca9213a/docs/features/enhanced-using.md) was the problem, but going back even to 2020 build demos, I still can't repro boxing in the IL\r\n\r\nBoxing also can be avoided by using `<T>(T target) where T:struct, IDisposable`, when generics are used.",
              "createdAt": "2022-07-12T05:25:02Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -89,18 +89,29 @@ public class ProjectCollection : IToolsetProvider, IBuildComponent, IDisposable\n         private class DisposableReaderWriterLockSlim\n         {\n             private readonly ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);\n+\n+            // Cache these so that we don't allocate per-call\n+            private readonly IDisposable _exitUpgradeableReadLock;\n+            private readonly IDisposable _exitWriteLock;\n+\n+            public DisposableReaderWriterLockSlim()\n+            {\n+                _exitUpgradeableReadLock = new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n+                _exitWriteLock = new DelegateDisposable(() => _lock.ExitWriteLock());\n+            }\n+\n             public bool IsWriteLockHeld => _lock.IsWriteLockHeld;\n \n             public IDisposable EnterUpgradeableReadLock()\n             {\n                 _lock.EnterUpgradeableReadLock();\n-                return new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n+                return _exitUpgradeableReadLock;",
              "author": {
                "login": "Therzok"
              }
            },
            {
              "body": "It might be [this box pattern](https://sharplab.io/#v2:C4LglgNgPgAgTARgLACgYAYAEMEDoAqAFgE4CmAhgCZgB2A5gNyobYICsTKzCAbNnJgDCqAN6pME1nxgAWTAFkAPPgB8ACnyZg5YnVLAAlJgDuhUmUz4QASQAiYAM4AHAPYPyAIwilxksSklA7Cw1bV19A18gzH9o6JwATjUAIgB1MGBCWkwIFwBjAGtkg044zABfKIrUSq40AUEIcgcHe2c3T29MEEw7R1d3Lx8UWMkYAGZsOTaB0jUjAF4VViSacgBbUhcAMzVG5tb+jqGDEprUVAdgYgBXPOBMAGVru+AZ466evvbB71EqiZTTDvBxzRbLRJqNabHZqZ63e4gzqkU6ccpAA==) that you were thinking of?\r\n\r\nIt seems like the JIT generates the [same code](https://sharplab.io/#v2:C4LghgzgtgPgAgJgIwFgBQcAMACOSB0AKgBYBOApmACYCWAdgOYDc6WuSArCxjnvgEoBXOsBpRy+AMIB7KAAcaAG3KkAyioBuNAMbkI3NquJhScgDJgARgOGjx3VkgBsuBNknoA3umy/sAbQApGmAAcXI6FR0ACmAATzlyaQAzaNVgUkFtYAARGgg5aQgrZQBKUoBdHz8gkPDI0hj4xJToyUVICDyCopLycqq0P3YXOAAWbABZeqjtAB5CAD5owmxgEwZyYFLsAHdiFXJsQhAASW7C4stlat9vIeG/NliNrdLbx/vH76mTAGsVNFStwftgAL4fCEPXwfWphCKzWIJJKpdKZbIXXrXfqVD54UYTaYIxraNFZYALZardakTbbPYHCjHEAQDLkgA02HO+UufQ+Xx+zxpdPe0M+H1Bk3+gOBEr8UOGCr8sMmW2I0iop3kimiquA6s12oA8nJRNI6BB8AA5aSnOiKej0Bi4sX43CE6WkIHYTxQqGsADMrncHQgXR5WOU2BAXMxVxuaAFvjgQfG2Dj5G9AF5FuwAJzROhgcStdqdON9crcf1oVno4DYMkYiPxo4x7k9VtePGpiYZ7O5vAFosl1Fs5udyuytBgoA===) for both anyway.\r\n\r\nEdit: thank you for the changes!",
              "createdAt": "2022-07-12T05:54:03Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -89,18 +89,29 @@ public class ProjectCollection : IToolsetProvider, IBuildComponent, IDisposable\n         private class DisposableReaderWriterLockSlim\n         {\n             private readonly ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);\n+\n+            // Cache these so that we don't allocate per-call\n+            private readonly IDisposable _exitUpgradeableReadLock;\n+            private readonly IDisposable _exitWriteLock;\n+\n+            public DisposableReaderWriterLockSlim()\n+            {\n+                _exitUpgradeableReadLock = new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n+                _exitWriteLock = new DelegateDisposable(() => _lock.ExitWriteLock());\n+            }\n+\n             public bool IsWriteLockHeld => _lock.IsWriteLockHeld;\n \n             public IDisposable EnterUpgradeableReadLock()\n             {\n                 _lock.EnterUpgradeableReadLock();\n-                return new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n+                return _exitUpgradeableReadLock;",
              "author": {
                "login": "Therzok"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        private readonly ReaderWriterLockSlim _locker = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);\r\n```",
              "createdAt": "2022-07-13T00:50:13Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -82,47 +82,16 @@ public enum ToolsetDefinitionLocations\n     [SuppressMessage(\"Microsoft.Naming\", \"CA1711:IdentifiersShouldNotHaveIncorrectSuffix\", Justification = \"This is a collection of projects API review has approved this\")]\n     public class ProjectCollection : IToolsetProvider, IBuildComponent, IDisposable\n     {\n-        // ProjectCollection is highly reentrant - project creation, toolset and logger changes, and so on\n-        // all need lock protection, but there are a lot of read cases as well, and calls to create Projects\n-        // call back to the ProjectCollection under locks. Use a RW lock, but default to always using\n-        // upgradable read locks to avoid adding reentrancy bugs.\n-        private class DisposableReaderWriterLockSlim\n-        {\n-            private readonly ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);\n-            public bool IsWriteLockHeld => _lock.IsWriteLockHeld;\n-\n-            public IDisposable EnterUpgradeableReadLock()\n-            {\n-                _lock.EnterUpgradeableReadLock();\n-                return new DelegateDisposable(() => _lock.ExitUpgradeableReadLock());\n-            }\n-\n-            public IDisposable EnterWriteLock()\n-            {\n-                _lock.EnterWriteLock();\n-                return new DelegateDisposable(() => _lock.ExitWriteLock());\n-            }\n-        }\n-\n-        private class DelegateDisposable : IDisposable\n-        {\n-            private readonly Action _disposeAction;\n-\n-            public DelegateDisposable(Action disposeAction)\n-            {\n-                _disposeAction = disposeAction;\n-            }\n-\n-            public void Dispose()\n-            {\n-                _disposeAction();\n-            }\n-        }\n-\n         /// <summary>\n         /// The object to synchronize with when accessing certain fields.\n         /// </summary>\n-        private readonly DisposableReaderWriterLockSlim _locker = new DisposableReaderWriterLockSlim();\n+        /// <remarks>\n+        /// ProjectCollection is highly reentrant - project creation, toolset and logger changes, and so on\n+        /// all need lock protection, but there are a lot of read cases as well, and calls to create Projects\n+        /// call back to the ProjectCollection under locks. Use a RW lock, but default to always using\n+        /// upgradable read locks to avoid adding reentrancy bugs.\n+        /// </remarks>\n+        private readonly ReaderWriterLockSlim _locker = new ReaderWriterLockSlim();",
              "author": {
                "login": "drewnoakes"
              }
            }
          ]
        }
      }
    ]
  }
}