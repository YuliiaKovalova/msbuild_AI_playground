{
  "number": 8106,
  "title": "Fixing overbuilding of platform negotiated projects",
  "body": "### Context\r\nPlatform negotiation still ends up in situations where project A explicitly tells project B to build as B's default platform. This leads to an unnecessary global property being passed, which leads to an unnecessary evaluation, and in some cases an overbuild.\r\n\r\nThis PR adds a catch-all that empties out the global Platform property whenever we fall into this case.\r\n\r\n### Changes Made\r\nAdd catch-all if statement that prevents global property Platform to be passed to referenced projects when redundant (the project would have built as that platform anyway).\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\nThis will unblock the implementation of this feature in VS. the only thing currently blocking adoption of this in VS is our datacenter build(cloudbuild) graph validation. it sees two project nodes with different platform global properties evaluating to the same configuration and throws an error to prevent race conditions. ",
  "state": "MERGED",
  "createdAt": "2022-10-31T15:06:48Z",
  "updatedAt": "2022-11-03T12:03:02Z",
  "closedAt": "2022-11-03T12:03:01Z",
  "mergedAt": "2022-11-03T12:03:01Z",
  "additions": 52,
  "deletions": 0,
  "changedFiles": 2,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "MIchaelRShea"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Partner request",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "dc9f7aaeb65ce93e828537dd9edbeda30c2a52a0",
          "message": "Fixing overbuilding of platform negotiated projects",
          "committedDate": "2022-10-31T15:06:22Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ce7bbefec3fae84ce1b0f1ef5c29f89b163fde2e",
          "message": "Update PlatformNegotiation.cs",
          "committedDate": "2022-10-31T15:32:29Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bddfdd7394f34ebb4faf060fab5609081935bc6a",
          "message": "Update PlatformNegotiation.cs",
          "committedDate": "2022-10-31T19:30:52Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "10411fba1f0b63bfc3f1ac230643eb17e338841b",
          "message": "Update GetCompatiblePlatform_Tests.cs",
          "committedDate": "2022-10-31T19:39:05Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5399d4e82df4896a93888fd49c9c6ffec5fbe30a",
          "message": "Update PlatformNegotiation.cs",
          "committedDate": "2022-10-31T20:56:59Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "13c2d6da6064779e437310235c262fbf6119bd5f",
          "message": "Update PlatformNegotiation.cs",
          "committedDate": "2022-10-31T20:57:36Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3585e394a65a18bef341328005ad308014e4f33f",
          "message": "Update PlatformNegotiation.cs",
          "committedDate": "2022-10-31T20:57:59Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9c95d965e05c5957a4e05f3219777853f029e413",
          "message": "Update PlatformNegotiation.cs",
          "committedDate": "2022-10-31T20:59:07Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5a044776e9da0651168067e3a17d78b4939d4d33",
          "message": "Update PlatformNegotiation.cs",
          "committedDate": "2022-10-31T20:59:24Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cc5f49813f2eb0a576dd47a8fe43d20c16a6643d",
          "message": "Update src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs\n\nCo-authored-by: Ben Villalobos <4691428+BenVillalobos@users.noreply.github.com>",
          "committedDate": "2022-10-31T20:59:35Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "46f9ae474480a2a8cfba641c94006dd4b38e27bc",
          "message": "Update src/Shared/PlatformNegotiation.cs\n\nCo-authored-by: Ben Villalobos <4691428+BenVillalobos@users.noreply.github.com>",
          "committedDate": "2022-10-31T21:00:05Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a3577f194f0e0fcf35b3a5ba8af74a00e1c1ce4b",
          "message": "Update src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs\n\nCo-authored-by: Ben Villalobos <4691428+BenVillalobos@users.noreply.github.com>",
          "committedDate": "2022-10-31T21:00:56Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5f28530990f9d3a205c3b63012868159a795d596",
          "message": "Update GetCompatiblePlatform_Tests.cs",
          "committedDate": "2022-10-31T21:04:19Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Also needs a test \ud83d\ude01 ",
        "createdAt": "2022-10-31T19:03:27Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "We should keep this part of the logic the same.\r\n\r\nContext: Michael considered making this just set `buildProjectReferenceAs` and catching it with the \"catch all\" if statement below. I think it's important to preserve the logic that existed before, since there's no meaningful difference here.",
              "createdAt": "2022-10-31T18:57:54Z",
              "path": "src/Shared/PlatformNegotiation.cs",
              "diffHunk": "@@ -35,12 +35,9 @@ internal static string GetNearestPlatform(string referencedProjectPlatform, stri\n                 }\n \n                 string buildProjectReferenceAs = string.Empty;\n-\n-                // If the referenced project has a defined `Platform` that's compatible, it will build that way by default.\n-                // Don't set `buildProjectReferenceAs` and the `_GetProjectReferencePlatformProperties` target will handle the rest.\n                 if (!string.IsNullOrEmpty(referencedProjectPlatform) && referencedProjectPlatform.Equals(currentProjectPlatform, StringComparison.OrdinalIgnoreCase))\n                 {\n-                    log?.LogMessageFromResources(MessageImportance.Low, \"GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform\", projectPath, referencedProjectPlatform);\n+                    buildProjectReferenceAs = currentProjectPlatform;",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "reverted",
              "createdAt": "2022-10-31T19:31:18Z",
              "path": "src/Shared/PlatformNegotiation.cs",
              "diffHunk": "@@ -35,12 +35,9 @@ internal static string GetNearestPlatform(string referencedProjectPlatform, stri\n                 }\n \n                 string buildProjectReferenceAs = string.Empty;\n-\n-                // If the referenced project has a defined `Platform` that's compatible, it will build that way by default.\n-                // Don't set `buildProjectReferenceAs` and the `_GetProjectReferencePlatformProperties` target will handle the rest.\n                 if (!string.IsNullOrEmpty(referencedProjectPlatform) && referencedProjectPlatform.Equals(currentProjectPlatform, StringComparison.OrdinalIgnoreCase))\n                 {\n-                    log?.LogMessageFromResources(MessageImportance.Low, \"GetCompatiblePlatform.ReferencedProjectHasDefinitivePlatform\", projectPath, referencedProjectPlatform);\n+                    buildProjectReferenceAs = currentProjectPlatform;",
              "author": {
                "login": "MIchaelRShea"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Context: This if statement translates to \"Are we about to tell the referenced project to build using its default? Then don't.\" It's a catch-all check that gets around the other ways in which users could end up in this situation.",
              "createdAt": "2022-10-31T18:59:53Z",
              "path": "src/Shared/PlatformNegotiation.cs",
              "diffHunk": "@@ -77,6 +74,13 @@ internal static string GetNearestPlatform(string referencedProjectPlatform, stri\n                     // Platform/PlatformTarget when this is the case.\n                     log?.LogWarningWithCodeFromResources(\"GetCompatiblePlatform.NoCompatiblePlatformFound\", projectPath);\n                 }\n+                // If the referenced project has a defined `Platform` that's compatible, it will build that way by default.\n+                // Don't set `buildProjectReferenceAs` and the `_GetProjectReferencePlatformProperties` target will handle the rest.\n+                if (!string.IsNullOrEmpty(referencedProjectPlatform) && referencedProjectPlatform.Equals(buildProjectReferenceAs, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "imo leave this comment here.",
              "createdAt": "2022-10-31T20:41:55Z",
              "path": "src/Shared/PlatformNegotiation.cs",
              "diffHunk": "@@ -35,9 +35,6 @@ internal static string GetNearestPlatform(string referencedProjectPlatform, stri\n                 }\n \n                 string buildProjectReferenceAs = string.Empty;\n-\n-                // If the referenced project has a defined `Platform` that's compatible, it will build that way by default.",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                // If we're about to tell the reference to build using its default platform, don't pass it as a global property.\r\n```",
              "createdAt": "2022-10-31T20:44:51Z",
              "path": "src/Shared/PlatformNegotiation.cs",
              "diffHunk": "@@ -77,6 +74,13 @@ internal static string GetNearestPlatform(string referencedProjectPlatform, stri\n                     // Platform/PlatformTarget when this is the case.\n                     log?.LogWarningWithCodeFromResources(\"GetCompatiblePlatform.NoCompatiblePlatformFound\", projectPath);\n                 }\n+                // If the referenced project has a defined `Platform` that's compatible, it will build that way by default.\n+                // Don't set `buildProjectReferenceAs` and the `_GetProjectReferencePlatformProperties` target will handle the rest.",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n```",
              "createdAt": "2022-10-31T20:47:01Z",
              "path": "src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs",
              "diffHunk": "@@ -226,5 +226,30 @@ public void PlatformIsChosenAsDefault(string referencedPlatforms, string referen\n             task.AssignedProjectsWithPlatform[0].GetMetadata(\"NearestPlatform\").ShouldBe(string.Empty);\n             task.Log.HasLoggedErrors.ShouldBeFalse();\n         }\n+        \n+        // When `Platform` is retrieved in \"GetTargetFrameworks\" and that platform matches what the task has decided the project should be built as\n+        // through negotiation. build that project _without_ a global property for Platform.\n+        [Fact]\n+        public void ChosenPlatformMatchesDefault()\n+        {\n+            TaskItem projectReference = new TaskItem(\"foo.bar\");\n+            projectReference.SetMetadata(\"Platforms\", \"AnyCPU\");\n+            projectReference.SetMetadata(\"Platform\", \"AnyCPU\");\n+\n+            GetCompatiblePlatform task = new GetCompatiblePlatform()\n+            {\n+                BuildEngine = new MockEngine(_output),\n+                CurrentProjectPlatform = \"x86\",\n+                PlatformLookupTable = \"\", // invalid format\n+                AnnotatedProjects = new TaskItem[] { projectReference },\n+            };\n+\n+            task.Execute().ShouldBeTrue();\n+\n+            // A ProjectReference PlatformLookupTable should take priority, but is thrown away when\n+            // it has an invalid format. The current project's PLT should be the next priority.",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            projectReference.SetMetadata(\"Platforms\", \"AnyCPU;x64\");\r\n```\r\n\r\njust to make sure this includes a \"multiple platforms\" scenario where none match.",
              "createdAt": "2022-10-31T20:47:58Z",
              "path": "src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs",
              "diffHunk": "@@ -226,5 +226,30 @@ public void PlatformIsChosenAsDefault(string referencedPlatforms, string referen\n             task.AssignedProjectsWithPlatform[0].GetMetadata(\"NearestPlatform\").ShouldBe(string.Empty);\n             task.Log.HasLoggedErrors.ShouldBeFalse();\n         }\n+        \n+        // When `Platform` is retrieved in \"GetTargetFrameworks\" and that platform matches what the task has decided the project should be built as\n+        // through negotiation. build that project _without_ a global property for Platform.\n+        [Fact]\n+        public void ChosenPlatformMatchesDefault()\n+        {\n+            TaskItem projectReference = new TaskItem(\"foo.bar\");\n+            projectReference.SetMetadata(\"Platforms\", \"AnyCPU\");",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      }
    ]
  }
}