{
  "number": 6635,
  "title": "Don't schedule proxy builds to inproc node if their configs previously built on oop nodes",
  "body": "### Context\r\nFixes a bug in proxy build scheduling introduced by #6386. If a the BuildRequestConfiguration associated with a proxy request has been built before on an out of proc (oop) node then the scheduler will fail with either one of:\r\n- affinity mismatch error. This happens when the proxy build is assigned to the inproc (inp) node but its configuration is already assigned to an oop node `AND` serving other existing requests, either blocked or running.\r\n- unscheduled requests remain even if there's free oop nodes that can serve them. This happens (as far as I can tell) when the proxy's configuration is already assigned to an oop node (because a previously built non proxy request was assigned there) `AND` there's no other existing requests for that configuration\r\n\r\n### Changes Made\r\nThe fix in this PR is to not assign a proxy build to the inproc node if its configuration was previously assigned to another node.\r\n\r\n### Testing\r\nUnit test that builds projects in parallel with both cache misses and cache hits, thus forcing some configs to build on oop nodes prior to their cache hit proxy builds.\r\n\r\n### Notes\r\nThe bug only affects proxy builds. Does not touch non project cache scenarios, so should be no risk for 16.11",
  "state": "MERGED",
  "createdAt": "2021-06-29T01:23:40Z",
  "updatedAt": "2021-07-01T18:17:54Z",
  "closedAt": "2021-07-01T18:17:54Z",
  "mergedAt": "2021-07-01T18:17:54Z",
  "additions": 140,
  "deletions": 3,
  "changedFiles": 4,
  "headRefName": "fix_inproc_node_optimization",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f957f742dfd372eb6c20020bbd48d575116dac24",
          "message": "Print begin/end messages for cache init and shutdown\n\nHelps with debugging",
          "committedDate": "2021-07-01T16:59:30Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6d33a1ae5ce410a5e92c8e7621c3726cbffeb2b2",
          "message": "Fix problems with inproc node confinement",
          "committedDate": "2021-07-01T16:59:30Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "06677fbb63aabf4d66284ba5f7890f8c8230773e",
          "message": "Comment test",
          "committedDate": "2021-07-01T16:59:30Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "We have passed the loc deadline for 16.11. This looks like a nice improvement but can it be pushed out to 17.0?",
              "createdAt": "2021-06-29T19:12:14Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1353,7 +1353,7 @@\n     <comment>{StrBegin=\"MSB4209: \"}</comment>\n   </data>\n   <data name=\"AffinityConflict\" xml:space=\"preserve\">\n-    <value>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</value>\n+    <value>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yup, I'll cherry-pick it out into a PR to main.",
              "createdAt": "2021-06-29T21:59:54Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1353,7 +1353,7 @@\n     <comment>{StrBegin=\"MSB4209: \"}</comment>\n   </data>\n   <data name=\"AffinityConflict\" xml:space=\"preserve\">\n-    <value>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</value>\n+    <value>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</value>",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should these be localized? Or is this logger just for dev purposes?",
              "createdAt": "2021-06-29T19:13:35Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -413,8 +420,14 @@ public async Task ShutDown()\n             {\n                 SetState(ProjectCacheServiceState.ShutdownStarted);\n \n+                logger.LogMessage(\"Shutting down project cache plugin\", MessageImportance.Low);\n+                var timer = Stopwatch.StartNew();\n+\n                 await _projectCachePlugin.EndBuildAsync(logger, _cancellationToken);\n \n+                timer.Stop();\n+                logger.LogMessage($\"Finished shutting down project cache plugin in {timer.Elapsed.TotalMilliseconds} ms\", MessageImportance.Low);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Eventually, yes, when we move the project cache out of the experimental namespace. But for now it's only internal users seeing it, on debug verbosity. And at some point I want to redo the logging side of the plugin so these strings might even go away.",
              "createdAt": "2021-06-29T22:01:50Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -413,8 +420,14 @@ public async Task ShutDown()\n             {\n                 SetState(ProjectCacheServiceState.ShutdownStarted);\n \n+                logger.LogMessage(\"Shutting down project cache plugin\", MessageImportance.Low);\n+                var timer = Stopwatch.StartNew();\n+\n                 await _projectCachePlugin.EndBuildAsync(logger, _cancellationToken);\n \n+                timer.Stop();\n+                logger.LogMessage($\"Finished shutting down project cache plugin in {timer.Elapsed.TotalMilliseconds} ms\", MessageImportance.Low);",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "A few comments in this method would be nice :) The important part is that you schedule things that hit and things that don't in the same request, with the \"don't\" case first?",
              "createdAt": "2021-06-29T19:20:18Z",
              "path": "src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs",
              "diffHunk": "@@ -1475,6 +1499,90 @@ public void ParallelStressTest(bool useSynchronousLogging, bool disableInprocNod\n             cache.QueryStartStops.Count.ShouldBe(graph.ProjectNodes.Count * 2);\n         }\n \n+        [Fact]\n+        public void ProxyCacheHitsOnPreviousCacheMissesShouldWork()",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}