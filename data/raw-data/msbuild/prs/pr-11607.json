{
  "number": 11607,
  "title": "Update the logic of custom culture support ",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/11446\r\n\r\n### Context\r\nThis PR introduces a configurable approach to MSBuild's custom culture resource handling. It adds property `EnableCustomCulture` that enables custom culture resource generation and a property to exclude specific culture directories from being treated as culture-specific resources.\r\n\r\nAfter this change https://github.com/dotnet/msbuild/pull/11000, MSBuild automatically treats directories with names that look like culture codes as culture-specific resource directories, even when they might be serving a different purpose (e.g., hash-based directories or directories with short technical names that coincidentally match a culture code). This can cause unexpected behavior in build processes and create unwanted resource assemblies.\r\n\r\n### Changes Made\r\nA two-part approach was implemented:\r\n\r\n- Added the `EnableCustomCulture` project property that has to be set as `true` to enable custom culture resource handling. \r\n\r\n- Exclusion Property: Added the `<NonCultureResourceDirectories>` MSBuild property that accepts a semicolon-delimited list of directory names to exclude from custom culture processing, allowing fine-grained control.\r\n\r\n### Testing\r\nManual + added e2e tests.\r\n\r\n### Note \r\n- I removed unused method in test class `GenerateTableWithAssemblyFromTheGlobalLocation`\r\n- Update full bootstrap folder content population for windows core scenarios - add the bits from the latest local VS detected on the machine.\r\n",
  "state": "MERGED",
  "createdAt": "2025-03-19T13:21:02Z",
  "updatedAt": "2025-04-02T16:57:42Z",
  "closedAt": "2025-04-02T16:57:42Z",
  "mergedAt": "2025-04-02T16:57:42Z",
  "additions": 541,
  "deletions": 69,
  "changedFiles": 26,
  "headRefName": "dev/ykovalova/fix_custom_culture",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e51b29f411eb0d132f23a1eff2d74f32d989d632",
          "message": "add feature flag for custom culture",
          "committedDate": "2025-04-01T18:46:30Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a12f91b98686ab50c74c5f285e6ad1d72c479050",
          "message": "add test framework",
          "committedDate": "2025-04-01T18:46:30Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b768170f495f850e753703d707f3000cb3ccb166",
          "message": "cover the flag with tests",
          "committedDate": "2025-04-01T18:46:30Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f4cc1734f4f340fd979164fdf549ef37244fe9a7",
          "message": "exclude the test from core scenarious",
          "committedDate": "2025-04-01T18:46:30Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "24184b64358b645755f1e7475d8d035398724b8f",
          "message": "update test data",
          "committedDate": "2025-04-01T18:46:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0f94c2b435f9bba223a2f6a5ae12f26cb81d4315",
          "message": "undo extra change",
          "committedDate": "2025-04-01T18:46:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1ab77dde13df6064a80ec3f2eb90ac3a8a90d664",
          "message": "add bootstrap full bits population for windows core scenarious",
          "committedDate": "2025-04-01T18:46:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "863babecade756fa15067f7e0c61233f121e041e",
          "message": "fix review comments",
          "committedDate": "2025-04-01T18:46:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "68101aebb52f9317e8e4c511ab9aa82999afe7d3",
          "message": "cleanup the description",
          "committedDate": "2025-04-01T18:46:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a50210ff0c7bc9e188aa4ff66ebcf114c5d22935",
          "message": "substitute MSBUILDENABLECUSTOMCULTURES env var  -> EnableCustomCulture project property",
          "committedDate": "2025-04-01T18:46:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eaa2e608f7f0f0bba3849d3cab66c137be95b49b",
          "message": "bump the version",
          "committedDate": "2025-04-01T18:47:55Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b94e2fb390abdaa90f4c722e5516c4c1fddb9f9c",
          "message": "final tweaks",
          "committedDate": "2025-04-02T15:58:07Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ad9033e2876a2f235bfb4609e107ce3a440e58ad",
          "message": "Merge branch 'dev/ykovalova/fix_custom_culture' of https://github.com/YuliiaKovalova/msbuild into dev/ykovalova/fix_custom_culture",
          "committedDate": "2025-04-02T15:59:08Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2025-03-24T19:52:50Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2025-03-24T19:53:00Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "bootstrap changes were validated here: https://github.com/dotnet/msbuild/pull/11623",
        "createdAt": "2025-03-25T10:52:23Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "the convention is to have traits as non-static field in the singleton Traits class",
              "createdAt": "2025-03-25T10:58:58Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -132,6 +133,10 @@ public Traits()\n \n         public readonly bool InProcNodeDisabled = Environment.GetEnvironmentVariable(\"MSBUILDNOINPROCNODE\") == \"1\";\n \n+        /// <summary>\n+        /// Escape hatch to enable custom cultures recognition.\n+        /// </summary>\n+        public static readonly bool EnableCustomCultures = Environment.GetEnvironmentVariable(\"MSBUILDENABLECUSTOMCULTURES\") == \"1\";",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "thank you for pointing to that, completely missed it",
              "createdAt": "2025-03-25T12:08:51Z",
              "path": "src/Framework/Traits.cs",
              "diffHunk": "@@ -132,6 +133,10 @@ public Traits()\n \n         public readonly bool InProcNodeDisabled = Environment.GetEnvironmentVariable(\"MSBUILDNOINPROCNODE\") == \"1\";\n \n+        /// <summary>\n+        /// Escape hatch to enable custom cultures recognition.\n+        /// </summary>\n+        public static readonly bool EnableCustomCultures = Environment.GetEnvironmentVariable(\"MSBUILDENABLECUSTOMCULTURES\") == \"1\";",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "see comment in Traits, should be Traits.Instance.EnableCustomCultures",
              "createdAt": "2025-03-25T11:01:20Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -970,8 +979,9 @@ private void FindSatellites(\n                     // Is there a candidate satellite in that folder?\n                     string cultureName = Path.GetFileName(subDirectory);\n \n-                    // Custom or unknown cultures can be met as well\n-                    if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14) || CultureInfoCache.IsValidCultureString(cultureName))\n+                    // Custom or unknown cultures can be met only if the feature is enabled and the directory was not added to the exclusion list.\n+                    if ((Traits.EnableCustomCultures && !_nonCultureResourceDirectories.Contains(cultureName))",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: can we use string interpolation",
              "createdAt": "2025-03-25T11:05:27Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1509,7 +1519,10 @@ private void LogInputs()\n             }\n \n             Log.LogMessage(importance, property, \"TargetFrameworkDirectories\");\n-            Log.LogMessage(importance, indent + String.Join(\",\", TargetFrameworkDirectories));\n+            Log.LogMessage(importance, indent + string.Join(\",\", TargetFrameworkDirectories));",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why use powershell for this instead of directly invoking vswhere?",
              "createdAt": "2025-03-25T11:10:35Z",
              "path": "src/MSBuild.Bootstrap.Utils/Tasks/LocateVisualStudioTask.cs",
              "diffHunk": "@@ -0,0 +1,77 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Runtime.InteropServices;\n+using System.Text;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+\n+namespace MSBuild.Bootstrap.Utils.Tasks\n+{\n+    public class LocateVisualStudioTask : ToolTask\n+    {\n+        private readonly StringBuilder _standardOutput = new();\n+\n+        [Output]\n+        public string VsInstallPath { get; set; }\n+\n+        protected override string ToolName => \"powershell.exe\";\n+\n+        protected override string GenerateFullPathToTool() => ToolName;\n+\n+        // vswhere.exe is a tool that allows to detect the installed VS on the machine.\n+        // Local VS bits is a source for MSBuild-dependencies for full framework bootstrap.\n+        protected override string GenerateCommandLineCommands()\n+        {\n+            string script = @\"\n+                $vsWherePath = \"\"${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vswhere.exe\"\"\n+                if (Test-Path $vsWherePath) {\n+                    try {\n+                        $vsPath = & $vsWherePath -latest -property installationPath",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why not the reverse option of configuring which should be included?",
              "createdAt": "2025-03-25T11:12:19Z",
              "path": "documentation/specs/custom-cultures.md",
              "diffHunk": "@@ -0,0 +1,36 @@\n+# MSBuild Custom Cultures Support\n+\n+## Overview\n+\n+The `MSBUILDENABLECUSTOMCULTURES` feature flag provides an opt-in mechanism for handling custom culture-specific resources in MSBuild projects. This feature allows for greater control over which directories are treated as culture-specific resources during the build process.\n+\n+## Purpose\n+\n+In some projects, directory names that match culture name patterns might not actually be culture resources. This can cause issues with resource compilation and deployment. This feature flag enables:\n+\n+1. Control over whether custom culture detection is enabled\n+2. Fine-grained configuration of which directories should be excluded from culture-specific resource processing",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is it worth preserving the current behavior? With the new code we could just always explicitly copy from the VS install.",
              "createdAt": "2025-03-25T11:12:58Z",
              "path": "eng/BootStrapMsBuild.targets",
              "diffHunk": "@@ -63,14 +63,35 @@\n     </ItemGroup>\n   </Target>\n \n+  <!-- The task allows to find VS bits on machine. These files will be used as a source for patching on the top of them. -->\n+  <UsingTask TaskName=\"LocateVisualStudioTask\"\n+             AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\"\n+             TaskFactory=\"RoslynCodeTaskFactory\">\n+    <Task>\n+      <Code Source=\"$(MSBuildThisFileDirectory)..\\src\\MSBuild.Bootstrap.Utils\\Tasks\\LocateVisualStudioTask.cs\" Language=\"cs\" />\n+    </Task>\n+  </UsingTask>\n   <Target Name=\"BootstrapFull\" DependsOnTargets=\"CleanBootstrapFolder;SetBinPaths;GatherNuGetDependencies\">\n+\n+      <!-- MSBuildSdkResolver bits from stage1 if available. The folder is absent if the current runtime if .NET. -->",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Add `-prerelease` so it works on my dev machine please (I don't install released versions of VS--how stale!)",
              "createdAt": "2025-03-25T11:14:28Z",
              "path": "src/MSBuild.Bootstrap.Utils/Tasks/LocateVisualStudioTask.cs",
              "diffHunk": "@@ -0,0 +1,77 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Runtime.InteropServices;\n+using System.Text;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+\n+namespace MSBuild.Bootstrap.Utils.Tasks\n+{\n+    public class LocateVisualStudioTask : ToolTask\n+    {\n+        private readonly StringBuilder _standardOutput = new();\n+\n+        [Output]\n+        public string VsInstallPath { get; set; }\n+\n+        protected override string ToolName => \"powershell.exe\";\n+\n+        protected override string GenerateFullPathToTool() => ToolName;\n+\n+        // vswhere.exe is a tool that allows to detect the installed VS on the machine.\n+        // Local VS bits is a source for MSBuild-dependencies for full framework bootstrap.\n+        protected override string GenerateCommandLineCommands()\n+        {\n+            string script = @\"\n+                $vsWherePath = \"\"${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vswhere.exe\"\"\n+                if (Test-Path $vsWherePath) {\n+                    try {\n+                        $vsPath = & $vsWherePath -latest -property installationPath",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Did you mean set an environment variable without the \"in your project file\"?\r\n\r\nand a dangling colon",
              "createdAt": "2025-03-25T11:14:58Z",
              "path": "documentation/specs/custom-cultures.md",
              "diffHunk": "@@ -0,0 +1,36 @@\n+# MSBuild Custom Cultures Support\n+\n+## Overview\n+\n+The `MSBUILDENABLECUSTOMCULTURES` feature flag provides an opt-in mechanism for handling custom culture-specific resources in MSBuild projects. This feature allows for greater control over which directories are treated as culture-specific resources during the build process.\n+\n+## Purpose\n+\n+In some projects, directory names that match culture name patterns might not actually be culture resources. This can cause issues with resource compilation and deployment. This feature flag enables:\n+\n+1. Control over whether custom culture detection is enabled\n+2. Fine-grained configuration of which directories should be excluded from culture-specific resource processing\n+\n+## Usage\n+\n+### Enabling the Feature\n+\n+To enable the custom cultures feature, set the `MSBUILDENABLECUSTOMCULTURES` environment variable to `1` in your project file:",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we require the managed workload? How should we handle multiple results? Maybe with `-latest`?",
              "createdAt": "2025-03-25T11:15:55Z",
              "path": "src/MSBuild.Bootstrap.Utils/Tasks/LocateVisualStudioTask.cs",
              "diffHunk": "@@ -0,0 +1,77 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Runtime.InteropServices;\n+using System.Text;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+\n+namespace MSBuild.Bootstrap.Utils.Tasks\n+{\n+    public class LocateVisualStudioTask : ToolTask\n+    {\n+        private readonly StringBuilder _standardOutput = new();\n+\n+        [Output]\n+        public string VsInstallPath { get; set; }\n+\n+        protected override string ToolName => \"powershell.exe\";\n+\n+        protected override string GenerateFullPathToTool() => ToolName;\n+\n+        // vswhere.exe is a tool that allows to detect the installed VS on the machine.\n+        // Local VS bits is a source for MSBuild-dependencies for full framework bootstrap.\n+        protected override string GenerateCommandLineCommands()\n+        {\n+            string script = @\"\n+                $vsWherePath = \"\"${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vswhere.exe\"\"\n+                if (Test-Path $vsWherePath) {\n+                    try {\n+                        $vsPath = & $vsWherePath -latest -property installationPath",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "`-latest` param is already there, do you mean something else?",
              "createdAt": "2025-03-25T11:26:21Z",
              "path": "src/MSBuild.Bootstrap.Utils/Tasks/LocateVisualStudioTask.cs",
              "diffHunk": "@@ -0,0 +1,77 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System.Runtime.InteropServices;\n+using System.Text;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Utilities;\n+\n+namespace MSBuild.Bootstrap.Utils.Tasks\n+{\n+    public class LocateVisualStudioTask : ToolTask\n+    {\n+        private readonly StringBuilder _standardOutput = new();\n+\n+        [Output]\n+        public string VsInstallPath { get; set; }\n+\n+        protected override string ToolName => \"powershell.exe\";\n+\n+        protected override string GenerateFullPathToTool() => ToolName;\n+\n+        // vswhere.exe is a tool that allows to detect the installed VS on the machine.\n+        // Local VS bits is a source for MSBuild-dependencies for full framework bootstrap.\n+        protected override string GenerateCommandLineCommands()\n+        {\n+            string script = @\"\n+                $vsWherePath = \"\"${env:ProgramFiles(x86)}\\Microsoft Visual Studio\\Installer\\vswhere.exe\"\"\n+                if (Test-Path $vsWherePath) {\n+                    try {\n+                        $vsPath = & $vsWherePath -latest -property installationPath",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "1. did you mean resource files in those directories?\r\n2. is/should there an option for globbing?\r\n\r\n",
              "createdAt": "2025-03-25T11:17:22Z",
              "path": "documentation/specs/custom-cultures.md",
              "diffHunk": "@@ -0,0 +1,36 @@\n+# MSBuild Custom Cultures Support\n+\n+## Overview\n+\n+The `MSBUILDENABLECUSTOMCULTURES` feature flag provides an opt-in mechanism for handling custom culture-specific resources in MSBuild projects. This feature allows for greater control over which directories are treated as culture-specific resources during the build process.\n+\n+## Purpose\n+\n+In some projects, directory names that match culture name patterns might not actually be culture resources. This can cause issues with resource compilation and deployment. This feature flag enables:\n+\n+1. Control over whether custom culture detection is enabled\n+2. Fine-grained configuration of which directories should be excluded from culture-specific resource processing\n+\n+## Usage\n+\n+### Enabling the Feature\n+\n+To enable the custom cultures feature, set the `MSBUILDENABLECUSTOMCULTURES` environment variable to `1` in your project file:\n+\n+### Excluding Specific Directories\n+\n+When the feature is enabled, you can specify directories that should not be treated as culture-specific resources using the `NonCultureResourceDirectories` property:\n+\n+```xml\n+<PropertyGroup>\n+  <NonCultureResourceDirectories>long;hash;temp</NonCultureResourceDirectories>\n+</PropertyGroup>\n+```\n+\n+In this example, directories named \"long\", \"hash\", or \"temp\" will not be processed as culture-specific resources, even if their names match culture naming patterns.",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "it would be nicer to split the changes of the feature and code improvements, but fine",
              "createdAt": "2025-03-25T11:19:40Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -3269,41 +3269,6 @@ public void ParentAssemblyResolvedFromAForGac()\n             Assert.Equal(reference2.ResolvedSearchPath, parentReferenceFolders[0].Directory);\n         }\n \n-        /// <summary>\n-        /// Generate a fake reference which has been resolved from the gac. We will use it to verify the creation of the exclusion list.\n-        /// </summary>\n-        /// <returns></returns>\n-        private ReferenceTable GenerateTableWithAssemblyFromTheGlobalLocation(string location)",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: string interpolation",
              "createdAt": "2025-03-25T11:21:47Z",
              "path": "src/Tasks/CreateCSharpManifestResourceName.cs",
              "diffHunk": "@@ -103,13 +103,12 @@ internal static string CreateManifestNameImpl(\n             dependentUponFileName = FileUtilities.FixFilePath(dependentUponFileName);\n             Culture.ItemCultureInfo info;\n \n-            if (!string.IsNullOrEmpty(culture) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))\n+            if (!string.IsNullOrEmpty(culture) && Traits.EnableCustomCultures)\n             {\n                 info = new Culture.ItemCultureInfo()\n                 {\n                     culture = culture,\n-                    cultureNeutralFilename =\n-                        embeddedFileName.RemoveLastInstanceOf(\".\" + culture, StringComparison.OrdinalIgnoreCase),\n+                    cultureNeutralFilename = embeddedFileName.RemoveLastInstanceOf(\".\" + culture, StringComparison.OrdinalIgnoreCase),",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: string interpolation",
              "createdAt": "2025-03-25T11:22:17Z",
              "path": "src/Tasks/CreateVisualBasicManifestResourceName.cs",
              "diffHunk": "@@ -102,13 +102,12 @@ internal static string CreateManifestNameImpl(\n             dependentUponFileName = FileUtilities.FixFilePath(dependentUponFileName);\n             Culture.ItemCultureInfo info;\n \n-            if (!string.IsNullOrEmpty(culture) && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))\n+            if (!string.IsNullOrEmpty(culture) && Traits.EnableCustomCultures)\n             {\n                 info = new Culture.ItemCultureInfo()\n                 {\n                     culture = culture,\n-                    cultureNeutralFilename =\n-                        embeddedFileName.RemoveLastInstanceOf(\".\" + culture, StringComparison.OrdinalIgnoreCase)\n+                    cultureNeutralFilename = embeddedFileName.RemoveLastInstanceOf(\".\" + culture, StringComparison.OrdinalIgnoreCase),",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "the point of TestEnvironment is that you don't have to unset",
              "createdAt": "2025-03-25T11:28:26Z",
              "path": "src/Tasks.UnitTests/ResolveAssemblyReference_CustomCultureTests.cs",
              "diffHunk": "@@ -0,0 +1,97 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.UnitTests;\n+using Microsoft.Build.UnitTests.Shared;\n+using Shouldly;\n+using Xunit;\n+\n+namespace Microsoft.Build.Tasks.UnitTests\n+{\n+    /// <summary>\n+    /// Unit tests for the ResolveAssemblyReference task.\n+    /// </summary>\n+    public class ResolveAssemblyReference_CustomCultureTests\n+    {\n+        private static string TestAssetsRootPath { get; } = Path.Combine(\n+            Path.GetDirectoryName(typeof(AddToWin32Manifest_Tests).Assembly.Location) ?? AppContext.BaseDirectory,\n+            \"TestResources\",\n+            \"CustomCulture\");\n+\n+        [WindowsOnlyTheory]\n+        [InlineData(true, \"\", true, true)]\n+        [InlineData(false)]\n+        [InlineData(true, \"yue\", false, true)]\n+        [InlineData(false, \"yue\", false, true)]\n+        [InlineData(true, \"euy\", true)]\n+        [InlineData(true, \"yue;euy\")]\n+        [InlineData(true, \"euy;yue\")]\n+        public void E2EScenarioTests(bool enableCustomCulture, string customCultureExclusions = \"\", bool isYueCultureExpected = false, bool isEuyCultureExpected = false)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                env.SetEnvironmentVariable(\"MSBUILDENABLECUSTOMCULTURES\", enableCustomCulture ? \"1\" : \"\");\n+\n+                // Set up project paths\n+                var testAssetsPath = TestAssetsRootPath;\n+                var solutionFolder = env.CreateFolder();\n+                var solutionPath = solutionFolder.Path;\n+\n+                // Create and configure ProjectB\n+                var projectBName = \"ProjectB.csproj\";\n+                var projBOutputPath = env.CreateFolder().Path;\n+                var projectBFolder = Path.Combine(solutionPath, projectBName);\n+                Directory.CreateDirectory(projectBFolder);\n+                var projBContent = File.ReadAllText(Path.Combine(testAssetsPath, projectBName))\n+                    .Replace(\"OutputPathPlaceholder\", projBOutputPath)\n+                    .Replace(\"NonCultureResourceDirectoriesPlaceholder\", customCultureExclusions);\n+                env.CreateFile(Path.Combine(projectBFolder, projectBName), projBContent);\n+\n+                // Copy ProjectA files to test solution folder\n+                CopyTestAsset(testAssetsPath, \"ProjectA.csproj\", solutionPath);\n+                CopyTestAsset(testAssetsPath, \"Test.resx\", solutionPath);\n+                CopyTestAsset(testAssetsPath, \"Test.yue.resx\", solutionPath);\n+                CopyTestAsset(testAssetsPath, \"Test.euy.resx\", solutionPath);\n+\n+                env.SetCurrentDirectory(projectBFolder);\n+                var output = RunnerUtilities.ExecBootstrapedMSBuild(\"-restore\", out bool buildSucceeded);\n+\n+                buildSucceeded.ShouldBeTrue($\"MSBuild should complete successfully. Build output: {output}\");\n+\n+                var yueCultureResourceDll = Path.Combine(projBOutputPath, \"yue\", \"ProjectA.resources.dll\");\n+                AssertCustomCulture(isYueCultureExpected, \"yue\", yueCultureResourceDll);\n+\n+                var euyCultureResourceDll = Path.Combine(projBOutputPath, \"euy\", \"ProjectA.resources.dll\");\n+                AssertCustomCulture(isEuyCultureExpected, \"euy\", euyCultureResourceDll);\n+\n+                env.SetEnvironmentVariable(\"MSBUILDENABLECUSTOMCULTURES\", \"\");",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd add a sentence about why people want custom cultures in the first place since this is a nontrivial spec.",
              "createdAt": "2025-03-25T11:30:29Z",
              "path": "documentation/specs/custom-cultures.md",
              "diffHunk": "@@ -0,0 +1,36 @@\n+# MSBuild Custom Cultures Support\n+\n+## Overview\n+\n+The `MSBUILDENABLECUSTOMCULTURES` feature flag provides an opt-in mechanism for handling custom culture-specific resources in MSBuild projects. This feature allows for greater control over which directories are treated as culture-specific resources during the build process.\n+\n+## Purpose",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "I included it in Purpose section. \r\nIf you mean something else please clarify it :)",
              "createdAt": "2025-03-25T12:06:18Z",
              "path": "documentation/specs/custom-cultures.md",
              "diffHunk": "@@ -0,0 +1,36 @@\n+# MSBuild Custom Cultures Support\n+\n+## Overview\n+\n+The `MSBUILDENABLECUSTOMCULTURES` feature flag provides an opt-in mechanism for handling custom culture-specific resources in MSBuild projects. This feature allows for greater control over which directories are treated as culture-specific resources during the build process.\n+\n+## Purpose",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "is there a reason this had to be in this PR?",
              "createdAt": "2025-03-25T11:32:33Z",
              "path": "eng/BootStrapMsBuild.targets",
              "diffHunk": "@@ -63,14 +63,35 @@\n     </ItemGroup>\n   </Target>\n \n+  <!-- The task allows to find VS bits on machine. These files will be used as a source for patching on the top of them. -->",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "otherwise, the e2e tests are failing on windows core run \r\n",
              "createdAt": "2025-03-25T11:35:58Z",
              "path": "eng/BootStrapMsBuild.targets",
              "diffHunk": "@@ -63,14 +63,35 @@\n     </ItemGroup>\n   </Target>\n \n+  <!-- The task allows to find VS bits on machine. These files will be used as a source for patching on the top of them. -->",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Ideally it'd be separated into its own commit, at least. It's a great change but definitely not core to the culture fix.",
              "createdAt": "2025-04-01T13:34:09Z",
              "path": "eng/BootStrapMsBuild.targets",
              "diffHunk": "@@ -63,14 +63,35 @@\n     </ItemGroup>\n   </Target>\n \n+  <!-- The task allows to find VS bits on machine. These files will be used as a source for patching on the top of them. -->",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "not needed",
              "createdAt": "2025-03-25T11:34:05Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -148,6 +149,8 @@ void AssertHasResourceForCulture(string culture, bool isResourceExpected)\n                     $\"Unexpected resource for culture {culture} was found in deps.json:{Environment.NewLine}{output.DepsJsonResources.ToString()}\");\n             }\n         }\n+\n+        _env.SetEnvironmentVariable(\"MSBUILDENABLECUSTOMCULTURES\", \"\");",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "Here I am not sure,since _env is created per test class. lets check",
              "createdAt": "2025-03-25T11:55:18Z",
              "path": "src/BuildCheck.UnitTests/EndToEndTests.cs",
              "diffHunk": "@@ -148,6 +149,8 @@ void AssertHasResourceForCulture(string culture, bool isResourceExpected)\n                     $\"Unexpected resource for culture {culture} was found in deps.json:{Environment.NewLine}{output.DepsJsonResources.ToString()}\");\n             }\n         }\n+\n+        _env.SetEnvironmentVariable(\"MSBUILDENABLECUSTOMCULTURES\", \"\");",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Must this be an environment variable? Could it be a per-project property instead?",
              "createdAt": "2025-03-25T13:34:42Z",
              "path": "documentation/specs/custom-cultures.md",
              "diffHunk": "@@ -0,0 +1,36 @@\n+# MSBuild Custom Cultures Support\n+\n+## Overview\n+\n+The `MSBUILDENABLECUSTOMCULTURES` feature flag provides an opt-in mechanism for handling custom culture-specific resources in MSBuild projects. This feature allows for greater control over which directories are treated as culture-specific resources during the build process.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd prefer to leave this in but crossed out or something to indicate that it was there for 17.13.",
              "createdAt": "2025-04-01T13:33:27Z",
              "path": "documentation/wiki/ChangeWaves.md",
              "diffHunk": "@@ -26,7 +26,6 @@ A wave of features is set to \"rotate out\" (i.e. become standard functionality) t\n \n ### 17.14\n - ~[.SLNX support - use the new parser for .sln and .slnx](https://github.com/dotnet/msbuild/pull/10836)~ reverted after compat problems discovered\n-- [Support custom culture in RAR](https://github.com/dotnet/msbuild/pull/11000)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Shouldn't these work everywhere?",
              "createdAt": "2025-04-01T13:37:02Z",
              "path": "src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj",
              "diffHunk": "@@ -135,6 +138,7 @@\n     <Compile Remove=\"VisualBasicParserUtilitites_Tests.cs\" />\n     <Compile Remove=\"VisualBasicTokenizer_Tests.cs\" />\n     <Compile Remove=\"WinMDExp_Tests.cs\" />\n+    <Compile Remove=\"ResolveAssemblyReference_CustomCultureTests.cs\" />",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this not also need the opt-out list?",
              "createdAt": "2025-04-02T15:41:33Z",
              "path": "src/Tasks/Microsoft.CSharp.CurrentVersion.targets",
              "diffHunk": "@@ -100,6 +100,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n         <CreateCSharpManifestResourceName\n               ResourceFiles=\"@(EmbeddedResource)\"\n               RootNamespace=\"$(RootNamespace)\"\n+              EnableCustomCulture=\"$(EnableCustomCulture)\"",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "without passing `EnableCustomCulture` explicitly it won't be possible to control custom culture feature - it was also modified in scope of https://github.com/dotnet/msbuild/issues/11446",
              "createdAt": "2025-04-02T15:57:52Z",
              "path": "src/Tasks/Microsoft.CSharp.CurrentVersion.targets",
              "diffHunk": "@@ -100,6 +100,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n         <CreateCSharpManifestResourceName\n               ResourceFiles=\"@(EmbeddedResource)\"\n               RootNamespace=\"$(RootNamespace)\"\n+              EnableCustomCulture=\"$(EnableCustomCulture)\"",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "As a rule, it's better to just let the file operation fail than to check existence first--it's a TOCTOU problem. In a test not a big deal though.",
              "createdAt": "2025-04-02T15:45:07Z",
              "path": "src/Tasks.UnitTests/ResolveAssemblyReference_CustomCultureTests.cs",
              "diffHunk": "@@ -0,0 +1,94 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using Microsoft.Build.UnitTests;\n+using Microsoft.Build.UnitTests.Shared;\n+using Shouldly;\n+using Xunit;\n+\n+namespace Microsoft.Build.Tasks.UnitTests\n+{\n+    /// <summary>\n+    /// Unit tests for the ResolveAssemblyReference task.\n+    /// </summary>\n+    public class ResolveAssemblyReference_CustomCultureTests\n+    {\n+        private static string TestAssetsRootPath { get; } = Path.Combine(\n+            Path.GetDirectoryName(typeof(AddToWin32Manifest_Tests).Assembly.Location) ?? AppContext.BaseDirectory,\n+            \"TestResources\",\n+            \"CustomCulture\");\n+\n+        [WindowsOnlyTheory]\n+        [InlineData(true, \"\", true, true)]\n+        [InlineData(false)]\n+        [InlineData(true, \"yue\", false, true)]\n+        [InlineData(false, \"yue\", false, true)]\n+        [InlineData(true, \"euy\", true)]\n+        [InlineData(true, \"yue;euy\")]\n+        [InlineData(true, \"euy;yue\")]\n+        public void E2EScenarioTests(bool enableCustomCulture, string customCultureExclusions = \"\", bool isYueCultureExpected = false, bool isEuyCultureExpected = false)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create())\n+            {\n+                // Set up project paths\n+                var testAssetsPath = TestAssetsRootPath;\n+                var solutionFolder = env.CreateFolder();\n+                var solutionPath = solutionFolder.Path;\n+\n+                // Create and configure ProjectB\n+                var projectBName = \"ProjectB.csproj\";\n+                var projBOutputPath = env.CreateFolder().Path;\n+                var projectBFolder = Path.Combine(solutionPath, projectBName);\n+                Directory.CreateDirectory(projectBFolder);\n+                var projBContent = File.ReadAllText(Path.Combine(testAssetsPath, projectBName))\n+                    .Replace(\"OutputPathPlaceholder\", projBOutputPath)\n+                    .Replace(\"NonCultureResourceDirectoriesPlaceholder\", customCultureExclusions)\n+                    .Replace(\"EnableCustomCulturePlaceholder\", enableCustomCulture.ToString());\n+                env.CreateFile(Path.Combine(projectBFolder, projectBName), projBContent);\n+\n+                // Copy ProjectA files to test solution folder\n+                CopyTestAsset(testAssetsPath, \"ProjectA.csproj\", solutionPath);\n+                CopyTestAsset(testAssetsPath, \"Test.resx\", solutionPath);\n+                CopyTestAsset(testAssetsPath, \"Test.yue.resx\", solutionPath);\n+                CopyTestAsset(testAssetsPath, \"Test.euy.resx\", solutionPath);\n+\n+                env.SetCurrentDirectory(projectBFolder);\n+                var output = RunnerUtilities.ExecBootstrapedMSBuild(\"-restore\", out bool buildSucceeded);\n+\n+                buildSucceeded.ShouldBeTrue($\"MSBuild should complete successfully. Build output: {output}\");\n+\n+                var yueCultureResourceDll = Path.Combine(projBOutputPath, \"yue\", \"ProjectA.resources.dll\");\n+                AssertCustomCulture(isYueCultureExpected, \"yue\", yueCultureResourceDll);\n+\n+                var euyCultureResourceDll = Path.Combine(projBOutputPath, \"euy\", \"ProjectA.resources.dll\");\n+                AssertCustomCulture(isEuyCultureExpected, \"euy\", euyCultureResourceDll);\n+            }\n+\n+            void AssertCustomCulture(bool isCultureExpectedToExist, string customCultureName, string cultureResourcePath)\n+            {\n+                if (enableCustomCulture && isCultureExpectedToExist)\n+                {\n+                    File.Exists(cultureResourcePath).ShouldBeTrue($\"Expected '{customCultureName}' resource DLL not found at: {cultureResourcePath}\");\n+                }\n+                else\n+                {\n+                    File.Exists(cultureResourcePath).ShouldBeFalse($\"Unexpected '{customCultureName}' culture DLL was found at: {cultureResourcePath}\");\n+                }\n+            }\n+        }\n+\n+        private void CopyTestAsset(string sourceFolder, string fileName, string destinationFolder)\n+        {\n+            var sourcePath = Path.Combine(sourceFolder, fileName);\n+\n+            if (!File.Exists(sourcePath))\n+            {\n+                throw new FileNotFoundException($\"Test asset not found: {sourcePath}\");\n+            }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}