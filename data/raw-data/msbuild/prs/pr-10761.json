{
  "number": 10761,
  "title": "Expose API for imported projects checks",
  "body": "Related to #10605\r\n\r\nIn this PR, the following changes are implemented:\r\n\r\nExpose API for writing custom checks for imported projects.\r\nMake CheckScopeClassifier functionality public.\r\nPublish ElementLocation.Create method to be used outside of MSBuild.\r\nFix issue in custom check template (embedding 3rd party references in the package).",
  "state": "MERGED",
  "createdAt": "2024-10-07T10:48:04Z",
  "updatedAt": "2024-10-19T08:32:33Z",
  "closedAt": "2024-10-19T08:32:33Z",
  "mergedAt": "2024-10-19T08:32:33Z",
  "additions": 188,
  "deletions": 89,
  "changedFiles": 15,
  "headRefName": "dev/ykovalova/custom_check",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6d20978a7dc9c5407f0d6e7cfad9f1a397daf222",
          "message": "expose ProjectImported event in BuildCheck",
          "committedDate": "2024-10-03T13:13:54Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d8c8b69e203e4b7db52636118f4d2daf7f1a022d",
          "message": "expose scoping and ElementLocation.Create",
          "committedDate": "2024-10-07T11:04:13Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "12981aafd4457d053120717518770aaf937cad55",
          "message": "cleanup",
          "committedDate": "2024-10-07T11:24:28Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "02fbe006fe270e497b093391f417f2c453e24f38",
          "message": "update compat suppressions",
          "committedDate": "2024-10-07T12:17:26Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d8507adbff3db609504da1877e77c8721cb2fa88",
          "message": "Merge branch 'main' into dev/ykovalova/custom_check",
          "committedDate": "2024-10-07T14:19:03Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7bfb0ea99fe9999884fba2eaf25d0716583b5082",
          "message": "Merge remote-tracking branch 'origin/main' into dev/ykovalova/custom_check",
          "committedDate": "2024-10-08T13:56:55Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "56ce235ab502b87b0cf7741e7bfd47c164aa5590",
          "message": "use evalid",
          "committedDate": "2024-10-09T09:45:50Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9a0b89a8763413868ef07922d501fe11268706cf",
          "message": "fix review comment",
          "committedDate": "2024-10-09T15:11:47Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "64f2b14f30540266b78db49c0a0bac341f73fb20",
          "message": "expose IsScopingReady",
          "committedDate": "2024-10-09T15:20:16Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eb74f9de8b12e5158ce44d6d4e21d502c3c7766a",
          "message": "Merge remote-tracking branch 'origin/main' into dev/ykovalova/custom_check",
          "committedDate": "2024-10-09T16:01:45Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0329025acbabbad79ef80a88c41695bd6a193810",
          "message": "fix review comments",
          "committedDate": "2024-10-15T15:02:04Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "26874472454914f5569a3c49aa8e3b634997be6c",
          "message": "rename the property",
          "committedDate": "2024-10-15T16:24:29Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems to change our public API, is this an ok change?",
              "createdAt": "2024-10-07T14:50:44Z",
              "path": "src/Build/ElementLocation/ElementLocation.cs",
              "diffHunk": "@@ -185,19 +185,16 @@ internal static ElementLocation Create(string file)\n         /// In AG there are 600 locations that have a file but zero line and column.\n         /// In theory yet another derived class could be made for these to save 4 bytes each.\n         /// </remarks>\n-        internal static ElementLocation Create(string file, int line, int column)",
              "author": {
                "login": "maridematte"
              }
            },
            {
              "body": "Good to be cautious!\r\nThough this is pretty low risk to expose, while helpful to check authors",
              "createdAt": "2024-10-07T16:29:01Z",
              "path": "src/Build/ElementLocation/ElementLocation.cs",
              "diffHunk": "@@ -185,19 +185,16 @@ internal static ElementLocation Create(string file)\n         /// In AG there are 600 locations that have a file but zero line and column.\n         /// In theory yet another derived class could be made for these to save 4 bytes each.\n         /// </remarks>\n-        internal static ElementLocation Create(string file, int line, int column)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This all makes sense, though I was wondering whether we can benefit from following:\r\n* We know that BuildEventArgs are received single-threaded\r\n* We already have mapping of evaluationId --> project name (`_projectsByEvaluationId`)\r\n* All `ProjectImportedEventArgs` of interest should have `BuildEventContext.EvaluationId` populated.\r\n\r\nApart from that - I'm wondering whether there might be API consuming cases where order of imports was important (e.g. a theoretical custom check validating that users do not try to import anything after custom sdk import targets - not to mess with the enforced targets)\r\n\r\n\r\nThat being said - can we consider `Dictionary<id, List<string>>` as datastructure for the defered data?",
              "createdAt": "2024-10-07T16:38:00Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -548,6 +575,36 @@ public void StartProjectRequest(ICheckContext checkContext, string projectFullPa\n         }\n \n         private readonly Dictionary<int, List<BuildEventArgs>> _deferredEvalDiagnostics = new();\n+\n+        /// <summary>\n+        /// Propagates a newly imported project file to all projects that import the original project file.\n+        /// This method ensures that if Project A imports Project B, and Project B now imports Project C,\n+        /// then Project A will also show Project C as an import.\n+        /// </summary>\n+        /// <param name=\"originalProjectFile\">The path of the project file that is importing a new project.</param>\n+        /// <param name=\"newImportedProjectFile\">The path of the newly imported project file.</param>\n+        private void PropagateImport(string originalProjectFile, string newImportedProjectFile)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "As an extra points - we know the point in time when custom checks are done subscribing for a particualr project. At that point in time we should as well know if any check is subscribed to ProjectsImported - so we might be able to replay or discard deffered events for particular project at that point of time. And from that time on just directly feed the data to the checks (in case any subscribed).\r\n\r\nBut feel free to not solve as part of this PR if it'd turn more complicated than couple lines of code. (entering a lower priority item for that for future would be still nice though)",
              "createdAt": "2024-10-07T16:40:43Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -548,6 +575,36 @@ public void StartProjectRequest(ICheckContext checkContext, string projectFullPa\n         }\n \n         private readonly Dictionary<int, List<BuildEventArgs>> _deferredEvalDiagnostics = new();\n+\n+        /// <summary>\n+        /// Propagates a newly imported project file to all projects that import the original project file.\n+        /// This method ensures that if Project A imports Project B, and Project B now imports Project C,\n+        /// then Project A will also show Project C as an import.\n+        /// </summary>\n+        /// <param name=\"originalProjectFile\">The path of the project file that is importing a new project.</param>\n+        /// <param name=\"newImportedProjectFile\">The path of the newly imported project file.</param>\n+        private void PropagateImport(string originalProjectFile, string newImportedProjectFile)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This event has BuildEventContext with EvalId - that you can use to attribute the imported file to the particular evaluation.",
              "createdAt": "2024-10-09T10:36:52Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -392,6 +403,16 @@ public void ProcessEnvironmentVariableReadEventArgs(ICheckContext checkContext,\n             }\n         }\n \n+        public void ProcessProjectImportedEventArgs(ICheckContext checkContext, ProjectImportedEventArgs projectImportedEventArgs)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "done",
              "createdAt": "2024-10-09T15:12:07Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -392,6 +403,16 @@ public void ProcessEnvironmentVariableReadEventArgs(ICheckContext checkContext,\n             }\n         }\n \n+        public void ProcessProjectImportedEventArgs(ICheckContext checkContext, ProjectImportedEventArgs projectImportedEventArgs)",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n    public string ImportedProjectFilePath { get; }\r\n```\r\n\r\nBtw. is it a full path?\r\nIt might be helpful to have this as a full path - and then name it so (as it might not be that easy for consumers to properly reconstruct the full path)",
              "createdAt": "2024-10-14T16:39:57Z",
              "path": "src/Build/BuildCheck/OM/ProjectImportedCheckData.cs",
              "diffHunk": "@@ -0,0 +1,14 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using Microsoft.Build.Experimental.BuildCheck;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+public class ProjectImportedCheckData : CheckData\n+{\n+    public ProjectImportedCheckData(string importedProjectFile, string projectFilePath, int? projectConfigurationId)\n+        : base(projectFilePath, projectConfigurationId) => ImportedProjectFile = importedProjectFile;\n+\n+    public string ImportedProjectFile { get; }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Is it guaranteed to be a full path?\r\nIf not - can we make it so?\r\n\r\nIf any of above is yes - please reflect in name (`FullFilePath`)\r\n\r\nIf both are no - please reflect that in comment, plus add suggestion how user can infer that for themselves (I suppose that relative paths would be relative to project dir - which should be path of the DataContext passed into the Check)",
              "createdAt": "2024-10-15T20:09:14Z",
              "path": "src/Build/BuildCheck/OM/ProjectImportedCheckData.cs",
              "diffHunk": "@@ -0,0 +1,14 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using Microsoft.Build.Experimental.BuildCheck;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+public class ProjectImportedCheckData : CheckData\n+{\n+    public ProjectImportedCheckData(string importedProjectFile, string projectFilePath, int? projectConfigurationId)\n+        : base(projectFilePath, projectConfigurationId) => ImportedProjectFile = importedProjectFile;\n+\n+    public string ImportedProjectFile { get; }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "from what I have observed on the check run, only full paths were reported.\r\n@rainersigwald , are you aware of any edge cases ?",
              "createdAt": "2024-10-16T08:57:25Z",
              "path": "src/Build/BuildCheck/OM/ProjectImportedCheckData.cs",
              "diffHunk": "@@ -0,0 +1,14 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using Microsoft.Build.Experimental.BuildCheck;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+public class ProjectImportedCheckData : CheckData\n+{\n+    public ProjectImportedCheckData(string importedProjectFile, string projectFilePath, int? projectConfigurationId)\n+        : base(projectFilePath, projectConfigurationId) => ImportedProjectFile = importedProjectFile;\n+\n+    public string ImportedProjectFile { get; }",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Looking on all the usages of [ProjectImportedEventArgs.ImportedProjectFile.set](https://github.com/dotnet/msbuild/blob/5881e053656bc8aaa890515e5d4318af39f49dc5/src/Framework/ProjectImportedEventArgs.cs#L60) it gets a full path (unless import was skipped - which we should be skipping here anyways)\r\n\r\nSo it can be renamed to `ImportedProjectFileFullPath`",
              "createdAt": "2024-10-18T13:42:55Z",
              "path": "src/Build/BuildCheck/OM/ProjectImportedCheckData.cs",
              "diffHunk": "@@ -0,0 +1,14 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using Microsoft.Build.Experimental.BuildCheck;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+public class ProjectImportedCheckData : CheckData\n+{\n+    public ProjectImportedCheckData(string importedProjectFile, string projectFilePath, int? projectConfigurationId)\n+        : base(projectFilePath, projectConfigurationId) => ImportedProjectFile = importedProjectFile;\n+\n+    public string ImportedProjectFile { get; }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This will need xml doc comment (it's intended to be a public API)\r\n\r\nSame for the public members.",
              "createdAt": "2024-10-14T16:40:38Z",
              "path": "src/Build/BuildCheck/OM/ProjectImportedCheckData.cs",
              "diffHunk": "@@ -0,0 +1,14 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using Microsoft.Build.Experimental.BuildCheck;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+public class ProjectImportedCheckData : CheckData",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should be internal - there is no need for it to be public and it'd limit our freedom to change in future",
              "createdAt": "2024-10-14T16:42:33Z",
              "path": "src/Build/BuildCheck/OM/ProjectImportedCheckData.cs",
              "diffHunk": "@@ -0,0 +1,14 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using Microsoft.Build.Experimental.BuildCheck;\n+\n+namespace Microsoft.Build.Experimental.BuildCheck;\n+\n+public class ProjectImportedCheckData : CheckData\n+{\n+    public ProjectImportedCheckData(string importedProjectFile, string projectFilePath, int? projectConfigurationId)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}