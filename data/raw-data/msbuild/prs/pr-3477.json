{
  "number": 3477,
  "title": "Graceful error on metadata expansion failure",
  "body": "Fixes #3476",
  "state": "MERGED",
  "createdAt": "2018-07-04T18:39:58Z",
  "updatedAt": "2020-12-30T22:52:47Z",
  "closedAt": "2018-07-06T00:12:17Z",
  "mergedAt": "2018-07-06T00:12:17Z",
  "additions": 267,
  "deletions": 77,
  "changedFiles": 19,
  "headRefName": "gracefullErrorOnMetadataFailure",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cd00cd501b9d540527ab2f443681f9c130b291b3",
          "message": "Gracefull build error on direct metadata expansion failure\n\nThis makes evaluation time direct metadata expansion behave the same as metadata expansion from evaluation time item transformations and build time metadata expansions.",
          "committedDate": "2018-07-04T18:37:18Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f80efdc1f1e0d8a1ed39f9e5dc6958ad13ea9384",
          "message": "Avoid enum ToString call\n\nWe need the value of the enum, not its name.",
          "committedDate": "2018-07-04T18:38:55Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "72c3698a731e3370a4d3a3397fa18c8a6a694fda",
          "message": "Do not catch ArgumentException",
          "committedDate": "2018-07-05T17:07:30Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e9497ce7a5236978bd08013a0434828fc86eecb0",
          "message": "Remove comma",
          "committedDate": "2018-07-05T17:09:38Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@dotnet-bot test OSX10.13 Build for CoreCLR",
        "createdAt": "2018-07-04T20:03:59Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@dotnet-bot test Windows_NT Build for Full ",
        "createdAt": "2018-07-05T20:22:22Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "@ccastanedaucf \r\nDecided to just fix it here.",
              "createdAt": "2018-07-04T18:42:29Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -292,7 +292,7 @@ private static string GetFullPath(string path)\n \n                 if (IsPathTooLong(uncheckedFullPath))\n                 {\n-                    string message = ResourceUtilities.FormatString(AssemblyResources.GetString(\"Shared.PathTooLong\"), path, NativeMethodsShared.OSMaxPathLimit);\n+                    string message = ResourceUtilities.FormatString(AssemblyResources.GetString(\"Shared.PathTooLong\"), path, (int)NativeMethodsShared.OSMaxPathLimit);",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this comment guaranteed? Couldn't something we call transitively throw an ArgumentException for some other reason?\r\n\r\nMaybe just do\r\n\r\n```c#\r\ncatch (Exception e) when (e is ArgumentException or e is InvalidOperationException)\r\n```\r\n\r\nto reduce duplication?",
              "createdAt": "2018-07-05T15:24:26Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -695,107 +695,120 @@ private static class MetadataExpander\n             /// <param name=\"metadata\"></param>\n             /// <param name=\"options\"></param>\n             /// <returns>The string with item metadata expanded in-place, escaped.</returns>\n-            internal static string ExpandMetadataLeaveEscaped(string expression, IMetadataTable metadata, ExpanderOptions options)\n+            internal static string ExpandMetadataLeaveEscaped(string expression, IMetadataTable metadata, ExpanderOptions options, IElementLocation elementLocation)\n             {\n-                if (((options & ExpanderOptions.ExpandMetadata) == 0))\n-                {\n-                    return expression;\n-                }\n-\n-                if (expression.Length == 0)\n-                {\n-                    return expression;\n-                }\n-\n-                ErrorUtilities.VerifyThrow(metadata != null, \"Cannot expand metadata without providing metadata\");\n-\n-                // PERF NOTE: Regex matching is expensive, so if the string doesn't contain any item metadata references, just bail\n-                // out -- pre-scanning the string is actually cheaper than running the Regex, even when there are no matches!\n-                if (s_invariantCompareInfo.IndexOf(expression, \"%(\", CompareOptions.Ordinal) == -1)\n+                try\n                 {\n-                    return expression;\n-                }\n+                    if (((options & ExpanderOptions.ExpandMetadata) == 0))\n+                    {\n+                        return expression;\n+                    }\n \n-                string result = null;\n+                    if (expression.Length == 0)\n+                    {\n+                        return expression;\n+                    }\n \n-                if (s_invariantCompareInfo.IndexOf(expression, \"@(\", CompareOptions.Ordinal) == -1)\n-                {\n-                    // if there are no item vectors in the string\n-                    // run a simpler Regex to find item metadata references\n-                    MetadataMatchEvaluator matchEvaluator = new MetadataMatchEvaluator(metadata, options);\n-                    result = RegularExpressions.ItemMetadataPattern.Value.Replace(expression, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));\n-                }\n-                else\n-                {\n-                    List<ExpressionShredder.ItemExpressionCapture> itemVectorExpressions = ExpressionShredder.GetReferencedItemExpressions(expression);\n+                    ErrorUtilities.VerifyThrow(metadata != null, \"Cannot expand metadata without providing metadata\");\n \n-                    // The most common case is where the transform is the whole expression\n-                    // Also if there were no valid item vector expressions found, then go ahead and do the replacement on\n-                    // the whole expression (which is what Orcas did).\n-                    if (itemVectorExpressions != null && itemVectorExpressions.Count == 1 && itemVectorExpressions[0].Value == expression && itemVectorExpressions[0].Separator == null)\n+                    // PERF NOTE: Regex matching is expensive, so if the string doesn't contain any item metadata references, just bail\n+                    // out -- pre-scanning the string is actually cheaper than running the Regex, even when there are no matches!\n+                    if (s_invariantCompareInfo.IndexOf(expression, \"%(\", CompareOptions.Ordinal) == -1)\n                     {\n                         return expression;\n                     }\n \n-                    // otherwise, run the more complex Regex to find item metadata references not contained in transforms\n-                    // With the reuseable string builder, there's no particular need to initialize the length as it will already have grown.\n-                    using (var finalResultBuilder = new ReuseableStringBuilder())\n+                    string result = null;\n+\n+                    if (s_invariantCompareInfo.IndexOf(expression, \"@(\", CompareOptions.Ordinal) == -1)\n                     {\n-                        int start = 0;\n+                        // if there are no item vectors in the string\n+                        // run a simpler Regex to find item metadata references\n                         MetadataMatchEvaluator matchEvaluator = new MetadataMatchEvaluator(metadata, options);\n+                        result = RegularExpressions.ItemMetadataPattern.Value.Replace(expression, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));\n+                    }\n+                    else\n+                    {\n+                        List<ExpressionShredder.ItemExpressionCapture> itemVectorExpressions = ExpressionShredder.GetReferencedItemExpressions(expression);\n \n-                        if (itemVectorExpressions != null)\n+                        // The most common case is where the transform is the whole expression\n+                        // Also if there were no valid item vector expressions found, then go ahead and do the replacement on\n+                        // the whole expression (which is what Orcas did).\n+                        if (itemVectorExpressions != null && itemVectorExpressions.Count == 1 && itemVectorExpressions[0].Value == expression && itemVectorExpressions[0].Separator == null)\n                         {\n-                            // Move over the expression, skipping those that have been recognized as an item vector expression\n-                            // Anything other than an item vector expression we want to expand bare metadata in.\n-                            for (int n = 0; n < itemVectorExpressions.Count; n++)\n+                            return expression;\n+                        }\n+\n+                        // otherwise, run the more complex Regex to find item metadata references not contained in transforms\n+                        // With the reuseable string builder, there's no particular need to initialize the length as it will already have grown.\n+                        using (var finalResultBuilder = new ReuseableStringBuilder())\n+                        {\n+                            int start = 0;\n+                            MetadataMatchEvaluator matchEvaluator = new MetadataMatchEvaluator(metadata, options);\n+\n+                            if (itemVectorExpressions != null)\n                             {\n-                                string vectorExpression = itemVectorExpressions[n].Value;\n+                                // Move over the expression, skipping those that have been recognized as an item vector expression\n+                                // Anything other than an item vector expression we want to expand bare metadata in.\n+                                for (int n = 0; n < itemVectorExpressions.Count; n++)\n+                                {\n+                                    string vectorExpression = itemVectorExpressions[n].Value;\n \n-                                // Extract the part of the expression that appears before the item vector expression\n-                                // e.g. the ABC in ABC@(foo->'%(FullPath)')\n-                                string subExpressionToReplaceIn = expression.Substring(start, itemVectorExpressions[n].Index - start);\n-                                string replacementResult = RegularExpressions.NonTransformItemMetadataPattern.Value.Replace(subExpressionToReplaceIn, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));\n+                                    // Extract the part of the expression that appears before the item vector expression\n+                                    // e.g. the ABC in ABC@(foo->'%(FullPath)')\n+                                    string subExpressionToReplaceIn = expression.Substring(start, itemVectorExpressions[n].Index - start);\n+                                    string replacementResult = RegularExpressions.NonTransformItemMetadataPattern.Value.Replace(subExpressionToReplaceIn, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));\n \n-                                // Append the metadata replacement\n-                                finalResultBuilder.Append(replacementResult);\n+                                    // Append the metadata replacement\n+                                    finalResultBuilder.Append(replacementResult);\n \n-                                // Expand any metadata that appears in the item vector expression's separator\n-                                if (itemVectorExpressions[n].Separator != null)\n-                                {\n-                                    vectorExpression = RegularExpressions.NonTransformItemMetadataPattern.Value.Replace(itemVectorExpressions[n].Value, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata), -1, itemVectorExpressions[n].SeparatorStart);\n-                                }\n+                                    // Expand any metadata that appears in the item vector expression's separator\n+                                    if (itemVectorExpressions[n].Separator != null)\n+                                    {\n+                                        vectorExpression = RegularExpressions.NonTransformItemMetadataPattern.Value.Replace(itemVectorExpressions[n].Value, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata), -1, itemVectorExpressions[n].SeparatorStart);\n+                                    }\n \n-                                // Append the item vector expression as is\n-                                // e.g. the @(foo->'%(FullPath)') in ABC@(foo->'%(FullPath)')\n-                                finalResultBuilder.Append(vectorExpression);\n+                                    // Append the item vector expression as is\n+                                    // e.g. the @(foo->'%(FullPath)') in ABC@(foo->'%(FullPath)')\n+                                    finalResultBuilder.Append(vectorExpression);\n \n-                                // Move onto the next part of the expression that isn't an item vector expression\n-                                start = (itemVectorExpressions[n].Index + itemVectorExpressions[n].Length);\n+                                    // Move onto the next part of the expression that isn't an item vector expression\n+                                    start = (itemVectorExpressions[n].Index + itemVectorExpressions[n].Length);\n+                                }\n                             }\n-                        }\n \n-                        // If there's anything left after the last item vector expression\n-                        // then we need to metadata replace and then append that\n-                        if (start < expression.Length)\n-                        {\n-                            string subExpressionToReplaceIn = expression.Substring(start);\n-                            string replacementResult = RegularExpressions.NonTransformItemMetadataPattern.Value.Replace(subExpressionToReplaceIn, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));\n+                            // If there's anything left after the last item vector expression\n+                            // then we need to metadata replace and then append that\n+                            if (start < expression.Length)\n+                            {\n+                                string subExpressionToReplaceIn = expression.Substring(start);\n+                                string replacementResult = RegularExpressions.NonTransformItemMetadataPattern.Value.Replace(subExpressionToReplaceIn, new MatchEvaluator(matchEvaluator.ExpandSingleMetadata));\n+\n+                                finalResultBuilder.Append(replacementResult);\n+                            }\n \n-                            finalResultBuilder.Append(replacementResult);\n+                            result = OpportunisticIntern.InternableToString(finalResultBuilder);\n                         }\n+                    }\n \n-                        result = OpportunisticIntern.InternableToString(finalResultBuilder);\n+                    // Don't create more strings\n+                    if (String.Equals(result, expression, StringComparison.Ordinal))\n+                    {\n+                        result = expression;\n                     }\n-                }\n \n-                // Don't create more strings\n-                if (String.Equals(result, expression, StringComparison.Ordinal))\n+                    return result;\n+                }\n+                catch (ArgumentException ex) // Blank metadata name",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: comma not necessary here.",
              "createdAt": "2018-07-05T15:25:00Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -146,6 +146,12 @@\n     %(RootDir) to an item-spec that's not a valid path, would result in this error.\n     LOCALIZATION: \"{1}\" is a localized message explaining the problem.</comment>\n   </data>\n+  <data name=\"CannotExpandItemMetadata\" UESanitized=\"false\" Visibility=\"Public\">\n+    <value>MSB4248: Cannot expand metadata in expression \"{0}\". {1}</value>\n+    <comment>{StrBegin=\"MSB4023: \"}UE: This message is shown when metadata cannot be expanded in an expression for some reason e.g. trying to apply\n+    %(RootDir) to an item-spec that's not a valid path, would result in this error.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@rainersigwald \r\nI decided to not catch `ArgumentException` here, since I could not get it failing with blank metadata. Also, this method does a bit more than the other try catch protected places which just compute metadata.",
              "createdAt": "2018-07-05T17:12:49Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -799,10 +799,6 @@ internal static string ExpandMetadataLeaveEscaped(string expression, IMetadataTa\n \n                     return result;\n                 }\n-                catch (ArgumentException ex) // Blank metadata name",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}