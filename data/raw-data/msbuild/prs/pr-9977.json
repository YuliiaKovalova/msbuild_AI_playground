{
  "number": 9977,
  "title": "Analyzers acquisition experience",
  "body": "### Context\r\nThis PR implements acquisition flow for custom analyzers.\r\n\r\nThe process can be described the next way:\r\nA Custom Analyzer library contains a file `Company.AnalyzerTemplate.props`.\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/b764c54c-16f8-4f72-b5fb-03131714ae3a)\r\n\r\nIf this analyzer is referenced from any solution, MSBuild invokes  intrinsic function `RegisterAnalyzer`  during the evaluation. It emits `BuildCheckAcquisitionEventArgs` if the parsed path to custom analyzer is valid.\r\nThis event is handled by `BuildCheckConnectorLogger`: it passes the info to `IBuildCheckManager.ProcessAnalyzerAcquisition`.\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/644f2a9c-fcfc-4fa1-8e07-d16085230879)\r\n\r\n### Tests\r\nManual and unit tests.\r\nI plan to cover e2e scenarios once MSBuild.Build package with BuildCheck infrastructure is available for public reference (it is needed for custom templates). \r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2024-04-08T10:34:59Z",
  "updatedAt": "2024-04-16T09:14:53Z",
  "closedAt": "2024-04-15T18:57:06Z",
  "mergedAt": null,
  "additions": 708,
  "deletions": 166,
  "changedFiles": 37,
  "headRefName": "dev/ykovalova/analyzers_aquisition_experience",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2aeda7e81c185633ebc8ac88a096ca8187281812",
          "message": "init changes",
          "committedDate": "2024-03-26T09:35:52Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e1112bed7b36ef5c8fbad40d979c37e5685c3735",
          "message": "pass logging context to inrinsic function",
          "committedDate": "2024-04-04T18:26:21Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e721c0a0e4a5a6881d283c6acbac5ada686b9e9b",
          "message": "merge",
          "committedDate": "2024-04-04T18:29:27Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "53a7c8bfe7005d04c0f1fe247f9e03d7961f16f4",
          "message": "implement full aquisition flow",
          "committedDate": "2024-04-08T11:15:58Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5dea8dca4572d495074fdd3f2f718e1ad77c6927",
          "message": "merge",
          "committedDate": "2024-04-08T11:18:55Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "06e06d53e2ad55a49fefa4ac02e09105e26f4176",
          "message": "cleanup",
          "committedDate": "2024-04-08T11:23:43Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ab744f6f66c1bf4ea746aca9252498880ee401e8",
          "message": "fix template",
          "committedDate": "2024-04-08T12:13:55Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5b86a3d2f35873805bb9fa7399fd62a1e2b55779",
          "message": "add test coverage",
          "committedDate": "2024-04-09T09:28:55Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b73069ca65dc7fe164dfc5c51f8f2f12cea7df67",
          "message": "cleanup",
          "committedDate": "2024-04-09T09:35:27Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0fdf77f0d690b3425e9f02bf796c9427b0186e14",
          "message": "cleanup",
          "committedDate": "2024-04-09T10:13:31Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8e046562673e2c7e02709ee2fd347532d686882a",
          "message": "merge + fix review comments",
          "committedDate": "2024-04-11T12:10:00Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c7d1b1dc0c8f853fca8fa2d72c98f4a897cd506f",
          "message": "fix test failure",
          "committedDate": "2024-04-11T13:06:52Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "724f1f36c1cf42564269a58dc6154cf99c1d42a3",
          "message": "fix review comments",
          "committedDate": "2024-04-15T08:44:55Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3e0b455bd310c9c8d0d0a7322a0e22bedcbab505",
          "message": "fix review comments",
          "committedDate": "2024-04-15T08:45:04Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "What happens if there are multiple analyzer types within the single library? In such case we should likely support all (so probably `IReadOnlyList<BuildAnalyzerFactory>`?)",
              "createdAt": "2024-04-10T12:06:03Z",
              "path": "src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs",
              "diffHunk": "@@ -2,21 +2,56 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n-using System.Collections.Generic;\n using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BuildCheck.Analyzers;\n+using System.Reflection;\n using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Shared;\n \n-namespace Microsoft.Build.BuildCheck.Acquisition;\n-\n-internal class BuildCheckAcquisitionModule\n+namespace Microsoft.Build.BuildCheck.Acquisition\n {\n-    private static T Construct<T>() where T : new() => new();\n-    public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+    internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule\n     {\n-        // Acquisition module - https://github.com/dotnet/msbuild/issues/9633\n-        return Construct<SharedOutputPathAnalyzer>;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+        /// <summary>\n+        /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory\n+        /// </summary>\n+        private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();\n+#endif\n+\n+        public BuildAnalyzerFactory? CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "need to discuss it offline",
              "createdAt": "2024-04-10T13:32:54Z",
              "path": "src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs",
              "diffHunk": "@@ -2,21 +2,56 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n-using System.Collections.Generic;\n using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BuildCheck.Analyzers;\n+using System.Reflection;\n using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Shared;\n \n-namespace Microsoft.Build.BuildCheck.Acquisition;\n-\n-internal class BuildCheckAcquisitionModule\n+namespace Microsoft.Build.BuildCheck.Acquisition\n {\n-    private static T Construct<T>() where T : new() => new();\n-    public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+    internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule\n     {\n-        // Acquisition module - https://github.com/dotnet/msbuild/issues/9633\n-        return Construct<SharedOutputPathAnalyzer>;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+        /// <summary>\n+        /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory\n+        /// </summary>\n+        private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();\n+#endif\n+\n+        public BuildAnalyzerFactory? CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you propagate logging context here and log an error? (`LoggingContext.LogError`)",
              "createdAt": "2024-04-10T12:11:03Z",
              "path": "src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs",
              "diffHunk": "@@ -2,21 +2,56 @@\n // The .NET Foundation licenses this file to you under the MIT license.\n \n using System;\n-using System.Collections.Generic;\n using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BuildCheck.Analyzers;\n+using System.Reflection;\n using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Shared;\n \n-namespace Microsoft.Build.BuildCheck.Acquisition;\n-\n-internal class BuildCheckAcquisitionModule\n+namespace Microsoft.Build.BuildCheck.Acquisition\n {\n-    private static T Construct<T>() where T : new() => new();\n-    public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+    internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule\n     {\n-        // Acquisition module - https://github.com/dotnet/msbuild/issues/9633\n-        return Construct<SharedOutputPathAnalyzer>;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+        /// <summary>\n+        /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory\n+        /// </summary>\n+        private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();\n+#endif\n+\n+        public BuildAnalyzerFactory? CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+        {\n+            try\n+            {\n+                Assembly? assembly = null;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+                assembly = s_coreClrAssemblyLoader.LoadFromPath(analyzerAcquisitionData.AssemblyPath);\n+#else\n+                assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);\n+#endif\n+\n+                Type? analyzerType = assembly.GetTypes().FirstOrDefault(t => typeof(BuildAnalyzer).IsAssignableFrom(t));\n+\n+                if (analyzerType != null)\n+                {\n+                    return () => Activator.CreateInstance(analyzerType) is not BuildAnalyzer instance\n+                            ? throw new InvalidOperationException($\"Failed to create an instance of type {analyzerType.FullName} as BuildAnalyzer.\")\n+                            : instance;\n+                }\n+            }\n+            catch (ReflectionTypeLoadException ex)\n+            {\n+                if (ex.LoaderExceptions.Length != 0)\n+                {\n+                    foreach (Exception? loaderException in ex.LoaderExceptions)\n+                    {\n+                        // How do we plan to handle these errors?\n+                        Console.WriteLine(loaderException?.Message ?? \"Unknown error occurred.\");",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we keep file scoped namespaces for the whole BuildCheck project?",
              "createdAt": "2024-04-10T12:21:42Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -3,101 +3,107 @@\n \n using System;\n using System.Collections.Generic;\n-using System.Diagnostics;\n using System.Linq;\n using Microsoft.Build.BackEnd.Logging;\n using Microsoft.Build.BuildCheck.Acquisition;\n-using Microsoft.Build.BuildCheck.Logging;\n using Microsoft.Build.Experimental.BuildCheck;\n using Microsoft.Build.Framework;\n \n-namespace Microsoft.Build.BuildCheck.Infrastructure;\n-internal sealed class BuildCheckConnectorLogger(IBuildAnalysisLoggingContextFactory loggingContextFactory, IBuildCheckManager buildCheckManager)\n-    : ILogger\n+namespace Microsoft.Build.BuildCheck.Infrastructure",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Would it be possible to propagate the IBuildCheckManager instead?\r\n\r\nThat way the BuildCheck infra could process the acquisition request event and decide whether to process it within the current node or send the event to the main node. \r\nIn current version we plan to host the custom analyzers only in the main node - but that might get revised in the future",
              "createdAt": "2024-04-10T12:36:25Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -311,6 +311,8 @@ private void FlushFirstValueIfNeeded()\n \n         private readonly IFileSystem _fileSystem;\n \n+        private readonly LoggingContext _loggingContext;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I am not sure if it's a good idea to mention IBuildCheckManager in Expander.\r\n@rainersigwald , what do you think?",
              "createdAt": "2024-04-10T13:31:42Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -311,6 +311,8 @@ private void FlushFirstValueIfNeeded()\n \n         private readonly IFileSystem _fileSystem;\n \n+        private readonly LoggingContext _loggingContext;",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "My request is controversial (at the very least) and your solution satisfies current requirements - so let's defer the discussion until it's relevant.\r\nSorry for confusion!",
              "createdAt": "2024-04-12T08:49:34Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -311,6 +311,8 @@ private void FlushFirstValueIfNeeded()\n \n         private readonly IFileSystem _fileSystem;\n \n+        private readonly LoggingContext _loggingContext;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This file unfortunately needs to be edited manually (to prevent the VS editor to mess with formatting and features that are supported by MSBuild, but not the editor - like conditions)",
              "createdAt": "2024-04-10T12:38:46Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit - the second check seems much cheaper - so it should be frontloaded\r\n\r\n```suggestion\r\n                            if (_loggingContext != null && TryGetArg(args, out string arg0))\r\n```",
              "createdAt": "2024-04-10T13:24:56Z",
              "path": "src/Build/Evaluation/Expander.cs",
              "diffHunk": "@@ -3877,6 +3909,15 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst\n                     }\n                     else if (_receiverType == typeof(IntrinsicFunctions))\n                     {\n+                        if (string.Equals(_methodMethodName, nameof(IntrinsicFunctions.RegisterAnalyzer), StringComparison.OrdinalIgnoreCase))\n+                        {\n+                            if (TryGetArg(args, out string arg0) && _loggingContext != null)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Need to be edited manually",
              "createdAt": "2024-04-10T13:26:16Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This (and the foreach below) will leave to double enumearation and call of `GetTypes`. Let's just replace it with the check of emptiness of the `analyzersFactory` list below. Creation of an empty list has negligable cost compared to the acquisition form single package",
              "createdAt": "2024-04-12T08:43:55Z",
              "path": "src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs",
              "diffHunk": "@@ -4,19 +4,74 @@\n using System;\n using System.Collections.Generic;\n using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BuildCheck.Analyzers;\n+using System.Reflection;\n+using Microsoft.Build.BackEnd.Logging;\n using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n \n-namespace Microsoft.Build.BuildCheck.Acquisition;\n-\n-internal class BuildCheckAcquisitionModule\n+namespace Microsoft.Build.BuildCheck.Acquisition\n {\n-    private static T Construct<T>() where T : new() => new();\n-    public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+    internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule\n     {\n-        // Acquisition module - https://github.com/dotnet/msbuild/issues/9633\n-        return Construct<SharedOutputPathAnalyzer>;\n+        private readonly ILoggingService _loggingService;\n+\n+        internal BuildCheckAcquisitionModule(ILoggingService loggingService)\n+        {\n+            _loggingService = loggingService;\n+        }\n+\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+        /// <summary>\n+        /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory\n+        /// </summary>\n+        private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();\n+#endif\n+\n+        public IEnumerable<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)\n+        {\n+            try\n+            {\n+                Assembly? assembly = null;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+                assembly = s_coreClrAssemblyLoader.LoadFromPath(analyzerAcquisitionData.AssemblyPath);\n+#else\n+                assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);\n+#endif\n+\n+                IEnumerable<Type> analyzerTypes = assembly.GetTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));\n+\n+                if (analyzerTypes.Any())",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Oh - you are returning empty enumerable below - so then you don't even need to check anything here",
              "createdAt": "2024-04-12T08:45:33Z",
              "path": "src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs",
              "diffHunk": "@@ -4,19 +4,74 @@\n using System;\n using System.Collections.Generic;\n using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BuildCheck.Analyzers;\n+using System.Reflection;\n+using Microsoft.Build.BackEnd.Logging;\n using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n \n-namespace Microsoft.Build.BuildCheck.Acquisition;\n-\n-internal class BuildCheckAcquisitionModule\n+namespace Microsoft.Build.BuildCheck.Acquisition\n {\n-    private static T Construct<T>() where T : new() => new();\n-    public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+    internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule\n     {\n-        // Acquisition module - https://github.com/dotnet/msbuild/issues/9633\n-        return Construct<SharedOutputPathAnalyzer>;\n+        private readonly ILoggingService _loggingService;\n+\n+        internal BuildCheckAcquisitionModule(ILoggingService loggingService)\n+        {\n+            _loggingService = loggingService;\n+        }\n+\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+        /// <summary>\n+        /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory\n+        /// </summary>\n+        private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();\n+#endif\n+\n+        public IEnumerable<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)\n+        {\n+            try\n+            {\n+                Assembly? assembly = null;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+                assembly = s_coreClrAssemblyLoader.LoadFromPath(analyzerAcquisitionData.AssemblyPath);\n+#else\n+                assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);\n+#endif\n+\n+                IEnumerable<Type> analyzerTypes = assembly.GetTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));\n+\n+                if (analyzerTypes.Any())",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "NIT: should be plural\r\n\r\n```suggestion\r\n                    var analyzersFactories = new List<BuildAnalyzerFactory>();\r\n```",
              "createdAt": "2024-04-12T08:44:20Z",
              "path": "src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs",
              "diffHunk": "@@ -4,19 +4,74 @@\n using System;\n using System.Collections.Generic;\n using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BuildCheck.Analyzers;\n+using System.Reflection;\n+using Microsoft.Build.BackEnd.Logging;\n using Microsoft.Build.BuildCheck.Infrastructure;\n+using Microsoft.Build.Experimental.BuildCheck;\n+using Microsoft.Build.Framework;\n+using Microsoft.Build.Shared;\n \n-namespace Microsoft.Build.BuildCheck.Acquisition;\n-\n-internal class BuildCheckAcquisitionModule\n+namespace Microsoft.Build.BuildCheck.Acquisition\n {\n-    private static T Construct<T>() where T : new() => new();\n-    public BuildAnalyzerFactory CreateBuildAnalyzerFactory(AnalyzerAcquisitionData analyzerAcquisitionData)\n+    internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule\n     {\n-        // Acquisition module - https://github.com/dotnet/msbuild/issues/9633\n-        return Construct<SharedOutputPathAnalyzer>;\n+        private readonly ILoggingService _loggingService;\n+\n+        internal BuildCheckAcquisitionModule(ILoggingService loggingService)\n+        {\n+            _loggingService = loggingService;\n+        }\n+\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+        /// <summary>\n+        /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory\n+        /// </summary>\n+        private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();\n+#endif\n+\n+        public IEnumerable<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)\n+        {\n+            try\n+            {\n+                Assembly? assembly = null;\n+#if FEATURE_ASSEMBLYLOADCONTEXT\n+                assembly = s_coreClrAssemblyLoader.LoadFromPath(analyzerAcquisitionData.AssemblyPath);\n+#else\n+                assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);\n+#endif\n+\n+                IEnumerable<Type> analyzerTypes = assembly.GetTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));\n+\n+                if (analyzerTypes.Any())\n+                {\n+                    var analyzersFactory = new List<BuildAnalyzerFactory>();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I love this - thanks!",
              "createdAt": "2024-04-12T08:47:03Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs",
              "diffHunk": "@@ -24,70 +37,67 @@ public void Initialize(IEventSource eventSource)\n         eventSource.BuildFinished += EventSource_BuildFinished;\n     }\n \n-    private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n+    public void Shutdown()\n     {\n-        if (e is ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)\n-        {\n-            if (projectEvaluationFinishedEventArgs.ProjectFile?.EndsWith(\".metaproj\") ?? false)\n-            {\n-                return;\n-            }\n-\n-            buildCheckManager.ProcessEvaluationFinishedEventArgs(\n-                loggingContextFactory.CreateLoggingContext(e.BuildEventContext!),\n-                projectEvaluationFinishedEventArgs);\n+    }\n \n-            buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!);\n-        }\n-        else if (e is ProjectEvaluationStartedEventArgs projectEvaluationStartedEventArgs)\n-        {\n-            // Skip autogenerated transient projects (as those are not user projects to be analyzed)\n-            if (projectEvaluationStartedEventArgs.ProjectFile?.EndsWith(\".metaproj\") ?? false)\n-            {\n-                return;\n-            }\n-\n-            buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!,\n-                projectEvaluationStartedEventArgs.ProjectFile!);\n-        }\n-        else if (e is ProjectStartedEventArgs projectStartedEvent)\n+    private void HandleProjectEvaluationFinishedEvent(ProjectEvaluationFinishedEventArgs eventArgs)\n+    {\n+        if (!IsMetaProjFile(eventArgs.ProjectFile))\n         {\n-            buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);\n+            _buildCheckManager.ProcessEvaluationFinishedEventArgs(\n+                _loggingContextFactory.CreateLoggingContext(eventArgs.BuildEventContext!),\n+                eventArgs);\n+\n+            _buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!);\n         }\n-        else if (e is ProjectFinishedEventArgs projectFinishedEventArgs)\n+    }\n+\n+    private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventArgs eventArgs)\n+    {\n+        if (!IsMetaProjFile(eventArgs.ProjectFile))\n         {\n-            buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);\n+            _buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, eventArgs.BuildEventContext!, eventArgs.ProjectFile!);\n         }\n-        else if (e is BuildCheckEventArgs buildCheckBuildEventArgs)\n+    }\n+\n+    private bool IsMetaProjFile(string? projectFile) => !string.IsNullOrEmpty(projectFile) && projectFile!.EndsWith(\".metaproj\", StringComparison.OrdinalIgnoreCase);\n+\n+    private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)\n+    {\n+        if (_eventHandlers.TryGetValue(e.GetType(), out Action<BuildEventArgs>? handler))\n         {\n-            if (buildCheckBuildEventArgs is BuildCheckTracingEventArgs tracingEventArgs)\n-            {\n-                _stats.Merge(tracingEventArgs.TracingData, (span1, span2) => span1 + span2);\n-            }\n-            else if (buildCheckBuildEventArgs is BuildCheckAcquisitionEventArgs acquisitionEventArgs)\n-            {\n-                buildCheckManager.ProcessAnalyzerAcquisition(acquisitionEventArgs.ToAnalyzerAcquisitionData());\n-            }\n+            handler(e);",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: files scoped namespace removed here",
              "createdAt": "2024-04-12T08:48:22Z",
              "path": "src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs",
              "diffHunk": "@@ -3,52 +3,63 @@\n \n using System;\n using System.Collections.Generic;\n-using System.Linq;\n-using System.Text;\n-using System.Threading.Tasks;\n-using Microsoft.Build.BackEnd;\n using Microsoft.Build.BackEnd.Logging;\n using Microsoft.Build.BuildCheck.Acquisition;\n-using Microsoft.Build.BuildCheck.Infrastructure;\n using Microsoft.Build.BuildCheck.Logging;\n using Microsoft.Build.Framework;\n \n-namespace Microsoft.Build.Experimental.BuildCheck;\n-\n-internal enum BuildCheckDataSource\n+namespace Microsoft.Build.Experimental.BuildCheck",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}