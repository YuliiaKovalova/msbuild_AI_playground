{
  "number": 11807,
  "title": "Reduce allocations in PropertyDictionary",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-05-07T22:56:40Z",
  "updatedAt": "2025-05-23T17:58:21Z",
  "closedAt": "2025-05-15T14:22:00Z",
  "mergedAt": "2025-05-15T14:22:00Z",
  "additions": 25,
  "deletions": 6,
  "changedFiles": 1,
  "headRefName": "dev/erarndt/propertyDictionary",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7ea9fcf17182810a0254d42dbc603cfd15d519a0",
          "message": "Reduce allocations in PropertyDictionary",
          "committedDate": "2025-05-07T22:56:14Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cc6d6de516ff7d1c8691ac1b84cd0e5f21da81a0",
          "message": "Avoid extra cast",
          "committedDate": "2025-05-12T21:24:06Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Consider using 'propertiesCollection' for the type check (i.e. 'if (propertiesCollection is RetrievableValuedEntryHashSet<T> hashSet)') to avoid redundant casting of _properties.\n```suggestion\n                if (_properties is RetrievableValuedEntryHashSet<T> hashSet)\n                {\n                    List<TResult> result = new(hashSet.Count);\n\n                    // PERF: Prefer using struct enumerators from the concrete types to avoid allocations.\n                    // RetrievableValuedEntryHashSet implements a struct enumerator.\n```",
              "createdAt": "2025-05-07T22:57:07Z",
              "path": "src/Build/Collections/PropertyDictionary.cs",
              "diffHunk": "@@ -551,19 +551,36 @@ internal void Enumerate(Action<string, string> keyValueCallback)\n \n         internal IEnumerable<TResult> Filter<TResult>(Func<T, bool> filter, Func<T, TResult> selector)\n         {\n-            List<TResult> result = new();\n             lock (_properties)\n             {\n-                foreach (T property in (ICollection<T>)_properties)\n+                ICollection<T> propertiesCollection = (ICollection<T>)_properties;\n+                List<TResult> result = new(propertiesCollection.Count);\n+\n+                // PERF: Prefer using struct enumerators from the concrete types to avoid allocations.\n+                // RetrievableValuedEntryHashSet implements a struct enumerator.\n+                if (_properties is RetrievableValuedEntryHashSet<T> hashSet)\n                 {",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            },
            {
              "body": "This is weird or incomplete I think.\r\nIs there any merit to the idea though?",
              "createdAt": "2025-05-09T12:59:42Z",
              "path": "src/Build/Collections/PropertyDictionary.cs",
              "diffHunk": "@@ -551,19 +551,36 @@ internal void Enumerate(Action<string, string> keyValueCallback)\n \n         internal IEnumerable<TResult> Filter<TResult>(Func<T, bool> filter, Func<T, TResult> selector)\n         {\n-            List<TResult> result = new();\n             lock (_properties)\n             {\n-                foreach (T property in (ICollection<T>)_properties)\n+                ICollection<T> propertiesCollection = (ICollection<T>)_properties;\n+                List<TResult> result = new(propertiesCollection.Count);\n+\n+                // PERF: Prefer using struct enumerators from the concrete types to avoid allocations.\n+                // RetrievableValuedEntryHashSet implements a struct enumerator.\n+                if (_properties is RetrievableValuedEntryHashSet<T> hashSet)\n                 {",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this branch used in practice? Should we add a Debug.Assert or something that it not become hot again?",
              "createdAt": "2025-05-12T18:40:07Z",
              "path": "src/Build/Collections/PropertyDictionary.cs",
              "diffHunk": "@@ -551,19 +551,36 @@ internal void Enumerate(Action<string, string> keyValueCallback)\n \n         internal IEnumerable<TResult> Filter<TResult>(Func<T, bool> filter, Func<T, TResult> selector)\n         {\n-            List<TResult> result = new();\n             lock (_properties)\n             {\n-                foreach (T property in (ICollection<T>)_properties)\n+                ICollection<T> propertiesCollection = (ICollection<T>)_properties;\n+                List<TResult> result = new(propertiesCollection.Count);\n+\n+                // PERF: Prefer using struct enumerators from the concrete types to avoid allocations.\n+                // RetrievableValuedEntryHashSet implements a struct enumerator.\n+                if (_properties is RetrievableValuedEntryHashSet<T> hashSet)\n                 {\n-                    if (filter(property))\n+                    foreach (T property in hashSet)\n                     {\n-                        result.Add(selector(property));\n+                        if (filter(property))\n+                        {\n+                            result.Add(selector(property));\n+                        }\n+                    }\n+                }\n+                else\n+                {\n+                    foreach (T property in propertiesCollection)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I see one path where this would be used. There's one path that passes a `ImmutableValuedElementCollectionConverter` to the constructor which would hit the \"else\" path. I can check on how much that happens.",
              "createdAt": "2025-05-12T21:24:00Z",
              "path": "src/Build/Collections/PropertyDictionary.cs",
              "diffHunk": "@@ -551,19 +551,36 @@ internal void Enumerate(Action<string, string> keyValueCallback)\n \n         internal IEnumerable<TResult> Filter<TResult>(Func<T, bool> filter, Func<T, TResult> selector)\n         {\n-            List<TResult> result = new();\n             lock (_properties)\n             {\n-                foreach (T property in (ICollection<T>)_properties)\n+                ICollection<T> propertiesCollection = (ICollection<T>)_properties;\n+                List<TResult> result = new(propertiesCollection.Count);\n+\n+                // PERF: Prefer using struct enumerators from the concrete types to avoid allocations.\n+                // RetrievableValuedEntryHashSet implements a struct enumerator.\n+                if (_properties is RetrievableValuedEntryHashSet<T> hashSet)\n                 {\n-                    if (filter(property))\n+                    foreach (T property in hashSet)\n                     {\n-                        result.Add(selector(property));\n+                        if (filter(property))\n+                        {\n+                            result.Add(selector(property));\n+                        }\n+                    }\n+                }\n+                else\n+                {\n+                    foreach (T property in propertiesCollection)",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      }
    ]
  }
}