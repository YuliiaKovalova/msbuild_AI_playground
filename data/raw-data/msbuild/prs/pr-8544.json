{
  "number": 8544,
  "title": "Reset internal terminated flag in ToolTask (#8541)",
  "body": "ToolTask uses a private flag `_terminatedTool` to indicate the task execution timed out or cancelled. That flag should be reset on each execution, otherwise the return value of all following executions could be changed.\r\n\r\nFixes https://github.com/dotnet/msbuild/issues/8541\r\n\r\n### Context\r\n\r\nWhen the same ToolTask instance being executed multiple times (by derived classes, for example), the return status of all following executions might be wrong (`false`) if the first execution timed-out or cancelled. Such case may arise if user try to run an external tool with retry and timeout. The problem is the internal `_terminatedTool` flag has not been reset on each execution. Reset that flag on each execution solved the problem.\r\n\r\n### Changes Made\r\n\r\nResets the internal flag `ToolTask._terminatedTool` on each task execution.\r\n\r\n### Testing\r\n\r\nThe following unit test has been added: `Microsoft.Build.UnitTests.ToolTaskThatTimeoutAndRetry`. It has 3 cases that verify no repeated execution, repeated execution with or without timeout. It's the last case that has been fixed, the rest is for regression.\r\n\r\nAll ToolTask unit tests passed.\r\n\r\n### Notes\r\n\r\n- The `Timeout` setting in the unit test might be tricky. On slow hardware you may want to set that to a larger value;\r\n- The unit test needs PowerShell to run, only Windows platform considered.",
  "state": "MERGED",
  "createdAt": "2023-03-08T04:55:45Z",
  "updatedAt": "2023-04-06T08:40:48Z",
  "closedAt": "2023-04-06T08:40:47Z",
  "mergedAt": "2023-04-06T08:40:47Z",
  "additions": 132,
  "deletions": 1,
  "changedFiles": 2,
  "headRefName": "issue8541",
  "isDraft": false,
  "author": {
    "login": "gpwen"
  },
  "milestone": {
    "title": "VS 17.7"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "aab0d9a6b7eb36bd659a6371a14e0091f9134dc8",
          "message": "Reset internal terminated flag in ToolTask (#8541)\n\nToolTask uses a private flag \"_terminatedTool\" to indicate the task\nexecution timed out or cancelled. That flag should be reset on each\nexecution, otherwise the return value of all following executions\ncould be changed.\n\nFixes https://github.com/dotnet/msbuild/issues/8541",
          "committedDate": "2023-03-08T04:38:00Z",
          "author": {
            "name": "Guopeng Wen",
            "email": "guo-peng_wen@keysight.com"
          }
        }
      },
      {
        "commit": {
          "oid": "54538b57f27795f6219a96971dcb10549cb2b9bd",
          "message": "Fix unit tests for #8541 on UNIX-like systems",
          "committedDate": "2023-03-08T06:12:04Z",
          "author": {
            "name": "Guopeng Wen",
            "email": "guo-peng_wen@keysight.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@dotnet-policy-service agree",
        "createdAt": "2023-03-08T05:19:02Z",
        "author": {
          "login": "gpwen"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "In tests the ideal timeouts are infinitely large so they never hit or infinitely small (1ms) so they always hit or will only hit if the test discovers a bug. Is that possible?",
              "createdAt": "2023-03-08T20:27:54Z",
              "path": "src/Utilities.UnitTests/ToolTask_Tests.cs",
              "diffHunk": "@@ -825,5 +825,135 @@ protected override string GenerateCommandLineCommands()\n                 return $\"echo \u0142o\u0142 > {OutputPath}\";\n             }\n         }\n+\n+        /// <summary>\n+        /// Verifies that a ToolTask instance can return correct results when executed multiple times with timeout.\n+        /// </summary>\n+        /// <param name=\"repeats\">Specifies the number of repeats for external command execution.</param>\n+        /// <param name=\"initialDelay\">Delay to generate on the first execution in milliseconds.</param>\n+        /// <param name=\"followupDelay\">Delay to generate on follow-up execution in milliseconds.</param>\n+        /// <param name=\"timeout\">Task timeout in milliseconds.</param>\n+        /// <remarks>\n+        /// These tests execute the same task instance multiple times, which will in turn run a shell command to sleep\n+        /// predefined amount of time. The first execution may time out, but all following ones won't. It is expected\n+        /// that all following executions return success.\n+        /// </remarks>\n+        [Theory]\n+        [InlineData(1, 1, 1, -1)] // Normal case, no repeat.\n+        [InlineData(3, 1, 1, -1)] // Repeat without timeout.\n+        [InlineData(3, 10000, 1, 1000)] // Repeat with timeout.\n+        public void ToolTaskThatTimeoutAndRetry(int repeats, int initialDelay, int followupDelay, int timeout)\n+        {\n+            using var env = TestEnvironment.Create(_output);\n+\n+            // Task under test:\n+            var task = new ToolTaskThatSleeps\n+            {\n+                BuildEngine = new MockEngine(),\n+                InitialDelay = initialDelay,\n+                FollowupDelay = followupDelay,\n+                Timeout = timeout\n+            };\n+\n+            // Execute the same task instance multiple times. The index is one-based.\n+            bool result;\n+            for (int i = 1; i <= repeats; i++)\n+            {\n+                // Execute the task:\n+                result = task.Execute();\n+                task.RepeatCount.ShouldBe(i);\n+\n+                // The first execution may fail (timeout), but all following ones should succeed:",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "Per https://github.com/dotnet/msbuild/pull/8546, the timeout isn't properly used at the moment. We could consider delaying this PR until the other one is in?",
              "createdAt": "2023-03-09T19:37:02Z",
              "path": "src/Utilities.UnitTests/ToolTask_Tests.cs",
              "diffHunk": "@@ -825,5 +825,135 @@ protected override string GenerateCommandLineCommands()\n                 return $\"echo \u0142o\u0142 > {OutputPath}\";\n             }\n         }\n+\n+        /// <summary>\n+        /// Verifies that a ToolTask instance can return correct results when executed multiple times with timeout.\n+        /// </summary>\n+        /// <param name=\"repeats\">Specifies the number of repeats for external command execution.</param>\n+        /// <param name=\"initialDelay\">Delay to generate on the first execution in milliseconds.</param>\n+        /// <param name=\"followupDelay\">Delay to generate on follow-up execution in milliseconds.</param>\n+        /// <param name=\"timeout\">Task timeout in milliseconds.</param>\n+        /// <remarks>\n+        /// These tests execute the same task instance multiple times, which will in turn run a shell command to sleep\n+        /// predefined amount of time. The first execution may time out, but all following ones won't. It is expected\n+        /// that all following executions return success.\n+        /// </remarks>\n+        [Theory]\n+        [InlineData(1, 1, 1, -1)] // Normal case, no repeat.\n+        [InlineData(3, 1, 1, -1)] // Repeat without timeout.\n+        [InlineData(3, 10000, 1, 1000)] // Repeat with timeout.\n+        public void ToolTaskThatTimeoutAndRetry(int repeats, int initialDelay, int followupDelay, int timeout)\n+        {\n+            using var env = TestEnvironment.Create(_output);\n+\n+            // Task under test:\n+            var task = new ToolTaskThatSleeps\n+            {\n+                BuildEngine = new MockEngine(),\n+                InitialDelay = initialDelay,\n+                FollowupDelay = followupDelay,\n+                Timeout = timeout\n+            };\n+\n+            // Execute the same task instance multiple times. The index is one-based.\n+            bool result;\n+            for (int i = 1; i <= repeats; i++)\n+            {\n+                // Execute the task:\n+                result = task.Execute();\n+                task.RepeatCount.ShouldBe(i);\n+\n+                // The first execution may fail (timeout), but all following ones should succeed:",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "> In tests the ideal timeouts are infinitely large so they never hit or infinitely small (1ms) so they always hit or will only hit if the test discovers a bug. Is that possible?\r\n\r\nHi @danmoseley, the test case will run sleep command to create some delay. It's possible to let the command sleep infinitely, it's controlled by XUnit inline parameters. However, if `Timeout` failed when infinite delay is in use, the test will hang forever. So I set that to 10s, with a timeout of 1s, just to be safe. Yes, there's certain possibility that the timeout won't play out as planned. Just some tradeoff.\r\n\r\nDo you think I should set that delay in case 3 to a larger number  (like 1 hour)?\r\n",
              "createdAt": "2023-03-13T06:56:51Z",
              "path": "src/Utilities.UnitTests/ToolTask_Tests.cs",
              "diffHunk": "@@ -825,5 +825,135 @@ protected override string GenerateCommandLineCommands()\n                 return $\"echo \u0142o\u0142 > {OutputPath}\";\n             }\n         }\n+\n+        /// <summary>\n+        /// Verifies that a ToolTask instance can return correct results when executed multiple times with timeout.\n+        /// </summary>\n+        /// <param name=\"repeats\">Specifies the number of repeats for external command execution.</param>\n+        /// <param name=\"initialDelay\">Delay to generate on the first execution in milliseconds.</param>\n+        /// <param name=\"followupDelay\">Delay to generate on follow-up execution in milliseconds.</param>\n+        /// <param name=\"timeout\">Task timeout in milliseconds.</param>\n+        /// <remarks>\n+        /// These tests execute the same task instance multiple times, which will in turn run a shell command to sleep\n+        /// predefined amount of time. The first execution may time out, but all following ones won't. It is expected\n+        /// that all following executions return success.\n+        /// </remarks>\n+        [Theory]\n+        [InlineData(1, 1, 1, -1)] // Normal case, no repeat.\n+        [InlineData(3, 1, 1, -1)] // Repeat without timeout.\n+        [InlineData(3, 10000, 1, 1000)] // Repeat with timeout.\n+        public void ToolTaskThatTimeoutAndRetry(int repeats, int initialDelay, int followupDelay, int timeout)\n+        {\n+            using var env = TestEnvironment.Create(_output);\n+\n+            // Task under test:\n+            var task = new ToolTaskThatSleeps\n+            {\n+                BuildEngine = new MockEngine(),\n+                InitialDelay = initialDelay,\n+                FollowupDelay = followupDelay,\n+                Timeout = timeout\n+            };\n+\n+            // Execute the same task instance multiple times. The index is one-based.\n+            bool result;\n+            for (int i = 1; i <= repeats; i++)\n+            {\n+                // Execute the task:\n+                result = task.Execute();\n+                task.RepeatCount.ShouldBe(i);\n+\n+                // The first execution may fail (timeout), but all following ones should succeed:",
              "author": {
                "login": "gpwen"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are there any other things that need to be reset that currently aren't being reset? I'm wondering if we should move this to a separate \"ResetToolTaskState\" method.",
              "createdAt": "2023-03-09T19:37:59Z",
              "path": "src/Utilities/ToolTask.cs",
              "diffHunk": "@@ -670,6 +670,7 @@ private string GetTemporaryResponseFile(string responseFileCommands, out string\n             _standardOutputDataAvailable = new ManualResetEvent(false);\n \n             _toolExited = new ManualResetEvent(false);\n+            _terminatedTool = false;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I've checked all related working variables (fields), I think all of them should be handled for now.",
              "createdAt": "2023-03-13T06:39:55Z",
              "path": "src/Utilities/ToolTask.cs",
              "diffHunk": "@@ -670,6 +670,7 @@ private string GetTemporaryResponseFile(string responseFileCommands, out string\n             _standardOutputDataAvailable = new ManualResetEvent(false);\n \n             _toolExited = new ManualResetEvent(false);\n+            _terminatedTool = false;",
              "author": {
                "login": "gpwen"
              }
            }
          ]
        }
      }
    ]
  }
}