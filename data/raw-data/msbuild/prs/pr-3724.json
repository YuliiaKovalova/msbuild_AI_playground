{
  "number": 3724,
  "title": "Normalize project variables to on-disk casing",
  "body": "Fixes: #3665",
  "state": "CLOSED",
  "createdAt": "2018-09-08T16:01:17Z",
  "updatedAt": "2022-07-29T18:20:50Z",
  "closedAt": "2019-07-09T20:27:56Z",
  "mergedAt": null,
  "additions": 183,
  "deletions": 13,
  "changedFiles": 7,
  "headRefName": "dfederm/normalize-project-vars",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2f1010e6f585e369e75bffe7a0dc94a8cf740e06",
          "message": "Normalize project variables to on-disk casing\nFixes: #3665",
          "committedDate": "2018-09-15T21:37:02Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Can you also add a unit test with the scenario from the issue? Probably this would be an okay location: https://github.com/Microsoft/msbuild/blob/master/src/MSBuild.UnitTests/XMake_Tests.cs",
        "createdAt": "2018-09-12T01:03:43Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Lol. Yeah I vote we not do this :)\r\n\r\n### DesignTimeBuild Time (ms) (src\\msbuild.A vs src\\msbuild.B)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :red_circle: | yes | 33.9988 -> 199.3014 (486.201%)\r\nDotnetWebProject | :red_circle: | yes | 227.2491 -> 606.4233 (166.854%)\r\nDotnetMvcProject | :red_circle: | yes | 228.7225 -> 655.6336 (186.65%)\r\nPicasso | :red_circle: | yes | 1542.0991 -> 8009.9292 (419.417%)\r\nSmallP2POldCsproj | :red_circle: | yes | 67.0596 -> 173.6884 (159.006%)\r\nSmallP2PNewCsproj | :red_circle: | yes | 640.5074 -> 2459.7474 (284.031%)\r\nLargeP2POldCsproj | :red_circle: | yes | 11146.3004 -> 39012.2625 (250.002%)\r\nOrchardCore | :red_circle: | yes | 47762.8415 -> 140608.7581 (194.389%)\r\n\r\n### SerialEvaluationIsolatedContext Time (ms) (src\\msbuild.A vs src\\msbuild.B)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :red_circle: | yes | 34.9102 -> 69.6064 (99.387%)\r\nDotnetWebProject | :red_circle: | yes | 48.8739 -> 94.6666 (93.696%)\r\nDotnetMvcProject | :red_circle: | yes | 54.2003 -> 123.8895 (128.577%)\r\nPicasso | :red_circle: | yes | 302.1217 -> 898.6334 (197.441%)\r\nSmallP2POldCsproj | :red_circle: | yes | 51.1263 -> 137.6503 (169.236%)\r\nSmallP2PNewCsproj | :red_circle: | yes | 207.6437 -> 677.423 (226.243%)\r\nLargeP2POldCsproj | :red_circle: | yes | 891.4275 -> 3049.2363 (242.062%)\r\nOrchardCore | :red_circle: | yes | 3157.5276 -> 9822.8993 (211.095%)\r\n",
        "createdAt": "2018-09-13T02:09:47Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "@AndyGerlicher can you re-run perf against the latest iteration (or let me know how to run it myself)?\r\n\r\nThe fix has been scoped down to just project creation, specifically `ProjectRootElement` objects. Additionally, I optimized the memory usage to avoid all intermediate allocations.",
        "createdAt": "2018-09-13T04:09:03Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "Hrm, this doesn't seem right, but looks worse overall :(\r\n\r\n### DesignTimeBuild Time (ms) (src\\msbuild.A vs src\\msbuild.B)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :red_circle: | yes | 34.129 -> 34.8025 (1.973%)\r\nDotnetWebProject | ::ok_hand: | no | 229.3353 -> 228.9696 (-0.159%)\r\nDotnetMvcProject | :white_check_mark: | yes | 229.6813 -> 224.9323 (-2.068%)\r\nPicasso | :white_check_mark: | yes | 1525.9054 -> 1503.0639 (-1.497%)\r\nSmallP2POldCsproj | :ok_hand: | no | 66.0226 -> 66.0568 (0.052%)\r\nSmallP2PNewCsproj | :red_circle: | yes | 604.8704 -> 607.4522 (0.427%)\r\nLargeP2POldCsproj | :white_check_mark: | yes | 10747.0191 -> 10709.9469 (-0.345%)\r\nOrchardCore | :red_circle: | yes | 45041.4787 -> 45886.6632 (1.876%)\r\n\r\n### DesignTimeBuild Memory (bytes) (src\\msbuild.A vs src\\msbuild.B)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :red_circle: | yes | 6242814 -> 6256335 (0.217%)\r\nDotnetWebProject | :ok_hand: | no | 21901152 -> 22172261 (1.238%)\r\nDotnetMvcProject | :ok_hand: | no | 20436256 -> 21701164 (6.19%)\r\nPicasso | :ok_hand: | no | 179866097 -> 181552665 (0.938%)\r\nSmallP2POldCsproj | :red_circle: | yes | 8421977 -> 8458339 (0.432%)\r\nSmallP2PNewCsproj | ::ok_hand: | no | 91222850 -> 90268447 (-1.046%)\r\nLargeP2POldCsproj | ::ok_hand: | no | 1086822093 -> 1083530678 (-0.303%)\r\nOrchardCore | :ok_hand: | no | 2648395311 -> 2672128374 (0.896%)\r\n\r\n### SerialEvaluationIsolatedContext Time (ms) (src\\msbuild.A vs src\\msbuild.B)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :red_circle: | yes | 33.4559 -> 51.3587 (53.512%)\r\nDotnetWebProject | :red_circle: | yes | 43.4039 -> 70.5882 (62.631%)\r\nDotnetMvcProject | :red_circle: | yes | 48.7354 -> 76.1919 (56.338%)\r\nPicasso | :red_circle: | yes | 297.9831 -> 301.2034 (1.081%)\r\nSmallP2POldCsproj | :red_circle: | yes | 49.7239 -> 64.6102 (29.938%)\r\nSmallP2PNewCsproj | :red_circle: | yes | 189.5188 -> 217.1218 (14.565%)\r\nLargeP2POldCsproj | :red_circle: | yes | 848.3114 -> 885.2668 (4.356%)\r\nOrchardCore | :red_circle: | yes | 2896.7225 -> 3053.7635 (5.421%)\r\n\r\n### SerialEvaluationIsolatedContext Memory (bytes) (src\\msbuild.A vs src\\msbuild.B)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :red_circle: | yes | 5612608 -> 6094829 (8.592%)\r\nDotnetWebProject | :red_circle: | yes | 7481274 -> 8231017 (10.022%)\r\nDotnetMvcProject | :red_circle: | yes | 8095759 -> 8835759 (9.141%)\r\nPicasso | :red_circle: | yes | 11719731 -> 33957002 (189.742%)\r\nSmallP2POldCsproj | :red_circle: | yes | 6858035 -> 7269903 (6.006%)\r\nSmallP2PNewCsproj | :ok_hand: | no | 14942317 -> 15660155 (4.804%)\r\nLargeP2POldCsproj | :white_check_mark: | yes | 36288231 -> 32211052 (-11.236%)\r\nOrchardCore | :ok_hand: | no | 68402702 -> 69933294 (2.238%)\r\n\r\n### SerialEvaluationSharedContextSecondRun Time (ms) (src\\msbuild.A vs src\\msbuild.B)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :red_circle: | yes | 29.6266 -> 48.2183 (62.753%)\r\nDotnetWebProject | :red_circle: | yes | 36.9215 -> 64.6632 (75.137%)\r\nDotnetMvcProject | :red_circle: | yes | 38.9515 -> 66.6366 (71.076%)\r\nPicasso | :red_circle: | yes | 216.7707 -> 253.992 (17.171%)\r\nSmallP2POldCsproj | :red_circle: | yes | 41.421 -> 55.9925 (35.179%)\r\nSmallP2PNewCsproj | :red_circle: | yes | 127.4281 -> 159.3312 (25.036%)\r\nLargeP2POldCsproj | :red_circle: | yes | 636.6112 -> 670.5884 (5.337%)\r\nGenerated_100_100_v150 | :red_circle: | yes | 1127.9809 -> 1185.4438 (5.094%)\r\nOrchardCore | :red_circle: | yes | 1511.2672 -> 1661.6892 (9.953%)\r\nRoslyn | :red_circle: | yes | 2568.4598 -> 2662.414 (3.658%)\r\nWebLargeCore | :red_circle: | yes | 1778.5988 -> 1957.8178 (10.076%)\r\n\r\n### SerialEvaluationSharedContextSecondRun Memory (bytes) (src\\msbuild.A vs src\\msbuild.B)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :red_circle: | yes | 5518642 -> 6001950 (8.758%)\r\nDotnetWebProject | :red_circle: | yes | 6842304 -> 7595439 (11.007%)\r\nDotnetMvcProject | :red_circle: | yes | 7275896 -> 8021414 (10.246%)\r\nPicasso | :white_check_mark: | yes | 34809220 -> 12045284 (-65.396%)\r\nSmallP2POldCsproj | :red_circle: | yes | 6836965 -> 7238510 (5.873%)\r\nSmallP2PNewCsproj | :red_circle: | yes | 22382594 -> 23139673 (3.382%)\r\nLargeP2POldCsproj | :ok_hand: | no | 30650808 -> 31242068 (1.929%)\r\nGenerated_100_100_v150 | :ok_hand: | no | 42890601 -> 43324302 (1.011%)\r\nOrchardCore | :white_check_mark: | yes | 77034068 -> 59260532 (-23.072%)\r\nRoslyn | :ok_hand: | no | 79417034 -> 80844749 (1.798%)\r\nWebLargeCore | :ok_hand: | no | 65039695 -> 65341196 (0.464%)\r\n\r\n### SerialEvaluationSharedContext Time (ms) (src\\msbuild.A vs src\\msbuild.B)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :red_circle: | yes | 32.605 -> 51.0097 (56.447%)\r\nDotnetWebProject | :red_circle: | yes | 42.5294 -> 70.0966 (64.819%)\r\nDotnetMvcProject | :red_circle: | yes | 48.0004 -> 75.4925 (57.275%)\r\nPicasso | :red_circle: | yes | 244.2632 -> 266.8322 (9.24%)\r\nSmallP2POldCsproj | :red_circle: | yes | 44.6558 -> 59.1504 (32.458%)\r\nSmallP2PNewCsproj | :red_circle: | yes | 155.6483 -> 186.9669 (20.121%)\r\nLargeP2POldCsproj | :red_circle: | yes | 678.1706 -> 716.4437 (5.644%)\r\nGenerated_100_100_v150 | :red_circle: | yes | 1142.7842 -> 1200.5988 (5.059%)\r\nOrchardCore | :red_circle: | yes | 1866.3169 -> 1992.0241 (6.736%)\r\nRoslyn | :red_circle: | yes | 2915.3367 -> 3014.0785 (3.387%)\r\nWebLargeCore | :red_circle: | yes | 2057.6788 -> 2223.7828 (8.072%)\r\n\r\n### SerialEvaluationSharedContext Memory (bytes) (src\\msbuild.A vs src\\msbuild.B)\r\nTest | Overall | Significant \u03b4  | Value\r\n:--- | :--- | :--- | :---\r\nDotnetConsoleProject | :red_circle: | yes | 5682317 -> 6166068 (8.513%)\r\nDotnetWebProject | :red_circle: | yes | 7528013 -> 8288229 (10.098%)\r\nDotnetMvcProject | :red_circle: | yes | 8133669 -> 8883842 (9.223%)\r\nPicasso | :ok_hand: | no | 10230197 -> 10632204 (3.93%)\r\nSmallP2POldCsproj | :red_circle: | yes | 6870250 -> 7279726 (5.96%)\r\nSmallP2PNewCsproj | :red_circle: | yes | 10815026 -> 12258175 (13.344%)\r\nLargeP2POldCsproj | ::ok_hand: | no | 32004309 -> 30196126 (-5.65%)\r\nGenerated_100_100_v150 | :ok_hand: | no | 43915521 -> 44067509 (0.346%)\r\nOrchardCore | ::ok_hand: | no | 66424913 -> 60645570 (-8.701%)\r\nRoslyn | :ok_hand: | no | 82156356 -> 83780540 (1.977%)\r\nWebLargeCore | ::ok_hand: | no | 65936962 -> 62723523 (-4.874%)",
        "createdAt": "2018-09-13T15:53:55Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Team triage: we want this behavior, but we're not willing to pay these performance penalties for it. If we can come up with a faster way we'd love to do it.",
        "createdAt": "2019-07-09T20:27:55Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm a little worried about the perf impact here. There's some I/O here and some allocations.\r\n\r\nPotentially this fix could be scoped down to only be used for normalizing project paths (about a dozen or so distinct locations) instead of **all** path normalization.",
              "createdAt": "2018-09-08T16:12:40Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -393,6 +398,48 @@ private static bool IsUNCPath(string path)\n             return isUNC || path.IndexOf(@\"\\\\?\\globalroot\", StringComparison.OrdinalIgnoreCase) != -1;\n         }\n \n+#if !CLR2COMPATIBILITY\n+        /// <summary>\n+        /// Gets the exact case used on the file system for an existing file or directory.\n+        /// </summary>\n+        /// <param name=\"path\">A relative or absolute path.</param>\n+        /// <returns>The full path using the correct case if the path exists. Otherwise, the full path.</returns>\n+        private static string GetExactPath(string path)",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Yeah, unfortunately I think that's worth doing.",
              "createdAt": "2018-09-10T14:30:05Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -393,6 +398,48 @@ private static bool IsUNCPath(string path)\n             return isUNC || path.IndexOf(@\"\\\\?\\globalroot\", StringComparison.OrdinalIgnoreCase) != -1;\n         }\n \n+#if !CLR2COMPATIBILITY\n+        /// <summary>\n+        /// Gets the exact case used on the file system for an existing file or directory.\n+        /// </summary>\n+        /// <param name=\"path\">A relative or absolute path.</param>\n+        /// <returns>The full path using the correct case if the path exists. Otherwise, the full path.</returns>\n+        private static string GetExactPath(string path)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Considering how many times this method is called, it should be really scoped down. Maybe even scope it down to only apply on command line arguments like the issue suggests? If there's case mismatches in project files that run on case sensitive file systems, I'd be tempted to say it's actually user error.",
              "createdAt": "2018-09-12T01:06:20Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -393,6 +398,48 @@ private static bool IsUNCPath(string path)\n             return isUNC || path.IndexOf(@\"\\\\?\\globalroot\", StringComparison.OrdinalIgnoreCase) != -1;\n         }\n \n+#if !CLR2COMPATIBILITY\n+        /// <summary>\n+        /// Gets the exact case used on the file system for an existing file or directory.\n+        /// </summary>\n+        /// <param name=\"path\">A relative or absolute path.</param>\n+        /// <returns>The full path using the correct case if the path exists. Otherwise, the full path.</returns>\n+        private static string GetExactPath(string path)",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "How about just project files in general? Command-line only seems weird because that means ProjectReferences would not be case-correcting but the command-line would, meaning directly \"msbuild.exe\"ing a project may world while a project reference might not.",
              "createdAt": "2018-09-13T02:22:36Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -393,6 +398,48 @@ private static bool IsUNCPath(string path)\n             return isUNC || path.IndexOf(@\"\\\\?\\globalroot\", StringComparison.OrdinalIgnoreCase) != -1;\n         }\n \n+#if !CLR2COMPATIBILITY\n+        /// <summary>\n+        /// Gets the exact case used on the file system for an existing file or directory.\n+        /// </summary>\n+        /// <param name=\"path\">A relative or absolute path.</param>\n+        /// <returns>The full path using the correct case if the path exists. Otherwise, the full path.</returns>\n+        private static string GetExactPath(string path)",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It's not just windows. APFS and HFS+ are case-insensitive by default, and Linux supports some case-insensitive filesystems (though I don't think we have to care about that too much).",
              "createdAt": "2018-09-10T14:29:04Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -315,9 +315,14 @@ private static bool IsValidRelativePathBound(char? c)\n         /// </summary>\n         internal static string NormalizePath(string path)\n         {\n-\n             ErrorUtilities.VerifyThrowArgumentLength(path, nameof(path));\n+\n+#if CLR2COMPATIBILITY\n             string fullPath = GetFullPath(path);\n+#else\n+            // Windows uses a case-insensitive file system, so we need to get an exact file name from a possibly-differently-cased path.\n+            string fullPath = NativeMethodsShared.IsWindows ? GetExactPath(path) : GetFullPath(path);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Know of any way to detect whether the current FS is case sensitive or not? If there's no way currently, then doing it on windows-only is at least a good start.",
              "createdAt": "2018-09-13T02:03:01Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -315,9 +315,14 @@ private static bool IsValidRelativePathBound(char? c)\n         /// </summary>\n         internal static string NormalizePath(string path)\n         {\n-\n             ErrorUtilities.VerifyThrowArgumentLength(path, nameof(path));\n+\n+#if CLR2COMPATIBILITY\n             string fullPath = GetFullPath(path);\n+#else\n+            // Windows uses a case-insensitive file system, so we need to get an exact file name from a possibly-differently-cased path.\n+            string fullPath = NativeMethodsShared.IsWindows ? GetExactPath(path) : GetFullPath(path);",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "FYI, building OrchardCore invokes this method ~47000 times.",
              "createdAt": "2018-09-12T00:50:27Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -315,9 +315,14 @@ private static bool IsValidRelativePathBound(char? c)\n         /// </summary>\n         internal static string NormalizePath(string path)\n         {\n-\n             ErrorUtilities.VerifyThrowArgumentLength(path, nameof(path));\n+\n+#if CLR2COMPATIBILITY\n             string fullPath = GetFullPath(path);\n+#else\n+            // Windows uses a case-insensitive file system, so we need to get an exact file name from a possibly-differently-cased path.\n+            string fullPath = NativeMethodsShared.IsWindows ? GetExactPath(path) : GetFullPath(path);",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "~100,000 times on WebLargeCore",
              "createdAt": "2018-09-12T00:55:48Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -315,9 +315,14 @@ private static bool IsValidRelativePathBound(char? c)\n         /// </summary>\n         internal static string NormalizePath(string path)\n         {\n-\n             ErrorUtilities.VerifyThrowArgumentLength(path, nameof(path));\n+\n+#if CLR2COMPATIBILITY\n             string fullPath = GetFullPath(path);\n+#else\n+            // Windows uses a case-insensitive file system, so we need to get an exact file name from a possibly-differently-cased path.\n+            string fullPath = NativeMethodsShared.IsWindows ? GetExactPath(path) : GetFullPath(path);",
              "author": {
                "login": "ccastanedaucf"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Need to propagate the EvaluationContext here to cache these calls.",
              "createdAt": "2018-09-12T00:55:09Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -393,6 +398,48 @@ private static bool IsUNCPath(string path)\n             return isUNC || path.IndexOf(@\"\\\\?\\globalroot\", StringComparison.OrdinalIgnoreCase) != -1;\n         }\n \n+#if !CLR2COMPATIBILITY\n+        /// <summary>\n+        /// Gets the exact case used on the file system for an existing file or directory.\n+        /// </summary>\n+        /// <param name=\"path\">A relative or absolute path.</param>\n+        /// <returns>The full path using the correct case if the path exists. Otherwise, the full path.</returns>\n+        private static string GetExactPath(string path)\n+        {\n+            // DirectoryInfo accepts either a file path or a directory path, and most of its properties work for either.\n+            // However, its Exists property only works for a directory path, so we need an explicit file existence check.\n+            var directory = new DirectoryInfo(path);\n+            if (!File.Exists(path) && !directory.Exists)",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "`EvaluationContext` isn't available here; it's actually prior to evaluation.",
              "createdAt": "2018-09-13T04:08:05Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -393,6 +398,48 @@ private static bool IsUNCPath(string path)\n             return isUNC || path.IndexOf(@\"\\\\?\\globalroot\", StringComparison.OrdinalIgnoreCase) != -1;\n         }\n \n+#if !CLR2COMPATIBILITY\n+        /// <summary>\n+        /// Gets the exact case used on the file system for an existing file or directory.\n+        /// </summary>\n+        /// <param name=\"path\">A relative or absolute path.</param>\n+        /// <returns>The full path using the correct case if the path exists. Otherwise, the full path.</returns>\n+        private static string GetExactPath(string path)\n+        {\n+            // DirectoryInfo accepts either a file path or a directory path, and most of its properties work for either.\n+            // However, its Exists property only works for a directory path, so we need an explicit file existence check.\n+            var directory = new DirectoryInfo(path);\n+            if (!File.Exists(path) && !directory.Exists)",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "The command line app can pass in a new context. But when this is called from an evaluation, it would need to get that evaluation's context. AFAIR the context is not far, maybe 2-3 frames up the stack. Wonder if the context would alleviate the perf tests a bit :)",
              "createdAt": "2018-09-13T17:51:47Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -393,6 +398,48 @@ private static bool IsUNCPath(string path)\n             return isUNC || path.IndexOf(@\"\\\\?\\globalroot\", StringComparison.OrdinalIgnoreCase) != -1;\n         }\n \n+#if !CLR2COMPATIBILITY\n+        /// <summary>\n+        /// Gets the exact case used on the file system for an existing file or directory.\n+        /// </summary>\n+        /// <param name=\"path\">A relative or absolute path.</param>\n+        /// <returns>The full path using the correct case if the path exists. Otherwise, the full path.</returns>\n+        private static string GetExactPath(string path)\n+        {\n+            // DirectoryInfo accepts either a file path or a directory path, and most of its properties work for either.\n+            // However, its Exists property only works for a directory path, so we need an explicit file existence check.\n+            var directory = new DirectoryInfo(path);\n+            if (!File.Exists(path) && !directory.Exists)",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can approximate part size by counting the slashes in the path.",
              "createdAt": "2018-09-12T00:57:19Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -393,6 +398,48 @@ private static bool IsUNCPath(string path)\n             return isUNC || path.IndexOf(@\"\\\\?\\globalroot\", StringComparison.OrdinalIgnoreCase) != -1;\n         }\n \n+#if !CLR2COMPATIBILITY\n+        /// <summary>\n+        /// Gets the exact case used on the file system for an existing file or directory.\n+        /// </summary>\n+        /// <param name=\"path\">A relative or absolute path.</param>\n+        /// <returns>The full path using the correct case if the path exists. Otherwise, the full path.</returns>\n+        private static string GetExactPath(string path)\n+        {\n+            // DirectoryInfo accepts either a file path or a directory path, and most of its properties work for either.\n+            // However, its Exists property only works for a directory path, so we need an explicit file existence check.\n+            var directory = new DirectoryInfo(path);\n+            if (!File.Exists(path) && !directory.Exists)\n+            {\n+                // If the path doesn't exist, just return the full path.\n+                return GetFullPath(path);\n+            }\n+\n+            var parts = new List<string>();",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This doesn't do the same thing as GetFullPath right? AFAIK GetFullPath also removes relative dir parts. And I don't remember whether it does anything about slash normalization like collapsing multiple slashes.",
              "createdAt": "2018-09-12T01:00:04Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -393,6 +398,48 @@ private static bool IsUNCPath(string path)\n             return isUNC || path.IndexOf(@\"\\\\?\\globalroot\", StringComparison.OrdinalIgnoreCase) != -1;\n         }\n \n+#if !CLR2COMPATIBILITY\n+        /// <summary>\n+        /// Gets the exact case used on the file system for an existing file or directory.\n+        /// </summary>\n+        /// <param name=\"path\">A relative or absolute path.</param>\n+        /// <returns>The full path using the correct case if the path exists. Otherwise, the full path.</returns>\n+        private static string GetExactPath(string path)",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Not Windows-only. I wouldn't even check, just always do it.",
              "createdAt": "2018-09-14T16:43:15Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -1983,6 +1983,14 @@ private XmlDocumentWithLocation LoadDocument(string fullPath, bool preserveForma\n         {\n             ErrorUtilities.VerifyThrowInternalRooted(fullPath);\n \n+#if !CLR2COMPATIBILITY\n+            // Windows uses a case-insensitive file system, so we need to get an exact file name from a possibly-differently-cased path.\n+            if (NativeMethodsShared.IsWindows)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Run this on Windows and macOS.",
              "createdAt": "2018-09-14T16:44:04Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2036,6 +2036,48 @@ public void InteractiveSetsBuiltInProperty(string arguments)\n             logContents.ShouldContain(\"MSBuildInteractive = [true]\");\n         }\n \n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "typo: \"provided\"",
              "createdAt": "2018-09-14T16:45:26Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -393,6 +392,68 @@ private static bool IsUNCPath(string path)\n             return isUNC || path.IndexOf(@\"\\\\?\\globalroot\", StringComparison.OrdinalIgnoreCase) != -1;\n         }\n \n+#if !CLR2COMPATIBILITY\n+        /// <summary>\n+        /// Gets the exact case used on the file system for an existing file or directory.\n+        /// </summary>\n+        /// <remarks>\n+        /// This method should only be called on Windows.\n+        /// </remarks>\n+        /// <param name=\"path\">A relative or absolute path.</param>\n+        /// <returns>The full path using the correct case if the path exists. Otherwise, the provied path.</returns>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Ok, I lied, _this_ part can be `if windows` :)",
              "createdAt": "2018-09-14T16:48:05Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -393,6 +392,68 @@ private static bool IsUNCPath(string path)\n             return isUNC || path.IndexOf(@\"\\\\?\\globalroot\", StringComparison.OrdinalIgnoreCase) != -1;\n         }\n \n+#if !CLR2COMPATIBILITY\n+        /// <summary>\n+        /// Gets the exact case used on the file system for an existing file or directory.\n+        /// </summary>\n+        /// <remarks>\n+        /// This method should only be called on Windows.\n+        /// </remarks>\n+        /// <param name=\"path\">A relative or absolute path.</param>\n+        /// <returns>The full path using the correct case if the path exists. Otherwise, the provied path.</returns>\n+        internal static string GetExactPath(string path)\n+        {\n+            // DirectoryInfo accepts either a file path or a directory path, and most of its properties work for either.\n+            // However, its Exists property only works for a directory path, so we need an explicit file existence check.\n+            var directory = new DirectoryInfo(path);\n+            if (!File.Exists(path) && !directory.Exists)\n+            {\n+                // If the path doesn't exist, just return the full path.\n+                return path;\n+            }\n+\n+            // We know exactly how long the string will be, so avoid unnecessary intermediate allocations.\n+            var chars = new char[directory.FullName.Length];\n+            var currentLocation = chars.Length;\n+\n+            DirectoryInfo parentDirectory = directory.Parent;\n+            while (parentDirectory != null)\n+            {\n+                FileSystemInfo entry = parentDirectory.EnumerateFileSystemInfos(directory.Name).First();\n+\n+                // Copy the correctly-cased path part to our working character array.\n+                string pathPart = entry.Name;\n+                currentLocation -= pathPart.Length;\n+                pathPart.CopyTo(0, chars, currentLocation, pathPart.Length);\n+\n+                // Account for the directory separators.\n+                currentLocation--;\n+                chars[currentLocation] = Path.DirectorySeparatorChar;\n+\n+                directory = parentDirectory;\n+                parentDirectory = directory.Parent;\n+            }\n+\n+            // Handle the drive letter, which we'll always normalize to upper case.\n+            string root = directory.FullName;\n+            if (root.Length == 3 // Drive letters are single characters\n+                && root[1] == Path.VolumeSeparatorChar\n+                && root[2] == Path.DirectorySeparatorChar)\n+            {\n+                chars[0] = char.ToUpperInvariant(root[0]);\n+                chars[1] = Path.VolumeSeparatorChar;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this backward-array-copying thing work in languages with more-complex capitalization rules?\r\n\r\nI think this will fail, though maybe Windows will fail beforehand?\r\n\r\n* On a German machine\r\n* Name a project `thing_with_SS.proj`\r\n* `msbuild.exe thing_with_\u00df.proj`",
              "createdAt": "2018-09-14T16:53:53Z",
              "path": "src/Shared/FileUtilities.cs",
              "diffHunk": "@@ -393,6 +392,68 @@ private static bool IsUNCPath(string path)\n             return isUNC || path.IndexOf(@\"\\\\?\\globalroot\", StringComparison.OrdinalIgnoreCase) != -1;\n         }\n \n+#if !CLR2COMPATIBILITY\n+        /// <summary>\n+        /// Gets the exact case used on the file system for an existing file or directory.\n+        /// </summary>\n+        /// <remarks>\n+        /// This method should only be called on Windows.\n+        /// </remarks>\n+        /// <param name=\"path\">A relative or absolute path.</param>\n+        /// <returns>The full path using the correct case if the path exists. Otherwise, the provied path.</returns>\n+        internal static string GetExactPath(string path)\n+        {\n+            // DirectoryInfo accepts either a file path or a directory path, and most of its properties work for either.\n+            // However, its Exists property only works for a directory path, so we need an explicit file existence check.\n+            var directory = new DirectoryInfo(path);\n+            if (!File.Exists(path) && !directory.Exists)\n+            {\n+                // If the path doesn't exist, just return the full path.\n+                return path;\n+            }\n+\n+            // We know exactly how long the string will be, so avoid unnecessary intermediate allocations.\n+            var chars = new char[directory.FullName.Length];\n+            var currentLocation = chars.Length;\n+\n+            DirectoryInfo parentDirectory = directory.Parent;\n+            while (parentDirectory != null)\n+            {\n+                FileSystemInfo entry = parentDirectory.EnumerateFileSystemInfos(directory.Name).First();\n+\n+                // Copy the correctly-cased path part to our working character array.\n+                string pathPart = entry.Name;\n+                currentLocation -= pathPart.Length;\n+                pathPart.CopyTo(0, chars, currentLocation, pathPart.Length);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Drive?",
              "createdAt": "2018-09-14T16:55:27Z",
              "path": "src/Shared/UnitTests/FileUtilities_Tests.cs",
              "diffHunk": "@@ -536,6 +532,54 @@ public void NormalizePathInvalid()\n             });\n         }\n \n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void GetExactPathFileExists()\n+        {\n+            string exactPath = FileUtilities.GetTemporaryFile();\n+\n+            // Since rive letters are normalized to upper case, use lower case. The rest of the path isn't all upper, so use upper case there.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Typing is hard",
              "createdAt": "2018-09-14T17:03:40Z",
              "path": "src/Shared/UnitTests/FileUtilities_Tests.cs",
              "diffHunk": "@@ -536,6 +532,54 @@ public void NormalizePathInvalid()\n             });\n         }\n \n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void GetExactPathFileExists()\n+        {\n+            string exactPath = FileUtilities.GetTemporaryFile();\n+\n+            // Since rive letters are normalized to upper case, use lower case. The rest of the path isn't all upper, so use upper case there.",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We've been trying to prefer `Shouldly` assertions in new test code, even if it doesn't match the file.",
              "createdAt": "2018-09-14T16:56:13Z",
              "path": "src/Shared/UnitTests/FileUtilities_Tests.cs",
              "diffHunk": "@@ -536,6 +532,54 @@ public void NormalizePathInvalid()\n             });\n         }\n \n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void GetExactPathFileExists()\n+        {\n+            string exactPath = FileUtilities.GetTemporaryFile();\n+\n+            // Since rive letters are normalized to upper case, use lower case. The rest of the path isn't all upper, so use upper case there.\n+            string incorrectCasing = char.ToLower(exactPath[0]) + exactPath.Substring(1).ToUpper();\n+\n+            Assert.True(File.Exists(exactPath));\n+            Assert.NotEqual(exactPath, incorrectCasing);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Can do",
              "createdAt": "2018-09-14T17:04:02Z",
              "path": "src/Shared/UnitTests/FileUtilities_Tests.cs",
              "diffHunk": "@@ -536,6 +532,54 @@ public void NormalizePathInvalid()\n             });\n         }\n \n+        [Fact]\n+        [PlatformSpecific(TestPlatforms.Windows)]\n+        public void GetExactPathFileExists()\n+        {\n+            string exactPath = FileUtilities.GetTemporaryFile();\n+\n+            // Since rive letters are normalized to upper case, use lower case. The rest of the path isn't all upper, so use upper case there.\n+            string incorrectCasing = char.ToLower(exactPath[0]) + exactPath.Substring(1).ToUpper();\n+\n+            Assert.True(File.Exists(exactPath));\n+            Assert.NotEqual(exactPath, incorrectCasing);",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: say \"with extension\" in the description.",
              "createdAt": "2018-09-14T22:12:00Z",
              "path": "src/Shared/UnitTests/EngineTestEnvironment.cs",
              "diffHunk": "@@ -20,6 +20,18 @@ public TransientProjectCollection CreateProjectCollection()\n             return WithTransientTestState(new TransientProjectCollection());\n         }\n \n+        /// <summary>\n+        ///     Creates a test variant representing a test project with files relative to the project root. All files\n+        ///     and the root will be cleaned up when the test completes.\n+        /// </summary>\n+        /// <param name=\"projectFileName\">Name of the project file to be created.</param>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}