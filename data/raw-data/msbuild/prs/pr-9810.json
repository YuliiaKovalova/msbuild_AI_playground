{
  "number": 9810,
  "title": "Make Terminal Logger respect verbosity",
  "body": "Fixes #9667, #9654\r\n\r\n### Context\r\nWe would like to make the terminal logger partially respect verbosity.\r\n\r\n### Changes Made\r\nIn case of Quiet verbosity, none of the static part of the Terminal Logger output, which is grouped by the project, is shown. Warnings and errors are shown as they come immediately.\r\nIn case of Minimal and Normal verbosity, the behavior stands intact.\r\nIn case of Detailed and Diagnostic verbosity, the terminal logger shows all the high priority messages in the static part of the output, under the corresponding project.\r\n\r\n### Testing\r\nLocally & unit tests\r\n",
  "state": "MERGED",
  "createdAt": "2024-03-01T15:07:40Z",
  "updatedAt": "2024-04-03T16:00:56Z",
  "closedAt": "2024-04-03T16:00:56Z",
  "mergedAt": "2024-04-03T16:00:56Z",
  "additions": 645,
  "deletions": 123,
  "changedFiles": 38,
  "headRefName": "tl-respect-verbosity-2",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "fbc9a4f72412a26f1e609d035d7355f675727ee2",
          "message": "make TL respect verbosity",
          "committedDate": "2024-03-01T14:56:37Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "896d0acc3b49529952c1b2a99de49569db0c4b04",
          "message": "Remove unused variables",
          "committedDate": "2024-03-01T15:11:18Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e275441d54ecea8c7eae3e15513df85fc40a93b7",
          "message": "Fix accidentally removed line",
          "committedDate": "2024-03-01T15:15:43Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "582d6db85066deaae4de49ac1ed6f4272366804e",
          "message": "Try to fix OSX test.",
          "committedDate": "2024-03-04T13:26:52Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e725dd468b686a3faa0b460cd4ee875164df1e45",
          "message": "Try to fix OSX test - 2",
          "committedDate": "2024-03-14T13:34:13Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1b202b3f7240fa126049ffec6c639f683a5c37ce",
          "message": "Address comments",
          "committedDate": "2024-03-15T13:43:36Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9b9cabd3fced671bd8659e268a9f01c8e98da8bb",
          "message": "Merge branch 'main' into tl-respect-verbosity-2",
          "committedDate": "2024-03-22T12:21:34Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "efb5cf78d5ac5abd4d8a786896afa07a3785b729",
          "message": "Fix merge error",
          "committedDate": "2024-03-22T13:00:50Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0e34e8459ecd33b5d8a0091f1eb28136311985ed",
          "message": "Add parameters parsing",
          "committedDate": "2024-03-22T13:10:03Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7dd402f3c0678607683b495a762fcfbdfac7f092",
          "message": "Add a test, fix typo",
          "committedDate": "2024-03-22T15:55:04Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "01cf9d66aeaf4221b8b5c4f8b6568af5bb719c25",
          "message": "Merge branch 'main' into tl-respect-verbosity-2",
          "committedDate": "2024-03-27T14:13:54Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7df23fd6678d357e65ceb207f221c8255d51d50f",
          "message": "fix merge bugs",
          "committedDate": "2024-03-27T14:26:12Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ed9d5eedccb9f1f581e7476fd21fe9e591742bd0",
          "message": "Address PR comments",
          "committedDate": "2024-03-28T12:15:51Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3dd2f15d1cc858e73b21a626a01b3dd8b559c5c6",
          "message": "Merge branch 'main' into tl-respect-verbosity-2",
          "committedDate": "2024-03-28T12:37:53Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "015c200a635b4becbba28a26f95b262af0f0f394",
          "message": "Address PR comments",
          "committedDate": "2024-04-02T16:34:45Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Is is possible to show renderings of some of the test 'verified' files/scenarios? It'd be good to be able to visually verify the changes here.\r\n\r\nI was able to use [this tool](https://github.com/wader/ansisvg) to generate these locally, with this script (run from the Snapshots directory):\r\n\r\n```powershell\r\n$verifieds = @(get-childitem TerminalLogger_Tests.*.verified.txt)\r\n\r\nforeach ($snapshot in $verifieds) {\r\n    $name = [System.IO.Path]::GetFileNameWithoutExtension($snapshot)\r\n    get-content $snapshot | C:\\Users\\chusk\\go\\bin\\ansisvg.exe > \"$name.svg\"\r\n}\r\n```",
        "createdAt": "2024-03-01T17:44:02Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> Is is possible to show renderings of some of the test 'verified' files/scenarios? It'd be good to be able to visually verify the changes here.\r\n\r\nSure, thank you for the pointers how to do the rendering from the test verification files. \r\nHere are different verbosities levels for the same input (which consists of immediate message, messages with all verbosities, warning and error, all for one project):\r\nQuiet:\r\n![TerminalLogger_Tests PrintBuildSummaryQuietVerbosity_FailedWithErrors Windows verified](https://github.com/dotnet/msbuild/assets/67507805/97892e18-49f8-4767-b175-9323eb9f0bd4)\r\n\r\nMinimal, Normal:\r\n![TerminalLogger_Tests PrintBuildSummaryNormalVerbosity_FailedWithErrors Windows verified](https://github.com/dotnet/msbuild/assets/67507805/4518b07f-d4a6-42e8-8b39-3d99070b165d)\r\n\r\nDetailed, Diagnostic:\r\n![TerminalLogger_Tests PrintBuildSummaryDiagnosticVerbosity_FailedWithErrors Windows verified](https://github.com/dotnet/msbuild/assets/67507805/54df8cba-ecc1-4f3c-afc8-e46d0f2f7dfd)\r\n\r\n\r\n",
        "createdAt": "2024-03-04T14:08:22Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "I wonder should we put this change under a change wave?",
        "createdAt": "2024-03-20T15:19:47Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "IMO no - terminal logger is a live, always updating feature",
        "createdAt": "2024-03-20T15:20:37Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I ran the TL with detailed verbosity on multiple repositories to check the behavior. All seems to be fine, except for one very annoying line that shows on detailed and diagnostics verbosity. It is a line produced by \"exec\" task and it shows the exec command line for the compiler call as [High priority message](https://github.com/dotnet/msbuild/blob/de776177f6d540e656e6b0c6d5bb07f2ff518c19/src/Utilities/ToolTask.cs#L477). The message is usually huge. The console logger has a work-around that allows not to show this line when minimal verbosity is used. Maybe not for this PR, but should we consider implementing similar workaround in TL or fixing the priority of this message?",
        "createdAt": "2024-03-21T15:19:57Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": ">Maybe not for this PR, but should we consider implementing similar workaround in TL or fixing the priority of this message?\r\n\r\nYes, we should detect + workaround this. I'm not sure we can change the priority, maybe there is some other flag/signal we can set or detect?\r\n\r\nNow that we have forward-compatibility this could almost be a specific message type :D\r\n",
        "createdAt": "2024-03-21T15:41:18Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> > Maybe not for this PR, but should we consider implementing similar workaround in TL or fixing the priority of this message?\r\n> \r\n> Yes, we should detect + workaround this. I'm not sure we can change the priority, maybe there is some other flag/signal we can set or detect?\r\n> \r\n> Now that we have forward-compatibility this could almost be a specific message type :D\r\n\r\n\r\nWell, we have a specific message type `TaskCommandLineEventArgs` and that is how it is [detected in the console logger](https://github.com/dotnet/msbuild/blob/de776177f6d540e656e6b0c6d5bb07f2ff518c19/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs#L1136) and skipped. Although the console logger has also a specific parameter that allows for it to be shown, and I suggest having it too. In this case it would be easier for me to implement it in the second PR concerning verbosity where I add parsing of /tlp. @baronfel do we mind if some of MSBuild versions (after merging this PR and before merging my next PR concerning the verbosity) will write this annoying line for a detailed verbosity?\r\n\r\nIf needed, I can add this in this PR though.",
        "createdAt": "2024-03-21T16:32:00Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Adding the parameter to terminal logger parameters appeared to be easier (apparently, we already have most of the code in place), so I added it in this PR. \r\nSo, the changes:\r\n- parameter `/tlp:v=...` will overwrite the verbosity of the TL that is set by `/v` parameter. In case of bad parameter value, it throws the error, like `/clp:v=...` does.\r\n- I added a parameter `/tlp:SHOWCOMMANDLINE` for opting-in the `TaskCommandLineEventArgs` messages, similar to the `/clp:SHOWCOMMANDLINE` parameter. By default, we will skip `TaskCommandLineEventArgs` messages on detailed and diagnostic verbosity of TL, as the console logger does so on minimal verbosity. In case of bad parameter value does not throw an error, just ignores it, like `/clp` does.\r\n\r\n@JanKrivanek, @rokonec could you please review couple of latest commits? \r\n@baronfel is the change and workaround for opting the line back in fine for you? ",
        "createdAt": "2024-03-22T16:07:25Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "@AR-May that seems very acceptable to me, thank you!",
        "createdAt": "2024-03-22T16:50:36Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: do we need the backing field?",
              "createdAt": "2024-03-14T12:01:56Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -212,8 +220,14 @@ internal TerminalLogger(ITerminal terminal)\n \n     #region INodeLogger implementation\n \n+    private LoggerVerbosity _verbosity = LoggerVerbosity.Minimal;\n+\n     /// <inheritdoc/>\n-    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Minimal; set { } }\n+    public LoggerVerbosity Verbosity\n+    {\n+        get { return _verbosity; }\n+        set { _verbosity = value; }\n+    }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "We may do without it as well, yes. Fixed\r\n",
              "createdAt": "2024-03-15T13:45:09Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -212,8 +220,14 @@ internal TerminalLogger(ITerminal terminal)\n \n     #region INodeLogger implementation\n \n+    private LoggerVerbosity _verbosity = LoggerVerbosity.Minimal;\n+\n     /// <inheritdoc/>\n-    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Minimal; set { } }\n+    public LoggerVerbosity Verbosity\n+    {\n+        get { return _verbosity; }\n+        set { _verbosity = value; }\n+    }",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need the `BeginUpdate` and the finally block for the quiet mode? Or can we extract clearing of the stats into a  method - and for quiet just call that and return? (less nested method would get bit more readable)",
              "createdAt": "2024-03-14T12:06:16Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -295,43 +309,46 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)\n \n         Terminal.BeginUpdate();\n         try\n-        {\n-            string duration = (e.Timestamp - _buildStartTime).TotalSeconds.ToString(\"F1\");\n-            string buildResult = RenderBuildResult(e.Succeeded, _buildHasErrors, _buildHasWarnings);\n-\n-            Terminal.WriteLine(\"\");\n-            if (_restoreFailed)\n+        { \n+            if (Verbosity > LoggerVerbosity.Quiet)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "We need the finally block to execute there, and it needs calling of `BeginUpdate`. We might do as you suggest: put the finally block and clearing in a separate method, but I thought it would be easier to add the extra if condition to the messages I want to skip.",
              "createdAt": "2024-03-15T13:34:09Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -295,43 +309,46 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)\n \n         Terminal.BeginUpdate();\n         try\n-        {\n-            string duration = (e.Timestamp - _buildStartTime).TotalSeconds.ToString(\"F1\");\n-            string buildResult = RenderBuildResult(e.Succeeded, _buildHasErrors, _buildHasWarnings);\n-\n-            Terminal.WriteLine(\"\");\n-            if (_restoreFailed)\n+        { \n+            if (Verbosity > LoggerVerbosity.Quiet)",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we actually just shortcut quit the mothod for quiet?\r\nIt would get the diff more readable",
              "createdAt": "2024-03-14T12:08:36Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -400,166 +417,170 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)\n             UpdateNodeStatus(buildEventContext, null);\n         }\n \n-        ProjectContext c = new(buildEventContext);\n-\n-        if (_projects.TryGetValue(c, out Project? project))\n+        // Add project summary to the static part of the Console only if verbosity is higher than Quiet.\n+        if (Verbosity > LoggerVerbosity.Quiet)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Or group the condition with the existing one",
              "createdAt": "2024-03-14T12:43:33Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -400,166 +417,170 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)\n             UpdateNodeStatus(buildEventContext, null);\n         }\n \n-        ProjectContext c = new(buildEventContext);\n-\n-        if (_projects.TryGetValue(c, out Project? project))\n+        // Add project summary to the static part of the Console only if verbosity is higher than Quiet.\n+        if (Verbosity > LoggerVerbosity.Quiet)",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I agree, shortcut quit is better here.",
              "createdAt": "2024-03-15T13:35:44Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -400,166 +417,170 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)\n             UpdateNodeStatus(buildEventContext, null);\n         }\n \n-        ProjectContext c = new(buildEventContext);\n-\n-        if (_projects.TryGetValue(c, out Project? project))\n+        // Add project summary to the static part of the Console only if verbosity is higher than Quiet.\n+        if (Verbosity > LoggerVerbosity.Quiet)",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This code seems repeated. Should we rename `TryParseVerbosityParameter` to `ParseVerbosityParameter` and have it throw the exception if it is not able to parse?",
              "createdAt": "2024-03-27T11:49:40Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -1038,33 +1030,17 @@ internal virtual bool ApplyParameter(string parameterName, string parameterValue\n         /// </summary>\n         private bool ApplyVerbosityParameter(string parameterValue)\n         {\n-            switch (parameterValue.ToUpperInvariant())\n+            if (LoggerParametersHelper.TryParseVerbosityParameter(parameterValue, out LoggerVerbosity? verbosity))\n             {\n-                case \"Q\":\n-                case \"QUIET\":\n-                    Verbosity = LoggerVerbosity.Quiet;\n-                    return true;\n-                case \"M\":\n-                case \"MINIMAL\":\n-                    Verbosity = LoggerVerbosity.Minimal;\n-                    return true;\n-                case \"N\":\n-                case \"NORMAL\":\n-                    Verbosity = LoggerVerbosity.Normal;\n-                    return true;\n-                case \"D\":\n-                case \"DETAILED\":\n-                    Verbosity = LoggerVerbosity.Detailed;\n-                    return true;\n-                case \"DIAG\":\n-                case \"DIAGNOSTIC\":\n-                    Verbosity = LoggerVerbosity.Diagnostic;\n-                    return true;\n-                default:\n-                    string errorCode;\n-                    string helpKeyword;\n-                    string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, \"InvalidVerbosity\", parameterValue);\n-                    throw new LoggerException(message, null, errorCode, helpKeyword);\n+                Verbosity = (LoggerVerbosity)verbosity;\n+                return true;\n+            }\n+            else\n+            {\n+                string errorCode;\n+                string helpKeyword;\n+                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, \"InvalidVerbosity\", parameterValue);\n+                throw new LoggerException(message, null, errorCode, helpKeyword);\n             }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "The functions are a bit different in processing the null value. It could be resolved, surely. However, build explodes with 4k errors when I try to add `ResourceUtilities.cs` (that's a shared file) to `Microsoft.Build.Framework` for this change and I do not want to dig how to fix it for this PR. I think that the current state will do.",
              "createdAt": "2024-03-28T12:21:19Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -1038,33 +1030,17 @@ internal virtual bool ApplyParameter(string parameterName, string parameterValue\n         /// </summary>\n         private bool ApplyVerbosityParameter(string parameterValue)\n         {\n-            switch (parameterValue.ToUpperInvariant())\n+            if (LoggerParametersHelper.TryParseVerbosityParameter(parameterValue, out LoggerVerbosity? verbosity))\n             {\n-                case \"Q\":\n-                case \"QUIET\":\n-                    Verbosity = LoggerVerbosity.Quiet;\n-                    return true;\n-                case \"M\":\n-                case \"MINIMAL\":\n-                    Verbosity = LoggerVerbosity.Minimal;\n-                    return true;\n-                case \"N\":\n-                case \"NORMAL\":\n-                    Verbosity = LoggerVerbosity.Normal;\n-                    return true;\n-                case \"D\":\n-                case \"DETAILED\":\n-                    Verbosity = LoggerVerbosity.Detailed;\n-                    return true;\n-                case \"DIAG\":\n-                case \"DIAGNOSTIC\":\n-                    Verbosity = LoggerVerbosity.Diagnostic;\n-                    return true;\n-                default:\n-                    string errorCode;\n-                    string helpKeyword;\n-                    string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, \"InvalidVerbosity\", parameterValue);\n-                    throw new LoggerException(message, null, errorCode, helpKeyword);\n+                Verbosity = (LoggerVerbosity)verbosity;\n+                return true;\n+            }\n+            else\n+            {\n+                string errorCode;\n+                string helpKeyword;\n+                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, \"InvalidVerbosity\", parameterValue);\n+                throw new LoggerException(message, null, errorCode, helpKeyword);\n             }",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Eventually I hope we will remove all the shared files, but I feel this work is a bit out of scope for this PR.",
              "createdAt": "2024-03-28T12:23:11Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -1038,33 +1030,17 @@ internal virtual bool ApplyParameter(string parameterName, string parameterValue\n         /// </summary>\n         private bool ApplyVerbosityParameter(string parameterValue)\n         {\n-            switch (parameterValue.ToUpperInvariant())\n+            if (LoggerParametersHelper.TryParseVerbosityParameter(parameterValue, out LoggerVerbosity? verbosity))\n             {\n-                case \"Q\":\n-                case \"QUIET\":\n-                    Verbosity = LoggerVerbosity.Quiet;\n-                    return true;\n-                case \"M\":\n-                case \"MINIMAL\":\n-                    Verbosity = LoggerVerbosity.Minimal;\n-                    return true;\n-                case \"N\":\n-                case \"NORMAL\":\n-                    Verbosity = LoggerVerbosity.Normal;\n-                    return true;\n-                case \"D\":\n-                case \"DETAILED\":\n-                    Verbosity = LoggerVerbosity.Detailed;\n-                    return true;\n-                case \"DIAG\":\n-                case \"DIAGNOSTIC\":\n-                    Verbosity = LoggerVerbosity.Diagnostic;\n-                    return true;\n-                default:\n-                    string errorCode;\n-                    string helpKeyword;\n-                    string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, \"InvalidVerbosity\", parameterValue);\n-                    throw new LoggerException(message, null, errorCode, helpKeyword);\n+                Verbosity = (LoggerVerbosity)verbosity;\n+                return true;\n+            }\n+            else\n+            {\n+                string errorCode;\n+                string helpKeyword;\n+                string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, \"InvalidVerbosity\", parameterValue);\n+                throw new LoggerException(message, null, errorCode, helpKeyword);\n             }",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            return ConversionUtilities.TryConvertStringToBool(parameterValue, out _showCommandLine );\r\n```",
              "createdAt": "2024-03-27T11:54:59Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -255,6 +268,83 @@ public void Initialize(IEventSource eventSource)\n         }\n     }\n \n+    /// <summary>\n+    /// Parses out the logger parameters from the Parameters string.\n+    /// </summary>\n+    public void ParseParameters()\n+    {\n+        var parameters = LoggerParametersHelper.ParseParameters(Parameters);\n+\n+        foreach (var parameter in parameters)\n+        {\n+            ApplyParameter(parameter.Key, parameter.Value);\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Apply a terminal logger parameter.\n+    /// parameterValue may be null, if there is no parameter value.\n+    /// </summary>\n+    private bool ApplyParameter(string parameterName, string? parameterValue)\n+    {\n+        ErrorUtilities.VerifyThrowArgumentNull(parameterName, nameof(parameterName));\n+\n+        switch (parameterName.ToUpperInvariant())\n+        {\n+            case \"V\":\n+            case \"VERBOSITY\":\n+                return ApplyVerbosityParameter(parameterValue);\n+            case \"SHOWCOMMANDLINE\":\n+                return ApplyShowCommandLineParameter(parameterValue);\n+        }\n+\n+        return false;\n+    }\n+\n+    /// <summary>\n+    /// Apply the verbosity value\n+    /// </summary>\n+    private bool ApplyVerbosityParameter(string? parameterValue)\n+    {\n+        if (parameterValue is not null && LoggerParametersHelper.TryParseVerbosityParameter(parameterValue, out LoggerVerbosity? verbosity))\n+        {\n+            Verbosity = (LoggerVerbosity)verbosity!;\n+            return true;\n+        }\n+        else\n+        {\n+            string errorCode;\n+            string helpKeyword;\n+            string message = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out errorCode, out helpKeyword, \"InvalidVerbosity\", parameterValue);\n+            throw new LoggerException(message, null, errorCode, helpKeyword);\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Apply the show command Line value\n+    /// </summary>\n+    private bool ApplyShowCommandLineParameter(string? parameterValue)\n+    {\n+        if (String.IsNullOrEmpty(parameterValue))\n+        {\n+            _showCommandLine = true;\n+        }\n+        else\n+        {\n+            try\n+            {\n+                _showCommandLine = ConversionUtilities.ConvertStringToBool(parameterValue);\n+            }\n+            catch (ArgumentException)\n+            {\n+                return false;\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If you're going to return `IEnumerable` why back it with a list rather than `yield return`? And why KVP over a tuple?",
              "createdAt": "2024-04-01T19:20:39Z",
              "path": "src/Framework/Logging/LoggerParametersHelper.cs",
              "diffHunk": "@@ -0,0 +1,73 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework.Logging\n+{\n+    internal static class LoggerParametersHelper\n+    {\n+        // Logger parameters delimiters.\n+        public static readonly char[] s_parameterDelimiters = MSBuildConstants.SemicolonChar;\n+\n+        // Logger parameter value split character.\n+        public static readonly char[] s_parameterValueSplitCharacter = MSBuildConstants.EqualsChar;\n+\n+        public static bool TryParseVerbosityParameter(string parameterValue, out LoggerVerbosity? verbosity)\n+        {\n+            switch (parameterValue.ToUpperInvariant())\n+            {\n+                case \"Q\":\n+                case \"QUIET\":\n+                    verbosity = LoggerVerbosity.Quiet;\n+                    return true;\n+                case \"M\":\n+                case \"MINIMAL\":\n+                    verbosity = LoggerVerbosity.Minimal;\n+                    return true;\n+                case \"N\":\n+                case \"NORMAL\":\n+                    verbosity = LoggerVerbosity.Normal;\n+                    return true;\n+                case \"D\":\n+                case \"DETAILED\":\n+                    verbosity = LoggerVerbosity.Detailed;\n+                    return true;\n+                case \"DIAG\":\n+                case \"DIAGNOSTIC\":\n+                    verbosity = LoggerVerbosity.Diagnostic;\n+                    return true;\n+                default:\n+                    verbosity = null;\n+                    return false;\n+            }\n+        }\n+\n+        public static IEnumerable<KeyValuePair<string, string?>> ParseParameters(string? parametersString)\n+        {\n+            List<KeyValuePair<string, string?>> parameters = new();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Well, why indeed! My bad, going to fix it. Also, I was not aware that there was a difference in perf related to my pick of KVP vs tuple. Intent-wise KVP fits better than tuple, but that's it. I agree, tuple is better since we are going to pass it as an argument.",
              "createdAt": "2024-04-02T09:57:25Z",
              "path": "src/Framework/Logging/LoggerParametersHelper.cs",
              "diffHunk": "@@ -0,0 +1,73 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework.Logging\n+{\n+    internal static class LoggerParametersHelper\n+    {\n+        // Logger parameters delimiters.\n+        public static readonly char[] s_parameterDelimiters = MSBuildConstants.SemicolonChar;\n+\n+        // Logger parameter value split character.\n+        public static readonly char[] s_parameterValueSplitCharacter = MSBuildConstants.EqualsChar;\n+\n+        public static bool TryParseVerbosityParameter(string parameterValue, out LoggerVerbosity? verbosity)\n+        {\n+            switch (parameterValue.ToUpperInvariant())\n+            {\n+                case \"Q\":\n+                case \"QUIET\":\n+                    verbosity = LoggerVerbosity.Quiet;\n+                    return true;\n+                case \"M\":\n+                case \"MINIMAL\":\n+                    verbosity = LoggerVerbosity.Minimal;\n+                    return true;\n+                case \"N\":\n+                case \"NORMAL\":\n+                    verbosity = LoggerVerbosity.Normal;\n+                    return true;\n+                case \"D\":\n+                case \"DETAILED\":\n+                    verbosity = LoggerVerbosity.Detailed;\n+                    return true;\n+                case \"DIAG\":\n+                case \"DIAGNOSTIC\":\n+                    verbosity = LoggerVerbosity.Diagnostic;\n+                    return true;\n+                default:\n+                    verbosity = null;\n+                    return false;\n+            }\n+        }\n+\n+        public static IEnumerable<KeyValuePair<string, string?>> ParseParameters(string? parametersString)\n+        {\n+            List<KeyValuePair<string, string?>> parameters = new();",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we aggressively fail on unknown attempted configuration?",
              "createdAt": "2024-04-01T19:23:17Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -255,6 +268,76 @@ public void Initialize(IEventSource eventSource)\n         }\n     }\n \n+    /// <summary>\n+    /// Parses out the logger parameters from the Parameters string.\n+    /// </summary>\n+    public void ParseParameters()\n+    {\n+        var parameters = LoggerParametersHelper.ParseParameters(Parameters);\n+\n+        foreach (var parameter in parameters)\n+        {\n+            ApplyParameter(parameter.Key, parameter.Value);\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Apply a terminal logger parameter.\n+    /// parameterValue may be null, if there is no parameter value.\n+    /// </summary>\n+    private bool ApplyParameter(string parameterName, string? parameterValue)\n+    {\n+        ErrorUtilities.VerifyThrowArgumentNull(parameterName, nameof(parameterName));\n+\n+        switch (parameterName.ToUpperInvariant())\n+        {\n+            case \"V\":\n+            case \"VERBOSITY\":\n+                return ApplyVerbosityParameter(parameterValue);\n+            case \"SHOWCOMMANDLINE\":\n+                return ApplyShowCommandLineParameter(parameterValue);\n+        }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "That's question for @baronfel. Should we? We do not aggressively fail for Console Logger, so I continued as such for Terminal Logger. But if we want to change it, sure, I can change it.",
              "createdAt": "2024-04-02T09:32:39Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -255,6 +268,76 @@ public void Initialize(IEventSource eventSource)\n         }\n     }\n \n+    /// <summary>\n+    /// Parses out the logger parameters from the Parameters string.\n+    /// </summary>\n+    public void ParseParameters()\n+    {\n+        var parameters = LoggerParametersHelper.ParseParameters(Parameters);\n+\n+        foreach (var parameter in parameters)\n+        {\n+            ApplyParameter(parameter.Key, parameter.Value);\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Apply a terminal logger parameter.\n+    /// parameterValue may be null, if there is no parameter value.\n+    /// </summary>\n+    private bool ApplyParameter(string parameterName, string? parameterValue)\n+    {\n+        ErrorUtilities.VerifyThrowArgumentNull(parameterName, nameof(parameterName));\n+\n+        switch (parameterName.ToUpperInvariant())\n+        {\n+            case \"V\":\n+            case \"VERBOSITY\":\n+                return ApplyVerbosityParameter(parameterValue);\n+            case \"SHOWCOMMANDLINE\":\n+                return ApplyShowCommandLineParameter(parameterValue);\n+        }",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Note: we do not aggressively fail in most of the cases, but when verbosity is set wrongly, we do.",
              "createdAt": "2024-04-02T09:34:16Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -255,6 +268,76 @@ public void Initialize(IEventSource eventSource)\n         }\n     }\n \n+    /// <summary>\n+    /// Parses out the logger parameters from the Parameters string.\n+    /// </summary>\n+    public void ParseParameters()\n+    {\n+        var parameters = LoggerParametersHelper.ParseParameters(Parameters);\n+\n+        foreach (var parameter in parameters)\n+        {\n+            ApplyParameter(parameter.Key, parameter.Value);\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Apply a terminal logger parameter.\n+    /// parameterValue may be null, if there is no parameter value.\n+    /// </summary>\n+    private bool ApplyParameter(string parameterName, string? parameterValue)\n+    {\n+        ErrorUtilities.VerifyThrowArgumentNull(parameterName, nameof(parameterName));\n+\n+        switch (parameterName.ToUpperInvariant())\n+        {\n+            case \"V\":\n+            case \"VERBOSITY\":\n+                return ApplyVerbosityParameter(parameterValue);\n+            case \"SHOWCOMMANDLINE\":\n+                return ApplyShowCommandLineParameter(parameterValue);\n+        }",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Failing on unknown seems like a fragile approach to me - imagine someone flipping between different SDKs where we add new functionality in version N+1 - the user should be able to use a response file or equivalent mechanism to hardcode that configuration without having to keep flipping that configuration on/off.\r\n\r\nSo - I think silently not applying is ok here.",
              "createdAt": "2024-04-03T13:43:19Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -255,6 +268,76 @@ public void Initialize(IEventSource eventSource)\n         }\n     }\n \n+    /// <summary>\n+    /// Parses out the logger parameters from the Parameters string.\n+    /// </summary>\n+    public void ParseParameters()\n+    {\n+        var parameters = LoggerParametersHelper.ParseParameters(Parameters);\n+\n+        foreach (var parameter in parameters)\n+        {\n+            ApplyParameter(parameter.Key, parameter.Value);\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Apply a terminal logger parameter.\n+    /// parameterValue may be null, if there is no parameter value.\n+    /// </summary>\n+    private bool ApplyParameter(string parameterName, string? parameterValue)\n+    {\n+        ErrorUtilities.VerifyThrowArgumentNull(parameterName, nameof(parameterName));\n+\n+        switch (parameterName.ToUpperInvariant())\n+        {\n+            case \"V\":\n+            case \"VERBOSITY\":\n+                return ApplyVerbosityParameter(parameterValue);\n+            case \"SHOWCOMMANDLINE\":\n+                return ApplyShowCommandLineParameter(parameterValue);\n+        }",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If you annotate this like so, you won't need a `!` in consumption sites:\r\n\r\n```suggestion\r\n        public static bool TryParseVerbosityParameter(string parameterValue, [NotNullWhen(true)] out LoggerVerbosity? verbosity)\r\n```",
              "createdAt": "2024-04-01T19:26:34Z",
              "path": "src/Framework/Logging/LoggerParametersHelper.cs",
              "diffHunk": "@@ -0,0 +1,73 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework.Logging\n+{\n+    internal static class LoggerParametersHelper\n+    {\n+        // Logger parameters delimiters.\n+        public static readonly char[] s_parameterDelimiters = MSBuildConstants.SemicolonChar;\n+\n+        // Logger parameter value split character.\n+        public static readonly char[] s_parameterValueSplitCharacter = MSBuildConstants.EqualsChar;\n+\n+        public static bool TryParseVerbosityParameter(string parameterValue, out LoggerVerbosity? verbosity)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What does the return value here mean? Why is it ignored in `ParseParameters()`?",
              "createdAt": "2024-04-01T19:27:51Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -255,6 +268,76 @@ public void Initialize(IEventSource eventSource)\n         }\n     }\n \n+    /// <summary>\n+    /// Parses out the logger parameters from the Parameters string.\n+    /// </summary>\n+    public void ParseParameters()\n+    {\n+        var parameters = LoggerParametersHelper.ParseParameters(Parameters);\n+\n+        foreach (var parameter in parameters)\n+        {\n+            ApplyParameter(parameter.Key, parameter.Value);\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Apply a terminal logger parameter.\n+    /// parameterValue may be null, if there is no parameter value.\n+    /// </summary>\n+    private bool ApplyParameter(string parameterName, string? parameterValue)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The value meant whether the function was successful or not. Should have called it `TryApplyParameter`.\r\nThe idea was not to throw on parse error and communicate the success this way. But since we anyway ignore this value, the class is sealed and the function is not public, we can change it anytime if we need such info for our logic, so I will just remove this bool.",
              "createdAt": "2024-04-02T16:35:28Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -255,6 +268,76 @@ public void Initialize(IEventSource eventSource)\n         }\n     }\n \n+    /// <summary>\n+    /// Parses out the logger parameters from the Parameters string.\n+    /// </summary>\n+    public void ParseParameters()\n+    {\n+        var parameters = LoggerParametersHelper.ParseParameters(Parameters);\n+\n+        foreach (var parameter in parameters)\n+        {\n+            ApplyParameter(parameter.Key, parameter.Value);\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Apply a terminal logger parameter.\n+    /// parameterValue may be null, if there is no parameter value.\n+    /// </summary>\n+    private bool ApplyParameter(string parameterName, string? parameterValue)",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Since this is in a context where the return value of `TryGetValue` is checked, I don't think you need the nullable annotation on `Project?`\r\n\r\n```suggestion\r\n            && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project project)\r\n```",
              "createdAt": "2024-04-01T20:10:05Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -744,7 +869,9 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)\n                 columnNumber: e.ColumnNumber,\n                 endColumnNumber: e.EndColumnNumber);\n \n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n+        if (buildEventContext is not null\n+            && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Nope, this was wrong, it just took IntelliSense a minute to catch up to it \ud83e\udd26\ud83c\udffb",
              "createdAt": "2024-04-01T20:26:03Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -744,7 +869,9 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)\n                 columnNumber: e.ColumnNumber,\n                 endColumnNumber: e.EndColumnNumber);\n \n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n+        if (buildEventContext is not null\n+            && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good idea!",
              "createdAt": "2024-04-02T16:38:35Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -744,7 +869,9 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)\n                 columnNumber: e.ColumnNumber,\n                 endColumnNumber: e.EndColumnNumber);\n \n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n+        if (buildEventContext is not null\n+            && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project)",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "wrong chat :)\r\n",
              "createdAt": "2024-04-03T15:57:51Z",
              "path": "src/MSBuild/TerminalLogger/TerminalLogger.cs",
              "diffHunk": "@@ -744,7 +869,9 @@ private void WarningRaised(object sender, BuildWarningEventArgs e)\n                 columnNumber: e.ColumnNumber,\n                 endColumnNumber: e.EndColumnNumber);\n \n-        if (buildEventContext is not null && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))\n+        if (buildEventContext is not null\n+            && _projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project)",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Ah, I'd actually think about using a language tuple with named fields here but this is WAY into nit territory:\r\n\r\n```suggestion\r\n        public static IEnumerable<(string Name, string? Value)> ParseParameters(string? parametersString)\r\n```",
              "createdAt": "2024-04-03T15:44:19Z",
              "path": "src/Framework/Logging/LoggerParametersHelper.cs",
              "diffHunk": "@@ -0,0 +1,69 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics.CodeAnalysis;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework.Logging\n+{\n+    internal static class LoggerParametersHelper\n+    {\n+        // Logger parameters delimiters.\n+        public static readonly char[] s_parameterDelimiters = MSBuildConstants.SemicolonChar;\n+\n+        // Logger parameter value split character.\n+        public static readonly char[] s_parameterValueSplitCharacter = MSBuildConstants.EqualsChar;\n+\n+        public static bool TryParseVerbosityParameter(string parameterValue, [NotNullWhen(true)] out LoggerVerbosity? verbosity)\n+        {\n+            switch (parameterValue.ToUpperInvariant())\n+            {\n+                case \"Q\":\n+                case \"QUIET\":\n+                    verbosity = LoggerVerbosity.Quiet;\n+                    return true;\n+                case \"M\":\n+                case \"MINIMAL\":\n+                    verbosity = LoggerVerbosity.Minimal;\n+                    return true;\n+                case \"N\":\n+                case \"NORMAL\":\n+                    verbosity = LoggerVerbosity.Normal;\n+                    return true;\n+                case \"D\":\n+                case \"DETAILED\":\n+                    verbosity = LoggerVerbosity.Detailed;\n+                    return true;\n+                case \"DIAG\":\n+                case \"DIAGNOSTIC\":\n+                    verbosity = LoggerVerbosity.Diagnostic;\n+                    return true;\n+                default:\n+                    verbosity = null;\n+                    return false;\n+            }\n+        }\n+\n+        public static IEnumerable<Tuple<string, string?>> ParseParameters(string? parametersString)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I will take this syntax as possibility next time, thanks!",
              "createdAt": "2024-04-03T15:59:41Z",
              "path": "src/Framework/Logging/LoggerParametersHelper.cs",
              "diffHunk": "@@ -0,0 +1,69 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Diagnostics.CodeAnalysis;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+using Microsoft.Build.Shared;\n+\n+namespace Microsoft.Build.Framework.Logging\n+{\n+    internal static class LoggerParametersHelper\n+    {\n+        // Logger parameters delimiters.\n+        public static readonly char[] s_parameterDelimiters = MSBuildConstants.SemicolonChar;\n+\n+        // Logger parameter value split character.\n+        public static readonly char[] s_parameterValueSplitCharacter = MSBuildConstants.EqualsChar;\n+\n+        public static bool TryParseVerbosityParameter(string parameterValue, [NotNullWhen(true)] out LoggerVerbosity? verbosity)\n+        {\n+            switch (parameterValue.ToUpperInvariant())\n+            {\n+                case \"Q\":\n+                case \"QUIET\":\n+                    verbosity = LoggerVerbosity.Quiet;\n+                    return true;\n+                case \"M\":\n+                case \"MINIMAL\":\n+                    verbosity = LoggerVerbosity.Minimal;\n+                    return true;\n+                case \"N\":\n+                case \"NORMAL\":\n+                    verbosity = LoggerVerbosity.Normal;\n+                    return true;\n+                case \"D\":\n+                case \"DETAILED\":\n+                    verbosity = LoggerVerbosity.Detailed;\n+                    return true;\n+                case \"DIAG\":\n+                case \"DIAGNOSTIC\":\n+                    verbosity = LoggerVerbosity.Diagnostic;\n+                    return true;\n+                default:\n+                    verbosity = null;\n+                    return false;\n+            }\n+        }\n+\n+        public static IEnumerable<Tuple<string, string?>> ParseParameters(string? parametersString)",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      }
    ]
  }
}