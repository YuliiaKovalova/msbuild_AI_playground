{
  "number": 6812,
  "title": "Static graph doc clarifications",
  "body": "Got some questions which are not clear from the doc, so I updated it.",
  "state": "MERGED",
  "createdAt": "2021-09-03T19:27:58Z",
  "updatedAt": "2021-11-25T13:21:57Z",
  "closedAt": "2021-11-25T13:21:57Z",
  "mergedAt": "2021-11-25T13:21:57Z",
  "additions": 18,
  "deletions": 9,
  "changedFiles": 1,
  "headRefName": "micodoba/updateGraphDoc",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5837989cb565638bde00e79b89bbd5bcd36636cf",
          "message": "rewrite build dimension summary",
          "committedDate": "2021-09-03T18:45:14Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "afaa1f1c48b08a88f51f6dbc8a5755c5aa4842da",
          "message": "Clarify the need for speculative edges",
          "committedDate": "2021-09-03T18:45:44Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6160927af1208532f34a5f57c02c549bae00db0a",
          "message": "clarify static graph vs runtime graph",
          "committedDate": "2021-09-03T19:07:28Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c45afc730c1918a4ec2c21bcbc3c686dabdc2084",
          "message": "clarify what building a project in isolation means",
          "committedDate": "2021-09-03T19:14:36Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8f289119b3618696d49eaf89ea78dc56c90f0642",
          "message": "update",
          "committedDate": "2021-09-03T19:17:38Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9aba59c40a85ad95df3b23387b8b6e277ae2a9f9",
          "message": "update",
          "committedDate": "2021-09-03T19:23:54Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6d709a10f5711fcf3ec9786cb4ee1be66fa95ea0",
          "message": "Update documentation/specs/static-graph.md\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2021-09-07T17:35:09Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2021-10-23T00:17:43Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2021-10-23T00:17:56Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't like \"top-down\" and \"bottom-up\" language because no one can agree (for instance, these are obviously right-to-left and left-to-right traversals \ud83d\ude1c).",
              "createdAt": "2021-09-07T15:39:51Z",
              "path": "documentation/specs/static-graph.md",
              "diffHunk": "@@ -172,11 +176,16 @@ Note that graph cycles are disallowed, even if they're using disconnected target\n [BuildManager.PendBuildRequest(GraphBuildRequestData requestData)](https://github.com/microsoft/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/BuildManager/BuildManager.cs#L676)\n \n ### Inferring which targets to run for a project within the graph\n-In the classic traversal, the referencing project chooses which targets to call on the referenced projects and may call into a project multiple times with different target lists and global properties (examples in [project reference protocol](../ProjectReference-Protocol.md)). When building a graph, where projects are built before the projects that reference them, we have to determine the target list to execute on each project statically.\n+In the classic MSBuild build (i.e. execution of targets), the referencing project chooses which targets to call on the referenced projects and may call into a project multiple times with different target lists and global properties (examples in [project reference protocol](../ProjectReference-Protocol.md)). This is a top-down traversal of dependencies. These calls are made via the [MSBuild task](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-task?view=vs-2019). When building a graph, projects are built before the projects that reference them. This is a bottom-up traversal. Therefore the graph needs to determine the list of targets to execute on a specific project `B` **before** building the referencing projects that reference `B`.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "@rainersigwald is this better? I could also completely drop the mentions  to top-down/bottom-up. Alternatively, I could add a `Graph Orientation` section right at the top that defines 'child', 'parent', 'top-down' etc.\r\n```suggestion\r\nIn the classic MSBuild build (i.e. execution of targets), the referencing project chooses which targets to call on the referenced projects and may call into a project multiple times with different target lists and global properties (examples in [project reference protocol](../ProjectReference-Protocol.md)). This is a top-down traversal of dependencies (with the top-most project being the project built by the user). These calls are made via the [MSBuild task](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-task?view=vs-2019). When building a graph, referenced projects are built before the projects that reference them. This is a bottom-up traversal. Therefore the graph needs to determine the list of targets to execute on a specific project `B` **before** building the referencing projects that reference `B`.\r\n```",
              "createdAt": "2021-09-07T18:19:09Z",
              "path": "documentation/specs/static-graph.md",
              "diffHunk": "@@ -172,11 +176,16 @@ Note that graph cycles are disallowed, even if they're using disconnected target\n [BuildManager.PendBuildRequest(GraphBuildRequestData requestData)](https://github.com/microsoft/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/BuildManager/BuildManager.cs#L676)\n \n ### Inferring which targets to run for a project within the graph\n-In the classic traversal, the referencing project chooses which targets to call on the referenced projects and may call into a project multiple times with different target lists and global properties (examples in [project reference protocol](../ProjectReference-Protocol.md)). When building a graph, where projects are built before the projects that reference them, we have to determine the target list to execute on each project statically.\n+In the classic MSBuild build (i.e. execution of targets), the referencing project chooses which targets to call on the referenced projects and may call into a project multiple times with different target lists and global properties (examples in [project reference protocol](../ProjectReference-Protocol.md)). This is a top-down traversal of dependencies. These calls are made via the [MSBuild task](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-task?view=vs-2019). When building a graph, projects are built before the projects that reference them. This is a bottom-up traversal. Therefore the graph needs to determine the list of targets to execute on a specific project `B` **before** building the referencing projects that reference `B`.",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Remove en-us? Also, I don't see (although I only looked at new documentation) other references to bottom-up or top-down), so I imagine you could get rid of it.",
              "createdAt": "2021-09-10T03:33:42Z",
              "path": "documentation/specs/static-graph.md",
              "diffHunk": "@@ -172,11 +176,16 @@ Note that graph cycles are disallowed, even if they're using disconnected target\n [BuildManager.PendBuildRequest(GraphBuildRequestData requestData)](https://github.com/microsoft/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/BuildManager/BuildManager.cs#L676)\n \n ### Inferring which targets to run for a project within the graph\n-In the classic traversal, the referencing project chooses which targets to call on the referenced projects and may call into a project multiple times with different target lists and global properties (examples in [project reference protocol](../ProjectReference-Protocol.md)). When building a graph, where projects are built before the projects that reference them, we have to determine the target list to execute on each project statically.\n+In the classic MSBuild build (i.e. execution of targets), the referencing project chooses which targets to call on the referenced projects and may call into a project multiple times with different target lists and global properties (examples in [project reference protocol](../ProjectReference-Protocol.md)). This is a top-down traversal of dependencies. These calls are made via the [MSBuild task](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-task?view=vs-2019). When building a graph, projects are built before the projects that reference them. This is a bottom-up traversal. Therefore the graph needs to determine the list of targets to execute on a specific project `B` **before** building the referencing projects that reference `B`.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\nSince the graph does not have access to MSBuild task callsites, it does not know what targets will get called for a given graph edge. \r\n```",
              "createdAt": "2021-09-07T15:41:05Z",
              "path": "documentation/specs/static-graph.md",
              "diffHunk": "@@ -172,11 +176,16 @@ Note that graph cycles are disallowed, even if they're using disconnected target\n [BuildManager.PendBuildRequest(GraphBuildRequestData requestData)](https://github.com/microsoft/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/BuildManager/BuildManager.cs#L676)\n \n ### Inferring which targets to run for a project within the graph\n-In the classic traversal, the referencing project chooses which targets to call on the referenced projects and may call into a project multiple times with different target lists and global properties (examples in [project reference protocol](../ProjectReference-Protocol.md)). When building a graph, where projects are built before the projects that reference them, we have to determine the target list to execute on each project statically.\n+In the classic MSBuild build (i.e. execution of targets), the referencing project chooses which targets to call on the referenced projects and may call into a project multiple times with different target lists and global properties (examples in [project reference protocol](../ProjectReference-Protocol.md)). This is a top-down traversal of dependencies. These calls are made via the [MSBuild task](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-task?view=vs-2019). When building a graph, projects are built before the projects that reference them. This is a bottom-up traversal. Therefore the graph needs to determine the list of targets to execute on a specific project `B` **before** building the referencing projects that reference `B`.\n+\n+The static graph contains the structural information on which reference projects a referencing project depends on. But it does not contain information on what \"depends\" means. At build time \"depends\" means that a referencing evaluated project will call a subset of reference evaluations with some targets. Subset because the static graph is an inferred graph, therefore there are ambiguities during graph construction, and thus it needs to be conservative and represent a superset of the \"runtime graph\". The \"runtime graph\" is the actual graph that gets executed during a real build. We cannot know the runtime graph because that would require us to analyze msbuild xml code inside of targets in order to find the `MSBuild task` invocations. This means doing heavy program analysis, like symbolic execution. That would make things very complicated, slower, and would probably introduce even more ambiguity, so a larger superset conservative graph. So we kept it simple and only looked at evaluation time msbuild xml code (i.e. msbuild xml code outside of `<Target>` elements).\n+To summarize, the static graph does not have insights into the `MSBuild task` callsites. It does not know callsite specific information such as the `Targets=\"Foo;Bar\"` or `Properties=\"Foo=Bar\"` `MSBuild task` attributes.\n+Since the graph does not have access to MSBuildtask callsites, it does not know what targets will get called for a given graph edge. ",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": ".NET (capitalized)\r\n\r\nInteresting point about NuGet (capitalized) not existing for a Java SDK. I imagine that adding a single method call shortly after generating speculative edges is fairly easy, and it can be public and overridable or (I think fitting better into the design) something passed from the outer build. Even if you can't make it work for all SDKs, an improvement for a _substantial_ fraction of users' cases seems worth it to me.",
              "createdAt": "2021-09-10T03:28:26Z",
              "path": "documentation/specs/static-graph.md",
              "diffHunk": "@@ -151,9 +151,13 @@ For example, here is a trimmed down `Microsoft.Net.Sdk` multitargeting project:\n </Project>\n ```\n \n-To summarize, there are two main patterns for build dimensions which are handled:\n-1. The project multitargets, in which case the SDK needs to specify the multitargeting build dimensions.\n-2. A different set of global properties are used to choose the dimension like with Configuration or Platform. The project graph supports this via multiple entry points.\n+To summarize, there are two main patterns for specifying build dimensions:\n+1. Multitargeting based. A multitargeting project self describes supported build dimensions. In this case the SDK needs to specify the multitargeting build dimensions. The graph then extracts innerbuilds from a given outer build. For example, the `TargetFramework` build dimension gets specified this way.\n+2. Global Property based: A top level set of global properties get applied to the graph entrypoints and get propagated downward through the graph. For example, the `Configuration` and `Platform` build dimensions get specified this way.\n+\n+Why does an outerbuild need to generate speculative edges to all of its innerbuilds? Why can't it use nuget to prune the speculative edges down to the compatible set?\n+- One big design constraint we imposed on static graph was to keep it agnostic of SDK implementation details. So the graph must not know about particular details of one language's SDK. We wanted a generic design that all language SDKs can leverage. We considered that calling nuget to get the compatible TargetFramework values breaks this rule, as both the concept of \"nuget\" and the concept of \"TargetFramework\" are implementation details of the .net SDK. If someone were to write a Java SDK, would \"calling nuget to get the compatible TargetFramework\" still be relevant? A solution to this is to allow SDKs to configure the graph with an extension point on \"how to collapse multiple speculative innerbuild edges into a smaller compatible set\", but we didn't have the time to design it yet.",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "True, there's many potential solutions for this design problem, but I would not commit to them right now. Unless someone is actually willing to schedule the work :)",
              "createdAt": "2021-09-10T16:40:40Z",
              "path": "documentation/specs/static-graph.md",
              "diffHunk": "@@ -151,9 +151,13 @@ For example, here is a trimmed down `Microsoft.Net.Sdk` multitargeting project:\n </Project>\n ```\n \n-To summarize, there are two main patterns for build dimensions which are handled:\n-1. The project multitargets, in which case the SDK needs to specify the multitargeting build dimensions.\n-2. A different set of global properties are used to choose the dimension like with Configuration or Platform. The project graph supports this via multiple entry points.\n+To summarize, there are two main patterns for specifying build dimensions:\n+1. Multitargeting based. A multitargeting project self describes supported build dimensions. In this case the SDK needs to specify the multitargeting build dimensions. The graph then extracts innerbuilds from a given outer build. For example, the `TargetFramework` build dimension gets specified this way.\n+2. Global Property based: A top level set of global properties get applied to the graph entrypoints and get propagated downward through the graph. For example, the `Configuration` and `Platform` build dimensions get specified this way.\n+\n+Why does an outerbuild need to generate speculative edges to all of its innerbuilds? Why can't it use nuget to prune the speculative edges down to the compatible set?\n+- One big design constraint we imposed on static graph was to keep it agnostic of SDK implementation details. So the graph must not know about particular details of one language's SDK. We wanted a generic design that all language SDKs can leverage. We considered that calling nuget to get the compatible TargetFramework values breaks this rule, as both the concept of \"nuget\" and the concept of \"TargetFramework\" are implementation details of the .net SDK. If someone were to write a Java SDK, would \"calling nuget to get the compatible TargetFramework\" still be relevant? A solution to this is to allow SDKs to configure the graph with an extension point on \"how to collapse multiple speculative innerbuild edges into a smaller compatible set\", but we didn't have the time to design it yet.",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}