{
  "number": 6598,
  "title": "Use List<string> for excludes",
  "body": "My preference is to use `ImmutableSegmentedList<string>` for this (avoids the Large Object Heap and avoids the array copy in `ToImmutable()`), but I haven't finished implementing it yet in Microsoft.CodeAnalysis.Collections. In the mean time, I've corrected an acute performance problem by using ~`ImmutableArray<string>`~ `List<string>` instead of `ImmutableList<string>`.\r\n\r\nFixes [AB#1344683](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1344683)\r\n",
  "state": "MERGED",
  "createdAt": "2021-06-19T00:53:07Z",
  "updatedAt": "2021-06-25T20:36:26Z",
  "closedAt": "2021-06-25T18:34:28Z",
  "mergedAt": "2021-06-25T18:34:28Z",
  "additions": 7,
  "deletions": 3,
  "changedFiles": 1,
  "headRefName": "immutable-array",
  "isDraft": false,
  "author": {
    "login": "sharwell"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "28619125c225e7e9a40a838315ca2a9f63bc38e1",
          "message": "Use ImmutableArray<string> for excludes\n\nFixes AB#1344683",
          "committedDate": "2021-06-19T00:50:47Z",
          "author": {
            "name": "Sam Harwell",
            "email": "Sam.Harwell@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7e89aeb03603bd28f9714ba54916ea8d8809b748",
          "message": "Use List<T> to avoid array copies\n\nThese lists can eventually be converted to ImmutableSegmentedList<T>.\nSee #6601.",
          "committedDate": "2021-06-21T17:26:41Z",
          "author": {
            "name": "Sam Harwell",
            "email": "Sam.Harwell@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "team triage:\r\nWe think this can just be a List. Can you change it to that to avoid the initial allocation cost at ToImmutable time?",
              "createdAt": "2021-06-21T15:06:01Z",
              "path": "src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs",
              "diffHunk": "@@ -167,7 +167,7 @@ class IncludeOperationBuilder : OperationBuilderWithMetadata\n             public int ElementOrder { get; set; }\n             public string RootDirectory { get; set; }\n \n-            public ImmutableList<string>.Builder Excludes { get; } = ImmutableList.CreateBuilder<string>();\n+            public ImmutableArray<string>.Builder Excludes { get; } = ImmutableArray.CreateBuilder<string>();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "\u27a1\ufe0f Changed to `List<T>` and added a tracking issue to convert back to `ImmutableSegmentedList<T>` once available.",
              "createdAt": "2021-06-21T17:27:48Z",
              "path": "src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs",
              "diffHunk": "@@ -167,7 +167,7 @@ class IncludeOperationBuilder : OperationBuilderWithMetadata\n             public int ElementOrder { get; set; }\n             public string RootDirectory { get; set; }\n \n-            public ImmutableList<string>.Builder Excludes { get; } = ImmutableList.CreateBuilder<string>();\n+            public ImmutableArray<string>.Builder Excludes { get; } = ImmutableArray.CreateBuilder<string>();",
              "author": {
                "login": "sharwell"
              }
            }
          ]
        }
      }
    ]
  }
}