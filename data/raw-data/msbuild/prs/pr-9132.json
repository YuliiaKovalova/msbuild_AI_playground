{
  "number": 9132,
  "title": "Expose Binlog reader API needed for sensitive data redacting",
  "body": "Contributes to #9089\r\n\r\n### Context\r\nThe simpliest way of redacting specific strings from binlogs is by replaying it via reader, while altering strings and immediately writing to new binlog via writer. To allow this scenario - the string manipulation during reading is exposed.\r\nBased on team decision - the actual leveraging of the exposed functionality will currently live outside of this repo\r\n\r\n\r\n### Changes Made\r\n* Added interfaces with events\r\n* Added EventArgs allowing manipulation of the read strings (return value or ref argument of an event is an antipattern. Alternative we could use a `Span<char>` as an event arg - allowing in-place changes - but that would mean we'd need to create the span [which involves copying of the internal string buffer], for each read string, even those we wouldn't need to alter)\r\n* Made reader code nullable compatible\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2023-08-16T15:35:15Z",
  "updatedAt": "2023-08-24T02:21:39Z",
  "closedAt": "2023-08-24T02:21:39Z",
  "mergedAt": "2023-08-24T02:21:39Z",
  "additions": 238,
  "deletions": 118,
  "changedFiles": 10,
  "headRefName": "proto/binlog-reading-api",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "857519442cdad29d5d531be79781cfeec17bc7d2",
          "message": "Expose Binlog reader API needed for sensitive data redacting",
          "committedDate": "2023-08-16T15:29:28Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "05207ceecde7635b3bf0478973f9fea12373f479",
          "message": "Reflect PR comments",
          "committedDate": "2023-08-17T13:36:53Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a57db5014f8d30a52f9b023d4fa977ed605a5633",
          "message": "Facilitate older binlogs",
          "committedDate": "2023-08-17T13:57:13Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8e574f867566e241e3aaddf90e7de33db892c506",
          "message": "Merge remote-tracking branch 'upstream/main' into proto/binlog-reading-api",
          "committedDate": "2023-08-21T19:33:03Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "36add103981f616a38a9c7fc105ed8ba56bc521f",
          "message": "Reflect PR comments",
          "committedDate": "2023-08-23T15:53:31Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "rekicking CLA bot",
        "createdAt": "2023-08-23T15:58:18Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2023-08-23T15:58:49Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2023-08-23T16:00:42Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nSlight preference for a style more like:\r\n\r\nBEA? instance = reader.Read();\r\nwhile (instance is not null)\r\n{\r\n...\r\ninstance = reader.Read();\r\n}",
              "createdAt": "2023-08-16T16:41:46Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs",
              "diffHunk": "@@ -38,48 +41,77 @@ public void Replay(string sourceFilePath)\n         }\n \n         /// <summary>\n-        /// Read the provided binary log file and raise corresponding events for each BuildEventArgs\n+        /// Creates a <see cref=\"BinaryReader\"/> for the provided binary log file.\n+        /// Performs decompression and buffering in the optimal way.\n+        /// Caller is responsible for disposing the returned reader.\n         /// </summary>\n-        /// <param name=\"sourceFilePath\">The full file path of the binary log file</param>\n-        /// <param name=\"cancellationToken\">A <see cref=\"CancellationToken\"/> indicating the replay should stop as soon as possible.</param>\n-        public void Replay(string sourceFilePath, CancellationToken cancellationToken)\n+        /// <param name=\"sourceFilePath\"></param>\n+        /// <returns></returns>\n+        public static BinaryReader OpenReader(string sourceFilePath)\n         {\n-            using (var stream = new FileStream(sourceFilePath, FileMode.Open, FileAccess.Read, FileShare.Read))\n+            Stream? stream = null;\n+            try\n             {\n-                var gzipStream = new GZipStream(stream, CompressionMode.Decompress, leaveOpen: true);\n+                stream = new FileStream(sourceFilePath, FileMode.Open, FileAccess.Read, FileShare.Read);\n+                var gzipStream = new GZipStream(stream, CompressionMode.Decompress, leaveOpen: false);\n \n                 // wrapping the GZipStream in a buffered stream significantly improves performance\n                 // and the max throughput is reached with a 32K buffer. See details here:\n                 // https://github.com/dotnet/runtime/issues/39233#issuecomment-745598847\n                 var bufferedStream = new BufferedStream(gzipStream, 32768);\n-                var binaryReader = new BinaryReader(bufferedStream);\n+                return new BinaryReader(bufferedStream);\n+            }\n+            catch(Exception)\n+            {\n+                stream?.Dispose();\n+                throw;\n+            }\n+        }\n \n-                int fileFormatVersion = binaryReader.ReadInt32();\n+        /// <summary>\n+        /// Read the provided binary log file and raise corresponding events for each BuildEventArgs\n+        /// </summary>\n+        /// <param name=\"sourceFilePath\">The full file path of the binary log file</param>\n+        /// <param name=\"cancellationToken\">A <see cref=\"CancellationToken\"/> indicating the replay should stop as soon as possible.</param>\n+        public void Replay(string sourceFilePath, CancellationToken cancellationToken)\n+        {\n+            using var binaryReader = OpenReader(sourceFilePath);\n+            Replay(binaryReader, cancellationToken);\n+        }\n+\n+        /// <summary>\n+        /// Read the provided binary log file and raise corresponding events for each BuildEventArgs\n+        /// </summary>\n+        /// <param name=\"binaryReader\">The binary log content binary reader - caller is responsible for disposing.</param>\n+        /// <param name=\"cancellationToken\">A <see cref=\"CancellationToken\"/> indicating the replay should stop as soon as possible.</param>\n+        public void Replay(BinaryReader binaryReader, CancellationToken cancellationToken)\n+        {\n+            int fileFormatVersion = binaryReader.ReadInt32();\n+\n+            // the log file is written using a newer version of file format\n+            // that we don't know how to read\n+            if (fileFormatVersion > BinaryLogger.FileFormatVersion)\n+            {\n+                var text = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"UnsupportedLogFileFormat\", fileFormatVersion, BinaryLogger.FileFormatVersion);\n+                throw new NotSupportedException(text);\n+            }\n \n-                // the log file is written using a newer version of file format\n-                // that we don't know how to read\n-                if (fileFormatVersion > BinaryLogger.FileFormatVersion)\n+            using var reader = new BuildEventArgsReader(binaryReader, fileFormatVersion);\n+            NotificationsSourceCreated?.Invoke(reader);\n+            while (true)\n+            {\n+                if (cancellationToken.IsCancellationRequested)\n                 {\n-                    var text = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"UnsupportedLogFileFormat\", fileFormatVersion, BinaryLogger.FileFormatVersion);\n-                    throw new NotSupportedException(text);\n+                    return;\n                 }\n \n-                using var reader = new BuildEventArgsReader(binaryReader, fileFormatVersion);\n-                while (true)\n+                BuildEventArgs? instance = reader.Read();\n+                if (instance == null)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It was pre-existing moved code (showed as change due to moving).\r\nBut yes - let's improve it since we are touching it! :-) \r\nI made it even more conscise leveraging the pattern matching:\r\n```C#\r\nwhile (!cancellationToken.IsCancellationRequested && reader.Read() is { } instance)\r\n{\r\n    Dispatch(instance);\r\n}\r\n```",
              "createdAt": "2023-08-17T13:38:26Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs",
              "diffHunk": "@@ -38,48 +41,77 @@ public void Replay(string sourceFilePath)\n         }\n \n         /// <summary>\n-        /// Read the provided binary log file and raise corresponding events for each BuildEventArgs\n+        /// Creates a <see cref=\"BinaryReader\"/> for the provided binary log file.\n+        /// Performs decompression and buffering in the optimal way.\n+        /// Caller is responsible for disposing the returned reader.\n         /// </summary>\n-        /// <param name=\"sourceFilePath\">The full file path of the binary log file</param>\n-        /// <param name=\"cancellationToken\">A <see cref=\"CancellationToken\"/> indicating the replay should stop as soon as possible.</param>\n-        public void Replay(string sourceFilePath, CancellationToken cancellationToken)\n+        /// <param name=\"sourceFilePath\"></param>\n+        /// <returns></returns>\n+        public static BinaryReader OpenReader(string sourceFilePath)\n         {\n-            using (var stream = new FileStream(sourceFilePath, FileMode.Open, FileAccess.Read, FileShare.Read))\n+            Stream? stream = null;\n+            try\n             {\n-                var gzipStream = new GZipStream(stream, CompressionMode.Decompress, leaveOpen: true);\n+                stream = new FileStream(sourceFilePath, FileMode.Open, FileAccess.Read, FileShare.Read);\n+                var gzipStream = new GZipStream(stream, CompressionMode.Decompress, leaveOpen: false);\n \n                 // wrapping the GZipStream in a buffered stream significantly improves performance\n                 // and the max throughput is reached with a 32K buffer. See details here:\n                 // https://github.com/dotnet/runtime/issues/39233#issuecomment-745598847\n                 var bufferedStream = new BufferedStream(gzipStream, 32768);\n-                var binaryReader = new BinaryReader(bufferedStream);\n+                return new BinaryReader(bufferedStream);\n+            }\n+            catch(Exception)\n+            {\n+                stream?.Dispose();\n+                throw;\n+            }\n+        }\n \n-                int fileFormatVersion = binaryReader.ReadInt32();\n+        /// <summary>\n+        /// Read the provided binary log file and raise corresponding events for each BuildEventArgs\n+        /// </summary>\n+        /// <param name=\"sourceFilePath\">The full file path of the binary log file</param>\n+        /// <param name=\"cancellationToken\">A <see cref=\"CancellationToken\"/> indicating the replay should stop as soon as possible.</param>\n+        public void Replay(string sourceFilePath, CancellationToken cancellationToken)\n+        {\n+            using var binaryReader = OpenReader(sourceFilePath);\n+            Replay(binaryReader, cancellationToken);\n+        }\n+\n+        /// <summary>\n+        /// Read the provided binary log file and raise corresponding events for each BuildEventArgs\n+        /// </summary>\n+        /// <param name=\"binaryReader\">The binary log content binary reader - caller is responsible for disposing.</param>\n+        /// <param name=\"cancellationToken\">A <see cref=\"CancellationToken\"/> indicating the replay should stop as soon as possible.</param>\n+        public void Replay(BinaryReader binaryReader, CancellationToken cancellationToken)\n+        {\n+            int fileFormatVersion = binaryReader.ReadInt32();\n+\n+            // the log file is written using a newer version of file format\n+            // that we don't know how to read\n+            if (fileFormatVersion > BinaryLogger.FileFormatVersion)\n+            {\n+                var text = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"UnsupportedLogFileFormat\", fileFormatVersion, BinaryLogger.FileFormatVersion);\n+                throw new NotSupportedException(text);\n+            }\n \n-                // the log file is written using a newer version of file format\n-                // that we don't know how to read\n-                if (fileFormatVersion > BinaryLogger.FileFormatVersion)\n+            using var reader = new BuildEventArgsReader(binaryReader, fileFormatVersion);\n+            NotificationsSourceCreated?.Invoke(reader);\n+            while (true)\n+            {\n+                if (cancellationToken.IsCancellationRequested)\n                 {\n-                    var text = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(\"UnsupportedLogFileFormat\", fileFormatVersion, BinaryLogger.FileFormatVersion);\n-                    throw new NotSupportedException(text);\n+                    return;\n                 }\n \n-                using var reader = new BuildEventArgsReader(binaryReader, fileFormatVersion);\n-                while (true)\n+                BuildEventArgs? instance = reader.Read();\n+                if (instance == null)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm wondering if it's better to have these be real methods that just don't do anything and we expect to be overridden.\r\n\r\nI think it's cleaner on the calling side if you know the method definitely exists.\r\n\r\nIt might be cleaner to set it this way, though, so if you prefer this, I think it's reasonable.",
              "createdAt": "2023-08-16T16:44:44Z",
              "path": "src/Build/Logging/BinaryLogger/IBuildEventStringsReader.cs",
              "diffHunk": "@@ -0,0 +1,26 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Logging\n+{\n+    /// <summary>\n+    /// An interface for notifications about reading strings from the binary log.\n+    /// </summary>\n+    public interface IBuildEventStringsReader\n+    {\n+        /// <summary>\n+        /// An event that allows the subscriber to be notified when a string is read from the binary log.\n+        /// Subscriber may adjust the string by setting <see cref=\"StringReadEventArgs.StringToBeUsed\"/> property.\n+        /// The passed event arg can be reused and should not be stored.\n+        /// </summary>\n+        public event Action<StringReadEventArgs>? StringReadDone;\n+\n+        /// <summary>\n+        /// An event that allows the caller to be notified when a string is encountered in the binary log.\n+        /// BinaryReader passed in ctor is at the beginning of the string at this point.\n+        /// </summary>\n+        public event Action? StringEncountered;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This might be opinionated - but let me flush my thinking - if it sounds agreeable.\r\n\r\nI see 3 main options:\r\n* Inheritance and virtual methods\r\n* Passing in a member with callbacks\r\n* Exposing events\r\n\r\nI rulled out the first one, as whover wants to interact with reading, or even just be notified (as they can be supplying their own underlying stream and perform replacements only based on information about the string was just hit and then fully read) should not be forced to inherit the reader. It's basically inheritance vs composition.\r\n\r\nPassing in a callbacks holder sounds good. Though I plan to have multiple sensitive data redactors (based on explicitly given tokens and then hopefully one that can autodetect known types of secrets. In future other things can be added - like obfuscating paths etc.), plus I plan to use just some of the hooks (the simplest is the `StringReadDone` - as you get the string read and can replace it. But it might be more performant to split underlying read stream to the write stream and only detach it for the duration the string is being read - hence the need for `StringEncountered`). The multiple consumers and consuming just of some of the information is exactly what events are created for.\r\n\r\n\r\nBtw. the fact that the recipient might or might not be present is actualy beneficial (as opposed to allways present virtual method) - as we can decide to skip performing of some of the unnecessary actions (e.g. wrapping the string into EventArgs)",
              "createdAt": "2023-08-17T13:51:35Z",
              "path": "src/Build/Logging/BinaryLogger/IBuildEventStringsReader.cs",
              "diffHunk": "@@ -0,0 +1,26 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Logging\n+{\n+    /// <summary>\n+    /// An interface for notifications about reading strings from the binary log.\n+    /// </summary>\n+    public interface IBuildEventStringsReader\n+    {\n+        /// <summary>\n+        /// An event that allows the subscriber to be notified when a string is read from the binary log.\n+        /// Subscriber may adjust the string by setting <see cref=\"StringReadEventArgs.StringToBeUsed\"/> property.\n+        /// The passed event arg can be reused and should not be stored.\n+        /// </summary>\n+        public event Action<StringReadEventArgs>? StringReadDone;\n+\n+        /// <summary>\n+        /// An event that allows the caller to be notified when a string is encountered in the binary log.\n+        /// BinaryReader passed in ctor is at the beginning of the string at this point.\n+        /// </summary>\n+        public event Action? StringEncountered;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I guess maybe part of my confusion is that I don't think I fully understand how a user is intended to use this. We have an IBuildEventStringsReader (the BuildEventArgsReader), but how does a user tweak that as they're executing a build? Or is the idea that they build normally, creating a normal binlog, then have a second pass where they filter it? If so, would you mind explaining that part?\r\n\r\nWith these actions, users are not required to implement them, correct?\r\n\r\nI'm not sure if this is a real disadvantage, but the disadvantage I was thinking of perf-wise was that it looks like you were using reflection to find the method (that might not exist) and invoke it, and that might be a little slow. I could be wrong on that point, though.",
              "createdAt": "2023-08-22T23:03:14Z",
              "path": "src/Build/Logging/BinaryLogger/IBuildEventStringsReader.cs",
              "diffHunk": "@@ -0,0 +1,26 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Logging\n+{\n+    /// <summary>\n+    /// An interface for notifications about reading strings from the binary log.\n+    /// </summary>\n+    public interface IBuildEventStringsReader\n+    {\n+        /// <summary>\n+        /// An event that allows the subscriber to be notified when a string is read from the binary log.\n+        /// Subscriber may adjust the string by setting <see cref=\"StringReadEventArgs.StringToBeUsed\"/> property.\n+        /// The passed event arg can be reused and should not be stored.\n+        /// </summary>\n+        public event Action<StringReadEventArgs>? StringReadDone;\n+\n+        /// <summary>\n+        /// An event that allows the caller to be notified when a string is encountered in the binary log.\n+        /// BinaryReader passed in ctor is at the beginning of the string at this point.\n+        /// </summary>\n+        public event Action? StringEncountered;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this a binary breaking change? I think not because string? is exactly the same as string, but I think it would be if any of these were structs. Is that a correct assessment?",
              "createdAt": "2023-08-16T16:57:29Z",
              "path": "src/Framework/ProjectStartedEventArgs.cs",
              "diffHunk": "@@ -76,11 +76,11 @@ protected ProjectStartedEventArgs()\n             int projectId,\n             string message,\n             string helpKeyword,\n-            string projectFile,\n-            string targetNames,\n-            IEnumerable properties,\n-            IEnumerable items,\n-            BuildEventContext parentBuildEventContext)\n+            string? projectFile,",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Should be ok for reference type parameters",
              "createdAt": "2023-08-17T13:51:59Z",
              "path": "src/Framework/ProjectStartedEventArgs.cs",
              "diffHunk": "@@ -76,11 +76,11 @@ protected ProjectStartedEventArgs()\n             int projectId,\n             string message,\n             string helpKeyword,\n-            string projectFile,\n-            string targetNames,\n-            IEnumerable properties,\n-            IEnumerable items,\n-            BuildEventContext parentBuildEventContext)\n+            string? projectFile,",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this sufficient? Do you not also need it on ReadString and maybe GetStringFromRecord?",
              "createdAt": "2023-08-16T17:07:19Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs",
              "diffHunk": "@@ -258,9 +267,17 @@ private void ReadNameValueList()\n                 $\"NameValueList record number {recordNumber} is invalid: index {id} is not within {stringRecords.Count}.\");\n         }\n \n+        private readonly StringReadEventArgs stringReadEventArgs = new StringReadEventArgs(string.Empty);\n         private void ReadStringRecord()\n         {\n+            this.StringEncountered?.Invoke();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Oh - good catch!\r\nGetStringFromRecord is fine - as it only gets strings obtained via ReadStringRecord. But for v < 10 binlogs, the ReadString can be called in other places as well - so moved the hooks there",
              "createdAt": "2023-08-17T13:58:26Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs",
              "diffHunk": "@@ -258,9 +267,17 @@ private void ReadNameValueList()\n                 $\"NameValueList record number {recordNumber} is invalid: index {id} is not within {stringRecords.Count}.\");\n         }\n \n+        private readonly StringReadEventArgs stringReadEventArgs = new StringReadEventArgs(string.Empty);\n         private void ReadStringRecord()\n         {\n+            this.StringEncountered?.Invoke();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "You say null isn't expected here, but didn't you annotate it as explicitly nullable later in this PR? If it would throw an error if it's null, should we instead harden against that?",
              "createdAt": "2023-08-16T17:10:52Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs",
              "diffHunk": "@@ -381,7 +398,8 @@ private BuildEventArgs ReadBuildFinishedEventArgs()\n         private BuildEventArgs ReadProjectEvaluationStartedEventArgs()\n         {\n             var fields = ReadBuildEventArgsFields();\n-            var projectFile = ReadDeduplicatedString();\n+            // Null message arg is not expected\n+            var projectFile = ReadDeduplicatedString() ?? string.Empty;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The comment wasn't clear - I adjusted it.\r\nIt can be expected here (especially for older binlog versions), but the ProjectEvaluationStartedEventArgs doesn't expect that - it accepts it as nonnullable. So I'd either need to change that declaration - which is OK for current binary format; or just adapt the older binlogs by coallescing null to empty string. ",
              "createdAt": "2023-08-17T14:00:37Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs",
              "diffHunk": "@@ -381,7 +398,8 @@ private BuildEventArgs ReadBuildFinishedEventArgs()\n         private BuildEventArgs ReadProjectEvaluationStartedEventArgs()\n         {\n             var fields = ReadBuildEventArgsFields();\n-            var projectFile = ReadDeduplicatedString();\n+            // Null message arg is not expected\n+            var projectFile = ReadDeduplicatedString() ?? string.Empty;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I think I should take at least half the blame for missing the \"Evaluation\" part and just reading ProjectStartedEventArgs here \ud83d\ude06  Makes more sense now, thanks! \ud83d\udc4d",
              "createdAt": "2023-08-22T23:06:34Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs",
              "diffHunk": "@@ -381,7 +398,8 @@ private BuildEventArgs ReadBuildFinishedEventArgs()\n         private BuildEventArgs ReadProjectEvaluationStartedEventArgs()\n         {\n             var fields = ReadBuildEventArgsFields();\n-            var projectFile = ReadDeduplicatedString();\n+            // Null message arg is not expected\n+            var projectFile = ReadDeduplicatedString() ?? string.Empty;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are Actions the right events here? It might be for this one, but for StringEncountered definitely, I would think a Func<string, string> is most natural, as that gives anyone providing a value for it the opportunity to inspect the string being read, modify it as they wish, and return the modified result.\r\n\r\nOne implementation, for instance, might be changing some concerning string to a pre-specified obfuscated value and leaving everything else the same. Another might just be the identity function. A third could take every string and hash it. I'm not entirely clear on how the user could use StringEncountered currently to actually change the log produced is what I'm saying, I guess.",
              "createdAt": "2023-08-16T17:17:19Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs",
              "diffHunk": "@@ -67,18 +65,27 @@ public BuildEventArgsReader(BinaryReader binaryReader, int fileFormatVersion)\n \n         public void Dispose()\n         {\n-            if (stringStorage != null)\n-            {\n-                stringStorage.Dispose();\n-                stringStorage = null;\n-            }\n+            stringStorage.Dispose();\n         }\n \n+        /// <summary>\n+        /// An event that allows the subscriber to be notified when a string is read from the binary log.\n+        /// Subscriber may adjust the string by setting <see cref=\"StringReadEventArgs.StringToBeUsed\"/> property.\n+        /// The passed event arg can be reused and should not be stored.\n+        /// </summary>\n+        public event Action<StringReadEventArgs>? StringReadDone;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This results from the decision to use events. Funcs are not good pattern for events. The recommended way of passing values out is via wrapping that in the settable property in the arg of event - see e.g. https://stackoverflow.com/a/1210059/2308106 (by Dustin :-))\r\n\r\nSo you'd e.g.:\r\n```C#\r\nreader.StringReadDone += args => args.StringToBeUsed = args.StringToBeUsed.Replace(myPwd, \"***\");\r\n```\r\n",
              "createdAt": "2023-08-17T14:06:23Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs",
              "diffHunk": "@@ -67,18 +65,27 @@ public BuildEventArgsReader(BinaryReader binaryReader, int fileFormatVersion)\n \n         public void Dispose()\n         {\n-            if (stringStorage != null)\n-            {\n-                stringStorage.Dispose();\n-                stringStorage = null;\n-            }\n+            stringStorage.Dispose();\n         }\n \n+        /// <summary>\n+        /// An event that allows the subscriber to be notified when a string is read from the binary log.\n+        /// Subscriber may adjust the string by setting <see cref=\"StringReadEventArgs.StringToBeUsed\"/> property.\n+        /// The passed event arg can be reused and should not be stored.\n+        /// </summary>\n+        public event Action<StringReadEventArgs>? StringReadDone;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Didn't you forget to add content here? :)",
              "createdAt": "2023-08-23T12:12:23Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs",
              "diffHunk": "@@ -38,48 +41,67 @@ public void Replay(string sourceFilePath)\n         }\n \n         /// <summary>\n-        /// Read the provided binary log file and raise corresponding events for each BuildEventArgs\n+        /// Creates a <see cref=\"BinaryReader\"/> for the provided binary log file.\n+        /// Performs decompression and buffering in the optimal way.\n+        /// Caller is responsible for disposing the returned reader.\n         /// </summary>\n-        /// <param name=\"sourceFilePath\">The full file path of the binary log file</param>\n-        /// <param name=\"cancellationToken\">A <see cref=\"CancellationToken\"/> indicating the replay should stop as soon as possible.</param>\n-        public void Replay(string sourceFilePath, CancellationToken cancellationToken)\n+        /// <param name=\"sourceFilePath\"></param>\n+        /// <returns></returns>",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: This could be done by using `finally` without rethrowing.",
              "createdAt": "2023-08-23T12:16:21Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs",
              "diffHunk": "@@ -38,48 +41,67 @@ public void Replay(string sourceFilePath)\n         }\n \n         /// <summary>\n-        /// Read the provided binary log file and raise corresponding events for each BuildEventArgs\n+        /// Creates a <see cref=\"BinaryReader\"/> for the provided binary log file.\n+        /// Performs decompression and buffering in the optimal way.\n+        /// Caller is responsible for disposing the returned reader.\n         /// </summary>\n-        /// <param name=\"sourceFilePath\">The full file path of the binary log file</param>\n-        /// <param name=\"cancellationToken\">A <see cref=\"CancellationToken\"/> indicating the replay should stop as soon as possible.</param>\n-        public void Replay(string sourceFilePath, CancellationToken cancellationToken)\n+        /// <param name=\"sourceFilePath\"></param>\n+        /// <returns></returns>\n+        public static BinaryReader OpenReader(string sourceFilePath)\n         {\n-            using (var stream = new FileStream(sourceFilePath, FileMode.Open, FileAccess.Read, FileShare.Read))\n+            Stream? stream = null;\n+            try\n             {\n-                var gzipStream = new GZipStream(stream, CompressionMode.Decompress, leaveOpen: true);\n+                stream = new FileStream(sourceFilePath, FileMode.Open, FileAccess.Read, FileShare.Read);\n+                var gzipStream = new GZipStream(stream, CompressionMode.Decompress, leaveOpen: false);\n \n                 // wrapping the GZipStream in a buffered stream significantly improves performance\n                 // and the max throughput is reached with a 32K buffer. See details here:\n                 // https://github.com/dotnet/runtime/issues/39233#issuecomment-745598847\n                 var bufferedStream = new BufferedStream(gzipStream, 32768);\n-                var binaryReader = new BinaryReader(bufferedStream);\n+                return new BinaryReader(bufferedStream);\n+            }\n+            catch(Exception)",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Unfortunately not possible here - we want to dispose only on failure case. On success case we want to leave open (unlike `finally`)",
              "createdAt": "2023-08-23T15:55:08Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs",
              "diffHunk": "@@ -38,48 +41,67 @@ public void Replay(string sourceFilePath)\n         }\n \n         /// <summary>\n-        /// Read the provided binary log file and raise corresponding events for each BuildEventArgs\n+        /// Creates a <see cref=\"BinaryReader\"/> for the provided binary log file.\n+        /// Performs decompression and buffering in the optimal way.\n+        /// Caller is responsible for disposing the returned reader.\n         /// </summary>\n-        /// <param name=\"sourceFilePath\">The full file path of the binary log file</param>\n-        /// <param name=\"cancellationToken\">A <see cref=\"CancellationToken\"/> indicating the replay should stop as soon as possible.</param>\n-        public void Replay(string sourceFilePath, CancellationToken cancellationToken)\n+        /// <param name=\"sourceFilePath\"></param>\n+        /// <returns></returns>\n+        public static BinaryReader OpenReader(string sourceFilePath)\n         {\n-            using (var stream = new FileStream(sourceFilePath, FileMode.Open, FileAccess.Read, FileShare.Read))\n+            Stream? stream = null;\n+            try\n             {\n-                var gzipStream = new GZipStream(stream, CompressionMode.Decompress, leaveOpen: true);\n+                stream = new FileStream(sourceFilePath, FileMode.Open, FileAccess.Read, FileShare.Read);\n+                var gzipStream = new GZipStream(stream, CompressionMode.Decompress, leaveOpen: false);\n \n                 // wrapping the GZipStream in a buffered stream significantly improves performance\n                 // and the max throughput is reached with a 32K buffer. See details here:\n                 // https://github.com/dotnet/runtime/issues/39233#issuecomment-745598847\n                 var bufferedStream = new BufferedStream(gzipStream, 32768);\n-                var binaryReader = new BinaryReader(bufferedStream);\n+                return new BinaryReader(bufferedStream);\n+            }\n+            catch(Exception)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "minor: often people say `event` is a legacy concept, instead people say Reactive should be used. Is it a fact? I couldn't find any articles, seems like an opinion. \r\n\r\nAlso, we'd have to introduce Reactive libs to MSBUILD, more dependency fun. Unsure if it's worth it.",
              "createdAt": "2023-08-23T14:04:29Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs",
              "diffHunk": "@@ -28,6 +26,11 @@ static BinaryLogReplayEventSource()\n             _ = ItemGroupLoggingHelper.ItemGroupIncludeLogMessagePrefix;\n         }\n \n+        /// <summary>\n+        /// Raised once <see cref=\"BuildEventArgsReader\"/> is created during replaying\n+        /// </summary>\n+        public event Action<IBuildEventArgsReaderNotifications>? NotificationsSourceCreated;",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "Ah - Rx - love it :-)\r\nThough introducing new dependencies to VS requires performance team approval, which requires strong justification (we e.g. rolled back our change leveraging faster System.IO.Hashing lib) ",
              "createdAt": "2023-08-23T15:57:20Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs",
              "diffHunk": "@@ -28,6 +26,11 @@ static BinaryLogReplayEventSource()\n             _ = ItemGroupLoggingHelper.ItemGroupIncludeLogMessagePrefix;\n         }\n \n+        /// <summary>\n+        /// Raised once <see cref=\"BuildEventArgsReader\"/> is created during replaying\n+        /// </summary>\n+        public event Action<IBuildEventArgsReaderNotifications>? NotificationsSourceCreated;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}