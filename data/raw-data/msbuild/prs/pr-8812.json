{
  "number": 8812,
  "title": "Moving from SHA1 to SHA256 for Hash task",
  "body": "Fixes (internal) https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1645155/\r\n\r\n### Context\r\nMoving away from crypthographicaly weak `SHA1` to `SHA256` for Hash task\r\n\r\n\r\n### Changes Made\r\n`SHA1` - `SHA256`\r\n\r\n\r\n### Testing\r\nExisting tests\r\n",
  "state": "MERGED",
  "createdAt": "2023-05-30T11:51:22Z",
  "updatedAt": "2023-07-11T12:36:03Z",
  "closedAt": "2023-07-11T12:01:10Z",
  "mergedAt": "2023-07-11T12:01:10Z",
  "additions": 80,
  "deletions": 71,
  "changedFiles": 3,
  "headRefName": "proto/hash-task-sha256",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": {
    "title": "VS 17.8"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "145645a13d17e99b8c90b98073789e93c0cb770e",
          "message": "Moving from SHA1 to SHA256 for Hash task",
          "committedDate": "2023-07-10T07:50:13Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b86e019ae813952e4626723855a4b496503d36e6",
          "message": "Update precomputed tests",
          "committedDate": "2023-07-10T07:50:13Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "81d8decd632a05fae51671775706068f68393bcd",
          "message": "Move change behind ChangeWave",
          "committedDate": "2023-07-10T07:52:00Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e9cefe2bf2ce4952093512ce00d3891ff7bbc3d0",
          "message": "Update Hash.cs",
          "committedDate": "2023-07-10T07:52:00Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f6ccea7bbfc8b95d871cb315d88a85499df5f643",
          "message": "Reflect PR suggestions",
          "committedDate": "2023-07-11T11:32:46Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "We probably need a breaking change notice for this one, yeah?",
        "createdAt": "2023-05-31T14:33:53Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> We probably need a breaking change notice for this one, yeah?\r\n\r\nThanks for bringing this up @baronfel\r\n\r\nI haven't find any learn.microsoft.com documentation for this task, so probably only source serves as a documentation and it makes it clear this is subject to change: https://github.com/dotnet/msbuild/blob/main/src/Tasks/Hash.cs#L17\r\n\r\nSo it might not be necessary - though it certainly would not hurt\r\n",
        "createdAt": "2023-05-31T14:38:33Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "We should document the task with the explicit \"the hash function is an implementation detail and may vary between MSBuild engine versions\" caveat. But I'd say we should also call it out as an info-level \"breaking\" change.",
        "createdAt": "2023-06-06T20:24:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald - I wasn't able to find documentation for the `HashTask` - only the GH code comments - those explicitly mention that hash algorithm is subject to change between releases. I agree with the breaking change - @baronfel I believe you planned to mention it, correct? \r\nChet as well adviced to merge it only into 17.8 (and behind changewave), to prevent mid-cycle (sdk) breaking change - so I'm keeping this open now ",
        "createdAt": "2023-06-08T10:40:30Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "SHA256 is 15% - 25% slower than SHA1. Given the intended use case of HashTask which is \"to measure only uniqueness between build executions\" this task does not required to use \"Strong cryptography\". I am not sure if this pose real possibility of perf regression as it hashes only itemspec, but even then, I am not convinced it is actually needed.\r\n\r\n@rainersigwald, @JanKrivanek  Can we please reconsider it?",
        "createdAt": "2023-06-12T08:30:30Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "> SHA256 is 15% - 25% slower than SHA1. Given the intended use case of HashTask which is \"to measure only uniqueness between build executions\" this task does not required to use \"Strong cryptography\". I am not sure if this pose real possibility of perf regression as it hashes only itemspec, but even then, I am not convinced it is actually needed.\r\n> \r\n> @rainersigwald, @JanKrivanek Can we please reconsider it?\r\n\r\nStaying with `SHA1` [is not an option](https://liquid.microsoft.com/Web/Object/Read/ms.security/Requirements/Microsoft.Security.Cryptography.10021#Zguide)\r\n\r\nWe can pull in `System.IO.Hashing` - then we'd be able to use some [non-cryptographic hash algo](https://learn.microsoft.com/en-us/dotnet/api/system.io.hashing.noncryptographichashalgorithm) for an improved perf. For that I however don't have full context of what's needed to insert new dep(s) into VS (I believe I can get some inspiration in [PR like this](https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/248766?_a=files) [internal], but still I would like to fully understand the requirements and consequences).\r\n\r\n[A dummy search](https://github.com/search?q=path%3A**%2F*.targets+%3CHash+&type=code) seems to yield some usages within our repos and some in the wild, not much though - so priority might be bit questionable.\r\n\r\nThat being said - if anybody is willing to give me quick crash course (or point me to some PR (set of PRs) containing all required changes) I'm up for attempting to rewrite this with `System.IO.Hashing`",
        "createdAt": "2023-06-12T09:38:05Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "In case we'll choose to leverage System.IO.Hashing - than this is related: https://github.com/dotnet/roslyn/issues/68700",
        "createdAt": "2023-06-20T20:34:11Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> In case we'll choose to leverage System.IO.Hashing - than this is related: https://github.com/dotnet/roslyn/issues/68700\r\n\r\nI'm a little confused here about the roslyn side.  The hash algorithm we use it not an implementation detail.  It's a contract we have (including on the PDB side, where we use these hashes to match things up).  I'm not understanding the idea here in terms of changing things out.  \r\n\r\nNote: i would have been happy to stay with sha1 (since we don't use this for cryptographic purposes).  But my recollectino was that it was a mandatory MS thing (with *no* exceptions allowed *whatsoever*) to maintain support for sha1 without sha256 support.  ",
        "createdAt": "2023-06-20T20:36:37Z",
        "author": {
          "login": "CyrusNajmabadi"
        }
      },
      {
        "body": "The Prism measurements of current impact: [internal link] https://prism.vsdata.io/?query=bf%3DMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.Hash.Execute&eventType=cpu\r\n\r\n0.12% of CPU used by the `Hash` task in measured case. It sounds like the ~20% degradation would be negligible",
        "createdAt": "2023-07-10T06:25:59Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "# Perf impact measurements\r\n\r\nConclusion - for a OrchardCore build from command line and from VS the SHA256 backed Hash tasks added ~80ms to build time (both full rebuild and incremental rebuild) - this has more weight on no-change-incremental build (which is faster), but still the slowdown is on the edge 0.2% of the entire build time.\r\n\r\n\r\nBelow are samples of measurement for command line build\r\n\r\n## Full rebuild\r\nComparison of Orchard Core full rebuild via `msbuild.exe orchardcore.sln` (the entire build took ~90 seconds for both scenarios):\r\n\r\n\r\n### Hash task backed by SHA1\r\nCPU sampling:\r\n![image](https://github.com/dotnet/msbuild/assets/3809076/89d12077-903e-44a2-9edd-74510b6255ff)\r\nMSBuild Task events:\r\n![image](https://github.com/dotnet/msbuild/assets/3809076/2a1c3104-83b6-4685-b888-462f7763a9ab)\r\n\r\n\r\n\r\n### Hash task backed by SHA256\r\nCPU sampling:\r\n![image](https://github.com/dotnet/msbuild/assets/3809076/1615b206-ead7-4347-a917-00d1375150cd)\r\nMSBuild Task events:\r\n![image](https://github.com/dotnet/msbuild/assets/3809076/20337701-563c-48a4-8d49-c1e84cd305dd)\r\n\r\n\r\n## Incremental build\r\nComparison of Orchard Core incremental rebuild via `msbuild.exe orchardcore.sln` with no changes (the entire build took ~30 seconds for both scenarios):\r\n\r\n### Hash task backed by SHA1\r\nCPU sampling:\r\n![image](https://github.com/dotnet/msbuild/assets/3809076/e81c46fd-fb29-400a-8eb8-6ca22b0ba685)\r\nMSBuild Task events:\r\n![image](https://github.com/dotnet/msbuild/assets/3809076/92efc025-0cb9-4fae-968d-05b4153bb382)\r\n\r\n### Hash task backed by SHA256\r\nCPU sampling:\r\n![image](https://github.com/dotnet/msbuild/assets/3809076/c56a0de0-f122-4c21-ad23-e3cba111d820)\r\nMSBuild Task events:\r\n![image](https://github.com/dotnet/msbuild/assets/3809076/3df57f74-a313-4ac3-bed5-d7b262ecad72)\r\n",
        "createdAt": "2023-07-10T12:35:19Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}