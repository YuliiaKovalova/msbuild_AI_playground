{
  "number": 9138,
  "title": "Bring back eval results",
  "body": "~Still working on final testing.~\r\nTested building a simple project with and without graph and with and without specifying properties/targets/items, and it works.\r\n\r\nTried building a slnf (that should fail if I specify any properties/targets/items) without any of those but with and without graph, and it succeeded.\r\n\r\nFirst commit just reverts the revert.\r\n\r\nSecond commit attempts to fix it.\r\n\r\nThird commit really fixes it.\r\n\r\nFourth commit tweaks a test.\r\n\r\nFifth commit tightens the access to the graph and ensures sln/slnf graph builds aren't affected.",
  "state": "MERGED",
  "createdAt": "2023-08-17T23:01:45Z",
  "updatedAt": "2023-08-30T12:59:29Z",
  "closedAt": "2023-08-30T12:03:47Z",
  "mergedAt": "2023-08-30T12:03:47Z",
  "additions": 1122,
  "deletions": 32,
  "changedFiles": 24,
  "headRefName": "bring-back-eval-results",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "85cda752cb9b597bcc76e5e42650afe7e366e26a",
          "message": "Revert \"Revert \"Get eval results 2 - getProperty, getItem, getTargetResult (#8792)\" (#9136)\"\n\nThis reverts commit 4e497239d165bf45b7c54445dc725e4cb9a298f0.",
          "committedDate": "2023-08-17T22:55:57Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "81e938175d624e48dc379981e295dac7b0103a7f",
          "message": "Fix graph case",
          "committedDate": "2023-08-17T23:00:59Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "65e9162ec5aa855f327c7937f35499c390154537",
          "message": "Always include IsGraphBuild property",
          "committedDate": "2023-08-18T20:21:24Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4d1cf37f787fb954ed825ea18a950da96a7fd3a4",
          "message": "Tweak test to include graph",
          "committedDate": "2023-08-25T18:09:17Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bed65c760bdcf616ff6e2576dc72a7a24b8e6aba",
          "message": "PR comment + moving into if",
          "committedDate": "2023-08-25T19:23:11Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f76bc025a643eb1e00597dcc3739564d5231a3e6",
          "message": "Avoid exception on mismatched global properties",
          "committedDate": "2023-08-29T21:38:59Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6f528f9872a102db7067ccbb11d6b93288d9aa34",
          "message": "Merge bring-back-eval-results into main (#9138)",
          "committedDate": "2023-08-29T21:43:07Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@dfederm, any chance you could glance at the graph change I made here to make sure it looks legit to you?",
        "createdAt": "2023-08-25T18:12:49Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> @dfederm, any chance you could glance at the graph change I made here to make sure it looks legit to you?\r\n\r\nLooks more or less like what we brainstormed offline. Since there appears to be an e2e test gap for graph, consider running a test build with `/graph` (probably with and without your new feature too?) just to ensure it doesn't blow up.",
        "createdAt": "2023-08-25T18:23:36Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "I manually built my test project, and I got all the properties/items/etc. I wanted regardless of graph \ud83d\ude42",
        "createdAt": "2023-08-25T18:25:48Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "(Building it normally with and without graph also worked)",
        "createdAt": "2023-08-25T18:27:47Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "There should only ever be exactly one of these in this codepath, right?\r\n\r\n```suggestion\r\n                                    ProjectGraphEntryPoint entryPoint = graphBuildRequest.ProjectGraphEntryPoints.Single();\r\n```",
              "createdAt": "2023-08-25T19:01:07Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1427,17 +1532,29 @@ private static void ResetGatheringSwitchesState()\n                             {\n                                 if (graphBuildOptions != null)\n                                 {\n-                                    (result, exception) = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+                                    graphResult = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+                                    ProjectGraphEntryPoint entryPoint = graphBuildRequest.ProjectGraphEntryPoints.First();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Likewise if there is more than one match here things are broken, right?\r\n```suggestion\r\n                                    result = graphResult.ResultsByNode.Single(\r\n```",
              "createdAt": "2023-08-25T19:02:46Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1427,17 +1532,29 @@ private static void ResetGatheringSwitchesState()\n                             {\n                                 if (graphBuildOptions != null)\n                                 {\n-                                    (result, exception) = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+                                    graphResult = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+                                    ProjectGraphEntryPoint entryPoint = graphBuildRequest.ProjectGraphEntryPoints.First();\n+                                    if (!entryPoint.GlobalProperties.ContainsKey(PropertyNames.IsGraphBuild))\n+                                    {\n+                                        entryPoint.GlobalProperties[PropertyNames.IsGraphBuild] = \"true\";\n+                                    }\n+\n+                                    result = graphResult.ResultsByNode.First(",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I remember you fighting with this but I don't remember how we got to this point. Is it right to set it here? Is it right that the graph doesn't set it?",
              "createdAt": "2023-08-25T19:06:33Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1427,17 +1532,29 @@ private static void ResetGatheringSwitchesState()\n                             {\n                                 if (graphBuildOptions != null)\n                                 {\n-                                    (result, exception) = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+                                    graphResult = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+                                    ProjectGraphEntryPoint entryPoint = graphBuildRequest.ProjectGraphEntryPoints.First();\n+                                    if (!entryPoint.GlobalProperties.ContainsKey(PropertyNames.IsGraphBuild))\n+                                    {\n+                                        entryPoint.GlobalProperties[PropertyNames.IsGraphBuild] = \"true\";\n+                                    }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "@dfederm, feel free to opine, but my understanding is that it's not expected to be set for the entry point\u2014the entry point is just created with the set of global properties known by XMake. The graph itself _does_ set it, and that means that when we get the result back, it has that property set as a global property...but then the set of known global properties per the entry point doesn't match the set that comes back from the result, so I'm adjusting that here.",
              "createdAt": "2023-08-25T19:22:14Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1427,17 +1532,29 @@ private static void ResetGatheringSwitchesState()\n                             {\n                                 if (graphBuildOptions != null)\n                                 {\n-                                    (result, exception) = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+                                    graphResult = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+                                    ProjectGraphEntryPoint entryPoint = graphBuildRequest.ProjectGraphEntryPoints.First();\n+                                    if (!entryPoint.GlobalProperties.ContainsKey(PropertyNames.IsGraphBuild))\n+                                    {\n+                                        entryPoint.GlobalProperties[PropertyNames.IsGraphBuild] = \"true\";\n+                                    }",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "\"The entry point doesn't match anything in the actual graph\" is the part that feels wrong to me. Also in retrospect `ProjectGraphEntryPoint.GlobalProperties` should maybe be an `IReadOnlyDictionary` instead but alas.",
              "createdAt": "2023-08-25T19:53:18Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1427,17 +1532,29 @@ private static void ResetGatheringSwitchesState()\n                             {\n                                 if (graphBuildOptions != null)\n                                 {\n-                                    (result, exception) = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+                                    graphResult = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+                                    ProjectGraphEntryPoint entryPoint = graphBuildRequest.ProjectGraphEntryPoints.First();\n+                                    if (!entryPoint.GlobalProperties.ContainsKey(PropertyNames.IsGraphBuild))\n+                                    {\n+                                        entryPoint.GlobalProperties[PropertyNames.IsGraphBuild] = \"true\";\n+                                    }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The dictionary indexer throws `KeyNotFoundException` if the key is not found. Is it ok to assume that `nodeResultKvp.Key.ProjectInstance.GlobalProperties` and `entryPoint.GlobalProperties` have exactly the same keys here?",
              "createdAt": "2023-08-28T11:17:11Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1427,17 +1532,37 @@ private static void ResetGatheringSwitchesState()\n                             {\n                                 if (graphBuildOptions != null)\n                                 {\n-                                    (result, exception) = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+                                    graphResult = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+\n+                                    if (saveProjectResult)\n+                                    {\n+                                        ProjectGraphEntryPoint entryPoint = graphBuildRequest.ProjectGraphEntryPoints.Single();\n+                                        if (!entryPoint.GlobalProperties.ContainsKey(PropertyNames.IsGraphBuild))\n+                                        {\n+                                            entryPoint.GlobalProperties[PropertyNames.IsGraphBuild] = \"true\";\n+                                        }\n+\n+                                        result = graphResult.ResultsByNode.Single(\n+                                            nodeResultKvp =>\n+                                            nodeResultKvp.Key.ProjectInstance.FullPath.Equals(entryPoint.ProjectFile) &&\n+                                            nodeResultKvp.Key.ProjectInstance.GlobalProperties.Count == entryPoint.GlobalProperties.Count &&\n+                                            nodeResultKvp.Key.ProjectInstance.GlobalProperties.All(propertyKvp => entryPoint.GlobalProperties[propertyKvp.Key].Equals(propertyKvp.Value)))",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "It was not. I switched to `TryGetValue`.\r\n\r\nbefore:\r\n\r\n```\r\nMSBUILD : error MSB1025: An internal failure occurred while running MSBuild.\r\nThis is an unhandled exception in MSBuild -- PLEASE OPEN A BUG AGAINST THE MSBUILD TEAM.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key 'TargetFramework' was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.<>c__DisplayClass29_0.<BuildProject>b__1(KeyValuePair`2 propertyKvp) in S:\\msbuild\\src\\MSBuild\\XMake.cs:line 1548\r\n   at System.Linq.Enumerable.All[TSource](IEnumerable`1 source, Func`2 predicate)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.<>c__DisplayClass29_0.<BuildProject>b__0(KeyValuePair`2 nodeResultKvp) in S:\\msbuild\\src\\MSBuild\\XMake.cs:line 1547\r\n   at System.Linq.Enumerable.TryGetSingle[TSource](IEnumerable`1 source, Func`2 predicate, Boolean& found)\r\n   at System.Linq.Enumerable.Single[TSource](IEnumerable`1 source, Func`2 predicate)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.BuildProject(String projectFile, String[] targets, String toolsVersion, Dictionary`2 globalProperties, Dictionary`2 restoreProperties, ILogger[] loggers, LoggerVerbosity verbosity, DistributedLoggerRecord[] distributedLoggerRecords, Int32 cpuCount, Boolean enableNodeReuse, TextWriter preprocessWriter, TextWriter targetsWriter, Boolean detailedSummary, ISet`1 warningsAsErrors, ISet`1 warningsNotAsErrors, ISet`1 warningsAsMessages, Boolean enableRestore, ProfilerLogger profilerLogger, Boolean enableProfiler, Boolean interactive, ProjectIsolationMode isolateProjects, GraphBuildOptions graphBuildOptions, Boolean lowPriority, Boolean question, String[] inputResultsCaches, String outputResultsCache, Boolean saveProjectResult, BuildResult& result, String[] commandLine) in S:\\msbuild\\src\\MSBuild\\XMake.cs:line 1545\r\n```\r\n\r\nnow:\r\n\r\n```sh-session\r\n\u276f .\\.dotnet\\dotnet.exe msbuild -bl -graph S:\\play\\mt_graph\\mt_graph.csproj -getTargetResult:Build\r\n{\r\n  \"TargetResults\": {\r\n    \"Build\": {\r\n      \"Result\": \"Success\",\r\n      \"Items\": []\r\n    }\r\n  }\r\n}\r\n```",
              "createdAt": "2023-08-29T21:46:02Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1427,17 +1532,37 @@ private static void ResetGatheringSwitchesState()\n                             {\n                                 if (graphBuildOptions != null)\n                                 {\n-                                    (result, exception) = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+                                    graphResult = ExecuteGraphBuild(buildManager, graphBuildRequest);\n+\n+                                    if (saveProjectResult)\n+                                    {\n+                                        ProjectGraphEntryPoint entryPoint = graphBuildRequest.ProjectGraphEntryPoints.Single();\n+                                        if (!entryPoint.GlobalProperties.ContainsKey(PropertyNames.IsGraphBuild))\n+                                        {\n+                                            entryPoint.GlobalProperties[PropertyNames.IsGraphBuild] = \"true\";\n+                                        }\n+\n+                                        result = graphResult.ResultsByNode.Single(\n+                                            nodeResultKvp =>\n+                                            nodeResultKvp.Key.ProjectInstance.FullPath.Equals(entryPoint.ProjectFile) &&\n+                                            nodeResultKvp.Key.ProjectInstance.GlobalProperties.Count == entryPoint.GlobalProperties.Count &&\n+                                            nodeResultKvp.Key.ProjectInstance.GlobalProperties.All(propertyKvp => entryPoint.GlobalProperties[propertyKvp.Key].Equals(propertyKvp.Value)))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}