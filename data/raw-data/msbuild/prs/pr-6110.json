{
  "number": 6110,
  "title": "Fix cache exception handling",
  "body": "Fixes two issues when the plugin throws an exception in Plugin.EndBuildAsync during graph builds:\r\n- Plugin.EndBuildAsync got called twice because of a missing finally clause: https://github.com/dotnet/msbuild/compare/master...cdmihai:fixCacheExceptionHandling?expand=1#diff-2b0716a511d8f4ee690ebd5c3a59dec1e3f9a5eab4ab2a80a1018820a658accbR1946\r\n- Plugin.EndBuildAsync got called after the graph build returned, instead of before (which allows the GraphBuildResult to be properly set as failed with the exception from Plugin.EndBuildAsync): https://github.com/dotnet/msbuild/compare/master...cdmihai:fixCacheExceptionHandling?expand=1#diff-2b0716a511d8f4ee690ebd5c3a59dec1e3f9a5eab4ab2a80a1018820a658accbR1730",
  "state": "MERGED",
  "createdAt": "2021-02-03T01:48:12Z",
  "updatedAt": "2021-04-14T00:46:16Z",
  "closedAt": "2021-03-03T09:47:43Z",
  "mergedAt": "2021-03-03T09:47:43Z",
  "additions": 73,
  "deletions": 19,
  "changedFiles": 3,
  "headRefName": "fixCacheExceptionHandling",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4583451b4c3c349d04a86a898f79ef7da666b25f",
          "message": "Fix bad plugin EndBuild exception handling during graph builds",
          "committedDate": "2021-02-16T23:45:28Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you explain why this changes the ordering versus when the graph build returns?",
              "createdAt": "2021-02-03T19:22:13Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1725,68 +1725,11 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)\n                 var cacheServiceTask = Task.Run(() => SearchAndInitializeProjectCachePluginFromGraph(projectGraph));\n \n                 IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = targetListTask.Result;\n-                using var cacheService = cacheServiceTask.Result;\n \n-                var waitHandle = new AutoResetEvent(true);\n-                var graphBuildStateLock = new object();\n-\n-                var blockedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes);\n-                var finishedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes.Count);\n-                var buildingNodes = new Dictionary<BuildSubmission, ProjectGraphNode>();\n-                var resultsPerNode = new Dictionary<ProjectGraphNode, BuildResult>(projectGraph.ProjectNodes.Count);\n-\n-                while (blockedNodes.Count > 0 || buildingNodes.Count > 0)\n+                Dictionary<ProjectGraphNode, BuildResult> resultsPerNode;\n+                using (cacheServiceTask.Result)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "using variables get disposed at the end of the block they're in. In this case the end of the block is **after** the last line in the block whish is the call to ReportResultsToSubmission, but the cache needs to be disposed (in order to surface any issues in EndBuildAsync) **before** the call to ReportResultsToSubmission.",
              "createdAt": "2021-02-03T19:32:46Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1725,68 +1725,11 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)\n                 var cacheServiceTask = Task.Run(() => SearchAndInitializeProjectCachePluginFromGraph(projectGraph));\n \n                 IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = targetListTask.Result;\n-                using var cacheService = cacheServiceTask.Result;\n \n-                var waitHandle = new AutoResetEvent(true);\n-                var graphBuildStateLock = new object();\n-\n-                var blockedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes);\n-                var finishedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes.Count);\n-                var buildingNodes = new Dictionary<BuildSubmission, ProjectGraphNode>();\n-                var resultsPerNode = new Dictionary<ProjectGraphNode, BuildResult>(projectGraph.ProjectNodes.Count);\n-\n-                while (blockedNodes.Count > 0 || buildingNodes.Count > 0)\n+                Dictionary<ProjectGraphNode, BuildResult> resultsPerNode;\n+                using (cacheServiceTask.Result)",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: Is it guaranteed that it will not get in race condition with line `var projectCacheShutdown = _projectCacheService?.Result.ShutDown();` ?\r\nI believe having protection against double execution inside `Shutdown()` method would be beneficial.",
              "createdAt": "2021-02-26T12:18:10Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1945,8 +1945,14 @@ public void Dispose()\n \n                 lock (_buildManager._syncLock)\n                 {\n-                    _buildManager._projectCacheService?.Result.ShutDown().GetAwaiter().GetResult();\n-                    _buildManager._projectCacheService = null;\n+                    try\n+                    {\n+                        _buildManager._projectCacheService?.Result.ShutDown().GetAwaiter().GetResult();",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I don't think it will race because EndBuild [waits for all submissions to finish](https://github.com/dotnet/msbuild/blob/6819f7ab06c3f43e83ff4059d417395e0af06c01/src/Build/BackEnd/BuildManager/BuildManager.cs#L776-L783) before disposing the plugin. This means it waits for any graph build submissions too, and those will shutdown the cache and set it to null before exiting.\r\n\r\n---\r\nIn reply to: [583598558](https://github.com/dotnet/msbuild/pull/6110#discussion_r583598558) [](ancestors = 583598558)",
              "createdAt": "2021-03-02T19:26:56Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1945,8 +1945,14 @@ public void Dispose()\n \n                 lock (_buildManager._syncLock)\n                 {\n-                    _buildManager._projectCacheService?.Result.ShutDown().GetAwaiter().GetResult();\n-                    _buildManager._projectCacheService = null;\n+                    try\n+                    {\n+                        _buildManager._projectCacheService?.Result.ShutDown().GetAwaiter().GetResult();",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}