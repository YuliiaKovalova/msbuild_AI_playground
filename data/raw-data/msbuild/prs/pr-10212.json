{
  "number": 10212,
  "title": "Add binlog message in case of failure to add embedded file",
  "body": "Fixes #9450\r\n\r\n### Context\r\nin #9307 an empty catch was added in ProjectImportsCollector.cs\r\n\r\n### Changes Made\r\ncreate an event that adds a low priority message if an exception occurs there\r\n\r\n### Testing\r\nan exception in that place occurs only if weird things are happening with the files (e.g. they are edited while read)\r\ndid not manage to create an end-to-end test\r\nlooking for ideas to make an unit test\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2024-06-07T09:05:45Z",
  "updatedAt": "2024-06-12T14:35:34Z",
  "closedAt": "2024-06-12T14:35:34Z",
  "mergedAt": "2024-06-12T14:35:34Z",
  "additions": 87,
  "deletions": 2,
  "changedFiles": 16,
  "headRefName": "dev/janpro-log-fileIO-exception-when-embedding",
  "isDraft": false,
  "author": {
    "login": "JanProvaznik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "77c7a22c5f7e02d555d5d364a6924aebf61dad8e",
          "message": "add logging exceptions when reading a file in BinaryLogger",
          "committedDate": "2024-06-07T08:53:21Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6c4793c4f0b882c6145826be32d36bf87569c926",
          "message": "style, narrow exception types",
          "committedDate": "2024-06-07T10:13:26Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cc2c75cbc99c7498f9482e0e14ce0b44f21c524c",
          "message": "log exception.ToString() rather than only message",
          "committedDate": "2024-06-07T11:36:06Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f2508fed803f16beb8012a0ccdcd44f3848b44c3",
          "message": "add argument name",
          "committedDate": "2024-06-10T07:44:08Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "75cbeffd67b8362ac866f936d71b68e15708555d",
          "message": "log flattened exception messages",
          "committedDate": "2024-06-11T07:49:57Z",
          "author": {
            "name": "Jan Provaznik",
            "email": "t-jprovaznk@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "FYI @KirillOsenkov ",
        "createdAt": "2024-06-07T09:58:40Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I conducted a manual test for this fix: placed a breakpoint in AddFileCore and deleted the file which is being read in it.\r\nResult: The exception was caught and the message appeared in the binlogfile as expected.",
        "createdAt": "2024-06-07T12:00:52Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "@dotnet-policy-service rerun",
        "createdAt": "2024-06-12T14:15:33Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "If we attempt to catch IO-specific expectations, I would narrow it down with this condition (see the example here:  https://github.com/dotnet/msbuild/blob/b8e5cce93e2e664eaf470c0fed9f5b84b8591e1e/src/Tasks/GetAssemblyIdentity.cs#L71)",
              "createdAt": "2024-06-07T09:37:07Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -140,11 +142,13 @@ bool TryAddFile()\n             {\n                 try\n                 {\n-                    addFileWorker(filePath);\n+                    addFileWorker(filePath); \n                     return true;\n                 }\n-                catch\n-                { }\n+                catch (Exception e)",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: add an empty line before the method signature",
              "createdAt": "2024-06-07T09:37:31Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -165,6 +169,15 @@ private void AddFileCore(string filePath)\n             using FileStream content = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read | FileShare.Delete);\n             AddFileData(filePath, content, null);\n         }\n+        private void InvokeFileIOErrorEvent( string filePath,string message)",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "nit: chech spacing in the method args ",
              "createdAt": "2024-06-07T09:38:08Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -165,6 +169,15 @@ private void AddFileCore(string filePath)\n             using FileStream content = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read | FileShare.Delete);\n             AddFileData(filePath, content, null);\n         }\n+        private void InvokeFileIOErrorEvent( string filePath,string message)",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "Extra points - find out if there is .editorconfig setting we can/should turn on to catch this (that at the same time doesn't lead to bunch of errors elsewhere in the code)",
              "createdAt": "2024-06-07T10:00:26Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -165,6 +169,15 @@ private void AddFileCore(string filePath)\n             using FileStream content = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Read | FileShare.Delete);\n             AddFileData(filePath, content, null);\n         }\n+        private void InvokeFileIOErrorEvent( string filePath,string message)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please wrap the inserted lines with single quotes, like:\r\n'{0}'\r\n\r\n@baronfel , could you please check the message content as a native speaker? :)",
              "createdAt": "2024-06-07T09:39:43Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -2121,6 +2121,9 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n   <data name=\"TaskAssemblyLocationMismatch\" xml:space=\"preserve\">\n     <value>Task assembly was loaded from '{0}' while the desired location was '{1}'.</value>\n   </data>\n+  <data name=\"ProjectImportsCollectorFileIOFail\" xml:space=\"preserve\">\n+    <value>An exception occured when reading file {0}, message: {1}</value>",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "occurred with two 'r' :), also maybe `when reading the file` (but not sure about it myself). Also surround `'{0}'` with single quotes",
              "createdAt": "2024-06-07T20:05:01Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -2121,6 +2121,9 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n   <data name=\"TaskAssemblyLocationMismatch\" xml:space=\"preserve\">\n     <value>Task assembly was loaded from '{0}' while the desired location was '{1}'.</value>\n   </data>\n+  <data name=\"ProjectImportsCollectorFileIOFail\" xml:space=\"preserve\">\n+    <value>An exception occured when reading file {0}, message: {1}</value>",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: extra whitespace",
              "createdAt": "2024-06-07T09:59:05Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -140,11 +142,13 @@ bool TryAddFile()\n             {\n                 try\n                 {\n-                    addFileWorker(filePath);\n+                    addFileWorker(filePath); ",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It'd be good to collect chain of all nested exception messages.\r\n@JaynieBai I recall you created some helper for that - would you be able to point to location?",
              "createdAt": "2024-06-07T10:08:25Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -140,11 +142,13 @@ bool TryAddFile()\n             {\n                 try\n                 {\n-                    addFileWorker(filePath);\n+                    addFileWorker(filePath); \n                     return true;\n                 }\n-                catch\n-                { }\n+                catch (Exception e)\n+                {\n+                    InvokeFileIOErrorEvent(filePath, e.Message);",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Is that necessary? e.ToString() basically does this",
              "createdAt": "2024-06-07T11:39:28Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -140,11 +142,13 @@ bool TryAddFile()\n             {\n                 try\n                 {\n-                    addFileWorker(filePath);\n+                    addFileWorker(filePath); \n                     return true;\n                 }\n-                catch\n-                { }\n+                catch (Exception e)\n+                {\n+                    InvokeFileIOErrorEvent(filePath, e.Message);",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "it's good to specify the argument name with a colon for readability (for example right now I don't know what the null is for, without opening the IDE). Is it sender? Maybe good to specify \"ProjectImportsCollector\" as a sender so we can filter these messages if needed.",
              "createdAt": "2024-06-07T20:08:26Z",
              "path": "src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs",
              "diffHunk": "@@ -166,6 +170,16 @@ private void AddFileCore(string filePath)\n             AddFileData(filePath, content, null);\n         }\n \n+        private void InvokeFileIOErrorEvent(string filePath, string message)\n+        {\n+            BuildEventArgs args = new BuildMessageEventArgs(\n+                ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ProjectImportsCollectorFileIOFail\", filePath, message),\n+                null,",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      }
    ]
  }
}