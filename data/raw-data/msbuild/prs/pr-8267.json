{
  "number": 8267,
  "title": "Avoid removing outer -> inner graph edge",
  "body": "Originally when the graph code was written, a non-top-level multitargeting project would end up never actually dispatching to the inner builds, so that edge was removed from the graph. For example if A referenced B and B was multitargeting, A would call B(outer) with `GetTargetFrameworks`, and then call B(inner) with `Build`. B(outer) never called B(inner) (again, when B wasn't an entry point). \r\n\r\nHowever, at this point `GetTargetFrameworks` on the outer build actually does call into the inner builds, specifically the `GetTargetFrameworksWithPlatformForSingleTargetFramework` target. See:\r\n\r\n![image](https://user-images.githubusercontent.com/6445614/209861027-fb0172f7-83ae-4581-8a21-2ab4e37aaf7f.png)\r\n\r\nBeyond the correctness issue, the practical impact of this is that this causes graph builds to potentially attempt to schedule outer builds before inner builds, which become blocked on the `GetTargetFrameworksWithPlatformForSingleTargetFramework` target. This causes MSBuild to execute that target on-demand, which in turn leads to an odd behavior where the `BuildManager` attempts to schedule the inner build, but the configuration already exists and the `CreateUniqueGlobalProperty` code path is hit, which eventually causes a double-build for the inner build down the line.\r\n\r\nExample of bad graph execution:\r\n1. A(outer) starts executing\r\n2. `GetTargetFrameworksWithPlatformForSingleTargetFramework` is requested on A(inner)\r\n3. Not in cache, so A(inner) executes\r\n4. Some time later, A(inner) is scheduled by the graph build\r\n5. The configuration already exists from (3), and the request already has a `ProjectInstance` from the graph. This causes `CreateUniqueGlobalProperty` to be called in `BuildManager.ResolveConfiguration`, which makes the build of A(inner) have a unique dummy global property.\r\n6. A(inner) executes\r\n7. Some time later, another project C starts executing\r\n8. C depends on A, so ends up trying to build A(inner)\r\n9. *usually* A(inner) would come from the result cache. However, it does not since the results of A(inner) have the dummy global property so it's actually a different configuration\r\n10. A(inner) builds a second time. *Uh oh!*\r\n\r\nThis change simply removes the removal of the edges from an outer build to its inner builds. It's basically a 1 line change, but with some renames, changing to explicit types instead of `var` in places, and some minor test fixups due to the behavior change.\r\n\r\nUnfortunately the target list for this edge isn't very accurate, but in practice the union of incoming edges into the inner build is still correct. The graph target list code and protocol probably need a bigger rewrite at some point to really dial in the correctness, as the current state isn't expressive enough to match reality.",
  "state": "MERGED",
  "createdAt": "2022-12-28T19:21:23Z",
  "updatedAt": "2023-01-13T02:16:55Z",
  "closedAt": "2023-01-13T02:16:55Z",
  "mergedAt": "2023-01-13T02:16:55Z",
  "additions": 74,
  "deletions": 92,
  "changedFiles": 5,
  "headRefName": "fix-outer-inner-edge",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Static Graph",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "ad905847a4eb44775d578da7f178c2e2fb9da274",
          "message": "Avoid removing outer -> inner graph edge",
          "committedDate": "2022-12-28T19:04:38Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b9e5f9669365f659cc003536527d3236fbcc0547",
          "message": "Fix UT",
          "committedDate": "2022-12-28T20:09:31Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "389a6a0abc584cabfdd2cf981276a9131ba2f1e5",
          "message": "PR comment",
          "committedDate": "2022-12-30T00:53:40Z",
          "author": {
            "name": "David Federman",
            "email": "david.federman@outlook.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> This change simply removes the removal of the edges from an outer build to its inner builds.\r\n\r\nWill this cause overbuild on multitargeted references?\r\n\r\nBefore, there would be no path to the not-closest TF match:\r\n\r\n```mermaid\r\ngraph TD\r\nEntrypoint --GetTargetFrameworks--> Multitargeted\r\nEntrypoint --Build--> Multitargeted+TF1\r\nMultitargeted+TF2\r\n```\r\n\r\nNow there is a path:\r\n\r\n```mermaid\r\ngraph TD\r\nEntrypoint --GetTargetFrameworks--> Multitargeted\r\nMultitargeted --GetTargetFrameworksWithPlatformForSingleTargetFramework--> Multitargeted+TF1\r\nMultitargeted --GetTargetFrameworksWithPlatformForSingleTargetFramework--> Multitargeted+TF2\r\nEntrypoint --Build--> Multitargeted+TF1\r\nMultitargeted+TF2\r\n```\r\n\r\nSo I guess my question is whether this new edge is also going to trigger `Build` in `Multitargeted+TF2` since the outer build of `Multitargeted` _could_ call it (but wouldn't in this case).",
        "createdAt": "2023-01-09T17:28:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > This change simply removes the removal of the edges from an outer build to its inner builds.\r\n> \r\n> Will this cause overbuild on multitargeted references?\r\n> \r\n> Before, there would be no path to the not-closest TF match:\r\n> \r\n> \r\n> Now there is a path:\r\n> \r\n> \r\n> So I guess my question is whether this new edge is also going to trigger `Build` in `Multitargeted+TF2` since the outer build of `Multitargeted` _could_ call it (but wouldn't in this case).\r\n\r\nThis is already the case actually. Because the \"nearest TF\" logic is not in MSBuild, the graph creates edges from the referencing project to all inner builds of the referenced project. Thus all inner builds for any project in the graph end up built when running in graph mode (similar to what VS does already actually).\r\n\r\nExample:\r\n\r\nb.csproj:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\c\\c.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nc.csproj:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;netstandard1.1</TargetFrameworks>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nUsing GA bits:\r\n![image](https://user-images.githubusercontent.com/6445614/212121521-6b8ff454-4e9e-4764-92aa-70266f9a5381.png)\r\n\r\nUsing bits with this change:\r\n![image](https://user-images.githubusercontent.com/6445614/212122653-8780bfb2-44b7-4e78-a495-5576f4b9f784.png)\r\n\r\nOnly thing that changes is order of the outer build",
        "createdAt": "2023-01-12T16:14:20Z",
        "author": {
          "login": "dfederm"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I was confused by this change for a moment...should it ever be false? Don't outer builds always have inner builds? But it also shouldn't change anything as far as the body of this loop is concerned.",
              "createdAt": "2022-12-29T19:16:36Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -164,30 +164,30 @@ internal static ProjectType GetProjectType(ProjectInstance project)\n         }\n \n         /// <summary>\n-        /// To avoid calling nuget at graph construction time, the graph is initially constructed with outer build nodes referencing inner build nodes.\n-        /// However, at build time, for non root outer builds, the inner builds are NOT referenced by the outer build, but by the nodes referencing the\n-        /// outer build. Change the graph to mimic this behaviour.\n-        /// Examples\n-        /// OuterAsRoot -> Inner go to OuterAsRoot -> Inner. Inner builds remain the same, parented to their outer build\n-        /// Node -> Outer -> Inner go to: Node -> Outer; Node->Inner; Outer -> empty. Inner builds get reparented to Node\n+        /// To avoid calling nuget at graph construction time, the graph is initially constructed with nodes referencing outer build nodes which in turn\n+        /// reference inner build nodes. However at build time, the inner builds are referenced directly by the nodes referencing the outer build.\n+        /// Change the graph to mimic this behaviour.\n+        /// Example: Node -> Outer -> Inner go to: Node -> Outer; Node->Inner; Outer -> Inner. Inner build edges get added to Node.\n         /// </summary>\n-        public void ReparentInnerBuilds(Dictionary<ConfigurationMetadata, ParsedProject> allNodes, GraphBuilder graphBuilder)\n+        public void AddInnerBuildEdges(Dictionary<ConfigurationMetadata, ParsedProject> allNodes, GraphBuilder graphBuilder)\n         {\n-            foreach (var node in allNodes)\n+            foreach (KeyValuePair<ConfigurationMetadata, ParsedProject> node in allNodes)\n             {\n-                var outerBuild = node.Value.GraphNode;\n+                ProjectGraphNode outerBuild = node.Value.GraphNode;\n \n-                if (GetProjectType(outerBuild.ProjectInstance) == ProjectType.OuterBuild && outerBuild.ReferencingProjects.Count != 0)\n+                if (GetProjectType(outerBuild.ProjectInstance) == ProjectType.OuterBuild\n+                    && outerBuild.ProjectReferences.Count != 0",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yea probably doesn't matter either way. I'll change it back though since it's 1 extra check we don't need",
              "createdAt": "2022-12-30T00:52:24Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -164,30 +164,30 @@ internal static ProjectType GetProjectType(ProjectInstance project)\n         }\n \n         /// <summary>\n-        /// To avoid calling nuget at graph construction time, the graph is initially constructed with outer build nodes referencing inner build nodes.\n-        /// However, at build time, for non root outer builds, the inner builds are NOT referenced by the outer build, but by the nodes referencing the\n-        /// outer build. Change the graph to mimic this behaviour.\n-        /// Examples\n-        /// OuterAsRoot -> Inner go to OuterAsRoot -> Inner. Inner builds remain the same, parented to their outer build\n-        /// Node -> Outer -> Inner go to: Node -> Outer; Node->Inner; Outer -> empty. Inner builds get reparented to Node\n+        /// To avoid calling nuget at graph construction time, the graph is initially constructed with nodes referencing outer build nodes which in turn\n+        /// reference inner build nodes. However at build time, the inner builds are referenced directly by the nodes referencing the outer build.\n+        /// Change the graph to mimic this behaviour.\n+        /// Example: Node -> Outer -> Inner go to: Node -> Outer; Node->Inner; Outer -> Inner. Inner build edges get added to Node.\n         /// </summary>\n-        public void ReparentInnerBuilds(Dictionary<ConfigurationMetadata, ParsedProject> allNodes, GraphBuilder graphBuilder)\n+        public void AddInnerBuildEdges(Dictionary<ConfigurationMetadata, ParsedProject> allNodes, GraphBuilder graphBuilder)\n         {\n-            foreach (var node in allNodes)\n+            foreach (KeyValuePair<ConfigurationMetadata, ParsedProject> node in allNodes)\n             {\n-                var outerBuild = node.Value.GraphNode;\n+                ProjectGraphNode outerBuild = node.Value.GraphNode;\n \n-                if (GetProjectType(outerBuild.ProjectInstance) == ProjectType.OuterBuild && outerBuild.ReferencingProjects.Count != 0)\n+                if (GetProjectType(outerBuild.ProjectInstance) == ProjectType.OuterBuild\n+                    && outerBuild.ProjectReferences.Count != 0",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      }
    ]
  }
}