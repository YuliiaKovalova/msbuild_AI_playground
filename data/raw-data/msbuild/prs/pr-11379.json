{
  "number": 11379,
  "title": "Avoid synchronous I/O in BufferedReadStream",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-02-03T17:38:15Z",
  "updatedAt": "2025-05-13T17:44:16Z",
  "closedAt": "2025-02-27T11:39:50Z",
  "mergedAt": "2025-02-27T11:39:50Z",
  "additions": 99,
  "deletions": 25,
  "changedFiles": 2,
  "headRefName": "dev/erarndt/bufferedReadStream",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4741540a374a0cfe2d992eabb6f32fa1f136abeb",
          "message": "Avoid synchronous I/O in BufferedReadStream",
          "committedDate": "2025-01-29T20:55:02Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d6bc14b29be90c7792d4ae06ec7006a4fa7e32ed",
          "message": "Consolidate common code",
          "committedDate": "2025-02-26T22:00:16Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Can this be extracted into inner function and reused in the last else?",
              "createdAt": "2025-02-19T13:55:28Z",
              "path": "src/Shared/BufferedReadStream.cs",
              "diffHunk": "@@ -120,6 +126,71 @@ public override int Read(byte[] buffer, int offset, int count)\n             }\n         }\n \n+#if NET451_OR_GREATER || NETCOREAPP\n+        public override async Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)\n+        {\n+            if (count > BUFFER_SIZE)\n+            {\n+                // Trying to read more data than the buffer can hold\n+                int alreadyCopied = 0;\n+                if (_currentlyBufferedByteCount > 0)\n+                {\n+                    Array.Copy(_buffer, _currentIndexInBuffer, buffer, offset, _currentlyBufferedByteCount);\n+                    alreadyCopied = _currentlyBufferedByteCount;\n+                    _currentIndexInBuffer = 0;\n+                    _currentlyBufferedByteCount = 0;\n+                }\n+#pragma warning disable CA1835 // Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'\n+                int innerReadCount = await _innerStream.ReadAsync(buffer, offset + alreadyCopied, count - alreadyCopied, cancellationToken);\n+#pragma warning restore CA1835 // Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'\n+                return innerReadCount + alreadyCopied;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I extracted a portion of it. The `ReadAsync` call takes a combination of buffers and buffer sizes, so pulling that out would require passing both each time which seemed to make the code harder to follow. Curious what your thoughts are.",
              "createdAt": "2025-02-26T22:03:36Z",
              "path": "src/Shared/BufferedReadStream.cs",
              "diffHunk": "@@ -120,6 +126,71 @@ public override int Read(byte[] buffer, int offset, int count)\n             }\n         }\n \n+#if NET451_OR_GREATER || NETCOREAPP\n+        public override async Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)\n+        {\n+            if (count > BUFFER_SIZE)\n+            {\n+                // Trying to read more data than the buffer can hold\n+                int alreadyCopied = 0;\n+                if (_currentlyBufferedByteCount > 0)\n+                {\n+                    Array.Copy(_buffer, _currentIndexInBuffer, buffer, offset, _currentlyBufferedByteCount);\n+                    alreadyCopied = _currentlyBufferedByteCount;\n+                    _currentIndexInBuffer = 0;\n+                    _currentlyBufferedByteCount = 0;\n+                }\n+#pragma warning disable CA1835 // Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'\n+                int innerReadCount = await _innerStream.ReadAsync(buffer, offset + alreadyCopied, count - alreadyCopied, cancellationToken);\n+#pragma warning restore CA1835 // Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'\n+                return innerReadCount + alreadyCopied;",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      }
    ]
  }
}