{
  "number": 8315,
  "title": "Sync ProcessorArchitectures with those known by runtime.",
  "body": "This makes architectures added in .NET 5, 6, and 7 known to MSBuild.\r\n\r\nBy using the architecture returned by the runtime, we eliminate the 'uname' processes started on these platform to try determine the processor architecture.\r\n\r\n@Forgind @rainersigwald ptal.\r\n\r\ncc @omajid @uweigand @janani66",
  "state": "MERGED",
  "createdAt": "2023-01-18T12:18:31Z",
  "updatedAt": "2023-02-06T01:53:51Z",
  "closedAt": "2023-02-06T01:53:51Z",
  "mergedAt": "2023-02-06T01:53:51Z",
  "additions": 69,
  "deletions": 56,
  "changedFiles": 3,
  "headRefName": "sync_archs",
  "isDraft": false,
  "author": {
    "login": "tmds"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "925d4fbf81ccf2ef52ca1d0f73b2b24c3acdeef4",
          "message": "Sync ProcessorArchitectures with those known by runtime.\n\nThis makes architectures added in .NET 5, 6, and 7 known to MSBuild.\n\nBy using the architecture returned by the runtime, we eliminate\nthe 'uname' processes started on these platform to try determine\nthe processor architecture.",
          "committedDate": "2023-01-18T12:14:53Z",
          "author": {
            "name": "Tom Deseyn",
            "email": "tom.deseyn@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3bb67722e1b267b627d984057e42e8e0e8d0786a",
          "message": "Update src/Utilities/ProcessorArchitecture.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2023-01-27T13:07:56Z",
          "author": {
            "name": "Tom Deseyn",
            "email": "tom.deseyn@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "688f7cd9fb72fd11f966739609788259bcac7256",
          "message": "Don't add new uname cases, and assign the proper variable.",
          "committedDate": "2023-01-27T13:39:26Z",
          "author": {
            "name": "Tom Deseyn",
            "email": "tom.deseyn@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "13c72a4c3c7e9c1305eb364dd084a110fbee3255",
          "message": "Remove code meant for Mono.",
          "committedDate": "2023-01-30T10:10:36Z",
          "author": {
            "name": "Tom Deseyn",
            "email": "tom.deseyn@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Should we also add something for RiscV64?\r\n\r\nIt's not (yet) part of https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Runtime/InteropServices/Architecture.cs.",
        "createdAt": "2023-01-19T08:28:01Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "The Windows Full job has an issue: https://dev.azure.com/dnceng-public/public/_build/results?buildId=152295&view=logs&j=a964745c-2ee7-5657-5893-57d8a23ba1c9&t=8546657c-07f1-5ad9-84b8-0e3e313ae4c2. It doesn't look related.",
        "createdAt": "2023-01-30T11:43:29Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "I don't recognize this one:\r\n\r\n```\r\nYou cannot call a method on a null-valued expression.\r\nSystem.Management.Automation.RuntimeException: You cannot call a method on a null-valued expression.\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\r\nat KillProcessesFromRepo, D:\\a\\1\\s\\eng\\cibuild_bootstrapped_msbuild.ps1: line 39\r\nat <ScriptBlock>, D:\\a\\1\\s\\eng\\cibuild_bootstrapped_msbuild.ps1: line 70\r\nat <ScriptBlock>, <No file>: line 1\r\n##[error]Process completed with exit code 1.\r\n```\r\n\r\nBut I agree it seems extremely unlikely to be related. Rerunning.",
        "createdAt": "2023-01-30T13:58:05Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "When is the OSArchitecture \"unknown\", but we can find arch via uname?",
              "createdAt": "2023-01-19T00:08:25Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -488,6 +514,22 @@ public SystemInformationData()\n                                 {\n                                     ProcessorArchitectureType = ProcessorArchitectures.ARM64;\n                                 }\n+                                else if (arch.StartsWith(\"s390x\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Good question.\r\n\r\nAnything that is excluded by these ifdefs:\r\n\r\n```cs\r\n#if !NET35\r\n                // Get the architecture from the runtime.\r\n                processorArchitecture = RuntimeInformation.OSArchitecture switch\r\n                {\r\n                    Architecture.Arm => ProcessorArchitectures.ARM,\r\n                    Architecture.Arm64 => ProcessorArchitectures.ARM64,\r\n                    Architecture.X64 => ProcessorArchitectures.X64,\r\n                    Architecture.X86 => ProcessorArchitectures.X86,\r\n#if NET5_0_OR_GREATER\r\n                    Architecture.Wasm => ProcessorArchitectures.WASM,\r\n#endif\r\n#if NET6_0_OR_GREATER\r\n                    Architecture.S390x => ProcessorArchitectures.S390X,\r\n#endif\r\n#if NET7_0_OR_GREATER\r\n                    Architecture.LoongArch64 => ProcessorArchitectures.LOONGARCH64,\r\n                    Architecture.Armv6 => ProcessorArchitectures.ARMV6,\r\n                    Architecture.Ppc64le => ProcessorArchitectures.PPC64LE,\r\n#endif\r\n                    _ => ProcessorArchitectures.Unknown,\r\n                };\r\n#endif\r\n```\r\n\r\nProbably we can keep the `NETX_0_OR_GREATER` (leaving these unkown on older versions of .NET), and don't care about the `NET35` either?\r\n\r\nThen we can remove all the `uname` cases that are already detected through `RuntimeInformation.OSArchitecture`.\r\n\r\nShall I make that change?",
              "createdAt": "2023-01-19T08:33:26Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -488,6 +514,22 @@ public SystemInformationData()\n                                 {\n                                     ProcessorArchitectureType = ProcessorArchitectures.ARM64;\n                                 }\n+                                else if (arch.StartsWith(\"s390x\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "tmds"
              }
            },
            {
              "body": "@Forgind, shall I remove the known `uname` cases handled by `RuntimeInformation.OSArchitecture`?",
              "createdAt": "2023-01-24T13:40:00Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -488,6 +514,22 @@ public SystemInformationData()\n                                 {\n                                     ProcessorArchitectureType = ProcessorArchitectures.ARM64;\n                                 }\n+                                else if (arch.StartsWith(\"s390x\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "tmds"
              }
            },
            {
              "body": "NET35 is fairly commonly used on windows...but it looks like all this code is explicitly non-windows. I'm guessing it's a remnant from mono. I'd keep the !NET35 check from earlier. If we end up falling back to Unknown, what actually goes wrong? If it isn't completely disastrous, I'd say yes to removing uname cases detected through RuntimeInformation.OSArchitecture, assuming that architecture is .NET Core 3.1.",
              "createdAt": "2023-01-25T23:36:59Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -488,6 +514,22 @@ public SystemInformationData()\n                                 {\n                                     ProcessorArchitectureType = ProcessorArchitectures.ARM64;\n                                 }\n+                                else if (arch.StartsWith(\"s390x\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I think this is fine as-is. The net35 taskhost should not be used in any scenario targeting a non-.NET 3.5 project, so it can remain ignorant of these architectures.",
              "createdAt": "2023-01-26T21:15:21Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -488,6 +514,22 @@ public SystemInformationData()\n                                 {\n                                     ProcessorArchitectureType = ProcessorArchitectures.ARM64;\n                                 }\n+                                else if (arch.StartsWith(\"s390x\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It seems the `uname` cases are here to support classic Mono.\r\nIs that still something this code base is supporting?\r\nIf not, we can remove all of them.\r\nOtherwise, we stick to keeping those that were already there.",
              "createdAt": "2023-01-27T13:16:59Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -488,6 +514,22 @@ public SystemInformationData()\n                                 {\n                                     ProcessorArchitectureType = ProcessorArchitectures.ARM64;\n                                 }\n+                                else if (arch.StartsWith(\"s390x\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "tmds"
              }
            },
            {
              "body": "No, new MSBuild no longer runs on classic Mono (the Mono fork stopped updating a while ago), so we can cut that.",
              "createdAt": "2023-01-27T15:36:12Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -488,6 +514,22 @@ public SystemInformationData()\n                                 {\n                                     ProcessorArchitectureType = ProcessorArchitectures.ARM64;\n                                 }\n+                                else if (arch.StartsWith(\"s390x\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// Represents the LoongAarch64 processor architecture.\r\n```",
              "createdAt": "2023-01-26T20:46:46Z",
              "path": "src/Utilities/ProcessorArchitecture.cs",
              "diffHunk": "@@ -45,6 +45,31 @@ public static class ProcessorArchitecture\n         [SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"ARM64\", Justification = \"This is the correct casing for ProcessorArchitecture\")]\n         public const string ARM64 = nameof(ARM64);\n \n+        /// <summary>\n+        /// Represents the WebAssembly platform.\n+        /// </summary>\n+        public const string WASM = nameof(WASM);\n+\n+        /// <summary>\n+        /// Represents the S390x processor architecture.\n+        /// </summary>\n+        public const string S390X = nameof(S390X);\n+\n+        /// <summary>\n+        /// Represents the LongAarch64 processor architecture.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I've changed this to #else., and it now does the `Mono` case.\r\nWe may want to remove the entire section, if it is no longer supposed to be used.",
              "createdAt": "2023-01-27T13:31:47Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -435,72 +450,80 @@ public SystemInformationData()\n             else\n             {\n                 ProcessorArchitectures processorArchitecture = ProcessorArchitectures.Unknown;\n+\n #if !NET35\n+                // .NET Core 1.0+\n                 // Get the architecture from the runtime.\n                 processorArchitecture = RuntimeInformation.OSArchitecture switch\n                 {\n                     Architecture.Arm => ProcessorArchitectures.ARM,\n                     Architecture.Arm64 => ProcessorArchitectures.ARM64,\n                     Architecture.X64 => ProcessorArchitectures.X64,\n                     Architecture.X86 => ProcessorArchitectures.X86,\n+#if NET5_0_OR_GREATER\n+                    Architecture.Wasm => ProcessorArchitectures.WASM,\n+#endif\n+#if NET6_0_OR_GREATER\n+                    Architecture.S390x => ProcessorArchitectures.S390X,\n+#endif\n+#if NET7_0_OR_GREATER\n+                    Architecture.LoongArch64 => ProcessorArchitectures.LOONGARCH64,\n+                    Architecture.Armv6 => ProcessorArchitectures.ARMV6,\n+                    Architecture.Ppc64le => ProcessorArchitectures.PPC64LE,\n+#endif\n                     _ => ProcessorArchitectures.Unknown,\n                 };\n-#endif\n-                // Fall back to 'uname -m' to get the architecture.\n-                if (processorArchitecture == ProcessorArchitectures.Unknown)\n+\n+#else",
              "author": {
                "login": "tmds"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "These cases should have been assigning `processorArchitecture`.\r\n\r\nIt's a regression that happened when I added the runtime architecture detection in https://github.com/dotnet/msbuild/pull/5897.",
              "createdAt": "2023-01-27T13:38:01Z",
              "path": "src/Framework/NativeMethods.cs",
              "diffHunk": "@@ -435,72 +450,85 @@ public SystemInformationData()\n             else\n             {\n                 ProcessorArchitectures processorArchitecture = ProcessorArchitectures.Unknown;\n+\n #if !NET35\n+                // .NET Core 1.0+\n                 // Get the architecture from the runtime.\n                 processorArchitecture = RuntimeInformation.OSArchitecture switch\n                 {\n                     Architecture.Arm => ProcessorArchitectures.ARM,\n                     Architecture.Arm64 => ProcessorArchitectures.ARM64,\n                     Architecture.X64 => ProcessorArchitectures.X64,\n                     Architecture.X86 => ProcessorArchitectures.X86,\n+#if NET5_0_OR_GREATER\n+                    Architecture.Wasm => ProcessorArchitectures.WASM,\n+#endif\n+#if NET6_0_OR_GREATER\n+                    Architecture.S390x => ProcessorArchitectures.S390X,\n+#endif\n+#if NET7_0_OR_GREATER\n+                    Architecture.LoongArch64 => ProcessorArchitectures.LOONGARCH64,\n+                    Architecture.Armv6 => ProcessorArchitectures.ARMV6,\n+                    Architecture.Ppc64le => ProcessorArchitectures.PPC64LE,\n+#endif\n                     _ => ProcessorArchitectures.Unknown,\n                 };\n-#endif\n-                // Fall back to 'uname -m' to get the architecture.\n-                if (processorArchitecture == ProcessorArchitectures.Unknown)\n+\n+#else\n+                // Mono\n+                // Use 'uname -m' to get the architecture.\n+                try\n                 {\n-                    try\n+                    // On Unix run 'uname -m' to get the architecture. It's common for Linux and Mac\n+                    using (\n+                        var proc =\n+                            Process.Start(\n+                                new ProcessStartInfo(\"uname\")\n+                                {\n+                                    Arguments = \"-m\",\n+                                    UseShellExecute = false,\n+                                    RedirectStandardOutput = true,\n+                                    CreateNoWindow = true\n+                                }))\n                     {\n-                        // On Unix run 'uname -m' to get the architecture. It's common for Linux and Mac\n-                        using (\n-                            var proc =\n-                                Process.Start(\n-                                    new ProcessStartInfo(\"uname\")\n-                                    {\n-                                        Arguments = \"-m\",\n-                                        UseShellExecute = false,\n-                                        RedirectStandardOutput = true,\n-                                        CreateNoWindow = true\n-                                    }))\n+                        string arch = null;\n+                        if (proc != null)\n+                        {\n+                            arch = proc.StandardOutput.ReadLine();\n+                            proc.WaitForExit();\n+                        }\n+\n+                        if (!string.IsNullOrEmpty(arch))\n                         {\n-                            string arch = null;\n-                            if (proc != null)\n+                            if (arch.StartsWith(\"x86_64\", StringComparison.OrdinalIgnoreCase))\n                             {\n-                                arch = proc.StandardOutput.ReadLine();\n-                                proc.WaitForExit();\n+                                processorArchitecture = ProcessorArchitectures.X64;",
              "author": {
                "login": "tmds"
              }
            }
          ]
        }
      }
    ]
  }
}