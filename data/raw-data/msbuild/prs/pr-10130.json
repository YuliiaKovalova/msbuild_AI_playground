{
  "number": 10130,
  "title": "Add ParameterName and PropertyName to TaskParameterEventArgs",
  "body": "Contributes to #9881\r\n\r\n### Context\r\n\r\nWhen `TaskParameterEventArgs` represents an output parameter of a task, it currently does not capture the name of the parameter. This information is generally useful as multiple output parameters can be assigned to the same item, and it's important for the BuildCheck infrastructure to provide a consistent object model to build analyzers.\r\n\r\nAdditionally, output parameters that are assigned to properties are currently logged as textual log messages `Output Property: {0}={1}` which miss the name of the parameter as well.\r\n\r\n### Changes Made\r\n\r\nAdded two new properties on the `TaskParameterEventArgs` class, including the requisite serialization support. Updated logging to populate the properties with the name of the task parameter and the name of the build property, respectively, and updated BuildCheck infra to expose it to analyzers subscribed to task parameter events.\r\n\r\nAll task parameters are now logged as the structured `TaskParameterEventArgs` and the kind of parameter (input, output to property, output to item) can be determined by examining the args.\r\n\r\n### Testing\r\n\r\n- Tweaked existing unit test and updated the relevant BuildCheck test.\r\n- Verified that when using the standard console logger, the resulting textual log is identical.\r\n- Verified that binlog viewer without the corresponding changes displays the forward-compat warning about unknown data.\r\n\r\n### Notes\r\n\r\n- Complementary binlog viewer PR: https://github.com/KirillOsenkov/MSBuildStructuredLog/pull/780\r\n- The change is behind a changewave because it is technically a breaking change for third party loggers.",
  "state": "MERGED",
  "createdAt": "2024-05-13T14:26:07Z",
  "updatedAt": "2024-05-23T07:05:52Z",
  "closedAt": "2024-05-23T07:05:47Z",
  "mergedAt": "2024-05-23T07:05:47Z",
  "additions": 209,
  "deletions": 24,
  "changedFiles": 26,
  "headRefName": "9881-output-parameters",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c65169d2c19b9f74b7943febc8bcedaffc944358",
          "message": "Log output task parameters as structured events",
          "committedDate": "2024-05-13T13:39:45Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e363350f13fb285cf7093c05fe7bd8dd5b23fb47",
          "message": "Use TaskParameterEventArgs.ParameterName in BuildCheck",
          "committedDate": "2024-05-13T13:39:45Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f128bffd1edabadd1c070325a7f7673497aa06fc",
          "message": "Fix serialization and bump binlog version",
          "committedDate": "2024-05-13T14:14:53Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "423f7bb43afa6d9a5b2a70ec7dc7fe00c4cbdbe8",
          "message": "Update ChangeWaves.md",
          "committedDate": "2024-05-15T08:56:19Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4ac228b120aee8ea080529b39906141552c28180",
          "message": "Add PropertyName to TaskParameterEventArgs",
          "committedDate": "2024-05-15T08:57:24Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "88b29b6803426141976447e0d309970e8155140e",
          "message": "Check binlog version when reading parameter name and property name",
          "committedDate": "2024-05-15T11:01:03Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3109e71ea12b6629907e011479e0dea39f7a0ce8",
          "message": "Update comment",
          "committedDate": "2024-05-16T07:09:23Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bfde92902d704843bf7f2af55c60407128d03bee",
          "message": "Update src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-05-17T15:59:26Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "ladi.prosek@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "650f7df6176f0c591f7e63b75731de4ef2fdef17",
          "message": "Make TaskParameterEventArgs backward compatible",
          "committedDate": "2024-05-22T12:34:42Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "extreme nit: I would prefer naming these something other than the field names because I could imagine a deserialization bug that produced output that was the field names.\r\n```suggestion\r\n            var args = new TaskParameterEventArgs(TaskParameterMessageKind.TaskOutput, \"ParameterName1\", \"PropertyName1\", \"ItemName1\", items, true, DateTime.MinValue);\r\n```",
              "createdAt": "2024-05-16T14:03:09Z",
              "path": "src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs",
              "diffHunk": "@@ -650,12 +650,14 @@ public void RoundtripTaskParameterEventArgs()\n                 new TaskItemData(\"ItemSpec1\", null),\n                 new TaskItemData(\"ItemSpec2\", Enumerable.Range(1,3).ToDictionary(i => i.ToString(), i => i.ToString() + \"value\"))\n             };\n-            var args = new TaskParameterEventArgs(TaskParameterMessageKind.TaskOutput, \"ItemName\", items, true, DateTime.MinValue);\n+            var args = new TaskParameterEventArgs(TaskParameterMessageKind.TaskOutput, \"ParameterName\", \"PropertyName\", \"ItemName\", items, true, DateTime.MinValue);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Makes sense, thank you.",
              "createdAt": "2024-05-17T15:59:22Z",
              "path": "src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs",
              "diffHunk": "@@ -650,12 +650,14 @@ public void RoundtripTaskParameterEventArgs()\n                 new TaskItemData(\"ItemSpec1\", null),\n                 new TaskItemData(\"ItemSpec2\", Enumerable.Range(1,3).ToDictionary(i => i.ToString(), i => i.ToString() + \"value\"))\n             };\n-            var args = new TaskParameterEventArgs(TaskParameterMessageKind.TaskOutput, \"ItemName\", items, true, DateTime.MinValue);\n+            var args = new TaskParameterEventArgs(TaskParameterMessageKind.TaskOutput, \"ParameterName\", \"PropertyName\", \"ItemName\", items, true, DateTime.MinValue);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you comment the reason for the duplication here?",
              "createdAt": "2024-05-16T14:13:08Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1320,7 +1320,9 @@ private void EnsureParameterInitialized(TaskPropertyInfo parameter, Lookup looku\n                         ItemGroupLoggingHelper.LogTaskParameter(\n                             _taskLoggingContext,\n                             TaskParameterMessageKind.TaskInput,\n-                            parameter.Name,\n+                            parameterName: parameter.Name,\n+                            propertyName: null,\n+                            itemType: parameter.Name,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Apologies, yes, I forgot about this. Passing the parameter name in `ItemType` makes the old viewer display correct data (at least for input parameters). So basically a back-compat hack. I'm on the fence - we can make this cleaner if we're fine breaking old viewers. We're breaking them for output parameters anyway.",
              "createdAt": "2024-05-20T09:15:28Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1320,7 +1320,9 @@ private void EnsureParameterInitialized(TaskPropertyInfo parameter, Lookup looku\n                         ItemGroupLoggingHelper.LogTaskParameter(\n                             _taskLoggingContext,\n                             TaskParameterMessageKind.TaskInput,\n-                            parameter.Name,\n+                            parameterName: parameter.Name,\n+                            propertyName: null,\n+                            itemType: parameter.Name,",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Ok, I am going with the back compat plan. `TaskParameterEventArgs` will continue to have its `ItemType` used for different things to keep old loggers working and old binlog viewer show everything. Enlightened loggers will use the newly added props to disambiguate.",
              "createdAt": "2024-05-22T12:39:18Z",
              "path": "src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs",
              "diffHunk": "@@ -1320,7 +1320,9 @@ private void EnsureParameterInitialized(TaskPropertyInfo parameter, Lookup looku\n                         ItemGroupLoggingHelper.LogTaskParameter(\n                             _taskLoggingContext,\n                             TaskParameterMessageKind.TaskInput,\n-                            parameter.Name,\n+                            parameterName: parameter.Name,\n+                            propertyName: null,\n+                            itemType: parameter.Name,",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}