{
  "number": 9390,
  "title": "Graph: Mimic quirk for sln-based builds with target name containing semicolon",
  "body": "Fixes #9376\r\n\r\nThere is a quirk for solution builds for targets containing semicolons. For example if you do a solution build using `/t:\"Clean;Build\"`, the metaproject ends up calling the `<MSBuild>` task using that value, which ends up splitting it into two targes: \"Clean\" and \"Build\". However if you try the same thing on a project, it will actually end up attempting to call a target named \"Clean;Build\", which would also certainly fail in practice (although in theory there could be a distinct target with that crazy name).\r\n\r\nThis change just mimics that quirk for graph builds.\r\n\r\nSee linked issue for a practical repro and test cases.",
  "state": "CLOSED",
  "createdAt": "2023-11-02T16:09:30Z",
  "updatedAt": "2023-11-28T14:38:28Z",
  "closedAt": "2023-11-28T14:38:27Z",
  "mergedAt": null,
  "additions": 100,
  "deletions": 11,
  "changedFiles": 3,
  "headRefName": "dfederm/fix-graph-sln-semicolon-targets",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4e00b3286a656083652e8ae78e4d08cd27266bf5",
          "message": "Graph: Mimic quirk for sln-based builds with target name containing semicolon",
          "committedDate": "2023-11-02T16:06:04Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dd0c00fe6ab77cc57a2ef790fa2c75511a606116",
          "message": "Removed unused using",
          "committedDate": "2023-11-02T16:11:26Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "df7dc891a2581a561c1d1226c063d88b14c9976f",
          "message": "Avoid unecessary allocation",
          "committedDate": "2023-11-02T16:14:34Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "FYI, long long time ago, I added a funky feature to address solution building multiple targets, non-graph.  Looks up SolutionProjectReferenceAllTargets or SlnProjectResolveProjectReference.  I wasn't able to enable it because there was a high chance of a regression due to missing P2P references with a different build order.  With graph build, this turns over a new leaf so perhaps consider addressing the issue directly.",
        "createdAt": "2023-11-28T08:52:38Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "> FYI, long long time ago, I added a funky feature to address solution building multiple targets, non-graph. Looks up SolutionProjectReferenceAllTargets or SlnProjectResolveProjectReference. I wasn't able to enable it because there was a high chance of a regression due to missing P2P references with a different build order. With graph build, this turns over a new leaf so perhaps consider addressing the issue directly.\r\n\r\n@yuehuang010 - this one?: https://github.com/dotnet/msbuild/pull/7512",
        "createdAt": "2023-11-28T09:43:42Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Team triage: It seems to be resolved via PR #9452. We decided to close this one in favor to #9452.",
        "createdAt": "2023-11-28T14:38:28Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Note: removed this as the exact same check is done above already. Also, this error message requires a param, which this is not providing, so even if this code were hit it'd result in incorrect behavior.",
              "createdAt": "2023-11-02T16:11:03Z",
              "path": "src/Build/Graph/GraphBuilder.cs",
              "diffHunk": "@@ -257,8 +259,7 @@ private static void AddEdgesFromSolution(IReadOnlyDictionary<ConfigurationMetada\n                         string.Join(\";\", entryPoints.Select(e => e.ProjectFile))));\n             }\n \n-            ErrorUtilities.VerifyThrowArgument(entryPoints.Count == 1, \"StaticGraphAcceptsSingleSolutionEntryPoint\");",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Unrelated minor change: Changed `Edges` from a property to a field since it was `private`.",
              "createdAt": "2023-11-02T16:12:27Z",
              "path": "src/Build/Graph/ProjectGraph.cs",
              "diffHunk": "@@ -56,9 +56,11 @@ public sealed class ProjectGraph\n \n         private readonly Lazy<IReadOnlyCollection<ProjectGraphNode>> _projectNodesTopologicallySorted;\n \n-        private GraphBuilder.GraphEdges Edges { get; }\n+        private readonly bool _isSolution;\n \n-        internal GraphBuilder.GraphEdges TestOnly_Edges => Edges;\n+        private readonly GraphBuilder.GraphEdges _edges;",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why recreating the list twice? (`SplitSemiColonSeparatedList` already creates new)\r\n\r\n```suggestion\r\n            {\r\n                entryProjectTargets = entryProjectTargets\r\n                    .SelectMany(target => ExpressionShredder.SplitSemiColonSeparatedList(target))\r\n                    .ToList();\r\n            }\r\n```",
              "createdAt": "2023-11-15T09:02:18Z",
              "path": "src/Build/Graph/ProjectGraph.cs",
              "diffHunk": "@@ -598,6 +601,24 @@ private string DebuggerDisplayString()\n         {\n             ThrowOnEmptyTargetNames(entryProjectTargets);\n \n+            // Solutions have quirky behavior when provided a target with ';' in it, eg \"Clean;Build\". This can happen if via the command-line the user provides something\n+            // like /t:\"Clean;Build\". When building a project, the target named \"Clean;Build\" is executed (which usually doesn't exist, but could). However, for solutions\n+            // the generated metaproject ends up calling the MSBuild task with the provided targets, which ends up splitting the value as if it were [ \"Clean\", \"Build\" ].\n+            // Mimic this flattening behavior for consistency.\n+            if (_isSolution && entryProjectTargets != null && entryProjectTargets.Count != 0)\n+            {\n+                List<string> newEntryTargets = new(entryProjectTargets.Count);\n+                foreach (string entryTarget in entryProjectTargets)\n+                {\n+                    foreach (string s in ExpressionShredder.SplitSemiColonSeparatedList(entryTarget))\n+                    {\n+                        newEntryTargets.Add(s);\n+                    }\n+                }\n+\n+                entryProjectTargets = newEntryTargets;\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}