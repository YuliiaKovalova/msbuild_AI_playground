{
  "number": 6509,
  "title": "Enable SignFile on .NET Core/5+",
  "body": "Fixes #6098\r\n\r\n### Context\r\n\r\nThe `SignFile` task is referenced by the SDK for both .NET Framework and Core/5+, but not actually included in the non-framework assemblies.\r\n\r\n### Changes Made\r\n\r\nInclude `SignFile.cs` in the non-framework compilation.\r\n\r\n### Testing\r\n\r\nA simple test, applying `SignFile` to one of the DLLs in artifacts using a self-signed certificate, succeeded.",
  "state": "MERGED",
  "createdAt": "2021-06-02T16:41:56Z",
  "updatedAt": "2021-06-02T21:21:48Z",
  "closedAt": "2021-06-02T21:20:05Z",
  "mergedAt": "2021-06-02T21:20:05Z",
  "additions": 15,
  "deletions": 3,
  "changedFiles": 2,
  "headRefName": "issue-6098-core-signfile",
  "isDraft": false,
  "author": {
    "login": "Zastai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "bf142a19d392d7e868bace09fda6b8d578370551",
          "message": "Enable the SignFile task on .NET Core/5+",
          "committedDate": "2021-06-02T19:01:17Z",
          "author": {
            "name": "Tim Van Holder",
            "email": "tim.vanholder@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "306823fffbd5186bd25081b188c732a09b666f1d",
          "message": "Update reference source (now includes SignFile)",
          "committedDate": "2021-06-02T19:01:31Z",
          "author": {
            "name": "Tim Van Holder",
            "email": "tim.vanholder@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I considered it - but I'm not sure how I would set up a unit test that relies on entries in the certificate store (plus potentially a timestamp server).\r\n\r\nIf there is already a unit test for `SignFile` that only runs on .NET Framework, then yes, it should now be enabled on .NET Core/5+ too, but I don't think there is one.",
        "createdAt": "2021-06-02T17:04:15Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "Incidentally, I noticed that the main branch produces MSBuild version 17 (i.e. VS2020).\r\nWhat is the procedure for backports?\r\nIf this gets merged, will it automatically get included in the next .NET Core 3.1 and 5.0 SDKs?\r\nIf not, what do I need to do? Make separate PRs based on particular branches?\r\n",
        "createdAt": "2021-06-02T17:42:28Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "It will not. We have vs* (like vs16.11) branches that are for supporting earlier versions, so we'd have to merge into one of those branches. There's automation for bringing changes from vs* to main but not vice versa.\r\n\r\nWe decided that we can backport this to vs16.11 (so the 5.0 SDK), but we don't think this is high-priority enough to bring it back to 16.10 or before. Is there a reason you think it is?\r\n\r\nAs far as backporting it to vs16.11, you can just retarget this to vs16.11, but that would likely bring in extra commits we don't want, so please also clean that up afterwards.",
        "createdAt": "2021-06-02T18:07:49Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I suppose the 5.0 SDK is fine, but given 3.1 is still in LTS for a good while, it seems to make sense to have it there too.\r\n\r\nWould 16.11 mean \"next 5.0 SDK gets it\" or \"next 5.0 feature band gets it\"? If the latter, I might aim for 16.10 because that gets me the fix faster.\r\n\r\nGiven the triviality of the change, I'll look at just recreating the PR branch on my end and force-pushing, unless there's a reason not to do it that way.\r\n\r\nJust let me know to base it on 16.10 or 16.11. Will convert to a draft for now.",
        "createdAt": "2021-06-02T18:16:23Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "LTS is more about whether we will provide fixes for critical bugs rather than whether we will enable new features, and this feels more like a feature to me than a bug fix. If it's in 16.11, that will go into the next release of the 5.0 SDK. Our team agreed that's best, so please rebase this on 16.11 after you've done the force push. Thank you!",
        "createdAt": "2021-06-02T18:33:16Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I think that should do it.",
        "createdAt": "2021-06-02T19:04:02Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "> Would 16.11 mean \"next 5.0 SDK gets it\" or \"next 5.0 feature band gets it\"?\r\n\r\nMSBuild 16.11 will ship in .NET SDK 5.0.400.",
        "createdAt": "2021-06-02T19:06:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, something's up with those last two legs. They've been running for over 2 hours and haven't cancelled themselves, which also means I don't see error messages or logs. Do you have any suggestions on how to debug that?",
        "createdAt": "2021-06-02T21:10:55Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I don't know what's up with the checks. I suspect it's because those PR jobs exist in `main` but not `vs16.11`. I'll bypass the policy to land this.",
        "createdAt": "2021-06-02T21:19:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks @Zastai!",
        "createdAt": "2021-06-02T21:20:13Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}