{
  "number": 4275,
  "title": "Reduce reader-writer lock contention in ProjectCollection",
  "body": "- Updated HostServices getter to use a reader lock and only upgrade to a writer when creating a value. This is a hotspot in parallel creation of projects in paths like this:\r\n   at Microsoft.Build.Evaluation.ProjectCollection.DisposableReaderWriterLockSlim.EnterWriteLock()\r\n   at Microsoft.Build.Evaluation.ProjectCollection.get_HostServices()\r\n   at Microsoft.Build.Evaluation.Project.CreateProjectInstance(ILoggingService loggingServiceForEvaluation, ProjectInstanceSettings settings)\r\n- Moved checks on param values, and pure functional modifications to parameters, out of locks.\r\n- Moved invariant allocations out of locks where possible.\r\n- Updated ToolsetLocations to a read-only property since it is only set in the constructor, eliminating locking on that property.",
  "state": "MERGED",
  "createdAt": "2019-03-27T17:26:03Z",
  "updatedAt": "2021-10-12T00:00:48Z",
  "closedAt": "2019-05-21T20:24:21Z",
  "mergedAt": "2019-05-21T20:24:21Z",
  "additions": 93,
  "deletions": 94,
  "changedFiles": 1,
  "headRefName": "dev/erikmav/projCollLocking",
  "isDraft": false,
  "author": {
    "login": "erikmav"
  },
  "milestone": {
    "title": "MSBuild 16.2"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "c5f44b438e6e7254bcd1e3f5274648473a2b43dc",
          "message": "Reduce reader-writer lock contention in ProjectCollection\n- Updated HostServices getter to use a reader lock and only upgrade to a writer when creating a value. This is a hotspot in parallel creation of projects in paths like this:\n   at Microsoft.Build.Evaluation.ProjectCollection.DisposableReaderWriterLockSlim.EnterWriteLock()\n   at Microsoft.Build.Evaluation.ProjectCollection.get_HostServices()\n   at Microsoft.Build.Evaluation.Project.CreateProjectInstance(ILoggingService loggingServiceForEvaluation, ProjectInstanceSettings settings)\n- Moved checks on param values, and pure functional modifications to parameters, out of locks.\n- Moved invariant allocations out of locks where possible.\n- Updated ToolsetLocations to a read-only property since it is only set in the constructor, eliminating locking on that property.",
          "committedDate": "2019-03-28T04:25:37Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d5179aaca85eb1cdcc4fed58119252acb61bf1e6",
          "message": "Remove indirection for private class by moving to struct",
          "committedDate": "2019-04-19T21:01:46Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7a2f61716e9ce1dc8a7ca08a2762255ef8ea496e",
          "message": "Revert \"Remove indirection for private class by moving to struct\"\nThis reverts commit d5179aaca85eb1cdcc4fed58119252acb61bf1e6.",
          "committedDate": "2019-04-19T21:16:49Z",
          "author": {
            "name": "Erik Mavrinac",
            "email": "erikmav@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@dfederm since we were looking at a related exception stack",
        "createdAt": "2019-03-27T17:28:13Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "@rainersigwald No, no appreciable perf win to report out. This is in reaction to a ~0.1% failure rate spate of problems we're seeing in QuickBuild with MSBuild parsing mixed with all the other massive thread-parallel work going on, the WaitHandle underneath the ReaderWriteLock sometimes throws when the system gets heavily loaded. It led me to look at the code as to why a write lock was being used on a property getter used on every thread, then that expanded to the rest of the PR on general principle.",
        "createdAt": "2019-03-29T17:09:05Z",
        "author": {
          "login": "erikmav"
        }
      },
      {
        "body": "Thanks @erikma.",
        "createdAt": "2019-05-21T20:24:28Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "`OnProjectCollectionChangedIfNonNull` seems like it can be deleted now.",
              "createdAt": "2019-03-27T17:34:09Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -621,18 +610,20 @@ public bool IsBuildEnabled\n             [DebuggerStepThrough]\n             set\n             {\n-                ProjectCollectionChangedEventArgs eventArgs = null;\n+                bool sendEvent = false;\n                 using (_locker.EnterWriteLock())\n                 {\n                     if (_isBuildEnabled != value)\n                     {\n                         _isBuildEnabled = value;\n-\n-                        eventArgs = new ProjectCollectionChangedEventArgs(ProjectCollectionChangedState.IsBuildEnabled);\n+                        sendEvent = true;\n                     }\n                 }\n \n-                OnProjectCollectionChangedIfNonNull(eventArgs);\n+                if (sendEvent)\n+                {\n+                    OnProjectCollectionChanged(new ProjectCollectionChangedEventArgs(ProjectCollectionChangedState.IsBuildEnabled));",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "true",
              "createdAt": "2019-03-27T17:36:24Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -621,18 +610,20 @@ public bool IsBuildEnabled\n             [DebuggerStepThrough]\n             set\n             {\n-                ProjectCollectionChangedEventArgs eventArgs = null;\n+                bool sendEvent = false;\n                 using (_locker.EnterWriteLock())\n                 {\n                     if (_isBuildEnabled != value)\n                     {\n                         _isBuildEnabled = value;\n-\n-                        eventArgs = new ProjectCollectionChangedEventArgs(ProjectCollectionChangedState.IsBuildEnabled);\n+                        sendEvent = true;\n                     }\n                 }\n \n-                OnProjectCollectionChangedIfNonNull(eventArgs);\n+                if (sendEvent)\n+                {\n+                    OnProjectCollectionChanged(new ProjectCollectionChangedEventArgs(ProjectCollectionChangedState.IsBuildEnabled));",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Looks like this is only used in the exceptional case. Consider only allocating in the `catch` block.",
              "createdAt": "2019-03-27T17:41:21Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -1041,11 +1056,12 @@ public Project LoadProject(string fileName, string toolsVersion)\n         /// <returns>A loaded project.</returns>\n         public Project LoadProject(string fileName, IDictionary<string, string> globalProperties, string toolsVersion)\n         {\n+            ErrorUtilities.VerifyThrowArgumentLength(fileName, nameof(fileName));\n+            fileName = FileUtilities.NormalizePath(fileName);\n+\n+            var buildEventContext = new BuildEventContext(0 /* node ID */, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "nice catch",
              "createdAt": "2019-03-27T17:42:07Z",
              "path": "src/Build/Definition/ProjectCollection.cs",
              "diffHunk": "@@ -1041,11 +1056,12 @@ public Project LoadProject(string fileName, string toolsVersion)\n         /// <returns>A loaded project.</returns>\n         public Project LoadProject(string fileName, IDictionary<string, string> globalProperties, string toolsVersion)\n         {\n+            ErrorUtilities.VerifyThrowArgumentLength(fileName, nameof(fileName));\n+            fileName = FileUtilities.NormalizePath(fileName);\n+\n+            var buildEventContext = new BuildEventContext(0 /* node ID */, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);",
              "author": {
                "login": "erikmav"
              }
            }
          ]
        }
      }
    ]
  }
}