{
  "number": 6514,
  "title": "Only log properties and items on evaluation if ALL loggers support it",
  "body": "Opt in serial and parallel console loggers to the new behavior.\r\n\r\nThis should fix an inadvertent regression when a legacy logger is present that relies on either Properties or Items on ProjectStartedEventArgs to be not null, together with the binary logger that switches on the new behavior.\r\n\r\nFixes https://github.com/dotnet/msbuild/issues/6498",
  "state": "CLOSED",
  "createdAt": "2021-06-03T03:14:27Z",
  "updatedAt": "2022-01-02T04:03:13Z",
  "closedAt": "2021-06-08T02:36:38Z",
  "mergedAt": null,
  "additions": 174,
  "deletions": 89,
  "changedFiles": 8,
  "headRefName": "dev/kirillo/evalOptIn",
  "isDraft": false,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7727e1b2e7d3e65e3e95d65ed129abfced02b5f3",
          "message": "Only log properties and items on evaluation if ALL loggers support it\n\nOpt in serial and parallel console loggers to the new behavior.\n\nThis should fix an inadvertent regression when a legacy logger is present that relies on either Properties or Items on ProjectStartedEventArgs to be not null, together with the binary logger that switches on the new behavior.",
          "committedDate": "2021-06-08T01:03:55Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "864913b03d27a7fd0d6dd68a4a8fe9ae2e05fcf0",
          "message": "Support reading items from ProjectEvaluationFinished for console logger.",
          "committedDate": "2021-06-08T01:03:55Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "11cc60cdbf93bef88bfbf0eab1faa94b1d5bf324",
          "message": "Change the default behavior of IncludeEvaluationPropertiesAndItems\n\nUsing the .All() predicate on an empty sequence returns true, which is a breaking change from .Any() (which returns false).\n\nI think we should default to the old (legacy) behavior if no sinks are present in the list.",
          "committedDate": "2021-06-08T01:03:55Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d2507e181b566eb85f7ecc82c02efab102fde337",
          "message": "Support iterating over evaluation items in BaseConsoleLogger\n\nNow that OutputItems can be called for items provided by ProjectEvaluationFinished, add proper support for iterating these items and printing including all metadata.",
          "committedDate": "2021-06-08T01:03:55Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "abafd061c18abe01f8305a8d110b946d27b3e43d",
          "message": "Properly pass loggers to evaluation in tests\n\nThis ensures we don't lose evaluation messages in some unit-tests.",
          "committedDate": "2021-06-08T01:03:55Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7dfd82a487a997db8339a7e5430dda78be7d38f6",
          "message": "Ensure OutOfProcNodeForwardCertainproperties tests Properties on ProjectStarted.\n\nEnable the old behavior of passing properties on ProjectStartedEventArgs instead of ProjectEvaluationFinishedEventArgs (since the latter always passes all properties, so the test is not applicable).",
          "committedDate": "2021-06-08T01:03:55Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dcca1c7183f475a49e18d94a0726264fa8bd639c",
          "message": "Skip TestItemsWithUnexpandableMetadata\n\nFiled https://github.com/dotnet/msbuild/issues/6518 to clarify the expected behavior.",
          "committedDate": "2021-06-08T01:03:55Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "db87e6e215da5b0dbef2d3bbfdcb423507905510",
          "message": "Support writing ProjectItem items to the binlog.\n\nUnder some conditions (in tests) we see ProjectItem instances in ProjectEvaluationFinished. Support writing those too.",
          "committedDate": "2021-06-08T01:03:55Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "72dcfb9286c17f71a4a8afc1536df687be75a1fd",
          "message": "Remove duplicated OutputItems() from ParallelConsoleLogger and reuse the base method instead.",
          "committedDate": "2021-06-08T01:03:55Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6ff063b6af568792297564c6ce924b3884b2011f",
          "message": "Don't pass loggers to project.Build() in BuildProjectExpectSuccess\n\nSince the loggers are on the ProjectCollection already, no need to pass them again. But now we have to dispose of the ProjectCollection() to clean up the loggers.",
          "committedDate": "2021-06-08T01:03:55Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      },
      {
        "commit": {
          "oid": "751a67fb5a1d2496ecbc31e3db58155a9da7a380",
          "message": "Skip NullMetadataOnLegacyOutputItems_InlineTask",
          "committedDate": "2021-06-08T01:03:56Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "I've hit a complication with this logic:\r\nhttps://source.dot.net/#Microsoft.Build/Logging/ParallelLogger/ParallelConsoleLogger.cs,c8331049011579b8\r\n\r\nThe failing test is https://source.dot.net/#Microsoft.Build.Engine.UnitTests/ConsoleLogger_Tests.cs,033182bb824cc88e\r\n\r\nThis logic relies on properties being logged on each ProjectStarted as it uses the ProjectContextId as the key in the dictionary, such that later error events can look up the property by their ProjectContextId.\r\n\r\nSince we now log properties at evaluation, there isn't any ProjectContextId to speak of during ProjectEvaluationFinished.\r\n\r\nThis is a great exercise for me to do what I tell others to do: \"just update your loggers to use ProjectEvaluationFinished instead\". It appears to be not as trivial and will require some thinking.\r\n\r\nI'll continue on this tomorrow.\r\n\r\nPerhaps the best thing would be to change the `Any` to `All` as a high-pri change and ship that to servicing first, and then \"enlighten\" the console loggers in a separate change.",
        "createdAt": "2021-06-03T04:34:33Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> Perhaps the best thing would be to change the `Any` to `All` as a high-pri change and ship that to servicing first, and then \"enlighten\" the console loggers in a separate change.\r\n\r\nThis is a reasonable plan, I think.\r\n\r\nOne note: the failing test that's trying to disambiguate TFs of the same project is not actually turned on in the SDK at the moment (dotnet/sdk#12030). But we'd like to get that in at some point. However, maybe we should take from this that the change is more impactful than we hoped :(",
        "createdAt": "2021-06-03T16:57:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes, I agree we had a hole where the console loggers didn't properly look up items from ProjectEvaluationFinished.\r\n\r\nI've found a relatively simple way to plug that hole. Now we're going to store the results for an evaluation if we find them, and copy them to each project (since the project now points back to its evaluation).\r\n\r\nWe could still ship this one PR, or I could split it into just the `All` change and make a separate PR to enlighten the console loggers.",
        "createdAt": "2021-06-03T20:15:16Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Someone please revoke my coding license.\r\n\r\nChanging `Any` to `All` is not so straightforward:\r\n\r\n```csharp\r\n        var a = Array.Empty<DictionaryEntry>().Any(d => d.Value != null); // false\r\n        var b = Array.Empty<DictionaryEntry>().All(d => d.Value != null); // true\r\n```",
        "createdAt": "2021-06-04T03:40:20Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Ugh, this suddenly spiraled way out of control. I'll continue on this tomorrow.",
        "createdAt": "2021-06-04T05:56:06Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Filed https://github.com/dotnet/msbuild/issues/6518 to look closer into https://github.com/dotnet/msbuild/blob/46b723ba9ee9f4297d0c8ccbb6dc52e4bd8ea438/src/Build.UnitTests/ConsoleLogger_Tests.cs#L324",
        "createdAt": "2021-06-04T05:58:55Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Ugh, more issues in \r\n```\r\nMicrosoft.Build.UnitTests.BinaryLoggerTests.BinaryLoggerShouldNotThrowWhenMetadataCannotBeExpanded\r\nMicrosoft.Build.Framework.LoggerException : Failed to write to log file \\\"C:\\\\Users\\\\VssAdministrator\\\\AppData\\\\Local\\\\Temp\\\\haxozl1r.ymr\\\\tmpd948805cb14d45c99c0aa53b084afda2.binlog\\\". The process cannot access the file 'C:\\\\Users\\\\VssAdministrator\\\\AppData\\\\Local\\\\Temp\\\\haxozl1r.ymr\\\\tmpd948805cb14d45c99c0aa53b084afda2.binlog' because it is being used by another process.\\r\\n---- System.IO.IOException : The process cannot access the file 'C:\\\\Users\\\\VssAdministrator\\\\AppData\\\\Local\\\\Temp\\\\haxozl1r.ymr\\\\tmpd948805cb14d45c99c0aa53b084afda2.binlog' because it is being used by another process.\r\n   at Microsoft.Build.Logging.BinaryLogger.Initialize(IEventSource eventSource) in /_/src/Build/Logging/BinaryLogger/BinaryLogger.cs:line 158\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.InitializeLogger(ILogger logger, IEventSource sourceForLogger) in /_/src/Build/BackEnd/Components/Logging/LoggingService.cs:line 1544\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.RegisterDistributedLogger(ILogger centralLogger, LoggerDescription forwardingLogger) in /_/src/Build/BackEnd/Components/Logging/LoggingService.cs:line 982\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.RegisterLogger(ILogger logger) in /_/src/Build/BackEnd/Components/Logging/LoggingService.cs:line 896\r\n   at Microsoft.Build.Execution.BuildManager.CreateLoggingService(IEnumerable`1 loggers, IEnumerable`1 forwardingLoggers, ISet`1 warningsAsErrors, ISet`1 warningsAsMessages) in /_/src/Build/BackEnd/BuildManager/BuildManager.cs:line 2877\r\n   at Microsoft.Build.Execution.BuildManager.<BeginBuild>g__InitializeLoggingService|64_0() in /_/src/Build/BackEnd/BuildManager/BuildManager.cs:line 488\r\n   at Microsoft.Build.Execution.BuildManager.BeginBuild(BuildParameters parameters) in /_/src/Build/BackEnd/BuildManager/BuildManager.cs:line 445\r\n   at Microsoft.Build.Execution.BuildManager.Build(BuildParameters parameters, BuildRequestData requestData) in /_/src/Build/BackEnd/BuildManager/BuildManager.cs:line 938\r\n   at Microsoft.Build.Execution.ProjectInstance.Build(String[] targets, IEnumerable`1 loggers, IEnumerable`1 remoteLoggers, ILoggingService loggingService, Int32 maxNodeCount, IDictionary`2& targetOutputs) in /_/src/Build/Instance/ProjectInstance.cs:line 2326\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.Build(String[] targets, IEnumerable`1 loggers, IEnumerable`1 remoteLoggers, EvaluationContext evaluationContext) in /_/src/Build/Definition/Project.cs:line 3270\r\n   at Microsoft.Build.Evaluation.Project.Build(String[] targets, IEnumerable`1 loggers, IEnumerable`1 remoteLoggers, EvaluationContext evaluationContext) in /_/src/Build/Definition/Project.cs:line 1597\r\n   at Microsoft.Build.Evaluation.Project.Build(String[] targets, IEnumerable`1 loggers, IEnumerable`1 remoteLoggers) in /_/src/Build/Definition/Project.cs:line 1584\r\n   at Microsoft.Build.Evaluation.Project.Build(IEnumerable`1 loggers) in /_/src/Build/Definition/Project.cs:line 1474\r\n   at Microsoft.Build.UnitTests.ObjectModelHelpers.BuildProjectExpectSuccess(String projectContents, ILogger[] loggers) in D:\\a\\1\\s\\src\\Shared\\UnitTests\\ObjectModelHelpers.cs:line 750\r\n   at Microsoft.Build.UnitTests.BinaryLoggerTests.BinaryLoggerShouldNotThrowWhenMetadataCannotBeExpanded() in D:\\a\\1\\s\\src\\Build.UnitTests\\BinaryLogger_Tests.cs:line 160\r\n```",
        "createdAt": "2021-06-04T06:27:35Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> Someone please revoke my coding license.\r\n\r\nThat's bad news for the rest of us!\r\n\r\nSince this is pretty complicated, should we change the direction of the escape hatch for 16.10 and revert it to prior behavior in (almost all) cases? Then we can take some time to figure out a path forward.",
        "createdAt": "2021-06-04T14:24:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I've created a more targeted fix in a separate PR here:\r\nhttps://github.com/dotnet/msbuild/pull/6520\r\n\r\nI'll continue using this PR to properly enlighten the console loggers and the test infrastructure.",
        "createdAt": "2021-06-04T18:39:09Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I'm now wading through the test infrastructure and noticing systemic issues with how loggers are passed to the build.\r\n\r\nFiled https://github.com/dotnet/msbuild/issues/6521 to clean all of that debt up.",
        "createdAt": "2021-06-04T18:53:00Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "The more I peel off the more I discover:\r\nhttps://github.com/dotnet/msbuild/issues/6521#issuecomment-855152620",
        "createdAt": "2021-06-05T00:22:24Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Well, I think I got the tests to pass. \r\n\r\nBut this PR is a mess. I'll be cleaning it up next week.",
        "createdAt": "2021-06-05T00:53:59Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This PR is a mess, so I'm closing it and starting over at https://github.com/dotnet/msbuild/pull/6535",
        "createdAt": "2021-06-08T02:36:37Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Since we were explicitly nulling out the logger here, we were dropping all evaluation events.",
              "createdAt": "2021-06-04T06:00:38Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -725,7 +746,7 @@ internal static void BuildProjectExpectSuccess\n             params ILogger[] loggers\n             )\n         {\n-            Project project = CreateInMemoryProject(projectContents, logger: null); // logger is null so we take care of loggers ourselves",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Earlier we only used to get items of type `ITaskItem` (from `ProjectStartedEventArgs`). Now we can also get instances of `ProjectItem` (from `ProjectEvaluationFinishedEventArgs`), which don't implement either `ITaskItem` or `IMetadataContainer`. Hence some ugly pattern-matching and special-casing. Made me wonder whether `ProjectItem` should implement `ITaskItem` and/or `IMetadataContainer`.\r\n\r\nAlso this behavior seems to break the test `TestItemsWithUnexpandableMetadata` (https://github.com/dotnet/msbuild/issues/6518)",
              "createdAt": "2021-06-04T06:03:51Z",
              "path": "src/Build/Logging/BaseConsoleLogger.cs",
              "diffHunk": "@@ -642,39 +644,38 @@ internal SortedList ExtractItemList(IEnumerable items)\n         /// </summary>\n         internal virtual void OutputItems(string itemType, ArrayList itemTypeList)\n         {\n-            // Write each item, one per line\n-            bool haveWrittenItemType = false;\n+            setColor(ConsoleColor.Gray);\n+            WriteLinePretty(itemType);\n             setColor(ConsoleColor.DarkGray);\n-            foreach (ITaskItem item in itemTypeList)",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can't just switch `Any` to `All` without inverting the default for empty dictionaries.",
              "createdAt": "2021-06-04T06:04:31Z",
              "path": "src/Build/BackEnd/Components/Logging/LoggingService.cs",
              "diffHunk": "@@ -514,7 +514,18 @@ public bool IncludeTaskInputs\n         /// </summary>\n         public bool IncludeEvaluationPropertiesAndItems\n         {\n-            get => _includeEvaluationPropertiesAndItems ??= _eventSinkDictionary.Values.OfType<EventSourceSink>().Any(sink => sink.IncludeEvaluationPropertiesAndItems);\n+            get\n+            {\n+                if (_includeEvaluationPropertiesAndItems == null)\n+                {\n+                    var sinks = _eventSinkDictionary.Values.OfType<EventSourceSink>();\n+                    // .All() on an empty list defaults to true, we want to default to false\n+                    _includeEvaluationPropertiesAndItems = sinks.Any() && sinks.All(sink => sink.IncludeEvaluationPropertiesAndItems);",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I still don't understand why this suddenly became necessary.",
              "createdAt": "2021-06-05T00:55:00Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -777,6 +777,12 @@ private void WriteTaskItemList(IEnumerable items, bool writeMetadata = true)\n                 {\n                     Write(taskItem, writeMetadata);\n                 }\n+                else if (item is IItem<ProjectMetadata> iitem)\n+                {\n+                    Write(new TaskItemData(\n+                        iitem.EvaluatedInclude,\n+                        iitem.Metadata.ToDictionary(m => m.Name, m => m.EvaluatedValue)), writeMetadata);\n+                }",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Ugh, I'm really not sure this is how it's supposed to be.",
              "createdAt": "2021-06-05T00:55:39Z",
              "path": "src/Shared/UnitTests/ObjectModelHelpers.cs",
              "diffHunk": "@@ -725,8 +749,9 @@ internal static void BuildProjectExpectSuccess\n             params ILogger[] loggers\n             )\n         {\n-            Project project = CreateInMemoryProject(projectContents, logger: null); // logger is null so we take care of loggers ourselves\n-            project.Build(loggers).ShouldBeTrue();\n+            Project project = CreateInMemoryProjectWithLoggers(projectContents, loggers);\n+            project.Build().ShouldBeTrue();\n+            project.ProjectCollection.Dispose();",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      }
    ]
  }
}