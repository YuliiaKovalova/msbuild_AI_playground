{
  "number": 11566,
  "title": "Enable nullable analysis in the LoadedType.cs",
  "body": "Enable nullable analysis in the LoadedType.cs for the bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1585873/\r\n",
  "state": "MERGED",
  "createdAt": "2025-03-11T03:13:34Z",
  "updatedAt": "2025-04-16T09:24:26Z",
  "closedAt": "2025-04-16T09:24:26Z",
  "mergedAt": "2025-04-16T09:24:26Z",
  "additions": 18,
  "deletions": 17,
  "changedFiles": 2,
  "headRefName": "dev/jenny/bug1585873",
  "isDraft": false,
  "author": {
    "login": "JaynieBai"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "JaynieBai"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "921d5137ab6155c315e31acf435367c7d3e046d7",
          "message": "Add DisallowNull for LoadType property",
          "committedDate": "2025-03-11T03:12:15Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "00024cf148680c9d347bd6056e5233f488852923",
          "message": "Enable Nullable Reference Types",
          "committedDate": "2025-04-01T07:27:43Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b264759dec5f4145dc9ffecb449ef73caedb84ce",
          "message": "Fix issues after enable nullable",
          "committedDate": "2025-04-02T06:37:39Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "27b03e3807df39bbeb9f2c9dde84c537b41813b5",
          "message": "Merge branch 'main' into dev/jenny/bug1585873",
          "committedDate": "2025-04-02T08:37:12Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "88ede4c79679928a413604b81f9ec4104366736b",
          "message": "Fix System.IndexOutOfRangeException: Index was outside the bounds of the array",
          "committedDate": "2025-04-02T09:43:43Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "880171b3b17dd5ae450ee59740b00e6d97d29eb7",
          "message": "Merge branch 'dev/jenny/bug1585873' of https://github.com/JaynieBai/msbuild into dev/jenny/bug1585873",
          "committedDate": "2025-04-02T09:45:01Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "42cad5697dc66b55ebc80da062cd1145a75f0d2d",
          "message": "Enable nullable for dile TaskLoader.cs",
          "committedDate": "2025-04-11T08:17:27Z",
          "author": {
            "name": "Jenny Bai",
            "email": "v-jennybai@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5d06187625717378df38d5bed6909ba85230d1b9",
          "message": "Apply suggestions from code review\n\nCo-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>",
          "committedDate": "2025-04-16T08:29:25Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "please remove this and the \r\n`using System.Diagnostics.CodeAnalysis;`",
              "createdAt": "2025-04-10T14:35:29Z",
              "path": "src/Shared/LoadedType.cs",
              "diffHunk": "@@ -163,8 +163,10 @@ private bool CheckForHardcodedSTARequirement()\n         /// <value>The loaded type.</value>\n         internal Type Type { get; private set; }\n \n+        [DisallowNull]",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                return s_resolverLoadedType?.LoadedAssembly ?? Assembly.Load(s_resolverLoadedType!.Path);\r\n```\r\nthe if check above ensures it's not null right?",
              "createdAt": "2025-04-11T14:58:51Z",
              "path": "src/Shared/TaskLoader.cs",
              "diffHunk": "@@ -179,11 +177,11 @@ bool isOutOfProc\n         /// This is a resolver to help created AppDomains when they are unable to load an assembly into their domain we will help\n         /// them succeed by providing the already loaded one in the currentdomain so that they can derive AssemblyName info from it\n         /// </summary>\n-        internal static Assembly AssemblyResolver(object sender, ResolveEventArgs args)\n+        internal static Assembly? AssemblyResolver(object sender, ResolveEventArgs args)\n         {\n-            if (args.Name.Equals(s_resolverLoadedType.LoadedAssemblyName.FullName, StringComparison.OrdinalIgnoreCase))\n+            if (args.Name.Equals(s_resolverLoadedType?.LoadedAssemblyName.FullName, StringComparison.OrdinalIgnoreCase))\n             {\n-                return s_resolverLoadedType.LoadedAssembly ?? Assembly.Load(s_resolverLoadedType.Path);\n+                return s_resolverLoadedType?.LoadedAssembly ?? Assembly.Load(s_resolverLoadedType?.Path);",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "Yes, I think so",
              "createdAt": "2025-04-14T01:46:15Z",
              "path": "src/Shared/TaskLoader.cs",
              "diffHunk": "@@ -179,11 +177,11 @@ bool isOutOfProc\n         /// This is a resolver to help created AppDomains when they are unable to load an assembly into their domain we will help\n         /// them succeed by providing the already loaded one in the currentdomain so that they can derive AssemblyName info from it\n         /// </summary>\n-        internal static Assembly AssemblyResolver(object sender, ResolveEventArgs args)\n+        internal static Assembly? AssemblyResolver(object sender, ResolveEventArgs args)\n         {\n-            if (args.Name.Equals(s_resolverLoadedType.LoadedAssemblyName.FullName, StringComparison.OrdinalIgnoreCase))\n+            if (args.Name.Equals(s_resolverLoadedType?.LoadedAssemblyName.FullName, StringComparison.OrdinalIgnoreCase))\n             {\n-                return s_resolverLoadedType.LoadedAssembly ?? Assembly.Load(s_resolverLoadedType.Path);\n+                return s_resolverLoadedType?.LoadedAssembly ?? Assembly.Load(s_resolverLoadedType?.Path);",
              "author": {
                "login": "JaynieBai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Accessing 's_resolverLoadedType?.LoadedAssemblyName.FullName' may result in a null reference if 's_resolverLoadedType' is null. Use a null-conditional operator on 'LoadedAssemblyName' as well (e.g., s_resolverLoadedType?.LoadedAssemblyName?.FullName) to ensure safe access.\n```suggestion\n            if (args.Name.Equals(s_resolverLoadedType?.LoadedAssemblyName?.FullName, StringComparison.OrdinalIgnoreCase))\n```",
              "createdAt": "2025-04-16T08:28:33Z",
              "path": "src/Shared/TaskLoader.cs",
              "diffHunk": "@@ -179,11 +177,11 @@ bool isOutOfProc\n         /// This is a resolver to help created AppDomains when they are unable to load an assembly into their domain we will help\n         /// them succeed by providing the already loaded one in the currentdomain so that they can derive AssemblyName info from it\n         /// </summary>\n-        internal static Assembly AssemblyResolver(object sender, ResolveEventArgs args)\n+        internal static Assembly? AssemblyResolver(object sender, ResolveEventArgs args)\n         {\n-            if (args.Name.Equals(s_resolverLoadedType.LoadedAssemblyName.FullName, StringComparison.OrdinalIgnoreCase))\n+            if (args.Name.Equals(s_resolverLoadedType?.LoadedAssemblyName.FullName, StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Using 's_resolverLoadedType?.Path' as an argument in Assembly.Load may pass a null value if 's_resolverLoadedType' is null. Consider checking for null explicitly before calling Assembly.Load to avoid unexpected errors.\n```suggestion\n                if (s_resolverLoadedType == null || s_resolverLoadedType.Path == null)\n                {\n                    return null;\n                }\n                return s_resolverLoadedType.LoadedAssembly ?? Assembly.Load(s_resolverLoadedType.Path);\n```",
              "createdAt": "2025-04-16T08:28:34Z",
              "path": "src/Shared/TaskLoader.cs",
              "diffHunk": "@@ -179,11 +177,11 @@ bool isOutOfProc\n         /// This is a resolver to help created AppDomains when they are unable to load an assembly into their domain we will help\n         /// them succeed by providing the already loaded one in the currentdomain so that they can derive AssemblyName info from it\n         /// </summary>\n-        internal static Assembly AssemblyResolver(object sender, ResolveEventArgs args)\n+        internal static Assembly? AssemblyResolver(object sender, ResolveEventArgs args)\n         {\n-            if (args.Name.Equals(s_resolverLoadedType.LoadedAssemblyName.FullName, StringComparison.OrdinalIgnoreCase))\n+            if (args.Name.Equals(s_resolverLoadedType?.LoadedAssemblyName.FullName, StringComparison.OrdinalIgnoreCase))\n             {\n-                return s_resolverLoadedType.LoadedAssembly ?? Assembly.Load(s_resolverLoadedType.Path);\n+                return s_resolverLoadedType?.LoadedAssembly ?? Assembly.Load(s_resolverLoadedType?.Path);",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      }
    ]
  }
}