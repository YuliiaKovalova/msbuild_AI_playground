{
  "number": 6410,
  "title": "Log RAR \"size\" in ETW",
  "body": "### Context\r\n\r\nI'm poking around the question \"why do builds using the .NET SDK take longer than older non-SDK builds?\" and RAR time is one major factor. It'd be nice to have a complexity estimate in the ETW events: is this RAR instance resolving 3 files, or 300?\r\n\r\n### Changes Made\r\n\r\nAdd lightweight information about the size/complexity of a RAR\r\ninvocation by logging counts of the most interesting input/output lists.\r\n\r\n### Testing\r\n\r\nCollected updated traces manually and confirmed data present.\r\n\r\n\u26a0 Note this is currently targeting 16.11. Open to discussion on pushing it to main/17.0 instead.\r\n",
  "state": "MERGED",
  "createdAt": "2021-05-04T16:26:31Z",
  "updatedAt": "2021-06-04T23:00:03Z",
  "closedAt": "2021-06-04T23:00:03Z",
  "mergedAt": "2021-06-04T23:00:03Z",
  "additions": 4,
  "deletions": 4,
  "changedFiles": 2,
  "headRefName": "rar-event-counts",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "Area: Task: Resolve Assembly References (RAR)",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "90127f9019383de30ede99bb8e3ddc3789df04bc",
          "message": "RAR event complexity estimates\n\nAdd lightweight information about the size/complexity of a RAR\ninvocation by logging counts of the most interesting input/output lists.",
          "committedDate": "2021-05-04T16:22:24Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "da9133a36c6e286d61c6168bd62252d1418dec02",
          "message": "Feedback from Roman: log everything in stop for trivial table-making",
          "committedDate": "2021-05-04T19:08:13Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3c2e6be41496d599e865fd8ebb4971845457edca",
          "message": "Null-propagate",
          "committedDate": "2021-05-04T20:34:31Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2970a6b8164f26e54403b39bf56b6c05ae2881bd",
          "message": "Just null-guard everything",
          "committedDate": "2021-05-05T21:41:44Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "54d6a874cb972b4f8a12ab043843d5f5fa4156b5",
          "message": "Mark null lists with -1 instead of 0",
          "committedDate": "2021-06-02T21:43:41Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "01bcea2ff3b42ea71a7b428e2541c4b638f6e385",
          "message": "Log RAR counts only at the end (no need to do it twice)",
          "committedDate": "2021-06-02T21:48:50Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> It looks like it's pointing to main, though? I thought main was already 17.0?\r\n\r\n\ud83d\ude20 GitHub reset the branch somehow before I hit submit I think. Retargeted to where I intended to have it all along.",
        "createdAt": "2021-05-04T16:57:14Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Please consider to use null check/propagation, for example `_copyLocalFiles?.Length` at both Stop events callings. It is not guaranteed to be not null - especially in catch scenarios.",
              "createdAt": "2021-05-04T20:24:21Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2596,7 +2596,7 @@ out _copyLocalFiles\n                 }\n             }\n \n-            MSBuildEventSource.Log.RarOverallStop();\n+            MSBuildEventSource.Log.RarOverallStop(_resolvedFiles.Length, _resolvedDependencyFiles.Length, _copyLocalFiles.Length);",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Yes, great idea! That has bitten us before . . .",
              "createdAt": "2021-05-04T20:31:25Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2596,7 +2596,7 @@ out _copyLocalFiles\n                 }\n             }\n \n-            MSBuildEventSource.Log.RarOverallStop();\n+            MSBuildEventSource.Log.RarOverallStop(_resolvedFiles.Length, _resolvedDependencyFiles.Length, _copyLocalFiles.Length);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "(not crazy familiar with RAR)\r\n`_assemblyNames` is guaranteed not to be null here? There's a null check at the beginning of the method",
              "createdAt": "2021-05-05T17:29:27Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2579,7 +2579,7 @@ out _copyLocalFiles\n                             }\n                         }\n                     }\n-                    MSBuildEventSource.Log.RarOverallStop();\n+                    MSBuildEventSource.Log.RarOverallStop(_assemblyNames.Length, _assemblyFiles.Length, _resolvedFiles?.Length ?? 0, _resolvedDependencyFiles?.Length ?? 0, _copyLocalFiles?.Length ?? 0);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I believe it is because it's initialized to an `Array.Empty`, but the null check is fast and easy so I'm just going to do it here too.",
              "createdAt": "2021-05-05T21:43:26Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2579,7 +2579,7 @@ out _copyLocalFiles\n                             }\n                         }\n                     }\n-                    MSBuildEventSource.Log.RarOverallStop();\n+                    MSBuildEventSource.Log.RarOverallStop(_assemblyNames.Length, _assemblyFiles.Length, _resolvedFiles?.Length ?? 0, _resolvedDependencyFiles?.Length ?? 0, _copyLocalFiles?.Length ?? 0);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Maybe do this with ?? -1 to indicate null?\r\n\r\nAlso, things like _assemblyNames and _assemblyFiles shouldn't change over the course of an execution, right? So only log them at Stop? Can probably move _findDependencies there, too, so everything is together.",
              "createdAt": "2021-05-07T14:42:37Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2109,7 +2109,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader\n         )\n         {\n             bool success = true;\n-            MSBuildEventSource.Log.RarOverallStart();\n+            MSBuildEventSource.Log.RarOverallStart(_assemblyNames?.Length ?? 0, _assemblyFiles?.Length ?? 0, _findDependencies);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'm also wondering if we care about the difference between _assemblyNames and _assemblyFiles. Only one should be defined, right? And if they have the same meaning (resolve this many things), maybe have like `_assemblyNames?.Length ?? _assemblyFiles?.Length ?? -1`",
              "createdAt": "2021-05-07T14:44:00Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2109,7 +2109,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader\n         )\n         {\n             bool success = true;\n-            MSBuildEventSource.Log.RarOverallStart();\n+            MSBuildEventSource.Log.RarOverallStart(_assemblyNames?.Length ?? 0, _assemblyFiles?.Length ?? 0, _findDependencies);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Did you decide yea or nay on these two?",
              "createdAt": "2021-06-01T21:13:46Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2109,7 +2109,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader\n         )\n         {\n             bool success = true;\n-            MSBuildEventSource.Log.RarOverallStart();\n+            MSBuildEventSource.Log.RarOverallStart(_assemblyNames?.Length ?? 0, _assemblyFiles?.Length ?? 0, _findDependencies);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I had not!\r\n\r\nLooks pretty good now\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/120558210-c28da080-c3c4-11eb-8e4c-5ee56ff1492b.png)\r\n\r\n\r\n\r\n> I'm also wondering if we care about the difference between _assemblyNames and _assemblyFiles. Only one should be defined, right? And if they have the same meaning (resolve this many things), maybe have like `_assemblyNames?.Length ?? _assemblyFiles?.Length ?? -1`\r\n\r\nThey're not the same thing and many/most builds pass into both.",
              "createdAt": "2021-06-02T22:06:28Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2109,7 +2109,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader\n         )\n         {\n             bool success = true;\n-            MSBuildEventSource.Log.RarOverallStart();\n+            MSBuildEventSource.Log.RarOverallStart(_assemblyNames?.Length ?? 0, _assemblyFiles?.Length ?? 0, _findDependencies);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}