{
  "number": 2384,
  "title": "Reuse RequestBuilder threads",
  "body": "RequestBuilder queues tasks with `TaskCreationOptions.LongRunning` which means their threads don't interfere with the threadpool. However it also means a new thread is created for every task and it is unbounded.\r\n\r\nThis means a Nuget restore of Rosyln creates 3274 short-lived Request Builder threads\r\n\r\n![](https://aoa.blob.core.windows.net/aspnet/requestbuildthreads-unbounded.jpg)\r\n\r\nThis change introduces a TaskScheduler which caps the number of created threads (at processor count); and reuses them when they have stopped doing work rather than creating a new thread.\r\n\r\nThis means the same Nuget restore creates only 3 threads (on an 8 core machine, so upper bound 8)\r\n\r\n![](https://aoa.blob.core.windows.net/aspnet/requestbuilder-threads.png)\r\n\r\nI *believe* this change is safe as there is also a STA TaskScheduler which only allows one thread; so on the assumption that works; this should also work.\r\n\r\n/cc @stephentoub",
  "state": "MERGED",
  "createdAt": "2017-08-02T14:22:55Z",
  "updatedAt": "2021-01-15T15:55:19Z",
  "closedAt": "2018-05-10T19:37:41Z",
  "mergedAt": "2018-05-10T19:37:41Z",
  "additions": 64,
  "deletions": 4,
  "changedFiles": 1,
  "headRefName": "dedicated-scheuler",
  "isDraft": false,
  "author": {
    "login": "benaadams"
  },
  "milestone": {
    "title": "MSBuild 15.8"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d85011272df44dd7f57010a0e08af4c19b216dd2",
          "message": "Reuse and cap RequestBuilder threads",
          "committedDate": "2017-08-02T14:05:29Z",
          "author": {
            "name": "Ben Adams",
            "email": "thundercat@illyriad.co.uk"
          }
        }
      },
      {
        "commit": {
          "oid": "a8b53728a6088389953f037006254fb7e26ed733",
          "message": "Remove cap",
          "committedDate": "2017-08-02T17:21:36Z",
          "author": {
            "name": "Ben Adams",
            "email": "thundercat@illyriad.co.uk"
          }
        }
      },
      {
        "commit": {
          "oid": "2706d636e3244517ecf078b01f3ef8b8e0cfe0f7",
          "message": "Move DedicatedThreadsTaskScheduler to property",
          "committedDate": "2017-08-02T18:05:20Z",
          "author": {
            "name": "Ben Adams",
            "email": "thundercat@illyriad.co.uk"
          }
        }
      },
      {
        "commit": {
          "oid": "e56814759e077d5f34d5895fd52b64a3e008520c",
          "message": "static initalization of scheduler",
          "committedDate": "2017-08-02T19:02:56Z",
          "author": {
            "name": "Ben Adams",
            "email": "thundercat@illyriad.co.uk"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Naive question: why not just Task.Run() here?",
        "createdAt": "2017-08-02T15:11:39Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> Naive question: why not just Task.Run() here?\r\n\r\n`\u00af\\_(\u30c4)_/\u00af` I assume was some reason...\r\n\r\nCan it be embedded in something else like VS? Then using the threadpool with blocking I/O (XmlDocument why do you have no async load..?) might cause issues?",
        "createdAt": "2017-08-02T15:19:24Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "@benaadams After this change, what is the performance impact? Does restore go faster (by how much)?",
        "createdAt": "2017-08-02T15:34:20Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "test Windows_NT Build for Full",
        "createdAt": "2017-08-02T15:56:28Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": ">  what is the performance impact\r\n\r\nMeans I can profile MSBuild rather than the profiler getting weirded out by 3286 thread stacks \ud83d\ude04 ",
        "createdAt": "2017-08-02T15:56:51Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "Guess I'm wondering if this change *alone* has a material impact in improving wall-time since there'd presumably be less context switching and overhead?",
        "createdAt": "2017-08-02T15:58:13Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "> a material impact in improving wall-time\r\n\r\nOr a material regression.  One could imagine a situation where that would be true, e.g. where lots of the work items spend a lot of time blocking, such that the blocking will now be serialized to just three blocking in parallel.  In theory it could even cause deadlocks.  That said, I'm only speaking in generalities because I have no idea what the work items are actually doing.",
        "createdAt": "2017-08-02T16:00:59Z",
        "author": {
          "login": "stephentoub"
        }
      },
      {
        "body": "@stephentoub in this case though, if the threads were blocking, wouldn't it have hit the peak of 8 threads and stopped there? Since it only hit 3 of 8, it would seem that the threads weren't blocking or work backing up?",
        "createdAt": "2017-08-02T16:12:34Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "> in this case though\r\n\r\nLike I said, I've not looked at what the work is doing.  It's quite possible they're not blocking and entirely independent.  It's also possible there are dependencies that would manifest only if certain orderings occurred, e.g. imagine if you had a set of work items where some of them depended on previous ones finishing... if you queued them all in order, you might only end up with a few running concurrently, but if you queued them in the opposite order, you could end up with a ton of them blocking.",
        "createdAt": "2017-08-02T16:18:12Z",
        "author": {
          "login": "stephentoub"
        }
      },
      {
        "body": "Fair enough, it's all speculation until tests and timings are run :)",
        "createdAt": "2017-08-02T16:19:22Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "> such that the blocking will now be serialized to just three blocking in parallel. \r\n\r\nIt would be CPU count; it just goes up to three in this test; rather than the 8 it could go up to. Can increase to a multiple of cores; or remove the upper bound (for this it would have same outcome)\r\n\r\n> In theory it could even cause deadlocks. \r\n\r\nI assume that's why it doesn't queue to threadpool and uses `TaskCreationOptions.LongRunning` currently, so the ThreadPool is free is its running in-proc with something.\r\n\r\nFor pure MSBuild it also has an STA mode which is purely single threaded; hence my caveat \"if that works...\"\r\n\r\nIt seems to be serialized in order, e.g. it doesn't kick off a future task that depends on results of previous task so waits for it and potentially deadlocking. However; don't know if MSBuild allows overlapping dependent tasks.\r\n\r\nMain motivation for the upper limit was from coreclr/corefx builds which seem to spawn a huge number of parallel compiles and absolutely crush my machine; and assume spend a lot of time thread switching.\r\n\r\nWill remove the upper bound to make it a \"safe\" change; can revisit it later..?",
        "createdAt": "2017-08-02T17:07:55Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "> Will remove the upper bound to make it a \"safe\" change; can revisit it later..?\r\n\r\nIsn't the upper bound what's preventing \"a huge number of parallel compiles and absolutely crush my machine\"?",
        "createdAt": "2017-08-02T17:12:41Z",
        "author": {
          "login": "stephentoub"
        }
      },
      {
        "body": "> Isn't the upper bound what's preventing...\r\n\r\nYep; but not having it still produces the results I outlined in the PR summary; while maintaining previous behavior otherwise. \r\n\r\nSo can address the cap in a different PR with an investigation - though likely I'll just raise an issue, as would need a much greater understanding of what MSBuild actually does (implementation-wise) than I have or can dedicate time to gaining.",
        "createdAt": "2017-08-02T17:18:04Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "@benaadams isn't the magic here really that you're reusing threads and not creating a new LongRunning one each time?",
        "createdAt": "2017-08-02T17:18:48Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "> isn't the magic here\r\n\r\nThat would help if the problem was around the overhead associated with creating/destroying threads.  But it sounded like the problem was actually lots of threads all running/competing at the same time.  If that's not actually the problem, then what's the value of the PR?  If it's the cost of the thread overhead, are there numbers to justify the added complexity?",
        "createdAt": "2017-08-02T17:22:46Z",
        "author": {
          "login": "stephentoub"
        }
      },
      {
        "body": "The MSBuild part of a NuGet restore of Rosyln creates and destorys 3274 builder threads; it only ever really uses CPU for 1 thread; which is the main reason behind this PR.\r\n\r\nThe cap was mostly an add-on to stop parallelizable tasks from going too wild; which coreclr/corefx seem to do for full builds (e.g. I assume most of the tests can be happily built in parallel).\r\n\r\nHowever, that was a reach without much analysis, so removing that bit for the concerns @stephentoub highlighted (i.e. I don't actually know what it does)",
        "createdAt": "2017-08-02T17:32:15Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "Removed cap and moved to property rather than static; results the same\r\n\r\n![](https://aoa.blob.core.windows.net/aspnet/threads.png)",
        "createdAt": "2017-08-02T18:08:17Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "I'm curious: what's the impact on overall start->end wall time here?",
        "createdAt": "2017-08-02T18:09:23Z",
        "author": {
          "login": "NickCraver"
        }
      },
      {
        "body": "Keep in mind that each thread has a 1MB stack, so 3000 threads are 3GB of memory right there. Also makes profiling impossible since the profiler chokes getting the stacks of 3000 threads. Also starting a thread is expensive, it calls DllThreadAttach and stuff. I love this change and we do need to fix this.\r\n\r\nI'm just thinking maybe it's worth just trying the default threadpool, maybe there's no real reason to have long running in the first place?",
        "createdAt": "2017-08-02T18:13:50Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> I'm curious: what's the impact on overall start->end wall time here?\r\n\r\nNow I'm going to have to write a [time](https://linux.die.net/man/1/time) tool :P",
        "createdAt": "2017-08-02T18:20:29Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "Powershell! `Measure-Command `",
        "createdAt": "2017-08-02T18:22:19Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "> However, that was a reach without much analysis, so removing that bit for the concerns @stephentoub highlighted\r\n\r\nThere are concerns to this change without the cap, too.  Previously threads would go away when they complete; now once a thread is added, it hangs out forever waiting for more work.  That means if, for example, you have a burst of work, you'll add a bunch of threads, and then even if they're unnecessary, they'll hang out waiting for more work until the process ends.  Maybe that's not a big deal, but any change like this really needs to be understood in a greater context of varied workloads that will stress it in different ways.\r\n\r\nI'm not against a change like this in practice.  But writing thread pools is hard, and to write one for a specific use case really demands understanding what work is going to be executed, the various patterns involved, etc.",
        "createdAt": "2017-08-02T18:26:16Z",
        "author": {
          "login": "stephentoub"
        }
      },
      {
        "body": "> I'm curious: what's the impact on overall start->end wall time here?\r\n\r\n`NuGet restore C:\\GitHub\\roslyn\\Roslyn.sln -NoCache`\r\n\r\nPrior\r\n`TotalSeconds      : 33.509692`\r\nPost\r\n`TotalSeconds      : 29.4461761`\r\n\r\nThough I'm not sure I'd trust it; timing a process isn't a science \ud83d\ude09 \r\n\r\n",
        "createdAt": "2017-08-02T18:37:35Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "> There are concerns to this change without the cap, too. Previously threads would go away when they complete; now once a thread is added, it hangs out forever waiting for more work....\r\n\r\n\ud83d\ude22 true. \r\n\r\nIdeally would move it to the ThreadPool but it uses `XmlDocument` which has no `LoadAsync` methods; (though `XmlReader` supports async); it isn't easy to make the equivalent as it delegates to the internal type `XmlLoader` which then uses lots of internal types.\r\n\r\nCould use the `Load(string)` method and go async via StringBuilder, but allocs will be ugly",
        "createdAt": "2017-08-02T18:57:08Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "K will try something else...",
        "createdAt": "2017-08-02T19:23:55Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "> Could use the Load(string) method and go async via StringBuilder, but allocs will be ugly\r\n\r\nMMF via UnmanagedMemoryStream?\r\n\r\n",
        "createdAt": "2017-08-02T19:54:42Z",
        "author": {
          "login": "omariom"
        }
      },
      {
        "body": "Ah.. that will be sync io anyway",
        "createdAt": "2017-08-02T19:55:12Z",
        "author": {
          "login": "omariom"
        }
      },
      {
        "body": "@benaadams https://github.com/KirillOsenkov/CodeCleanupTools/tree/master/Time\r\n\r\nhttps://github.com/KirillOsenkov/CodeCleanupTools/releases/tag/timing.1.0.0",
        "createdAt": "2017-08-02T20:04:19Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> The cap was mostly an add-on to stop parallelizable tasks from going too wild; which coreclr/corefx seem to do for full builds\r\n\r\nTurns out this bit was wishful thinking as a coreclr build runs 8 x MSBuild on my 8 core machine...\r\n\r\nThe XmlDoc was a little distraction as the main issue is the Tasks can be anything; for out-of-proc processes, I can make the waits async rather than sync.\r\n\r\nHowever, they can also be in proc and after going through a smattering of NuGet MSBuild target tasks on GitHub about half seem to use `.Wait` or `.WaitForExit`; so moving everything to the main threadpool may cause issues.\r\n\r\nSo question is whether to create a secondary threadpool; which seems like reinventing the wheel...",
        "createdAt": "2017-08-04T14:52:13Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "Hey, just wanted to say: we haven't forgotten about this but we'd like a core team member to do some investigation into exactly what's going on in the bad cases before merging this.",
        "createdAt": "2017-08-10T19:09:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I ran compared these changes against the previous commit using the internal tests for evaluation and got the following numbers:\r\n\r\nTest | Type | Overall | Significant  | Value\r\n:--- | :---| :--- | :--- | :---\r\nDotnetConsoleProject | Evaluation: Time (ms) | :ok_hand: | no | 31.7814 -> 31.6024 (-0.563%)\r\nDotnetConsoleProject | Evaluation: Memory | :ok_hand: | no | 5982291 -> 5982387 (0.002%)\r\nDotnetWebProject | Evaluation: Time (ms) | :white_check_mark: | yes | 45.8522 -> 45.3494 (-1.097%)\r\nDotnetWebProject | Evaluation: Memory | :ok_hand: | no | 7730825 -> 7730733 (-0.001%)\r\nDotnetMvcProject | Evaluation: Time (ms) | :white_check_mark: | yes | 76.994 -> 76.0761 (-1.192%)\r\nDotnetMvcProject | Evaluation: Memory | :ok_hand: | no | 10100507 -> 10100740 (0.002%)\r\nPicasso | Evaluation: Time (ms) | :ok_hand: | no | 295.5332 -> 295.1646 (-0.125%)\r\nPicasso | Evaluation: Memory | :ok_hand: | no | 46007825 -> 46008835 (0.002%)\r\nSmallP2POldCsproj | Evaluation: Time (ms) | :white_check_mark: | yes | 50.2176 -> 49.6575 (-1.115%)\r\nSmallP2POldCsproj | Evaluation: Memory | :ok_hand: | no | 7771757 -> 7771703 (-0.001%)\r\nGenerated_100_100_v150 | Evaluation: Time (ms) | :ok_hand: | no | 1355.856 -> 1354.705 (-0.085%)\r\nGenerated_100_100_v150 | Evaluation: Memory | :ok_hand: | no | 193990613 -> 193990580 (0%)\r\nLargeP2POldCsproj | Evaluation: Time (ms) | :ok_hand: | no | 876.6518 -> 879.356 (0.308%)\r\nLargeP2POldCsproj | Evaluation: Memory | :ok_hand: | no | 114923256 -> 114923067 (0%)\r\nroslyn | Evaluation: Time (ms) | :ok_hand: | no | 4886.8108 -> 4879.6933 (-0.146%)\r\nroslyn | Evaluation: Memory | :ok_hand: | no | 565353594 -> 577630985 (2.172%)",
        "createdAt": "2017-10-03T09:37:52Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I do like a good cliffhanger, but did anyone get final conclusion about mergeability? It sounds like this would help with future performance analysis at least.",
        "createdAt": "2017-11-22T15:26:55Z",
        "author": {
          "login": "lahma"
        }
      },
      {
        "body": "Currently it doesn't seem to have moved the dial in actual build time/evaluation time. I'd like to understand if this reduces the amount of CPU burned by SleepEx as called out in https://github.com/Microsoft/msbuild/issues/2391 - that would involve looking at traces of before and after. @rainersigwald's not back until middle of December, I suspect it will need to wait until then.",
        "createdAt": "2017-11-26T23:26:49Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Keep in mind that the motivation is also debuggability (like Ben's profiler issue). Also I'd be curious to look at the memory footprint (1 thread ~ 1 MB for the stack).\r\n\r\nP.S. Sorry I forgot that you've done the measurements - great job!",
        "createdAt": "2017-11-27T00:18:14Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Over the course of the investigation into #3047, I think @cdmihai and I leveled up our knowledge of RequestBuilder's internals to grok both the problem and this solution.\r\n\r\nIn particular, I had a big nagging question when seeing the results of this change: _why isn't one thread enough?_\r\n\r\nI knew that, logically, MSBuild builds only one project at a time per node. If the project hits certain conditions (MSBuild task calling into another project, task yielding), it can yield the node--freeing the node to build other projects, but still only one thing at a time.\r\n\r\nThat's all managed through a series of async continuations. Each BuildRequest starts a task that has continuations that will build the entire project. \"Yielding the node\" means awaiting a task that will be satisfied when some other BuildRequest has completed. Unblocking of requests is serialized, so that when a result comes in and N projects that were waiting for it can now build only one is unblocked at a time.\r\n\r\nSo when is there ever a need for more than one thread? When queuing new work, we take a couple of quick hops that can happen in parallel with normal processing. I don't think they _have_ to.\r\n\r\n## Concerns I still have\r\n\r\n* Is the culture being juggled in all the appropriate places, now that we're using fewer threads? I don't _think_ this would be worse than before.\r\n* Would it actually be better to scope this down to one thread, period? Clearly our predecessors thought that was suboptimal since there's the `OneSTAThreadPerTaskSchedulerInstance` option. But as-is, the mostly-single-threaded workload will hop from thread to thread if a new thread is ever created. Still better than hopping to a new thread every time!\r\n* Does this have some other hidden problems?\r\n\r\n## Next steps\r\n\r\nOver the weekend, I'm going to spin up a private build of this and subject it to VS's internal \"DDRIT\" and \"RPS\" tests to see if anything falls out. Assuming they all pass, I think I'll be ready to pull this into our master branch so we can get real-world usage of it in VS previews.\r\n\r\nI'll also push a commit to this PR that I think clarifies some names that I found confusing when reviewing (preexisting, not new to this PR).",
        "createdAt": "2018-03-30T23:02:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Nice! Thanks for the follow up.",
        "createdAt": "2018-03-30T23:05:12Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "> In particular, I had a big nagging question when seeing the results of this change: _why isn't one thread enough?_\r\n\r\nAt long last, I can explain this now! https://github.com/dotnet/msbuild/pull/6042 has the details.\r\n\r\nWhile figuring this out I tracked down the original commit that introduced the `LongRunning` option ([Microsoft-internal link](http://vstfdevdiv:8080/DevDiv2/DevDiv/_versionControl/changeset/306503?_a=compare&path=%24%2FDevDiv%2Fpu%2FWin8Tools%2Fvsproject%2Fxmake%2FXMakeBuildEngine%2FBackEnd%2FComponents%2FRequestBuilder%2FRequestBuilder.cs)). It was introduced to fix a bug ([Microsoft-internal link](http://vstfdevdiv:8080/DevDiv2/DevDiv/_workitems/edit/203360)):\r\n\r\n> ## [Build, Performance] Consider reusing the same RequestBuilder thread/s - 10x more thread starts over SP1\r\n> \r\n> We are starting way more threads than before. I see 10x as many in MSTV Incremental.\r\n\r\nThat's . . . almost exactly what @benaadams fixed with this PR. It must have been really _really_ bad for a while there!",
        "createdAt": "2021-01-15T15:55:19Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you make this a field backed property to avoid the locking?",
              "createdAt": "2017-08-02T17:26:10Z",
              "path": "src/Shared/AwaitExtensions.cs",
              "diffHunk": "@@ -52,6 +63,28 @@ internal static TaskScheduler OneSTAThreadPerTaskSchedulerInstance\n         }\n \n         /// <summary>\n+        /// Gets the dedicated scheduler.\n+        /// </summary>\n+        internal static TaskScheduler DedicatedThreadsTaskSchedulerInstance",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Done",
              "createdAt": "2017-08-02T18:08:32Z",
              "path": "src/Shared/AwaitExtensions.cs",
              "diffHunk": "@@ -52,6 +63,28 @@ internal static TaskScheduler OneSTAThreadPerTaskSchedulerInstance\n         }\n \n         /// <summary>\n+        /// Gets the dedicated scheduler.\n+        /// </summary>\n+        internal static TaskScheduler DedicatedThreadsTaskSchedulerInstance",
              "author": {
                "login": "benaadams"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`private static TaskScheduler _dedicatedScheduler = new DedicatedThreadsTaskScheduler();` and then the static property should just return the field without any attempts to instantiate. The CLR promises type creation is thread safe, so assignment expressions to static fields is thread safe. Therefore no locking needed.\r\n",
              "createdAt": "2017-08-02T18:14:25Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -110,6 +111,16 @@ internal class RequestBuilder : IRequestBuilder, IRequestBuilderCallback, IBuild\n         private bool _isZombie = false;\n \n         /// <summary>\n+        /// The dedicated scheduler object.\n+        /// </summary>\n+        private static TaskScheduler _dedicatedScheduler;\n+\n+        /// <summary>\n+        /// Gets the dedicated scheduler.\n+        /// </summary>\n+        private TaskScheduler DedicatedScheduler => _dedicatedScheduler ?? (_dedicatedScheduler = new DedicatedThreadsTaskScheduler());",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}