{
  "number": 9236,
  "title": "ProjectCache: Break away from UI thread for initialization to avoid VS hangs",
  "body": "ProjectCache: Break away from UI thread for initialization to avoid VS hangs.\r\n\r\nThis fixes a hang reported by some users which appears to impact some specific scenarios.\r\n\r\nFor some legacy scenarios in VS, it appears that design-time builds are not properly detected by the project cache and so trigger the scenario. This runs on the UI thread, which itself is bad, but then in the `InitializePluginsForVsScenario` method, some tasks are used which also execute on the UI thread and the specific plugin the customer is using makes many async calls which ends up hanging the UI thread.\r\n\r\nOriginally, I had wrongly assumed that the `Parallel.ForEach` would cause the code in the body to run in a separate thread, breaking away from the UI thread. However, that's a bad assumption as with a small number of items (1 in this case) it just runs synchronously.\r\n\r\nThis just slaps it in a `Task.Run`, which is probably inelegant, but hey it works. I'm open to suggestions, but I do think it's important to \"break away\" entirely since we would not want VS's UI thread to be beholden to plugin (external) code which may not `ConfigureAwait` properly, as is the case here :)\r\n\r\nI applied the same change to `InitializePluginsForGraph` proactively since it does basically the same thing, although the VS scenario doesn't use it today, but might as well future-proof it.\r\n\r\nCC @davkean ",
  "state": "MERGED",
  "createdAt": "2023-09-20T05:55:42Z",
  "updatedAt": "2023-09-21T16:51:39Z",
  "closedAt": "2023-09-21T16:51:39Z",
  "mergedAt": "2023-09-21T16:51:39Z",
  "additions": 31,
  "deletions": 19,
  "changedFiles": 1,
  "headRefName": "project-cache-fix-vs-hang",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "803033fc5769c2dc5e4fa385086effb01ee90987",
          "message": "ProjectCache: Break away from UI thread for intialization to avoid VS hangs",
          "committedDate": "2023-09-20T05:47:49Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "For my own education and unrelated to the change: What's the purpose of this continuation?",
              "createdAt": "2023-09-21T13:05:45Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -99,18 +99,24 @@ public void InitializePluginsForGraph(ProjectGraph projectGraph, CancellationTok\n         {\n             EnsureNotDisposed();\n \n-            Parallel.ForEach(\n-                projectGraph.ProjectNodes,\n-                s_parallelOptions,\n-                node =>\n+            // Performing this in a Task.Run to break away from the main thread and prevent hangs\n+            Task.Run(\n+                () =>\n                 {\n-                    foreach (ProjectCacheDescriptor projectCacheDescriptor in GetProjectCacheDescriptors(node.ProjectInstance))\n-                    {\n-                        // Intentionally fire-and-forget to asynchronously initialize the plugin. Any exceptions will bubble up later when querying.\n-                        _ = GetProjectCachePluginAsync(projectCacheDescriptor, projectGraph, buildRequestConfiguration: null, cancellationToken)\n-                            .ContinueWith(t => { }, TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnFaulted);\n-                    }\n-                });\n+                    Parallel.ForEach(\n+                        projectGraph.ProjectNodes,\n+                        s_parallelOptions,\n+                        node =>\n+                        {\n+                            foreach (ProjectCacheDescriptor projectCacheDescriptor in GetProjectCacheDescriptors(node.ProjectInstance))\n+                            {\n+                                // Intentionally fire-and-forget to asynchronously initialize the plugin. Any exceptions will bubble up later when querying.\n+                                _ = GetProjectCachePluginAsync(projectCacheDescriptor, projectGraph, buildRequestConfiguration: null, cancellationToken)\n+                                    .ContinueWith(t => { }, TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnFaulted);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I think its trying to fire and forget, but its not needed; if no one observes the result - it will never throw.",
              "createdAt": "2023-09-21T13:07:59Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -99,18 +99,24 @@ public void InitializePluginsForGraph(ProjectGraph projectGraph, CancellationTok\n         {\n             EnsureNotDisposed();\n \n-            Parallel.ForEach(\n-                projectGraph.ProjectNodes,\n-                s_parallelOptions,\n-                node =>\n+            // Performing this in a Task.Run to break away from the main thread and prevent hangs\n+            Task.Run(\n+                () =>\n                 {\n-                    foreach (ProjectCacheDescriptor projectCacheDescriptor in GetProjectCacheDescriptors(node.ProjectInstance))\n-                    {\n-                        // Intentionally fire-and-forget to asynchronously initialize the plugin. Any exceptions will bubble up later when querying.\n-                        _ = GetProjectCachePluginAsync(projectCacheDescriptor, projectGraph, buildRequestConfiguration: null, cancellationToken)\n-                            .ContinueWith(t => { }, TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnFaulted);\n-                    }\n-                });\n+                    Parallel.ForEach(\n+                        projectGraph.ProjectNodes,\n+                        s_parallelOptions,\n+                        node =>\n+                        {\n+                            foreach (ProjectCacheDescriptor projectCacheDescriptor in GetProjectCacheDescriptors(node.ProjectInstance))\n+                            {\n+                                // Intentionally fire-and-forget to asynchronously initialize the plugin. Any exceptions will bubble up later when querying.\n+                                _ = GetProjectCachePluginAsync(projectCacheDescriptor, projectGraph, buildRequestConfiguration: null, cancellationToken)\n+                                    .ContinueWith(t => { }, TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnFaulted);",
              "author": {
                "login": "davkean"
              }
            },
            {
              "body": "That's not quite true. If the task throws and no one observes it, it crashes the application entirely.\r\n\r\nThis is an attempt to \"observe\" the exception with a nop",
              "createdAt": "2023-09-21T13:31:33Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -99,18 +99,24 @@ public void InitializePluginsForGraph(ProjectGraph projectGraph, CancellationTok\n         {\n             EnsureNotDisposed();\n \n-            Parallel.ForEach(\n-                projectGraph.ProjectNodes,\n-                s_parallelOptions,\n-                node =>\n+            // Performing this in a Task.Run to break away from the main thread and prevent hangs\n+            Task.Run(\n+                () =>\n                 {\n-                    foreach (ProjectCacheDescriptor projectCacheDescriptor in GetProjectCacheDescriptors(node.ProjectInstance))\n-                    {\n-                        // Intentionally fire-and-forget to asynchronously initialize the plugin. Any exceptions will bubble up later when querying.\n-                        _ = GetProjectCachePluginAsync(projectCacheDescriptor, projectGraph, buildRequestConfiguration: null, cancellationToken)\n-                            .ContinueWith(t => { }, TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnFaulted);\n-                    }\n-                });\n+                    Parallel.ForEach(\n+                        projectGraph.ProjectNodes,\n+                        s_parallelOptions,\n+                        node =>\n+                        {\n+                            foreach (ProjectCacheDescriptor projectCacheDescriptor in GetProjectCacheDescriptors(node.ProjectInstance))\n+                            {\n+                                // Intentionally fire-and-forget to asynchronously initialize the plugin. Any exceptions will bubble up later when querying.\n+                                _ = GetProjectCachePluginAsync(projectCacheDescriptor, projectGraph, buildRequestConfiguration: null, cancellationToken)\n+                                    .ContinueWith(t => { }, TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnFaulted);",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Hmm, maybe I'm wrong here, or maybe it's only when ThrowUnobservedTaskExceptions is explicitly enabled...?\r\n\r\nEither way, leaving as-is for now to mitigate the existing issue. Maybe a cleanup PR can come later.",
              "createdAt": "2023-09-21T15:58:23Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -99,18 +99,24 @@ public void InitializePluginsForGraph(ProjectGraph projectGraph, CancellationTok\n         {\n             EnsureNotDisposed();\n \n-            Parallel.ForEach(\n-                projectGraph.ProjectNodes,\n-                s_parallelOptions,\n-                node =>\n+            // Performing this in a Task.Run to break away from the main thread and prevent hangs\n+            Task.Run(\n+                () =>\n                 {\n-                    foreach (ProjectCacheDescriptor projectCacheDescriptor in GetProjectCacheDescriptors(node.ProjectInstance))\n-                    {\n-                        // Intentionally fire-and-forget to asynchronously initialize the plugin. Any exceptions will bubble up later when querying.\n-                        _ = GetProjectCachePluginAsync(projectCacheDescriptor, projectGraph, buildRequestConfiguration: null, cancellationToken)\n-                            .ContinueWith(t => { }, TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnFaulted);\n-                    }\n-                });\n+                    Parallel.ForEach(\n+                        projectGraph.ProjectNodes,\n+                        s_parallelOptions,\n+                        node =>\n+                        {\n+                            foreach (ProjectCacheDescriptor projectCacheDescriptor in GetProjectCacheDescriptors(node.ProjectInstance))\n+                            {\n+                                // Intentionally fire-and-forget to asynchronously initialize the plugin. Any exceptions will bubble up later when querying.\n+                                _ = GetProjectCachePluginAsync(projectCacheDescriptor, projectGraph, buildRequestConfiguration: null, cancellationToken)\n+                                    .ContinueWith(t => { }, TaskContinuationOptions.ExecuteSynchronously | TaskContinuationOptions.OnlyOnFaulted);",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      }
    ]
  }
}