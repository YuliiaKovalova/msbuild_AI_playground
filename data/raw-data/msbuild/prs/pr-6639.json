{
  "number": 6639,
  "title": "Improve debugging experience: add global switch MSBuildDebugEngine; Inject binary logger from BuildManager; print static graph as .dot file",
  "body": "### Context\r\nThere's still a bit of friction when debugging MSBuild, especially under VS. You have to set multiple env vars, or search through temp, find all the obscure env var names, etc\r\n\r\n### Changes Made\r\n- add one env var, `MSBuildDebugEngine` to turn everything on and also automatically pick `./MSBuild_Logs` as the debug log path for everything that spews out log files.\r\n- in addition, when `MSBuildDebugEngine`: \r\n  - inject a binary logger directly from the build manager. This is super useful when running MSBuild in VS, as the build logging that VS gives is kind of lacking\r\n  - dump a `.dot` representation of the static graph, when one is available\r\n\r\nThis is how `MSBuild_Logs` looks like after doing a build (both VS and cmdline should produce this):\r\n![image](https://user-images.githubusercontent.com/2255729/123869003-4b74fa80-d8e5-11eb-8fef-bd0bea421411.png)\r\n",
  "state": "MERGED",
  "createdAt": "2021-06-29T21:25:13Z",
  "updatedAt": "2021-08-26T14:14:10Z",
  "closedAt": "2021-07-26T20:24:26Z",
  "mergedAt": "2021-07-26T20:24:26Z",
  "additions": 463,
  "deletions": 345,
  "changedFiles": 16,
  "headRefName": "improveDebugging",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "65b4817dc0a55e8fa119953bea322f57238a3fb6",
          "message": "Extract out useful DebugUtils",
          "committedDate": "2021-07-23T15:33:55Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b1f000780b60457784626c850fb7e99b1a054874",
          "message": "Extract engine debug flags",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b2fa6406321e5c69d92440f6e47087be489c39a4",
          "message": "Improve VS debugging by injecting binlogger in build manager",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ad490eb343cb546ae30a0025bd5ec1510225de7f",
          "message": "Dump project graph",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "93228cceadf2749bfe42f0890e14e4abe1c37da6",
          "message": "Make access to debug flags uniform and under change wave",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "503fb173f1f80e9eb38b21266a024385b09e8633",
          "message": "Fix failing test",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ddc3feea2de70c99100316e61eca347c78beb2ac",
          "message": "use field TestEnvironment in XMake_Tests",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "84908ae1263d28603705f5f46b684a4e279e612e",
          "message": "Remove redundant type specifier",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4edc6aa76c62a059512a795038d42f44c14d6e8c",
          "message": "Inline out var declarations",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d5182458b8484d2ea0bf292196f754e6712273e6",
          "message": "use type keyword",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7277582769208a8c1ecbe4c491086287c7767064",
          "message": "Remove redundant code",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ed4aab3fdb5b26a4191f9a390e31eec627ee6da9",
          "message": "Misc cleanup",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "77fee9542d69fc162e20a08ffe778e148dfee14c",
          "message": "update change waves",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0a120a41ce8fcc639f4612f3872c9be3baeda0ef",
          "message": "Fix appending to file name",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "732c92b38e4310dc629d025115539179c18b4f4f",
          "message": "Remove Linq from non-debugging path",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f4611b00a547862c8ae55529f6f4d9438d4c973b",
          "message": "Cache check whether to debug current process",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0f2981556c27553529c000aee19ca388d810153",
          "message": "Document ifdef",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bb65c38a60e547f2a7edc3802c0a1bc751f8f2a4",
          "message": "Propagate debug path to out of proc nodes",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aa5d749d042317b53fb925022ee7fa45fa4300f5",
          "message": "Remove unused fields",
          "committedDate": "2021-07-24T03:59:02Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Can you add this PR to the [changewaves doc](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves.md)?",
        "createdAt": "2021-07-14T19:40:19Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@cdmihai This appears to have regressed VS: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1386501",
        "createdAt": "2021-08-26T08:39:25Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Let's go ahead and revert this until we can chase the problems down. I think the only thing that _really_ needs to change is the moved default emergency-stack-dump-text-file location.",
        "createdAt": "2021-08-26T14:14:10Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do you need to concat something to empty as opposed to just taking GetDebuggingLoggers()?",
              "createdAt": "2021-07-05T18:01:48Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -486,7 +488,7 @@ public void BeginBuild(BuildParameters parameters)\n             ILoggingService InitializeLoggingService()\n             {\n                 ILoggingService loggingService = CreateLoggingService(\n-                    _buildParameters.Loggers,\n+                    (_buildParameters.Loggers ?? Enumerable.Empty<ILogger>()).Concat(GetDebuggingLoggers()),",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "If buildParam.Loggers is not null, then I need to concat with the method. If it is null, I need to take just the method. This was the shortest way I found to express it.",
              "createdAt": "2021-07-13T17:24:52Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -486,7 +488,7 @@ public void BeginBuild(BuildParameters parameters)\n             ILoggingService InitializeLoggingService()\n             {\n                 ILoggingService loggingService = CreateLoggingService(\n-                    _buildParameters.Loggers,\n+                    (_buildParameters.Loggers ?? Enumerable.Empty<ILogger>()).Concat(GetDebuggingLoggers()),",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "This is very concise but since it's just for us, I'd rather see something like\r\n```suggestion\r\n                    AppendDebuggingLoggers(_buildParameters.Loggers),\r\n```\r\n\r\nso we have neither linq nor the empty enumerables in the main path.",
              "createdAt": "2021-07-14T20:11:32Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -486,7 +488,7 @@ public void BeginBuild(BuildParameters parameters)\n             ILoggingService InitializeLoggingService()\n             {\n                 ILoggingService loggingService = CreateLoggingService(\n-                    _buildParameters.Loggers,\n+                    (_buildParameters.Loggers ?? Enumerable.Empty<ILogger>()).Concat(GetDebuggingLoggers()),",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why do you need to say `is false`? Aren't there non-nullable bools?",
              "createdAt": "2021-07-05T18:03:11Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -518,6 +520,22 @@ ILoggingService InitializeLoggingService()\n                 return loggingService;\n             }\n \n+            // VS builds discard many msbuild events so attach a binlogger to capture them all.\n+            IEnumerable<ILogger> GetDebuggingLoggers()\n+            {\n+                if (CurrentProcessMatchesDebugName() is false ||",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Just style preference, has nothing to do with nullability.",
              "createdAt": "2021-07-13T17:25:57Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -518,6 +520,22 @@ ILoggingService InitializeLoggingService()\n                 return loggingService;\n             }\n \n+            // VS builds discard many msbuild events so attach a binlogger to capture them all.\n+            IEnumerable<ILogger> GetDebuggingLoggers()\n+            {\n+                if (CurrentProcessMatchesDebugName() is false ||",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I prefer !CurrentProcessMatchesDebugName, but that's fine. This is probably more readable, to be honest.",
              "createdAt": "2021-07-13T18:25:38Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -518,6 +520,22 @@ ILoggingService InitializeLoggingService()\n                 return loggingService;\n             }\n \n+            // VS builds discard many msbuild events so attach a binlogger to capture them all.\n+            IEnumerable<ILogger> GetDebuggingLoggers()\n+            {\n+                if (CurrentProcessMatchesDebugName() is false ||",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "tiny nit:\r\n```suggestion\r\n                var logger = new BinaryLogger { Parameters = binlogPath };\r\n\r\n                return new []{ logger };\r\n```",
              "createdAt": "2021-07-05T18:04:34Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -518,6 +520,22 @@ ILoggingService InitializeLoggingService()\n                 return loggingService;\n             }\n \n+            // VS builds discard many msbuild events so attach a binlogger to capture them all.\n+            IEnumerable<ILogger> GetDebuggingLoggers()\n+            {\n+                if (CurrentProcessMatchesDebugName() is false ||\n+                    Traits.Instance.DebugEngine is false)\n+                {\n+                    return Enumerable.Empty<ILogger>();\n+                }\n+\n+                var binlogPath = DebugUtils.FindNextAvailableDebugFilePath($\"{DebugUtils.ProcessInfoString}_BuildManager_{_hostName}_{GetHashCode()}.binlog\");\n+\n+                var logger = new BinaryLogger { Parameters = binlogPath};\n+\n+                return new []{logger} ;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why `is false`?\r\n\r\nAlso, nit: I'd negate this and move the rest in. Nice to have just one exit point for functions when it isn't too hard.",
              "createdAt": "2021-07-05T18:17:20Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1825,6 +1855,18 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)\n                     _overallBuildSuccess = false;\n                 }\n             }\n+\n+            static void DumpGraph(ProjectGraph graph, IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetList = null)\n+            {\n+                if (Traits.Instance.DebugEngine is false)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I prefer to minimize the amount of statements in nested blocks. Function still has two exit points even if I put all the logic in the if statement.",
              "createdAt": "2021-07-13T17:39:24Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1825,6 +1855,18 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)\n                     _overallBuildSuccess = false;\n                 }\n             }\n+\n+            static void DumpGraph(ProjectGraph graph, IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetList = null)\n+            {\n+                if (Traits.Instance.DebugEngine is false)",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why are these separate from all the readonly variables below?",
              "createdAt": "2021-07-05T18:20:56Z",
              "path": "src/Shared/Traits.cs",
              "diffHunk": "@@ -27,6 +27,9 @@ public static Traits Instance\n         public Traits()\n         {\n             EscapeHatches = new EscapeHatches();\n+\n+            DebugScheduler = DebugEngine || Environment.GetEnvironmentVariable(\"MSBUILDDEBUGSCHEDULER\") != null;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Language limitation:\r\n![image](https://user-images.githubusercontent.com/2255729/125500387-e442530f-cce6-44c3-93e5-fa9d3718bf5f.png)\r\n",
              "createdAt": "2021-07-13T17:45:14Z",
              "path": "src/Shared/Traits.cs",
              "diffHunk": "@@ -27,6 +27,9 @@ public static Traits Instance\n         public Traits()\n         {\n             EscapeHatches = new EscapeHatches();\n+\n+            DebugScheduler = DebugEngine || Environment.GetEnvironmentVariable(\"MSBUILDDEBUGSCHEDULER\") != null;",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Does this have to be `=>` rather than `=`? I don't see the difference here.",
              "createdAt": "2021-07-05T18:22:53Z",
              "path": "src/Shared/Debugging/DebugUtils.cs",
              "diffHunk": "@@ -0,0 +1,71 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Text.RegularExpressions;\n+\n+namespace Microsoft.Build.Shared.Debugging\n+{\n+    internal static class DebugUtils\n+    {\n+        private enum NodeMode\n+        {\n+            CentralNode,\n+            OutOfProcNode,\n+            OutOfProcTaskHostNode\n+        }\n+\n+        private static readonly Lazy<NodeMode> ProcessNodeMode = new(\n+        () =>\n+        {\n+            return ScanNodeMode(Environment.CommandLine);\n+\n+            NodeMode ScanNodeMode(string input)\n+            {\n+                var match = Regex.Match(input, @\"/nodemode:(?<nodemode>[12\\s])(\\s|$)\", RegexOptions.IgnoreCase);\n+\n+                if (!match.Success)\n+                {\n+                    return NodeMode.CentralNode;\n+                }\n+                var nodeMode = match.Groups[\"nodemode\"].Value;\n+\n+                Trace.Assert(!string.IsNullOrEmpty(nodeMode));\n+\n+                return nodeMode switch\n+                {\n+                    \"1\" => NodeMode.OutOfProcNode,\n+                    \"2\" => NodeMode.OutOfProcTaskHostNode,\n+                    _ => throw new NotImplementedException(),\n+                };\n+            }\n+        });\n+\n+        public static string ProcessInfoString",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Good point, everything in the expression should be constant throughout process lifetime.",
              "createdAt": "2021-07-13T17:48:42Z",
              "path": "src/Shared/Debugging/DebugUtils.cs",
              "diffHunk": "@@ -0,0 +1,71 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Text.RegularExpressions;\n+\n+namespace Microsoft.Build.Shared.Debugging\n+{\n+    internal static class DebugUtils\n+    {\n+        private enum NodeMode\n+        {\n+            CentralNode,\n+            OutOfProcNode,\n+            OutOfProcTaskHostNode\n+        }\n+\n+        private static readonly Lazy<NodeMode> ProcessNodeMode = new(\n+        () =>\n+        {\n+            return ScanNodeMode(Environment.CommandLine);\n+\n+            NodeMode ScanNodeMode(string input)\n+            {\n+                var match = Regex.Match(input, @\"/nodemode:(?<nodemode>[12\\s])(\\s|$)\", RegexOptions.IgnoreCase);\n+\n+                if (!match.Success)\n+                {\n+                    return NodeMode.CentralNode;\n+                }\n+                var nodeMode = match.Groups[\"nodemode\"].Value;\n+\n+                Trace.Assert(!string.IsNullOrEmpty(nodeMode));\n+\n+                return nodeMode switch\n+                {\n+                    \"1\" => NodeMode.OutOfProcNode,\n+                    \"2\" => NodeMode.OutOfProcTaskHostNode,\n+                    _ => throw new NotImplementedException(),\n+                };\n+            }\n+        });\n+\n+        public static string ProcessInfoString",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Also check empty?",
              "createdAt": "2021-07-05T18:25:07Z",
              "path": "src/Shared/Traits.cs",
              "diffHunk": "@@ -86,6 +89,10 @@ public Traits()\n         /// </summary>\n         public readonly int LogPropertyTracking = ParseIntFromEnvironmentVariableOrDefault(\"MsBuildLogPropertyTracking\", 0); // Default to logging nothing via the property tracker.\n \n+        public readonly bool DebugEngine = Environment.GetEnvironmentVariable(\"MSBuildDebugEngine\") != null;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "~~I'd put MSBUILDDEBUGPATH as priority if it's defined. That way, someone can overwrite the default from DebugDumpPath.~~\r\n\r\nIf DebugDumpPath defaults to Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\") (as long as it has a value), why not just always take DebugUtils.DebugDumpPath? It could change behavior in a surprising way, but it makes more sense to me. (Maybe a change wave?)",
              "createdAt": "2021-07-05T18:26:30Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -176,8 +177,10 @@ internal class Scheduler : IScheduler\n         /// </summary>\n         public Scheduler()\n         {\n-            _debugDumpState = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGSCHEDULER\") == \"1\";\n-            _debugDumpPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n+            _debugDumpState = Traits.Instance.DebugScheduler;\n+            _debugDumpPath = Traits.Instance.DebugEngine\n+                ? DebugUtils.DebugDumpPath()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Good point, I put it behind a change wave. I also replaced all the other direct reads of MSBuildDebugScheduler and MSBuildDebugPath with Traits and DebugUtils.DebugDumpPath",
              "createdAt": "2021-07-13T18:29:14Z",
              "path": "src/Build/BackEnd/Components/Scheduler/Scheduler.cs",
              "diffHunk": "@@ -176,8 +177,10 @@ internal class Scheduler : IScheduler\n         /// </summary>\n         public Scheduler()\n         {\n-            _debugDumpState = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGSCHEDULER\") == \"1\";\n-            _debugDumpPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n+            _debugDumpState = Traits.Instance.DebugScheduler;\n+            _debugDumpPath = Traits.Instance.DebugEngine\n+                ? DebugUtils.DebugDumpPath()",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@Forgind\r\nMade this change after you signed off. ChangeWaves are not visible to the MICROSOFT_BUILD_ENGINE_OM_UNITTESTS assembly so I had to ifdef it out. The alternative is to move ChangeWaves from Microsoft.Build.Framework into shared sources, but that seems like a bigger change than this one (and it's probably good to refrain from increasing shared sources).",
              "createdAt": "2021-07-13T18:54:08Z",
              "path": "src/Shared/ExceptionHandling.cs",
              "diffHunk": "@@ -41,7 +45,15 @@ static ExceptionHandling()\n         /// <returns></returns>\n         private static string GetDebugDumpPath()\n         {\n-            string debugPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n+            string debugPath =\n+#if CLR2COMPATIBILITY || MICROSOFT_BUILD_ENGINE_OM_UNITTESTS",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "Maybe move the test to Engine.UnitTests? It kinda makes sense that Engine.OM.UnitTests wouldn't be able to see Framework, but I'm not a huge fan of ifdef'ing based on being in a test\u2014to me, it feels like making tests not actually test code, just test similar code. I'll let @BenVillalobos opine on the right way to handle ChangeWaves visibility, though.",
              "createdAt": "2021-07-13T22:59:18Z",
              "path": "src/Shared/ExceptionHandling.cs",
              "diffHunk": "@@ -41,7 +45,15 @@ static ExceptionHandling()\n         /// <returns></returns>\n         private static string GetDebugDumpPath()\n         {\n-            string debugPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n+            string debugPath =\n+#if CLR2COMPATIBILITY || MICROSOFT_BUILD_ENGINE_OM_UNITTESTS",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "The entire test assembly ends up depending on ChangeWaves, not just a few tests, so it's not feasible to move tests. Only other solution that I see is to move ChangeWaves into the shared sources directory.",
              "createdAt": "2021-07-14T00:45:31Z",
              "path": "src/Shared/ExceptionHandling.cs",
              "diffHunk": "@@ -41,7 +45,15 @@ static ExceptionHandling()\n         /// <returns></returns>\n         private static string GetDebugDumpPath()\n         {\n-            string debugPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n+            string debugPath =\n+#if CLR2COMPATIBILITY || MICROSOFT_BUILD_ENGINE_OM_UNITTESTS",
              "author": {
                "login": "cdmihai"
              }
            },
            {
              "body": "I remember having issues in trying to make changewaves shared. Lots of \"This type exists multiple times\" issues. If you can move it with no issues then by all means. It's unrelated to what this PR is doing so I'd say make an issue for it but don't let it block.",
              "createdAt": "2021-07-14T19:43:22Z",
              "path": "src/Shared/ExceptionHandling.cs",
              "diffHunk": "@@ -41,7 +45,15 @@ static ExceptionHandling()\n         /// <returns></returns>\n         private static string GetDebugDumpPath()\n         {\n-            string debugPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n+            string debugPath =\n+#if CLR2COMPATIBILITY || MICROSOFT_BUILD_ENGINE_OM_UNITTESTS",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Add a comment and this is fine by me.",
              "createdAt": "2021-07-14T20:17:57Z",
              "path": "src/Shared/ExceptionHandling.cs",
              "diffHunk": "@@ -41,7 +45,15 @@ static ExceptionHandling()\n         /// <returns></returns>\n         private static string GetDebugDumpPath()\n         {\n-            string debugPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n+            string debugPath =\n+#if CLR2COMPATIBILITY || MICROSOFT_BUILD_ENGINE_OM_UNITTESTS",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you pass the extension separately so we can preserve the `.binlog` and `.dot` extensions instead of appending them?",
              "createdAt": "2021-07-14T20:09:32Z",
              "path": "src/Shared/Debugging/DebugUtils.cs",
              "diffHunk": "@@ -0,0 +1,70 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using System;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Text.RegularExpressions;\n+\n+namespace Microsoft.Build.Shared.Debugging\n+{\n+    internal static class DebugUtils\n+    {\n+        private enum NodeMode\n+        {\n+            CentralNode,\n+            OutOfProcNode,\n+            OutOfProcTaskHostNode\n+        }\n+\n+        private static readonly Lazy<NodeMode> ProcessNodeMode = new(\n+        () =>\n+        {\n+            return ScanNodeMode(Environment.CommandLine);\n+\n+            NodeMode ScanNodeMode(string input)\n+            {\n+                var match = Regex.Match(input, @\"/nodemode:(?<nodemode>[12\\s])(\\s|$)\", RegexOptions.IgnoreCase);\n+\n+                if (!match.Success)\n+                {\n+                    return NodeMode.CentralNode;\n+                }\n+                var nodeMode = match.Groups[\"nodemode\"].Value;\n+\n+                Trace.Assert(!string.IsNullOrEmpty(nodeMode));\n+\n+                return nodeMode switch\n+                {\n+                    \"1\" => NodeMode.OutOfProcNode,\n+                    \"2\" => NodeMode.OutOfProcTaskHostNode,\n+                    _ => throw new NotImplementedException(),\n+                };\n+            }\n+        });\n+\n+        public static string ProcessInfoString =\n+            $\"{ProcessNodeMode.Value}_{Process.GetCurrentProcess().ProcessName}_PID={Process.GetCurrentProcess().Id}_x{(Environment.Is64BitProcess ? \"64\" : \"86\")}\";\n+\n+        public static string DebugDumpPath()\n+        {\n+            var debugDirectory = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\") ?? Path.Combine(Directory.GetCurrentDirectory(), \"MSBuild_Logs\");\n+            FileUtilities.EnsureDirectoryExists(debugDirectory);\n+\n+            return debugDirectory;\n+        }\n+\n+        public static string FindNextAvailableDebugFilePath(string fileName)\n+        {\n+            fileName = Path.Combine(DebugDumpPath(), fileName);\n+\n+            var counter = 0;\n+            while (File.Exists(fileName))\n+            {\n+                fileName = $\"{counter++}_{fileName}\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "cc @drewnoakes on this since it interacts with project-system-tools",
              "createdAt": "2021-07-14T20:12:42Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -518,6 +520,22 @@ ILoggingService InitializeLoggingService()\n                 return loggingService;\n             }\n \n+            // VS builds discard many msbuild events so attach a binlogger to capture them all.\n+            IEnumerable<ILogger> GetDebuggingLoggers()",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "@rainersigwald do you have any expectation of consequence here, or is this just an FYI?",
              "createdAt": "2021-07-15T11:54:14Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -518,6 +520,22 @@ ILoggingService InitializeLoggingService()\n                 return loggingService;\n             }\n \n+            // VS builds discard many msbuild events so attach a binlogger to capture them all.\n+            IEnumerable<ILogger> GetDebuggingLoggers()",
              "author": {
                "login": "drewnoakes"
              }
            },
            {
              "body": "Just an FYI. We should happily handle having multiple loggers attached and everything should continue working as it is, but these logs might be helpful in some cases.",
              "createdAt": "2021-07-15T13:58:18Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -518,6 +520,22 @@ ILoggingService InitializeLoggingService()\n                 return loggingService;\n             }\n \n+            // VS builds discard many msbuild events so attach a binlogger to capture them all.\n+            IEnumerable<ILogger> GetDebuggingLoggers()",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this called on \"normal\" paths? If so should it be cached?",
              "createdAt": "2021-07-14T20:13:55Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -592,6 +607,15 @@ private void AttachDebugger()\n             }\n         }\n \n+        private static bool CurrentProcessMatchesDebugName()",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@rainersigwald @cdmihai I encountered the following unhandled exception when this code was executed from within our service hub process where we invoke MSBulild programmatically - \r\n\r\nI had set the `MSBuildDebugEngine` environment variable (and we have our own `BinaryLogger` specified programmatically. But I had not set `MSBuildDebugPath`.\r\n```\r\nSystem.UnauthorizedAccessException: Access to the path 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Main\\Common7\\ServiceHub\\Hosts\\ServiceHub.Host.CLR.AnyCPU\\MSBuild_Logs' is denied. HResult='-2147024891' \r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.Directory.InternalCreateDirectory(String fullPath, String path, Object dirSecurityObj, Boolean checkHost)\r\n   at System.IO.Directory.InternalCreateDirectoryHelper(String path, Boolean checkHost)\r\n   at Microsoft.Build.Shared.FileUtilities.EnsureDirectoryExists(String directoryPath)\r\n   at Microsoft.Build.Shared.Debugging.DebugUtils..cctor()\r\n---\r\n\r\nSystem.TypeInitializationException: The type initializer for 'Microsoft.Build.Shared.Debugging.DebugUtils' threw an exception. HResult='-2146233036' \r\n   at Microsoft.Build.Internal.CommunicationsUtilities.GetEnvironmentVariables()\r\n   at Microsoft.Build.Internal.Utilities.GetEnvironmentProperties()\r\n   at Microsoft.Build.Evaluation.ProjectCollection.get_EnvironmentProperties()\r\n   at Microsoft.Build.Evaluation.ProjectCollection.InitializeToolsetCollection(ToolsetRegistryReader registryReader, ToolsetConfigurationReader configReader)\r\n   at Microsoft.Build.Evaluation.ProjectCollection..ctor(IDictionary`2 globalProperties, IEnumerable`1 loggers, IEnumerable`1 remoteLoggers, ToolsetDefinitionLocations toolsetDefinitionLocations, Int32 maxNodeCount, Boolean onlyLogCriticalEvents, Boolean loadProjectsReadOnly)\r\n   at Microsoft.Build.Evaluation.ProjectCollection.get_GlobalProjectCollection()\r\n```\r\n\r\nNot a huge issue but now that I know about `MSBuildDebugPath` :) But have you considered moving the default location to something like `%temp%` at least for programmatic invocations so that it is harder to run into problems like above?",
              "createdAt": "2021-08-19T06:58:31Z",
              "path": "src/Shared/Debugging/DebugUtils.cs",
              "diffHunk": "@@ -0,0 +1,99 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Text.RegularExpressions;\n+\n+namespace Microsoft.Build.Shared.Debugging\n+{\n+    internal static class DebugUtils\n+    {\n+        private enum NodeMode\n+        {\n+            CentralNode,\n+            OutOfProcNode,\n+            OutOfProcTaskHostNode\n+        }\n+\n+        static DebugUtils()\n+        {\n+            string environmentDebugPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n+            var debugDirectory = environmentDebugPath ?? Path.Combine(Directory.GetCurrentDirectory(), \"MSBuild_Logs\");",
              "author": {
                "login": "shyamnamboodiripad"
              }
            },
            {
              "body": "Temp dir makes it a worse experience when debugging, as we're usually cd-ed into some repo directory when setting MSBuildDebugEngine and it's nice to just get all the logs there. Rather than forcing everybody to look into tmp, or forcing everybody to set MSBuildDebugPath, maybe the option that maximizes global experience is to only have users that do not propagate the user's CWD set MSBuildDebugPath.\r\n\r\nThat being said, wouldn't it be \"more correct\" to propagate the user's CWD to the service hub process?",
              "createdAt": "2021-08-19T17:38:24Z",
              "path": "src/Shared/Debugging/DebugUtils.cs",
              "diffHunk": "@@ -0,0 +1,99 @@\n+\ufeff// Copyright (c) Microsoft. All rights reserved.\n+// Licensed under the MIT license. See LICENSE file in the project root for full license information.\n+\n+using Microsoft.Build.Utilities;\n+using System;\n+using System.Diagnostics;\n+using System.IO;\n+using System.Text.RegularExpressions;\n+\n+namespace Microsoft.Build.Shared.Debugging\n+{\n+    internal static class DebugUtils\n+    {\n+        private enum NodeMode\n+        {\n+            CentralNode,\n+            OutOfProcNode,\n+            OutOfProcTaskHostNode\n+        }\n+\n+        static DebugUtils()\n+        {\n+            string environmentDebugPath = Environment.GetEnvironmentVariable(\"MSBUILDDEBUGPATH\");\n+            var debugDirectory = environmentDebugPath ?? Path.Combine(Directory.GetCurrentDirectory(), \"MSBuild_Logs\");",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}