{
  "number": 7431,
  "title": "Added MSBuild server doc (communication protocol)",
  "body": "Fixes #7370\r\n\r\n### Context\r\nDescribes communication protocol for MSBuild Server.",
  "state": "MERGED",
  "createdAt": "2022-03-02T10:43:13Z",
  "updatedAt": "2022-03-15T12:21:57Z",
  "closedAt": "2022-03-15T12:21:57Z",
  "mergedAt": "2022-03-15T12:21:57Z",
  "additions": 54,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "dev/mipavlik/msbuild-server-doc",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "81c1c62331879591351d870410891edc5aac7e57",
          "message": "Added MSBuild server doc (communication protocol)",
          "committedDate": "2022-03-02T10:38:57Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6c78c4c697e4200a1683d7d0009f6d325c3e4ce9",
          "message": "Update documentation/MSBuild-Server.md\r\n\r\nFixed typo\n\nCo-authored-by: Chet Husk <baronfel@users.noreply.github.com>",
          "committedDate": "2022-03-02T15:39:21Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0b07eeaaacb293733f7ae4bea7e2ae67c19d0cd5",
          "message": "Update documentation/MSBuild-Server.md\r\n\r\nFixed typo\n\nCo-authored-by: Chet Husk <baronfel@users.noreply.github.com>",
          "committedDate": "2022-03-02T15:40:02Z",
          "author": {
            "name": "MichalPavlik",
            "email": "michalpavlik@outlook.com"
          }
        }
      },
      {
        "commit": {
          "oid": "27636aada0da33d5ee4f2467b8d96d9b9489bf1c",
          "message": "Resolving comments",
          "committedDate": "2022-03-08T08:42:41Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "76175a291bda403fe4b82e347822a1cd5461aa2a",
          "message": "Merge branch 'dev/mipavlik/msbuild-server-doc' of https://github.com/MichalPavlik/msbuild into dev/mipavlik/msbuild-server-doc",
          "committedDate": "2022-03-08T08:42:51Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "70bbf44c7b1fa083a8c69ef8da0078adbe39d2ed",
          "message": "Resolving comments",
          "committedDate": "2022-03-08T08:45:02Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d452828b811004dd9affc093b937675ede51d6b1",
          "message": "Resolving comments",
          "committedDate": "2022-03-08T12:52:49Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "potentially a `string[]` here instead? a `string` means we'd have to do our own argument-splitting, and we should get this splitting from OS/process level already.",
              "createdAt": "2022-03-02T14:56:09Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "I guess the argument splitting is done by existing function inside MSBuild. I will take a look, but maybe @rokonec will be faster with answer as this document is based on his prototype :)",
              "createdAt": "2022-03-02T15:38:50Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "I think we might be better off with `string` because of MSBuild's weird CLI-parsing history.",
              "createdAt": "2022-03-02T15:42:01Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n| Culture                  | CultureInfo                 | The culture value for current build |\r\n```",
              "createdAt": "2022-03-02T14:56:22Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n| UICulture                | CultureInfo                 | The UI culture value for current build |\r\n```",
              "createdAt": "2022-03-02T14:56:32Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |",
              "author": {
                "login": "baronfel"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: `IReadOnlyDictionary<string, string>`? Env vars shouldn't be settable once provided generally speaking I'd think.",
              "createdAt": "2022-03-02T14:57:39Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "That's right. I think we will not mutate this dictionary instance.",
              "createdAt": "2022-03-02T15:42:46Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why does MSBuild care about colors? I'd expect messages to be tagged with some kind of tag that has semantic meaning (e.g. Error, Fatal, etc), and then a host to convert that meaning to a color. Same question for `Background` below.\r\n\r\nWhat are the colors mapped to today?",
              "createdAt": "2022-03-02T14:59:32Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "One of the request is \"output fidelity\". MSBuild Server doesn't have it's own window/console host, so it must pass text to client (.NET SDK) to render it. And it should look same as if you start MSBuild in it's own console host.",
              "createdAt": "2022-03-02T15:33:41Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "I agree with the \"this is just a dumb pipe and the existing MSBuild stuff does colorization\" approach, because it's the only way to get custom loggers working correctly.\r\n\r\n> I'd expect messages to be tagged with some kind of tag that has semantic meaning (e.g. Error, Fatal, etc), and then a host to convert that meaning to a color.\r\n\r\nThis is basically what happens today, but it's the _logger_ that converts `BuildEventArgs` meaning to colors, and the logger is a pluggable entity that must run in the MSBuild server side, not the client (without further changes).",
              "createdAt": "2022-03-02T15:38:02Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thanks, that makes sense now that you've made the connection to the Loggers for me.  \r\n\r\nFrom what I can see, there's no explicit tie to the Color in that interface, and System.ConsoleColor is a very very small subset of the allowed colors on a terminal (for example the ANSI terminal output that Spectre.Console supports is listed [here](https://spectreconsole.net/appendix/colors). Two points related to that: \r\n* Does MSBuild only write entire lines in one color? If so, and that changes, how does this message protocol change to allow for printing 'segments' of a line in a certain color?\r\n* From what I can see MSBuild currently only uses ConsoleColors, but most terminals can support more colors than that. Usually detection of this support is done by probing the terminal at execution-time to see what the terminal supports. We won't be able to do that in a client/server scenario like this, so somehow the terminal output capabilities of the user's terminal would need to be included in the BuildProcessEnvironment, right?",
              "createdAt": "2022-03-02T17:29:45Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "The _default console logger that ships with MSBuild_ a) uses `System.Console` colors (because it predates Windows VT100 support) and b) does indeed do line-at-a-time coloring. But third-party loggers can do whatever they want including prettier highlighting and the probing you're describing; I don't know if there's a good solution for that.",
              "createdAt": "2022-03-02T18:18:12Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Given that, should we drop the colors from this API and just make this contract purely textual output, that may or may not already have ANSI codes embedded in it? Assuming the client capabilities are passed in, loggers should be able to inspect them to determine how they want to modify that text output.",
              "createdAt": "2022-03-02T18:25:34Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "I was thinking about it and I agree to use just text with ANSI escape sequences. Maybe we can even remove `EntryNodeConsoleWrite` completely and redirect output/error streams of the server process. It should work if the stream contains raw data with escape codes. I believe it does, but I will check it.\r\nAs Chet mentioned, we should provide details about console capabilities to the server. Instead of environment dictionary, I would prefer extra property as this will be well known and defined value. ",
              "createdAt": "2022-03-03T10:35:17Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "I was trying to use output/error stream, redirection but it looks that you can redirect it only from child processes. Had failed with redirection from already running process.\r\nI am strongly in favor of keeping colors. It brings useful intuitive information and most of all, people are used to it.   But ANSI codes would work even with this solution right?",
              "createdAt": "2022-03-03T14:50:13Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Yeah, we just need to trip into this mode:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/40f49cd8d06ec3ed6933fa66183e8d1615cb2edc/src/Build/Logging/ConsoleLogger.cs#L138-L142\r\n\r\nThen the console logger will emit ANSI codes instead of calling the Win32 console APIs and everything should Just Work As Normal.",
              "createdAt": "2022-03-03T15:16:42Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It's true that simple redirection in C# with standard API allows to redirect when you start new process from your code. Win32 Console API should provide functions to read from stream of already running process, but it looks ugly and it's not cross platform, so we can use pipe for sake of simplicity.",
              "createdAt": "2022-03-07T09:31:46Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Prior art here: https://github.com/dotnet/roslyn/blob/156a779af39d280700dcd9ce0e04b86b30a637f1/src/Compilers/Shared/BuildServerConnection.cs#L534-L541\r\n\r\n(I thought the full SHA-256 hash might have been too big, but it looks like they're using it without truncation, so hopefully that'll work for us too.)",
              "createdAt": "2022-03-02T15:31:15Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I believe Roman was inspired by the code you posted. There is a link to prototype which I used as a source for this document: https://github.com/dotnet/msbuild/commit/8251106c84eccc232e8763657d99d5944a49776c#diff-55448b7c99f2e1f7c6441ae14c05468c2395b31903b71b06a44e628e17eb35fbR84",
              "createdAt": "2022-03-02T15:49:49Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Yep. I have shamelessly cloned that Roslyn code. :-)",
              "createdAt": "2022-03-03T14:19:05Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is required for the handshake that is not already encoded in the hash? I assume this will need the same user/elevation checks we already do on node handshakes?",
              "createdAt": "2022-03-02T15:33:03Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. ",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The hash is computed from the handshake data/options used during validation. Should I be more specific in this part?",
              "createdAt": "2022-03-03T10:38:19Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. ",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "At this point we plan that handshake and connection establishing will use same logic and security guarantees as current connection between MSBuild entry node and worker nodes.",
              "createdAt": "2022-03-03T14:31:03Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. ",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "That sounds good and is worth putting in the doc IMO.",
              "createdAt": "2022-03-03T15:17:22Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. ",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I extended the handshake section.",
              "createdAt": "2022-03-08T12:55:31Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. ",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Using named pipes makes sense to me, but should this introduce a different serialization technology?",
              "createdAt": "2022-03-02T15:33:47Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It depends. If we want to introduce new serialization mechanism, we can try it in the server-client scenario first and then extend it to the worker node communication. Are you thinking about some particular serializer? :)",
              "createdAt": "2022-03-03T10:47:31Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "We shall refrain from `BinaryFormatter` thats for sure. But since console redirection could be chatty, I see benefits in performance given by  custom written binary serialization format. Since we already have one which we use for communication between nodes, I would use it. \r\nUsing some modern serialization frameworks like gRPC sounds appealing, but it will bring additional dependency.",
              "createdAt": "2022-03-03T14:17:11Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this is too limiting. Could we instead make it a packet-of-bytes + stream ID oriented protocol, and turn on the flags we use to make the loggers use VT100 control characters to handle formatting? That would work for our console logger and future-looking loggers, though might break for existing custom loggers that use `Console.BackgroundColor` and so on.",
              "createdAt": "2022-03-02T15:40:53Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |\n+| Background               | ConsoleColor  | The background color for the text |",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "It seems we have two places for this discussion now. I responded in the thread that Chet started.",
              "createdAt": "2022-03-03T10:49:22Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |\n+| Background               | ConsoleColor  | The background color for the text |",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This makes sense from the consumption side, but how are these constructed on the server?",
              "createdAt": "2022-03-02T15:41:20Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Using custom console writer. It's like in-proc console redirection. With redirection from the client side (as I described in another thread), we could ignore this approach.",
              "createdAt": "2022-03-03T10:55:09Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "`Console.SetOut(TextWriter)` and `Console.SetErr(TextWriter)` is used to configure static `Console` behavior and inject own `TextWriter`. This way console would look identical even when custom tasks do not use ILogger but writ directly to `Console`.     ",
              "createdAt": "2022-03-03T14:41:41Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultrueInfo                 | The culture value for current build |\n+| UICulture                | CultrueInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think we need command to propagate build cancelation. ",
              "createdAt": "2022-03-03T14:56:38Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultureInfo                 | The culture value for current build |\n+| UICulture                | CultureInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |\n+| Background               | ConsoleColor  | The background color for the text |\n+| OutputType               | Byte          | Identification of the output stream (1 = standard output, 2 = error output) |\n+\n+`EntryNodeResponse` informs about finished build.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| ExitCode                 | Int32         | The exit code of the build |\n+| ExitType                 | String        | The exit type of the build |\n+\n+",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I updated the document.",
              "createdAt": "2022-03-08T12:55:02Z",
              "path": "documentation/MSBuild-Server.md",
              "diffHunk": "@@ -0,0 +1,54 @@\n+# MSBuild Server\n+\n+MSBuild Server is basically an another type of node which can accept build request from clients and utilize worker nodes in current fashion to build projects. Main purpose of the server node is to avoid expensive MSBuild process start during build from tools like .NET SDK.\n+\n+## Communication protocol\n+\n+The server node uses same IPC approach as current worker nodes - named pipes. This solution allows to reuse existing code. When process starts, pipe with deterministic name is opened and waiting for commands. Client has following worfklow:\n+\n+1. Try to connect to server\n+   - If server is not running, start new instance\n+   - If server is busy, fallback to classic build \n+2. Initiate handshake\n+2. Issue build command with `EntryNodeCommand` packet\n+3. Read packets from pipe\n+   - When `EntryNodeConsoleWrite` packet type is recieved, write content to appropriate output stream with respected coloring\n+   - When `EntryNodeResponse` packet type is recieved, build is done and client writes trace message with exit code\n+\n+### Pipe name convention & handshake\n+\n+There might be multiple server processes started with different architecture, associated user, MSBuild version and another options. To quickly identify the appropriate one, server uses convention that includes these options in the name of the pipe. Name has format `MSBuildServer-{hash}` where `{hash}` is a SHA256 hashed value identifying these options.\n+\n+Handshake is a procedure ensuring that client is connecting to a compatible server instance. \n+\n+### Packets for client-server communication\n+\n+Server requires to introduce new packet types for IPC.\n+\n+`EntryNodeCommand` contains all of the information necessary for a server to run a build.\n+\n+| Property name            | Type                        | Description |\n+|---|---|---|\n+| CommandLine              | String                      | The MSBuild command line with arguments for build |\n+| StartupDirectory         | String                      | The startup directory path |\n+| BuildProcessEnvironment  | Dictionary<String, String>  | Environment variables for current build |\n+| Culture                  | CultureInfo                 | The culture value for current build |\n+| UICulture                | CultureInfo                 | The UI culture value for current build |\n+\n+`EntryNodeConsoleWrite` contains information for console output.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| Text                     | String        | The text that is written to output stream |\n+| Foreground               | ConsoleColor  | The foreground color of the text |\n+| Background               | ConsoleColor  | The background color for the text |\n+| OutputType               | Byte          | Identification of the output stream (1 = standard output, 2 = error output) |\n+\n+`EntryNodeResponse` informs about finished build.\n+\n+| Property name            | Type          | Description |\n+|---|---|---|\n+| ExitCode                 | Int32         | The exit code of the build |\n+| ExitType                 | String        | The exit type of the build |\n+\n+",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}