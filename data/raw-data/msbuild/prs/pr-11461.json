{
  "number": 11461,
  "title": "Change list -> ConcurrentBag in BuildCheckContext",
  "body": "Fixes https://github.com/dotnet/msbuild/issues/11439 and https://github.com/dotnet/msbuild/issues/11319\r\n\r\n### Context\r\n`_checkRegistry` and `_ruleTelemetryData` can be accessed in multithreaded environment (from logger and nodes).\r\n\r\n### Changes Made\r\nList -> ConcurrentBag\r\n\r\n### Testing\r\nSince it fails on CI, we need to merge the change and check it on preview.\r\n",
  "state": "MERGED",
  "createdAt": "2025-02-19T11:17:52Z",
  "updatedAt": "2025-02-20T15:00:04Z",
  "closedAt": "2025-02-20T15:00:03Z",
  "mergedAt": "2025-02-20T15:00:03Z",
  "additions": 54,
  "deletions": 19,
  "changedFiles": 1,
  "headRefName": "dev/ykovalova/build_check_fix",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3d8b498c170e7fabb0ef6cb73c7f6e20eace5f8f",
          "message": "change list -> ConcurrentBag in buildcheckcontext",
          "committedDate": "2025-02-19T11:17:29Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f1894bd78e0f9a469f53c40420140c9705c9a338",
          "message": "handle the case with parallel removal and adding",
          "committedDate": "2025-02-20T13:47:25Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            _checkRegistry = newRegistry;\r\n```\r\n\r\nIs this acheicvving smae?",
              "createdAt": "2025-02-19T14:09:38Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -380,12 +391,26 @@ public void RemoveChecksAfterExecutedActions(List<CheckWrapper>? checksToRemove,\n \n         private void RemoveCheck(CheckFactoryContext checkToRemove)\n         {\n-            _checkRegistry.Remove(checkToRemove);\n+            var newRegistry = new ConcurrentBag<CheckFactoryContext>(_checkRegistry.Where(x => x != checkToRemove));\n+\n+            while (_checkRegistry.TryTake(out _)) { }\n+\n+            foreach (var item in newRegistry)\n+            {\n+                _checkRegistry.Add(item);\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I was afraid of facing the same situation: if other threads are currently accessing or modifying the `_checkRegistry`, but I might be playing it extra safe ",
              "createdAt": "2025-02-19T14:22:34Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -380,12 +391,26 @@ public void RemoveChecksAfterExecutedActions(List<CheckWrapper>? checksToRemove,\n \n         private void RemoveCheck(CheckFactoryContext checkToRemove)\n         {\n-            _checkRegistry.Remove(checkToRemove);\n+            var newRegistry = new ConcurrentBag<CheckFactoryContext>(_checkRegistry.Where(x => x != checkToRemove));\n+\n+            while (_checkRegistry.TryTake(out _)) { }\n+\n+            foreach (var item in newRegistry)\n+            {\n+                _checkRegistry.Add(item);\n+            }",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "I don't think this idea improves the situation. \r\nT1 RemoveCheck -> create newRegistry\r\nT2 add check C to _checkRegistry\r\nT1 while ... foreach ... _checkregistry=newregistry\r\n\r\noutcome: C is not in _checkRegistry :(\r\n\r\nwhy not a concurrentdictionary?",
              "createdAt": "2025-02-20T10:13:55Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -380,12 +391,26 @@ public void RemoveChecksAfterExecutedActions(List<CheckWrapper>? checksToRemove,\n \n         private void RemoveCheck(CheckFactoryContext checkToRemove)\n         {\n-            _checkRegistry.Remove(checkToRemove);\n+            var newRegistry = new ConcurrentBag<CheckFactoryContext>(_checkRegistry.Where(x => x != checkToRemove));\n+\n+            while (_checkRegistry.TryTake(out _)) { }\n+\n+            foreach (var item in newRegistry)\n+            {\n+                _checkRegistry.Add(item);\n+            }",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "Well, I am not sure what Concurrent dictionary is supposed to address here.\r\nIt was a switch from not thread safe to a safe alternative. \r\nCould you please elaborate?",
              "createdAt": "2025-02-20T10:21:08Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -380,12 +391,26 @@ public void RemoveChecksAfterExecutedActions(List<CheckWrapper>? checksToRemove,\n \n         private void RemoveCheck(CheckFactoryContext checkToRemove)\n         {\n-            _checkRegistry.Remove(checkToRemove);\n+            var newRegistry = new ConcurrentBag<CheckFactoryContext>(_checkRegistry.Where(x => x != checkToRemove));\n+\n+            while (_checkRegistry.TryTake(out _)) { }\n+\n+            foreach (var item in newRegistry)\n+            {\n+                _checkRegistry.Add(item);\n+            }",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "The goal here is to remove one specific element, while leaving the collection in a consistent state, right? ConcurrentBag does not have an api for that, so you'd have to use locks I think. ConcurrentDictionary does have the api https://learn.microsoft.com/en-us/dotnet/api/system.collections.concurrent.concurrentdictionary-2.tryremove?view=net-9.0#system-collections-concurrent-concurrentdictionary-2-tryremove(-0-1@)\r\n\r\nthe only drawback is that you have to come up with a key",
              "createdAt": "2025-02-20T10:30:19Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -380,12 +391,26 @@ public void RemoveChecksAfterExecutedActions(List<CheckWrapper>? checksToRemove,\n \n         private void RemoveCheck(CheckFactoryContext checkToRemove)\n         {\n-            _checkRegistry.Remove(checkToRemove);\n+            var newRegistry = new ConcurrentBag<CheckFactoryContext>(_checkRegistry.Where(x => x != checkToRemove));\n+\n+            while (_checkRegistry.TryTake(out _)) { }\n+\n+            foreach (var item in newRegistry)\n+            {\n+                _checkRegistry.Add(item);\n+            }",
              "author": {
                "login": "JanProvaznik"
              }
            },
            {
              "body": "Eah - correct :-/\r\nI'm still slightly leaning towards the ConcurrentBag as we'll be interating order of magnitude more times then modifying. We can guard the adds/removes with a lock and then keep ConcurrentBag - what do you think?\r\n\r\nRemove:\r\n```\r\nlock(_someLock)\r\n{\r\n    _checkRegistry = new ConcurrentBag<CheckFactoryContext>(_checkRegistry.Where(x => x != checkToRemove));\r\n}\r\n```\r\n\r\nAdd:\r\n```\r\nlock(_someLock)\r\n{\r\n    _checkRegistry.Add(...)\r\n}\r\n```\r\n\r\nTraverse:\r\n```\r\n  foreach(var check in _checkRegistry)\r\n  {\r\n  }\r\n```\r\n\r\nWe can have stale reads - but that's fine. We want to prevent overwriten updates and exceptions on iterating",
              "createdAt": "2025-02-20T10:49:53Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -380,12 +391,26 @@ public void RemoveChecksAfterExecutedActions(List<CheckWrapper>? checksToRemove,\n \n         private void RemoveCheck(CheckFactoryContext checkToRemove)\n         {\n-            _checkRegistry.Remove(checkToRemove);\n+            var newRegistry = new ConcurrentBag<CheckFactoryContext>(_checkRegistry.Where(x => x != checkToRemove));\n+\n+            while (_checkRegistry.TryTake(out _)) { }\n+\n+            foreach (var item in newRegistry)\n+            {\n+                _checkRegistry.Add(item);\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Or keep _checkRegistry readonly, but making sure we do not remove items without checking what we're removing",
              "createdAt": "2025-02-20T11:07:51Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -380,12 +391,26 @@ public void RemoveChecksAfterExecutedActions(List<CheckWrapper>? checksToRemove,\n \n         private void RemoveCheck(CheckFactoryContext checkToRemove)\n         {\n-            _checkRegistry.Remove(checkToRemove);\n+            var newRegistry = new ConcurrentBag<CheckFactoryContext>(_checkRegistry.Where(x => x != checkToRemove));\n+\n+            while (_checkRegistry.TryTake(out _)) { }\n+\n+            foreach (var item in newRegistry)\n+            {\n+                _checkRegistry.Add(item);\n+            }",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I'm not up to date with the performance benefits of Concurrentbag over dictionary in this scenario. If you think that's worth the slight code cumbersomeness, OK.",
              "createdAt": "2025-02-20T12:11:03Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -380,12 +391,26 @@ public void RemoveChecksAfterExecutedActions(List<CheckWrapper>? checksToRemove,\n \n         private void RemoveCheck(CheckFactoryContext checkToRemove)\n         {\n-            _checkRegistry.Remove(checkToRemove);\n+            var newRegistry = new ConcurrentBag<CheckFactoryContext>(_checkRegistry.Where(x => x != checkToRemove));\n+\n+            while (_checkRegistry.TryTake(out _)) { }\n+\n+            foreach (var item in newRegistry)\n+            {\n+                _checkRegistry.Add(item);\n+            }",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The current implementation of removing an item from ConcurrentBag is inefficient. Consider using a different concurrent collection that supports removal, such as ConcurrentDictionary.",
              "createdAt": "2025-02-19T22:24:52Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -380,12 +391,26 @@ public void RemoveChecksAfterExecutedActions(List<CheckWrapper>? checksToRemove,\n \n         private void RemoveCheck(CheckFactoryContext checkToRemove)\n         {\n-            _checkRegistry.Remove(checkToRemove);\n+            var newRegistry = new ConcurrentBag<CheckFactoryContext>(_checkRegistry.Where(x => x != checkToRemove));",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            },
            {
              "body": "The removal is going to occure rarely, we need to optimize for iterating - hence the choice of ConcurrentBag",
              "createdAt": "2025-02-20T10:37:34Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -380,12 +391,26 @@ public void RemoveChecksAfterExecutedActions(List<CheckWrapper>? checksToRemove,\n \n         private void RemoveCheck(CheckFactoryContext checkToRemove)\n         {\n-            _checkRegistry.Remove(checkToRemove);\n+            var newRegistry = new ConcurrentBag<CheckFactoryContext>(_checkRegistry.Where(x => x != checkToRemove));",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "if you only add, ConcurrentBag seems appropriate \ud83d\udc4d ",
              "createdAt": "2025-02-20T10:37:36Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -473,19 +498,23 @@ public void ProcessTaskParameterEventArgs(\n             => _buildEventsProcessor\n                 .ProcessTaskParameterEventArgs(checkContext, taskParameterEventArgs);\n \n-        private readonly List<BuildCheckRuleTelemetryData> _ruleTelemetryData = [];\n+        private readonly ConcurrentBag<BuildCheckRuleTelemetryData> _ruleTelemetryData = [];",
              "author": {
                "login": "JanProvaznik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "passed `_ruleTelemetryData.ToList()` will then be transformed to a dictionary here\r\n\r\nhttps://github.com/dotnet/msbuild/blob/5f18dbaae753898ef4dca4cbded11ec6a83a2569/src/Framework/BuildCheck/BuildCheckTracingData.cs#L21-L23\r\n\r\nsmall nit: create a dictionary and pass it directly instead\r\n\r\n\r\n\r\n",
              "createdAt": "2025-02-20T14:03:50Z",
              "path": "src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs",
              "diffHunk": "@@ -473,19 +504,23 @@ public void ProcessTaskParameterEventArgs(\n             => _buildEventsProcessor\n                 .ProcessTaskParameterEventArgs(checkContext, taskParameterEventArgs);\n \n-        private readonly List<BuildCheckRuleTelemetryData> _ruleTelemetryData = [];\n+        private readonly ConcurrentBag<BuildCheckRuleTelemetryData> _ruleTelemetryData = [];\n \n         public BuildCheckTracingData CreateCheckTracingStats()\n         {\n             foreach (CheckFactoryContext checkFactoryContext in _checkRegistry)\n             {\n                 if (checkFactoryContext.MaterializedCheck != null)\n                 {\n-                    _ruleTelemetryData.AddRange(checkFactoryContext.MaterializedCheck.GetRuleTelemetryData());\n+                    var telemetryData = checkFactoryContext.MaterializedCheck.GetRuleTelemetryData();\n+                    foreach (var data in telemetryData)\n+                    {\n+                        _ruleTelemetryData.Add(data);\n+                    }\n                 }\n             }\n \n-            return new BuildCheckTracingData(_ruleTelemetryData, _tracingReporter.GetInfrastructureTracingStats());\n+            return new BuildCheckTracingData(_ruleTelemetryData.ToList(), _tracingReporter.GetInfrastructureTracingStats());",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      }
    ]
  }
}