{
  "number": 6399,
  "title": "Log TaskStarted line and column",
  "body": "We currently log the file in which a task is invoked, but we don't log the line and column, so if there are multiple tasks of the same name in a target, there's an ambiguity as to which task it is.\r\n\r\nPass the line and column information to TaskStartedEventArgs.\r\n\r\nFortunately we don't need to increment the binlog file format as we can piggy-back on the existing infrastructure for messages which can already log line and column if present. Reading older binlogs with the new MSBuild will work as the line and column flags won't be set, so no attempt to read anything extra. Reader newer binlogs with old MSBuild (same version but pre-this change) will also work as the line and column fields will be set and the existing infrastructure will read them, but nothing will consume that data.\r\n",
  "state": "MERGED",
  "createdAt": "2021-05-01T01:37:33Z",
  "updatedAt": "2021-05-29T04:00:43Z",
  "closedAt": "2021-05-28T19:20:19Z",
  "mergedAt": "2021-05-28T19:20:19Z",
  "additions": 53,
  "deletions": 8,
  "changedFiles": 11,
  "headRefName": "dev/kirillo/logTaskLocation",
  "isDraft": false,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Debuggability",
    "Area: Logging",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7a29e2874c837d6ad4d11da9493d1180d0652c32",
          "message": "Log TaskStarted line and column\n\nWe currently log the file in which a task is invoked, but we don't log the line and column, so if there are multiple tasks of the same name in a target, there's an ambiguity as to which task it is.\n\nPass the line and column information to TaskStartedEventArgs.\n\nFortunately we don't need to increment the binlog file format as we can piggy-back on the existing infrastructure for messages which can already log line and column if present. Reading older binlogs with the new MSBuild will work as the line and column flags won't be set, so no attempt to read anything extra. Reader newer binlogs with old MSBuild (same version but pre-this change) will also work as the line and column fields will be set and the existing infrastructure will read them, but nothing will consume that data.",
          "committedDate": "2021-05-01T01:34:51Z",
          "author": {
            "name": "Kirill Osenkov",
            "email": "github@osenkov.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "smallest nit ever:\r\nI have trouble imagining a file that looks like this...999+ lines happens fairly often, but 999 columns sounds like bad style.",
              "createdAt": "2021-05-03T14:41:54Z",
              "path": "src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs",
              "diffHunk": "@@ -160,11 +160,15 @@ public void RoundtripTaskStartedEventArgs()\n                 projectFile: \"C:\\\\project.proj\",\n                 taskFile: \"C:\\\\common.targets\",\n                 taskName: \"Csc\");\n+            args.LineNumber = 42;\n+            args.ColumnNumber = 999;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Like @Forgind I also wonder if the change is backward compatible. Shouldn't you be testing for `BuildEventArgsFieldFlags.LineNumber` and `BuildEventArgsFieldFlags.ColumnNumber` here before reading the integers?",
              "createdAt": "2021-05-10T13:30:23Z",
              "path": "src/Framework/TaskStartedEventArgs.cs",
              "diffHunk": "@@ -105,6 +107,8 @@ internal override void CreateFromStream(BinaryReader reader, int version)\n             taskName = reader.ReadByte() == 0 ? null : reader.ReadString();\n             projectFile = reader.ReadByte() == 0 ? null : reader.ReadString();\n             taskFile = reader.ReadByte() == 0 ? null : reader.ReadString();\n+            LineNumber = reader.Read7BitEncodedInt();\n+            ColumnNumber = reader.Read7BitEncodedInt();",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Ah, I think I understand. This code is separate from the binlog logic and has no versioning concerns, is that correct? ",
              "createdAt": "2021-05-10T13:36:05Z",
              "path": "src/Framework/TaskStartedEventArgs.cs",
              "diffHunk": "@@ -105,6 +107,8 @@ internal override void CreateFromStream(BinaryReader reader, int version)\n             taskName = reader.ReadByte() == 0 ? null : reader.ReadString();\n             projectFile = reader.ReadByte() == 0 ? null : reader.ReadString();\n             taskFile = reader.ReadByte() == 0 ? null : reader.ReadString();\n+            LineNumber = reader.Read7BitEncodedInt();\n+            ColumnNumber = reader.Read7BitEncodedInt();",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Yes, this is unrelated to binlog and used by the node packet translator to send events from worker nodes to central node. Nodes will only talk to each other if they\u2019re the same MSBuild version.",
              "createdAt": "2021-05-10T18:31:17Z",
              "path": "src/Framework/TaskStartedEventArgs.cs",
              "diffHunk": "@@ -105,6 +107,8 @@ internal override void CreateFromStream(BinaryReader reader, int version)\n             taskName = reader.ReadByte() == 0 ? null : reader.ReadString();\n             projectFile = reader.ReadByte() == 0 ? null : reader.ReadString();\n             taskFile = reader.ReadByte() == 0 ? null : reader.ReadString();\n+            LineNumber = reader.Read7BitEncodedInt();\n+            ColumnNumber = reader.Read7BitEncodedInt();",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Why not move this into `GetBuildEventArgsFieldFlags`?",
              "createdAt": "2021-05-10T13:38:30Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -512,9 +514,14 @@ private void Write(TaskParameterEventArgs e)\n             WriteTaskItemList(e.Items, e.LogItemMetadata);\n         }\n \n-        private void WriteBuildEventArgsFields(BuildEventArgs e, bool writeMessage = true)\n+        private void WriteBuildEventArgsFields(BuildEventArgs e, bool writeMessage = true, bool writeLineAndColumn = false)\n         {\n             var flags = GetBuildEventArgsFieldFlags(e, writeMessage);\n+            if (writeLineAndColumn)\n+            {\n+                flags |= BuildEventArgsFieldFlags.LineNumber | BuildEventArgsFieldFlags.ColumnNumber;\n+            }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I can\u2019t exactly remember but I slightly preferred this version, perhaps to avoid dragging that extra bool parameter around.",
              "createdAt": "2021-05-10T18:33:48Z",
              "path": "src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs",
              "diffHunk": "@@ -512,9 +514,14 @@ private void Write(TaskParameterEventArgs e)\n             WriteTaskItemList(e.Items, e.LogItemMetadata);\n         }\n \n-        private void WriteBuildEventArgsFields(BuildEventArgs e, bool writeMessage = true)\n+        private void WriteBuildEventArgsFields(BuildEventArgs e, bool writeMessage = true, bool writeLineAndColumn = false)\n         {\n             var flags = GetBuildEventArgsFieldFlags(e, writeMessage);\n+            if (writeLineAndColumn)\n+            {\n+                flags |= BuildEventArgsFieldFlags.LineNumber | BuildEventArgsFieldFlags.ColumnNumber;\n+            }",
              "author": {
                "login": "KirillOsenkov"
              }
            }
          ]
        }
      }
    ]
  }
}