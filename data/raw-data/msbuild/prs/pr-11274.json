{
  "number": 11274,
  "title": "Cache process info where possible and dispose Process objects.",
  "body": "Fixes #\r\n\r\n### Context\r\nThere are multiple places where information about the current process is retrieved. There is a non-trivial cost to getting this information and the Process objects should be disposed to avoid additional GC cost due to the finalizer running. This change adds properties in EnvironmentUtilities that cache info such as the current process ID (this implementation is copied from .NET 6), and in some instances, updates some callers to dispose of the Process object for uncommon usages.\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-13T20:02:51Z",
  "updatedAt": "2025-05-13T17:44:03Z",
  "closedAt": "2025-02-19T11:57:44Z",
  "mergedAt": "2025-02-19T11:57:44Z",
  "additions": 148,
  "deletions": 70,
  "changedFiles": 29,
  "headRefName": "dev/erarndt/disposeProcess",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8a74a3e9403a0b4ef5db1289bda06f2d7904255e",
          "message": "Cache process info where possible and dispose Process objects.",
          "committedDate": "2025-01-20T09:22:15Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "74153aa85e563b705fe9787e7301738b8ae37929",
          "message": "cherry pick re-added those long deleted filed. remedying that",
          "committedDate": "2025-01-20T09:23:56Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "e99dc97b32924292881990124b7685dcb51edc6b",
          "message": "Undo unnecessary addition of local function",
          "committedDate": "2025-02-03T17:55:53Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Related to #11160",
        "createdAt": "2025-01-14T10:03:40Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I tried rebasing and/or merging with main, which made a mess.\r\nIn the end, I opted for checking out main, cherrypicking the commit & then fixing one issue with some old files being re-added by it.\r\nReview will follow.\r\ncc: @Erarndt ",
        "createdAt": "2025-01-20T09:25:48Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "I talked with @AR-May and this has an impact that is below what we can detect with PerfStar. At least it is definitely not a regression and since it is a neat code cleanup, I'm voting for merge.",
        "createdAt": "2025-02-18T14:14:05Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Are we fine with defaults or do we want to be explicit in the initial value?\r\ne.g. `private static volatile int s_processId = 0` or something.",
              "createdAt": "2025-01-20T09:03:04Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -1,17 +1,100 @@\n \ufeff// Licensed to the .NET Foundation under one or more agreements.\n // The .NET Foundation licenses this file to you under the MIT license.\n \n+#nullable enable\n+\n using System;\n+using System.Diagnostics;\n using System.Runtime.InteropServices;\n+using System.Threading;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET472_OR_GREATER || NETCOREAPP\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n+#endif\n+\n+#if !NETCOREAPP\n+        private static volatile int s_processId;",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "I can do either. Does the team have a preference?",
              "createdAt": "2025-02-03T17:42:27Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -1,17 +1,100 @@\n \ufeff// Licensed to the .NET Foundation under one or more agreements.\n // The .NET Foundation licenses this file to you under the MIT license.\n \n+#nullable enable\n+\n using System;\n+using System.Diagnostics;\n using System.Runtime.InteropServices;\n+using System.Threading;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET472_OR_GREATER || NETCOREAPP\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n+#endif\n+\n+#if !NETCOREAPP\n+        private static volatile int s_processId;",
              "author": {
                "login": "Erarndt"
              }
            },
            {
              "body": "implicit init to 0 is fine here",
              "createdAt": "2025-02-03T21:42:00Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -1,17 +1,100 @@\n \ufeff// Licensed to the .NET Foundation under one or more agreements.\n // The .NET Foundation licenses this file to you under the MIT license.\n \n+#nullable enable\n+\n using System;\n+using System.Diagnostics;\n using System.Runtime.InteropServices;\n+using System.Threading;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET472_OR_GREATER || NETCOREAPP\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n+#endif\n+\n+#if !NETCOREAPP\n+        private static volatile int s_processId;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Out of curiosity, how long is this construct around please? (e.g. in other places we use an extra tag, while here we use an attribute)",
              "createdAt": "2025-01-20T09:28:53Z",
              "path": "src/Framework/Microsoft.Build.Framework.csproj",
              "diffHunk": "@@ -40,6 +40,7 @@\n     <Compile Include=\"..\\Shared\\BinaryWriterExtensions.cs\">\n       <Link>Shared\\BinaryWriterExtensions.cs</Link>\n     </Compile>\n+    <Compile Include=\"..\\Shared\\EnvironmentUtilities.cs\" Link=\"EnvironmentUtilities.cs\" />",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Under which circumstance would this happen? (I noticed that there is a check that throws in `src/MSBuild/MSBuildClientApp.cs` and here we have an assert stating that we really don't want this to happen while debugging.)",
              "createdAt": "2025-01-20T09:31:53Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -1,17 +1,100 @@\n \ufeff// Licensed to the .NET Foundation under one or more agreements.\n // The .NET Foundation licenses this file to you under the MIT license.\n \n+#nullable enable\n+\n using System;\n+using System.Diagnostics;\n using System.Runtime.InteropServices;\n+using System.Threading;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET472_OR_GREATER || NETCOREAPP\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n+#endif\n+\n+#if !NETCOREAPP\n+        private static volatile int s_processId;\n+        private static volatile string? s_processPath;\n+#endif\n+        private static volatile string? s_processName;\n+\n+        /// <summary>Gets the unique identifier for the current process.</summary>\n+        public static int CurrentProcessId\n+        {\n+            get\n+            {\n+#if NETCOREAPP\n+                return Environment.ProcessId;\n+#else\n+                // copied from Environment.ProcessId\n+                int processId = s_processId;\n+                if (processId == 0)\n+                {\n+                    using Process currentProcess = Process.GetCurrentProcess();\n+                    s_processId = processId = currentProcess.Id;\n+\n+                    // Assume that process Id zero is invalid for user processes. It holds for all mainstream operating systems.\n+                    Debug.Assert(processId != 0);\n+                }\n+\n+                return processId;\n+#endif\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Returns the path of the executable that started the currently executing process. Returns null when the path is not available.\n+        /// </summary>\n+        /// <returns>Path of the executable that started the currently executing process</returns>\n+        /// <remarks>\n+        /// If the executable is renamed or deleted before this property is first accessed, the return value is undefined and depends on the operating system.\n+        /// </remarks>\n+        public static string? ProcessPath\n+        {\n+            get\n+            {\n+#if NETCOREAPP\n+                return Environment.ProcessPath;\n+#else\n+                // copied from Environment.ProcessPath\n+                string? processPath = s_processPath;\n+                if (processPath == null)\n+                {\n+                    // The value is cached both as a performance optimization and to ensure that the API always returns\n+                    // the same path in a given process.\n+                    using Process currentProcess = Process.GetCurrentProcess();\n+                    Interlocked.CompareExchange(ref s_processPath, currentProcess.MainModule.FileName ?? \"\", null);\n+                    processPath = s_processPath;\n+                    Debug.Assert(processPath != null);",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "It shouldn't ever happen. This same check was in the newer .NET implementation. I can remove it if it's adding confusion.",
              "createdAt": "2025-02-03T17:45:50Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -1,17 +1,100 @@\n \ufeff// Licensed to the .NET Foundation under one or more agreements.\n // The .NET Foundation licenses this file to you under the MIT license.\n \n+#nullable enable\n+\n using System;\n+using System.Diagnostics;\n using System.Runtime.InteropServices;\n+using System.Threading;\n \n namespace Microsoft.Build.Shared\n {\n     internal static partial class EnvironmentUtilities\n     {\n+#if NET472_OR_GREATER || NETCOREAPP\n         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n+#endif\n+\n+#if !NETCOREAPP\n+        private static volatile int s_processId;\n+        private static volatile string? s_processPath;\n+#endif\n+        private static volatile string? s_processName;\n+\n+        /// <summary>Gets the unique identifier for the current process.</summary>\n+        public static int CurrentProcessId\n+        {\n+            get\n+            {\n+#if NETCOREAPP\n+                return Environment.ProcessId;\n+#else\n+                // copied from Environment.ProcessId\n+                int processId = s_processId;\n+                if (processId == 0)\n+                {\n+                    using Process currentProcess = Process.GetCurrentProcess();\n+                    s_processId = processId = currentProcess.Id;\n+\n+                    // Assume that process Id zero is invalid for user processes. It holds for all mainstream operating systems.\n+                    Debug.Assert(processId != 0);\n+                }\n+\n+                return processId;\n+#endif\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Returns the path of the executable that started the currently executing process. Returns null when the path is not available.\n+        /// </summary>\n+        /// <returns>Path of the executable that started the currently executing process</returns>\n+        /// <remarks>\n+        /// If the executable is renamed or deleted before this property is first accessed, the return value is undefined and depends on the operating system.\n+        /// </remarks>\n+        public static string? ProcessPath\n+        {\n+            get\n+            {\n+#if NETCOREAPP\n+                return Environment.ProcessPath;\n+#else\n+                // copied from Environment.ProcessPath\n+                string? processPath = s_processPath;\n+                if (processPath == null)\n+                {\n+                    // The value is cached both as a performance optimization and to ensure that the API always returns\n+                    // the same path in a given process.\n+                    using Process currentProcess = Process.GetCurrentProcess();\n+                    Interlocked.CompareExchange(ref s_processPath, currentProcess.MainModule.FileName ?? \"\", null);\n+                    processPath = s_processPath;\n+                    Debug.Assert(processPath != null);",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we use something like \r\n```\r\nif (_debugCommunications) \r\n{\r\n   using StreamWriter debugWriter = File.CreateText(string.Format(CultureInfo.CurrentCulture,  Path.Combine(FileUtilities.TempFileDirectory, @\"MSBuild_NodeShutdown_{0}.txt\"), Process.GetCurrentProcess().Id))\r\n   debugWriter.WriteLine(\"Node shutting down with reason {0}.\", _shutdownReason);\r\n}\r\n```\r\nOr something else altogether if anyone has an idea for a cleaner answer.\r\nI found it somewhat difficult to reason about the previous state or the proposed solution:\r\n - _debugCommunications is a local private bool\r\n - which we then feed into a static wrapper function\r\n - that either gives us nothing or a stream\r\n - and if that stream exists, we write into it\r\n ",
              "createdAt": "2025-01-20T09:44:57Z",
              "path": "src/MSBuild/OutOfProcTaskHostNode.cs",
              "diffHunk": "@@ -859,6 +858,14 @@ private NodeEngineShutdownReason HandleShutdown()\n #endif\n \n             return _shutdownReason;\n+\n+            static StreamWriter GetDebugWriter(bool debugCommunications)",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "I think this was an unintended artifact of a previous change. The only thing that needs updated is the call to `Process.GetCurrentProcess().Id`. It should use the new helper.",
              "createdAt": "2025-02-03T17:54:56Z",
              "path": "src/MSBuild/OutOfProcTaskHostNode.cs",
              "diffHunk": "@@ -859,6 +858,14 @@ private NodeEngineShutdownReason HandleShutdown()\n #endif\n \n             return _shutdownReason;\n+\n+            static StreamWriter GetDebugWriter(bool debugCommunications)",
              "author": {
                "login": "Erarndt"
              }
            }
          ]
        }
      }
    ]
  }
}