{
  "number": 6983,
  "title": "Minor allocation optimizations / cleanup",
  "body": "### Context\r\n\r\nFixing a few places where we allocated objects unnecessarily. This is by no means exhaustive.\r\n\r\n### Changes Made\r\n\r\n- `GetOrAdd` should be given a delegate to a method that creates a new object, not the new object itself. Otherwise we allocate and throw away the object in the \"Get\" case.\r\n- When passing a callbacks to a method, a lambda expression should be used even if all arguments are passed-through. Otherwise a new delegate object is allocated on each invocation. Lambdas are cached in static fields by the compiler.\r\n\r\n### Testing\r\n\r\nExisting unit tests.",
  "state": "MERGED",
  "createdAt": "2021-10-22T15:16:02Z",
  "updatedAt": "2021-11-01T08:01:55Z",
  "closedAt": "2021-11-01T08:01:55Z",
  "mergedAt": "2021-11-01T08:01:55Z",
  "additions": 28,
  "deletions": 26,
  "changedFiles": 5,
  "headRefName": "minor-allocation-fixes",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3466399fc4e74b53c8e3f01ee7aa962c38f9cff2",
          "message": "Minor allocation optimizations / cleanup",
          "committedDate": "2021-10-22T14:49:38Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This method was unused.",
              "createdAt": "2021-10-22T15:16:30Z",
              "path": "src/Build/Utilities/EngineFileUtilities.cs",
              "diffHunk": "@@ -236,18 +236,13 @@ private static bool MatchesLazyWildcard(string fileSpec)\n             return file => matchers.Any(m => m.Value.IsMatch(file));\n         }\n \n-        internal class IOCache\n+        internal sealed class IOCache\n         {\n             private readonly Lazy<ConcurrentDictionary<string, bool>> existenceCache = new Lazy<ConcurrentDictionary<string, bool>>(() => new ConcurrentDictionary<string, bool>(), true);\n \n-            public virtual bool DirectoryExists(string directory)\n+            public bool DirectoryExists(string directory)\n             {\n-                return existenceCache.Value.GetOrAdd(directory, Directory.Exists);\n-            }\n-\n-            public virtual bool FileExists(string file)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I wonder if there's a more concise way of expressing this. My understanding is that if there is an `out` parameter then all parameters have to be listed complete with types.",
              "createdAt": "2021-10-22T15:18:14Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -3153,23 +3153,26 @@ public override bool Execute()\n         {\n             return Execute\n             (\n-                new FileExists(p => FileUtilities.FileExistsNoThrow(p)),\n-                new DirectoryExists(p => FileUtilities.DirectoryExistsNoThrow(p)),\n-                new GetDirectories(Directory.GetDirectories),\n-                new GetAssemblyName(AssemblyNameExtension.GetAssemblyNameEx),\n-                new GetAssemblyMetadata(AssemblyInformation.GetAssemblyMetadata),\n+                p => FileUtilities.FileExistsNoThrow(p),\n+                p => FileUtilities.DirectoryExistsNoThrow(p),\n+                (p, searchPattern) => Directory.GetDirectories(p, searchPattern),\n+                p => AssemblyNameExtension.GetAssemblyNameEx(p),\n+                (string path, ConcurrentDictionary<string, AssemblyMetadata> assemblyMetadataCache, out AssemblyNameExtension[] dependencies, out string[] scatterFiles, out FrameworkNameVersioning frameworkName)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}