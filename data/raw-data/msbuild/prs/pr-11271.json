{
  "number": 11271,
  "title": "Update the WeakStringCache to keep strong references to smaller strings.",
  "body": "Fixes #\r\n\r\n### Context\r\nThe current string cache implementation uses weak GC handles to avoid holding onto references to strings for longer than needed. As a result, the strings are frequently collected and recreated. Additionally, weak references add additional cost to each garbage collection. The proposed implementation would keep only use a weak reference for larger strings since the cost of keeping around smaller strings generally outweighs the cost of recreating them.\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-01-13T19:37:38Z",
  "updatedAt": "2025-05-05T08:24:17Z",
  "closedAt": "2025-05-05T08:24:17Z",
  "mergedAt": "2025-05-05T08:24:17Z",
  "additions": 56,
  "deletions": 19,
  "changedFiles": 4,
  "headRefName": "dev/erarndt/weakStringCache",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cbaa9e7f824152cca2385c8a2b3b2eb88818f6aa",
          "message": "Update the WeakStringCache to keep strong references to smaller strings.",
          "committedDate": "2025-01-09T22:39:39Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "af4f37e0b18c3ac45812d054d1642bcb105f78c0",
          "message": "Merge branch 'main' into dev/erarndt/weakStringCache",
          "committedDate": "2025-01-17T09:17:22Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "29f598b3f40f783c7baa328d0939f7dd1801e854",
          "message": "updating tests to reflect the cache behavior",
          "committedDate": "2025-01-17T09:35:16Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "72b9fd6efb949bf661a3902cb97ddbdcf92a9108",
          "message": "Merge branch 'main' into dev/erarndt/weakStringCache",
          "committedDate": "2025-01-21T12:12:42Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fc471120757ffd9479f291d091833c003a139fc3",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into dev/erarndt/weakStringCache",
          "committedDate": "2025-04-01T17:29:10Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8c379b0d21241193e18e0b858d3538013931b068",
          "message": "Clear string cache after build completes",
          "committedDate": "2025-04-01T17:56:26Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b0f2753c7b705189c5b20dae7da507be8c919e30",
          "message": "Merge branch 'main' into dev/erarndt/weakStringCache",
          "committedDate": "2025-04-28T13:00:10Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "eae8dbb5b661893109e4e74f720a12cad1f0a0a2",
          "message": "Merge branch 'main' into dev/erarndt/weakStringCache",
          "committedDate": "2025-04-30T09:31:36Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Hello and thank you for looking into possible performance improvements.\r\nDo you have any benchmarking around the possible performance gain please?\r\nIf yes, could you share your data?\r\nHow was the 500 char threshold selected? (I think that 500 is a threshold that will capture most of the strings that MSBuild generates)",
        "createdAt": "2025-01-14T09:48:09Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "Related to #11160",
        "createdAt": "2025-01-14T10:04:09Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Hello and thank you for looking into possible performance improvements.\r\nDo you have any benchmarking around the possible performance gain please?\r\nIf yes, could you share your data?\r\nHow was the 500 char threshold selected? (I think that 500 is a threshold that will capture most of the strings that MSBuild generates)\r\n\r\nI have lots of various data including traces with PerfView and build times. If you're looking for something specific, I likely have it :). The value was chosen somewhat arbitrability, but I did see a good number of strings that were significantly larger (1000+). There's likely some tuning we could do on the specific value. ",
        "createdAt": "2025-01-14T22:50:08Z",
        "author": {
          "login": "Erarndt"
        }
      },
      {
        "body": "Experimental VS insertion: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/603315?_a=overview",
        "createdAt": "2025-01-16T10:09:38Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I've updated the WeakStringCache_Tests since these were testing the cache forgetting behavior on old strings.\r\nSome new ones for the new portion are most likely a good idea as well. I will start with the benchmarking and if it turns out good, I will proceed with the test update.\r\nOne that note @JanKrivanek, the insertion has probably failed due to this. Can you re-run the pipeline please?",
        "createdAt": "2025-01-17T09:38:25Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "I've done some basic local benchmarking of the cache.\r\nFor .net9 it has a small but visible positive impact.\r\nFor net472 the variance is too large and the impact looks to be either negligible or slightly negative. I'm unsure about the reason, also I've had fairly varied results so I wouldn't call it conclusive. Since this is weird, I will try to figure out some more stable way to run this.\r\n\r\nmain-core | cache-core | main-framework | cache-framework | cache-framework2\r\n-- | -- | -- | -- | --\r\n38.17889 | 38.87665 | 37.40668 | 38.99776 | 36.62044\r\n38.53512 | 36.817 | 36.98474 | 37.37747 | 36.8773\r\n35.25003 | 33.84592 | 35.36707 | 37.29134 | 38.42806\r\n34.52955 | 33.32155 | 38.48902 | 39.59925 | 37.04002\r\n34.46097 | 34.94563 | 35.8827 | 37.50032 | 38.92489\r\n35.72239 | 33.3015 | 38.23811 | 37.06755 | 36.16032\r\n37.01463 | 33.48803 | 36.5214 | 36.98713 | 36.38341\r\n34.16286 | 33.07242 | 36.71748 | 37.79424 | 35.8911\r\n33.84519 | 35.96277 | 39.23669 | 38.91536 | 33.90686\r\n33.76678 | 33.33597 | 36.81749 | 37.10196 | 38.63083\r\n33.92001 | 32.98285 | 36.23294 | 36.72502 | 36.62178\r\n33.9255 | 33.34761 | 36.75168 | 36.45474 | 37.63606\r\n33.7753 | 32.46068 | 36.70211 | 39.35933 | 37.43448\r\n34.06473 | 35.40557 | 36.40363 | \u00a0 | 38.14316\r\n35.26259 | 34.12788 | 37.49066 | \u00a0 | 38.88766\r\n35.40107 |  | 37.38926 | \u00a0 | 37.58297\r\n36.33105 | \u00a0 | 36.87269 | \u00a0 | 37.5796\r\n33.8218 | \u00a0 | \u00a0 | \u00a0 | \u00a0\r\n\u00a0 | \u00a0 | \u00a0 | \u00a0 | \u00a0\r\n35.10936 | 34.3528 | 37.02967 | 37.78242 | 37.17243\r\n\r\nAs a note, I'm still uncertain how to handle the spikes and what to consider a spike. For now I've removed all 40s+ values from the measurement for -core and 42s+ from the framework. I'm aware this isn't perfect so take this just as an initial estimate. \r\nI will set up some better measurement and I also want to see VS insertion and performance test results.\r\n\r\n",
        "createdAt": "2025-01-17T13:21:58Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "More benchmarking. On a devbox it definitely helps\r\nnet472 average times after 20-ish warm builds, after removing outliers.\r\ncache: 91.81 vs main: 93.47\r\nDevbox is kind of slow even with dev drive.",
        "createdAt": "2025-01-21T16:17:16Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "One question that came to my mind:\r\nhow much do we care about this technically being a memory leak?\r\n - each string that is deserialized by InterningBinaryReader get's added to this cache\r\n - so we keep every log string that ever gets passed to us forever.\r\n   - there are lot of duplicates, that will only get saved once, which is nice\r\n   - however I can imagine some log string like \"save this timestamp : XXX\" that will stay around together to be a potential issue\r\n   - this might be come more pronounced if MSBuild sticks around for longer - e.g. during the developer inner loop\r\n\r\nI'm unsure about the severity of this - there is definitely a room for maneouvering and trade offs. \r\nThat being said, for example OrchardCore build on two cores generates ~100MB worth of strings(many of which will be duplicate). On more cores, there will probably be additional strings generated.",
        "createdAt": "2025-01-22T13:49:19Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}