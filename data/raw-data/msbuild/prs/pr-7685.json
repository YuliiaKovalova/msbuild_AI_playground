{
  "number": 7685,
  "title": "Prevent symlink cycle",
  "body": "Fixes-ish [AB#1513887](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1513887)\r\n\r\n### Context\r\nA symlink in folder A pointing to A will recurse eternally (hang). This fixes that problem in a fairly simple way.\r\n\r\n### Changes Made\r\nCheck if a symlink would take us to a folder above the one we're in before following it.\r\n\r\n### Testing\r\nI'd rather not introduce something that, if broken, just hangs.",
  "state": "MERGED",
  "createdAt": "2022-06-07T23:33:31Z",
  "updatedAt": "2022-07-17T17:37:00Z",
  "closedAt": "2022-07-17T17:37:00Z",
  "mergedAt": "2022-07-17T17:36:59Z",
  "additions": 58,
  "deletions": 15,
  "changedFiles": 4,
  "headRefName": "prevent-symlink-cycle",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Engine",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "cea346d1e1eec7632ea5309f901747841710ce87",
          "message": "Prevent synlinks in the common (net6.0) case",
          "committedDate": "2022-06-07T23:30:14Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d4c4bb28c3feb8c8c4a81a90bd36c4a8bbbfe3be",
          "message": "Reorder using statements",
          "committedDate": "2022-06-07T23:30:27Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5fd5742b1bc4ff5ebc2b341c38d3d92570e2c5fb",
          "message": "PR comments",
          "committedDate": "2022-06-08T17:01:08Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7ad46ce4580d4923911e743d4743959d6a2e46fc",
          "message": "Some changes",
          "committedDate": "2022-06-09T18:43:07Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0c858544dcd65d9efbcab7e57fc7cd67aad7c4b",
          "message": "Little fix",
          "committedDate": "2022-06-09T19:04:55Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a6331d54d6bb90ec2de522fca9622c4e3497986b",
          "message": "Remove from tasks and try",
          "committedDate": "2022-06-09T19:32:05Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b550cce6d68ecea48c41d9c465809eeaa8c2a277",
          "message": "Fix bug",
          "committedDate": "2022-06-09T19:57:50Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "18c62dbe5b224fde35ccbc73ab435f34913f87f6",
          "message": "Narrow exception\n\nDirectory.ResolveLinkTarget claims to only throw IOExceptions, but apparently it can also throw ArgumentExceptions. I think it's best to catch both just in case.",
          "committedDate": "2022-06-13T22:03:48Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a5a20d8c71291a10efeb5f325f30b16ceea902c9",
          "message": "Also catch UnauthorizedAccessExceptions",
          "committedDate": "2022-06-14T16:24:06Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Test seem to be failing because they're essentially passing recursionState.BaseDirectory as \"\". Is that ever a real case? (It doesn't sound very real to me.) If it is, I'm assuming I can still rely on projectDirectory, though that's also empty in the failing tests. I'm tempted to just disable this change for those tests, but that feels wrong.",
        "createdAt": "2022-06-08T18:53:48Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "As a rule, never use exact-match checks in ifdefs. If you mean \"if this API is available\" you could say\r\n\r\n```suggestion\r\n#if NET6_0_OR_GREATER\r\n```\r\n\r\nbut the preferred approach is to create a `FEATURE_*` flag and set it when relevant, checking it here. That's nice because it allows future maintainers to more easily understand the nature of the conditional inclusion: it was like this because `LinkTarget` was not available on .NET 4.7.2.",
              "createdAt": "2022-06-08T14:01:21Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I can certainly do NET6_0_OR_GREATER, but I'm a bit hesitant about a new FEATURE_* for a few reasons. First, making MSBuild logic for \"or greater\" isn't easy for this sort of thing. I'd have to parse out the version from the target framework then do a version comparison with 6. That messiness is presumably why our other flags that would use NET6_0_OR_GREATER-dependent feature flags use NET6_0_OR_GREATER rather than making new flags, and I do like consistency.",
              "createdAt": "2022-06-08T16:34:11Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "You can put it in this section:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/bfd80ab1692721767c3fa8c0d4bcd35254489086/src/Directory.BeforeCommon.targets#L87-L93",
              "createdAt": "2022-06-08T17:18:43Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "But that isn't sufficient, right? It isn't even available in NET5, according to the docs.",
              "createdAt": "2022-06-08T17:20:34Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I know we just use net6, netstandard2.0, and net472, but that feels a little like lying.",
              "createdAt": "2022-06-08T17:21:10Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Also maybe true for netstandard2.0?",
              "createdAt": "2022-06-08T17:21:29Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This is the standard approach in our codebase. It does not seem important to me to support a theoretical future downgrade to an end-of-life target, and I don't think it's \"lying\" to say \"when building for the current .NET Core TFM, include this code that is present in today's version of that TFM\".",
              "createdAt": "2022-06-08T17:29:23Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think you could make this a little less allocatey:\r\n\r\n```suggestion\r\n            FileSystemInfo linkTarget = Directory.ResolveLinkTarget(recursionState.BaseDirectory, returnFinalTarget: true);\r\n            if (linkTarget is not null && baseDirectoryInfo.FullName.Contains(linkTarget.FullName))\r\n```",
              "createdAt": "2022-06-08T14:08:57Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0\n+            // This is a pretty quick, simple check, but it misses some cases:\n+            // symlink in folder A pointing to folder B and symlink in folder B pointing to folder A\n+            // GetFiles in folder C that contains a symlink that points folder D, which contains C as well as other files\n+            // and most obviously, frameworks other than net6.0\n+            // The solution I'd propose for the first two, if necessary, would be maintaining a set of symlinks and verifying, before following it,\n+            // that we had not followed it previously. The third would require a more involved P/invoke-style fix.\n+            DirectoryInfo baseDirectoryInfo = new(recursionState.BaseDirectory);\n+            if (baseDirectoryInfo.LinkTarget is not null && baseDirectoryInfo.FullName.Contains(baseDirectoryInfo.LinkTarget))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Link to https://github.com/dotnet/msbuild/issues/703 and describe this codepath there, please.",
              "createdAt": "2022-06-08T14:23:13Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0\n+            // This is a pretty quick, simple check, but it misses some cases:\n+            // symlink in folder A pointing to folder B and symlink in folder B pointing to folder A\n+            // GetFiles in folder C that contains a symlink that points folder D, which contains C as well as other files\n+            // and most obviously, frameworks other than net6.0\n+            // The solution I'd propose for the first two, if necessary, would be maintaining a set of symlinks and verifying, before following it,\n+            // that we had not followed it previously. The third would require a more involved P/invoke-style fix.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't understand this case, can you elaborate?",
              "createdAt": "2022-06-08T14:23:34Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0\n+            // This is a pretty quick, simple check, but it misses some cases:\n+            // symlink in folder A pointing to folder B and symlink in folder B pointing to folder A\n+            // GetFiles in folder C that contains a symlink that points folder D, which contains C as well as other files",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "\"If folder C contains file Foo.cs and folder D, and folder D contains a symlink pointing to folder C, calling GetFilesRecursive and passing in folder D would currently find Foo.cs, whereas this would make us miss it.\"\r\n\r\nIs that a clearer description?\r\n\r\nThat sounds like a valid case, but I feel fine about ignoring it for now, since it would hang with current MSBuild anyway, so we know no one is doing it.",
              "createdAt": "2022-06-08T16:39:27Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0\n+            // This is a pretty quick, simple check, but it misses some cases:\n+            // symlink in folder A pointing to folder B and symlink in folder B pointing to folder A\n+            // GetFiles in folder C that contains a symlink that points folder D, which contains C as well as other files",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Ah, I see. Could you avoid the recursion _into_ the \"bad\" symlink, instead of just returning from it quickly? That feels like the same basic code, but would solve that case (which I think is important).",
              "createdAt": "2022-06-08T17:24:55Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0\n+            // This is a pretty quick, simple check, but it misses some cases:\n+            // symlink in folder A pointing to folder B and symlink in folder B pointing to folder A\n+            // GetFiles in folder C that contains a symlink that points folder D, which contains C as well as other files",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "How would that help? Either we follow the symlink or we don't, and if we do, then we can only avoid following it repeatedly if we store the visited directories; if we don't, we can't possibly find Foo.cs in that case.",
              "createdAt": "2022-06-08T18:52:22Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0\n+            // This is a pretty quick, simple check, but it misses some cases:\n+            // symlink in folder A pointing to folder B and symlink in folder B pointing to folder A\n+            // GetFiles in folder C that contains a symlink that points folder D, which contains C as well as other files",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Given:\r\n\r\n* C\r\n  * D\r\n    * AAA (link to C)\r\n    * Foo.cs\r\n\r\nWith your code, you're saying it would behave like this\r\n\r\n1. Start at D\r\n2. Examine AAA's link status\r\n3. return early\r\n\r\nWith my approach:\r\n\r\n1. Start at D\r\n2. (start foreach child item)\r\n3. Examine AAA's link status\r\n4. Decide not to recurse into AAA/back to C\r\n5. Examine Foo.cs's link status\r\n6. Include Foo.cs\r\n\r\nThis doesn't require storing anything; the \"just don't follow symlinks directly up\" approach can stand.",
              "createdAt": "2022-06-20T15:02:45Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0\n+            // This is a pretty quick, simple check, but it misses some cases:\n+            // symlink in folder A pointing to folder B and symlink in folder B pointing to folder A\n+            // GetFiles in folder C that contains a symlink that points folder D, which contains C as well as other files",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "No; with my approach, that scenario would work. It's fairly easy to modify my test to prove that. The scenario that wouldn't work is:\r\n\r\n* C\r\n  * D\r\n    * AAA (link to C)\r\n  * Foo.cs\r\n\r\nThe idea then would be that it would start at D, check AAA, and not follow it, and be finished. Ideally, it would start at D, follow AAA to C, find Foo.cs, check D again, see AAA again but _not_ follow it this time, and stop. That ideal isn't possible now, though, which is why I think this solution is fine.",
              "createdAt": "2022-06-20T18:25:39Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,20 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if NET6_0\n+            // This is a pretty quick, simple check, but it misses some cases:\n+            // symlink in folder A pointing to folder B and symlink in folder B pointing to folder A\n+            // GetFiles in folder C that contains a symlink that points folder D, which contains C as well as other files",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Narrow exception?",
              "createdAt": "2022-06-09T22:02:08Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,27 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if FEATURE_SYMLINK_TARGET\n+            // This is a pretty quick, simple check, but it misses some cases:\n+            // symlink in folder A pointing to folder B and symlink in folder B pointing to folder A\n+            // If folder C contains file Foo.cs and folder D, and folder D contains a symlink pointing to folder C, calling GetFilesRecursive and\n+            // passing in folder D would currently find Foo.cs, whereas this would make us miss it.\n+            // and most obviously, frameworks other than net6.0\n+            // The solution I'd propose for the first two, if necessary, would be maintaining a set of symlinks and verifying, before following it,\n+            // that we had not followed it previously. The third would require a more involved P/invoke-style fix.\n+            // These issues should ideally be resolved as part of #703\n+            try\n+            {\n+                FileSystemInfo linkTarget = Directory.ResolveLinkTarget(recursionState.BaseDirectory, returnFinalTarget: true);\n+                if (linkTarget is not null && recursionState.BaseDirectory.Contains(linkTarget.FullName))\n+                {\n+                    return;\n+                }\n+            }\n+            // This fails in tests with the MockFileSystem when they don't have real paths.\n+            catch (Exception) { }",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "At least to IOException",
              "createdAt": "2022-06-13T15:25:53Z",
              "path": "src/Shared/FileMatcher.cs",
              "diffHunk": "@@ -836,6 +837,27 @@ struct RecursionState\n             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,\n             TaskOptions taskOptions)\n         {\n+#if FEATURE_SYMLINK_TARGET\n+            // This is a pretty quick, simple check, but it misses some cases:\n+            // symlink in folder A pointing to folder B and symlink in folder B pointing to folder A\n+            // If folder C contains file Foo.cs and folder D, and folder D contains a symlink pointing to folder C, calling GetFilesRecursive and\n+            // passing in folder D would currently find Foo.cs, whereas this would make us miss it.\n+            // and most obviously, frameworks other than net6.0\n+            // The solution I'd propose for the first two, if necessary, would be maintaining a set of symlinks and verifying, before following it,\n+            // that we had not followed it previously. The third would require a more involved P/invoke-style fix.\n+            // These issues should ideally be resolved as part of #703\n+            try\n+            {\n+                FileSystemInfo linkTarget = Directory.ResolveLinkTarget(recursionState.BaseDirectory, returnFinalTarget: true);\n+                if (linkTarget is not null && recursionState.BaseDirectory.Contains(linkTarget.FullName))\n+                {\n+                    return;\n+                }\n+            }\n+            // This fails in tests with the MockFileSystem when they don't have real paths.\n+            catch (Exception) { }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}