{
  "number": 5973,
  "title": "Remove unnecessary work and refactor CompareAssemblyIdentity",
  "body": "Fixes  #3930.\r\n\r\nWe remove the unused native call of CompareAssemblyIdentity (fusion.dll) and keep the custom managed implementation that duplicates it. Fusion implementation seems to be faster than its managed replacement, but it is only available for Windows. We, however, not sure that we run this code often enough for the difference to be noticeable. Current changes get us to a consistent implementation everywhere and are also a perf improvement since the unused native call won't happen.",
  "state": "MERGED",
  "createdAt": "2020-12-16T12:20:02Z",
  "updatedAt": "2024-03-01T15:29:26Z",
  "closedAt": "2021-01-15T13:09:44Z",
  "mergedAt": "2021-01-15T13:09:44Z",
  "additions": 114,
  "deletions": 199,
  "changedFiles": 3,
  "headRefName": "fix-unnecesssary-work-in-CompareAssemblyIdentity",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "814f5f0d49f616d5c34b51518aab7137303afbf5",
          "message": "Remove unnecessary work and refactor CompareAssemblyIdentity (#3930)",
          "committedDate": "2020-12-16T12:08:34Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bbb61cc9341953c410c4d8d659123c851d9ff00c",
          "message": "Remove the native call for CompareAssemblyIdentity (fusion.dll) in AreAssembliesEquivalent function",
          "committedDate": "2020-12-22T14:36:55Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a7563b81c046715eab846ba26ed41ca58408b7af",
          "message": "Move AreAssembliesEquivalent from NativeMethods.cs",
          "committedDate": "2020-12-22T14:38:15Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b5d46e2dc5ed9a802702fa85e951e99f445d36f1",
          "message": "Fix comment wording",
          "committedDate": "2020-12-22T15:11:32Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "|       Method | fUnified1 | fUnified2 |      Mean |     Error |     StdDev |    Median |\r\n|------------- |---------- |---------- |----------:|----------:|-----------:|----------:|\r\n| FusionResult |     False |     False |  2.966 \u03bcs | 0.4104 \u03bcs |  1.2037 \u03bcs |  2.302 \u03bcs |\r\n| CustomResult |     False |     False | 38.637 \u03bcs | 2.6889 \u03bcs |  7.5400 \u03bcs | 35.459 \u03bcs |\r\n| FusionResult |     False |      True |  2.666 \u03bcs | 0.1218 \u03bcs |  0.3476 \u03bcs |  2.513 \u03bcs |\r\n| CustomResult |     False |      True | 34.042 \u03bcs | 0.6132 \u03bcs |  1.3067 \u03bcs | 34.081 \u03bcs |\r\n| FusionResult |      True |     False |  2.221 \u03bcs | 0.0395 \u03bcs |  0.0834 \u03bcs |  2.203 \u03bcs |\r\n| CustomResult |      True |     False | 65.518 \u03bcs | 6.1692 \u03bcs | 18.0932 \u03bcs | 73.632 \u03bcs |\r\n| FusionResult |      True |      True |  5.192 \u03bcs | 0.1031 \u03bcs |  0.0914 \u03bcs |  5.176 \u03bcs |\r\n| CustomResult |      True |      True | 53.541 \u03bcs | 7.9186 \u03bcs | 23.3482 \u03bcs | 37.439 \u03bcs |",
        "createdAt": "2020-12-18T15:56:22Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Without the new return statement the results of `CompareAssemblyIdentityWindows` were ignored so it looks like it would be safer to not call this method at all and keep comparing identities in C# on all platforms. Is performance the reason why you chose to keep the Windows-only DllImport?",
              "createdAt": "2020-12-16T15:05:41Z",
              "path": "src/Tasks/NativeMethods.cs",
              "diffHunk": "@@ -1129,46 +1127,38 @@ internal static bool AllDrivesMapped()\n                     fUnified1,\n                     assemblyIdentity2,\n                     fUnified2,\n-                    out pfEquivalent,\n-                    out pResult);\n+                    out bool pfEquivalent,\n+                    out _);\n+                return pfEquivalent;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "On the one hand, going back to the original, long-proven code is nice. On the other, evidently this managed implementation is ok since the return was ignored! I wish we had more testing in this area to keep that true, so I filed #5974. But that doesn't need to block this!\r\n\r\nSince this is a very perf-sensitive area, it might be nice to do some testing--if the native implementation is noticeably faster, we should probably keep it. Unfortunately I don't think it'll be easy to isolate that with a good set of test cases.",
              "createdAt": "2020-12-16T16:03:19Z",
              "path": "src/Tasks/NativeMethods.cs",
              "diffHunk": "@@ -1129,46 +1127,38 @@ internal static bool AllDrivesMapped()\n                     fUnified1,\n                     assemblyIdentity2,\n                     fUnified2,\n-                    out pfEquivalent,\n-                    out pResult);\n+                    out bool pfEquivalent,\n+                    out _);\n+                return pfEquivalent;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I did some benchmarking and the fusion implementation seems to be ~10 times faster than its managed replacement. I, however, not sure it should mean so much for a decision, as I am not sure we run this code often enough for the difference to be noticeable: it is called only when we have a conflict (+ there are also other conditions). It is also clear that the managed implementation is meant to be just a replacement for the absent fusion function (see the TODO comment, line 1114) and I believe it might be less safe than the original fusion.dll code. From the other point of view, this managed code was shipped and also worked so far. So, well, it is hard to decide what is actually safer: to keep the fusion.dll or this managed implementation.",
              "createdAt": "2020-12-17T06:45:49Z",
              "path": "src/Tasks/NativeMethods.cs",
              "diffHunk": "@@ -1129,46 +1127,38 @@ internal static bool AllDrivesMapped()\n                     fUnified1,\n                     assemblyIdentity2,\n                     fUnified2,\n-                    out pfEquivalent,\n-                    out pResult);\n+                    out bool pfEquivalent,\n+                    out _);\n+                return pfEquivalent;",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Thank you for following up! It would probably make sense to copy your comment to the PR description and consequently to the commit message.",
              "createdAt": "2020-12-18T13:02:21Z",
              "path": "src/Tasks/NativeMethods.cs",
              "diffHunk": "@@ -1129,46 +1127,38 @@ internal static bool AllDrivesMapped()\n                     fUnified1,\n                     assemblyIdentity2,\n                     fUnified2,\n-                    out pfEquivalent,\n-                    out pResult);\n+                    out bool pfEquivalent,\n+                    out _);\n+                return pfEquivalent;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Team triage: talked with @ladipro and @Forgind. We now think we should just delete the native call entirely--that's what we've been doing, it's a perf improvement on Windows (since the native call won't happen), and it gets us to a consistent implementation everywhere.",
              "createdAt": "2020-12-18T16:48:28Z",
              "path": "src/Tasks/NativeMethods.cs",
              "diffHunk": "@@ -1129,46 +1127,38 @@ internal static bool AllDrivesMapped()\n                     fUnified1,\n                     assemblyIdentity2,\n                     fUnified2,\n-                    out pfEquivalent,\n-                    out pResult);\n+                    out bool pfEquivalent,\n+                    out _);\n+                return pfEquivalent;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}