{
  "number": 9044,
  "title": "ResolveAssemblyReference CPU optimizations (redo)",
  "body": "#8916 broke some .NET Framework scenarios and was reverted. This PR is a redo of the change with the bug fixed. It turned out that the destination of the optimized `CopyMetadataTo` may be a transparent proxy, typically a `TaskItem` object living in another appdomain, which does not work well with Linq. The fix and the test coverage are in their own commits.\r\n\r\n### Context\r\n\r\nLow-hanging fruit is showing in RAR performance profiles.\r\n\r\n### Changes Made\r\n\r\n1. Avoided constructing `AssemblyName` on a hot path as the constructor makes expensive Fusion calls on .NET Framework. The problematic code was introduced in #8688.\r\n\r\n2. Added a metadata bulk-set operation to the internal `IMetadataContainer` interface. Calling `SetMetadata` for more than a couple of metadata is slow if `ImmutableDictionary` is used as its backing storage. RAR is heavy on metadata manipulation and switching to the new operation saves about 10% of RAR run-time when building OrchardCore. \r\n\r\n### Testing\r\n\r\nExisting and new unit tests. Measured the perf impact by building OC.",
  "state": "MERGED",
  "createdAt": "2023-07-17T09:58:35Z",
  "updatedAt": "2023-07-27T08:30:09Z",
  "closedAt": "2023-07-27T08:27:15Z",
  "mergedAt": "2023-07-27T08:27:15Z",
  "additions": 217,
  "deletions": 38,
  "changedFiles": 8,
  "headRefName": "rar-cpu-optimizations-take2",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "3a847906088e054ce731a747b28a4805056c89bf",
          "message": "Revert \"Revert \"ResolveAssemblyReference CPU optimizations (#8916)\" (#9037)\"\n\nThis reverts commit 4989625ae896cf35e87c15fd756c3bec341734b3.",
          "committedDate": "2023-07-17T09:51:57Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "15fa8a2738dbd398e5330545276d392853001f89",
          "message": "Materialize metadata collection when calling through TP",
          "committedDate": "2023-07-17T09:52:04Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "657c11ee99f6b752ed039b6e22ef22650da84c82",
          "message": "Add tests for ProjectItemInstance.CopyMetadataTo",
          "committedDate": "2023-07-17T09:52:12Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@rokonec can you please review? The first commit was already reviewed as #8916 by Rainer and Jan but Jan is out this week.",
        "createdAt": "2023-07-18T07:59:00Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems to be only change compared to https://github.com/dotnet/msbuild/pull/8916 - correct?\r\n\r\nIf not - please point me so that I review more carefully.",
              "createdAt": "2023-07-24T09:09:40Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1391,6 +1407,24 @@ public void CopyMetadataTo(ITaskItem destinationItem, bool addOriginalItemSpec)\n                         destinationAsTaskItem._itemDefinitions.AddRange(_itemDefinitions);\n                     }\n                 }\n+                else if (destinationItem is IMetadataContainer destinationItemAsMetadataContainer)\n+                {\n+                    // The destination implements IMetadataContainer so we can use the ImportMetadata bulk-set operation.\n+                    IEnumerable<ProjectMetadataInstance> metadataEnumerable = MetadataCollection;\n+                    IEnumerable<KeyValuePair<string, string>> metadataToImport = metadataEnumerable\n+                        .Where(metadatum => string.IsNullOrEmpty(destinationItem.GetMetadata(metadatum.Name)))\n+                        .Select(metadatum => new KeyValuePair<string, string>(metadatum.Name, GetMetadataEscaped(metadatum.Name)));\n+\n+#if FEATURE_APPDOMAIN\n+                    if (RemotingServices.IsTransparentProxy(destinationItem))\n+                    {\n+                        // Linq is not serializable so materialize the collection before making the call.\n+                        metadataToImport = metadataToImport.ToList();\n+                    }\n+#endif",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Correct, I have added 15fa8a2738dbd398e5330545276d392853001f89 with this change and 657c11ee99f6b752ed039b6e22ef22650da84c82 with tests.",
              "createdAt": "2023-07-24T09:20:36Z",
              "path": "src/Build/Instance/ProjectItemInstance.cs",
              "diffHunk": "@@ -1391,6 +1407,24 @@ public void CopyMetadataTo(ITaskItem destinationItem, bool addOriginalItemSpec)\n                         destinationAsTaskItem._itemDefinitions.AddRange(_itemDefinitions);\n                     }\n                 }\n+                else if (destinationItem is IMetadataContainer destinationItemAsMetadataContainer)\n+                {\n+                    // The destination implements IMetadataContainer so we can use the ImportMetadata bulk-set operation.\n+                    IEnumerable<ProjectMetadataInstance> metadataEnumerable = MetadataCollection;\n+                    IEnumerable<KeyValuePair<string, string>> metadataToImport = metadataEnumerable\n+                        .Where(metadatum => string.IsNullOrEmpty(destinationItem.GetMetadata(metadatum.Name)))\n+                        .Select(metadatum => new KeyValuePair<string, string>(metadatum.Name, GetMetadataEscaped(metadatum.Name)));\n+\n+#if FEATURE_APPDOMAIN\n+                    if (RemotingServices.IsTransparentProxy(destinationItem))\n+                    {\n+                        // Linq is not serializable so materialize the collection before making the call.\n+                        metadataToImport = metadataToImport.ToList();\n+                    }\n+#endif",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}