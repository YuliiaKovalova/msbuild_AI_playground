{
  "number": 8594,
  "title": "Adding ability to override setplatform negotiation",
  "body": "Fixes #\r\n\r\n### Context\r\nWith setplatform negotiation there is no way to force a project to as a certain platform. there is <Setplatform> but that will override the feature all together and there is no way to set the platform to be blank. Because of this there is effectively no way to force a dependent project to build as its default value since <Setplatform>platform=default<Setplatform> will cause overbuilding and <Setplatform><Setplatform> does nothing. here is an example\r\n\r\nA( building as x64) references project B (Available platforms x86;x64 with default platform x86)\r\n\r\nPlatform negotiation will negotate to x64 since its available but if we actually wanted to reference b x86 its not possible\r\nbecause we should leave platform blank if we want to build b as x86 but \r\n<Setplatform><Setplatform> and <Setplatform>platform=<Setplatform> are not valid ways to do this\r\ntherefore the only way to build b as x86 is <Setplatform>platform=86<Setplatform> but this will lead to overbuilding if b is built once with global props {platform = x86} and once with global props {}\r\n\r\n### Changes Made\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2023-03-23T14:39:10Z",
  "updatedAt": "2023-03-29T01:12:16Z",
  "closedAt": "2023-03-29T01:12:16Z",
  "mergedAt": "2023-03-29T01:12:16Z",
  "additions": 78,
  "deletions": 4,
  "changedFiles": 5,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "MIchaelRShea"
  },
  "milestone": {
    "title": "VS 17.6"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "5bab98eded1c8bcf00a087032c9833f8b8517089",
          "message": "Adding ability to override setplatform negotiation",
          "committedDate": "2023-03-23T14:28:55Z",
          "author": {
            "name": "Michael Shea",
            "email": "michaelshea@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0ef2563b0d178bb13f48ad7d2b3544b469d8965e",
          "message": "Changing to containskey should be false",
          "committedDate": "2023-03-23T14:53:23Z",
          "author": {
            "name": "Michael Shea",
            "email": "michaelshea@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8215f7ab020a30c3ad206f4288ce7eb9e7761f5c",
          "message": "Update src/Build/Graph/ProjectInterpretation.cs\n\nCo-authored-by: Forgind <12969783+Forgind@users.noreply.github.com>",
          "committedDate": "2023-03-23T18:57:28Z",
          "author": {
            "name": "Michael Shea",
            "email": "78166458+MIchaelRShea@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Why, if A is x64, would we want B to build as x86? And I'm assuming there's a second PR that adds all the OverridePlatformNegotiationValues? What exactly are they in the example you gave above? I'd assume setting B to x86, but then wouldn't it break?\r\n\r\nWe have setup projects in VS that look to consume two versions of a dll, a x86 version and a x64 version so sometimes we get into this situation where an x64 project needs to reference a project twice once in x86 and once in x64",
        "createdAt": "2023-03-23T19:09:42Z",
        "author": {
          "login": "MIchaelRShea"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                    string overridePlatformNegotiationMetadataValue = projectReferenceItem.GetMetadataValue(OverridePlatformNegotiationValue);\r\n```\r\n\r\nYou should be able to simplify to this. Metadata have the empty string as a default value.",
              "createdAt": "2023-03-23T18:11:17Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -134,7 +135,14 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc\n                         null, // Platform negotiation requires an evaluation with no global properties first\n                         _projectCollection);\n \n-                    var selectedPlatform = PlatformNegotiation.GetNearestPlatform(projectInstance.GetPropertyValue(PlatformMetadataName), projectInstance.GetPropertyValue(PlatformsMetadataName), projectInstance.GetPropertyValue(PlatformLookupTableMetadataName), requesterInstance.GetPropertyValue(PlatformLookupTableMetadataName), projectInstance.FullPath, requesterInstance.GetPropertyValue(PlatformMetadataName));\n+                    var overridePlatformNegotiationMetadataValue = \"\";\n+\n+                    if (projectReferenceItem.HasMetadata(OverridePlatformNegotiationValue))\n+                    {\n+                        overridePlatformNegotiationMetadataValue = projectReferenceItem.GetMetadataValue(OverridePlatformNegotiationValue);\n+                    }",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why a new metadatum rather than using the existing `SetPlatform`?",
              "createdAt": "2023-03-23T21:46:44Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -33,6 +33,7 @@ internal sealed class ProjectInterpretation\n         private const string PlatformMetadataName = \"Platform\";\n         private const string PlatformsMetadataName = \"Platforms\";\n         private const string EnableDynamicPlatformResolutionMetadataName = \"EnableDynamicPlatformResolution\";\n+        private const string OverridePlatformNegotiationValue = \"OverridePlatformNegotiationValue\";",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Setplatform will override it but it doesn't do anything about default platform. \r\n\r\nif project a references project b and negotiates to x86 but b defaults to x86 then b will be added to the graph with no platform value.\r\n\r\nif project c references project b with setplatform platform=x86 then b will be added to the graph with platform=x86. \r\n\r\nthis would cause an overbuild.\r\n\r\nso the way the feature stands there's no way to force a project to build as its default platform.",
              "createdAt": "2023-03-24T14:55:38Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -33,6 +33,7 @@ internal sealed class ProjectInterpretation\n         private const string PlatformMetadataName = \"Platform\";\n         private const string PlatformsMetadataName = \"Platforms\";\n         private const string EnableDynamicPlatformResolutionMetadataName = \"EnableDynamicPlatformResolution\";\n+        private const string OverridePlatformNegotiationValue = \"OverridePlatformNegotiationValue\";",
              "author": {
                "login": "MIchaelRShea"
              }
            },
            {
              "body": "using the set platform metadatum would turn off this feature entirely which we don't want.",
              "createdAt": "2023-03-27T15:52:23Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -33,6 +33,7 @@ internal sealed class ProjectInterpretation\n         private const string PlatformMetadataName = \"Platform\";\n         private const string PlatformsMetadataName = \"Platforms\";\n         private const string EnableDynamicPlatformResolutionMetadataName = \"EnableDynamicPlatformResolution\";\n+        private const string OverridePlatformNegotiationValue = \"OverridePlatformNegotiationValue\";",
              "author": {
                "login": "MIchaelRShea"
              }
            },
            {
              "body": "I think what I was envisioning was:\r\n\r\n1. When `EnableDynamicPlatformResolution`\r\n2. And SetPlatform\r\n3. And the value of setplatform is the default for the referenced project\r\n4. then unset the global property instead of setting it explicitly\r\n\r\nBut based on some conversations offline, that would be a difference from the current behavior, so this is a bit more conservative.",
              "createdAt": "2023-03-28T16:11:10Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -33,6 +33,7 @@ internal sealed class ProjectInterpretation\n         private const string PlatformMetadataName = \"Platform\";\n         private const string PlatformsMetadataName = \"Platforms\";\n         private const string EnableDynamicPlatformResolutionMetadataName = \"EnableDynamicPlatformResolution\";\n+        private const string OverridePlatformNegotiationValue = \"OverridePlatformNegotiationValue\";",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Although . . . this implementation pushes knowledge of the default platform of the referenc**ed** project to the referenc**ing** project. What if, for example, b switches its default? Do you have to edit a? that's undesirable.",
              "createdAt": "2023-03-28T16:15:12Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -33,6 +33,7 @@ internal sealed class ProjectInterpretation\n         private const string PlatformMetadataName = \"Platform\";\n         private const string PlatformsMetadataName = \"Platforms\";\n         private const string EnableDynamicPlatformResolutionMetadataName = \"EnableDynamicPlatformResolution\";\n+        private const string OverridePlatformNegotiationValue = \"OverridePlatformNegotiationValue\";",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "for this feature A doesnt need to know the default of B. it simply sets the platform it wants it to build and then negotiation is what decides if that value should be set OR if it should be left blank(in the case the value matches the default). if default of b changes no change is needed from the referencing project.",
              "createdAt": "2023-03-28T17:23:33Z",
              "path": "src/Build/Graph/ProjectInterpretation.cs",
              "diffHunk": "@@ -33,6 +33,7 @@ internal sealed class ProjectInterpretation\n         private const string PlatformMetadataName = \"Platform\";\n         private const string PlatformsMetadataName = \"Platforms\";\n         private const string EnableDynamicPlatformResolutionMetadataName = \"EnableDynamicPlatformResolution\";\n+        private const string OverridePlatformNegotiationValue = \"OverridePlatformNegotiationValue\";",
              "author": {
                "login": "MIchaelRShea"
              }
            }
          ]
        }
      }
    ]
  }
}