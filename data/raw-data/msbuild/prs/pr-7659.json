{
  "number": 7659,
  "title": "Added cancelation support for client.",
  "body": "This PR adds cancelation feature for client and fixes Ctrl-Break behavior.\r\n",
  "state": "MERGED",
  "createdAt": "2022-05-31T08:35:30Z",
  "updatedAt": "2025-03-20T15:42:27Z",
  "closedAt": "2022-06-07T15:17:05Z",
  "mergedAt": "2022-06-07T15:17:05Z",
  "additions": 37,
  "deletions": 58,
  "changedFiles": 7,
  "headRefName": "dev/mipavlik/msbuild-server-client-cancelation",
  "isDraft": false,
  "author": {
    "login": "MichalPavlik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "64968c4c30d13048e9dc963f13faa0305d08020b",
          "message": "Added cancellation support for client.",
          "committedDate": "2022-05-31T08:34:02Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "82140708bb4ef4b7e0d6c922caf5d2f2567f002d",
          "message": "Added cancellation support for client.",
          "committedDate": "2022-05-31T08:41:31Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "547a66b153acc2215d940c21664fb240c7d7080c",
          "message": "Resolving conflicts",
          "committedDate": "2022-05-31T08:42:20Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3175330bc4de7d9d91be8215d2b167c45311a5b7",
          "message": "Fixing wrong merge",
          "committedDate": "2022-05-31T08:52:35Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "719bd2dc3190e0b49b8a3cd9c03f7ffbb193c0ed",
          "message": "Removed \"Cancelled\" exit type",
          "committedDate": "2022-06-06T13:29:23Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e5cd1b6408bd83363fb5f044a28f49b8cc867c2f",
          "message": "Resolving comments",
          "committedDate": "2022-06-07T08:16:16Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e2a66e232094ec7fcb04e09a3036a5d71f2b7dd6",
          "message": "Resolving conflicts",
          "committedDate": "2022-06-07T09:07:46Z",
          "author": {
            "name": "Michal Pavlik",
            "email": "mipavlik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I thought a bit about two lines above and I have some concerns about race conditions for client and server here . Here are situations that I worry about:\r\n1. We cancel the build and show these lines. The server though is still sending the console output and it is received and showed by the client. Result: these lines go up and are not visible. Could this happen and what do we think about that situation?\r\n2. We cancel the build and show this line, but the server is already finished and all the output now is in the message queue. We indeed would show the success in the console, because server thinks build is already finished, right? But the client status would be \"Cancelled\".  ",
              "createdAt": "2022-06-01T17:30:52Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -354,14 +362,11 @@ private ServerNodeHandshake GetHandshake()\n         /// </summary>\n         private void HandleCancellation()\n         {\n-            // TODO.\n-            // Send cancellation command to server.\n-            // SendCancelCommand(_nodeStream);\n+            TrySendCancelCommand();\n \n             Console.WriteLine(\"MSBuild client cancelled.\");\n             CommunicationsUtilities.Trace(\"MSBuild client cancelled.\");",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "We could fix this problem and my concern if we first check the return type to verify that the cancel command was sent successfully, then wait for a \"cancelled\" response from the server before continuing.",
              "createdAt": "2022-06-06T00:12:58Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -354,14 +362,11 @@ private ServerNodeHandshake GetHandshake()\n         /// </summary>\n         private void HandleCancellation()\n         {\n-            // TODO.\n-            // Send cancellation command to server.\n-            // SendCancelCommand(_nodeStream);\n+            TrySendCancelCommand();\n \n             Console.WriteLine(\"MSBuild client cancelled.\");\n             CommunicationsUtilities.Trace(\"MSBuild client cancelled.\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I'd recommend to keep `CommunicationsUtilities.Trace` and delete `Console.WriteLine(\"MSBuild client cancelled.\");`\r\n1st of all this text shall be localized\r\n2nd Lets hope that redirected output from server will contain enough information for customers to undestand that build has been cancelled.",
              "createdAt": "2022-06-06T11:28:43Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -354,14 +362,11 @@ private ServerNodeHandshake GetHandshake()\n         /// </summary>\n         private void HandleCancellation()\n         {\n-            // TODO.\n-            // Send cancellation command to server.\n-            // SendCancelCommand(_nodeStream);\n+            TrySendCancelCommand();\n \n             Console.WriteLine(\"MSBuild client cancelled.\");\n             CommunicationsUtilities.Trace(\"MSBuild client cancelled.\");",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Localized message about aborting is emitted from the handler. I removed the WriteLine from this method based on our conversation. ",
              "createdAt": "2022-06-07T08:22:01Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -354,14 +362,11 @@ private ServerNodeHandshake GetHandshake()\n         /// </summary>\n         private void HandleCancellation()\n         {\n-            // TODO.\n-            // Send cancellation command to server.\n-            // SendCancelCommand(_nodeStream);\n+            TrySendCancelCommand();\n \n             Console.WriteLine(\"MSBuild client cancelled.\");\n             CommunicationsUtilities.Trace(\"MSBuild client cancelled.\");",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "To resolve partially situation 2 from my other comment about race condition, should we here take into account the `response.ExitType` instead of `_buildCanceled`? There should be cancellation in the enum, I believe. ",
              "createdAt": "2022-06-01T17:34:33Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -411,7 +416,7 @@ private void HandleServerNodeConsoleWrite(ServerNodeConsoleWrite consoleWrite)\n         private void HandleServerNodeBuildResult(ServerNodeBuildResult response)\n         {\n             CommunicationsUtilities.Trace(\"Build response received: exit code {0}, exit type '{1}'\", response.ExitCode, response.ExitType);\n-            _exitResult.MSBuildClientExitType = MSBuildClientExitType.Success;\n+            _exitResult.MSBuildClientExitType = _buildCanceled ? MSBuildClientExitType.Cancelled : MSBuildClientExitType.Success;",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "I checked the `ExitType` enum and unfortunately, it doesn't contain value for canceled/aborted build. We could add this value, but I guess it would require to find a place or places where we should identify this condition and emit correct value.",
              "createdAt": "2022-06-03T08:26:48Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -411,7 +416,7 @@ private void HandleServerNodeConsoleWrite(ServerNodeConsoleWrite consoleWrite)\n         private void HandleServerNodeBuildResult(ServerNodeBuildResult response)\n         {\n             CommunicationsUtilities.Trace(\"Build response received: exit code {0}, exit type '{1}'\", response.ExitCode, response.ExitType);\n-            _exitResult.MSBuildClientExitType = MSBuildClientExitType.Success;\n+            _exitResult.MSBuildClientExitType = _buildCanceled ? MSBuildClientExitType.Cancelled : MSBuildClientExitType.Success;",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Hm, if there is no Cancellation status, then obviously there is no distinction between cancelled and failed builds. One of our options is also do not have this distinction. See, actually we do not need to know that the build was cancelled, as there is no change in behavior in this case.",
              "createdAt": "2022-06-05T19:21:56Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -411,7 +416,7 @@ private void HandleServerNodeConsoleWrite(ServerNodeConsoleWrite consoleWrite)\n         private void HandleServerNodeBuildResult(ServerNodeBuildResult response)\n         {\n             CommunicationsUtilities.Trace(\"Build response received: exit code {0}, exit type '{1}'\", response.ExitCode, response.ExitType);\n-            _exitResult.MSBuildClientExitType = MSBuildClientExitType.Success;\n+            _exitResult.MSBuildClientExitType = _buildCanceled ? MSBuildClientExitType.Cancelled : MSBuildClientExitType.Success;",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Yes, I believe there was no distinction between aborted and failed build. I introduced `_buildCanceled` field because of the `MSBuildClientExitType.Cancelled` value. But it seems this enum value is not used anywhere, so the question is if we need it...",
              "createdAt": "2022-06-06T08:44:58Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -411,7 +416,7 @@ private void HandleServerNodeConsoleWrite(ServerNodeConsoleWrite consoleWrite)\n         private void HandleServerNodeBuildResult(ServerNodeBuildResult response)\n         {\n             CommunicationsUtilities.Trace(\"Build response received: exit code {0}, exit type '{1}'\", response.ExitCode, response.ExitType);\n-            _exitResult.MSBuildClientExitType = MSBuildClientExitType.Success;\n+            _exitResult.MSBuildClientExitType = _buildCanceled ? MSBuildClientExitType.Cancelled : MSBuildClientExitType.Success;",
              "author": {
                "login": "MichalPavlik"
              }
            },
            {
              "body": "Yes, So I suggest to drop this value from this enum, since we do not have yet any logic around it.",
              "createdAt": "2022-06-06T10:09:55Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -411,7 +416,7 @@ private void HandleServerNodeConsoleWrite(ServerNodeConsoleWrite consoleWrite)\n         private void HandleServerNodeBuildResult(ServerNodeBuildResult response)\n         {\n             CommunicationsUtilities.Trace(\"Build response received: exit code {0}, exit type '{1}'\", response.ExitCode, response.ExitType);\n-            _exitResult.MSBuildClientExitType = MSBuildClientExitType.Success;\n+            _exitResult.MSBuildClientExitType = _buildCanceled ? MSBuildClientExitType.Cancelled : MSBuildClientExitType.Success;",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If packet is null, I think this calls ToString on null. packet?.Type?.ToString()?",
              "createdAt": "2022-06-06T00:07:21Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -238,7 +243,24 @@ private void SupportVT100()\n             }\n         }\n \n-        private void SendCancelCommand(NamedPipeClientStream nodeStream) => throw new NotImplementedException();\n+        private bool TrySendPacket(Func<INodePacket> packetResolver)\n+        {\n+            INodePacket? packet = null;\n+            try\n+            {\n+                packet = packetResolver();\n+                WritePacket(_nodeStream, packet);\n+                CommunicationsUtilities.Trace($\"Command packet of type '{packet.Type}' sent...\");\n+            }\n+            catch (Exception ex)\n+            {\n+                CommunicationsUtilities.Trace($\"Failed to send command packet of type '{packet?.Type.ToString() ?? \"Unknown\"}' to server: {0}\", ex);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I don't think so. If packet is `null`, both `Type` getter and `ToString` are not invoked. ",
              "createdAt": "2022-06-06T07:57:08Z",
              "path": "src/Build/BackEnd/Client/MSBuildClient.cs",
              "diffHunk": "@@ -238,7 +243,24 @@ private void SupportVT100()\n             }\n         }\n \n-        private void SendCancelCommand(NamedPipeClientStream nodeStream) => throw new NotImplementedException();\n+        private bool TrySendPacket(Func<INodePacket> packetResolver)\n+        {\n+            INodePacket? packet = null;\n+            try\n+            {\n+                packet = packetResolver();\n+                WritePacket(_nodeStream, packet);\n+                CommunicationsUtilities.Trace($\"Command packet of type '{packet.Type}' sent...\");\n+            }\n+            catch (Exception ex)\n+            {\n+                CommunicationsUtilities.Trace($\"Failed to send command packet of type '{packet?.Type.ToString() ?? \"Unknown\"}' to server: {0}\", ex);",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It looks like this code runs in the client, right? Does this make it exit fast enough that the server doesn't know? I'm also wondering if there's something similar with normal (serverless) builds.",
              "createdAt": "2022-06-06T00:21:03Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -866,8 +868,7 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs\n         {\n             if (e.SpecialKey == ConsoleSpecialKey.ControlBreak)\n             {\n-                e.Cancel = false; // required; the process will now be terminated rudely\n-                return;\n+                Environment.Exit(1); // the process will now be terminated rudely",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I tried Ctrl-Break in \"normal\" build and it didn't work for some reason (the process wasn't terminated). I guess this functionality is not used heavily, so there was no reported issue.\r\nWhen client process terminates during server mode build, the pipe connection is broken and it causes unhandled exception in server and server is terminated too.",
              "createdAt": "2022-06-06T07:47:14Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -866,8 +868,7 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs\n         {\n             if (e.SpecialKey == ConsoleSpecialKey.ControlBreak)\n             {\n-                e.Cancel = false; // required; the process will now be terminated rudely\n-                return;\n+                Environment.Exit(1); // the process will now be terminated rudely",
              "author": {
                "login": "MichalPavlik"
              }
            }
          ]
        }
      }
    ]
  }
}