{
  "number": 9565,
  "title": "Fix missed build data on BuildRequestDataFlags provided",
  "body": "Fixes #9458\r\n\r\n### Context\r\nThe two build requests appear to be treated as identical by the results cache even when different BuildRequestDataFlags were provided .\r\n\r\n### Changes Made\r\nBefore returning cache results, check the cached BuildRequestDataFlags for the previous BuildResult. \r\n\r\n### Testing\r\nManual + UT\r\n",
  "state": "MERGED",
  "createdAt": "2023-12-21T09:16:47Z",
  "updatedAt": "2024-01-05T15:42:04Z",
  "closedAt": "2024-01-05T15:42:04Z",
  "mergedAt": "2024-01-05T15:42:04Z",
  "additions": 207,
  "deletions": 40,
  "changedFiles": 6,
  "headRefName": "dev/ykovalova/fix_missed_ProjectStateAfterBuild",
  "isDraft": false,
  "author": {
    "login": "YuliiaKovalova"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "df6860379a763d474e2aaa3e81deed07bc333cc3",
          "message": "fix missed build data on BuildRequestDataFlags provided",
          "committedDate": "2023-12-21T09:14:15Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fb3293d61eb1df2cb99a6d599dc49e4db9a08612",
          "message": "code cleanup",
          "committedDate": "2023-12-21T09:19:46Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "475e215a1e6a54fd859e40532d2766538e1d8ceb",
          "message": "fix review comments",
          "committedDate": "2024-01-02T09:45:55Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fe546dc1e47f58cb4a5c87d565027110d8c98512",
          "message": "fix review comments",
          "committedDate": "2024-01-02T15:58:06Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "988b4de5cd7d035f8067550121af0be7bc8680da",
          "message": "fix review comments",
          "committedDate": "2024-01-03T09:49:36Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "10106f168ad9e393dba6471c3d8796796e6d02c2",
          "message": "handle ProvideSubsetOfStateAfterBuild case + put changes under change wave",
          "committedDate": "2024-01-04T10:53:13Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3d15b4b647caabfd7c900b0798bd448a49f5e8e4",
          "message": "Merge branch 'main' into dev/ykovalova/fix_missed_ProjectStateAfterBuild",
          "committedDate": "2024-01-04T10:55:13Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "95473390+YuliiaKovalova@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ce44202fcea5caad86cbe2cfc4627b9340580319",
          "message": "update change wave",
          "committedDate": "2024-01-04T11:10:25Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0795c2f254cef7437f527a420afac72867b1b35d",
          "message": "fix review comments",
          "committedDate": "2024-01-05T11:45:07Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d6bd816ce0fdeeecd527c37a245fbc1bc00b8dab",
          "message": "add the change to ChangeWave.md",
          "committedDate": "2024-01-05T12:21:36Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "01f30b20d813ab8669da2dd593d4f9197e1a55c4",
          "message": "fix review comment",
          "committedDate": "2024-01-05T15:06:52Z",
          "author": {
            "name": "YuliiaKovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This seems like something that should be set in the constructor, not manually here.",
              "createdAt": "2023-12-21T22:24:35Z",
              "path": "src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs",
              "diffHunk": "@@ -331,7 +331,10 @@ public void SubmitBuildRequest(BuildRequest request)\n                         // Grab the results from the requested configuration\n                         IResultsCache cache = (IResultsCache)_componentHost.GetComponent(BuildComponentType.ResultsCache);\n                         BuildResult result = cache.GetResultsForConfiguration(request.ConfigurationId);\n-                        BuildResult resultToReport = new BuildResult(request, result, null);\n+                        BuildResult resultToReport = new BuildResult(request, result, null)\n+                        {\n+                            BuildRequestDataFlags = request.BuildRequestDataFlags,",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This check (along with the other two you changed) are specific to targets; I don't think it makes sense to check BuildRequestDataFlags here as well. I'd have a separate check either above or below this if block for that.",
              "createdAt": "2023-12-21T22:26:27Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -163,15 +163,15 @@ public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> co\n                 if (_resultsByConfiguration.TryGetValue(request.ConfigurationId, out BuildResult allResults))\n                 {\n                     // Check for targets explicitly specified.\n-                    bool explicitTargetsSatisfied = CheckResults(allResults, request.Targets, response.ExplicitTargetsToBuild, skippedResultsDoNotCauseCacheMiss);\n+                    bool explicitTargetsSatisfied = CheckResults(request.BuildRequestDataFlags, allResults, request.Targets, response.ExplicitTargetsToBuild, skippedResultsDoNotCauseCacheMiss);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "@ladipro , I put it in CheckResults method because I wanted to report it as a part of [targetsMissingResults](https://github.com/dotnet/msbuild/blob/995ca63dbd7104208e33a6ff8dffacab5daa44d2/src/Build/BackEnd/Components/Caching/ResultsCache.cs#L312)\r\nDo I need to track it in my separate method? \r\n",
              "createdAt": "2024-01-02T09:12:09Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -163,15 +163,15 @@ public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> co\n                 if (_resultsByConfiguration.TryGetValue(request.ConfigurationId, out BuildResult allResults))\n                 {\n                     // Check for targets explicitly specified.\n-                    bool explicitTargetsSatisfied = CheckResults(allResults, request.Targets, response.ExplicitTargetsToBuild, skippedResultsDoNotCauseCacheMiss);\n+                    bool explicitTargetsSatisfied = CheckResults(request.BuildRequestDataFlags, allResults, request.Targets, response.ExplicitTargetsToBuild, skippedResultsDoNotCauseCacheMiss);",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "[targetsMissingResults](https://github.com/dotnet/msbuild/blob/995ca63dbd7104208e33a6ff8dffacab5daa44d2/src/Build/BackEnd/Components/Caching/ResultsCache.cs#L312) is unused and should be possible to eliminate together with `ExplicitTargetsToBuild`.\r\n\r\nI think it makes sense to check the flags first and only if they match proceed to checking targets, just as a tiny perf optimization.",
              "createdAt": "2024-01-02T15:07:09Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -163,15 +163,15 @@ public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> co\n                 if (_resultsByConfiguration.TryGetValue(request.ConfigurationId, out BuildResult allResults))\n                 {\n                     // Check for targets explicitly specified.\n-                    bool explicitTargetsSatisfied = CheckResults(allResults, request.Targets, response.ExplicitTargetsToBuild, skippedResultsDoNotCauseCacheMiss);\n+                    bool explicitTargetsSatisfied = CheckResults(request.BuildRequestDataFlags, allResults, request.Targets, response.ExplicitTargetsToBuild, skippedResultsDoNotCauseCacheMiss);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This will need to have an explicit field and the field should be handled in the `Translate` method.",
              "createdAt": "2024-01-02T14:28:56Z",
              "path": "src/Build/BackEnd/Shared/BuildResult.cs",
              "diffHunk": "@@ -380,6 +381,12 @@ public ProjectInstance ProjectStateAfterBuild\n             set => _projectStateAfterBuild = value;\n         }\n \n+        /// <summary>\n+        /// Gets or sets the flags that provide additional control over the build request.\n+        /// See <see cref=\"Execution.BuildRequestDataFlags\"/> for examples of the available flags.\n+        /// </summary>\n+        public BuildRequestDataFlags BuildRequestDataFlags { get; }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`BuildRequestDataFlags` are flags so this should look something like\r\n\r\n```suggestion\r\n            buildRequestDataFlags.HasFlag(BuildRequestDataFlags.ProvideProjectStateAfterBuild) == buildResultDataFlags.HasFLag(BuildRequestDataFlags.ProvideProjectStateAfterBuild);\r\n```\r\n\r\nbut we will probably want to test for more flags, basically everything that can affect the results.",
              "createdAt": "2024-01-02T14:39:15Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -332,6 +333,15 @@ private static bool CheckResults(BuildResult result, List<string> targets, HashS\n             return returnValue;\n         }\n \n+        /// <summary>\n+        /// Checks results for the specified build flags.\n+        /// </summary>\n+        /// <param name=\"buildRequestDataFlags\">The current request build flags.</param>\n+        /// <param name=\"buildResultDataFlags\">The existing build result data flags.</param>\n+        /// <returns>False if there is any difference in the data flags that can cause missed build data, true otherwise.</returns>\n+        private static bool CheckBuildDataFlagsResults(BuildRequestDataFlags buildRequestDataFlags, BuildRequestDataFlags buildResultDataFlags) =>\n+            buildRequestDataFlags != BuildRequestDataFlags.ProvideProjectStateAfterBuild || buildResultDataFlags == buildRequestDataFlags;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "@ladipro I believe the logic is that every flag other than `ProvideProjectStateAfterBuild` is considering as possible to affect results. \r\nHowever, by looking at existing flags, please consider it we shall test for `ProvideSubsetOfStateAfterBuild` as well. I mean only when both flags are not set we can consider this request cache satisfied as no results.\r\nI am not sure if I understand it correctly, but to me check can be \r\n```C#\r\n(!buildRequestDataFlags.HasFlag(BuildRequestDataFlags.ProvideProjectStateAfterBuild)  && \r\n !buildRequestDataFlags.HasFlag(BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild)) \r\n||\r\n(buildResultDataFlags & \r\n ~BuildRequestDataFlags.ProvideProjectStateAfterBuild  & \r\n ~BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild)  == \r\n(buildRequestDataFlags & \r\n ~BuildRequestDataFlags.ProvideProjectStateAfterBuild & \r\n ~BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild)\r\n ```\r\n So changes in `Provide*StateAfterBuild` are ignored as those do not affect result.\r\n Additionally if no project or subset of project is going to be reported we can satisfy it by cache, but I do not understand this particular logic, as other changes in build request could affect resulting build artifacts or overall build success/failure (for example `IgnoreMissingEmptyAndInvalidImports` flag).",
              "createdAt": "2024-01-02T15:54:15Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -332,6 +333,15 @@ private static bool CheckResults(BuildResult result, List<string> targets, HashS\n             return returnValue;\n         }\n \n+        /// <summary>\n+        /// Checks results for the specified build flags.\n+        /// </summary>\n+        /// <param name=\"buildRequestDataFlags\">The current request build flags.</param>\n+        /// <param name=\"buildResultDataFlags\">The existing build result data flags.</param>\n+        /// <returns>False if there is any difference in the data flags that can cause missed build data, true otherwise.</returns>\n+        private static bool CheckBuildDataFlagsResults(BuildRequestDataFlags buildRequestDataFlags, BuildRequestDataFlags buildResultDataFlags) =>\n+            buildRequestDataFlags != BuildRequestDataFlags.ProvideProjectStateAfterBuild || buildResultDataFlags == buildRequestDataFlags;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "@rainersigwald , are you aware of any other flags that we have to respect before extracting cache results? ",
              "createdAt": "2024-01-02T17:53:02Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -332,6 +333,15 @@ private static bool CheckResults(BuildResult result, List<string> targets, HashS\n             return returnValue;\n         }\n \n+        /// <summary>\n+        /// Checks results for the specified build flags.\n+        /// </summary>\n+        /// <param name=\"buildRequestDataFlags\">The current request build flags.</param>\n+        /// <param name=\"buildResultDataFlags\">The existing build result data flags.</param>\n+        /// <returns>False if there is any difference in the data flags that can cause missed build data, true otherwise.</returns>\n+        private static bool CheckBuildDataFlagsResults(BuildRequestDataFlags buildRequestDataFlags, BuildRequestDataFlags buildResultDataFlags) =>\n+            buildRequestDataFlags != BuildRequestDataFlags.ProvideProjectStateAfterBuild || buildResultDataFlags == buildRequestDataFlags;",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "> @ladipro I believe the logic is that every flag other than ProvideProjectStateAfterBuild is considering as possible to affect results.\r\n\r\n`ClearCachesAfterBuild` looks like an example of a \"meta flag\" which does not affect the results.\r\n\r\n`ProvideSubsetOfStateAfterBuild` will likely need a slightly more sophisticated handling. Note that we never check for this flag in product code. We instead use non-null `RequestedProjectState` as the indicator that `ProjectStateAfterBuild` should be set. https://github.com/dotnet/msbuild/blob/5d7f5723223b823c9ed62ad52cc04e4c17a5848b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs#L190-L200",
              "createdAt": "2024-01-02T21:48:27Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -332,6 +333,15 @@ private static bool CheckResults(BuildResult result, List<string> targets, HashS\n             return returnValue;\n         }\n \n+        /// <summary>\n+        /// Checks results for the specified build flags.\n+        /// </summary>\n+        /// <param name=\"buildRequestDataFlags\">The current request build flags.</param>\n+        /// <param name=\"buildResultDataFlags\">The existing build result data flags.</param>\n+        /// <returns>False if there is any difference in the data flags that can cause missed build data, true otherwise.</returns>\n+        private static bool CheckBuildDataFlagsResults(BuildRequestDataFlags buildRequestDataFlags, BuildRequestDataFlags buildResultDataFlags) =>\n+            buildRequestDataFlags != BuildRequestDataFlags.ProvideProjectStateAfterBuild || buildResultDataFlags == buildRequestDataFlags;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Ignore my previous analysis, it was based on my false believe that we cache complete result of build, including ProjectInstance, and materialize BuildResult from it. Sorry - my bad.\r\nNow when I think about it, I like simplicity of not returning cached results if anything in `BuildRequestDataFlags` changes. The `ClearCachesAfterBuild` looks concerning here as mentioned \"meta flag\", but is designed and is used only for Restore.",
              "createdAt": "2024-01-02T22:30:18Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -332,6 +333,15 @@ private static bool CheckResults(BuildResult result, List<string> targets, HashS\n             return returnValue;\n         }\n \n+        /// <summary>\n+        /// Checks results for the specified build flags.\n+        /// </summary>\n+        /// <param name=\"buildRequestDataFlags\">The current request build flags.</param>\n+        /// <param name=\"buildResultDataFlags\">The existing build result data flags.</param>\n+        /// <returns>False if there is any difference in the data flags that can cause missed build data, true otherwise.</returns>\n+        private static bool CheckBuildDataFlagsResults(BuildRequestDataFlags buildRequestDataFlags, BuildRequestDataFlags buildResultDataFlags) =>\n+            buildRequestDataFlags != BuildRequestDataFlags.ProvideProjectStateAfterBuild || buildResultDataFlags == buildRequestDataFlags;",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "> > @ladipro I believe the logic is that every flag other than ProvideProjectStateAfterBuild is considering as possible to affect results.\r\n> \r\n> `ClearCachesAfterBuild` looks like an example of a \"meta flag\" which does not affect the results.\r\n> \r\n> `ProvideSubsetOfStateAfterBuild` will likely need a slightly more sophisticated handling. Note that we never check for this flag in product code. We instead use non-null `RequestedProjectState` as the indicator that `ProjectStateAfterBuild` should be set.\r\n> \r\n> https://github.com/dotnet/msbuild/blob/5d7f5723223b823c9ed62ad52cc04e4c17a5848b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs#L190-L200\r\n\r\nLadi, I made an attempt to add this flag explicitly if RequestedProjectState is passed. \r\nIs it wrong?",
              "createdAt": "2024-01-03T09:50:53Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -332,6 +333,15 @@ private static bool CheckResults(BuildResult result, List<string> targets, HashS\n             return returnValue;\n         }\n \n+        /// <summary>\n+        /// Checks results for the specified build flags.\n+        /// </summary>\n+        /// <param name=\"buildRequestDataFlags\">The current request build flags.</param>\n+        /// <param name=\"buildResultDataFlags\">The existing build result data flags.</param>\n+        /// <returns>False if there is any difference in the data flags that can cause missed build data, true otherwise.</returns>\n+        private static bool CheckBuildDataFlagsResults(BuildRequestDataFlags buildRequestDataFlags, BuildRequestDataFlags buildResultDataFlags) =>\n+            buildRequestDataFlags != BuildRequestDataFlags.ProvideProjectStateAfterBuild || buildResultDataFlags == buildRequestDataFlags;",
              "author": {
                "login": "YuliiaKovalova"
              }
            },
            {
              "body": "It looks reasonable. Requiring API users to set this flag would be a breaking change so we can at least make the data consistent internally.\r\n\r\nHowever, I'm not sure if this is enough to handle `ProvideSubsetOfStateAfterBuild` properly. If one build request asks for a certain subset of state and then another one for a different subset, then they both have the flag set but the expected build results are not the same and the cached entry should not be used.",
              "createdAt": "2024-01-03T21:18:41Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -332,6 +333,15 @@ private static bool CheckResults(BuildResult result, List<string> targets, HashS\n             return returnValue;\n         }\n \n+        /// <summary>\n+        /// Checks results for the specified build flags.\n+        /// </summary>\n+        /// <param name=\"buildRequestDataFlags\">The current request build flags.</param>\n+        /// <param name=\"buildResultDataFlags\">The existing build result data flags.</param>\n+        /// <returns>False if there is any difference in the data flags that can cause missed build data, true otherwise.</returns>\n+        private static bool CheckBuildDataFlagsResults(BuildRequestDataFlags buildRequestDataFlags, BuildRequestDataFlags buildResultDataFlags) =>\n+            buildRequestDataFlags != BuildRequestDataFlags.ProvideProjectStateAfterBuild || buildResultDataFlags == buildRequestDataFlags;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "done",
              "createdAt": "2024-01-04T14:01:31Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -332,6 +333,15 @@ private static bool CheckResults(BuildResult result, List<string> targets, HashS\n             return returnValue;\n         }\n \n+        /// <summary>\n+        /// Checks results for the specified build flags.\n+        /// </summary>\n+        /// <param name=\"buildRequestDataFlags\">The current request build flags.</param>\n+        /// <param name=\"buildResultDataFlags\">The existing build result data flags.</param>\n+        /// <returns>False if there is any difference in the data flags that can cause missed build data, true otherwise.</returns>\n+        private static bool CheckBuildDataFlagsResults(BuildRequestDataFlags buildRequestDataFlags, BuildRequestDataFlags buildResultDataFlags) =>\n+            buildRequestDataFlags != BuildRequestDataFlags.ProvideProjectStateAfterBuild || buildResultDataFlags == buildRequestDataFlags;",
              "author": {
                "login": "YuliiaKovalova"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: This should be added to the method comment about ~20 lines up.",
              "createdAt": "2024-01-02T14:45:30Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -164,8 +164,9 @@ public ResultsCacheResponse SatisfyRequest(BuildRequest request, List<string> co\n                 {\n                     // Check for targets explicitly specified.\n                     bool explicitTargetsSatisfied = CheckResults(allResults, request.Targets, response.ExplicitTargetsToBuild, skippedResultsDoNotCauseCacheMiss);\n+                    bool buildDataFlagsSatisfied = CheckBuildDataFlagsResults(request.BuildRequestDataFlags, allResults.BuildRequestDataFlags);\n \n-                    if (explicitTargetsSatisfied)\n+                    if (explicitTargetsSatisfied && buildDataFlagsSatisfied)",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please don't forget to add `translator.TranslateEnum(ref _buildRequestDataFlags, (int)_buildRequestDataFlags)` to the `Translate` method.",
              "createdAt": "2024-01-02T21:32:30Z",
              "path": "src/Build/BackEnd/Shared/BuildResult.cs",
              "diffHunk": "@@ -116,6 +116,8 @@ public class BuildResult : INodePacket, IBuildResults\n         /// </summary>\n         private ProjectInstance _projectStateAfterBuild;\n \n+        private BuildRequestDataFlags _buildRequestDataFlags;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Do we need the setter?",
              "createdAt": "2024-01-04T22:14:41Z",
              "path": "src/Build/BackEnd/Shared/BuildResult.cs",
              "diffHunk": "@@ -380,6 +383,16 @@ public ProjectInstance ProjectStateAfterBuild\n             set => _projectStateAfterBuild = value;\n         }\n \n+        /// <summary>\n+        /// Gets or sets the flags that provide additional control over the build request.\n+        /// See <see cref=\"Execution.BuildRequestDataFlags\"/> for examples of the available flags.\n+        /// </summary>\n+        public BuildRequestDataFlags BuildRequestDataFlags\n+        {\n+            get => _buildRequestDataFlags;\n+            set => _buildRequestDataFlags = value;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Can you please add a comment explaining what this field represents?",
              "createdAt": "2024-01-04T22:15:01Z",
              "path": "src/Build/BackEnd/Shared/BuildResult.cs",
              "diffHunk": "@@ -116,6 +116,8 @@ public class BuildResult : INodePacket, IBuildResults\n         /// </summary>\n         private ProjectInstance _projectStateAfterBuild;\n \n+        private BuildRequestDataFlags _buildRequestDataFlags;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n\r\n```suggestion\r\n        /// Gets the flags that were used in the build request to which these results are associated.\r\n```",
              "createdAt": "2024-01-04T22:19:25Z",
              "path": "src/Build/BackEnd/Shared/BuildResult.cs",
              "diffHunk": "@@ -380,6 +383,16 @@ public ProjectInstance ProjectStateAfterBuild\n             set => _projectStateAfterBuild = value;\n         }\n \n+        /// <summary>\n+        /// Gets or sets the flags that provide additional control over the build request.",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Can be `static` or even `const`.",
              "createdAt": "2024-01-04T22:38:42Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -17,6 +18,11 @@ namespace Microsoft.Build.BackEnd\n     /// </summary>\n     internal class ResultsCache : IResultsCache\n     {\n+        /// <summary>\n+        /// The presence of any of these flags affects build result for the specified request.\n+        /// </summary>\n+        private readonly BuildRequestDataFlags _flagsAffectingBuildResults = BuildRequestDataFlags.ProvideProjectStateAfterBuild;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Method can be `static` if the field is changed to static or const.",
              "createdAt": "2024-01-04T22:39:25Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -332,6 +340,20 @@ private static bool CheckResults(BuildResult result, List<string> targets, HashS\n             return returnValue;\n         }\n \n+        /// <summary>\n+        /// Checks results for the specified build flags.\n+        /// </summary>\n+        /// <param name=\"buildRequestDataFlags\">The current request build flags.</param>\n+        /// <param name=\"buildResultDataFlags\">The existing build result data flags.</param>\n+        /// <returns>False if there is any difference in the data flags that can cause missed build data, true otherwise.</returns>\n+        private bool CheckBuildDataFlagsResults(BuildRequestDataFlags buildRequestDataFlags, BuildRequestDataFlags buildResultDataFlags) =>",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Is the bitwise `&` intentional? Not incorrect but somewhat unusual.\r\n\r\n```suggestion\r\n            && (buildRequestDataFlags & _flagsAffectingBuildResults) == (buildResultDataFlags & _flagsAffectingBuildResults);\r\n```",
              "createdAt": "2024-01-04T22:40:52Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -332,6 +340,20 @@ private static bool CheckResults(BuildResult result, List<string> targets, HashS\n             return returnValue;\n         }\n \n+        /// <summary>\n+        /// Checks results for the specified build flags.\n+        /// </summary>\n+        /// <param name=\"buildRequestDataFlags\">The current request build flags.</param>\n+        /// <param name=\"buildResultDataFlags\">The existing build result data flags.</param>\n+        /// <returns>False if there is any difference in the data flags that can cause missed build data, true otherwise.</returns>\n+        private bool CheckBuildDataFlagsResults(BuildRequestDataFlags buildRequestDataFlags, BuildRequestDataFlags buildResultDataFlags) =>\n+\n+            // Even if both buildRequestDataFlags and buildResultDataFlags have ProvideSubsetOfStateAfterBuild flag,\n+            // the underlying RequestedProjectState may have different user filters defined.\n+            // It is more reliable to ignore the cached value. \n+            !buildRequestDataFlags.HasFlag(BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild)\n+            & (buildRequestDataFlags & _flagsAffectingBuildResults) == (buildResultDataFlags & _flagsAffectingBuildResults);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`SkipNonexistentTargets`\r\n`IgnoreMissingEmptyAndInvalidImports`\r\n`FailOnUnresolvedSdk`\r\n\r\nalso look like flags affecting the build result. Since the check is now behind a changewave, giving us a bit of extra safety, I would consider adding them here.",
              "createdAt": "2024-01-05T14:57:25Z",
              "path": "src/Build/BackEnd/Components/Caching/ResultsCache.cs",
              "diffHunk": "@@ -17,6 +18,11 @@ namespace Microsoft.Build.BackEnd\n     /// </summary>\n     internal class ResultsCache : IResultsCache\n     {\n+        /// <summary>\n+        /// The presence of any of these flags affects build result for the specified request.\n+        /// </summary>\n+        private const BuildRequestDataFlags FlagsAffectingBuildResults = BuildRequestDataFlags.ProvideProjectStateAfterBuild;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}