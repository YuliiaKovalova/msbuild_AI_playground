{
  "number": 7326,
  "title": "MSBuild command line arguments aren't logged in dotnet build",
  "body": "Fixes #7216 \r\n\r\n### Context\r\nSee #7216 \r\n\r\n### Changes Made\r\n- Logging commandLine arguments passed into Execute method as oppose to Environment.CommandLine\r\n\r\n### Testing\r\n- ren before and after and compared its binary log in viewer.\r\n\r\n### Notes\r\n- I reviewed other places which uses  Environment.CommandLine and it seems to be OK with respect to `dotnet build` use case.\r\n",
  "state": "MERGED",
  "createdAt": "2022-01-24T08:40:04Z",
  "updatedAt": "2022-01-26T14:54:59Z",
  "closedAt": "2022-01-26T14:54:59Z",
  "mergedAt": "2022-01-26T14:54:58Z",
  "additions": 24,
  "deletions": 8,
  "changedFiles": 2,
  "headRefName": "rokonec/7216-command-line-arguments-aren-logged-in-cli",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "189b75523b481eee42ed4a84b9572180f7b706ce",
          "message": "Logging Main.Execute commandLine arguments as oppose to Environmet.CommandLine",
          "committedDate": "2022-01-24T08:35:07Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: There are quite a few occurrences of this ifdef already and we're adding more - in this PR and in @Forgind's #7213. Do you think it would be worth introducing an abstraction to cover the two cases (with and without `FEATURE_GET_COMMANDLINE`)? Something with no perf impact like a struct that would wrap the `string` or `string[]`.",
              "createdAt": "2022-01-24T12:22:58Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1005,7 +1007,12 @@ internal static bool BuildProject\n             GraphBuildOptions graphBuildOptions,\n             bool lowPriority,\n             string[] inputResultsCaches,\n-            string outputResultsCache\n+            string outputResultsCache,\n+#if FEATURE_GET_COMMANDLINE",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I though about something like this. But it requires more refactoring, which might be addressed in different PR. \r\nI'd vote for using one, more complex, data type. In particular I'd use `string[]` and in convert `string commandLine` to it as soon as possible. Not sure if this naive approach is feasible though.",
              "createdAt": "2022-01-24T16:53:03Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1005,7 +1007,12 @@ internal static bool BuildProject\n             GraphBuildOptions graphBuildOptions,\n             bool lowPriority,\n             string[] inputResultsCaches,\n-            string outputResultsCache\n+            string outputResultsCache,\n+#if FEATURE_GET_COMMANDLINE",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "That sounds good to me. We do combine it back into a string fairly often, which is a little unfortunate but ok.\r\n\r\nAs an alternative:\r\nhttps://github.com/dotnet/msbuild/pull/6789",
              "createdAt": "2022-01-24T17:20:07Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1005,7 +1007,12 @@ internal static bool BuildProject\n             GraphBuildOptions graphBuildOptions,\n             bool lowPriority,\n             string[] inputResultsCaches,\n-            string outputResultsCache\n+            string outputResultsCache,\n+#if FEATURE_GET_COMMANDLINE",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Please note that removing `FEATURE_GET_COMMANDLINE` as proposed in #6789 would break `dotnet build` because the CLI directly calls Main:\r\n\r\nhttps://github.com/dotnet/sdk/blob/14b117b7088653b694e16ac2071fcbf634a2a9ab/src/Cli/Microsoft.DotNet.Cli.Utils/MSBuildForwardingAppWithoutLogging.cs#L139  ",
              "createdAt": "2022-01-24T21:27:23Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1005,7 +1007,12 @@ internal static bool BuildProject\n             GraphBuildOptions graphBuildOptions,\n             bool lowPriority,\n             string[] inputResultsCaches,\n-            string outputResultsCache\n+            string outputResultsCache,\n+#if FEATURE_GET_COMMANDLINE",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Is there any reason you can't have:\r\npublic static int Main(string[] args) {\r\nreturn Main(string.Join(' ', args);\r\n}\r\n\r\n...and remove the directive?",
              "createdAt": "2022-01-24T21:42:15Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1005,7 +1007,12 @@ internal static bool BuildProject\n             GraphBuildOptions graphBuildOptions,\n             bool lowPriority,\n             string[] inputResultsCaches,\n-            string outputResultsCache\n+            string outputResultsCache,\n+#if FEATURE_GET_COMMANDLINE",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "`FEATURE_GET_COMMANDLINE` makes us get the command line from `Environment.CommandLine` which offers no way of setting it. We would have to wrap it in our own settable prop to be used by the CLI.",
              "createdAt": "2022-01-24T21:50:39Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1005,7 +1007,12 @@ internal static bool BuildProject\n             GraphBuildOptions graphBuildOptions,\n             bool lowPriority,\n             string[] inputResultsCaches,\n-            string outputResultsCache\n+            string outputResultsCache,\n+#if FEATURE_GET_COMMANDLINE",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I'm not sure what happens if you expose two `Main` overloads. If I understand your proposal we would still have `Main()` calling `Environment.CommandLine` and `Main(string[])` for back compat (and dotnet CLI).",
              "createdAt": "2022-01-24T21:54:25Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1005,7 +1007,12 @@ internal static bool BuildProject\n             GraphBuildOptions graphBuildOptions,\n             bool lowPriority,\n             string[] inputResultsCaches,\n-            string outputResultsCache\n+            string outputResultsCache,\n+#if FEATURE_GET_COMMANDLINE",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This double negative is hurting my brain \ud83d\ude01",
              "createdAt": "2022-01-24T15:28:29Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1206,9 +1213,17 @@ string outputResultsCache\n #endif\n                     BuildResultCode? result = null;\n \n-                    var messagesToLogInBuildLoggers = Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager\n-                        ? null\n-                        : GetMessagesToLogInBuildLoggers();\n+                    IEnumerable<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = null;\n+                    if (!Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I agree. I have refrained from inverting and renaming it because this escape hatch is optout with intuitive understanding that 'true => optout'. Give this code future maintenance needs, I'd keep it as is.\r\nAdditionally, can we consider to delete this Escape Hatch.",
              "createdAt": "2022-01-24T16:58:54Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1206,9 +1213,17 @@ string outputResultsCache\n #endif\n                     BuildResultCode? result = null;\n \n-                    var messagesToLogInBuildLoggers = Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager\n-                        ? null\n-                        : GetMessagesToLogInBuildLoggers();\n+                    IEnumerable<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = null;\n+                    if (!Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager)",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      }
    ]
  }
}