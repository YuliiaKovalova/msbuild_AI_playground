{
  "number": 8865,
  "title": "Use NetCurrent to pull target .NET version from Arcade",
  "body": "This is required for source-build in .NET 8 now, so that we target 8\nin the sourcebuilt builds, even when the product must target 7.\n\nFixes #8468.\n\n",
  "state": "MERGED",
  "createdAt": "2023-06-09T21:19:34Z",
  "updatedAt": "2023-06-16T14:41:21Z",
  "closedAt": "2023-06-16T14:41:19Z",
  "mergedAt": "2023-06-16T14:41:19Z",
  "additions": 7,
  "deletions": 3,
  "changedFiles": 2,
  "headRefName": "netcurrent",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "22bcb3c0e307560b2bbd2d3660b619b0c3d40950",
          "message": "Use NetCurrent to pull target .NET version from Arcade\n\nThis is required for source-build in .NET 8 now, so that we target 8\nin the sourcebuilt builds, even when the product must target 7.\n\nFixes #8468.",
          "committedDate": "2023-06-09T21:18:56Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4efd5d5c0a3b846811c6973c8b21956e7a4b8067",
          "message": "fixup! Use NetCurrent to pull target .NET version from Arcade",
          "committedDate": "2023-06-12T21:40:44Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@MichaelSimons how should I test that this works for net8 sourcebuild?",
        "createdAt": "2023-06-09T21:20:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @MichaelSimons how should I test that this works for net8 sourcebuild?\r\n\r\nThis is one that is best tested in the VMR itself.  Pull the VMR, apply your change and build ([instuctions](https://github.com/dotnet/dotnet#dev-instructions)).  This is because the repo builds are using an older .NET arcade version than the .NET 8.0 VMR would.  When building in the VMR, I would expect a clean prebuilt report (artifacts/prebuilt-report/prebuilt-usage.xml).  You can also see this in the build output.  Today the very end of the output is the following:\r\n\r\n```\r\n/vmr/repo-projects/Directory.Build.targets(688,5): warning : 2 new packages used not in baseline! See report at /vmr/artifacts/prebuilt-report/baseline-comparison.xml for more information. Package IDs are: [/vmr/repo-projects/dotnet.proj]\r\n/vmr/repo-projects/Directory.Build.targets(688,5): warning : Microsoft.AspNetCore.App.Ref.7.0.5 [/vmr/repo-projects/dotnet.proj]\r\n/vmr/repo-projects/Directory.Build.targets(688,5): warning : Microsoft.NETCore.App.Ref.7.0.5 [/vmr/repo-projects/dotnet.proj]\r\n/vmr/repo-projects/Directory.Build.targets(688,5): warning : Prebuilt usages are different from the baseline. If detected changes are acceptable, update baseline with: [/vmr/repo-projects/dotnet.proj]\r\n/vmr/repo-projects/Directory.Build.targets(688,5): warning : cp '/vmr/artifacts/prebuilt-report/generated-new-baseline.xml' '/vmr/eng//tools/prebuilt-baseline.xml' [/vmr/repo-projects/dotnet.proj]\r\n  Found 6 files in prebuilt packages dir.\r\n```",
        "createdAt": "2023-06-12T14:04:12Z",
        "author": {
          "login": "MichaelSimons"
        }
      },
      {
        "body": "Does a particular version msbuild flow into multiple major versions of the SDK?  e.g. like roslyn does?  If so, I think we are going to need a bit of conditional logic on what TFMs to use in the repo source-build legs versus the product builds.",
        "createdAt": "2023-06-12T14:06:20Z",
        "author": {
          "login": "MichaelSimons"
        }
      },
      {
        "body": "> Does a particular version msbuild flow into multiple major versions of the SDK? e.g. like roslyn does? If so, I think we are going to need a bit of conditional logic on what TFMs to use in the repo source-build legs versus the product builds.\r\n\r\nYes, this branch will flow to 7.0.400 and 8.0.100--in two-ish weeks we will fork and be 8.0-only.",
        "createdAt": "2023-06-12T14:15:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "FYI - I applied these changes to my local VMR and it failed.\r\n\r\n```\r\n/repos/dotnet2/src/msbuild/artifacts/source-build/self/src/src/MSBuild/MSBuild.csproj : error NU1201: Project Microsoft.Build is not compatible with net7.0 (.NETCoreApp,Version=v7.0). Project Microsoft.Build supports: net8.0 (.NETCoreApp,Version=v8.0) [/repos/dotnet2/src/msbuild/artifacts/source-build/self/src/MSBuild.SourceBuild.slnf]\r\n```\r\n\r\n[binlog - sourcebuild (2).zip](https://github.com/dotnet/msbuild/files/11724524/sourcebuild.2.zip)\r\n",
        "createdAt": "2023-06-12T14:21:45Z",
        "author": {
          "login": "MichaelSimons"
        }
      },
      {
        "body": "> Yes, this branch will flow to 7.0.400 and 8.0.100--in two-ish weeks we will fork and be 8.0-only.\r\n\r\nThis complicates things.  For the source-build product build, we want to target net7.0 and net8.0 respectively which will happen by using $NetCurrent.  The problem is in the source-build repo legs.  These legs produce source-build intermediate packages which get consumed by dependent repo's source-build legs.  For these we need to target both net7.0 and net8.0 since this branch will flow into both the 7 and 8 SDK.  For the roslyn repos we were able to do this by utilizing $NetCurrent and $NetPrevious ([example](https://github.com/dotnet/razor/pull/8798)) but since msbuild is on a net6.0 based arcade, this is not possible.  We are likely going to have to hard code the TFMs.  \r\n\r\ncc @mmitche ",
        "createdAt": "2023-06-12T14:29:52Z",
        "author": {
          "login": "MichaelSimons"
        }
      },
      {
        "body": "> This is one that is best tested in the VMR itself. Pull the VMR, apply your change and build ([instuctions](https://github.com/dotnet/dotnet#dev-instructions)). This is because the repo builds are using an older .NET arcade version than the .NET 8.0 VMR would.\r\n\r\nThanks! With what I just pushed here + https://github.com/dotnet/sdk/pull/33188 I got a local success.\r\n\r\n> When building in the VMR, I would expect a clean prebuilt report (artifacts/prebuilt-report/prebuilt-usage.xml). You can also see this in the build output.\r\n\r\nI see this now:\r\n\r\n```text\r\n...\r\n  Finding project directories...\r\n  Writing package usage data...\r\n  Writing package usage data... done. Took 00:00:02.2813395\r\n  Found 4 files in prebuilt packages dir.\r\n  Tarball '/home/raines/src/dotnet-dotnet/artifacts/x64/Release/Private.SourceBuilt.Prebuilts.8.0.100-preview.6.23311.1.ubuntu.22.04-x64.tar.gz' was successfully created from '/home/raines/src/dotnet-dotnet/artifacts/prebuilt-report/prebuilt-packages/'\r\n```\r\n\r\n<details>\r\n<summary>prebuilt-usage.xml</summary>\r\n\r\n```xml\r\n<UsageData>\r\n  <CreatedByRid>ubuntu.22.04-x64</CreatedByRid>\r\n  <ProjectDirectories>\r\n    <Dir>src/arcade/</Dir>\r\n    <Dir>src/aspnetcore/</Dir>\r\n    <Dir>src/cecil/</Dir>\r\n    <Dir>src/command-line-api/</Dir>\r\n    <Dir>src/deployment-tools/</Dir>\r\n    <Dir>src/diagnostics/</Dir>\r\n    <Dir>src/dotnet/</Dir>\r\n    <Dir>src/emsdk/</Dir>\r\n    <Dir>src/format/</Dir>\r\n    <Dir>src/fsharp/</Dir>\r\n    <Dir>src/installer/</Dir>\r\n    <Dir>src/msbuild/</Dir>\r\n    <Dir>src/nuget-client/</Dir>\r\n    <Dir>src/package-source-build/</Dir>\r\n    <Dir>src/razor/</Dir>\r\n    <Dir>src/roslyn-analyzers/</Dir>\r\n    <Dir>src/roslyn/</Dir>\r\n    <Dir>src/runtime/</Dir>\r\n    <Dir>src/sdk/</Dir>\r\n    <Dir>src/source-build-externals/</Dir>\r\n    <Dir>src/source-build-reference-packages/</Dir>\r\n    <Dir>src/sourcelink/</Dir>\r\n    <Dir>src/symreader/</Dir>\r\n    <Dir>src/templating/</Dir>\r\n    <Dir>src/test-templates/</Dir>\r\n    <Dir>src/vstest/</Dir>\r\n    <Dir>src/xdt/</Dir>\r\n    <Dir>src/xliff-tasks/</Dir>\r\n    <Dir>artifacts/source-built-sdks/</Dir>\r\n    <Dir>eng//tools/tasks/</Dir>\r\n    <Dir>artifacts/obj/</Dir>\r\n    <Dir></Dir>\r\n  </ProjectDirectories>\r\n  <NeverRestoredTarballPrebuilts>\r\n    <PackageIdentity Id=\"Microsoft.AspNetCore.App.Ref\" Version=\"7.0.5\" />\r\n    <PackageIdentity Id=\"Microsoft.NETCore.App.Ref\" Version=\"7.0.5\" />\r\n  </NeverRestoredTarballPrebuilts>\r\n</UsageData>\r\n```\r\n\r\n</details>\r\n\r\nIs that clean?",
        "createdAt": "2023-06-12T21:47:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Is that clean?\r\n\r\nYes it is!  That's pretty exciting from a source-build perspective.",
        "createdAt": "2023-06-12T22:17:42Z",
        "author": {
          "login": "MichaelSimons"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}