{
  "number": 6511,
  "title": "Do not expect PDB files for a refonly build",
  "body": "Fixes #6510\r\n\r\n### Context\r\n\r\nMSBuild currently incorrectly expects PDB files to be produced by a refonly compile.\r\n\r\n### Changes Made\r\n\r\nThis defaults both `ProduceReferenceAssembly` and `ProduceOnlyReferenceAssembly` (slightly earlier than before).\r\n\r\nWhen `ProduceOnlyReferenceAssembly` is set to `true`, don't expect symbols to be produced.\r\n",
  "state": "MERGED",
  "createdAt": "2021-06-02T20:59:02Z",
  "updatedAt": "2021-08-31T15:30:32Z",
  "closedAt": "2021-06-17T10:00:51Z",
  "mergedAt": "2021-06-17T10:00:50Z",
  "additions": 1,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "reference-assemblies-do-not-include-pdb-files",
  "isDraft": false,
  "author": {
    "login": "Zastai"
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "assignees": {
    "nodes": [
      {
        "login": "jcouv"
      }
    ]
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4fe188ab029ad8d62328f45700dd5e6ef8c646ea",
          "message": "Do not expect PDB files for a refonly build",
          "committedDate": "2021-06-07T17:04:26Z",
          "author": {
            "name": "Tim Van Holder",
            "email": "tim.vanholder@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Just realised I created this against main, but it would probably make sense to retarget it to vs16.11. It's probably not critical enough to warrant a vs16.10 fix.",
        "createdAt": "2021-06-03T19:15:11Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "Yeah, this wouldn't meet the 16.10 bar, but 16.11 makes sense to me too--and if we decide otherwise it's easy to merge from there to main, so please rebase.",
        "createdAt": "2021-06-03T19:17:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@chsienki, @jcouv PTAL ",
        "createdAt": "2021-06-03T21:02:16Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Thanks, @Zastai!",
        "createdAt": "2021-06-17T10:01:02Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this change necessary?",
              "createdAt": "2021-06-03T23:15:44Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -169,6 +169,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <OutputType Condition=\" '$(TargetType)' == 'Container' or '$(TargetType)' == 'DocumentContainer' \">library</OutputType>\n     <OutputType Condition=\" '$(OutputType)' == '' \">exe</OutputType>\n \n+    <!-- Whether or not a reference assembly (or ONLY a reference assembly) is produced. -->\n+    <ProduceReferenceAssembly Condition=\"'$(ProduceReferenceAssembly)' == ''\">false</ProduceReferenceAssembly>\n+    <ProduceOnlyReferenceAssembly Condition=\"'$(ProduceOnlyReferenceAssembly)' == ''\">false</ProduceOnlyReferenceAssembly>",
              "author": {
                "login": "jcouv"
              }
            },
            {
              "body": "Well, the next change tests `ProduceOnlyReferenceAssembly` so defaulting it seemed reasonable. And it seemed equally reasonable to then have the defaulting of `ProduceReferenceAssembly` in the same place.",
              "createdAt": "2021-06-04T07:56:12Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -169,6 +169,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <OutputType Condition=\" '$(TargetType)' == 'Container' or '$(TargetType)' == 'DocumentContainer' \">library</OutputType>\n     <OutputType Condition=\" '$(OutputType)' == '' \">exe</OutputType>\n \n+    <!-- Whether or not a reference assembly (or ONLY a reference assembly) is produced. -->\n+    <ProduceReferenceAssembly Condition=\"'$(ProduceReferenceAssembly)' == ''\">false</ProduceReferenceAssembly>\n+    <ProduceOnlyReferenceAssembly Condition=\"'$(ProduceOnlyReferenceAssembly)' == ''\">false</ProduceOnlyReferenceAssembly>",
              "author": {
                "login": "Zastai"
              }
            },
            {
              "body": "This isn't _necessary_ but is also generally fine.\r\n\r\nIn MSBuild, there are no true booleans, only strings treated like booleans. As a result, each property that is logically a boolean can have three states:\r\n\r\n1. `true`\r\n2. `false`\r\n3. Empty, unset, or set to something else.\r\n\r\nif you control the code that reads a variable, you can use this to your advantage by acting as though it's got a \"default\":\r\n|condition|effect\r\n|----------------------------|-----------------------|\r\n| `'$(Property)' == 'false'` | \"Defaults\" to `true`  |\r\n| `'$(Property)' == 'true'`  | \"Defaults\" to `false` |\r\n\r\nSince this isn't obvious, it's often a good idea to explicitly declare a default value, as is done here.\r\n\r\nThere's a downside, though, which is that explicitly declaring a value makes it harder for the user to have a default value of their own, defined with `Condition=\"'$(ProduceOnlyReferenceAssembly)' == ''\"`. It's possible that users might have used that condition in `Directory.Build.targets` or NuGet `.targets`.\r\n\r\nI don't see any of those in a [search for `ProduceOnlyReferenceAssembly extension:targets`](https://github.com/search?l=&p=2&q=ProduceOnlyReferenceAssembly+extension%3Atargets&ref=advsearch&type=Code), but there are too many hits to be totally confident.\r\n\r\nAs a result, and since this is targeting a release that is intended to minimize risk, **I think we should back out these changes and add only the `_DebugSymbolsProduced` check.**",
              "createdAt": "2021-06-07T15:58:17Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -169,6 +169,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <OutputType Condition=\" '$(TargetType)' == 'Container' or '$(TargetType)' == 'DocumentContainer' \">library</OutputType>\n     <OutputType Condition=\" '$(OutputType)' == '' \">exe</OutputType>\n \n+    <!-- Whether or not a reference assembly (or ONLY a reference assembly) is produced. -->\n+    <ProduceReferenceAssembly Condition=\"'$(ProduceReferenceAssembly)' == ''\">false</ProduceReferenceAssembly>\n+    <ProduceOnlyReferenceAssembly Condition=\"'$(ProduceOnlyReferenceAssembly)' == ''\">false</ProduceOnlyReferenceAssembly>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "That's fair enough.\r\n\r\nFor boolean properties, is there a Microsoft convention and/or best practice for testing them? Always comparing to `'true'`? Always comparing to `'false'`? Always using equal tests for `'true'/'false'`? (The latter is probably something to avoid, because it would potentially match neither condition.)\r\n\r\nAnd yes, it would be convenient to have some means of safely specifying property defaults in a .props file without also assigning at that point. Setting a bunch of properties in .targets always feels a bit naughty :)\r\n",
              "createdAt": "2021-06-07T16:51:38Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -169,6 +169,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <OutputType Condition=\" '$(TargetType)' == 'Container' or '$(TargetType)' == 'DocumentContainer' \">library</OutputType>\n     <OutputType Condition=\" '$(OutputType)' == '' \">exe</OutputType>\n \n+    <!-- Whether or not a reference assembly (or ONLY a reference assembly) is produced. -->\n+    <ProduceReferenceAssembly Condition=\"'$(ProduceReferenceAssembly)' == ''\">false</ProduceReferenceAssembly>\n+    <ProduceOnlyReferenceAssembly Condition=\"'$(ProduceOnlyReferenceAssembly)' == ''\">false</ProduceOnlyReferenceAssembly>",
              "author": {
                "login": "Zastai"
              }
            },
            {
              "body": "Done",
              "createdAt": "2021-06-07T17:06:18Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -169,6 +169,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     <OutputType Condition=\" '$(TargetType)' == 'Container' or '$(TargetType)' == 'DocumentContainer' \">library</OutputType>\n     <OutputType Condition=\" '$(OutputType)' == '' \">exe</OutputType>\n \n+    <!-- Whether or not a reference assembly (or ONLY a reference assembly) is produced. -->\n+    <ProduceReferenceAssembly Condition=\"'$(ProduceReferenceAssembly)' == ''\">false</ProduceReferenceAssembly>\n+    <ProduceOnlyReferenceAssembly Condition=\"'$(ProduceOnlyReferenceAssembly)' == ''\">false</ProduceOnlyReferenceAssembly>",
              "author": {
                "login": "Zastai"
              }
            }
          ]
        }
      }
    ]
  }
}