{
  "number": 8649,
  "title": "Remove unreachable and unused overload methods from IntrinsicFunctions",
  "body": "Fixes # (issue to be created)\r\n\r\n### Context\r\nThis is a change that was split out from PR #8569 at the [request](https://github.com/dotnet/msbuild/pull/8569#issuecomment-1485811063) of @rainersigwald.\r\n\r\nThe change removes type overload methods from `IntrinsicFunctions` that are unreachable via evaluation and that are unused within the repo.\r\n\r\nThis is cleanup that could support a future effort to add source generation for the 'fast path' lookup.\r\n\r\n### Changes Made\r\nRemove `long` variants of `Add`, `Subtract`, `Multiply`, `Divide`, and `Modulo`. Evaluation will always use the `double` variants.\r\n\r\n### Testing\r\nBuilt and ran unit tests on Windows 11 and macOS 12.\r\n\r\n### Notes\r\n",
  "state": "CLOSED",
  "createdAt": "2023-04-08T15:32:14Z",
  "updatedAt": "2023-04-28T16:48:19Z",
  "closedAt": "2023-04-28T16:44:49Z",
  "mergedAt": null,
  "additions": 0,
  "deletions": 40,
  "changedFiles": 1,
  "headRefName": "IntrinsicFunctionsCleanUp",
  "isDraft": false,
  "author": {
    "login": "jrdodds"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4d6634c9733be0d5f958fd132f6303f987ddde48",
          "message": "Remove unreachable and unused type overload methods from IntrinsicFunctions",
          "committedDate": "2023-04-08T14:06:48Z",
          "author": {
            "name": "Jonathan Dodds",
            "email": "jrdodds@me.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "rainersigwald commented this morning that our documentation says we support longs and made a pigeonhole argument that supporting doubles does not obviate the need to support long. Indeed, I made a very simple test project (see https://github.com/dotnet/msbuild/issues/8698) that demonstrates that MSBuild is indeed flawed in this respect. We're currently not 100% clear on whether we can take this change and just change how we parse the numbers or if we need to explicitly call these overloads but currently aren't.",
        "createdAt": "2023-04-24T19:18:48Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "This issue of the unsupported overloads came up in the discussion for #8569 but it is 'new' in this discussion that `long` must be supported. It does make sense that `long` should be supported and that parsing only to a double is a defect.",
        "createdAt": "2023-04-24T19:42:35Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Negated by #8710",
        "createdAt": "2023-04-28T16:44:48Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Aside, feels like these guys would be neater in expression body form. It's not my codebase though",
              "createdAt": "2023-04-08T15:57:03Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -61,14 +53,6 @@ internal static double Subtract(double a, double b)\n             return a - b;",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "This PR intentionally has a very narrow focus but in a different PR it may make sense to change to expression body form.",
              "createdAt": "2023-04-12T13:00:17Z",
              "path": "src/Build/Evaluation/IntrinsicFunctions.cs",
              "diffHunk": "@@ -61,14 +53,6 @@ internal static double Subtract(double a, double b)\n             return a - b;",
              "author": {
                "login": "jrdodds"
              }
            }
          ]
        }
      }
    ]
  }
}