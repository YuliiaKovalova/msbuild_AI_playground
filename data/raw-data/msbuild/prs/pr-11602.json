{
  "number": 11602,
  "title": "add telemetry e2e test, address code quality issues",
  "body": "Fixes #11485 #11506 \r\n\r\n### Context\r\nhttps://github.com/dotnet/msbuild/pull/11481\r\n\r\n\r\n### Changes Made\r\nmoving files, renaming, ading docs\r\n\r\n### Testing\r\nadds a e2e test for node telemetry by capturing it with an ActivityListener\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-03-17T12:12:17Z",
  "updatedAt": "2025-03-28T15:46:38Z",
  "closedAt": "2025-03-28T15:46:37Z",
  "mergedAt": "2025-03-28T15:46:37Z",
  "additions": 406,
  "deletions": 230,
  "changedFiles": 20,
  "headRefName": "telemetry-refactors",
  "isDraft": false,
  "author": {
    "login": "JanProvaznik"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2ddda1936444f72df7f803ba58f6825fdce49cfa",
          "message": "typo, namespaces, remove flushing intermediate data, rename",
          "committedDate": "2025-03-04T15:19:39Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "257968d1690387dca8e1d7c10b77246203d39173",
          "message": "address review comments pt1, implement e2e node telemetry test",
          "committedDate": "2025-03-10T16:16:27Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d7b7d3eea360f83fd3782f3991cef7dafaecca70",
          "message": "rename telemetrytests file",
          "committedDate": "2025-03-11T14:36:33Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "84045698d12b6c09a7b4e242edd77aea8d67064d",
          "message": "descriptive names and docs",
          "committedDate": "2025-03-17T12:09:13Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f54f033294b817fea96c42b749d26d987961d954",
          "message": "fix env setup in test",
          "committedDate": "2025-03-17T13:10:56Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3bd4402342630648bcd6828f68ba6e108b7ead0a",
          "message": "when parsing env variable force . as a decimal separator",
          "committedDate": "2025-03-20T15:44:01Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janprovaznik@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "641f390a93347d7712bb424fa18393c83ca7f1fb",
          "message": "address feedback",
          "committedDate": "2025-03-28T13:46:35Z",
          "author": {
            "name": "Jan Provazn\u00edk",
            "email": "janprovaznik@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I know this line was not touched by this PR, but this summary makes little sense to me, can we fix it while we are on it? This looks like a test class and this is its summary. Should it be on some other line or in the remarks instead of summary? Also, it is not clear from the comment how exactly this is ensured.",
              "createdAt": "2025-03-27T14:37:35Z",
              "path": "src/Build.UnitTests/Telemetry/OpenTelemetryManager_Tests.cs",
              "diffHunk": "@@ -8,8 +8,9 @@\n using Xunit.Abstractions;\n using Microsoft.Build.UnitTests.Shared;\n using Microsoft.Build.UnitTests;\n+using Microsoft.Build.Framework.Telemetry;\n \n-namespace Microsoft.Build.Framework.Telemetry.Tests\n+namespace Microsoft.Build.Engine.UnitTests.Telemetry\n {\n     /// <summary>\n     /// Ensures tests run serially so environment variables and the singleton do not interfere with parallel test runs.",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit\r\n```suggestion\r\n    /// Indicate whether targets/tasks are sourced from NuGet cache - those can be custom, or MSFT provided ones.\r\n```",
              "createdAt": "2025-03-27T16:17:47Z",
              "path": "src/Framework/Telemetry/TaskOrTargetTelemetryKey.cs",
              "diffHunk": "@@ -3,36 +3,81 @@\n \n using System;\n \n-namespace Microsoft.Build.Framework;\n+namespace Microsoft.Build.Framework.Telemetry;\n \n+/// <summary>\n+/// Represents a unique key for task or target telemetry data.\n+/// </summary>\n+/// <remarks>\n+/// Used as a dictionary key for tracking execution metrics of tasks and targets.\n+/// </remarks>\n internal struct TaskOrTargetTelemetryKey : IEquatable<TaskOrTargetTelemetryKey>\n {\n+    /// <summary>\n+    /// Initializes a new instance of the <see cref=\"TaskOrTargetTelemetryKey\"/> struct with all properties.\n+    /// </summary>\n+    /// <param name=\"name\">The name of the task or target.</param>\n+    /// <param name=\"isCustom\">Indicates whether the task/target is custom.</param>\n+    /// <param name=\"isFromNugetCache\">Indicates whether the task/target is from NuGet cache.</param>\n+    /// <param name=\"isFromMetaProject\">Indicates whether the task/target is from a meta project.</param>\n     public TaskOrTargetTelemetryKey(string name, bool isCustom, bool isFromNugetCache, bool isFromMetaProject)\n     {\n         Name = name;\n         IsCustom = isCustom;\n-        IsFromNugetCache = isFromNugetCache;\n-        IsFromMetaProject = isFromMetaProject;\n+        IsNuget = isFromNugetCache;\n+        IsMetaProj = isFromMetaProject;\n     }\n \n+    /// <summary>\n+    /// Initializes a new instance of the <see cref=\"TaskOrTargetTelemetryKey\"/> struct without meta project flag.\n+    /// </summary>\n+    /// <param name=\"name\">The name of the task or target.</param>\n+    /// <param name=\"isCustom\">Indicates whether the task/target is custom.</param>\n+    /// <param name=\"isFromNugetCache\">Indicates whether the task/target is from NuGet cache.</param>\n     public TaskOrTargetTelemetryKey(string name, bool isCustom, bool isFromNugetCache)\n     {\n         Name = name;\n         IsCustom = isCustom;\n-        IsFromNugetCache = isFromNugetCache;\n+        IsNuget = isFromNugetCache;\n+        IsMetaProj = false;\n     }\n \n-    public TaskOrTargetTelemetryKey(string name) => Name = name;\n+    /// <summary>\n+    /// Initializes a new instance of the <see cref=\"TaskOrTargetTelemetryKey\"/> struct with name only.\n+    /// </summary>\n+    /// <param name=\"name\">The name of the task or target.</param>\n+    public TaskOrTargetTelemetryKey(string name) : this(name, false, false, false) { }\n \n+    /// <summary>\n+    /// Enables explicit casting from string to <see cref=\"TaskOrTargetTelemetryKey\"/>.\n+    /// </summary>\n+    /// <param name=\"key\">The string name to convert to a telemetry key.</param>\n+    /// <returns>A telemetry key with the given name.</returns>\n     public static explicit operator TaskOrTargetTelemetryKey(string key) => new(key);\n \n+    /// <summary>\n+    /// Gets the name of the task or target.\n+    /// </summary>\n+    /// <remarks>\n+    /// This name is used as the primary key in serialized JSON data.\n+    /// It is hashed when the task/target is custom or from a meta project.\n+    /// </remarks>\n     public string Name { get; }\n-    // Indicate custom targets/task - those must be hashed.\n+\n+    /// <summary>\n+    /// Gets a value indicating whether this task/target is custom.\n+    /// </summary>\n     public bool IsCustom { get; }\n-    // Indicate targets/tasks sourced from nuget cache - those can be custom or MSFT provided ones.\n-    public bool IsFromNugetCache { get; }\n-    // Indicate targets/tasks generated during build - those must be hashed (as they contain paths).\n-    public bool IsFromMetaProject { get; }\n+\n+    /// <summary>\n+    /// Indicate targets/tasks sourced from NuGet cache - those can be custom or MSFT provided ones.",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit\r\n```suggestion\r\n    /// Indicate whether targets/tasks are generated during build - those must be hashed (as they contain paths).\r\n```",
              "createdAt": "2025-03-27T16:18:50Z",
              "path": "src/Framework/Telemetry/TaskOrTargetTelemetryKey.cs",
              "diffHunk": "@@ -3,36 +3,81 @@\n \n using System;\n \n-namespace Microsoft.Build.Framework;\n+namespace Microsoft.Build.Framework.Telemetry;\n \n+/// <summary>\n+/// Represents a unique key for task or target telemetry data.\n+/// </summary>\n+/// <remarks>\n+/// Used as a dictionary key for tracking execution metrics of tasks and targets.\n+/// </remarks>\n internal struct TaskOrTargetTelemetryKey : IEquatable<TaskOrTargetTelemetryKey>\n {\n+    /// <summary>\n+    /// Initializes a new instance of the <see cref=\"TaskOrTargetTelemetryKey\"/> struct with all properties.\n+    /// </summary>\n+    /// <param name=\"name\">The name of the task or target.</param>\n+    /// <param name=\"isCustom\">Indicates whether the task/target is custom.</param>\n+    /// <param name=\"isFromNugetCache\">Indicates whether the task/target is from NuGet cache.</param>\n+    /// <param name=\"isFromMetaProject\">Indicates whether the task/target is from a meta project.</param>\n     public TaskOrTargetTelemetryKey(string name, bool isCustom, bool isFromNugetCache, bool isFromMetaProject)\n     {\n         Name = name;\n         IsCustom = isCustom;\n-        IsFromNugetCache = isFromNugetCache;\n-        IsFromMetaProject = isFromMetaProject;\n+        IsNuget = isFromNugetCache;\n+        IsMetaProj = isFromMetaProject;\n     }\n \n+    /// <summary>\n+    /// Initializes a new instance of the <see cref=\"TaskOrTargetTelemetryKey\"/> struct without meta project flag.\n+    /// </summary>\n+    /// <param name=\"name\">The name of the task or target.</param>\n+    /// <param name=\"isCustom\">Indicates whether the task/target is custom.</param>\n+    /// <param name=\"isFromNugetCache\">Indicates whether the task/target is from NuGet cache.</param>\n     public TaskOrTargetTelemetryKey(string name, bool isCustom, bool isFromNugetCache)\n     {\n         Name = name;\n         IsCustom = isCustom;\n-        IsFromNugetCache = isFromNugetCache;\n+        IsNuget = isFromNugetCache;\n+        IsMetaProj = false;\n     }\n \n-    public TaskOrTargetTelemetryKey(string name) => Name = name;\n+    /// <summary>\n+    /// Initializes a new instance of the <see cref=\"TaskOrTargetTelemetryKey\"/> struct with name only.\n+    /// </summary>\n+    /// <param name=\"name\">The name of the task or target.</param>\n+    public TaskOrTargetTelemetryKey(string name) : this(name, false, false, false) { }\n \n+    /// <summary>\n+    /// Enables explicit casting from string to <see cref=\"TaskOrTargetTelemetryKey\"/>.\n+    /// </summary>\n+    /// <param name=\"key\">The string name to convert to a telemetry key.</param>\n+    /// <returns>A telemetry key with the given name.</returns>\n     public static explicit operator TaskOrTargetTelemetryKey(string key) => new(key);\n \n+    /// <summary>\n+    /// Gets the name of the task or target.\n+    /// </summary>\n+    /// <remarks>\n+    /// This name is used as the primary key in serialized JSON data.\n+    /// It is hashed when the task/target is custom or from a meta project.\n+    /// </remarks>\n     public string Name { get; }\n-    // Indicate custom targets/task - those must be hashed.\n+\n+    /// <summary>\n+    /// Gets a value indicating whether this task/target is custom.\n+    /// </summary>\n     public bool IsCustom { get; }\n-    // Indicate targets/tasks sourced from nuget cache - those can be custom or MSFT provided ones.\n-    public bool IsFromNugetCache { get; }\n-    // Indicate targets/tasks generated during build - those must be hashed (as they contain paths).\n-    public bool IsFromMetaProject { get; }\n+\n+    /// <summary>\n+    /// Indicate targets/tasks sourced from NuGet cache - those can be custom or MSFT provided ones.\n+    /// </summary>\n+    public bool IsNuget { get; }\n+\n+    /// <summary>\n+    /// Indicate targets/tasks generated during build - those must be hashed (as they contain paths).",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      }
    ]
  }
}