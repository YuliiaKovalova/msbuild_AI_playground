{
  "number": 6980,
  "title": "Delay Creation of ElementLocation",
  "body": "### Issue\r\n - Drafted as in memory project have different characteristics as those from disk.\r\n\r\nMany ElementLocation objects are created for Verify() but is often not used outside of an error.  So instead of creating an new object, add an interface IInternalLocation to the XML objects and pass the interface instead.  When needed, Verify() would call get_Location() to get the IElementLocation.\r\n\r\n### Note\r\nProjectTaskElement.EnsureParametersInitialized() still creates locations and caches the location.  It would be great to delay it too.\r\n\r\n### Tests\r\nEach line is a run of a \"helloworld\" vcxproj project doing load/evaluation/unload 1000 times averaged. Forced GC afterwards.  First run discarded.  Project created with Microsoft.Build.Evaluation.Project() then Zombify() to dispose.  \r\n\r\nAfter:\r\n Evaluation average 497046tick + GC 66284tick = 563331tick\r\n Evaluation average 496872tick + GC 65720tick = 562592tick\r\n Evaluation average 495546tick + GC 65837tick = 561384tick\r\n Evaluation average 501929tick + GC 66190tick = 568119tick\r\n Evaluation average 498541tick + GC 66604tick = 565145tick\r\n Evaluation average 497091tick + GC 65755tick = 562846tick\r\n Evaluation average 494466tick + GC 65964tick = 560431tick\r\n Evaluation average 498267tick + GC 65885tick = 564153tick\r\n\r\nBefore:\r\nEvaluation average 487367tick + GC 64650tick = 552017tick\r\nEvaluation average 478148tick + GC 64545tick = 542694tick\r\nEvaluation average 478841tick + GC 64590tick = 543431tick\r\nEvaluation average 479940tick + GC 64787tick = 544728tick\r\nEvaluation average 494942tick + GC 66813tick = 561755tick\r\nEvaluation average 506728tick + GC 65485tick = 572214tick\r\nEvaluation average 498566tick + GC 65650tick = 564217tick\r\nEvaluation average 500238tick + GC 65723tick = 565961tick\r\nEvaluation average 497829tick + GC 65577tick = 563406tick\r\n\r\n~~Evaluation average 551038tick + GC 67453tick = 618491tick~~\r\n~~Evaluation average 549966tick + GC 67914tick = 617881tick~~\r\n~~Evaluation average 546807tick + GC 67633tick = 614440tick~~\r\n~~Evaluation average 554436tick + GC 68152tick = 622589tick~~\r\n~~Evaluation average 547378tick + GC 66956tick = 614335tick~~\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2021-10-22T00:31:07Z",
  "updatedAt": "2021-12-14T20:49:20Z",
  "closedAt": "2021-12-14T20:49:20Z",
  "mergedAt": null,
  "additions": 307,
  "deletions": 264,
  "changedFiles": 41,
  "headRefName": "main",
  "isDraft": true,
  "author": {
    "login": "yuehuang010"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6c831ecb8e1ee16ea3dd2051ca3fcba8a5bc3384",
          "message": "Micro perf improvements",
          "committedDate": "2021-10-11T21:00:50Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d8f477c7d75543e0cfb43b9eb65b4377824fd2cc",
          "message": "Remove comment",
          "committedDate": "2021-10-11T22:53:43Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1f66e251f6e4db01f9a2a2f900ae1078626a5539",
          "message": "Fix tests",
          "committedDate": "2021-10-12T00:20:58Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2ea86c4262d89088774f0e19572ecaad0c29741a",
          "message": "Add back string null check.",
          "committedDate": "2021-10-12T19:31:49Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1e20d62c760f8834199aa136553e03e4c51ec8cb",
          "message": "use cached link instead of .Link",
          "committedDate": "2021-10-12T22:19:06Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d41fcde647e18ba39fb884c4c8abfc54f52fbee6",
          "message": "WIP Delay Creation of ElementLocation when not needed.",
          "committedDate": "2021-10-21T23:34:58Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fb1f7a0175acb25e1371a60e7a3549ba845e623c",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into main",
          "committedDate": "2021-10-21T23:53:46Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1c1797c030a17f77253497ae1232d93278d21992",
          "message": "Fix tests and clean up code.",
          "committedDate": "2021-10-25T21:04:51Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c1aaac4aad47a6ac01f896d4b396e8fe3a6c8fa1",
          "message": "Revert Xml change because span is not supported.",
          "committedDate": "2021-10-25T22:00:33Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fe6442c6dc7b811e21516531ba0258fbea782a3e",
          "message": "Remove unused get_Location()",
          "committedDate": "2021-10-25T23:52:41Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "81a99b267c09d3c5236e18baccd7a37bde54d53c",
          "message": "Clean up",
          "committedDate": "2021-10-26T00:12:18Z",
          "author": {
            "name": "Felix Huang",
            "email": "yuehuang@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Using the interface named \"IInternalLocation\" to expose the internal IElementLocation.  \"ILocation\" is a better name public name.  Thoughts?",
        "createdAt": "2021-10-25T21:27:17Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "@yuehuang010 I have reviewed this PR and I do not understand how are those changes improving perf or GC. \r\nIn current implementation `Location` object is always created when XML doc is parsed because it is only time when we know location of element in its file. Various `Location` properties getters almost never creates the Location object but returns reference to already created `Location` object instance. Passing reference to facade interface is not, IMHO, faster than passing reference to already existing (no Lazy creation here) `Location` object.\r\n\r\nOn the other hand, the presented performance measurement show improvements. Wonder what I am missing...\r\n\r\nWhat tooling did you use to collect this perf samples?",
        "createdAt": "2021-10-26T12:41:36Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "> @yuehuang010 I have reviewed this PR and I do not understand how are those changes improving perf or GC. In current implementation `Location` object is always created when XML doc is parsed because it is only time when we know location of element in its file. Various `Location` properties getters almost never creates the Location object but returns reference to already created `Location` object instance. Passing reference to facade interface is not, IMHO, faster than passing reference to already existing (no Lazy creation here) `Location` object.\r\n\r\nBefore, XML object -> get_Location -> Verify.  After, XML object -> Verify -> get_Location.  Verify only needs location when it prints a message.  In most use case, it doesn't need it.\r\n\r\n> On the other hand, the presented performance measurement show improvements. Wonder what I am missing...\r\n> \r\n> What tooling did you use to collect this perf samples?\r\n\r\nUpdated description on perf collection methods.\r\n",
        "createdAt": "2021-10-26T19:30:39Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "I have looked at the code again and to me situation looks like this:\r\nbefore: XML Object -> Creates Location object in ctor -> get_Location; gets already created and cached object -> Verfiy\r\nafter: XML Object -> Creates Location object in ctor -> Verfiy -> conditionally invokes IInternalLocation.get_Location which returns the same object already constructed in XML Object ctor\r\n\r\nSo the amount of Location object allocations is same in both cases - if I understand it correctly, there is no lazy Location object creation.",
        "createdAt": "2021-10-28T17:46:35Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Good call. I found an issue. In my case, the XmlElementWithLocation.OwnerDocument.FullPath is null, so it never match with current location, thus it will always create a new copy of ElementLocation. Let me re-run baseline.",
        "createdAt": "2021-10-28T19:46:40Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "Drafted this PR and created #6998 for address the null check. @rokonec ",
        "createdAt": "2021-10-28T20:52:25Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "Team triage:\r\nIt seems like we spend virtually no time allocating memory for locations (which are pretty small), and with the other bug you fixed, do we still need this?",
        "createdAt": "2021-11-01T15:30:02Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind, I have moved this pr back to draft.  Don't like draft, feel free to close it.",
        "createdAt": "2021-11-03T19:07:00Z",
        "author": {
          "login": "yuehuang010"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}