{
  "number": 7344,
  "title": "Clean up of hashset",
  "body": "Initial work on #7340\r\n\r\nFirst changes are about making it easier to diff between CORE and MSBuild.\r\n\r\nImported changes to HashHelpers from CORE.\r\n\r\nStill working on merging changes from CORE to RetrievableEntryHashSet.",
  "state": "CLOSED",
  "createdAt": "2022-01-27T21:53:13Z",
  "updatedAt": "2022-08-06T12:20:23Z",
  "closedAt": "2022-08-06T12:20:23Z",
  "mergedAt": null,
  "additions": 142,
  "deletions": 939,
  "changedFiles": 4,
  "headRefName": "cleanup-hashset",
  "isDraft": true,
  "author": {
    "login": "elachlan"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1b41bd758f537bb3d33eed09928e9e8247f3a67e",
          "message": "initial clean up of hashset",
          "committedDate": "2022-01-27T21:48:59Z",
          "author": {
            "name": "elachlan",
            "email": "2433737+elachlan@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> I haven't figured out the point of the changes to HashHelpers and HashHelpers.SerializationInfoTable.cs\u2014is there a specific bug you were trying to resolve? The changes to HashSet looked much more cleanup-oriented.\r\n\r\nThe Helper changes are to get in line with CORE. They added the SerializationInfoTable back in 2020 to help with serialization.\r\n\r\nThe changes to Hashset are to reduce the effort of a diff.",
        "createdAt": "2022-01-28T23:20:01Z",
        "author": {
          "login": "elachlan"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Where do we use this other than making sure we don't pick an almost-multiple of it?",
              "createdAt": "2022-01-28T23:05:21Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashHelpers.cs",
              "diffHunk": "@@ -16,8 +17,15 @@ namespace Microsoft.Build.Collections\n     /// <summary>\n     /// Duplicated because internal to mscorlib\n     /// </summary>\n-    internal static class HashHelpers\n+    internal static partial class HashHelpers\n     {\n+        public const uint HashCollisionThreshold = 100;\n+\n+        // This is the maximum prime smaller than Array.MaxArrayLength\n+        internal const int MaxPrimeArrayLength = 0x7FEFFFFD;\n+\n+        public const int HashPrime = 101;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Note that in some cases, this foreach loop is marginally slower. Should be converted to the other form by the compiler in this case.",
              "createdAt": "2022-01-28T23:05:47Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashHelpers.cs",
              "diffHunk": "@@ -60,23 +68,23 @@ internal static int GetPrime(int min)\n         {\n             Debug.Assert(min >= 0, \"min less than zero; handle overflow checking before calling HashHelpers\");\n \n-            for (int i = 0; i < primes.Length; i++)\n+            foreach (int prime in primes)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "@danmoseley I pulled this from Core. Should I put in a PR to convert it to a for loop there or was it done like this on purpose?",
              "createdAt": "2022-01-28T23:22:44Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashHelpers.cs",
              "diffHunk": "@@ -60,23 +68,23 @@ internal static int GetPrime(int min)\n         {\n             Debug.Assert(min >= 0, \"min less than zero; handle overflow checking before calling HashHelpers\");\n \n-            for (int i = 0; i < primes.Length; i++)\n+            foreach (int prime in primes)",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "[Not for arrays](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA+ABATARgLABQGAzAATakDCpA3oaQ+WRiqQLIAUAlgHYAuAbQC6pBAGcAlLXqNZAM2gwAhmAAWpDgDclUUaV6jJtAL4yGpgsaA==) @Forgind.\r\n\r\nEdit: unless that's what you meant to say.",
              "createdAt": "2022-01-29T00:37:23Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashHelpers.cs",
              "diffHunk": "@@ -60,23 +68,23 @@ internal static int GetPrime(int min)\n         {\n             Debug.Assert(min >= 0, \"min less than zero; handle overflow checking before calling HashHelpers\");\n \n-            for (int i = 0; i < primes.Length; i++)\n+            foreach (int prime in primes)",
              "author": {
                "login": "teo-tsirpanis"
              }
            },
            {
              "body": "Yep! That's what I meant by \"should be converted...\" but thanks for the check!",
              "createdAt": "2022-01-29T01:03:56Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashHelpers.cs",
              "diffHunk": "@@ -60,23 +68,23 @@ internal static int GetPrime(int min)\n         {\n             Debug.Assert(min >= 0, \"min less than zero; handle overflow checking before calling HashHelpers\");\n \n-            for (int i = 0; i < primes.Length; i++)\n+            foreach (int prime in primes)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Although I do think this is cleaner, adding the #ifs makes it very not worth it to me.",
              "createdAt": "2022-01-28T23:09:06Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -275,32 +263,31 @@ public void Clear()\n                 Debug.Assert(_buckets != null, \"m_buckets was null but m_lastIndex > 0\");\n \n                 // clear the elements so that the gc can reclaim the references.\n-                // clear only up to m_lastIndex for m_slots \n+                // clear only up to m_lastIndex for m_slots\n                 Array.Clear(_slots, 0, _lastIndex);\n+#if NET6_0_OR_GREATER\n+                Array.Clear(_buckets);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This might have been done because of a slight codegen improvement. (?)",
              "createdAt": "2022-01-29T01:24:06Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -275,32 +263,31 @@ public void Clear()\n                 Debug.Assert(_buckets != null, \"m_buckets was null but m_lastIndex > 0\");\n \n                 // clear the elements so that the gc can reclaim the references.\n-                // clear only up to m_lastIndex for m_slots \n+                // clear only up to m_lastIndex for m_slots\n                 Array.Clear(_slots, 0, _lastIndex);\n+#if NET6_0_OR_GREATER\n+                Array.Clear(_buckets);",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "The reason I used it was because CORE used it. When I checked the source code for it, it was a lot more simple. So it should run faster.",
              "createdAt": "2022-01-29T01:26:37Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashSet.cs",
              "diffHunk": "@@ -275,32 +263,31 @@ public void Clear()\n                 Debug.Assert(_buckets != null, \"m_buckets was null but m_lastIndex > 0\");\n \n                 // clear the elements so that the gc can reclaim the references.\n-                // clear only up to m_lastIndex for m_slots \n+                // clear only up to m_lastIndex for m_slots\n                 Array.Clear(_slots, 0, _lastIndex);\n+#if NET6_0_OR_GREATER\n+                Array.Clear(_buckets);",
              "author": {
                "login": "elachlan"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I can't review the other code at the moment but if MSBuild uses BinarySerializer it will need to stop doing so per the published deprecation plan. If it does not then this code should be dead.",
              "createdAt": "2022-01-29T01:25:30Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashHelpers.SerializationInfoTable.cs",
              "diffHunk": "@@ -0,0 +1,28 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+// Used by Hashtable and Dictionary's SeralizationInfo .ctor's to store the SeralizationInfo\n+// object until OnDeserialization is called.\n+\n+using System.Threading;\n+using System.Runtime.CompilerServices;\n+using System.Runtime.Serialization;\n+\n+namespace Microsoft.Build.Collections\n+{\n+    internal static partial class HashHelpers\n+    {\n+        private static ConditionalWeakTable<object, SerializationInfo>? s_serializationInfoTable;\n+\n+        public static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "We've mostly moved off of it. GenerateResource might need to continue to support it even after the runtime doesn't because it's one of the options we provide. We also haven't fully fixed BinaryTranslator.TranslateDotNet, and I agree we should get back to that when we can. Canonical issue: #6215",
              "createdAt": "2022-01-29T01:33:29Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashHelpers.SerializationInfoTable.cs",
              "diffHunk": "@@ -0,0 +1,28 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+// Used by Hashtable and Dictionary's SeralizationInfo .ctor's to store the SeralizationInfo\n+// object until OnDeserialization is called.\n+\n+using System.Threading;\n+using System.Runtime.CompilerServices;\n+using System.Runtime.Serialization;\n+\n+namespace Microsoft.Build.Collections\n+{\n+    internal static partial class HashHelpers\n+    {\n+        private static ConditionalWeakTable<object, SerializationInfo>? s_serializationInfoTable;\n+\n+        public static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "SerializationInfoTable is copied from CORE. It exists in core right now afaik.",
              "createdAt": "2022-01-29T06:12:40Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashHelpers.SerializationInfoTable.cs",
              "diffHunk": "@@ -0,0 +1,28 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+// Used by Hashtable and Dictionary's SeralizationInfo .ctor's to store the SeralizationInfo\n+// object until OnDeserialization is called.\n+\n+using System.Threading;\n+using System.Runtime.CompilerServices;\n+using System.Runtime.Serialization;\n+\n+namespace Microsoft.Build.Collections\n+{\n+    internal static partial class HashHelpers\n+    {\n+        private static ConditionalWeakTable<object, SerializationInfo>? s_serializationInfoTable;\n+\n+        public static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable",
              "author": {
                "login": "elachlan"
              }
            },
            {
              "body": "Right, for anyone using BinarySerializer. It's only needed here if MSBuild uses that on these objects. If not then the type does not need to implement ISerializable at all",
              "createdAt": "2022-01-29T13:59:52Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashHelpers.SerializationInfoTable.cs",
              "diffHunk": "@@ -0,0 +1,28 @@\n+// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+// Used by Hashtable and Dictionary's SeralizationInfo .ctor's to store the SeralizationInfo\n+// object until OnDeserialization is called.\n+\n+using System.Threading;\n+using System.Runtime.CompilerServices;\n+using System.Runtime.Serialization;\n+\n+namespace Microsoft.Build.Collections\n+{\n+    internal static partial class HashHelpers\n+    {\n+        private static ConditionalWeakTable<object, SerializationInfo>? s_serializationInfoTable;\n+\n+        public static ConditionalWeakTable<object, SerializationInfo> SerializationInfoTable",
              "author": {
                "login": "danmoseley"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Might need a third party notices entry added. You could check the original PR that added this",
              "createdAt": "2022-01-29T01:26:38Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashHelpers.cs",
              "diffHunk": "@@ -92,15 +100,35 @@ internal static int ExpandPrime(int oldSize)\n \n             // Allow the hashtables to grow to maximum possible size (~2G elements) before encoutering capacity overflow.\n             // Note that this check works even when _items.Length overflowed thanks to the (uint) cast\n-            if ((uint) newSize > MaxPrimeArrayLength)\n+            if ((uint)newSize > MaxPrimeArrayLength && MaxPrimeArrayLength > oldSize)\n             {\n+                Debug.Assert(MaxPrimeArrayLength == GetPrime(MaxPrimeArrayLength), \"Invalid MaxPrimeArrayLength\");\n                 return MaxPrimeArrayLength;\n             }\n \n             return GetPrime(newSize);\n         }\n \n-        // This is the maximum prime smaller than Array.MaxArrayLength\n-        internal const int MaxPrimeArrayLength = 0x7FEFFFFD;\n+        /// <summary>Returns approximate reciprocal of the divisor: ceil(2**64 / divisor).</summary>\n+        /// <remarks>This should only be used on 64-bit.</remarks>\n+        public static ulong GetFastModMultiplier(uint divisor) =>\n+            ulong.MaxValue / divisor + 1;\n+\n+        /// <summary>Performs a mod operation using the multiplier pre-computed with <see cref=\"GetFastModMultiplier\"/>.</summary>\n+        /// <remarks>This should only be used on 64-bit.</remarks>\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static uint FastMod(uint value, uint divisor, ulong multiplier)\n+        {\n+            // We use modified Daniel Lemire's fastmod algorithm (https://github.com/dotnet/runtime/pull/406),",
              "author": {
                "login": "danmoseley"
              }
            },
            {
              "body": "specifically this: https://github.com/dotnet/runtime/blob/442a42147ef23c3b9742abcd8b997e8f472af68a/THIRD-PARTY-NOTICES.TXT#L683-L698",
              "createdAt": "2022-02-08T01:40:38Z",
              "path": "src/Build/Collections/RetrievableEntryHashSet/HashHelpers.cs",
              "diffHunk": "@@ -92,15 +100,35 @@ internal static int ExpandPrime(int oldSize)\n \n             // Allow the hashtables to grow to maximum possible size (~2G elements) before encoutering capacity overflow.\n             // Note that this check works even when _items.Length overflowed thanks to the (uint) cast\n-            if ((uint) newSize > MaxPrimeArrayLength)\n+            if ((uint)newSize > MaxPrimeArrayLength && MaxPrimeArrayLength > oldSize)\n             {\n+                Debug.Assert(MaxPrimeArrayLength == GetPrime(MaxPrimeArrayLength), \"Invalid MaxPrimeArrayLength\");\n                 return MaxPrimeArrayLength;\n             }\n \n             return GetPrime(newSize);\n         }\n \n-        // This is the maximum prime smaller than Array.MaxArrayLength\n-        internal const int MaxPrimeArrayLength = 0x7FEFFFFD;\n+        /// <summary>Returns approximate reciprocal of the divisor: ceil(2**64 / divisor).</summary>\n+        /// <remarks>This should only be used on 64-bit.</remarks>\n+        public static ulong GetFastModMultiplier(uint divisor) =>\n+            ulong.MaxValue / divisor + 1;\n+\n+        /// <summary>Performs a mod operation using the multiplier pre-computed with <see cref=\"GetFastModMultiplier\"/>.</summary>\n+        /// <remarks>This should only be used on 64-bit.</remarks>\n+        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n+        public static uint FastMod(uint value, uint divisor, ulong multiplier)\n+        {\n+            // We use modified Daniel Lemire's fastmod algorithm (https://github.com/dotnet/runtime/pull/406),",
              "author": {
                "login": "danmoseley"
              }
            }
          ]
        }
      }
    ]
  }
}