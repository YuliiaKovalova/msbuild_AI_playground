{
  "number": 6243,
  "title": "Fix rar cache incompatibility warning message (#6242)",
  "body": "Fixes #6242\r\n\r\n### Context\r\nImplementing new binary format of RAR cache can clash between MSBuild versions when version in IDE differs to version used for build from command line.\r\n\r\n### Changes Made\r\n- Lower verbosity of 'MSB3088: Could not read state file' message\r\n- Change default naming schema of RAR cache",
  "state": "MERGED",
  "createdAt": "2021-03-11T08:53:50Z",
  "updatedAt": "2021-04-01T13:37:29Z",
  "closedAt": "2021-03-12T17:50:28Z",
  "mergedAt": "2021-03-12T17:50:27Z",
  "additions": 44,
  "deletions": 8,
  "changedFiles": 5,
  "headRefName": "rokonec/fix-rar-cache-incompatibility-warning-message",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "f2b3a0cbaa19d08f046772b210b627242a27447e",
          "message": "Lower severity of 'Could not read state file' message",
          "committedDate": "2021-03-11T08:49:57Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f3f7eb23dde297f248422d1955f2bf66a1e27957",
          "message": "Change default name scheme of RAR cache file",
          "committedDate": "2021-03-11T08:50:30Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5f800e78e4dbe2e1acd07c865fba104ea88a1a97",
          "message": "Fix unit test related to state file error messages",
          "committedDate": "2021-03-11T11:05:25Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7e2d56f504c9a1814aa4a8e165cbb41eedf483cb",
          "message": "Fix unit tests",
          "committedDate": "2021-03-11T12:50:44Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "568e0d8f51f82f84b5cc0da09cd60025a267116d",
          "message": "Update cache name",
          "committedDate": "2021-03-11T20:59:42Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d6c951f5672d9e1f33b666d24af534b9429798f0",
          "message": "Fix unit test to be current culture agnostic",
          "committedDate": "2021-03-12T10:49:37Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dd512333d567a739163306df53eadf592d32b48e",
          "message": "Delete forgotten test line",
          "committedDate": "2021-03-12T12:51:17Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2a9fc4f4a84a1a4a5d16acd2ea94ddb2f1be5e5f",
          "message": "Using regex to match resource string",
          "committedDate": "2021-03-12T12:51:49Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "What made you go for the cache file name change? Is the scenario of building with multiple versions of MSBuild that important? Are previous versions issuing a warning when they can't read the file?\r\n\r\nAlso, looks like there's a typo in the PR title.",
        "createdAt": "2021-03-11T09:00:05Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@ladipro name change was to support rare cases of msbuild mismatch. If i understand it correctly, caused mostly by different version of msbuild in IDE (both VS Code and VS) used for design time builds and msbuild used for compile. VS Code has it worse, IIRC, as it always uses 'dotnet build' to build but msbuild included in VS Code extension for design time builds.",
        "createdAt": "2021-03-11T09:29:20Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Thank you. So if we change the default name because we know it would be fairly common for different versions of MSBuild to be overwriting each other's cache file, should the warning still be a warning? I am not opposing either change but I'm not sure if making both of them makes sense.",
        "createdAt": "2021-03-11T11:54:31Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Lowering severity of messages will unblock some builds which 'consider warnings as errors'. Rebuild would help but it might not be obvious to people. Also many CI builds use incremental building. This change is IMHO necessary.\r\n\r\nChanging name for new format will result in faster RAR execution of incremental builds in scenario where VS or VS Code design time builds overwrite it with different, old, version. This will have some perf benefit for users whom temporarily have mismatch of msbuild versions between IDE and command line. This is optional change - easily revertable in context of this PR. @Forgind please share with us your point of view.\r\n",
        "createdAt": "2021-03-11T14:51:43Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "I'll close #6241 as accomplishing the same task but without any discussion yet.\r\n\r\n> Are previous versions issuing a warning when they can't read the file?\r\n\r\nThis is a key point in my view. We can change what current MSBuild does when it discovers we already have a cache serialized via a different serialization method, but we can't affect a previous version of MSBuild. After issuing a warning, current MSBuild will proceed with looking for assemblies as normal, then overwrite the cache. That will mean the build from old MSBuild will always send a warning as long as the prior build was from the newer MSBuild. This is less serious than the reverse, but I wouldn't want to see warnings popping up the first time I do a DTB either.\r\n\r\nOne of you brought up that users might treat the current format as a contract and manipulate the cache in some way. With that in mind, I might suggest a smaller change for the cache name, like `$(IntermediateOutputPath)$(MSBuildProjectFile).AssemblyReference.cache` instead of `$(IntermediateOutputPath)$(MSBuildProjectFile)AssemblyReference.bin.cache`. (Notice the dot before AssemblyReference in the first case.) When I have written code to manipulate these caches, I tend to look for something that ends in AssemblyReference.cache, so such code would still work.\r\n\r\nI don't think perf is critical for a scenario that (hopefully) would be very ephemeral, but I do think it's worth considering for something that may last for several years. Some LTS versions are in support for several years and don't have the serialization change; anyone using one of those versions plus a non-LTS version would hit this.",
        "createdAt": "2021-03-11T15:56:04Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Implementing new binary format of RAR cache can clash between MSBuild versions when version in IDE differs to version used for build from command line.\r\n\r\nI'm not incredibly familiar with RAR, how often is this expected to change? If this is a format that may update in the future, should we consider having some $(RARBinaryFormatVersion) that gets appended to the filename instead of the constant `bin`.\r\n\r\nLowering the warning to a message mitigates this being much of an issue.",
        "createdAt": "2021-03-11T20:00:12Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos In future minor version in cache format, such as adding new field to serialized class, might be backward compatible. Currently cache file contain version of cache file binary contract and if does not matches cache is rejected. We could use the version to write backward compatible deserialization. However, I do not believe it will be worth the effort.",
        "createdAt": "2021-03-11T21:04:55Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Put another way, \"very infrequently.\" I don't think there was a serialization method before BinaryFormatter, and I doubt there will be one after our new custom implementation, at least for the next few decades.",
        "createdAt": "2021-03-11T21:40:52Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Ah, sorry, didn't notice that it's already merged. Feel free to ignore my latest comments.",
        "createdAt": "2021-03-12T20:24:50Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n      <ResolveAssemblyReferencesStateFile Condition=\"'$(DisableRarCache)'!='true' and '$(ResolveAssemblyReferencesStateFile)' == ''\">$(IntermediateOutputPath)$(MSBuildProjectFile).AssemblyReference.cache</ResolveAssemblyReferencesStateFile>\r\n```",
              "createdAt": "2021-03-11T20:59:02Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -2156,7 +2156,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n         expensive to write the newly created cache file.\n         -->\n     <PropertyGroup>\n-      <ResolveAssemblyReferencesStateFile Condition=\"'$(DisableRarCache)'!='true' and '$(ResolveAssemblyReferencesStateFile)' == ''\">$(IntermediateOutputPath)$(MSBuildProjectFile)AssemblyReference.cache</ResolveAssemblyReferencesStateFile>\n+      <ResolveAssemblyReferencesStateFile Condition=\"'$(DisableRarCache)'!='true' and '$(ResolveAssemblyReferencesStateFile)' == ''\">$(IntermediateOutputPath)$(MSBuildProjectFile)AssemblyReference.bin.cache</ResolveAssemblyReferencesStateFile>",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This will work for testing in English\u2014which means it should work for CI\u2014but I think it breaks if you try to run tests with it not in English because then the log contains the non-English equivalent. Could you change it to \"whatever General.CouldNotReadStateFileMessage says\"?",
              "createdAt": "2021-03-12T00:49:37Z",
              "path": "src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs",
              "diffHunk": "@@ -1942,7 +1942,7 @@ public void StateFileUnwritable()\n                 t.Execute();\n \n                 // \"cannot read state file (opening for read/write)\"\n-                Utilities.AssertLogContains(t, \"MSB3088\");\n+                Utilities.AssertLogContains(t, \"Could not read state file\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This is good point. Fixed. I had to create new helper UT method `Utilities.AssertLogContainsResourceWithUnspecifiedReplacements` becuase in this particular case mesage is formated with expection message argument, and having this as particular argument looks too fragile, to me.",
              "createdAt": "2021-03-12T10:59:13Z",
              "path": "src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs",
              "diffHunk": "@@ -1942,7 +1942,7 @@ public void StateFileUnwritable()\n                 t.Execute();\n \n                 // \"cannot read state file (opening for read/write)\"\n-                Utilities.AssertLogContains(t, \"MSB3088\");\n+                Utilities.AssertLogContains(t, \"Could not read state file\");",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Remove?",
              "createdAt": "2021-03-12T11:26:08Z",
              "path": "src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs",
              "diffHunk": "@@ -1942,7 +1943,8 @@ public void StateFileUnwritable()\n                 t.Execute();\n \n                 // \"cannot read state file (opening for read/write)\"\n-                Utilities.AssertLogContains(t, \"MSB3088\");\n+                var x = Thread.CurrentThread.CurrentUICulture;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Oops. Removed",
              "createdAt": "2021-03-12T12:30:28Z",
              "path": "src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs",
              "diffHunk": "@@ -1942,7 +1943,8 @@ public void StateFileUnwritable()\n                 t.Execute();\n \n                 // \"cannot read state file (opening for read/write)\"\n-                Utilities.AssertLogContains(t, \"MSB3088\");\n+                var x = Thread.CurrentThread.CurrentUICulture;",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Wondering if, instead of matching the parts between placeholders, you could transform the unformatted message to one regex, for example:\r\n\r\n```Error, {0} is broken.``` -> ```Error, .* is broken\\.``` and then do try to match the log against it.",
              "createdAt": "2021-03-12T11:39:08Z",
              "path": "src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs",
              "diffHunk": "@@ -3395,8 +3396,36 @@ public static void AssertLogContainsResource(GenerateResource t, string messageI\n         {\n             Assert.Contains(\n                 String.Format(AssemblyResources.GetString(messageID), replacements),\n-                ((MockEngine)t.BuildEngine).Log\n-                );\n+                ((MockEngine) t.BuildEngine).Log\n+            );\n+        }\n+\n+        /// <summary>\n+        /// Looks for a formatted message in the output log for the task execution, with unknown formatted parameters.\n+        /// If verifies that all constant segments of unformatted message are present.\n+        /// </summary>\n+        public static void AssertLogContainsResourceWithUnspecifiedReplacements(GenerateResource t, string messageID)\n+        {\n+            var unformattedMessage = AssemblyResources.GetString(messageID);\n+            var matches = Regex.Matches(unformattedMessage, @\"\\{\\d+.*?\\}\");",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Reworked",
              "createdAt": "2021-03-12T13:06:49Z",
              "path": "src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs",
              "diffHunk": "@@ -3395,8 +3396,36 @@ public static void AssertLogContainsResource(GenerateResource t, string messageI\n         {\n             Assert.Contains(\n                 String.Format(AssemblyResources.GetString(messageID), replacements),\n-                ((MockEngine)t.BuildEngine).Log\n-                );\n+                ((MockEngine) t.BuildEngine).Log\n+            );\n+        }\n+\n+        /// <summary>\n+        /// Looks for a formatted message in the output log for the task execution, with unknown formatted parameters.\n+        /// If verifies that all constant segments of unformatted message are present.\n+        /// </summary>\n+        public static void AssertLogContainsResourceWithUnspecifiedReplacements(GenerateResource t, string messageID)\n+        {\n+            var unformattedMessage = AssemblyResources.GetString(messageID);\n+            var matches = Regex.Matches(unformattedMessage, @\"\\{\\d+.*?\\}\");",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I would probably still go with a single regex as it's so much simpler.\r\n\r\n```C#\r\nstring messageRegex = Regex.Replace(Regex.Escape(unformattedMessage), \"\\\\\\\\\\\\{\\\\d+\\\\}\", \".*\");\r\n```\r\n\r\nand then just match log against this.\r\n\r\nWorking code in https://dotnetfiddle.net/fN7HNz",
              "createdAt": "2021-03-12T20:22:11Z",
              "path": "src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs",
              "diffHunk": "@@ -3395,8 +3396,36 @@ public static void AssertLogContainsResource(GenerateResource t, string messageI\n         {\n             Assert.Contains(\n                 String.Format(AssemblyResources.GetString(messageID), replacements),\n-                ((MockEngine)t.BuildEngine).Log\n-                );\n+                ((MockEngine) t.BuildEngine).Log\n+            );\n+        }\n+\n+        /// <summary>\n+        /// Looks for a formatted message in the output log for the task execution, with unknown formatted parameters.\n+        /// If verifies that all constant segments of unformatted message are present.\n+        /// </summary>\n+        public static void AssertLogContainsResourceWithUnspecifiedReplacements(GenerateResource t, string messageID)\n+        {\n+            var unformattedMessage = AssemblyResources.GetString(messageID);\n+            var matches = Regex.Matches(unformattedMessage, @\"\\{\\d+.*?\\}\");",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Shouldn't you run `Assert.Contains` on the part after the last placeholder here? Hope I'm not misunderstanding. In general, I would expect to see N+1 asserts where N is the number of placeholders.",
              "createdAt": "2021-03-12T11:40:47Z",
              "path": "src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs",
              "diffHunk": "@@ -3395,8 +3396,36 @@ public static void AssertLogContainsResource(GenerateResource t, string messageI\n         {\n             Assert.Contains(\n                 String.Format(AssemblyResources.GetString(messageID), replacements),\n-                ((MockEngine)t.BuildEngine).Log\n-                );\n+                ((MockEngine) t.BuildEngine).Log\n+            );\n+        }\n+\n+        /// <summary>\n+        /// Looks for a formatted message in the output log for the task execution, with unknown formatted parameters.\n+        /// If verifies that all constant segments of unformatted message are present.\n+        /// </summary>\n+        public static void AssertLogContainsResourceWithUnspecifiedReplacements(GenerateResource t, string messageID)\n+        {\n+            var unformattedMessage = AssemblyResources.GetString(messageID);\n+            var matches = Regex.Matches(unformattedMessage, @\"\\{\\d+.*?\\}\");\n+            if (matches.Count > 0)\n+            {\n+                int i = 0;\n+                foreach (Match match in matches)\n+                {\n+                    string segment = unformattedMessage.Substring(i, match.Index - i);\n+                    if (segment.Length > 0)\n+                    {\n+                        Assert.Contains(segment, ((MockEngine)t.BuildEngine).Log);\n+                    }\n+\n+                    i = match.Index + match.Length;\n+                }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm not sure if there's a Shouldly equivalent of this, but it would be nice if there is.",
              "createdAt": "2021-03-12T14:34:40Z",
              "path": "src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs",
              "diffHunk": "@@ -3395,8 +3396,42 @@ public static void AssertLogContainsResource(GenerateResource t, string messageI\n         {\n             Assert.Contains(\n                 String.Format(AssemblyResources.GetString(messageID), replacements),\n-                ((MockEngine)t.BuildEngine).Log\n-                );\n+                ((MockEngine) t.BuildEngine).Log\n+            );\n+        }\n+\n+        /// <summary>\n+        /// Looks for a formatted message in the output log for the task execution, with unknown formatted parameters.\n+        /// If verifies that all constant segments of unformatted message are present.\n+        /// </summary>\n+        public static void AssertLogContainsResourceWithUnspecifiedReplacements(GenerateResource t, string messageID)\n+        {\n+            var unformattedMessage = AssemblyResources.GetString(messageID);\n+            var matches = Regex.Matches(unformattedMessage, @\"\\{\\d+.*?\\}\");\n+            if (matches.Count > 0)\n+            {\n+                var sb = new StringBuilder();\n+                int i = 0;\n+\n+                foreach (Match match in matches)\n+                {\n+                    string segment = unformattedMessage.Substring(i, match.Index - i);\n+                    sb.Append(Regex.Escape(segment));\n+                    sb.Append(\".*\");\n+\n+                    i = match.Index + match.Length;\n+                }\n+                if (i < unformattedMessage.Length)\n+                {\n+                    sb.Append(Regex.Escape(unformattedMessage.Substring(i)));\n+                }\n+\n+                Assert.Matches(sb.ToString(), ((MockEngine)t.BuildEngine).Log);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I wanted to keep it consistent with rest of similar methods. Having Utility method named Assert* which uses ShouldLy is confusing to me. If this is to be changed this Utility methods shall be reworked into ShouldLy naming standards in different PR.",
              "createdAt": "2021-03-12T15:52:54Z",
              "path": "src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs",
              "diffHunk": "@@ -3395,8 +3396,42 @@ public static void AssertLogContainsResource(GenerateResource t, string messageI\n         {\n             Assert.Contains(\n                 String.Format(AssemblyResources.GetString(messageID), replacements),\n-                ((MockEngine)t.BuildEngine).Log\n-                );\n+                ((MockEngine) t.BuildEngine).Log\n+            );\n+        }\n+\n+        /// <summary>\n+        /// Looks for a formatted message in the output log for the task execution, with unknown formatted parameters.\n+        /// If verifies that all constant segments of unformatted message are present.\n+        /// </summary>\n+        public static void AssertLogContainsResourceWithUnspecifiedReplacements(GenerateResource t, string messageID)\n+        {\n+            var unformattedMessage = AssemblyResources.GetString(messageID);\n+            var matches = Regex.Matches(unformattedMessage, @\"\\{\\d+.*?\\}\");\n+            if (matches.Count > 0)\n+            {\n+                var sb = new StringBuilder();\n+                int i = 0;\n+\n+                foreach (Match match in matches)\n+                {\n+                    string segment = unformattedMessage.Substring(i, match.Index - i);\n+                    sb.Append(Regex.Escape(segment));\n+                    sb.Append(\".*\");\n+\n+                    i = match.Index + match.Length;\n+                }\n+                if (i < unformattedMessage.Length)\n+                {\n+                    sb.Append(Regex.Escape(unformattedMessage.Substring(i)));\n+                }\n+\n+                Assert.Matches(sb.ToString(), ((MockEngine)t.BuildEngine).Log);",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "That's ok. I would argue that, unlike most code, the main way we would \"look\" at it is through the messages that come out, i.e., x should be y versus x and y should be equal. The former is clearer, but it isn't a huge deal.",
              "createdAt": "2021-03-12T16:27:36Z",
              "path": "src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs",
              "diffHunk": "@@ -3395,8 +3396,42 @@ public static void AssertLogContainsResource(GenerateResource t, string messageI\n         {\n             Assert.Contains(\n                 String.Format(AssemblyResources.GetString(messageID), replacements),\n-                ((MockEngine)t.BuildEngine).Log\n-                );\n+                ((MockEngine) t.BuildEngine).Log\n+            );\n+        }\n+\n+        /// <summary>\n+        /// Looks for a formatted message in the output log for the task execution, with unknown formatted parameters.\n+        /// If verifies that all constant segments of unformatted message are present.\n+        /// </summary>\n+        public static void AssertLogContainsResourceWithUnspecifiedReplacements(GenerateResource t, string messageID)\n+        {\n+            var unformattedMessage = AssemblyResources.GetString(messageID);\n+            var matches = Regex.Matches(unformattedMessage, @\"\\{\\d+.*?\\}\");\n+            if (matches.Count > 0)\n+            {\n+                var sb = new StringBuilder();\n+                int i = 0;\n+\n+                foreach (Match match in matches)\n+                {\n+                    string segment = unformattedMessage.Substring(i, match.Index - i);\n+                    sb.Append(Regex.Escape(segment));\n+                    sb.Append(\".*\");\n+\n+                    i = match.Index + match.Length;\n+                }\n+                if (i < unformattedMessage.Length)\n+                {\n+                    sb.Append(Regex.Escape(unformattedMessage.Substring(i)));\n+                }\n+\n+                Assert.Matches(sb.ToString(), ((MockEngine)t.BuildEngine).Log);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: This looks unused.",
              "createdAt": "2021-03-12T20:10:12Z",
              "path": "src/Tasks.UnitTests/ResourceHandling/GenerateResourceOutOfProc_Tests.cs",
              "diffHunk": "@@ -10,6 +10,7 @@\n using Xunit;\n using Xunit.Abstractions;\n using System.IO;\n+using System.Threading;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}