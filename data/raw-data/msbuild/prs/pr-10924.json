{
  "number": 10924,
  "title": "Add message codes for BuildCheck suggestion diags",
  "body": "Fixes #10501\r\n\r\n### Context\r\n\r\nBuildCheck suggestions didn't have the codes and formatting of warnings and errors.\r\n\r\n\r\n### Changes Made\r\n\r\nUnified the diagnostics creation code\r\n",
  "state": "MERGED",
  "createdAt": "2024-11-01T15:27:35Z",
  "updatedAt": "2024-11-21T09:15:58Z",
  "closedAt": "2024-11-18T10:50:32Z",
  "mergedAt": "2024-11-18T10:50:32Z",
  "additions": 44,
  "deletions": 49,
  "changedFiles": 7,
  "headRefName": "proto/buildcheck-message-code",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "86f02569206a290247f5bdaa0d0fea896bf41bb4",
          "message": "Add message codes for BuildCheck suggestion diags",
          "committedDate": "2024-11-01T15:26:35Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a84184cc222914697fb0f2a4be0a342d9be8328c",
          "message": "Fix writing and add targeted test",
          "committedDate": "2024-11-04T14:56:37Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "02e578004707b6285d884202fdb923efe7ed26a9",
          "message": "Merge branch 'main' into proto/buildcheck-message-code",
          "committedDate": "2024-11-08T14:53:41Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Will this changes need to be reflected on the binlog viewer too? I know the process of adding to it but not when we're removing something.\r\n\r\nGood question.\r\n\r\ntl;dr;: it's fine here :-)\r\n\r\nIn this specific case we are not removing any data definition - the binlog OM stays same.\r\nWe are removing couple methods writing a specific types of data to the binlog - 2 of them were already dead (writing BuildCheck error/warning) and the third was used - but there was no reason for differentiating BuildCheck message in a binlog, while BuildCheck error nor warnings were differentiated.",
        "createdAt": "2024-11-08T10:20:23Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "is _ArgumentNullException_ more intuitive?",
              "createdAt": "2024-11-18T12:57:05Z",
              "path": "src/Build/BuildCheck/API/BuildCheckResult.cs",
              "diffHunk": "@@ -29,13 +29,15 @@ internal BuildEventArgs ToEventArgs(CheckResultSeverity severity)\n         => severity switch\n         {\n             CheckResultSeverity.Suggestion => new BuildCheckResultMessage(this),\n-            CheckResultSeverity.Warning => new BuildCheckResultWarning(this, CheckRule.Id),\n-            CheckResultSeverity.Error => new BuildCheckResultError(this, CheckRule.Id),\n+            CheckResultSeverity.Warning => new BuildCheckResultWarning(this),\n+            CheckResultSeverity.Error => new BuildCheckResultError(this),\n             _ => throw new ArgumentOutOfRangeException(nameof(severity), severity, null),",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "`ArgumentOutOfRangeException` is the right choice here\r\nhttps://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/switch-expression",
              "createdAt": "2024-11-21T09:12:56Z",
              "path": "src/Build/BuildCheck/API/BuildCheckResult.cs",
              "diffHunk": "@@ -29,13 +29,15 @@ internal BuildEventArgs ToEventArgs(CheckResultSeverity severity)\n         => severity switch\n         {\n             CheckResultSeverity.Suggestion => new BuildCheckResultMessage(this),\n-            CheckResultSeverity.Warning => new BuildCheckResultWarning(this, CheckRule.Id),\n-            CheckResultSeverity.Error => new BuildCheckResultError(this, CheckRule.Id),\n+            CheckResultSeverity.Warning => new BuildCheckResultWarning(this),\n+            CheckResultSeverity.Error => new BuildCheckResultError(this),\n             _ => throw new ArgumentOutOfRangeException(nameof(severity), severity, null),",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "what if code is null?",
              "createdAt": "2024-11-18T12:59:03Z",
              "path": "src/Framework/BuildMessageEventArgs.cs",
              "diffHunk": "@@ -109,6 +109,28 @@ public BuildMessageEventArgs(\n             // do nothing\n         }\n \n+        /// <summary>\n+        /// This constructor allows event data without ends to be initialized.\n+        /// </summary>\n+        /// <param name=\"code\">event code</param>\n+        /// <param name=\"file\">file associated with the event</param>\n+        /// <param name=\"lineNumber\">line number (0 if not applicable)</param>\n+        /// <param name=\"columnNumber\">column number (0 if not applicable)</param>\n+        /// <param name=\"message\">text message</param>\n+        protected BuildMessageEventArgs(\n+            string code,\n+            string message,\n+            string file,\n+            int lineNumber,\n+            int columnNumber)\n+            : base(message, helpKeyword: null, senderName: null)\n+        {\n+            this.code = code;",
              "author": {
                "login": "donJoseLuis"
              }
            },
            {
              "body": "It's a legit situation. Then `code` member field will be null - same as if different constructor, that doesn't initialize it, would be called",
              "createdAt": "2024-11-21T09:15:58Z",
              "path": "src/Framework/BuildMessageEventArgs.cs",
              "diffHunk": "@@ -109,6 +109,28 @@ public BuildMessageEventArgs(\n             // do nothing\n         }\n \n+        /// <summary>\n+        /// This constructor allows event data without ends to be initialized.\n+        /// </summary>\n+        /// <param name=\"code\">event code</param>\n+        /// <param name=\"file\">file associated with the event</param>\n+        /// <param name=\"lineNumber\">line number (0 if not applicable)</param>\n+        /// <param name=\"columnNumber\">column number (0 if not applicable)</param>\n+        /// <param name=\"message\">text message</param>\n+        protected BuildMessageEventArgs(\n+            string code,\n+            string message,\n+            string file,\n+            int lineNumber,\n+            int columnNumber)\n+            : base(message, helpKeyword: null, senderName: null)\n+        {\n+            this.code = code;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "are there invalid ranges for either line or column numbers?",
              "createdAt": "2024-11-18T12:59:46Z",
              "path": "src/Framework/BuildMessageEventArgs.cs",
              "diffHunk": "@@ -109,6 +109,28 @@ public BuildMessageEventArgs(\n             // do nothing\n         }\n \n+        /// <summary>\n+        /// This constructor allows event data without ends to be initialized.\n+        /// </summary>\n+        /// <param name=\"code\">event code</param>\n+        /// <param name=\"file\">file associated with the event</param>\n+        /// <param name=\"lineNumber\">line number (0 if not applicable)</param>\n+        /// <param name=\"columnNumber\">column number (0 if not applicable)</param>\n+        /// <param name=\"message\">text message</param>\n+        protected BuildMessageEventArgs(\n+            string code,\n+            string message,\n+            string file,\n+            int lineNumber,\n+            int columnNumber)\n+            : base(message, helpKeyword: null, senderName: null)\n+        {\n+            this.code = code;\n+            this.file = file;\n+            this.lineNumber = lineNumber;",
              "author": {
                "login": "donJoseLuis"
              }
            }
          ]
        }
      }
    ]
  }
}