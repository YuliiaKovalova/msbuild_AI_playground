{
  "number": 8733,
  "title": "Acceptance tests for TerminalLogger",
  "body": "Convert LiveLogger tests to use Verify\n    \n* Bump Xunit version to one compatible with Verify 19.14.1\n* Remove MockTerminal in favor of internal fields on Terminal itself.\n* Reference Verify library for acceptance testing.\n* Convert existing tests to Verify.",
  "state": "MERGED",
  "createdAt": "2023-05-04T20:59:02Z",
  "updatedAt": "2023-06-06T19:52:03Z",
  "closedAt": "2023-06-06T19:52:02Z",
  "mergedAt": "2023-06-06T19:52:02Z",
  "additions": 132,
  "deletions": 165,
  "changedFiles": 15,
  "headRefName": "tl-testing",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "15ebad5f833c601d75c99bc65463661c083e3e0e",
          "message": "Bump Xunit version\n\nThe version pulled in by Arcade is currently slightly stale\nand conflicts with Verify.",
          "committedDate": "2023-05-05T13:38:46Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "172c3e974bd2d8e7500a8da080aa0310021960d1",
          "message": "Default to large viewport when console redirected\n\nThis avoids an exception when `-tl:true` and output is redirected to a\nfile, which will be important for unit testing.",
          "committedDate": "2023-05-15T20:06:23Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "591ce821ab63bc154a3c2b33b304b3b160bb4ae2",
          "message": "Manually pump messages in TerminalLogger tests\n\nThis way, even if the tests take a long time to run, we won't see\nperiodic messages with node status.",
          "committedDate": "2023-05-15T20:23:29Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "16e00e350a6523cc10131f5836569e4b5a09ff63",
          "message": "Convert LiveLogger tests to use Verify\n\n* Remove MockTerminal in favor of internal fields on Terminal itself.\n* Reference Verify library for acceptance testing.\n* Convert existing tests to Verify.",
          "committedDate": "2023-05-15T20:24:01Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c0ac65f231d574a4ec5ba0280b738898402d2dcc",
          "message": "Scrub timestamps from TerminalLogger output\n\nTimes that show up (in English) like (2.3s) are posted by\nthe logger at various points when indicating progress, but\nare very unreliable for test purposes since they're highly\ndependent on what else the machine is doing and how fast it\nis. So scrub them away.",
          "committedDate": "2023-05-24T16:33:25Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Ah, this is a fun failure!\r\n\r\n```diff\r\n+\\x1b[1F\r\n+\\x1b[2F\r\n-  project \\x1b[31;1mfailed with errors\\x1b[m (0.0s)\r\n+\\x1b[J  project \\x1b[31;1mfailed with errors\\x1b[m (0.1s)\r\n```\r\n\r\nIt's failing because the test tool long enough that the refresher thread pushed out a status! Adding a manual mode and using that in the tests (well technically none of these tests need it yet).",
        "createdAt": "2023-05-05T14:43:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2023-05-23T19:30:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2023-05-23T19:30:49Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "> It's failing because the test tool long enough that the refresher thread pushed out a status! Adding a manual mode and using that in the tests (well technically none of these tests need it yet).\r\n\r\nIt wasn't _just_ that--the time in `(0.1s)` can also change. Running tests again to validate my scrubber.",
        "createdAt": "2023-05-23T19:31:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I wish there was an easy way to mock `DateTime.Now`.\r\n\r\nGreat news (for a future where we can be .NET 8+ only): https://learn.microsoft.com/dotnet/core/whats-new/dotnet-8#time-abstraction",
        "createdAt": "2023-05-24T13:25:12Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we default to \"infinite\", like I've done here, or to \"a reasonable size like 80\u00d720\"?",
              "createdAt": "2023-05-04T21:07:10Z",
              "path": "src/MSBuild/LiveLogger/Terminal.cs",
              "diffHunk": "@@ -29,18 +30,49 @@ internal sealed class Terminal : ITerminal\n     /// </summary>\n     private bool _isBuffering = false;\n \n+    internal TextWriter Output { private get; set; } = Console.Out;\n+\n     /// <inheritdoc/>\n-    public int Height => Console.BufferHeight;\n+    public int Height\n+    {\n+        get\n+        {\n+            if (Console.IsOutputRedirected)\n+            {\n+                return int.MaxValue;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "For redirected output it makes sense to use infinite. For tests I think we may want to use reasonable (as well as unreasonable!) values. I would probably add `int?` parameters to the new constructor and default to infinite if null.",
              "createdAt": "2023-05-05T07:41:45Z",
              "path": "src/MSBuild/LiveLogger/Terminal.cs",
              "diffHunk": "@@ -29,18 +30,49 @@ internal sealed class Terminal : ITerminal\n     /// </summary>\n     private bool _isBuffering = false;\n \n+    internal TextWriter Output { private get; set; } = Console.Out;\n+\n     /// <inheritdoc/>\n-    public int Height => Console.BufferHeight;\n+    public int Height\n+    {\n+        get\n+        {\n+            if (Console.IsOutputRedirected)\n+            {\n+                return int.MaxValue;",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I agree--we should manipulate that to test the selective-truncation stuff. I'll leave that for later.",
              "createdAt": "2023-05-05T14:42:48Z",
              "path": "src/MSBuild/LiveLogger/Terminal.cs",
              "diffHunk": "@@ -29,18 +30,49 @@ internal sealed class Terminal : ITerminal\n     /// </summary>\n     private bool _isBuffering = false;\n \n+    internal TextWriter Output { private get; set; } = Console.Out;\n+\n     /// <inheritdoc/>\n-    public int Height => Console.BufferHeight;\n+    public int Height\n+    {\n+        get\n+        {\n+            if (Console.IsOutputRedirected)\n+            {\n+                return int.MaxValue;",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "SUPER NIT: int.MaxValue is sensitive value. It have bitten me few times in past. Mostly things like `int x = int.MaxValue; if (y < x +1) { ThisRunsAllTheTime___Right(); }`\r\nI was mostly addressing it by introducing constant like `int InfiniteSize = 2<<23`. This way the code will be less complex, still no practical need for `if (IsInfinite)`, branch and safe for overflow.",
              "createdAt": "2023-05-09T12:29:11Z",
              "path": "src/MSBuild/LiveLogger/Terminal.cs",
              "diffHunk": "@@ -29,18 +30,49 @@ internal sealed class Terminal : ITerminal\n     /// </summary>\n     private bool _isBuffering = false;\n \n+    internal TextWriter Output { private get; set; } = Console.Out;\n+\n     /// <inheritdoc/>\n-    public int Height => Console.BufferHeight;\n+    public int Height\n+    {\n+        get\n+        {\n+            if (Console.IsOutputRedirected)\n+            {\n+                return int.MaxValue;",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this a Microsoft product? It looks externally-owned, and I didn't see a license. If so, what are the rules around using it?",
              "createdAt": "2023-05-23T20:51:31Z",
              "path": "eng/dependabot/Packages.props",
              "diffHunk": "@@ -48,6 +48,9 @@\n \n     <PackageVersion Include=\"System.Security.Cryptography.X509Certificates\" Version=\"4.3.2\" />\n     <PackageVersion Update=\"System.Security.Cryptography.X509Certificates\" Condition=\"'$(SystemSecurityCryptographyX509CertificatesVersion)' != ''\" Version=\"$(SystemSecurityCryptographyX509CertificatesVersion)\" />\n+\n+    <PackageVersion Include=\"Verify.Xunit\" Version=\"19.14.1\" />\n+    <PackageVersion Update=\"Verify.XUnit\" Condition=\"'$(VerifyXUnitVersion)' != ''\" Version=\"$(VerifyXUnitVersion)\" />",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It's an external project that is already used in several other .NET repos, including the SDK. https://github.com/dotnet/sdk/blob/e425d8ca99e8b306f94a76a75e8c1cac269d1b49/eng/dependabot/Packages.props#LL7C5-L7C64",
              "createdAt": "2023-05-24T16:32:49Z",
              "path": "eng/dependabot/Packages.props",
              "diffHunk": "@@ -48,6 +48,9 @@\n \n     <PackageVersion Include=\"System.Security.Cryptography.X509Certificates\" Version=\"4.3.2\" />\n     <PackageVersion Update=\"System.Security.Cryptography.X509Certificates\" Condition=\"'$(SystemSecurityCryptographyX509CertificatesVersion)' != ''\" Version=\"$(SystemSecurityCryptographyX509CertificatesVersion)\" />\n+\n+    <PackageVersion Include=\"Verify.Xunit\" Version=\"19.14.1\" />\n+    <PackageVersion Update=\"Verify.XUnit\" Condition=\"'$(VerifyXUnitVersion)' != ''\" Version=\"$(VerifyXUnitVersion)\" />",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Very favorit OSS within our repos. Please remember to share some love back during the June FOSS voting! (https://github.com/microsoft/foss-fund).",
              "createdAt": "2023-06-02T09:21:15Z",
              "path": "eng/dependabot/Packages.props",
              "diffHunk": "@@ -48,6 +48,9 @@\n \n     <PackageVersion Include=\"System.Security.Cryptography.X509Certificates\" Version=\"4.3.2\" />\n     <PackageVersion Update=\"System.Security.Cryptography.X509Certificates\" Condition=\"'$(SystemSecurityCryptographyX509CertificatesVersion)' != ''\" Version=\"$(SystemSecurityCryptographyX509CertificatesVersion)\" />\n+\n+    <PackageVersion Include=\"Verify.Xunit\" Version=\"19.14.1\" />\n+    <PackageVersion Update=\"Verify.XUnit\" Condition=\"'$(VerifyXUnitVersion)' != ''\" Version=\"$(VerifyXUnitVersion)\" />",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It looks like we never actually write to this location, correct? I was concerned because I could imagine someone actually making a C:\\src\\project.proj file and not wanting it randomly overwritten in tests...if you agree, perhaps add a comment that we shouldn't write to _projectFile?",
              "createdAt": "2023-05-23T20:56:07Z",
              "path": "src/MSBuild.UnitTests/LiveLogger_Tests.cs",
              "diffHunk": "@@ -4,35 +4,59 @@\n using System;\n using System.Collections;\n using System.Collections.Generic;\n-using System.Net.NetworkInformation;\n+using System.IO;\n using System.Text.RegularExpressions;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n using Microsoft.Build.Framework;\n using Microsoft.Build.Logging.LiveLogger;\n-using Shouldly;\n+\n+using VerifyTests;\n+using VerifyXunit;\n using Xunit;\n \n+using static VerifyXunit.Verifier;\n+\n namespace Microsoft.Build.UnitTests\n {\n+    [UsesVerify]\n     public class LiveLogger_Tests : IEventSource, IDisposable\n     {\n         private const int _nodeCount = 8;\n-        private const int _terminalWidth = 80;\n-        private const int _terminalHeight = 40;\n         private const string _eventSender = \"Test\";\n-        private const string _projectFile = @\"C:\\src\\project.proj\";\n+        private readonly string _projectFile = NativeMethods.IsUnixLike ? \"/src/project.proj\" : @\"C:\\src\\project.proj\";",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I expect this to change radically in the next weeks as we expand tests (to include multiple-project scenarios) so I'm not going to add a comment now.\r\n",
              "createdAt": "2023-05-24T13:37:31Z",
              "path": "src/MSBuild.UnitTests/LiveLogger_Tests.cs",
              "diffHunk": "@@ -4,35 +4,59 @@\n using System;\n using System.Collections;\n using System.Collections.Generic;\n-using System.Net.NetworkInformation;\n+using System.IO;\n using System.Text.RegularExpressions;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n using Microsoft.Build.Framework;\n using Microsoft.Build.Logging.LiveLogger;\n-using Shouldly;\n+\n+using VerifyTests;\n+using VerifyXunit;\n using Xunit;\n \n+using static VerifyXunit.Verifier;\n+\n namespace Microsoft.Build.UnitTests\n {\n+    [UsesVerify]\n     public class LiveLogger_Tests : IEventSource, IDisposable\n     {\n         private const int _nodeCount = 8;\n-        private const int _terminalWidth = 80;\n-        private const int _terminalHeight = 40;\n         private const string _eventSender = \"Test\";\n-        private const string _projectFile = @\"C:\\src\\project.proj\";\n+        private readonly string _projectFile = NativeMethods.IsUnixLike ? \"/src/project.proj\" : @\"C:\\src\\project.proj\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are these just rendering badly? What are these supposed to look like?",
              "createdAt": "2023-05-23T20:57:04Z",
              "path": "src/MSBuild.UnitTests/Snapshots/LiveLogger_Tests.PrintsBuildSummary_Succeeded.verified.txt",
              "diffHunk": "@@ -0,0 +1,3 @@\n+\ufeff\u001b[?25l\u001b[1F",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This is a reasonable rendering. The output includes [VT codes](https://learn.microsoft.com/windows/console/console-virtual-terminal-sequences) that, when interpreted by a terminal emulator, apply formatting or other properties to the output, like color or overwriting an already-printed line.\r\n\r\nYou can render the completed by piping it through a terminal emulator, for example:\r\n\r\n<img width=\"687\" alt=\"image\" src=\"https://github.com/dotnet/msbuild/assets/3347530/3b09bdf5-15df-4d6a-9746-e4026e0d6d0f\">\r\n",
              "createdAt": "2023-05-24T20:17:16Z",
              "path": "src/MSBuild.UnitTests/Snapshots/LiveLogger_Tests.PrintsBuildSummary_Succeeded.verified.txt",
              "diffHunk": "@@ -0,0 +1,3 @@\n+\ufeff\u001b[?25l\u001b[1F",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Just to be pedantic, you could theoretically redirect output to StdOut, right? (Not that that does anything) I'm wondering if there are ways to figure out the right dimensions in certain special cases. If you don't want to bother, I don't think it's actually important.",
              "createdAt": "2023-05-23T21:03:42Z",
              "path": "src/MSBuild/LiveLogger/Terminal.cs",
              "diffHunk": "@@ -29,18 +30,51 @@ internal sealed class Terminal : ITerminal\n     /// </summary>\n     private bool _isBuffering = false;\n \n+    internal TextWriter Output { private get; set; } = Console.Out;\n+\n+    private const int BigUnknownDimension = 2 << 23;\n+\n     /// <inheritdoc/>\n-    public int Height => Console.BufferHeight;\n+    public int Height\n+    {\n+        get\n+        {\n+            if (Console.IsOutputRedirected)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I don't think that's interesting enough to jump through hoops for at this point.",
              "createdAt": "2023-05-24T20:18:01Z",
              "path": "src/MSBuild/LiveLogger/Terminal.cs",
              "diffHunk": "@@ -29,18 +30,51 @@ internal sealed class Terminal : ITerminal\n     /// </summary>\n     private bool _isBuffering = false;\n \n+    internal TextWriter Output { private get; set; } = Console.Out;\n+\n+    private const int BigUnknownDimension = 2 << 23;\n+\n     /// <inheritdoc/>\n-    public int Height => Console.BufferHeight;\n+    public int Height\n+    {\n+        get\n+        {\n+            if (Console.IsOutputRedirected)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Ok to hard-code dot as the decimal separator? Can the test be running under locales that use a different character?",
              "createdAt": "2023-05-24T05:48:57Z",
              "path": "src/MSBuild.UnitTests/LiveLogger_Tests.cs",
              "diffHunk": "@@ -4,35 +4,59 @@\n using System;\n using System.Collections;\n using System.Collections.Generic;\n-using System.Net.NetworkInformation;\n+using System.IO;\n using System.Text.RegularExpressions;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n using Microsoft.Build.Framework;\n using Microsoft.Build.Logging.LiveLogger;\n-using Shouldly;\n+\n+using VerifyTests;\n+using VerifyXunit;\n using Xunit;\n \n+using static VerifyXunit.Verifier;\n+\n namespace Microsoft.Build.UnitTests\n {\n+    [UsesVerify]\n     public class LiveLogger_Tests : IEventSource, IDisposable\n     {\n         private const int _nodeCount = 8;\n-        private const int _terminalWidth = 80;\n-        private const int _terminalHeight = 40;\n         private const string _eventSender = \"Test\";\n-        private const string _projectFile = @\"C:\\src\\project.proj\";\n+        private readonly string _projectFile = NativeMethods.IsUnixLike ? \"/src/project.proj\" : @\"C:\\src\\project.proj\";\n \n-        private readonly MockTerminal _mockTerminal;\n+        private StringWriter _outputWriter = new();\n+\n+        private readonly Terminal _mockTerminal;\n         private readonly LiveLogger _liveLogger;\n \n         private readonly DateTime _buildStartTime = new DateTime(2023, 3, 30, 16, 30, 0);\n         private readonly DateTime _buildFinishTime = new DateTime(2023, 3, 30, 16, 30, 5);\n \n+        private VerifySettings _settings = new();\n+\n+        private static Regex _elapsedTime = new(@\"\\(\\d+\\.\\ds\\)\", RegexOptions.Compiled);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I'm going to push a change that makes this somewhat more robust but to get it really right I think we'll have to refactor how our localized resources work. Right now it doesn't look like there's anything we could extract that would localize the `s`.",
              "createdAt": "2023-05-24T16:06:05Z",
              "path": "src/MSBuild.UnitTests/LiveLogger_Tests.cs",
              "diffHunk": "@@ -4,35 +4,59 @@\n using System;\n using System.Collections;\n using System.Collections.Generic;\n-using System.Net.NetworkInformation;\n+using System.IO;\n using System.Text.RegularExpressions;\n+using System.Threading;\n+using System.Threading.Tasks;\n+\n using Microsoft.Build.Framework;\n using Microsoft.Build.Logging.LiveLogger;\n-using Shouldly;\n+\n+using VerifyTests;\n+using VerifyXunit;\n using Xunit;\n \n+using static VerifyXunit.Verifier;\n+\n namespace Microsoft.Build.UnitTests\n {\n+    [UsesVerify]\n     public class LiveLogger_Tests : IEventSource, IDisposable\n     {\n         private const int _nodeCount = 8;\n-        private const int _terminalWidth = 80;\n-        private const int _terminalHeight = 40;\n         private const string _eventSender = \"Test\";\n-        private const string _projectFile = @\"C:\\src\\project.proj\";\n+        private readonly string _projectFile = NativeMethods.IsUnixLike ? \"/src/project.proj\" : @\"C:\\src\\project.proj\";\n \n-        private readonly MockTerminal _mockTerminal;\n+        private StringWriter _outputWriter = new();\n+\n+        private readonly Terminal _mockTerminal;\n         private readonly LiveLogger _liveLogger;\n \n         private readonly DateTime _buildStartTime = new DateTime(2023, 3, 30, 16, 30, 0);\n         private readonly DateTime _buildFinishTime = new DateTime(2023, 3, 30, 16, 30, 5);\n \n+        private VerifySettings _settings = new();\n+\n+        private static Regex _elapsedTime = new(@\"\\(\\d+\\.\\ds\\)\", RegexOptions.Compiled);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}