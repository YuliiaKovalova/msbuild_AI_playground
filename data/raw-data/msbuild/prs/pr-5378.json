{
  "number": 5378,
  "title": "Rework SdkReference computation",
  "body": "* Fix `<Import />` `ProjectImportElement.CreateImplicit` setting Sdk to an invalid value (stringified `SdkReference`)\r\n* Provide means to get `SdkReference` and XML attribute locations for the values `SdkReference` was created with.\r\n* Improve support for implicit `<Import />` (so, for instance, if one changes the value on `<Sdk />` element, it will reflect on `<Import />` elements created for this element)\r\n* Drop `ProjectImportElement.SdkReference` cache to reduce data duplication (XML tree is now the authority)\r\n* To compensate for the previous point, be careful about memory allocations (make newly-introduced `internal` types `struct`, `readonly struct`, `readonly ref struct`, pass arguments with `in` when the resulting IL is better) and not doing extra work\r\n* Nullable Reference Types annotations for modified code ranges\r\n\r\nNote: this is the preparation part of resolving #5349 _without_ the actual change.",
  "state": "CLOSED",
  "createdAt": "2020-05-26T15:37:25Z",
  "updatedAt": "2021-01-15T18:22:46Z",
  "closedAt": "2021-01-15T18:17:58Z",
  "mergedAt": null,
  "additions": 714,
  "deletions": 179,
  "changedFiles": 16,
  "headRefName": "sdkreference",
  "isDraft": true,
  "author": {
    "login": "andrew-boyarshin"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "9205e7c148a2fc22f8d9a95c23faff3f8252f360",
          "message": "Rework SdkReference computation",
          "committedDate": "2020-06-13T13:58:16Z",
          "author": {
            "name": "Andrew Boyarshin",
            "email": "andrew.boyarshin@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "[![CLA assistant check](https://cla.dotnetfoundation.org/pull/badge/signed)](https://cla.dotnetfoundation.org/microsoft/msbuild?pullRequest=5378) <br/>All CLA requirements met.",
        "createdAt": "2020-05-26T15:37:39Z",
        "author": {
          "login": "dnfclas"
        }
      },
      {
        "body": "Why not have a `Version` as range instead of having two (`Version` and `MinimumVersion`) attributes, Like specifying NuGet Package version ranges?\r\n",
        "createdAt": "2020-06-13T13:31:44Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@Nirmal4G I didn't change the existing way of presenting the data. I only refactored the existing code to enable getting precise locations of each `SdkReference` component. I think this question should be moved into a separate issue.\r\n\r\nP.S. It would be great to receive initial feedback on this PR from MSBuild team.",
        "createdAt": "2020-06-13T13:34:26Z",
        "author": {
          "login": "andrew-boyarshin"
        }
      },
      {
        "body": "Team triage: Thank you for your contribution! We continue to be skeptical of #5349. This PR is quite large and reviewing it has gotten stalled a few times. Can you break it up into smaller PRs that are easier to review?",
        "createdAt": "2020-07-17T18:01:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald sure, I'll think of something.",
        "createdAt": "2020-07-17T18:03:21Z",
        "author": {
          "login": "andrew-boyarshin"
        }
      },
      {
        "body": "Closing this due to age. If you'd like to bring it back we can, just let us know.",
        "createdAt": "2021-01-15T18:17:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yeah, I think it was a cool (from technical standpoint), but unnecessary idea (it complicated things for little benefit), since MSBuild data model isn't really used that much when modifying the project files, and when it is, it's not that much of a hassle to process all occurrences of SDK reference, instead of the SDK reference origin.",
        "createdAt": "2021-01-15T18:22:46Z",
        "author": {
          "login": "andrew-boyarshin"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "The test class is now gone, and this method is now used in many tests.",
              "createdAt": "2020-05-26T16:46:05Z",
              "path": "src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs",
              "diffHunk": "@@ -177,7 +177,7 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC\n         }\n \n         /// <summary>\n-        /// Used for unit tests only.  This is currently only called through reflection in Microsoft.Build.Engine.UnitTests.TransientSdkResolution.CallResetForTests\n+        /// Used for unit tests only.",
              "author": {
                "login": "andrew-boyarshin"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Behavioral change there. I feel like this was just copy-pasted from `Project` property. It makes no sense to call `FixFilePath` here, since `Sdk` is not a file path (it can't even contain any slashes).",
              "createdAt": "2020-05-26T16:47:41Z",
              "path": "src/Build/Construction/ProjectImportElement.cs",
              "diffHunk": "@@ -60,144 +95,341 @@ public string Project\n         }\n \n         /// <summary>\n-        /// Location of the project attribute\n+        ///     Location of the project attribute\n         /// </summary>\n         public ElementLocation ProjectLocation => GetAttributeLocation(XMakeAttributes.project);\n \n+#nullable enable\n+\n         /// <summary>\n-        /// Gets or sets the SDK that contains the import.\n+        ///     Gets or sets the SDK that contains the import.\n         /// </summary>\n-        public string Sdk\n+        public string? Sdk\n         {\n-            get => FileUtilities.FixFilePath(GetAttributeValue(XMakeAttributes.sdk));",
              "author": {
                "login": "andrew-boyarshin"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Explicit (unreachable) break to make control flow a bit more correct for the code analysis tools. I don't like these asserts in MSBuild, but I kept them in existing code.",
              "createdAt": "2020-05-26T16:50:58Z",
              "path": "src/Build/Construction/ProjectRootElement.cs",
              "diffHunk": "@@ -1852,53 +1852,60 @@ internal void MarkAsExplicitlyLoaded()\n             IsExplicitlyLoaded = true;\n         }\n \n+#nullable enable\n+\n         /// <summary>\n         /// Creates and returns a list of <see cref=\"ProjectImportElement\"/> nodes which are implicitly\n         /// referenced by the Project.\n         /// </summary>\n         /// <param name=\"currentProjectOrImport\">Current project</param>\n-        /// <returns>An <see cref=\"IEnumerable{SdkReference}\"/> containing details of the SDKs referenced by the project.</returns>\n+        /// <returns>A <see cref=\"List{ProjectImportElement}\"/> of implicit &lt;Import /&gt; elements for the SDKs referenced by the project.</returns>\n         internal List<ProjectImportElement> GetImplicitImportNodes(ProjectRootElement currentProjectOrImport)\n         {\n             var nodes = new List<ProjectImportElement>();\n \n-            string sdkAttribute = Sdk;\n+            var sdkAttribute = Sdk;\n             if (!string.IsNullOrWhiteSpace(sdkAttribute))\n             {\n-                foreach (var referencedSdk in ParseSdks(sdkAttribute, SdkLocation))\n+                var location = SdkLocation;\n+                var origin = new SdkReferenceOrigin(location, location, location);\n+\n+                foreach (var sdk in sdkAttribute.Split(MSBuildConstants.SemicolonChar).Select(i => i.Trim()))\n                 {\n-                    nodes.Add(ProjectImportElement.CreateImplicit(\"Sdk.props\", currentProjectOrImport, ImplicitImportLocation.Top, referencedSdk, this));\n-                    nodes.Add(ProjectImportElement.CreateImplicit(\"Sdk.targets\", currentProjectOrImport, ImplicitImportLocation.Bottom, referencedSdk, this));\n+                    if (!SdkReference.TryParse(sdk, out var reference))\n+                    {\n+                        ProjectErrorUtilities.ThrowInvalidProject(location, \"InvalidSdkFormat\", sdkAttribute);\n+                        break;",
              "author": {
                "login": "andrew-boyarshin"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Gross, but that's the MSBuild asserts for you.",
              "createdAt": "2020-05-26T16:53:28Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1814,10 +1816,14 @@ private List<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportin\n                         return;\n                     }\n \n-                    ProjectErrorUtilities.ThrowInvalidProject(importElement.SdkLocation, \"CouldNotResolveSdk\", importElement.SdkReference.ToString());\n+                    ProjectErrorUtilities.ThrowInvalidProject(\n+                        sdkReferenceWithOrigin.Origin.Name,\n+                        \"CouldNotResolveSdk\",\n+                        sdkReference.ToString()\n+                    );\n                 }\n \n-                project = Path.Combine(sdkResult.Path, project);\n+                project = Path.Combine(sdkResult!.Path, project);",
              "author": {
                "login": "andrew-boyarshin"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I've decided to annotate this property as non-nullable, but thanks to `GetAttributeValue` not being NRT-annotated, I don't even need to put a `!` here.",
              "createdAt": "2020-05-26T16:57:10Z",
              "path": "src/Build/Construction/ProjectSdkElement.cs",
              "diffHunk": "@@ -35,45 +52,46 @@ internal ProjectSdkElement(ProjectElementContainerLink link)\n         /// </summary>\n         private ProjectSdkElement(XmlElementWithLocation xmlElement, ProjectRootElement containingProject)\n             : base(xmlElement, null, containingProject)\n-        { }\n+        {\n+        }\n \n         /// <summary>\n         /// Gets or sets the name of the SDK.\n         /// </summary>\n         public string Name\n         {\n-            get => GetAttributeValue(XMakeAttributes.sdkName);\n+            get => GetAttributeValue(XMakeAttributes.sdkName, true);",
              "author": {
                "login": "andrew-boyarshin"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Fix reason messages here and in the following 2 properties (`param` was not used, inconsistent with `ProjectImportElement`).",
              "createdAt": "2020-05-26T16:58:14Z",
              "path": "src/Build/Construction/ProjectSdkElement.cs",
              "diffHunk": "@@ -35,45 +52,46 @@ internal ProjectSdkElement(ProjectElementContainerLink link)\n         /// </summary>\n         private ProjectSdkElement(XmlElementWithLocation xmlElement, ProjectRootElement containingProject)\n             : base(xmlElement, null, containingProject)\n-        { }\n+        {\n+        }\n \n         /// <summary>\n         /// Gets or sets the name of the SDK.\n         /// </summary>\n         public string Name\n         {\n-            get => GetAttributeValue(XMakeAttributes.sdkName);\n+            get => GetAttributeValue(XMakeAttributes.sdkName, true);\n             set\n             {\n                 ErrorUtilities.VerifyThrowArgumentLength(value, XMakeAttributes.sdkName);\n-                SetOrRemoveAttribute(XMakeAttributes.sdkName, value, $\"Set SDK Name to {value}\", XMakeAttributes.sdkName);",
              "author": {
                "login": "andrew-boyarshin"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Since I don't know the proper nullability of the following 2 methods, I've decided to skip annotating these (the same goes for the ones in `ProjectSdkElement`).",
              "createdAt": "2020-05-26T16:59:29Z",
              "path": "src/Build/Construction/ProjectImportElement.cs",
              "diffHunk": "@@ -60,144 +95,341 @@ public string Project\n         }\n \n         /// <summary>\n-        /// Location of the project attribute\n+        ///     Location of the project attribute\n         /// </summary>\n         public ElementLocation ProjectLocation => GetAttributeLocation(XMakeAttributes.project);\n \n+#nullable enable\n+\n         /// <summary>\n-        /// Gets or sets the SDK that contains the import.\n+        ///     Gets or sets the SDK that contains the import.\n         /// </summary>\n-        public string Sdk\n+        public string? Sdk\n         {\n-            get => FileUtilities.FixFilePath(GetAttributeValue(XMakeAttributes.sdk));\n+            get\n+            {\n+                switch (_sdkReferenceSource)\n+                {\n+                    case ISdkReferenceMutableSource mutableSource:\n+                        var query = mutableSource.SdkReferenceNameQuery;\n+                        return GetValue(query.Element, query.Factory);\n+                    case SdkReferenceConstantSource constantSource:\n+                        return constantSource.SdkReference.Reference.Name;\n+                    default:\n+                        throw CreateUnknownSourceException();\n+                }\n+            }\n             set\n             {\n-                ErrorUtilities.VerifyThrowArgumentLength(value, XMakeAttributes.sdk);\n-                if (UpdateSdkReference(name: value, SdkReference?.Version, SdkReference?.MinimumVersion))\n+                ErrorUtilities.VerifyThrowArgumentLength(value, nameof(value));\n+\n+                if (_sdkReferenceSource is ISdkReferenceMutableSource source)\n+                {\n+                    var query = source.SdkReferenceNameQuery;\n+                    Mutate(in query, NameAttributeFactory, value);\n+                }\n+                else\n                 {\n-                    SetOrRemoveAttribute(XMakeAttributes.sdk, value, \"Set Import Sdk {0}\", value);\n+                    PushValueFromImmutable(Sdk, value, NameAttributeFactory);\n                 }\n             }\n         }\n \n         /// <summary>\n-        /// Gets or sets the version associated with this SDK import\n+        ///     Gets or sets the version associated with this SDK import\n         /// </summary>\n-        public string Version\n+        public string? Version\n         {\n-            get => GetAttributeValue(XMakeAttributes.sdkVersion);\n+            get\n+            {\n+                switch (_sdkReferenceSource)\n+                {\n+                    case ISdkReferenceMutableSource mutableSource:\n+                        var query = mutableSource.SdkReferenceVersionQuery;\n+                        return GetValue(query.Element, query.Factory);\n+                    case SdkReferenceConstantSource constantSource:\n+                        return constantSource.SdkReference.Reference.Version;\n+                    default:\n+                        throw CreateUnknownSourceException();\n+                }\n+            }\n             set\n             {\n-                if (UpdateSdkReference(SdkReference?.Name, version: value, SdkReference?.MinimumVersion))\n+                if (_sdkReferenceSource is ISdkReferenceMutableSource source)\n+                {\n+                    var query = source.SdkReferenceVersionQuery;\n+                    Mutate(in query, VersionAttributeFactory, value);\n+                }\n+                else\n                 {\n-                    SetOrRemoveAttribute(XMakeAttributes.sdkVersion, value, \"Set Import Version {0}\", value);\n+                    PushValueFromImmutable(Version, value, VersionAttributeFactory);\n                 }\n             }\n         }\n \n         /// <summary>\n-        /// Gets or sets the minimum SDK version required by this import.\n+        ///     Gets or sets the minimum SDK version required by this import.\n         /// </summary>\n-        public string MinimumVersion\n+        public string? MinimumVersion\n         {\n-            get => GetAttributeValue(XMakeAttributes.sdkMinimumVersion);\n+            get\n+            {\n+                switch (_sdkReferenceSource)\n+                {\n+                    case ISdkReferenceMutableSource mutableSource:\n+                        var query = mutableSource.SdkReferenceMinimumVersionQuery;\n+                        return GetValue(query.Element, query.Factory);\n+                    case SdkReferenceConstantSource constantSource:\n+                        return constantSource.SdkReference.Reference.MinimumVersion;\n+                    default:\n+                        throw CreateUnknownSourceException();\n+                }\n+            }\n             set\n             {\n-                if (UpdateSdkReference(SdkReference?.Name, SdkReference?.Version, minimumVersion: value))\n+                if (_sdkReferenceSource is ISdkReferenceMutableSource source)\n+                {\n+                    var query = source.SdkReferenceMinimumVersionQuery;\n+                    Mutate(in query, MinimumVersionAttributeFactory, value);\n+                }\n+                else\n                 {\n-                    SetOrRemoveAttribute(XMakeAttributes.sdkMinimumVersion, value, \"Set Import Minimum Version {0}\", value);\n+                    PushValueFromImmutable(MinimumVersion, value, MinimumVersionAttributeFactory);\n                 }\n             }\n         }\n \n         /// <summary>\n-        /// Location of the Sdk attribute\n+        ///     Location of the Sdk attribute\n         /// </summary>\n-        public ElementLocation SdkLocation => GetAttributeLocation(XMakeAttributes.sdk);\n+        public ElementLocation? SdkLocation => SdkReferenceOrigin?.Name as ElementLocation;\n \n         /// <summary>\n-        /// Gets the <see cref=\"ImplicitImportLocation\"/> of the import.  This indicates if the import was implicitly\n-        /// added because of the <see cref=\"ProjectRootElement.Sdk\"/> attribute and the location where the project was\n-        /// imported.\n+        ///     Gets the <see cref=\"ImplicitImportLocation\" /> of the import.  This indicates if the import was implicitly\n+        ///     added because of the <see cref=\"ProjectRootElement.Sdk\" /> attribute and the location where the project was\n+        ///     imported.\n         /// </summary>\n-        public ImplicitImportLocation ImplicitImportLocation { get => Link != null ? ImportLink.ImplicitImportLocation : _implicitImportLocation; internal set => _implicitImportLocation = value; }\n+        public ImplicitImportLocation ImplicitImportLocation\n+        {\n+            get => ImportLink?.ImplicitImportLocation ?? _implicitImportLocation;\n+            internal set => _implicitImportLocation = value;\n+        }\n \n         /// <summary>\n-        /// If the import is an implicit one (<see cref=\"ImplicitImportLocation\"/> != None) then this element points\n-        /// to the original element which generated this implicit import.\n+        ///     If the import is an implicit one (<see cref=\"ImplicitImportLocation\" /> != None) then this element points\n+        ///     to the original element which generated this implicit import.\n         /// </summary>\n-        public ProjectElement OriginalElement { get => Link != null ? ImportLink.OriginalElement : _originalElement; internal set => _originalElement = value; }\n-\n+        public ProjectElement? OriginalElement\n+        {\n+            get => ImportLink != null ? ImportLink.OriginalElement : _originalElement;\n+            internal set => _originalElement = value;\n+        }\n \n         /// <summary>\n-        /// <see cref=\"Framework.SdkReference\"/> if applicable to this import element.\n+        ///     <see cref=\"Framework.SdkReference\" /> if applicable to this import element.\n         /// </summary>\n-        internal SdkReference SdkReference { get; set; }\n+        internal SdkReference? SdkReference => _sdkReferenceSource switch\n+        {\n+            ISdkReferenceMutableSource mutableSource => ComputeSdkReference(mutableSource),\n+            SdkReferenceConstantSource constantSource => constantSource.SdkReference.Reference,\n+            _ => throw CreateUnknownSourceException()\n+        };\n+\n+        internal SdkReferenceWithOrigin? SdkReferenceWithOrigin => _sdkReferenceSource switch\n+        {\n+            ISdkReferenceMutableSource mutableSource => ComputeSdkReferenceWithOrigin(mutableSource),\n+            SdkReferenceConstantSource constantSource => constantSource.SdkReference,\n+            _ => throw CreateUnknownSourceException()\n+        };\n+\n+        private SdkReferenceOrigin? SdkReferenceOrigin => _sdkReferenceSource switch\n+        {\n+            ISdkReferenceMutableSource mutableSource => ComputeSdkReferenceOrigin(mutableSource),\n+            SdkReferenceConstantSource constantSource => constantSource.SdkReference.Origin,\n+            _ => throw CreateUnknownSourceException()\n+        };\n \n         /// <summary>\n-        /// Creates an unparented ProjectImportElement, wrapping an unparented XmlElement.\n-        /// Validates the project value.\n-        /// Caller should then ensure the element is added to a parent\n+        ///     Creates an unparented ProjectImportElement, wrapping an unparented XmlElement.\n+        ///     Validates the project value.\n+        ///     Caller should then ensure the element is added to a parent\n         /// </summary>\n         internal static ProjectImportElement CreateDisconnected(string project, ProjectRootElement containingProject)\n         {\n             XmlElementWithLocation element = containingProject.CreateElement(XMakeElements.import);\n-            return new ProjectImportElement(element, containingProject) {Project = project};\n+            return new ProjectImportElement(element, containingProject)\n+            {\n+                Project = project\n+            };\n         }\n \n         /// <summary>\n-        /// Creates an implicit ProjectImportElement as if it was in the project.\n+        ///     Creates an implicit ProjectImportElement as if it was in the project.\n         /// </summary>\n-        /// <returns></returns>\n         internal static ProjectImportElement CreateImplicit(\n             string project,\n             ProjectRootElement containingProject,\n             ImplicitImportLocation implicitImportLocation,\n-            SdkReference sdkReference,\n+            ISdkReferenceSource? sdkReferenceSource,\n             ProjectElement originalElement)\n         {\n             XmlElementWithLocation element = containingProject.CreateElement(XMakeElements.import);\n-            return new ProjectImportElement(element, containingProject)\n+            return new ProjectImportElement(element, null, containingProject, sdkReferenceSource)\n             {\n                 Project = project,\n-                Sdk = sdkReference.ToString(),\n                 ImplicitImportLocation = implicitImportLocation,\n-                SdkReference = sdkReference,\n                 OriginalElement = originalElement\n             };\n         }\n \n+#nullable restore",
              "author": {
                "login": "andrew-boyarshin"
              }
            }
          ]
        }
      }
    ]
  }
}