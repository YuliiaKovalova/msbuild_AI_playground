{
  "number": 10942,
  "title": "add WarningsAsMessages, WarningsAsErrors, WarningsNotAsErrors and Tre\u2026",
  "body": "\u2026atWarningsAsErrors to the engine (e.g. variant without prefix). test those so that nothing breaks\r\n\r\nFixes #10877\r\n\r\n### Context\r\nadding MSBuildWarnings... variants without prefix to the engine.\r\n\r\n### Changes Made\r\nadded WarningsAsMessages, WarningsAsErrors, WarningsNotAsErrors, TreatWarningsAsErrors to the engine parsing.\r\n\r\n\r\n### Testing\r\nadded a series of unit tests to ensure that these are consistent with the original behavior\r\nfurther added unit tests to test the interaction & compatibility between the two.\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2024-11-07T13:12:04Z",
  "updatedAt": "2024-11-26T09:25:52Z",
  "closedAt": "2024-11-20T11:09:44Z",
  "mergedAt": "2024-11-20T11:09:44Z",
  "additions": 237,
  "deletions": 41,
  "changedFiles": 5,
  "headRefName": "respect-warningsAsErrors-and-others-without-prefix",
  "isDraft": false,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a32bf48ed73ac1fbd7cbdfd4766c4017ecaf6471",
          "message": "add WarningsAsMessages, WarningsAsErrors, WarningsNotAsErrors and TreatWarningsAsErrors to the engine (e.g. variant without prefix). test those so that nothing breaks",
          "committedDate": "2024-11-07T13:09:23Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "d3527be0a9021b47221e142e5e1c80f1fd38d11a",
          "message": "Optional output in BuildProjectExpectFailure\n\nOptionally capture output in BuildProjectExpectFailure for better test\ndiagnosability.",
          "committedDate": "2024-11-07T22:06:22Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "84afd71bb05a4927380a57acef144d30cf52d8aa",
          "message": "Capture output logging in new tests",
          "committedDate": "2024-11-07T22:06:41Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0ecb330fe42e16f72d45427a3e8592a0b5204ad9",
          "message": "working through the review. Some test improvements. Changewave used. Comments.",
          "committedDate": "2024-11-11T16:53:35Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "da208c75e43da55a7047d317cf5a08b038882e78",
          "message": "Merge branch 'main' into respect-warningsAsErrors-and-others-without-prefix",
          "committedDate": "2024-11-15T12:45:01Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "c3092a0441ef2f10555ce1586c590592e5989be1",
          "message": "addressing review comments",
          "committedDate": "2024-11-18T19:28:30Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "f377bf8ce97c9e6782a87818fff90b4ae3321215",
          "message": "Merge branch 'main' into respect-warningsAsErrors-and-others-without-prefix",
          "committedDate": "2024-11-18T19:28:52Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "3d64b5699286c2e98c0d89f9c67884ae865ceab1",
          "message": "Merge branch 'main' into respect-warningsAsErrors-and-others-without-prefix",
          "committedDate": "2024-11-19T15:16:41Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "7b56450c578bd6753ae7a145a05b785041389f90",
          "message": "Merge branch 'main' into respect-warningsAsErrors-and-others-without-prefix",
          "committedDate": "2024-11-20T10:06:36Z",
          "author": {
            "name": "Tomas Bartonek",
            "email": "tom.bartonek@volny.cz"
          }
        }
      },
      {
        "commit": {
          "oid": "424796f1863bcc50d6a8e994b0b3084e7d68cd8d",
          "message": "final review round, minor test update",
          "committedDate": "2024-11-20T10:16:58Z",
          "author": {
            "name": "SimaTian",
            "email": "tom.bartonek@volny.cz"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "Does this also fix https://github.com/dotnet/msbuild/issues/10871 and https://github.com/dotnet/msbuild/issues/10873?",
        "createdAt": "2024-11-19T18:21:16Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "#10873 yes, the other one I'm not sure but it looks similar enough. @rainersigwald ?",
        "createdAt": "2024-11-20T08:56:06Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "Yes, it fixes both of those.",
        "createdAt": "2024-11-20T14:14:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "/backport to vs17.12",
        "createdAt": "2024-11-20T14:14:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Started backporting to vs17.12: https://github.com/dotnet/msbuild/actions/runs/11935160959",
        "createdAt": "2024-11-20T14:14:18Z",
        "author": {
          "login": "github-actions"
        }
      },
      {
        "body": "@rainersigwald backporting to vs17.12 failed, the patch most likely resulted in conflicts:\n\n```shell\n$ git am --3way --empty=keep --ignore-whitespace --keep-non-patch changes.patch\n\nApplying: add WarningsAsMessages, WarningsAsErrors, WarningsNotAsErrors and TreatWarningsAsErrors to the engine (e.g. variant without prefix). test those so that nothing breaks\nApplying: Optional output in BuildProjectExpectFailure\nApplying: Capture output logging in new tests\nApplying: working through the review. Some test improvements. Changewave used. Comments.\nerror: sha1 information is lacking or useless (src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs).\nerror: could not build fake ancestor\nhint: Use 'git am --show-current-patch=diff' to see the failed patch\nhint: When you have resolved this problem, run \"git am --continue\".\nhint: If you prefer to skip this patch, run \"git am --skip\" instead.\nhint: To restore the original branch and stop patching, run \"git am --abort\".\nhint: Disable this message with \"git config advice.mergeConflict false\"\nPatch failed at 0004 working through the review. Some test improvements. Changewave used. Comments.\nError: The process '/usr/bin/git' failed with exit code 128\n```\n\nPlease backport manually!",
        "createdAt": "2024-11-20T14:14:40Z",
        "author": {
          "login": "github-actions"
        }
      },
      {
        "body": "@rainersigwald an error occurred while backporting to vs17.12, please check the run log for details!\n\nError: git am failed, most likely due to a merge conflict.",
        "createdAt": "2024-11-20T14:14:41Z",
        "author": {
          "login": "github-actions"
        }
      },
      {
        "body": "I will revert this one temporarily to unblock [msbuild-> sdk merging.](https://github.com/dotnet/sdk/pull/44977)\r\n\r\nHowever from the discussion we've had about this, we still want this change. Unfortunately it might require some additional ground work before we can push it through.",
        "createdAt": "2024-11-26T09:25:51Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Can you please put all of this new behavior behind changewave 17.14, on the off chance it causes some problem?",
              "createdAt": "2024-11-07T20:21:21Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -1390,14 +1390,29 @@ private void ConfigureWarningsAsErrorsAndMessages()\n             // Ensure everything that is required is available at this time\n             if (project != null && buildEventContext != null && loggingService != null && buildEventContext.ProjectInstanceId != BuildEventContext.InvalidProjectInstanceId)\n             {\n-                if (String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrors)?.Trim(), \"true\", StringComparison.OrdinalIgnoreCase))\n+                if (String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrors)?.Trim(), \"true\", StringComparison.OrdinalIgnoreCase) ||",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm not sure I understand these tests. How does this mechanism of setting the properties apply against raised warnings to validate that warnings are treated properly?",
              "createdAt": "2024-11-07T21:34:27Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -193,6 +190,125 @@ public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditiveProperty()\n             VerifyBuildMessageEvent(logger);\n         }\n \n+\n+        [Fact]\n+        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditivePropertyNoPrefix()\n+        {\n+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(\n+                GetTestProject(\n+                    customProperties: new List<KeyValuePair<string, string>>\n+                    {\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", \"123\"),\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", $@\"$(WarningsAsMessages);\n+                                                                                       {ExpectedEventCode.ToLowerInvariant()}\"),\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", \"$(WarningsAsMessages);ABC\")\n+                    }));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The VerifyBuild/Error/WarningMessageEvent validates that there is an event of this kind in the output, And there is only one such even emitted during the test.\r\nIt's not perfect/I can do more thorough validation if needed. The current way is mostly me reusing the already existing test harness to keep it ~consistent.",
              "createdAt": "2024-11-08T09:45:05Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -193,6 +190,125 @@ public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditiveProperty()\n             VerifyBuildMessageEvent(logger);\n         }\n \n+\n+        [Fact]\n+        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditivePropertyNoPrefix()\n+        {\n+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(\n+                GetTestProject(\n+                    customProperties: new List<KeyValuePair<string, string>>\n+                    {\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", \"123\"),\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", $@\"$(WarningsAsMessages);\n+                                                                                       {ExpectedEventCode.ToLowerInvariant()}\"),\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", \"$(WarningsAsMessages);ABC\")\n+                    }));",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "The succeed/fail is handled wia the BuildProjectExpectSuccess/Failure handler.\r\nI would prefer less opaque tests, but once again I've opted for consistency.",
              "createdAt": "2024-11-08T09:46:21Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -193,6 +190,125 @@ public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditiveProperty()\n             VerifyBuildMessageEvent(logger);\n         }\n \n+\n+        [Fact]\n+        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditivePropertyNoPrefix()\n+        {\n+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(\n+                GetTestProject(\n+                    customProperties: new List<KeyValuePair<string, string>>\n+                    {\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", \"123\"),\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", $@\"$(WarningsAsMessages);\n+                                                                                       {ExpectedEventCode.ToLowerInvariant()}\"),\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", \"$(WarningsAsMessages);ABC\")\n+                    }));",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "Those are quite confusing - a comment with desription of what we are testing and turining all of those to a single data driven test migh possibly help understandability?",
              "createdAt": "2024-11-08T11:20:43Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -193,6 +190,125 @@ public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditiveProperty()\n             VerifyBuildMessageEvent(logger);\n         }\n \n+\n+        [Fact]\n+        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditivePropertyNoPrefix()\n+        {\n+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(\n+                GetTestProject(\n+                    customProperties: new List<KeyValuePair<string, string>>\n+                    {\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", \"123\"),\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", $@\"$(WarningsAsMessages);\n+                                                                                       {ExpectedEventCode.ToLowerInvariant()}\"),\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", \"$(WarningsAsMessages);ABC\")\n+                    }));",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "I've combined some tests and added some comments to one that was somewhat confusing.",
              "createdAt": "2024-11-11T16:55:06Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -193,6 +190,125 @@ public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditiveProperty()\n             VerifyBuildMessageEvent(logger);\n         }\n \n+\n+        [Fact]\n+        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditivePropertyNoPrefix()\n+        {\n+            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(\n+                GetTestProject(\n+                    customProperties: new List<KeyValuePair<string, string>>\n+                    {\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", \"123\"),\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", $@\"$(WarningsAsMessages);\n+                                                                                       {ExpectedEventCode.ToLowerInvariant()}\"),\n+                        new KeyValuePair<string, string>(\"WarningsAsMessages\", \"$(WarningsAsMessages);ABC\")\n+                    }));",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can this all be pulled to a single helper?\r\nPossibly an additional parameter to `ParseWarningCodes` might be a best way to improve readability",
              "createdAt": "2024-11-08T11:04:29Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -1390,14 +1390,29 @@ private void ConfigureWarningsAsErrorsAndMessages()\n             // Ensure everything that is required is available at this time\n             if (project != null && buildEventContext != null && loggingService != null && buildEventContext.ProjectInstanceId != BuildEventContext.InvalidProjectInstanceId)\n             {\n-                if (String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrors)?.Trim(), \"true\", StringComparison.OrdinalIgnoreCase))\n+                if (String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrors)?.Trim(), \"true\", StringComparison.OrdinalIgnoreCase) ||\n+                    String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrorsNoPrefix)?.Trim(), \"true\", StringComparison.OrdinalIgnoreCase))\n                 {\n                     // If <MSBuildTreatWarningsAsErrors was specified then an empty ISet<string> signals the IEventSourceSink to treat all warnings as errors\n                     loggingService.AddWarningsAsErrors(buildEventContext, new HashSet<string>());\n                 }\n                 else\n                 {\n                     ISet<string> warningsAsErrors = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsErrors));\n+                    var warningsAsErrorsNoPrefix = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsErrorsNoPrefix));\n+                    if (warningsAsErrorsNoPrefix != null)\n+                    {\n+                        if (warningsAsErrors != null)\n+                        {\n+                            warningsAsErrors.UnionWith(warningsAsErrorsNoPrefix);\n+                        }\n+                        else\n+                        {\n+                            warningsAsErrors = warningsAsErrorsNoPrefix;\n+                        }\n+                    }",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need this?",
              "createdAt": "2024-11-18T10:42:25Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -8,6 +8,7 @@\n using System.Globalization;\n using System.IO;\n using System.Linq;\n+using System.Reflection.Metadata.Ecma335;",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Not sure how and where this slipped in. Will remove.",
              "createdAt": "2024-11-18T19:03:12Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -8,6 +8,7 @@\n using System.Globalization;\n using System.IO;\n using System.Linq;\n+using System.Reflection.Metadata.Ecma335;",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super nit: extra line added probably just by accident",
              "createdAt": "2024-11-18T10:47:11Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs",
              "diffHunk": "@@ -1430,16 +1437,40 @@ private void ConfigureKnownImmutableFolders()\n             }\n         }\n \n-        private static ISet<string> ParseWarningCodes(string warnings)\n+        private static ISet<string> ParseWarningCodes(string warnings, string warningsNoPrefix)\n         {\n-            if (String.IsNullOrWhiteSpace(warnings))\n+            // When this changewave is rotated out and this gets deleted, please consider removing\n+            // the <MSBuildWarningsAsMessages Condition=\"'$(MSBuildWarningsAsMessages)'==''\">$(NoWarn)</MSBuildWarningsAsMessages>\n+            // and the two following lines from the msbuild/src/Tasks/Microsoft.Common.CurrentVersion.targets\n+            if (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))\n+            {\n+                warningsNoPrefix = null;\n+            }\n+\n+            HashSet<string> result1 = null;\n+            if (!String.IsNullOrWhiteSpace(warnings))\n+            {\n+                result1 = new HashSet<string>(ExpressionShredder.SplitSemiColonSeparatedList(warnings), StringComparer.OrdinalIgnoreCase);\n+            }\n+            HashSet<string> result2 = null;\n+            if (!String.IsNullOrWhiteSpace(warningsNoPrefix))\n             {\n-                return null;\n+                result2 = new HashSet<string>(ExpressionShredder.SplitSemiColonSeparatedList(warningsNoPrefix), StringComparer.OrdinalIgnoreCase);\n             }\n \n-            return new HashSet<string>(ExpressionShredder.SplitSemiColonSeparatedList(warnings), StringComparer.OrdinalIgnoreCase);\n+            if (result1 != null)\n+            {\n+                if (result2 != null)\n+                {\n+                    result1.UnionWith(result2);\n+                }\n+                return result1;\n+            }\n+\n+            return result2;\n         }\n \n+",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'd suggest as well asserting on a specific error. As what if error failed due to issue with handling WarnAsErrors?",
              "createdAt": "2024-11-18T10:48:25Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -310,6 +391,77 @@ public void WarningsAsErrorsAndMessages_Tests(string WarningsAsMessages,\n             }\n         }\n \n+        [Theory]\n+\n+        [InlineData(true)]// Log MSB1234, BuildWarningsNotAsErrors takes priority\n+        [InlineData(false)]\n+        public void WarningsNotAsErrorsAndMessages_Tests(bool useMSPrefix)\n+        {\n+            string Warning = \"MSB1235\";\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                string prefix = useMSPrefix ? \"MSBuild\" : \"\";\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <PropertyGroup>\n+                        <{prefix}TreatWarningsAsErrors>true</{prefix}TreatWarningsAsErrors>\n+                        <{prefix}WarningsNotAsErrors>{Warning}</{prefix}WarningsNotAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <Warning Text=\"\"some random text\"\" Code='{Warning}' />\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectSuccess();\n+\n+                logger.WarningCount.ShouldBe(1);\n+                logger.ErrorCount.ShouldBe(0);\n+\n+                logger.AssertLogContains(Warning);\n+            }\n+        }\n+\n+\n+\n+        [Theory]\n+        [InlineData(\"TreatWarningsAsErrors\", \"true\", false)] // All warnings are treated as errors\n+        [InlineData(\"WarningsAsErrors\", \"MSB1007\", false)]\n+        [InlineData(\"WarningsAsMessages\", \"MSB1007\", false)]\n+        [InlineData(\"WarningsNotAsErrors\", \"MSB1007\", true)]\n+        public void WarningsChangeWaveTest(string property, string propertyData, bool treatWarningsAsErrors)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                string warningCode = \"MSB1007\";\n+                string treatWarningsAsErrorsCodeProperty = treatWarningsAsErrors ? \"<MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>\" : \"\";\n+                env.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", ChangeWaves.Wave17_14.ToString());\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <PropertyGroup>\n+                        {treatWarningsAsErrorsCodeProperty}\n+                        <{property}>{propertyData}</{property}>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <Warning Text=\"\"some random text\"\" Code='{warningCode}' />\n+                    </Target>\n+                </Project>\");\n+                if (treatWarningsAsErrors)\n+                {\n+                    // Since the \"no prefix\" variations can't do anything with the change wave disabled, this should always fail.\n+                    MockLogger logger = proj.BuildProjectExpectFailure();",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Mhm. Asserting on a specific error would require me digging quite deep into the proj.BuildProjectExpectFailure(); harness which is somewhat out of scope although I think that for the future we might want to consider refactoring all of these tests since some parts of it are clunky at best.\r\nI've added checking for the error in the logging. If we fail with an unrelated error (e.g. inside of the handling), it should fail ungracefully and not log anything, failing the test.\r\nFurthermore, I added a positive test - WarningsNotAsErrors should work as no-op if MSBuildTreatWarningsAsErrors is not set, e.g. it should succeed without doing anything. (or more specifically, be treated as any other unreserved property)",
              "createdAt": "2024-11-20T08:50:31Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -310,6 +391,77 @@ public void WarningsAsErrorsAndMessages_Tests(string WarningsAsMessages,\n             }\n         }\n \n+        [Theory]\n+\n+        [InlineData(true)]// Log MSB1234, BuildWarningsNotAsErrors takes priority\n+        [InlineData(false)]\n+        public void WarningsNotAsErrorsAndMessages_Tests(bool useMSPrefix)\n+        {\n+            string Warning = \"MSB1235\";\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                string prefix = useMSPrefix ? \"MSBuild\" : \"\";\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <PropertyGroup>\n+                        <{prefix}TreatWarningsAsErrors>true</{prefix}TreatWarningsAsErrors>\n+                        <{prefix}WarningsNotAsErrors>{Warning}</{prefix}WarningsNotAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <Warning Text=\"\"some random text\"\" Code='{Warning}' />\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectSuccess();\n+\n+                logger.WarningCount.ShouldBe(1);\n+                logger.ErrorCount.ShouldBe(0);\n+\n+                logger.AssertLogContains(Warning);\n+            }\n+        }\n+\n+\n+\n+        [Theory]\n+        [InlineData(\"TreatWarningsAsErrors\", \"true\", false)] // All warnings are treated as errors\n+        [InlineData(\"WarningsAsErrors\", \"MSB1007\", false)]\n+        [InlineData(\"WarningsAsMessages\", \"MSB1007\", false)]\n+        [InlineData(\"WarningsNotAsErrors\", \"MSB1007\", true)]\n+        public void WarningsChangeWaveTest(string property, string propertyData, bool treatWarningsAsErrors)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                string warningCode = \"MSB1007\";\n+                string treatWarningsAsErrorsCodeProperty = treatWarningsAsErrors ? \"<MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>\" : \"\";\n+                env.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", ChangeWaves.Wave17_14.ToString());\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <PropertyGroup>\n+                        {treatWarningsAsErrorsCodeProperty}\n+                        <{property}>{propertyData}</{property}>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <Warning Text=\"\"some random text\"\" Code='{warningCode}' />\n+                    </Target>\n+                </Project>\");\n+                if (treatWarningsAsErrors)\n+                {\n+                    // Since the \"no prefix\" variations can't do anything with the change wave disabled, this should always fail.\n+                    MockLogger logger = proj.BuildProjectExpectFailure();",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "The added assertion on errors count and content of the logger is exactly what I had in mind! :-)\r\nIt might be slightly more safe to verify that the `warningCode` is really an error - something like:\r\n\r\n```\r\nlogger.AssertLogContains($\"Error: {warningCode}\");\r\n```\r\n\r\nor if it needs a pattern match then something like (would need to be bit more elaboret to ensure singleline):\r\n\r\n```\r\nlogger.FullLog.ShouldMatch($\"Error: * {warningCode}\")\r\n```\r\n\r\n\r\nBut other than that looks good - feel free to reflect or not, resolve this and merge ;-)\r\n ",
              "createdAt": "2024-11-20T10:03:26Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -310,6 +391,77 @@ public void WarningsAsErrorsAndMessages_Tests(string WarningsAsMessages,\n             }\n         }\n \n+        [Theory]\n+\n+        [InlineData(true)]// Log MSB1234, BuildWarningsNotAsErrors takes priority\n+        [InlineData(false)]\n+        public void WarningsNotAsErrorsAndMessages_Tests(bool useMSPrefix)\n+        {\n+            string Warning = \"MSB1235\";\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                string prefix = useMSPrefix ? \"MSBuild\" : \"\";\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <PropertyGroup>\n+                        <{prefix}TreatWarningsAsErrors>true</{prefix}TreatWarningsAsErrors>\n+                        <{prefix}WarningsNotAsErrors>{Warning}</{prefix}WarningsNotAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <Warning Text=\"\"some random text\"\" Code='{Warning}' />\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectSuccess();\n+\n+                logger.WarningCount.ShouldBe(1);\n+                logger.ErrorCount.ShouldBe(0);\n+\n+                logger.AssertLogContains(Warning);\n+            }\n+        }\n+\n+\n+\n+        [Theory]\n+        [InlineData(\"TreatWarningsAsErrors\", \"true\", false)] // All warnings are treated as errors\n+        [InlineData(\"WarningsAsErrors\", \"MSB1007\", false)]\n+        [InlineData(\"WarningsAsMessages\", \"MSB1007\", false)]\n+        [InlineData(\"WarningsNotAsErrors\", \"MSB1007\", true)]\n+        public void WarningsChangeWaveTest(string property, string propertyData, bool treatWarningsAsErrors)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                string warningCode = \"MSB1007\";\n+                string treatWarningsAsErrorsCodeProperty = treatWarningsAsErrors ? \"<MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>\" : \"\";\n+                env.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", ChangeWaves.Wave17_14.ToString());\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <PropertyGroup>\n+                        {treatWarningsAsErrorsCodeProperty}\n+                        <{property}>{propertyData}</{property}>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <Warning Text=\"\"some random text\"\" Code='{warningCode}' />\n+                    </Target>\n+                </Project>\");\n+                if (treatWarningsAsErrors)\n+                {\n+                    // Since the \"no prefix\" variations can't do anything with the change wave disabled, this should always fail.\n+                    MockLogger logger = proj.BuildProjectExpectFailure();",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Doesn't setting this env var require calling\r\n\r\n```c#\r\n                ChangeWaves.ResetStateForTests();\r\n```\r\n\r\n?",
              "createdAt": "2024-11-18T17:55:13Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -310,6 +391,77 @@ public void WarningsAsErrorsAndMessages_Tests(string WarningsAsMessages,\n             }\n         }\n \n+        [Theory]\n+\n+        [InlineData(true)]// Log MSB1234, BuildWarningsNotAsErrors takes priority\n+        [InlineData(false)]\n+        public void WarningsNotAsErrorsAndMessages_Tests(bool useMSPrefix)\n+        {\n+            string Warning = \"MSB1235\";\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                string prefix = useMSPrefix ? \"MSBuild\" : \"\";\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <PropertyGroup>\n+                        <{prefix}TreatWarningsAsErrors>true</{prefix}TreatWarningsAsErrors>\n+                        <{prefix}WarningsNotAsErrors>{Warning}</{prefix}WarningsNotAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <Warning Text=\"\"some random text\"\" Code='{Warning}' />\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectSuccess();\n+\n+                logger.WarningCount.ShouldBe(1);\n+                logger.ErrorCount.ShouldBe(0);\n+\n+                logger.AssertLogContains(Warning);\n+            }\n+        }\n+\n+\n+\n+        [Theory]\n+        [InlineData(\"TreatWarningsAsErrors\", \"true\", false)] // All warnings are treated as errors\n+        [InlineData(\"WarningsAsErrors\", \"MSB1007\", false)]\n+        [InlineData(\"WarningsAsMessages\", \"MSB1007\", false)]\n+        [InlineData(\"WarningsNotAsErrors\", \"MSB1007\", true)]\n+        public void WarningsChangeWaveTest(string property, string propertyData, bool treatWarningsAsErrors)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                string warningCode = \"MSB1007\";\n+                string treatWarningsAsErrorsCodeProperty = treatWarningsAsErrors ? \"<MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>\" : \"\";\n+                env.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", ChangeWaves.Wave17_14.ToString());",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Probably an omission on my part.\r\nI've short-circuited by reasoning that we're in a separate Environment due to the \r\n` using (TestEnvironment env = TestEnvironment.Create(_output))` few lines above. However now that I looked closer, it looks that it isn't \"create a fully contained separate environment\" but more like a \"create a new folder and do some basic cleanup\" kind of setup.\r\nWhat further made me believe in this was the fact that no other test has failed. (And I think there are already few other tests that use this change wave).\r\nAll in all, I'm probably wrong, however in such case I have a question: why didn't anything fail?\r\nI would expect some base line test to catch this failure to be around, somewhere.\r\n -  could it be luck of the draw by the test running last?\r\n - any chance this \"dirties\" the environment of the machine it runs on for the future run?",
              "createdAt": "2024-11-18T19:14:26Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -310,6 +391,77 @@ public void WarningsAsErrorsAndMessages_Tests(string WarningsAsMessages,\n             }\n         }\n \n+        [Theory]\n+\n+        [InlineData(true)]// Log MSB1234, BuildWarningsNotAsErrors takes priority\n+        [InlineData(false)]\n+        public void WarningsNotAsErrorsAndMessages_Tests(bool useMSPrefix)\n+        {\n+            string Warning = \"MSB1235\";\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                string prefix = useMSPrefix ? \"MSBuild\" : \"\";\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <PropertyGroup>\n+                        <{prefix}TreatWarningsAsErrors>true</{prefix}TreatWarningsAsErrors>\n+                        <{prefix}WarningsNotAsErrors>{Warning}</{prefix}WarningsNotAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <Warning Text=\"\"some random text\"\" Code='{Warning}' />\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectSuccess();\n+\n+                logger.WarningCount.ShouldBe(1);\n+                logger.ErrorCount.ShouldBe(0);\n+\n+                logger.AssertLogContains(Warning);\n+            }\n+        }\n+\n+\n+\n+        [Theory]\n+        [InlineData(\"TreatWarningsAsErrors\", \"true\", false)] // All warnings are treated as errors\n+        [InlineData(\"WarningsAsErrors\", \"MSB1007\", false)]\n+        [InlineData(\"WarningsAsMessages\", \"MSB1007\", false)]\n+        [InlineData(\"WarningsNotAsErrors\", \"MSB1007\", true)]\n+        public void WarningsChangeWaveTest(string property, string propertyData, bool treatWarningsAsErrors)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                string warningCode = \"MSB1007\";\n+                string treatWarningsAsErrorsCodeProperty = treatWarningsAsErrors ? \"<MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>\" : \"\";\n+                env.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", ChangeWaves.Wave17_14.ToString());",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "After some further discussion it might not be needed after all.",
              "createdAt": "2024-11-20T08:39:17Z",
              "path": "src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs",
              "diffHunk": "@@ -310,6 +391,77 @@ public void WarningsAsErrorsAndMessages_Tests(string WarningsAsMessages,\n             }\n         }\n \n+        [Theory]\n+\n+        [InlineData(true)]// Log MSB1234, BuildWarningsNotAsErrors takes priority\n+        [InlineData(false)]\n+        public void WarningsNotAsErrorsAndMessages_Tests(bool useMSPrefix)\n+        {\n+            string Warning = \"MSB1235\";\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                string prefix = useMSPrefix ? \"MSBuild\" : \"\";\n+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@\"\n+                <Project>\n+                    <PropertyGroup>\n+                        <{prefix}TreatWarningsAsErrors>true</{prefix}TreatWarningsAsErrors>\n+                        <{prefix}WarningsNotAsErrors>{Warning}</{prefix}WarningsNotAsErrors>\n+                    </PropertyGroup>\n+                    <Target Name='Build'>\n+                        <Warning Text=\"\"some random text\"\" Code='{Warning}' />\n+                    </Target>\n+                </Project>\");\n+\n+                MockLogger logger = proj.BuildProjectExpectSuccess();\n+\n+                logger.WarningCount.ShouldBe(1);\n+                logger.ErrorCount.ShouldBe(0);\n+\n+                logger.AssertLogContains(Warning);\n+            }\n+        }\n+\n+\n+\n+        [Theory]\n+        [InlineData(\"TreatWarningsAsErrors\", \"true\", false)] // All warnings are treated as errors\n+        [InlineData(\"WarningsAsErrors\", \"MSB1007\", false)]\n+        [InlineData(\"WarningsAsMessages\", \"MSB1007\", false)]\n+        [InlineData(\"WarningsNotAsErrors\", \"MSB1007\", true)]\n+        public void WarningsChangeWaveTest(string property, string propertyData, bool treatWarningsAsErrors)\n+        {\n+            using (TestEnvironment env = TestEnvironment.Create(_output))\n+            {\n+                string warningCode = \"MSB1007\";\n+                string treatWarningsAsErrorsCodeProperty = treatWarningsAsErrors ? \"<MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>\" : \"\";\n+                env.SetEnvironmentVariable(\"MSBUILDDISABLEFEATURESFROMVERSION\", ChangeWaves.Wave17_14.ToString());",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      }
    ]
  }
}