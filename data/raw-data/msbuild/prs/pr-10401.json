{
  "number": 10401,
  "title": "Bypass logcontext validity check",
  "body": "Fixes #10342\r\n\r\n### Context\r\nThis change workarounds the attempts to log assembly loads via LoggingContext that was invalidated\r\n\r\n### Theory for rootcause\r\nThe `AssemblyLoad` is AppDomain wide - and doesn't 'respect' current thread nor async context. So if we mount it in one execution context and concurrently executing code leads to assembly loading - it'll still be reported. The handler is executed synchronously - meaning the originally mounting code can be continuing execution and eventually invalidating the passed LoggingContext.\r\n\r\n### Analysis Details\r\nThe added diagnostic showed the context tha was invalid was `TaskLoggingContext`, it as well showed that it was happening in msbuild within sdk (hence core version).\r\n\r\nThe `TaskLoggingContext` is passed to Tracker in 2 locations:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/486dbb4a9a7885b8fdcb1f8affd4d63444d8d8e4/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs#L389-L392\r\n\r\nThis is not part of core version - so out of question for us\r\n\r\nAnd\r\n\r\nhttps://github.com/dotnet/msbuild/blob/486dbb4a9a7885b8fdcb1f8affd4d63444d8d8e4/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs#L648-L671\r\n\r\nHere the tracker is wrapped in using - so the LoggingContex would need to be invalidated in this scope (or passed already invalid).\r\n\r\n`TaskLoggingContext` is allways created valid (`IsValid` set to `true` in constructor) and only invalidated in\r\n\r\nhttps://github.com/dotnet/msbuild/blob/486dbb4a9a7885b8fdcb1f8affd4d63444d8d8e4/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs#L125-L136\r\n\r\nwhich is called in a single place - in `ExecuteBucket`, which is outer scope for `InitializeAndExecuteTask` that contains the tracker call. The `InitializeAndExecuteTask` is async - but it doesn't influence the Dispose scope.\r\n\r\nBUT - the fact that the mounting method (`InitializeAndExecuteTask`) is async suggest that there likely might be concurrently executing code.\r\n\r\nThis points to tracker actually logging an assembly load event from unrelated thread - supported by the fact that the AssemblyLoadsTracker seems to be on the very 'bottom' of the stack:\r\n\r\n<img width=\"446\" alt=\"image\" src=\"https://github.com/user-attachments/assets/4ba9110a-3578-4532-9520-2f7850f56830\">\r\n\r\n\r\nWhile the handler should be executed synchronously - so we'd expect the `TaskBuilder` frames below the tracker frames.\r\n\r\n\r\nSimple unrelated test of trying to mount `AssemblyLoad` event in main function with simple console output, shows that the assembly loads can be reported from unrelated threads (while those 'hide' their frames, as they are not considered 'user code'):\r\n\r\n<img width=\"407\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8d6a7d1a-99cc-4bdc-b87c-2d1dda1b93fd\">\r\n\r\n\r\nBased on the stats from builds - this was happening as well in the past - just not that often. So it's not a new regression, just some change (our or arcade) increased parallel execution or loading of assemblies on other threads.\r\n\r\nIn ideal situation we'd 'somehow' filter out the assembly load events that are from different `AsyncContext`/`ExecutionContext`/`SynchronizationContext` than the one requesting the tracking - but it is currently not worth the efforts.",
  "state": "MERGED",
  "createdAt": "2024-07-17T19:35:52Z",
  "updatedAt": "2024-07-18T08:08:28Z",
  "closedAt": "2024-07-18T08:08:27Z",
  "mergedAt": "2024-07-18T08:08:27Z",
  "additions": 5,
  "deletions": 3,
  "changedFiles": 2,
  "headRefName": "bugix/assembly-tracker-exc",
  "isDraft": false,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "e462e3f6b8e41a06a449f01dec8929b13ec1c775",
          "message": "Bypass logcontext validity check",
          "committedDate": "2024-07-17T19:04:29Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0b49e9d5be7f68a4586963a9139898a93fe5b3a5",
          "message": "Update from PR comments\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-07-18T06:12:28Z",
          "author": {
            "name": "Jan Krivanek",
            "email": "jankrivanek@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                // bypass the logging context validity check: it's possible that the load happened\r\n                // on a thread unrelated to the context we're tracking loads in\r\n```",
              "createdAt": "2024-07-17T21:50:49Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/AssemblyLoadsTracker.cs",
              "diffHunk": "@@ -171,7 +171,8 @@ private void CurrentDomainOnAssemblyLoad(object? sender, AssemblyLoadEventArgs a\n             if (_loggingContext?.BuildEventContext != null)\n             {\n                 buildArgs.BuildEventContext = _loggingContext.BuildEventContext;\n-                _loggingContext.LogBuildEvent(buildArgs);\n+                // bypass the logging context validity check",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}