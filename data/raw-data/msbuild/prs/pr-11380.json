{
  "number": 11380,
  "title": "Avoid creation of temporary strings where possible",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-02-03T19:41:27Z",
  "updatedAt": "2025-05-13T17:44:19Z",
  "closedAt": "2025-02-11T18:00:28Z",
  "mergedAt": "2025-02-11T18:00:28Z",
  "additions": 12,
  "deletions": 7,
  "changedFiles": 3,
  "headRefName": "dev/erarndt/avoidCreatingStrings",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1162d0b51cb656da9f5d629b8f3d3edb408bfbfc",
          "message": "Avoid creation of temporary strings where possible",
          "committedDate": "2025-02-03T19:34:05Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Path.HasExtension?",
              "createdAt": "2025-02-04T09:17:36Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -456,9 +456,7 @@ private AssemblyNameExtension GetAssemblyName(string path)\n             // then we can short-circuit the File IO involved with GetAssemblyName()\n             if (redistList != null)\n             {\n-                string extension = Path.GetExtension(path);\n-\n-                if (string.Equals(extension, \".dll\", StringComparison.OrdinalIgnoreCase))\n+                if (!string.IsNullOrEmpty(path) && path.EndsWith(\".dll\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "davkean"
              }
            },
            {
              "body": "That means \"does this path have an extension\", not \"does this path have the specified extension\", sadly.",
              "createdAt": "2025-02-04T16:12:46Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -456,9 +456,7 @@ private AssemblyNameExtension GetAssemblyName(string path)\n             // then we can short-circuit the File IO involved with GetAssemblyName()\n             if (redistList != null)\n             {\n-                string extension = Path.GetExtension(path);\n-\n-                if (string.Equals(extension, \".dll\", StringComparison.OrdinalIgnoreCase))\n+                if (!string.IsNullOrEmpty(path) && path.EndsWith(\".dll\", StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Are you doing this explicitly here to be conservative/localized (totally legit!) or because there's a reason not to shift to Microsoft.IO.Redist elsewhere in this file?",
              "createdAt": "2025-02-04T17:56:49Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -299,7 +299,11 @@ public bool IsTraversal\n             {\n                 if (!_isTraversalProject.HasValue)\n                 {\n-                    if (String.Equals(Path.GetFileName(ProjectFullPath), \"dirs.proj\", StringComparison.OrdinalIgnoreCase))\n+#if NET471_OR_GREATER\n+                    if (MemoryExtensions.Equals(Microsoft.IO.Path.GetFileName(ProjectFullPath.AsSpan()), \"dirs.proj\".AsSpan(), StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "There can be subtle differences in behavior between NetFX System.IO.Path and Microsoft.IO.Path, so this was meant to be a surgical update to minimize churn. In other repositories, we've seen measurable improvement fully switching over to Microsoft.IO, so this should be considered as well.\r\n\r\nOne thing to note: Since Microsoft.IO is a snapshot of improvements backported for NetFX, we want to use System.IO in .NET 5+. That way we'll continue to benefit from future improvements.",
              "createdAt": "2025-02-04T18:07:15Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -299,7 +299,11 @@ public bool IsTraversal\n             {\n                 if (!_isTraversalProject.HasValue)\n                 {\n-                    if (String.Equals(Path.GetFileName(ProjectFullPath), \"dirs.proj\", StringComparison.OrdinalIgnoreCase))\n+#if NET471_OR_GREATER\n+                    if (MemoryExtensions.Equals(Microsoft.IO.Path.GetFileName(ProjectFullPath.AsSpan()), \"dirs.proj\".AsSpan(), StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "Erarndt"
              }
            },
            {
              "body": "Yeah we've moved a bunch of stuff to IO.Redist; that has in turn broken various callers sometimes--I was trying to get a read on this one. Happy to go forward with this as-is.",
              "createdAt": "2025-02-04T18:59:22Z",
              "path": "src/Build/BackEnd/Shared/BuildRequestConfiguration.cs",
              "diffHunk": "@@ -299,7 +299,11 @@ public bool IsTraversal\n             {\n                 if (!_isTraversalProject.HasValue)\n                 {\n-                    if (String.Equals(Path.GetFileName(ProjectFullPath), \"dirs.proj\", StringComparison.OrdinalIgnoreCase))\n+#if NET471_OR_GREATER\n+                    if (MemoryExtensions.Equals(Microsoft.IO.Path.GetFileName(ProjectFullPath.AsSpan()), \"dirs.proj\".AsSpan(), StringComparison.OrdinalIgnoreCase))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}