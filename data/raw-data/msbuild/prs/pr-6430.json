{
  "number": 6430,
  "title": "Allow projects with no restore target to build under `dotnet build`",
  "body": "Work item (Internal use): [AB#1326205](https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1326205/)\r\n\r\nSummary\r\nWe introduced a new error with #6312 when there is no restore target. Builds had previously failed mysteriously after Restore had failed (because it didn't exist) but not failed the whole build. We put it under a change wave in #6372, but we still decided to revisit it. Specifically, if customers don't intentionally request a restore, dotnet build will still implicitly add one. With that change, customers without a restore target will then fail. They may not have a valid restore target because they failed to resolve an SDK\u2014a problem we should alert them to\u2014but they also might not have needed it.\r\n\r\nThis change maintains the SDK resolution failure case but dispenses with the missing target failure case.\r\n\r\nCustomer Impact\r\nCustomers calling restore (including indirectly through `dotnet build`) see failures if there is no restore target, including when no sdk with a restore target is in use.\r\n\r\nRegression?\r\nYes. Worked in 16.9, regressed in 16.10.0 because of https://github.com/dotnet/msbuild/pull/6312\r\n\r\nTesting\r\nUnit tests and tried a local repro that didn't work with the bootstrap version.\r\n\r\nRisk\r\nLow. Just removes a new error.",
  "state": "MERGED",
  "createdAt": "2021-05-07T20:34:01Z",
  "updatedAt": "2021-05-11T18:07:36Z",
  "closedAt": "2021-05-11T18:06:57Z",
  "mergedAt": "2021-05-11T18:06:57Z",
  "additions": 20,
  "deletions": 155,
  "changedFiles": 9,
  "headRefName": "fail-on-missing-sdk-only",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Servicing-approved"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "91f89ed5b3720e36cff02b6de666cf2148699f80",
          "message": "Revert failure on missing SDK\n\nReverts #6312 and #6372.\nSHAs reverted: 29dc5e1da5e0e7b70e49c1b53f3e1e4f5acbec6c and da900e2a6d7109e973f9eb712b4afdb456610c9b respectively.",
          "committedDate": "2021-05-10T16:08:17Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8122115ce5085eb169e7080c3eeb4eba1175c374",
          "message": "Add option to fail on unresolved SDK\n\nMaximal subset of #6312 and #6372.\n\nAlso removes an unnecessary test per https://github.com/dotnet/msbuild/pull/6430#discussion_r628523058",
          "committedDate": "2021-05-10T16:08:17Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "389daf5bd47902ee3d925c3fe55f2a0580aa1f73",
          "message": "Put change under change wave",
          "committedDate": "2021-05-10T16:08:36Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Will this change ever stop happening?",
              "createdAt": "2021-05-07T21:01:07Z",
              "path": "ref/Microsoft.Build/net/Microsoft.Build.cs",
              "diffHunk": "@@ -1572,8 +1574,8 @@ public partial class GraphBuildOptions : System.IEquatable<Microsoft.Build.Graph\n         public virtual bool Equals(Microsoft.Build.Graph.GraphBuildOptions other) { throw null; }\n         public override bool Equals(object obj) { throw null; }\n         public override int GetHashCode() { throw null; }\n-        public static bool operator ==(Microsoft.Build.Graph.GraphBuildOptions r1, Microsoft.Build.Graph.GraphBuildOptions r2) { throw null; }\n-        public static bool operator !=(Microsoft.Build.Graph.GraphBuildOptions r1, Microsoft.Build.Graph.GraphBuildOptions r2) { throw null; }\n+        public static bool operator ==(Microsoft.Build.Graph.GraphBuildOptions left, Microsoft.Build.Graph.GraphBuildOptions right) { throw null; }",
              "author": {
                "login": "jeffkl"
              }
            },
            {
              "body": "I think it's because on our desktops we're using a newer C# compiler. Which actually suggests a fix, let me see if it works.",
              "createdAt": "2021-05-07T21:06:20Z",
              "path": "ref/Microsoft.Build/net/Microsoft.Build.cs",
              "diffHunk": "@@ -1572,8 +1574,8 @@ public partial class GraphBuildOptions : System.IEquatable<Microsoft.Build.Graph\n         public virtual bool Equals(Microsoft.Build.Graph.GraphBuildOptions other) { throw null; }\n         public override bool Equals(object obj) { throw null; }\n         public override int GetHashCode() { throw null; }\n-        public static bool operator ==(Microsoft.Build.Graph.GraphBuildOptions r1, Microsoft.Build.Graph.GraphBuildOptions r2) { throw null; }\n-        public static bool operator !=(Microsoft.Build.Graph.GraphBuildOptions r1, Microsoft.Build.Graph.GraphBuildOptions r2) { throw null; }\n+        public static bool operator ==(Microsoft.Build.Graph.GraphBuildOptions left, Microsoft.Build.Graph.GraphBuildOptions right) { throw null; }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "yup: https://github.com/dotnet/msbuild/pull/6431\r\n\r\nThank you for making me think of this in a way that revealed the problem . . .",
              "createdAt": "2021-05-07T21:24:55Z",
              "path": "ref/Microsoft.Build/net/Microsoft.Build.cs",
              "diffHunk": "@@ -1572,8 +1574,8 @@ public partial class GraphBuildOptions : System.IEquatable<Microsoft.Build.Graph\n         public virtual bool Equals(Microsoft.Build.Graph.GraphBuildOptions other) { throw null; }\n         public override bool Equals(object obj) { throw null; }\n         public override int GetHashCode() { throw null; }\n-        public static bool operator ==(Microsoft.Build.Graph.GraphBuildOptions r1, Microsoft.Build.Graph.GraphBuildOptions r2) { throw null; }\n-        public static bool operator !=(Microsoft.Build.Graph.GraphBuildOptions r1, Microsoft.Build.Graph.GraphBuildOptions r2) { throw null; }\n+        public static bool operator ==(Microsoft.Build.Graph.GraphBuildOptions left, Microsoft.Build.Graph.GraphBuildOptions right) { throw null; }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This unit test is no longer applicable",
              "createdAt": "2021-05-07T21:02:02Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2108,6 +2108,85 @@ public void RestoreIgnoresMissingImports()\n             logContents.ShouldContain(guid2);\n         }\n \n+        /// <summary>\n+        /// When specifying /t:restore, fail when an SDK can't be resolved.  Previous behavior was to try and continue anyway but then \"restore\" would succeed and build workflows continue on.\n+        /// </summary>\n+        [Fact]\n+        public void RestoreFailsOnUnresolvedSdk()\n+        {\n+            string projectContents = ObjectModelHelpers.CleanupFileContents(\n+$@\"<Project>\n+  <Sdk Name=\"\"UnresolvedSdk\"\" />\n+  <Target Name=\"\"Restore\"\">\n+    <Message Text=\"\"Restore target ran\"\" />\n+  </Target>\n+</Project>\");\n+\n+            string logContents = ExecuteMSBuildExeExpectFailure(projectContents, arguments: \"/t:restore\");\n+\n+            logContents.ShouldContain(\"error MSB4236: The SDK 'UnresolvedSdk' specified could not be found.\");\n+        }\n+\n+        /// <summary>\n+        /// Verifies a non-existent target doesn't fail restore as long as its not considered an entry target, in this case Restore.\n+        /// </summary>\n+        [Fact]\n+        public void RestoreSkipsNonExistentNonEntryTargets()",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Leave this one here just for good measure",
              "createdAt": "2021-05-07T21:02:40Z",
              "path": "src/MSBuild.UnitTests/XMake_Tests.cs",
              "diffHunk": "@@ -2108,6 +2108,85 @@ public void RestoreIgnoresMissingImports()\n             logContents.ShouldContain(guid2);\n         }\n \n+        /// <summary>\n+        /// When specifying /t:restore, fail when an SDK can't be resolved.  Previous behavior was to try and continue anyway but then \"restore\" would succeed and build workflows continue on.\n+        /// </summary>\n+        [Fact]\n+        public void RestoreFailsOnUnresolvedSdk()\n+        {\n+            string projectContents = ObjectModelHelpers.CleanupFileContents(\n+$@\"<Project>\n+  <Sdk Name=\"\"UnresolvedSdk\"\" />\n+  <Target Name=\"\"Restore\"\">\n+    <Message Text=\"\"Restore target ran\"\" />\n+  </Target>\n+</Project>\");\n+\n+            string logContents = ExecuteMSBuildExeExpectFailure(projectContents, arguments: \"/t:restore\");\n+\n+            logContents.ShouldContain(\"error MSB4236: The SDK 'UnresolvedSdk' specified could not be found.\");\n+        }\n+\n+        /// <summary>\n+        /// Verifies a non-existent target doesn't fail restore as long as its not considered an entry target, in this case Restore.\n+        /// </summary>\n+        [Fact]\n+        public void RestoreSkipsNonExistentNonEntryTargets()\n+        {\n+            string restoreFirstProps = $\"{Guid.NewGuid():N}.props\";\n+\n+            string projectContents = ObjectModelHelpers.CleanupFileContents(\n+$@\"<Project DefaultTargets=\"\"Build\"\" InitialTargets=\"\"TargetThatComesFromRestore\"\">\n+  <PropertyGroup>\n+    <RestoreFirstProps>{restoreFirstProps}</RestoreFirstProps>\n+  </PropertyGroup>\n+  \n+  <Import Project=\"\"$(RestoreFirstProps)\"\" />\n+  <Target Name=\"\"Restore\"\">\n+    <Message Text=\"\"Restore target ran\"\" />\n+    <ItemGroup>\n+      <Lines Include=\"\"&lt;Project&gt;&lt;Target Name=&quot;TargetThatComesFromRestore&quot;&gt;&lt;Message Text=&quot;Initial target ran&quot; /&gt;&lt;/Target&gt;&lt;/Project&gt;\"\" />\n+    </ItemGroup>\n+    \n+    <WriteLinesToFile File=\"\"$(RestoreFirstProps)\"\" Lines=\"\"@(Lines)\"\" Overwrite=\"\"true\"\" />\n+  </Target>\n+  <Target Name=\"\"Build\"\">\n+    <Message Text=\"\"Build target ran&quot;\"\" />\n+  </Target>\n+</Project>\");\n+\n+            string logContents = ExecuteMSBuildExeExpectSuccess(projectContents, arguments: \"/restore\");\n+\n+            logContents.ShouldContain(\"Restore target ran\");\n+            logContents.ShouldContain(\"Build target ran\");\n+            logContents.ShouldContain(\"Initial target ran\");\n+        }\n+\n+        /// <summary>\n+        /// Verifies restore will run InitialTargets.\n+        /// </summary>\n+        [Fact]\n+        public void RestoreRunsInitialTargets()",
              "author": {
                "login": "jeffkl"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Isn't half of this still applicable?",
              "createdAt": "2021-05-07T21:57:40Z",
              "path": "documentation/wiki/ChangeWaves.md",
              "diffHunk": "@@ -27,7 +27,6 @@ The opt-out comes in the form of setting the environment variable `MSBuildDisabl\n - [Error when a property expansion in a condition has whitespace](https://github.com/dotnet/msbuild/pull/5672)\n - [Allow Custom CopyToOutputDirectory Location With TargetPath](https://github.com/dotnet/msbuild/pull/6237)\n - [Allow users that have certain special characters in their username to build successfully when using exec](https://github.com/dotnet/msbuild/pull/6223)\n-- [Fail restore operations when there is no `Restore` target or an SDK is unresolveable](https://github.com/dotnet/msbuild/pull/6312)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yep! Will fix, thanks.",
              "createdAt": "2021-05-07T22:12:43Z",
              "path": "documentation/wiki/ChangeWaves.md",
              "diffHunk": "@@ -27,7 +27,6 @@ The opt-out comes in the form of setting the environment variable `MSBuildDisabl\n - [Error when a property expansion in a condition has whitespace](https://github.com/dotnet/msbuild/pull/5672)\n - [Allow Custom CopyToOutputDirectory Location With TargetPath](https://github.com/dotnet/msbuild/pull/6237)\n - [Allow users that have certain special characters in their username to build successfully when using exec](https://github.com/dotnet/msbuild/pull/6223)\n-- [Fail restore operations when there is no `Restore` target or an SDK is unresolveable](https://github.com/dotnet/msbuild/pull/6312)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't think I understand this. Why is it not wave 16.10, the one for the release this is targeting? What is this expression representing? Why not do this the way it was done in the prior commit and condition adding the new flag on the changewave?",
              "createdAt": "2021-05-07T22:01:34Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1785,8 +1785,7 @@ private List<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportin\n \n                 if (!sdkResult.Success)\n                 {\n-                    // Ignore the missing import if IgnoreMissingImports is set unless FailOnUnresolvedSdk is also set\n-                    if (_loadSettings.HasFlag(ProjectLoadSettings.IgnoreMissingImports) && !_loadSettings.HasFlag(ProjectLoadSettings.FailOnUnresolvedSdk))\n+                    if (_loadSettings.HasFlag(ProjectLoadSettings.IgnoreMissingImports) && (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0) || !_loadSettings.HasFlag(ProjectLoadSettings.FailOnUnresolvedSdk)))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Will change to 16.10. I can also retarget this to vs16.10, since it's currently at master.\r\n\r\nI think making the change in either place should be equivalent. I thought this would be cleaner. If you don't like it, I can change to the other way, though.",
              "createdAt": "2021-05-07T22:36:24Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -1785,8 +1785,7 @@ private List<ProjectRootElement> ExpandAndLoadImports(string directoryOfImportin\n \n                 if (!sdkResult.Success)\n                 {\n-                    // Ignore the missing import if IgnoreMissingImports is set unless FailOnUnresolvedSdk is also set\n-                    if (_loadSettings.HasFlag(ProjectLoadSettings.IgnoreMissingImports) && !_loadSettings.HasFlag(ProjectLoadSettings.FailOnUnresolvedSdk))\n+                    if (_loadSettings.HasFlag(ProjectLoadSettings.IgnoreMissingImports) && (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0) || !_loadSettings.HasFlag(ProjectLoadSettings.FailOnUnresolvedSdk)))",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}