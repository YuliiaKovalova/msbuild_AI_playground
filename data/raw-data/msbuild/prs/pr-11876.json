{
  "number": 11876,
  "title": "[vs15.9] Merge tag v15.9.30",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-05-21T11:54:41Z",
  "updatedAt": "2025-05-26T15:12:28Z",
  "closedAt": "2025-05-26T15:12:18Z",
  "mergedAt": "2025-05-26T15:12:18Z",
  "additions": 344,
  "deletions": 2762,
  "changedFiles": 14,
  "headRefName": "msbuild/vs15.9",
  "isDraft": false,
  "author": {
    "login": "surayya-MS"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "8855444821e894895d41bc2670ed7266a8e05eee",
          "message": "Merged PR 631246: Onboard 1es templates\n\nTaken from https://github.com/dotnet/msbuild/pull/11654/files",
          "committedDate": "2025-04-24T15:20:03Z",
          "author": {
            "name": "Yuliia Kovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c0e4b0e6834d8605c8b82834c87d0dd38c0674a4",
          "message": "Merged PR 631251: [vs15.9] DownloadFile should not rely on the response headers\n\nDownloadFile should not rely on the remote server response headers. Unless the DestinationFileName task parameter is specified - let's just fallback to the request URI - which is as well the publicly documented behavior",
          "committedDate": "2025-04-24T15:33:09Z",
          "author": {
            "name": "Yuliia Kovalova",
            "email": "ykovalova@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "The skip condition was inverted to only skip when the destination is strictly newer; to avoid redundant downloads when timestamps are equal, consider using >= instead of >.\n```suggestion\n                   && destinationFile.LastWriteTimeUtc >= response.Content.Headers.LastModified.Value.UtcDateTime;\n```",
              "createdAt": "2025-05-21T11:56:23Z",
              "path": "src/Tasks/DownloadFile.cs",
              "diffHunk": "@@ -289,7 +304,7 @@ private bool ShouldSkip(HttpResponseMessage response, FileInfo destinationFile)\n                    && destinationFile.Exists\n                    && destinationFile.Length == response.Content.Headers.ContentLength\n                    && response.Content.Headers.LastModified.HasValue\n-                   && destinationFile.LastWriteTimeUtc < response.Content.Headers.LastModified.Value.UtcDateTime;\n+                   && destinationFile.LastWriteTimeUtc > response.Content.Headers.LastModified.Value.UtcDateTime;",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Using a 1KB buffer for `CopyToAsync` is very small and may degrade throughput. Consider using a larger buffer (e.g., 81920 bytes) or the default overload for better performance.\n```suggestion\n                                await responseStream.CopyToAsync(target, 81920, cancellationToken).ConfigureAwait(false);\n```",
              "createdAt": "2025-05-21T11:56:24Z",
              "path": "src/Tasks/DownloadFile.cs",
              "diffHunk": "@@ -158,15 +173,16 @@ private void Download(Uri uri)\n \n                     try\n                     {\n+                        cancellationToken.ThrowIfCancellationRequested();\n+\n                         using (var target = new FileStream(destinationFile.FullName, FileMode.Create, FileAccess.Write, FileShare.None))\n                         {\n                             Log.LogMessageFromResources(MessageImportance.High, \"DownloadFile.Downloading\", SourceUrl, destinationFile.FullName, response.Content.Headers.ContentLength);\n \n-                            Task task = response.Content.CopyToAsync(target);\n-\n-                            task.ConfigureAwait(continueOnCapturedContext: false);\n-\n-                            task.Wait(_cancellationTokenSource.Token);\n+                            using (Stream responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))\n+                            {\n+                                await responseStream.CopyToAsync(target, 1024, cancellationToken).ConfigureAwait(false);",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      }
    ]
  }
}