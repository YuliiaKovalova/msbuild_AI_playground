{
  "number": 8449,
  "title": "Specialcase restore",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "CLOSED",
  "createdAt": "2023-02-15T00:43:44Z",
  "updatedAt": "2023-04-04T16:14:13Z",
  "closedAt": "2023-04-04T16:14:09Z",
  "mergedAt": null,
  "additions": 121,
  "deletions": 62,
  "changedFiles": 4,
  "headRefName": "specialcase-restore",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": {
    "title": "VS 17.7"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "4c9fe62006a4169e3a1593036b6341c9afee981b",
          "message": "Specialcase restore",
          "committedDate": "2023-02-15T00:43:31Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a51cc4122bf994930b827dbc3e7d1168fd88b8ce",
          "message": "Minor updates",
          "committedDate": "2023-02-23T00:36:02Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@Forgind should we close this since #8619 already has a special case?",
        "createdAt": "2023-04-04T15:58:55Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Sorry I'm not very familiar with the the build events sequencing - is this the proper place? Or would the TargetFinished (for Restore target) be actually a better place?",
              "createdAt": "2023-02-15T10:54:16Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -161,71 +166,95 @@ private void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs\n             node.ShouldRerender = true;\n             finishedProjects++;\n             UpdateFooter();\n+\n+            if (restoringProjects > 0)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should the commented code be uncommented, or should all this be actually completely removed?",
              "createdAt": "2023-02-15T10:56:45Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -161,71 +166,95 @@ private void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs\n             node.ShouldRerender = true;\n             finishedProjects++;\n             UpdateFooter();\n+\n+            if (restoringProjects > 0)\n+            {\n+                restoringProjects--;\n+                if (restoringProjects == 0)\n+                {\n+                    TerminalBuffer.IsRestoring = false;\n+                    TerminalBuffer.WriteNewLine($\"Restore completed in {(e.Timestamp - restoreTimestamp)?.TotalMilliseconds} milliseconds\");\n+                    startedProjects = 0;\n+                    finishedProjects = 0;\n+                }\n+            }\n         }\n \n         // Target\n         private void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)\n         {\n-            // Get project id\n-            int id = e.BuildEventContext!.ProjectInstanceId;\n-            if (!projects.TryGetValue(id, out ProjectNode? node))\n+            if (!TerminalBuffer.IsRestoring)\n             {\n-                return;\n+                // Get project id\n+                int id = e.BuildEventContext!.ProjectInstanceId;\n+                if (!projects.TryGetValue(id, out ProjectNode? node))\n+                {\n+                    return;\n+                }\n+                // Update\n+                node.AddTarget(e);\n+                // Log\n+                node.ShouldRerender = true;\n             }\n-            // Update\n-            node.AddTarget(e);\n-            // Log\n-            node.ShouldRerender = true;\n         }\n \n         private void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)\n         {\n-            // Get project id\n-            int id = e.BuildEventContext!.ProjectInstanceId;\n-            if (!projects.TryGetValue(id, out ProjectNode? node))\n+            if (!TerminalBuffer.IsRestoring)\n             {\n-                return;\n+                // Get project id\n+                int id = e.BuildEventContext!.ProjectInstanceId;\n+                if (!projects.TryGetValue(id, out ProjectNode? node))\n+                {\n+                    return;\n+                }\n+                // Update\n+                node.FinishedTargets++;\n+                // Log\n+                node.ShouldRerender = true;\n             }\n-            // Update\n-            node.FinishedTargets++;\n-            // Log\n-            node.ShouldRerender = true;\n         }\n \n         // Task\n         private void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)\n         {\n-            // Get project id\n-            int id = e.BuildEventContext!.ProjectInstanceId;\n-            if (!projects.TryGetValue(id, out ProjectNode? node))\n+            if (!TerminalBuffer.IsRestoring)\n             {\n-                return;\n-            }\n-            // Update\n-            node.AddTask(e);\n-            // Log\n-            node.ShouldRerender = true;\n+                // Get project id\n+                int id = e.BuildEventContext!.ProjectInstanceId;\n+                if (!projects.TryGetValue(id, out ProjectNode? node))\n+                {\n+                    return;\n+                }\n+                // Update\n+                node.AddTask(e);\n+                // Log\n+                node.ShouldRerender = true;\n \n-            if (e.TaskName.Equals(\"MSBuild\"))\n-            {\n-                TerminalBufferLine? line = null; // TerminalBuffer.WriteNewLineAfterMidpoint($\"{e.ProjectFile} is blocked by the MSBuild task.\");\n-                if (line is not null)\n+                if (e.TaskName.Equals(\"MSBuild\"))\n                 {\n-                    blockedProjects[e.ProjectFile] = line.Id;\n+                    TerminalBufferLine? line = null; // TerminalBuffer.WriteNewLineAfterMidpoint($\"{e.ProjectFile} is blocked by the MSBuild task.\");\n+                    if (line is not null)",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: This looks like the condition should be just combined to get more compact and less indented code",
              "createdAt": "2023-02-15T10:58:12Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -161,71 +166,95 @@ private void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs\n             node.ShouldRerender = true;\n             finishedProjects++;\n             UpdateFooter();\n+\n+            if (restoringProjects > 0)\n+            {\n+                restoringProjects--;\n+                if (restoringProjects == 0)\n+                {\n+                    TerminalBuffer.IsRestoring = false;\n+                    TerminalBuffer.WriteNewLine($\"Restore completed in {(e.Timestamp - restoreTimestamp)?.TotalMilliseconds} milliseconds\");\n+                    startedProjects = 0;\n+                    finishedProjects = 0;\n+                }\n+            }\n         }\n \n         // Target\n         private void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)\n         {\n-            // Get project id\n-            int id = e.BuildEventContext!.ProjectInstanceId;\n-            if (!projects.TryGetValue(id, out ProjectNode? node))\n+            if (!TerminalBuffer.IsRestoring)\n             {\n-                return;\n+                // Get project id\n+                int id = e.BuildEventContext!.ProjectInstanceId;\n+                if (!projects.TryGetValue(id, out ProjectNode? node))\n+                {\n+                    return;\n+                }\n+                // Update\n+                node.AddTarget(e);\n+                // Log\n+                node.ShouldRerender = true;\n             }\n-            // Update\n-            node.AddTarget(e);\n-            // Log\n-            node.ShouldRerender = true;\n         }\n \n         private void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)\n         {\n-            // Get project id\n-            int id = e.BuildEventContext!.ProjectInstanceId;\n-            if (!projects.TryGetValue(id, out ProjectNode? node))\n+            if (!TerminalBuffer.IsRestoring)\n             {\n-                return;\n+                // Get project id\n+                int id = e.BuildEventContext!.ProjectInstanceId;\n+                if (!projects.TryGetValue(id, out ProjectNode? node))\n+                {\n+                    return;\n+                }\n+                // Update\n+                node.FinishedTargets++;\n+                // Log\n+                node.ShouldRerender = true;\n             }\n-            // Update\n-            node.FinishedTargets++;\n-            // Log\n-            node.ShouldRerender = true;\n         }\n \n         // Task\n         private void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)\n         {\n-            // Get project id\n-            int id = e.BuildEventContext!.ProjectInstanceId;\n-            if (!projects.TryGetValue(id, out ProjectNode? node))\n+            if (!TerminalBuffer.IsRestoring)\n             {\n-                return;\n-            }\n-            // Update\n-            node.AddTask(e);\n-            // Log\n-            node.ShouldRerender = true;\n+                // Get project id\n+                int id = e.BuildEventContext!.ProjectInstanceId;\n+                if (!projects.TryGetValue(id, out ProjectNode? node))\n+                {\n+                    return;\n+                }\n+                // Update\n+                node.AddTask(e);\n+                // Log\n+                node.ShouldRerender = true;\n \n-            if (e.TaskName.Equals(\"MSBuild\"))\n-            {\n-                TerminalBufferLine? line = null; // TerminalBuffer.WriteNewLineAfterMidpoint($\"{e.ProjectFile} is blocked by the MSBuild task.\");\n-                if (line is not null)\n+                if (e.TaskName.Equals(\"MSBuild\"))\n                 {\n-                    blockedProjects[e.ProjectFile] = line.Id;\n+                    TerminalBufferLine? line = null; // TerminalBuffer.WriteNewLineAfterMidpoint($\"{e.ProjectFile} is blocked by the MSBuild task.\");\n+                    if (line is not null)\n+                    {\n+                        blockedProjects[e.ProjectFile] = line.Id;\n+                    }\n                 }\n             }\n         }\n \n         private void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)\n         {\n-            if (e.TaskName.Equals(\"MSBuild\"))\n+            if (!TerminalBuffer.IsRestoring)\n             {\n-                if (blockedProjects.TryGetValue(e.ProjectFile, out int lineId))\n+                if (e.TaskName.Equals(\"MSBuild\"))\n                 {\n-                    TerminalBuffer.DeleteLine(lineId);\n-                    if (projects.TryGetValue(e.BuildEventContext!.ProjectInstanceId, out ProjectNode? node))\n+                    if (blockedProjects.TryGetValue(e.ProjectFile, out int lineId))",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I know this is just copied, but I'd be more defensive here\r\n\r\n```\r\nint id = (e.?BuildEventContext ?? BuildEventContext.Invalid).ProjectInstanceId;\r\n```",
              "createdAt": "2023-02-15T11:02:45Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -234,20 +263,23 @@ private void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)\n         // Raised messages, warnings and errors\n         private void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)\n         {\n-            if (e is TaskCommandLineEventArgs)\n+            if (!TerminalBuffer.IsRestoring)\n             {\n-                return;\n-            }\n-            // Get project id\n-            int id = e.BuildEventContext!.ProjectInstanceId;\n-            if (!projects.TryGetValue(id, out ProjectNode? node))\n-            {\n-                return;\n+                if (e is TaskCommandLineEventArgs)\n+                {\n+                    return;\n+                }\n+                // Get project id\n+                int id = e.BuildEventContext!.ProjectInstanceId;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why allocate new over mutating the existing one in the reentrance case?",
              "createdAt": "2023-02-15T15:31:48Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -134,16 +136,19 @@ private void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n \n-            // If id does not exist...\n-            if (!projects.ContainsKey(id))\n+            // Add or update project\n+            ProjectNode node = new(e)\n             {\n-                // Add project\n-                ProjectNode node = new(e)\n-                {\n-                    ShouldRerender = true,\n-                };\n-                projects[id] = node;\n-                UpdateFooter();\n+                ShouldRerender = true,\n+            };\n+            projects[id] = node;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think it's worth it to explicitly specify `OrdinalIgnoreCase` here even if netfx makes us do it the ugly way\r\n\r\n```suggestion\r\n            if (e.TargetNames?.IndexOf(\"Restore\", StringComparison.OrdinalIgnoreCase) > 0)\r\n```",
              "createdAt": "2023-02-15T15:40:32Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -134,16 +136,19 @@ private void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n \n-            // If id does not exist...\n-            if (!projects.ContainsKey(id))\n+            // Add or update project\n+            ProjectNode node = new(e)\n             {\n-                // Add project\n-                ProjectNode node = new(e)\n-                {\n-                    ShouldRerender = true,\n-                };\n-                projects[id] = node;\n-                UpdateFooter();\n+                ShouldRerender = true,\n+            };\n+            projects[id] = node;\n+            UpdateFooter();\n+\n+            if (e.TargetNames?.Contains(\"Restore\") == true)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't understand this counter--I expected something more like \"remember the ID of the first project that starts `Restore` and be done when that project instance completes\". Does that not work in some circumstance?",
              "createdAt": "2023-02-15T15:43:11Z",
              "path": "src/MSBuild/LiveLogger/LiveLogger.cs",
              "diffHunk": "@@ -134,16 +136,19 @@ private void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e\n             // Get project id\n             int id = e.BuildEventContext!.ProjectInstanceId;\n \n-            // If id does not exist...\n-            if (!projects.ContainsKey(id))\n+            // Add or update project\n+            ProjectNode node = new(e)\n             {\n-                // Add project\n-                ProjectNode node = new(e)\n-                {\n-                    ShouldRerender = true,\n-                };\n-                projects[id] = node;\n-                UpdateFooter();\n+                ShouldRerender = true,\n+            };\n+            projects[id] = node;\n+            UpdateFooter();\n+\n+            if (e.TargetNames?.Contains(\"Restore\") == true)\n+            {\n+                TerminalBuffer.IsRestoring = true;\n+                restoringProjects++;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Future item: I'd like the entrypoint project listed here, so the text becomes something like `Restoring foo.csproj` or `Building bar.sln`.",
              "createdAt": "2023-02-15T15:48:04Z",
              "path": "src/MSBuild/LiveLogger/TerminalBuffer.cs",
              "diffHunk": "@@ -116,7 +117,10 @@ public static void Render()\n                 overallBuildState == OverallBuildState.Warning ? ANSIBuilder.Formatting.ForegroundColor.Yellow :\n                 ANSIBuilder.Formatting.ForegroundColor.White;\n \n-            string text = $\"MSBuild - Build in progress - {FinishedProjects} finished projects\";\n+            string text = IsRestoring ?\n+                $\"MSBuild - Restore in progress - {FinishedProjects} finished projects\" :\n+                $\"MSBuild - Build in progress - {FinishedProjects} finished projects\";",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}