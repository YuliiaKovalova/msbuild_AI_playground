{
  "number": 7305,
  "title": "Improve the Project Cache log strings",
  "body": "This improves the log strings used by the project cache service.\r\n\r\nIn the future, these should probably be move to be proper structured events, but this is incremental progress on making them more \"msbuild-y\" to the user.\r\n\r\nExisting normal and minimal verbosity:\r\n![image](https://user-images.githubusercontent.com/6445614/150232242-cfcc6303-cc96-4ad3-bcc3-96b1f4a1db4d.png)\r\n![image](https://user-images.githubusercontent.com/6445614/150232269-102de02c-c623-49ff-8ec1-cc12e5ff9289.png)\r\n\r\nNew normal and minimal verbosity:\r\n![image](https://user-images.githubusercontent.com/6445614/150232335-66d56d15-c055-4949-aaa0-b2b14bcde8d9.png)\r\n![image](https://user-images.githubusercontent.com/6445614/150232357-701fc81d-c6c2-48aa-907c-5be13fe462ad.png)\r\n",
  "state": "MERGED",
  "createdAt": "2022-01-19T23:03:34Z",
  "updatedAt": "2022-01-25T16:27:39Z",
  "closedAt": "2022-01-25T10:26:21Z",
  "mergedAt": "2022-01-25T10:26:21Z",
  "additions": 1183,
  "deletions": 79,
  "changedFiles": 17,
  "headRefName": "project-cache-string-cleanup",
  "isDraft": false,
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "289294760b754a1535d653238f37bf34d5367f75",
          "message": "Improve the Project Cache log strings",
          "committedDate": "2022-01-19T22:59:26Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c8d91ecff9ff3e02f4a2f27f3396d89c13984bd8",
          "message": "Fix UTs",
          "committedDate": "2022-01-20T00:36:35Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a97f1860cea88ff54f417f2ac6e8bd2e5b054fce",
          "message": "PR comments, fix build, add ETW events",
          "committedDate": "2022-01-20T18:06:55Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3f8b3c1d28234ed0980015ba175f6e159ece77e3",
          "message": "PR Comments",
          "committedDate": "2022-01-20T21:21:29Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bbb24fb8c8208963cfacc0521f74b0cadb422824",
          "message": "PR comments",
          "committedDate": "2022-01-21T06:26:16Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "85444706f17eaf924ffd81800a58bc7efbdd46f8",
          "message": "Merge remote-tracking branch 'upstream/main' into project-cache-string-cleanup",
          "committedDate": "2022-01-25T00:19:17Z",
          "author": {
            "name": "David Federman",
            "email": "dfederm@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm not convinced this can actually happen.... I think the targets are always already materialized here?",
              "createdAt": "2022-01-19T23:05:41Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -479,79 +470,106 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques\n \n             ErrorUtilities.VerifyThrowInternalNull(buildRequest.ProjectInstance, nameof(buildRequest.ProjectInstance));\n \n-            var queryDescription = $\"{buildRequest.ProjectFullPath}\" +\n-                                   $\"\\n\\tTargets:[{string.Join(\", \", buildRequest.TargetNames)}]\" +\n-                                   $\"\\n\\tGlobal Properties: {{{string.Join(\",\", buildRequest.GlobalProperties.Select(kvp => $\"{kvp.Name}={kvp.EvaluatedValue}\"))}}}\";\n-\n             var buildEventFileInfo = new BuildEventFileInfo(buildRequest.ProjectFullPath);\n-            var logger = new LoggingServiceToPluginLoggerAdapter(\n+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(\n                 _loggingService,\n                 buildEventContext,\n                 buildEventFileInfo);\n \n-            logger.LogMessage(\n-                \"\\n====== Querying project cache for project \" + queryDescription,\n-                MessageImportance.High);\n+            string? targetNames = buildRequest.TargetNames != null && buildRequest.TargetNames.Count > 0\n+                ? string.Join(\", \", buildRequest.TargetNames)\n+                : null;\n+            if (string.IsNullOrEmpty(targetNames))",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Well, UTs hit this code path at least, so I guess it may be possible probably, at least when using the API directly and not the CLI.",
              "createdAt": "2022-01-20T00:35:59Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -479,79 +470,106 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques\n \n             ErrorUtilities.VerifyThrowInternalNull(buildRequest.ProjectInstance, nameof(buildRequest.ProjectInstance));\n \n-            var queryDescription = $\"{buildRequest.ProjectFullPath}\" +\n-                                   $\"\\n\\tTargets:[{string.Join(\", \", buildRequest.TargetNames)}]\" +\n-                                   $\"\\n\\tGlobal Properties: {{{string.Join(\",\", buildRequest.GlobalProperties.Select(kvp => $\"{kvp.Name}={kvp.EvaluatedValue}\"))}}}\";\n-\n             var buildEventFileInfo = new BuildEventFileInfo(buildRequest.ProjectFullPath);\n-            var logger = new LoggingServiceToPluginLoggerAdapter(\n+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(\n                 _loggingService,\n                 buildEventContext,\n                 buildEventFileInfo);\n \n-            logger.LogMessage(\n-                \"\\n====== Querying project cache for project \" + queryDescription,\n-                MessageImportance.High);\n+            string? targetNames = buildRequest.TargetNames != null && buildRequest.TargetNames.Count > 0\n+                ? string.Join(\", \", buildRequest.TargetNames)\n+                : null;\n+            if (string.IsNullOrEmpty(targetNames))",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Totally open to suggestion for the copy text on all of these.",
              "createdAt": "2022-01-19T23:25:09Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1899,4 +1899,37 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n   <data name=\"ProxyRequestNotScheduledOnInprocNode\" xml:space=\"preserve\">\n     <value>MSB4274: Disabling the inproc node leads to performance degradation when using project cache plugins that emit proxy build requests.</value>\n   </data>\n+  <data name=\"ProjectCacheBeginBuild\" xml:space=\"preserve\">\n+    <value>Initializing project cache plugin.</value>\n+  </data>\n+  <data name=\"ProjectCacheEndBuild\" xml:space=\"preserve\">\n+    <value>Shutting down project cache plugin.</value>\n+  </data>\n+  <data name=\"ProjectCacheQueryStartedWithTargetNames\" xml:space=\"preserve\">\n+    <value>Project cache query \"{0}\" ({1} target(s)):</value>",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "```suggestion\r\n    <value>Querying project cache for \"{0}\" (targets: {1}):</value>\r\n```\r\n\r\n?",
              "createdAt": "2022-01-20T16:37:47Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1899,4 +1899,37 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n   <data name=\"ProxyRequestNotScheduledOnInprocNode\" xml:space=\"preserve\">\n     <value>MSB4274: Disabling the inproc node leads to performance degradation when using project cache plugins that emit proxy build requests.</value>\n   </data>\n+  <data name=\"ProjectCacheBeginBuild\" xml:space=\"preserve\">\n+    <value>Initializing project cache plugin.</value>\n+  </data>\n+  <data name=\"ProjectCacheEndBuild\" xml:space=\"preserve\">\n+    <value>Shutting down project cache plugin.</value>\n+  </data>\n+  <data name=\"ProjectCacheQueryStartedWithTargetNames\" xml:space=\"preserve\">\n+    <value>Project cache query \"{0}\" ({1} target(s)):</value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "For these sorts of timing things can you create ETW events? Then we get timing \"for free\" and in the usual way. https://github.com/dotnet/msbuild/blob/main/src/Framework/MSBuildEventSource.cs",
              "createdAt": "2022-01-20T16:43:03Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -124,20 +118,17 @@ private async Task BeginBuildAsync(ProjectCacheDescriptor? vsWorkaroundOverrideD\n                         new DefaultMSBuildFileSystem(),\n                         projectDescriptor.ProjectGraph,\n                         projectDescriptor.EntryPoints),\n-                    logger,\n+                    pluginLogger,\n                     _cancellationToken);\n \n-                timer.Stop();\n-                logger.LogMessage($\"Finished initializing project cache plugin in {timer.Elapsed.TotalMilliseconds} ms\", MessageImportance.Low);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This change removes the timers, but I'll note this for the future when I continue to iterate on the logging for this stuff",
              "createdAt": "2022-01-20T16:53:10Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -124,20 +118,17 @@ private async Task BeginBuildAsync(ProjectCacheDescriptor? vsWorkaroundOverrideD\n                         new DefaultMSBuildFileSystem(),\n                         projectDescriptor.ProjectGraph,\n                         projectDescriptor.EntryPoints),\n-                    logger,\n+                    pluginLogger,\n                     _cancellationToken);\n \n-                timer.Stop();\n-                logger.LogMessage($\"Finished initializing project cache plugin in {timer.Elapsed.TotalMilliseconds} ms\", MessageImportance.Low);",
              "author": {
                "login": "dfederm"
              }
            },
            {
              "body": "Actually, these are super easy to apply. I'll add them in this PR to replace what I'm removing.",
              "createdAt": "2022-01-20T16:54:43Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -124,20 +118,17 @@ private async Task BeginBuildAsync(ProjectCacheDescriptor? vsWorkaroundOverrideD\n                         new DefaultMSBuildFileSystem(),\n                         projectDescriptor.ProjectGraph,\n                         projectDescriptor.EntryPoints),\n-                    logger,\n+                    pluginLogger,\n                     _cancellationToken);\n \n-                timer.Stop();\n-                logger.LogMessage($\"Finished initializing project cache plugin in {timer.Elapsed.TotalMilliseconds} ms\", MessageImportance.Low);",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Please remove `PerformanceLog` from all of these except maybe CacheGet Start/Stop. I'll send up a PR to add doc comments explaining why.",
              "createdAt": "2022-01-20T19:09:34Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -551,6 +551,54 @@ public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(int submis\n             WriteEvent(75, submissionId, sdkName, solutionPath, projectPath, success, wasResultCached);\n         }\n \n+        [Event(76, Keywords = Keywords.All | Keywords.PerformanceLog)]",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "dotnet/msbuild#7307 adds explanation",
              "createdAt": "2022-01-20T19:24:15Z",
              "path": "src/Framework/MSBuildEventSource.cs",
              "diffHunk": "@@ -551,6 +551,54 @@ public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(int submis\n             WriteEvent(75, submissionId, sdkName, solutionPath, projectPath, success, wasResultCached);\n         }\n \n+        [Event(76, Keywords = Keywords.All | Keywords.PerformanceLog)]",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It is helpful to pull these out for some reason?",
              "createdAt": "2022-01-20T20:47:32Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -100,63 +103,63 @@ CancellationToken cancellationToken\n         // TODO: remove vsWorkaroundOverrideDescriptor after we change VS to set the cache descriptor via build parameters.\n         private async Task BeginBuildAsync(ProjectCacheDescriptor? vsWorkaroundOverrideDescriptor = null)\n         {\n-            var logger = new LoggingServiceToPluginLoggerAdapter(\n+            BuildEventContext buildEventContext = BuildEventContext.Invalid;\n+            BuildEventFileInfo buildEventFileInfo = BuildEventFileInfo.Empty;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Only because it's used a couple places so figured I wouldn't repeat myself.",
              "createdAt": "2022-01-20T21:06:00Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -100,63 +103,63 @@ CancellationToken cancellationToken\n         // TODO: remove vsWorkaroundOverrideDescriptor after we change VS to set the cache descriptor via build parameters.\n         private async Task BeginBuildAsync(ProjectCacheDescriptor? vsWorkaroundOverrideDescriptor = null)\n         {\n-            var logger = new LoggingServiceToPluginLoggerAdapter(\n+            BuildEventContext buildEventContext = BuildEventContext.Invalid;\n+            BuildEventFileInfo buildEventFileInfo = BuildEventFileInfo.Empty;",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Shouldn't buildEventContext always be invalid?",
              "createdAt": "2022-01-20T20:48:14Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -100,63 +103,63 @@ CancellationToken cancellationToken\n         // TODO: remove vsWorkaroundOverrideDescriptor after we change VS to set the cache descriptor via build parameters.\n         private async Task BeginBuildAsync(ProjectCacheDescriptor? vsWorkaroundOverrideDescriptor = null)\n         {\n-            var logger = new LoggingServiceToPluginLoggerAdapter(\n+            BuildEventContext buildEventContext = BuildEventContext.Invalid;\n+            BuildEventFileInfo buildEventFileInfo = BuildEventFileInfo.Empty;\n+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(\n                 _loggingService,\n-                BuildEventContext.Invalid,\n-                BuildEventFileInfo.Empty);\n+                buildEventContext,\n+                buildEventFileInfo);\n+            ProjectCacheDescriptor projectDescriptor = vsWorkaroundOverrideDescriptor ?? _projectCacheDescriptor;\n \n             try\n             {\n                 SetState(ProjectCacheServiceState.BeginBuildStarted);\n+                _loggingService.LogComment(buildEventContext, MessageImportance.Low, \"ProjectCacheBeginBuild\");",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Indeed, I just figure I'd avoid plopping `BuildEventContext.Invalid` in multiple places and using a local.",
              "createdAt": "2022-01-20T21:06:41Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -100,63 +103,63 @@ CancellationToken cancellationToken\n         // TODO: remove vsWorkaroundOverrideDescriptor after we change VS to set the cache descriptor via build parameters.\n         private async Task BeginBuildAsync(ProjectCacheDescriptor? vsWorkaroundOverrideDescriptor = null)\n         {\n-            var logger = new LoggingServiceToPluginLoggerAdapter(\n+            BuildEventContext buildEventContext = BuildEventContext.Invalid;\n+            BuildEventFileInfo buildEventFileInfo = BuildEventFileInfo.Empty;\n+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(\n                 _loggingService,\n-                BuildEventContext.Invalid,\n-                BuildEventFileInfo.Empty);\n+                buildEventContext,\n+                buildEventFileInfo);\n+            ProjectCacheDescriptor projectDescriptor = vsWorkaroundOverrideDescriptor ?? _projectCacheDescriptor;\n \n             try\n             {\n                 SetState(ProjectCacheServiceState.BeginBuildStarted);\n+                _loggingService.LogComment(buildEventContext, MessageImportance.Low, \"ProjectCacheBeginBuild\");",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Isn't writing `null!` effectively just lying to make nullable happy? Doesn't that defeat the whole point?",
              "createdAt": "2022-01-20T20:53:54Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -479,79 +482,113 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques\n \n             ErrorUtilities.VerifyThrowInternalNull(buildRequest.ProjectInstance, nameof(buildRequest.ProjectInstance));\n \n-            var queryDescription = $\"{buildRequest.ProjectFullPath}\" +\n-                                   $\"\\n\\tTargets:[{string.Join(\", \", buildRequest.TargetNames)}]\" +\n-                                   $\"\\n\\tGlobal Properties: {{{string.Join(\",\", buildRequest.GlobalProperties.Select(kvp => $\"{kvp.Name}={kvp.EvaluatedValue}\"))}}}\";\n-\n             var buildEventFileInfo = new BuildEventFileInfo(buildRequest.ProjectFullPath);\n-            var logger = new LoggingServiceToPluginLoggerAdapter(\n+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(\n                 _loggingService,\n                 buildEventContext,\n                 buildEventFileInfo);\n \n-            logger.LogMessage(\n-                \"\\n====== Querying project cache for project \" + queryDescription,\n-                MessageImportance.High);\n+            string? targetNames = buildRequest.TargetNames != null && buildRequest.TargetNames.Count > 0\n+                ? string.Join(\", \", buildRequest.TargetNames)\n+                : null;\n+            if (string.IsNullOrEmpty(targetNames))\n+            {\n+                _loggingService.LogComment(buildEventContext, MessageImportance.Normal, \"ProjectCacheQueryStartedWithDefaultTargets\", buildRequest.ProjectFullPath);\n+            }\n+            else\n+            {\n+                _loggingService.LogComment(buildEventContext, MessageImportance.Normal, \"ProjectCacheQueryStartedWithTargetNames\", buildRequest.ProjectFullPath, targetNames);\n+            }\n \n             CacheResult cacheResult = null!;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yup, this was existing but I'll fix.\r\n\r\nThere are a few places we `return null!;` only because it's unreachable but we need to make the compiler happy (ie the line above calls a method which unconditionally throws)",
              "createdAt": "2022-01-20T21:10:01Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -479,79 +482,113 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques\n \n             ErrorUtilities.VerifyThrowInternalNull(buildRequest.ProjectInstance, nameof(buildRequest.ProjectInstance));\n \n-            var queryDescription = $\"{buildRequest.ProjectFullPath}\" +\n-                                   $\"\\n\\tTargets:[{string.Join(\", \", buildRequest.TargetNames)}]\" +\n-                                   $\"\\n\\tGlobal Properties: {{{string.Join(\",\", buildRequest.GlobalProperties.Select(kvp => $\"{kvp.Name}={kvp.EvaluatedValue}\"))}}}\";\n-\n             var buildEventFileInfo = new BuildEventFileInfo(buildRequest.ProjectFullPath);\n-            var logger = new LoggingServiceToPluginLoggerAdapter(\n+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(\n                 _loggingService,\n                 buildEventContext,\n                 buildEventFileInfo);\n \n-            logger.LogMessage(\n-                \"\\n====== Querying project cache for project \" + queryDescription,\n-                MessageImportance.High);\n+            string? targetNames = buildRequest.TargetNames != null && buildRequest.TargetNames.Count > 0\n+                ? string.Join(\", \", buildRequest.TargetNames)\n+                : null;\n+            if (string.IsNullOrEmpty(targetNames))\n+            {\n+                _loggingService.LogComment(buildEventContext, MessageImportance.Normal, \"ProjectCacheQueryStartedWithDefaultTargets\", buildRequest.ProjectFullPath);\n+            }\n+            else\n+            {\n+                _loggingService.LogComment(buildEventContext, MessageImportance.Normal, \"ProjectCacheQueryStartedWithTargetNames\", buildRequest.ProjectFullPath, targetNames);\n+            }\n \n             CacheResult cacheResult = null!;",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Wrap this sort of thing in MSBuildEventSource.Log.IsEnabled() to prevent unnecessary allocations?",
              "createdAt": "2022-01-20T20:55:46Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -479,79 +482,113 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques\n \n             ErrorUtilities.VerifyThrowInternalNull(buildRequest.ProjectInstance, nameof(buildRequest.ProjectInstance));\n \n-            var queryDescription = $\"{buildRequest.ProjectFullPath}\" +\n-                                   $\"\\n\\tTargets:[{string.Join(\", \", buildRequest.TargetNames)}]\" +\n-                                   $\"\\n\\tGlobal Properties: {{{string.Join(\",\", buildRequest.GlobalProperties.Select(kvp => $\"{kvp.Name}={kvp.EvaluatedValue}\"))}}}\";\n-\n             var buildEventFileInfo = new BuildEventFileInfo(buildRequest.ProjectFullPath);\n-            var logger = new LoggingServiceToPluginLoggerAdapter(\n+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(\n                 _loggingService,\n                 buildEventContext,\n                 buildEventFileInfo);\n \n-            logger.LogMessage(\n-                \"\\n====== Querying project cache for project \" + queryDescription,\n-                MessageImportance.High);\n+            string? targetNames = buildRequest.TargetNames != null && buildRequest.TargetNames.Count > 0\n+                ? string.Join(\", \", buildRequest.TargetNames)\n+                : null;\n+            if (string.IsNullOrEmpty(targetNames))\n+            {\n+                _loggingService.LogComment(buildEventContext, MessageImportance.Normal, \"ProjectCacheQueryStartedWithDefaultTargets\", buildRequest.ProjectFullPath);\n+            }\n+            else\n+            {\n+                _loggingService.LogComment(buildEventContext, MessageImportance.Normal, \"ProjectCacheQueryStartedWithTargetNames\", buildRequest.ProjectFullPath, targetNames);\n+            }\n \n             CacheResult cacheResult = null!;\n             try\n             {\n-                cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, logger, _cancellationToken);\n+                MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(_projectCachePluginTypeName, buildRequest.ProjectFullPath, targetNames);\n+                cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, pluginLogger, _cancellationToken);\n             }\n             catch (Exception e)\n             {\n                 HandlePluginException(e, nameof(ProjectCachePluginBase.GetCacheResultAsync));\n             }\n-\n-            if (logger.HasLoggedErrors || cacheResult.ResultType == CacheResultType.None)\n+            finally\n             {\n-                ProjectCacheException.ThrowForErrorLoggedInsideTheProjectCache(\"ProjectCacheQueryFailed\", queryDescription);\n+                string cacheResultType = cacheResult?.ResultType.ToString() ?? nameof(CacheResultType.None);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Thanks!\r\n\r\nIn theory, all the `MSBuildEventSource` methods which provide `params` to the `WriteEvent` method probably should wrap that too (since `params` allocates an array), but I think that's out of scope for this change.",
              "createdAt": "2022-01-20T21:12:01Z",
              "path": "src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs",
              "diffHunk": "@@ -479,79 +482,113 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques\n \n             ErrorUtilities.VerifyThrowInternalNull(buildRequest.ProjectInstance, nameof(buildRequest.ProjectInstance));\n \n-            var queryDescription = $\"{buildRequest.ProjectFullPath}\" +\n-                                   $\"\\n\\tTargets:[{string.Join(\", \", buildRequest.TargetNames)}]\" +\n-                                   $\"\\n\\tGlobal Properties: {{{string.Join(\",\", buildRequest.GlobalProperties.Select(kvp => $\"{kvp.Name}={kvp.EvaluatedValue}\"))}}}\";\n-\n             var buildEventFileInfo = new BuildEventFileInfo(buildRequest.ProjectFullPath);\n-            var logger = new LoggingServiceToPluginLoggerAdapter(\n+            var pluginLogger = new LoggingServiceToPluginLoggerAdapter(\n                 _loggingService,\n                 buildEventContext,\n                 buildEventFileInfo);\n \n-            logger.LogMessage(\n-                \"\\n====== Querying project cache for project \" + queryDescription,\n-                MessageImportance.High);\n+            string? targetNames = buildRequest.TargetNames != null && buildRequest.TargetNames.Count > 0\n+                ? string.Join(\", \", buildRequest.TargetNames)\n+                : null;\n+            if (string.IsNullOrEmpty(targetNames))\n+            {\n+                _loggingService.LogComment(buildEventContext, MessageImportance.Normal, \"ProjectCacheQueryStartedWithDefaultTargets\", buildRequest.ProjectFullPath);\n+            }\n+            else\n+            {\n+                _loggingService.LogComment(buildEventContext, MessageImportance.Normal, \"ProjectCacheQueryStartedWithTargetNames\", buildRequest.ProjectFullPath, targetNames);\n+            }\n \n             CacheResult cacheResult = null!;\n             try\n             {\n-                cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, logger, _cancellationToken);\n+                MSBuildEventSource.Log.ProjectCacheGetCacheResultStart(_projectCachePluginTypeName, buildRequest.ProjectFullPath, targetNames);\n+                cacheResult = await _projectCachePlugin.GetCacheResultAsync(buildRequest, pluginLogger, _cancellationToken);\n             }\n             catch (Exception e)\n             {\n                 HandlePluginException(e, nameof(ProjectCachePluginBase.GetCacheResultAsync));\n             }\n-\n-            if (logger.HasLoggedErrors || cacheResult.ResultType == CacheResultType.None)\n+            finally\n             {\n-                ProjectCacheException.ThrowForErrorLoggedInsideTheProjectCache(\"ProjectCacheQueryFailed\", queryDescription);\n+                string cacheResultType = cacheResult?.ResultType.ToString() ?? nameof(CacheResultType.None);",
              "author": {
                "login": "dfederm"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This message looks unclear out of context",
              "createdAt": "2022-01-20T21:01:07Z",
              "path": "src/Build/Resources/Strings.resx",
              "diffHunk": "@@ -1899,4 +1899,37 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>\n   <data name=\"ProxyRequestNotScheduledOnInprocNode\" xml:space=\"preserve\">\n     <value>MSB4274: Disabling the inproc node leads to performance degradation when using project cache plugins that emit proxy build requests.</value>\n   </data>\n+  <data name=\"ProjectCacheBeginBuild\" xml:space=\"preserve\">\n+    <value>Initializing project cache plugin.</value>\n+  </data>\n+  <data name=\"ProjectCacheEndBuild\" xml:space=\"preserve\">\n+    <value>Shutting down project cache plugin.</value>\n+  </data>\n+  <data name=\"ProjectCacheQueryStartedWithTargetNames\" xml:space=\"preserve\">\n+    <value>Querying project cache for \"{0}\" (targets: {1}):</value>\n+  </data>\n+  <data name=\"ProjectCacheQueryStartedWithDefaultTargets\" xml:space=\"preserve\">\n+    <value>Querying project cache for \"{0}\" (default targets):</value>\n+  </data>\n+  <data name=\"ProjectCacheHitWithDefaultTargets\" xml:space=\"preserve\">\n+    <value>Project cache hit for \"{0}\" (default targets).</value>\n+  </data>\n+  <data name=\"ProjectCacheHitWithTargetNames\" xml:space=\"preserve\">\n+    <value>Project cache hit for \"{0}\" ({1} target(s)).</value>\n+  </data>\n+  <data name=\"ProjectCacheHitWithOutputs\" xml:space=\"preserve\">\n+    <value>{0} -> Cache Hit</value>",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}