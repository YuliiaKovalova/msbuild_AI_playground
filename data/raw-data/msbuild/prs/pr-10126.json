{
  "number": 10126,
  "title": "Bug #10121: Add possibility to control whether to fix the paths of TaskItem using metadata",
  "body": "Bug #10121: Add possibility to control whether to fix the paths of TaskItem using metadata\r\n\r\nTo be able to have TaskItems that you don't want normalised, or you want then normalised to another OS, e.g. when using dotnet publish to containers to another OS than you are building on, I suggest using \"magic\" metadata names to be able to tell in an MSBuild file that you want a property on your build item of type TaskItem to either:\r\n\r\n* _not_ have the paths normalised at all, by setting the FixFilePath metadata to \"false\" (defaults to true, of course), or\r\n* normalise the paths to a different platform by specifying the TargetOs metadata with one of the following values:\r\n  - windows\r\n  - unix\r\n  - current (is also used if the property is specified, but an empty or invalid value is supplied)\r\n\r\nFixes #10121 \r\n\r\n### Context\r\nWhen using dotnet to publish to containers, the EntryPoint and AppCommand are normalised on the build platform, not to the target platform, so if building a Windows container on Unix, the paths end up as C:/app/foo.exe instead of C:\\app\\foo.exe in the build Docker image. And, conversely on *nix.\r\n\r\nRelated to bug dotnet/sdk#559\r\n\r\n\r\n### Changes Made\r\nAdded the option to supply \"magic\"/special metadata items to TaskItem, to control how the paths are fixed (or not), when creating a TaskItem.\r\n\r\nAdded an overload of FileUtilities.FixFilePath that takes in a target OS that is used for the above mentioned functionality\r\n\r\n### Testing\r\n\r\nWrote unit tests on the TaskItems, both for current functionality (to be sure not to break anything), and wrote tests for new functionality\r\n\r\n### Notes\r\nThis is my first contribution to the MSBuild repository, so please tell me if I've done anything in another way that you prefer.\r\n",
  "state": "CLOSED",
  "createdAt": "2024-05-11T13:07:32Z",
  "updatedAt": "2024-07-04T14:25:47Z",
  "closedAt": "2024-07-04T14:25:47Z",
  "mergedAt": null,
  "additions": 302,
  "deletions": 1,
  "changedFiles": 3,
  "headRefName": "bugs/10121-taskitem-is-normalized-to-build-platform",
  "isDraft": false,
  "author": {
    "login": "erikbra"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      },
      {
        "login": "AR-May"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0ad62b3541dc32454f94edef773a07cf99c16355",
          "message": "Bug #10121: Add possibility to control whether to fix the paths of TaskItem using metadata\n\nTo be able to have TaskItems that you don't want normalised, or you want then normalised to\nanother OS, e.g. when using dotnet publish to containers to another OS than you are building on,\nI suggest using \"magic\" metadata names to be able to tell in an MSBuild file that you want a property\non your build item of type TaskItem to either:\n\n* _not_ have the paths normalised at all, by setting the FixFilePath metadata to \"false\" (defaults to true, of course), or\n* normalise the paths to a different platform by specifying the TargetOs metadata with one of the following values:\n  - windows\n  - unix\n  - current (is also used if the property is specified, but an empty or invalid value is supplied)",
          "committedDate": "2024-05-11T12:59:27Z",
          "author": {
            "name": "Erik A. Brandstadmoen",
            "email": "erik@brandstadmoen.net"
          }
        }
      },
      {
        "commit": {
          "oid": "cf1470451fe09dbc6c009d1c0b7b7721e9ba2c37",
          "message": "Separated tests out in separate file. Wrote some tests on actual project, and found out the problem is deeper...\n\nthere are _MANY_ implementations of ITaskItem, and usages of FixFilePaths",
          "committedDate": "2024-05-11T14:45:15Z",
          "author": {
            "name": "Erik A. Brandstadmoen",
            "email": "erik@brandstadmoen.net"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "This doesn't seem to solve the whole problem, unfortunately. It works on the `TaskItem`s in isolation, but when I wrote tests on whole projects, it still didnt work. This means that:\r\n\r\n1. The problem is more complex than originally hoped\r\n2. The problem might also more _widespread_ than originally thought. Because, even though, if one replaces some `TaskItem`s in a custom task that should not be replaced, with strings, or similar, it might still be replaced, if it's represented by `ITaskItem`s elsewhere. This might be a red herring, but I made an attempt doing this for dotnet/sdk in a draft PR here, but the paths _still_ get \"Fixed\": https://github.com/erikbra/dotnet-sdk/pull/1/files\r\n\r\n\r\n",
        "createdAt": "2024-05-11T14:50:04Z",
        "author": {
          "login": "erikbra"
        }
      },
      {
        "body": "I am closing this PR for now, see the discussion in the issue #10121.",
        "createdAt": "2024-07-04T14:25:47Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": []
  }
}