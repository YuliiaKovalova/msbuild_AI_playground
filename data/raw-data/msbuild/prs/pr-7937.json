{
  "number": 7937,
  "title": "Prevent InternalError exceptions on BadImages",
  "body": "Fixes internally reported issue.\r\n\r\n### Context\r\nWe currently skip resolving information about bad images, and that includes not setting whether they are CopyLocal. When we get to logging our results, we assume it's set, since it's set for all not-BadImages. This ensures we only access IsCopyLocal if it has been set.\r\n\r\n### Changes Made\r\nCheck for IsBadImage before accessing IsCopyLocal.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2022-09-01T19:16:42Z",
  "updatedAt": "2022-12-06T02:16:34Z",
  "closedAt": "2022-12-06T02:16:34Z",
  "mergedAt": "2022-12-06T02:16:34Z",
  "additions": 178,
  "deletions": 35,
  "changedFiles": 20,
  "headRefName": "prevent-internal-error",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d074fe7da317fa0e1b7439b024b69c8f8ff37491",
          "message": "Mark bad images not copy local",
          "committedDate": "2022-10-27T21:44:29Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e9940d4f9bec075757050128ab49f3b893841e98",
          "message": "Fix comment",
          "committedDate": "2022-10-27T21:46:54Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "74abd49bbe094cbe1bc395749dfc24a1687ab891",
          "message": "GitHub desktop gui failed me :(",
          "committedDate": "2022-10-27T21:49:26Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d0cd1968fe29cb82e2ac034f50d5c550ea44cdc9",
          "message": "Update string",
          "committedDate": "2022-10-31T15:55:46Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "61e79455e715bbf6c639b292de168258e4a99462",
          "message": "Start making test",
          "committedDate": "2022-11-02T20:25:32Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "014d88863eaf6c3b581fc6b3b1b104afe192a265",
          "message": "Make work",
          "committedDate": "2022-11-15T19:50:44Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "360d9a6cd059e5dedf6fdcecb4e17cb9066f9d48",
          "message": "Test progress",
          "committedDate": "2022-11-15T19:50:49Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "72416dcccfed755b661615c82182b8fef9097a6a",
          "message": "More changes",
          "committedDate": "2022-11-22T21:59:30Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "046d0faeaee1ddf370bfd1537ffcb9ff92c737fb",
          "message": "Fix test",
          "committedDate": "2022-11-23T00:12:15Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c1897d0823719ab79cbcb18c7a873d601b91e6b7",
          "message": "Make warn",
          "committedDate": "2022-11-23T00:17:52Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5165cd1c88e94101540965a191f2ec667e03682a",
          "message": "Comments",
          "committedDate": "2022-12-05T23:17:44Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": ".pdbs are not assemblies, so RAR can't handle them normally. We also have logic to notice that something is a \"BadImage,\" and that logic _normally_ just ignores them. The problem in this case is that the user both directly references a .pdb (making it a primary reference\u2014since they're bad images, they're normally not primary or dependencies) and transitively references it via the associated .dll. Since the .pdb is referenced twice, it becomes a victim of the .dll.\r\n\r\nFor BadImages, we normally skip figuring out if they're CopyLocal. (We could instead just make it \"false\"\u2014that would be valid, I think.) So when we get to the logging stage, it isn't set. That's fine as long as we skip logging it because either (it isn't primary or a dependency) or (it isn't a victim), but because it's both primary and a victim, we try to log it, and it crashes.\r\n\r\nThis version hardens against that possibility. We might change the way we harden against that possibility, but this is, I think, one viable option.",
        "createdAt": "2022-10-03T18:33:29Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Verify that case with pdb but no dll shows same warning as having both",
        "createdAt": "2022-11-28T17:00:02Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I think \"assembly\" should only be used for .NET things.\r\n\r\n```suggestion\r\n    <value>This reference is not \"CopyLocal\" because it is a bad image. It may be a native binary, or it may not be an assembly at all.</value>\r\n```",
              "createdAt": "2022-10-28T17:08:45Z",
              "path": "src/Tasks/Resources/Strings.resx",
              "diffHunk": "@@ -1615,6 +1615,12 @@\n         LOCALIZATION: Please don't localize \"CopyLocal\" this is an item meta-data name. \"CopyLocalDependenciesWhenParentReferenceInGac\" is a property name.\n    </comment>\n   </data>\n+  <data name=\"ResolveAssemblyReference.NoBecauseBadImage\">\n+    <value>This reference is not \"CopyLocal\" because it is a bad image. It may be a native assembly, or it may not be an assembly at all.</value>",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            };\r\n```",
              "createdAt": "2022-11-28T15:30:38Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -94,6 +95,24 @@ public Miscellaneous(ITestOutputHelper output) : base(output)\n         {\n         }\n \n+        [Fact]\n+        public void VerifyPrimaryReferenceToBadImageDoesNotThrow()\n+        {\n+            ITaskItem x = new TaskItem(Path.Combine(s_myComponentsRootPath, \"X.dll\"));\n+            ITaskItem xpdb = new TaskItem(Path.Combine(s_myComponentsRootPath, \"X.pdb\"));\n+            ResolveAssemblyReference t = new()\n+            {\n+                BuildEngine = new MockEngine(),\n+                AllowedRelatedFileExtensions = new string[] { \".pdb\" },\n+                Assemblies = new ITaskItem[] { xpdb },\n+                AssemblyFiles = new ITaskItem[] { x },\n+                SearchPaths = new string[] { \"{RawFileName}\" },\n+        };",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there a need to move this?",
              "createdAt": "2022-11-28T15:31:04Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs",
              "diffHunk": "@@ -39,10 +39,10 @@ public class ResolveAssemblyReferenceTestFixture : IDisposable\n #if FEATURE_WIN32_REGISTRY\n         internal static Microsoft.Build.Shared.OpenBaseKey openBaseKey = new Microsoft.Build.Shared.OpenBaseKey(GetBaseKey);\n #endif\n-        internal Microsoft.Build.UnitTests.MockEngine.GetStringDelegate resourceDelegate = new Microsoft.Build.UnitTests.MockEngine.GetStringDelegate(AssemblyResources.GetString);\n         internal static Microsoft.Build.Tasks.IsWinMDFile isWinMDFile = new Microsoft.Build.Tasks.IsWinMDFile(IsWinMDFile);\n         internal static Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader = new Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader(ReadMachineTypeFromPEHeader);\n \n+        internal Microsoft.Build.UnitTests.MockEngine.GetStringDelegate resourceDelegate = new Microsoft.Build.UnitTests.MockEngine.GetStringDelegate(AssemblyResources.GetString);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "It's unlikely to be relevant but I think it's worth the tiny effort to make this super explicit\r\n\r\n```suggestion\r\n                throw new BadImageFormatException(\"X.pdb is a PDB file, not a managed assembly\");\r\n```",
              "createdAt": "2022-11-28T15:32:04Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs",
              "diffHunk": "@@ -1435,6 +1436,12 @@ internal static AssemblyNameExtension GetAssemblyName(string path)\n                 return new AssemblyNameExtension(\"D, Version=1.0.0.0, Culture=Neutral, PublicKeyToken=null\");\n             }\n \n+            if (String.Equals(path, Path.Combine(s_myComponentsRootPath, \"X.pdb\"), StringComparison.OrdinalIgnoreCase))\n+            {\n+                // return new AssemblyNameExtension(\"X, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=null\");\n+                throw new BadImageFormatException(\"Bad Image\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this necessary? I don't think it'll ever get called since `GetAssemblyName` fails.",
              "createdAt": "2022-11-28T15:32:45Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs",
              "diffHunk": "@@ -2362,6 +2369,14 @@ internal static AssemblyNameExtension[] GetDependencies(string path)\n                 };\n             }\n \n+            if (String.Equals(path, Path.Combine(s_myComponentsRootPath, \"X.pdb\"), StringComparison.OrdinalIgnoreCase))\n+            {\n+                return new AssemblyNameExtension[]\n+                {\n+                    new AssemblyNameExtension(\"X, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null\")\n+                };\n+            }",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}