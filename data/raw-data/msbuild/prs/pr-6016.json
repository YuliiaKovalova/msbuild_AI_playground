{
  "number": 6016,
  "title": "Add /graph:noBuild",
  "body": "This new option constructs the graph but does not build the nodes.\r\n\r\nThis is useful for a few use cases:\r\n- determine if a large repo can evaluate all of its projects (e.g., is VS setup right, are all imports magically pointing to where they should, etc)\r\n- easily investigate evaluation perf. With noBuild, the only thing that MSBuild does is evaluate all projects under a single process, so it's easier to throw it under a profiler.\r\n- in the future when project caching is available, it can be used to warm up / download the caches but not do the build.\r\n- generally makes life easier for people that only want to investigate evaluation and not the build. The binlog also shows up nicely containing all the evaluation nodes.",
  "state": "MERGED",
  "createdAt": "2021-01-10T00:18:07Z",
  "updatedAt": "2021-02-16T23:34:33Z",
  "closedAt": "2021-02-08T00:10:15Z",
  "mergedAt": "2021-02-08T00:10:14Z",
  "additions": 422,
  "deletions": 164,
  "changedFiles": 42,
  "headRefName": "noBuild",
  "isDraft": false,
  "author": {
    "login": "cdmihai"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Static Graph",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "d0e960bef603b68ea4ee45805d28d8ed4b954d51",
          "message": "Remove unnecessary quotes",
          "committedDate": "2021-02-04T00:22:32Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "116442a0af37644e92516f9ad4e76fc724409f32",
          "message": "Add cmdline arg and OM",
          "committedDate": "2021-02-04T00:22:32Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6776fe6249c4c3df7fe23f1f2648aefa66a298f5",
          "message": "Extract graph build in new method",
          "committedDate": "2021-02-04T00:22:32Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c73e72472fafec7ac334db1f478ae9d1234197e3",
          "message": "Implement NoBuild",
          "committedDate": "2021-02-04T00:22:32Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3942a2c6be616896196e87c273977301695f3579",
          "message": "document IsExternalInit",
          "committedDate": "2021-02-04T00:22:32Z",
          "author": {
            "name": "Mihai Codoban",
            "email": "micodoba@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald I added a record type with init properties and it seems the CI is using an older compiler that does not recognize these. Is it fairly easy to get CI updated, or should I replace the records with manual equals / hashcode implementations? :cry:",
        "createdAt": "2021-01-10T00:26:45Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I bet the update to Arcade 5/.NET 5 SDK will handle that. @BenVillalobos is pretty close on that so I wouldn't rewrite.",
        "createdAt": "2021-01-11T12:25:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2021-01-11T23:26:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2021-01-11T23:26:21Z",
        "author": {
          "login": "azure-pipelines"
        }
      },
      {
        "body": "@radical, do you know how to update the compilers in the Mono CI to a new enough version to parse C# record types? CI is currently failing because of that: https://dev.azure.com/dnceng/public/_build/results?buildId=959029&view=logs&j=09f5a607-bbad-5164-6b70-f20ebe806390&t=64b2bbfe-7647-5e20-2e5f-fab3af842098",
        "createdAt": "2021-01-20T22:21:49Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "And the build error is because the mono build doesn't have an updated version of roslyn. Resolved by #6059 (admittedly not ideally\u2014by updating roslyn for mono\u2014but by disabling it).",
        "createdAt": "2021-02-03T23:47:12Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "/azp run",
        "createdAt": "2021-02-04T00:21:07Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2021-02-04T00:21:16Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we not include the unrecognized value?",
              "createdAt": "2021-01-11T12:32:51Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -1172,7 +1172,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </comment>\n   </data>\n   <data name=\"InvalidGraphBuildValue\" UESanitized=\"true\" Visibility=\"Public\">\n-    <value>MSBUILD : error MSB1057: Graph build value is not valid. {0}</value>\n+    <value>MSBUILD : error MSB1057: Graph build value is not valid.</value>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Apparently how the `CommandLineSwitchException` works is that it prints a switch specific error message (in this case the graph message you commented on) and then the exception prints the switch name itself. If I leave `{0}` then it prints the switch name twice. This is how it looks like now:\r\n```\r\nMSBUILD : error MSB1057: Graph build value is not valid.\r\nSwitch: foobar\r\n```",
              "createdAt": "2021-01-11T18:21:03Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -1172,7 +1172,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n     </comment>\n   </data>\n   <data name=\"InvalidGraphBuildValue\" UESanitized=\"true\" Visibility=\"Public\">\n-    <value>MSBUILD : error MSB1057: Graph build value is not valid. {0}</value>\n+    <value>MSBUILD : error MSB1057: Graph build value is not valid.</value>",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Link to origination of this requirement?",
              "createdAt": "2021-01-11T12:39:21Z",
              "path": "src/Shared/AssemblyUtilities.cs",
              "diffHunk": "@@ -6,6 +6,12 @@\n using System.Linq;\n using System.Reflection;\n \n+// Declare this to get init properties.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Referenced this in the comment: https://github.com/dotnet/roslyn/issues/45510#issuecomment-694977239",
              "createdAt": "2021-01-11T18:55:03Z",
              "path": "src/Shared/AssemblyUtilities.cs",
              "diffHunk": "@@ -6,6 +6,12 @@\n using System.Linq;\n using System.Reflection;\n \n+// Declare this to get init properties.",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Seeing all these members makes me wonder if there's any reason not to use a record in a public interface. But I can't think of one\u2026",
              "createdAt": "2021-01-11T12:41:53Z",
              "path": "ref/Microsoft.Build/net/Microsoft.Build.cs",
              "diffHunk": "@@ -1477,6 +1477,21 @@ public static partial class MSBuildGlobExtensions\n }\n namespace Microsoft.Build.Graph\n {\n+    public partial class GraphBuildOptions : System.IEquatable<Microsoft.Build.Graph.GraphBuildOptions>",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yea, seems like bloat on first look, but those members kind of make sense. It made tests really easy to write (equality), looks nice in the debugger, etc. I'd keep it as a record. I did a quick search over The Internet and didn't find any recommendations against having them in public APIs.",
              "createdAt": "2021-01-11T19:37:29Z",
              "path": "ref/Microsoft.Build/net/Microsoft.Build.cs",
              "diffHunk": "@@ -1477,6 +1477,21 @@ public static partial class MSBuildGlobExtensions\n }\n namespace Microsoft.Build.Graph\n {\n+    public partial class GraphBuildOptions : System.IEquatable<Microsoft.Build.Graph.GraphBuildOptions>",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm a little confused here. It looks like the waitHandle receives signals below, but how would it ever get there if the thread is paused indefinitely here?",
              "createdAt": "2021-01-14T22:48:28Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1558,10 +1507,81 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)\n                 }\n \n                 ReportResultsToSubmission(result);\n+\n                 _overallBuildSuccess = false;\n             }\n         }\n \n+        private Dictionary<ProjectGraphNode, BuildResult> BuildGraph(\n+            ProjectGraph projectGraph,\n+            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetsPerNode,\n+            GraphBuildRequestData graphBuildRequestData)\n+        {\n+            var waitHandle = new AutoResetEvent(true);\n+            var graphBuildStateLock = new object();\n+\n+            var blockedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes);\n+            var finishedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes.Count);\n+            var buildingNodes = new Dictionary<BuildSubmission, ProjectGraphNode>();\n+            var resultsPerNode = new Dictionary<ProjectGraphNode, BuildResult>(projectGraph.ProjectNodes.Count);\n+\n+            while (blockedNodes.Count > 0 || buildingNodes.Count > 0)\n+            {\n+                waitHandle.WaitOne();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "This just an extracted method, not new logic, you can skip it if you wish. To answer your question, whenever there's potential new work to do the waitHandle gets signaled. Check out all the places in the method that call Set() on that waitHandle.",
              "createdAt": "2021-01-14T23:07:34Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1558,10 +1507,81 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)\n                 }\n \n                 ReportResultsToSubmission(result);\n+\n                 _overallBuildSuccess = false;\n             }\n         }\n \n+        private Dictionary<ProjectGraphNode, BuildResult> BuildGraph(\n+            ProjectGraph projectGraph,\n+            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetsPerNode,\n+            GraphBuildRequestData graphBuildRequestData)\n+        {\n+            var waitHandle = new AutoResetEvent(true);\n+            var graphBuildStateLock = new object();\n+\n+            var blockedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes);\n+            var finishedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes.Count);\n+            var buildingNodes = new Dictionary<BuildSubmission, ProjectGraphNode>();\n+            var resultsPerNode = new Dictionary<ProjectGraphNode, BuildResult>(projectGraph.ProjectNodes.Count);\n+\n+            while (blockedNodes.Count > 0 || buildingNodes.Count > 0)\n+            {\n+                waitHandle.WaitOne();",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why make this a record if it only has one thing in it? It seems like it's making it unnecessarily complicated, since then in addition to checking whether it's null, you need to check whether <record>.Build is true or false.",
              "createdAt": "2021-01-26T23:40:22Z",
              "path": "src/Build/Graph/GraphBuildRequestData.cs",
              "diffHunk": "@@ -7,6 +7,14 @@\n \n namespace Microsoft.Build.Graph\n {\n+    public record GraphBuildOptions",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Because there will be more things in it in the future and since MSBuild APIs are set in stone until the end of time I'd rather start with a 1 member record than successive API changes that progressively add yet another public constructor with yet another parameter followed eventually by an actual struct. Basically avoiding the fiasco with the Project constructors which got eventually followed by ProjectOptions.",
              "createdAt": "2021-01-27T01:53:12Z",
              "path": "src/Build/Graph/GraphBuildRequestData.cs",
              "diffHunk": "@@ -7,6 +7,14 @@\n \n namespace Microsoft.Build.Graph\n {\n+    public record GraphBuildOptions",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Just out of curiosity\u2014why did you reorder these? Shouldn't matter either way.",
              "createdAt": "2021-01-27T00:19:36Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1721,16 +1721,23 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)\n                         projectGraph.ConstructionMetrics.NodeCount,\n                         projectGraph.ConstructionMetrics.EdgeCount));\n \n-                var targetListTask = Task.Run(() => projectGraph.GetTargetLists(submission.BuildRequestData.TargetNames));\n-                var cacheServiceTask = Task.Run(() => SearchAndInitializeProjectCachePluginFromGraph(projectGraph));\n+                Dictionary<ProjectGraphNode, BuildResult> resultsPerNode = null;\n \n-                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = targetListTask.Result;\n-                using var cacheService = cacheServiceTask.Result;\n+                if (submission.BuildRequestData.GraphBuildOptions.Build)\n+                {\n+                    var cacheServiceTask = Task.Run(() => SearchAndInitializeProjectCachePluginFromGraph(projectGraph));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Pedantism. Put the task which I think takes the longest first. Thread can loose context right before issuing the second task so might as well have the longest running one first.",
              "createdAt": "2021-01-27T01:55:47Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1721,16 +1721,23 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)\n                         projectGraph.ConstructionMetrics.NodeCount,\n                         projectGraph.ConstructionMetrics.EdgeCount));\n \n-                var targetListTask = Task.Run(() => projectGraph.GetTargetLists(submission.BuildRequestData.TargetNames));\n-                var cacheServiceTask = Task.Run(() => SearchAndInitializeProjectCachePluginFromGraph(projectGraph));\n+                Dictionary<ProjectGraphNode, BuildResult> resultsPerNode = null;\n \n-                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = targetListTask.Result;\n-                using var cacheService = cacheServiceTask.Result;\n+                if (submission.BuildRequestData.GraphBuildOptions.Build)\n+                {\n+                    var cacheServiceTask = Task.Run(() => SearchAndInitializeProjectCachePluginFromGraph(projectGraph));",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I wasn't familiar with this, and it looks like it's too new for mono. Might change it to set { init; return whatever; }",
              "createdAt": "2021-01-27T00:23:20Z",
              "path": "src/Build/Graph/GraphBuildRequestData.cs",
              "diffHunk": "@@ -7,6 +7,14 @@\n \n namespace Microsoft.Build.Graph\n {\n+    public record GraphBuildOptions\n+    {\n+        /// <summary>\n+        /// If false, the graph is constructed but the nodes are not built.\n+        /// </summary>\n+        public bool Build { get; init; } = true;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Mono will get eventually updated and until then we'll just disable it. See https://github.com/dotnet/msbuild/pull/6059",
              "createdAt": "2021-01-27T01:57:12Z",
              "path": "src/Build/Graph/GraphBuildRequestData.cs",
              "diffHunk": "@@ -7,6 +7,14 @@\n \n namespace Microsoft.Build.Graph\n {\n+    public record GraphBuildOptions\n+    {\n+        /// <summary>\n+        /// If false, the graph is constructed but the nodes are not built.\n+        /// </summary>\n+        public bool Build { get; init; } = true;",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "`&& graphBuildOptions.Build`?",
              "createdAt": "2021-02-03T22:48:01Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1233,7 +1233,7 @@ string outputResultsCache\n \n                             if (!restoreOnly)\n                             {\n-                                if (graphBuild)\n+                                if (graphBuildOptions != null)",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "`graphBuildOptions.Build` gets acted upon later on in the BuildManager, after the graph is constructed. That's the whole point, construct the graph but not build it.",
              "createdAt": "2021-02-03T23:33:21Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -1233,7 +1233,7 @@ string outputResultsCache\n \n                             if (!restoreOnly)\n                             {\n-                                if (graphBuild)\n+                                if (graphBuildOptions != null)",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should this data structure be a record if we actually want to be able to set the value?",
              "createdAt": "2021-02-03T22:49:39Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2340,6 +2340,37 @@ out enableProfiler\n             return invokeBuild;\n         }\n \n+        internal static GraphBuildOptions ProcessGraphBuildSwitch(string[] parameters)\n+        {\n+            var options = new GraphBuildOptions();\n+\n+            // Before /graph had parameters, it was treated as a boolean switch.\n+            // Preserve that in case anyone is using /graph:{false|true}\n+            if (parameters.Length == 1 && bool.TryParse(parameters[0], out var boolValue))\n+            {\n+                return boolValue ? options : null;\n+            }\n+\n+            foreach (var parameter in parameters)\n+            {\n+                if (string.IsNullOrWhiteSpace(parameter))\n+                {\n+                    continue;\n+                }\n+\n+                if (parameter.Trim().Equals(\"NoBuild\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    options = options with {Build = false};",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Why should it not be a record?",
              "createdAt": "2021-02-03T23:36:56Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -2340,6 +2340,37 @@ out enableProfiler\n             return invokeBuild;\n         }\n \n+        internal static GraphBuildOptions ProcessGraphBuildSwitch(string[] parameters)\n+        {\n+            var options = new GraphBuildOptions();\n+\n+            // Before /graph had parameters, it was treated as a boolean switch.\n+            // Preserve that in case anyone is using /graph:{false|true}\n+            if (parameters.Length == 1 && bool.TryParse(parameters[0], out var boolValue))\n+            {\n+                return boolValue ? options : null;\n+            }\n+\n+            foreach (var parameter in parameters)\n+            {\n+                if (string.IsNullOrWhiteSpace(parameter))\n+                {\n+                    continue;\n+                }\n+\n+                if (parameter.Trim().Equals(\"NoBuild\", StringComparison.OrdinalIgnoreCase))\n+                {\n+                    options = options with {Build = false};",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: list out parameter names to make it easier to read. You did it just below this.",
              "createdAt": "2021-02-03T22:51:49Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -4279,5 +4287,35 @@ public void GraphBuildCircular()\n             result.OverallResult.ShouldBe(BuildResultCode.Failure);\n             result.CircularDependency.ShouldBeTrue();\n         }\n+\n+        [Fact]\n+        public void GraphBuildShouldBeAbleToConstructGraphButSkipBuild()\n+        {\n+            var graph = Helpers.CreateProjectGraph(_env, new Dictionary<int, int[]> {{1, new[] {2, 3}}});",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Random question: Any worry about this method being passed invalid data?",
              "createdAt": "2021-02-03T22:52:48Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -4279,5 +4287,35 @@ public void GraphBuildCircular()\n             result.OverallResult.ShouldBe(BuildResultCode.Failure);\n             result.CircularDependency.ShouldBeTrue();\n         }\n+\n+        [Fact]\n+        public void GraphBuildShouldBeAbleToConstructGraphButSkipBuild()\n+        {\n+            var graph = Helpers.CreateProjectGraph(_env, new Dictionary<int, int[]> {{1, new[] {2, 3}}});",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "It's a helper method for tests, if it's passed invalid data some test somewhere will fail.",
              "createdAt": "2021-02-03T23:38:29Z",
              "path": "src/Build.UnitTests/BackEnd/BuildManager_Tests.cs",
              "diffHunk": "@@ -4279,5 +4287,35 @@ public void GraphBuildCircular()\n             result.OverallResult.ShouldBe(BuildResultCode.Failure);\n             result.CircularDependency.ShouldBeTrue();\n         }\n+\n+        [Fact]\n+        public void GraphBuildShouldBeAbleToConstructGraphButSkipBuild()\n+        {\n+            var graph = Helpers.CreateProjectGraph(_env, new Dictionary<int, int[]> {{1, new[] {2, 3}}});",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Do we need a null check here?",
              "createdAt": "2021-02-03T22:53:48Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1721,16 +1721,23 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)\n                         projectGraph.ConstructionMetrics.NodeCount,\n                         projectGraph.ConstructionMetrics.EdgeCount));\n \n-                var targetListTask = Task.Run(() => projectGraph.GetTargetLists(submission.BuildRequestData.TargetNames));\n-                var cacheServiceTask = Task.Run(() => SearchAndInitializeProjectCachePluginFromGraph(projectGraph));\n+                Dictionary<ProjectGraphNode, BuildResult> resultsPerNode = null;\n \n-                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = targetListTask.Result;\n-                using var cacheService = cacheServiceTask.Result;\n+                if (submission.BuildRequestData.GraphBuildOptions.Build)",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "The `GraphBuildRequestData` constructors ensures it's never null.",
              "createdAt": "2021-02-03T23:43:03Z",
              "path": "src/Build/BackEnd/BuildManager/BuildManager.cs",
              "diffHunk": "@@ -1721,16 +1721,23 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)\n                         projectGraph.ConstructionMetrics.NodeCount,\n                         projectGraph.ConstructionMetrics.EdgeCount));\n \n-                var targetListTask = Task.Run(() => projectGraph.GetTargetLists(submission.BuildRequestData.TargetNames));\n-                var cacheServiceTask = Task.Run(() => SearchAndInitializeProjectCachePluginFromGraph(projectGraph));\n+                Dictionary<ProjectGraphNode, BuildResult> resultsPerNode = null;\n \n-                IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = targetListTask.Result;\n-                using var cacheService = cacheServiceTask.Result;\n+                if (submission.BuildRequestData.GraphBuildOptions.Build)",
              "author": {
                "login": "cdmihai"
              }
            }
          ]
        }
      }
    ]
  }
}