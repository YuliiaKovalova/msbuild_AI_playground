{
  "number": 7928,
  "title": "Exempt our env var Fixes #7922",
  "body": "Fixes #7922\r\n\r\n### Context\r\nAlthough it's good to hide environment variables that may contain sensitive information, some variables seldom do and can be quite helpful in diagnosing build issues. This exempts environment variables that start with MSBUILD, COMPLUS_, and DOTNET_ from the normal filtering, even in the absence of MSBUILDLOGALLENVIRONMENTVARIABLES.\r\n\r\n### Changes Made\r\nExempted certain environment variables. Also prevented any EnvironmentVariableReadEvents from firing if MSBUILDLOGALLENVIRONMENTVARIABLES is set.\r\n\r\n### Testing\r\nI built MSBuild.Dev.slnf and checked what its environment node contained.\r\n\r\n### Notes\r\nThis will need a structured log viewer update to make it less confusing.\r\n\r\n~Confusing to me, this only almost works. Specifically, it filtered out all environment variables except the intended ones _plus_ OS, LOCALAPPDATA, and USERPROFILE. I don't know what made those special.~",
  "state": "MERGED",
  "createdAt": "2022-08-31T17:01:55Z",
  "updatedAt": "2022-09-23T09:11:09Z",
  "closedAt": "2022-09-23T09:11:09Z",
  "mergedAt": "2022-09-23T09:11:09Z",
  "additions": 32,
  "deletions": 7,
  "changedFiles": 9,
  "headRefName": "exempt-our-env-var",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "abdc101e07a2eebd89bcb558c84d04d55689f042",
          "message": "Always log certain environment variables",
          "committedDate": "2022-08-31T16:36:02Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fd27de5a2be0f02c98a365b6f50f3682598b9562",
          "message": "Don't log on env-derived property reads if all vars are printed",
          "committedDate": "2022-08-31T16:36:29Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c587319d13030e88f111deb5c8181812d424605d",
          "message": "Account for null",
          "committedDate": "2022-08-31T18:41:59Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6a7d92ec4bae636a5faab829970b5e3451a42ea0",
          "message": "Update version",
          "committedDate": "2022-09-06T23:44:20Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1ebe1b9671e75ec04d2580502826e3170b76f84d",
          "message": "pr comment",
          "committedDate": "2022-09-13T23:34:32Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d6ee479007dcd4cac69fdee30c095aea1ed8c579",
          "message": "Unupdate version",
          "committedDate": "2022-09-14T17:27:27Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> &hellip; _plus_ OS, LOCALAPPDATA, and USERPROFILE. I don't know what made those special.\r\n\r\nNaively, aren't those properties almost always used in `msbuild` evaluation\u2754 For example, `UserProfile` is normally evaluated to determine `LocalAppData`, that's normally evaluated to determine `$(MSBuildUserExtensionsPath)`, and that's evaluated to look for default files to import.",
        "createdAt": "2022-08-31T17:56:57Z",
        "author": {
          "login": "dougbu"
        }
      },
      {
        "body": "> > \u2026 _plus_ OS, LOCALAPPDATA, and USERPROFILE. I don't know what made those special.\r\n> \r\n> Naively, aren't those properties almost always used in `msbuild` evaluation\u2754 For example, `UserProfile` is normally evaluated to determine `LocalAppData`, that's normally evaluated to determine `$(MSBuildUserExtensionsPath)`, and that's evaluated to look for default files to import.\r\n\r\nThey are, which is highly suspicious. I'm confused because I wouldn't have expected EnvironmentVariableReadEvents to show up in ProjectStartedEventArgs, since nothing had started by that point...but it also doesn't seem like a big deal if they do, so maybe we shouldn't care?",
        "createdAt": "2022-08-31T18:40:15Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I think you're right; this was just the viewer displaying things differently than I'd expected. I tried grabbing a diagnostic text log, and it looks good. I also tried replaying a binlog into a text log, and that looks good, too.",
        "createdAt": "2022-09-01T17:27:36Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't like the word \"reserved\" here because it makes me think of reserved keywords in programming languages, which these aren't exactly. Maybe `ShouldAlwaysBeLogged`?",
              "createdAt": "2022-09-08T16:09:27Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -12,5 +12,12 @@ internal static partial class EnvironmentUtilities\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n+\n+        public static bool IsReservedProperty(string propertyName)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'm paralleling our many uses of \"reserved\" in other places in MSBuild like:\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Build/Resources/Constants.cs#L102\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Build/Definition/ProjectProperty.cs#L146\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Build/ObjectModelRemoting/LinkedObjectFactory.cs#L305\r\n\r\nThose are \"reserved\" in that they are normal properties except that Microsoft specifically recognizes them as special, just as keywords are normal tokens treated as special in programming languages. `MSBUILD*`, `COMPLUS_*`, and `DOTNET_*` are being treated as special, so it makes sense to me that they are also \"reserved.\"\r\n\r\nShouldAlwaysBeLogged makes sense in the context of this PR but does not make sense if you don't know what they are or why they should be logged\u2014what is being explicitly excluded from this?",
              "createdAt": "2022-09-13T21:50:17Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -12,5 +12,12 @@ internal static partial class EnvironmentUtilities\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n+\n+        public static bool IsReservedProperty(string propertyName)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Reserved properties are not normal properties. If you try to set them, you get an error like\r\n\r\n```\r\nerror MSB4004: The \"MSBuildProjectDirectory\" property is reserved, and cannot be modified.\r\n```\r\n\r\nSince this isn't like that, I don't think it should use the same name.",
              "createdAt": "2022-09-13T22:09:05Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -12,5 +12,12 @@ internal static partial class EnvironmentUtilities\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n+\n+        public static bool IsReservedProperty(string propertyName)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Properties prefixed with an underscore are private but not really. If you try to use one of these as a normal variable, you may get unexpected behavior at some point.\r\n\r\nCompromise on IsWellKnownEnvironmentDerivedProperty?",
              "createdAt": "2022-09-13T23:30:04Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -12,5 +12,12 @@ internal static partial class EnvironmentUtilities\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n+\n+        public static bool IsReservedProperty(string propertyName)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "`IsWellKnownEnvironmentDerivedProperty` sounds fine to me.",
              "createdAt": "2022-09-14T13:47:24Z",
              "path": "src/Shared/EnvironmentUtilities.cs",
              "diffHunk": "@@ -12,5 +12,12 @@ internal static partial class EnvironmentUtilities\n \n         public static bool Is64BitOperatingSystem =>\n             Environment.Is64BitOperatingSystem;\n+\n+        public static bool IsReservedProperty(string propertyName)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't understand this. There's no actual change, but you want a marker to change things in the viewer?",
              "createdAt": "2022-09-13T18:02:38Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -53,7 +53,9 @@ public sealed class BinaryLogger : ILogger\n         //   - TargetSkippedEventArgs: added OriginallySucceeded, Condition, EvaluatedCondition\n         // version 14:\n         //   - TargetSkippedEventArgs: added SkipReason, OriginalBuildEventContext\n-        internal const int FileFormatVersion = 14;\n+        // version 15:\n+        //   - Log our own environment variables by default. (This affects the message in the structured log viewer.)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This may end up reverted.\r\n\r\nMy original scheme was to use this to indicate we should change the string displayed when the user did not specify that they want all environment variables logged\u2014it would say something like \"we don't log env vars unless you set x,\" and it would now say \"this list of env vars was truncated to just include y; set x to include them all.\" Sounds like KirillOsenkov thinks we can word it to make sense in either case. I owe him a reply.",
              "createdAt": "2022-09-13T22:33:41Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -53,7 +53,9 @@ public sealed class BinaryLogger : ILogger\n         //   - TargetSkippedEventArgs: added OriginallySucceeded, Condition, EvaluatedCondition\n         // version 14:\n         //   - TargetSkippedEventArgs: added SkipReason, OriginalBuildEventContext\n-        internal const int FileFormatVersion = 14;\n+        // version 15:\n+        //   - Log our own environment variables by default. (This affects the message in the structured log viewer.)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I was convinced, so I reverted this. To prevent version weirdness, I think we should make sure this makes it into 17.4.",
              "createdAt": "2022-09-14T17:28:14Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -53,7 +53,9 @@ public sealed class BinaryLogger : ILogger\n         //   - TargetSkippedEventArgs: added OriginallySucceeded, Condition, EvaluatedCondition\n         // version 14:\n         //   - TargetSkippedEventArgs: added SkipReason, OriginalBuildEventContext\n-        internal const int FileFormatVersion = 14;\n+        // version 15:\n+        //   - Log our own environment variables by default. (This affects the message in the structured log viewer.)",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "It's a tweak to alleviate a behavior difference in 17.4 so I think that's appropriate.",
              "createdAt": "2022-09-14T19:51:00Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -53,7 +53,9 @@ public sealed class BinaryLogger : ILogger\n         //   - TargetSkippedEventArgs: added OriginallySucceeded, Condition, EvaluatedCondition\n         // version 14:\n         //   - TargetSkippedEventArgs: added SkipReason, OriginalBuildEventContext\n-        internal const int FileFormatVersion = 14;\n+        // version 15:\n+        //   - Log our own environment variables by default. (This affects the message in the structured log viewer.)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This logic is pretty complicated even in the context of this PR where I know what you're trying to do. Comment?",
              "createdAt": "2022-09-13T18:24:26Z",
              "path": "src/Build/Evaluation/Evaluator.cs",
              "diffHunk": "@@ -824,8 +824,9 @@ private IEnumerable FilterOutEnvironmentDerivedProperties(PropertyDictionary<P>\n             List<P> list = new(dictionary.Count);\n             foreach (P p in dictionary)\n             {\n-                if (p is EnvironmentDerivedProjectPropertyInstance ||\n-                    (p is ProjectProperty pp && pp.IsEnvironmentProperty))\n+                if ((p is EnvironmentDerivedProjectPropertyInstance ||\n+                    (p is ProjectProperty pp && pp.IsEnvironmentProperty)) &&\n+                    !EnvironmentUtilities.IsReservedProperty(p.Name))",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}