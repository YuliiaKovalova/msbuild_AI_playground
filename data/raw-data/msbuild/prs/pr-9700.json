{
  "number": 9700,
  "title": "Annotate RAR SearchPaths added because they're \"next to a reference\"",
  "body": "Fixes #9408\r\n\r\n### Context\r\n\r\nWhen building this project from a Developer Command Prompt:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Reference Include=\"$(DevEnvDir)\\..\\..\\MSBuild\\Current\\Bin\\Microsoft.Build.dll\" />\r\n    <Reference Include=\"Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThat produces this RAR snippet for Framework:\r\n\r\n```\r\nPrimary reference \"Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". (TaskId:59)\r\n    Resolved file path is \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Build.Framework.dll\". (TaskId:59)\r\n    Reference found at search path location \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\". (TaskId:59)\r\n        For SearchPath \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\". (TaskId:59)\r\n        Considered \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Build.Framework.winmd\", but it didn't exist. (TaskId:59)\r\n```\r\n\r\n### Changes Made\r\nWhen calculating resolvers to resolve a reference we currently adding `DirectoryResolver`s for each directories of the reference's dependees:\r\nhttps://github.com/dotnet/msbuild/blob/07fd5d51f25134ea3ab3620c66f6501a74df2921/src/Tasks/AssemblyDependency/ReferenceTable.cs#L1282-L1286\r\n\r\nAdded `ParentAssembly` property to the `Resolver` to save that info to log it later for searchpath.\r\nAdded new type of log message for this specific case:\r\n```\r\nFor SearchPath {searchPath}\" (added by referencing assembly {parentAssemly}).\r\n\r\n```\r\nNow same example produces:\r\n```\r\nPrimary reference \"Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". (TaskId:21)\r\n      Resolved file path is \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Build.Framework.dll\". (TaskId:21)\r\n      Reference found at search path location \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\". (TaskId:21)\r\n          For SearchPath \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\" (added by referencing assembly \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Build.dll\"). (TaskId:21)\r\n          Considered \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Build.Framework.winmd\", but it didn't exist. (TaskId:21)\r\n```\r\n\r\n### Testing\r\nUnit test for new log message and manual test\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2024-02-01T15:29:20Z",
  "updatedAt": "2024-02-07T15:36:14Z",
  "closedAt": "2024-02-07T15:36:10Z",
  "mergedAt": "2024-02-07T15:36:10Z",
  "additions": 165,
  "deletions": 17,
  "changedFiles": 21,
  "headRefName": "rar-log-searchPath-added",
  "isDraft": false,
  "author": {
    "login": "surayya-MS"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "surayya-MS"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "1f0d74ac4356370e2e3c97cfe86549ee4081d2d3",
          "message": "annotate that searchpath was added by a parent assembly",
          "committedDate": "2024-02-01T15:28:10Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "32f0aa2452fd97eb474ad448ce8425e4a4a3ed9f",
          "message": "Update src/Tasks/AssemblyDependency/AssemblyResolution.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-02-01T18:12:47Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "257d88bc956ef895b19707c07a3808ea99edee88",
          "message": "Update src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-02-01T18:13:36Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "681f821819afdb41ea2a40502ae53e9960aeb32c",
          "message": "only add parent reference to the dictionary if it's not there yet",
          "committedDate": "2024-02-05T10:21:08Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0525a4e3a32bc1db584b7333bcbd3a9f0b6e1c5f",
          "message": "add test for ResolveAssemblyReference.SearchPathAddedByParentAssembly log message",
          "committedDate": "2024-02-05T13:19:56Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3aa30186aff5069d9da9c6e066280762a1781775",
          "message": "use less searchPaths for test",
          "committedDate": "2024-02-05T13:22:41Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6df38a86da8bdabad80e45172755c25d7a15116f",
          "message": "fix test",
          "committedDate": "2024-02-06T12:41:50Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0e7348af0d07229cc0798d302778b49f1d718f77",
          "message": "remove unnecessary using",
          "committedDate": "2024-02-06T12:43:42Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "088f21f19412190644f56b3e6305378626359d25",
          "message": "use list of tuples instead of dictionary",
          "committedDate": "2024-02-06T16:16:43Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28625f8701dfeb872e27d6c4f39f970457c583e6",
          "message": "remove unnecessary using",
          "committedDate": "2024-02-06T16:19:36Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a713408c3e1399534b14c20b88f2b556ad137634",
          "message": "fix test",
          "committedDate": "2024-02-06T16:21:33Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "19817105824718315b356f8515e91e4017744121",
          "message": "make parentAssembly into a readonly field instead of a property",
          "committedDate": "2024-02-06T17:14:30Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f78500a072bc77d41a2cfd7a1cd68472bbf20ee6",
          "message": "use parentAssembly only in DirectoryResolver",
          "committedDate": "2024-02-07T07:53:30Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0f59ed621ee3cfb0de8a0e69875fcc707d7974f1",
          "message": "maku sure parentAssembly of correct search locations are set",
          "committedDate": "2024-02-07T08:30:42Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a370250c47cce22140be2fb298389c8e1098996b",
          "message": "use readonly record struct instead of tuple",
          "committedDate": "2024-02-07T12:57:30Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I don't know why there was one missed before, but might as well unify these\r\n\r\n```suggestion\r\n                SearchPath = GetResourceEightSpaces(\"ResolveAssemblyReference.SearchPath\");\r\n                SearchPathAddedByParentAssembly = GetResourceEightSpaces(\"ResolveAssemblyReference.SearchPathAddedByParentAssembly\");\r\n```",
              "createdAt": "2024-02-01T16:25:10Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -153,6 +154,7 @@ internal static void Initialize(TaskLoggingHelper log)\n                 ResolvedFrom = GetResourceFourSpaces(\"ResolveAssemblyReference.ResolvedFrom\");\n                 SearchedAssemblyFoldersEx = GetResourceEightSpaces(\"ResolveAssemblyReference.SearchedAssemblyFoldersEx\");\n                 SearchPath = EightSpaces + GetResource(\"ResolveAssemblyReference.SearchPath\");\n+                SearchPathAddedByParentAssembly = EightSpaces + GetResource(\"ResolveAssemblyReference.SearchPathAddedByParentAssembly\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Nit: I'd prefer the object initializer in this case:\r\n\r\n```suggestion\r\n                    resolvers[index] = new DirectoryResolver(directory, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVersion)\r\n                    {\r\n                        ParentAssembly = parentReferenceDirectories.Key\r\n                    };\r\n```",
              "createdAt": "2024-02-01T16:40:42Z",
              "path": "src/Tasks/AssemblyDependency/AssemblyResolution.cs",
              "diffHunk": "@@ -213,16 +214,24 @@ internal static class AssemblyResolution\n         /// Build a resolver array from a set of directories to resolve directly from.\n         /// </summary>\n         internal static Resolver[] CompileDirectories(\n-            List<string> directories,\n+            Dictionary<string, List<string>> parentReferenceDirectoriesMap,\n             FileExists fileExists,\n             GetAssemblyName getAssemblyName,\n             GetAssemblyRuntimeVersion getRuntimeVersion,\n             Version targetedRuntimeVersion)\n         {\n-            var resolvers = new Resolver[directories.Count];\n-            for (int i = 0; i < directories.Count; i++)\n+            int totalResolversCount = parentReferenceDirectoriesMap.Values.Sum(list => list.Count);\n+            var resolvers = new Resolver[totalResolversCount];\n+            int index = 0;\n+\n+            foreach (var parentReferenceDirectories in parentReferenceDirectoriesMap)\n             {\n-                resolvers[i] = new DirectoryResolver(directories[i], getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVersion);\n+                foreach (var directory in parentReferenceDirectories.Value)\n+                {\n+                    resolvers[index] = new DirectoryResolver(directory, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVersion);\n+                    resolvers[index].ParentAssembly = parentReferenceDirectories.Key;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "There could be more than one, right? I think this needs to be a get-or-add operation.",
              "createdAt": "2024-02-01T16:42:02Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -1279,10 +1279,11 @@ internal static void CalculateParentAssemblyDirectories(List<string> parentRefer\n             // First, look for the dependency in the parents' directories. Unless they are resolved from the GAC or assemblyFoldersEx then\n             // we should make sure we use the GAC and assemblyFolders resolvers themserves rather than a directory resolver to find the reference.\n             // This way we dont get assemblies pulled from the GAC or AssemblyFolders but dont have the marking that they were pulled form there.\n-            var parentReferenceFolders = new List<string>();\n+            var parentReferenceDirectoriesMap = new Dictionary<string, List<string>>();\n             foreach (Reference parentReference in reference.GetDependees())\n             {\n-                CalculateParentAssemblyDirectories(parentReferenceFolders, parentReference);\n+                parentReferenceDirectoriesMap[parentReference.FullPath] = new List<string>();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I'm sorry, I didn't quite understand what you meant. Could you please rephrase or explain it a bit more?",
              "createdAt": "2024-02-01T18:23:18Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -1279,10 +1279,11 @@ internal static void CalculateParentAssemblyDirectories(List<string> parentRefer\n             // First, look for the dependency in the parents' directories. Unless they are resolved from the GAC or assemblyFoldersEx then\n             // we should make sure we use the GAC and assemblyFolders resolvers themserves rather than a directory resolver to find the reference.\n             // This way we dont get assemblies pulled from the GAC or AssemblyFolders but dont have the marking that they were pulled form there.\n-            var parentReferenceFolders = new List<string>();\n+            var parentReferenceDirectoriesMap = new Dictionary<string, List<string>>();\n             foreach (Reference parentReference in reference.GetDependees())\n             {\n-                CalculateParentAssemblyDirectories(parentReferenceFolders, parentReference);\n+                parentReferenceDirectoriesMap[parentReference.FullPath] = new List<string>();",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "Oh I might have read this wrong. Is `parentReference.FullPath` guaranteed to be unique for all `parentReference`s? I was thinking it was not.",
              "createdAt": "2024-02-01T18:44:18Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -1279,10 +1279,11 @@ internal static void CalculateParentAssemblyDirectories(List<string> parentRefer\n             // First, look for the dependency in the parents' directories. Unless they are resolved from the GAC or assemblyFoldersEx then\n             // we should make sure we use the GAC and assemblyFolders resolvers themserves rather than a directory resolver to find the reference.\n             // This way we dont get assemblies pulled from the GAC or AssemblyFolders but dont have the marking that they were pulled form there.\n-            var parentReferenceFolders = new List<string>();\n+            var parentReferenceDirectoriesMap = new Dictionary<string, List<string>>();\n             foreach (Reference parentReference in reference.GetDependees())\n             {\n-                CalculateParentAssemblyDirectories(parentReferenceFolders, parentReference);\n+                parentReferenceDirectoriesMap[parentReference.FullPath] = new List<string>();",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yes, you are right. It is not guaranteed. I changed this part of the code. Thanks!",
              "createdAt": "2024-02-05T10:23:17Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -1279,10 +1279,11 @@ internal static void CalculateParentAssemblyDirectories(List<string> parentRefer\n             // First, look for the dependency in the parents' directories. Unless they are resolved from the GAC or assemblyFoldersEx then\n             // we should make sure we use the GAC and assemblyFolders resolvers themserves rather than a directory resolver to find the reference.\n             // This way we dont get assemblies pulled from the GAC or AssemblyFolders but dont have the marking that they were pulled form there.\n-            var parentReferenceFolders = new List<string>();\n+            var parentReferenceDirectoriesMap = new Dictionary<string, List<string>>();\n             foreach (Reference parentReference in reference.GetDependees())\n             {\n-                CalculateParentAssemblyDirectories(parentReferenceFolders, parentReference);\n+                parentReferenceDirectoriesMap[parentReference.FullPath] = new List<string>();",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I am not sure if the use of `Dictionary<string, List<string>>` is justified here. The dictionary groups directories by the same parent reference, but this is actually not really used anywhere. The only operation done on the dictionary is a \"flattening\" enumeration in `CompileDirectories`.\r\n\r\nCould you consider something like `List<(string, string)>`, i.e. a list of tuples, instead? Note that duplicating the same parent full path in all dependencies costs us only one .NET reference (pointer size) whereas the overhead of a dictionary + inner lists is likely bigger. For CPU and code complexity it would be a win for sure.",
              "createdAt": "2024-02-06T14:28:13Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -1279,10 +1279,16 @@ internal static void CalculateParentAssemblyDirectories(List<string> parentRefer\n             // First, look for the dependency in the parents' directories. Unless they are resolved from the GAC or assemblyFoldersEx then\n             // we should make sure we use the GAC and assemblyFolders resolvers themserves rather than a directory resolver to find the reference.\n             // This way we dont get assemblies pulled from the GAC or AssemblyFolders but dont have the marking that they were pulled form there.\n-            var parentReferenceFolders = new List<string>();\n+            var parentReferenceDirectoriesMap = new Dictionary<string, List<string>>();",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "I agree. Thanks!",
              "createdAt": "2024-02-06T16:17:12Z",
              "path": "src/Tasks/AssemblyDependency/ReferenceTable.cs",
              "diffHunk": "@@ -1279,10 +1279,16 @@ internal static void CalculateParentAssemblyDirectories(List<string> parentRefer\n             // First, look for the dependency in the parents' directories. Unless they are resolved from the GAC or assemblyFoldersEx then\n             // we should make sure we use the GAC and assemblyFolders resolvers themserves rather than a directory resolver to find the reference.\n             // This way we dont get assemblies pulled from the GAC or AssemblyFolders but dont have the marking that they were pulled form there.\n-            var parentReferenceFolders = new List<string>();\n+            var parentReferenceDirectoriesMap = new Dictionary<string, List<string>>();",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: It would be nicer if this was declared as a read-only property. For example, `parentAssembly` could be added as a constructor parameter on `DirectoryResolver` (because it's not used by any other resolver) and this property would become virtual, returning null here and overriden in `DirectoryResolver` to return what went into the constructor. Totally optional, looks good as is.",
              "createdAt": "2024-02-06T16:35:38Z",
              "path": "src/Tasks/AssemblyDependency/Resolver.cs",
              "diffHunk": "@@ -95,6 +95,11 @@ protected Resolver(string searchPathElement, GetAssemblyName getAssemblyName, Fi\n             out string foundPath,\n             out bool userRequestedSpecificFile);\n \n+        /// <summary>\n+        /// The parent assembly that was used for the SearchPath.\n+        /// </summary>\n+        internal string ParentAssembly { get; set; }",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Done",
              "createdAt": "2024-02-06T17:15:33Z",
              "path": "src/Tasks/AssemblyDependency/Resolver.cs",
              "diffHunk": "@@ -95,6 +95,11 @@ protected Resolver(string searchPathElement, GetAssemblyName getAssemblyName, Fi\n             out string foundPath,\n             out bool userRequestedSpecificFile);\n \n+        /// <summary>\n+        /// The parent assembly that was used for the SearchPath.\n+        /// </summary>\n+        internal string ParentAssembly { get; set; }",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "I realised that `parentAssembly` is needed only for `DirectoryResolver` and removed it from `Resolver`.",
              "createdAt": "2024-02-07T07:55:59Z",
              "path": "src/Tasks/AssemblyDependency/Resolver.cs",
              "diffHunk": "@@ -95,6 +95,11 @@ protected Resolver(string searchPathElement, GetAssemblyName getAssemblyName, Fi\n             out string foundPath,\n             out bool userRequestedSpecificFile);\n \n+        /// <summary>\n+        /// The parent assembly that was used for the SearchPath.\n+        /// </summary>\n+        internal string ParentAssembly { get; set; }",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      }
    ]
  }
}