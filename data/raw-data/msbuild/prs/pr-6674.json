{
  "number": 6674,
  "title": "Move version check earlier",
  "body": "Fixes #6659\r\n\r\nThe version check was previously after having deserialized everything else. This doesn't make sense and can lead to errors. In this PR, I moved it up.",
  "state": "MERGED",
  "createdAt": "2021-07-14T16:44:23Z",
  "updatedAt": "2021-07-26T06:19:31Z",
  "closedAt": "2021-07-26T06:19:31Z",
  "mergedAt": "2021-07-26T06:19:30Z",
  "additions": 11,
  "deletions": 12,
  "changedFiles": 1,
  "headRefName": "move-version-check",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "7ddd2d22c25ae6d68ed4260f1e6b68675c144336",
          "message": "Move version check earlier",
          "committedDate": "2021-07-14T16:43:21Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c38d9a777d5887514a966b37114233a4bb0b1707",
          "message": "Merge branch 'main' into move-version-check",
          "committedDate": "2021-07-14T16:45:03Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aa75790d6d05be45284eb02a54a37cfd48856221",
          "message": "Move null check",
          "committedDate": "2021-07-14T21:26:29Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d71e2a55af52d6d869ade42c355e5c9f379eb2c7",
          "message": "Merge branch 'move-version-check' of https://github.com/Forgind/msbuild into move-version-check",
          "committedDate": "2021-07-14T21:26:34Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e4d4e0a471f2668ace56b0dbd3dabd281e7a42b5",
          "message": "Fix comment",
          "committedDate": "2021-07-14T21:40:00Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> LGTM\r\n> \r\n> > Please reach out to Richa with the scenario you want covered. The difficulty with fresh machine tests as you can only have one.\r\n> \r\n> What was the status on this? A manual SDK test was mentioned\r\n\r\nI still need to write instructions. Bit behind on that front.",
        "createdAt": "2021-07-20T00:09:09Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I think it continues to make sense for this to be a quiet message. But do we have a test in place that this is _not_ the case for freshly-built-everything using the SDK cache?",
              "createdAt": "2021-07-14T19:18:09Z",
              "path": "src/Tasks/StateFileBase.cs",
              "diffHunk": "@@ -77,8 +77,17 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp\n                     using (FileStream s = File.OpenRead(stateFile))\n                     {\n                         using var translator = BinaryTranslator.GetReadTranslator(s, buffer: null);\n+\n                         byte version = 0;\n                         translator.Translate(ref version);\n+                        // If retVal is still null or the version is wrong, log a message not a warning. This could be a valid cache with the wrong version preventing correct deserialization.\n+                        // For the latter case, internals may be unexpectedly null.\n+                        if (retVal == null || version != CurrentSerializationVersion)\n+                        {\n+                            log.LogMessageFromResources(\"General.CouldNotReadStateFileMessage\", stateFile, log.FormatResourceString(\"General.IncompatibleStateFileType\"));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "We do not. If I remember correctly, we decided it would be too hard for some reason.",
              "createdAt": "2021-07-14T21:25:40Z",
              "path": "src/Tasks/StateFileBase.cs",
              "diffHunk": "@@ -77,8 +77,17 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp\n                     using (FileStream s = File.OpenRead(stateFile))\n                     {\n                         using var translator = BinaryTranslator.GetReadTranslator(s, buffer: null);\n+\n                         byte version = 0;\n                         translator.Translate(ref version);\n+                        // If retVal is still null or the version is wrong, log a message not a warning. This could be a valid cache with the wrong version preventing correct deserialization.\n+                        // For the latter case, internals may be unexpectedly null.\n+                        if (retVal == null || version != CurrentSerializationVersion)\n+                        {\n+                            log.LogMessageFromResources(\"General.CouldNotReadStateFileMessage\", stateFile, log.FormatResourceString(\"General.IncompatibleStateFileType\"));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Can we at least get it added to the manual SDK tests?",
              "createdAt": "2021-07-14T21:29:39Z",
              "path": "src/Tasks/StateFileBase.cs",
              "diffHunk": "@@ -77,8 +77,17 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp\n                     using (FileStream s = File.OpenRead(stateFile))\n                     {\n                         using var translator = BinaryTranslator.GetReadTranslator(s, buffer: null);\n+\n                         byte version = 0;\n                         translator.Translate(ref version);\n+                        // If retVal is still null or the version is wrong, log a message not a warning. This could be a valid cache with the wrong version preventing correct deserialization.\n+                        // For the latter case, internals may be unexpectedly null.\n+                        if (retVal == null || version != CurrentSerializationVersion)\n+                        {\n+                            log.LogMessageFromResources(\"General.CouldNotReadStateFileMessage\", stateFile, log.FormatResourceString(\"General.IncompatibleStateFileType\"));",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Yeah, that sounds like a good idea to me. @marcpopMSFT, agree? If so, I can write up some (very detailed) instructions on testing it.",
              "createdAt": "2021-07-14T21:39:11Z",
              "path": "src/Tasks/StateFileBase.cs",
              "diffHunk": "@@ -77,8 +77,17 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp\n                     using (FileStream s = File.OpenRead(stateFile))\n                     {\n                         using var translator = BinaryTranslator.GetReadTranslator(s, buffer: null);\n+\n                         byte version = 0;\n                         translator.Translate(ref version);\n+                        // If retVal is still null or the version is wrong, log a message not a warning. This could be a valid cache with the wrong version preventing correct deserialization.\n+                        // For the latter case, internals may be unexpectedly null.\n+                        if (retVal == null || version != CurrentSerializationVersion)\n+                        {\n+                            log.LogMessageFromResources(\"General.CouldNotReadStateFileMessage\", stateFile, log.FormatResourceString(\"General.IncompatibleStateFileType\"));",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Please reach out to Richa with the scenario you want covered.  The difficulty with fresh machine tests as you can only have one.",
              "createdAt": "2021-07-15T20:59:00Z",
              "path": "src/Tasks/StateFileBase.cs",
              "diffHunk": "@@ -77,8 +77,17 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp\n                     using (FileStream s = File.OpenRead(stateFile))\n                     {\n                         using var translator = BinaryTranslator.GetReadTranslator(s, buffer: null);\n+\n                         byte version = 0;\n                         translator.Translate(ref version);\n+                        // If retVal is still null or the version is wrong, log a message not a warning. This could be a valid cache with the wrong version preventing correct deserialization.\n+                        // For the latter case, internals may be unexpectedly null.\n+                        if (retVal == null || version != CurrentSerializationVersion)\n+                        {\n+                            log.LogMessageFromResources(\"General.CouldNotReadStateFileMessage\", stateFile, log.FormatResourceString(\"General.IncompatibleStateFileType\"));",
              "author": {
                "login": "marcpopMSFT"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "retval will always be null here, right?\r\n```suggestion\r\n                        if (version != CurrentSerializationVersion)\r\n```",
              "createdAt": "2021-07-14T19:53:51Z",
              "path": "src/Tasks/StateFileBase.cs",
              "diffHunk": "@@ -77,8 +77,17 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp\n                     using (FileStream s = File.OpenRead(stateFile))\n                     {\n                         using var translator = BinaryTranslator.GetReadTranslator(s, buffer: null);\n+\n                         byte version = 0;\n                         translator.Translate(ref version);\n+                        // If retVal is still null or the version is wrong, log a message not a warning. This could be a valid cache with the wrong version preventing correct deserialization.\n+                        // For the latter case, internals may be unexpectedly null.\n+                        if (retVal == null || version != CurrentSerializationVersion)",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Update comment",
              "createdAt": "2021-07-14T21:33:57Z",
              "path": "src/Tasks/StateFileBase.cs",
              "diffHunk": "@@ -77,8 +77,17 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp\n                     using (FileStream s = File.OpenRead(stateFile))\n                     {\n                         using var translator = BinaryTranslator.GetReadTranslator(s, buffer: null);\n+\n                         byte version = 0;\n                         translator.Translate(ref version);\n+                        // If retVal is still null or the version is wrong, log a message not a warning. This could be a valid cache with the wrong version preventing correct deserialization.\n+                        // For the latter case, internals may be unexpectedly null.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}