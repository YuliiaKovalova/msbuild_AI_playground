{
  "number": 9665,
  "title": "Feature Query API",
  "body": "Fixes #9653\r\n\r\n### Context\r\nWe need an API that can tell us whether a specific feature is available or not.\r\n\r\n### Changes Made\r\n#### Added a new API\r\n```csharp\r\nnamespace Microsoft.Build.Framework\r\n{\r\n    public static class Features\r\n    {\r\n        public static FeatureStatus CheckFeatureAvailability(string featureName) \r\n        {\r\n        }\r\n    }\r\n\r\n    public enum FeatureStatus\r\n    {\r\n        Undefined,\r\n        Available,\r\n        NotAvailable,\r\n        Preview,\r\n    }\r\n}\r\n```\r\nUsage example:\r\n```csharp\r\n// Available, NotAvailable or NotFound\r\nvar availability = Features.CheckFeatureAvailability(\"Feauture1\");\r\n```\r\n#### Command-line support\r\nfor switches `/featureavailability` and `/fa`.\r\n\r\nSimilar to `/version` switch, if `featureavailability` switch is detected then ignores other switches. `/version` switch has higher priority than `featureavailability`.\r\n\r\nThere is no logo shown when `/featureavailability` is detected (similar to` /getProperty`).\r\n\r\n```\r\nPS>msbuild /fa:Feature1\r\nAvailable\r\n\r\nPS>msbuild /featureavailability:Feauture2\r\nUndefined\r\n\r\nPS>msbuild /featureavailability:Feauture1,test /fa:Feature2\r\n{\r\n  \"Feature1\": \"Available\",\r\n  \"test\": \"Undefined\",\r\n  \"Feature2\": \"NotAvailable\"\r\n}\r\n\r\nPS>msbuild /fa:\r\nMSBUILD : error MSB1067: Must provide a feature name for the featureavailability switch.\r\n    Full command line: 'msbuild /fa'\r\n  Switches appended by response files:\r\nSwitch: /fa\r\n\r\nFor switch syntax, type \"MSBuild -help\"\r\n```\r\n\r\n#### Property Function `CheckFeatureAvailability`\r\n\r\n```csharp\r\nstring CheckFeatureAvailability(string featureName)\r\n```\r\nThe result is one of \"Undefined\", \"Available\", \"NotAvailable\" strings.\r\n\r\nUsage Example:\r\n```$([MSBuild]::CheckFeatureAvailability(Feature1))```\r\n\r\n### Testing\r\nManual and unit tests.\r\n\r\n### Notes\r\n\r\n",
  "state": "MERGED",
  "createdAt": "2024-01-19T16:13:11Z",
  "updatedAt": "2024-02-06T16:26:16Z",
  "closedAt": "2024-02-06T16:26:05Z",
  "mergedAt": "2024-02-06T16:26:05Z",
  "additions": 264,
  "deletions": 2,
  "changedFiles": 21,
  "headRefName": "queryAPI",
  "isDraft": false,
  "author": {
    "login": "surayya-MS"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "surayya-MS"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "49bed0ec261a3a127cf51d3623f4c6878da98705",
          "message": "implement CheckFeatureAvailability",
          "committedDate": "2024-01-18T16:27:44Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "28297c6714eb4824209cae15c606fc452d433931",
          "message": "add command line support for feature availability",
          "committedDate": "2024-01-19T15:50:22Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "14e7a32466d09ea86e7a70b2d44603ff93cc394a",
          "message": "Update src/Framework/FeatureAvailabilityChecker.cs\n\nCo-authored-by: Ladi Prosek <ladi.prosek@gmail.com>",
          "committedDate": "2024-01-22T10:31:21Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d018cc07d54ba5e3c00d2ebcec54fb09e3e26d6a",
          "message": "change NotFound to 0 in FeatureStatus",
          "committedDate": "2024-01-23T11:08:28Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d896fa897122566c11ee7a84cd6a72dc60765f55",
          "message": "support ask for multiple features displayed in json format",
          "committedDate": "2024-01-23T13:50:24Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d00b86e149d793ffd004832393b0361d22753bab",
          "message": "do not show logo if featureavailability switch is set",
          "committedDate": "2024-01-23T14:17:55Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c9d4b4fe98461c83f512743ff46dc7b51ba4b5b2",
          "message": "add featureavailability switch unit test",
          "committedDate": "2024-01-23T16:37:54Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b9f85c68abddb7c9db13fa135ff2e70ecd09616e",
          "message": "support property function",
          "committedDate": "2024-01-24T08:31:05Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7d30eb48f1522018b257c282cbb41719fcf74379",
          "message": "small fix",
          "committedDate": "2024-01-24T09:02:21Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a5511f97a4a9755f18768b01cdb64ae7ef7b8d76",
          "message": "Update src/MSBuild/Resources/Strings.resx\n\nCo-authored-by: Roman Konecny <rokonecn@microsoft.com>",
          "committedDate": "2024-01-30T13:26:12Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a66e4bcc0875d7a407cfa95550825be2326d5b35",
          "message": "rename class",
          "committedDate": "2024-01-30T13:43:32Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "736722691f38fea1387d6669b19d991f31011d3a",
          "message": "small fix",
          "committedDate": "2024-01-30T13:43:55Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "27a27e47775416facdc0c66422caf497b460e292",
          "message": "add comment for NumberOfParameterlessSwitches and NumberOfParameterizedSwitches",
          "committedDate": "2024-01-30T13:46:06Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c356250ef273b0f8320284e8f32e5d6b33a2eaae",
          "message": "fix MissingFeatureAvailabilityError text",
          "committedDate": "2024-01-30T13:48:39Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aee552085b65cda07ed268e3d3c4b76dafe6e363",
          "message": "rename file",
          "committedDate": "2024-01-30T13:59:09Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5b52a0ac62919324987e01c21ff6c4e7adb7e852",
          "message": "update strings",
          "committedDate": "2024-01-30T13:59:18Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fd217d13a94d51895966fc6cc908cb3e0149e5b8",
          "message": "update comment for Features class",
          "committedDate": "2024-01-30T14:01:51Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0ede528089b45b764a652ea929cddfe5179c5311",
          "message": "add Preview status",
          "committedDate": "2024-01-31T15:28:17Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "68ff29799f1df902b4fd62d2f775728a1e506032",
          "message": "make _featureStatusMap readonly",
          "committedDate": "2024-02-01T09:05:40Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c0fdfcebff11dd4959ccfb03e97aee229376c09e",
          "message": "Update src/Framework/Features.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-02-01T17:29:16Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b61ca2237ff2e75a1e7ae68b25cf11ef208c5c49",
          "message": "remove features from the _featureStatusMap",
          "committedDate": "2024-02-01T17:30:49Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c9155549903ee820148d18e53257ab3ce175e2f5",
          "message": "Merge branch 'queryAPI' of https://github.com/surayya-MS/msbuild into queryAPI",
          "committedDate": "2024-02-01T17:30:53Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "63034ebf1e28c8606ca8b0c1feab67f4606189f2",
          "message": "fix test",
          "committedDate": "2024-02-01T18:03:47Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4ce6e30b47b7f7158c64079583109f60866d303d",
          "message": "use Undefined instead of NotFound status",
          "committedDate": "2024-02-01T18:09:38Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2852cd6be8af36d0c9afbe2b2c64c8e83f263843",
          "message": "rename variable",
          "committedDate": "2024-02-05T16:36:43Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> If we go with the command-line support (does it map to a known requirement or is it for completeness/future-proofing?), I think it would be useful to support asking for several or all features with one invocation. The `getProperty` switch is prior art - it prints just the value when asking for one, and JSON-formatted output when asking for many.\r\n\r\nThere are no requirements for command-line support yet, I implemented it for completeness, and might remove it later from the PR. Thanks for suggestion! I agree it is more consistent the way you described. I'll change it to support asking for multiple features.",
        "createdAt": "2024-01-22T10:49:20Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "We could also expose the new functionality as a [property function](https://learn.microsoft.com/en-us/visualstudio/msbuild/property-functions?view=vs-2022). This would make it available to project files, and via switches like `getProperty` also to command line, without having to add a new command line switch.\r\n\r\nI think we'd want to get @baronfel's feedback here. The requirements would be met with a programmatic API for MSBuild hosts (e.g. IDEs) but it's definitely useful to explore additional angles. Thank you!",
        "createdAt": "2024-01-22T11:11:21Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I agree with Ladi - we should ensure an easy way to check feature enablement at all points that MSBuild can be extended/consumed:\r\n\r\n* CLI (done)\r\n* API (covers loggers, in-process evaluation/execution)\r\n* Property Functions (covers various props/targets based extension)",
        "createdAt": "2024-01-22T15:52:38Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit (one dictionary access instead of two):\r\n```suggestion\r\n            return _featureStatusMap.TryGetValue(featureName, out FeatureStatus status) ?\r\n                 status : FeatureStatus.NotFound;\r\n```",
              "createdAt": "2024-01-22T10:09:25Z",
              "path": "src/Framework/FeatureAvailabilityChecker.cs",
              "diffHunk": "@@ -0,0 +1,60 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        // TODO: Add more status if needed\n+        // Preview,\n+        // Deprecated,\n+    }\n+\n+    /// <summary>\n+    /// This class is used to check if a feature is available or not.\n+    /// </summary>\n+    public static class FeatureAvailabilityChecker\n+    {\n+        private static Dictionary<string, FeatureStatus> _featureStatusMap = new Dictionary<string, FeatureStatus>\n+        {\n+            // TODO: Fill in the dictionary with the features and their status\n+            { \"Feature1\", FeatureStatus.Available },\n+            { \"Feature2\", FeatureStatus.NotAvailable },\n+        };\n+\n+        /// <summary>\n+        /// Checks if a feature is available or not.\n+        /// </summary>\n+        /// <param name=\"featureName\">The name of the feature.</param>\n+        /// <returns>A feature status <see cref=\"FeatureStatus\"/>.</returns>\n+        public static FeatureStatus CheckFeatureAvailability(string featureName)\n+        {\n+            return _featureStatusMap.ContainsKey(featureName) ?\n+                _featureStatusMap[featureName] : FeatureStatus.NotFound;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I expect this class might grow in scope by adding like list of features and such.\r\nPlease consider to rename it along with comment. I'd suggest something generic such as 'Features'",
              "createdAt": "2024-01-30T12:31:54Z",
              "path": "src/Framework/FeatureAvailabilityChecker.cs",
              "diffHunk": "@@ -0,0 +1,56 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+    }\n+\n+    /// <summary>\n+    /// This class is used to check if a feature is available or not.\n+    /// </summary>\n+    public static class FeatureAvailabilityChecker",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I think we might need `Preview` status so clients can choose if it will use feature if it is stable vs preview.\r\n@baronfel do you agree?",
              "createdAt": "2024-01-30T12:34:00Z",
              "path": "src/Framework/FeatureAvailabilityChecker.cs",
              "diffHunk": "@@ -0,0 +1,56 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "That seems useful, yeah.",
              "createdAt": "2024-01-31T15:14:48Z",
              "path": "src/Framework/FeatureAvailabilityChecker.cs",
              "diffHunk": "@@ -0,0 +1,56 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "Done",
              "createdAt": "2024-01-31T15:28:55Z",
              "path": "src/Framework/FeatureAvailabilityChecker.cs",
              "diffHunk": "@@ -0,0 +1,56 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "If I underastand ti correctly `NumberOfParameterizedSwitches` has to be last as it is used for countof(ParameterlessSwitch).\r\nPlease move `FeautureAvailability` above it and add comment to `NumberOfParameterlessSwitches` with meaning \"This has be be kept as last enum value\"",
              "createdAt": "2024-01-30T12:39:06Z",
              "path": "src/MSBuild/CommandLineSwitches.cs",
              "diffHunk": "@@ -50,7 +50,8 @@ internal enum ParameterlessSwitch\n #if DEBUG\n             WaitForDebugger,\n #endif\n-            NumberOfParameterlessSwitches\n+            NumberOfParameterlessSwitches,",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n      {StrBegin=\"MSBUILD : error MSB1067: \"}UE: This happens if the user does something like \"msbuild.exe -featureavailability\". The user must pass in an actual feature name\r\n```",
              "createdAt": "2024-01-30T12:40:40Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -1053,6 +1053,14 @@\n       LOCALIZATION: The prefix \"MSBUILD : error MSBxxxx:\" should not be localized.\n     </comment>\n   </data>\n+  <data name=\"MissingFeatureAvailabilityError\" UESanitized=\"true\" Visibility=\"Public\">\n+    <value>MSBUILD : error MSB1067: Must provide a property name for the featureavailability switch.</value>\n+    <comment>\n+      {StrBegin=\"MSBUILD : error MSB1067: \"}UE: This happens if the user does something like \"msbuild.exe -featureavailability\". The user must pass in an actual property name",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Thanks for catching this!",
              "createdAt": "2024-01-30T13:26:07Z",
              "path": "src/MSBuild/Resources/Strings.resx",
              "diffHunk": "@@ -1053,6 +1053,14 @@\n       LOCALIZATION: The prefix \"MSBUILD : error MSBxxxx:\" should not be localized.\n     </comment>\n   </data>\n+  <data name=\"MissingFeatureAvailabilityError\" UESanitized=\"true\" Visibility=\"Public\">\n+    <value>MSBUILD : error MSB1067: Must provide a property name for the featureavailability switch.</value>\n+    <comment>\n+      {StrBegin=\"MSBUILD : error MSB1067: \"}UE: This happens if the user does something like \"msbuild.exe -featureavailability\". The user must pass in an actual property name",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: can be readonly",
              "createdAt": "2024-01-31T20:50:56Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is in preview.\n+        /// </summary>\n+        Preview,\n+    }\n+\n+    /// <summary>\n+    /// This class is used to manage features.\n+    /// </summary>\n+    public static class Features\n+    {\n+        private static Dictionary<string, FeatureStatus> _featureStatusMap = new Dictionary<string, FeatureStatus>",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What is the intended use case for having separate values for `NotFound` and `NotAvailable`?",
              "createdAt": "2024-02-01T16:51:47Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "The difference between using `NotAvailable` and `NotFound` statuses is that `NotAvailable` indicates that the feature is definitely not available, whereas `NotFound` indicates that the feature was not found in our list of features. We may not add all the features to the dictionary, so `NotFound` does not necessarily mean that the feature is not available.",
              "createdAt": "2024-02-01T17:42:48Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "It is slightly confusing. What about `Undefined`?",
              "createdAt": "2024-02-01T18:02:55Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "Yes, that is a better name for it. Thanks!",
              "createdAt": "2024-02-01T18:06:56Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "Renamed it to `Undefined`.",
              "createdAt": "2024-02-01T18:09:53Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n        /// The feature is in preview, subject to change API or behavior between releases.\r\n```",
              "createdAt": "2024-02-01T16:52:20Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is in preview.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How do we expect this to be used? For instance suppose we have analyzer API v0.1, and someone writes an analyzer against it. Then we make a breaking API change to 0.2. If the API consumer wishes to support both versions, can they tell which to use? If they support only v0.1, how do they detect that the current MSBuild provides only v0.2?",
              "createdAt": "2024-02-01T16:54:34Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is in preview.\n+        /// </summary>\n+        Preview,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I guess, the name of the feature will reflect the version of the preview changes. `Preview` status just shows that this feature is not stable and will likely change.\r\n\r\nFor the given example I see it like this:\r\n1. { \"AnalyzerAPIv0.1\",  FeatureStatus.Preview }\r\n\r\n2. { \"AnalyzerAPIv0.1\" ,  FeatureStatus.NotAvailable }, \r\n    { \"AnalyzerAPIv0.2\", FeatureStatus.Preview }\r\n\r\n3. (let's say v0.3 is the final version) \r\n    { \"AnalyzerAPIv0.1\" ,  FeatureStatus.NotAvailable }, \r\n    { \"AnalyzerAPIv0.2\", FeatureStatus.NotAvailable },\r\n    { \"AnalyzerAPIv0.3\", FeatureStatus.Available }\r\n\r\n\r\n@rokonec , @baronfel correct me please.",
              "createdAt": "2024-02-01T17:46:33Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is in preview.\n+        /// </summary>\n+        Preview,",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": ">Then we make a breaking API change to 0.2. If the API consumer wishes to support both versions, can they tell which to use?\r\n\r\nI suppose they would have to use two different msbuild versions.\r\n",
              "createdAt": "2024-02-01T17:59:45Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is in preview.\n+        /// </summary>\n+        Preview,",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "I thought mostly about use case \"feature is in preview so VS or others can respect their user preference about using or not using preview features\". \r\nIf API changes I was thinking about hierarchical features names like `ANALYZERS.DISTRIBUTED.V1.2` where user can query any level like `ANALYZERS.DISTRIBUTED` for backward compatibility.",
              "createdAt": "2024-02-01T18:00:30Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is in preview.\n+        /// </summary>\n+        Preview,",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "@rokonec, do you I understand you correctly that instead of making breaking changes to analyzers we will add new API for backward compatibility while in preview phase?",
              "createdAt": "2024-02-01T18:20:19Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is in preview.\n+        /// </summary>\n+        Preview,",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "> we will add new API for backward compatibility while in preview phase\r\n\r\nIt is valid option if needed. We can make breaking changes during preview and feature API can signalize consumers state of that new version. If customer needs to know if give MSBuild us preview version 1 or 2 Feature API will tell.",
              "createdAt": "2024-02-05T15:55:53Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is in preview.\n+        /// </summary>\n+        Preview,",
              "author": {
                "login": "rokonec"
              }
            },
            {
              "body": "I'd like to see an example of this. We have an upcoming \"progress\" API for tasks which seems like a good use case. Can you make up a feature  name for that and then show an example of what code a task that wishes to provide progress should use to wrap the progress-logging calls?",
              "createdAt": "2024-02-05T17:38:09Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is in preview.\n+        /// </summary>\n+        Preview,",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "This is all hypothetical as progress API might not be best practical candidate for it. But I can imagine this use case:\r\nLets have two actors Alice and Bob (they just moved from security team to MSBuild team). Alice tell Bob that she is about to create Progress API with feature name \"Logging.Progress.API\" and it will be in preview mode soon. Bob would like to use this feature but no sooner than it is stable.\r\n1) Alice is working on Logging API, creates preview version of it and makes feature `Logging.Progress.API => preview`\r\n2) Alice tell Bob that Logging API preview feature is merged to main and point out to code and/or its docs\r\n3) Bob creates branch (or rebase) from main and update related tasks to use progress API, but with runtime conditions `Logging.Progress.API == available`. He will test it locally by hardcoding `Logging.Progress.API into available` and eventually merge it into main\r\n4) Meanwhile Alice will continue with Progress API and eventually consider it stable and change feature status to \"available\"\r\n5) This will make task modified at 3) finally using Progress API",
              "createdAt": "2024-02-06T15:26:29Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is in preview.\n+        /// </summary>\n+        Preview,",
              "author": {
                "login": "rokonec"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What's the plan to check this in? Do it with an empty list until we have a feature?",
              "createdAt": "2024-02-01T16:58:02Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is in preview.\n+        /// </summary>\n+        Preview,\n+    }\n+\n+    /// <summary>\n+    /// This class is used to manage features.\n+    /// </summary>\n+    public static class Features\n+    {\n+        private static readonly Dictionary<string, FeatureStatus> _featureStatusMap = new Dictionary<string, FeatureStatus>\n+        {\n+            // TODO: Fill in the dictionary with the features and their status\n+            { \"Feature1\", FeatureStatus.Available },\n+            { \"Feature2\", FeatureStatus.NotAvailable },",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good point",
              "createdAt": "2024-02-01T17:29:03Z",
              "path": "src/Framework/Features.cs",
              "diffHunk": "@@ -0,0 +1,61 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// The status of a feature.\n+    /// </summary>\n+    public enum FeatureStatus\n+    {\n+        /// <summary>\n+        /// The feature is not found.\n+        /// </summary>\n+        NotFound,\n+\n+        /// <summary>\n+        /// The feature is available.\n+        /// </summary>\n+        Available,\n+\n+        /// <summary>\n+        /// The feature is not available.\n+        /// </summary>\n+        NotAvailable,\n+\n+        /// <summary>\n+        /// The feature is in preview.\n+        /// </summary>\n+        Preview,\n+    }\n+\n+    /// <summary>\n+    /// This class is used to manage features.\n+    /// </summary>\n+    public static class Features\n+    {\n+        private static readonly Dictionary<string, FeatureStatus> _featureStatusMap = new Dictionary<string, FeatureStatus>\n+        {\n+            // TODO: Fill in the dictionary with the features and their status\n+            { \"Feature1\", FeatureStatus.Available },\n+            { \"Feature2\", FeatureStatus.NotAvailable },",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Naming convention, should be `options` without the `s_` prefix. Or the `ToJsonString` call can be moved to `JsonOutputFormatter` so it can use the `s_options` static field there.",
              "createdAt": "2024-02-05T16:21:21Z",
              "path": "src/MSBuild/XMake.cs",
              "diffHunk": "@@ -4502,5 +4510,26 @@ private static void ShowVersion()\n                 Console.Write(ProjectCollection.Version.ToString());\n             }\n         }\n+\n+        private static void ShowFeatureAvailability(string[] features)\n+        {\n+            if (features.Length == 1)\n+            {\n+                string featureName = features[0];\n+                FeatureStatus availability = Features.CheckFeatureAvailability(featureName);\n+                Console.WriteLine(availability);\n+            }\n+            else\n+            {\n+                var jsonNode = new JsonObject();\n+                foreach (string featureName in features)\n+                {\n+                    jsonNode[featureName] = Features.CheckFeatureAvailability(featureName).ToString();\n+                }\n+\n+                var s_options = new JsonSerializerOptions() { AllowTrailingCommas = false, WriteIndented = true };",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}