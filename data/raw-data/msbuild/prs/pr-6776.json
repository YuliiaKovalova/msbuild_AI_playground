{
  "number": 6776,
  "title": "Help GenerateResource find assemblies when built with MSBuildLocator",
  "body": "If GenerateResource is forced to create a new App Domain, it loses modifications made to the parent app domain. With mainline MSBuild, this is no problem because we don't make modifications. With MSBuildLocator, we do, and losing those modifications (specifically that MSBuildLocator teaches it to find MSBuild and related assemblies) prevents it from finding the assemblies it needs to execute this task.\r\n\r\nThis adds an extra \"Setup\" method before we use the new app domain that adds assemblies next to MSBuild to the app domain.\r\n\r\nFixes [AB#1371725](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1371725)\r\n\r\n(See that bug)\r\n\r\nTested it with the attached repro project, and it no longer repros. I also verified that this still works when building with MSBuild.exe directly.",
  "state": "CLOSED",
  "createdAt": "2021-08-20T22:28:08Z",
  "updatedAt": "2021-09-20T15:45:33Z",
  "closedAt": "2021-09-20T15:45:33Z",
  "mergedAt": null,
  "additions": 22,
  "deletions": 5,
  "changedFiles": 1,
  "headRefName": "locate-msbuild-in-GenerateResource",
  "isDraft": true,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "68c8a88e6b059862eda75ef3a80374a120341173",
          "message": "Help GenerateResource find assemblies\n\nIf GenerateResource is forced to create a new App Domain, it loses modifications made to the parent app domain. With mainline MSBuild, this is no problem because we don't make modifications. With MSBuildLocator, we do, and it prevents it from finding the assemblies it needs to execute this task.\n\nThis adds an extra \"Setup\" method before we use the new app domain that adds assemblies next to MSBuild to the app domain.",
          "committedDate": "2021-08-20T22:24:11Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c17a6d55f5dbf35d323477b23e1babb5c773a3a7",
          "message": "Update src/Tasks/GenerateResource.cs",
          "committedDate": "2021-08-20T23:42:55Z",
          "author": {
            "name": "Forgind",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "nit",
              "createdAt": "2021-08-20T22:36:30Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -815,6 +814,7 @@ public override bool Execute()\n                                 process = new ProcessResourceFiles();\n                             }\n \n+",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "```suggestion\r\n```",
              "createdAt": "2021-08-20T23:33:19Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -815,6 +814,7 @@ public override bool Execute()\n                                 process = new ProcessResourceFiles();\n                             }\n \n+",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "\u2764\ufe0f",
              "createdAt": "2021-08-20T22:38:24Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -2391,6 +2391,24 @@ internal bool StronglyTypedResourceSuccessfullyCreated\n         private bool _useSourcePath = false;\n \n #endregion\n+        internal void Setup()\n+        {\n+            static Assembly TryLoadAssembly(AssemblyName assemblyName)\n+            {\n+                // Look in the MSBuild folder for any unresolved reference. It may be a dependency",
              "author": {
                "login": "benvillalobos"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "So when some dll isn't loaded, TryLoadAssembly runs which attempts to run this method. Do we need to worry about this throwing & catch it? Not too worried about that scenario, it looks like if this code is running then it would have already failed if we didn't do this. The error could be misleading though. Just thinking out loud.\r\n\r\nFrom the docs [here](https://docs.microsoft.com/en-us/dotnet/standard/assembly/resolve-loads)\r\n\r\n> When you write the handler, you should know which assemblies might cause the event to be raised. Your handler should return null for other assemblies.\r\n\r\nShould we restrict the names of allowed assemblies that cause this event to run?",
              "createdAt": "2021-08-20T22:46:05Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -2391,6 +2391,24 @@ internal bool StronglyTypedResourceSuccessfullyCreated\n         private bool _useSourcePath = false;\n \n #endregion\n+        internal void Setup()\n+        {\n+            static Assembly TryLoadAssembly(AssemblyName assemblyName)\n+            {\n+                // Look in the MSBuild folder for any unresolved reference. It may be a dependency\n+                // of MSBuild or a task.\n+                string msbuildDirectoryPath = Path.GetDirectoryName(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath);\n+                string targetAssembly = Path.Combine(msbuildDirectoryPath, assemblyName.Name + \".dll\");\n+                if (File.Exists(targetAssembly))\n+                {\n+                    return Assembly.LoadFrom(targetAssembly);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "This _should_ only be looking in the MSBuild folder, so it shouldn't have anything that has a .dll extension that isn't a real, loadable .dll, and if you added something badly formed and asked for it, then you're asking for trouble.\r\n\r\nIt's still possible, but the main reasons I'd prefer to avoid explicitly listing out those assemblies are that 1) It's messy, and 2) We don't actually know which assemblies we'll need in the future or to cover all code paths. I could just list out all the assemblies we currently ship, but if that changes, we'd have to go back and change the code in GenerateResource, too. Being open could give a misleading error as you say, but I'd prefer cleanliness and future-proof.",
              "createdAt": "2021-08-20T23:42:39Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -2391,6 +2391,24 @@ internal bool StronglyTypedResourceSuccessfullyCreated\n         private bool _useSourcePath = false;\n \n #endregion\n+        internal void Setup()\n+        {\n+            static Assembly TryLoadAssembly(AssemblyName assemblyName)\n+            {\n+                // Look in the MSBuild folder for any unresolved reference. It may be a dependency\n+                // of MSBuild or a task.\n+                string msbuildDirectoryPath = Path.GetDirectoryName(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath);\n+                string targetAssembly = Path.Combine(msbuildDirectoryPath, assemblyName.Name + \".dll\");\n+                if (File.Exists(targetAssembly))\n+                {\n+                    return Assembly.LoadFrom(targetAssembly);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "WRT future debuggability I checked out the previous error/stack trace.\r\n```\r\nThe \"GenerateResource\" task failed unexpectedly.\r\nSystem.ArgumentException: Object type cannot be converted to target type.\r\n   at Microsoft.Build.Tasks.ProcessResourceFiles.Run(TaskLoggingHelper log, ITaskItem[] assemblyFilesList, List`1 inputs, List`1 satelliteInputs, List`1 outputs, Boolean sourcePath, Boolean usePreserializedResources, String language, String namespacename, String resourcesNamespace, String filename, String classname, Boolean publicClass, Boolean extractingResWFiles, String resWOutputDirectory)\r\n   at Microsoft.Build.Tasks.GenerateResource.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\nDone executing task \"GenerateResource\" -- FAILED.\r\nDone building target \"CoreResGen\" in project \"ReproGenerateResourceErrorLibrary.csproj\" -- FAILED.\r\n \r\n```\r\n\r\nWas it difficult to nail this issue down based on the error? If so, we should consider a try-catch around the call to `Run` catching the argument exception and specify some sort of \"MSB1234: Hey this is an app domain issue\".",
              "createdAt": "2021-08-20T23:57:59Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -2391,6 +2391,24 @@ internal bool StronglyTypedResourceSuccessfullyCreated\n         private bool _useSourcePath = false;\n \n #endregion\n+        internal void Setup()\n+        {\n+            static Assembly TryLoadAssembly(AssemblyName assemblyName)\n+            {\n+                // Look in the MSBuild folder for any unresolved reference. It may be a dependency\n+                // of MSBuild or a task.\n+                string msbuildDirectoryPath = Path.GetDirectoryName(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath);\n+                string targetAssembly = Path.Combine(msbuildDirectoryPath, assemblyName.Name + \".dll\");\n+                if (File.Exists(targetAssembly))\n+                {\n+                    return Assembly.LoadFrom(targetAssembly);",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "\"Object type cannot be converted to target type\" made no sense to me at first. It specified ProcessResourceFiles.Run, so I thought there would be a bug somewhere in Run, but it was the method call itself that failed, not anything within it, which was very confusing to me because I initially couldn't think of any way that was possible when it was ProcessResourceFiles.Run was defined in the same class/file as its caller.\r\n\r\nThe only difficulty is that Run does a _lot_ of work: reading the format, using that format to deserialize an object, reading another format, serializing that object again...I suspect there are several different ArgumentExceptions that could be thrown that have nothing to do with app domains.\r\n\r\nThat said, we could put MSB1234 looking for an ArgumentException _when the stack trace stops on ProcessResourceFiles.Run_. I don't think that can happen unless it's an app domain issue. Can you make sure we talk about this in PR review? I'm thinking it might be worth wrapping not just this but also other similar things in other tasks that use app domains with your MSB1234\u2014it is likely that one or more of them are vulnerable to just this issue but haven't seen it yet. It may even be worth trying to make them all fail and seeing how many we can fix before customers see them. Though at that point, it's probably better to do it in a separate PR.",
              "createdAt": "2021-08-21T14:46:12Z",
              "path": "src/Tasks/GenerateResource.cs",
              "diffHunk": "@@ -2391,6 +2391,24 @@ internal bool StronglyTypedResourceSuccessfullyCreated\n         private bool _useSourcePath = false;\n \n #endregion\n+        internal void Setup()\n+        {\n+            static Assembly TryLoadAssembly(AssemblyName assemblyName)\n+            {\n+                // Look in the MSBuild folder for any unresolved reference. It may be a dependency\n+                // of MSBuild or a task.\n+                string msbuildDirectoryPath = Path.GetDirectoryName(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath);\n+                string targetAssembly = Path.Combine(msbuildDirectoryPath, assemblyName.Name + \".dll\");\n+                if (File.Exists(targetAssembly))\n+                {\n+                    return Assembly.LoadFrom(targetAssembly);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}