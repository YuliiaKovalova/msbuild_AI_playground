{
  "number": 6936,
  "title": "Micro perf improvements",
  "body": "### Context\r\nImplementing some small and safe improvement after profiling msbuild evaluation.  This PR optimizes some hotpaths during project load and evaluation for an 1.8% improvement.  \r\n\r\n### Changes Made\r\nFound two hot spots, 1) ProjectElementLink is called a lot and since the variable doesn't change once xmlsource is set, its value can be cached.  2) ElementLocation is costly to create, so let's avoid duplicated calls.\r\n\r\n### Testing\r\nSince the % improvement is small, testing needs to run a lot before seeing an improvement.  5 runs before and after with each run an averaging 1000 load and evaluation of the same project.  Cold run excluded.\r\n\r\nRelease Before (1000x):\r\n    Evaluation average 545014tick + GC 67287tick = 612302tick\r\n    Evaluation average 546346tick + GC 66874tick = 613221tick\r\n    Evaluation average 538098tick + GC 65733tick = 603831tick\r\n    Evaluation average 541525tick + GC 66386tick = 607912tick\r\n    Evaluation average 542447tick + GC 66325tick = 608772tick\r\n\r\nRelease After (1000x) (new commits):\r\n  Evaluation average 537549tick + GC 67420tick = 604970tick\r\n  Evaluation average 535240tick + GC 67488tick = 602729tick\r\n  Evaluation average 534600tick + GC 67277tick = 601877tick\r\n\r\n~~Release After (1000x):~~\r\n    ~~Evaluation average 532705tick + GC 66433tick = 599139tick~~\r\n    ~~Evaluation average 529828tick + GC 66637tick = 596466tick~~\r\n    ~~Evaluation average 531577tick + GC 66333tick = 597911tick~~\r\n    ~~Evaluation average 531160tick + GC 66303tick = 597464tick~~\r\n    ~~Evaluation average 532387tick + GC 66432tick = 598819tick~~\r\n",
  "state": "CLOSED",
  "createdAt": "2021-10-11T22:54:44Z",
  "updatedAt": "2021-10-18T21:03:01Z",
  "closedAt": "2021-10-18T21:03:01Z",
  "mergedAt": null,
  "additions": 19,
  "deletions": 12,
  "changedFiles": 3,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "yuehuang010"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "6c831ecb8e1ee16ea3dd2051ca3fcba8a5bc3384",
          "message": "Micro perf improvements",
          "committedDate": "2021-10-11T21:00:50Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d8f477c7d75543e0cfb43b9eb65b4377824fd2cc",
          "message": "Remove comment",
          "committedDate": "2021-10-11T22:53:43Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1f66e251f6e4db01f9a2a2f900ae1078626a5539",
          "message": "Fix tests",
          "committedDate": "2021-10-12T00:20:58Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2ea86c4262d89088774f0e19572ecaad0c29741a",
          "message": "Add back string null check.",
          "committedDate": "2021-10-12T19:31:49Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1e20d62c760f8834199aa136553e03e4c51ec8cb",
          "message": "use cached link instead of .Link",
          "committedDate": "2021-10-12T22:19:06Z",
          "author": {
            "name": "Yue (Felix) Huang",
            "email": "yuehuang010@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> @arkalyanms do you know if it's OK to cache `ILinkedXml.Link` like this?\r\n\r\nJust getting caught up on things. There are 2 implementations of the linked apis. \r\n\r\nOne in CPS that is in-proc for evaluation caching and uses only the construction links to capture the elementlocation to help with ancestry traversal. That will not be impacted by this change. \r\n\r\nThere is another implementation for netframework though where the linked object is out of proc and the scenario to worry about would be invalidation of the xml source if/when there is a transition from local xmls to OOP xmls or vice-versa within a VS session. Even there I believe it's an all or nothing deal with all construction links out of proc or none. So setting the PRE post constructor would still be pulling an object from the OOP memory block that is currently active. But I haven't looked at that implementation very closely, only reviewed the design. So adding @svetkereMS to talk about quirks if any and will get this to his attention in our sync on 10/19. \r\n",
        "createdAt": "2021-10-18T18:58:11Z",
        "author": {
          "login": "arunchndr"
        }
      },
      {
        "body": "I ran a few more longer test runs and the perf gain is less once I reverted get_Location().  The XmlElement.Location can change in the case of renaming the ProjectRootElement to a new file.  \r\n```\r\npublic ElementLocation Location => _xmlSource_Link != null ? _xmlSource_Link.Location : XmlElement.Location;\r\n```",
        "createdAt": "2021-10-18T19:07:21Z",
        "author": {
          "login": "yuehuang010"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Previously if `file` was null or empty, we avoided the allocation and returned `EmptyLocation`. Should this optimization be re-added here?",
              "createdAt": "2021-10-12T11:52:13Z",
              "path": "src/Build/ElementLocation/ElementLocation.cs",
              "diffHunk": "@@ -171,7 +171,7 @@ internal static ElementLocation FactoryForDeserialization(ITranslator translator\n         /// </summary>\n         internal static ElementLocation Create(string file)\n         {\n-            return Create(file, 0, 0);\n+            return new ElementLocation.SmallElementLocation(file, 0, 0);",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We talked about this in PR triage today: are we sure this preserves correctness with the link? ",
              "createdAt": "2021-10-18T15:20:17Z",
              "path": "src/Build/Construction/ProjectElement.cs",
              "diffHunk": "@@ -428,6 +431,7 @@ public virtual void CopyFrom(ProjectElement element)\n         internal void SetProjectRootElementFromParser(XmlElementWithLocation xmlElement, ProjectRootElement projectRootElement)\n         {\n             _xmlSource = xmlElement;\n+            _xmlSource_Link = _xmlSource.Link;",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}