{
  "number": 8292,
  "title": "[FancyLogger] Added support for line wrappings",
  "body": "Fixes #\r\n\r\n### Context\r\nFancyLogger uses a custom buffer, so line wrapping must be added manually. \r\n![image](https://user-images.githubusercontent.com/5952839/212177774-ea8ad83e-1de9-4721-8be9-777917af6b22.png)\r\n\r\n### Changes Made\r\n\r\nAdded `ANSIWrap` method that splits a string into a list minding ANSI characters. (This is important as splitting them can have uninteded consequences on the formatting).\r\n\r\nEach `FancyLoggerBufferLine` automatically does this process and stores the result in `WrappedLines` member.\r\n\r\nThe `Render` method stores all `WrappedLines` items from all lines into an array which is then read when drawing the display contents.\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\nWill improve efficiency, as is still buggy. \r\n",
  "state": "MERGED",
  "createdAt": "2023-01-10T01:46:42Z",
  "updatedAt": "2023-01-20T06:50:50Z",
  "closedAt": "2023-01-20T06:50:50Z",
  "mergedAt": "2023-01-20T06:50:50Z",
  "additions": 169,
  "deletions": 98,
  "changedFiles": 5,
  "headRefName": "edvilme-flg-line-wraps",
  "isDraft": false,
  "author": {
    "login": "edvilme"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "2386a8bf1592410e3f5b7cf35dcc52992052e97b",
          "message": "Added NextLine member to FancyLoggerBufferLine, as well as tetecting breakpoint",
          "committedDate": "2023-01-09T22:09:52Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4f614b30ec91ae40c48ea892e07e4998a2a609f9",
          "message": "Added support for line wrappings (experimental)",
          "committedDate": "2023-01-10T01:40:04Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ec39dc0f7aedd70edc2e4150fd13f9f9764d7455",
          "message": "Delete unused FancyLoggerBufferNew",
          "committedDate": "2023-01-10T01:47:25Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8175d746a4389e7faaa44fa53167f82799ccc9b6",
          "message": "Simplified line wrapping",
          "committedDate": "2023-01-10T21:36:15Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ea98349d508c0079f3f77c8a7d2056aac9ab1c2a",
          "message": "Optimized and cleaned code",
          "committedDate": "2023-01-10T23:20:40Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c662687aa625d9f11d536a12dc9415f21be22bf1",
          "message": "Merge branch 'main' of https://github.com/dotnet/msbuild into edvilme-flg-line-wraps",
          "committedDate": "2023-01-10T23:25:34Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4b332417a19d8d741800f811a6cddb8462987d16",
          "message": "Added missing using directive",
          "committedDate": "2023-01-10T23:39:26Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b80b177f1cd64bb903f4ea39a319d4749d0e1a0b",
          "message": "Updated ANSIWrap to use spans",
          "committedDate": "2023-01-11T20:37:27Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "18dd358fe8cfb4f488739a19eef6d00b14a739bc",
          "message": "Improved performance",
          "committedDate": "2023-01-12T02:15:25Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "eed34ea8bef99c3b7e99db09a778d01ea0f145c4",
          "message": "Rewrote Render to avoid hanging on linewraps. Scrolling is still buggy",
          "committedDate": "2023-01-12T20:56:20Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "38e9f5964449b93af73efa097fa5c4af542c277c",
          "message": "Fixed scrolling issues",
          "committedDate": "2023-01-12T21:55:58Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "396580a7afd892f8a99b78191d32b9541d8a27ea",
          "message": "Deleted testing timer",
          "committedDate": "2023-01-12T21:59:26Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2721a7a3a7dd2ec5e376044141026dd36c558dfd",
          "message": "Removed unnecessary using directive",
          "committedDate": "2023-01-12T22:01:05Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "37aeead0e7bd373a0604678da74a0225694123b0",
          "message": "Updating Render efficiency",
          "committedDate": "2023-01-13T19:44:46Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a289c4e95f6d91ba14479ff762f69cce98f70beb",
          "message": "Improve performance and updated await to match 60fps",
          "committedDate": "2023-01-14T00:02:48Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "041dd508b1751cae535dec0150e818cce7eb1d37",
          "message": "Improved performance",
          "committedDate": "2023-01-14T00:50:10Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5ae44cb0aaefd5aac4b3549dac84cfd7b2e4bf37",
          "message": "Fixed scrolling issues",
          "committedDate": "2023-01-17T20:58:18Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c2a87fee7c6ff293d28887b4e372c93801f283ff",
          "message": "Done",
          "committedDate": "2023-01-17T21:32:32Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1404a7367b5c9a7dbf030a915a9b03fea5ff3700",
          "message": "Merge with dotnet/main",
          "committedDate": "2023-01-17T22:03:57Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "88fe4863170cd2925a626c61a1ca2f3b277fd0af",
          "message": "Fixed code styling",
          "committedDate": "2023-01-17T22:53:37Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "08c717c35ff919d909dbcf9e9dd67125be474c20",
          "message": "Removed unused overrideOverflowLines parameter from WriteNewLineAfter",
          "committedDate": "2023-01-17T22:58:13Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8c288a48d0bd5cbe341d1d80e8fe84a881f40a9c",
          "message": "Fixes bugs",
          "committedDate": "2023-01-17T23:45:40Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1ea98ebb4e61e96f25032ad4d3342aafb50a0bf3",
          "message": "Added smarter ansi breakpoints",
          "committedDate": "2023-01-18T02:55:01Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "da41b019557891f3c773b1f8cb63a73b5b17f39d",
          "message": "Fixed ANSIBreakpoint",
          "committedDate": "2023-01-19T20:51:22Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "06c84e1314e5181dcd6fcfa024c0f5709ba72b7c",
          "message": "Fixed line breakpoints, and added option for lines *not* to wrap\n\nPreviously, the breakpoint was only calculated once for the first line, causing unexpected behavior. Also, there might be cases in which we don't want to perform this calculation",
          "committedDate": "2023-01-19T21:38:24Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "84af1cf98fc5b1e603a983eeaba7077cac7317d2",
          "message": "Fixed comments",
          "committedDate": "2023-01-19T22:25:43Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "99ba34ada78388dbf18bc0dd4232ad80325b4a22",
          "message": "Overload public facing methods",
          "committedDate": "2023-01-20T01:28:20Z",
          "author": {
            "name": "Eduardo Villalpando Mello",
            "email": "t-eduardov@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This is _very_ fast...",
              "createdAt": "2023-01-13T23:25:35Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -39,13 +49,13 @@ public static void Initialize()\n             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());\n             Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());\n \n-            Task.Run(async () => {\n+            /*Task.Run(async () => {\n                 while (true)\n                 {\n-                    await Task.Delay(500 / 60);\n+                    await Task.Delay((1/60)/1000);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Can we just iterate along the string until we either reach position or find the right number of non-ANSI characters? That should let you get by without allocating any new strings.",
              "createdAt": "2023-01-18T01:13:42Z",
              "path": "src/Build/Logging/FancyLogger/ANSIBuilder.cs",
              "diffHunk": "@@ -14,6 +15,35 @@ public static string ANSIRemove(string text)\n             return Regex.Replace(text, \"\\\\x1b(?:[@-Z\\\\-_]|\\\\[[0-?]*[ -\\\\/]*[@-~])\", \"\");\n         }\n \n+        public static int ANSIBreakpoint(string text, int position)\n+        {\n+            if (position >= text.Length) return text.Length;\n+            // Get substring\n+            string substring = text.Substring(0, position);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This would ignore any ansi characters between position and position + difference, right?",
              "createdAt": "2023-01-18T01:14:00Z",
              "path": "src/Build/Logging/FancyLogger/ANSIBuilder.cs",
              "diffHunk": "@@ -14,6 +15,35 @@ public static string ANSIRemove(string text)\n             return Regex.Replace(text, \"\\\\x1b(?:[@-Z\\\\-_]|\\\\[[0-?]*[ -\\\\/]*[@-~])\", \"\");\n         }\n \n+        public static int ANSIBreakpoint(string text, int position)\n+        {\n+            if (position >= text.Length) return text.Length;\n+            // Get substring\n+            string substring = text.Substring(0, position);\n+            string substringWithoutANSI = ANSIRemove(substring);\n+            // Get length difference\n+            int difference = substring.Length - substringWithoutANSI.Length;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Yes but as you said it does not consider the edge case where there is an ANSI string being clipped afterwards. Newest commit should fix that",
              "createdAt": "2023-01-18T03:01:03Z",
              "path": "src/Build/Logging/FancyLogger/ANSIBuilder.cs",
              "diffHunk": "@@ -14,6 +15,35 @@ public static string ANSIRemove(string text)\n             return Regex.Replace(text, \"\\\\x1b(?:[@-Z\\\\-_]|\\\\[[0-?]*[ -\\\\/]*[@-~])\", \"\");\n         }\n \n+        public static int ANSIBreakpoint(string text, int position)\n+        {\n+            if (position >= text.Length) return text.Length;\n+            // Get substring\n+            string substring = text.Substring(0, position);\n+            string substringWithoutANSI = ANSIRemove(substring);\n+            // Get length difference\n+            int difference = substring.Length - substringWithoutANSI.Length;",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "string.Empty?",
              "createdAt": "2023-01-18T01:15:51Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -46,16 +46,19 @@ public void Initialize(IEventSource eventSource)\n             Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed);\n             // Initialize FancyLoggerBuffer\n             FancyLoggerBuffer.Initialize();\n+            // TODO: Fix. First line does not appear at top. Leaving empty line for now\n+            FancyLoggerBuffer.WriteNewLine(\"\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Remove the -?",
              "createdAt": "2023-01-18T01:16:02Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -28,12 +28,12 @@ public FancyLogger()\n         public void Initialize(IEventSource eventSource)\n         {\n             // Register for different events\n-            // Started\n+            // - Started",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Talked about this offline, but we can do better than this.",
              "createdAt": "2023-01-18T21:17:28Z",
              "path": "src/Build/Logging/FancyLogger/ANSIBuilder.cs",
              "diffHunk": "@@ -14,6 +15,40 @@ public static string ANSIRemove(string text)\n             return Regex.Replace(text, \"\\\\x1b(?:[@-Z\\\\-_]|\\\\[[0-?]*[ -\\\\/]*[@-~])\", \"\");\n         }\n \n+        public static int ANSIBreakpoint(string text, int position)\n+        {\n+            if (position >= text.Length) return text.Length;\n+            // Create new array of positions\n+            int[] nonAnsiIndices = new int[text.Length];\n+            for (int i = 0; i < text.Length; i++)\n+            {\n+                // TODO: Figure how to do with spans for greater efficiency\n+                nonAnsiIndices[i] = ANSIRemove(text.Substring(0, i)).Length - 1;",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why this move? I think it's equivalent, right?",
              "createdAt": "2023-01-18T21:18:36Z",
              "path": "src/Build/Logging/FancyLogger/ANSIBuilder.cs",
              "diffHunk": "@@ -56,9 +91,9 @@ public static string SpaceBetween(string leftText, string rightText, int width)\n                 string leftNoFormatString = ANSIRemove(leftText);\n                 string rightNoFormatString = ANSIRemove(rightText);\n                 if (leftNoFormatString.Length + rightNoFormatString.Length > Console.BufferWidth) return leftText + rightText;\n-                int space = Console.BufferWidth - (leftNoFormatString.Length + rightNoFormatString.Length) - 1;",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "No. Otherwise it would cause it to be misaligned in some cases",
              "createdAt": "2023-01-19T21:02:02Z",
              "path": "src/Build/Logging/FancyLogger/ANSIBuilder.cs",
              "diffHunk": "@@ -56,9 +91,9 @@ public static string SpaceBetween(string leftText, string rightText, int width)\n                 string leftNoFormatString = ANSIRemove(leftText);\n                 string rightNoFormatString = ANSIRemove(rightText);\n                 if (leftNoFormatString.Length + rightNoFormatString.Length > Console.BufferWidth) return leftText + rightText;\n-                int space = Console.BufferWidth - (leftNoFormatString.Length + rightNoFormatString.Length) - 1;",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is a very detailed comment. I would normally suggest splitting it across multiple lines if it's this line, but this one you might want to just remove prior to merging \ud83d\ude09",
              "createdAt": "2023-01-18T21:19:35Z",
              "path": "src/Build/Logging/FancyLogger/FancyLogger.cs",
              "diffHunk": "@@ -46,16 +46,20 @@ public void Initialize(IEventSource eventSource)\n             Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed);\n             // Initialize FancyLoggerBuffer\n             FancyLoggerBuffer.Initialize();\n+            // TODO: Fix. First line does not appear at top. Leaving empty line for now\n+            FancyLoggerBuffer.WriteNewLine(string.Empty);\n+            // FancyLoggerBuffer.WriteNewLine(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\");",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\nSounds like you could get away with not initializing this, right?",
              "createdAt": "2023-01-18T21:22:31Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -13,13 +13,24 @@ namespace Microsoft.Build.Logging.FancyLogger\n     public class FancyLoggerBufferLine\n     {\n         private static int Counter = 0;\n+        private string _text = string.Empty;\n+        public List<string> WrappedText { get; private set; } = new();",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "No, it throws an error. ",
              "createdAt": "2023-01-19T21:40:54Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -13,13 +13,24 @@ namespace Microsoft.Build.Logging.FancyLogger\n     public class FancyLoggerBufferLine\n     {\n         private static int Counter = 0;\n+        private string _text = string.Empty;\n+        public List<string> WrappedText { get; private set; } = new();",
              "author": {
                "login": "edvilme"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This comment doesn't quite make sense; it looks like you're delaying by 1/60 of a second per i, but you can't delay by a rate.",
              "createdAt": "2023-01-18T21:25:38Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -31,85 +42,100 @@ public FancyLoggerBufferLine(string text)\n     public class FancyLoggerBuffer\n     {\n         private static List<FancyLoggerBufferLine> Lines = new();\n-        private static int TopLineIndex = 0;\n+        public static int TopLineIndex = 0;\n+        public static string Footer = string.Empty;\n         private static bool AutoScrollEnabled = true;\n+        private static bool IsTerminated = false;\n         public static void Initialize()\n         {\n-            // Use alternate buffer\n-            // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer\n-            // Console.Write(ANSIBuilder.Buffer.UseMainBuffer());\n-            Console.OutputEncoding = Encoding.UTF8;\n-            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());\n-\n-            Console.Write(ANSIBuilder.Cursor.Invisible());\n-\n-            Task.Run(async () => {\n-                while (true)\n-                {\n-                    await Task.Delay(500 / 60);\n-                    Render();\n-                }\n-            });\n \n             Task.Run(() =>\n             {\n-                while (true)\n+                // Configure buffer, encoding and cursor\n+                Console.OutputEncoding = Encoding.UTF8;\n+                Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());\n+                Console.Write(ANSIBuilder.Cursor.Invisible());\n+\n+                // Counter for delaying render\n+                int i = 0;\n+\n+                // Execute while the buffer is active\n+                while (!IsTerminated)\n                 {\n-                    switch (Console.ReadKey().Key)\n+                    // Delay by 60 fps (1/60 seconds)",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This feels like a bug fix to me rather than a workaround; why do we want to remove it?",
              "createdAt": "2023-01-18T21:27:47Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -31,85 +42,100 @@ public FancyLoggerBufferLine(string text)\n     public class FancyLoggerBuffer\n     {\n         private static List<FancyLoggerBufferLine> Lines = new();\n-        private static int TopLineIndex = 0;\n+        public static int TopLineIndex = 0;\n+        public static string Footer = string.Empty;\n         private static bool AutoScrollEnabled = true;\n+        private static bool IsTerminated = false;\n         public static void Initialize()\n         {\n-            // Use alternate buffer\n-            // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer\n-            // Console.Write(ANSIBuilder.Buffer.UseMainBuffer());\n-            Console.OutputEncoding = Encoding.UTF8;\n-            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());\n-\n-            Console.Write(ANSIBuilder.Cursor.Invisible());\n-\n-            Task.Run(async () => {\n-                while (true)\n-                {\n-                    await Task.Delay(500 / 60);\n-                    Render();\n-                }\n-            });\n \n             Task.Run(() =>\n             {\n-                while (true)\n+                // Configure buffer, encoding and cursor\n+                Console.OutputEncoding = Encoding.UTF8;\n+                Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());\n+                Console.Write(ANSIBuilder.Cursor.Invisible());\n+\n+                // Counter for delaying render\n+                int i = 0;\n+\n+                // Execute while the buffer is active\n+                while (!IsTerminated)\n                 {\n-                    switch (Console.ReadKey().Key)\n+                    // Delay by 60 fps (1/60 seconds)\n+                    i++;\n+                    Task.Delay((i/60) * 1_000).ContinueWith((t) =>\n                     {\n-                        case ConsoleKey.UpArrow:\n-                            if (TopLineIndex > 0) TopLineIndex--;\n-                            break;\n-                        case ConsoleKey.DownArrow:\n-                            if (TopLineIndex < Console.BufferHeight - 3) TopLineIndex++;\n-                            break;\n-                        case ConsoleKey.Spacebar:\n-                        case ConsoleKey.Escape:\n-                            AutoScrollEnabled = !AutoScrollEnabled;\n-                            break;\n+                        Render();\n+                    });\n+                    if (Console.KeyAvailable)\n+                    { \n+                        // Handle keyboard input\n+                        ConsoleKey key = Console.ReadKey().Key;\n+                        switch (key)\n+                        {\n+                            case ConsoleKey.UpArrow:\n+                                if (TopLineIndex > 0) TopLineIndex--;\n+                                break;\n+                            case ConsoleKey.DownArrow:\n+                                TopLineIndex++;\n+                                break;\n+                            case ConsoleKey.Spacebar:\n+                                AutoScrollEnabled = !AutoScrollEnabled;\n+                                break;\n+                            default:\n+                                break;\n+                        }\n                     }\n                 }\n             });\n         }\n \n         public static void Terminate()\n         {\n-            // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer\n-            Console.Clear();\n+            IsTerminated = true;\n+            // Reset configuration for buffer and cursor, and clear screen\n             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());\n             Console.Write(ANSIBuilder.Eraser.Display());\n-\n             Console.Write(ANSIBuilder.Cursor.Visible());\n+            // TODO: Remove. Fixes a bug that causes contents of the alternate buffer to still show up in the main buffer",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm wondering if we could do some kind of using (<disposable>) thing here to automatically set and unset state. It would make it a bit more future proof. (Feel free to ignore this; just an idea.)",
              "createdAt": "2023-01-18T21:28:29Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -31,85 +42,100 @@ public FancyLoggerBufferLine(string text)\n     public class FancyLoggerBuffer\n     {\n         private static List<FancyLoggerBufferLine> Lines = new();\n-        private static int TopLineIndex = 0;\n+        public static int TopLineIndex = 0;\n+        public static string Footer = string.Empty;\n         private static bool AutoScrollEnabled = true;\n+        private static bool IsTerminated = false;\n         public static void Initialize()\n         {\n-            // Use alternate buffer\n-            // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer\n-            // Console.Write(ANSIBuilder.Buffer.UseMainBuffer());\n-            Console.OutputEncoding = Encoding.UTF8;\n-            Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());\n-\n-            Console.Write(ANSIBuilder.Cursor.Invisible());\n-\n-            Task.Run(async () => {\n-                while (true)\n-                {\n-                    await Task.Delay(500 / 60);\n-                    Render();\n-                }\n-            });\n \n             Task.Run(() =>\n             {\n-                while (true)\n+                // Configure buffer, encoding and cursor\n+                Console.OutputEncoding = Encoding.UTF8;\n+                Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());\n+                Console.Write(ANSIBuilder.Cursor.Invisible());\n+\n+                // Counter for delaying render\n+                int i = 0;\n+\n+                // Execute while the buffer is active\n+                while (!IsTerminated)\n                 {\n-                    switch (Console.ReadKey().Key)\n+                    // Delay by 60 fps (1/60 seconds)\n+                    i++;\n+                    Task.Delay((i/60) * 1_000).ContinueWith((t) =>\n                     {\n-                        case ConsoleKey.UpArrow:\n-                            if (TopLineIndex > 0) TopLineIndex--;\n-                            break;\n-                        case ConsoleKey.DownArrow:\n-                            if (TopLineIndex < Console.BufferHeight - 3) TopLineIndex++;\n-                            break;\n-                        case ConsoleKey.Spacebar:\n-                        case ConsoleKey.Escape:\n-                            AutoScrollEnabled = !AutoScrollEnabled;\n-                            break;\n+                        Render();\n+                    });\n+                    if (Console.KeyAvailable)\n+                    { \n+                        // Handle keyboard input\n+                        ConsoleKey key = Console.ReadKey().Key;\n+                        switch (key)\n+                        {\n+                            case ConsoleKey.UpArrow:\n+                                if (TopLineIndex > 0) TopLineIndex--;\n+                                break;\n+                            case ConsoleKey.DownArrow:\n+                                TopLineIndex++;\n+                                break;\n+                            case ConsoleKey.Spacebar:\n+                                AutoScrollEnabled = !AutoScrollEnabled;\n+                                break;\n+                            default:\n+                                break;\n+                        }\n                     }\n                 }\n             });\n         }\n \n         public static void Terminate()\n         {\n-            // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer\n-            Console.Clear();\n+            IsTerminated = true;\n+            // Reset configuration for buffer and cursor, and clear screen\n             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is there something that handles adjusting topLineId if this inserts at the top line? Is the answer that that just isn't a thing?",
              "createdAt": "2023-01-18T21:45:35Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -137,16 +163,19 @@ public static int GetLineIndexById(int lineId)\n         }\n         public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, FancyLoggerBufferLine line)\n         {\n-            // Get line index\n-            int lineIndex = GetLineIndexById(lineId);\n-            if (lineIndex == -1) return null;\n-            // Save top line\n-            int topLineId = Lines[TopLineIndex].Id;\n-            // Add\n-            Lines.Insert(lineIndex + 1, line);\n-            // Get updated top line index\n-            TopLineIndex = GetLineIndexById(topLineId);\n-            // Return\n+            if (lineId != -1)\n+            {\n+                // Get line index\n+                int lineIndex = GetLineIndexById(lineId);\n+                if (lineIndex == -1) return null;\n+                // Get line end index\n+                Lines.Insert(lineIndex, line);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Consider doing this with binary search",
              "createdAt": "2023-01-18T22:01:41Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs",
              "diffHunk": "@@ -137,16 +163,19 @@ public static int GetLineIndexById(int lineId)\n         }\n         public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, FancyLoggerBufferLine line)\n         {\n-            // Get line index\n-            int lineIndex = GetLineIndexById(lineId);\n-            if (lineIndex == -1) return null;\n-            // Save top line\n-            int topLineId = Lines[TopLineIndex].Id;\n-            // Add\n-            Lines.Insert(lineIndex + 1, line);\n-            // Get updated top line index\n-            TopLineIndex = GetLineIndexById(topLineId);\n-            // Return\n+            if (lineId != -1)\n+            {\n+                // Get line index\n+                int lineIndex = GetLineIndexById(lineId);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Where did 400 come from?",
              "createdAt": "2023-01-18T22:04:12Z",
              "path": "src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs",
              "diffHunk": "@@ -19,13 +18,14 @@ public enum MessageType\n         public string Message;\n         public FancyLoggerBufferLine? Line;\n         public MessageType Type;\n-        //\n         public string? Code;\n         public string? FilePath;\n         public int? LineNumber;\n         public int? ColumnNumber;\n         public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)\n         {\n+            Message = args.Message ?? string.Empty;\n+            if (Message.Length > 400) Message = Message.Substring(0, 400);",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}