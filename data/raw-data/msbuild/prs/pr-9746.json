{
  "number": 9746,
  "title": "Embed source file from CodeTaskFactory and RoslynCodeTaskFactory in binlog",
  "body": "Fixes #9686\r\n\r\n### Context\r\n\r\nSee more details in the issue description.\r\n\r\nIn this PR I made changes to embed the generated file that is used for compilation from `CodeTaskFactory` and `RoslynCodeTaskFactory`. It could be the source file or an actual generated file (like from `Fragment`). \r\nBecause there is a race between embedding the generated file and deleting it, instead I save its contents and use the existing method `AddFileFromMemory` to embed it.\r\nThe file is embedded in binlog as {projectDirectory}/{guid}-{taskName}-compilation-file.tmp\r\n\r\n### Changes Made\r\nIntroduced new event args for embedding generated file in binlog `GeneratedFileUsedEventArgs` similar to `ResponseFileUsedEventArgs`\r\n\r\n```csharp\r\nnamespace Microsoft.Build.Framework\r\n{\r\n    [Serializable]\r\n    public class GeneratedFileUsedEventArgs : BuildMessageEventArgs\r\n    {\r\n        public GeneratedFileUsedEventArgs();\r\n\r\n        public GeneratedFileUsedEventArgs(string filePath, string content);\r\n\r\n        public string? FilePath { set; get; }\r\n\r\n        public string? Content { set; get; }\r\n    }\r\n}\r\n```\r\n\r\nIntroduced new method for the logger that is used for tasks:\r\n```csharp\r\nTaskLoggingHelper.LogIncludeGeneratedFile(string filePath, string content)\r\n```\r\n\r\n\r\n### Testing\r\nAdded unit tests and tested manually. \r\n\r\n### Notes",
  "state": "MERGED",
  "createdAt": "2024-02-15T14:04:31Z",
  "updatedAt": "2024-03-20T19:28:54Z",
  "closedAt": "2024-03-20T19:28:47Z",
  "mergedAt": "2024-03-20T19:28:47Z",
  "additions": 479,
  "deletions": 3,
  "changedFiles": 17,
  "headRefName": "embe-file-from-CodeTaskFactory",
  "isDraft": false,
  "author": {
    "login": "surayya-MS"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "29f8489a856ff76fce4e53e138d46440fb02c711",
          "message": "embed source file from CodeTaskFactory and RoslynCodeTaskFactory in binlog",
          "committedDate": "2024-02-15T13:39:56Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "da93ecdbaf5d2a2c51f3641b5373ed9dcbbea80a",
          "message": "remove Shouldly from CodeTaskFactoryTests",
          "committedDate": "2024-02-15T14:08:38Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "5f083991674207b5a27c5f71b3f1491460331802",
          "message": "Revert \"remove Shouldly from CodeTaskFactoryTests\"\n\nThis reverts commit da93ecdbaf5d2a2c51f3641b5373ed9dcbbea80a.",
          "committedDate": "2024-02-15T14:11:57Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "693a61212772b7a9a8fdd843dad1cf6f99344942",
          "message": "moved unit test for RoslynCodeTaskFactory",
          "committedDate": "2024-02-15T14:18:09Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "37a21d903acdf47cf6f80000beb3d59289cac4ba",
          "message": "small fix",
          "committedDate": "2024-02-15T14:44:39Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "76f1a4b446d44fdb1a4caa8387fab6df9270f359",
          "message": "Update src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-02-15T16:34:54Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d96df3c2abbafcdebb5e98a3c284fabdad823325",
          "message": "make SourceFilePath nullable",
          "committedDate": "2024-02-15T16:43:20Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "488dd862875ddbb161594147ebdadbc56c648bc4",
          "message": "log source file in case of compilation failure too",
          "committedDate": "2024-02-15T17:11:03Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "bfa5c541e887a79534872bfa5875b81823563fa0",
          "message": "fix",
          "committedDate": "2024-02-16T11:20:47Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2a2eabcb6bf8f95bec998cdf69961d27e00bc43e",
          "message": "add tests for case when source file fails to compile",
          "committedDate": "2024-02-16T11:34:36Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "faafcc43f590af15b6f99b2a3a287388f8b2f980",
          "message": "fix",
          "committedDate": "2024-02-16T12:16:35Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "448aba849792787cc7d670c00568d1ab37645829",
          "message": "fix spaces",
          "committedDate": "2024-02-16T12:20:30Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4e6191c6b40725b3edc8a1a6a6960d48cf01c501",
          "message": "fix formatting",
          "committedDate": "2024-02-16T12:20:43Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "601d3d1679557ff8eb140d1a626af19be582b1a9",
          "message": "remove RoslynCodeTaskFactory tests to see if Windows Core and Windows Full fail or not",
          "committedDate": "2024-02-16T12:38:10Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "aea4ee75038e8129c7be0366ac5bdb755d422a96",
          "message": "remove CodeTaskFactory tests to see if Windows Core and Windos Full fail or not",
          "committedDate": "2024-02-16T12:39:26Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "8021d78dabb272e687c173286ce31eb8ad3f6f7b",
          "message": "Revert \"remove CodeTaskFactory tests to see if Windows Core and Windos Full fail or not\"\n\nThis reverts commit aea4ee75038e8129c7be0366ac5bdb755d422a96.",
          "committedDate": "2024-02-16T13:16:50Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9ba79061b91f457f4d573f920e7c18e5143cdebe",
          "message": "Revert \"remove RoslynCodeTaskFactory tests to see if Windows Core and Windows Full fail or not\"\n\nThis reverts commit 601d3d1679557ff8eb140d1a626af19be582b1a9.",
          "committedDate": "2024-02-16T13:16:57Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9a55dd969306cb1c4e18e6f63b9a48d76619b036",
          "message": "Reapply \"remove CodeTaskFactory tests to see if Windows Core and Windos Full fail or not\"\n\nThis reverts commit 8021d78dabb272e687c173286ce31eb8ad3f6f7b.",
          "committedDate": "2024-02-16T13:39:10Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cf859ea74a81d2f1d06c694be25581e925a3c605",
          "message": "test if binary logger in ObjectModelHelpers is the problem",
          "committedDate": "2024-02-16T13:42:30Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "6477957809086c952b4935b8c02ac755714f28d8",
          "message": "Revert \"test if binary logger in ObjectModelHelpers is the problem\"\n\nThis reverts commit cf859ea74a81d2f1d06c694be25581e925a3c605.",
          "committedDate": "2024-02-16T14:18:02Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1ca25d6bf0938ed27f05bb7122a19ac56268d94c",
          "message": "Revert \"Reapply \"remove CodeTaskFactory tests to see if Windows Core and Windos Full fail or not\"\"\n\nThis reverts commit 9a55dd969306cb1c4e18e6f63b9a48d76619b036.",
          "committedDate": "2024-02-16T14:20:47Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "938a05fafebcc95c18da08ecb28a5ecbe5bc4e2b",
          "message": "fix pipeline problem",
          "committedDate": "2024-02-21T16:23:32Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d121f3fcfe419a3b89ae6443bf0132e80fa02d50",
          "message": "Merge branch 'main' of https://github.com/surayya-MS/msbuild",
          "committedDate": "2024-02-21T16:32:40Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b6100f6bb512e9a21856da5bde9634300da5e4b1",
          "message": "Merge branch 'main' into embe-file-from-CodeTaskFactory",
          "committedDate": "2024-02-21T16:33:23Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a2d5f70dd3689b72da7afb2a46984c0ea4288264",
          "message": "Convert to raw strings",
          "committedDate": "2024-02-21T20:16:24Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d66abaffa16cdcb37a8005c638250b4f15411377",
          "message": "Use test environment",
          "committedDate": "2024-02-21T20:19:19Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e43ec806bcf08562cc95129ae9ee1774fa1cb02e",
          "message": "change CodeTaskFactoryTests to be similar to RoslynCodeTaskFactory tests",
          "committedDate": "2024-02-22T13:36:21Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f5b5be8f4e44444be493b9b525099ac281965089",
          "message": "Update src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-02-22T13:37:52Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a3e4643a03ed7e8cec722bae5364f9ef6d861b1e",
          "message": "Update src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-02-22T13:37:58Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "198da602db0e4347b741278d4ede3d8f586bb1de",
          "message": "Update src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-02-22T13:38:23Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a5e8f1564ab03c847df3b2b4916b1eb872ee6911",
          "message": "Update src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs\n\nCo-authored-by: Rainer Sigwald <raines@microsoft.com>",
          "committedDate": "2024-02-22T13:38:39Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "114938397+surayya-MS@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d2317ebb0c6ef3d428ac3c27c6ce8d67916f6509",
          "message": "Merge branch 'embe-file-from-CodeTaskFactory' of https://github.com/surayya-MS/msbuild into embe-file-from-CodeTaskFactory",
          "committedDate": "2024-02-22T13:38:44Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "19d0f055df1c8e92c1e13a62974d5eeafbccc1b0",
          "message": "make IHasSourceFilePath internal",
          "committedDate": "2024-02-22T13:47:18Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "66f1ad04d1961286e17a8f145b7697ca67c7b58c",
          "message": "small fix",
          "committedDate": "2024-02-22T13:52:37Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "68d4f77338bbd099619402ebcef6d0899ac79c47",
          "message": "small fix",
          "committedDate": "2024-02-22T13:53:34Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "348241260c58c47aa2a976ed5e535be4336eb52b",
          "message": "rename file",
          "committedDate": "2024-02-22T15:10:35Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "b0dde8e16761c48fe7a3d3fd7a2a070f9636f009",
          "message": "remove unnecessary variable",
          "committedDate": "2024-02-22T15:43:07Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "3576fb043f99db90163696b4a3f1acc0c84ac597",
          "message": "embed generated files from CodeTaskFactory and RoslynCodeTaskFactory in binlog",
          "committedDate": "2024-02-22T18:14:48Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "977fe9341bcc424d1d611b6198d7059d84851df7",
          "message": "Merge branch 'main' of https://github.com/surayya-MS/msbuild",
          "committedDate": "2024-03-06T09:19:43Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e76dfd998d2d641563223fccb3227b6bfb379e21",
          "message": "Merge branch 'main' into embe-file-from-CodeTaskFactory",
          "committedDate": "2024-03-06T09:20:28Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "24ad7ef8ab06ed876f106c77252f97460eda1517",
          "message": "log file from memory in binlog",
          "committedDate": "2024-03-07T18:00:22Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "218ff2af85fc659ca96578f8a190c732356ee10e",
          "message": "add summary for LogIncludeGeneratedFile",
          "committedDate": "2024-03-07T18:03:23Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "42ed5ea6c452b02387ed5a65207ffc9560a9c88c",
          "message": "small fix",
          "committedDate": "2024-03-07T18:09:01Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9f200a07e5028330fc59d1004718e00e31983903",
          "message": "rename variable and add summary",
          "committedDate": "2024-03-07T18:34:37Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "219ba796caf0a38a19283af398faf7bf3ad7c1bc",
          "message": "move using static to the end",
          "committedDate": "2024-03-08T11:14:03Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "23a4dbc8c389e3b53610b9302d079cf76c217dcd",
          "message": "small fix",
          "committedDate": "2024-03-11T12:08:22Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "907a29359fabde137c32d61c463eddd18c9321fb",
          "message": "use ExtendedBuildMessageEventArgs instead of a custom created event",
          "committedDate": "2024-03-11T12:09:22Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d1b9cbd989ae6d304fff4769402f67f27f6e3312",
          "message": "set message importance",
          "committedDate": "2024-03-11T13:19:30Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "cbd7e0beb9c06be25960888c1389a38a2c413b21",
          "message": "use different constructor ExtendedBuildMessageEventArgs",
          "committedDate": "2024-03-11T14:05:12Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "4f358f7e8acd245b3b7111851ade80170a4655d5",
          "message": "fix linux and macos tests",
          "committedDate": "2024-03-12T09:49:30Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2618a0230b12cade0b393c2df993cf1deed5a970",
          "message": "use new custom event ResponseGeneratedFileEventArgs",
          "committedDate": "2024-03-15T14:14:37Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "503894ab80bee3819f0285b973b20e869401cb7b",
          "message": "1. embed the compilation file as {projectDirectory}/{guid}-{taskName}-compilation-file.tmp\n2. use helper for tests to reduce code repetition",
          "committedDate": "2024-03-18T03:33:31Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1f5d3ccb03aef22db4781249ab441beb357e8988",
          "message": "remove unnessesary usings from tests",
          "committedDate": "2024-03-18T03:40:32Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a803d68100b3feefca2082f0d57f0d837bcf74c5",
          "message": "add summary for projectDirectory",
          "committedDate": "2024-03-18T03:43:00Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1809224449b3dc6d415fb80df9e9d89ef1225f6d",
          "message": "fix test",
          "committedDate": "2024-03-18T08:47:46Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "f71f22d0dbc23a83efc42c6e298165bdbb5c3849",
          "message": "rename new event to GeneratedFileUsedEventArgs;\nupdate version in BinaryLogger;",
          "committedDate": "2024-03-19T13:17:06Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7f56f40ec59ecf6860024b2d0066724a5f24109f",
          "message": "remove IHasProjectFullPath and instead get the project directory from relative file path inside BinaryLogger",
          "committedDate": "2024-03-19T13:45:13Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "06e4f59cac1ecd75b77e58fb160622ba92aff4c7",
          "message": "rename GeneratedFileUsedEventArgs properties",
          "committedDate": "2024-03-19T13:46:32Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "d1d1f9b0085545f5f26327830f39f4a9804115d2",
          "message": "rename variables",
          "committedDate": "2024-03-19T13:48:40Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "22d8da2cafb798bb9757651ae07f2c9ebd08285f",
          "message": "rename property",
          "committedDate": "2024-03-19T13:49:07Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "dd444c62c6430b5b1f56cb7d11f6f31ba764eeb7",
          "message": "Add summaries for GeneratedFileUsedEventArgs properties",
          "committedDate": "2024-03-19T13:49:59Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c9b98f178b9779c16dbb784b9ca84924ff410154",
          "message": "fix typo in variable name",
          "committedDate": "2024-03-19T13:52:46Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "7a27083e68e1b33cc468e459b82f2762a3e214ff",
          "message": "fix",
          "committedDate": "2024-03-19T15:24:19Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fb7031fdab413ac039b68e1a957742fdf11d4e7b",
          "message": "remove Serializable attribute from GeneratedFileUsedEventArgs",
          "committedDate": "2024-03-20T09:53:09Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0f612d56b683c6a96b65c186b307670cc3d8e4cd",
          "message": "Revert \"remove Serializable attribute from GeneratedFileUsedEventArgs\"\n\nThis reverts commit fb7031fdab413ac039b68e1a957742fdf11d4e7b.",
          "committedDate": "2024-03-20T12:05:53Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "2133ebc3d33ab15c3012ee14a345bf0285d53f1b",
          "message": "move serialization logic to WriteToStream/CreateFromStream in GeneratedFileUsedEventArgs;\nadd node packets test cases for new event args",
          "committedDate": "2024-03-20T14:40:49Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9d80c282fdfeebda74fc006eff775e1a1800bc6d",
          "message": "Merge branch 'main' of https://github.com/surayya-MS/msbuild",
          "committedDate": "2024-03-20T14:41:00Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "a1f9cef97bbd23fefbbc85050cffdfc3fa293d5d",
          "message": "Merge branch 'main' into embe-file-from-CodeTaskFactory",
          "committedDate": "2024-03-20T14:41:11Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "95b1d5bf59f53a66b988c39e647e67b96393caab",
          "message": "add serialazible back",
          "committedDate": "2024-03-20T16:05:20Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "17a0b098218368366418893b5ac4d3af9b5dac9e",
          "message": "add serialization/desirialization test for GeneratedFileUsedEventArgs",
          "committedDate": "2024-03-20T16:29:09Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ac256bec9749c73921210c1e26d8d1ecd18c028a",
          "message": "remove serializable attribute from GeneratedFileUsedEventArgs;\nskip GeneratedFileUsedEventArgs in TaskFactoryLoggingHost.IsEventSerializable",
          "committedDate": "2024-03-20T17:06:12Z",
          "author": {
            "name": "Surayya Huseyn Zada",
            "email": "shuseynzada@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Question: this is doing what the bug asked for, which is logging the `.cs` file if it was separate. Looking at it, I wonder if we should try to do one better and embed the _generated_ source file too, regardless of where the C# came from--that is, log the file we tried to compile instead of the source.\r\n\r\n@rainersigwald , I agree that logging the generated file would improve debuggability. However, on the second thought wouldn't that be redundant because the code is already in the .csproj file? And what about Type \"Fragment\" and \"Method\"?\r\nExample:\r\n```xml\r\n<Task>\r\n\t<Code Type=\"Class\" Language=\"cs\">\r\n\t\tusing Microsoft.Build.Framework;\r\n\t\tusing Microsoft.Build.Utilities;\r\n\r\n\t\tpublic class MyTask : Microsoft.Build.Utilities.Task\r\n\t\t{\r\n\t\tpublic override bool Execute()\r\n\t\t{\r\n\t\tLog.LogMessage(MessageImportance.High, \"MyTask has been executed. The value of StringComparison is: \" + StringComparison);\r\n\t\treturn true;\r\n\t\t}\r\n\t\t}\r\n\t</Code>\r\n</Task>\r\n```\r\n",
        "createdAt": "2024-02-16T17:11:18Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "I think logging the generated file for `Fragment` and `Method` types would be the most helpful thing, since the interaction of the code we generate and the code from the project file could be going wrong and seeing it all in one place could help explain why.\r\n\r\nAgreed that if you have 100% of the code in the project there's no need to log it redundantly.",
        "createdAt": "2024-02-16T17:17:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "There are some strange fails on Windows Full and Windows Core (Now it is only Windows Full and I didn't change the code). The error message is:\r\n```\r\nChild node \"1\" exited prematurely. Shutting down. Diagnostic information may be found in files in \"C:\\Users\\VssAdministrator\\AppData\\Local\\Temp\\MSBuildTemp\\\" and will be named MSBuild_*.failure.txt. This location can be changed by setting the MSBUILDDEBUGPATH environment variable to a different directory.Microsoft.Build.Exceptions.InternalLoggerException: The build stopped unexpectedly because of an unexpected logger failure. ---> System.ArgumentNullException: Parameter \"BuildEventContext\" cannot be null.\r\n   at Microsoft.Build.Shared.ErrorUtilities.ThrowArgumentNull(String parameterName, String resourceName) in /_/src/Shared/ErrorUtilities.cs:line 575\r\n   at Microsoft.Build.Shared.ErrorUtilities.VerifyThrowArgumentNull(Object parameter, String parameterName, String resourceName) in /_/src/Shared/ErrorUtilities.cs:line 568\r\n   at Microsoft.Build.Shared.ErrorUtilities.VerifyThrowArgumentNull(Object parameter, String parameterName) in /_/src/Shared/ErrorUtilities.cs:line 557\r\n   at Microsoft.Build.BackEnd.Logging.ParallelConsoleLogger.MessageHandler(Object sender, BuildMessageEventArgs e) in /_/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs:line 1132\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseMessageEvent(Object sender, BuildMessageEventArgs buildEvent) in /_/src/Build/BackEnd/Components/Logging/EventSourceSink.cs:line 323\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Build.Exceptions.InternalLoggerException.Throw(Exception innerException, BuildEventArgs e, String messageResourceName, Boolean initializationException, String[] messageArgs) in /_/src/Build/Errors/InternalLoggerException.cs:line 253\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseMessageEvent(Object sender, BuildMessageEventArgs buildEvent) in /_/src/Build/BackEnd/Components/Logging/EventSourceSink.cs:line 344\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent) in /_/src/Build/BackEnd/Components/Logging/EventSourceSink.cs:line 223\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent, Int32 sinkId) in /_/src/Build/BackEnd/Components/Logging/EventSourceSink.cs:line 211\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.RouteBuildEvent(KeyValuePair`2 nodeEvent) in /_/src/Build/BackEnd/Components/Logging/LoggingService.cs:line 1630\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.RouteBuildEvent(Object loggingEvent) in /_/src/Build/BackEnd/Components/Logging/LoggingService.cs:line 1614\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.LoggingEventProcessor(Object loggingEvent) in /_/src/Build/BackEnd/Components/Logging/LoggingService.cs:line 1454\r\n```\r\nGiven the error message, my guess was that the unexpected error could be thrown while the execution of the new tests. So, I removed the tests to see if Windows Full and Windows Core will fail again, and they failed again. When reverting the changes back now Windows Core passes and Windows Full not. \r\n\r\n@rainersigwald , @ladipro what do you think might be the problem?",
        "createdAt": "2024-02-16T17:19:26Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "> I think logging the generated file for `Fragment` and `Method` types would be the most helpful thing, since the interaction of the code we generate and the code from the project file could be going wrong and seeing it all in one place could help explain why.\r\n> \r\n> Agreed that if you have 100% of the code in the project there's no need to log it redundantly.\r\n\r\nThanks! I agree. In that case, it makes sense to log the generated file not only for `Fragment` and `Method` but for `Class` also. I will change the code and add tests.",
        "createdAt": "2024-02-16T17:22:22Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "That type of error generally indicates a hard crash in a worker node. In this case it's happening in the post-bootstrap portion of our build, when we build the MSBuild codebase with the MSBuild engine you just built (to catch just this kind of problem!).\r\n\r\nIs your new code setting a BuildEventContext to null anywhere? That seems like a legit error. You should be able to repro on your machine by running `build.cmd` to get a bootstrap build, and then using `artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe` to build a project (with a CodeTaskFactory, I guess).",
        "createdAt": "2024-02-16T17:29:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> That type of error generally indicates a hard crash in a worker node. In this case it's happening in the post-bootstrap portion of our build, when we build the MSBuild codebase with the MSBuild engine you just built (to catch just this kind of problem!).\r\n> \r\n> Is your new code setting a BuildEventContext to null anywhere? That seems like a legit error. You should be able to repro on your machine by running `build.cmd` to get a bootstrap build, and then using `artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe` to build a project (with a CodeTaskFactory, I guess).\r\n\r\nI tried to build with `artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe` and it works on my machine. I will investigate further.",
        "createdAt": "2024-02-16T17:40:16Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "@surayya-MS have you been able to reproduce? For what it's worth, running `eng\\cibuild_bootstrapped_msbuild.cmd` reproduces the crash on my machine. Should the new `LogIncludeFile` call be executed only if `initialized` is true?",
        "createdAt": "2024-02-19T17:33:02Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> @surayya-MS have you been able to reproduce? For what it's worth, running `eng\\cibuild_bootstrapped_msbuild.cmd` reproduces the crash on my machine. Should the new `LogIncludeFile` call be executed only if `initialized` is true?\r\n\r\nThanks @ladipro for pointing out the script! I was able to repro the error on my machine. \r\n\r\nThe reason for not checking for `initialized` is because we want to log the file in case when initialization failed (for example file does not compile, I added tests for this case)\r\n\r\nIt looks like the problem arises because of incorrect serializing/deserializing `ResponseFileUsedEventArgs` as `BuildMessageEventArgs` in `ParallelConsoleLogger`. In `BuildMessageEventArgs` nullable is disabled and something goes wrong because of `MessageImportance`. Specifying `MessageImportance.Low` in `ResponseFileUsedEventArgs` seems to fix the issue.",
        "createdAt": "2024-02-21T16:29:58Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "> It looks like the problem arises because of incorrect serializing/deserializing `ResponseFileUsedEventArgs` as `BuildMessageEventArgs` in `ParallelConsoleLogger`. In `BuildMessageEventArgs` nullable is disabled and something goes wrong because of `MessageImportance`. Specifying `MessageImportance.Low` in `ResponseFileUsedEventArgs` seems to fix the issue.\r\n\r\nThe changes you made there look fine to me, but what about this PR is triggering the problem?",
        "createdAt": "2024-02-21T19:37:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> The changes you made there look fine to me, but what about this PR is triggering the problem?\r\n\r\nThe `LogIncludeFile` call in `TaskRegistry.cs` triggers it. I tried removing this call and run the script and it didn't fail. My understanding is that when `eng\\cibuild_bootstrapped_msbuild.cmd` is executed some test is running and fails unexpectedly because of `ParallelConsoleLogger`",
        "createdAt": "2024-02-21T19:51:12Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "The PR is not ready for review yet. I will apply changes so that the generated file would be included in the binlog.",
        "createdAt": "2024-02-21T19:53:53Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "The current logic for `RoslynCodeTaskFactory` is to create a `.tmp` file for compiling regardless of whether the code is coming from a source file or the code inside `<Code>` in `csproj`:\r\nhttps://github.com/dotnet/msbuild/blob/cdcfc3501d6c086407703194f742ab65d5a80525/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs#L689\r\n@rainersigwald should we just embed this compilation file in the binlog instead of embedding the source file if it exists or generated file (the compilation file)?",
        "createdAt": "2024-02-22T18:24:23Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "Yeah that sounds pretty reasonable to me. My only concern would be: are we creating a race between embedding that file and deleting it?",
        "createdAt": "2024-02-22T19:07:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Yeah that sounds pretty reasonable to me. My only concern would be: are we creating a race between embedding that file and deleting it?\r\n\r\nYeah, there is a race condition, and in most cases in tests the file is deleted before being embedded. I missed it when debugging.\r\n\r\nI came up with a different solution of logging the generated file from the given content that should be in the file. I updated the PR description.",
        "createdAt": "2024-03-07T18:31:14Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "Question after reading the comment from the linked PR.\r\n\r\nThe current logic is to create a file when this `MSBUILDLOGCODETASKFACTORYOUTPUT` is set and the compilation failed. \r\n@rainersigwald , should I remove the current behavior now when the files are embedded in the binlog after my changes? And if yes, should I apply change wave for the removal of this behavior?",
        "createdAt": "2024-03-07T18:41:24Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "I'd leave the env car opt in. I wouldn't add it now but putting \"respect env var opt in\" behind \"changewave env var opt in\" feels like a dark path to go down.",
        "createdAt": "2024-03-08T13:40:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The PR is ready for review.",
        "createdAt": "2024-03-12T10:30:08Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "Thanks @ladipro! I investigated if it is possible to get the full path of the file relative to the current project inside of  `BinnaryLogger` and it turns out it is. Removed the interface.",
        "createdAt": "2024-03-19T13:57:45Z",
        "author": {
          "login": "surayya-MS"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Since there's no nullable disable in this file, should this be a `string?`? I see you check it for `null` in `TaskRegistry`.",
              "createdAt": "2024-02-15T15:10:20Z",
              "path": "src/Framework/IHasFilePath.cs",
              "diffHunk": "@@ -0,0 +1,10 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Framework\n+{\n+    public interface IHasSourceFilePath\n+    {\n+        string SourceFilePath { get; }",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I agree",
              "createdAt": "2024-02-15T16:44:17Z",
              "path": "src/Framework/IHasFilePath.cs",
              "diffHunk": "@@ -0,0 +1,10 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Framework\n+{\n+    public interface IHasSourceFilePath\n+    {\n+        string SourceFilePath { get; }",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: we have better technology for these embedded files now :)\r\n\r\n```suggestion\r\n            TransientTestFile taskClass = env.CreateFile(folder, $\"{taskName}.cs\", $$\"\"\"\r\n                namespace InlineTask\r\n                {\r\n                    using Microsoft.Build.Utilities;\r\n\r\n                    public class {{taskName}} : Task\r\n                    {\r\n                        public override bool Execute()\r\n                        {\r\n                            Log.LogMessage(\"Hello, world!\");\r\n                            return !Log.HasLoggedErrors;\r\n                        }\r\n                    }\r\n                }\r\n                \"\"\");         \r\n            TransientTestFile assemblyProj = env.CreateFile(folder, csprojFileName, $\"\"\"\r\n                <Project>\r\n\r\n                  <UsingTask\r\n                    TaskName=\"{taskName}\"\r\n                    TaskFactory=\"RoslynCodeTaskFactory\"\r\n                    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\r\n                    <Task>\r\n                      <Code Type=\"Class\" Language=\"cs\" Source=\"{taskClass.Path}\">\r\n                      </Code>\r\n                    </Task>\r\n                  </UsingTask>\r\n\r\n                    <Target Name=\"{targetName}\">\r\n                        <{taskName} />\r\n                    </Target>\r\n\r\n                </Project>\r\n                \"\"\");\r\n\r\n```",
              "createdAt": "2024-02-15T15:33:56Z",
              "path": "src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs",
              "diffHunk": "@@ -644,6 +644,64 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void EmbedsSourceFileInBinlog()\n+        {\n+            string taskName = \"HelloTask\";\n+            string csprojFileName = \"EmbedsSourceFileInTheBinlogTest.csproj\";\n+            string targetName = \"SayHello\";\n+\n+            var env = TestEnvironment.Create();\n+            TransientTestFolder folder = env.CreateFolder(createFolder: true);\n+            TransientTestFile taskClass = env.CreateFile(folder, $\"{taskName}.cs\", $@\"namespace InlineTask\n+{{\n+    using Microsoft.Build.Utilities;\n+\n+    public class {taskName} : Task\n+    {{\n+        public override bool Execute()\n+        {{\n+            Log.LogMessage(\"\"Hello, world!\"\");\n+            return !Log.HasLoggedErrors;\n+        }}\n+    }}\n+}}\n+\");         \n+            TransientTestFile assemblyProj = env.CreateFile(folder, csprojFileName, $@\"\n+<Project>\n+\n+  <UsingTask\n+    TaskName=\"\"{taskName}\"\"\n+    TaskFactory=\"\"RoslynCodeTaskFactory\"\"\n+    AssemblyFile=\"\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\"\">\n+    <Task>\n+      <Code Type=\"\"Class\"\" Language=\"\"cs\"\" Source=\"\"{taskClass.Path}\"\">\n+      </Code>\n+    </Task>\n+  </UsingTask>\n+\n+    <Target Name=\"\"{targetName}\"\">\n+        <{taskName} />\n+    </Target>\n+\n+</Project>\n+                \");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Is this the right order? I suspect the source file will be most interesting when the task fails to compile, and if I'm reading this correctly it's logging after the compilation attempt rather than before.",
              "createdAt": "2024-02-15T16:12:50Z",
              "path": "src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs",
              "diffHunk": "@@ -201,6 +203,11 @@ public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> pa\n                 }\n             }\n \n+            if (TaskType != null)",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Good point. It makes sense to log the file especially in the case of compilation failure. I changed the code. I will add more tests for this case. Thank you!\r\n",
              "createdAt": "2024-02-15T17:13:34Z",
              "path": "src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs",
              "diffHunk": "@@ -201,6 +203,11 @@ public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> pa\n                 }\n             }\n \n+            if (TaskType != null)",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Since this is a new part of the public API, please add XML doc comments for the interface itself and each member.",
              "createdAt": "2024-02-21T19:50:42Z",
              "path": "src/Framework/IHasFilePath.cs",
              "diffHunk": "@@ -0,0 +1,10 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Framework\n+{\n+    public interface IHasSourceFilePath",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "I would also not oppose making this an `internal` interface . . . theoretically as it is now it could work for a third-party task factory, but there are very few of those!",
              "createdAt": "2024-02-21T20:27:22Z",
              "path": "src/Framework/IHasFilePath.cs",
              "diffHunk": "@@ -0,0 +1,10 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Framework\n+{\n+    public interface IHasSourceFilePath",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Agree. I made this interface internal",
              "createdAt": "2024-02-22T13:54:26Z",
              "path": "src/Framework/IHasFilePath.cs",
              "diffHunk": "@@ -0,0 +1,10 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+namespace Microsoft.Build.Framework\n+{\n+    public interface IHasSourceFilePath",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This follows the existing style but raw strings are so much better that I think we should put them in all new code (and eventually go back and clean up the existing stuff). Pushing a commit that does that.",
              "createdAt": "2024-02-21T20:00:13Z",
              "path": "src/Tasks.UnitTests/CodeTaskFactoryTests.cs",
              "diffHunk": "@@ -1040,6 +1043,164 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void EmbedsSourceFileInBinlog()\n+        {\n+            string sourceFileContent = @\"",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We have helpers to keep all this sort of thing cleaned up and easy. Pushing a commit to use them here.",
              "createdAt": "2024-02-21T20:00:47Z",
              "path": "src/Tasks.UnitTests/CodeTaskFactoryTests.cs",
              "diffHunk": "@@ -1040,6 +1043,164 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void EmbedsSourceFileInBinlog()\n+        {\n+            string sourceFileContent = @\"\n+                                       using System;\n+                    using System.Collections.Generic;\n+                    using System.Text;\n+                    using Microsoft.Build.Utilities;\n+                    using Microsoft.Build.Framework;\n+\n+                    namespace Microsoft.Build.NonShippingTasks\n+                    {\n+                        public class LogNameValue_ClassSourcesTest : Task\n+                        {\n+                            private string variableName;\n+                            private string variableValue;\n+\n+\n+                            [Required]\n+                            public string Name\n+                            {\n+                                get { return variableName; }\n+                                set { variableName = value; }\n+                            }\n+\n+\n+                            public string Value\n+                            {\n+                                get { return variableValue; }\n+                                set { variableValue = value; }\n+                            }\n+\n+\n+                            public override bool Execute()\n+                            {\n+                                // Set the process environment\n+                                Log.LogMessage(\"\"Setting {0}={1}\"\", this.variableName, this.variableValue);\n+                                return true;\n+                            }\n+                        }\n+                    }\n+\";\n+\n+            string tempFileDirectory = Path.GetTempPath();\n+            string tempFileName = Guid.NewGuid().ToString() + \".cs\";\n+            string tempSourceFile = Path.Combine(tempFileDirectory, tempFileName);\n+            File.WriteAllText(tempSourceFile, sourceFileContent);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh, I see you used them in the other class. While I like consistency within a file, I'd rather use the new/good stuff.",
              "createdAt": "2024-02-21T20:22:02Z",
              "path": "src/Tasks.UnitTests/CodeTaskFactoryTests.cs",
              "diffHunk": "@@ -1040,6 +1043,164 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void EmbedsSourceFileInBinlog()\n+        {\n+            string sourceFileContent = @\"\n+                                       using System;\n+                    using System.Collections.Generic;\n+                    using System.Text;\n+                    using Microsoft.Build.Utilities;\n+                    using Microsoft.Build.Framework;\n+\n+                    namespace Microsoft.Build.NonShippingTasks\n+                    {\n+                        public class LogNameValue_ClassSourcesTest : Task\n+                        {\n+                            private string variableName;\n+                            private string variableValue;\n+\n+\n+                            [Required]\n+                            public string Name\n+                            {\n+                                get { return variableName; }\n+                                set { variableName = value; }\n+                            }\n+\n+\n+                            public string Value\n+                            {\n+                                get { return variableValue; }\n+                                set { variableValue = value; }\n+                            }\n+\n+\n+                            public override bool Execute()\n+                            {\n+                                // Set the process environment\n+                                Log.LogMessage(\"\"Setting {0}={1}\"\", this.variableName, this.variableValue);\n+                                return true;\n+                            }\n+                        }\n+                    }\n+\";\n+\n+            string tempFileDirectory = Path.GetTempPath();\n+            string tempFileName = Guid.NewGuid().ToString() + \".cs\";\n+            string tempSourceFile = Path.Combine(tempFileDirectory, tempFileName);\n+            File.WriteAllText(tempSourceFile, sourceFileContent);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thanks! I will open a PR to cleanup `CodeTaskFactoryTests.cs`",
              "createdAt": "2024-02-22T13:41:01Z",
              "path": "src/Tasks.UnitTests/CodeTaskFactoryTests.cs",
              "diffHunk": "@@ -1040,6 +1043,164 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void EmbedsSourceFileInBinlog()\n+        {\n+            string sourceFileContent = @\"\n+                                       using System;\n+                    using System.Collections.Generic;\n+                    using System.Text;\n+                    using Microsoft.Build.Utilities;\n+                    using Microsoft.Build.Framework;\n+\n+                    namespace Microsoft.Build.NonShippingTasks\n+                    {\n+                        public class LogNameValue_ClassSourcesTest : Task\n+                        {\n+                            private string variableName;\n+                            private string variableValue;\n+\n+\n+                            [Required]\n+                            public string Name\n+                            {\n+                                get { return variableName; }\n+                                set { variableName = value; }\n+                            }\n+\n+\n+                            public string Value\n+                            {\n+                                get { return variableValue; }\n+                                set { variableValue = value; }\n+                            }\n+\n+\n+                            public override bool Execute()\n+                            {\n+                                // Set the process environment\n+                                Log.LogMessage(\"\"Setting {0}={1}\"\", this.variableName, this.variableValue);\n+                                return true;\n+                            }\n+                        }\n+                    }\n+\";\n+\n+            string tempFileDirectory = Path.GetTempPath();\n+            string tempFileName = Guid.NewGuid().ToString() + \".cs\";\n+            string tempSourceFile = Path.Combine(tempFileDirectory, tempFileName);\n+            File.WriteAllText(tempSourceFile, sourceFileContent);",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This is an `IDisposable` that cleans up on dispose\r\n\r\n```suggestion\r\n            using var env = TestEnvironment.Create();\r\n```",
              "createdAt": "2024-02-21T20:22:53Z",
              "path": "src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs",
              "diffHunk": "@@ -644,6 +644,124 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void EmbedsSourceFileInBinlog()\n+        {\n+            string taskName = \"HelloTask\";\n+            string csprojFileName = \"EmbedsSourceFileInTheBinlogTest.csproj\";\n+            string targetName = \"SayHello\";\n+\n+            var env = TestEnvironment.Create();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            using var env = TestEnvironment.Create();\r\n```",
              "createdAt": "2024-02-21T20:23:04Z",
              "path": "src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs",
              "diffHunk": "@@ -644,6 +644,124 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void EmbedsSourceFileInBinlog()\n+        {\n+            string taskName = \"HelloTask\";\n+            string csprojFileName = \"EmbedsSourceFileInTheBinlogTest.csproj\";\n+            string targetName = \"SayHello\";\n+\n+            var env = TestEnvironment.Create();\n+            TransientTestFolder folder = env.CreateFolder(createFolder: true);\n+            TransientTestFile taskClass = env.CreateFile(folder, $\"{taskName}.cs\", $$\"\"\"\n+                namespace InlineTask\n+                {\n+                    using Microsoft.Build.Utilities;\n+\n+                    public class {{taskName}} : Task\n+                    {\n+                        public override bool Execute()\n+                        {\n+                            Log.LogMessage(\"Hello, world!\");\n+                            return !Log.HasLoggedErrors;\n+                        }\n+                    }\n+                }\n+                \"\"\");         \n+            TransientTestFile assemblyProj = env.CreateFile(folder, csprojFileName, $\"\"\"\n+                <Project>\n+\n+                  <UsingTask\n+                    TaskName=\"{taskName}\"\n+                    TaskFactory=\"RoslynCodeTaskFactory\"\n+                    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n+                    <Task>\n+                      <Code Type=\"Class\" Language=\"cs\" Source=\"{taskClass.Path}\">\n+                      </Code>\n+                    </Task>\n+                  </UsingTask>\n+\n+                    <Target Name=\"{targetName}\">\n+                        <{taskName} />\n+                    </Target>\n+\n+                </Project>\n+                \"\"\");\n+\n+            string binLogFile = Path.Combine(folder.Path, \"log.binlog\");\n+            string output = RunnerUtilities.ExecMSBuild($\"{assemblyProj.Path} /t:{targetName} /bl:\\\"LogFile={binLogFile};ProjectImports=ZipFile\\\"\", out bool success);\n+\n+            success.ShouldBeTrue();\n+\n+            string projectImportsZipPath = Path.ChangeExtension(binLogFile, \".ProjectImports.zip\");\n+            using var fileStream = new System.IO.FileStream(projectImportsZipPath, System.IO.FileMode.Open);\n+            using var zipArchive = new System.IO.Compression.ZipArchive(fileStream, System.IO.Compression.ZipArchiveMode.Read);\n+\n+            // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well\n+            // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries\n+            zipArchive.Entries.ShouldContain(zE => zE.Name.EndsWith($\"{taskName}.cs\"),\n+                \"\");\n+        }\n+\n+        [Fact]\n+        public void EmbedsSourceFileInBinlogWhenFailsToCompile()\n+        {\n+            string taskName = \"HelloTask\";\n+            string csprojFileName = \"EmbedsSourceFileInTheBinlogTest.csproj\";\n+            string targetName = \"SayHello\";\n+\n+            var env = TestEnvironment.Create();",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                $\"Binlog's embedded files didn't have the expected {taskName}.cs.\");\r\n```",
              "createdAt": "2024-02-21T20:24:30Z",
              "path": "src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs",
              "diffHunk": "@@ -644,6 +644,124 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void EmbedsSourceFileInBinlog()\n+        {\n+            string taskName = \"HelloTask\";\n+            string csprojFileName = \"EmbedsSourceFileInTheBinlogTest.csproj\";\n+            string targetName = \"SayHello\";\n+\n+            var env = TestEnvironment.Create();\n+            TransientTestFolder folder = env.CreateFolder(createFolder: true);\n+            TransientTestFile taskClass = env.CreateFile(folder, $\"{taskName}.cs\", $$\"\"\"\n+                namespace InlineTask\n+                {\n+                    using Microsoft.Build.Utilities;\n+\n+                    public class {{taskName}} : Task\n+                    {\n+                        public override bool Execute()\n+                        {\n+                            Log.LogMessage(\"Hello, world!\");\n+                            return !Log.HasLoggedErrors;\n+                        }\n+                    }\n+                }\n+                \"\"\");         \n+            TransientTestFile assemblyProj = env.CreateFile(folder, csprojFileName, $\"\"\"\n+                <Project>\n+\n+                  <UsingTask\n+                    TaskName=\"{taskName}\"\n+                    TaskFactory=\"RoslynCodeTaskFactory\"\n+                    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n+                    <Task>\n+                      <Code Type=\"Class\" Language=\"cs\" Source=\"{taskClass.Path}\">\n+                      </Code>\n+                    </Task>\n+                  </UsingTask>\n+\n+                    <Target Name=\"{targetName}\">\n+                        <{taskName} />\n+                    </Target>\n+\n+                </Project>\n+                \"\"\");\n+\n+            string binLogFile = Path.Combine(folder.Path, \"log.binlog\");\n+            string output = RunnerUtilities.ExecMSBuild($\"{assemblyProj.Path} /t:{targetName} /bl:\\\"LogFile={binLogFile};ProjectImports=ZipFile\\\"\", out bool success);\n+\n+            success.ShouldBeTrue();\n+\n+            string projectImportsZipPath = Path.ChangeExtension(binLogFile, \".ProjectImports.zip\");\n+            using var fileStream = new System.IO.FileStream(projectImportsZipPath, System.IO.FileMode.Open);\n+            using var zipArchive = new System.IO.Compression.ZipArchive(fileStream, System.IO.Compression.ZipArchiveMode.Read);\n+\n+            // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well\n+            // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries\n+            zipArchive.Entries.ShouldContain(zE => zE.Name.EndsWith($\"{taskName}.cs\"),\n+                \"\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                $\"Binlog's embedded files didn't have the expected {taskName}.cs.\");\r\n```",
              "createdAt": "2024-02-21T20:24:43Z",
              "path": "src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs",
              "diffHunk": "@@ -644,6 +644,124 @@ public override bool Execute()\n             }\n         }\n \n+        [Fact]\n+        public void EmbedsSourceFileInBinlog()\n+        {\n+            string taskName = \"HelloTask\";\n+            string csprojFileName = \"EmbedsSourceFileInTheBinlogTest.csproj\";\n+            string targetName = \"SayHello\";\n+\n+            var env = TestEnvironment.Create();\n+            TransientTestFolder folder = env.CreateFolder(createFolder: true);\n+            TransientTestFile taskClass = env.CreateFile(folder, $\"{taskName}.cs\", $$\"\"\"\n+                namespace InlineTask\n+                {\n+                    using Microsoft.Build.Utilities;\n+\n+                    public class {{taskName}} : Task\n+                    {\n+                        public override bool Execute()\n+                        {\n+                            Log.LogMessage(\"Hello, world!\");\n+                            return !Log.HasLoggedErrors;\n+                        }\n+                    }\n+                }\n+                \"\"\");         \n+            TransientTestFile assemblyProj = env.CreateFile(folder, csprojFileName, $\"\"\"\n+                <Project>\n+\n+                  <UsingTask\n+                    TaskName=\"{taskName}\"\n+                    TaskFactory=\"RoslynCodeTaskFactory\"\n+                    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n+                    <Task>\n+                      <Code Type=\"Class\" Language=\"cs\" Source=\"{taskClass.Path}\">\n+                      </Code>\n+                    </Task>\n+                  </UsingTask>\n+\n+                    <Target Name=\"{targetName}\">\n+                        <{taskName} />\n+                    </Target>\n+\n+                </Project>\n+                \"\"\");\n+\n+            string binLogFile = Path.Combine(folder.Path, \"log.binlog\");\n+            string output = RunnerUtilities.ExecMSBuild($\"{assemblyProj.Path} /t:{targetName} /bl:\\\"LogFile={binLogFile};ProjectImports=ZipFile\\\"\", out bool success);\n+\n+            success.ShouldBeTrue();\n+\n+            string projectImportsZipPath = Path.ChangeExtension(binLogFile, \".ProjectImports.zip\");\n+            using var fileStream = new System.IO.FileStream(projectImportsZipPath, System.IO.FileMode.Open);\n+            using var zipArchive = new System.IO.Compression.ZipArchive(fileStream, System.IO.Compression.ZipArchiveMode.Read);\n+\n+            // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well\n+            // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries\n+            zipArchive.Entries.ShouldContain(zE => zE.Name.EndsWith($\"{taskName}.cs\"),\n+                \"\");\n+        }\n+\n+        [Fact]\n+        public void EmbedsSourceFileInBinlogWhenFailsToCompile()\n+        {\n+            string taskName = \"HelloTask\";\n+            string csprojFileName = \"EmbedsSourceFileInTheBinlogTest.csproj\";\n+            string targetName = \"SayHello\";\n+\n+            var env = TestEnvironment.Create();\n+            TransientTestFolder folder = env.CreateFolder(createFolder: true);\n+            TransientTestFile classThatFailsToCompile = env.CreateFile(folder, $\"{taskName}.cs\", $$\"\"\"\n+                namespace InlineTask\n+                {\n+                    using Microsoft.Build.Utilities\n+\n+                    public class {{taskName}} : Task\n+                    {\n+                        public override bool Execute()\n+                        {\n+                            Log.LogMessage(\"Hello, world!\")\n+                            return !Log.HasLoggedErrors\n+                        }\n+                    }\n+                }\n+                \"\"\");\n+            TransientTestFile assemblyProj = env.CreateFile(folder, csprojFileName, $\"\"\"\n+                <Project>\n+\n+                  <UsingTask\n+                    TaskName=\"{taskName}\"\n+                    TaskFactory=\"RoslynCodeTaskFactory\"\n+                    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n+                    <Task>\n+                      <Code Type=\"Class\" Language=\"cs\" Source=\"{classThatFailsToCompile.Path}\">\n+                      </Code>\n+                    </Task>\n+                  </UsingTask>\n+\n+                    <Target Name=\"{targetName}\">\n+                        <{taskName} />\n+                    </Target>\n+\n+                </Project>\n+                \"\"\");\n+\n+            string binLogFile = Path.Combine(folder.Path, \"log.binlog\");\n+            string output = RunnerUtilities.ExecMSBuild($\"{assemblyProj.Path} /t:{targetName} /bl:\\\"LogFile={binLogFile};ProjectImports=ZipFile\\\"\", out bool success);\n+\n+            success.ShouldBeFalse();\n+\n+            string projectImportsZipPath = Path.ChangeExtension(binLogFile, \".ProjectImports.zip\");\n+            using var fileStream = new System.IO.FileStream(projectImportsZipPath, System.IO.FileMode.Open);\n+            using var zipArchive = new System.IO.Compression.ZipArchive(fileStream, System.IO.Compression.ZipArchiveMode.Read);\n+\n+            // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well\n+            // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries\n+            zipArchive.Entries.ShouldContain(zE => zE.Name.EndsWith($\"{taskName}.cs\"),\n+                \"\");",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "In a test it doesn't super matter, but don't use this `Regex.Match` overload in a loop--it has to create a regex object from `regexPattern` every time, with some overhead. Instead do `new Regex(regexPattern)` outside the loop and `regex.Match(currentLine)` inside the loop.",
              "createdAt": "2024-03-13T21:27:21Z",
              "path": "src/UnitTests.Shared/MockLogger.cs",
              "diffHunk": "@@ -504,6 +504,52 @@ public void AssertLogContains(bool isCaseSensitive, params string[] contains)\n             }\n         }\n \n+        /// <summary>\n+        /// Asserts that log file contains a message with a single parameter.\n+        /// </summary>\n+        /// <param name=\"message\">The message that contains '{0}' substring.</param>\n+        /// <param name=\"parameter\">The parameter.</param>\n+        public void AssertLogContainsMessageWithParameter(string message, out string parameter)\n+        {\n+            parameter = \"\";\n+            string placeholder = \"{0}\";\n+\n+            string regexPattern = \"\";\n+            if (message.Contains(placeholder))\n+            {\n+                regexPattern = message.Replace(placeholder, \"(.*)\");\n+            }\n+            else\n+            {\n+                Assert.True(\n+                        false,\n+                        $\"'{message}' was expected to contain a substring '{{0}}'.\");\n+            }\n+\n+            lock (_lockObj)\n+            {\n+                var reader = new StringReader(FullLog);\n+                string currentLine = reader.ReadLine();\n+\n+                while (currentLine != null)\n+                {\n+                    var match = Regex.Match(currentLine, regexPattern);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Thanks! \r\nSince I removed the message of the location of the compilation file in binlog, I no longer need this method.",
              "createdAt": "2024-03-18T03:48:26Z",
              "path": "src/UnitTests.Shared/MockLogger.cs",
              "diffHunk": "@@ -504,6 +504,52 @@ public void AssertLogContains(bool isCaseSensitive, params string[] contains)\n             }\n         }\n \n+        /// <summary>\n+        /// Asserts that log file contains a message with a single parameter.\n+        /// </summary>\n+        /// <param name=\"message\">The message that contains '{0}' substring.</param>\n+        /// <param name=\"parameter\">The parameter.</param>\n+        public void AssertLogContainsMessageWithParameter(string message, out string parameter)\n+        {\n+            parameter = \"\";\n+            string placeholder = \"{0}\";\n+\n+            string regexPattern = \"\";\n+            if (message.Contains(placeholder))\n+            {\n+                regexPattern = message.Replace(placeholder, \"(.*)\");\n+            }\n+            else\n+            {\n+                Assert.True(\n+                        false,\n+                        $\"'{message}' was expected to contain a substring '{{0}}'.\");\n+            }\n+\n+            lock (_lockObj)\n+            {\n+                var reader = new StringReader(FullLog);\n+                string currentLine = reader.ReadLine();\n+\n+                while (currentLine != null)\n+                {\n+                    var match = Regex.Match(currentLine, regexPattern);",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I'm a bit concerned about using extended messages for this--I think of them primarily as an extensibility mechanism for third parties, not for MSBuild itself. While its name is a bit weird, could we extend `ResponseFileUsedEventArgs` to support inline content? Or add a new event type?",
              "createdAt": "2024-03-13T21:37:18Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -503,6 +503,28 @@ public void LogMessageFromResources(MessageImportance importance, string message\n #endif\n         }\n \n+        /// <summary>\n+        /// Logs a file generated from the given data.\n+        /// </summary>\n+        /// <param name=\"filePath\">The file path.</param>\n+        /// <param name=\"content\">The content of the file.</param>\n+        public void LogIncludeGeneratedFile(string filePath, string content)\n+        {\n+            ErrorUtilities.VerifyThrowArgumentNull(filePath, nameof(filePath));\n+            ErrorUtilities.VerifyThrowArgumentNull(content, nameof(content));\n+\n+            var e = new ExtendedBuildMessageEventArgs(\"RESPONSEGENERATEDFILE\", \"\", null, null, MessageImportance.Low)\n+            {\n+                ExtendedMetadata = new Dictionary<string, string>\n+                {\n+                    { \"FILEPATH\", filePath },\n+                    { \"CONTENT\", content },\n+                }\n+            };",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Big agree with @rainersigwald on this note - especially now that we can add new event times in a non-breaking way due to binlog forward compatibility we should feel free to create or extend event types almost to excess!",
              "createdAt": "2024-03-13T21:43:10Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -503,6 +503,28 @@ public void LogMessageFromResources(MessageImportance importance, string message\n #endif\n         }\n \n+        /// <summary>\n+        /// Logs a file generated from the given data.\n+        /// </summary>\n+        /// <param name=\"filePath\">The file path.</param>\n+        /// <param name=\"content\">The content of the file.</param>\n+        public void LogIncludeGeneratedFile(string filePath, string content)\n+        {\n+            ErrorUtilities.VerifyThrowArgumentNull(filePath, nameof(filePath));\n+            ErrorUtilities.VerifyThrowArgumentNull(content, nameof(content));\n+\n+            var e = new ExtendedBuildMessageEventArgs(\"RESPONSEGENERATEDFILE\", \"\", null, null, MessageImportance.Low)\n+            {\n+                ExtendedMetadata = new Dictionary<string, string>\n+                {\n+                    { \"FILEPATH\", filePath },\n+                    { \"CONTENT\", content },\n+                }\n+            };",
              "author": {
                "login": "baronfel"
              }
            },
            {
              "body": "I agree. My initial design was to use new event `ResponseGeneratedFileUsedEventArgs` similar to `ResponseFileUsedEventArgs` but the build was failing https://github.com/dotnet/msbuild/runs/22434443891\r\n```\r\nUsage of unsecure BinaryFormatter during serialization of custom event type 'ResponseGeneratedFileUsedEventArgs'. This will be deprecated soon. Please use Extended*EventArgs instead. More info: https://aka.ms/msbuild/eventargs\r\n```\r\nIs it possible to turn that off?",
              "createdAt": "2024-03-14T15:50:21Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -503,6 +503,28 @@ public void LogMessageFromResources(MessageImportance importance, string message\n #endif\n         }\n \n+        /// <summary>\n+        /// Logs a file generated from the given data.\n+        /// </summary>\n+        /// <param name=\"filePath\">The file path.</param>\n+        /// <param name=\"content\">The content of the file.</param>\n+        public void LogIncludeGeneratedFile(string filePath, string content)\n+        {\n+            ErrorUtilities.VerifyThrowArgumentNull(filePath, nameof(filePath));\n+            ErrorUtilities.VerifyThrowArgumentNull(content, nameof(content));\n+\n+            var e = new ExtendedBuildMessageEventArgs(\"RESPONSEGENERATEDFILE\", \"\", null, null, MessageImportance.Low)\n+            {\n+                ExtendedMetadata = new Dictionary<string, string>\n+                {\n+                    { \"FILEPATH\", filePath },\n+                    { \"CONTENT\", content },\n+                }\n+            };",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "No, that rule is real and enforced now--but you can fix it! You'll have to add de/serialization code, for example similar to https://github.com/dotnet/msbuild/pull/8146/files#diff-02de8b63c474f29b5f0b4cebfef35896934503bb16bb83d2411dda65600a42f0R510",
              "createdAt": "2024-03-14T16:02:00Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -503,6 +503,28 @@ public void LogMessageFromResources(MessageImportance importance, string message\n #endif\n         }\n \n+        /// <summary>\n+        /// Logs a file generated from the given data.\n+        /// </summary>\n+        /// <param name=\"filePath\">The file path.</param>\n+        /// <param name=\"content\">The content of the file.</param>\n+        public void LogIncludeGeneratedFile(string filePath, string content)\n+        {\n+            ErrorUtilities.VerifyThrowArgumentNull(filePath, nameof(filePath));\n+            ErrorUtilities.VerifyThrowArgumentNull(content, nameof(content));\n+\n+            var e = new ExtendedBuildMessageEventArgs(\"RESPONSEGENERATEDFILE\", \"\", null, null, MessageImportance.Low)\n+            {\n+                ExtendedMetadata = new Dictionary<string, string>\n+                {\n+                    { \"FILEPATH\", filePath },\n+                    { \"CONTENT\", content },\n+                }\n+            };",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Done",
              "createdAt": "2024-03-18T03:47:12Z",
              "path": "src/Shared/TaskLoggingHelper.cs",
              "diffHunk": "@@ -503,6 +503,28 @@ public void LogMessageFromResources(MessageImportance importance, string message\n #endif\n         }\n \n+        /// <summary>\n+        /// Logs a file generated from the given data.\n+        /// </summary>\n+        /// <param name=\"filePath\">The file path.</param>\n+        /// <param name=\"content\">The content of the file.</param>\n+        public void LogIncludeGeneratedFile(string filePath, string content)\n+        {\n+            ErrorUtilities.VerifyThrowArgumentNull(filePath, nameof(filePath));\n+            ErrorUtilities.VerifyThrowArgumentNull(content, nameof(content));\n+\n+            var e = new ExtendedBuildMessageEventArgs(\"RESPONSEGENERATEDFILE\", \"\", null, null, MessageImportance.Low)\n+            {\n+                ExtendedMetadata = new Dictionary<string, string>\n+                {\n+                    { \"FILEPATH\", filePath },\n+                    { \"CONTENT\", content },\n+                }\n+            };",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "What's the motivation for this separate message? I'm concerned about having it in a diag text log (when no binlog was attached).",
              "createdAt": "2024-03-13T21:40:04Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -791,18 +791,24 @@ private Assembly CompileInMemoryAssembly()\n                 // Our code generation is complete, grab the source from the builder ready for compilation\n                 string fullCode = codeBuilder.ToString();\n \n+                string tempDirectory = FileUtilities.TempFileDirectory;\n+                string fileName = Guid.NewGuid().ToString() + \".txt\";\n+                string outputPath = Path.Combine(tempDirectory, fileName);\n+\n+                // Embed generated file in the binlog\n+                _log.LogIncludeGeneratedFile(outputPath, fullCode);\n+\n+                // Log the location of the code file in binlog\n+                _log.LogMessageFromResources(MessageImportance.Low, \"CodeTaskFactory.FindSourceFileInBinlogAt\", outputPath);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "+1, also the message can be seen as deceptive because, unless `MSBUILDLOGCODETASKFACTORYOUTPUT` is set or there are compilation errors, it will log a non-existent path.",
              "createdAt": "2024-03-14T11:55:36Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -791,18 +791,24 @@ private Assembly CompileInMemoryAssembly()\n                 // Our code generation is complete, grab the source from the builder ready for compilation\n                 string fullCode = codeBuilder.ToString();\n \n+                string tempDirectory = FileUtilities.TempFileDirectory;\n+                string fileName = Guid.NewGuid().ToString() + \".txt\";\n+                string outputPath = Path.Combine(tempDirectory, fileName);\n+\n+                // Embed generated file in the binlog\n+                _log.LogIncludeGeneratedFile(outputPath, fullCode);\n+\n+                // Log the location of the code file in binlog\n+                _log.LogMessageFromResources(MessageImportance.Low, \"CodeTaskFactory.FindSourceFileInBinlogAt\", outputPath);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Thanks @rainersigwald and @ladipro! These are good points. \r\n\r\nThe motivation for this separate message was to tell the user where to search for the file in the binlog. I wanted the file path to be same as for the compilation file. But as @ladipro mentioned it can be deceptive. And if the binlog is not attached that is also deceptive as @rainersigwald said. \r\n\r\nGiven the feedback, I think there should be a generic path for this file and no message. What do you think about {project path}/{some guid}-{task name}-compilation-file.txt?",
              "createdAt": "2024-03-14T15:59:59Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -791,18 +791,24 @@ private Assembly CompileInMemoryAssembly()\n                 // Our code generation is complete, grab the source from the builder ready for compilation\n                 string fullCode = codeBuilder.ToString();\n \n+                string tempDirectory = FileUtilities.TempFileDirectory;\n+                string fileName = Guid.NewGuid().ToString() + \".txt\";\n+                string outputPath = Path.Combine(tempDirectory, fileName);\n+\n+                // Embed generated file in the binlog\n+                _log.LogIncludeGeneratedFile(outputPath, fullCode);\n+\n+                // Log the location of the code file in binlog\n+                _log.LogMessageFromResources(MessageImportance.Low, \"CodeTaskFactory.FindSourceFileInBinlogAt\", outputPath);",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "> What do you think about {project path}/{some guid}-{task name}-compilation-file.txt?\r\n\r\nSounds great. I think one scenario where the path under which the file is embedded in binlog is actually relevant is when reconstructing the project skeleton from binlog (didn't Kirill have an experimental tool for that?) I would expect that using paths under the project path would lead to good experience there.",
              "createdAt": "2024-03-15T08:23:45Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -791,18 +791,24 @@ private Assembly CompileInMemoryAssembly()\n                 // Our code generation is complete, grab the source from the builder ready for compilation\n                 string fullCode = codeBuilder.ToString();\n \n+                string tempDirectory = FileUtilities.TempFileDirectory;\n+                string fileName = Guid.NewGuid().ToString() + \".txt\";\n+                string outputPath = Path.Combine(tempDirectory, fileName);\n+\n+                // Embed generated file in the binlog\n+                _log.LogIncludeGeneratedFile(outputPath, fullCode);\n+\n+                // Log the location of the code file in binlog\n+                _log.LogMessageFromResources(MessageImportance.Low, \"CodeTaskFactory.FindSourceFileInBinlogAt\", outputPath);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Some repos maintain very strong requirements that no build outputs be placed in the source folder, so I don't think putting a \"log\" file next to the project is a good idea.\r\n\r\nIf it's a separate message type though, we should be able to make \"double click on it in the viewer\" just open the right file.",
              "createdAt": "2024-03-15T13:38:08Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -791,18 +791,24 @@ private Assembly CompileInMemoryAssembly()\n                 // Our code generation is complete, grab the source from the builder ready for compilation\n                 string fullCode = codeBuilder.ToString();\n \n+                string tempDirectory = FileUtilities.TempFileDirectory;\n+                string fileName = Guid.NewGuid().ToString() + \".txt\";\n+                string outputPath = Path.Combine(tempDirectory, fileName);\n+\n+                // Embed generated file in the binlog\n+                _log.LogIncludeGeneratedFile(outputPath, fullCode);\n+\n+                // Log the location of the code file in binlog\n+                _log.LogMessageFromResources(MessageImportance.Low, \"CodeTaskFactory.FindSourceFileInBinlogAt\", outputPath);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Let's see, I may not have understood the proposal. We're not talking about changing the path where actual files are dropped, only the fake paths of code fragments that otherwise exist only in memory and we want to persist them in binlog, is that correct?",
              "createdAt": "2024-03-15T14:24:53Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -791,18 +791,24 @@ private Assembly CompileInMemoryAssembly()\n                 // Our code generation is complete, grab the source from the builder ready for compilation\n                 string fullCode = codeBuilder.ToString();\n \n+                string tempDirectory = FileUtilities.TempFileDirectory;\n+                string fileName = Guid.NewGuid().ToString() + \".txt\";\n+                string outputPath = Path.Combine(tempDirectory, fileName);\n+\n+                // Embed generated file in the binlog\n+                _log.LogIncludeGeneratedFile(outputPath, fullCode);\n+\n+                // Log the location of the code file in binlog\n+                _log.LogMessageFromResources(MessageImportance.Low, \"CodeTaskFactory.FindSourceFileInBinlogAt\", outputPath);",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "> Let's see, I may not have understood the proposal. We're not talking about changing the path where actual files are dropped, only the fake paths of code fragments that otherwise exist only in memory and we want to persist them in binlog, is that correct?\r\n\r\nYes, that is correct",
              "createdAt": "2024-03-15T14:26:35Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -791,18 +791,24 @@ private Assembly CompileInMemoryAssembly()\n                 // Our code generation is complete, grab the source from the builder ready for compilation\n                 string fullCode = codeBuilder.ToString();\n \n+                string tempDirectory = FileUtilities.TempFileDirectory;\n+                string fileName = Guid.NewGuid().ToString() + \".txt\";\n+                string outputPath = Path.Combine(tempDirectory, fileName);\n+\n+                // Embed generated file in the binlog\n+                _log.LogIncludeGeneratedFile(outputPath, fullCode);\n+\n+                // Log the location of the code file in binlog\n+                _log.LogMessageFromResources(MessageImportance.Low, \"CodeTaskFactory.FindSourceFileInBinlogAt\", outputPath);",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "Ah, got it. Sounds fine then!",
              "createdAt": "2024-03-15T14:28:04Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -791,18 +791,24 @@ private Assembly CompileInMemoryAssembly()\n                 // Our code generation is complete, grab the source from the builder ready for compilation\n                 string fullCode = codeBuilder.ToString();\n \n+                string tempDirectory = FileUtilities.TempFileDirectory;\n+                string fileName = Guid.NewGuid().ToString() + \".txt\";\n+                string outputPath = Path.Combine(tempDirectory, fileName);\n+\n+                // Embed generated file in the binlog\n+                _log.LogIncludeGeneratedFile(outputPath, fullCode);\n+\n+                // Log the location of the code file in binlog\n+                _log.LogMessageFromResources(MessageImportance.Low, \"CodeTaskFactory.FindSourceFileInBinlogAt\", outputPath);",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Great! I'm going to implement it.",
              "createdAt": "2024-03-15T14:29:26Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -791,18 +791,24 @@ private Assembly CompileInMemoryAssembly()\n                 // Our code generation is complete, grab the source from the builder ready for compilation\n                 string fullCode = codeBuilder.ToString();\n \n+                string tempDirectory = FileUtilities.TempFileDirectory;\n+                string fileName = Guid.NewGuid().ToString() + \".txt\";\n+                string outputPath = Path.Combine(tempDirectory, fileName);\n+\n+                // Embed generated file in the binlog\n+                _log.LogIncludeGeneratedFile(outputPath, fullCode);\n+\n+                // Log the location of the code file in binlog\n+                _log.LogMessageFromResources(MessageImportance.Low, \"CodeTaskFactory.FindSourceFileInBinlogAt\", outputPath);",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "It was challenging to get the project directory. I added `IHasProjectFullPath` interface to get it from the logger. I'll update the PR description.",
              "createdAt": "2024-03-18T03:46:56Z",
              "path": "src/Tasks/CodeTaskFactory.cs",
              "diffHunk": "@@ -791,18 +791,24 @@ private Assembly CompileInMemoryAssembly()\n                 // Our code generation is complete, grab the source from the builder ready for compilation\n                 string fullCode = codeBuilder.ToString();\n \n+                string tempDirectory = FileUtilities.TempFileDirectory;\n+                string fileName = Guid.NewGuid().ToString() + \".txt\";\n+                string outputPath = Path.Combine(tempDirectory, fileName);\n+\n+                // Embed generated file in the binlog\n+                _log.LogIncludeGeneratedFile(outputPath, fullCode);\n+\n+                // Log the location of the code file in binlog\n+                _log.LogMessageFromResources(MessageImportance.Low, \"CodeTaskFactory.FindSourceFileInBinlogAt\", outputPath);",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "A lot of code seems to be duplicated in these tests. Any chance the common logic could be moved into a shared parameterized helper?",
              "createdAt": "2024-03-14T11:58:54Z",
              "path": "src/Tasks.UnitTests/CodeTaskFactoryTests.cs",
              "diffHunk": "@@ -1120,6 +1124,265 @@ public void RedundantMSBuildReferences()\n             MockLogger mockLogger = Helpers.BuildProjectWithNewOMExpectSuccess(projectFileContents);\n             mockLogger.AssertLogContains(\"Hello, World!\");\n         }\n+\n+        [Fact]\n+        public void EmbedsGeneratedFromSourceFileInBinlog()",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Done",
              "createdAt": "2024-03-18T03:45:03Z",
              "path": "src/Tasks.UnitTests/CodeTaskFactoryTests.cs",
              "diffHunk": "@@ -1120,6 +1124,265 @@ public void RedundantMSBuildReferences()\n             MockLogger mockLogger = Helpers.BuildProjectWithNewOMExpectSuccess(projectFileContents);\n             mockLogger.AssertLogContains(\"Hello, World!\");\n         }\n+\n+        [Fact]\n+        public void EmbedsGeneratedFromSourceFileInBinlog()",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit:\r\n```suggestion\r\n        internal string ProjectFullPath => _projectFullPath;\r\n```",
              "createdAt": "2024-03-19T09:45:07Z",
              "path": "src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs",
              "diffHunk": "@@ -70,6 +70,8 @@ internal ProjectLoggingContext(NodeLoggingContext nodeLoggingContext, BuildReque\n         {\n         }\n \n+        internal string ProjectFullPath { get => _projectFullPath; }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit: Can be `readonly`.",
              "createdAt": "2024-03-19T09:47:36Z",
              "path": "src/Build/Instance/TaskFactoryLoggingHost.cs",
              "diffHunk": "@@ -55,6 +55,8 @@ internal class TaskFactoryLoggingHost :\n         /// </summary>\n         private bool _activeProxy;\n \n+        private string _projectFullPath;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "I believe that the `FileFormatVersion` constant below should be updated accordingly.",
              "createdAt": "2024-03-19T09:50:23Z",
              "path": "src/Build/Logging/BinaryLogger/BinaryLogger.cs",
              "diffHunk": "@@ -67,6 +67,8 @@ public sealed class BinaryLogger : ILogger\n         //   - Making ProjectStartedEventArgs, ProjectEvaluationFinishedEventArgs, AssemblyLoadBuildEventArgs equal\n         //     between de/serialization roundtrips.\n         //   - Adding serialized events lengths - to support forward compatible reading\n+        // version 19:\n+        //   - new record kind: ResponseGeneratedFileUsedEventArgs",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "The `Response` prefix looks out of place here. I don't think that these files are considered \"response\". Unlike response files handled by `ResponseFileUsedEventArgs`, which maybe this class is modeled after?\r\n\r\n```suggestion\r\n    public class GeneratedFileUsedEventArgs : BuildMessageEventArgs\r\n```",
              "createdAt": "2024-03-19T10:05:44Z",
              "path": "src/Framework/ResponseGeneratedFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,33 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the response file used event\n+    /// </summary>\n+    [Serializable]\n+    public class ResponseGeneratedFileUsedEventArgs : BuildMessageEventArgs",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Thanks! Done",
              "createdAt": "2024-03-19T13:54:57Z",
              "path": "src/Framework/ResponseGeneratedFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,33 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the response file used event\n+    /// </summary>\n+    [Serializable]\n+    public class ResponseGeneratedFileUsedEventArgs : BuildMessageEventArgs",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This one should also probably be just `GeneratedFileUsedEventArgs`, hope I'm not misunderstanding.",
              "createdAt": "2024-03-19T10:41:07Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -205,6 +205,11 @@ internal enum LoggingEventType : int\n         /// Event is <see cref=\"ExtendedCriticalBuildMessageEventArgs\"/>\n         /// </summary>\n         ExtendedCriticalBuildMessageEvent = 33,\n+\n+        /// <summary>\n+        /// Event is a ResponseGeneratedFileUsedEventArgs\n+        /// </summary>\n+        ResponseGeneratedFileUsedEvent = 34,",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Done",
              "createdAt": "2024-03-19T13:53:52Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -205,6 +205,11 @@ internal enum LoggingEventType : int\n         /// Event is <see cref=\"ExtendedCriticalBuildMessageEventArgs\"/>\n         /// </summary>\n         ExtendedCriticalBuildMessageEvent = 33,\n+\n+        /// <summary>\n+        /// Event is a ResponseGeneratedFileUsedEventArgs\n+        /// </summary>\n+        ResponseGeneratedFileUsedEvent = 34,",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: Typo `projec`.",
              "createdAt": "2024-03-19T10:47:18Z",
              "path": "src/Tasks.UnitTests/CodeTaskFactoryEmbeddedFileInBinlogTestHelper.cs",
              "diffHunk": "@@ -0,0 +1,133 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using System.IO.Compression;\n+using Microsoft.Build.Logging;\n+using Microsoft.Build.UnitTests;\n+using Shouldly;\n+using Xunit;\n+\n+namespace Microsoft.Build.Tasks.UnitTests\n+{\n+    internal enum FactoryType\n+    {\n+        CodeTaskFactory,\n+        RoslynCodeTaskFactory,\n+    }\n+\n+    internal static class CodeTaskFactoryEmbeddedFileInBinlogTestHelper\n+    {\n+        internal static void BuildFromSourceAndCheckForEmbeddedFileInBinlog(\n+            FactoryType factoryType,\n+            string taskName,\n+            string sourceContent,\n+            bool buildShouldSucceed)\n+        {\n+            using var env = TestEnvironment.Create();\n+\n+            TransientTestFolder folder = env.CreateFolder(createFolder: true);\n+\n+            var sourceClass = env.CreateFile(folder, $\"{taskName}.cs\", sourceContent);\n+\n+            string projectFileContents = $\"\"\"\n+                <Project>\n+\n+                  <UsingTask\n+                    TaskName=\"{taskName}\"\n+                    TaskFactory=\"{factoryType}\"\n+                    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n+                    <Task>\n+                      <Code Type=\"Class\" Language=\"cs\" Source=\"{sourceClass.Path}\">\n+                      </Code>\n+                    </Task>\n+                  </UsingTask>\n+\n+                    <Target Name=\"SayHello\">\n+                        <{taskName} />\n+                    </Target>\n+\n+                </Project>\n+                \"\"\";\n+\n+            TransientTestFile binlog = env.ExpectFile(\".binlog\");\n+\n+            var binaryLogger = new BinaryLogger()\n+            {\n+                Parameters = $\"LogFile={binlog.Path}\",\n+                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,\n+            };\n+\n+            Helpers.BuildProjectWithNewOMAndBinaryLogger(projectFileContents, binaryLogger, out bool result, out string projecDirectoryPath);\n+\n+            Assert.Equal(buildShouldSucceed, result);\n+\n+            string projectImportsZipPath = Path.ChangeExtension(binlog.Path, \".ProjectImports.zip\");\n+            using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);\n+            using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);\n+\n+            // A path like \"C:\\path\" in ZipArchive is saved as \"C\\path\"\n+            // For unix-based systems path uses '/'\n+            projecDirectoryPath = NativeMethodsShared.IsWindows ? projecDirectoryPath.Replace(\":\\\\\", \"\\\\\") : projecDirectoryPath.Replace(\"/\", \"\\\\\");",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Thanks! Done",
              "createdAt": "2024-03-19T13:53:38Z",
              "path": "src/Tasks.UnitTests/CodeTaskFactoryEmbeddedFileInBinlogTestHelper.cs",
              "diffHunk": "@@ -0,0 +1,133 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+using System.IO;\n+using System.IO.Compression;\n+using Microsoft.Build.Logging;\n+using Microsoft.Build.UnitTests;\n+using Shouldly;\n+using Xunit;\n+\n+namespace Microsoft.Build.Tasks.UnitTests\n+{\n+    internal enum FactoryType\n+    {\n+        CodeTaskFactory,\n+        RoslynCodeTaskFactory,\n+    }\n+\n+    internal static class CodeTaskFactoryEmbeddedFileInBinlogTestHelper\n+    {\n+        internal static void BuildFromSourceAndCheckForEmbeddedFileInBinlog(\n+            FactoryType factoryType,\n+            string taskName,\n+            string sourceContent,\n+            bool buildShouldSucceed)\n+        {\n+            using var env = TestEnvironment.Create();\n+\n+            TransientTestFolder folder = env.CreateFolder(createFolder: true);\n+\n+            var sourceClass = env.CreateFile(folder, $\"{taskName}.cs\", sourceContent);\n+\n+            string projectFileContents = $\"\"\"\n+                <Project>\n+\n+                  <UsingTask\n+                    TaskName=\"{taskName}\"\n+                    TaskFactory=\"{factoryType}\"\n+                    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n+                    <Task>\n+                      <Code Type=\"Class\" Language=\"cs\" Source=\"{sourceClass.Path}\">\n+                      </Code>\n+                    </Task>\n+                  </UsingTask>\n+\n+                    <Target Name=\"SayHello\">\n+                        <{taskName} />\n+                    </Target>\n+\n+                </Project>\n+                \"\"\";\n+\n+            TransientTestFile binlog = env.ExpectFile(\".binlog\");\n+\n+            var binaryLogger = new BinaryLogger()\n+            {\n+                Parameters = $\"LogFile={binlog.Path}\",\n+                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,\n+            };\n+\n+            Helpers.BuildProjectWithNewOMAndBinaryLogger(projectFileContents, binaryLogger, out bool result, out string projecDirectoryPath);\n+\n+            Assert.Equal(buildShouldSucceed, result);\n+\n+            string projectImportsZipPath = Path.ChangeExtension(binlog.Path, \".ProjectImports.zip\");\n+            using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);\n+            using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);\n+\n+            // A path like \"C:\\path\" in ZipArchive is saved as \"C\\path\"\n+            // For unix-based systems path uses '/'\n+            projecDirectoryPath = NativeMethodsShared.IsWindows ? projecDirectoryPath.Replace(\":\\\\\", \"\\\\\") : projecDirectoryPath.Replace(\"/\", \"\\\\\");",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "@JanKrivanek do we still need to mark eventargs classes as serializable?",
              "createdAt": "2024-03-20T08:38:07Z",
              "path": "src/Framework/GeneratedFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,39 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the generated file used event\n+    /// </summary>\n+    [Serializable]",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "Nope - can be safely removed.\r\nIn some future version of .NET it should even become deprecated",
              "createdAt": "2024-03-20T09:12:58Z",
              "path": "src/Framework/GeneratedFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,39 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the generated file used event\n+    /// </summary>\n+    [Serializable]",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Removed the attribute",
              "createdAt": "2024-03-20T09:53:36Z",
              "path": "src/Framework/GeneratedFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,39 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the generated file used event\n+    /// </summary>\n+    [Serializable]",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "Looks like it needs the serializable attribute. Here is the error message \r\n```\r\n(NETCORE_ENGINEERING_TELEMETRY=Restore) Event type \"GeneratedFileUsedEventArgs\" was expected to be serializable using the .NET serializer. The event was not serializable and has been ignored.\r\n```\r\nReverting the changes",
              "createdAt": "2024-03-20T12:05:05Z",
              "path": "src/Framework/GeneratedFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,39 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the generated file used event\n+    /// </summary>\n+    [Serializable]",
              "author": {
                "login": "surayya-MS"
              }
            },
            {
              "body": "Oh I see - it's because we handle de/serialization in the `LogMessagePacketBase`\r\n\r\nWe heve this unfortunate schyzophreny of our serialization model - some messages know how to de/serialize themselves (via overriding `WriteToStream` and `CreateFromStream`), some - historically - are being handled explicitly via `LogMessagePacketBase`. The later approach is not a good practice - it requires spilling internals of some type to a handling method. On top of that it relies on the serialization attribute which is hoing to be deprecated.\r\n\r\nCan you please override `WriteToStream` and `CreateFromStream` methods and move the serialization code from the `LogMessagePacketBase`?\r\nYou can take inspiration e.g. from `ExtendedCriticalBuildMessageEventArgs`.",
              "createdAt": "2024-03-20T12:55:20Z",
              "path": "src/Framework/GeneratedFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,39 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the generated file used event\n+    /// </summary>\n+    [Serializable]",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "You'll as well want to add a roundtrip serialization test of the messages between msbuild nodes (as that uses a different serialization than the binlog - I know - yet another serialization! :-))\r\n\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs#L44\r\nand\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs#L235",
              "createdAt": "2024-03-20T13:00:48Z",
              "path": "src/Framework/GeneratedFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,39 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the generated file used event\n+    /// </summary>\n+    [Serializable]",
              "author": {
                "login": "JanKrivanek"
              }
            },
            {
              "body": "Thanks @JanKrivanek !\r\nDone. And on top of that, as we discussed, I skip `GeneratedFileEventArgs` `TaskFactoryLoggingHost.IsEventSerializable` in order to remove serializable attribute",
              "createdAt": "2024-03-20T17:09:10Z",
              "path": "src/Framework/GeneratedFileUsedEventArgs.cs",
              "diffHunk": "@@ -0,0 +1,39 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+using System;\n+\n+namespace Microsoft.Build.Framework\n+{\n+    /// <summary>\n+    /// Arguments for the generated file used event\n+    /// </summary>\n+    [Serializable]",
              "author": {
                "login": "surayya-MS"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This can be removed in favor of overriding `WriteToStream` on the event.",
              "createdAt": "2024-03-20T12:54:51Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -804,6 +815,9 @@ private void WriteEventToStream(BuildEventArgs buildEvent, LoggingEventType even\n                 case LoggingEventType.ResponseFileUsedEvent:\n                     WriteResponseFileUsedEventToStream((ResponseFileUsedEventArgs)buildEvent, translator);\n                     break;\n+                case LoggingEventType.GeneratedFileUsedEvent:\n+                    WriteGeneratedFileUsedEventToStream((GeneratedFileUsedEventArgs)buildEvent, translator);\n+                    break;",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "This can be removed in favor of overriding `ReadFromStream` on the event.",
              "createdAt": "2024-03-20T12:55:09Z",
              "path": "src/Shared/LogMessagePacketBase.cs",
              "diffHunk": "@@ -1174,6 +1205,7 @@ private BuildEventArgs ReadEventFromStream(LoggingEventType eventType, ITranslat\n                 LoggingEventType.BuildErrorEvent => ReadTaskBuildErrorEventFromStream(translator, message, helpKeyword, senderName),\n                 LoggingEventType.BuildMessageEvent => ReadBuildMessageEventFromStream(translator, message, helpKeyword, senderName),\n                 LoggingEventType.ResponseFileUsedEvent => ReadResponseFileUsedEventFromStream(translator, message, helpKeyword, senderName),\n+                LoggingEventType.GeneratedFileUsedEvent => ReadGeneratedFileUsedEventFromStream(translator, message, helpKeyword, senderName),",
              "author": {
                "login": "JanKrivanek"
              }
            }
          ]
        }
      }
    ]
  }
}