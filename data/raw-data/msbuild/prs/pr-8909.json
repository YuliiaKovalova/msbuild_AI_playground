{
  "number": 8909,
  "title": "Make RAR disk cache deterministic (serialize only what's actually used)",
  "body": "Fixes #8636\r\n\r\n### Context\r\n\r\nRAR uses a per-project disk cache to store data on referenced assemblies between executions. Per our common targets, for typical .NET projects the cache lives in `obj/{configuration}/{tfm}/{project-file-name}.AssemblyReference.cache`. The cache has currently non-deterministic contents, often containing more than what's actually needed. This is because items are effectively only added to and never removed from it.\r\n\r\nSpecific issues:\r\n- If the RAR pre-cache is used via `AssemblyInformationCachePaths`, its contents is copied into per-project caches of all affected projects, making them deserialize this - typically large amount of - data on each execution. The pre-cache shipped with the SDK is 2 MB in size.\r\n- The changes made in #8802 won't take effect until the developer cleans or rebuilds their project.\r\n- Changes to the project resulting in fewer references won't be reflected in the on-disk cache until the developer cleans or rebuilds the project.\r\n- Targets that use the cache file timestamp to implement incrementality may underbuild.\r\n\r\n### Changes Made\r\n\r\nMade RAR keep track of which items are actually used. Made RAR save only the files that have actually been used. A special case of _nothing worth persisting has been used_ results in no cache file written.\r\n\r\n### Testing\r\n\r\nExisting and new unit tests. Manual verification using projects previously built without #8802.\r\n",
  "state": "MERGED",
  "createdAt": "2023-06-19T09:05:29Z",
  "updatedAt": "2023-06-22T05:23:35Z",
  "closedAt": "2023-06-22T05:23:34Z",
  "mergedAt": "2023-06-22T05:23:34Z",
  "additions": 148,
  "deletions": 32,
  "changedFiles": 6,
  "headRefName": "rar-deterministic-cache2",
  "isDraft": false,
  "author": {
    "login": "ladipro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "b67a7d1d6340adfd7610d066beb5b9ce741d55b6",
          "message": "Make RAR disk cache deterministic (serialize only what's actually used)",
          "committedDate": "2023-06-19T08:28:44Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "laprosek@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "328dac062afed59091613f1e7fa2d301f5a86fc9",
          "message": "Update src/Tasks/SystemState.cs\n\nCo-authored-by: AR-May <67507805+AR-May@users.noreply.github.com>",
          "committedDate": "2023-06-20T20:42:25Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "ladi.prosek@gmail.com"
          }
        }
      },
      {
        "commit": {
          "oid": "9e315996391df9e2c9d22b3d3e622a1c88dc97ad",
          "message": "Update src/Tasks/SystemState.cs\n\nCo-authored-by: AR-May <67507805+AR-May@users.noreply.github.com>",
          "committedDate": "2023-06-20T20:42:38Z",
          "author": {
            "name": "Ladi Prosek",
            "email": "ladi.prosek@gmail.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "/azp run",
        "createdAt": "2023-06-21T13:16:36Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "<samp>\nAzure Pipelines successfully started running 1 pipeline(s).<br>\r\n\n</samp>",
        "createdAt": "2023-06-21T13:16:46Z",
        "author": {
          "login": "azure-pipelines"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "Not sure I understand the \"the cache had an item in it that we didn't directly need but everything else was up to date, so remove it from the serialized cache\" behavior. Is there a cost to leaving extra entries there?",
              "createdAt": "2023-06-19T15:37:38Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2055,12 +2055,14 @@ internal void ReadStateFile(FileExists fileExists)\n         /// </summary>\n         internal void WriteStateFile()\n         {\n-            if (!String.IsNullOrEmpty(AssemblyInformationCacheOutputPath))\n+            if (!string.IsNullOrEmpty(AssemblyInformationCacheOutputPath))\n             {\n                 _cache.SerializePrecomputedCache(AssemblyInformationCacheOutputPath, Log);\n             }\n-            else if (!String.IsNullOrEmpty(_stateFile) && _cache.IsDirty)\n+            else if (!string.IsNullOrEmpty(_stateFile) && (_cache.IsDirty || _cache.instanceLocalOutgoingFileStateCache.Count < _cache.instanceLocalFileStateCache.Count))\n             {\n+                // Either the cache is dirty (we added or updated an item) or the number of items actually used is less than what\n+                // we got by reading the state file prior to execution. Serialize the cache into the state file.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Rereading the summary--is this mostly for cleanup from the previous \"throw the kitchen sink in there\" case?",
              "createdAt": "2023-06-19T15:54:44Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2055,12 +2055,14 @@ internal void ReadStateFile(FileExists fileExists)\n         /// </summary>\n         internal void WriteStateFile()\n         {\n-            if (!String.IsNullOrEmpty(AssemblyInformationCacheOutputPath))\n+            if (!string.IsNullOrEmpty(AssemblyInformationCacheOutputPath))\n             {\n                 _cache.SerializePrecomputedCache(AssemblyInformationCacheOutputPath, Log);\n             }\n-            else if (!String.IsNullOrEmpty(_stateFile) && _cache.IsDirty)\n+            else if (!string.IsNullOrEmpty(_stateFile) && (_cache.IsDirty || _cache.instanceLocalOutgoingFileStateCache.Count < _cache.instanceLocalFileStateCache.Count))\n             {\n+                // Either the cache is dirty (we added or updated an item) or the number of items actually used is less than what\n+                // we got by reading the state file prior to execution. Serialize the cache into the state file.",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "> Is there a cost to leaving extra entries there?\r\n\r\nThe cost is deserializing the extra entries on every incremental build, until the developer does a clean build. There are these pathological cases like leaving the the entire pre-cache there or transitioning from the old behavior of serializing entries for SDK assemblies where it makes a big difference. But I believe it's better to be deterministic regardless, especially now that there are scenarios like DevBox where we may be distributing pre-built `obj`. ",
              "createdAt": "2023-06-19T18:05:00Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2055,12 +2055,14 @@ internal void ReadStateFile(FileExists fileExists)\n         /// </summary>\n         internal void WriteStateFile()\n         {\n-            if (!String.IsNullOrEmpty(AssemblyInformationCacheOutputPath))\n+            if (!string.IsNullOrEmpty(AssemblyInformationCacheOutputPath))\n             {\n                 _cache.SerializePrecomputedCache(AssemblyInformationCacheOutputPath, Log);\n             }\n-            else if (!String.IsNullOrEmpty(_stateFile) && _cache.IsDirty)\n+            else if (!string.IsNullOrEmpty(_stateFile) && (_cache.IsDirty || _cache.instanceLocalOutgoingFileStateCache.Count < _cache.instanceLocalFileStateCache.Count))\n             {\n+                // Either the cache is dirty (we added or updated an item) or the number of items actually used is less than what\n+                // we got by reading the state file prior to execution. Serialize the cache into the state file.",
              "author": {
                "login": "ladipro"
              }
            },
            {
              "body": "The only downside I can think of is something like \"switching back and forth between branches that add/remove a reference\", but that's not a critical scenario.",
              "createdAt": "2023-06-19T18:19:56Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -2055,12 +2055,14 @@ internal void ReadStateFile(FileExists fileExists)\n         /// </summary>\n         internal void WriteStateFile()\n         {\n-            if (!String.IsNullOrEmpty(AssemblyInformationCacheOutputPath))\n+            if (!string.IsNullOrEmpty(AssemblyInformationCacheOutputPath))\n             {\n                 _cache.SerializePrecomputedCache(AssemblyInformationCacheOutputPath, Log);\n             }\n-            else if (!String.IsNullOrEmpty(_stateFile) && _cache.IsDirty)\n+            else if (!string.IsNullOrEmpty(_stateFile) && (_cache.IsDirty || _cache.instanceLocalOutgoingFileStateCache.Count < _cache.instanceLocalFileStateCache.Count))\n             {\n+                // Either the cache is dirty (we added or updated an item) or the number of items actually used is less than what\n+                // we got by reading the state file prior to execution. Serialize the cache into the state file.",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            // Save a copy of instanceLocalOutgoingFileStateCache so we can restore it later. SerializeCacheByTranslator serializes\r\n```",
              "createdAt": "2023-06-20T16:40:36Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -584,8 +609,8 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)\n         {\n             // Save a copy of instanceLocalFileStateCache so we can restore it later. SerializeCacheByTranslator serializes",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Thank you! ",
              "createdAt": "2023-06-20T20:43:00Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -584,8 +609,8 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)\n         {\n             // Save a copy of instanceLocalFileStateCache so we can restore it later. SerializeCacheByTranslator serializes",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            // instanceLocalOutgoingFileStateCache by default, so change that to the relativized form, then change it back.\r\n```",
              "createdAt": "2023-06-20T16:40:50Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -584,8 +609,8 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)\n         {\n             // Save a copy of instanceLocalFileStateCache so we can restore it later. SerializeCacheByTranslator serializes\n             // instanceLocalFileStateCache by default, so change that to the relativized form, then change it back.",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "Thank you! ",
              "createdAt": "2023-06-20T20:43:18Z",
              "path": "src/Tasks/SystemState.cs",
              "diffHunk": "@@ -584,8 +609,8 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)\n         {\n             // Save a copy of instanceLocalFileStateCache so we can restore it later. SerializeCacheByTranslator serializes\n             // instanceLocalFileStateCache by default, so change that to the relativized form, then change it back.",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      }
    ]
  }
}