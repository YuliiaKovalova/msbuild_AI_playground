{
  "number": 10144,
  "title": "Improve the detection from TERM value",
  "body": "Fixes #9950\r\n\r\n### Context\r\nImproved detection of ansi support using the \"TERM\" environment variable.\r\n\r\n### Changes Made\r\nAdded the list of supported terminal types.\r\n\r\n### Testing\r\nManual tests\r\n",
  "state": "MERGED",
  "createdAt": "2024-05-16T16:09:50Z",
  "updatedAt": "2024-05-21T07:53:50Z",
  "closedAt": "2024-05-21T07:53:50Z",
  "mergedAt": "2024-05-21T07:53:50Z",
  "additions": 59,
  "deletions": 3,
  "changedFiles": 3,
  "headRefName": "tl-improve-term-detection",
  "isDraft": false,
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "0cb9dfd30ffc88d3c95a88c0648302e68e9dab8e",
          "message": "Improve the detection from TERM value",
          "committedDate": "2024-05-16T16:01:49Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "75dc267e213ccd7ad932d2ada6e2fbfdec162d93",
          "message": "fix the build",
          "committedDate": "2024-05-17T12:55:36Z",
          "author": {
            "name": "AR-May",
            "email": "67507805+AR-May@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "If you're doing a big \"do any of these regexen match\" it's almost always more efficient to combine them into a single regex and check if that matches.",
              "createdAt": "2024-05-16T16:12:21Z",
              "path": "src/Framework/Logging/AnsiDetector.cs",
              "diffHunk": "@@ -0,0 +1,56 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+// Portions of the code in this file were ported from the spectre.console by Patrik Svensson, Phil Scott, Nils Andresen\n+// https://github.com/spectreconsole/spectre.console/blob/main/src/Spectre.Console/Internal/Backends/Ansi/AnsiDetector.cs\n+// and from the supports-ansi project by Qingrong Ke\n+// https://github.com/keqingrong/supports-ansi/blob/master/index.js\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Text.RegularExpressions;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework.Logging\n+{\n+    internal class AnsiDetector\n+    {\n+        private static readonly Regex[] terminalsRegexes =\n+        {\n+            new(\"^xterm\"), // xterm, PuTTY, Mintty\n+            new(\"^rxvt\"), // RXVT\n+            new(\"^(?!eterm-color).*eterm.*\"), // Accepts eterm, but not eterm-color, which does not support moving the cursor, see #9950.\n+            new(\"^screen\"), // GNU screen, tmux\n+            new(\"tmux\"), // tmux\n+            new(\"^vt100\"), // DEC VT series\n+            new(\"^vt102\"), // DEC VT series\n+            new(\"^vt220\"), // DEC VT series\n+            new(\"^vt320\"), // DEC VT series\n+            new(\"ansi\"), // ANSI\n+            new(\"scoansi\"), // SCO ANSI\n+            new(\"cygwin\"), // Cygwin, MinGW\n+            new(\"linux\"), // Linux console\n+            new(\"konsole\"), // Konsole\n+            new(\"bvterm\"), // Bitvise SSH Client\n+            new(\"^st-256color\"), // Suckless Simple Terminal, st\n+            new(\"alacritty\"), // Alacritty\n+        };\n+\n+        internal static bool IsAnsiSupported(string termType)\n+        {\n+            if (string.IsNullOrWhiteSpace(termType))\n+            {\n+                return false;\n+            }\n+\n+            if (terminalsRegexes.Any(regex => regex.IsMatch(termType)))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh, interesting. We do this check once a build. I suggest we combine those if the perf gain is better than benefit of readability of the code. I will check how different is perf.",
              "createdAt": "2024-05-17T10:34:46Z",
              "path": "src/Framework/Logging/AnsiDetector.cs",
              "diffHunk": "@@ -0,0 +1,56 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+// Portions of the code in this file were ported from the spectre.console by Patrik Svensson, Phil Scott, Nils Andresen\n+// https://github.com/spectreconsole/spectre.console/blob/main/src/Spectre.Console/Internal/Backends/Ansi/AnsiDetector.cs\n+// and from the supports-ansi project by Qingrong Ke\n+// https://github.com/keqingrong/supports-ansi/blob/master/index.js\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Text.RegularExpressions;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework.Logging\n+{\n+    internal class AnsiDetector\n+    {\n+        private static readonly Regex[] terminalsRegexes =\n+        {\n+            new(\"^xterm\"), // xterm, PuTTY, Mintty\n+            new(\"^rxvt\"), // RXVT\n+            new(\"^(?!eterm-color).*eterm.*\"), // Accepts eterm, but not eterm-color, which does not support moving the cursor, see #9950.\n+            new(\"^screen\"), // GNU screen, tmux\n+            new(\"tmux\"), // tmux\n+            new(\"^vt100\"), // DEC VT series\n+            new(\"^vt102\"), // DEC VT series\n+            new(\"^vt220\"), // DEC VT series\n+            new(\"^vt320\"), // DEC VT series\n+            new(\"ansi\"), // ANSI\n+            new(\"scoansi\"), // SCO ANSI\n+            new(\"cygwin\"), // Cygwin, MinGW\n+            new(\"linux\"), // Linux console\n+            new(\"konsole\"), // Konsole\n+            new(\"bvterm\"), // Bitvise SSH Client\n+            new(\"^st-256color\"), // Suckless Simple Terminal, st\n+            new(\"alacritty\"), // Alacritty\n+        };\n+\n+        internal static bool IsAnsiSupported(string termType)\n+        {\n+            if (string.IsNullOrWhiteSpace(termType))\n+            {\n+                return false;\n+            }\n+\n+            if (terminalsRegexes.Any(regex => regex.IsMatch(termType)))",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "It is 77.40 ns vs 66.13 ns for each build. I think it is more readable now than with a single regex and a trade-off is not worth it, so I would prefer to keep it as is.",
              "createdAt": "2024-05-17T14:40:12Z",
              "path": "src/Framework/Logging/AnsiDetector.cs",
              "diffHunk": "@@ -0,0 +1,56 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+// Portions of the code in this file were ported from the spectre.console by Patrik Svensson, Phil Scott, Nils Andresen\n+// https://github.com/spectreconsole/spectre.console/blob/main/src/Spectre.Console/Internal/Backends/Ansi/AnsiDetector.cs\n+// and from the supports-ansi project by Qingrong Ke\n+// https://github.com/keqingrong/supports-ansi/blob/master/index.js\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Text.RegularExpressions;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework.Logging\n+{\n+    internal class AnsiDetector\n+    {\n+        private static readonly Regex[] terminalsRegexes =\n+        {\n+            new(\"^xterm\"), // xterm, PuTTY, Mintty\n+            new(\"^rxvt\"), // RXVT\n+            new(\"^(?!eterm-color).*eterm.*\"), // Accepts eterm, but not eterm-color, which does not support moving the cursor, see #9950.\n+            new(\"^screen\"), // GNU screen, tmux\n+            new(\"tmux\"), // tmux\n+            new(\"^vt100\"), // DEC VT series\n+            new(\"^vt102\"), // DEC VT series\n+            new(\"^vt220\"), // DEC VT series\n+            new(\"^vt320\"), // DEC VT series\n+            new(\"ansi\"), // ANSI\n+            new(\"scoansi\"), // SCO ANSI\n+            new(\"cygwin\"), // Cygwin, MinGW\n+            new(\"linux\"), // Linux console\n+            new(\"konsole\"), // Konsole\n+            new(\"bvterm\"), // Bitvise SSH Client\n+            new(\"^st-256color\"), // Suckless Simple Terminal, st\n+            new(\"alacritty\"), // Alacritty\n+        };\n+\n+        internal static bool IsAnsiSupported(string termType)\n+        {\n+            if (string.IsNullOrWhiteSpace(termType))\n+            {\n+                return false;\n+            }\n+\n+            if (terminalsRegexes.Any(regex => regex.IsMatch(termType)))",
              "author": {
                "login": "AR-May"
              }
            },
            {
              "body": "That's interesting, how did you calculate that? I would have expected the overhead of constructing individual regex objects to be pretty high.\r\n\r\nWe could also use .NET regex code generation to reduce startup time--but I agree this is likely overoptimization :)",
              "createdAt": "2024-05-17T15:13:08Z",
              "path": "src/Framework/Logging/AnsiDetector.cs",
              "diffHunk": "@@ -0,0 +1,56 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+// Portions of the code in this file were ported from the spectre.console by Patrik Svensson, Phil Scott, Nils Andresen\n+// https://github.com/spectreconsole/spectre.console/blob/main/src/Spectre.Console/Internal/Backends/Ansi/AnsiDetector.cs\n+// and from the supports-ansi project by Qingrong Ke\n+// https://github.com/keqingrong/supports-ansi/blob/master/index.js\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Text.RegularExpressions;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework.Logging\n+{\n+    internal class AnsiDetector\n+    {\n+        private static readonly Regex[] terminalsRegexes =\n+        {\n+            new(\"^xterm\"), // xterm, PuTTY, Mintty\n+            new(\"^rxvt\"), // RXVT\n+            new(\"^(?!eterm-color).*eterm.*\"), // Accepts eterm, but not eterm-color, which does not support moving the cursor, see #9950.\n+            new(\"^screen\"), // GNU screen, tmux\n+            new(\"tmux\"), // tmux\n+            new(\"^vt100\"), // DEC VT series\n+            new(\"^vt102\"), // DEC VT series\n+            new(\"^vt220\"), // DEC VT series\n+            new(\"^vt320\"), // DEC VT series\n+            new(\"ansi\"), // ANSI\n+            new(\"scoansi\"), // SCO ANSI\n+            new(\"cygwin\"), // Cygwin, MinGW\n+            new(\"linux\"), // Linux console\n+            new(\"konsole\"), // Konsole\n+            new(\"bvterm\"), // Bitvise SSH Client\n+            new(\"^st-256color\"), // Suckless Simple Terminal, st\n+            new(\"alacritty\"), // Alacritty\n+        };\n+\n+        internal static bool IsAnsiSupported(string termType)\n+        {\n+            if (string.IsNullOrWhiteSpace(termType))\n+            {\n+                return false;\n+            }\n+\n+            if (terminalsRegexes.Any(regex => regex.IsMatch(termType)))",
              "author": {
                "login": "rainersigwald"
              }
            },
            {
              "body": "Oh, I ran BenchmarkDotNet with these two options on a particular string real quick. But that numbers applies to applying the regex. I have not thought to include the constructing to the measurement. With constructing it was 10.2us vs 7.4us (us = 0.000001 sec). Still not worth to trade this for the readability.",
              "createdAt": "2024-05-20T13:30:28Z",
              "path": "src/Framework/Logging/AnsiDetector.cs",
              "diffHunk": "@@ -0,0 +1,56 @@\n+\ufeff// Licensed to the .NET Foundation under one or more agreements.\n+// The .NET Foundation licenses this file to you under the MIT license.\n+\n+// Portions of the code in this file were ported from the spectre.console by Patrik Svensson, Phil Scott, Nils Andresen\n+// https://github.com/spectreconsole/spectre.console/blob/main/src/Spectre.Console/Internal/Backends/Ansi/AnsiDetector.cs\n+// and from the supports-ansi project by Qingrong Ke\n+// https://github.com/keqingrong/supports-ansi/blob/master/index.js\n+\n+using System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+using System.Text.RegularExpressions;\n+using System.Threading.Tasks;\n+\n+namespace Microsoft.Build.Framework.Logging\n+{\n+    internal class AnsiDetector\n+    {\n+        private static readonly Regex[] terminalsRegexes =\n+        {\n+            new(\"^xterm\"), // xterm, PuTTY, Mintty\n+            new(\"^rxvt\"), // RXVT\n+            new(\"^(?!eterm-color).*eterm.*\"), // Accepts eterm, but not eterm-color, which does not support moving the cursor, see #9950.\n+            new(\"^screen\"), // GNU screen, tmux\n+            new(\"tmux\"), // tmux\n+            new(\"^vt100\"), // DEC VT series\n+            new(\"^vt102\"), // DEC VT series\n+            new(\"^vt220\"), // DEC VT series\n+            new(\"^vt320\"), // DEC VT series\n+            new(\"ansi\"), // ANSI\n+            new(\"scoansi\"), // SCO ANSI\n+            new(\"cygwin\"), // Cygwin, MinGW\n+            new(\"linux\"), // Linux console\n+            new(\"konsole\"), // Konsole\n+            new(\"bvterm\"), // Bitvise SSH Client\n+            new(\"^st-256color\"), // Suckless Simple Terminal, st\n+            new(\"alacritty\"), // Alacritty\n+        };\n+\n+        internal static bool IsAnsiSupported(string termType)\n+        {\n+            if (string.IsNullOrWhiteSpace(termType))\n+            {\n+                return false;\n+            }\n+\n+            if (terminalsRegexes.Any(regex => regex.IsMatch(termType)))",
              "author": {
                "login": "AR-May"
              }
            }
          ]
        }
      }
    ]
  }
}