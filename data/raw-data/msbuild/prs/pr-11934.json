{
  "number": 11934,
  "title": "update to stop closures from lazy functions and linq",
  "body": "Fixes : Allocation issue.\r\n\r\n### Context\r\nLooking at a trace of allocations. It was shown that some of the allocations were coming from closures. This pr addresses the closures found.\r\n\r\n### Changes Made\r\n* Removed lazy from exclude tester function since it was not needed since lifetime of lazy object was within the method itself.\r\n* switched from linq clause for add range to manually adding items, because the linq version caused a closure from a method it did not have context with.\r\n\r\n### Testing\r\nUsed ILSpy to verify that the closures disappeared. (DisplayClass represents a closure)\r\nBefore\r\n![image](https://github.com/user-attachments/assets/123f3b9f-4d2e-4f1d-bcba-2dcbe9144741)\r\n\r\nAfterwards\r\n![image](https://github.com/user-attachments/assets/9a7b9f91-1466-4de9-a0ff-579e0d5407bc)\r\n\r\n\r\n\r\n### Notes\r\n",
  "state": "OPEN",
  "createdAt": "2025-05-30T21:45:28Z",
  "updatedAt": "2025-06-02T17:12:27Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 17,
  "deletions": 11,
  "changedFiles": 1,
  "headRefName": "main",
  "isDraft": false,
  "author": {
    "login": "ttstanley"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "691dc33231f481a7e3a2a69e7e4bfb3dedc43122",
          "message": "update to stop closures from lazy functions and linq",
          "committedDate": "2025-05-30T21:32:30Z",
          "author": {
            "name": "Tevin Stanley",
            "email": "tevinstanley@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "02774f919b086c18e75753f02b0352667861673d",
          "message": "fix a few mistakes",
          "committedDate": "2025-05-30T22:24:15Z",
          "author": {
            "name": "Tevin Stanley",
            "email": "tevinstanley@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "This condition now skips adding values when no exclude patterns exist (i.e., `excludeTester` is null), whereas the previous code added all values in that case. To preserve original behavior, the check should be `if (excludeTester is null || !excludeTester(...))`.\n```suggestion\n                        if (excludeTester is null || !excludeTester(EscapingUtilities.UnescapeAll(value)))\n```",
              "createdAt": "2025-05-30T21:46:45Z",
              "path": "src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs",
              "diffHunk": "@@ -74,16 +74,27 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build\n                             elementLocation: _itemElement.IncludeLocation);\n \n                         itemsToAdd ??= ImmutableArray.CreateBuilder<I>();\n-                        itemsToAdd.AddRange(\n-                            excludeTester != null\n-                                ? itemsFromExpression.Where(item => !excludeTester.Value(item.EvaluatedInclude))\n-                                : itemsFromExpression);\n+\n+                        if (excludeTester is not null)\n+                        {\n+                            foreach (var item in itemsFromExpression)\n+                            {\n+                                if (!excludeTester(item.EvaluatedInclude))\n+                                {\n+                                    itemsToAdd.Add(item);\n+                                }\n+                            }\n+                        }\n+                        else\n+                        {\n+                            itemsToAdd.AddRange(itemsFromExpression);\n+                        }\n                     }\n                     else if (fragment is ValueFragment valueFragment)\n                     {\n                         string value = valueFragment.TextFragment;\n \n-                        if (excludeTester?.Value(EscapingUtilities.UnescapeAll(value)) != true)\n+                        if (excludeTester is not null && !excludeTester(EscapingUtilities.UnescapeAll(value)))",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            },
            {
              "body": "fixed",
              "createdAt": "2025-05-30T23:31:48Z",
              "path": "src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs",
              "diffHunk": "@@ -74,16 +74,27 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build\n                             elementLocation: _itemElement.IncludeLocation);\n \n                         itemsToAdd ??= ImmutableArray.CreateBuilder<I>();\n-                        itemsToAdd.AddRange(\n-                            excludeTester != null\n-                                ? itemsFromExpression.Where(item => !excludeTester.Value(item.EvaluatedInclude))\n-                                : itemsFromExpression);\n+\n+                        if (excludeTester is not null)\n+                        {\n+                            foreach (var item in itemsFromExpression)\n+                            {\n+                                if (!excludeTester(item.EvaluatedInclude))\n+                                {\n+                                    itemsToAdd.Add(item);\n+                                }\n+                            }\n+                        }\n+                        else\n+                        {\n+                            itemsToAdd.AddRange(itemsFromExpression);\n+                        }\n                     }\n                     else if (fragment is ValueFragment valueFragment)\n                     {\n                         string value = valueFragment.TextFragment;\n \n-                        if (excludeTester?.Value(EscapingUtilities.UnescapeAll(value)) != true)\n+                        if (excludeTester is not null && !excludeTester(EscapingUtilities.UnescapeAll(value)))",
              "author": {
                "login": "ttstanley"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Initializing `excludeTester` inside each fragment iteration causes repetitive checks. Consider moving its initialization immediately after building `excludePatterns`, before entering the fragment loop.\n```suggestion\n                Func<string, bool>? excludeTester = excludePatterns.Count > 0\n                    ? EngineFileUtilities.GetFileSpecMatchTester(excludePatterns, _rootDirectory)\n                    : null;\n\n                ISet<string>? excludePatternsForGlobs = null;\n\n                foreach (var fragment in _itemSpec.Fragments)\n                {\n```",
              "createdAt": "2025-05-30T21:46:45Z",
              "path": "src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs",
              "diffHunk": "@@ -50,17 +50,17 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build\n                         var excludeSplits = ExpressionShredder.SplitSemiColonSeparatedList(excludeExpanded);\n                         excludePatterns.AddRange(excludeSplits);\n                     }\n-\n-                    if (excludePatterns.Count > 0)\n-                    {\n-                        excludeTester = new Lazy<Func<string, bool>>(() => EngineFileUtilities.GetFileSpecMatchTester(excludePatterns, _rootDirectory));\n-                    }\n                 }\n \n                 ISet<string>? excludePatternsForGlobs = null;\n \n                 foreach (var fragment in _itemSpec.Fragments)\n                 {\n+                    if (excludeTester is null && excludePatterns.Count > 0)\n+                    {\n+                        excludeTester = EngineFileUtilities.GetFileSpecMatchTester(excludePatterns, _rootDirectory);\n+                    }",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            },
            {
              "body": "fixed",
              "createdAt": "2025-05-30T23:31:42Z",
              "path": "src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs",
              "diffHunk": "@@ -50,17 +50,17 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build\n                         var excludeSplits = ExpressionShredder.SplitSemiColonSeparatedList(excludeExpanded);\n                         excludePatterns.AddRange(excludeSplits);\n                     }\n-\n-                    if (excludePatterns.Count > 0)\n-                    {\n-                        excludeTester = new Lazy<Func<string, bool>>(() => EngineFileUtilities.GetFileSpecMatchTester(excludePatterns, _rootDirectory));\n-                    }\n                 }\n \n                 ISet<string>? excludePatternsForGlobs = null;\n \n                 foreach (var fragment in _itemSpec.Fragments)\n                 {\n+                    if (excludeTester is null && excludePatterns.Count > 0)\n+                    {\n+                        excludeTester = EngineFileUtilities.GetFileSpecMatchTester(excludePatterns, _rootDirectory);\n+                    }",
              "author": {
                "login": "ttstanley"
              }
            }
          ]
        }
      }
    ]
  }
}