{
  "number": 7580,
  "title": "Handle value types explicitly in TaskParameter translation",
  "body": "Remove uses of TranslateDotNet for types that make sense to pass to/from tasks.",
  "state": "MERGED",
  "createdAt": "2022-04-27T21:15:13Z",
  "updatedAt": "2022-04-27T22:32:52Z",
  "closedAt": "2022-04-27T22:32:51Z",
  "mergedAt": "2022-04-27T22:32:51Z",
  "additions": 260,
  "deletions": 95,
  "changedFiles": 6,
  "headRefName": "taskparam-valuetypes",
  "isDraft": false,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "476a92f9c8053408049c1d91508ab7ed2f544493",
          "message": "Prepare TaskBuilderTestTask for more use\n\nMake it public, make all calls to the ITestTaskHost conditional, and\nremove ouputs of invalid types that fail when run as a real task.",
          "committedDate": "2022-04-27T20:51:21Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "fda29114f08900a39ded5f5a4476ed86a8bbed39",
          "message": "Improve message on TaskParameter assert failure",
          "committedDate": "2022-04-27T20:51:21Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "763079d9f955709976640f4e82614039e7be09cc",
          "message": "Translate int[]",
          "committedDate": "2022-04-27T20:51:21Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "db6929c83a19d29c45a0a51ae3578775cbfd57d2",
          "message": "Explicitly consider value types in TaskParameter\n\nThis was all I could think of that made sense to return into an MSBuild\nproperty, corroborated with TaskParameter_Tests.cs.",
          "committedDate": "2022-04-27T20:51:22Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "c297b9feed0b614b6967ed97debdb6299f4a1678",
          "message": "TaskHost task with param types test\n\nEnd-to-end test for serializing different task input/output types to a\nTaskHost node.",
          "committedDate": "2022-04-27T20:51:22Z",
          "author": {
            "name": "Rainer Sigwald",
            "email": "raines@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I think this should be default (and not null) because although you can translate a nullable int, we default to 0 instead if you don't specify it in the task invocation. We don't have to worry about differentiating between required and not required parameters because we have a separate check that every required parameter is present. Correct?",
              "createdAt": "2022-04-27T22:10:04Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -225,6 +259,24 @@ public void Translate(ITranslator translator)\n                     translator.Translate(ref stringArrayParam);\n                     _wrappedParameter = stringArrayParam;\n                     break;\n+                case TaskParameterType.Bool:\n+                    bool boolParam = _wrappedParameter switch\n+                    {\n+                        bool hadValue => hadValue,\n+                        _ => default,\n+                    };\n+                    translator.Translate(ref boolParam);\n+                    _wrappedParameter = boolParam;\n+                    break;\n+                case TaskParameterType.Int:\n+                    int intParam = _wrappedParameter switch\n+                    {\n+                        int hadValue => hadValue,\n+                        _ => default,",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "`_wrappedParameter` here is an `object`, so when it has an `int` in it, it's actually a boxed int, which can be `null`. But the underlying type is not `int?`, it's `int`, so there's no underlying `null`.\r\n\r\nThis code is here because of the funky bidirectional nature of `Translate`: the same method here is called for both serialize and deserialize. For serialize, there will always be a value in `_wrappedParameter`, but for deserialize the pointer will start off as `null`, and then be filled in for the first time by this method. The machinery here gets a valid local that can be passed by reference to `Translate(int)`.",
              "createdAt": "2022-04-27T22:23:36Z",
              "path": "src/Shared/TaskParameter.cs",
              "diffHunk": "@@ -225,6 +259,24 @@ public void Translate(ITranslator translator)\n                     translator.Translate(ref stringArrayParam);\n                     _wrappedParameter = stringArrayParam;\n                     break;\n+                case TaskParameterType.Bool:\n+                    bool boolParam = _wrappedParameter switch\n+                    {\n+                        bool hadValue => hadValue,\n+                        _ => default,\n+                    };\n+                    translator.Translate(ref boolParam);\n+                    _wrappedParameter = boolParam;\n+                    break;\n+                case TaskParameterType.Int:\n+                    int intParam = _wrappedParameter switch\n+                    {\n+                        int hadValue => hadValue,\n+                        _ => default,",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "No shouldly for these?",
              "createdAt": "2022-04-27T22:11:20Z",
              "path": "src/Shared/UnitTests/TaskParameter_Tests.cs",
              "diffHunk": "@@ -131,6 +131,69 @@ public void ValueTypeArrayParameter()\n             Assert.Equal(15, wrappedParameter2[1]);\n         }\n \n+        enum TestEnumForParameter\n+        {\n+            Something,\n+            SomethingElse\n+        }\n+\n+        [Fact]\n+        public void EnumParameter()\n+        {\n+            TaskParameter t = new TaskParameter(TestEnumForParameter.SomethingElse);\n+\n+            Assert.Equal(\"SomethingElse\", t.WrappedParameter);",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "Derived via copy/paste and I was too lazy to Shouldly-fy them.",
              "createdAt": "2022-04-27T22:18:57Z",
              "path": "src/Shared/UnitTests/TaskParameter_Tests.cs",
              "diffHunk": "@@ -131,6 +131,69 @@ public void ValueTypeArrayParameter()\n             Assert.Equal(15, wrappedParameter2[1]);\n         }\n \n+        enum TestEnumForParameter\n+        {\n+            Something,\n+            SomethingElse\n+        }\n+\n+        [Fact]\n+        public void EnumParameter()\n+        {\n+            TaskParameter t = new TaskParameter(TestEnumForParameter.SomethingElse);\n+\n+            Assert.Equal(\"SomethingElse\", t.WrappedParameter);",
              "author": {
                "login": "rainersigwald"
              }
            }
          ]
        }
      }
    ]
  }
}