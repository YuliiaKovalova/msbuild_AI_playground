{
  "number": 11943,
  "title": "Remove closures from ExpandItemIntoItems",
  "body": "Fixes #\r\n\r\n### Context\r\nBased on some traces there were some closures from a linq call without the right context. This caused extra allocations and this addresses it.\r\n\r\n### Changes Made\r\nInstead of using linq to filter ites, just used a for loop to create a filtered list\r\n\r\n### Testing\r\nCompared with ILSpy that there were less closures and allocations (DisplayName)\r\nBefore\r\n![image](https://github.com/user-attachments/assets/7971ebe3-bf1f-4eb8-9b1f-ebfc46a09077)\r\n\r\n\r\nAfter\r\n![image](https://github.com/user-attachments/assets/901dae33-c694-4e96-9460-d964584cbf49)\r\n\r\n\r\n### Notes\r\n",
  "state": "OPEN",
  "createdAt": "2025-06-02T23:44:39Z",
  "updatedAt": "2025-06-02T23:47:49Z",
  "closedAt": null,
  "mergedAt": null,
  "additions": 9,
  "deletions": 4,
  "changedFiles": 1,
  "headRefName": "users/tevinstanley/expanditemintoitems",
  "isDraft": false,
  "author": {
    "login": "ttstanley"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "138d61e7a26d08f11ec88e561683aebe8e0c3eb8",
          "message": "remove closure from linq statement",
          "committedDate": "2025-05-30T23:57:24Z",
          "author": {
            "name": "Tevin Stanley",
            "email": "tevinstanley@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "e0946a69103a471f94314cb17e6024a3097e1e2c",
          "message": "make sure to initialize list with a size to avoid resizing overhead",
          "committedDate": "2025-06-02T23:27:05Z",
          "author": {
            "name": "Tevin Stanley",
            "email": "tevinstanley@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "If the 'excludesUnescapedForComparison' collection could be large, consider using a HashSet instead of a List to optimize the lookup performance within the loop.",
              "createdAt": "2025-06-02T23:45:01Z",
              "path": "src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs",
              "diffHunk": "@@ -474,11 +474,16 @@ private List<ProjectItemInstance> ExpandItemIntoItems(\n             {\n                 // Calculate all Exclude\n                 var excludesUnescapedForComparison = EvaluateExcludePaths(excludes, originalItem.ExcludeLocation);\n+                var filteredProjectItems = new List<ProjectItemInstance>(items.Count);\n+                foreach (ProjectItemInstance item in items)\n+                {\n+                    if (!excludesUnescapedForComparison.Contains(((IItem)item).EvaluatedInclude.NormalizeForPathComparison()))",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      }
    ]
  }
}