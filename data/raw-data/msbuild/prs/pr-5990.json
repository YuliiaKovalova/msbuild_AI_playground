{
  "number": 5990,
  "title": "Optionally output unresolved assembly conflicts",
  "body": "Fixes #5934.\r\n\r\n@dsplaisted, does this look how you expected?",
  "state": "MERGED",
  "createdAt": "2020-12-29T00:40:03Z",
  "updatedAt": "2021-01-15T00:34:54Z",
  "closedAt": "2021-01-08T22:17:50Z",
  "mergedAt": "2021-01-08T22:17:50Z",
  "additions": 70,
  "deletions": 3,
  "changedFiles": 5,
  "headRefName": "assembly-conflict-info",
  "isDraft": false,
  "author": {
    "login": "Forgind"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "722ed6221cc129a28a654717c2aa09dd52e0e90e",
          "message": "Optionally output unresolved assembly conflicts\n\nFixes #5934",
          "committedDate": "2020-12-29T00:38:57Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "675920db832beb30e345d769d2a93b9e457cbc2b",
          "message": "Comments",
          "committedDate": "2020-12-29T02:41:18Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "53cd76df6908f9cc0fd1b424174ef3ce705ef7cc",
          "message": "Switch to item",
          "committedDate": "2020-12-29T02:42:47Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "1a41556cbecd722a5e2d224e24a531cb878a4b35",
          "message": "Add metadata and test",
          "committedDate": "2020-12-29T18:23:06Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "ac791d0f6e19f0d9763e5639aef3876e4fb012d0",
          "message": "Cleanup",
          "committedDate": "2021-01-04T15:58:00Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      },
      {
        "commit": {
          "oid": "0382b4bfc1dcac24d8a6ec224f10d62c64894728",
          "message": "Fix comment",
          "committedDate": "2021-01-05T17:27:16Z",
          "author": {
            "name": "Nathan Mytelka",
            "email": "Forgind@users.noreply.github.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "The additional parameter / output to the task look like what we need.  The common targets would also need to be updated to use those when calling the ResolveAssemblyReference task.\r\n\r\nFor the implementation, it should do the following.  I wasn't sure but it looked like it wasn't:\r\n\r\n- Warnings should still be generated even if OutputUnresolvedAssemblyConflicts is true\r\n- The output items should use the assembly name (possibly with `.dll` on the end, possibly not) as the ItemSpec, not the full log message.  That will allow code to check whether (for example) there is a conflict for the `Microsoft.Windows.SDK.NET.dll` assembly.  Additional information can be included in the item metadata.\r\n\r\nThanks!",
        "createdAt": "2020-12-29T02:33:20Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Does that look better? The extra information you'd want in metadata is the conflicting versions and how each was (directly or indirectly) referenced? (I wasn't sure, so I haven't added that yet.)",
        "createdAt": "2020-12-29T02:45:04Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "I would include the log message with the human-readable details in the metadata for this item.\r\n\r\nWe don't currently have a use case for programmatically processing data such as conflicting version numbers, how the assembly was referenced, etc.  I would say if it's straightforward to include, then go ahead and do so.  But if not, then skip it for now.",
              "createdAt": "2020-12-29T02:50:00Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1001,6 +1020,11 @@ List<Exception> generalResolutionExceptions\n                                 Log.LogMessage(ChooseReferenceLoggingImportance(conflictCandidate), StringBuilderCache.GetStringAndRelease(logConflict));\n                                 Log.LogMessage(MessageImportance.Low, StringBuilderCache.GetStringAndRelease(logDependencies));\n                             }\n+\n+                            if (OutputUnresolvedAssemblyConflicts)\n+                            {\n+                                _unresolvedConflicts.Add(new TaskItem(assemblyName.Name));",
              "author": {
                "login": "dsplaisted"
              }
            },
            {
              "body": "Conflicting version numbers is easy, so I included that. How it's referenced is doable, but it's a little verbose, since there could be multiple levels of dependencies (A depends on B depends on C depends on D depends on the conflicting dll). I can add it later if we decide we need it, though.",
              "createdAt": "2020-12-29T18:28:18Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -1001,6 +1020,11 @@ List<Exception> generalResolutionExceptions\n                                 Log.LogMessage(ChooseReferenceLoggingImportance(conflictCandidate), StringBuilderCache.GetStringAndRelease(logConflict));\n                                 Log.LogMessage(MessageImportance.Low, StringBuilderCache.GetStringAndRelease(logDependencies));\n                             }\n+\n+                            if (OutputUnresolvedAssemblyConflicts)\n+                            {\n+                                _unresolvedConflicts.Add(new TaskItem(assemblyName.Name));",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "We might want to use a name that's more likely to be unique.  Similar to the pattern for the input property, that could be `ResolveAssemblyReferenceUnresolvedAssemblyConflicts`.",
              "createdAt": "2020-12-29T02:51:03Z",
              "path": "src/Tasks/Microsoft.Common.CurrentVersion.targets",
              "diffHunk": "@@ -2233,6 +2235,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\n       <Output TaskParameter=\"FilesWritten\" ItemName=\"FileWrites\"/>\n       <Output TaskParameter=\"DependsOnSystemRuntime\" PropertyName=\"DependsOnSystemRuntime\"/>\n       <Output TaskParameter=\"DependsOnNETStandard\" PropertyName=\"_DependsOnNETStandard\"/>\n+      <Output TaskParameter=\"UnresolvedAssemblyConflicts\" ItemName=\"UnresolvedAssemblyConflicts\"/>",
              "author": {
                "login": "dsplaisted"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n                            string toOutput = StringBuilderCache.GetStringAndRelease(logConflict);\r\n```\r\n\r\nBoth `if` and `else` do this as their first statement.",
              "createdAt": "2021-01-04T09:06:30Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -990,16 +1009,36 @@ List<Exception> generalResolutionExceptions\n                             // Log the reference which lost the conflict and the dependencies and source items which caused it.\n                             LogReferenceDependenciesAndSourceItemsToStringBuilder(fusionName, conflictCandidate, logDependencies.AppendLine());\n \n+                            string toOutput;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "nit:\r\n\r\n```suggestion\r\n        public ITaskItem[] UnresolvedAssemblyConflicts => _unresolvedConflicts.ToArray();\r\n```\r\n",
              "createdAt": "2021-01-04T09:12:48Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -915,6 +922,18 @@ public String DependsOnNETStandard\n             private set;\n         }\n \n+        /// <summary>\n+        /// If OutputUnresolvedAssemblyConflicts then a list of information about unresolved conflicts that normally would have\n+        /// been outputted in MSB3277. Otherwise empty.\n+        /// </summary>\n+        [Output]\n+        public ITaskItem[] UnresolvedAssemblyConflicts {\n+            get\n+            {\n+                return _unresolvedConflicts.ToArray();\n+            }\n+            }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "super-nit: Missing space after `{`.",
              "createdAt": "2021-01-04T09:15:25Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -990,16 +1009,36 @@ List<Exception> generalResolutionExceptions\n                             // Log the reference which lost the conflict and the dependencies and source items which caused it.\n                             LogReferenceDependenciesAndSourceItemsToStringBuilder(fusionName, conflictCandidate, logDependencies.AppendLine());\n \n+                            string toOutput;\n                             if (logWarning)\n                             {\n                                 // This warning is logged regardless of AutoUnify since it means a conflict existed where the reference\t\n                                 // chosen was not the conflict victor in a version comparison. In other words, the victor was older.\n-                                Log.LogWarningWithCodeFromResources(\"ResolveAssemblyReference.FoundConflicts\", assemblyName.Name, StringBuilderCache.GetStringAndRelease(logConflict));\n+                                toOutput = StringBuilderCache.GetStringAndRelease(logConflict);\n+                                Log.LogWarningWithCodeFromResources(\"ResolveAssemblyReference.FoundConflicts\", assemblyName.Name, toOutput);\n                             }\n                             else\n                             {\n-                                Log.LogMessage(ChooseReferenceLoggingImportance(conflictCandidate), StringBuilderCache.GetStringAndRelease(logConflict));\n-                                Log.LogMessage(MessageImportance.Low, StringBuilderCache.GetStringAndRelease(logDependencies));\n+                                toOutput = StringBuilderCache.GetStringAndRelease(logConflict);\n+                                string extra = StringBuilderCache.GetStringAndRelease(logDependencies);\n+                                Log.LogMessage(ChooseReferenceLoggingImportance(conflictCandidate), toOutput);\n+                                Log.LogMessage(MessageImportance.Low, extra);\n+\n+                                // This does an extra allocation, so only do it when necessary.\n+                                if (OutputUnresolvedAssemblyConflicts)\n+                                {\n+                                    toOutput += '\\n' + extra;\n+                                }\n+                            }\n+\n+                            if (OutputUnresolvedAssemblyConflicts)\n+                            {\n+                                _unresolvedConflicts.Add(new TaskItem(assemblyName.Name, new Dictionary<string, string>()\n+                                {\n+                                    { \"logMessage\", toOutput },\n+                                    {\"victorVersionNumber\", victor.ReferenceVersion.ToString() },\n+                                    {\"victimVersionNumber\", conflictCandidate.ReferenceVersion.ToString() }",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Why not be more structured add `extra` in its own metadatum? Something like:\r\n```C#\r\n{ \"logMessage\", toOutput },\r\n{ \"logMessageDetails\", extra }\r\n```\r\n",
              "createdAt": "2021-01-04T09:20:07Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -990,16 +1009,36 @@ List<Exception> generalResolutionExceptions\n                             // Log the reference which lost the conflict and the dependencies and source items which caused it.\n                             LogReferenceDependenciesAndSourceItemsToStringBuilder(fusionName, conflictCandidate, logDependencies.AppendLine());\n \n+                            string toOutput;\n                             if (logWarning)\n                             {\n                                 // This warning is logged regardless of AutoUnify since it means a conflict existed where the reference\t\n                                 // chosen was not the conflict victor in a version comparison. In other words, the victor was older.\n-                                Log.LogWarningWithCodeFromResources(\"ResolveAssemblyReference.FoundConflicts\", assemblyName.Name, StringBuilderCache.GetStringAndRelease(logConflict));\n+                                toOutput = StringBuilderCache.GetStringAndRelease(logConflict);\n+                                Log.LogWarningWithCodeFromResources(\"ResolveAssemblyReference.FoundConflicts\", assemblyName.Name, toOutput);\n                             }\n                             else\n                             {\n-                                Log.LogMessage(ChooseReferenceLoggingImportance(conflictCandidate), StringBuilderCache.GetStringAndRelease(logConflict));\n-                                Log.LogMessage(MessageImportance.Low, StringBuilderCache.GetStringAndRelease(logDependencies));\n+                                toOutput = StringBuilderCache.GetStringAndRelease(logConflict);\n+                                string extra = StringBuilderCache.GetStringAndRelease(logDependencies);\n+                                Log.LogMessage(ChooseReferenceLoggingImportance(conflictCandidate), toOutput);\n+                                Log.LogMessage(MessageImportance.Low, extra);\n+\n+                                // This does an extra allocation, so only do it when necessary.\n+                                if (OutputUnresolvedAssemblyConflicts)\n+                                {\n+                                    toOutput += '\\n' + extra;",
              "author": {
                "login": "ladipro"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "> instead of logging them.\r\n\r\ndoesn't it do both?",
              "createdAt": "2021-01-05T02:08:28Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -214,6 +215,12 @@ public bool IgnoreTargetFrameworkAttributeVersionMismatch\n         /// </remarks>\n         public bool FindDependenciesOfExternallyResolvedReferences { get; set; }\n \n+        /// <summary>\n+        /// If true, outputs any unresolved assembly conflicts (MSB3277) in UnresolvedAssemblyConflicts\n+        /// instead of logging them.",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Yep! Fixed. That was a holdover from how I'd originally designed it.",
              "createdAt": "2021-01-05T17:24:40Z",
              "path": "src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs",
              "diffHunk": "@@ -214,6 +215,12 @@ public bool IgnoreTargetFrameworkAttributeVersionMismatch\n         /// </remarks>\n         public bool FindDependenciesOfExternallyResolvedReferences { get; set; }\n \n+        /// <summary>\n+        /// If true, outputs any unresolved assembly conflicts (MSB3277) in UnresolvedAssemblyConflicts\n+        /// instead of logging them.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "Should we make this a theory and test what happens when the item has the `.dll` extension? @dsplaisted is there a concrete answer for including `.dll` in the assembly name? Or did your comment, \"possibly with .dll possibly not,\" refer to the fact that `assemblyName.Name` may not have the extension along with it? ",
              "createdAt": "2021-01-05T02:15:28Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -3686,6 +3686,37 @@ public void ConflictGeneratesMessageReferencingAssemblyName()\n             warningMessage.ShouldContain(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.FourSpaceIndent\", ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.ReferenceDependsOn\", \"D, Version=1.0.0.0, CulTUre=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\", Path.Combine(s_myLibraries_V1Path, \"D.dll\"))));\n         }\n \n+        [Fact]\n+        public void ConflictOutputsExtraInformationOnDemand()",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "I understood him to mean that the SDK can handle the output having the .dll extension or not having it\u2014it's the same information, just presented slightly differently. Since I'm creating the item, and I went with no .dll extension, that shouldn't be an issue.",
              "createdAt": "2021-01-05T17:27:07Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -3686,6 +3686,37 @@ public void ConflictGeneratesMessageReferencingAssemblyName()\n             warningMessage.ShouldContain(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.FourSpaceIndent\", ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.ReferenceDependsOn\", \"D, Version=1.0.0.0, CulTUre=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\", Path.Combine(s_myLibraries_V1Path, \"D.dll\"))));\n         }\n \n+        [Fact]\n+        public void ConflictOutputsExtraInformationOnDemand()",
              "author": {
                "login": "Forgind"
              }
            },
            {
              "body": "I wasn't sure whether the assembly name processed by ResolveAssemblyReference would have the .dll extension on it.  If it consistently does not have the extension, then I would leave it out.  It's also theoretically possible to reference an .exe, I believe.",
              "createdAt": "2021-01-05T17:58:53Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -3686,6 +3686,37 @@ public void ConflictGeneratesMessageReferencingAssemblyName()\n             warningMessage.ShouldContain(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.FourSpaceIndent\", ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.ReferenceDependsOn\", \"D, Version=1.0.0.0, CulTUre=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\", Path.Combine(s_myLibraries_V1Path, \"D.dll\"))));\n         }\n \n+        [Fact]\n+        public void ConflictOutputsExtraInformationOnDemand()",
              "author": {
                "login": "dsplaisted"
              }
            },
            {
              "body": "The summary behind `assemblyName.Name`:\r\n> Gets or sets the simple name of the assembly. This is usually, but not necessarily,\r\nthe file name of the manifest file of the assembly, minus its extension.\r\n\r\nLooks like the SDK will have to account for both scenarios, unless there's a preference on how we handle it here. I'm okay with either scenario.",
              "createdAt": "2021-01-05T20:40:25Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -3686,6 +3686,37 @@ public void ConflictGeneratesMessageReferencingAssemblyName()\n             warningMessage.ShouldContain(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.FourSpaceIndent\", ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.ReferenceDependsOn\", \"D, Version=1.0.0.0, CulTUre=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\", Path.Combine(s_myLibraries_V1Path, \"D.dll\"))));\n         }\n \n+        [Fact]\n+        public void ConflictOutputsExtraInformationOnDemand()",
              "author": {
                "login": "benvillalobos"
              }
            },
            {
              "body": "Sounds like MSBuild shouldn't do anything special here then (ie don't add the .dll extension).",
              "createdAt": "2021-01-05T20:46:01Z",
              "path": "src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs",
              "diffHunk": "@@ -3686,6 +3686,37 @@ public void ConflictGeneratesMessageReferencingAssemblyName()\n             warningMessage.ShouldContain(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.FourSpaceIndent\", ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(\"ResolveAssemblyReference.ReferenceDependsOn\", \"D, Version=1.0.0.0, CulTUre=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\", Path.Combine(s_myLibraries_V1Path, \"D.dll\"))));\n         }\n \n+        [Fact]\n+        public void ConflictOutputsExtraInformationOnDemand()",
              "author": {
                "login": "dsplaisted"
              }
            }
          ]
        }
      }
    ]
  }
}