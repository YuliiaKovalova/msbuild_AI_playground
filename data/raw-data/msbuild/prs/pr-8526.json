{
  "number": 8526,
  "title": "Consider XML cache valid if loaded from non modifiable file",
  "body": "Related to #8412\r\n\r\n### Context\r\nDuring research of optimization opportunities for Evaluation I have found relatively cheap win. \r\nSome time ago we have introduced optimized up to date check leveraging immutable file locations. See usage `FileClassifier` class for more details. This PR made `ProjectRootElementCache` use it too so cached XML file is considered valid if it was read from immutable location.\r\n\r\n### Changes Made\r\nAs stated above. Additionally I tried to slightly improve readability by eliminating stuff if nesting.\r\n\r\n### Testing\r\nLocally. \r\nMeasure gain for Orchard null incremental build /m was ~21% of Evaluation CPU time.\r\n![image](https://user-images.githubusercontent.com/25249058/222724130-09697676-eea4-4467-9148-e60f71f30433.png)\r\n",
  "state": "MERGED",
  "createdAt": "2023-03-03T12:57:07Z",
  "updatedAt": "2023-03-07T07:17:54Z",
  "closedAt": "2023-03-07T07:17:53Z",
  "mergedAt": "2023-03-07T07:17:53Z",
  "additions": 47,
  "deletions": 34,
  "changedFiles": 1,
  "headRefName": "rokonec/futdc-xml-cache-isinvalidentry",
  "isDraft": false,
  "author": {
    "login": "rokonec"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "labels": [
    "Area: Performance",
    "merge-when-branch-open"
  ],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "a5efda7fbd5a37a68016cff9f78984915cb0cfe0",
          "message": "Consider XML cache valid if laoded from non modifiable file",
          "committedDate": "2023-03-03T12:33:23Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      },
      {
        "commit": {
          "oid": "18dece6d069dad9079fdd8ccf416219f24c4d4fe",
          "message": "Fixing english grammar\n\nCo-authored-by: Forgind <12969783+Forgind@users.noreply.github.com>",
          "committedDate": "2023-03-03T23:53:16Z",
          "author": {
            "name": "Roman Konecny",
            "email": "rokonecn@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": [
      {
        "body": "> Measure gain for Orchard null incremental build /m was ~21% of Evaluation CPU time.\r\n\r\nThis would mean that 21% of evaluation CPU was spent in the `GetFileInfoNoThrow` calls, checking if XML files still exist and have the same timestamp. That's crazy! How would you think about switching from `GetFileInfoNoThrow` to `NativeMethodsShared.GetLastWriteFileUtcTime` so files that are not considered immutable are checked faster as well? ",
        "createdAt": "2023-03-03T21:54:20Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> How would you think about switching from `GetFileInfoNoThrow`to `NativeMethodsShared.GetLastWriteFileUtcTime`\r\n\r\nAlthough after my changes time spent in `GetFileInfoNoThrow` was negligible, your recommended changes is appealing. I would probably go even deeper and get rid of `GetFileInfoNoThrow` as we use it only for last write time and exists which both is  provided by `NativeMethodsShared.GetLastWriteFileUtcTime`. However, I have to verify that `NativeMethodsShared.GetLastWriteFileUtcTime` is indeed faster.\r\nThat being said, I believe such effort deserve its own PR.\r\n",
        "createdAt": "2023-03-03T23:52:46Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "```suggestion\r\n            // If the project file is non modifiable, assume it is up to date and consider the cached value valid.\r\n```",
              "createdAt": "2023-03-03T18:29:08Z",
              "path": "src/Build/Evaluation/ProjectRootElementCache.cs",
              "diffHunk": "@@ -140,45 +141,57 @@ internal ProjectRootElementCache(bool autoReloadFromDisk, bool loadProjectsReadO\n         /// </summary>\n         private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootElement)\n         {\n-            if (projectRootElement != null && _autoReloadFromDisk)\n+            // When we do not _autoReloadFromDisk we expect that cached value is always valid.\n+            // Usually lifespan of cache is expected to be build duration (process will terminate after build).\n+            if (projectRootElement == null || !_autoReloadFromDisk)\n             {\n-                FileInfo fileInfo = FileUtilities.GetFileInfoNoThrow(projectFile);\n+                return false;\n+            }\n \n-                // If the file doesn't exist on disk, go ahead and use the cached version.\n-                // It's an in-memory project that hasn't been saved yet.\n-                if (fileInfo != null)\n-                {\n-                    if (fileInfo.LastWriteTime != projectRootElement.LastWriteTimeWhenRead)\n-                    {\n-                        // File was changed on disk by external means. Cached version is no longer valid.\n-                        // We could throw here or ignore the problem, but it is a common and reasonable pattern to change a file\n-                        // externally and load a new project over it to see the new content. So we dump it from the cache\n-                        // to force a load from disk. There might then exist more than one ProjectRootElement with the same path,\n-                        // but clients ought not get themselves into such a state - and unless they save them to disk,\n-                        // it may not be a problem.\n-                        return true;\n-                    }\n-                    else if (s_\u0441heckFileContent)\n-                    {\n-                        // QA tests run too fast for the timestamp check to work. This environment variable is for their\n-                        // use: it checks the file content as well as the timestamp. That's better than completely disabling\n-                        // the cache as we get test coverage of the rest of the cache code.\n-                        XmlDocument document = new XmlDocument();\n-                        document.PreserveWhitespace = projectRootElement.XmlDocument.PreserveWhitespace;\n+            // If the project file is non modifiable lets expect it is up to date and consider cached value valid.",
              "author": {
                "login": "Forgind"
              }
            }
          ]
        }
      }
    ]
  }
}