{
  "number": 11805,
  "title": "Check for count through IReadOnlyCollection interface",
  "body": "Fixes #\r\n\r\n### Context\r\n\r\n\r\n### Changes Made\r\n\r\n\r\n### Testing\r\n\r\n\r\n### Notes\r\n",
  "state": "MERGED",
  "createdAt": "2025-05-07T22:24:54Z",
  "updatedAt": "2025-05-23T17:58:30Z",
  "closedAt": "2025-05-19T13:08:58Z",
  "mergedAt": "2025-05-19T13:08:58Z",
  "additions": 4,
  "deletions": 0,
  "changedFiles": 1,
  "headRefName": "dev/erarndt/CopyOnReadEnumerable",
  "isDraft": false,
  "author": {
    "login": "Erarndt"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "commits": {
    "nodes": [
      {
        "commit": {
          "oid": "079ec5cdf4d1a894905acaa3e6b8ea5f1b83f6ff",
          "message": "Check for count through IReadOnlyCollection interface",
          "committedDate": "2025-05-07T22:24:03Z",
          "author": {
            "name": "Eric Arndt",
            "email": "erarndt@microsoft.com"
          }
        }
      }
    ]
  },
  "comments": {
    "nodes": []
  },
  "reviewThreads": {
    "nodes": [
      {
        "comments": {
          "nodes": [
            {
              "body": "[nitpick] Consider adding a comment here explaining that this branch is used to pre-allocate the List capacity using IReadOnlyCollection's Count for improved performance.\n```suggestion\n            }\n            // If the backing enumerable is an IReadOnlyCollection, use its Count property\n            // to pre-allocate the List capacity for improved performance.\n```",
              "createdAt": "2025-05-07T22:25:32Z",
              "path": "src/Build/Collections/CopyOnReadEnumerable.cs",
              "diffHunk": "@@ -72,6 +72,10 @@ public IEnumerator<TResult> GetEnumerator()\n #endif\n                 list = new List<TResult>(count);\n             }",
              "author": {
                "login": "copilot-pull-request-reviewer"
              }
            }
          ]
        }
      },
      {
        "comments": {
          "nodes": [
            {
              "body": "How does this interact with the previous #if net directive please?\r\nMight the `if (_backingEnumerable.TryGetNonEnumeratedCount(out int count))` condition make this one basically dead?\r\nEven if it doesn't, it means that in some cases we're mixing two paradigms together I think.\r\n",
              "createdAt": "2025-05-09T12:50:18Z",
              "path": "src/Build/Collections/CopyOnReadEnumerable.cs",
              "diffHunk": "@@ -72,6 +72,10 @@ public IEnumerator<TResult> GetEnumerator()\n #endif\n                 list = new List<TResult>(count);\n             }\n+            else if (_backingEnumerable is IReadOnlyCollection<TSource> readOnlyCollection)",
              "author": {
                "login": "SimaTian"
              }
            },
            {
              "body": "The implementation for `TryGetNonEnumeratedCount` only works for a handful of interfaces, and `IReadonlyCollection` isn't one of those interfaces\r\n\r\n        public static bool TryGetNonEnumeratedCount<TSource>(this IEnumerable<TSource> source, out int count)\r\n        {\r\n            if (source is null)\r\n            {\r\n                ThrowHelper.ThrowArgumentNullException(ExceptionArgument.source);\r\n            }\r\n\r\n            if (source is ICollection<TSource> collectionoft)\r\n            {\r\n                count = collectionoft.Count;\r\n                return true;\r\n            }\r\n\r\n    #if !OPTIMIZE_FOR_SIZE\r\n            if (source is Iterator<TSource> iterator)\r\n            {\r\n                int c = iterator.GetCount(onlyIfCheap: true);\r\n                if (c >= 0)\r\n                {\r\n                    count = c;\r\n                    return true;\r\n                }\r\n            }\r\n    #endif\r\n\r\n            if (source is ICollection collection)\r\n            {\r\n                count = collection.Count;\r\n                return true;\r\n            }\r\n\r\n            count = 0;\r\n            return false;\r\n        }\r\n\r\nCould you clarify the point about mixing the two paradigms?",
              "createdAt": "2025-05-13T17:37:06Z",
              "path": "src/Build/Collections/CopyOnReadEnumerable.cs",
              "diffHunk": "@@ -72,6 +72,10 @@ public IEnumerator<TResult> GetEnumerator()\n #endif\n                 list = new List<TResult>(count);\n             }\n+            else if (_backingEnumerable is IReadOnlyCollection<TSource> readOnlyCollection)",
              "author": {
                "login": "Erarndt"
              }
            },
            {
              "body": "Thanks for the clarification. Makes sense.\r\nI was probably being oversensitive here since I was reading too much into the TryGetNonEnumeratedCount behavior.\r\nThat being said I meant that we're using \r\n```\r\n            if (_backingEnumerable.TryGetNonEnumeratedCount(out int count))\r\n```\r\nas basically the same branch as \r\n```\r\n            if (_backingEnumerable is ICollection backingCollection)\r\n```\r\nso the assumption is that the behavior should equivalent - and from the function call alone I was unsure.\r\nNow that I see the underlying code it looks fine.",
              "createdAt": "2025-05-14T07:52:25Z",
              "path": "src/Build/Collections/CopyOnReadEnumerable.cs",
              "diffHunk": "@@ -72,6 +72,10 @@ public IEnumerator<TResult> GetEnumerator()\n #endif\n                 list = new List<TResult>(count);\n             }\n+            else if (_backingEnumerable is IReadOnlyCollection<TSource> readOnlyCollection)",
              "author": {
                "login": "SimaTian"
              }
            }
          ]
        }
      }
    ]
  }
}