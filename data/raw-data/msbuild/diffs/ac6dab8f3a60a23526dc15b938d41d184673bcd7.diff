diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index e1e1841a713..9cc7c8367da 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -624,7 +624,6 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
                             byte rawType = headerByte[0];
 
                             bool hasExtendedHeader = PacketTypeExtensions.HasExtendedHeader(rawType);
-                            NodePacketType packetType = PacketTypeExtensions.HasExtendedHeader(rawType) ? PacketTypeExtensions.GetNodePacketType(rawType) : (NodePacketType)rawType;
 
                             byte version = 0;
                             if (hasExtendedHeader)
@@ -632,6 +631,8 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
                                 version = PacketTypeExtensions.ReadVersion(localReadPipe);
                             }
 
+                            NodePacketType packetType = hasExtendedHeader ? PacketTypeExtensions.GetNodePacketType(rawType) : (NodePacketType)rawType;
+
                             try
                             {
                                 _packetFactory.DeserializeAndRoutePacket(0, packetType, BinaryTranslator.GetReadTranslator(localReadPipe, _sharedReadBuffer, version));
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 0257125733c..23bfa2aaed9 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -5,7 +5,9 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Globalization;
+using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
+using static Microsoft.Build.Shared.XMakeAttributes;
 
 #nullable disable
 
@@ -430,7 +432,7 @@ public void Translate(ITranslator translator)
             // Skip AppDomain configuration when targeting .NET Task Host (Runtime="NET").
             // Although MSBuild.exe runs under .NET Framework and has AppDomain support,
             // we don't transmit AppDomain config when communicating with dotnet.exe (it is not supported in .NET 5+).
-            if (!string.Equals(_runtime, "NET", StringComparison.OrdinalIgnoreCase))
+            if(!StringComparer.OrdinalIgnoreCase.Equals(_runtime, MSBuildRuntimeValues.net))
             {
                 byte[] appDomainConfigBytes = null;
 
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index ed84445bbfd..a6ebead50e0 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -6,7 +6,6 @@
 using System.IO;
 using System.Reflection;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Xunit.Abstractions;
 
