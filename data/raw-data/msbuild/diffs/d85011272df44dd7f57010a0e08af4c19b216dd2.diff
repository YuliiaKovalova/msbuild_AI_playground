diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 64f459a3eed..80a85ebd09c 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -625,8 +625,8 @@ private void StartBuilderThread()
                             return this.RequestThreadProc(setThreadParameters: true);
                         },
                         _cancellationTokenSource.Token,
-                        TaskCreationOptions.LongRunning,
-                        TaskScheduler.Default).Unwrap();
+                        TaskCreationOptions.None,
+                        AwaitExtensions.DedicatedThreadsTaskSchedulerInstance).Unwrap();
                 }
             }
         }
@@ -658,8 +658,10 @@ private void SetCommonWorkerThreadParameters()
                 threadName = "RequestBuilder STA thread";
             }
 #endif
-
-            Thread.CurrentThread.Name = threadName;
+            if (string.IsNullOrEmpty(Thread.CurrentThread.Name))
+            {
+                Thread.CurrentThread.Name = threadName;
+            }
         }
 
         /// <summary>
diff --git a/src/Shared/AwaitExtensions.cs b/src/Shared/AwaitExtensions.cs
index 3ab9a01df86..9f17ddbaf2b 100644
--- a/src/Shared/AwaitExtensions.cs
+++ b/src/Shared/AwaitExtensions.cs
@@ -7,6 +7,7 @@
 
 using System;
 using System.Collections.Concurrent;
+using System.Collections.Generic;
 using System.Globalization;
 using System.Runtime.CompilerServices;
 using System.Threading;
@@ -23,12 +24,22 @@ internal static class AwaitExtensions
         /// Synchronizes access to the staScheduler field.
         /// </summary>
         private static Object s_staSchedulerSync = new Object();
+        /// <summary>
+        /// Synchronizes access to the dedicatedSchedulerSync field.
+        /// </summary>
+        private static Object s_dedicatedSchedulerSync = new Object();
 
         /// <summary>
         /// The singleton STA scheduler object.
         /// </summary>
         private static TaskScheduler s_staScheduler;
 
+        /// <summary>
+        /// The singleton dedicated scheduler object.
+        /// </summary>
+        private static TaskScheduler s_dedicatedScheduler;
+
+
         /// <summary>
         /// Gets the STA scheduler.
         /// </summary>
@@ -51,6 +62,28 @@ internal static TaskScheduler OneSTAThreadPerTaskSchedulerInstance
             }
         }
 
+        /// <summary>
+        /// Gets the dedicated scheduler.
+        /// </summary>
+        internal static TaskScheduler DedicatedThreadsTaskSchedulerInstance
+        {
+            get
+            {
+                if (s_dedicatedScheduler == null)
+                {
+                    lock (s_dedicatedSchedulerSync)
+                    {
+                        if (s_dedicatedScheduler == null)
+                        {
+                            s_dedicatedScheduler = new DedicatedThreadsTaskScheduler();
+                        }
+                    }
+                }
+
+                return s_dedicatedScheduler;
+            }
+        }
+
         /// <summary>
         /// Provides await functionality for ordinary <see cref="WaitHandle"/>s.
         /// </summary>
@@ -202,5 +235,78 @@ protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQu
                 return false;
             }
         }
+
+        private sealed class DedicatedThreadsTaskScheduler : TaskScheduler
+        {
+            private static readonly int _maxThreads = Environment.ProcessorCount;
+
+            private readonly BlockingCollection<Task> _tasks = new BlockingCollection<Task>();
+            private int _availableThreads = 0;
+            private int _createdThreads = 0;
+
+            protected override void QueueTask(Task task)
+            {
+                RequestThread();
+                _tasks.Add(task);
+            }
+
+            protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued) => false;
+
+            protected override IEnumerable<Task> GetScheduledTasks() => _tasks;
+
+            private void RequestThread()
+            {
+                // Decrement available thread count; don't drop below zero
+                // Prior value is stored in count
+                var count = Volatile.Read(ref _availableThreads);
+                while (count > 0)
+                {
+                    var prev = Interlocked.CompareExchange(ref _availableThreads, count - 1, count);
+                    if (prev == count)
+                    {
+                        break;
+                    }
+                    count = prev;
+                }
+
+                if (count == 0)
+                {
+                    // No threads were available for request
+                    TryInjectThread();
+                }
+            }
+
+            private void TryInjectThread()
+            {
+                // Increment created thread, but don't go over maxThreads,
+                // Add thread if we incremented
+                var count = Volatile.Read(ref _createdThreads);
+                while (count < _maxThreads)
+                {
+                    var prev = Interlocked.CompareExchange(ref _createdThreads, count + 1, count);
+                    if (prev == count)
+                    {
+                        // Add thread
+                        InjectThread();
+                        break;
+                    }
+                    count = prev;
+                }
+            }
+
+            private void InjectThread()
+            {
+                var thread = new Thread(() =>
+                {
+                    foreach (Task t in _tasks.GetConsumingEnumerable())
+                    {
+                        TryExecuteTask(t);
+                        Interlocked.Increment(ref _availableThreads);
+                    }
+                });
+                thread.IsBackground = true;
+                thread.Start();
+            }
+        }
     }
 }
