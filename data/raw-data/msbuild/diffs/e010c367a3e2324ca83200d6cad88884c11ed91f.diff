diff --git a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
index 8a61b2c42c7..9b15433cc72 100644
--- a/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCop/Infrastructure/ConfigurationProvider.cs
@@ -17,7 +17,7 @@ namespace Microsoft.Build.BuildCop.Infrastructure;
 
 
 // TODO: https://github.com/dotnet/msbuild/issues/9628
-//  Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)
+// Let's flip form statics to instance, with exposed interface (so that we can easily swap implementations)
 internal static class ConfigurationProvider
 {
     private static IEditorConfigParser s_editorConfigParser = new EditorConfigParser();
diff --git a/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigFile.cs b/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigFile.cs
index 043969129fb..c42c8a82f98 100644
--- a/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigFile.cs
+++ b/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigFile.cs
@@ -49,7 +49,7 @@ internal partial class EditorConfigFile
         internal Section GlobalSection { get; }
 
         /// <summary>
-        /// The path passed to <see cref="Parse(string, string)"/> during construction.
+        /// The path passed to <see cref="Parse(string)"/> during construction.
         /// </summary>
         internal string PathToFile { get; }
 
@@ -97,7 +97,7 @@ internal static EditorConfigFile Parse(string pathToFile)
             {
                 while (sr.Peek() >= 0)
                 {
-                    string line = sr.ReadLine();
+                    string? line = sr.ReadLine();
 
                     if (string.IsNullOrWhiteSpace(line))
                     {
diff --git a/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs b/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs
index 267d3fbd904..801496b1965 100644
--- a/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs
+++ b/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs
@@ -68,7 +68,7 @@ internal bool IsMatch(string s)
         }
 
         /// <summary>
-        /// Takes a <see cref="Section.Name"/> and creates a matcher that
+        /// Takes a <see cref="EditorConfigFile.Section.Name"/> and creates a matcher that
         /// matches the given language. Returns null if the section name is
         /// invalid.
         /// </summary>
diff --git a/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigParser.cs b/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigParser.cs
index 8e1c77fb82b..b496991461a 100644
--- a/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigParser.cs
+++ b/src/Build/BuildCop/Infrastructure/EditorConfig/EditorConfigParser.cs
@@ -15,7 +15,7 @@
 
 namespace Microsoft.Build.BuildCop.Infrastructure.EditorConfig
 {
-    public class EditorConfigParser : IEditorConfigParser
+    internal class EditorConfigParser : IEditorConfigParser
     {
         private const string EditorconfigFile = ".editorconfig";
         private Dictionary<string, Dictionary<string, string>> filePathConfigCache;
@@ -82,5 +82,4 @@ public Dictionary<string, string> Parse(string filePath)
 
         private string NormalizeWithForwardSlash(string p) => Path.DirectorySeparatorChar == '/' ? p : p.Replace(Path.DirectorySeparatorChar, '/');
     }
-
 }
diff --git a/src/Build/BuildCop/Infrastructure/EditorConfig/IEditorConfigParser.cs b/src/Build/BuildCop/Infrastructure/EditorConfig/IEditorConfigParser.cs
index c0c3c510897..c40685f5524 100644
--- a/src/Build/BuildCop/Infrastructure/EditorConfig/IEditorConfigParser.cs
+++ b/src/Build/BuildCop/Infrastructure/EditorConfig/IEditorConfigParser.cs
@@ -9,8 +9,8 @@
 
 namespace Microsoft.Build.BuildCop.Infrastructure.EditorConfig
 {
-    public interface IEditorConfigParser
+    internal interface IEditorConfigParser
     {
-        Dictionary<string, string> Parse(string filePath);
+        public Dictionary<string, string> Parse(string filePath);
     }
 }
