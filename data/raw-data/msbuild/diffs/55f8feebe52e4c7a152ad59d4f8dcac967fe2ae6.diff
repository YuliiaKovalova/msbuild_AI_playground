diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 76dd7380d59..a7be7cfffaf 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -3213,11 +3213,7 @@ public void PropertyFunctionStaticMethodGetCultureInfo()
 
             Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
-#if FEATURE_CULTUREINFO_GETCULTURES
             string result = expander.ExpandIntoStringLeaveEscaped(@"$([System.Globalization.CultureInfo]::GetCultureInfo(`en-US`).ToString())", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-#else
-            string result = expander.ExpandIntoStringLeaveEscaped(@"$([System.Globalization.CultureInfo]::new(`en-US`).ToString())", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
-#endif
 
             Assert.Equal(new CultureInfo("en-US").ToString(), result);
         }
diff --git a/src/Build/Resources/Constants.cs b/src/Build/Resources/Constants.cs
index 8d03cf5a8a2..0de516855dd 100644
--- a/src/Build/Resources/Constants.cs
+++ b/src/Build/Resources/Constants.cs
@@ -343,9 +343,7 @@ private static void InitializeAvailableMethods()
                         availableStaticMethods.TryAdd("System.IO.File::GetLastWriteTime", fileType);
                         availableStaticMethods.TryAdd("System.IO.File::ReadAllText", fileType);
 
-#if FEATURE_CULTUREINFO_GETCULTUREINFO
                         availableStaticMethods.TryAdd("System.Globalization.CultureInfo::GetCultureInfo", new Tuple<string, Type>(null, typeof(CultureInfo))); // user request
-#endif
                         availableStaticMethods.TryAdd("System.Globalization.CultureInfo::new", new Tuple<string, Type>(null, typeof(CultureInfo))); // user request
                         availableStaticMethods.TryAdd("System.Globalization.CultureInfo::CurrentUICulture", new Tuple<string, Type>(null, typeof(CultureInfo))); // user request
 
diff --git a/src/Directory.BeforeCommon.targets b/src/Directory.BeforeCommon.targets
index 8e63a94f93d..77ecc98e9d4 100644
--- a/src/Directory.BeforeCommon.targets
+++ b/src/Directory.BeforeCommon.targets
@@ -36,8 +36,6 @@
     <DefineConstants>$(DefineConstants);FEATURE_CHARSET_AUTO</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CODETASKFACTORY</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_CONSOLE_FALLBACK</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_GETCULTUREINFO</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_GETCULTURES</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_DOTNETVERSION</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_ENCODING_DEFAULT</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_ENVIRONMENT_SYSTEMDIRECTORY</DefineConstants>
diff --git a/src/Shared/AssemblyUtilities.cs b/src/Shared/AssemblyUtilities.cs
index f4194346f88..8b1a7bd2ce7 100644
--- a/src/Shared/AssemblyUtilities.cs
+++ b/src/Shared/AssemblyUtilities.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Globalization;
 using System.Linq;
 using System.Reflection;
 
@@ -13,16 +12,11 @@ namespace Microsoft.Build.Shared
     /// </summary>
     internal static class AssemblyUtilities
     {
-#if !FEATURE_CULTUREINFO_GETCULTURES
         // True when the cached method info objects have been set.
         private static bool s_initialized;
 
         // Cached method info
         private static PropertyInfo s_assemblylocationProperty;
-        private static MethodInfo s_cultureInfoGetCultureMethod;
-
-        private static Lazy<CultureInfo[]> s_validCultures = new Lazy<CultureInfo[]>(() => GetValidCultures(), true);
-#endif
 
 #if !CLR2COMPATIBILITY
         private static Lazy<Assembly> s_entryAssembly = new Lazy<Assembly>(() => GetEntryAssembly());
@@ -97,30 +91,6 @@ public static AssemblyName CloneIfPossible(this AssemblyName assemblyNameToClone
 
         }
 
-#if !FEATURE_CULTUREINFO_GETCULTURES
-        public static bool CultureInfoHasGetCultures()
-        {
-            return s_cultureInfoGetCultureMethod != null;
-        }
-#endif // !FEATURE_CULTUREINFO_GETCULTURES
-
-        public static CultureInfo[] GetAllCultures()
-        {
-#if FEATURE_CULTUREINFO_GETCULTURES
-            return CultureInfo.GetCultures(CultureTypes.AllCultures);
-#else
-            Initialize();
-
-            if (!CultureInfoHasGetCultures())
-            {
-                throw new NotSupportedException("CultureInfo does not have the method GetCultures");
-            }
-
-            return s_validCultures.Value;
-#endif
-        }
-
-#if !FEATURE_CULTUREINFO_GETCULTURES
         /// <summary>
         /// Initialize static fields. Doesn't need to be thread safe.
         /// </summary>
@@ -129,11 +99,9 @@ private static void Initialize()
             if (s_initialized) return;
 
             s_assemblylocationProperty = typeof(Assembly).GetProperty("Location", typeof(string));
-            s_cultureInfoGetCultureMethod = typeof(CultureInfo).GetMethod("GetCultures");
 
             s_initialized = true;
         }
-#endif // !FEATURE_CULTUREINFO_GETCULTURES
 
         private static Assembly GetEntryAssembly()
         {
@@ -147,24 +115,5 @@ private static Assembly GetEntryAssembly()
             return (Assembly) getEntryAssembly.Invoke(null, Array.Empty<object>());
 #endif
         }
-
-#if !FEATURE_CULTUREINFO_GETCULTURES
-        private static CultureInfo[] GetValidCultures()
-        {
-            var cultureTypesType = s_cultureInfoGetCultureMethod?.GetParameters().FirstOrDefault()?.ParameterType;
-
-            ErrorUtilities.VerifyThrow(cultureTypesType?.Name == "CultureTypes" &&
-                                       Enum.IsDefined(cultureTypesType, "AllCultures"),
-                                       "GetCulture is expected to accept CultureTypes.AllCultures");
-
-            var allCulturesEnumValue = Enum.Parse(cultureTypesType, "AllCultures", true);
-
-            var cultures = s_cultureInfoGetCultureMethod.Invoke(null, new[] {allCulturesEnumValue}) as CultureInfo[];
-
-            ErrorUtilities.VerifyThrowInternalNull(cultures, "CultureInfo.GetCultures should work if all reflection checks pass");
-
-            return cultures;
-        }
-#endif
     }
 }
