diff --git a/src/MSBuild/LiveLogger/Logger.cs b/src/MSBuild/LiveLogger/Logger.cs
index f8dc446e2f0..acad7b3636e 100644
--- a/src/MSBuild/LiveLogger/Logger.cs
+++ b/src/MSBuild/LiveLogger/Logger.cs
@@ -1,35 +1,38 @@
-﻿using Microsoft.Build.Framework;
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Threading;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
 namespace tortillachip;
 public class Logger : INodeLogger
 {
-    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Minimal; set => value = LoggerVerbosity.Minimal; }
-    public string Parameters { get => ""; set => value = ""; }
-
-    readonly object _lock = new();
+    private readonly object _lock = new();
 
-    readonly CancellationTokenSource _cts = new();
+    private readonly CancellationTokenSource _cts = new();
 
-    NodeStatus[] _nodes;
+    private NodeStatus[] _nodes;
 
-    readonly Dictionary<ProjectContext, Project> _notableProjects = new();
+    private readonly Dictionary<ProjectContext, Project> _notableProjects = new();
 
-    readonly Dictionary<ProjectContext, (bool Notable, string Path, string Targets)> _notabilityByContext = new();
+    private readonly Dictionary<ProjectContext, (bool Notable, string Path, string Targets)> _notabilityByContext = new();
 
-    readonly Dictionary<ProjectInstance, ProjectContext> _relevantContextByInstance = new();
+    private readonly Dictionary<ProjectInstance, ProjectContext> _relevantContextByInstance = new();
 
-    readonly Dictionary<ProjectContext, Stopwatch> _projectTimeCounter = new();
+    private readonly Dictionary<ProjectContext, Stopwatch> _projectTimeCounter = new();
 
-    int _usedNodes = 0;
+    private int _usedNodes = 0;
 
     private ProjectContext _restoreContext;
 
+    public LoggerVerbosity Verbosity { get => LoggerVerbosity.Minimal; set => value = LoggerVerbosity.Minimal; }
+    public string Parameters { get => ""; set => value = ""; }
+
     public void Initialize(IEventSource eventSource, int nodeCount)
     {
         _nodes = new NodeStatus[nodeCount];
@@ -39,7 +42,7 @@ public void Initialize(IEventSource eventSource, int nodeCount)
 
     public void Initialize(IEventSource eventSource)
     {
-        //Debugger.Launch();
+        // Debugger.Launch();
 
         eventSource.BuildStarted += new BuildStartedEventHandler(BuildStarted);
         eventSource.BuildFinished += new BuildFinishedEventHandler(BuildFinished);
@@ -179,7 +182,7 @@ private void DisplayNodes()
         }
     }
 
-    string FitToWidth(string input)
+    private string FitToWidth(string input)
     {
         return input.Substring(0, Math.Min(input.Length, Console.BufferWidth - 1));
     }
diff --git a/src/MSBuild/LiveLogger/Project.cs b/src/MSBuild/LiveLogger/Project.cs
index a146083489e..3d65a5d8a6c 100644
--- a/src/MSBuild/LiveLogger/Project.cs
+++ b/src/MSBuild/LiveLogger/Project.cs
@@ -1,9 +1,7 @@
-﻿using System;
-using System.Collections.Generic;
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
 using System.Diagnostics;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 
 namespace tortillachip;
 
