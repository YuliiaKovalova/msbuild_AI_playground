diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index d3543174a82..28091aa5371 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -756,10 +756,23 @@ static async Task SendDataCoreAsync(Task _, object state)
                             ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(writeStream);
                             try
                             {
-                                writeStream.WriteByte((byte)packet.Type);
+                                NodePacketType packetType = packet.Type;
+                                bool supportsVersioning = PacketVersionManager.SupportsVersioning(packetType);
+
+                                // Write packet type with extended header flag if versioned
+                                byte rawPackageType = supportsVersioning ? PacketTypeExtensions.CreateExtendedHeaderType(packetType) : (byte)packetType;
+                                writeStream.WriteByte(rawPackageType);
 
                                 // Pad for the packet length
                                 WriteInt32(writeStream, 0);
+
+                                // If versioned, write extended header with version
+                                if (supportsVersioning)
+                                {
+                                    byte currentVersion = PacketVersionManager.GetCurrentVersion(packetType);
+                                    PacketTypeExtensions.WriteVersion(writeStream, currentVersion);
+                                }
+
                                 packet.Translate(writeTranslator);
 
                                 int writeStreamLength = (int)writeStream.Position;
@@ -768,10 +781,6 @@ static async Task SendDataCoreAsync(Task _, object state)
                                 writeStream.Position = 1;
                                 WriteInt32(writeStream, writeStreamLength - 5);
 
-                                // Add version byte (new)
-                                byte version = packet.Version; // You'd need to add this property to your packet class
-                                writeStream.WriteByte(version);
-
                                 byte[] writeStreamBuffer = writeStream.GetBuffer();
 
                                 for (int i = 0; i < writeStreamLength; i += MaxPacketWriteSize)
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index e88c88fb816..3709e766d17 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -465,8 +465,8 @@ internal static (string msbuildExcutable, string msbuildAssemblyPath) GetMSBuild
                 }
                 else if (taskHostParameters.TryGetValue(Constants.MSBuildAssemblyPath, out string resolvedAssemblyPath))
                 {
+                    ValidateNetHostSdkVersion(resolvedAssemblyPath);
                     msbuildAssemblyPath = Path.Combine(resolvedAssemblyPath, Constants.MSBuildAssemblyName);
-                    ValidateNetHostSdkVersion(msbuildAssemblyPath);
                 }
 
                 toolPath = taskHostParameters.TryGetValue(Constants.DotnetHostPath, out string resolvedHostPath) ? resolvedHostPath : null;
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index f2f8fb4c3d9..ec7a3884199 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -3,6 +3,9 @@
 
 #nullable disable
 
+using System.Collections.Generic;
+using System.IO;
+
 namespace Microsoft.Build.BackEnd
 {
     #region Enums
@@ -243,4 +246,43 @@ NodePacketType Type
 
         #endregion
     }
+
+    internal static class PacketTypeExtensions
+    {
+        private const byte ExtendedHeaderFlag = 0x40; // Bit 6 indicates extended header with version
+
+        /// <summary>
+        /// Determines if a packet has an extended header by checking if the extended header flag is set.
+        /// The secondary check with (byte)NodePacketType.ServerNodeBuildCommand ensures special server command packets (0xF0-0xFF) 
+        /// are never interpreted as having extended headers, even if they happen to have the flag bit set.
+        /// </summary>
+        /// <param name="rawType">The raw packet type byte.</param>
+        /// <returns>True if the packet has an extended header, false otherwise</returns>
+        public static bool HasExtendedHeader(byte rawType) => (rawType & ExtendedHeaderFlag) != 0 && (rawType < (byte)NodePacketType.ServerNodeBuildCommand);
+
+        // Get base type, stripping the extended header flag
+        public static NodePacketType GetNodePacketType(byte rawType) => (NodePacketType)(rawType & ~ExtendedHeaderFlag);
+
+        // Create a type with extended header flag
+        public static byte CreateExtendedHeaderType(NodePacketType type) => (byte)((byte)type | ExtendedHeaderFlag);
+
+        // Read extended header (returns version)
+        public static byte ReadVersion(Stream stream) => (byte)stream.ReadByte();
+
+        // Write extended header with version
+        public static void WriteVersion(Stream stream, byte version) => stream.WriteByte(version);
+    }
+
+    internal static class PacketVersionManager
+    {
+        private static readonly Dictionary<NodePacketType, byte> _currentPacketVersions = new Dictionary<NodePacketType, byte>
+        {
+            { NodePacketType.TaskHostConfiguration, 1 },
+        };
+
+        // Get current version for a packet type
+        public static byte GetCurrentVersion(NodePacketType type) => _currentPacketVersions.TryGetValue(type, out byte version) ? version : (byte)1;
+
+        public static bool SupportsVersioning(NodePacketType type) => _currentPacketVersions.ContainsKey(type);
+    }
 }
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 00dcf4b6055..a242b820c45 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -595,7 +595,17 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
                                 break;
                             }
 
-                            NodePacketType packetType = (NodePacketType)headerByte[0];
+                            // Check if this packet has an extended header that includes a version part.
+                            byte rawType = headerByte[0];
+
+                            bool hasExtendedHeader = PacketTypeExtensions.HasExtendedHeader(rawType);
+                            NodePacketType packetType = PacketTypeExtensions.HasExtendedHeader(rawType) ? PacketTypeExtensions.GetNodePacketType(rawType) : (NodePacketType)rawType;
+
+                            byte version;
+                            if (hasExtendedHeader)
+                            {
+                                version = PacketTypeExtensions.ReadVersion(localReadPipe);
+                            }
 
                             try
                             {
