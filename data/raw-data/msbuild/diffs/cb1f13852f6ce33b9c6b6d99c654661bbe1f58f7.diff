diff --git a/src/Build/Evaluation/ProjectRootElementCache.cs b/src/Build/Evaluation/ProjectRootElementCache.cs
index cf3ed0f3c5f..921a5b39f14 100644
--- a/src/Build/Evaluation/ProjectRootElementCache.cs
+++ b/src/Build/Evaluation/ProjectRootElementCache.cs
@@ -268,7 +268,7 @@ internal override ProjectRootElement Get(string projectFile, OpenProjectRootElem
             if (projectRootElement == null || projectRootElementIsInvalid)
             {
                 // We do not lock loading with common _locker of the cache, to avoid lock contention.
-                // Decided also not to lock this section with the key specific locker to avoid the overhead and code overcomplification, as
+                // Decided also not to lock this section with the key specific locker to avoid the overhead and code overcomplication, as
                 // it is not likely that two threads would use Get function for the same project simulteniously and it is not a big deal if in some cases we load the same project twice.
 
                 ProjectRootElement newProjectRootElement = openProjectRootElement(projectFile, this);
diff --git a/src/Build/Evaluation/SimpleProjectRootElementCache.cs b/src/Build/Evaluation/SimpleProjectRootElementCache.cs
index b5216f5da78..7e7700d1467 100644
--- a/src/Build/Evaluation/SimpleProjectRootElementCache.cs
+++ b/src/Build/Evaluation/SimpleProjectRootElementCache.cs
@@ -67,7 +67,7 @@ private ProjectRootElement GetFromOrAddToCache(string projectFile, OpenProjectRo
                 AddEntry(rootElement);
 
                 ErrorUtilities.VerifyThrow(_cache.TryGetValue(key, out _),
-                    "Open should have renamed into cache and boosted");
+                    "Project should have been added into cache and boosted");
 
                 return rootElement;
             });
