diff --git a/src/Tasks.UnitTests/GetSDKReference_Tests.cs b/src/Tasks.UnitTests/GetSDKReference_Tests.cs
index 72fd7969515..6437663437c 100644
--- a/src/Tasks.UnitTests/GetSDKReference_Tests.cs
+++ b/src/Tasks.UnitTests/GetSDKReference_Tests.cs
@@ -263,12 +263,12 @@ public void GetSDKReferenceFolders()
         [Fact]
         public void VerifyGetSdkReferenceTranslator()
         {
-            ConcurrentDictionary<string, GetSDKReferenceFiles.SdkReferenceInfo> pathToReferenceMetadata = new();
-            pathToReferenceMetadata.TryAdd("first", new("dat", "dat2", true, false));
-            pathToReferenceMetadata.TryAdd("second", new("inf", "inf2", false, false));
-            ConcurrentDictionary<string, List<string>> directoryToFileList = new();
-            directoryToFileList.TryAdd("third", new List<string>() { "a", "b", "c" });
-            directoryToFileList.TryAdd("fourth", new List<string>() { "1", "2", "3" });
+            Dictionary<string, GetSDKReferenceFiles.SdkReferenceInfo> pathToReferenceMetadata = new();
+            pathToReferenceMetadata.Add("first", new("dat", "dat2", true, false));
+            pathToReferenceMetadata.Add("second", new("inf", "inf2", false, false));
+            Dictionary<string, List<string>> directoryToFileList = new();
+            directoryToFileList.Add("third", new List<string>() { "a", "b", "c" });
+            directoryToFileList.Add("fourth", new List<string>() { "1", "2", "3" });
             GetSDKReferenceFiles.SDKInfo writeInfo = new(pathToReferenceMetadata, directoryToFileList, 47);
             GetSDKReferenceFiles.SaveContext contextWriter = new("d", "n", writeInfo);
             GetSDKReferenceFiles.SDKInfo readInfo = null;
diff --git a/src/Tasks/GetSDKReferenceFiles.cs b/src/Tasks/GetSDKReferenceFiles.cs
index be3a086ce46..f38a267ba22 100644
--- a/src/Tasks/GetSDKReferenceFiles.cs
+++ b/src/Tasks/GetSDKReferenceFiles.cs
@@ -1012,7 +1012,7 @@ internal SDKInfo GetCacheFileInfoFromSDK(string sdkRootDirectory, string[] sdkMa
 
                 PopulateRedistDictionaryFromPaths(directoryToFileList, redistDirectories);
 
-                var cacheInfo = new SDKInfo(references, directoryToFileList, FileUtilities.GetPathsHash(directoriesToHash));
+                var cacheInfo = new SDKInfo(references.ToDictionary(kvp => kvp.Key, kvp => kvp.Value, StringComparer.OrdinalIgnoreCase), directoryToFileList.ToDictionary(kvp => kvp.Key, kvp => kvp.Value, StringComparer.OrdinalIgnoreCase), FileUtilities.GetPathsHash(directoriesToHash));
                 return cacheInfo;
             }
 
@@ -1220,15 +1220,14 @@ public SdkReferenceInfo(string fusionName, string imageRuntime, bool isWinMD, bo
         /// <remarks>This is a serialization format. Do not change member naming.</remarks>
         internal class SDKInfo : ITranslatable
         {
-            private ConcurrentDictionary<string, SdkReferenceInfo> pathToReferenceMetadata;
-            private ConcurrentDictionary<string, List<string>> directoryToFileList;
+            private Dictionary<string, SdkReferenceInfo> pathToReferenceMetadata;
+            private Dictionary<string, List<string>> directoryToFileList;
             private int hash;
 
             internal SDKInfo()
             {
-                IEqualityComparer<string> comparer = FileUtilities.PathComparison == StringComparison.Ordinal ? StringComparer.Ordinal : StringComparer.OrdinalIgnoreCase;
-                pathToReferenceMetadata = new(comparer);
-                directoryToFileList = new(comparer);
+                pathToReferenceMetadata = new(StringComparer.OrdinalIgnoreCase);
+                directoryToFileList = new(StringComparer.OrdinalIgnoreCase);
                 hash = 0;
             }
 
@@ -1237,7 +1236,7 @@ public SDKInfo(ITranslator translator) : this()
                 Translate(translator);
             }
 
-            public SDKInfo(ConcurrentDictionary<string, SdkReferenceInfo> pathToReferenceMetadata, ConcurrentDictionary<string, List<string>> directoryToFileList, int cacheHash)
+            public SDKInfo(Dictionary<string, SdkReferenceInfo> pathToReferenceMetadata, Dictionary<string, List<string>> directoryToFileList, int cacheHash)
             {
                 this.pathToReferenceMetadata = pathToReferenceMetadata;
                 this.directoryToFileList = directoryToFileList;
@@ -1247,9 +1246,9 @@ public SDKInfo(ConcurrentDictionary<string, SdkReferenceInfo> pathToReferenceMet
             /// <summary>
             /// A dictionary which maps a file path to a structure that contain some metadata information about that file.
             /// </summary>
-            public ConcurrentDictionary<string, SdkReferenceInfo> PathToReferenceMetadata { get { return pathToReferenceMetadata; } }
+            public Dictionary<string, SdkReferenceInfo> PathToReferenceMetadata { get { return pathToReferenceMetadata; } }
 
-            public ConcurrentDictionary<string, List<string>> DirectoryToFileList { get { return directoryToFileList; } }
+            public Dictionary<string, List<string>> DirectoryToFileList { get { return directoryToFileList; } }
 
             /// <summary>
             /// Hashset
@@ -1258,7 +1257,7 @@ public SDKInfo(ConcurrentDictionary<string, SdkReferenceInfo> pathToReferenceMet
 
             public void Translate(ITranslator translator)
             {
-                TranslateConcurrentDictionary<SdkReferenceInfo>(translator, ref pathToReferenceMetadata, (ITranslator t, ref SdkReferenceInfo info) =>
+                translator.TranslateDictionary(ref pathToReferenceMetadata, (ITranslator t, ref SdkReferenceInfo info) =>
                 {
                     info ??= new SdkReferenceInfo(null, null, false, false);
                     string fusionName = info.FusionName;
@@ -1275,7 +1274,11 @@ public void Translate(ITranslator translator)
                     info.IsWinMD = isWinmd;
                 });
 
-                TranslateConcurrentDictionary<List<string>>(translator, ref directoryToFileList, (ITranslator t, ref List<string> fileList) =>
+                translator.TranslateDictionary(ref directoryToFileList, (ITranslator t, ref List<string> fileList) =>
+                {
+                    t.Translate(ref fileList, (ITranslator t, ref string str) => { t.Translate(ref str); });
+                });
+                translator.TranslateDictionary(ref directoryToFileList, (ITranslator t, ref List<string> fileList) =>
                 {
                     t.Translate(ref fileList, (ITranslator t, ref string str) => { t.Translate(ref str); });
                 });
@@ -1284,33 +1287,6 @@ public void Translate(ITranslator translator)
             }
         }
 
-        private static void TranslateConcurrentDictionary<T>(ITranslator translator, ref ConcurrentDictionary<string, T> dictionary, ObjectTranslator<T> objTranslator)
-        {
-            int count = dictionary.Count;
-            translator.Translate(ref count);
-            if (translator.Mode == TranslationDirection.ReadFromStream)
-            {
-                for (int i = 0; i < count; i++)
-                {
-                    string key = null;
-                    translator.Translate(ref key);
-                    T value = default;
-                    objTranslator(translator, ref value);
-                    dictionary[key] = value;
-                }
-            }
-            else
-            {
-                foreach (KeyValuePair<string, T> kvp in dictionary)
-                {
-                    string key = kvp.Key;
-                    translator.Translate(ref key);
-                    T value = kvp.Value;
-                    objTranslator(translator, ref value);
-                }
-            }
-        }
-
         /// <summary>
         /// This class represents the context information used by the background cache serialization thread.
         /// </summary>
