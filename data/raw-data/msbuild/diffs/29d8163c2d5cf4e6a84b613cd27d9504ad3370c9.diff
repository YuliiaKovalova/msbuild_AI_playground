diff --git a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
index 1e7715ca45a..d088c85ff3e 100644
--- a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
+++ b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
@@ -197,7 +197,7 @@ public void BuildsWhileBuildIsRunningOnServer()
 
                 Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "0");
                 _output.WriteLine("Set MSBUILDUSESERVER to 0");
-                output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out success, false, _output, true);
+                output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out success, false, _output);
                 success.ShouldBeTrue();
                 ParseNumber(output, "Server ID is ").ShouldBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
 
@@ -257,10 +257,9 @@ public void MultiProcBuildOnServer()
         private int ParseNumber(string searchString, string toFind)
         {
             _output.WriteLine("ParseNumber func.");
-            _output.WriteLine($"Finding {0}", toFind);
-            _output.WriteLine("-searchString-in-ParseNumber-func-");
+            _output.WriteLine("---");
             _output.WriteLine(searchString);
-            _output.WriteLine("--end-of-searchString-in-ParseNumber-func-");
+            _output.WriteLine("---");
             Regex regex = new(@$"{toFind}(\d+)");
             var x = regex.Match(searchString);
             return int.Parse(x.Groups[1].Value);
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index b43d22f327e..31b9ed35465 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -1,10 +1,8 @@
 ï»¿using Microsoft.Build.Shared;
 using System;
 using System.Diagnostics;
-using System.Threading;
 using Xunit.Abstractions;
 
-
 #nullable disable
 
 namespace Microsoft.Build.UnitTests.Shared
@@ -26,7 +24,7 @@ public static string ExecMSBuild(string msbuildParameters, out bool successfulEx
         /// Invoke msbuild.exe with the given parameters and return the stdout, stderr, and process exit status.
         /// This method may invoke msbuild via other runtimes.
         /// </summary>
-        public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null, bool sleepABit = false)
+        public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null)
         {
 #if FEATURE_RUN_EXE_IN_TESTS
             var pathToExecutable = pathToMsBuildExe;
@@ -35,7 +33,7 @@ public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParamete
             msbuildParameters = FileUtilities.EnsureDoubleQuotes(pathToMsBuildExe) + " " + msbuildParameters;
 #endif
 
-            return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper, sleepABit);
+            return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
         }
 
         private static void AdjustForShellExecution(ref string pathToExecutable, ref string arguments)
@@ -71,7 +69,7 @@ private static string ResolveRuntimeExecutableName()
         /// <summary>
         /// Run the process and get stdout and stderr
         /// </summary>
-        public static string RunProcessAndGetOutput(string process, string parameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null, bool sleepABit = false)
+        public static string RunProcessAndGetOutput(string process, string parameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null)
         {
             if (shellExecute)
             {
@@ -116,13 +114,7 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 p.BeginOutputReadLine();
                 p.BeginErrorReadLine();
                 p.StandardInput.Dispose();
-
-                p.WaitForExit();
-
-                if (sleepABit)
-                {
-                    Thread.Sleep(1000);
-                }
+                p.WaitForExit(30000);
 
                 pid = p.Id;
                 successfulExit = p.ExitCode == 0;
