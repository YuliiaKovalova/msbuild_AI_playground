diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index 3021dfb0512..d76e7dcac87 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -74,7 +74,7 @@ public static string SpaceBetween(string leftText, string rightText, int width)
                 string leftNoFormatString = ANSIRemove(leftText);
                 string rightNoFormatString = ANSIRemove(rightText);
                 if (leftNoFormatString.Length + rightNoFormatString.Length > Console.BufferWidth) return leftText + rightText;
-                int space = Console.BufferWidth - (leftNoFormatString.Length + rightNoFormatString.Length) - 1;
+                int space = Console.BufferWidth - (leftNoFormatString.Length + rightNoFormatString.Length);
                 result += leftText;
                 result += new string(' ', space);
                 result += rightText;
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 0f7845e2bb6..32bcc6d30de 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -49,6 +49,8 @@ public void Initialize(IEventSource eventSource)
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             // Initialize FancyLoggerBuffer
             FancyLoggerBuffer.Initialize();
+            // TODO: Fix. First line does not appear at top. Leaving empty line for now
+            FancyLoggerBuffer.WriteNewLine("");
         }
 
         // Build
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index abaa6418cfc..49e9b4d27c6 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -12,41 +12,6 @@
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
-    /*public class FancyLoggerBufferLine
-    {
-        private static int Counter = 0;
-        public int Id;
-        public FancyLoggerBufferLine? NextLine;
-        public string Text = string.Empty;
-        private string _rawText = string.Empty;
-        public string RawText
-        {
-            get => _rawText;
-            set
-            {
-                _rawText = value;
-                if (Text.Length > Console.BufferWidth)
-                {
-                    Text = value.Substring(0, Console.BufferWidth);
-                }
-                else
-                {
-                    Text = value;
-                }
-            }
-        }
-        public FancyLoggerBufferLine()
-        {
-            Id = Counter++;
-            RawText = String.Empty;
-        }
-        public FancyLoggerBufferLine(string text)
-            : this()
-        {
-            RawText = text;
-        }
-    }*/
-
     public class FancyLoggerBufferLine
     {
         private static int Counter = 0;
@@ -78,7 +43,7 @@ public string FullText
                     // Next line
                     if (breakpoint + 1 < value.Length)
                     {
-                        NextLine = new FancyLoggerBufferLine(value.Substring(breakpoint + 1));
+                        NextLine = new FancyLoggerBufferLine(value.Substring(breakpoint));
                     }
                 }
                 else
@@ -99,6 +64,17 @@ public FancyLoggerBufferLine(string text)
         {
             FullText = text;
         }
+
+        public List<FancyLoggerBufferLine> NextLines()
+        {
+            List<FancyLoggerBufferLine> results = new();
+            if (NextLine is not null)
+            {
+                results.Add(NextLine);
+                results.AddRange(NextLine.NextLines());
+            }
+            return results;
+        }
     }
 
     public class FancyLoggerBuffer
@@ -165,18 +141,31 @@ public static void Render()
                 new string('-', Console.BufferWidth) + '\n' + "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
             );
             // Write lines
+            // TODO: Update to make more efficient (store nextlines as lists instead of nested, add cache, etc)
+            List<FancyLoggerBufferLine> linesWithWrappings = GetLinesWithWrappings();
             for (int i = 0; i < Console.BufferHeight - 3; i++)
             {
                 int lineIndex = i + TopLineIndex;
                 Console.Write(
                     ANSIBuilder.Cursor.Position(i + 2, 0) +
                     ANSIBuilder.Eraser.LineCursorToEnd() + 
-                    (lineIndex < Lines.Count ? Lines[lineIndex].Text : String.Empty)
+                    (lineIndex < linesWithWrappings.Count ? linesWithWrappings[lineIndex].Text : String.Empty)
                 );
             }
         }
         #endregion
 
+        public static List<FancyLoggerBufferLine> GetLinesWithWrappings()
+        {
+            List<FancyLoggerBufferLine> result = new();
+            foreach (FancyLoggerBufferLine line in Lines)
+            {
+                result.Add(line);
+                result.AddRange(line.NextLines());
+            }
+            return result;
+        }
+
         #region Line identification
         public static int GetLineIndexById(int lineId)
         {
@@ -202,15 +191,22 @@ public static int GetLineIndexById(int lineId)
             FancyLoggerBufferLine line = new FancyLoggerBufferLine(text);
             return WriteNewLineAfter(lineId, line);
         }
-        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, FancyLoggerBufferLine line)
+        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, FancyLoggerBufferLine line, bool overrideOverflowLines = false)
         {
-            // Get line index
-            int lineIndex = GetLineIndexById(lineId);
-            if (lineIndex == -1) return null;
-            // Save top line
-            int topLineId = Lines[TopLineIndex].Id;
-            // Add
-            Lines.Insert(lineIndex + 1, line);
+            // Save top line (current if no lines)
+            int topLineId = Lines.Count > 0 ? Lines[TopLineIndex].Id : line.Id;
+            if (lineId != -1)
+            {
+                // Get line index
+                int lineIndex = GetLineIndexById(lineId);
+                if (lineIndex == -1) return null;
+                // Get line end index
+                Lines.Insert(lineIndex, line);
+            }
+            else
+            {
+                Lines.Add(line);
+            }
             // Get updated top line index
             TopLineIndex = GetLineIndexById(topLineId);
             // Return
@@ -224,17 +220,7 @@ public static int GetLineIndexById(int lineId)
         }
         public static FancyLoggerBufferLine? WriteNewLine(FancyLoggerBufferLine line)
         {
-            // Get last id
-            if (Lines.Count > 0)
-            {
-                int lineId = Lines.Last().Id;
-                return WriteNewLineAfter(lineId, line);
-            }
-            else
-            {
-                Lines.Add(line);
-                return line;
-            }
+            return WriteNewLineAfter(Lines.Count > 0 ? Lines.Last().Id : -1, line);
         }
 
         // Update line
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBufferNew.cs b/src/Build/Logging/FancyLogger/FancyLoggerBufferNew.cs
new file mode 100644
index 00000000000..54d1e16f941
--- /dev/null
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBufferNew.cs
@@ -0,0 +1,83 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Microsoft.Build.Logging.FancyLogger
+{
+    internal class FancyLoggerBufferNew
+    {
+        public class FancyLoggerBufferLineNew
+        {
+            private static int Counter = 0;
+            public int Id;
+            public string Text;
+            public FancyLoggerBufferLineNew? NextLine;
+
+            private string _fullText;
+            public string FullText
+            {
+                get => _fullText;
+                set
+                {
+                    // Assign value
+                    _fullText = value;
+                    // If next line(s) exists, delete
+                    if (NextLine is not null)
+                    {
+                        NextLine.DeleteNextLines();
+                        NextLine = null;
+                    }
+                    // If text overflows
+                    // TODO: Can be simplified
+                    if (value.Length > Console.WindowWidth)
+                    {
+                        // Get text breakpoint
+                        // TODO: Fix ANSI bugs
+                        int breakpoint = ANSIBuilder.ANSIBreakpoint(value, Console.BufferWidth);
+                        Text = value.Substring(0, breakpoint);
+                        if (breakpoint + 1 < value.Length) NextLine = new FancyLoggerBufferLineNew(value.Substring(breakpoint + 1));
+                    }
+                    else
+                    {
+                        Text = value;
+                    }
+                }
+            }
+
+            public FancyLoggerBufferLineNew()
+            {
+                Id = Counter++;
+                Text = string.Empty;
+                _fullText = string.Empty;
+            }
+
+            public FancyLoggerBufferLineNew(string text) : this()
+            {
+                FullText = text;
+            }
+
+            public int EndId()
+            {
+                if (NextLine is null) return Id;
+                return NextLine.EndId();
+            }
+
+            public void WriteAfterId(int id)
+            {
+            }
+            public void Update()
+            {
+            }
+
+            public void DeleteNextLines()
+            {
+            }
+        }
+    }
+}
