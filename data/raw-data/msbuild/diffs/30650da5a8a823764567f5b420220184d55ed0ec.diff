diff --git a/src/Build/BackEnd/Node/RarNode.cs b/src/Build/BackEnd/Node/RarNode.cs
index 236c19b0f87..a16abc293b1 100644
--- a/src/Build/BackEnd/Node/RarNode.cs
+++ b/src/Build/BackEnd/Node/RarNode.cs
@@ -4,12 +4,10 @@
 using System;
 using System.Diagnostics;
 using System.IO.Pipes;
-using System.Linq;
 using System.Threading;
 using System.Threading.Tasks;
 
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.ResolveAssemblyReferences.Server;
@@ -23,10 +21,10 @@ public sealed class RarNode : INode
         /// </summary>
         private const int ClientConnectTimeout = 60000;
 
-        public NodeEngineShutdownReason Run(bool nodeReuse, bool lowPriority, out Exception shutdownException)
+        public NodeEngineShutdownReason Run(bool nodeReuse, bool lowPriority, out Exception shutdownException, CancellationToken cancellationToken = default)
         {
             shutdownException = null;
-            using CancellationTokenSource cts = new CancellationTokenSource();
+            using CancellationTokenSource cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
             string pipeName = CommunicationsUtilities.GetRarPipeName(nodeReuse, lowPriority);
             RarController controller = new RarController(pipeName, NamedPipeUtil.CreateNamedPipeServer);
 
@@ -36,7 +34,17 @@ public NodeEngineShutdownReason Run(bool nodeReuse, bool lowPriority, out Except
                                                                      enableLowPriority: lowPriority, specialNode: true);
             Task<NodeEngineShutdownReason> msBuildShutdown = RunShutdownCheckAsync(handshake, cts.Token);
 
-            int index = Task.WaitAny(msBuildShutdown, rarTask);
+            int index;
+            try
+            {
+                index = Task.WaitAny(msBuildShutdown, rarTask);
+            }
+            catch (TaskCanceledException e)
+            {
+                shutdownException = e;
+                return NodeEngineShutdownReason.Error;
+            }
+
             cts.Cancel();
 
             if (index == 0)
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index a70b97edf07..9c30cde8405 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2650,7 +2650,7 @@ private static void StartLocalNode(CommandLineSwitches commandLineSwitches)
                         string[] lowPriorityInput = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.LowPriority];
                         bool lowPriority = lowPriorityInput.Length > 0 ? lowPriorityInput[0].Equals("true") : false;
 
-                        shutdownReason = node.Run(nodeReuse, lowPriority, out nodeException);
+                        shutdownReason = node.Run(nodeReuse, lowPriority, out nodeException, s_buildCancellationSource.Token);
                     }
                     else
                     {
