diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index fe8a64d2939..741babe959c 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -63,8 +63,8 @@ public class Project : ILinkableObject
         /// </summary>
         private static readonly BuildEventContext s_buildEventContext = new BuildEventContext(0 /* node ID */, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);
 
-        private readonly ProjectLink implementation;
-        private readonly IProjectLinkInternal implementationInternal;
+        private ProjectLink implementation;
+        private IProjectLinkInternal implementationInternal;
 
         internal bool IsLinked => implementationInternal.IsLinked;
         internal ProjectLink Link => implementation;
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 5326d4d5a6c..8a9d820afdc 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -165,7 +165,7 @@ internal class Evaluator<P, I, M, D>
         /// <summary>
         /// The logging context to be used and piped down throughout evaluation.
         /// </summary>
-        private readonly EvaluationLoggingContext _evaluationLoggingContext;
+        private EvaluationLoggingContext _evaluationLoggingContext;
 
         private bool _logProjectImportedEvents = true;
 
@@ -184,7 +184,7 @@ internal class Evaluator<P, I, M, D>
         /// <summary>
         /// Keeps track of the FullPaths of ProjectRootElements that may have been modified as a stream.
         /// </summary>
-        private readonly List<string> _streamImports;
+        private List<string> _streamImports;
 
         private readonly bool _interactive;
 
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index e8d05fad22b..1b0dbbd95d2 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -39,7 +39,7 @@ internal partial class LazyItemEvaluator<P, I, M, D>
 
         private int _nextElementOrder = 0;
 
-        private readonly Dictionary<string, LazyItemList> _itemLists = Traits.Instance.EscapeHatches.UseCaseSensitiveItemNames ?
+        private Dictionary<string, LazyItemList> _itemLists = Traits.Instance.EscapeHatches.UseCaseSensitiveItemNames ?
             new Dictionary<string, LazyItemList>() :
             new Dictionary<string, LazyItemList>(StringComparer.OrdinalIgnoreCase);
 
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index eeb1f56b498..82439026aa2 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -772,7 +772,7 @@ internal sealed class TaskItem :
             /// it is used to calculate built-in metadata. Otherwise,
             /// the current directory is used.
             /// </summary>
-            private readonly string _projectDirectory;
+            private string _projectDirectory;
 
             /// <summary>
             /// Whether the task item is immutable.
@@ -1918,7 +1918,7 @@ internal class ProjectItemInstanceFactory : IItemFactory<ProjectItemInstance, Pr
                 /// <summary>
                 /// The project to which item instances created by this factory will belong.
                 /// </summary>
-                private readonly ProjectInstance _project;
+                private ProjectInstance _project;
 
                 /// <summary>
                 /// Constructor not taking an item type.
@@ -2256,7 +2256,7 @@ internal class ProjectItemInstanceEqualityComparer : IEqualityComparer<ProjectIt
             /// <summary>
             /// The singleton comparer.
             /// </summary>
-            private static readonly ProjectItemInstanceEqualityComparer s_comparer = new ProjectItemInstanceEqualityComparer();
+            private static ProjectItemInstanceEqualityComparer s_comparer = new ProjectItemInstanceEqualityComparer();
 
             /// <summary>
             /// Constructor.
diff --git a/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs b/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs
index 531ba4b0706..2cb63c215e8 100644
--- a/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs
@@ -413,7 +413,7 @@ internal sealed class PropertyElementCollection : ConfigurationElementCollection
             /// property definition before, since the .NET configuration classes
             /// won't perform this check without respect for case.
             /// </summary>
-            private readonly Dictionary<string, string> previouslySeenPropertyNames = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+            private Dictionary<string, string> previouslySeenPropertyNames = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
 
             /// <summary>
             /// Creates a new element
