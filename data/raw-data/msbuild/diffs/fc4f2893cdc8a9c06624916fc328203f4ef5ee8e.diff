diff --git a/.vsts-dotnet.yml b/.vsts-dotnet.yml
index 3b7ca888c9d..ad33fce26d1 100644
--- a/.vsts-dotnet.yml
+++ b/.vsts-dotnet.yml
@@ -57,6 +57,9 @@ extends:
       # We generate SBOM ourselves, so don't need steps injected by 1ES.
       sbom:
         enabled: false
+      codeSignValidation:
+        enabled: true
+        break: true
 
     stages:
     - stage: build
@@ -176,10 +179,15 @@ extends:
             channelName: $(VisualStudio.ChannelName)
             manifests: $(VisualStudio.SetupManifestList)
             outputFolder: '$(Build.SourcesDirectory)\artifacts\VSSetup\$(BuildConfiguration)\Insertion'
-            bootstrapperCoreVersion:
           displayName: 'OptProf - Build VS bootstrapper'
           condition: succeeded()
 
+        - task: PowerShell@2
+          displayName: Delete the file
+          inputs:
+            targetType: 'inline'
+            script: Get-ChildItem -Path "$(Build.SourcesDirectory)\artifacts\VSSetup\$(BuildConfiguration)\Insertion\bootstrapper" -Recurse -Filter "vs_enterprise.exe" | Remove-Item -Verbose
+
         # Publish run settings
         - task: PowerShell@2
           inputs:
@@ -208,13 +216,6 @@ extends:
             ArtifactName: logs
           condition: succeededOrFailed()
 
-        - task: 1ES.PublishPipelineArtifact@1
-          displayName: 'Publish Artifact: bin'
-          inputs:
-            path: 'artifacts\bin'
-            artifactName: bin
-          condition: succeededOrFailed()
-
         # Publishes setup VSIXes to a drop.
         # Note: The insertion tool looks for the display name of this task in the logs.
         - task: 1ES.MicroBuildVstsDrop@1
diff --git a/NuGet.config b/NuGet.config
index d7187b4d64a..62eb43f0c28 100644
--- a/NuGet.config
+++ b/NuGet.config
@@ -1,4 +1,4 @@
-<?xml version="1.0" encoding="utf-8"?>
+ï»¿<?xml version="1.0" encoding="utf-8"?>
 <configuration>
   <packageSources>
     <clear />
diff --git a/documentation/specs/proposed/BuildCheck-Architecture.md b/documentation/specs/proposed/BuildCheck-Architecture.md
index f819a3d8d22..56579dc87a6 100644
--- a/documentation/specs/proposed/BuildCheck-Architecture.md
+++ b/documentation/specs/proposed/BuildCheck-Architecture.md
@@ -47,6 +47,30 @@ The BuildCheck infrastructure will be prepared to be available concurrently with
 * BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the worker node.
 * Presence in worker node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data proven to be useful should over time be exposed to `BuildEventArgs`)
 
+## Replay Mode
+
+Prerequisites: [MSBuild Replaying a Binary Log](../../wiki/Binary-Log.md#replaying-a-binary-log)
+
+When replaying a binary log, we can apply BuildCheck with help of `-analyze` switch:
+```
+> msbuild.exe msbuild.binlog -analyze
+```
+
+If BuildCheck is enabled, then the events from `BinaryLogReplayEventSource` and new events from BuildCheck are merged into the `IEventSource`, from which the loggers get events.
+
+```mermaid
+flowchart TD
+    replayEventSource[BinaryLogReplayEventSource\nreplayEventSource] --> mergedEventSource[IEventSource\nmergedEventSource]
+    replayEventSource[BinaryLogReplayEventSource\nreplayEventSource] --> BuildCheckBuildEventHandler[BuildCheckBuildEventHandler]
+    BuildCheckBuildEventHandler[BuildCheckBuildEventHandler] --> mergedEventSource[IEventSource\nmergedEventSource]
+    mergedEventSource[IEventSource\nmergedEventSource] --> loggers
+```
+1. The events from `BinaryLogReplayEventSource replayEventSource` are passed to the `IEventSource mergedEventSource` unchanged.
+2. The events from `BinaryLogReplayEventSource replayEventSource` are passed to `BuildCheckBuildEventHandler` in order to produce new events from BuildCheck.
+3. The `BuildCheckBuildEventHandler` uses the `IEventSource mergedEventSource` to invoke new events.
+
+`BuildCheckBuildEventHandler` is an internal infrastructural class and serves as an entry point for producing new events from BuildCheck.
+
 ## Handling the Distributed Model
 
 We want to get some benefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in worker nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achieve all goals from just scheduler node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).
diff --git a/documentation/specs/proposed/BuildCheck.md b/documentation/specs/proposed/BuildCheck.md
index 4fa78061b78..ea5c4f80376 100644
--- a/documentation/specs/proposed/BuildCheck.md
+++ b/documentation/specs/proposed/BuildCheck.md
@@ -75,15 +75,13 @@ Majority of following cases are included in appropriate context within the scena
 ```ini
 # I expect this to apply to all projects within my solution, but not to projects which are not part of the solution
 [ContosoFrontEnd.sln]
-build_check.BC0101.IsEnabled=true
 build_check.BC0101.Severity=warning
 ```
 * Attributing `.editorconfig` configurations to lower granularity than whole projects. E.g.:
 ```ini
 # I expect this to apply only to a scope of the imported file. Or possibly I expect this to apply to all projects importing this project.
 [ContosoCommonImport.proj]
-buildcheck.BC0101.IsEnabled=true
-buildcheck.BC0101.Severity=warning
+build_check.BC0101.Severity=warning
 ```
 * Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hierarchy of particular project file).
 * CodeFixes are not supported in V1
diff --git a/eng/Signing.props b/eng/Signing.props
index 3e8e6dbf5cc..e542c633f4a 100644
--- a/eng/Signing.props
+++ b/eng/Signing.props
@@ -2,6 +2,8 @@
   <ItemGroup>
     <ItemsToSign Include="$(VisualStudioSetupInsertionPath)Microsoft.Build.UnGAC.exe" />
 
+    <ItemsToSign Include="$(ArtifactsDir)\xsd\Update-MSBuildXsds.ps1" />
+
     <FileSignInfo Include="RuntimeContracts.dll" CertificateName="3PartySHA2" />
   </ItemGroup>
 
diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index dc70b9181e1..37bf1602547 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -87,13 +87,13 @@
       <Sha>73f0850939d96131c28cf6ea6ee5aacb4da0083a</Sha>
       <SourceBuild RepoName="xliff-tasks" ManagedOnly="true" />
     </Dependency>
-    <Dependency Name="NuGet.Build.Tasks" Version="6.11.0-rc.101">
+    <Dependency Name="NuGet.Build.Tasks" Version="6.11.0-rc.122">
       <Uri>https://github.com/nuget/nuget.client</Uri>
-      <Sha>20f05435be385abfe74737b6433dc80fd3b3b504</Sha>
+      <Sha>c0d441fc5e99e6765c9e0b2f77de162b9866b305</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.11.0-3.24313.9">
+    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.11.0-3.24329.1">
       <Uri>https://github.com/dotnet/roslyn</Uri>
-      <Sha>0b8371953e61f6179f39f1d62ebbd6a251f335e0</Sha>
+      <Sha>92051d4c24bc13ff58232104a647910bf22cd105</Sha>
       <SourceBuild RepoName="roslyn" ManagedOnly="true" />
     </Dependency>
     <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="8.0.0-beta.24311.3">
diff --git a/eng/Versions.props b/eng/Versions.props
index 3a5832c57f5..3e55bcad1c1 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -51,8 +51,8 @@
     <MicrosoftDotNetXUnitExtensionsVersion>8.0.0-beta.24311.3</MicrosoftDotNetXUnitExtensionsVersion>
     <MicrosoftExtensionsDependencyModelVersion>7.0.0</MicrosoftExtensionsDependencyModelVersion>
     <MicrosoftIORedistVersion>6.0.0</MicrosoftIORedistVersion>
-    <MicrosoftNetCompilersToolsetVersion>4.11.0-3.24313.9</MicrosoftNetCompilersToolsetVersion>
-    <NuGetBuildTasksVersion>6.11.0-rc.101</NuGetBuildTasksVersion>
+    <MicrosoftNetCompilersToolsetVersion>4.11.0-3.24329.1</MicrosoftNetCompilersToolsetVersion>
+    <NuGetBuildTasksVersion>6.11.0-rc.122</NuGetBuildTasksVersion>
     <SystemRuntimeCompilerServicesUnsafeVersion>6.0.0</SystemRuntimeCompilerServicesUnsafeVersion>
   </PropertyGroup>
   <Target Name="OverrideArcadeFileVersion" AfterTargets="_InitializeAssemblyVersion">
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs
index e2bb6680df1..b994f4ceb2c 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs
@@ -11,8 +11,6 @@
 using Microsoft.Build.Unittest;
 using Xunit;
 
-#nullable disable
-
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class BuildRequestEntry_Tests
@@ -23,7 +21,7 @@ public class BuildRequestEntry_Tests
         public void TestConstructorGood()
         {
             BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
-            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
+            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string?>(), "foo", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
 
@@ -36,7 +34,7 @@ public void TestConstructorBad()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequestEntry entry = new BuildRequestEntry(null, null);
+                BuildRequestEntry entry = new BuildRequestEntry(null!, null!);
             });
         }
         [Fact]
@@ -44,7 +42,7 @@ public void TestSimpleStateProgression()
         {
             // Start in Ready
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string?>(), "foo", Array.Empty<string>(), null), "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
             Assert.Equal(BuildRequestEntryState.Ready, entry.State);
             Assert.Equal(entry.Request, request);
@@ -92,7 +90,7 @@ public void TestSimpleStateProgression()
         public void TestResolveConfiguration()
         {
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
+            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string?>(), "foo", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
 
@@ -114,7 +112,7 @@ public void TestResolveConfiguration()
         public void TestMultipleWaitingRequests()
         {
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
+            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string?>(), "foo", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
 
@@ -144,7 +142,7 @@ public void TestMultipleWaitingRequests()
         public void TestMixedWaitingRequests()
         {
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string?>(), "foo", Array.Empty<string>(), null), "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
             Assert.Equal(BuildRequestEntryState.Ready, entry.State);
 
@@ -181,7 +179,7 @@ public void TestNoReadyToWaiting()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
+                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string?>(), "foo", Array.Empty<string>(), null);
                 BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
                 BuildRequestEntry entry = new BuildRequestEntry(request, config);
                 Assert.Equal(BuildRequestEntryState.Ready, entry.State);
@@ -197,7 +195,7 @@ public void TestNoReadyToComplete()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
+                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string?>(), "foo", Array.Empty<string>(), null);
                 BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
                 BuildRequestEntry entry = new BuildRequestEntry(request, config);
                 Assert.Equal(BuildRequestEntryState.Ready, entry.State);
@@ -214,7 +212,7 @@ public void TestNoWaitingToComplete()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
+                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string?>(), "foo", Array.Empty<string>(), null);
                 BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
                 BuildRequestEntry entry = new BuildRequestEntry(request, config);
                 Assert.Equal(BuildRequestEntryState.Ready, entry.State);
@@ -238,7 +236,7 @@ public void TestNoCompleteToWaiting()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
+                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string?>(), "foo", Array.Empty<string>(), null), "2.0");
                 BuildRequestEntry entry = new BuildRequestEntry(request, config);
                 Assert.Equal(BuildRequestEntryState.Ready, entry.State);
 
@@ -258,7 +256,7 @@ public void TestNoCompleteToWaiting()
         public void TestResultsWithNoMatch1()
         {
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string?>(), "foo", Array.Empty<string>(), null), "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
             Assert.Equal(BuildRequestEntryState.Ready, entry.State);
 
diff --git a/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs b/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
index 02c1179e863..dec50951300 100644
--- a/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
@@ -14,8 +14,6 @@
 using Xunit;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
-#nullable disable
-
 namespace Microsoft.Build.UnitTests.BackEnd
 {
     public class BuildResult_Tests
@@ -39,14 +37,14 @@ public void Clone()
         {
             BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result1 = new BuildResult(request);
-            result1.ResultsByTarget.Add("FOO", BuildResultUtilities.GetEmptySucceedingTargetResult());
-            Assert.True(result1.ResultsByTarget.ContainsKey("foo")); // test comparer
+            result1.ResultsByTarget?.Add("FOO", BuildResultUtilities.GetEmptySucceedingTargetResult());
+            Assert.True(result1.ResultsByTarget?.ContainsKey("foo")); // test comparer
 
             BuildResult result2 = result1.Clone();
 
-            result1.ResultsByTarget.Add("BAR", BuildResultUtilities.GetEmptySucceedingTargetResult());
-            Assert.True(result1.ResultsByTarget.ContainsKey("foo")); // test comparer
-            Assert.True(result1.ResultsByTarget.ContainsKey("bar"));
+            result1.ResultsByTarget?.Add("BAR", BuildResultUtilities.GetEmptySucceedingTargetResult());
+            Assert.True(result1.ResultsByTarget?.ContainsKey("foo")); // test comparer
+            Assert.True(result1.ResultsByTarget?.ContainsKey("bar"));
 
             Assert.Equal(result1.SubmissionId, result2.SubmissionId);
             Assert.Equal(result1.ConfigurationId, result2.ConfigurationId);
@@ -54,16 +52,16 @@ public void Clone()
             Assert.Equal(result1.ParentGlobalRequestId, result2.ParentGlobalRequestId);
             Assert.Equal(result1.NodeRequestId, result2.NodeRequestId);
             Assert.Equal(result1.CircularDependency, result2.CircularDependency);
-            Assert.Equal(result1.ResultsByTarget["foo"], result2.ResultsByTarget["foo"]);
+            Assert.Equal(result1.ResultsByTarget?["foo"], result2.ResultsByTarget?["foo"]);
             Assert.Equal(result1.OverallResult, result2.OverallResult);
         }
 
         [Fact]
         public void TestConstructorBad()
         {
-            Assert.Throws<InternalErrorException>(() =>
+            Assert.Throws<NullReferenceException>(() =>
             {
-                BuildResult result = new BuildResult(null);
+                BuildResult result = new BuildResult(null!);
             });
         }
         [Fact]
@@ -163,7 +161,7 @@ public void TestAddResultsInvalid1()
             {
                 BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
-                result.AddResultsForTarget(null, BuildResultUtilities.GetEmptySucceedingTargetResult());
+                result.AddResultsForTarget(null!, BuildResultUtilities.GetEmptySucceedingTargetResult());
             });
         }
 
@@ -174,7 +172,7 @@ public void TestAddResultsInvalid2()
             {
                 BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
-                result.AddResultsForTarget("foo", null);
+                result.AddResultsForTarget("foo", null!);
             });
         }
 
@@ -185,7 +183,7 @@ public void TestAddResultsInvalid3()
             {
                 BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
-                result.AddResultsForTarget(null, BuildResultUtilities.GetEmptySucceedingTargetResult());
+                result.AddResultsForTarget(null!, BuildResultUtilities.GetEmptySucceedingTargetResult());
             });
         }
         [Fact]
@@ -222,7 +220,7 @@ public void TestMergeResultsBad1()
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
-                result.MergeResults(null);
+                result.MergeResults(null!);
             });
         }
 
@@ -258,24 +256,25 @@ public void TestEnumerator()
         {
             BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
-            int countFound = 0;
-            foreach (KeyValuePair<string, TargetResult> resultPair in result.ResultsByTarget)
-            {
-                countFound++;
-            }
+            int countFound = result.ResultsByTarget?.Count ?? 0;
             Assert.Equal(0, countFound);
 
             result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
             bool foundFoo = false;
             countFound = 0;
-            foreach (KeyValuePair<string, TargetResult> resultPair in result.ResultsByTarget)
+            if (result.ResultsByTarget != null)
             {
-                if (resultPair.Key == "foo")
+                foreach (KeyValuePair<string, TargetResult> resultPair in result.ResultsByTarget)
                 {
-                    foundFoo = true;
+                    if (resultPair.Key == "foo")
+                    {
+                        foundFoo = true;
+                    }
+
+                    countFound++;
                 }
-                countFound++;
             }
+
             Assert.Equal(1, countFound);
             Assert.True(foundFoo);
 
@@ -283,20 +282,26 @@ public void TestEnumerator()
             foundFoo = false;
             bool foundBar = false;
             countFound = 0;
-            foreach (KeyValuePair<string, TargetResult> resultPair in result.ResultsByTarget)
+            if (result.ResultsByTarget != null)
             {
-                if (resultPair.Key == "foo")
-                {
-                    Assert.False(foundFoo);
-                    foundFoo = true;
-                }
-                if (resultPair.Key == "bar")
+                foreach (KeyValuePair<string, TargetResult> resultPair in result.ResultsByTarget)
                 {
-                    Assert.False(foundBar);
-                    foundBar = true;
+                    if (resultPair.Key == "foo")
+                    {
+                        Assert.False(foundFoo);
+                        foundFoo = true;
+                    }
+
+                    if (resultPair.Key == "bar")
+                    {
+                        Assert.False(foundBar);
+                        foundBar = true;
+                    }
+
+                    countFound++;
                 }
-                countFound++;
             }
+
             Assert.Equal(2, countFound);
             Assert.True(foundFoo);
             Assert.True(foundBar);
@@ -322,12 +327,12 @@ public void TestTranslation()
             ((ITranslatable)result).Translate(TranslationHelpers.GetWriteTranslator());
             INodePacket packet = BuildResult.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
 
-            BuildResult deserializedResult = packet as BuildResult;
+            BuildResult deserializedResult = (packet as BuildResult)!;
 
             Assert.Equal(result.ConfigurationId, deserializedResult.ConfigurationId);
             Assert.True(TranslationHelpers.CompareCollections(result.DefaultTargets, deserializedResult.DefaultTargets, StringComparer.Ordinal));
             Assert.True(TranslationHelpers.CompareExceptions(result.Exception, deserializedResult.Exception, out string diffReason), diffReason);
-            Assert.Equal(result.Exception.Message, deserializedResult.Exception.Message);
+            Assert.Equal(result.Exception?.Message, deserializedResult.Exception?.Message);
             Assert.Equal(result.GlobalRequestId, deserializedResult.GlobalRequestId);
             Assert.True(TranslationHelpers.CompareCollections(result.InitialTargets, deserializedResult.InitialTargets, StringComparer.Ordinal));
             Assert.Equal(result.NodeRequestId, deserializedResult.NodeRequestId);
diff --git a/src/Build.UnitTests/BackEnd/MockHost.cs b/src/Build.UnitTests/BackEnd/MockHost.cs
index 1ff79810e54..b4c1306c1b4 100644
--- a/src/Build.UnitTests/BackEnd/MockHost.cs
+++ b/src/Build.UnitTests/BackEnd/MockHost.cs
@@ -205,6 +205,9 @@ public IBuildComponent GetComponent(BuildComponentType type)
             };
         }
 
+        public TComponent GetComponent<TComponent>(BuildComponentType type) where TComponent : IBuildComponent
+            => (TComponent) GetComponent(type);
+
         /// <summary>
         /// Register a new build component factory with the host.
         /// </summary>
@@ -224,25 +227,5 @@ public INodePacket DeserializePacket(NodePacketType type, byte[] serializedPacke
         }
 
         #endregion
-
-        #region IBuildComponent Members
-
-        /// <summary>
-        /// Initialize this component using the provided host
-        /// </summary>
-        public void InitializeComponent(IBuildComponentHost host)
-        {
-            throw new NotImplementedException();
-        }
-
-        /// <summary>
-        /// Clean up any state
-        /// </summary>
-        public void ShutdownComponent()
-        {
-            throw new NotImplementedException();
-        }
-
-        #endregion
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index a60e662d532..65c535fc0f8 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
@@ -643,6 +644,9 @@ public void LogIncludeFile(BuildEventContext buildEventContext, string filePath)
             throw new NotImplementedException();
         }
 
+        public void InitializeComponent(IBuildComponentHost host) => throw new NotImplementedException();
+        public void ShutdownComponent() => throw new NotImplementedException();
+
         #endregion
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs b/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
index 3d29df4b00a..32f6b0e3093 100644
--- a/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodeEndpointInProc_Tests.cs
@@ -81,6 +81,8 @@ public IBuildComponent GetComponent(BuildComponentType type)
                 throw new NotImplementedException();
             }
 
+            public TComponent GetComponent<TComponent>(BuildComponentType type) where TComponent : IBuildComponent => throw new NotImplementedException("Not expected to be used.");
+
             public void RegisterFactory(BuildComponentType type, BuildComponentFactoryDelegate factory)
             {
             }
diff --git a/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
index 8f436af4e0a..99aad984e34 100644
--- a/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
@@ -356,16 +356,16 @@ internal void SetNewBuildRequests(FullyQualifiedBuildRequest[] requests)
 
         #region ITargetBuilder Members
 
-        public Task<BuildResult> BuildTargets(ProjectLoggingContext loggingContext, BuildRequestEntry entry, IRequestBuilderCallback callback, string[] targets, Lookup baseLookup, CancellationToken cancellationToken)
+        public Task<BuildResult> BuildTargets(ProjectLoggingContext loggingContext, BuildRequestEntry entry, IRequestBuilderCallback callback, (string name, TargetBuiltReason reason)[] targets, Lookup baseLookup, CancellationToken cancellationToken)
         {
             _requestBuilderCallback = callback;
 
             if (cancellationToken.WaitHandle.WaitOne(1500))
             {
                 BuildResult result = new BuildResult(entry.Request);
-                foreach (string target in targets)
+                foreach ((string name, TargetBuiltReason reason) target in targets)
                 {
-                    result.AddResultsForTarget(target, BuildResultUtilities.GetEmptyFailingTargetResult());
+                    result.AddResultsForTarget(target.name, BuildResultUtilities.GetEmptyFailingTargetResult());
                 }
                 return Task<BuildResult>.FromResult(result);
             }
@@ -388,9 +388,9 @@ public Task<BuildResult> BuildTargets(ProjectLoggingContext loggingContext, Buil
                 if (cancellationToken.WaitHandle.WaitOne(1500))
                 {
                     BuildResult result = new BuildResult(entry.Request);
-                    foreach (string target in targets)
+                    foreach ((string name, TargetBuiltReason reason) target in targets)
                     {
-                        result.AddResultsForTarget(target, BuildResultUtilities.GetEmptyFailingTargetResult());
+                        result.AddResultsForTarget(target.name, BuildResultUtilities.GetEmptyFailingTargetResult());
                     }
                     return Task<BuildResult>.FromResult(result);
                 }
diff --git a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
index 8807b4c2979..fb9e7d88667 100644
--- a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using System.Threading;
 using System.Threading.Tasks;
 using System.Xml;
@@ -100,9 +101,10 @@ public void TestSimpleBuild()
             // The Empty target has no inputs or outputs.
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Empty" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Empty", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             Assert.True(result.HasResultsForTarget("Empty"));
             Assert.Equal(TargetResultCode.Success, result["Empty"].ResultCode);
             Assert.Empty(result["Empty"].Items);
@@ -120,8 +122,9 @@ public void TestDependencyBuild()
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
 
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Baz" }), cache[1]);
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            (string name, TargetBuiltReason reason)[] target = { ("Baz", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
 
             // The result returned from the builder includes only those for the specified targets.
             Assert.True(result.HasResultsForTarget("Baz"));
@@ -145,8 +148,9 @@ public void TestDependencyBuildWithSkip()
             // DepSkip depends on Skip (which skips) but should succeed itself.
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "DepSkip" }), cache[1]);
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            (string name, TargetBuiltReason reason)[] target = { ("DepSkip", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             Assert.True(result.HasResultsForTarget("DepSkip"));
             Assert.False(result.HasResultsForTarget("Skip"));
             Assert.Equal(TargetResultCode.Success, result["DepSkip"].ResultCode);
@@ -173,8 +177,9 @@ public void TestDependencyBuildWithError()
             taskBuilder.FailTaskNumber = 3; // Succeed on Foo's one task, and Error's first task, and fail the second.
 
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "DepError" }), cache[1]);
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            (string name, TargetBuiltReason reason)[] target = { ("DepError", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             Assert.True(result.HasResultsForTarget("DepError"));
             Assert.False(result.HasResultsForTarget("Foo"));
             Assert.False(result.HasResultsForTarget("Skip"));
@@ -357,9 +362,10 @@ public void TestLegacyCallTarget()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "CallTarget", "Foo2Target", "FooTarget", "GooTarget" });
         }
 
@@ -496,9 +502,10 @@ public void TestBeforeTargetsEmpty()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildTask" });
         }
 
@@ -521,9 +528,10 @@ public void TestBeforeTargetsSingle()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BeforeTask", "BuildTask" });
         }
 
@@ -546,9 +554,10 @@ public void TestBeforeTargetsEscaped()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build;Me" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build;Me", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BeforeTask", "BuildTask" });
         }
 
@@ -575,9 +584,10 @@ public void TestBeforeTargetsSingleWithError()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BeforeTask", "BuildTask" });
         }
 
@@ -609,9 +619,10 @@ public void TestBeforeTargetsSingleWithErrorAndParent()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BeforeTask", "BuildTask", "Error" });
         }
 
@@ -640,9 +651,10 @@ public void TestBeforeTargetsWithTwoReferringToOne()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BeforeTask", "BeforeTask2", "BuildTask" });
         }
 
@@ -670,9 +682,10 @@ public void TestBeforeTargetsWithOneReferringToTwo()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Foo" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Foo", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BeforeTask", "FooTask" });
         }
 
@@ -695,9 +708,10 @@ public void TestBeforeTargetsSkip()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BeforeTask" });
         }
 
@@ -730,9 +744,10 @@ public void TestBeforeTargetsDependencyOrdering()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildDepTask", "BeforeDepTask", "BeforeTask", "BuildTask" });
         }
 
@@ -755,9 +770,10 @@ public void TestAfterTargetsEmpty()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) }
+;            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildTask" });
             Assert.False(result.ResultsByTarget["Build"].AfterTargetsHaveFailed);
         }
@@ -781,9 +797,10 @@ public void TestAfterTargetsSkip()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "AfterTask" });
             Assert.False(result.ResultsByTarget["Build"].AfterTargetsHaveFailed);
         }
@@ -810,9 +827,10 @@ public void TestAfterTargetsSingleWithError()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildTask" });
             Assert.False(result.ResultsByTarget["Build"].AfterTargetsHaveFailed);
         }
@@ -853,9 +871,10 @@ public void TestAfterTargetsSingleWithErrorAndParent()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "PostBuild" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("PostBuild", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildTask", "AfterTask", "Error2" });
             Assert.False(result.ResultsByTarget["PostBuild"].AfterTargetsHaveFailed);
         }
@@ -879,9 +898,10 @@ public void TestAfterTargetsSingle()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildTask", "AfterTask" });
             Assert.False(result.ResultsByTarget["Build"].AfterTargetsHaveFailed);
         }
@@ -905,9 +925,10 @@ public void TestAfterTargetsEscaped()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build;Me" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build;Me", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildTask", "AfterTask" });
             Assert.False(result.ResultsByTarget["Build;Me"].AfterTargetsHaveFailed);
         }
@@ -936,9 +957,10 @@ public void TestAfterTargetsWithTwoReferringToOne()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildTask", "AfterTask", "AfterTask2" });
             Assert.False(result.ResultsByTarget["Build"].AfterTargetsHaveFailed);
         }
@@ -959,7 +981,7 @@ public void TestAfterTargetsWithFailure()
 </Target>
 ";
 
-            BuildResult result = BuildSimpleProject(projectBody, new string[] { "Build" }, failTaskNumber: 2 /* Fail on After */);
+            BuildResult result = BuildSimpleProject(projectBody, new (string name, TargetBuiltReason reason)[] { ("Build", TargetBuiltReason.None) }, failTaskNumber: 2 /* Fail on After */);
             result.ResultsByTarget["Build"].ResultCode.ShouldBe(TargetResultCode.Success);
             result.ResultsByTarget["Build"].AfterTargetsHaveFailed.ShouldBe(true);
         }
@@ -984,7 +1006,7 @@ public void TestAfterTargetsWithTransitiveFailure()
 </Target>
 ";
 
-            BuildResult result = BuildSimpleProject(projectBody, new string[] { "Build" }, failTaskNumber: 3 /* Fail on After2 */);
+            BuildResult result = BuildSimpleProject(projectBody, new (string name, TargetBuiltReason reason)[] { ("Build", TargetBuiltReason.None) }, failTaskNumber: 3 /* Fail on After2 */);
             result.ResultsByTarget["Build"].ResultCode.ShouldBe(TargetResultCode.Success);
             result.ResultsByTarget["Build"].AfterTargetsHaveFailed.ShouldBe(true);
         }
@@ -1003,7 +1025,7 @@ public void TestAfterTargetsWithCycleDoesNotHang()
 <Target Name='After2' AfterTargets='After1' />
 ";
 
-            BuildResult result = BuildSimpleProject(projectBody, new string[] { "Build" }, failTaskNumber: int.MaxValue /* no task failure needed here */);
+            BuildResult result = BuildSimpleProject(projectBody, new (string name, TargetBuiltReason reason)[] { ("Build", TargetBuiltReason.None) }, failTaskNumber: int.MaxValue /* no task failure needed here */);
             result.ResultsByTarget["Build"].ResultCode.ShouldBe(TargetResultCode.Success);
             result.ResultsByTarget["Build"].AfterTargetsHaveFailed.ShouldBe(false);
         }
@@ -1033,9 +1055,10 @@ public void TestAfterTargetsWithOneReferringToTwo()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Foo" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Foo", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "FooTask", "AfterTask" });
         }
 
@@ -1067,9 +1090,10 @@ public void TestAfterTargetsWithDependencyOrdering()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildDepTask", "BuildTask", "AfterDepTask", "AfterTask" });
         }
 
@@ -1117,9 +1141,10 @@ public void TestComplexOrdering()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildDepTask", "BeforeDepDepTask", "BeforeDepTask", "BeforeTask", "BuildTask", "AfterDepDepTask", "AfterDepTask", "AfterTask" });
         }
 
@@ -1176,9 +1201,10 @@ public void TestComplexOrdering2()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildDepTask", "BeforeDepDepTask", "BeforeBeforeDepTask", "AfterBeforeBeforeDepTask", "BeforeDepTask", "BeforeTask", "AfterBeforeDepDepTask", "AfterBeforeDepTask", "AfterBeforeTask", "BuildTask" });
         }
 
@@ -1217,9 +1243,10 @@ public void TestBeforeAndAfterWithErrorTargets()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildTask", "BeforeErrorTargetTask", "ErrorTargetTask", "AfterErrorTargetTask" });
             Assert.False(result.ResultsByTarget["Build"].AfterTargetsHaveFailed);
         }
@@ -1262,9 +1289,10 @@ public void TestBeforeAndAfterOverrides()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BeforeTask", "BuildDepTask", "AfterTask", "BuildTask" });
         }
 
@@ -1292,9 +1320,10 @@ public void TestSkippingBeforeAndAfterTargets()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
             AssertTaskExecutionOrder(new string[] { "BuildTask" });
         }
 
@@ -1365,10 +1394,11 @@ public void TestCancelWithNoEntriesAfterBuild()
 
             TargetBuilder builder = (TargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
             using (CancellationTokenSource source = new CancellationTokenSource())
             {
-                BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), source.Token).Result;
+                BuildResult result = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), source.Token).Result;
                 AssertTaskExecutionOrder(new string[] { "BuildTask" });
 
                 // This simply should not fail.
@@ -1397,9 +1427,10 @@ public void SkippedTargetWithFailedDependenciesStopsBuild()
             taskBuilder.FailTaskNumber = 1;
 
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new[] { "Build" }), cache[1]);
+            (string name, TargetBuiltReason reason)[] target = { ("Build", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target), cache[1]);
 
-            var buildResult = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            var buildResult = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
 
             IResultsCache resultsCache = (IResultsCache)_host.GetComponent(BuildComponentType.ResultsCache);
             Assert.True(resultsCache.GetResultForRequest(entry.Request).HasResultsForTarget("Build"));
@@ -1423,8 +1454,9 @@ public void SkipNonexistentTargetsDoesNotExecuteOrCacheTargetResult()
             taskBuilder.FailTaskNumber = 1;
 
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, new[] { "NotFound" }, BuildRequestDataFlags.SkipNonexistentTargets), cache[1]);
-            var buildResult = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            (string name, TargetBuiltReason reason)[] target = { ("NotFound", TargetBuiltReason.None) };
+            BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, target, BuildRequestDataFlags.SkipNonexistentTargets), cache[1]);
+            var buildResult = builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, target, CreateStandardLookup(project), CancellationToken.None).Result;
 
             IResultsCache resultsCache = (IResultsCache)_host.GetComponent(BuildComponentType.ResultsCache);
 
@@ -1525,9 +1557,9 @@ private void AssertTaskExecutionOrder(string[] tasks)
         /// <summary>
         /// Creates a new build request
         /// </summary>
-        private BuildRequest CreateNewBuildRequest(int configurationId, string[] targets, BuildRequestDataFlags flags = BuildRequestDataFlags.None)
+        private BuildRequest CreateNewBuildRequest(int configurationId, (string name, TargetBuiltReason reason)[] targets, BuildRequestDataFlags flags = BuildRequestDataFlags.None)
         {
-            return new BuildRequest(1 /* submissionId */, _nodeRequestId++, configurationId, targets, null, BuildEventContext.Invalid, null, flags);
+            return new BuildRequest(1 /* submissionId */, _nodeRequestId++, configurationId, targets.Select(t => t.name).ToArray(), null, BuildEventContext.Invalid, null, flags);
         }
 
         /// <summary>
@@ -1668,7 +1700,7 @@ private ProjectLoggingContext GetProjectLoggingContext(BuildRequestEntry entry)
         /// <param name="targets">The targets to build.</param>
         /// <param name="failTaskNumber">The task ordinal to fail on.</param>
         /// <returns>The result of building the specified project/tasks.</returns>
-        private BuildResult BuildSimpleProject(string projectBody, string[] targets, int failTaskNumber)
+        private BuildResult BuildSimpleProject(string projectBody, (string name, TargetBuiltReason reason)[] targets, int failTaskNumber)
         {
             ProjectInstance project = CreateTestProject(projectBody);
 
@@ -1679,7 +1711,7 @@ private BuildResult BuildSimpleProject(string projectBody, string[] targets, int
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
             BuildRequestEntry entry = new BuildRequestEntry(CreateNewBuildRequest(1, targets), cache[1]);
 
-            return builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, entry.Request.Targets.ToArray(), CreateStandardLookup(project), CancellationToken.None).Result;
+            return builder.BuildTargets(GetProjectLoggingContext(entry), entry, this, targets, CreateStandardLookup(project), CancellationToken.None).Result;
         }
 
         /// <summary>
@@ -1825,6 +1857,9 @@ public IBuildComponent GetComponent(BuildComponentType type)
                 };
             }
 
+            public TComponent GetComponent<TComponent>(BuildComponentType type) where TComponent : IBuildComponent
+                => (TComponent)GetComponent(type);
+
             /// <summary>
             /// Registers a component factory
             /// </summary>
@@ -1833,27 +1868,6 @@ public void RegisterFactory(BuildComponentType type, BuildComponentFactoryDelega
             }
 
             #endregion
-
-            #region IBuildComponent Members
-
-            /// <summary>
-            /// Sets the component host
-            /// </summary>
-            /// <param name="host">The component host</param>
-            public void InitializeComponent(IBuildComponentHost host)
-            {
-                throw new NotImplementedException();
-            }
-
-            /// <summary>
-            /// Shuts down the component
-            /// </summary>
-            public void ShutdownComponent()
-            {
-                throw new NotImplementedException();
-            }
-
-            #endregion
         }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
index 3dea23f8e46..b2cb7cd17bd 100644
--- a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
@@ -1327,6 +1327,9 @@ public IBuildComponent GetComponent(BuildComponentType type)
                 };
             }
 
+            public TComponent GetComponent<TComponent>(BuildComponentType type) where TComponent : IBuildComponent
+                => (TComponent)GetComponent(type);
+
             /// <summary>
             /// Register a component factory.
             /// </summary>
@@ -1335,27 +1338,6 @@ public void RegisterFactory(BuildComponentType type, BuildComponentFactoryDelega
             }
 
             #endregion
-
-            #region IBuildComponent Members
-
-            /// <summary>
-            /// Sets the component host
-            /// </summary>
-            /// <param name="host">The component host</param>
-            public void InitializeComponent(IBuildComponentHost host)
-            {
-                throw new NotImplementedException();
-            }
-
-            /// <summary>
-            /// Shuts down the component
-            /// </summary>
-            public void ShutdownComponent()
-            {
-                throw new NotImplementedException();
-            }
-
-            #endregion
         }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
index c4a3d2bda19..68a8dea7eb0 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
@@ -1384,6 +1384,9 @@ public IBuildComponent GetComponent(BuildComponentType type)
                 };
             }
 
+            public TComponent GetComponent<TComponent>(BuildComponentType type) where TComponent : IBuildComponent
+                => (TComponent)GetComponent(type);
+
             /// <summary>
             /// Register a component factory.
             /// </summary>
@@ -1392,27 +1395,6 @@ public void RegisterFactory(BuildComponentType type, BuildComponentFactoryDelega
             }
 
             #endregion
-
-            #region IBuildComponent Members
-
-            /// <summary>
-            /// Sets the component host
-            /// </summary>
-            /// <param name="host">The component host</param>
-            public void InitializeComponent(IBuildComponentHost host)
-            {
-                throw new NotImplementedException();
-            }
-
-            /// <summary>
-            /// Shuts down the component
-            /// </summary>
-            public void ShutdownComponent()
-            {
-                throw new NotImplementedException();
-            }
-
-            #endregion
         }
     }
 }
diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index 201b74d310b..022ed16ed2c 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -843,7 +843,7 @@ private void AssertBuildResultForCacheHit(
             // If it's not a cache result by proxy targets then the cache constructed the target results by hand and only the real target result
             // exists in the BuildResult.
 
-            var targetResult = buildResult.ResultsByTarget["Build"];
+            var targetResult = buildResult.ResultsByTarget!["Build"];
 
             targetResult.Items.ShouldHaveSingleItem();
             var itemResult = targetResult.Items.First();
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 476f5de6793..38922b2de85 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -40,8 +40,6 @@
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 
-#nullable disable
-
 namespace Microsoft.Build.Execution
 {
     /// <summary>
@@ -68,7 +66,7 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// <summary>
         /// The singleton instance for the BuildManager.
         /// </summary>
-        private static BuildManager s_singletonInstance;
+        private static BuildManager? s_singletonInstance;
 
         /// <summary>
         /// The next build id;
@@ -85,37 +83,37 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// <summary>
         /// The cache for build request configurations.
         /// </summary>
-        private IConfigCache _configCache;
+        private IConfigCache? _configCache;
 
         /// <summary>
         /// The cache for build results.
         /// </summary>
-        private IResultsCache _resultsCache;
+        private IResultsCache? _resultsCache;
 
         /// <summary>
         /// The object responsible for creating and managing nodes.
         /// </summary>
-        private INodeManager _nodeManager;
+        private INodeManager? _nodeManager;
 
         /// <summary>
         /// The object responsible for creating and managing task host nodes.
         /// </summary>
-        private INodeManager _taskHostNodeManager;
+        private INodeManager? _taskHostNodeManager;
 
         /// <summary>
         /// The object which determines which projects to build, and where.
         /// </summary>
-        private IScheduler _scheduler;
+        private IScheduler? _scheduler;
 
         /// <summary>
         /// The node configuration to use for spawning new nodes.
         /// </summary>
-        private NodeConfiguration _nodeConfiguration;
+        private NodeConfiguration? _nodeConfiguration;
 
         /// <summary>
         /// Any exception which occurs on a logging thread will go here.
         /// </summary>
-        private ExceptionDispatchInfo _threadException;
+        private ExceptionDispatchInfo? _threadException;
 
         /// <summary>
         /// Set of active nodes in the system.
@@ -125,7 +123,7 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// <summary>
         /// Event signalled when all nodes have shutdown.
         /// </summary>
-        private AutoResetEvent _noNodesActiveEvent;
+        private AutoResetEvent? _noNodesActiveEvent;
 
         /// <summary>
         /// Mapping of nodes to the configurations they know about.
@@ -140,7 +138,7 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// <summary>
         /// CancellationTokenSource to use for async operations. This will be cancelled when we are shutting down to cancel any async operations.
         /// </summary>
-        private CancellationTokenSource _executionCancellationTokenSource;
+        private CancellationTokenSource? _executionCancellationTokenSource;
 
         /// <summary>
         /// The current state of the BuildManager.
@@ -155,7 +153,7 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// <summary>
         /// The parameters with which the build was started.
         /// </summary>
-        private BuildParameters _buildParameters;
+        private BuildParameters? _buildParameters;
 
         /// <summary>
         /// The current pending and active submissions.
@@ -163,20 +161,12 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// <remarks>
         /// { submissionId, BuildSubmission }
         /// </remarks>
-        private readonly Dictionary<int, BuildSubmission> _buildSubmissions;
-
-        /// <summary>
-        /// The current pending and active graph build submissions.
-        /// </summary>
-        /// <remarks>
-        /// { submissionId, GraphBuildSubmission }
-        /// </remarks>
-        private readonly Dictionary<int, GraphBuildSubmission> _graphBuildSubmissions;
+        private readonly Dictionary<int, BuildSubmissionBase> _buildSubmissions;
 
         /// <summary>
         /// Event signalled when all build submissions are complete.
         /// </summary>
-        private AutoResetEvent _noActiveSubmissionsEvent;
+        private AutoResetEvent? _noActiveSubmissionsEvent;
 
         /// <summary>
         /// The overall success of the build.
@@ -243,7 +233,7 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// <summary>
         /// The worker queue.
         /// </summary>
-        private ActionBlock<Action> _workQueue;
+        private ActionBlock<Action>? _workQueue;
 
         /// <summary>
         /// Flag indicating we have disposed.
@@ -258,15 +248,15 @@ public class BuildManager : INodePacketHandler, IBuildComponentHost, IDisposable
         /// <summary>
         /// Messages to be logged
         /// </summary>
-        private IEnumerable<DeferredBuildMessage> _deferredBuildMessages;
+        private IEnumerable<DeferredBuildMessage>? _deferredBuildMessages;
 
         /// <summary>
         /// Build telemetry to be send when this build ends.
         /// <remarks>Could be null</remarks>
         /// </summary>
-        private BuildTelemetry _buildTelemetry;
+        private BuildTelemetry? _buildTelemetry;
 
-        private ProjectCacheService _projectCacheService;
+        private ProjectCacheService? _projectCacheService;
 
         private bool _hasProjectCacheServiceInitializedVsScenario;
 
@@ -300,8 +290,7 @@ public BuildManager(string hostName)
             ErrorUtilities.VerifyThrowArgumentNull(hostName, nameof(hostName));
             _hostName = hostName;
             _buildManagerState = BuildManagerState.Idle;
-            _buildSubmissions = new Dictionary<int, BuildSubmission>();
-            _graphBuildSubmissions = new Dictionary<int, GraphBuildSubmission>();
+            _buildSubmissions = new Dictionary<int, BuildSubmissionBase>();
             _noActiveSubmissionsEvent = new AutoResetEvent(true);
             _activeNodes = new HashSet<int>();
             _noNodesActiveEvent = new AutoResetEvent(true);
@@ -375,13 +364,13 @@ public static BuildManager DefaultBuildManager
         /// <summary>
         /// Retrieves a hosted<see cref="ISdkResolverService"/> instance for resolving SDKs.
         /// </summary>
-        private ISdkResolverService SdkResolverService => (this as IBuildComponentHost).GetComponent(BuildComponentType.SdkResolverService) as ISdkResolverService;
+        private ISdkResolverService SdkResolverService => ((this as IBuildComponentHost).GetComponent(BuildComponentType.SdkResolverService) as ISdkResolverService)!;
 
         /// <summary>
         /// Retrieves the logging service associated with a particular build
         /// </summary>
         /// <returns>The logging service.</returns>
-        ILoggingService IBuildComponentHost.LoggingService => _componentFactories.GetComponent(BuildComponentType.LoggingService) as ILoggingService;
+        ILoggingService IBuildComponentHost.LoggingService => _componentFactories.GetComponent<ILoggingService>(BuildComponentType.LoggingService);
 
         /// <summary>
         /// Retrieves the name of the component host.
@@ -392,7 +381,7 @@ public static BuildManager DefaultBuildManager
         /// Retrieves the build parameters associated with this build.
         /// </summary>
         /// <returns>The build parameters.</returns>
-        BuildParameters IBuildComponentHost.BuildParameters => _buildParameters;
+        BuildParameters? IBuildComponentHost.BuildParameters => _buildParameters;
 
         /// <summary>
         /// Retrieves the LegacyThreadingData associated with a particular build manager
@@ -408,7 +397,7 @@ public readonly struct DeferredBuildMessage
 
             public string Text { get; }
 
-            public string FilePath { get; }
+            public string? FilePath { get; }
 
             public DeferredBuildMessage(string text, MessageImportance importance)
             {
@@ -470,7 +459,7 @@ public void BeginBuild(BuildParameters parameters)
                     if (NativeMethodsShared.IsWindows || parameters.LowPriority)
                     {
                         ProcessPriorityClass priority = parameters.LowPriority ? ProcessPriorityClass.BelowNormal : ProcessPriorityClass.Normal;
-                        IEnumerable<Process> processes = _nodeManager?.GetProcesses();
+                        IEnumerable<Process>? processes = _nodeManager?.GetProcesses();
                         if (processes is not null)
                         {
                             foreach (Process p in processes)
@@ -547,7 +536,7 @@ public void BeginBuild(BuildParameters parameters)
                 // Initialize additional build parameters.
                 _buildParameters.BuildId = GetNextBuildId();
 
-                if (_buildParameters.UsesCachedResults() && parameters.ProjectIsolationMode == ProjectIsolationMode.False)
+                if (_buildParameters.UsesCachedResults() && _buildParameters.ProjectIsolationMode == ProjectIsolationMode.False)
                 {
                     // If input or output caches are used and the project isolation mode is set to
                     // ProjectIsolationMode.False, then set it to ProjectIsolationMode.True. The explicit
@@ -577,13 +566,19 @@ public void BeginBuild(BuildParameters parameters)
                 // Log deferred messages and response files
                 LogDeferredMessages(loggingService, _deferredBuildMessages);
 
+                // Log if BuildCheck is enabled
+                if (_buildParameters.IsBuildCheckEnabled)
+                {
+                    loggingService.LogComment(buildEventContext: BuildEventContext.Invalid, MessageImportance.Normal, "BuildCheckEnabled");
+                }
+
                 // Log known deferred telemetry
                 loggingService.LogTelemetry(buildEventContext: null, KnownTelemetry.LoggingConfigurationTelemetry.EventName, KnownTelemetry.LoggingConfigurationTelemetry.GetProperties());
 
                 InitializeCaches();
 
 #if FEATURE_REPORTFILEACCESSES
-                var fileAccessManager = ((IBuildComponentHost)this).GetComponent(BuildComponentType.FileAccessManager) as IFileAccessManager;
+                var fileAccessManager = ((IBuildComponentHost)this).GetComponent<IFileAccessManager>(BuildComponentType.FileAccessManager);
 #endif
 
                 _projectCacheService = new ProjectCacheService(
@@ -592,13 +587,13 @@ public void BeginBuild(BuildParameters parameters)
 #if FEATURE_REPORTFILEACCESSES
                     fileAccessManager,
 #endif
-                    _configCache,
+                    _configCache!,
                     _buildParameters.ProjectCacheDescriptor);
 
-                _taskHostNodeManager = ((IBuildComponentHost)this).GetComponent(BuildComponentType.TaskHostNodeManager) as INodeManager;
-                _scheduler = ((IBuildComponentHost)this).GetComponent(BuildComponentType.Scheduler) as IScheduler;
+                _taskHostNodeManager = ((IBuildComponentHost)this).GetComponent<INodeManager>(BuildComponentType.TaskHostNodeManager);
+                _scheduler = ((IBuildComponentHost)this).GetComponent<IScheduler>(BuildComponentType.Scheduler);
 
-                _nodeManager.RegisterPacketHandler(NodePacketType.BuildRequestBlocker, BuildRequestBlocker.FactoryForDeserialization, this);
+                _nodeManager!.RegisterPacketHandler(NodePacketType.BuildRequestBlocker, BuildRequestBlocker.FactoryForDeserialization, this);
                 _nodeManager.RegisterPacketHandler(NodePacketType.BuildRequestConfiguration, BuildRequestConfiguration.FactoryForDeserialization, this);
                 _nodeManager.RegisterPacketHandler(NodePacketType.BuildRequestConfigurationResponse, BuildRequestConfigurationResponse.FactoryForDeserialization, this);
                 _nodeManager.RegisterPacketHandler(NodePacketType.BuildResult, BuildResult.FactoryForDeserialization, this);
@@ -622,8 +617,8 @@ public void BeginBuild(BuildParameters parameters)
 
                 _buildManagerState = BuildManagerState.Building;
 
-                _noActiveSubmissionsEvent.Set();
-                _noNodesActiveEvent.Set();
+                _noActiveSubmissionsEvent!.Set();
+                _noNodesActiveEvent!.Set();
             }
 
             ILoggingService InitializeLoggingService()
@@ -635,7 +630,7 @@ ILoggingService InitializeLoggingService()
                     _buildParameters.WarningsNotAsErrors,
                     _buildParameters.WarningsAsMessages);
 
-                _nodeManager.RegisterPacketHandler(NodePacketType.LogMessage, LogMessagePacket.FactoryForDeserialization, loggingService as INodePacketHandler);
+                _nodeManager!.RegisterPacketHandler(NodePacketType.LogMessage, LogMessagePacket.FactoryForDeserialization, loggingService as INodePacketHandler);
 
                 try
                 {
@@ -687,10 +682,10 @@ void InitializeCaches()
                     ReuseOldCaches(_buildParameters.InputResultsCacheFiles);
                 }
 
-                _configCache = ((IBuildComponentHost)this).GetComponent(BuildComponentType.ConfigCache) as IConfigCache;
-                _resultsCache = ((IBuildComponentHost)this).GetComponent(BuildComponentType.ResultsCache) as IResultsCache;
+                _configCache = ((IBuildComponentHost)this).GetComponent<IConfigCache>(BuildComponentType.ConfigCache);
+                _resultsCache = ((IBuildComponentHost)this).GetComponent<IResultsCache>(BuildComponentType.ResultsCache);
 
-                if (!usesInputCaches && (_buildParameters.ResetCaches || _configCache.IsConfigCacheSizeLargerThanThreshold()))
+                if (!usesInputCaches && (_buildParameters.ResetCaches || _configCache!.IsConfigCacheSizeLargerThanThreshold()))
                 {
                     ResetCaches();
                 }
@@ -698,18 +693,18 @@ void InitializeCaches()
                 {
                     if (!usesInputCaches)
                     {
-                        List<int> configurationsCleared = _configCache.ClearNonExplicitlyLoadedConfigurations();
+                        List<int> configurationsCleared = _configCache!.ClearNonExplicitlyLoadedConfigurations();
 
                         if (configurationsCleared != null)
                         {
                             foreach (int configurationId in configurationsCleared)
                             {
-                                _resultsCache.ClearResultsForConfiguration(configurationId);
+                                _resultsCache!.ClearResultsForConfiguration(configurationId);
                             }
                         }
                     }
 
-                    foreach (var config in _configCache)
+                    foreach (var config in _configCache!)
                     {
                         config.ResultsNodeId = Scheduler.InvalidNodeId;
                     }
@@ -733,7 +728,7 @@ private void EnableDetouredNodeLauncher()
             ErrorUtilities.VerifyThrowInvalidOperation(NativeMethodsShared.ProcessorArchitecture == NativeMethodsShared.ProcessorArchitectures.X64, "ReportFileAccessesX64Only");
 
             // To properly report file access, we need to disable the in-proc node which won't be detoured.
-            _buildParameters.DisableInProcNode = true;
+            _buildParameters!.DisableInProcNode = true;
 
             // Node reuse must be disabled as future builds will not be able to listen to events raised by detours.
             _buildParameters.EnableNodeReuse = false;
@@ -764,7 +759,7 @@ private static void AttachDebugger()
                 case "2":
                     // Sometimes easier to attach rather than deal with JIT prompt
                     Process currentProcess = Process.GetCurrentProcess();
-                    Console.WriteLine($"Waiting for debugger to attach ({currentProcess.MainModule.FileName} PID {currentProcess.Id}).  Press enter to continue...");
+                    Console.WriteLine($"Waiting for debugger to attach ({currentProcess.MainModule!.FileName} PID {currentProcess.Id}).  Press enter to continue...");
                     Console.ReadLine();
                     break;
             }
@@ -790,7 +785,7 @@ private void CancelAllSubmissions(bool async)
                 ? _buildParameters.UICulture
                 : CultureInfo.CurrentUICulture;
 
-            void Callback(object state)
+            void Callback(object? state)
             {
                 lock (_syncLock)
                 {
@@ -809,21 +804,15 @@ void Callback(object state)
 
                     _overallBuildSuccess = false;
 
-                    foreach (BuildSubmission submission in _buildSubmissions.Values)
-                    {
-                        if (submission.BuildRequest != null)
-                        {
-                            BuildResult result = new BuildResult(submission.BuildRequest, new BuildAbortedException());
-                            _resultsCache.AddResult(result);
-                            submission.CompleteResults(result);
-                        }
-                    }
-
-                    foreach (GraphBuildSubmission submission in _graphBuildSubmissions.Values)
+                    foreach (BuildSubmissionBase submission in _buildSubmissions.Values)
                     {
                         if (submission.IsStarted)
                         {
-                            submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, new BuildAbortedException()));
+                            BuildResultBase buildResult = submission.CompleteResultsWithException(new BuildAbortedException());
+                            if (buildResult is BuildResult result)
+                            {
+                                _resultsCache!.AddResult(result);
+                            }
                         }
                     }
 
@@ -845,12 +834,12 @@ public void ResetCaches()
                 ErrorIfState(BuildManagerState.WaitingForBuildToComplete, "WaitingForEndOfBuild");
                 ErrorIfState(BuildManagerState.Building, "BuildInProgress");
 
-                _configCache = ((IBuildComponentHost)this).GetComponent(BuildComponentType.ConfigCache) as IConfigCache;
-                _resultsCache = ((IBuildComponentHost)this).GetComponent(BuildComponentType.ResultsCache) as IResultsCache;
-                _resultsCache.ClearResults();
+                _configCache = ((IBuildComponentHost)this).GetComponent<IConfigCache>(BuildComponentType.ConfigCache);
+                _resultsCache = ((IBuildComponentHost)this).GetComponent<IResultsCache>(BuildComponentType.ResultsCache);
+                _resultsCache!.ClearResults();
 
                 // This call clears out the directory.
-                _configCache.ClearConfigurations();
+                _configCache!.ClearConfigurations();
 
                 _buildParameters?.ProjectRootElementCache.DiscardImplicitReferences();
             }
@@ -867,12 +856,12 @@ public ProjectInstance GetProjectInstanceForBuild(Project project)
             lock (_syncLock)
             {
                 _configCache = ((IBuildComponentHost)this).GetComponent(BuildComponentType.ConfigCache) as IConfigCache;
-                BuildRequestConfiguration configuration = _configCache.GetMatchingConfiguration(
+                BuildRequestConfiguration configuration = _configCache!.GetMatchingConfiguration(
                     new ConfigurationMetadata(project),
                     (config, loadProject) => CreateConfiguration(project, config),
                     loadProject: true);
                 ErrorUtilities.VerifyThrow(configuration.Project != null, "Configuration should have been loaded.");
-                return configuration.Project;
+                return configuration.Project!;
             }
         }
 
@@ -882,27 +871,7 @@ public ProjectInstance GetProjectInstanceForBuild(Project project)
         /// </summary>
         /// <exception cref="InvalidOperationException">Thrown if StartBuild has not been called or if EndBuild has been called.</exception>
         public BuildSubmission PendBuildRequest(BuildRequestData requestData)
-        {
-            lock (_syncLock)
-            {
-                ErrorUtilities.VerifyThrowArgumentNull(requestData, nameof(requestData));
-                ErrorIfState(BuildManagerState.WaitingForBuildToComplete, "WaitingForEndOfBuild");
-                ErrorIfState(BuildManagerState.Idle, "NoBuildInProgress");
-                VerifyStateInternal(BuildManagerState.Building);
-
-                var newSubmission = new BuildSubmission(this, GetNextSubmissionId(), requestData, _buildParameters.LegacyThreadingSemantics);
-
-                if (_buildTelemetry != null)
-                {
-                    _buildTelemetry.Project ??= requestData.ProjectFullPath;
-                    _buildTelemetry.Target ??= string.Join(",", requestData.TargetNames);
-                }
-
-                _buildSubmissions.Add(newSubmission.SubmissionId, newSubmission);
-                _noActiveSubmissionsEvent.Reset();
-                return newSubmission;
-            }
-        }
+            => (BuildSubmission) PendBuildRequest<BuildRequestData, BuildResult>(requestData);
 
         /// <summary>
         /// Submits a graph build request to the current build but does not start it immediately.  Allows the user to
@@ -910,6 +879,17 @@ public BuildSubmission PendBuildRequest(BuildRequestData requestData)
         /// </summary>
         /// <exception cref="InvalidOperationException">Thrown if StartBuild has not been called or if EndBuild has been called.</exception>
         public GraphBuildSubmission PendBuildRequest(GraphBuildRequestData requestData)
+            => (GraphBuildSubmission) PendBuildRequest<GraphBuildRequestData, GraphBuildResult>(requestData);
+
+        /// <summary>
+        /// Submits a build request to the current build but does not start it immediately.  Allows the user to
+        /// perform asynchronous execution or access the submission ID prior to executing the request.
+        /// </summary>
+        /// <exception cref="InvalidOperationException">Thrown if StartBuild has not been called or if EndBuild has been called.</exception>
+        private BuildSubmissionBase<TRequestData, TResultData> PendBuildRequest<TRequestData, TResultData>(
+            TRequestData requestData)
+            where TRequestData : BuildRequestData<TRequestData, TResultData>
+            where TResultData : BuildResultBase
         {
             lock (_syncLock)
             {
@@ -918,39 +898,41 @@ public GraphBuildSubmission PendBuildRequest(GraphBuildRequestData requestData)
                 ErrorIfState(BuildManagerState.Idle, "NoBuildInProgress");
                 VerifyStateInternal(BuildManagerState.Building);
 
-                var newSubmission = new GraphBuildSubmission(this, GetNextSubmissionId(), requestData);
+                var newSubmission = requestData.CreateSubmission(this, GetNextSubmissionId(), requestData,
+                    _buildParameters!.LegacyThreadingSemantics);
 
                 if (_buildTelemetry != null)
                 {
                     // Project graph can have multiple entry points, for purposes of identifying event for same build project,
                     // we believe that including only one entry point will provide enough precision.
-                    _buildTelemetry.Project ??= requestData.ProjectGraphEntryPoints?.FirstOrDefault().ProjectFile;
+                    _buildTelemetry.Project ??= requestData.EntryProjectsFullPath.FirstOrDefault();
                     _buildTelemetry.Target ??= string.Join(",", requestData.TargetNames);
                 }
 
-                _graphBuildSubmissions.Add(newSubmission.SubmissionId, newSubmission);
-                _noActiveSubmissionsEvent.Reset();
+                _buildSubmissions.Add(newSubmission.SubmissionId, newSubmission);
+                _noActiveSubmissionsEvent!.Reset();
                 return newSubmission;
             }
         }
 
+        private TResultData BuildRequest<TRequestData, TResultData>(TRequestData requestData)
+            where TRequestData : BuildRequestData<TRequestData, TResultData>
+            where TResultData : BuildResultBase
+            => PendBuildRequest<TRequestData, TResultData>(requestData).Execute();
+
         /// <summary>
         /// Convenience method. Submits a build request and blocks until the results are available.
         /// </summary>
         /// <exception cref="InvalidOperationException">Thrown if StartBuild has not been called or if EndBuild has been called.</exception>
         public BuildResult BuildRequest(BuildRequestData requestData)
-        {
-            BuildSubmission submission = PendBuildRequest(requestData);
-            BuildResult result = submission.Execute();
-
-            return result;
-        }
+            => BuildRequest<BuildRequestData, BuildResult>(requestData);
 
         /// <summary>
         /// Convenience method. Submits a graph build request and blocks until the results are available.
         /// </summary>
         /// <exception cref="InvalidOperationException">Thrown if StartBuild has not been called or if EndBuild has been called.</exception>
-        public GraphBuildResult BuildRequest(GraphBuildRequestData requestData) => PendBuildRequest(requestData).Execute();
+        public GraphBuildResult BuildRequest(GraphBuildRequestData requestData)
+            => BuildRequest<GraphBuildRequestData, GraphBuildResult>(requestData);
 
         /// <summary>
         /// Signals that no more build requests are expected (or allowed) and the BuildManager may clean up.
@@ -977,36 +959,30 @@ public void EndBuild()
                 lock (_syncLock)
                 {
                     // If there are any submissions which never started, remove them now.
-                    var submissionsToCheck = new List<BuildSubmission>(_buildSubmissions.Values);
-                    foreach (BuildSubmission submission in submissionsToCheck)
-                    {
-                        CheckSubmissionCompletenessAndRemove(submission);
-                    }
-
-                    var graphSubmissionsToCheck = new List<GraphBuildSubmission>(_graphBuildSubmissions.Values);
-                    foreach (GraphBuildSubmission submission in graphSubmissionsToCheck)
+                    var submissionsToCheck = new List<BuildSubmissionBase>(_buildSubmissions.Values);
+                    foreach (BuildSubmissionBase submission in submissionsToCheck)
                     {
                         CheckSubmissionCompletenessAndRemove(submission);
                     }
                 }
 
-                _noActiveSubmissionsEvent.WaitOne();
+                _noActiveSubmissionsEvent!.WaitOne();
                 ShutdownConnectedNodes(false /* normal termination */);
-                _noNodesActiveEvent.WaitOne();
+                _noNodesActiveEvent!.WaitOne();
 
                 // Wait for all of the actions in the work queue to drain.
                 // _workQueue.Completion.Wait() could throw here if there was an unhandled exception in the work queue,
                 // but the top level exception handler there should catch everything and have forwarded it to the
                 // OnThreadException method in this class already.
-                _workQueue.Complete();
+                _workQueue!.Complete();
                 _workQueue.Completion.Wait();
 
-                Task projectCacheDispose = _projectCacheService.DisposeAsync().AsTask();
+                Task projectCacheDispose = _projectCacheService!.DisposeAsync().AsTask();
 
-                ErrorUtilities.VerifyThrow(_buildSubmissions.Count == 0 && _graphBuildSubmissions.Count == 0, "All submissions not yet complete.");
+                ErrorUtilities.VerifyThrow(_buildSubmissions.Count == 0, "All submissions not yet complete.");
                 ErrorUtilities.VerifyThrow(_activeNodes.Count == 0, "All nodes not yet shut down.");
 
-                if (_buildParameters.UsesOutputCache())
+                if (_buildParameters!.UsesOutputCache())
                 {
                     SerializeCaches();
                 }
@@ -1020,7 +996,7 @@ public void EndBuild()
 
                     foreach (KeyValuePair<int, BuildEventArgs> projectStartedEvent in _projectStartedEvents)
                     {
-                        BuildResult result = _resultsCache.GetResultsForConfiguration(projectStartedEvent.Value.BuildEventContext.ProjectInstanceId);
+                        BuildResult result = _resultsCache!.GetResultsForConfiguration(projectStartedEvent.Value.BuildEventContext!.ProjectInstanceId);
 
                         // It's valid to have a mismatched project started event IFF that particular
                         // project had some sort of unhandled exception.  If there is no result, we
@@ -1040,7 +1016,7 @@ public void EndBuild()
 
                 if (_buildParameters.DiscardBuildResults)
                 {
-                    _resultsCache.ClearResults();
+                    _resultsCache!.ClearResults();
                 }
             }
             catch (Exception e)
@@ -1058,7 +1034,7 @@ public void EndBuild()
             {
                 try
                 {
-                    ILoggingService loggingService = ((IBuildComponentHost)this).LoggingService;
+                    ILoggingService? loggingService = ((IBuildComponentHost)this).LoggingService;
 
                     if (loggingService != null)
                     {
@@ -1079,7 +1055,7 @@ public void EndBuild()
                             _buildTelemetry.DisplayVersion = ProjectCollection.DisplayVersion;
                             _buildTelemetry.FrameworkName = NativeMethodsShared.FrameworkName;
 
-                            string host = null;
+                            string? host = null;
                             if (BuildEnvironmentState.s_runningInVisualStudio)
                             {
                                 host = "VS";
@@ -1104,7 +1080,7 @@ public void EndBuild()
                 }
                 finally
                 {
-                    if (_buildParameters.LegacyThreadingSemantics)
+                    if (_buildParameters!.LegacyThreadingSemantics)
                     {
                         _legacyThreadingData.MainThreadSubmissionId = -1;
                     }
@@ -1141,13 +1117,15 @@ void SerializeCaches()
         /// Convenience method.  Submits a lone build request and blocks until results are available.
         /// </summary>
         /// <exception cref="InvalidOperationException">Thrown if a build is already in progress.</exception>
-        public BuildResult Build(BuildParameters parameters, BuildRequestData requestData)
+        private TResultData Build<TRequestData, TResultData>(BuildParameters parameters, TRequestData requestData)
+            where TRequestData : BuildRequestData<TRequestData, TResultData>
+            where TResultData : BuildResultBase
         {
-            BuildResult result;
+            TResultData result;
             BeginBuild(parameters);
             try
             {
-                result = BuildRequest(requestData);
+                result = BuildRequest<TRequestData, TResultData>(requestData);
                 if (result.Exception == null && _threadException != null)
                 {
                     result.Exception = _threadException.SourceException;
@@ -1162,30 +1140,19 @@ public BuildResult Build(BuildParameters parameters, BuildRequestData requestDat
             return result;
         }
 
+        /// <summary>
+        /// Convenience method.  Submits a lone build request and blocks until results are available.
+        /// </summary>
+        /// <exception cref="InvalidOperationException">Thrown if a build is already in progress.</exception>
+        public BuildResult Build(BuildParameters parameters, BuildRequestData requestData)
+            => Build<BuildRequestData, BuildResult>(parameters, requestData);
+
         /// <summary>
         /// Convenience method.  Submits a lone graph build request and blocks until results are available.
         /// </summary>
         /// <exception cref="InvalidOperationException">Thrown if a build is already in progress.</exception>
         public GraphBuildResult Build(BuildParameters parameters, GraphBuildRequestData requestData)
-        {
-            GraphBuildResult result;
-            BeginBuild(parameters);
-            try
-            {
-                result = BuildRequest(requestData);
-                if (result.Exception == null && _threadException != null)
-                {
-                    result.Exception = _threadException.SourceException;
-                    _threadException = null;
-                }
-            }
-            finally
-            {
-                EndBuild();
-            }
-
-            return result;
-        }
+            => Build<GraphBuildRequestData, GraphBuildResult>(parameters, requestData);
 
         /// <summary>
         /// Shuts down all idle MSBuild nodes on the machine
@@ -1217,7 +1184,7 @@ public void Dispose()
         /// <param name="packet">The packet.</param>
         void INodePacketHandler.PacketReceived(int node, INodePacket packet)
         {
-            _workQueue.Post(() => ProcessPacket(node, packet));
+            _workQueue!.Post(() => ProcessPacket(node, packet));
         }
 
         #endregion
@@ -1249,6 +1216,11 @@ IBuildComponent IBuildComponentHost.GetComponent(BuildComponentType type)
             return _componentFactories.GetComponent(type);
         }
 
+        TComponent IBuildComponentHost.GetComponent<TComponent>(BuildComponentType type)
+        {
+            return _componentFactories.GetComponent<TComponent>(type);
+        }
+
         #endregion
 
         /// <summary>
@@ -1256,38 +1228,40 @@ IBuildComponent IBuildComponentHost.GetComponent(BuildComponentType type)
         /// </summary>
         [SuppressMessage("Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Standard ExpectedException pattern used")]
         [SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Complex class might need refactoring to separate scheduling elements from submission elements.")]
-        internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThreadBuild)
+        private void ExecuteSubmission(BuildSubmission submission, bool allowMainThreadBuild)
         {
             ErrorUtilities.VerifyThrowArgumentNull(submission, nameof(submission));
             ErrorUtilities.VerifyThrow(!submission.IsCompleted, "Submission already complete.");
 
-            BuildRequestConfiguration resolvedConfiguration = null;
+            BuildRequestConfiguration? resolvedConfiguration = null;
             bool shuttingDown = false;
 
             try
             {
                 lock (_syncLock)
                 {
-                    ProjectInstance projectInstance = submission.BuildRequestData.ProjectInstance;
+                    submission.IsStarted = true;
+
+                    ProjectInstance? projectInstance = submission.BuildRequestData.ProjectInstance;
                     if (projectInstance != null)
                     {
                         if (_acquiredProjectRootElementCacheFromProjectInstance)
                         {
                             ErrorUtilities.VerifyThrowArgument(
-                                _buildParameters.ProjectRootElementCache == projectInstance.ProjectRootElementCache,
+                                _buildParameters!.ProjectRootElementCache == projectInstance.ProjectRootElementCache,
                                 "OM_BuildSubmissionsMultipleProjectCollections");
                         }
                         else
                         {
-                            _buildParameters.ProjectRootElementCache = projectInstance.ProjectRootElementCache;
+                            _buildParameters!.ProjectRootElementCache = projectInstance.ProjectRootElementCache;
                             _acquiredProjectRootElementCacheFromProjectInstance = true;
                         }
                     }
-                    else if (_buildParameters.ProjectRootElementCache == null)
+                    else if (_buildParameters!.ProjectRootElementCache == null)
                     {
                         // Create our own cache; if we subsequently get a build submission with a project instance attached,
                         // we'll dump our cache and use that one.
-                        _buildParameters.ProjectRootElementCache =
+                        _buildParameters!.ProjectRootElementCache =
                             new ProjectRootElementCache(false /* do not automatically reload from disk */);
                     }
 
@@ -1302,20 +1276,20 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread
 
                         // If we have already named this instance when it was submitted previously during this build, use the same
                         // name so that we get the same configuration (and thus don't cause it to rebuild.)
-                        if (!_unnamedProjectInstanceToNames.TryGetValue(submission.BuildRequestData.ProjectInstance, out var tempName))
+                        if (!_unnamedProjectInstanceToNames.TryGetValue(submission.BuildRequestData.ProjectInstance!, out var tempName))
                         {
                             tempName = "Unnamed_" + _nextUnnamedProjectId++;
-                            _unnamedProjectInstanceToNames[submission.BuildRequestData.ProjectInstance] = tempName;
+                            _unnamedProjectInstanceToNames[submission.BuildRequestData.ProjectInstance!] = tempName;
                         }
 
                         submission.BuildRequestData.ProjectFullPath = Path.Combine(
-                            submission.BuildRequestData.ProjectInstance.GetProperty(ReservedPropertyNames.projectDirectory).EvaluatedValue,
+                            submission.BuildRequestData.ProjectInstance!.GetProperty(ReservedPropertyNames.projectDirectory)!.EvaluatedValue,
                             tempName);
                     }
 
                     // Create/Retrieve a configuration for each request
                     var buildRequestConfiguration = new BuildRequestConfiguration(submission.BuildRequestData, _buildParameters.DefaultToolsVersion);
-                    var matchingConfiguration = _configCache.GetMatchingConfiguration(buildRequestConfiguration);
+                    var matchingConfiguration = _configCache!.GetMatchingConfiguration(buildRequestConfiguration);
                     resolvedConfiguration = ResolveConfiguration(
                         buildRequestConfiguration,
                         matchingConfiguration,
@@ -1334,14 +1308,14 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread
                             // Only initialize once as it should be the same for all projects.
                             _hasProjectCacheServiceInitializedVsScenario = true;
 
-                            _projectCacheService.InitializePluginsForVsScenario(
+                            _projectCacheService!.InitializePluginsForVsScenario(
                                 ProjectCacheDescriptors.Values,
                                 resolvedConfiguration,
                                 submission.BuildRequestData.TargetNames,
-                                _executionCancellationTokenSource.Token);
+                                _executionCancellationTokenSource!.Token);
                         }
 
-                        if (_projectCacheService.ShouldUseCache(resolvedConfiguration))
+                        if (_projectCacheService!.ShouldUseCache(resolvedConfiguration))
                         {
                             IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));
                         }
@@ -1372,7 +1346,7 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread
             {
                 ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, "Cannot call project cache without having BuildRequestConfiguration");
                 // We were already canceled!
-                CompleteSubmissionWithException(submission, resolvedConfiguration, new BuildAbortedException());
+                CompleteSubmissionWithException(submission, resolvedConfiguration!, new BuildAbortedException());
             }
         }
 
@@ -1383,11 +1357,11 @@ private void IssueCacheRequestForBuildSubmission(CacheRequest cacheRequest)
         {
             Debug.Assert(Monitor.IsEntered(_syncLock));
 
-            _workQueue.Post(() =>
+            _workQueue!.Post(() =>
             {
                 try
                 {
-                    _projectCacheService.PostCacheRequest(cacheRequest, _executionCancellationTokenSource.Token);
+                    _projectCacheService!.PostCacheRequest(cacheRequest, _executionCancellationTokenSource!.Token);
                 }
                 catch (Exception e)
                 {
@@ -1396,16 +1370,36 @@ private void IssueCacheRequestForBuildSubmission(CacheRequest cacheRequest)
             });
         }
 
+        internal void ExecuteSubmission<TRequestData, TResultData>(
+            BuildSubmissionBase<TRequestData, TResultData> submission, bool allowMainThreadBuild)
+            where TRequestData : BuildRequestDataBase
+            where TResultData : BuildResultBase
+        {
+            // TODO: here we should add BuildRequestStarted https://github.com/dotnet/msbuild/issues/10145
+            // BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
+            // ((IBuildComponentHost)this).LoggingService.LogBuildEvent()
+
+
+            if (submission is BuildSubmission buildSubmission)
+            {
+                ExecuteSubmission(buildSubmission, allowMainThreadBuild);
+            }
+            else if (submission is GraphBuildSubmission graphBuildSubmission)
+            {
+                ExecuteSubmission(graphBuildSubmission);
+            }
+        }
+
         /// <summary>
         /// This method adds the graph build request in the specified submission to the set of requests being handled by the scheduler.
         /// </summary>
-        internal void ExecuteSubmission(GraphBuildSubmission submission)
+        private void ExecuteSubmission(GraphBuildSubmission submission)
         {
-            lock (_syncLock)
-            {
-                VerifyStateInternal(BuildManagerState.Building);
+            VerifyStateInternal(BuildManagerState.Building);
 
-                try
+            try
+            {
+                lock (_syncLock)
                 {
                     submission.IsStarted = true;
 
@@ -1431,15 +1425,16 @@ internal void ExecuteSubmission(GraphBuildSubmission submission)
                                 HandleSubmissionException(submission, ex);
                             }
                         },
-                        _executionCancellationTokenSource.Token,
+                        _executionCancellationTokenSource!.Token,
                         TaskCreationOptions.LongRunning,
                         TaskScheduler.Default);
                 }
-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
-                {
-                    HandleSubmissionException(submission, ex);
-                    throw;
-                }
+            }
+            // The handling of submission exception needs to be done outside of the lock
+            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
+            {
+                HandleSubmissionException(submission, ex);
+                throw;
             }
         }
 
@@ -1489,7 +1484,7 @@ private void LoadSolutionIntoConfiguration(BuildRequestConfiguration config, Bui
                     GetNewConfigurationId(),
                     instances[i])
                 { ExplicitlyLoaded = config.ExplicitlyLoaded };
-                if (_configCache.GetMatchingConfiguration(newConfig) == null)
+                if (_configCache!.GetMatchingConfiguration(newConfig) == null)
                 {
                     _configCache.AddConfiguration(newConfig);
                 }
@@ -1507,7 +1502,7 @@ private static int GetNextBuildId()
         /// <summary>
         /// Creates and optionally populates a new configuration.
         /// </summary>
-        private BuildRequestConfiguration CreateConfiguration(Project project, BuildRequestConfiguration existingConfiguration)
+        private BuildRequestConfiguration CreateConfiguration(Project project, BuildRequestConfiguration? existingConfiguration)
         {
             ProjectInstance newInstance = project.CreateProjectInstance();
 
@@ -1536,7 +1531,7 @@ private void ProcessWorkQueue(Action action)
 
                 try
                 {
-                    if (!Equals(CultureInfo.CurrentCulture, _buildParameters.Culture))
+                    if (!Equals(CultureInfo.CurrentCulture, _buildParameters!.Culture))
                     {
                         CultureInfo.CurrentCulture = _buildParameters.Culture;
                     }
@@ -1658,73 +1653,10 @@ private void CompleteSubmissionWithException(BuildSubmission submission, BuildRe
         /// <remarks>
         /// To avoid deadlock possibility, this method MUST NOT be called inside of 'lock (_syncLock)'
         /// </remarks>
-        private void HandleSubmissionException(BuildSubmission submission, Exception ex)
-        {
-            Debug.Assert(!Monitor.IsEntered(_syncLock));
-
-            if (ex is AggregateException ae && ae.InnerExceptions.Count == 1)
-            {
-                ex = ae.InnerExceptions.First();
-            }
-            if (ex is InvalidProjectFileException projectException)
-            {
-                if (!projectException.HasBeenLogged)
-                {
-                    BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
-                    ((IBuildComponentHost)this).LoggingService.LogInvalidProjectFileError(buildEventContext, projectException);
-                    projectException.HasBeenLogged = true;
-                }
-            }
-
-            bool submissionNeedsCompletion;
-            lock (_syncLock)
-            {
-                // BuildRequest may be null if the submission fails early on.
-                submissionNeedsCompletion = submission.BuildRequest != null;
-                if (submissionNeedsCompletion)
-                {
-                    var result = new BuildResult(submission.BuildRequest, ex);
-                    submission.CompleteResults(result);
-                }
-            }
-
-            if (submissionNeedsCompletion)
-            {
-                WaitForAllLoggingServiceEventsToBeProcessed();
-            }
-
-            lock (_syncLock)
-            {
-                if (submissionNeedsCompletion)
-                {
-                    submission.CompleteLogging();
-                }
-
-                _overallBuildSuccess = false;
-                CheckSubmissionCompletenessAndRemove(submission);
-            }
-        }
-
-        /// <summary>
-        /// Waits to drain all events of logging service.
-        /// This method shall be used carefully because during draining, LoggingService will block all incoming events.
-        /// </summary>
-        /// <remarks>
-        /// To avoid deadlock possibility, this method MUST NOT be called inside of 'lock (_syncLock)'
-        /// </remarks>
-        private void WaitForAllLoggingServiceEventsToBeProcessed()
+        private void HandleSubmissionException(BuildSubmissionBase submission, Exception ex)
         {
-            // this has to be called out of the lock (_syncLock)
-            // because processing events can callback to 'this' instance and cause deadlock
             Debug.Assert(!Monitor.IsEntered(_syncLock));
-            ((LoggingService)((IBuildComponentHost)this).LoggingService).WaitForLoggingToProcessEvents();
-        }
 
-        /// <summary>
-        /// Deals with exceptions that may be thrown as a result of ExecuteSubmission.
-        /// </summary>
-        private void HandleSubmissionException(GraphBuildSubmission submission, Exception ex)
-        {
             if (ex is AggregateException ae)
             {
                 // If there's exactly 1, just flatten it
@@ -1734,7 +1666,7 @@ private void HandleSubmissionException(GraphBuildSubmission submission, Exceptio
                 }
                 else
                 {
-                    // Log each InvalidProjectFileException encountered during ProjectGraph creation
+                    // Log each InvalidProjectFileException encountered
                     foreach (Exception innerException in ae.InnerExceptions)
                     {
                         if (innerException is InvalidProjectFileException innerProjectException)
@@ -1755,11 +1687,27 @@ private void HandleSubmissionException(GraphBuildSubmission submission, Exceptio
                 LogInvalidProjectFileError(new InvalidProjectFileException(ex.Message, ex));
             }
 
+            bool submissionNeedsCompletion;
+            lock (_syncLock)
+            {
+                // BuildRequest may be null if the submission fails early on.
+                submissionNeedsCompletion = submission.IsStarted;
+                if (submissionNeedsCompletion)
+                {
+                    submission.CompleteResultsWithException(ex);
+                }
+            }
+
+            if (submissionNeedsCompletion)
+            {
+                WaitForAllLoggingServiceEventsToBeProcessed();
+            }
+
             lock (_syncLock)
             {
-                if (submission.IsStarted)
+                if (submissionNeedsCompletion)
                 {
-                    submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, ex));
+                    submission.CompleteLogging();
                 }
 
                 _overallBuildSuccess = false;
@@ -1777,6 +1725,21 @@ void LogInvalidProjectFileError(InvalidProjectFileException projectException)
             }
         }
 
+        /// <summary>
+        /// Waits to drain all events of logging service.
+        /// This method shall be used carefully because during draining, LoggingService will block all incoming events.
+        /// </summary>
+        /// <remarks>
+        /// To avoid deadlock possibility, this method MUST NOT be called inside of 'lock (_syncLock)'
+        /// </remarks>
+        private void WaitForAllLoggingServiceEventsToBeProcessed()
+        {
+            // this has to be called out of the lock (_syncLock)
+            // because processing events can callback to 'this' instance and cause deadlock
+            Debug.Assert(!Monitor.IsEntered(_syncLock));
+            ((LoggingService)((IBuildComponentHost)this).LoggingService).WaitForLoggingToProcessEvents();
+        }
+
         private static void AddBuildRequestToSubmission(BuildSubmission submission, int configurationId, int projectContextId = BuildEventContext.InvalidProjectContextId)
         {
             submission.BuildRequest = new BuildRequest(
@@ -1815,7 +1778,7 @@ private static void AddProxyBuildRequestToSubmission(
         /// </summary>
         private void IssueBuildRequestForBuildSubmission(BuildSubmission submission, BuildRequestConfiguration configuration, bool allowMainThreadBuild = false)
         {
-            _workQueue.Post(
+            _workQueue!.Post(
                 () =>
                 {
                     try
@@ -1844,7 +1807,7 @@ void IssueBuildSubmissionToSchedulerImpl(BuildSubmission submission, bool allowM
                             throw new BuildAbortedException();
                         }
 
-                        if (allowMainThreadBuild && _buildParameters.LegacyThreadingSemantics)
+                        if (allowMainThreadBuild && _buildParameters!.LegacyThreadingSemantics)
                         {
                             if (_legacyThreadingData.MainThreadSubmissionId == -1)
                             {
@@ -1890,7 +1853,7 @@ void IssueBuildSubmissionToSchedulerImpl(BuildSubmission submission, bool allowM
                     lock (_syncLock)
                     {
                         submission.CompleteLogging();
-                        ReportResultsToSubmission(new BuildResult(submission.BuildRequest, ex));
+                        ReportResultsToSubmission<BuildRequestData, BuildResult>(new BuildResult(submission.BuildRequest!, ex));
                         _overallBuildSuccess = false;
                     }
                 }
@@ -1917,7 +1880,7 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
                     ProjectCollection.GlobalProjectCollection,
                     (path, properties, collection) =>
                     {
-                        ProjectLoadSettings projectLoadSettings = _buildParameters.ProjectLoadSettings;
+                        ProjectLoadSettings projectLoadSettings = _buildParameters!.ProjectLoadSettings;
                         if (submission.BuildRequestData.Flags.HasFlag(BuildRequestDataFlags.IgnoreMissingEmptyAndInvalidImports))
                         {
                             projectLoadSettings |= ProjectLoadSettings.IgnoreMissingImports | ProjectLoadSettings.IgnoreInvalidImports | ProjectLoadSettings.IgnoreEmptyImports;
@@ -1955,11 +1918,11 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
                     projectGraph.ConstructionMetrics.NodeCount,
                     projectGraph.ConstructionMetrics.EdgeCount));
 
-            Dictionary<ProjectGraphNode, BuildResult> resultsPerNode = null;
+            Dictionary<ProjectGraphNode, BuildResult>? resultsPerNode = null;
 
             if (submission.BuildRequestData.GraphBuildOptions.Build)
             {
-                _projectCacheService.InitializePluginsForGraph(projectGraph, submission.BuildRequestData.TargetNames, _executionCancellationTokenSource.Token);
+                _projectCacheService!.InitializePluginsForGraph(projectGraph, submission.BuildRequestData.TargetNames, _executionCancellationTokenSource!.Token);
 
                 IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetsPerNode = projectGraph.GetTargetLists(submission.BuildRequestData.TargetNames);
 
@@ -1985,12 +1948,12 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
                 "Exceptions only get set when the graph submission gets completed with an exception in OnThreadException. That should not happen during graph builds.");
 
             // The overall submission is complete, so report it as complete
-            ReportResultsToSubmission(
+            ReportResultsToSubmission<GraphBuildRequestData, GraphBuildResult>(
                 new GraphBuildResult(
                     submission.SubmissionId,
                     new ReadOnlyDictionary<ProjectGraphNode, BuildResult>(resultsPerNode ?? new Dictionary<ProjectGraphNode, BuildResult>())));
 
-            static void DumpGraph(ProjectGraph graph, IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetList = null)
+            static void DumpGraph(ProjectGraph graph, IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>>? targetList = null)
             {
                 if (Traits.Instance.DebugEngine is false)
                 {
@@ -2013,9 +1976,9 @@ private Dictionary<ProjectGraphNode, BuildResult> BuildGraph(
 
             var blockedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes);
             var finishedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes.Count);
-            var buildingNodes = new Dictionary<BuildSubmission, ProjectGraphNode>();
+            var buildingNodes = new Dictionary<BuildSubmissionBase, ProjectGraphNode>();
             var resultsPerNode = new Dictionary<ProjectGraphNode, BuildResult>(projectGraph.ProjectNodes.Count);
-            ExceptionDispatchInfo submissionException = null;
+            ExceptionDispatchInfo? submissionException = null;
 
             while (blockedNodes.Count > 0 || buildingNodes.Count > 0)
             {
@@ -2064,7 +2027,7 @@ private Dictionary<ProjectGraphNode, BuildResult> BuildGraph(
                         {
                             lock (graphBuildStateLock)
                             {
-                                if (submissionException == null && finishedBuildSubmission.BuildResult.Exception != null)
+                                if (submissionException == null && finishedBuildSubmission.BuildResult?.Exception != null)
                                 {
                                     // Preserve the original stack.
                                     submissionException = ExceptionDispatchInfo.Capture(finishedBuildSubmission.BuildResult.Exception);
@@ -2075,7 +2038,7 @@ private Dictionary<ProjectGraphNode, BuildResult> BuildGraph(
                                 finishedNodes.Add(finishedNode);
                                 buildingNodes.Remove(finishedBuildSubmission);
 
-                                resultsPerNode.Add(finishedNode, finishedBuildSubmission.BuildResult);
+                                resultsPerNode.Add(finishedNode, finishedBuildSubmission.BuildResult!);
                             }
 
                             waitHandle.Set();
@@ -2096,17 +2059,17 @@ private void ShutdownConnectedNodes(bool abort)
             lock (_syncLock)
             {
                 _shuttingDown = true;
-                _executionCancellationTokenSource.Cancel();
+                _executionCancellationTokenSource!.Cancel();
 
                 // If we are aborting, we will NOT reuse the nodes because their state may be compromised by attempts to shut down while the build is in-progress.
-                _nodeManager.ShutdownConnectedNodes(!abort && _buildParameters.EnableNodeReuse);
+                _nodeManager!.ShutdownConnectedNodes(!abort && _buildParameters!.EnableNodeReuse);
 
                 // if we are aborting, the task host will hear about it in time through the task building infrastructure;
                 // so only shut down the task host nodes if we're shutting down tidily (in which case, it is assumed that all
                 // tasks are finished building and thus that there's no risk of a race between the two shutdown pathways).
                 if (!abort)
                 {
-                    _taskHostNodeManager.ShutdownConnectedNodes(_buildParameters.EnableNodeReuse);
+                    _taskHostNodeManager!.ShutdownConnectedNodes(_buildParameters!.EnableNodeReuse);
                 }
             }
         }
@@ -2154,23 +2117,22 @@ private void VerifyStateInternal(BuildManagerState requiredState)
         /// </summary>
         private void Reset()
         {
-            _nodeManager.UnregisterPacketHandler(NodePacketType.BuildRequestBlocker);
-            _nodeManager.UnregisterPacketHandler(NodePacketType.BuildRequestConfiguration);
-            _nodeManager.UnregisterPacketHandler(NodePacketType.BuildRequestConfigurationResponse);
-            _nodeManager.UnregisterPacketHandler(NodePacketType.BuildResult);
-            _nodeManager.UnregisterPacketHandler(NodePacketType.NodeShutdown);
+            _nodeManager?.UnregisterPacketHandler(NodePacketType.BuildRequestBlocker);
+            _nodeManager?.UnregisterPacketHandler(NodePacketType.BuildRequestConfiguration);
+            _nodeManager?.UnregisterPacketHandler(NodePacketType.BuildRequestConfigurationResponse);
+            _nodeManager?.UnregisterPacketHandler(NodePacketType.BuildResult);
+            _nodeManager?.UnregisterPacketHandler(NodePacketType.NodeShutdown);
 
-            _nodeManager.ClearPerBuildState();
+            _nodeManager?.ClearPerBuildState();
             _nodeManager = null;
 
             _shuttingDown = false;
-            _executionCancellationTokenSource.Dispose();
+            _executionCancellationTokenSource?.Dispose();
             _executionCancellationTokenSource = null;
             _nodeConfiguration = null;
             _buildSubmissions.Clear();
-            _graphBuildSubmissions.Clear();
 
-            _scheduler.Reset();
+            _scheduler?.Reset();
             _scheduler = null;
             _workQueue = null;
             _projectCacheService = null;
@@ -2195,7 +2157,7 @@ private void Reset()
                 // Optionally clear out the cache. This has the advantage of releasing memory,
                 // but the disadvantage of causing the next build to repeat the load and parse.
                 // We'll experiment here and ship with the best default.
-                _buildParameters.ProjectRootElementCache.Clear();
+                _buildParameters?.ProjectRootElementCache.Clear();
             }
         }
 
@@ -2221,11 +2183,11 @@ private int GetNewConfigurationId()
         /// <summary>
         /// Finds a matching configuration in the cache and returns it, or stores the configuration passed in.
         /// </summary>
-        private BuildRequestConfiguration ResolveConfiguration(BuildRequestConfiguration unresolvedConfiguration, BuildRequestConfiguration matchingConfigurationFromCache, bool replaceProjectInstance)
+        private BuildRequestConfiguration ResolveConfiguration(BuildRequestConfiguration unresolvedConfiguration, BuildRequestConfiguration? matchingConfigurationFromCache, bool replaceProjectInstance)
         {
             Debug.Assert(Monitor.IsEntered(_syncLock));
 
-            BuildRequestConfiguration resolvedConfiguration = matchingConfigurationFromCache ?? _configCache.GetMatchingConfiguration(unresolvedConfiguration);
+            BuildRequestConfiguration resolvedConfiguration = matchingConfigurationFromCache ?? _configCache!.GetMatchingConfiguration(unresolvedConfiguration);
             if (resolvedConfiguration == null)
             {
                 resolvedConfiguration = AddNewConfiguration(unresolvedConfiguration);
@@ -2259,16 +2221,16 @@ private void ReplaceExistingProjectInstance(BuildRequestConfiguration newConfigu
             Debug.Assert(Monitor.IsEntered(_syncLock));
 
             existingConfiguration.Project = newConfiguration.Project;
-            _resultsCache.ClearResultsForConfiguration(existingConfiguration.ConfigurationId);
+            _resultsCache!.ClearResultsForConfiguration(existingConfiguration.ConfigurationId);
         }
 
         private BuildRequestConfiguration AddNewConfiguration(BuildRequestConfiguration unresolvedConfiguration)
         {
             Debug.Assert(Monitor.IsEntered(_syncLock));
 
-            var newConfigurationId = _scheduler.GetConfigurationIdFromPlan(unresolvedConfiguration.ProjectFullPath);
+            var newConfigurationId = _scheduler!.GetConfigurationIdFromPlan(unresolvedConfiguration.ProjectFullPath);
 
-            if (_configCache.HasConfiguration(newConfigurationId) || (newConfigurationId == BuildRequestConfiguration.InvalidConfigurationId))
+            if (_configCache!.HasConfiguration(newConfigurationId) || (newConfigurationId == BuildRequestConfiguration.InvalidConfigurationId))
             {
                 // There is already a configuration like this one or one didn't exist in a plan, so generate a new ID.
                 newConfigurationId = GetNewConfigurationId();
@@ -2283,7 +2245,7 @@ private BuildRequestConfiguration AddNewConfiguration(BuildRequestConfiguration
 
         internal void PostCacheResult(CacheRequest cacheRequest, CacheResult cacheResult, int projectContextId)
         {
-            _workQueue.Post(() =>
+            _workQueue!.Post(() =>
             {
                 if (cacheResult.Exception is not null)
                 {
@@ -2322,16 +2284,16 @@ void HandleCacheResult()
 
                             // There must be a build request for the results, so fake one.
                             AddBuildRequestToSubmission(submission, configuration.ConfigurationId, projectContextId);
-                            var result = new BuildResult(submission.BuildRequest);
+                            var result = new BuildResult(submission.BuildRequest!);
 
-                            foreach (var cacheResult in cacheResult.BuildResult.ResultsByTarget)
+                            foreach (var cacheResultInner in cacheResult.BuildResult?.ResultsByTarget ?? Enumerable.Empty<KeyValuePair<string, TargetResult>>())
                             {
-                                result.AddResultsForTarget(cacheResult.Key, cacheResult.Value);
+                                result.AddResultsForTarget(cacheResultInner.Key, cacheResultInner.Value);
                             }
 
-                            _resultsCache.AddResult(result);
+                            _resultsCache!.AddResult(result);
                             submission.CompleteLogging();
-                            ReportResultsToSubmission(result);
+                            ReportResultsToSubmission<BuildRequestData, BuildResult>(result);
                         }
                     }
                     catch (Exception e)
@@ -2352,7 +2314,7 @@ private void HandleNewRequest(int node, BuildRequestBlocker blocker)
             {
                 foreach (BuildRequest request in blocker.BuildRequests)
                 {
-                    BuildRequestConfiguration config = _configCache[request.ConfigurationId];
+                    BuildRequestConfiguration config = _configCache![request.ConfigurationId];
                     if (FileUtilities.IsSolutionFilename(config.ProjectFullPath))
                     {
                         try
@@ -2362,7 +2324,7 @@ private void HandleNewRequest(int node, BuildRequestBlocker blocker)
                         catch (InvalidProjectFileException e)
                         {
                             // Throw the error in the cache.  The Scheduler will pick it up and return the results correctly.
-                            _resultsCache.AddResult(new BuildResult(request, e));
+                            _resultsCache!.AddResult(new BuildResult(request, e));
                             if (node == Scheduler.VirtualNode)
                             {
                                 throw;
@@ -2372,7 +2334,7 @@ private void HandleNewRequest(int node, BuildRequestBlocker blocker)
                 }
             }
 
-            IEnumerable<ScheduleResponse> response = _scheduler.ReportRequestBlocked(node, blocker);
+            IEnumerable<ScheduleResponse> response = _scheduler!.ReportRequestBlocked(node, blocker);
             PerformSchedulingActions(response);
         }
 
@@ -2387,17 +2349,17 @@ private void HandleResourceRequest(int node, ResourceRequest request)
             {
                 // Resource request requires a response and may be blocking. Our continuation is effectively a callback
                 // to be called once at least one core becomes available.
-                _scheduler.RequestCores(request.GlobalRequestId, request.NumCores, request.IsBlocking).ContinueWith((Task<int> task) =>
+                _scheduler!.RequestCores(request.GlobalRequestId, request.NumCores, request.IsBlocking).ContinueWith((Task<int> task) =>
                 {
                     var response = new ResourceResponse(request.GlobalRequestId, task.Result);
-                    _nodeManager.SendData(node, response);
+                    _nodeManager!.SendData(node, response);
                 }, TaskContinuationOptions.ExecuteSynchronously);
             }
             else
             {
                 // Resource release is a one-way call, no response is expected. We release the cores as instructed
                 // and kick the scheduler because there may be work waiting for cores to become available.
-                IEnumerable<ScheduleResponse> response = _scheduler.ReleaseCores(request.GlobalRequestId, request.NumCores);
+                IEnumerable<ScheduleResponse> response = _scheduler!.ReleaseCores(request.GlobalRequestId, request.NumCores);
                 PerformSchedulingActions(response);
             }
         }
@@ -2413,7 +2375,7 @@ private void HandleConfigurationRequest(int node, BuildRequestConfiguration unre
 
             var response = new BuildRequestConfigurationResponse(unresolvedConfiguration.ConfigurationId, resolvedConfiguration.ConfigurationId, resolvedConfiguration.ResultsNodeId);
 
-            if (!_nodeIdToKnownConfigurations.TryGetValue(node, out HashSet<int> configurationsOnNode))
+            if (!_nodeIdToKnownConfigurations.TryGetValue(node, out HashSet<int>? configurationsOnNode))
             {
                 configurationsOnNode = new HashSet<int>();
                 _nodeIdToKnownConfigurations[node] = configurationsOnNode;
@@ -2421,7 +2383,7 @@ private void HandleConfigurationRequest(int node, BuildRequestConfiguration unre
 
             configurationsOnNode.Add(resolvedConfiguration.ConfigurationId);
 
-            _nodeManager.SendData(node, response);
+            _nodeManager!.SendData(node, response);
         }
 
         /// <summary>
@@ -2430,7 +2392,7 @@ private void HandleConfigurationRequest(int node, BuildRequestConfiguration unre
         private void HandleResult(int node, BuildResult result)
         {
             // Update cache with the default, initial, and project targets, as needed.
-            BuildRequestConfiguration configuration = _configCache[result.ConfigurationId];
+            BuildRequestConfiguration configuration = _configCache![result.ConfigurationId];
             if (result.DefaultTargets != null)
             {
                 // If the result has Default, Initial, and project targets, we populate the configuration cache with them if it
@@ -2447,7 +2409,7 @@ private void HandleResult(int node, BuildResult result)
             // handled here. This intentionally mirrors the behavior for cache requests, as it doesn't make sense to
             // report for projects which aren't going to be requested. Ideally, *any* request could be handled, but that
             // would require moving the cache service interactions to the Scheduler.
-            if (_buildSubmissions.TryGetValue(result.SubmissionId, out BuildSubmission buildSubmission))
+            if (_buildSubmissions.TryGetValue(result.SubmissionId, out BuildSubmissionBase? buildSubmissionBase) && buildSubmissionBase is BuildSubmission buildSubmission)
             {
                 // The result may be associated with the build submission due to it being the submission which
                 // caused the build, but not the actual request which was originally used with the build submission.
@@ -2455,14 +2417,14 @@ private void HandleResult(int node, BuildResult result)
                 // isn't what we're looking for. Ensure only the actual submission's request is considered.
                 if (buildSubmission.BuildRequest != null
                     && buildSubmission.BuildRequest.ConfigurationId == configuration.ConfigurationId
-                    && _projectCacheService.ShouldUseCache(configuration))
+                    && _projectCacheService!.ShouldUseCache(configuration))
                 {
-                    BuildEventContext buildEventContext = _projectStartedEvents.TryGetValue(result.SubmissionId, out BuildEventArgs buildEventArgs)
-                        ? buildEventArgs.BuildEventContext
+                    BuildEventContext buildEventContext = _projectStartedEvents.TryGetValue(result.SubmissionId, out BuildEventArgs? buildEventArgs)
+                        ? buildEventArgs.BuildEventContext!
                         : new BuildEventContext(result.SubmissionId, node, configuration.Project?.EvaluationId ?? BuildEventContext.InvalidEvaluationId, configuration.ConfigurationId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
                     try
                     {
-                        _projectCacheService.HandleBuildResultAsync(configuration, result, buildEventContext, _executionCancellationTokenSource.Token).Wait();
+                        _projectCacheService.HandleBuildResultAsync(configuration, result, buildEventContext, _executionCancellationTokenSource!.Token).Wait();
                     }
                     catch (AggregateException ex) when (ex.InnerExceptions.All(inner => inner is OperationCanceledException))
                     {
@@ -2475,7 +2437,7 @@ private void HandleResult(int node, BuildResult result)
                 }
             }
 
-            IEnumerable<ScheduleResponse> response = _scheduler.ReportResult(node, result);
+            IEnumerable<ScheduleResponse> response = _scheduler!.ReportResult(node, result);
             PerformSchedulingActions(response);
         }
 
@@ -2487,7 +2449,7 @@ private void HandleNodeShutdown(int node, NodeShutdown shutdownPacket)
             Debug.Assert(Monitor.IsEntered(_syncLock));
 
             _shuttingDown = true;
-            _executionCancellationTokenSource.Cancel();
+            _executionCancellationTokenSource?.Cancel();
             ErrorUtilities.VerifyThrow(_activeNodes.Contains(node), "Unexpected shutdown from node {0} which shouldn't exist.", node);
             _activeNodes.Remove(node);
 
@@ -2495,47 +2457,44 @@ private void HandleNodeShutdown(int node, NodeShutdown shutdownPacket)
             {
                 if (shutdownPacket.Reason == NodeShutdownReason.ConnectionFailed)
                 {
-                    ILoggingService loggingService = ((IBuildComponentHost)this).GetComponent(BuildComponentType.LoggingService) as ILoggingService;
-                    foreach (BuildSubmission submission in _buildSubmissions.Values)
-                    {
-                        BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, BuildEventContext.InvalidNodeId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
-                        string exception = ExceptionHandling.ReadAnyExceptionFromFile(_instantiationTimeUtc);
-                        loggingService.LogError(buildEventContext, new BuildEventFileInfo(String.Empty) /* no project file */, "ChildExitedPrematurely", node, ExceptionHandling.DebugDumpPath, exception);
-                    }
-
-                    foreach (GraphBuildSubmission submission in _graphBuildSubmissions.Values)
+                    ILoggingService loggingService = ((IBuildComponentHost)this).GetComponent<ILoggingService>(BuildComponentType.LoggingService);
+                    foreach (BuildSubmissionBase submission in _buildSubmissions.Values)
                     {
                         BuildEventContext buildEventContext = new BuildEventContext(submission.SubmissionId, BuildEventContext.InvalidNodeId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
                         string exception = ExceptionHandling.ReadAnyExceptionFromFile(_instantiationTimeUtc);
-                        loggingService.LogError(buildEventContext, new BuildEventFileInfo(String.Empty) /* no project file */, "ChildExitedPrematurely", node, ExceptionHandling.DebugDumpPath, exception);
+                        loggingService?.LogError(buildEventContext, new BuildEventFileInfo(string.Empty) /* no project file */, "ChildExitedPrematurely", node, ExceptionHandling.DebugDumpPath, exception);
                     }
                 }
-                else if (shutdownPacket.Reason == NodeShutdownReason.Error && _buildSubmissions.Values.Count == 0 && _graphBuildSubmissions.Values.Count == 0)
+                else if (shutdownPacket.Reason == NodeShutdownReason.Error && _buildSubmissions.Values.Count == 0)
                 {
                     // We have no submissions to attach any exceptions to, lets just log it here.
                     if (shutdownPacket.Exception != null)
                     {
-                        ILoggingService loggingService = ((IBuildComponentHost)this).GetComponent(BuildComponentType.LoggingService) as ILoggingService;
-                        loggingService.LogError(BuildEventContext.Invalid, new BuildEventFileInfo(String.Empty) /* no project file */, "ChildExitedPrematurely", node, ExceptionHandling.DebugDumpPath, shutdownPacket.Exception.ToString());
+                        ILoggingService loggingService = ((IBuildComponentHost)this).GetComponent<ILoggingService>(BuildComponentType.LoggingService);
+                        loggingService?.LogError(BuildEventContext.Invalid, new BuildEventFileInfo(string.Empty) /* no project file */, "ChildExitedPrematurely", node, ExceptionHandling.DebugDumpPath, shutdownPacket.Exception.ToString());
                         OnThreadException(shutdownPacket.Exception);
                     }
                 }
 
-                _nodeManager.ShutdownConnectedNodes(_buildParameters.EnableNodeReuse);
-                _taskHostNodeManager.ShutdownConnectedNodes(_buildParameters.EnableNodeReuse);
+                _nodeManager!.ShutdownConnectedNodes(_buildParameters!.EnableNodeReuse);
+                _taskHostNodeManager!.ShutdownConnectedNodes(_buildParameters.EnableNodeReuse);
 
-                foreach (BuildSubmission submission in _buildSubmissions.Values)
+                foreach (BuildSubmissionBase submission in _buildSubmissions.Values)
                 {
                     // The submission has not started
-                    if (submission.BuildRequest == null)
+                    if (!submission.IsStarted)
                     {
                         continue;
                     }
 
-                    _resultsCache.AddResult(new BuildResult(submission.BuildRequest, shutdownPacket.Exception ?? new BuildAbortedException()));
+                    if (submission is BuildSubmission buildSubmission && buildSubmission.BuildRequest != null)
+                    {
+                        _resultsCache!.AddResult(new BuildResult(buildSubmission.BuildRequest,
+                            shutdownPacket.Exception ?? new BuildAbortedException()));
+                    }
                 }
 
-                _scheduler.ReportBuildAborted(node);
+                _scheduler!.ReportBuildAborted(node);
             }
 
             CheckForActiveNodesAndCleanUpSubmissions();
@@ -2549,7 +2508,7 @@ private void HandleNodeShutdown(int node, NodeShutdown shutdownPacket)
         private void HandleFileAccessReport(int nodeId, FileAccessReport fileAccessReport)
         {
 #if FEATURE_REPORTFILEACCESSES
-            if (_buildParameters.ReportFileAccesses)
+            if (_buildParameters!.ReportFileAccesses)
             {
                 ((FileAccessManager)((IBuildComponentHost)this).GetComponent(BuildComponentType.FileAccessManager)).ReportFileAccess(fileAccessReport.FileAccessData, nodeId);
             }
@@ -2564,7 +2523,7 @@ private void HandleFileAccessReport(int nodeId, FileAccessReport fileAccessRepor
         private void HandleProcessReport(int nodeId, ProcessReport processReport)
         {
 #if FEATURE_REPORTFILEACCESSES
-            if (_buildParameters.ReportFileAccesses)
+            if (_buildParameters!.ReportFileAccesses)
             {
                 ((FileAccessManager)((IBuildComponentHost)this).GetComponent(BuildComponentType.FileAccessManager)).ReportProcess(processReport.ProcessData, nodeId);
             }
@@ -2583,22 +2542,19 @@ private void CheckForActiveNodesAndCleanUpSubmissions()
 
             if (_activeNodes.Count == 0)
             {
-                var submissions = new List<BuildSubmission>(_buildSubmissions.Values);
-                foreach (BuildSubmission submission in submissions)
+                var submissions = new List<BuildSubmissionBase>(_buildSubmissions.Values);
+                foreach (BuildSubmissionBase submission in submissions)
                 {
                     // The submission has not started do not add it to the results cache
-                    if (submission.BuildRequest == null)
+                    if (!submission.IsStarted)
                     {
                         continue;
                     }
 
-                    // UNDONE: (stability) It might be best to trigger the logging service to shut down here,
-                    //         since the full build is complete.  This would allow us to ensure all logging messages have been
-                    //         drained and all submissions can complete their logging requirements.
-                    BuildResult result = _resultsCache.GetResultsForConfiguration(submission.BuildRequest.ConfigurationId) ??
-                                         new BuildResult(submission.BuildRequest, new BuildAbortedException());
-
-                    submission.CompleteResults(result);
+                    if (!CompleteSubmissionFromCache(submission))
+                    {
+                        submission.CompleteResultsWithException(new BuildAbortedException());
+                    }
 
                     // If we never received a project started event, consider logging complete anyhow, since the nodes have
                     // shut down.
@@ -2607,21 +2563,23 @@ private void CheckForActiveNodesAndCleanUpSubmissions()
                     CheckSubmissionCompletenessAndRemove(submission);
                 }
 
-                var graphSubmissions = new List<GraphBuildSubmission>(_graphBuildSubmissions.Values);
-                foreach (GraphBuildSubmission submission in graphSubmissions)
-                {
-                    if (submission.IsStarted)
-                    {
-                        continue;
-                    }
-
-                    submission.CompleteResults(new GraphBuildResult(submission.SubmissionId, new BuildAbortedException()));
+                _noNodesActiveEvent?.Set();
+            }
+        }
 
-                    CheckSubmissionCompletenessAndRemove(submission);
+        private bool CompleteSubmissionFromCache(BuildSubmissionBase submissionBase)
+        {
+            if (submissionBase is BuildSubmission submission)
+            {
+                BuildResult? result = submission.BuildRequest == null ? null : _resultsCache?.GetResultsForConfiguration(submission.BuildRequest.ConfigurationId);
+                if (result != null)
+                {
+                    submission.CompleteResults(result);
+                    return true;
                 }
-
-                _noNodesActiveEvent.Set();
             }
+
+            return false;
         }
 
         /// <summary>
@@ -2639,22 +2597,22 @@ private void PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)
                         break;
 
                     case ScheduleActionType.SubmissionComplete:
-                        if (_buildParameters.DetailedSummary)
+                        if (_buildParameters!.DetailedSummary)
                         {
-                            _scheduler.WriteDetailedSummary(response.BuildResult.SubmissionId);
+                            _scheduler!.WriteDetailedSummary(response.BuildResult.SubmissionId);
                         }
 
-                        ReportResultsToSubmission(response.BuildResult);
+                        ReportResultsToSubmission<BuildRequestData, BuildResult>(response.BuildResult);
                         break;
 
                     case ScheduleActionType.CircularDependency:
                     case ScheduleActionType.ResumeExecution:
                     case ScheduleActionType.ReportResults:
-                        _nodeManager.SendData(response.NodeId, response.Unblocker);
+                        _nodeManager!.SendData(response.NodeId, response.Unblocker);
                         break;
 
                     case ScheduleActionType.CreateNode:
-                        IList<NodeInfo> newNodes = _nodeManager.CreateNodes(GetNodeConfiguration(), response.RequiredNodeType, response.NumberOfNodesToCreate);
+                        IList<NodeInfo> newNodes = _nodeManager!.CreateNodes(GetNodeConfiguration(), response.RequiredNodeType, response.NumberOfNodesToCreate);
 
                         if (newNodes?.Count != response.NumberOfNodesToCreate || newNodes.Any(n => n == null))
                         {
@@ -2666,11 +2624,11 @@ private void PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)
 
                         foreach (var node in newNodes)
                         {
-                            _noNodesActiveEvent.Reset();
+                            _noNodesActiveEvent?.Reset();
                             _activeNodes.Add(node.NodeId);
                         }
 
-                        IEnumerable<ScheduleResponse> newResponses = _scheduler.ReportNodesCreated(newNodes);
+                        IEnumerable<ScheduleResponse> newResponses = _scheduler!.ReportNodesCreated(newNodes);
                         PerformSchedulingActions(newResponses);
 
                         break;
@@ -2683,15 +2641,15 @@ private void PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)
                             // of which nodes have had configurations specifically assigned to them for building.  However, a node may
                             // have created a configuration based on a build request it needs to wait on.  In this
                             // case we need not send the configuration since it will already have been mapped earlier.
-                            if (!_nodeIdToKnownConfigurations.TryGetValue(response.NodeId, out HashSet<int> configurationsOnNode) ||
+                            if (!_nodeIdToKnownConfigurations.TryGetValue(response.NodeId, out HashSet<int>? configurationsOnNode) ||
                                !configurationsOnNode.Contains(response.BuildRequest.ConfigurationId))
                             {
-                                IConfigCache configCache = _componentFactories.GetComponent(BuildComponentType.ConfigCache) as IConfigCache;
-                                _nodeManager.SendData(response.NodeId, configCache[response.BuildRequest.ConfigurationId]);
+                                IConfigCache configCache = _componentFactories.GetComponent<IConfigCache>(BuildComponentType.ConfigCache);
+                                _nodeManager!.SendData(response.NodeId, configCache[response.BuildRequest.ConfigurationId]);
                             }
                         }
 
-                        _nodeManager.SendData(response.NodeId, response.BuildRequest);
+                        _nodeManager!.SendData(response.NodeId, response.BuildRequest);
                         break;
 
                     default:
@@ -2701,15 +2659,15 @@ private void PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)
             }
         }
 
-        /// <summary>
-        /// Completes a submission using the specified overall results.
-        /// </summary>
-        private void ReportResultsToSubmission(BuildResult result)
+        internal void ReportResultsToSubmission<TRequestData, TResultData>(TResultData result)
+            where TRequestData : BuildRequestDataBase
+            where TResultData : BuildResultBase
         {
             lock (_syncLock)
             {
                 // The build submission has not already been completed.
-                if (_buildSubmissions.TryGetValue(result.SubmissionId, out BuildSubmission submission))
+                if (_buildSubmissions.TryGetValue(result.SubmissionId, out BuildSubmissionBase? submissionBase) &&
+                    submissionBase is BuildSubmissionBase<TRequestData, TResultData> submission)
                 {
                     /* If the request failed because we caught an exception from the loggers, we can assume we will receive no more logging messages for
                      * this submission, therefore set the logging as complete. InternalLoggerExceptions are unhandled exceptions from the logger. If the logger author does
@@ -2720,31 +2678,13 @@ private void ReportResultsToSubmission(BuildResult result)
                      *
                      * If any other exception happened and logging is not completed, then go ahead and complete it now since this is the last place to do it.
                      * Otherwise the submission would remain uncompleted, potentially causing hangs (EndBuild waiting on all BuildSubmissions, users waiting on BuildSubmission, or expecting a callback, etc)
-                    */
+                     */
                     if (!submission.LoggingCompleted && result.Exception != null)
                     {
                         submission.CompleteLogging();
                     }
 
                     submission.CompleteResults(result);
-
-                    CheckSubmissionCompletenessAndRemove(submission);
-                }
-            }
-        }
-
-        /// <summary>
-        /// Completes a submission using the specified overall results.
-        /// </summary>
-        private void ReportResultsToSubmission(GraphBuildResult result)
-        {
-            lock (_syncLock)
-            {
-                // The build submission has not already been completed.
-                if (_graphBuildSubmissions.TryGetValue(result.SubmissionId, out GraphBuildSubmission submission))
-                {
-                    submission.CompleteResults(result);
-
                     CheckSubmissionCompletenessAndRemove(submission);
                 }
             }
@@ -2753,42 +2693,21 @@ private void ReportResultsToSubmission(GraphBuildResult result)
         /// <summary>
         /// Determines if the submission is fully completed.
         /// </summary>
-        private void CheckSubmissionCompletenessAndRemove(BuildSubmission submission)
-        {
-            lock (_syncLock)
-            {
-                // If the submission has completed or never started, remove it.
-                if (submission.IsCompleted || submission.BuildRequest == null)
-                {
-                    _overallBuildSuccess &= (submission.BuildResult?.OverallResult == BuildResultCode.Success);
-                    _buildSubmissions.Remove(submission.SubmissionId);
-
-                    // Clear all cached SDKs for the submission
-                    SdkResolverService.ClearCache(submission.SubmissionId);
-                }
-
-                CheckAllSubmissionsComplete(submission.BuildRequestData?.Flags);
-            }
-        }
-
-        /// <summary>
-        /// Determines if the submission is fully completed.
-        /// </summary>
-        private void CheckSubmissionCompletenessAndRemove(GraphBuildSubmission submission)
+        private void CheckSubmissionCompletenessAndRemove(BuildSubmissionBase submission)
         {
             lock (_syncLock)
             {
                 // If the submission has completed or never started, remove it.
                 if (submission.IsCompleted || !submission.IsStarted)
                 {
-                    _overallBuildSuccess &= submission.BuildResult?.OverallResult == BuildResultCode.Success;
-                    _graphBuildSubmissions.Remove(submission.SubmissionId);
+                    _overallBuildSuccess &= (submission.BuildResultBase?.OverallResult == BuildResultCode.Success);
+                    _buildSubmissions.Remove(submission.SubmissionId);
 
                     // Clear all cached SDKs for the submission
                     SdkResolverService.ClearCache(submission.SubmissionId);
                 }
 
-                CheckAllSubmissionsComplete(submission.BuildRequestData?.Flags);
+                CheckAllSubmissionsComplete(submission.BuildRequestDataBase.Flags);
             }
         }
 
@@ -2796,7 +2715,7 @@ private void CheckAllSubmissionsComplete(BuildRequestDataFlags? flags)
         {
             Debug.Assert(Monitor.IsEntered(_syncLock));
 
-            if (_buildSubmissions.Count == 0 && _graphBuildSubmissions.Count == 0)
+            if (_buildSubmissions.Count == 0)
             {
                 if (flags.HasValue && flags.Value.HasFlag(BuildRequestDataFlags.ClearCachesAfterBuild))
                 {
@@ -2811,7 +2730,7 @@ private void CheckAllSubmissionsComplete(BuildRequestDataFlags? flags)
 #endif
                 }
 
-                _noActiveSubmissionsEvent.Set();
+                _noActiveSubmissionsEvent?.Set();
             }
         }
 
@@ -2825,7 +2744,7 @@ private NodeConfiguration GetNodeConfiguration()
             if (_nodeConfiguration == null)
             {
                 // Get the remote loggers
-                ILoggingService loggingService = ((IBuildComponentHost)this).GetComponent(BuildComponentType.LoggingService) as ILoggingService;
+                ILoggingService loggingService = ((IBuildComponentHost)this).GetComponent<ILoggingService>(BuildComponentType.LoggingService);
                 var remoteLoggers = new List<LoggerDescription>(loggingService.LoggerDescriptions);
 
                 _nodeConfiguration = new NodeConfiguration(
@@ -2862,40 +2781,30 @@ private void OnThreadException(Exception e)
                     }
 
                     _threadException = ExceptionDispatchInfo.Capture(e);
-                    var submissions = new List<BuildSubmission>(_buildSubmissions.Values);
-                    foreach (BuildSubmission submission in submissions)
+                    var submissions = new List<BuildSubmissionBase>(_buildSubmissions.Values);
+                    foreach (BuildSubmissionBase submission in submissions)
                     {
                         // Submission has not started
-                        if (submission.BuildRequest == null)
+                        if (!submission.IsStarted)
                         {
                             continue;
                         }
 
                         // Attach the exception to this submission if it does not already have an exception associated with it
-                        if (!submission.IsCompleted && submission.BuildResult != null && submission.BuildResult.Exception == null)
+                        if (!submission.IsCompleted && submission.BuildResultBase != null && submission.BuildResultBase.Exception == null)
                         {
-                            submission.BuildResult.Exception = e;
+                            submission.BuildResultBase.Exception = e;
                         }
                         submission.CompleteLogging();
-                        submission.CompleteResults(new BuildResult(submission.BuildRequest, e));
-
-                        CheckSubmissionCompletenessAndRemove(submission);
-                    }
 
-                    var graphSubmissions = new List<GraphBuildSubmission>(_graphBuildSubmissions.Values);
-                    foreach (GraphBuildSubmission submission in graphSubmissions)
-                    {
-                        if (!submission.IsStarted)
+                        if (submission.BuildResultBase != null)
                         {
-                            continue;
+                            submission.CheckForCompletion();
                         }
-
-                        // Attach the exception to this submission if it does not already have an exception associated with it
-                        if (!submission.IsCompleted && submission.BuildResult != null && submission.BuildResult.Exception == null)
+                        else
                         {
-                            submission.BuildResult.Exception = e;
+                            submission.CompleteResultsWithException(e);
                         }
-                        submission.CompleteResults(submission.BuildResult ?? new GraphBuildResult(submission.SubmissionId, e));
 
                         CheckSubmissionCompletenessAndRemove(submission);
                     }
@@ -2908,7 +2817,7 @@ private void OnThreadException(Exception e)
         /// </summary>
         private void OnLoggingThreadException(Exception e)
         {
-            _workQueue.Post(() => OnThreadException(e));
+            _workQueue!.Post(() => OnThreadException(e));
         }
 
         /// <summary>
@@ -2916,13 +2825,13 @@ private void OnLoggingThreadException(Exception e)
         /// </summary>
         private void OnProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
-            _workQueue.Post(() =>
+            _workQueue!.Post(() =>
             {
                 lock (_syncLock)
                 {
-                    if (_projectStartedEvents.TryGetValue(e.BuildEventContext.SubmissionId, out var originalArgs))
+                    if (_projectStartedEvents.TryGetValue(e.BuildEventContext!.SubmissionId, out var originalArgs))
                     {
-                        if (originalArgs.BuildEventContext.Equals(e.BuildEventContext))
+                        if (originalArgs.BuildEventContext!.Equals(e.BuildEventContext))
                         {
                             _projectStartedEvents.Remove(e.BuildEventContext.SubmissionId);
                             if (_buildSubmissions.TryGetValue(e.BuildEventContext.SubmissionId, out var submission))
@@ -2941,11 +2850,11 @@ private void OnProjectFinished(object sender, ProjectFinishedEventArgs e)
         /// </summary>
         private void OnProjectStarted(object sender, ProjectStartedEventArgs e)
         {
-            _workQueue.Post(() =>
+            _workQueue!.Post(() =>
             {
                 lock (_syncLock)
                 {
-                    if (!_projectStartedEvents.ContainsKey(e.BuildEventContext.SubmissionId))
+                    if (!_projectStartedEvents.ContainsKey(e.BuildEventContext!.SubmissionId))
                     {
                         _projectStartedEvents[e.BuildEventContext.SubmissionId] = e;
                     }
@@ -2967,15 +2876,15 @@ internal void EnableBuildCheck()
         /// Creates a logging service around the specified set of loggers.
         /// </summary>
         private ILoggingService CreateLoggingService(
-            IEnumerable<ILogger> loggers,
-            IEnumerable<ForwardingLoggerRecord> forwardingLoggers,
+            IEnumerable<ILogger>? loggers,
+            IEnumerable<ForwardingLoggerRecord>? forwardingLoggers,
             ISet<string> warningsAsErrors,
             ISet<string> warningsNotAsErrors,
             ISet<string> warningsAsMessages)
         {
             Debug.Assert(Monitor.IsEntered(_syncLock));
 
-            int cpuCount = _buildParameters.MaxNodeCount;
+            int cpuCount = _buildParameters!.MaxNodeCount;
 
             LoggerMode loggerMode = cpuCount == 1 && _buildParameters.UseSynchronousLogging
                                         ? LoggerMode.Synchronous
@@ -3054,11 +2963,11 @@ private ILoggingService CreateLoggingService(
 
             // We need to register SOME logger if we don't have any. This ensures the out of proc nodes will still send us message,
             // ensuring we receive project started and finished events.
-            static List<ForwardingLoggerRecord> ProcessForwardingLoggers(IEnumerable<ForwardingLoggerRecord> forwarders)
+            static List<ForwardingLoggerRecord> ProcessForwardingLoggers(IEnumerable<ForwardingLoggerRecord>? forwarders)
             {
                 Type configurableLoggerType = typeof(ConfigurableForwardingLogger);
                 string engineAssemblyName = configurableLoggerType.GetTypeInfo().Assembly.GetName().FullName;
-                string configurableLoggerName = configurableLoggerType.FullName;
+                string configurableLoggerName = configurableLoggerType.FullName!;
 
                 if (forwarders == null)
                 {
@@ -3077,7 +2986,7 @@ static List<ForwardingLoggerRecord> ProcessForwardingLoggers(IEnumerable<Forward
 
                 // Those are the cases where we are sure that we have the forwarding setup as need.
                 if (result.Any(l =>
-                        l.ForwardingLoggerDescription.Name.Contains(typeof(CentralForwardingLogger).FullName)
+                        l.ForwardingLoggerDescription.Name.Contains(typeof(CentralForwardingLogger).FullName!)
                         ||
                         (l.ForwardingLoggerDescription.Name.Contains(configurableLoggerName)
                          &&
@@ -3092,7 +3001,7 @@ static List<ForwardingLoggerRecord> ProcessForwardingLoggers(IEnumerable<Forward
                 }
 
                 // In case there is a ConfigurableForwardingLogger, that is not configured as we'd need - we can adjust the config
-                ForwardingLoggerRecord configurableLogger = result.FirstOrDefault(l =>
+                ForwardingLoggerRecord? configurableLogger = result.FirstOrDefault(l =>
                     l.ForwardingLoggerDescription.Name.Contains(configurableLoggerName));
 
                 // If there is not - we need to add our own.
@@ -3122,7 +3031,7 @@ ForwardingLoggerRecord CreateMinimalForwarder()
             }
         }
 
-        private static void LogDeferredMessages(ILoggingService loggingService, IEnumerable<DeferredBuildMessage> deferredBuildMessages)
+        private static void LogDeferredMessages(ILoggingService loggingService, IEnumerable<DeferredBuildMessage>? deferredBuildMessages)
         {
             if (deferredBuildMessages == null)
             {
@@ -3147,7 +3056,7 @@ private static void LogDeferredMessages(ILoggingService loggingService, IEnumera
         /// <typeparam name="I">The instance-type of packet being expected</typeparam>
         private static I ExpectPacketType<I>(INodePacket packet, NodePacketType expectedType) where I : class, INodePacket
         {
-            I castPacket = packet as I;
+            I? castPacket = packet as I;
 
             // PERF: Not using VerifyThrow here to avoid boxing of expectedType.
             if (castPacket == null)
@@ -3155,13 +3064,13 @@ private static I ExpectPacketType<I>(INodePacket packet, NodePacketType expected
                 ErrorUtilities.ThrowInternalError("Incorrect packet type: {0} should have been {1}", packet.Type, expectedType);
             }
 
-            return castPacket;
+            return castPacket!;
         }
 
         /// <summary>
         ///  Shutdown the logging service
         /// </summary>
-        private void ShutdownLoggingService(ILoggingService loggingService)
+        private void ShutdownLoggingService(ILoggingService? loggingService)
         {
             try
             {
@@ -3177,7 +3086,7 @@ private void ShutdownLoggingService(ILoggingService loggingService)
             {
                 // Even if an exception is thrown, we want to make sure we null out the logging service so that
                 // we don't try to shut it down again in some other cleanup code.
-                _componentFactories.ReplaceFactory(BuildComponentType.LoggingService, (IBuildComponent)null);
+                _componentFactories.ReplaceFactory(BuildComponentType.LoggingService, (IBuildComponent?)null);
             }
         }
 
@@ -3322,7 +3231,7 @@ private void CancelAndMarkAsFailure()
             // CancelAllSubmissions also ends up setting _shuttingDown and _overallBuildSuccess but it does so in a separate thread to avoid deadlocks.
             // This might cause a race with the first builds which might miss the shutdown update and succeed instead of fail.
             _shuttingDown = true;
-            _executionCancellationTokenSource.Cancel();
+            _executionCancellationTokenSource?.Cancel();
             _overallBuildSuccess = false;
         }
 
@@ -3345,7 +3254,7 @@ public LoggerVerbosity Verbosity
             /// <summary>
             /// The logger parameters.
             /// </summary>
-            public string Parameters
+            public string? Parameters
             {
                 get => String.Empty;
                 set { }
diff --git a/src/Build/BackEnd/BuildManager/BuildRequestData.cs b/src/Build/BackEnd/BuildManager/BuildRequestData.cs
index b8ae83411b2..510498ed694 100644
--- a/src/Build/BackEnd/BuildManager/BuildRequestData.cs
+++ b/src/Build/BackEnd/BuildManager/BuildRequestData.cs
@@ -2,13 +2,15 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections;
 using System.Collections.Generic;
+using System.Collections.Immutable;
+using System.Linq;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Shared;
 
-#nullable disable
-
 namespace Microsoft.Build.Execution
 {
     /// <summary>
@@ -87,9 +89,9 @@ public enum BuildRequestDataFlags
     }
 
     /// <summary>
-    /// BuildRequestData encapsulates all of the data needed to submit a build request.
+    /// BuildRequestData encapsulates all the data needed to submit a build request.
     /// </summary>
-    public class BuildRequestData
+    public class BuildRequestData : BuildRequestData<BuildRequestData, BuildResult>
     {
         /// <summary>
         /// Constructs a BuildRequestData for build requests based on project instances.
@@ -119,7 +121,7 @@ public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild
         /// <param name="targetsToBuild">The targets to build.</param>
         /// <param name="hostServices">The host services to use, if any.  May be null.</param>
         /// <param name="flags">Flags controlling this build request.</param>
-        public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags)
+        public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild, HostServices? hostServices, BuildRequestDataFlags flags)
             : this(projectInstance, targetsToBuild, hostServices, flags, null)
         {
         }
@@ -132,8 +134,8 @@ public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild
         /// <param name="hostServices">The host services to use, if any.  May be null.</param>
         /// <param name="flags">Flags controlling this build request.</param>
         /// <param name="propertiesToTransfer">The list of properties whose values should be transferred from the project to any out-of-proc node.</param>
-        public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags, IEnumerable<string> propertiesToTransfer)
-            : this(targetsToBuild, hostServices, flags)
+        public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild, HostServices? hostServices, BuildRequestDataFlags flags, IEnumerable<string>? propertiesToTransfer)
+            : this(targetsToBuild, hostServices, flags, projectInstance.FullPath)
         {
             ErrorUtilities.VerifyThrowArgumentNull(projectInstance, nameof(projectInstance));
 
@@ -144,7 +146,6 @@ public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild
 
             ProjectInstance = projectInstance;
 
-            ProjectFullPath = projectInstance.FullPath;
             GlobalPropertiesDictionary = projectInstance.GlobalPropertiesDictionary;
             ExplicitlySpecifiedToolsVersion = projectInstance.ExplicitToolsVersion;
             if (propertiesToTransfer != null)
@@ -162,7 +163,7 @@ public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild
         /// <param name="flags">Flags controlling this build request.</param>
         /// <param name="propertiesToTransfer">The list of properties whose values should be transferred from the project to any out-of-proc node.</param>
         /// <param name="requestedProjectState">A <see cref="Execution.RequestedProjectState"/> describing properties, items, and metadata that should be returned. Requires setting <see cref="BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild"/>.</param>
-        public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags, IEnumerable<string> propertiesToTransfer, RequestedProjectState requestedProjectState)
+        public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild, HostServices? hostServices, BuildRequestDataFlags flags, IEnumerable<string>? propertiesToTransfer, RequestedProjectState requestedProjectState)
             : this(projectInstance, targetsToBuild, hostServices, flags, propertiesToTransfer)
         {
             ErrorUtilities.VerifyThrowArgumentNull(requestedProjectState, nameof(requestedProjectState));
@@ -179,7 +180,7 @@ public BuildRequestData(ProjectInstance projectInstance, string[] targetsToBuild
         /// <param name="toolsVersion">The tools version to use for the build.  May be null.</param>
         /// <param name="targetsToBuild">The targets to build.</param>
         /// <param name="hostServices">The host services to use.  May be null.</param>
-        public BuildRequestData(string projectFullPath, IDictionary<string, string> globalProperties, string toolsVersion, string[] targetsToBuild, HostServices hostServices)
+        public BuildRequestData(string projectFullPath, IDictionary<string, string?> globalProperties, string? toolsVersion, string[] targetsToBuild, HostServices? hostServices)
             : this(projectFullPath, globalProperties, toolsVersion, targetsToBuild, hostServices, BuildRequestDataFlags.None)
         {
         }
@@ -194,8 +195,8 @@ public BuildRequestData(string projectFullPath, IDictionary<string, string> glob
         /// <param name="hostServices">The host services to use.  May be null.</param>
         /// <param name="flags">The <see cref="BuildRequestDataFlags"/> to use.</param>
         /// <param name="requestedProjectState">A <see cref="Execution.RequestedProjectState"/> describing properties, items, and metadata that should be returned. Requires setting <see cref="BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild"/>.</param>
-        public BuildRequestData(string projectFullPath, IDictionary<string, string> globalProperties,
-            string toolsVersion, string[] targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags,
+        public BuildRequestData(string projectFullPath, IDictionary<string, string?> globalProperties,
+            string? toolsVersion, string[] targetsToBuild, HostServices? hostServices, BuildRequestDataFlags flags,
             RequestedProjectState requestedProjectState)
             : this(projectFullPath, globalProperties, toolsVersion, targetsToBuild, hostServices, flags)
         {
@@ -213,15 +214,14 @@ public BuildRequestData(string projectFullPath, IDictionary<string, string> glob
         /// <param name="targetsToBuild">The targets to build.</param>
         /// <param name="hostServices">The host services to use.  May be null.</param>
         /// <param name="flags">The <see cref="BuildRequestDataFlags"/> to use.</param>
-        public BuildRequestData(string projectFullPath, IDictionary<string, string> globalProperties, string toolsVersion, string[] targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags)
-            : this(targetsToBuild, hostServices, flags)
+        public BuildRequestData(string projectFullPath, IDictionary<string, string?> globalProperties, string? toolsVersion, string[] targetsToBuild, HostServices? hostServices, BuildRequestDataFlags flags)
+            : this(targetsToBuild, hostServices, flags, FileUtilities.NormalizePath(projectFullPath)!)
         {
             ErrorUtilities.VerifyThrowArgumentLength(projectFullPath, nameof(projectFullPath));
             ErrorUtilities.VerifyThrowArgumentNull(globalProperties, nameof(globalProperties));
 
-            ProjectFullPath = FileUtilities.NormalizePath(projectFullPath);
             GlobalPropertiesDictionary = new PropertyDictionary<ProjectPropertyInstance>(globalProperties.Count);
-            foreach (KeyValuePair<string, string> propertyPair in globalProperties)
+            foreach (KeyValuePair<string, string?> propertyPair in globalProperties)
             {
                 GlobalPropertiesDictionary.Set(ProjectPropertyInstance.Create(propertyPair.Key, propertyPair.Value));
             }
@@ -232,13 +232,10 @@ public BuildRequestData(string projectFullPath, IDictionary<string, string> glob
         /// <summary>
         /// Common constructor.
         /// </summary>
-        private BuildRequestData(string[] targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags)
+        private BuildRequestData(string[] targetsToBuild, HostServices? hostServices, BuildRequestDataFlags flags, string projectFullPath)
+            : base(targetsToBuild, flags, hostServices)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(targetsToBuild, nameof(targetsToBuild));
-
-            HostServices = hostServices;
-            TargetNames = new List<string>(targetsToBuild);
-            Flags = flags;
+            ProjectFullPath = projectFullPath;
         }
 
         /// <summary>
@@ -246,7 +243,7 @@ private BuildRequestData(string[] targetsToBuild, HostServices hostServices, Bui
         /// May be null.
         /// </summary>
         /// <value>The project instance.</value>
-        public ProjectInstance ProjectInstance
+        public ProjectInstance? ProjectInstance
         {
             get;
         }
@@ -255,16 +252,12 @@ public ProjectInstance ProjectInstance
         /// <value>The project file to be built.</value>
         public string ProjectFullPath { get; internal set; }
 
-        /// <summary>
-        /// The name of the targets to build.
-        /// </summary>
-        /// <value>An array of targets in the project to be built.</value>
-        public ICollection<string> TargetNames { get; }
+        internal override BuildSubmissionBase<BuildRequestData, BuildResult> CreateSubmission(BuildManager buildManager,
+            int submissionId, BuildRequestData requestData,
+            bool legacyThreadingSemantics) =>
+            new BuildSubmission(buildManager, submissionId, requestData, legacyThreadingSemantics);
 
-        /// <summary>
-        /// Extra flags for this BuildRequest.
-        /// </summary>
-        public BuildRequestDataFlags Flags { get; }
+        public override IEnumerable<string> EntryProjectsFullPath => ProjectFullPath.AsSingleItemEnumerable();
 
         /// <summary>
         /// The global properties to use.
@@ -274,26 +267,23 @@ public ProjectInstance ProjectInstance
             (ICollection<ProjectPropertyInstance>)ReadOnlyEmptyCollection<ProjectPropertyInstance>.Instance :
             new ReadOnlyCollection<ProjectPropertyInstance>(GlobalPropertiesDictionary);
 
-        /// <summary>
-        /// The explicitly requested tools version to use.
-        /// </summary>
-        public string ExplicitlySpecifiedToolsVersion { get; }
+        public override bool IsGraphRequest => false;
 
         /// <summary>
-        /// Gets the HostServices object for this request.
+        /// The explicitly requested tools version to use.
         /// </summary>
-        public HostServices HostServices { get; }
+        public string? ExplicitlySpecifiedToolsVersion { get; }
 
         /// <summary>
         /// Returns a list of properties to transfer out of proc for the build.
         /// </summary>
-        public IEnumerable<string> PropertiesToTransfer { get; }
+        public IEnumerable<string>? PropertiesToTransfer { get; }
 
         /// <summary>
         /// Returns the properties, items, and metadata that will be returned
         /// by this build.
         /// </summary>
-        public RequestedProjectState RequestedProjectState { get; }
+        public RequestedProjectState? RequestedProjectState { get; }
 
         /// <summary>
         /// Whether the tools version used originated from an explicit specification,
@@ -304,6 +294,12 @@ public ProjectInstance ProjectInstance
         /// <summary>
         /// Returns the global properties as a dictionary.
         /// </summary>
-        internal PropertyDictionary<ProjectPropertyInstance> GlobalPropertiesDictionary { get; }
+        internal PropertyDictionary<ProjectPropertyInstance>? GlobalPropertiesDictionary { get; }
+
+        private IReadOnlyDictionary<string, string?>? _globalPropertiesLookup;
+
+        /// <inheritdoc cref="BuildRequestDataBase"/>
+        public override IReadOnlyDictionary<string, string?> GlobalPropertiesLookup => _globalPropertiesLookup ??=
+            Execution.GlobalPropertiesLookup.ToGlobalPropertiesLookup(GlobalPropertiesDictionary);
     }
 }
diff --git a/src/Build/BackEnd/BuildManager/BuildRequestDataBase.cs b/src/Build/BackEnd/BuildManager/BuildRequestDataBase.cs
new file mode 100644
index 00000000000..c31381c083d
--- /dev/null
+++ b/src/Build/BackEnd/BuildManager/BuildRequestDataBase.cs
@@ -0,0 +1,67 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Execution
+{
+    public abstract class BuildRequestDataBase
+    {
+        protected BuildRequestDataBase(
+            ICollection<string> targetNames,
+            BuildRequestDataFlags flags,
+            HostServices? hostServices)
+        {
+            ErrorUtilities.VerifyThrowArgumentNull(targetNames, nameof(targetNames));
+            foreach (string targetName in targetNames)
+            {
+                ErrorUtilities.VerifyThrowArgumentNull(targetName, "target");
+            }
+
+            TargetNames = new List<string>(targetNames);
+            Flags = flags;
+            HostServices = hostServices;
+        }
+
+        public abstract IEnumerable<string> EntryProjectsFullPath { get; }
+
+        /// <summary>
+        /// The name of the targets to build.
+        /// </summary>
+        /// <value>An array of targets in the project to be built.</value>
+        public ICollection<string> TargetNames { get; protected set; }
+
+        /// <summary>
+        /// Extra flags for this BuildRequest.
+        /// </summary>
+        public BuildRequestDataFlags Flags { get; protected set; }
+
+        /// <summary>
+        /// Gets the global properties to use for this entry point.
+        /// </summary>
+        public abstract IReadOnlyDictionary<string, string?> GlobalPropertiesLookup { get; }
+
+        public abstract bool IsGraphRequest { get; }
+
+        /// <summary>
+        /// Gets the HostServices object for this request.
+        /// </summary>
+        public HostServices? HostServices { get; }
+    }
+
+    public abstract class BuildRequestData<TRequestData, TResultData> : BuildRequestDataBase
+        where TRequestData : BuildRequestData<TRequestData, TResultData>
+        where TResultData : BuildResultBase
+    {
+        protected BuildRequestData(
+            ICollection<string> targetNames,
+            BuildRequestDataFlags flags,
+            HostServices? hostServices)
+            : base(targetNames, flags, hostServices)
+        { }
+
+        internal abstract BuildSubmissionBase<TRequestData, TResultData> CreateSubmission(
+            BuildManager buildManager, int submissionId, TRequestData requestData, bool legacyThreadingSemantics);
+    }
+}
diff --git a/src/Build/BackEnd/BuildManager/BuildSubmission.cs b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
index ca2147dfae2..77def07e7bb 100644
--- a/src/Build/BackEnd/BuildManager/BuildSubmission.cs
+++ b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
@@ -7,8 +7,6 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 
-#nullable disable
-
 namespace Microsoft.Build.Execution
 {
     /// <summary>
@@ -17,104 +15,170 @@ namespace Microsoft.Build.Execution
     /// <remarks>
     /// When this delegate is invoked, the WaitHandle on the BuildSubmission will have been be signalled and the OverallBuildResult will be valid.
     /// </remarks>
-    public delegate void BuildSubmissionCompleteCallback(BuildSubmission submission);
-
-    /// <summary>
-    /// A BuildSubmission represents an build request which has been submitted to the BuildManager for processing.  It may be used to
-    /// execute synchronous or asynchronous build requests and provides access to the results upon completion.
-    /// </summary>
-    /// <remarks>
-    /// This class is thread-safe.
-    /// </remarks>
-    public class BuildSubmission
+    internal delegate void BuildSubmissionCompleteCallbackInternal<TRequestData, TResultData>(
+        BuildSubmissionBase<TRequestData, TResultData> submission)
+        where TRequestData : BuildRequestDataBase
+        where TResultData : BuildResultBase;
+
+    public abstract class BuildSubmissionBase<TRequestData, TResultData> : BuildSubmissionBase
+        where TRequestData : BuildRequestDataBase
+        where TResultData : BuildResultBase
     {
         /// <summary>
         /// The callback to invoke when the submission is complete.
         /// </summary>
-        private BuildSubmissionCompleteCallback _completionCallback;
+        private BuildSubmissionCompleteCallbackInternal<TRequestData, TResultData>? _completionCallback;
 
         /// <summary>
-        /// The completion event.
+        /// Constructor
         /// </summary>
-        private readonly ManualResetEvent _completionEvent;
+        protected internal BuildSubmissionBase(BuildManager buildManager, int submissionId, TRequestData requestData)
+            : base(buildManager, submissionId)
+        {
+            ErrorUtilities.VerifyThrowArgumentNull(requestData, nameof(requestData));
+            BuildRequestData = requestData;
+        }
+
+        //
+        // Unfortunately covariant overrides are not available for .NET 472,
+        //  so we have to use two set of properties for derived classes.
+        internal override BuildResultBase? BuildResultBase => BuildResult;
+        internal override BuildRequestDataBase BuildRequestDataBase => BuildRequestData;
 
         /// <summary>
-        /// Flag indicating if logging is done.
+        /// The results of the build per graph node.  Valid only after WaitHandle has become signalled.
         /// </summary>
-        internal bool LoggingCompleted { get; private set; }
+        public TResultData? BuildResult { get; set; }
 
         /// <summary>
-        /// True if it has been invoked
+        /// The BuildRequestData being used for this submission.
         /// </summary>
-        private int _completionInvoked;
+        internal TRequestData BuildRequestData { get; }
 
         /// <summary>
-        /// Flag indicating whether synchronous wait should support legacy threading semantics.
+        /// Starts the request and blocks until results are available.
         /// </summary>
-        private readonly bool _legacyThreadingSemantics;
+        /// <exception cref="InvalidOperationException">The request has already been started or is already complete.</exception>
+        public abstract TResultData Execute();
+
+        private protected void ExecuteAsync(
+            BuildSubmissionCompleteCallbackInternal<TRequestData, TResultData>? callback,
+            object? context,
+            bool allowMainThreadBuild)
+        {
+            ErrorUtilities.VerifyThrowInvalidOperation(!IsCompleted, "SubmissionAlreadyComplete");
+            _completionCallback = callback;
+            AsyncContext = context;
+            BuildManager.ExecuteSubmission(this, allowMainThreadBuild);
+        }
 
         /// <summary>
-        /// Constructor
+        /// Sets the event signaling that the build is complete.
         /// </summary>
-        internal BuildSubmission(BuildManager buildManager, int submissionId, BuildRequestData requestData, bool legacyThreadingSemantics)
+        internal void CompleteResults(TResultData result)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(buildManager, nameof(buildManager));
-            ErrorUtilities.VerifyThrowArgumentNull(requestData, nameof(requestData));
+            ErrorUtilities.VerifyThrowArgumentNull(result, nameof(result));
+            ErrorUtilities.VerifyThrow(result.SubmissionId == SubmissionId,
+                "GraphBuildResult's submission id doesn't match GraphBuildSubmission's");
 
-            BuildManager = buildManager;
-            SubmissionId = submissionId;
-            BuildRequestData = requestData;
-            _completionEvent = new ManualResetEvent(false);
-            LoggingCompleted = false;
-            _completionInvoked = 0;
-            _legacyThreadingSemantics = legacyThreadingSemantics;
+            BuildResult ??= result;
+
+            CheckForCompletion();
         }
 
-        /// <summary>
-        /// The BuildManager with which this submission is associated.
-        /// </summary>
-        public BuildManager BuildManager { get; }
+        protected internal abstract TResultData CreateFailedResult(Exception exception);
 
-        /// <summary>
-        /// An ID uniquely identifying this request from among other submissions within the same build.
-        /// </summary>
-        public int SubmissionId { get; }
+        internal override BuildResultBase CompleteResultsWithException(Exception exception)
+            => CompleteResults(exception);
 
-        /// <summary>
-        /// The asynchronous context provided to <see cref="BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback, object)"/>, if any.
-        /// </summary>
-        public Object AsyncContext { get; private set; }
+        private TResultData CompleteResults(Exception exception)
+        {
+            TResultData result = CreateFailedResult(exception);
+            CompleteResults(result);
+            return result;
+        }
 
         /// <summary>
-        /// A <see cref="System.Threading.WaitHandle"/> which will be signalled when the build is complete.  Valid after <see cref="BuildSubmission.Execute()"/> or <see cref="BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback, object)"/> returns, otherwise null.
+        /// Determines if we are completely done with this submission and can complete it so the user may access results.
         /// </summary>
-        public WaitHandle WaitHandle => _completionEvent;
+        protected internal override void CheckForCompletion()
+        {
+            if (BuildResult != null && LoggingCompleted)
+            {
+                bool hasCompleted = (Interlocked.Exchange(ref CompletionInvoked, 1) == 1);
+                if (!hasCompleted)
+                {
+                    OnCompletition();
 
-        /// <summary>
-        /// Returns true if this submission is complete.
-        /// </summary>
-        public bool IsCompleted => WaitHandle.WaitOne(new TimeSpan(0));
+                    CompletionEvent.Set();
 
+                    if (_completionCallback != null)
+                    {
+                        void Callback(object? state)
+                        {
+                            _completionCallback(this);
+                        }
+
+                        ThreadPoolExtensions.QueueThreadPoolWorkItemWithCulture(Callback, CultureInfo.CurrentCulture, CultureInfo.CurrentUICulture);
+                    }
+                }
+            }
+        }
+    }
+
+
+    /// <summary>
+    /// A callback used to receive notification that a build has completed.
+    /// </summary>
+    /// <remarks>
+    /// When this delegate is invoked, the WaitHandle on the BuildSubmission will have been be signalled and the OverallBuildResult will be valid.
+    /// </remarks>
+    public delegate void BuildSubmissionCompleteCallback(BuildSubmission submission);
+
+    /// <summary>
+    /// A BuildSubmission represents a build request which has been submitted to the BuildManager for processing.  It may be used to
+    /// execute synchronous or asynchronous build requests and provides access to the results upon completion.
+    /// </summary>
+    /// <remarks>
+    /// This class is thread-safe.
+    /// </remarks>
+    public class BuildSubmission : BuildSubmissionBase<BuildRequestData, BuildResult>
+    {
         /// <summary>
-        /// The result of the build.  Valid only after WaitHandle has become signalled.
+        /// Flag indicating whether synchronous wait should support legacy threading semantics.
         /// </summary>
-        public BuildResult BuildResult { get; set; }
+        private readonly bool _legacyThreadingSemantics;
 
         /// <summary>
-        /// The BuildRequestData being used for this submission.
+        /// The build request for execution.
         /// </summary>
-        internal BuildRequestData BuildRequestData { get; }
+        internal BuildRequest? BuildRequest { get; set; }
+
+        internal BuildSubmission(BuildManager buildManager, int submissionId, BuildRequestData requestData, bool legacyThreadingSemantics)
+            : base(buildManager, submissionId, requestData)
+        {
+            _legacyThreadingSemantics = legacyThreadingSemantics;
+        }
 
         /// <summary>
-        /// The build request for execution.
+        /// Starts the request asynchronously and immediately returns control to the caller.
         /// </summary>
-        internal BuildRequest BuildRequest { get; set; }
+        /// <exception cref="InvalidOperationException">The request has already been started or is already complete.</exception>
+        public void ExecuteAsync(BuildSubmissionCompleteCallback? callback, object? context)
+        {
+            void Clb(BuildSubmissionBase<BuildRequestData, BuildResult> submission)
+            {
+                callback?.Invoke((BuildSubmission)submission);
+            }
+
+            ExecuteAsync(Clb, context, allowMainThreadBuild: false);
+        }
 
         /// <summary>
         /// Starts the request and blocks until results are available.
         /// </summary>
         /// <exception cref="System.InvalidOperationException">The request has already been started or is already complete.</exception>
-        public BuildResult Execute()
+        public override BuildResult Execute()
         {
             LegacyThreadingData legacyThreadingData = ((IBuildComponentHost)BuildManager).LegacyThreadingData;
             legacyThreadingData.RegisterSubmissionForLegacyThread(SubmissionId);
@@ -131,89 +195,28 @@ public BuildResult Execute()
 
             legacyThreadingData.UnregisterSubmissionForLegacyThread(SubmissionId);
 
-            return BuildResult;
-        }
-
-        /// <summary>
-        /// Starts the request asynchronously and immediately returns control to the caller.
-        /// </summary>
-        /// <exception cref="System.InvalidOperationException">The request has already been started or is already complete.</exception>
-        public void ExecuteAsync(BuildSubmissionCompleteCallback callback, object context)
-        {
-            ExecuteAsync(callback, context, false);
-        }
-
-        /// <summary>
-        /// Sets the event signaling that the build is complete.
-        /// </summary>
-        internal void CompleteResults(BuildResult result)
-        {
-            ErrorUtilities.VerifyThrowArgumentNull(result, nameof(result));
-
-            // We verify that we got results from the same configuration, but not necessarily the same request, because we are
-            // rather flexible in how users are allowed to submit multiple requests for the same configuration.  In this case, the
-            // request id of the result will match the first request, even though it will contain results for all requests (including
-            // this one.)
-            ErrorUtilities.VerifyThrow(result.ConfigurationId == BuildRequest.ConfigurationId, "BuildResult doesn't match BuildRequest configuration");
+            ErrorUtilities.VerifyThrow(BuildResult != null,
+                "BuildResult is not populated after Execute is done.");
 
-            if (BuildResult == null)
-            {
-                BuildResult = result;
-            }
-
-            CheckForCompletion();
+            return BuildResult!;
         }
 
-        /// <summary>
-        /// Indicates that all logging events for this submission are complete.
-        /// </summary>
-        internal void CompleteLogging()
+        protected internal override BuildResult CreateFailedResult(Exception exception)
         {
-            LoggingCompleted = true;
-            CheckForCompletion();
+            ErrorUtilities.VerifyThrow(BuildRequest != null,
+                "BuildRequest is not populated while reporting failed result.");
+            return new(BuildRequest!, exception);
         }
+        
 
-        /// <summary>
-        /// Starts the request asynchronously and immediately returns control to the caller.
-        /// </summary>
-        /// <exception cref="System.InvalidOperationException">The request has already been started or is already complete.</exception>
-        private void ExecuteAsync(BuildSubmissionCompleteCallback callback, object context, bool allowMainThreadBuild)
+        protected internal override void OnCompletition()
         {
-            ErrorUtilities.VerifyThrowInvalidOperation(!IsCompleted, "SubmissionAlreadyComplete");
-            _completionCallback = callback;
-            AsyncContext = context;
-            BuildManager.ExecuteSubmission(this, allowMainThreadBuild);
-        }
-
-        /// <summary>
-        /// Determines if we are completely done with this submission and can complete it so the user may access results.
-        /// </summary>
-        private void CheckForCompletion()
-        {
-            if (BuildResult != null && LoggingCompleted)
+            // Did this submission have warnings elevated to errors? If so, mark it as
+            // failed even though it succeeded (with warnings--but they're errors).
+            if (BuildResult != null &&
+                ((IBuildComponentHost)BuildManager).LoggingService.HasBuildSubmissionLoggedErrors(BuildResult.SubmissionId))
             {
-                bool hasCompleted = (Interlocked.Exchange(ref _completionInvoked, 1) == 1);
-                if (!hasCompleted)
-                {
-                    // Did this submission have warnings elevated to errors? If so, mark it as
-                    // failed even though it succeeded (with warnings--but they're errors).
-                    if (((IBuildComponentHost)BuildManager).LoggingService.HasBuildSubmissionLoggedErrors(BuildResult.SubmissionId))
-                    {
-                        BuildResult.SetOverallResult(overallResult: false);
-                    }
-
-                    _completionEvent.Set();
-
-                    if (_completionCallback != null)
-                    {
-                        void Callback(object state)
-                        {
-                            _completionCallback(this);
-                        }
-
-                        ThreadPoolExtensions.QueueThreadPoolWorkItemWithCulture(Callback, CultureInfo.CurrentCulture, CultureInfo.CurrentUICulture);
-                    }
-                }
+                BuildResult.SetOverallResult(overallResult: false);
             }
         }
     }
diff --git a/src/Build/BackEnd/BuildManager/BuildSubmissionBase.cs b/src/Build/BackEnd/BuildManager/BuildSubmissionBase.cs
new file mode 100644
index 00000000000..ba6f45afc09
--- /dev/null
+++ b/src/Build/BackEnd/BuildManager/BuildSubmissionBase.cs
@@ -0,0 +1,96 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading;
+using System.Threading.Tasks;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Execution
+{
+    public abstract class BuildSubmissionBase
+    {
+        /// <summary>
+        /// The completion event.
+        /// </summary>
+        protected readonly ManualResetEvent CompletionEvent;
+
+        /// <summary>
+        /// Flag indicating if logging is done.
+        /// </summary>
+        internal bool LoggingCompleted { get; private set; }
+
+        /// <summary>
+        /// True if it has been invoked
+        /// </summary>
+        protected int CompletionInvoked;
+
+        //
+        // Unfortunately covariant overrides are not available for .NET 472,
+        //  so we have to use two set of properties for derived classes.
+        internal abstract BuildRequestDataBase BuildRequestDataBase { get; }
+
+        internal abstract BuildResultBase? BuildResultBase { get; }
+
+        /// <summary>
+        /// Constructor
+        /// </summary>
+        protected internal BuildSubmissionBase(BuildManager buildManager, int submissionId)
+        {
+            ErrorUtilities.VerifyThrowArgumentNull(buildManager, nameof(buildManager));
+
+            BuildManager = buildManager;
+            SubmissionId = submissionId;
+            CompletionEvent = new ManualResetEvent(false);
+            LoggingCompleted = false;
+            CompletionInvoked = 0;
+        }
+
+        /// <summary>
+        /// The BuildManager with which this submission is associated.
+        /// </summary>
+        public BuildManager BuildManager { get; }
+
+        /// <summary>
+        /// An ID uniquely identifying this request from among other submissions within the same build.
+        /// </summary>
+        public int SubmissionId { get; }
+
+        /// <summary>
+        /// The asynchronous context provided to <see cref="BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback, object)"/>, if any.
+        /// </summary>
+        public object? AsyncContext { get; protected set; }
+
+        /// <summary>
+        /// A <see cref="System.Threading.WaitHandle"/> which will be signalled when the build is complete.  Valid after <see cref="BuildSubmissionBase{TRequestData,TResultData}.Execute()"/> or <see cref="BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback, object)"/> returns, otherwise null.
+        /// </summary>
+        public WaitHandle WaitHandle => CompletionEvent;
+
+        /// <summary>
+        /// Returns true if this submission is complete.
+        /// </summary>
+        public bool IsCompleted => WaitHandle.WaitOne(new TimeSpan(0));
+
+        /// <summary>
+        /// Whether the build has started.
+        /// </summary>
+        internal bool IsStarted { get; set; }
+
+        /// <summary>
+        /// Indicates that all logging events for this submission are complete.
+        /// </summary>
+        internal void CompleteLogging()
+        {
+            LoggingCompleted = true;
+            CheckForCompletion();
+        }
+
+        protected internal virtual void OnCompletition() { }
+        protected internal abstract void CheckForCompletion();
+
+        internal abstract BuildResultBase CompleteResultsWithException(Exception exception);
+    }
+}
diff --git a/src/Build/BackEnd/BuildManager/GlobalPropertiesLookup.cs b/src/Build/BackEnd/BuildManager/GlobalPropertiesLookup.cs
new file mode 100644
index 00000000000..1cf11aa2068
--- /dev/null
+++ b/src/Build/BackEnd/BuildManager/GlobalPropertiesLookup.cs
@@ -0,0 +1,64 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections;
+using System.Collections.Generic;
+using System.Collections.Immutable;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.Collections;
+
+namespace Microsoft.Build.Execution
+{
+    internal class GlobalPropertiesLookup : IReadOnlyDictionary<string, string?>
+    {
+        internal static IReadOnlyDictionary<string, string?> ToGlobalPropertiesLookup(
+            PropertyDictionary<ProjectPropertyInstance>? backing)
+        {
+            if (backing == null)
+            {
+                return ImmutableDictionary<string, string?>.Empty;
+            }
+
+            return new GlobalPropertiesLookup(backing);
+        }
+
+        private GlobalPropertiesLookup(IDictionary<string, ProjectPropertyInstance> backingProperties)
+        {
+            _backingProperties = backingProperties;
+        }
+
+        private readonly IDictionary<string, ProjectPropertyInstance> _backingProperties;
+
+        public IEnumerator<KeyValuePair<string, string?>> GetEnumerator()
+            => _backingProperties
+                .Select(p => new KeyValuePair<string, string?>(p.Key, ExtractEscapedValue(p.Value)))
+                .GetEnumerator();
+
+        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
+
+        public int Count => _backingProperties.Count;
+        public bool ContainsKey(string key) => _backingProperties.ContainsKey(key);
+
+        public bool TryGetValue(string key, out string? value)
+        {
+            if (_backingProperties.TryGetValue(key, out var property))
+            {
+                value = ExtractEscapedValue(property);
+                return true;
+            }
+
+            value = null;
+            return false;
+        }
+
+        public string? this[string key] => ExtractEscapedValue(_backingProperties[key]);
+
+        public IEnumerable<string> Keys => _backingProperties.Keys;
+        public IEnumerable<string?> Values => _backingProperties.Values.Select(ExtractEscapedValue);
+
+        private static string? ExtractEscapedValue(ProjectPropertyInstance property) => ((IValued)property).EscapedValue;
+    }
+}
diff --git a/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs b/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
index dd833490899..7262bb0d329 100644
--- a/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
+++ b/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
@@ -162,6 +162,11 @@ public IBuildComponent GetComponent(BuildComponentType type)
             return componentEntry.GetInstance(_host);
         }
 
+        internal TComponent GetComponent<TComponent>(BuildComponentType type) where TComponent : IBuildComponent
+        {
+            return (TComponent)GetComponent(type);
+        }
+
         /// <summary>
         /// A helper class wrapping build components.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs b/src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs
index 6943ff208e0..de28c100d1d 100644
--- a/src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs
+++ b/src/Build/BackEnd/Components/FileAccesses/FileAccessManager.cs
@@ -14,7 +14,7 @@
 
 namespace Microsoft.Build.FileAccesses
 {
-    internal sealed class FileAccessManager : IFileAccessManager, IBuildComponent
+    internal sealed class FileAccessManager : IFileAccessManager
     {
         private record Handlers(Action<BuildRequest, FileAccessData> FileAccessHander, Action<BuildRequest, ProcessData> ProcessHandler);
 
diff --git a/src/Build/BackEnd/Components/FileAccesses/IFileAccessManager.cs b/src/Build/BackEnd/Components/FileAccesses/IFileAccessManager.cs
index dd3b7685053..14c38c0b590 100644
--- a/src/Build/BackEnd/Components/FileAccesses/IFileAccessManager.cs
+++ b/src/Build/BackEnd/Components/FileAccesses/IFileAccessManager.cs
@@ -9,7 +9,7 @@
 
 namespace Microsoft.Build.FileAccesses
 {
-    internal interface IFileAccessManager
+    internal interface IFileAccessManager : IBuildComponent
     {
         void ReportFileAccess(FileAccessData fileAccessData, int nodeId);
 
diff --git a/src/Build/BackEnd/Components/FileAccesses/OutOfProcNodeFileAccessManager.cs b/src/Build/BackEnd/Components/FileAccesses/OutOfProcNodeFileAccessManager.cs
index e211f674789..c1f7df47679 100644
--- a/src/Build/BackEnd/Components/FileAccesses/OutOfProcNodeFileAccessManager.cs
+++ b/src/Build/BackEnd/Components/FileAccesses/OutOfProcNodeFileAccessManager.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.FileAccesses
     /// <summary>
     /// Reports file accesses and process data to the in-proc node.
     /// </summary>
-    internal sealed class OutOfProcNodeFileAccessManager : IFileAccessManager, IBuildComponent
+    internal sealed class OutOfProcNodeFileAccessManager : IFileAccessManager
     {
         /// <summary>
         /// The <see cref="Action"/> to report file accesses and process
diff --git a/src/Build/BackEnd/Components/IBuildComponentHost.cs b/src/Build/BackEnd/Components/IBuildComponentHost.cs
index 8b2ded4d251..7983229f5b2 100644
--- a/src/Build/BackEnd/Components/IBuildComponentHost.cs
+++ b/src/Build/BackEnd/Components/IBuildComponentHost.cs
@@ -195,6 +195,15 @@ internal interface IBuildComponentHost
         /// <returns>The component</returns>
         IBuildComponent GetComponent(BuildComponentType type);
 
+        /// <summary>
+        /// Gets an instance of the specified component type from the host.
+        /// </summary>
+        /// <typeparam name="TComponent"></typeparam>
+        /// <param name="type">The component type to be retrieved</param>
+        /// <returns>The component</returns>
+        TComponent GetComponent<TComponent>(BuildComponentType type)
+            where TComponent : IBuildComponent;
+
         #endregion
     }
 }
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 9ca91e4e5f0..47603fcb678 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -315,7 +315,6 @@ internal void UnregisterAllEventHandlers()
             AnyEventRaised = null;
             TelemetryLogged = null;
             BuildCheckEventRaised = null;
-            //ExtendedEnvironmentVariableReadEventRaised = null;
         }
 
         #endregion
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 583f2b7d99b..1bb38687ca3 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -27,7 +27,7 @@ namespace Microsoft.Build.BackEnd.Logging
     /// Interface representing logging services in the build system.
     /// Implementations should be thread-safe.
     /// </summary>
-    internal interface ILoggingService
+    internal interface ILoggingService : IBuildComponent
     {
         #region Events
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index a70ab4f9fb4..0c7866e53a9 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -69,7 +69,7 @@ internal enum LoggingServiceState
     /// <summary>
     /// Logging services is used as a helper class to assist logging messages in getting to the correct loggers.
     /// </summary>
-    internal partial class LoggingService : ILoggingService, INodePacketHandler, IBuildComponent
+    internal partial class LoggingService : ILoggingService, INodePacketHandler
     {
         /// <summary>
         /// The default maximum size for the logging event queue.
diff --git a/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs b/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs
index 36138422b00..5676d9fecf1 100644
--- a/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs
@@ -90,16 +90,16 @@ internal void LogRequestHandledFromCache(BuildRequest request, BuildRequestConfi
 
             // When pulling a request from the cache, we want to make sure we log a target skipped event for any targets which
             // were used to build the request including default and initial targets.
-            foreach (string target in configuration.GetTargetsUsedToBuildRequest(request))
+            foreach ((string name, TargetBuiltReason reason) target in configuration.GetTargetsUsedToBuildRequest(request))
             {
-                var targetResult = result[target];
+                var targetResult = result[target.name];
                 bool isFailure = targetResult.ResultCode == TargetResultCode.Failure;
 
                 var skippedTargetEventArgs = new TargetSkippedEventArgs(message: null)
                 {
                     BuildEventContext = projectLoggingContext.BuildEventContext,
-                    TargetName = target,
-                    BuildReason = TargetBuiltReason.None,
+                    TargetName = target.name,
+                    BuildReason = target.reason,
                     SkipReason = isFailure ? TargetSkipReason.PreviouslyBuiltUnsuccessfully : TargetSkipReason.PreviouslyBuiltSuccessfully,
                     OriginallySucceeded = !isFailure,
                     OriginalBuildEventContext = (targetResult as TargetResult)?.OriginalBuildEventContext
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index e53d28292d1..d573f4bdc74 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -454,7 +454,7 @@ public void PostCacheRequest(CacheRequest cacheRequest, CancellationToken cancel
 
                 BuildRequestData buildRequest = new BuildRequestData(
                     cacheRequest.Configuration.Project,
-                    cacheRequest.Submission.BuildRequestData.TargetNames.ToArray());
+                    cacheRequest.Submission.BuildRequestData?.TargetNames.ToArray() ?? Array.Empty<string>());
                 BuildEventContext buildEventContext = _loggingService.CreateProjectCacheBuildEventContext(
                     cacheRequest.Submission.SubmissionId,
                     evaluationId: cacheRequest.Configuration.Project.EvaluationId,
@@ -477,13 +477,16 @@ public void PostCacheRequest(CacheRequest cacheRequest, CancellationToken cancel
 
             void EvaluateProjectIfNecessary(BuildSubmission submission, BuildRequestConfiguration configuration)
             {
+                ErrorUtilities.VerifyThrow(submission.BuildRequestData != null,
+                    "Submission BuildRequestData is not populated.");
+
                 lock (configuration)
                 {
                     if (!configuration.IsLoaded)
                     {
                         configuration.LoadProjectIntoConfiguration(
                             _buildManager,
-                            submission.BuildRequestData.Flags,
+                            submission.BuildRequestData!.Flags,
                             submission.SubmissionId,
                             Scheduler.InProcNodeId);
 
@@ -519,7 +522,7 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques
 
             HashSet<ProjectCacheDescriptor> queriedCaches = new(ProjectCacheDescriptorEqualityComparer.Instance);
             CacheResult? cacheResult = null;
-            foreach (ProjectCacheDescriptor projectCacheDescriptor in GetProjectCacheDescriptors(buildRequest.ProjectInstance))
+            foreach (ProjectCacheDescriptor projectCacheDescriptor in GetProjectCacheDescriptors(buildRequest.ProjectInstance!))
             {
                 // Ensure each unique plugin is only queried once
                 if (!queriedCaches.Add(projectCacheDescriptor))
@@ -583,7 +586,7 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques
                     // TODO: This should be indented by the console logger. That requires making these log events structured.
                     if (!buildRequestConfiguration.IsTraversal)
                     {
-                        _loggingService.LogComment(buildEventContext, MessageImportance.High, "ProjectCacheHitWithOutputs", buildRequest.ProjectInstance.GetPropertyValue(ReservedPropertyNames.projectName));
+                        _loggingService.LogComment(buildEventContext, MessageImportance.High, "ProjectCacheHitWithOutputs", buildRequest.ProjectInstance!.GetPropertyValue(ReservedPropertyNames.projectName));
                     }
 
                     break;
@@ -734,7 +737,7 @@ public async Task HandleBuildResultAsync(
 
             IReadOnlyDictionary<string, string> globalProperties = GetGlobalProperties(requestConfiguration);
 
-            List<string> targets = buildResult.ResultsByTarget.Keys.ToList();
+            List<string> targets = buildResult.ResultsByTarget?.Keys.ToList() ?? new();
             string? targetNames = string.Join(", ", targets);
 
             FileAccessContext fileAccessContext = new(requestConfiguration.ProjectFullPath, globalProperties, targets);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilder.cs
index 51bbb39a2d9..d986c91992c 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/ITargetBuilder.cs
@@ -4,6 +4,7 @@
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework;
 using BuildResult = Microsoft.Build.Execution.BuildResult;
 
 #nullable disable
@@ -25,6 +26,6 @@ internal interface ITargetBuilder
         /// <param name="baseLookup">The Lookup containing all current items and properties for this target.</param>
         /// <param name="cancellationToken">The cancellation token used to cancel processing of targets.</param>
         /// <returns>A Task representing the work to be done.</returns>
-        Task<BuildResult> BuildTargets(ProjectLoggingContext projectLoggingContext, BuildRequestEntry entry, IRequestBuilderCallback callback, string[] targets, Lookup baseLookup, CancellationToken cancellationToken);
+        Task<BuildResult> BuildTargets(ProjectLoggingContext projectLoggingContext, BuildRequestEntry entry, IRequestBuilderCallback callback, (string name, TargetBuiltReason reason)[] targets, Lookup baseLookup, CancellationToken cancellationToken);
     }
 }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index f6422b28e4c..8677f416e3c 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1177,7 +1177,7 @@ private async Task<BuildResult> BuildProject()
                 _requestEntry.Request.BuildEventContext = _projectLoggingContext.BuildEventContext;
 
                 // Determine the set of targets we need to build
-                string[] allTargets = _requestEntry.RequestConfiguration
+                (string name, TargetBuiltReason reason)[] allTargets = _requestEntry.RequestConfiguration
                     .GetTargetsUsedToBuildRequest(_requestEntry.Request).ToArray();
 
                 ProjectErrorUtilities.VerifyThrowInvalidProject(allTargets.Length > 0,
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index 6ff9319f3eb..4961d48c59e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -100,7 +100,7 @@ internal class TargetBuilder : ITargetBuilder, ITargetBuilderCallback, IBuildCom
         /// <param name="baseLookup">The Lookup containing all current items and properties for this target.</param>
         /// <param name="cancellationToken">The <see cref="CancellationToken"/> to use when building the targets.</param>
         /// <returns>The target's outputs and result codes</returns>
-        public async Task<BuildResult> BuildTargets(ProjectLoggingContext loggingContext, BuildRequestEntry entry, IRequestBuilderCallback callback, string[] targetNames, Lookup baseLookup, CancellationToken cancellationToken)
+        public async Task<BuildResult> BuildTargets(ProjectLoggingContext loggingContext, BuildRequestEntry entry, IRequestBuilderCallback callback, (string name, TargetBuiltReason reason)[] targetNames, Lookup baseLookup, CancellationToken cancellationToken)
         {
             ErrorUtilities.VerifyThrowArgumentNull(loggingContext, "projectLoggingContext");
             ErrorUtilities.VerifyThrowArgumentNull(entry, nameof(entry));
@@ -143,17 +143,17 @@ public async Task<BuildResult> BuildTargets(ProjectLoggingContext loggingContext
 
             List<TargetSpecification> targets = new List<TargetSpecification>(targetNames.Length);
 
-            foreach (string targetName in targetNames)
+            foreach ((string name, TargetBuiltReason reason) targetName in targetNames)
             {
-                var targetExists = _projectInstance.Targets.TryGetValue(targetName, out ProjectTargetInstance targetInstance);
+                var targetExists = _projectInstance.Targets.TryGetValue(targetName.name, out ProjectTargetInstance targetInstance);
                 if (!targetExists && entry.Request.BuildRequestDataFlags.HasFlag(BuildRequestDataFlags.SkipNonexistentTargets))
                 {
                     _projectLoggingContext.LogComment(Framework.MessageImportance.Low,
-                        "TargetSkippedWhenSkipNonexistentTargets", targetName);
+                        "TargetSkippedWhenSkipNonexistentTargets", targetName.name);
                 }
                 else
                 {
-                    targets.Add(new TargetSpecification(targetName, targetExists ? targetInstance.Location : _projectInstance.ProjectFileLocation));
+                    targets.Add(new TargetSpecification(targetName.name, targetExists ? targetInstance.Location : _projectInstance.ProjectFileLocation, targetName.reason));
                 }
             }
 
@@ -185,7 +185,7 @@ public async Task<BuildResult> BuildTargets(ProjectLoggingContext loggingContext
 
             // Gather up outputs for the requested targets and return those.  All of our information should be in the base lookup now.
             ComputeAfterTargetFailures(targetNames);
-            BuildResult resultsToReport = new BuildResult(_buildResult, targetNames);
+            BuildResult resultsToReport = new BuildResult(_buildResult, targetNames.Select(target => target.name).ToArray());
 
             // Return after-build project state if requested.
             if (_requestEntry.Request.BuildRequestDataFlags.HasFlag(BuildRequestDataFlags.ProvideProjectStateAfterBuild))
@@ -735,9 +735,14 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE
                     }
                 }
 
+                // The buildReason argument for this function can be BeforeTargets or AfterTargets, we don't want to override the reason when adding a new entry
+                // If the reason is None, it means it does not depend on another target. So we can use the target's BuiltReason.
+                TargetBuiltReason entryReason = buildReason == TargetBuiltReason.None ? targetSpecification._targetBuiltReason : buildReason;
+
                 // Add to the list of targets to push.  We don't actually put it on the stack here because we could run into a circular dependency
                 // during this loop, in which case the target stack would be out of whack.
-                TargetEntry newEntry = new TargetEntry(_requestEntry, this as ITargetBuilderCallback, targetSpecification, baseLookup, parentTargetEntry, buildReason, _componentHost, _projectLoggingContext, stopProcessingOnCompletion);
+                TargetEntry newEntry = new TargetEntry(_requestEntry, this as ITargetBuilderCallback, targetSpecification, baseLookup, parentTargetEntry, entryReason, _componentHost, _projectLoggingContext, stopProcessingOnCompletion);
+
                 newEntry.ErrorTarget = addAsErrorTarget;
                 targetsToPush.Add(newEntry);
                 stopProcessingOnCompletion = false; // The first target on the stack (the last one to be run) always inherits the stopProcessing flag.
@@ -772,15 +777,15 @@ private async Task<bool> CompleteOutstandingActiveRequests(string targetName)
             return false;
         }
 
-        private void ComputeAfterTargetFailures(string[] targetNames)
+        private void ComputeAfterTargetFailures((string name, TargetBuiltReason reason)[] targetNames)
         {
-            foreach (string targetName in targetNames)
+            foreach ((string name, TargetBuiltReason reason) targetName in targetNames)
             {
-                if (_buildResult.ResultsByTarget.TryGetValue(targetName, out TargetResult targetBuildResult))
+                if (_buildResult.ResultsByTarget.TryGetValue(targetName.name, out TargetResult targetBuildResult))
                 {
                     // Queue of targets waiting to be processed, seeded with the specific target for which we're computing AfterTargetsHaveFailed.
                     var targetsToCheckForAfterTargets = new Queue<string>();
-                    targetsToCheckForAfterTargets.Enqueue(targetName);
+                    targetsToCheckForAfterTargets.Enqueue(targetName.name);
 
                     // Set of targets already processed, to break cycles of AfterTargets.
                     // Initialized lazily when needed below.
@@ -804,7 +809,7 @@ private void ComputeAfterTargetFailures(string[] targetNames)
 
                             targetsChecked ??= new HashSet<string>(MSBuildNameIgnoreCaseComparer.Default)
                                 {
-                                    targetName
+                                    targetName.name
                                 };
 
                             // If we haven't seen this target yet, add it to the list to check.
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetSpecification.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetSpecification.cs
index a3297139fa8..4de22a23cce 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetSpecification.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetSpecification.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Diagnostics;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 
@@ -18,18 +19,22 @@ internal class TargetSpecification : ITranslatable
         private string _targetName;
         private ElementLocation _referenceLocation;
 
+        internal TargetBuiltReason _targetBuiltReason;
+
         /// <summary>
         /// Construct a target specification.
         /// </summary>
         /// <param name="targetName">The name of the target</param>
         /// <param name="referenceLocation">The location from which it was referred.</param>
-        internal TargetSpecification(string targetName, ElementLocation referenceLocation)
+        /// <param name="targetBuiltReason">Reason the target is being built</param>
+        internal TargetSpecification(string targetName, ElementLocation referenceLocation, TargetBuiltReason targetBuiltReason = TargetBuiltReason.None)
         {
             ErrorUtilities.VerifyThrowArgumentLength(targetName, nameof(targetName));
             ErrorUtilities.VerifyThrowArgumentNull(referenceLocation, nameof(referenceLocation));
 
             this._targetName = targetName;
             this._referenceLocation = referenceLocation;
+            this._targetBuiltReason = targetBuiltReason;
         }
 
         private TargetSpecification()
@@ -41,6 +46,8 @@ private TargetSpecification()
         /// </summary>
         public string TargetName => _targetName;
 
+        public TargetBuiltReason TargetBuiltReason => _targetBuiltReason;
+
         /// <summary>
         /// Gets or sets the reference location
         /// </summary>
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index 51ac31c32dd..3d7c50595d4 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -303,6 +303,9 @@ IBuildComponent IBuildComponentHost.GetComponent(BuildComponentType type)
             return _componentFactories.GetComponent(type);
         }
 
+        TComponent IBuildComponentHost.GetComponent<TComponent>(BuildComponentType type)
+            => (TComponent)((IBuildComponentHost)this).GetComponent(type);
+
         #endregion
 
         #region INodePacketFactory Members
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index c5ef050807f..3bca761aab7 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -762,7 +762,7 @@ public void RetrieveFromCache()
         /// </summary>
         /// <param name="request">The request </param>
         /// <returns>An array of t</returns>
-        public List<string> GetTargetsUsedToBuildRequest(BuildRequest request)
+        public List<(string name, TargetBuiltReason reason)> GetTargetsUsedToBuildRequest(BuildRequest request)
         {
             ErrorUtilities.VerifyThrow(request.ConfigurationId == ConfigurationId, "Request does not match configuration.");
             ErrorUtilities.VerifyThrow(_projectInitialTargets != null, "Initial targets have not been set.");
@@ -775,13 +775,31 @@ public List<string> GetTargetsUsedToBuildRequest(BuildRequest request)
                     "Targets must be same as proxy targets");
             }
 
-            List<string> initialTargets = _projectInitialTargets;
-            List<string> nonInitialTargets = (request.Targets.Count == 0) ? _projectDefaultTargets : request.Targets;
+            bool hasInitialTargets = request.Targets.Count == 0 ? false : true;
 
-            var allTargets = new List<string>(initialTargets.Count + nonInitialTargets.Count);
+            List<(string name, TargetBuiltReason reason)> allTargets = new(
+                _projectInitialTargets.Count +
+                (hasInitialTargets ? _projectDefaultTargets.Count : request.Targets.Count));
 
-            allTargets.AddRange(initialTargets);
-            allTargets.AddRange(nonInitialTargets);
+            foreach (var target in _projectInitialTargets)
+            {
+                allTargets.Add((target, TargetBuiltReason.InitialTargets));
+            }
+
+            if (hasInitialTargets)
+            {
+                foreach (var target in request.Targets)
+                {
+                    allTargets.Add((target, TargetBuiltReason.EntryTargets));
+                }
+            }
+            else
+            {
+                foreach (var target in _projectDefaultTargets)
+                {
+                    allTargets.Add((target, TargetBuiltReason.DefaultTargets));
+                }
+            }
 
             return allTargets;
         }
diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index 208fa2e7b9a..56458bc630c 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -10,8 +10,6 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
-#nullable disable
-
 namespace Microsoft.Build.Execution
 {
     /// <summary>
@@ -33,7 +31,7 @@ public enum BuildResultCode
     /// <summary>
     /// Contains the current results for all of the targets which have produced results for a particular configuration.
     /// </summary>
-    public class BuildResult : INodePacket, IBuildResults
+    public class BuildResult : BuildResultBase, INodePacket, IBuildResults
     {
         /// <summary>
         /// The submission with which this result is associated.
@@ -64,13 +62,13 @@ public class BuildResult : INodePacket, IBuildResults
         /// The first build request to generate results for a configuration will set this so that future
         /// requests may be properly satisfied from the cache.
         /// </summary>
-        private List<string> _initialTargets;
+        private List<string>? _initialTargets;
 
         /// <summary>
         /// The first build request to generate results for a configuration will set this so that future
         /// requests may be properly satisfied from the cache.
         /// </summary>
-        private List<string> _defaultTargets;
+        private List<string>? _defaultTargets;
 
         /// <summary>
         /// The set of results for each target.
@@ -87,7 +85,7 @@ public class BuildResult : INodePacket, IBuildResults
         /// Note that this can be set if the request itself fails, or if it receives
         /// an exception from a target or task.
         /// </summary>
-        private Exception _requestException;
+        private Exception? _requestException;
 
         /// <summary>
         /// The overall result calculated in the constructor.
@@ -98,13 +96,13 @@ public class BuildResult : INodePacket, IBuildResults
         /// Snapshot of the environment from the configuration this results comes from.
         /// This should only be populated when the configuration for this result is moved between nodes.
         /// </summary>
-        private Dictionary<string, string> _savedEnvironmentVariables;
+        private Dictionary<string, string>? _savedEnvironmentVariables;
 
         /// <summary>
         /// Snapshot of the current directory from the configuration this result comes from.
         /// This should only be populated when the configuration for this result is moved between nodes.
         /// </summary>
-        private string _savedCurrentDirectory;
+        private string? _savedCurrentDirectory;
 
         /// <summary>
         /// <see cref="ProjectInstance"/> state after the build. This is only provided if <see cref="BuildRequest.BuildRequestDataFlags"/>
@@ -114,22 +112,23 @@ public class BuildResult : INodePacket, IBuildResults
         /// be used to retrieve <see cref="ProjectInstance.Properties"/>, <see cref="ProjectInstance.GlobalProperties"/> and
         /// <see cref="ProjectInstance.Items"/> from it. No other operation is guaranteed to be supported.
         /// </summary>
-        private ProjectInstance _projectStateAfterBuild;
+        private ProjectInstance? _projectStateAfterBuild;
 
         /// <summary>
         /// The flags provide additional control over the build results and may affect the cached value.
         /// </summary>
         private BuildRequestDataFlags _buildRequestDataFlags;
 
-        private string _schedulerInducedError;
+        private string? _schedulerInducedError;
 
-        private HashSet<string> _projectTargets;
+        private HashSet<string>? _projectTargets;
 
         /// <summary>
         /// Constructor for serialization.
         /// </summary>
         public BuildResult()
         {
+            _resultsByTarget = CreateTargetResultDictionary(1);
         }
 
         /// <summary>
@@ -146,7 +145,7 @@ internal BuildResult(BuildRequest request)
         /// </summary>
         /// <param name="request">The build request to which these results should be associated.</param>
         /// <param name="exception">The exception, if any.</param>
-        internal BuildResult(BuildRequest request, Exception exception)
+        internal BuildResult(BuildRequest request, Exception? exception)
             : this(request, null, exception)
         {
         }
@@ -189,7 +188,7 @@ internal BuildResult(BuildResult existingResults, string[] targetNames)
         /// <param name="request">The build request with which these results should be associated.</param>
         /// <param name="existingResults">The existing results, if any.</param>
         /// <param name="exception">The exception, if any</param>
-        internal BuildResult(BuildRequest request, BuildResult existingResults, Exception exception)
+        internal BuildResult(BuildRequest request, BuildResult? existingResults, Exception? exception)
             : this(request, existingResults, null, exception)
         {
         }
@@ -201,9 +200,8 @@ internal BuildResult(BuildRequest request, BuildResult existingResults, Exceptio
         /// <param name="existingResults">The existing results, if any.</param>
         /// <param name="targetNames">The list of target names that are the subset of results that should be returned.</param>
         /// <param name="exception">The exception, if any</param>
-        internal BuildResult(BuildRequest request, BuildResult existingResults, string[] targetNames, Exception exception)
+        internal BuildResult(BuildRequest request, BuildResult? existingResults, string[]? targetNames, Exception? exception)
         {
-            ErrorUtilities.VerifyThrow(request != null, "Must specify a request.");
             _submissionId = request.SubmissionId;
             _configurationId = request.ConfigurationId;
             _globalRequestId = request.GlobalRequestId;
@@ -270,12 +268,13 @@ internal BuildResult(BuildResult result, int submissionId, int configurationId,
         private BuildResult(ITranslator translator)
         {
             ((ITranslatable)this).Translate(translator);
+            _resultsByTarget ??= CreateTargetResultDictionary(1);
         }
 
         /// <summary>
         /// Returns the submission id.
         /// </summary>
-        public int SubmissionId
+        public override int SubmissionId
         {
             [DebuggerStepThrough]
             get
@@ -325,7 +324,7 @@ public int NodeRequestId
         /// <summary>
         /// Returns the exception generated while this result was run, if any.
         /// </summary>
-        public Exception Exception
+        public override Exception? Exception
         {
             [DebuggerStepThrough]
             get
@@ -339,7 +338,7 @@ internal set
         /// <summary>
         /// Returns a flag indicating if a circular dependency was detected.
         /// </summary>
-        public bool CircularDependency
+        public override bool CircularDependency
         {
             [DebuggerStepThrough]
             get
@@ -349,7 +348,7 @@ public bool CircularDependency
         /// <summary>
         /// Returns the overall result for this result set.
         /// </summary>
-        public BuildResultCode OverallResult
+        public override BuildResultCode OverallResult
         {
             get
             {
@@ -358,7 +357,7 @@ public BuildResultCode OverallResult
                     return BuildResultCode.Failure;
                 }
 
-                foreach (KeyValuePair<string, TargetResult> result in _resultsByTarget)
+                foreach (KeyValuePair<string, TargetResult> result in _resultsByTarget ?? Enumerable.Empty<KeyValuePair<string, TargetResult>>())
                 {
                     if ((result.Value.ResultCode == TargetResultCode.Failure && !result.Value.TargetFailureDoesntCauseBuildFailure)
                         || result.Value.AfterTargetsHaveFailed)
@@ -386,7 +385,7 @@ public IDictionary<string, TargetResult> ResultsByTarget
         /// be used to retrieve <see cref="ProjectInstance.Properties"/>, <see cref="ProjectInstance.GlobalProperties"/> and
         /// <see cref="ProjectInstance.Items"/> from it. Any other operation is not guaranteed to be supported.
         /// </summary>
-        public ProjectInstance ProjectStateAfterBuild
+        public ProjectInstance? ProjectStateAfterBuild
         {
             get => _projectStateAfterBuild;
             set => _projectStateAfterBuild = value;
@@ -411,7 +410,7 @@ NodePacketType INodePacket.Type
         /// <summary>
         /// Holds a snapshot of the environment at the time we blocked.
         /// </summary>
-        Dictionary<string, string> IBuildResults.SavedEnvironmentVariables
+        Dictionary<string, string>? IBuildResults.SavedEnvironmentVariables
         {
             get => _savedEnvironmentVariables;
 
@@ -421,7 +420,7 @@ Dictionary<string, string> IBuildResults.SavedEnvironmentVariables
         /// <summary>
         /// Holds a snapshot of the current working directory at the time we blocked.
         /// </summary>
-        string IBuildResults.SavedCurrentDirectory
+        string? IBuildResults.SavedCurrentDirectory
         {
             get => _savedCurrentDirectory;
 
@@ -431,7 +430,7 @@ string IBuildResults.SavedCurrentDirectory
         /// <summary>
         /// Returns the initial targets for the configuration which requested these results.
         /// </summary>
-        internal List<string> InitialTargets
+        internal List<string>? InitialTargets
         {
             [DebuggerStepThrough]
             get
@@ -445,7 +444,7 @@ internal List<string> InitialTargets
         /// <summary>
         /// Returns the default targets for the configuration which requested these results.
         /// </summary>
-        internal List<string> DefaultTargets
+        internal List<string>? DefaultTargets
         {
             [DebuggerStepThrough]
             get
@@ -459,7 +458,7 @@ internal List<string> DefaultTargets
         /// <summary>
         /// The defined targets for the project associated with this build result.
         /// </summary>
-        internal HashSet<string> ProjectTargets
+        internal HashSet<string>? ProjectTargets
         {
             [DebuggerStepThrough]
             get => _projectTargets;
@@ -471,7 +470,7 @@ internal HashSet<string> ProjectTargets
         /// Container used to transport errors from the scheduler (issued while computing a build result)
         /// to the TaskHost that has the proper logging context (project id, target id, task id, file location)
         /// </summary>
-        internal string SchedulerInducedError
+        internal string? SchedulerInducedError
         {
             get => _schedulerInducedError;
             set => _schedulerInducedError = value;
@@ -488,7 +487,7 @@ public ITargetResult this[string target]
         {
             [DebuggerStepThrough]
             get
-            { return _resultsByTarget[target]; }
+            { return _resultsByTarget![target]; }
         }
 
         /// <summary>
@@ -506,7 +505,7 @@ public void AddResultsForTarget(string target, TargetResult result)
                 _resultsByTarget ??= CreateTargetResultDictionary(1);
             }
 
-            if (_resultsByTarget.TryGetValue(target, out TargetResult targetResult))
+            if (_resultsByTarget.TryGetValue(target, out TargetResult? targetResult))
             {
                 ErrorUtilities.VerifyThrow(targetResult.ResultCode == TargetResultCode.Skipped, "Items already exist for target {0}.", target);
             }
@@ -524,11 +523,11 @@ internal void KeepSpecificTargetResults(IReadOnlyCollection<string> targetsToKee
                 targetsToKeep.Count > 0,
                 $"{nameof(targetsToKeep)} should contain at least one target.");
 
-            foreach (string target in _resultsByTarget.Keys)
+            foreach (string target in _resultsByTarget?.Keys ?? Enumerable.Empty<string>())
             {
                 if (!targetsToKeep.Contains(target))
                 {
-                    _ = _resultsByTarget.TryRemove(target, out _);
+                    _ = _resultsByTarget!.TryRemove(target, out _);
                 }
             }
         }
@@ -549,7 +548,7 @@ public void MergeResults(BuildResult results)
             }
 
             // Merge in the results
-            foreach (KeyValuePair<string, TargetResult> targetResult in results._resultsByTarget)
+            foreach (KeyValuePair<string, TargetResult> targetResult in results._resultsByTarget ?? Enumerable.Empty<KeyValuePair<string, TargetResult>>())
             {
                 // NOTE: I believe that because we only allow results for a given target to be produced and cached once for a given configuration,
                 // we can never receive conflicting results for that target, since the cache and build request manager would always return the
@@ -559,7 +558,7 @@ public void MergeResults(BuildResult results)
                 // ErrorUtilities.VerifyThrow(!HasResultsForTarget(targetResult.Key), "Results already exist");
 
                 // Copy the new results in.
-                _resultsByTarget[targetResult.Key] = targetResult.Value;
+                _resultsByTarget![targetResult.Key] = targetResult.Value;
             }
 
             // If there is an exception and we did not previously have one, add it in.
@@ -573,7 +572,7 @@ public void MergeResults(BuildResult results)
         /// <returns>True if results exist, false otherwise.</returns>
         public bool HasResultsForTarget(string target)
         {
-            return _resultsByTarget.ContainsKey(target);
+            return _resultsByTarget?.ContainsKey(target) ?? false;
         }
 
         #region INodePacket Members
@@ -617,7 +616,7 @@ internal static BuildResult FactoryForDeserialization(ITranslator translator)
         /// </summary>
         internal void CacheIfPossible()
         {
-            foreach (KeyValuePair<string, TargetResult> targetResultPair in _resultsByTarget)
+            foreach (KeyValuePair<string, TargetResult> targetResultPair in _resultsByTarget ?? Enumerable.Empty<KeyValuePair<string, TargetResult>>())
             {
                 targetResultPair.Value.CacheItems(ConfigurationId, targetResultPair.Key);
             }
@@ -648,9 +647,7 @@ internal BuildResult Clone()
                 _parentGlobalRequestId = _parentGlobalRequestId,
                 _nodeRequestId = _nodeRequestId,
                 _requestException = _requestException,
-                _resultsByTarget = new ConcurrentDictionary<string, TargetResult>(
-                    _resultsByTarget,
-                    StringComparer.OrdinalIgnoreCase),
+                _resultsByTarget = new ConcurrentDictionary<string, TargetResult>(_resultsByTarget, StringComparer.OrdinalIgnoreCase),
                 _baseOverallResult = OverallResult == BuildResultCode.Success,
                 _circularDependency = _circularDependency
             };
@@ -685,7 +682,7 @@ private static ConcurrentDictionary<string, TargetResult> CreateTargetResultDict
 
             foreach (string target in targetNames)
             {
-                if (existingResults.ResultsByTarget.TryGetValue(target, out TargetResult targetResult))
+                if (existingResults.ResultsByTarget?.TryGetValue(target, out TargetResult? targetResult) ?? false)
                 {
                     resultsByTarget[target] = targetResult;
                 }
diff --git a/src/Build/BackEnd/Shared/BuildResultBase.cs b/src/Build/BackEnd/Shared/BuildResultBase.cs
new file mode 100644
index 00000000000..f144bcb778c
--- /dev/null
+++ b/src/Build/BackEnd/Shared/BuildResultBase.cs
@@ -0,0 +1,30 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+namespace Microsoft.Build.Execution
+{
+    public abstract class BuildResultBase
+    {
+        /// <summary>
+        /// Returns the submission id.
+        /// </summary>
+        public abstract int SubmissionId { get; }
+
+        /// <summary>
+        /// Returns a flag indicating if a circular dependency was detected.
+        /// </summary>
+        public abstract bool CircularDependency { get; }
+
+        /// <summary>
+        /// Returns the exception generated while this result was run, if any.
+        /// </summary>
+        public abstract Exception? Exception { get; internal set; }
+
+        /// <summary>
+        /// Returns the overall result for this result set.
+        /// </summary>
+        public abstract BuildResultCode OverallResult { get; }
+    }
+}
diff --git a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
index ab817077725..f36ff6a0f3c 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
@@ -21,8 +21,7 @@ public class BuildAnalyzerConfiguration
     public static BuildAnalyzerConfiguration Default { get; } = new()
     {
         EvaluationAnalysisScope = BuildCheck.EvaluationAnalysisScope.ProjectOnly,
-        Severity = BuildAnalyzerResultSeverity.Info,
-        IsEnabled = false,
+        Severity = BuildAnalyzerResultSeverity.None
     };
 
     public static BuildAnalyzerConfiguration Null { get; } = new();
@@ -45,7 +44,18 @@ public class BuildAnalyzerConfiguration
     /// If all rules within the analyzer are not enabled, it will not be run.
     /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.
     /// </summary>
-    public bool? IsEnabled { get; internal init; }
+    public bool? IsEnabled {
+        get
+        {
+            // Do not consider Default as enabled, because the default severity of the rule coule be set to None
+            if (Severity.HasValue && Severity.Value != BuildAnalyzerResultSeverity.Default)
+            {
+                return !Severity.Value.Equals(BuildAnalyzerResultSeverity.None);
+            }
+
+            return null;
+        }
+    }
 
     /// <summary>
     /// Creates a <see cref="BuildAnalyzerConfiguration"/> object based on the provided configuration dictionary.
@@ -59,8 +69,7 @@ internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? co
         return new()
         {
             EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,
-            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null,
-            IsEnabled = TryExtractValue(nameof(IsEnabled), configDictionary, out bool isEnabled) ? isEnabled : null,
+            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null
         };
     }
 
@@ -83,31 +92,6 @@ private static bool TryExtractValue<T>(string key, Dictionary<string, string>? c
         return isParsed;
     }
 
-    private static bool TryExtractValue(string key, Dictionary<string, string>? config, out bool value)
-    {
-        value = default;
-
-        if (config == null || !config.TryGetValue(key.ToLower(), out var stringValue) || stringValue is null)
-        {
-            return false;
-        }
-
-        bool isParsed = false;
-        
-        if (bool.TryParse(stringValue, out bool boolValue))
-        {
-            value = boolValue;
-            isParsed = true;
-        }
-        
-        if (!isParsed)
-        {
-            ThrowIncorrectValueException(key, stringValue);
-        }
-
-        return isParsed;
-    }
-
     private static void ThrowIncorrectValueException(string key, string value)
     {
         // TODO: It will be nice to have the filename where the incorrect configuration was placed. 
diff --git a/src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs b/src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs
index 412a014be06..cd98bdbbf22 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs
@@ -8,7 +8,28 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 public enum BuildAnalyzerResultSeverity
 {
-    Info,
+    /// <summary>
+    /// When set, the default value of the BuildCheck rule will be used.
+    /// </summary>
+    Default,
+
+    /// <summary>
+    /// When set to None the rule will not run.
+    /// </summary>
+    None,
+
+    /// <summary>
+    /// Information level message.
+    /// </summary>
+    Suggestion,
+
+    /// <summary>
+    /// Results a warning in build if the BuildCheck rule applied.
+    /// </summary>
     Warning,
-    Error,
+
+    /// <summary>
+    /// Results an error in build if the BuildCheck rule applied.
+    /// </summary>
+    Error
 }
diff --git a/src/Build/BuildCheck/API/BuildCheckResult.cs b/src/Build/BuildCheck/API/BuildCheckResult.cs
index f6b54e1ed99..0f70c5228b7 100644
--- a/src/Build/BuildCheck/API/BuildCheckResult.cs
+++ b/src/Build/BuildCheck/API/BuildCheckResult.cs
@@ -31,7 +31,7 @@ public BuildCheckResult(BuildAnalyzerRule buildAnalyzerRule, ElementLocation loc
     internal BuildEventArgs ToEventArgs(BuildAnalyzerResultSeverity severity)
         => severity switch
         {
-            BuildAnalyzerResultSeverity.Info => new BuildCheckResultMessage(this),
+            BuildAnalyzerResultSeverity.Suggestion => new BuildCheckResultMessage(this),
             BuildAnalyzerResultSeverity.Warning => new BuildCheckResultWarning(this),
             BuildAnalyzerResultSeverity.Error => new BuildCheckResultError(this),
             _ => throw new ArgumentOutOfRangeException(nameof(severity), severity, null),
diff --git a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
index 77c8d7d4599..ccb9dcfdafb 100644
--- a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
+++ b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
@@ -46,11 +46,13 @@ public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(
             foreach (Type analyzerCandidate in analyzerTypes)
             {
                 analyzersFactories.Add(() => (BuildAnalyzer)Activator.CreateInstance(analyzerCandidate)!);
+                analysisContext.DispatchAsComment(MessageImportance.Normal, "CustomAnalyzerRegistered", analyzerCandidate.Name, analyzerCandidate.Assembly);
             }
 
             if (availableTypes.Count != analyzerTypes.Count)
             {
-                availableTypes.Except(analyzerTypes).ToList().ForEach(t => analysisContext.DispatchAsComment(MessageImportance.Normal, "CustomAnalyzerBaseTypeNotAssignable", t.Name, t.Assembly));
+                availableTypes.Except(analyzerTypes).ToList()
+                    .ForEach(t => analysisContext.DispatchAsComment(MessageImportance.Normal, "CustomAnalyzerBaseTypeNotAssignable", t.Name, t.Assembly));
             }
         }
         catch (ReflectionTypeLoadException ex)
diff --git a/src/Build/BuildCheck/Analyzers/DoubleWritesAnalyzer.cs b/src/Build/BuildCheck/Analyzers/DoubleWritesAnalyzer.cs
index ce94a5fbb74..0804d6d76c3 100644
--- a/src/Build/BuildCheck/Analyzers/DoubleWritesAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/DoubleWritesAnalyzer.cs
@@ -25,7 +25,7 @@ internal sealed class DoubleWritesAnalyzer : BuildAnalyzer
         "DoubleWrites",
         "Two tasks should not write the same file",
         "Tasks {0} and {1} from projects {2} and {3} write the same file: {4}.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });
+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning });
 
     public override string FriendlyName => "MSBuild.DoubleWritesAnalyzer";
 
diff --git a/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs b/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
index 74d0ba579a9..5da98f08463 100644
--- a/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs
@@ -18,7 +18,7 @@ internal sealed class SharedOutputPathAnalyzer : BuildAnalyzer
     public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule("BC0101", "ConflictingOutputPath",
         "Two projects should not share their OutputPath nor IntermediateOutputPath locations",
         "Projects {0} and {1} have conflicting output paths: {2}.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });
+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning });
 
     public override string FriendlyName => "MSBuild.SharedOutputPathAnalyzer";
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs
index 9d7738922e7..b5ecb7c3f48 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs
@@ -1,6 +1,7 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using Microsoft.Build.Experimental.BuildCheck;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
@@ -10,18 +11,25 @@ namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 /// </summary>
 internal sealed class BuildAnalyzerConfigurationInternal
 {
-    public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity, bool isEnabled)
+    public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity)
     {
+        if (severity == BuildAnalyzerResultSeverity.Default)
+        {
+            throw new ArgumentOutOfRangeException(nameof(severity), severity, "Severity 'Default' is not recognized by the BuildCheck reports infrastructure");
+        }
+
         RuleId = ruleId;
         EvaluationAnalysisScope = evaluationAnalysisScope;
         Severity = severity;
-        IsEnabled = isEnabled;
     }
 
     public string RuleId { get; }
+
     public EvaluationAnalysisScope EvaluationAnalysisScope { get; }
+
     public BuildAnalyzerResultSeverity Severity { get; }
-    public bool IsEnabled { get; }
+
+    public bool IsEnabled => Severity >= BuildAnalyzerResultSeverity.Suggestion;
 
     // Intentionally not checking the RuleId
     //  as for analyzers with multiple rules, we can squash config to a single one,
@@ -29,6 +37,5 @@ public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope
     public bool IsSameConfigurationAs(BuildAnalyzerConfigurationInternal? other) =>
         other != null &&
         Severity == other.Severity &&
-        IsEnabled == other.IsEnabled &&
         EvaluationAnalysisScope == other.EvaluationAnalysisScope;
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 91e0d0c4e2d..a7064469c27 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -168,13 +168,17 @@ internal void RegisterCustomAnalyzers(
             BuildCheckDataSource buildCheckDataSource,
             IEnumerable<BuildAnalyzerFactory> factories,
             string[] ruleIds,
-            bool defaultEnablement)
+            bool defaultEnablement,
+            IAnalysisContext analysisContext)
         {
             if (_enabledDataSources[(int)buildCheckDataSource])
             {
                 foreach (BuildAnalyzerFactory factory in factories)
                 {
                     _analyzersRegistry.Add(new BuildAnalyzerFactoryContext(factory, ruleIds, defaultEnablement));
+
+                    var instance = factory();
+                    analysisContext.DispatchAsComment(MessageImportance.Normal, "CustomAnalyzerSuccessfulAcquisition", instance.FriendlyName);
                 }
             }
         }
@@ -208,10 +212,9 @@ internal void RegisterCustomAnalyzer(
         private void SetupSingleAnalyzer(BuildAnalyzerFactoryContext analyzerFactoryContext, string projectFullPath)
         {
             // For custom analyzers - it should run only on projects where referenced
-            //  (otherwise error out - https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=57849480)
-            //  on others it should work similarly as disabling them.
+            // (otherwise error out - https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=57849480)
+            // on others it should work similarly as disabling them.
             // Disabled analyzer should not only post-filter results - it shouldn't even see the data 
-
             BuildAnalyzerWrapper wrapper;
             BuildAnalyzerConfigurationInternal[] configurations;
             if (analyzerFactoryContext.MaterializedAnalyzer == null)
@@ -299,7 +302,10 @@ private void SetupAnalyzersForNewProject(string projectFullPath, IAnalysisContex
                 }
                 catch (BuildCheckConfigurationException e)
                 {
-                    analysisContext.DispatchAsErrorFromText(null, null, null,
+                    analysisContext.DispatchAsErrorFromText(
+                        null,
+                        null,
+                        null,
                         new BuildEventFileInfo(projectFullPath),
                         e.Message);
                     analyzersToRemove.Add(analyzerFactoryContext);
@@ -365,8 +371,7 @@ public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats()
             {
                 if (analyzerFactoryContext.MaterializedAnalyzer != null)
                 {
-                    _tracingReporter.AddAnalyzerStats(analyzerFactoryContext.FriendlyName,
-                        analyzerFactoryContext.MaterializedAnalyzer.Elapsed);
+                    _tracingReporter.AddAnalyzerStats(analyzerFactoryContext.FriendlyName, analyzerFactoryContext.MaterializedAnalyzer.Elapsed);
                     analyzerFactoryContext.MaterializedAnalyzer.ClearStats();
                 }
             }
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index ab2e298879b..1a06fc08ee1 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -33,7 +33,6 @@ internal sealed class ConfigurationProvider
 
     private readonly string[] _infrastructureConfigurationKeys = new string[] {
         nameof(BuildAnalyzerConfiguration.EvaluationAnalysisScope).ToLower(),
-        nameof(BuildAnalyzerConfiguration.IsEnabled).ToLower(),
         nameof(BuildAnalyzerConfiguration.Severity).ToLower()
     };
 
@@ -263,8 +262,7 @@ internal BuildAnalyzerConfigurationInternal MergeConfiguration(
         => new BuildAnalyzerConfigurationInternal(
             ruleId: ruleId,
             evaluationAnalysisScope: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.EvaluationAnalysisScope),
-            isEnabled: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.IsEnabled),
-            severity: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.Severity));
+            severity: GetSeverityValue(editorConfig, defaultConfig));
 
     private BuildAnalyzerConfigurationInternal GetMergedConfiguration(
         string projectFullPath,
@@ -280,6 +278,22 @@ private T GetConfigValue<T>(
            propertyGetter(defaultValue) ??
            EnsureNonNull(propertyGetter(BuildAnalyzerConfiguration.Default));
 
+    private BuildAnalyzerResultSeverity GetSeverityValue(BuildAnalyzerConfiguration editorConfigValue, BuildAnalyzerConfiguration defaultValue)
+    {
+        BuildAnalyzerResultSeverity? resultSeverity = null;
+
+        // Consider Default as null, so the severity from the default value could be selected.
+        // Default severity is not recognized by the infrastructure and serves for configuration purpuses only. 
+        if (editorConfigValue.Severity != null && editorConfigValue.Severity != BuildAnalyzerResultSeverity.Default)
+        {
+            resultSeverity = editorConfigValue.Severity;
+        }
+
+        resultSeverity ??= defaultValue.Severity ?? EnsureNonNull(BuildAnalyzerConfiguration.Default.Severity);
+
+        return resultSeverity.Value;
+    }
+
     private static T EnsureNonNull<T>(T? value) where T : struct
     {
         if (value is null)
diff --git a/src/Build/BuildCheck/Utilities/EnumerableExtensions.cs b/src/Build/BuildCheck/Utilities/EnumerableExtensions.cs
index 96efc8ff2fd..f89f72b0e2c 100644
--- a/src/Build/BuildCheck/Utilities/EnumerableExtensions.cs
+++ b/src/Build/BuildCheck/Utilities/EnumerableExtensions.cs
@@ -3,9 +3,7 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
+using System.Collections.ObjectModel;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
 
@@ -23,6 +21,26 @@ public static string ToCsvString<T>(this IEnumerable<T>? source, bool useSpace =
         return source == null ? "<NULL>" : string.Join(useSpace ? ", " : ",", source);
     }
 
+    /// <summary>
+    /// Returns the item as an enumerable with single item.
+    /// </summary>
+    /// <typeparam name="T"></typeparam>
+    /// <param name="item"></param>
+    /// <returns></returns>
+    public static IEnumerable<T> AsSingleItemEnumerable<T>(this T item)
+    {
+        yield return item;
+    }
+
+#if !NET
+    /// <summary>
+    /// Returns a read-only <see cref="ReadOnlyDictionary{TKey, TValue}"/> wrapper
+    /// for the current dictionary.
+    /// </summary>
+    public static ReadOnlyDictionary<TKey, TValue> AsReadOnly<TKey, TValue>(this IDictionary<TKey, TValue> dictionary)
+        => new(dictionary);
+#endif
+
     /// <summary>
     /// Adds a content of given dictionary to current dictionary.
     /// </summary>
diff --git a/src/Build/CompatibilitySuppressions.xml b/src/Build/CompatibilitySuppressions.xml
new file mode 100644
index 00000000000..1fd3a166926
--- /dev/null
+++ b/src/Build/CompatibilitySuppressions.xml
@@ -0,0 +1,88 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<!-- https://learn.microsoft.com/en-us/dotnet/fundamentals/package-validation/diagnostic-ids -->
+<Suppressions xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>F:Microsoft.Build.Experimental.BuildCheck.BuildAnalyzerResultSeverity.Info</Target>
+    <Left>lib/net472/Microsoft.Build.dll</Left>
+    <Right>lib/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>F:Microsoft.Build.Experimental.BuildCheck.BuildAnalyzerResultSeverity.Info</Target>
+    <Left>lib/net8.0/Microsoft.Build.dll</Left>
+    <Right>lib/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>F:Microsoft.Build.Experimental.BuildCheck.BuildAnalyzerResultSeverity.Info</Target>
+    <Left>ref/net472/Microsoft.Build.dll</Left>
+    <Right>ref/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0002</DiagnosticId>
+    <Target>F:Microsoft.Build.Experimental.BuildCheck.BuildAnalyzerResultSeverity.Info</Target>
+    <Left>ref/net8.0/Microsoft.Build.dll</Left>
+    <Right>ref/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0011</DiagnosticId>
+    <Target>F:Microsoft.Build.Experimental.BuildCheck.BuildAnalyzerResultSeverity.Error</Target>
+    <Left>lib/net472/Microsoft.Build.dll</Left>
+    <Right>lib/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0011</DiagnosticId>
+    <Target>F:Microsoft.Build.Experimental.BuildCheck.BuildAnalyzerResultSeverity.Warning</Target>
+    <Left>lib/net472/Microsoft.Build.dll</Left>
+    <Right>lib/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0011</DiagnosticId>
+    <Target>F:Microsoft.Build.Experimental.BuildCheck.BuildAnalyzerResultSeverity.Error</Target>
+    <Left>lib/net8.0/Microsoft.Build.dll</Left>
+    <Right>lib/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0011</DiagnosticId>
+    <Target>F:Microsoft.Build.Experimental.BuildCheck.BuildAnalyzerResultSeverity.Warning</Target>
+    <Left>lib/net8.0/Microsoft.Build.dll</Left>
+    <Right>lib/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0011</DiagnosticId>
+    <Target>F:Microsoft.Build.Experimental.BuildCheck.BuildAnalyzerResultSeverity.Error</Target>
+    <Left>ref/net472/Microsoft.Build.dll</Left>
+    <Right>ref/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0011</DiagnosticId>
+    <Target>F:Microsoft.Build.Experimental.BuildCheck.BuildAnalyzerResultSeverity.Warning</Target>
+    <Left>ref/net472/Microsoft.Build.dll</Left>
+    <Right>ref/net472/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0011</DiagnosticId>
+    <Target>F:Microsoft.Build.Experimental.BuildCheck.BuildAnalyzerResultSeverity.Error</Target>
+    <Left>ref/net8.0/Microsoft.Build.dll</Left>
+    <Right>ref/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+  <Suppression>
+    <DiagnosticId>CP0011</DiagnosticId>
+    <Target>F:Microsoft.Build.Experimental.BuildCheck.BuildAnalyzerResultSeverity.Warning</Target>
+    <Left>ref/net8.0/Microsoft.Build.dll</Left>
+    <Right>ref/net8.0/Microsoft.Build.dll</Right>
+    <IsBaselineSuppression>true</IsBaselineSuppression>
+  </Suppression>
+</Suppressions>
\ No newline at end of file
diff --git a/src/Build/Graph/GraphBuildRequestData.cs b/src/Build/Graph/GraphBuildRequestData.cs
index c09a587b106..7a173627c99 100644
--- a/src/Build/Graph/GraphBuildRequestData.cs
+++ b/src/Build/Graph/GraphBuildRequestData.cs
@@ -2,11 +2,12 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Collections.Generic;
+using System.Collections.Immutable;
+using System.Linq;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Shared;
 
-#nullable disable
-
 namespace Microsoft.Build.Graph
 {
     public record GraphBuildOptions
@@ -20,7 +21,7 @@ public record GraphBuildOptions
     /// <summary>
     /// GraphBuildRequestData encapsulates all of the data needed to submit a graph build request.
     /// </summary>
-    public sealed class GraphBuildRequestData
+    public sealed class GraphBuildRequestData : BuildRequestData<GraphBuildRequestData, GraphBuildResult>
     {
         /// <summary>
         /// Constructs a GraphBuildRequestData for build requests based on a project graph.
@@ -38,7 +39,7 @@ public GraphBuildRequestData(ProjectGraph projectGraph, ICollection<string> targ
         /// <param name="projectGraph">The graph to build.</param>
         /// <param name="targetsToBuild">The targets to build.</param>
         /// <param name="hostServices">The host services to use, if any.  May be null.</param>
-        public GraphBuildRequestData(ProjectGraph projectGraph, ICollection<string> targetsToBuild, HostServices hostServices)
+        public GraphBuildRequestData(ProjectGraph projectGraph, ICollection<string> targetsToBuild, HostServices? hostServices)
             : this(projectGraph, targetsToBuild, hostServices, BuildRequestDataFlags.None)
         {
         }
@@ -50,7 +51,7 @@ public GraphBuildRequestData(ProjectGraph projectGraph, ICollection<string> targ
         /// <param name="targetsToBuild">The targets to build.</param>
         /// <param name="hostServices">The host services to use, if any.  May be null.</param>
         /// <param name="flags">Flags controlling this build request.</param>
-        public GraphBuildRequestData(ProjectGraph projectGraph, ICollection<string> targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags)
+        public GraphBuildRequestData(ProjectGraph projectGraph, ICollection<string> targetsToBuild, HostServices? hostServices, BuildRequestDataFlags flags)
             : this(targetsToBuild, hostServices, flags)
         {
             ErrorUtilities.VerifyThrowArgumentNull(projectGraph, nameof(projectGraph));
@@ -65,7 +66,7 @@ public GraphBuildRequestData(ProjectGraph projectGraph, ICollection<string> targ
         /// <param name="globalProperties">The global properties which should be used during evaluation of the project.  Cannot be null.</param>
         /// <param name="targetsToBuild">The targets to build.</param>
         /// <param name="hostServices">The host services to use.  May be null.</param>
-        public GraphBuildRequestData(string projectFullPath, IDictionary<string, string> globalProperties, ICollection<string> targetsToBuild, HostServices hostServices)
+        public GraphBuildRequestData(string projectFullPath, IDictionary<string, string> globalProperties, ICollection<string> targetsToBuild, HostServices? hostServices)
             : this(new ProjectGraphEntryPoint(projectFullPath, globalProperties).AsEnumerable(), targetsToBuild, hostServices, BuildRequestDataFlags.None)
         {
         }
@@ -78,7 +79,7 @@ public GraphBuildRequestData(string projectFullPath, IDictionary<string, string>
         /// <param name="targetsToBuild">The targets to build.</param>
         /// <param name="hostServices">The host services to use.  May be null.</param>
         /// <param name="flags">The <see cref="BuildRequestDataFlags"/> to use.</param>
-        public GraphBuildRequestData(string projectFullPath, IDictionary<string, string> globalProperties, ICollection<string> targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags)
+        public GraphBuildRequestData(string projectFullPath, IDictionary<string, string> globalProperties, ICollection<string> targetsToBuild, HostServices? hostServices, BuildRequestDataFlags flags)
             : this(new ProjectGraphEntryPoint(projectFullPath, globalProperties).AsEnumerable(), targetsToBuild, hostServices, flags)
         {
         }
@@ -99,7 +100,7 @@ public GraphBuildRequestData(ProjectGraphEntryPoint projectGraphEntryPoint, ICol
         /// <param name="projectGraphEntryPoint">The entry point to use in the build.</param>
         /// <param name="targetsToBuild">The targets to build.</param>
         /// <param name="hostServices">The host services to use, if any.  May be null.</param>
-        public GraphBuildRequestData(ProjectGraphEntryPoint projectGraphEntryPoint, ICollection<string> targetsToBuild, HostServices hostServices)
+        public GraphBuildRequestData(ProjectGraphEntryPoint projectGraphEntryPoint, ICollection<string> targetsToBuild, HostServices? hostServices)
             : this(projectGraphEntryPoint.AsEnumerable(), targetsToBuild, hostServices, BuildRequestDataFlags.None)
         {
         }
@@ -111,7 +112,7 @@ public GraphBuildRequestData(ProjectGraphEntryPoint projectGraphEntryPoint, ICol
         /// <param name="targetsToBuild">The targets to build.</param>
         /// <param name="hostServices">The host services to use, if any.  May be null.</param>
         /// <param name="flags">Flags controlling this build request.</param>
-        public GraphBuildRequestData(ProjectGraphEntryPoint projectGraphEntryPoint, ICollection<string> targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags)
+        public GraphBuildRequestData(ProjectGraphEntryPoint projectGraphEntryPoint, ICollection<string> targetsToBuild, HostServices? hostServices, BuildRequestDataFlags flags)
             : this(projectGraphEntryPoint.AsEnumerable(), targetsToBuild, hostServices, flags)
         {
         }
@@ -132,7 +133,7 @@ public GraphBuildRequestData(IEnumerable<ProjectGraphEntryPoint> projectGraphEnt
         /// <param name="projectGraphEntryPoints">The entry points to use in the build.</param>
         /// <param name="targetsToBuild">The targets to build.</param>
         /// <param name="hostServices">The host services to use, if any.  May be null.</param>
-        public GraphBuildRequestData(IEnumerable<ProjectGraphEntryPoint> projectGraphEntryPoints, ICollection<string> targetsToBuild, HostServices hostServices)
+        public GraphBuildRequestData(IEnumerable<ProjectGraphEntryPoint> projectGraphEntryPoints, ICollection<string> targetsToBuild, HostServices? hostServices)
             : this(projectGraphEntryPoints, targetsToBuild, hostServices, BuildRequestDataFlags.None)
         {
         }
@@ -144,7 +145,7 @@ public GraphBuildRequestData(IEnumerable<ProjectGraphEntryPoint> projectGraphEnt
         /// <param name="targetsToBuild">The targets to build.</param>
         /// <param name="hostServices">The host services to use, if any.  May be null.</param>
         /// <param name="flags">Flags controlling this build request.</param>
-        public GraphBuildRequestData(IEnumerable<ProjectGraphEntryPoint> projectGraphEntryPoints, ICollection<string> targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags)
+        public GraphBuildRequestData(IEnumerable<ProjectGraphEntryPoint> projectGraphEntryPoints, ICollection<string> targetsToBuild, HostServices? hostServices, BuildRequestDataFlags flags)
             : this(targetsToBuild, hostServices, flags)
         {
             ErrorUtilities.VerifyThrowArgumentNull(projectGraphEntryPoints, nameof(projectGraphEntryPoints));
@@ -152,27 +153,20 @@ public GraphBuildRequestData(IEnumerable<ProjectGraphEntryPoint> projectGraphEnt
             ProjectGraphEntryPoints = projectGraphEntryPoints;
         }
 
-        public GraphBuildRequestData(IEnumerable<ProjectGraphEntryPoint> projectGraphEntryPoints, ICollection<string> targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags, GraphBuildOptions graphBuildOptions)
+        public GraphBuildRequestData(IEnumerable<ProjectGraphEntryPoint> projectGraphEntryPoints, ICollection<string> targetsToBuild, HostServices? hostServices, BuildRequestDataFlags flags, GraphBuildOptions graphBuildOptions)
             : this(targetsToBuild, hostServices, flags, graphBuildOptions)
         {
             ErrorUtilities.VerifyThrowArgumentNull(projectGraphEntryPoints, nameof(projectGraphEntryPoints));
 
-            ProjectGraphEntryPoints = projectGraphEntryPoints;
+            ProjectGraphEntryPoints = projectGraphEntryPoints.ToList();
         }
 
         /// <summary>
         /// Common constructor.
         /// </summary>
-        private GraphBuildRequestData(ICollection<string> targetsToBuild, HostServices hostServices, BuildRequestDataFlags flags, GraphBuildOptions graphBuildOptions = null)
+        private GraphBuildRequestData(ICollection<string> targetsToBuild, HostServices? hostServices, BuildRequestDataFlags flags, GraphBuildOptions? graphBuildOptions = null)
+        : base(targetsToBuild, flags, hostServices)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(targetsToBuild, nameof(targetsToBuild));
-            foreach (string targetName in targetsToBuild)
-            {
-                ErrorUtilities.VerifyThrowArgumentNull(targetName, "target");
-            }
-
-            HostServices = hostServices;
-            TargetNames = new List<string>(targetsToBuild);
             Flags = flags;
             GraphBuildOptions = graphBuildOptions ?? new GraphBuildOptions();
         }
@@ -182,34 +176,64 @@ private GraphBuildRequestData(ICollection<string> targetsToBuild, HostServices h
         /// May be null.
         /// </summary>
         /// <value>The project graph.</value>
-        public ProjectGraph ProjectGraph { get; }
+        public ProjectGraph? ProjectGraph { get; }
 
         /// <summary>
         /// The project graph entry points.
         /// May be null.
         /// </summary>
         /// <value>The project graph entry points.</value>
-        public IEnumerable<ProjectGraphEntryPoint> ProjectGraphEntryPoints { get; }
+        public IEnumerable<ProjectGraphEntryPoint>? ProjectGraphEntryPoints { get; }
 
-        /// <summary>
-        /// The name of the targets to build.
-        /// </summary>
-        /// <value>An array of targets in the project to be built.</value>
-        public ICollection<string> TargetNames { get; }
+        internal override BuildSubmissionBase<GraphBuildRequestData, GraphBuildResult> CreateSubmission(BuildManager buildManager, int submissionId, GraphBuildRequestData requestData,
+            bool legacyThreadingSemantics) =>
+            new GraphBuildSubmission(buildManager, submissionId, requestData);
 
-        /// <summary>
-        /// Extra flags for this BuildRequest.
-        /// </summary>
-        public BuildRequestDataFlags Flags { get; }
+        public override IEnumerable<string> EntryProjectsFullPath
+        {
+            get
+            {
+                if (ProjectGraph != null)
+                {
+                    foreach (ProjectGraphNode entryPoint in ProjectGraph.EntryPointNodes)
+                    {
+                        yield return entryPoint.ProjectInstance.FullPath;
+                    }
+                }
+                else if (ProjectGraphEntryPoints != null)
+                {
+                    foreach (ProjectGraphEntryPoint entryPoint in ProjectGraphEntryPoints)
+                    {
+                        yield return entryPoint.ProjectFile;
+                    }
+                }
+            }
+        }
+
+        public override IReadOnlyDictionary<string, string?> GlobalPropertiesLookup
+        {
+            get
+            {
+                ProjectGraphNode? node = ProjectGraph?.EntryPointNodes.FirstOrDefault();
+                if (node != null)
+                {
+                    return node.ProjectInstance.GlobalProperties.AsReadOnly();
+                }
+
+                ProjectGraphEntryPoint? entryPoint = ProjectGraphEntryPoints?.FirstOrDefault();
+                if (entryPoint != null)
+                {
+                    return entryPoint.Value.GlobalProperties.AsReadOnly();
+                }
+
+                return ImmutableDictionary<string, string?>.Empty;
+            }
+        }
+        public override bool IsGraphRequest => true;
 
         /// <summary>
         /// Options for how the graph should be built.
         /// </summary>
         public GraphBuildOptions GraphBuildOptions { get; }
-
-        /// <summary>
-        /// Gets the HostServices object for this request.
-        /// </summary>
-        public HostServices HostServices { get; }
     }
 }
diff --git a/src/Build/Graph/GraphBuildResult.cs b/src/Build/Graph/GraphBuildResult.cs
index 6df04a0c899..c13ea8ce105 100644
--- a/src/Build/Graph/GraphBuildResult.cs
+++ b/src/Build/Graph/GraphBuildResult.cs
@@ -3,14 +3,13 @@
 
 using System;
 using System.Collections.Generic;
+using System.Collections.Immutable;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
 
-#nullable disable
-
 namespace Microsoft.Build.Graph
 {
-    public sealed class GraphBuildResult
+    public sealed class GraphBuildResult : BuildResultBase
     {
         /// <summary>
         /// Constructor creates a build result with results for each graph node.
@@ -32,27 +31,28 @@ internal GraphBuildResult(int submissionId, Exception exception)
         {
             SubmissionId = submissionId;
             Exception = exception;
+            ResultsByNode = ImmutableDictionary<ProjectGraphNode, BuildResult>.Empty;
         }
 
         /// <summary>
         /// Returns the submission id.
         /// </summary>
-        public int SubmissionId { get; }
+        public override int SubmissionId { get; }
 
         /// <summary>
         /// Returns a flag indicating if a circular dependency was detected.
         /// </summary>
-        public bool CircularDependency => Exception is CircularDependencyException;
+        public override bool CircularDependency => Exception is CircularDependencyException;
 
         /// <summary>
         /// Returns the exception generated while this result was run, if any.
         /// </summary>
-        public Exception Exception { get; internal set; }
+        public override Exception? Exception { get; internal set; }
 
         /// <summary>
         /// Returns the overall result for this result set.
         /// </summary>
-        public BuildResultCode OverallResult
+        public override BuildResultCode OverallResult
         {
             get
             {
diff --git a/src/Build/Graph/GraphBuildSubmission.cs b/src/Build/Graph/GraphBuildSubmission.cs
index 9c00b5bb0e4..6e45cc0231d 100644
--- a/src/Build/Graph/GraphBuildSubmission.cs
+++ b/src/Build/Graph/GraphBuildSubmission.cs
@@ -4,11 +4,10 @@
 using System;
 using System.Globalization;
 using System.Threading;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
-#nullable disable
-
 namespace Microsoft.Build.Graph
 {
     /// <summary>
@@ -26,126 +25,44 @@ namespace Microsoft.Build.Graph
     /// <remarks>
     /// This class is thread-safe.
     /// </remarks>
-    public class GraphBuildSubmission
+    public class GraphBuildSubmission : BuildSubmissionBase<GraphBuildRequestData, GraphBuildResult>
     {
-        /// <summary>
-        /// The callback to invoke when the submission is complete.
-        /// </summary>
-        private GraphBuildSubmissionCompleteCallback _completionCallback;
-
-        /// <summary>
-        /// The completion event.
-        /// </summary>
-        private readonly ManualResetEvent _completionEvent;
-
-        /// <summary>
-        /// True if it has been invoked
-        /// </summary>
-        private int _completionInvoked;
-
-        /// <summary>
-        /// Constructor
-        /// </summary>
-        internal GraphBuildSubmission(BuildManager buildManager, int submissionId, GraphBuildRequestData requestData)
+        internal GraphBuildSubmission(BuildManager buildManager, int submissionId, GraphBuildRequestData requestData) :
+            base(buildManager, submissionId, requestData)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(buildManager, nameof(buildManager));
-            ErrorUtilities.VerifyThrowArgumentNull(requestData, nameof(requestData));
-
-            BuildManager = buildManager;
-            SubmissionId = submissionId;
-            BuildRequestData = requestData;
-            _completionEvent = new ManualResetEvent(false);
-            _completionInvoked = 0;
+            CompleteLogging();
         }
 
         /// <summary>
-        /// The BuildManager with which this submission is associated.
-        /// </summary>
-        public BuildManager BuildManager { get; }
-
-        /// <summary>
-        /// An ID uniquely identifying this request from among other submissions within the same build.
-        /// </summary>
-        public int SubmissionId { get; }
-
-        /// <summary>
-        /// The asynchronous context provided to <see cref="BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback, object)"/>, if any.
-        /// </summary>
-        public Object AsyncContext { get; private set; }
-
-        /// <summary>
-        /// A <see cref="System.Threading.WaitHandle"/> which will be signalled when the build is complete.  Valid after <see cref="BuildSubmission.Execute()"/> or <see cref="BuildSubmission.ExecuteAsync(BuildSubmissionCompleteCallback, object)"/> returns, otherwise null.
-        /// </summary>
-        public WaitHandle WaitHandle => _completionEvent;
-
-        /// <summary>
-        /// Returns true if this submission is complete.
-        /// </summary>
-        public bool IsCompleted => WaitHandle.WaitOne(new TimeSpan(0));
-
-        /// <summary>
-        /// The results of the build per graph node.  Valid only after WaitHandle has become signalled.
-        /// </summary>
-        public GraphBuildResult BuildResult { get; internal set; }
-
-        /// <summary>
-        /// The BuildRequestData being used for this submission.
+        /// Starts the request asynchronously and immediately returns control to the caller.
         /// </summary>
-        internal GraphBuildRequestData BuildRequestData { get; }
+        /// <exception cref="InvalidOperationException">The request has already been started or is already complete.</exception>
+        public void ExecuteAsync(GraphBuildSubmissionCompleteCallback? callback, object? context)
+        {
+            void Clb(BuildSubmissionBase<GraphBuildRequestData, GraphBuildResult> submission)
+            {
+                callback?.Invoke((GraphBuildSubmission)submission);
+            }
 
-        /// <summary>
-        /// Whether the graph build has started.
-        /// </summary>
-        internal bool IsStarted { get; set; }
+            ExecuteAsync(Clb, context, allowMainThreadBuild: false);
+        }
 
         /// <summary>
         /// Starts the request and blocks until results are available.
         /// </summary>
         /// <exception cref="System.InvalidOperationException">The request has already been started or is already complete.</exception>
-        public GraphBuildResult Execute()
+        public override GraphBuildResult Execute()
         {
             ExecuteAsync(null, null);
             WaitHandle.WaitOne();
 
-            return BuildResult;
-        }
+            ErrorUtilities.VerifyThrow(BuildResult != null,
+                "BuildResult is not populated after Execute is done.");
 
-        /// <summary>
-        /// Starts the request asynchronously and immediately returns control to the caller.
-        /// </summary>
-        /// <exception cref="System.InvalidOperationException">The request has already been started or is already complete.</exception>
-        public void ExecuteAsync(GraphBuildSubmissionCompleteCallback callback, object context)
-        {
-            ErrorUtilities.VerifyThrowInvalidOperation(!IsCompleted, "SubmissionAlreadyComplete");
-            _completionCallback = callback;
-            AsyncContext = context;
-            BuildManager.ExecuteSubmission(this);
+            return BuildResult!;
         }
 
-        /// <summary>
-        /// Sets the event signaling that the build is complete.
-        /// </summary>
-        internal void CompleteResults(GraphBuildResult result)
-        {
-            ErrorUtilities.VerifyThrowArgumentNull(result, nameof(result));
-            ErrorUtilities.VerifyThrow(result.SubmissionId == SubmissionId, "GraphBuildResult's submission id doesn't match GraphBuildSubmission's");
-
-            bool hasCompleted = (Interlocked.Exchange(ref _completionInvoked, 1) == 1);
-            if (!hasCompleted)
-            {
-                BuildResult = result;
-                _completionEvent.Set();
-
-                if (_completionCallback != null)
-                {
-                    void Callback(object state)
-                    {
-                        _completionCallback(this);
-                    }
-
-                    ThreadPoolExtensions.QueueThreadPoolWorkItemWithCulture(Callback, CultureInfo.CurrentCulture, CultureInfo.CurrentUICulture);
-                }
-            }
-        }
+        protected internal override GraphBuildResult CreateFailedResult(Exception exception)
+            => new(SubmissionId, exception);
     }
 }
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 17cba8792a1..fdb17b4d312 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -132,8 +132,11 @@
     <Compile Include="AssemblyInfo.cs" />
     <Compile Include="BackEnd\BuildManager\BuildManager.cs" />
     <Compile Include="BackEnd\BuildManager\BuildParameters.cs" />
+    <Compile Include="BackEnd\BuildManager\BuildRequestDataBase.cs" />
+    <Compile Include="BackEnd\BuildManager\BuildSubmissionBase.cs" />
     <Compile Include="BackEnd\BuildManager\CacheSerialization.cs" />
     <Compile Include="BackEnd\BuildManager\CacheAggregator.cs" />
+    <Compile Include="BackEnd\BuildManager\GlobalPropertiesLookup.cs" />
     <Compile Include="BackEnd\BuildManager\ProjectIsolationMode.cs" />
     <Compile Include="BackEnd\Client\MSBuildClientPacketPump.cs" />
     <Compile Include="BackEnd\Client\MSBuildClientExitType.cs" />
@@ -156,6 +159,7 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
+    <Compile Include="BackEnd\Shared\BuildResultBase.cs" />
     <Compile Include="BuildCheck\**\*.cs" />
     <Compile Include="Evaluation\IItemTypeDefinition.cs" />
     <Compile Include="Evaluation\IProperty2.cs" />
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 84d4d285ca0..741e731b9ad 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -2108,23 +2108,23 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
     </comment>
   </data>
   <data name="CustomAnalyzerSuccessfulAcquisition" xml:space="preserve">
-    <value>Custom analyzer rule: {0} has been registered successfully.</value>
+    <value>Custom analyzer rule: '{0}' has been registered successfully.</value>
     <comment>The message is emitted on successful loading of the custom analyzer rule in process.</comment>
   </data>
   <data name="CustomAnalyzerFailedAcquisition" xml:space="preserve">
-    <value>Failed to register the custom analyzer: {0}.</value>
+    <value>Failed to register the custom analyzer: '{0}'.</value>
     <comment>The message is emitted on failed loading of the custom analyzer in process.</comment>
   </data>
   <data name="CustomAnalyzerFailedRuleLoading" xml:space="preserve">
-    <value>Failed to instantiate the custom analyzer rule with the following exception: {0}.</value>
+    <value>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</value>
     <comment>The message is emitted on failed loading of the custom analyzer rule in process.</comment>
   </data>
   <data name="CustomAnalyzerAssemblyNotExist" xml:space="preserve">
-    <value>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</value>
+    <value>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</value>
     <comment>The message is emitted when the custom analyzer assembly can not be found.</comment>
   </data>
   <data name="CustomAnalyzerBaseTypeNotAssignable" xml:space="preserve">
-    <value>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</value>
+    <value>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</value>
     <comment>The message is emitted when the custom analyzer assembly can not be successfully registered.</comment>
   </data>
   <data name="TaskAssemblyLocationMismatch" xml:space="preserve">
@@ -2133,6 +2133,12 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
   <data name="ProjectImportsCollectorFileIOFail" xml:space="preserve">
     <value>An exception occurred when adding the file '{0}', Exception: '{1}'</value>
   </data>
+  <data name="BuildCheckEnabled" xml:space="preserve">
+    <value>The BuildCheck is enabled for this build.</value>
+  </data>
+  <data name="CustomAnalyzerRegistered" xml:space="preserve">
+    <value>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</value>
+  </data>
   <!--
         The Build message bucket is: MSB4000 - MSB4999
 
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index 79582544480..a0d4aa03e9b 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -131,6 +131,11 @@
         <target state="translated">ZÃ¡pis nenÃ­ podporovÃ¡n.</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">VytvoÅenÃ­ otÃ¡zky SELHALO. VytvÃ¡ÅenÃ­ bylo pÅedÄasnÄ ukonÄeno, protoÅ¾e se pÅi nÄm narazilo na cÃ­l nebo Ãºlohu, kterÃ© nebyly aktuÃ¡lnÃ­.</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">NepodaÅilo se najÃ­t zadanÃ© sestavenÃ­ vlastnÃ­ho analyzÃ¡toru: {0}. Zkontrolujte prosÃ­m, jestli existuje.</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">NepodaÅilo se najÃ­t zadanÃ© sestavenÃ­ vlastnÃ­ho analyzÃ¡toru: {0}. Zkontrolujte prosÃ­m, jestli existuje.</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">NepodaÅilo se naÄÃ­st vlastnÃ­ typ analyzÃ¡toru: {0} ze sestavenÃ­: {1}. UjistÄte se, Å¾e dÄdÃ­ zÃ¡kladnÃ­ tÅÃ­du Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. Pokud se nemÃ¡ jednat o vlastnÃ­ analyzÃ¡tor, nemÄl by bÃ½t odkrytÃ½. DalÅ¡Ã­ informace: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">NepodaÅilo se naÄÃ­st vlastnÃ­ typ analyzÃ¡toru: {0} ze sestavenÃ­: {1}. UjistÄte se, Å¾e dÄdÃ­ zÃ¡kladnÃ­ tÅÃ­du Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. Pokud se nemÃ¡ jednat o vlastnÃ­ analyzÃ¡tor, nemÄl by bÃ½t odkrytÃ½. DalÅ¡Ã­ informace: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">NepodaÅilo se zaregistrovat vlastnÃ­ analyzÃ¡tor: {0}.</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">NepodaÅilo se zaregistrovat vlastnÃ­ analyzÃ¡tor: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">Nepovedlo se vytvoÅit instanci pravidla vlastnÃ­ho analyzÃ¡toru s nÃ¡sledujÃ­cÃ­ vÃ½jimkou: {0}.</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">Nepovedlo se vytvoÅit instanci pravidla vlastnÃ­ho analyzÃ¡toru s nÃ¡sledujÃ­cÃ­ vÃ½jimkou: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">Pravidlo vlastnÃ­ho analyzÃ¡toru: {0} se ÃºspÄÅ¡nÄ zaregistrovalo.</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">Pravidlo vlastnÃ­ho analyzÃ¡toru: {0} se ÃºspÄÅ¡nÄ zaregistrovalo.</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index 09ee26a3228..614eebf6d2c 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -131,6 +131,11 @@
         <target state="translated">SchreibvorgÃ¤nge werden nicht unterstÃ¼tzt.</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">Fehler beim Erstellen der Frage. Der Build wurde frÃ¼h beendet, da ein Ziel oder eine Aufgabe gefunden wurde, die nicht aktuell war.</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">Fehler beim Suchen der angegebenen benutzerdefinierten Analysetoolassembly: {0}. ÃberprÃ¼fen Sie, ob sie vorhanden ist.</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">Fehler beim Suchen der angegebenen benutzerdefinierten Analysetoolassembly: {0}. ÃberprÃ¼fen Sie, ob sie vorhanden ist.</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">Fehler beim Laden des benutzerdefinierten Analysetooltyps â{0}â aus der Assembly â{1}â. Stellen Sie sicher, dass es die Basisklasse âMicrosoft.Build.Experimental.BuildCheck.BuildAnalyzerâ erbt. Wenn es sich nicht um ein benutzerdefiniertes Analysetool handelt, sollte es nicht verfÃ¼gbar gemacht werden. Weitere Informationen: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">Fehler beim Laden des benutzerdefinierten Analysetooltyps â{0}â aus der Assembly â{1}â. Stellen Sie sicher, dass es die Basisklasse âMicrosoft.Build.Experimental.BuildCheck.BuildAnalyzerâ erbt. Wenn es sich nicht um ein benutzerdefiniertes Analysetool handelt, sollte es nicht verfÃ¼gbar gemacht werden. Weitere Informationen: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">Fehler beim Registrieren des benutzerdefinierten Analysetools: {0}.</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">Fehler beim Registrieren des benutzerdefinierten Analysetools: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">Fehler beim Instanziieren der benutzerdefinierten Analysetoolregel mit der folgenden Ausnahme: {0}.</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">Fehler beim Instanziieren der benutzerdefinierten Analysetoolregel mit der folgenden Ausnahme: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">Benutzerdefinierte Analysetoolregel {0} wurde erfolgreich registriert.</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">Benutzerdefinierte Analysetoolregel {0} wurde erfolgreich registriert.</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index ee28c007934..753cb86e0ef 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -131,6 +131,11 @@
         <target state="translated">No se admite la escritura.</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">La creaciÃ³n de la pregunta ha FALLADO. La creaciÃ³n finalizÃ³ antes de tiempo al encontrar un objetivo o tarea que no estaba actualizado.</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">No se ha podido encontrar el ensamblado del analizador personalizado especificado: {0}. Compruebe si existe.</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">No se ha podido encontrar el ensamblado del analizador personalizado especificado: {0}. Compruebe si existe.</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">No se pudo cargar el tipo de analizador personalizado: {0} del ensamblado: {1}. AsegÃºrese de que hereda la clase base Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. Si no estÃ¡ pensado para ser un analizador personalizado, entonces no deberÃ­a exponerse. MÃ¡s informaciÃ³n: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">No se pudo cargar el tipo de analizador personalizado: {0} del ensamblado: {1}. AsegÃºrese de que hereda la clase base Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. Si no estÃ¡ pensado para ser un analizador personalizado, entonces no deberÃ­a exponerse. MÃ¡s informaciÃ³n: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">No se ha podido registrar el analizador personalizado: {0}.</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">No se ha podido registrar el analizador personalizado: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">No se ha podido crear una instancia de la regla del analizador personalizado con la siguiente excepciÃ³n: {0}.</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">No se ha podido crear una instancia de la regla del analizador personalizado con la siguiente excepciÃ³n: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">Regla del analizador personalizado: {0} se ha registrado correctamente.</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">Regla del analizador personalizado: {0} se ha registrado correctamente.</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index 5b66c57a7a0..95ef0f97ce4 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -131,6 +131,11 @@
         <target state="translated">LâÃ©criture nâest pas recommandÃ©e.</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">ÃCHEC de la gÃ©nÃ©ration de la question. La gÃ©nÃ©ration sâest arrÃªtÃ©e tÃ´t, car elle a rencontrÃ© une cible ou une tÃ¢che qui nâÃ©tait pas Ã  jour.</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">Impossible de trouver lâassemblÃ©e d'analyseur personnalisÃ© spÃ©cifiÃ©Â : {0}. VÃ©rifiez sâil existe.</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">Impossible de trouver lâassemblÃ©e d'analyseur personnalisÃ© spÃ©cifiÃ©Â : {0}. VÃ©rifiez sâil existe.</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">Ãchec du chargement du type dâanalyseur personnalisÃ©Â : {0} Ã  partir de lâassemblyÂ : {1}. Assurez-vous quâil hÃ©rite de la classe de base Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. Sâil ne doit pas Ãªtre un analyseur personnalisÃ©, il ne doit pas Ãªtre exposÃ©. Plus dâinformationsÂ : https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">Ãchec du chargement du type dâanalyseur personnalisÃ©Â : {0} Ã  partir de lâassemblyÂ : {1}. Assurez-vous quâil hÃ©rite de la classe de base Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. Sâil ne doit pas Ãªtre un analyseur personnalisÃ©, il ne doit pas Ãªtre exposÃ©. Plus dâinformationsÂ : https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">Ãchec de lâinscription de lâanalyseur personnalisÃ© : {0}.</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">Ãchec de lâinscription de lâanalyseur personnalisÃ© : {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">Ãchec de lâinstanciation de la rÃ¨gle dâanalyseur personnalisÃ© avec lâexception suivante : {0}.</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">Ãchec de lâinstanciation de la rÃ¨gle dâanalyseur personnalisÃ© avec lâexception suivante : {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">RÃ¨gle de lâanalyseur personnalisÃ© : {0} a Ã©tÃ© correctement inscrit.</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">RÃ¨gle de lâanalyseur personnalisÃ© : {0} a Ã©tÃ© correctement inscrit.</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index fd3ecfcea70..60793747d08 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -131,6 +131,11 @@
         <target state="translated">La scrittura non Ã¨ supportata.</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">Compilazione della domanda NON RIUSCITA. La compilazione Ã¨ terminata in anticipo perchÃ© Ã¨ stata rilevata una destinazione o un'attivitÃ  non aggiornata.</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">Impossibile trovare l'assembly dell'analizzatore personalizzato specificato: {0}. Verificare se esiste.</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">Impossibile trovare l'assembly dell'analizzatore personalizzato specificato: {0}. Verificare se esiste.</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">Non Ã¨ stato possibile caricare il tipo di analizzatore diagnostico personalizzato: {0} dall'assembly: {1}. Assicurarsi che erediti la classe di base Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. Se non Ã¨ destinato a essere un analizzatore personalizzato, non deve essere esposto. Per altre informazioni: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">Non Ã¨ stato possibile caricare il tipo di analizzatore diagnostico personalizzato: {0} dall'assembly: {1}. Assicurarsi che erediti la classe di base Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. Se non Ã¨ destinato a essere un analizzatore personalizzato, non deve essere esposto. Per altre informazioni: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">Impossibile registrare l'analizzatore personalizzato: {0}.</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">Impossibile registrare l'analizzatore personalizzato: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">Impossibile creare un'istanza della regola dell'analizzatore personalizzato con l'eccezione seguente: {0}.</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">Impossibile creare un'istanza della regola dell'analizzatore personalizzato con l'eccezione seguente: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">Regola dell'analizzatore personalizzato: {0} Ã¨ stata registrata.</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">Regola dell'analizzatore personalizzato: {0} Ã¨ stata registrata.</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index 3ce2178be00..6efeee512f8 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -131,6 +131,11 @@
         <target state="translated">æ¸ãè¾¼ã¿ã¯ãµãã¼ãããã¦ãã¾ããã</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">è³ªåã®ãã«ãã«å¤±æãã¾ããããã«ãã¯ãææ°ã§ã¯ãªãã¿ã¼ã²ããã¾ãã¯ã¿ã¹ã¯ãæ¤åºããããããæ©æã«çµäºãã¾ããã</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">æå®ãããã«ã¹ã¿ã  ã¢ãã©ã¤ã¶ã¼ ã¢ã»ã³ããªãè¦ã¤ããã¾ããã§ãã: {0}ãå­å¨ãããã©ããç¢ºèªãã¦ãã ããã</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">æå®ãããã«ã¹ã¿ã  ã¢ãã©ã¤ã¶ã¼ ã¢ã»ã³ããªãè¦ã¤ããã¾ããã§ãã: {0}ãå­å¨ãããã©ããç¢ºèªãã¦ãã ããã</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">ã«ã¹ã¿ã  ã¢ãã©ã¤ã¶ã¼ã®ç¨®é¡ãèª­ã¿è¾¼ãã¾ããã§ãã: ã¢ã»ã³ããª {1} ã® {0}ãMicrosoft.Build.Experimental.BuildCheck.BuildAnalyzer åºåºã¯ã©ã¹ãç¶æ¿ãã¦ãããã¨ãç¢ºèªãã¦ãã ãããã«ã¹ã¿ã  ã¢ãã©ã¤ã¶ã¼ãæå³ãã¦ããªãå ´åã¯ãå¬éããªãã§ãã ãããè©³ç´°æå ±: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">ã«ã¹ã¿ã  ã¢ãã©ã¤ã¶ã¼ã®ç¨®é¡ãèª­ã¿è¾¼ãã¾ããã§ãã: ã¢ã»ã³ããª {1} ã® {0}ãMicrosoft.Build.Experimental.BuildCheck.BuildAnalyzer åºåºã¯ã©ã¹ãç¶æ¿ãã¦ãããã¨ãç¢ºèªãã¦ãã ãããã«ã¹ã¿ã  ã¢ãã©ã¤ã¶ã¼ãæå³ãã¦ããªãå ´åã¯ãå¬éããªãã§ãã ãããè©³ç´°æå ±: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">ã«ã¹ã¿ã  ã¢ãã©ã¤ã¶ã¼ãç»é²ã§ãã¾ããã§ãã: {0}</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">ã«ã¹ã¿ã  ã¢ãã©ã¤ã¶ã¼ãç»é²ã§ãã¾ããã§ãã: {0}</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">æ¬¡ã®ä¾å¤ã«ãããã«ã¹ã¿ã  ã¢ãã©ã¤ã¶ã¼ ã«ã¼ã«ã®ã¤ã³ã¹ã¿ã³ã¹ãä½æã§ãã¾ããã§ãã: {0}ã</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">æ¬¡ã®ä¾å¤ã«ãããã«ã¹ã¿ã  ã¢ãã©ã¤ã¶ã¼ ã«ã¼ã«ã®ã¤ã³ã¹ã¿ã³ã¹ãä½æã§ãã¾ããã§ãã: {0}ã</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">ã«ã¹ã¿ã  ã¢ãã©ã¤ã¶ã¼ ã«ã¼ã«: {0} ãæ­£å¸¸ã«ç»é²ããã¾ããã</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">ã«ã¹ã¿ã  ã¢ãã©ã¤ã¶ã¼ ã«ã¼ã«: {0} ãæ­£å¸¸ã«ç»é²ããã¾ããã</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index 957af6dc562..ff7b0ebe082 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -131,6 +131,11 @@
         <target state="translated">ì°ê¸°ë ì§ìëì§ ììµëë¤.</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">ì§ë¬¸ ë¹ëì ì¤í¨íìµëë¤. ë¹ëê° ìµì ì´ ìë ëì ëë ììì ë°ê²¬íì¬ ì¼ì° ì¢ë£ëììµëë¤.</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">ì§ì í ì¬ì©ì ì§ì  ë¶ìê¸° ì´ìë¸ë¦¬ë¥¼ ì°¾ì§ ëª»íìµëë¤. {0}. ì¡´ì¬íëì§ íì¸íì¸ì.</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">ì§ì í ì¬ì©ì ì§ì  ë¶ìê¸° ì´ìë¸ë¦¬ë¥¼ ì°¾ì§ ëª»íìµëë¤. {0}. ì¡´ì¬íëì§ íì¸íì¸ì.</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">ì¬ì©ì ì§ì  ë¶ìê¸° íìì ë¡ëíì§ ëª»íìµëë¤. ì´ìë¸ë¦¬ìì {0} : {1}. Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer ê¸°ë³¸ í´ëì¤ë¥¼ ììí´ì¼ í©ëë¤. ì¬ì©ì ì§ì  ë¶ìê¸°ê° ìë ê²½ì° ë¸ì¶ëì§ ììì¼ í©ëë¤. ì¶ê° ì ë³´: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">ì¬ì©ì ì§ì  ë¶ìê¸° íìì ë¡ëíì§ ëª»íìµëë¤. ì´ìë¸ë¦¬ìì {0} : {1}. Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer ê¸°ë³¸ í´ëì¤ë¥¼ ììí´ì¼ í©ëë¤. ì¬ì©ì ì§ì  ë¶ìê¸°ê° ìë ê²½ì° ë¸ì¶ëì§ ììì¼ í©ëë¤. ì¶ê° ì ë³´: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">ì¬ì©ì ì§ì  ë¶ìê¸°ë¥¼ ë±ë¡íì§ ëª»íìµëë¤. {0}.</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">ì¬ì©ì ì§ì  ë¶ìê¸°ë¥¼ ë±ë¡íì§ ëª»íìµëë¤. {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">ë¤ì ìì¸ë¡ ì¸í´ ì¬ì©ì ì§ì  ë¶ìê¸° ê·ì¹ì ì¸ì¤í´ì¤ííì§ ëª»íìµëë¤. {0}.</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">ë¤ì ìì¸ë¡ ì¸í´ ì¬ì©ì ì§ì  ë¶ìê¸° ê·ì¹ì ì¸ì¤í´ì¤ííì§ ëª»íìµëë¤. {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">ì¬ì©ì ì§ì  ë¶ìê¸° ê·ì¹: {0}ì´(ê°) ë±ë¡ëììµëë¤.</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">ì¬ì©ì ì§ì  ë¶ìê¸° ê·ì¹: {0}ì´(ê°) ë±ë¡ëììµëë¤.</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index b74e407a2fd..6d2af5ea7ef 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -131,6 +131,11 @@
         <target state="translated">Zapisywanie nie jest obsÅugiwane.</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">NIEPOWODZENIE kompilacji pytania. Kompilacja zostaÅa zakoÅczona wczeÅniej, poniewaÅ¼ napotkaÅa element docelowy lub zadanie, ktÃ³re nie byÅo aktualne.</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">Nie moÅ¼na odnaleÅºÄ okreÅlonego zestawu analizatora niestandardowego: {0}. SprawdÅº, czy istnieje.</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">Nie moÅ¼na odnaleÅºÄ okreÅlonego zestawu analizatora niestandardowego: {0}. SprawdÅº, czy istnieje.</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">Nie udaÅo siÄ zaÅadowaÄ niestandardowego analizatora typu: {0} z zestawu: {1}. Upewnij siÄ, Å¼e dziedziczy po klasie bazowej Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. JeÅli nie jest przeznaczony do niestandardowego analizatora, nie powinien byÄ ujawniany. WiÄcej informacji: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">Nie udaÅo siÄ zaÅadowaÄ niestandardowego analizatora typu: {0} z zestawu: {1}. Upewnij siÄ, Å¼e dziedziczy po klasie bazowej Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. JeÅli nie jest przeznaczony do niestandardowego analizatora, nie powinien byÄ ujawniany. WiÄcej informacji: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">Nie moÅ¼na zarejestrowaÄ analizatora niestandardowego: {0}.</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">Nie moÅ¼na zarejestrowaÄ analizatora niestandardowego: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">Nie moÅ¼na utworzyÄ wystÄpienia niestandardowej reguÅy analizatora z nastÄpujÄcym wyjÄtkiem: {0}.</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">Nie moÅ¼na utworzyÄ wystÄpienia niestandardowej reguÅy analizatora z nastÄpujÄcym wyjÄtkiem: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">Niestandardowa reguÅa analizatora: {0} zostaÅa pomyÅlnie zarejestrowana.</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">Niestandardowa reguÅa analizatora: {0} zostaÅa pomyÅlnie zarejestrowana.</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index b0c99bfd330..196d130c74a 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -131,6 +131,11 @@
         <target state="translated">NÃ£o hÃ¡ suporte para gravaÃ§Ã£o.</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">FALHA na compilaÃ§Ã£o da pergunta. A compilaÃ§Ã£o foi encerrada antecipadamente ao se deparar com um alvo ou tarefa que nÃ£o estava atualizado.</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">Falha ao localizar o assembly do analisador personalizado especificado: {0}. Verifique se existe.</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">Falha ao localizar o assembly do analisador personalizado especificado: {0}. Verifique se existe.</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">Falha ao carregar o tipo de analisador personalizado: {0} do assembly: {1}. Certifique-se de que ele herde a classe base Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. Se nÃ£o se destina a ser um analisador personalizado, ele nÃ£o deve ser exposto. Mais informaÃ§Ãµes: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">Falha ao carregar o tipo de analisador personalizado: {0} do assembly: {1}. Certifique-se de que ele herde a classe base Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. Se nÃ£o se destina a ser um analisador personalizado, ele nÃ£o deve ser exposto. Mais informaÃ§Ãµes: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">Falha ao registrar o analisador personalizado: {0}.</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">Falha ao registrar o analisador personalizado: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">Falha ao criar uma instÃ¢ncia da regra do analisador personalizado com a seguinte exceÃ§Ã£o: {0}.</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">Falha ao criar uma instÃ¢ncia da regra do analisador personalizado com a seguinte exceÃ§Ã£o: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">Regra do analisador personalizado: {0} foi registrado com sucesso.</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">Regra do analisador personalizado: {0} foi registrado com sucesso.</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index b63fa47a803..a1d5a6ad5d0 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -131,6 +131,11 @@
         <target state="translated">ÐÐ°Ð¿Ð¸ÑÑ Ð½Ðµ Ð¿Ð¾Ð´Ð´ÐµÑÐ¶Ð¸Ð²Ð°ÐµÑÑÑ.</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">Ð¡ÐÐÐ ÑÐ±Ð¾ÑÐºÐ¸ Ð²Ð¾Ð¿ÑÐ¾ÑÐ°. ÐÑÑÐ¾Ð´ Ð¸Ð· ÑÐ±Ð¾ÑÐºÐ¸ Ð²ÑÐ¿Ð¾Ð»Ð½ÐµÐ½ ÑÐ°Ð½ÑÑÐµ, ÑÐ°Ðº ÐºÐ°Ðº Ð±ÑÐ»Ð° Ð¾Ð±Ð½Ð°ÑÑÐ¶ÐµÐ½Ð° ÑÐµÐ»Ñ Ð¸Ð»Ð¸ Ð·Ð°Ð´Ð°ÑÐ° Ð±ÐµÐ· Ð¾Ð±Ð½Ð¾Ð²Ð»ÐµÐ½Ð¸Ñ.</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð½Ð°Ð¹ÑÐ¸ ÑÐºÐ°Ð·Ð°Ð½Ð½ÑÑ ÑÐ±Ð¾ÑÐºÑ Ð½Ð°ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼Ð¾Ð³Ð¾ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾ÑÐ°: {0}. Ð£Ð±ÐµÐ´Ð¸ÑÐµÑÑ, ÑÑÐ¾ Ð¾Ð½Ð° ÑÑÑÐµÑÑÐ²ÑÐµÑ.</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð½Ð°Ð¹ÑÐ¸ ÑÐºÐ°Ð·Ð°Ð½Ð½ÑÑ ÑÐ±Ð¾ÑÐºÑ Ð½Ð°ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼Ð¾Ð³Ð¾ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾ÑÐ°: {0}. Ð£Ð±ÐµÐ´Ð¸ÑÐµÑÑ, ÑÑÐ¾ Ð¾Ð½Ð° ÑÑÑÐµÑÑÐ²ÑÐµÑ.</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð·Ð°Ð³ÑÑÐ·Ð¸ÑÑ Ð½Ð°ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼ÑÐ¹ ÑÐ¸Ð¿ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾ÑÐ° {0} Ð¸Ð· ÑÐ±Ð¾ÑÐºÐ¸ {1}. Ð£Ð±ÐµÐ´Ð¸ÑÐµÑÑ, ÑÑÐ¾ Ð¾Ð½ Ð½Ð°ÑÐ»ÐµÐ´ÑÐµÑ Ð±Ð°Ð·Ð¾Ð²ÑÐ¹ ÐºÐ»Ð°ÑÑ Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. ÐÑÐ»Ð¸ Ð¾Ð½ Ð½Ðµ Ð¿ÑÐµÐ´Ð½Ð°Ð·Ð½Ð°ÑÐµÐ½ Ð´Ð»Ñ Ð½Ð°ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼Ð¾Ð³Ð¾ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾ÑÐ°, ÐµÐ³Ð¾ Ð½Ðµ ÑÐ»ÐµÐ´ÑÐµÑ Ð¿ÑÐµÐ´Ð¾ÑÑÐ°Ð²Ð»ÑÑÑ. ÐÐ¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÐµ ÑÐ²ÐµÐ´ÐµÐ½Ð¸Ñ: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð·Ð°Ð³ÑÑÐ·Ð¸ÑÑ Ð½Ð°ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼ÑÐ¹ ÑÐ¸Ð¿ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾ÑÐ° {0} Ð¸Ð· ÑÐ±Ð¾ÑÐºÐ¸ {1}. Ð£Ð±ÐµÐ´Ð¸ÑÐµÑÑ, ÑÑÐ¾ Ð¾Ð½ Ð½Ð°ÑÐ»ÐµÐ´ÑÐµÑ Ð±Ð°Ð·Ð¾Ð²ÑÐ¹ ÐºÐ»Ð°ÑÑ Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer. ÐÑÐ»Ð¸ Ð¾Ð½ Ð½Ðµ Ð¿ÑÐµÐ´Ð½Ð°Ð·Ð½Ð°ÑÐµÐ½ Ð´Ð»Ñ Ð½Ð°ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼Ð¾Ð³Ð¾ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾ÑÐ°, ÐµÐ³Ð¾ Ð½Ðµ ÑÐ»ÐµÐ´ÑÐµÑ Ð¿ÑÐµÐ´Ð¾ÑÑÐ°Ð²Ð»ÑÑÑ. ÐÐ¾Ð¿Ð¾Ð»Ð½Ð¸ÑÐµÐ»ÑÐ½ÑÐµ ÑÐ²ÐµÐ´ÐµÐ½Ð¸Ñ: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð·Ð°ÑÐµÐ³Ð¸ÑÑÑÐ¸ÑÐ¾Ð²Ð°ÑÑ Ð½Ð°ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼ÑÐ¹ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾Ñ: {0}.</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ Ð·Ð°ÑÐµÐ³Ð¸ÑÑÑÐ¸ÑÐ¾Ð²Ð°ÑÑ Ð½Ð°ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼ÑÐ¹ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾Ñ: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ ÑÐ¾Ð·Ð´Ð°ÑÑ ÑÐºÐ·ÐµÐ¼Ð¿Ð»ÑÑ Ð¿ÑÐ°Ð²Ð¸Ð»Ð° Ð½Ð°ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼Ð¾Ð³Ð¾ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾ÑÐ° ÑÐ¾ ÑÐ»ÐµÐ´ÑÑÑÐ¸Ð¼ Ð¸ÑÐºÐ»ÑÑÐµÐ½Ð¸ÐµÐ¼: {0}.</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">ÐÐµ ÑÐ´Ð°Ð»Ð¾ÑÑ ÑÐ¾Ð·Ð´Ð°ÑÑ ÑÐºÐ·ÐµÐ¼Ð¿Ð»ÑÑ Ð¿ÑÐ°Ð²Ð¸Ð»Ð° Ð½Ð°ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼Ð¾Ð³Ð¾ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾ÑÐ° ÑÐ¾ ÑÐ»ÐµÐ´ÑÑÑÐ¸Ð¼ Ð¸ÑÐºÐ»ÑÑÐµÐ½Ð¸ÐµÐ¼: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">ÐÐ°ÑÐµÐ³Ð¸ÑÑÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¾ Ð¿ÑÐ°Ð²Ð¸Ð»Ð¾ Ð½Ð°ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼Ð¾Ð³Ð¾ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾ÑÐ°: {0}.</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">ÐÐ°ÑÐµÐ³Ð¸ÑÑÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¾ Ð¿ÑÐ°Ð²Ð¸Ð»Ð¾ Ð½Ð°ÑÑÑÐ°Ð¸Ð²Ð°ÐµÐ¼Ð¾Ð³Ð¾ Ð°Ð½Ð°Ð»Ð¸Ð·Ð°ÑÐ¾ÑÐ°: {0}.</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 5f40aa6c72e..62f7c89d8d9 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -131,6 +131,11 @@
         <target state="translated">Yazma iÅlemi desteklenmiyor.</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">Soru derleme BAÅARISIZ oldu. GÃ¼ncel olmayan bir hedef veya gÃ¶rev ile karÅÄ±laÅtÄ±ÄÄ±ndan derleme iÅleminden erken Ã§Ä±kÄ±ldÄ±.</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">Belirtilen {0} Ã¶zel Ã§Ã¶zÃ¼mleyici derlemesi bulunamadÄ±. LÃ¼tfen var olup olmadÄ±ÄÄ±nÄ± kontrol edin.</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">Belirtilen {0} Ã¶zel Ã§Ã¶zÃ¼mleyici derlemesi bulunamadÄ±. LÃ¼tfen var olup olmadÄ±ÄÄ±nÄ± kontrol edin.</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">Ãzel Ã§Ã¶zÃ¼mleyici tÃ¼rÃ¼ yÃ¼klenemedi: {0} derlemeden: {1}. Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer temel sÄ±nÄ±f devralÄ±nmÄ±Å olduÄundan emin olun. Ãzel bir Ã§Ã¶zÃ¼mleyici olmasÄ± amaÃ§lanmadÄ±ysa aÃ§Ä±Äa Ã§Ä±karÄ±lmamasÄ± gerekir. Daha fazla bilgi: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">Ãzel Ã§Ã¶zÃ¼mleyici tÃ¼rÃ¼ yÃ¼klenemedi: {0} derlemeden: {1}. Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer temel sÄ±nÄ±f devralÄ±nmÄ±Å olduÄundan emin olun. Ãzel bir Ã§Ã¶zÃ¼mleyici olmasÄ± amaÃ§lanmadÄ±ysa aÃ§Ä±Äa Ã§Ä±karÄ±lmamasÄ± gerekir. Daha fazla bilgi: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">Ãzel Ã§Ã¶zÃ¼mleyici kaydedilemedi: {0}.</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">Ãzel Ã§Ã¶zÃ¼mleyici kaydedilemedi: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">Ãzel Ã§Ã¶zÃ¼mleyici kuralÄ± Åu Ã¶zel durumla baÅlatÄ±lamadÄ±: {0}.</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">Ãzel Ã§Ã¶zÃ¼mleyici kuralÄ± Åu Ã¶zel durumla baÅlatÄ±lamadÄ±: {0}.</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">{0} Ã¶zel Ã§Ã¶zÃ¼mleyici kuralÄ± baÅarÄ±yla kaydedildi.</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">{0} Ã¶zel Ã§Ã¶zÃ¼mleyici kuralÄ± baÅarÄ±yla kaydedildi.</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index 11fd98bc75f..e7fba5a5610 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -131,6 +131,11 @@
         <target state="translated">ä¸æ¯æåå¥ã</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">é®é¢çæå¤±è´¥ãçææåéåºï¼å ä¸ºéå°ä¸æ¯ææ°çç®æ æä»»å¡ã</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">æ¾ä¸å°æå®çèªå®ä¹åæå¨ç¨åºé: {0}ãè¯·æ£æ¥å®æ¯å¦å­å¨ã</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">æ¾ä¸å°æå®çèªå®ä¹åæå¨ç¨åºé: {0}ãè¯·æ£æ¥å®æ¯å¦å­å¨ã</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">æªè½ä»ç¨åºé {1} å è½½èªå®ä¹åæå¨ç±»å {0}ãè¯·ç¡®ä¿å®ç»§æ¿ Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer åºç±»ãå¦æä¸æç®å°å¶ä½ä¸ºèªå®ä¹åæå¨ï¼åä¸åºå°å¶å¬å¼ãè¯¦ç»ä¿¡æ¯: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">æªè½ä»ç¨åºé {1} å è½½èªå®ä¹åæå¨ç±»å {0}ãè¯·ç¡®ä¿å®ç»§æ¿ Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer åºç±»ãå¦æä¸æç®å°å¶ä½ä¸ºèªå®ä¹åæå¨ï¼åä¸åºå°å¶å¬å¼ãè¯¦ç»ä¿¡æ¯: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">æ æ³æ³¨åèªå®ä¹åæå¨: {0}ã</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">æ æ³æ³¨åèªå®ä¹åæå¨: {0}ã</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">æ æ³å®ä¾åèªå®ä¹åæå¨è§åï¼åºç°ä»¥ä¸å¼å¸¸: {0}ã</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">æ æ³å®ä¾åèªå®ä¹åæå¨è§åï¼åºç°ä»¥ä¸å¼å¸¸: {0}ã</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">èªå®ä¹åæå¨è§å: {0} å·²æåæ³¨åã</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">èªå®ä¹åæå¨è§å: {0} å·²æåæ³¨åã</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index a78a8a61a90..0469d4796b0 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -131,6 +131,11 @@
         <target state="translated">ä¸æ¯æ´å¯«å¥ã</target>
         <note />
       </trans-unit>
+      <trans-unit id="BuildCheckEnabled">
+        <source>The BuildCheck is enabled for this build.</source>
+        <target state="new">The BuildCheck is enabled for this build.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="BuildFinishedQuestionFailure">
         <source>Question build FAILED. The build exited early as it encountered a target or task that was not up-to-date.</source>
         <target state="translated">åé¡å»ºç«å¤±æãå»ºç½®ææ©çµæï¼å çºå®éå°ä¸æ¯ææ°çç®æ¨æå·¥ä½ã</target>
@@ -213,28 +218,33 @@
     request a target to build itself (perhaps via a chain of other targets).</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerAssemblyNotExist">
-        <source>Failed to find the specified custom analyzer assembly: {0}. Please check if it exists.</source>
-        <target state="translated">æ¾ä¸å°æå®çèªè¨åæå¨çµä»¶: {0}ãè«æª¢æ¥å®æ¯å¦å­å¨ã</target>
+        <source>Failed to find the specified custom analyzer assembly: '{0}'. Please check if it exists.</source>
+        <target state="needs-review-translation">æ¾ä¸å°æå®çèªè¨åæå¨çµä»¶: {0}ãè«æª¢æ¥å®æ¯å¦å­å¨ã</target>
         <note>The message is emitted when the custom analyzer assembly can not be found.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerBaseTypeNotAssignable">
-        <source>Failed to load the custom analyzer type: {0} from the assembly: {1}. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
-        <target state="translated">ç¡æ³å¾çµä»¶ {1} è¼å¥èªè¨åæå¨é¡å {0}ãè«ç¢ºå®å®ç¹¼æ¿ Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer åºé¡ãå¦æä¸æ¯è¦ä½çºèªè¨åæå¨ï¼åä¸æå¬éãæ´å¤è³è¨: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
+        <source>Failed to load the custom analyzer type: '{0}' from the assembly: '{1}'. Make sure it inherits the Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer base class. If it is not intended to be a custom analyzer, than it should not be exposed. More info: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</source>
+        <target state="needs-review-translation">ç¡æ³å¾çµä»¶ {1} è¼å¥èªè¨åæå¨é¡å {0}ãè«ç¢ºå®å®ç¹¼æ¿ Microsoft.Build.Experimental.BuildCheck.BuildAnalyzer åºé¡ãå¦æä¸æ¯è¦ä½çºèªè¨åæå¨ï¼åä¸æå¬éãæ´å¤è³è¨: https://github.com/dotnet/msbuild/blob/main/documentation/specs/proposed/BuildCheck-Architecture.md#acquisition</target>
         <note>The message is emitted when the custom analyzer assembly can not be successfully registered.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedAcquisition">
-        <source>Failed to register the custom analyzer: {0}.</source>
-        <target state="translated">ç¡æ³ç»éèªè¨åæå¨: {0}ã</target>
+        <source>Failed to register the custom analyzer: '{0}'.</source>
+        <target state="needs-review-translation">ç¡æ³ç»éèªè¨åæå¨: {0}ã</target>
         <note>The message is emitted on failed loading of the custom analyzer in process.</note>
       </trans-unit>
       <trans-unit id="CustomAnalyzerFailedRuleLoading">
-        <source>Failed to instantiate the custom analyzer rule with the following exception: {0}.</source>
-        <target state="translated">ç¡æ³å·ç¾åèªè¨åæå¨è¦åï¼ç¼çä¸åä¾å¤çæ³: {0}ã</target>
+        <source>Failed to instantiate the custom analyzer rule with the following exception: '{0}'.</source>
+        <target state="needs-review-translation">ç¡æ³å·ç¾åèªè¨åæå¨è¦åï¼ç¼çä¸åä¾å¤çæ³: {0}ã</target>
         <note>The message is emitted on failed loading of the custom analyzer rule in process.</note>
       </trans-unit>
+      <trans-unit id="CustomAnalyzerRegistered">
+        <source>The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</source>
+        <target state="new">The custom analyzer: '{0}' is registered for the build from the location: '{1}'.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="CustomAnalyzerSuccessfulAcquisition">
-        <source>Custom analyzer rule: {0} has been registered successfully.</source>
-        <target state="translated">èªè¨åæå¨è¦å: å·²æåç»é {0}ã</target>
+        <source>Custom analyzer rule: '{0}' has been registered successfully.</source>
+        <target state="needs-review-translation">èªè¨åæå¨è¦å: å·²æåç»é {0}ã</target>
         <note>The message is emitted on successful loading of the custom analyzer rule in process.</note>
       </trans-unit>
       <trans-unit id="DefaultSDKResolverError">
diff --git a/src/BuildCheck.UnitTests/BuildAnalyzerConfigurationInternalTests.cs b/src/BuildCheck.UnitTests/BuildAnalyzerConfigurationInternalTests.cs
index 7bd57f8014b..2c559ffbe29 100644
--- a/src/BuildCheck.UnitTests/BuildAnalyzerConfigurationInternalTests.cs
+++ b/src/BuildCheck.UnitTests/BuildAnalyzerConfigurationInternalTests.cs
@@ -5,34 +5,59 @@
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Experimental.BuildCheck;
 using Shouldly;
+using System;
 
 namespace Microsoft.Build.BuildCheck.UnitTests;
 
 public class BuildAnalyzerConfigurationInternalTests
 {
     [Theory]
-    [InlineData("ruleId", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Warning, true, true)]
-    [InlineData("ruleId2", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Warning, true, true)]
-    [InlineData("ruleId", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Error, true, false)]
+    [InlineData("ruleId", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Warning,  true)]
+    [InlineData("ruleId2", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Warning,  true)]
+    [InlineData("ruleId", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Error, false)]
     public void IsSameConfigurationAsTest(
         string secondRuleId,
         EvaluationAnalysisScope secondScope,
         BuildAnalyzerResultSeverity secondSeverity,
-        bool secondEnabled,
         bool isExpectedToBeSame)
     {
         BuildAnalyzerConfigurationInternal configuration1 = new BuildAnalyzerConfigurationInternal(
                        ruleId: "ruleId",
                        evaluationAnalysisScope: EvaluationAnalysisScope.ProjectOnly,
-                       severity: BuildAnalyzerResultSeverity.Warning,
-                       isEnabled: true);
+                       severity: BuildAnalyzerResultSeverity.Warning);
 
         BuildAnalyzerConfigurationInternal configuration2 = new BuildAnalyzerConfigurationInternal(
             ruleId: secondRuleId,
             evaluationAnalysisScope: secondScope,
-            severity: secondSeverity,
-            isEnabled: secondEnabled);
+            severity: secondSeverity);
 
         configuration1.IsSameConfigurationAs(configuration2).ShouldBe(isExpectedToBeSame);
     }
+
+    [Theory]
+    [InlineData( BuildAnalyzerResultSeverity.Warning, true)]
+    [InlineData(BuildAnalyzerResultSeverity.Suggestion, true)]
+    [InlineData(BuildAnalyzerResultSeverity.Error, true)]
+    [InlineData(BuildAnalyzerResultSeverity.None, false)]
+    public void BuildAnalyzerConfigurationInternal_Constructor_SeverityConfig(BuildAnalyzerResultSeverity severity, bool isEnabledExpected)
+    {
+        BuildAnalyzerConfigurationInternal configuration = new BuildAnalyzerConfigurationInternal(
+                       ruleId: "ruleId",
+                       evaluationAnalysisScope: EvaluationAnalysisScope.ProjectOnly,
+                       severity: severity);
+
+        configuration.IsEnabled.ShouldBe(isEnabledExpected);
+    }
+
+    [Fact]
+    public void BuildAnalyzerConfigurationInternal_Constructor_SeverityConfig_Fails()
+    {
+        Should.Throw<ArgumentOutOfRangeException>(() =>
+        {
+            new BuildAnalyzerConfigurationInternal(
+                        ruleId: "ruleId",
+                        evaluationAnalysisScope: EvaluationAnalysisScope.ProjectOnly,
+                        severity: BuildAnalyzerResultSeverity.Default);
+        });
+    }
 }
diff --git a/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs b/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs
index edfdfaf4589..f1aff479f9e 100644
--- a/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs
+++ b/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs
@@ -33,43 +33,45 @@ public void CreateWithEmpty_ReturnsObjectWithNullValues()
 
     [Theory]
     [InlineData("error", BuildAnalyzerResultSeverity.Error)]
-    [InlineData("info", BuildAnalyzerResultSeverity.Info)]
+    [InlineData("ERROR", BuildAnalyzerResultSeverity.Error)]
+    [InlineData("suggestion", BuildAnalyzerResultSeverity.Suggestion)]
+    [InlineData("SUGGESTION", BuildAnalyzerResultSeverity.Suggestion)]
     [InlineData("warning", BuildAnalyzerResultSeverity.Warning)]
     [InlineData("WARNING", BuildAnalyzerResultSeverity.Warning)]
+    [InlineData("NONE", BuildAnalyzerResultSeverity.None)]
+    [InlineData("none", BuildAnalyzerResultSeverity.None)]
+    [InlineData("default", BuildAnalyzerResultSeverity.Default)]
+    [InlineData("DEFAULT", BuildAnalyzerResultSeverity.Default)]
     public void CreateBuildAnalyzerConfiguration_Severity(string parameter, BuildAnalyzerResultSeverity? expected)
     {
         var config = new Dictionary<string, string>()
         {
             { "severity" , parameter },
         };
+
         var buildConfig = BuildAnalyzerConfiguration.Create(config);
 
         buildConfig.ShouldNotBeNull();
         buildConfig.Severity.ShouldBe(expected);
-
-        buildConfig.IsEnabled.ShouldBeNull();
         buildConfig.EvaluationAnalysisScope.ShouldBeNull();
     }
 
     [Theory]
-    [InlineData("true", true)]
-    [InlineData("TRUE", true)]
-    [InlineData("false", false)]
-    [InlineData("FALSE", false)]
-    public void CreateBuildAnalyzerConfiguration_IsEnabled(string parameter, bool? expected)
+    [InlineData("error", true)]
+    [InlineData("warning", true)]
+    [InlineData("suggestion", true)]
+    [InlineData("none", false)]
+    [InlineData("default", null)]
+    public void CreateBuildAnalyzerConfiguration_SeverityAndEnabledOrder(string parameter, bool? expected)
     {
         var config = new Dictionary<string, string>()
         {
-            { "isenabled" , parameter },
+            { "severity", parameter },
         };
-
+        
         var buildConfig = BuildAnalyzerConfiguration.Create(config);
 
-        buildConfig.ShouldNotBeNull();
         buildConfig.IsEnabled.ShouldBe(expected);
-
-        buildConfig.Severity.ShouldBeNull();
-        buildConfig.EvaluationAnalysisScope.ShouldBeNull();
     }
 
     [Theory]
@@ -96,7 +98,6 @@ public void CreateBuildAnalyzerConfiguration_EvaluationAnalysisScope(string para
 
     [Theory]
     [InlineData("evaluationanalysisscope", "incorrec-value")]
-    [InlineData("isenabled", "incorrec-value")]
     [InlineData("severity", "incorrec-value")]
     public void CreateBuildAnalyzerConfiguration_ExceptionOnInvalidInputValue(string key, string value)
     {
diff --git a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
index 485a1b1b40c..5ab4ea729b0 100644
--- a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
+++ b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
@@ -33,8 +33,8 @@ public BuildCheckManagerTests(ITestOutputHelper output)
     }
 
     [Theory]
-    [InlineData(true, new[] { "Custom analyzer rule: Rule1 has been registered successfully.", "Custom analyzer rule: Rule2 has been registered successfully." })]
-    [InlineData(false, new[] { "Failed to register the custom analyzer: DummyPath." })]
+    [InlineData(true, new[] { "Custom analyzer rule: 'Rule1' has been registered successfully.", "Custom analyzer rule: 'Rule2' has been registered successfully." })]
+    [InlineData(false, new[] { "Failed to register the custom analyzer: 'DummyPath'." })]
     public void ProcessAnalyzerAcquisitionTest(bool isAnalyzerRuleExist, string[] expectedMessages)
     {
         MockBuildCheckAcquisition(isAnalyzerRuleExist);
diff --git a/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs b/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs
index d559e1724b1..d4fdb9d49df 100644
--- a/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs
+++ b/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs
@@ -76,7 +76,6 @@ public void GetRuleIdConfiguration_CustomConfigurationData()
         [*.csproj]
         build_check.rule_id.property1=value1
         build_check.rule_id.property2=value2
-        build_check.rule_id.isEnabled=true
         build_check.rule_id.isEnabled2=true
         any_other_key1=any_other_value1
         any_other_key2=any_other_value2
@@ -106,7 +105,6 @@ public void GetRuleIdConfiguration_ReturnsBuildRuleConfiguration()
         root=true
 
         [*.csproj]
-        build_check.rule_id.isEnabled=true
         build_check.rule_id.Severity=Error
         build_check.rule_id.EvaluationAnalysisScope=ProjectOnly
         """);
@@ -134,13 +132,11 @@ public void GetRuleIdConfiguration_CustomConfigurationValidity_NotValid_Differen
         [*.csproj]
         build_check.rule_id.property1=value1
         build_check.rule_id.property2=value2
-        build_check.rule_id.isEnabled=true
         build_check.rule_id.isEnabled2=true
 
         [test123.csproj]
         build_check.rule_id.property1=value2
         build_check.rule_id.property2=value3
-        build_check.rule_id.isEnabled=true
         build_check.rule_id.isEnabled2=tru1
         """);
 
@@ -199,13 +195,11 @@ public void GetRuleIdConfiguration_CustomConfigurationValidity_Valid()
         [*.csproj]
         build_check.rule_id.property1=value1
         build_check.rule_id.property2=value2
-        build_check.rule_id.isEnabled=true
         build_check.rule_id.isEnabled2=true
 
         [test123.csproj]
         build_check.rule_id.property1=value1
         build_check.rule_id.property2=value2
-        build_check.rule_id.isEnabled=true
         build_check.rule_id.isEnabled2=true
         """);
 
@@ -218,4 +212,29 @@ public void GetRuleIdConfiguration_CustomConfigurationValidity_Valid()
             configurationProvider.CheckCustomConfigurationDataValidity(Path.Combine(workFolder1.Path, "test123.csproj"), "rule_id");
         });
     }
+
+    [Theory]
+    [InlineData(BuildAnalyzerResultSeverity.Warning, BuildAnalyzerResultSeverity.Warning, true)]
+    [InlineData(BuildAnalyzerResultSeverity.Error, BuildAnalyzerResultSeverity.Error, true)]
+    [InlineData(BuildAnalyzerResultSeverity.Default, BuildAnalyzerResultSeverity.Warning, true)]
+    [InlineData(BuildAnalyzerResultSeverity.Suggestion, BuildAnalyzerResultSeverity.Suggestion, true)]
+    [InlineData(BuildAnalyzerResultSeverity.None, BuildAnalyzerResultSeverity.None, false)]
+    [InlineData(null, BuildAnalyzerResultSeverity.Warning, true)]
+    public void GetConfigurationProvider_MergesSeverity_Correctly(BuildAnalyzerResultSeverity? buildAnalyzerResultSeverity, BuildAnalyzerResultSeverity expectedSeverity, bool expectedEnablment)
+    {
+        var configurationProvider = new ConfigurationProvider();
+        BuildAnalyzerConfiguration buildAnalyzerConfiguration = new BuildAnalyzerConfiguration()
+        {
+            Severity = buildAnalyzerResultSeverity
+        };
+
+        BuildAnalyzerConfiguration defaultValue = new BuildAnalyzerConfiguration()
+        {
+            Severity = BuildAnalyzerResultSeverity.Warning
+        };
+
+        var internalBuildAnalyzer = configurationProvider.MergeConfiguration("ruleId", defaultValue, buildAnalyzerConfiguration);
+        internalBuildAnalyzer.Severity.ShouldBe(expectedSeverity);
+        internalBuildAnalyzer.IsEnabled.ShouldBe(expectedEnablment);
+    }
 }
diff --git a/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs b/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
index e0600fc657c..99d52c7f9f1 100644
--- a/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
+++ b/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
@@ -24,7 +24,7 @@ internal sealed class TestAnalyzer : BuildAnalyzer
             #region BuildAnalyzer initialization
 
             public static BuildAnalyzerRule SupportedRule = new BuildAnalyzerRule("BC0000", "TestRule", "TestDescription", "TestMessage",
-                new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });
+                new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning });
 
             public override string FriendlyName => "MSBuild.TestAnalyzer";
 
@@ -81,7 +81,7 @@ private void BuildProject(string taskInvocation)
 
                 using (var buildManager = new BuildManager())
                 {
-                    var request = new BuildRequestData(testProject.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, [], null, BuildRequestDataFlags.None);
+                    var request = new BuildRequestData(testProject.ProjectFile, new Dictionary<string, string?>(), MSBuildConstants.CurrentToolsVersion, [], null, BuildRequestDataFlags.None);
                     var parameters = new BuildParameters
                     {
                         LogTaskInputs = true,
diff --git a/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/.editorconfig b/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/.editorconfig
index 7d15f3d3ba3..1f83361d23c 100644
--- a/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/.editorconfig
+++ b/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/.editorconfig
@@ -1,15 +1,9 @@
-root=true
-
 [*.csproj]
-build_check.BC0101.IsEnabled=true
-build_check.BC0101.Severity=BC0101Severity
+build_check.BC0101.Severity={BC0101Severity}
 
-build_check.BC0102.IsEnabled=true
 build_check.BC0102.Severity=warning
+build_check.BC0103.Severity=warning
 
-build_check.COND0543.IsEnabled=false
 build_check.COND0543.Severity=Error
 build_check.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly
 build_check.COND0543.CustomSwitch=QWERTY
-
-build_check.BLA.IsEnabled=false
\ No newline at end of file
diff --git a/src/Framework/TargetBuiltReason.cs b/src/Framework/TargetBuiltReason.cs
index b00d1eff6c7..d83710653c2 100644
--- a/src/Framework/TargetBuiltReason.cs
+++ b/src/Framework/TargetBuiltReason.cs
@@ -28,6 +28,21 @@ public enum TargetBuiltReason
         /// <summary>
         /// The target was part of the parent's AfterTargets list.
         /// </summary>
-        AfterTargets
+        AfterTargets,
+
+        /// <summary>
+        /// The target was defined as an initial target of the project.
+        /// </summary>
+        InitialTargets,
+
+        /// <summary>
+        /// The target was one of the default targets of the project.
+        /// </summary>
+        DefaultTargets,
+
+        /// <summary>
+        /// The target was one of the targets explicitly called to be built.
+        /// </summary>
+        EntryTargets,
     }
 }
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintProjectOutputDirectoryLink.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintProjectOutputDirectoryLink.Linux.verified.txt
new file mode 100644
index 00000000000..1aa3b2a7204
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintProjectOutputDirectoryLink.Linux.verified.txt
@@ -0,0 +1,5 @@
+]9;4;3;\  ãð  ðª¨°ð« ð«¦ ð®®â¿ [32;1msucceeded[m (0.2s) â ]8;;file:///src/Ð¿ÑÐ¾ÐµÐºÑÐ¢ÐµÑÐ¼Ð¸Ð½Ð°Ð»\/src/Ð¿ÑÐ¾ÐµÐºÑÐ¢ÐµÑÐ¼Ð¸Ð½Ð°Ð»/ãð  ðª¨°ð« ð«¦ ð®®â¿.dll]8;;\
+[?25l[1F
+[?25h
+Build [32;1msucceeded[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintProjectOutputDirectoryLink.OSX.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintProjectOutputDirectoryLink.OSX.verified.txt
new file mode 100644
index 00000000000..3308b91e6d7
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintProjectOutputDirectoryLink.OSX.verified.txt
@@ -0,0 +1,4 @@
+  ãð  ðª¨°ð« ð«¦ ð®®â¿ [32;1msucceeded[m (0.2s) â ]8;;file:///src/Ð¿ÑÐ¾ÐµÐºÑÐ¢ÐµÑÐ¼Ð¸Ð½Ð°Ð»\/src/Ð¿ÑÐ¾ÐµÐºÑÐ¢ÐµÑÐ¼Ð¸Ð½Ð°Ð»/ãð  ðª¨°ð« ð«¦ ð®®â¿.dll]8;;\
+[?25l[1F
+[?25h
+Build [32;1msucceeded[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintProjectOutputDirectoryLink.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintProjectOutputDirectoryLink.Windows.verified.txt
new file mode 100644
index 00000000000..85a9e20d1e6
--- /dev/null
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintProjectOutputDirectoryLink.Windows.verified.txt
@@ -0,0 +1,5 @@
+ï»¿]9;4;3;\  ãð  ðª¨°ð« ð«¦ ð®®â¿ [32;1msucceeded[m (0.2s) â ]8;;file:///C:/src/Ð¿ÑÐ¾ÐµÐºÑÐ¢ÐµÑÐ¼Ð¸Ð½Ð°Ð»\C:\src\Ð¿ÑÐ¾ÐµÐºÑÐ¢ÐµÑÐ¼Ð¸Ð½Ð°Ð»\ãð  ðª¨°ð« ð«¦ ð®®â¿.dll]8;;\
+[?25l[1F
+[?25h
+Build [32;1msucceeded[m in 5.0s
+]9;4;0;\
\ No newline at end of file
diff --git a/src/MSBuild.UnitTests/TerminalLogger_Tests.cs b/src/MSBuild.UnitTests/TerminalLogger_Tests.cs
index 85ad5c8aac2..87f64ade8b0 100644
--- a/src/MSBuild.UnitTests/TerminalLogger_Tests.cs
+++ b/src/MSBuild.UnitTests/TerminalLogger_Tests.cs
@@ -38,6 +38,7 @@ public class TerminalLogger_Tests : IEventSource, IDisposable
 
         private readonly string _projectFile = NativeMethods.IsUnixLike ? "/src/project.proj" : @"C:\src\project.proj";
         private readonly string _projectFile2 = NativeMethods.IsUnixLike ? "/src/project2.proj" : @"C:\src\project2.proj";
+        private readonly string _projectFileWithNonAnsiSymbols = NativeMethods.IsUnixLike ? "/src/Ð¿ÑÐ¾ÐµÐºÑÐ¢ÐµÑÐ¼Ð¸Ð½Ð°Ð»/ãð  ðª¨°ð« ð«¦ ð®®â¿.proj" : @"C:\src\Ð¿ÑÐ¾ÐµÐºÑÐ¢ÐµÑÐ¼Ð¸Ð½Ð°Ð»\ãð  ðª¨°ð« ð«¦ ð®®â¿.proj";
 
         private StringWriter _outputWriter = new();
 
@@ -233,20 +234,22 @@ private BuildErrorEventArgs MakeErrorEventArgs(string error)
 
         #region Build summary tests
 
-        private void InvokeLoggerCallbacksForSimpleProject(bool succeeded, Action additionalCallbacks)
+        private void InvokeLoggerCallbacksForSimpleProject(bool succeeded, Action additionalCallbacks, string? projectFile = null)
         {
+            projectFile ??= _projectFile;
+
             BuildStarted?.Invoke(_eventSender, MakeBuildStartedEventArgs());
-            ProjectStarted?.Invoke(_eventSender, MakeProjectStartedEventArgs(_projectFile));
+            ProjectStarted?.Invoke(_eventSender, MakeProjectStartedEventArgs(projectFile));
 
-            TargetStarted?.Invoke(_eventSender, MakeTargetStartedEventArgs(_projectFile, "Build"));
-            TaskStarted?.Invoke(_eventSender, MakeTaskStartedEventArgs(_projectFile, "Task"));
+            TargetStarted?.Invoke(_eventSender, MakeTargetStartedEventArgs(projectFile, "Build"));
+            TaskStarted?.Invoke(_eventSender, MakeTaskStartedEventArgs(projectFile, "Task"));
 
             additionalCallbacks();
 
-            TaskFinished?.Invoke(_eventSender, MakeTaskFinishedEventArgs(_projectFile, "Task", succeeded));
-            TargetFinished?.Invoke(_eventSender, MakeTargetFinishedEventArgs(_projectFile, "Build", succeeded));
+            TaskFinished?.Invoke(_eventSender, MakeTaskFinishedEventArgs(projectFile, "Task", succeeded));
+            TargetFinished?.Invoke(_eventSender, MakeTargetFinishedEventArgs(projectFile, "Build", succeeded));
 
-            ProjectFinished?.Invoke(_eventSender, MakeProjectFinishedEventArgs(_projectFile, succeeded));
+            ProjectFinished?.Invoke(_eventSender, MakeProjectFinishedEventArgs(projectFile, succeeded));
             BuildFinished?.Invoke(_eventSender, MakeBuildFinishedEventArgs(succeeded));
         }
 
@@ -449,6 +452,22 @@ public Task PrintBuildSummary_2Projects_FailedWithErrorsAndWarnings()
             return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
         }
 
+        [Fact]
+        public Task PrintProjectOutputDirectoryLink()
+        {
+            // Send message in order to set project output path
+            BuildMessageEventArgs e = MakeMessageEventArgs(
+                    $"ãð  ðª¨°ð« ð«¦ ð®®â¿ -> {_projectFileWithNonAnsiSymbols.Replace("proj", "dll")}",
+                    MessageImportance.High);
+            e.ProjectFile = _projectFileWithNonAnsiSymbols;
+
+            InvokeLoggerCallbacksForSimpleProject(succeeded: true, () =>
+            {
+                MessageRaised?.Invoke(_eventSender, e);
+            }, _projectFileWithNonAnsiSymbols);
+
+            return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
+        }
 
         #endregion
 
diff --git a/src/MSBuild/JsonOutputFormatter.cs b/src/MSBuild/JsonOutputFormatter.cs
index 095f0761386..cdc166849ca 100644
--- a/src/MSBuild/JsonOutputFormatter.cs
+++ b/src/MSBuild/JsonOutputFormatter.cs
@@ -132,7 +132,7 @@ internal void AddTargetResultsInJsonFormat(string[] targetNames, BuildResult res
             JsonObject targetResultsNode = new();
             foreach (string targetName in targetNames)
             {
-                TargetResult targetResult = result.ResultsByTarget[targetName];
+                TargetResult targetResult = result.ResultsByTarget![targetName];
                 JsonObject targetResults = new();
                 targetResults["Result"] = targetResult.ResultCode.ToString();
                 JsonArray outputArray = new();
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 66d0025b9fd..bcae846e898 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -645,7 +645,9 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                             string urlString = url.ToString();
                             if (Uri.TryCreate(urlString, UriKind.Absolute, out Uri? uri))
                             {
-                                urlString = uri.AbsoluteUri;
+                                // url.ToString() un-escapes the URL which is needed for our case file://
+                                // but not valid for http://
+                                urlString = uri.ToString();
                             }
 
                             // If the output path is under the initial working directory, make the console output relative to that to save space.
