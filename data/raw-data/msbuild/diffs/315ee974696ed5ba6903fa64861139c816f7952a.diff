diff --git a/src/Build.UnitTests/TerminalLoggerConfiguration_Tests.cs b/src/Build.UnitTests/TerminalLoggerConfiguration_Tests.cs
index 0363d017928..791bd5332ee 100644
--- a/src/Build.UnitTests/TerminalLoggerConfiguration_Tests.cs
+++ b/src/Build.UnitTests/TerminalLoggerConfiguration_Tests.cs
@@ -23,12 +23,10 @@ public class TerminalLoggerConfiguration_Tests : IDisposable
     private readonly TestEnvironment _env;
 
     private readonly string _cmd;
-    private readonly ITestOutputHelper _output;
 
     public TerminalLoggerConfiguration_Tests(ITestOutputHelper output)
     {
         _env = TestEnvironment.Create(output);
-        _output = output;
 
         // Ignore environment variables that may have been set by the environment where the tests are running.
         _env.SetEnvironmentVariable("MSBUILDLIVELOGGER", null);
@@ -113,7 +111,6 @@ public void TerminalLoggerWithTlAutoIsOff(string tlValue)
         ShouldNotBeTerminalLog(output);
     }
 
-
     [Fact]
     public void TerminalLoggerDefaultByEnv()
     {
@@ -232,6 +229,23 @@ public void TerminalLoggerDefaultOff(string defaultValue)
         ShouldNotBeTerminalLog(output);
     }
 
+    [Theory]
+    [InlineData("1")]
+    [InlineData("0")]
+    public void TerminalLoggerOnInvalidProjectBuild(string msbuildinprocnodeState)
+    {
+        _ = _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", msbuildinprocnodeState);
+
+        string output = RunnerUtilities.ExecMSBuild(
+            $"{_cmd} -tl:true",
+            out bool success);
+
+        success.ShouldBeTrue();
+        ShouldBeTerminalLog(output);
+        output.ShouldContain("Build succeeded.");
+    }
+
     private static void ShouldBeTerminalLog(string output) => output.ShouldContain("\x1b[?25l");
+
     private static void ShouldNotBeTerminalLog(string output) => output.ShouldNotContain("\x1b[?25l");
 }
diff --git a/src/Framework/EncodingUtilities.cs b/src/Framework/EncodingUtilities.cs
index 298c740da96..1a895022929 100644
--- a/src/Framework/EncodingUtilities.cs
+++ b/src/Framework/EncodingUtilities.cs
@@ -272,10 +272,7 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci
             CultureInfo? externalLanguageSetting = GetExternalOverriddenUILanguage();
             if (externalLanguageSetting != null)
             {
-                if (
-                    !externalLanguageSetting.TwoLetterISOLanguageName.Equals("en", StringComparison.InvariantCultureIgnoreCase) &&
-                    CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding()
-                    )
+                if (CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())
                 {
                     // Setting both encodings causes a change in the CHCP, making it so we don't need to P-Invoke CHCP ourselves.
                     Console.OutputEncoding = Encoding.UTF8;
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 0d5d5cd2b09..af7c2c40b13 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -191,12 +191,16 @@ internal TerminalLogger(ITerminal terminal)
     public LoggerVerbosity Verbosity { get => LoggerVerbosity.Minimal; set { } }
 
     /// <inheritdoc/>
-    public string Parameters { get => ""; set { } }
+    public string Parameters
+    {
+        get => ""; set { }
+    }
 
     /// <inheritdoc/>
     public void Initialize(IEventSource eventSource, int nodeCount)
     {
-        _nodes = new NodeStatus[nodeCount];
+        // When MSBUILDNOINPROCNODE enabled, NodeId's reported by build start with 2. We need to reserve an extra spot for this case. 
+        _nodes = new NodeStatus[nodeCount + 1];
 
         Initialize(eventSource);
     }
@@ -339,10 +343,7 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
         // Mark node idle until something uses it again
         if (_restoreContext is null)
         {
-            lock (_lock)
-            {
-                _nodes[NodeIndexForContext(buildEventContext)] = null;
-            }
+            UpdateNodeStatus(buildEventContext, null);
         }
 
         ProjectContext c = new(buildEventContext);
@@ -494,10 +495,16 @@ private void TargetStarted(object sender, TargetStartedEventArgs e)
 
             string projectFile = Path.GetFileNameWithoutExtension(e.ProjectFile);
             NodeStatus nodeStatus = new(projectFile, project.TargetFramework, e.TargetName, project.Stopwatch);
-            lock (_lock)
-            {
-                _nodes[NodeIndexForContext(buildEventContext)] = nodeStatus;
-            }
+            UpdateNodeStatus(buildEventContext, nodeStatus);
+        }
+    }
+
+    private void UpdateNodeStatus(BuildEventContext buildEventContext, NodeStatus? nodeStatus)
+    {
+        lock (_lock)
+        {
+            int nodeIndex = NodeIndexForContext(buildEventContext);
+            _nodes[nodeIndex] = nodeStatus;
         }
     }
 
@@ -517,10 +524,7 @@ private void TaskStarted(object sender, TaskStartedEventArgs e)
         if (_restoreContext is null && buildEventContext is not null && e.TaskName == "MSBuild")
         {
             // This will yield the node, so preemptively mark it idle
-            lock (_lock)
-            {
-                _nodes[NodeIndexForContext(buildEventContext)] = null;
-            }
+            UpdateNodeStatus(buildEventContext, null);
 
             if (_projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
             {
diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index 586126a3f94..e28b770d85e 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -895,22 +895,6 @@ public void ConsoleToMSBuild()
             Assert.Equal(2, exec.ConsoleOutput.Length);
         }
 
-        /// <summary>
-        /// Test the CanEncode method with and without ANSI characters to determine if they can be encoded
-        /// in the current system encoding.
-        /// </summary>
-        [WindowsOnlyFact]
-        public void CanEncodeTest()
-        {
-            var defaultEncoding = EncodingUtilities.CurrentSystemOemEncoding;
-
-            string nonAnsiCharacters = "\u521B\u5EFA";
-            string pathWithAnsiCharacters = @"c:\windows\system32\cmd.exe";
-
-            Assert.False(EncodingUtilities.CanEncodeString(defaultEncoding.CodePage, nonAnsiCharacters));
-            Assert.True(EncodingUtilities.CanEncodeString(defaultEncoding.CodePage, pathWithAnsiCharacters));
-        }
-
         [Fact]
         public void EndToEndMultilineExec()
         {
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index dbf4be1fc51..21bf75ad407 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -591,7 +591,7 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
             {
                 commandLine.AppendSwitch("-c");
                 commandLine.AppendTextUnquoted(" \"");
-                commandLine.AppendTextUnquoted("export LANG=en_US.UTF-8; export LC_ALL=en_US.UTF-8; . ");
+                commandLine.AppendTextUnquoted(". ");
                 commandLine.AppendFileNameIfNotNull(batchFileForCommandLine);
                 commandLine.AppendTextUnquoted("\"");
             }
diff --git a/src/Utilities.UnitTests/EncodingUtilities_Tests.cs b/src/Utilities.UnitTests/EncodingUtilities_Tests.cs
new file mode 100644
index 00000000000..c26000fb4ec
--- /dev/null
+++ b/src/Utilities.UnitTests/EncodingUtilities_Tests.cs
@@ -0,0 +1,57 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Globalization;
+using System.Runtime.InteropServices;
+using System.Threading;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+using Shouldly;
+using Xunit;
+
+#nullable disable
+
+namespace Microsoft.Build.UnitTests
+{
+    public sealed class EncodingUtilities_Tests
+    {
+        /// <summary>
+        /// Test the CanEncode method with and without ANSI characters to determine if they can be encoded 
+        /// in the current system encoding.
+        /// </summary>
+        [WindowsOnlyFact]
+        public void CanEncodeTest()
+        {
+            var defaultEncoding = EncodingUtilities.CurrentSystemOemEncoding;
+
+            string nonAnsiCharacters = "\u521B\u5EFA";
+            string pathWithAnsiCharacters = @"c:\windows\system32\cmd.exe";
+
+            EncodingUtilities.CanEncodeString(defaultEncoding.CodePage, nonAnsiCharacters).ShouldBeFalse();
+            EncodingUtilities.CanEncodeString(defaultEncoding.CodePage, pathWithAnsiCharacters).ShouldBeTrue();
+        }
+
+        /// <summary>
+        /// Test for bug where the MSBuild does not respect "en" CultureInfo
+        /// </summary>
+        [Theory]
+        [InlineData("en", "en")]
+        [InlineData("jp", "jp")]
+        [InlineData("fr", "fr")]
+        public void GetExternalOverriddenUILanguageIfSupportableWithEncoding_RespectsOverriddenLanguage(string inputLanguage, string expectedLanguage)
+        {
+            if (!EncodingUtilities.CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())
+            {
+                return; // Do not run test to replicate the behaviour of the invoking method
+            }
+            const string DOTNET_CLI_UI_LANGUAGE = nameof(DOTNET_CLI_UI_LANGUAGE);
+            using TestEnvironment testEnvironment = TestEnvironment.Create();
+            
+            // Override the ui language by setting environment variable
+            testEnvironment.SetEnvironmentVariable(DOTNET_CLI_UI_LANGUAGE, inputLanguage);
+
+            EncodingUtilities.GetExternalOverriddenUILanguageIfSupportableWithEncoding().ShouldBeEquivalentTo(new CultureInfo(expectedLanguage));
+        }
+    }
+}
