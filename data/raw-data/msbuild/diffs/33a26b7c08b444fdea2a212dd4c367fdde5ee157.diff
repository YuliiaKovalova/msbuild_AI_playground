diff --git a/src/Build/BuildCheck/API/BuildExecutionCheckRule.cs b/src/Build/BuildCheck/API/BuildExecutionCheckRule.cs
index fddc32aa4a6..f06cb580c27 100644
--- a/src/Build/BuildCheck/API/BuildExecutionCheckRule.cs
+++ b/src/Build/BuildCheck/API/BuildExecutionCheckRule.cs
@@ -10,12 +10,12 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 /// </summary>
 public class BuildExecutionCheckRule
 {
-    public BuildAnalyzerRule(
+    public BuildExecutionCheckRule(
         string id, 
         string title, 
         string description, 
         string messageFormat,
-        BuildAnalyzerConfiguration defaultConfiguration)
+        BuildExecutionCheckConfiguration defaultConfiguration)
     {
         Id = id;
         Title = title;
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 19089f8ef85..cffb13fa63a 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -208,7 +208,7 @@ public void NoEnvironmentVariableProperty_Test(bool? customConfigEnabled, string
     [Theory]
     [InlineData("CheckCandidate", new[] { "CustomRule1", "CustomRule2" })]
     [InlineData("CheckCandidateWithMultipleChecksInjected", new[] { "CustomRule1", "CustomRule2", "CustomRule3" }, true)]
-    public void CustomCheckTest_NoEditorConfig(string checkCandidate, string[] expectedRegisteredRules, bool expectedRejectedCheck = false)
+    public void CustomCheckTest_NoEditorConfig(string checkCandidate, string[] expectedRegisteredRules, bool expectedRejectedChecks = false)
     {
         using (var env = TestEnvironment.Create())
         {
@@ -244,7 +244,10 @@ public void CustomCheckTest_WithEditorConfig(string checkCandidate, string ruleI
         {
             var checkCandidatePath = Path.Combine(TestAssetsRootPath, checkCandidate);
             AddCustomDataSourceToNugetConfig(checkCandidatePath);
-            File.WriteAllText(Path.Combine(checkCandidatePath, EditorConfigFileName), ReadEditorConfig(new List<(string, string)>() { (ruleId, severity) }, checkCandidatePath));
+            File.WriteAllText(Path.Combine(checkCandidatePath, EditorConfigFileName), ReadEditorConfig(
+                new List<(string, string)>() { (ruleId, severity) },
+                ruleToCustomConfig: null,
+                checkCandidatePath));
 
             string projectCheckBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
                 $"{Path.Combine(checkCandidatePath, $"{checkCandidate}.csproj")} /m:1 -nr:False -restore -check -verbosity:n", out bool _, timeoutMilliseconds: 1200_0000);
