diff --git a/MSBuild.sln b/MSBuild.sln
index 0f6c3b315e1..eaedd997db8 100644
--- a/MSBuild.sln
+++ b/MSBuild.sln
@@ -1,8 +1,8 @@
 ï»¿
 Microsoft Visual Studio Solution File, Format Version 12.00
-# Visual Studio Version 16
-VisualStudioVersion = 16.0.30413.136
-MinimumVisualStudioVersion = 10.0.40219.1
+# Visual Studio Version 17
+VisualStudioVersion = 17.0.31903.59
+MinimumVisualStudioVersion = 17.0.31903.59
 Project("{2150E333-8FDC-42A3-9474-1A3956D46DE8}") = "Solution Items", "Solution Items", "{4900B3B8-4310-4D5B-B1F7-2FDF9199765F}"
 	ProjectSection(SolutionItems) = preProject
 		NuGet.Config = NuGet.Config
diff --git a/README.md b/README.md
index 8a7dda38314..20d68bf2708 100644
--- a/README.md
+++ b/README.md
@@ -36,20 +36,20 @@ MSBuild 15.9 builds from the branch [`vs15.9`](https://github.com/dotnet/msbuild
 
 ## Building
 
-### Building MSBuild with Visual Studio 2019 on Windows
+### Building MSBuild with Visual Studio 2022 on Windows
 
-For the full supported experience, you will need to have Visual Studio 2019 or higher.
+For the full supported experience, you will need to have Visual Studio 2022 or higher.
 
-To get started on **Visual Studio 2019**:
+To get started on **Visual Studio 2022**:
 
-1. [Install Visual Studio 2019](https://www.visualstudio.com/vs/).  Select the following Workloads:
+1. [Install Visual Studio 2022](https://www.visualstudio.com/vs/).  Select the following Workloads:
   - .NET desktop development
   - .NET Core cross-platform development
-2. Open a `Developer Command Prompt for VS 2019` prompt.
+2. Open a `Developer Command Prompt for VS 2022` prompt.
 3. Clone the source code: `git clone https://github.com/dotnet/msbuild`
   - You may have to [download Git](https://git-scm.com/downloads) first.
 4. Run `.\build.cmd` from the root of the repo to build the code. This also restores packages needed to open the projects in Visual Studio.
-5. Open `MSBuild.sln` or `MSBuild.Dev.slnf` in Visual Studio 2019.
+5. Open `MSBuild.sln` or `MSBuild.Dev.slnf` in Visual Studio 2022.
 
 Note: To create a usable MSBuild with your changes, run `.\build.cmd /p:CreateBootstrap=true`.
 To build release, add `-c Release`: `.\build.cmd -c Release /p:CreateBootstrap=true`.
diff --git a/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md b/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
index 741b3aa6b5f..20c962598de 100644
--- a/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
+++ b/documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md
@@ -4,7 +4,7 @@ These instructions refer to working with the `master` branch.
 
 ## Required Software
 
-**Latest Microsoft Visual Studio 2019**: You can download the Visual Studio Community edition from [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).
+**Latest Microsoft Visual Studio 2022**: You can download the Visual Studio Community edition from [https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx).
 
 All command lines should be executed from a Visual Studio developer command prompt.
 
diff --git a/eng/Common.globalconfig b/eng/Common.globalconfig
index 3c0e9e99c5b..49de8011d44 100644
--- a/eng/Common.globalconfig
+++ b/eng/Common.globalconfig
@@ -277,7 +277,7 @@ dotnet_diagnostic.CA1821.severity = warning
 dotnet_diagnostic.CA1822.severity = none
 
 # Avoid unused private fields
-dotnet_diagnostic.CA1823.severity = suggestion
+dotnet_diagnostic.CA1823.severity = warning
 
 # Mark assemblies with NeutralResourcesLanguageAttribute
 dotnet_diagnostic.CA1824.severity = warning
@@ -411,7 +411,7 @@ dotnet_diagnostic.CA2234.severity = none
 dotnet_diagnostic.CA2235.severity = none
 
 # Provide correct arguments to formatting methods
-dotnet_diagnostic.CA2241.severity = suggestion
+dotnet_diagnostic.CA2241.severity = warning
 
 # Test for NaN correctly
 dotnet_diagnostic.CA2242.severity = warning
diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index 6e16dfd6f2a..241888161f8 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -1,22 +1,22 @@
 <?xml version="1.0" encoding="utf-8"?>
 <Dependencies>
   <ToolsetDependencies>
-    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="6.0.0-beta.22054.3">
+    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="6.0.0-beta.22076.8">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>98018d5a808e5167a4ce5e81dc6513382676d4c9</Sha>
+      <Sha>214dd59f1d81f8e34289cfb173cf66fb2cd2f467</Sha>
       <SourceBuild RepoName="arcade" ManagedOnly="true" />
     </Dependency>
-    <Dependency Name="NuGet.Build.Tasks" Version="6.1.0-preview.1.62">
+    <Dependency Name="NuGet.Build.Tasks" Version="6.1.0-rc.103">
       <Uri>https://github.com/nuget/nuget.client</Uri>
-      <Sha>9187a50daec29061772a2057490697c6c0e4c354</Sha>
+      <Sha>f1906d3d581e0ea0bdd282134208d654f8447880</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.1.0-3.22057.9">
+    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.1.0-3.22071.8">
       <Uri>https://github.com/dotnet/roslyn</Uri>
-      <Sha>a07da6871b3b7f53611b0f95530561286dd1e529</Sha>
+      <Sha>663228dd1656d5e5ca7bd38bd5c95e3d8c2b7b01</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="6.0.0-beta.22054.3">
+    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="6.0.0-beta.22076.8">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>98018d5a808e5167a4ce5e81dc6513382676d4c9</Sha>
+      <Sha>214dd59f1d81f8e34289cfb173cf66fb2cd2f467</Sha>
     </Dependency>
   </ToolsetDependencies>
 </Dependencies>
diff --git a/eng/Versions.props b/eng/Versions.props
index c535136d076..4d24979112f 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -32,10 +32,10 @@
     <!-- DotNetCliVersion MUST match the dotnet version in global.json.
          Otherwise, this version of dotnet will not be installed and the build will error out. -->
     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\global.json')), '"dotnet": "([^"]*)"').Groups.get_Item(1))</DotNetCliVersion>
-    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.22054.3</MicrosoftDotNetXUnitExtensionsVersion>
+    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.22076.8</MicrosoftDotNetXUnitExtensionsVersion>
     <MicrosoftExtensionsDependencyModelVersion>6.0.0-preview.2.21154.6</MicrosoftExtensionsDependencyModelVersion>
-    <MicrosoftNetCompilersToolsetVersion>4.1.0-3.22057.9</MicrosoftNetCompilersToolsetVersion>
-    <NuGetBuildTasksVersion>6.1.0-preview.1.62</NuGetBuildTasksVersion>
+    <MicrosoftNetCompilersToolsetVersion>4.1.0-3.22071.8</MicrosoftNetCompilersToolsetVersion>
+    <NuGetBuildTasksVersion>6.1.0-rc.103</NuGetBuildTasksVersion>
   </PropertyGroup>
   <Target Name="OverrideArcadeFileVersion" AfterTargets="_InitializeAssemblyVersion">
     <!-- See https://github.com/dotnet/arcade/issues/3386
diff --git a/eng/common/generate-graph-files.ps1 b/eng/common/generate-graph-files.ps1
deleted file mode 100644
index 0728b1a8b57..00000000000
--- a/eng/common/generate-graph-files.ps1
+++ /dev/null
@@ -1,86 +0,0 @@
-Param(
-  [Parameter(Mandatory=$true)][string] $barToken,       # Token generated at https://maestro-prod.westus2.cloudapp.azure.com/Account/Tokens
-  [Parameter(Mandatory=$true)][string] $gitHubPat,      # GitHub personal access token from https://github.com/settings/tokens (no auth scopes needed)
-  [Parameter(Mandatory=$true)][string] $azdoPat,        # Azure Dev Ops tokens from https://dev.azure.com/dnceng/_details/security/tokens (code read scope needed)
-  [Parameter(Mandatory=$true)][string] $outputFolder,   # Where the graphviz.txt file will be created
-  [string] $darcVersion,                                # darc's version
-  [string] $graphvizVersion = '2.38',                   # GraphViz version
-  [switch] $includeToolset                              # Whether the graph should include toolset dependencies or not. i.e. arcade, optimization. For more about
-                                                        # toolset dependencies see https://github.com/dotnet/arcade/blob/master/Documentation/Darc.md#toolset-vs-product-dependencies
-)
-
-function CheckExitCode ([string]$stage)
-{
-  $exitCode = $LASTEXITCODE
-  if ($exitCode  -ne 0) {
-    Write-PipelineTelemetryError -Category 'Arcade' -Message "Something failed in stage: '$stage'. Check for errors above. Exiting now..."
-    ExitWithExitCode $exitCode
-  }
-}
-
-try {
-  $ErrorActionPreference = 'Stop'
-  . $PSScriptRoot\tools.ps1
-  
-  Import-Module -Name (Join-Path $PSScriptRoot 'native\CommonLibrary.psm1')
-
-  Push-Location $PSScriptRoot
-
-  Write-Host 'Installing darc...'
-  . .\darc-init.ps1 -darcVersion $darcVersion
-  CheckExitCode 'Running darc-init'
-
-  $engCommonBaseDir = Join-Path $PSScriptRoot 'native\'
-  $graphvizInstallDir = CommonLibrary\Get-NativeInstallDirectory
-  $nativeToolBaseUri = 'https://netcorenativeassets.blob.core.windows.net/resource-packages/external'
-  $installBin = Join-Path $graphvizInstallDir 'bin'
-
-  Write-Host 'Installing dot...'
-  .\native\install-tool.ps1 -ToolName graphviz -InstallPath $installBin -BaseUri $nativeToolBaseUri -CommonLibraryDirectory $engCommonBaseDir -Version $graphvizVersion -Verbose
-
-  $darcExe = "$env:USERPROFILE\.dotnet\tools"
-  $darcExe = Resolve-Path "$darcExe\darc.exe"
-
-  Create-Directory $outputFolder
-
-  # Generate 3 graph descriptions:
-  # 1. Flat with coherency information
-  # 2. Graphviz (dot) file
-  # 3. Standard dependency graph
-  $graphVizFilePath = "$outputFolder\graphviz.txt"
-  $graphVizImageFilePath = "$outputFolder\graph.png"
-  $normalGraphFilePath = "$outputFolder\graph-full.txt"
-  $flatGraphFilePath = "$outputFolder\graph-flat.txt"
-  $baseOptions = @( '--github-pat', "$gitHubPat", '--azdev-pat', "$azdoPat", '--password', "$barToken" )
-
-  if ($includeToolset) {
-    Write-Host 'Toolsets will be included in the graph...'
-    $baseOptions += @( '--include-toolset' )
-  }
-
-  Write-Host 'Generating standard dependency graph...'
-  & "$darcExe" get-dependency-graph @baseOptions --output-file $normalGraphFilePath
-  CheckExitCode 'Generating normal dependency graph'
-
-  Write-Host 'Generating flat dependency graph and graphviz file...'
-  & "$darcExe" get-dependency-graph @baseOptions --flat --coherency --graphviz $graphVizFilePath --output-file $flatGraphFilePath
-  CheckExitCode 'Generating flat and graphviz dependency graph'
-
-  Write-Host "Generating graph image $graphVizFilePath"
-  $dotFilePath = Join-Path $installBin "graphviz\$graphvizVersion\release\bin\dot.exe"
-  & "$dotFilePath" -Tpng -o"$graphVizImageFilePath" "$graphVizFilePath"
-  CheckExitCode 'Generating graphviz image'
-
-  Write-Host "'$graphVizFilePath', '$flatGraphFilePath', '$normalGraphFilePath' and '$graphVizImageFilePath' created!"
-}
-catch {
-  if (!$includeToolset) {
-    Write-Host 'This might be a toolset repo which includes only toolset dependencies. ' -NoNewline -ForegroundColor Yellow
-    Write-Host 'Since -includeToolset is not set there is no graph to create. Include -includeToolset and try again...' -ForegroundColor Yellow
-  }
-  Write-Host $_.ScriptStackTrace
-  Write-PipelineTelemetryError -Category 'Arcade' -Message $_
-  ExitWithExitCode 1
-} finally {
-  Pop-Location
-}
\ No newline at end of file
diff --git a/eng/common/templates/job/generate-graph-files.yml b/eng/common/templates/job/generate-graph-files.yml
deleted file mode 100644
index e54ce956f90..00000000000
--- a/eng/common/templates/job/generate-graph-files.yml
+++ /dev/null
@@ -1,48 +0,0 @@
-parameters:
-  # Optional: dependencies of the job
-  dependsOn: ''
-
-  # Optional: A defined YAML pool - https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#pool
-  pool: {}
-
-  # Optional: Include toolset dependencies in the generated graph files
-  includeToolset: false
-  
-jobs:
-- job: Generate_Graph_Files
-
-  dependsOn: ${{ parameters.dependsOn }}
-
-  displayName: Generate Graph Files
-
-  pool: ${{ parameters.pool }}
-
-  variables:
-    # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
-    # DotNet-AllOrgs-Darc-Pats provides: dn-bot-devdiv-dnceng-rw-code-pat
-    - group: Publish-Build-Assets
-    - group: DotNet-AllOrgs-Darc-Pats
-    - name: _GraphArguments
-      value: -gitHubPat $(BotAccount-dotnet-maestro-bot-PAT) 
-        -azdoPat $(dn-bot-devdiv-dnceng-rw-code-pat) 
-        -barToken $(MaestroAccessToken) 
-        -outputFolder '$(Build.StagingDirectory)/GraphFiles/'
-    - ${{ if ne(parameters.includeToolset, 'false') }}:
-      - name: _GraphArguments
-        value: ${{ variables._GraphArguments }} -includeToolset
-
-  steps:
-    - task: PowerShell@2
-      displayName: Generate Graph Files
-      inputs:
-        filePath: eng\common\generate-graph-files.ps1 
-        arguments: $(_GraphArguments)
-      continueOnError: true
-    - task: PublishBuildArtifacts@1
-      displayName: Publish Graph to Artifacts
-      inputs:
-        PathtoPublish: '$(Build.StagingDirectory)/GraphFiles'
-        PublishLocation: Container
-        ArtifactName: GraphFiles
-      continueOnError: true
-      condition: always()      
diff --git a/eng/common/templates/jobs/jobs.yml b/eng/common/templates/jobs/jobs.yml
index 90015a7e5ae..2cc0f67e153 100644
--- a/eng/common/templates/jobs/jobs.yml
+++ b/eng/common/templates/jobs/jobs.yml
@@ -87,13 +87,3 @@ jobs:
         runAsPublic: ${{ parameters.runAsPublic }}
         publishUsingPipelines: ${{ parameters.enablePublishUsingPipelines }}
         enablePublishBuildArtifacts: ${{ parameters.enablePublishBuildArtifacts }}
-
-  - ${{ if eq(parameters.graphFileGeneration.enabled, true) }}:
-    - template: ../job/generate-graph-files.yml
-      parameters:
-        continueOnError: ${{ parameters.continueOnError }}
-        includeToolset: ${{ parameters.graphFileGeneration.includeToolset }}
-        dependsOn:
-          - Asset_Registry_Publish
-        pool:
-          vmImage: windows-2019
diff --git a/eng/common/templates/post-build/channels/generic-internal-channel.yml b/eng/common/templates/post-build/channels/generic-internal-channel.yml
deleted file mode 100644
index 8990dfc8c87..00000000000
--- a/eng/common/templates/post-build/channels/generic-internal-channel.yml
+++ /dev/null
@@ -1,190 +0,0 @@
-parameters:
-  BARBuildId: ''
-  PromoteToChannelIds: ''
-  artifactsPublishingAdditionalParameters: ''
-  dependsOn:
-  - Validate
-  publishInstallersAndChecksums: true
-  symbolPublishingAdditionalParameters: ''
-  stageName: ''
-  channelName: ''
-  channelId: ''
-  transportFeed: ''
-  shippingFeed: ''
-  symbolsFeed: ''
-
-stages:
-- stage: ${{ parameters.stageName }}
-  dependsOn: ${{ parameters.dependsOn }}
-  variables:
-    - template: ../common-variables.yml
-  displayName: ${{ parameters.channelName }} Publishing
-  jobs:
-  - template: ../setup-maestro-vars.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-
-  - job: publish_symbols
-    displayName: Symbol Publishing
-    dependsOn: setupMaestroVars
-    condition: contains(dependencies.setupMaestroVars.outputs['setReleaseVars.TargetChannels'], format('[{0}]', ${{ parameters.channelId }} ))
-    variables:
-      - group: DotNet-Symbol-Server-Pats
-      - name: AzDOProjectName
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-      - name: AzDOPipelineId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-      - name: AzDOBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
-    pool:
-      vmImage: 'windows-2019'
-    steps:
-      - script: echo "##vso[task.logissue type=warning]Going forward, v2 Arcade publishing is no longer supported. Please read https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md for details, then contact dnceng if you have further questions."
-        displayName: Warn about v2 Arcade Publishing Usage
-
-      # This is necessary whenever we want to publish/restore to an AzDO private feed
-      - task: NuGetAuthenticate@0
-        displayName: 'Authenticate to AzDO Feeds'
-
-      - task: DownloadBuildArtifacts@0
-        displayName: Download Build Assets
-        continueOnError: true
-        inputs:
-          buildType: specific
-          buildVersionToDownload: specific
-          project: $(AzDOProjectName)
-          pipeline: $(AzDOPipelineId)
-          buildId: $(AzDOBuildId)
-          downloadType: 'specific'
-          itemPattern: |
-            PdbArtifacts/**
-            BlobArtifacts/**
-          downloadPath: '$(Build.ArtifactStagingDirectory)'
-          checkDownloadedFiles: true
-
-      # This is necessary whenever we want to publish/restore to an AzDO private feed
-      # Since sdk-task.ps1 tries to restore packages we need to do this authentication here
-      # otherwise it'll complain about accessing a private feed.
-      - task: NuGetAuthenticate@0
-        displayName: 'Authenticate to AzDO Feeds'
-
-      - task: PowerShell@2
-        displayName: Enable cross-org publishing
-        inputs:
-          filePath: eng\common\enable-cross-org-publishing.ps1
-          arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)
-
-      - task: PowerShell@2
-        displayName: Publish
-        inputs:
-          filePath: eng\common\sdk-task.ps1
-          arguments: -task PublishToSymbolServers -restore -msbuildEngine dotnet
-            /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
-            /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
-            /p:PDBArtifactsDirectory='$(Build.ArtifactStagingDirectory)/PDBArtifacts/'
-            /p:BlobBasePath='$(Build.ArtifactStagingDirectory)/BlobArtifacts/'
-            /p:SymbolPublishingExclusionsFile='$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt'
-            /p:Configuration=Release
-            /p:PublishToMSDL=false
-            ${{ parameters.symbolPublishingAdditionalParameters }}
-
-      - template: ../../steps/publish-logs.yml
-        parameters:
-          StageLabel: '${{ parameters.stageName }}'
-          JobLabel: 'SymbolPublishing'
-
-  - job: publish_assets
-    displayName: Publish Assets
-    dependsOn: setupMaestroVars
-    timeoutInMinutes: 120
-    variables:
-      - name: BARBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
-      - name: IsStableBuild
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.IsStableBuild'] ]
-      - name: AzDOProjectName
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-      - name: AzDOPipelineId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-      - name: AzDOBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
-    condition: contains(dependencies.setupMaestroVars.outputs['setReleaseVars.TargetChannels'], format('[{0}]', ${{ parameters.channelId }} ))
-    pool:
-      vmImage: 'windows-2019'
-    steps:
-      - script: echo "##vso[task.logissue type=warning]Going forward, v2 Arcade publishing is no longer supported. Please read https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md for details, then contact dnceng if you have further questions."
-        displayName: Warn about v2 Arcade Publishing Usage
-
-      - task: DownloadBuildArtifacts@0
-        displayName: Download Build Assets
-        continueOnError: true
-        inputs:
-          buildType: specific
-          buildVersionToDownload: specific
-          project: $(AzDOProjectName)
-          pipeline: $(AzDOPipelineId)
-          buildId: $(AzDOBuildId)
-          downloadType: 'specific'
-          itemPattern: |
-            PackageArtifacts/**
-            BlobArtifacts/**
-            AssetManifests/**
-          downloadPath: '$(Build.ArtifactStagingDirectory)'
-          checkDownloadedFiles: true
-
-      - task: NuGetToolInstaller@1
-        displayName: 'Install NuGet.exe'
-
-      # This is necessary whenever we want to publish/restore to an AzDO private feed
-      - task: NuGetAuthenticate@0
-        displayName: 'Authenticate to AzDO Feeds'
-
-      - task: PowerShell@2
-        displayName: Enable cross-org publishing
-        inputs:
-          filePath: eng\common\enable-cross-org-publishing.ps1
-          arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)
-
-      - task: PowerShell@2
-        displayName: Publish Assets
-        inputs:
-          filePath: eng\common\sdk-task.ps1
-          arguments: -task PublishArtifactsInManifest -restore -msbuildEngine dotnet
-            /p:PublishingInfraVersion=2
-            /p:IsStableBuild=$(IsStableBuild)
-            /p:IsInternalBuild=$(IsInternalBuild)
-            /p:RepositoryName=$(Build.Repository.Name)
-            /p:CommitSha=$(Build.SourceVersion)
-            /p:NugetPath=$(NuGetExeToolPath)
-            /p:AzdoTargetFeedPAT='$(dn-bot-dnceng-universal-packages-rw)'
-            /p:AzureStorageTargetFeedPAT='$(dotnetfeed-storage-access-key-1)'
-            /p:BARBuildId=$(BARBuildId)
-            /p:MaestroApiEndpoint='$(MaestroApiEndPoint)'
-            /p:BuildAssetRegistryToken='$(MaestroApiAccessToken)'
-            /p:ManifestsBasePath='$(Build.ArtifactStagingDirectory)/AssetManifests/'
-            /p:BlobBasePath='$(Build.ArtifactStagingDirectory)/BlobArtifacts/'
-            /p:PackageBasePath='$(Build.ArtifactStagingDirectory)/PackageArtifacts/'
-            /p:Configuration=Release
-            /p:PublishInstallersAndChecksums=${{ parameters.publishInstallersAndChecksums }}
-            /p:ChecksumsTargetStaticFeed=$(InternalChecksumsBlobFeedUrl)
-            /p:ChecksumsAzureAccountKey=$(InternalChecksumsBlobFeedKey)
-            /p:InstallersTargetStaticFeed=$(InternalInstallersBlobFeedUrl)
-            /p:InstallersAzureAccountKey=$(InternalInstallersBlobFeedKey)
-            /p:AzureDevOpsStaticShippingFeed='${{ parameters.shippingFeed }}'
-            /p:AzureDevOpsStaticShippingFeedKey='$(dn-bot-dnceng-artifact-feeds-rw)'
-            /p:AzureDevOpsStaticTransportFeed='${{ parameters.transportFeed }}'
-            /p:AzureDevOpsStaticTransportFeedKey='$(dn-bot-dnceng-artifact-feeds-rw)'
-            /p:AzureDevOpsStaticSymbolsFeed='${{ parameters.symbolsFeed }}'
-            /p:AzureDevOpsStaticSymbolsFeedKey='$(dn-bot-dnceng-artifact-feeds-rw)'
-            /p:PublishToMSDL=false
-            ${{ parameters.artifactsPublishingAdditionalParameters }}
-
-      - template: ../../steps/publish-logs.yml
-        parameters:
-          StageLabel: '${{ parameters.stageName }}'
-          JobLabel: 'AssetsPublishing'
-
-      - template: ../../steps/add-build-to-channel.yml
-        parameters:
-          ChannelId: ${{ parameters.channelId }}
diff --git a/eng/common/templates/post-build/channels/generic-public-channel.yml b/eng/common/templates/post-build/channels/generic-public-channel.yml
deleted file mode 100644
index 3220c6a4f92..00000000000
--- a/eng/common/templates/post-build/channels/generic-public-channel.yml
+++ /dev/null
@@ -1,192 +0,0 @@
-parameters:
-  BARBuildId: ''
-  PromoteToChannelIds: ''
-  artifactsPublishingAdditionalParameters: ''
-  dependsOn:
-  - Validate
-  publishInstallersAndChecksums: true
-  symbolPublishingAdditionalParameters: ''
-  stageName: ''
-  channelName: ''
-  channelId: ''
-  transportFeed: ''
-  shippingFeed: ''
-  symbolsFeed: ''
-  # If the channel name is empty, no links will be generated
-  akaMSChannelName: ''
-
-stages:
-- stage: ${{ parameters.stageName }}
-  dependsOn: ${{ parameters.dependsOn }}
-  variables:
-    - template: ../common-variables.yml
-  displayName: ${{ parameters.channelName }} Publishing
-  jobs:
-  - template: ../setup-maestro-vars.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-
-  - job: publish_symbols
-    displayName: Symbol Publishing
-    dependsOn: setupMaestroVars
-    condition: contains(dependencies.setupMaestroVars.outputs['setReleaseVars.TargetChannels'], format('[{0}]', ${{ parameters.channelId }} ))
-    variables:
-      - group: DotNet-Symbol-Server-Pats
-      - name: AzDOProjectName
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-      - name: AzDOPipelineId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-      - name: AzDOBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
-    pool:
-      vmImage: 'windows-2019'
-    steps:
-      - script: echo "##vso[task.logissue type=warning]Going forward, v2 Arcade publishing is no longer supported. Please read https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md for details, then contact dnceng if you have further questions."
-        displayName: Warn about v2 Arcade Publishing Usage
-
-      - task: DownloadBuildArtifacts@0
-        displayName: Download Build Assets
-        continueOnError: true
-        inputs:
-          buildType: specific
-          buildVersionToDownload: specific
-          project: $(AzDOProjectName)
-          pipeline: $(AzDOPipelineId)
-          buildId: $(AzDOBuildId)
-          downloadType: 'specific'
-          itemPattern: |
-            PdbArtifacts/**
-            BlobArtifacts/**
-          downloadPath: '$(Build.ArtifactStagingDirectory)'
-          checkDownloadedFiles: true
-
-      # This is necessary whenever we want to publish/restore to an AzDO private feed
-      # Since sdk-task.ps1 tries to restore packages we need to do this authentication here
-      # otherwise it'll complain about accessing a private feed.
-      - task: NuGetAuthenticate@0
-        displayName: 'Authenticate to AzDO Feeds'
-
-      - task: PowerShell@2
-        displayName: Enable cross-org publishing
-        inputs:
-          filePath: eng\common\enable-cross-org-publishing.ps1
-          arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)
-
-      - task: PowerShell@2
-        displayName: Publish
-        inputs:
-          filePath: eng\common\sdk-task.ps1
-          arguments: -task PublishToSymbolServers -restore -msbuildEngine dotnet
-            /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
-            /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
-            /p:PDBArtifactsDirectory='$(Build.ArtifactStagingDirectory)/PDBArtifacts/'
-            /p:BlobBasePath='$(Build.ArtifactStagingDirectory)/BlobArtifacts/'
-            /p:SymbolPublishingExclusionsFile='$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt'
-            /p:Configuration=Release
-            ${{ parameters.symbolPublishingAdditionalParameters }}
-
-      - template: ../../steps/publish-logs.yml
-        parameters:
-          StageLabel: '${{ parameters.stageName }}'
-          JobLabel: 'SymbolPublishing'
-
-  - job: publish_assets
-    displayName: Publish Assets
-    dependsOn: setupMaestroVars
-    timeoutInMinutes: 120
-    variables:
-      - name: BARBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
-      - name: IsStableBuild
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.IsStableBuild'] ]
-      - name: AzDOProjectName
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
-      - name: AzDOPipelineId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
-      - name: AzDOBuildId
-        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
-      - name: ArtifactsCategory
-        value: ${{ coalesce(variables._DotNetArtifactsCategory, '.NETCore') }}
-    condition: contains(dependencies.setupMaestroVars.outputs['setReleaseVars.TargetChannels'], format('[{0}]', ${{ parameters.channelId }} ))
-    pool:
-      vmImage: 'windows-2019'
-    steps:
-      - script: echo "##vso[task.logissue type=warning]Going forward, v2 Arcade publishing is no longer supported. Please read https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md for details, then contact dnceng if you have further questions."
-        displayName: Warn about v2 Arcade Publishing Usage
-
-      - task: DownloadBuildArtifacts@0
-        displayName: Download Build Assets
-        continueOnError: true
-        inputs:
-          buildType: specific
-          buildVersionToDownload: specific
-          project: $(AzDOProjectName)
-          pipeline: $(AzDOPipelineId)
-          buildId: $(AzDOBuildId)
-          downloadType: 'specific'
-          itemPattern: |
-            PackageArtifacts/**
-            BlobArtifacts/**
-            AssetManifests/**
-          downloadPath: '$(Build.ArtifactStagingDirectory)'
-          checkDownloadedFiles: true
-
-      - task: NuGetToolInstaller@1
-        displayName: 'Install NuGet.exe'
-
-      # This is necessary whenever we want to publish/restore to an AzDO private feed
-      - task: NuGetAuthenticate@0
-        displayName: 'Authenticate to AzDO Feeds'
-
-      - task: PowerShell@2
-        displayName: Enable cross-org publishing
-        inputs:
-          filePath: eng\common\enable-cross-org-publishing.ps1
-          arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)
-
-      - task: PowerShell@2
-        displayName: Publish Assets
-        inputs:
-          filePath: eng\common\sdk-task.ps1
-          arguments: -task PublishArtifactsInManifest -restore -msbuildEngine dotnet
-            /p:PublishingInfraVersion=2
-            /p:ArtifactsCategory=$(ArtifactsCategory)
-            /p:IsStableBuild=$(IsStableBuild)
-            /p:IsInternalBuild=$(IsInternalBuild)
-            /p:RepositoryName=$(Build.Repository.Name)
-            /p:CommitSha=$(Build.SourceVersion)
-            /p:NugetPath=$(NuGetExeToolPath)
-            /p:AzdoTargetFeedPAT='$(dn-bot-dnceng-universal-packages-rw)'
-            /p:AzureStorageTargetFeedPAT='$(dotnetfeed-storage-access-key-1)'
-            /p:BARBuildId=$(BARBuildId)
-            /p:MaestroApiEndpoint='$(MaestroApiEndPoint)'
-            /p:BuildAssetRegistryToken='$(MaestroApiAccessToken)'
-            /p:ManifestsBasePath='$(Build.ArtifactStagingDirectory)/AssetManifests/'
-            /p:BlobBasePath='$(Build.ArtifactStagingDirectory)/BlobArtifacts/'
-            /p:PackageBasePath='$(Build.ArtifactStagingDirectory)/PackageArtifacts/'
-            /p:Configuration=Release
-            /p:PublishInstallersAndChecksums=${{ parameters.publishInstallersAndChecksums }}
-            /p:InstallersTargetStaticFeed=$(InstallersBlobFeedUrl)
-            /p:InstallersAzureAccountKey=$(dotnetcli-storage-key)
-            /p:ChecksumsTargetStaticFeed=$(ChecksumsBlobFeedUrl)
-            /p:ChecksumsAzureAccountKey=$(dotnetclichecksums-storage-key)
-            /p:AzureDevOpsStaticShippingFeed='${{ parameters.shippingFeed }}'
-            /p:AzureDevOpsStaticShippingFeedKey='$(dn-bot-dnceng-artifact-feeds-rw)'
-            /p:AzureDevOpsStaticTransportFeed='${{ parameters.transportFeed }}'
-            /p:AzureDevOpsStaticTransportFeedKey='$(dn-bot-dnceng-artifact-feeds-rw)'
-            /p:AzureDevOpsStaticSymbolsFeed='${{ parameters.symbolsFeed }}'
-            /p:AzureDevOpsStaticSymbolsFeedKey='$(dn-bot-dnceng-artifact-feeds-rw)'
-            /p:LatestLinkShortUrlPrefix=dotnet/'${{ parameters.akaMSChannelName }}'
-            /p:AkaMSClientId=$(akams-client-id)
-            /p:AkaMSClientSecret=$(akams-client-secret)
-            ${{ parameters.artifactsPublishingAdditionalParameters }}
-
-      - template: ../../steps/publish-logs.yml
-        parameters:
-          StageLabel: '${{ parameters.stageName }}'
-          JobLabel: 'AssetsPublishing'
-
-      - template: ../../steps/add-build-to-channel.yml
-        parameters:
-          ChannelId: ${{ parameters.channelId }}
diff --git a/eng/common/templates/post-build/post-build.yml b/eng/common/templates/post-build/post-build.yml
index 4f79cf0f337..d1759337abe 100644
--- a/eng/common/templates/post-build/post-build.yml
+++ b/eng/common/templates/post-build/post-build.yml
@@ -1,71 +1,89 @@
 parameters:
- # Which publishing infra should be used. THIS SHOULD MATCH THE VERSION ON THE BUILD MANIFEST.
-  # Publishing V2 accepts optionally outlining the publishing stages - default is inline.
-  # Publishing V3 DOES NOT accept inlining the publishing stages.
-  publishingInfraVersion: 2
-  # When set to true the publishing templates from the repo will be used
-  # otherwise Darc add-build-to-channel will be used to trigger the promotion pipeline
-  inline: true
-
-  # Only used if inline==false. When set to true will stall the current build until
-  # the Promotion Pipeline build finishes. Otherwise, the current build will continue 
-  # execution concurrently with the promotion build.
-  waitPublishingFinish: true
-
-  BARBuildId: ''
-  PromoteToChannelIds: ''
-
-  enableSourceLinkValidation: false
-  enableSigningValidation: true
-  enableSymbolValidation: false
-  enableNugetValidation: true
-  publishInstallersAndChecksums: true
-  SDLValidationParameters:
-    enable: false
-    continueOnError: false
-    params: ''
-    artifactNames: ''
-    downloadArtifacts: true
+  # Which publishing infra should be used. THIS SHOULD MATCH THE VERSION ON THE BUILD MANIFEST.
+  # Publishing V1 is no longer supported
+  # Publishing V2 is no longer supported
+  # Publishing V3 is the default
+  - name: publishingInfraVersion
+    displayName: Which version of publishing should be used to promote the build definition?
+    type: number
+    default: 3
+    values:
+    - 3
+
+  - name: BARBuildId
+    displayName: BAR Build Id
+    type: number
+    default: 0
+
+  - name: PromoteToChannelIds
+    displayName: Channel to promote BARBuildId to
+    type: string
+    default: ''
+
+  - name: enableSourceLinkValidation
+    displayName: Enable SourceLink validation
+    type: boolean
+    default: false
+
+  - name: enableSigningValidation
+    displayName: Enable signing validation
+    type: boolean
+    default: true
+
+  - name: enableSymbolValidation
+    displayName: Enable symbol validation
+    type: boolean
+    default: false
+
+  - name: enableNugetValidation
+    displayName: Enable NuGet validation
+    type: boolean
+    default: true
+    
+  - name: publishInstallersAndChecksums
+    displayName: Publish installers and checksums
+    type: boolean
+    default: true
+
+  - name: SDLValidationParameters
+    type: object
+    default:
+      enable: false
+      continueOnError: false
+      params: ''
+      artifactNames: ''
+      downloadArtifacts: true
 
   # These parameters let the user customize the call to sdk-task.ps1 for publishing
   # symbols & general artifacts as well as for signing validation
-  symbolPublishingAdditionalParameters: ''
-  artifactsPublishingAdditionalParameters: ''
-  signingValidationAdditionalParameters: ''
+  - name: symbolPublishingAdditionalParameters
+    displayName: Symbol publishing additional parameters
+    type: string
+    default: ''
+
+  - name: artifactsPublishingAdditionalParameters
+    displayName: Artifact publishing additional parameters
+    type: string
+    default: ''
+
+  - name: signingValidationAdditionalParameters
+    displayName: Signing validation additional parameters
+    type: string
+    default: ''
 
   # Which stages should finish execution before post-build stages start
-  validateDependsOn:
-  - build
-  publishDependsOn: 
-  - Validate
+  - name: validateDependsOn
+    type: object
+    default:
+    - build
 
-  # Channel ID's instantiated in this file.
-  # When adding a new channel implementation the call to `check-channel-consistency.ps1` 
-  # needs to be updated with the new channel ID
-  NetEngLatestChannelId: 2
-  NetEngValidationChannelId: 9
-  NetDev5ChannelId: 131
-  NetDev6ChannelId: 1296
-  GeneralTestingChannelId: 529
-  NETCoreToolingDevChannelId: 548
-  NETCoreToolingReleaseChannelId: 549
-  NETInternalToolingChannelId: 551
-  NETCoreExperimentalChannelId: 562
-  NetEngServicesIntChannelId: 678
-  NetEngServicesProdChannelId: 679
-  NetCoreSDK313xxChannelId: 759
-  NetCoreSDK313xxInternalChannelId: 760
-  NetCoreSDK314xxChannelId: 921
-  NetCoreSDK314xxInternalChannelId: 922
-  VS166ChannelId: 1010
-  VS167ChannelId: 1011
-  VS168ChannelId: 1154
-  VSMasterChannelId: 1012
-  VS169ChannelId: 1473
-  VS1610ChannelId: 1692
+  - name: publishDependsOn
+    type: object
+    default:
+    - Validate
 
 stages:
-- ${{ if or(and(le(parameters.publishingInfraVersion, 2), eq(parameters.inline, 'true')), eq( parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
+- ${{ if or(eq( parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
   - stage: Validate
     dependsOn: ${{ parameters.validateDependsOn }}
     displayName: Validate Build Assets
@@ -77,23 +95,6 @@ stages:
         BARBuildId: ${{ parameters.BARBuildId }}
         PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
 
-    - ${{ if and(le(parameters.publishingInfraVersion, 2), eq(parameters.inline, 'true')) }}:
-      - job:
-        displayName: Post-build Checks
-        dependsOn: setupMaestroVars
-        variables:
-          - name: TargetChannels
-            value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.TargetChannels'] ]
-        pool:
-          vmImage: 'windows-2019'
-        steps:
-          - task: PowerShell@2
-            displayName: Maestro Channels Consistency
-            inputs:
-              filePath: $(Build.SourcesDirectory)/eng/common/post-build/check-channel-consistency.ps1
-              arguments: -PromoteToChannels "$(TargetChannels)"
-                -AvailableChannelIds ${{parameters.NetEngLatestChannelId}},${{parameters.NetEngValidationChannelId}},${{parameters.NetDev5ChannelId}},${{parameters.NetDev6ChannelId}},${{parameters.GeneralTestingChannelId}},${{parameters.NETCoreToolingDevChannelId}},${{parameters.NETCoreToolingReleaseChannelId}},${{parameters.NETInternalToolingChannelId}},${{parameters.NETCoreExperimentalChannelId}},${{parameters.NetEngServicesIntChannelId}},${{parameters.NetEngServicesProdChannelId}},${{parameters.NetCoreSDK313xxChannelId}},${{parameters.NetCoreSDK313xxInternalChannelId}},${{parameters.NetCoreSDK314xxChannelId}},${{parameters.NetCoreSDK314xxInternalChannelId}},${{parameters.VS166ChannelId}},${{parameters.VS167ChannelId}},${{parameters.VS168ChannelId}},${{parameters.VSMasterChannelId}},${{parameters.VS169ChannelId}},${{parameters.VS1610ChannelId}}
-
     - job:
       displayName: NuGet Validation
       dependsOn: setupMaestroVars
@@ -229,361 +230,39 @@ stages:
         artifactNames: ${{ parameters.SDLValidationParameters.artifactNames }}
         downloadArtifacts: ${{ parameters.SDLValidationParameters.downloadArtifacts }}
 
-- ${{ if or(ge(parameters.publishingInfraVersion, 3), eq(parameters.inline, 'false')) }}:
-  - stage: publish_using_darc
-    ${{ if or(eq(parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
-      dependsOn: ${{ parameters.publishDependsOn }}
-    ${{ if and(ne(parameters.enableNugetValidation, 'true'), ne(parameters.enableSigningValidation, 'true'), ne(parameters.enableSourceLinkValidation, 'true'), ne(parameters.SDLValidationParameters.enable, 'true')) }}:
-      dependsOn: ${{ parameters.validateDependsOn }}
-    displayName: Publish using Darc
-    variables:
-      - template: common-variables.yml
-    jobs:
-    - template: setup-maestro-vars.yml
-      parameters:
-        BARBuildId: ${{ parameters.BARBuildId }}
-        PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-
-    - job:
-      displayName: Publish Using Darc
-      dependsOn: setupMaestroVars
-      timeoutInMinutes: 120
-      variables:
-        - name: BARBuildId
-          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
-      pool:
-        vmImage: 'windows-2019'
-      steps:
-        - task: PowerShell@2
-          displayName: Publish Using Darc
-          inputs:
-            filePath: $(Build.SourcesDirectory)/eng/common/post-build/publish-using-darc.ps1
-            arguments: -BuildId $(BARBuildId) 
-              -PublishingInfraVersion ${{ parameters.PublishingInfraVersion }}
-              -AzdoToken '$(publishing-dnceng-devdiv-code-r-build-re)'
-              -MaestroToken '$(MaestroApiAccessToken)'
-              -WaitPublishingFinish ${{ parameters.waitPublishingFinish }}
-              -PublishInstallersAndChecksums ${{ parameters.publishInstallersAndChecksums }}
-              -ArtifactsPublishingAdditionalParameters '${{ parameters.artifactsPublishingAdditionalParameters }}'
-              -SymbolPublishingAdditionalParameters '${{ parameters.symbolPublishingAdditionalParameters }}'
-
-- ${{ if and(le(parameters.publishingInfraVersion, 2), eq(parameters.inline, 'true')) }}:
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NetCore_Dev5_Publish'
-      channelName: '.NET 5 Dev'
-      akaMSChannelName: 'net5/dev'
-      channelId: ${{ parameters.NetDev5ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NetCore_Dev6_Publish'
-      channelName: '.NET 6 Dev'
-      akaMSChannelName: 'net6/dev'
-      channelId: ${{ parameters.NetDev6ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
+- stage: publish_using_darc
+  ${{ if or(eq(parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
+    dependsOn: ${{ parameters.publishDependsOn }}
+  ${{ if and(ne(parameters.enableNugetValidation, 'true'), ne(parameters.enableSigningValidation, 'true'), ne(parameters.enableSourceLinkValidation, 'true'), ne(parameters.SDLValidationParameters.enable, 'true')) }}:
+    dependsOn: ${{ parameters.validateDependsOn }}
+  displayName: Publish using Darc
+  variables:
+    - template: common-variables.yml
+  jobs:
+  - template: setup-maestro-vars.yml
     parameters:
       BARBuildId: ${{ parameters.BARBuildId }}
       PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'Net_Eng_Latest_Publish'
-      channelName: '.NET Eng - Latest'
-      akaMSChannelName: 'eng/daily'
-      channelId: ${{ parameters.NetEngLatestChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng-symbols/nuget/v3/index.json'
 
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'Net_Eng_Validation_Publish'
-      channelName: '.NET Eng - Validation'
-      akaMSChannelName: 'eng/validation'
-      channelId: ${{ parameters.NetEngValidationChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'General_Testing_Publish'
-      channelName: 'General Testing'
-      akaMSChannelName: 'generaltesting'
-      channelId: ${{ parameters.GeneralTestingChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/general-testing/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/general-testing/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/general-testing-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_Tooling_Dev_Publishing'
-      channelName: '.NET Core Tooling Dev'
-      channelId: ${{ parameters.NETCoreToolingDevChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_Tooling_Release_Publishing'
-      channelName: '.NET Core Tooling Release'
-      channelId: ${{ parameters.NETCoreToolingReleaseChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-internal-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NET_Internal_Tooling_Publishing'
-      channelName: '.NET Internal Tooling'
-      channelId: ${{ parameters.NETInternalToolingChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet-tools-internal/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet-tools-internal/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet-tools-internal-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_Experimental_Publishing'
-      channelName: '.NET Core Experimental'
-      channelId: ${{ parameters.NETCoreExperimentalChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-experimental/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-experimental/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-experimental-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'Net_Eng_Services_Int_Publish'
-      channelName: '.NET Eng Services - Int'
-      channelId: ${{ parameters.NetEngServicesIntChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'Net_Eng_Services_Prod_Publish'
-      channelName: '.NET Eng Services - Prod'
-      channelId: ${{ parameters.NetEngServicesProdChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_SDK_314xx_Publishing'
-      channelName: '.NET Core SDK 3.1.4xx'
-      channelId: ${{ parameters.NetCoreSDK314xxChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-internal-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_SDK_314xx_Internal_Publishing'
-      channelName: '.NET Core SDK 3.1.4xx Internal'
-      channelId: ${{ parameters.NetCoreSDK314xxInternalChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal-symbols/nuget/v3/index.json' 
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_SDK_313xx_Publishing'
-      channelName: '.NET Core SDK 3.1.3xx'
-      channelId: ${{ parameters.NetCoreSDK313xxChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-internal-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'NETCore_SDK_313xx_Internal_Publishing'
-      channelName: '.NET Core SDK 3.1.3xx Internal'
-      channelId: ${{ parameters.NetCoreSDK313xxInternalChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/_packaging/dotnet3.1-internal-symbols/nuget/v3/index.json' 
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'VS16_6_Publishing'
-      channelName: 'VS 16.6'
-      channelId: ${{ parameters.VS166ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'VS16_7_Publishing'
-      channelName: 'VS 16.7'
-      channelId: ${{ parameters.VS167ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-      
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'VS16_8_Publishing'
-      channelName: 'VS 16.8'
-      channelId: ${{ parameters.VS168ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'VS_Master_Publishing'
-      channelName: 'VS Master'
-      channelId: ${{ parameters.VSMasterChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'VS_16_9_Publishing'
-      channelName: 'VS 16.9'
-      channelId: ${{ parameters.VS169ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'VS_16_10_Publishing'
-      channelName: 'VS 16.10'
-      channelId: ${{ parameters.VS1610ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools-symbols/nuget/v3/index.json'
+  - job:
+    displayName: Publish Using Darc
+    dependsOn: setupMaestroVars
+    timeoutInMinutes: 120
+    variables:
+      - name: BARBuildId
+        value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
+    pool:
+      vmImage: 'windows-2019'
+    steps:
+      - task: PowerShell@2
+        displayName: Publish Using Darc
+        inputs:
+          filePath: $(Build.SourcesDirectory)/eng/common/post-build/publish-using-darc.ps1
+          arguments: -BuildId $(BARBuildId) 
+            -PublishingInfraVersion ${{ parameters.publishingInfraVersion }}
+            -AzdoToken '$(publishing-dnceng-devdiv-code-r-build-re)'
+            -MaestroToken '$(MaestroApiAccessToken)'
+            -WaitPublishingFinish true
+            -PublishInstallersAndChecksums ${{ parameters.publishInstallersAndChecksums }}
+            -ArtifactsPublishingAdditionalParameters '${{ parameters.artifactsPublishingAdditionalParameters }}'
+            -SymbolPublishingAdditionalParameters '${{ parameters.symbolPublishingAdditionalParameters }}'
\ No newline at end of file
diff --git a/eng/dependabot/Packages.props b/eng/dependabot/Packages.props
index bafefaed906..71c5bcb38cf 100644
--- a/eng/dependabot/Packages.props
+++ b/eng/dependabot/Packages.props
@@ -12,7 +12,7 @@
     <PackageReference Update="LargeAddressAware" Version="1.0.5" />
     <PackageReference Update="Microsoft.CodeAnalysis.PublicApiAnalyzers" Version="3.3.3" />
     <PackageReference Update="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Version="15.0.36" />
-    <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="3.0.4492" />
+    <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="3.0.4496" />
     <PackageReference Update="PdbGit" Version="3.0.41" />
     <PackageReference Update="Shouldly" Version="3.0.0" />
   </ItemGroup>
diff --git a/global.json b/global.json
index 0891b280617..1e8405eddd9 100644
--- a/global.json
+++ b/global.json
@@ -5,11 +5,11 @@
   "tools": {
     "dotnet": "6.0.100",
     "vs": {
-      "version": "16.0"
+      "version": "17.0"
     }
   },
   "msbuild-sdks": {
     "Microsoft.Build.CentralPackageVersions": "2.0.1",
-    "Microsoft.DotNet.Arcade.Sdk": "6.0.0-beta.22054.3"
+    "Microsoft.DotNet.Arcade.Sdk": "6.0.0-beta.22076.8"
   }
 }
diff --git a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
index ae5401cdb00..09360ffbded 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
@@ -1062,11 +1062,7 @@ public void DefaultToolsVersion()
             }
 
             var collection = new ProjectCollection();
-#if STANDALONEBUILD
             Assert.Equal(ObjectModelHelpers.MSBuildDefaultToolsVersion, collection.DefaultToolsVersion);
-#else
-            Assert.Equal("2.0", collection.DefaultToolsVersion);
-#endif
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs b/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
index e7234395cb7..163716cb7fd 100644
--- a/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
+++ b/src/Build.UnitTests/BackEnd/CustomLogAndReturnTask.cs
@@ -26,12 +26,12 @@ public class CustomLogAndReturnTask : Task
         /// </summary>
         public override bool Execute()
         {
-            if(!string.IsNullOrEmpty(WarningCode))
+            if (!string.IsNullOrEmpty(WarningCode))
             {
                 Log.LogWarning(null, WarningCode, null, null, 0, 0, 0, 0, "Warning Logged!", null);
             }
 
-            if(!string.IsNullOrEmpty(ErrorCode))
+            if (!string.IsNullOrEmpty(ErrorCode))
             {
                 Log.LogError(null, ErrorCode, null, null, 0, 0, 0, 0, "Error Logged!", null);
             }
diff --git a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
index 2dfa5f75e58..1753fc92445 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
@@ -1900,13 +1900,13 @@ public static IBuildComponent CreateLoggingService(LoggerMode mode, int nodeId,
             /// <param name="buildEvent">Build event which was asked to be processed</param>
             internal override void ProcessLoggingEvent(object buildEvent, bool allowThrottling = false)
             {
-                if (buildEvent is BuildEventArgs)
+                if (buildEvent is BuildEventArgs buildEventArgs)
                 {
-                    _processedBuildEvent = buildEvent as BuildEventArgs;
+                    _processedBuildEvent = buildEventArgs;
                 }
-                else if (buildEvent is KeyValuePair<int, BuildEventArgs>)
+                else if (buildEvent is KeyValuePair<int, BuildEventArgs> kvp)
                 {
-                    _processedBuildEvent = ((KeyValuePair<int, BuildEventArgs>)buildEvent).Value;
+                    _processedBuildEvent = kvp.Value;
                 }
                 else
                 {
diff --git a/src/Build.UnitTests/ConsoleLogger_Tests.cs b/src/Build.UnitTests/ConsoleLogger_Tests.cs
index 2a6a823e973..ee4e63510e0 100644
--- a/src/Build.UnitTests/ConsoleLogger_Tests.cs
+++ b/src/Build.UnitTests/ConsoleLogger_Tests.cs
@@ -1433,10 +1433,10 @@ private void WriteAndValidateProperties(BaseConsoleLogger cl, SimulatedConsole s
             string prop1;
             string prop2;
             string prop3;
-            if (cl is SerialConsoleLogger)
+            if (cl is SerialConsoleLogger scl)
             {
-                var propertyList = ((SerialConsoleLogger)cl).ExtractPropertyList(properties);
-                ((SerialConsoleLogger)cl).WriteProperties(propertyList);
+                var propertyList = scl.ExtractPropertyList(properties);
+                scl.WriteProperties(propertyList);
                 prop1 = String.Format(CultureInfo.CurrentCulture, "{0,-30} = {1}", "prop1", "val1");
                 prop2 = String.Format(CultureInfo.CurrentCulture, "{0,-30} = {1}", "prop2", "val2");
                 prop3 = String.Format(CultureInfo.CurrentCulture, "{0,-30} = {1}", "pro(p3)", "va;%3b;l3");
@@ -1688,10 +1688,10 @@ private void WriteAndValidateItems(BaseConsoleLogger cl, SimulatedConsole sc, bo
             string item3spec;
             string item3metadatum = string.Empty;
 
-            if (cl is SerialConsoleLogger)
+            if (cl is SerialConsoleLogger scl)
             {
-                SortedList itemList = ((SerialConsoleLogger)cl).ExtractItemList(items);
-                ((SerialConsoleLogger)cl).WriteItems(itemList);
+                SortedList itemList = scl.ExtractItemList(items);
+                scl.WriteItems(itemList);
                 item1spec = "spec" + Environment.NewLine;
                 item2spec = "spec2" + Environment.NewLine;
                 item3spec = "(spec;3" + Environment.NewLine;
@@ -1770,10 +1770,10 @@ public void WriteItemsEmptyList()
                     cl = new ParallelConsoleLogger(LoggerVerbosity.Diagnostic, sc.Write, null, null);
                 }
 
-                if (cl is SerialConsoleLogger)
+                if (cl is SerialConsoleLogger scl)
                 {
-                    SortedList itemList = ((SerialConsoleLogger)cl).ExtractItemList(items);
-                    ((SerialConsoleLogger)cl).WriteItems(itemList);
+                    SortedList itemList = scl.ExtractItemList(items);
+                    scl.WriteItems(itemList);
                 }
                 else
                 {
diff --git a/src/Build.UnitTests/Construction/ElementLocation_Tests.cs b/src/Build.UnitTests/Construction/ElementLocation_Tests.cs
index 4f0510593ad..1c797174b5c 100644
--- a/src/Build.UnitTests/Construction/ElementLocation_Tests.cs
+++ b/src/Build.UnitTests/Construction/ElementLocation_Tests.cs
@@ -343,8 +343,6 @@ public void LocationStringsMedleyReadOnlyLoad()
             Helpers.VerifyAssertLineByLine(readWriteLoadLocations, readOnlyLoadLocations);
         }
 
-        // Without save to file, this becomes identical to SaveReadOnly4
-#if FEATURE_XML_LOADPATH
         /// <summary>
         /// Save read only fails
         /// </summary>
@@ -360,7 +358,6 @@ public void SaveReadOnly1()
             }
            );
         }
-#endif
 
         /// <summary>
         /// Save read only fails
@@ -371,17 +368,7 @@ public void SaveReadOnly1()
         public void SaveReadOnly2()
         {
             var doc = new XmlDocumentWithLocation(loadAsReadOnly: true);
-#if FEATURE_XML_LOADPATH
             doc.Load(_pathToCommonTargets);
-#else
-            using (
-                XmlReader xmlReader = XmlReader.Create(
-                    _pathToCommonTargets,
-                    new XmlReaderSettings {DtdProcessing = DtdProcessing.Ignore}))
-            {
-                doc.Load(xmlReader);
-            }
-#endif
             Assert.True(doc.IsReadOnly);
             Assert.Throws<InvalidOperationException>(() => {
                 doc.Save(new MemoryStream());
@@ -397,17 +384,7 @@ public void SaveReadOnly2()
         public void SaveReadOnly3()
         {
             var doc = new XmlDocumentWithLocation(loadAsReadOnly: true);
-#if FEATURE_XML_LOADPATH
             doc.Load(_pathToCommonTargets);
-#else
-            using (
-                XmlReader xmlReader = XmlReader.Create(
-                    _pathToCommonTargets,
-                    new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore }))
-            {
-                doc.Load(xmlReader);
-            }
-#endif
             Assert.True(doc.IsReadOnly);
             Assert.Throws<InvalidOperationException>(() =>
             {
@@ -424,17 +401,7 @@ public void SaveReadOnly3()
         public void SaveReadOnly4()
         {
             var doc = new XmlDocumentWithLocation(loadAsReadOnly: true);
-#if FEATURE_XML_LOADPATH
             doc.Load(_pathToCommonTargets);
-#else
-            using (
-                XmlReader xmlReader = XmlReader.Create(
-                    _pathToCommonTargets,
-                    new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore }))
-            {
-                doc.Load(xmlReader);
-            }
-#endif
             Assert.True(doc.IsReadOnly);
             using (XmlWriter wr = XmlWriter.Create(new FileStream(FileUtilities.GetTemporaryFile(), FileMode.Create)))
             {
@@ -457,17 +424,7 @@ private string GetLocations(string content, bool readOnly)
                 file = FileUtilities.GetTemporaryFile();
                 File.WriteAllText(file, content);
                 var doc = new XmlDocumentWithLocation(loadAsReadOnly: readOnly);
-#if FEATURE_XML_LOADPATH
                 doc.Load(file);
-#else
-                using (
-                    XmlReader xmlReader = XmlReader.Create(
-                        file,
-                        new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore }))
-                {
-                    doc.Load(xmlReader);
-                }
-#endif
                 Assert.Equal(readOnly, doc.IsReadOnly);
                 var allNodes = doc.SelectNodes("//*|//@*");
 
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 02d0df21845..7081de2d1e6 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -1571,11 +1571,9 @@ public void ExpandAllIntoStringExpectIdenticalReference()
             xmlattribute.Value = "abc123" + new Random().Next();
             string expandedString = expander.ExpandIntoStringLeaveEscaped(xmlattribute.Value, ExpanderOptions.ExpandAll, MockElementLocation.Instance);
 
-#if FEATURE_STRING_INTERN
             // Verify neither string got interned, so that this test is meaningful
             Assert.Null(string.IsInterned(xmlattribute.Value));
             Assert.Null(string.IsInterned(expandedString));
-#endif
 
             // Finally verify Expander indeed didn't create a new string.
             Assert.True(Object.ReferenceEquals(xmlattribute.Value, expandedString));
diff --git a/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs
index 948fb37e429..ab9bfe05035 100644
--- a/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs
@@ -44,26 +44,11 @@ Item group content
                 ProjectStringCache cache = new ProjectStringCache();
                 XmlDocumentWithLocation document1 = new XmlDocumentWithLocation();
                 document1.StringCache = cache;
-#if FEATURE_XML_LOADPATH
                 document1.Load(path);
-#else
-                var xmlReadSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
-                using (XmlReader xmlReader = XmlReader.Create(path, xmlReadSettings))
-                {
-                    document1.Load(xmlReader);
-                }
-#endif
 
                 XmlDocumentWithLocation document2 = new XmlDocumentWithLocation();
                 document2.StringCache = cache;
-#if FEATURE_XML_LOADPATH
                 document2.Load(path);
-#else
-                using (XmlReader xmlReader = XmlReader.Create(path, xmlReadSettings))
-                {
-                    document2.Load(xmlReader);
-                }
-#endif
 
                 XmlNodeList nodes1 = document1.GetElementsByTagName("ItemGroup");
                 XmlNodeList nodes2 = document2.GetElementsByTagName("ItemGroup");
@@ -109,26 +94,11 @@ Item group content
                 ProjectStringCache cache = new ProjectStringCache();
                 XmlDocumentWithLocation document1 = new XmlDocumentWithLocation();
                 document1.StringCache = cache;
-#if FEATURE_XML_LOADPATH
                 document1.Load(path);
-#else
-                var xmlReadSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
-                using (XmlReader xmlReader = XmlReader.Create(path, xmlReadSettings))
-                {
-                    document1.Load(xmlReader);
-                }
-#endif
 
                 XmlDocumentWithLocation document2 = new XmlDocumentWithLocation();
                 document2.StringCache = cache;
-#if FEATURE_XML_LOADPATH
                 document2.Load(path);
-#else
-                using (XmlReader xmlReader = XmlReader.Create(path, xmlReadSettings))
-                {
-                    document2.Load(xmlReader);
-                }
-#endif
 
                 string outerXml1 = document1.OuterXml;
                 string outerXml2 = document2.OuterXml;
@@ -198,15 +168,7 @@ public void RemovingFilesRemovesEntries()
                 ProjectRootElement pre1 = ProjectRootElement.Create(collection);
                 pre1.XmlDocument.StringCache = cache;
                 pre1.FullPath = path;
-#if FEATURE_XML_LOADPATH
                 pre1.XmlDocument.Load(path);
-#else
-                var xmlReadSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore };
-                using (XmlReader xmlReader = XmlReader.Create(path, xmlReadSettings))
-                {
-                    pre1.XmlDocument.Load(xmlReader);
-                }
-#endif
 
                 entryCount = cache.Count;
                 Assert.True(entryCount > 0);
@@ -214,14 +176,7 @@ public void RemovingFilesRemovesEntries()
                 ProjectRootElement pre2 = ProjectRootElement.Create(collection);
                 pre2.XmlDocument.StringCache = cache;
                 pre2.FullPath = path;
-#if FEATURE_XML_LOADPATH
                 pre2.XmlDocument.Load(path);
-#else
-                using (XmlReader xmlReader = XmlReader.Create(path, xmlReadSettings))
-                {
-                    pre2.XmlDocument.Load(xmlReader);
-                }
-#endif
 
                 // Entry count should not have changed
                 Assert.Equal(entryCount, cache.Count);
diff --git a/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs b/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
index f1ea97e5b0a..463d10fb622 100644
--- a/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
+++ b/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs
@@ -525,66 +525,19 @@ public void MatchLengthStartWithUncPatternNoShare()
         }
 
         [Fact]
-        public void UncPatternEmptyString_LegacyRegex()
+        public void PatternEmptyString_LegacyRegex()
         {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            UncPattern.IsMatch(winDirectory).ShouldBe(false);
-            UncPattern.IsMatch(unixDirectory).ShouldBe(false);
-        }
-
-        [Fact]
-        public void UncPatternEmptyString()
-        {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            FileUtilitiesRegex.IsUncPattern(winDirectory).ShouldBe(false);
-            FileUtilitiesRegex.IsUncPattern(unixDirectory).ShouldBe(false);
+            UncPattern.IsMatch(string.Empty).ShouldBeFalse();
+            StartsWithUncPattern.IsMatch(string.Empty).ShouldBeFalse();
+            StartsWithUncPattern.Match(string.Empty).Success.ShouldBeFalse();
         }
 
         [Fact]
-        public void StartWithUncPatternEmptyString_LegacyRegex()
+        public void PatternEmptyString()
         {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            StartsWithUncPattern.IsMatch(winDirectory).ShouldBe(false);
-            StartsWithUncPattern.IsMatch(unixDirectory).ShouldBe(false);
-        }
-
-        [Fact]
-        public void StartsWithUncPatternEmptyString()
-        {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            FileUtilitiesRegex.StartsWithUncPattern(winDirectory).ShouldBe(false);
-            FileUtilitiesRegex.StartsWithUncPattern(unixDirectory).ShouldBe(false);
-        }
-
-        [Fact]
-        public void MatchLengthStartWithUncPatternEmptyString_LegacyRegex()
-        {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            var match = StartsWithUncPattern.Match(winDirectory);
-            match.Success.ShouldBeFalse();
-
-            match = StartsWithUncPattern.Match(unixDirectory);
-            match.Success.ShouldBeFalse();
-        }
-
-        [Fact]
-        public void MatchLengthStartWithUncPatternEmptyString()
-        {
-            string winDirectory = string.Format("", _directoryStart);
-            string unixDirectory = string.Format("", _altDirectoryStart);
-
-            FileUtilitiesRegex.StartsWithUncPatternMatchLength(winDirectory).ShouldBe(-1);
-            FileUtilitiesRegex.StartsWithUncPatternMatchLength(unixDirectory).ShouldBe(-1);
+            FileUtilitiesRegex.IsUncPattern(string.Empty).ShouldBeFalse();
+            FileUtilitiesRegex.StartsWithUncPattern(string.Empty).ShouldBeFalse();
+            FileUtilitiesRegex.StartsWithUncPatternMatchLength(string.Empty).ShouldBe(-1);
         }
     }
 }
diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index e625517f2ea..36bab2c193a 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -278,9 +278,7 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             _nodeExeLocation = other._nodeExeLocation;
             NodeId = other.NodeId;
             _onlyLogCriticalEvents = other._onlyLogCriticalEvents;
-#if FEATURE_THREAD_PRIORITY
             BuildThreadPriority = other.BuildThreadPriority;
-#endif
             _toolsetProvider = other._toolsetProvider;
             ToolsetDefinitionLocations = other.ToolsetDefinitionLocations;
             _toolsetProvider = other._toolsetProvider;
@@ -307,14 +305,11 @@ internal BuildParameters(BuildParameters other, bool resetEnvironment = false)
             ProjectCacheDescriptor = other.ProjectCacheDescriptor;
         }
 
-#if FEATURE_THREAD_PRIORITY
         /// <summary>
         /// Gets or sets the desired thread priority for building.
         /// </summary>
         public ThreadPriority BuildThreadPriority { get; set; } = ThreadPriority.Normal;
 
-#endif
-
         /// <summary>
         /// By default if the number of processes is set to 1 we will use Asynchronous logging. However if we want to use synchronous logging when the number of cpu's is set to 1
         /// this property needs to be set to true.
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 711627b304c..07210e39621 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -289,6 +289,27 @@ protected NodeContext GetNode(string msbuildLocation, string commandLineArgs, in
                     CommunicationsUtilities.Trace("Successfully connected to created node {0} which is PID {1}", nodeId, msbuildProcess.Id);
                     return new NodeContext(nodeId, msbuildProcess, nodeStream, factory, terminateNode);
                 }
+
+                if (msbuildProcess.HasExited)
+                {
+                    if (Traits.Instance.DebugNodeCommunication)
+                    {
+                        try
+                        {
+                            CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it has exited with exit code {1}. This can indicate a crash at startup", msbuildProcess.Id, msbuildProcess.ExitCode);
+                        }
+                        catch (InvalidOperationException)
+                        {
+                            // This case is common on Windows where we called CreateProcess and the Process object
+                            // can't get the exit code.
+                            CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it has exited with unknown exit code. This can indicate a crash at startup", msbuildProcess.Id);
+                        }
+                    }
+                }
+                else
+                {
+                    CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it is still running. This can occur when two multiprocess builds run in parallel and the other one 'stole' this node", msbuildProcess.Id);
+                }
             }
 
             // We were unable to launch a node.
diff --git a/src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs b/src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs
index a831e63f427..cfd6c3a61da 100644
--- a/src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs
+++ b/src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs
@@ -85,15 +85,7 @@ public static T FactoryForDeserializingTypeWithName<T>(this ITranslator translat
                 t =>
                 {
                     ConstructorInfo constructor = null;
-#if FEATURE_TYPE_GETCONSTRUCTOR
                     constructor = type.GetConstructor(BindingFlags.Instance | BindingFlags.NonPublic, null, Type.EmptyTypes, null);
-#else
-                    constructor =
-                        type
-                            .GetTypeInfo()
-                            .GetConstructors(BindingFlags.Instance | BindingFlags.NonPublic)
-                            .FirstOrDefault(c => c.GetParameters().Length == 0);
-#endif
                     ErrorUtilities.VerifyThrowInvalidOperation(
                         constructor != null,
                         $"{typeName} must have a private parameterless constructor");
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 33f623a2965..fd9becd085c 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -1407,13 +1407,13 @@ private void RouteBuildEvent(object loggingEvent)
         {
             BuildEventArgs buildEventArgs = null;
 
-            if (loggingEvent is BuildEventArgs)
+            if (loggingEvent is BuildEventArgs bea)
             {
-                buildEventArgs = (BuildEventArgs)loggingEvent;
+                buildEventArgs = bea;
             }
-            else if (loggingEvent is KeyValuePair<int, BuildEventArgs>)
+            else if (loggingEvent is KeyValuePair<int, BuildEventArgs> kvp)
             {
-                buildEventArgs = ((KeyValuePair<int, BuildEventArgs>)loggingEvent).Value;
+                buildEventArgs = kvp.Value;
             }
             else
             {
@@ -1475,13 +1475,13 @@ private void RouteBuildEvent(object loggingEvent)
                 _warningsAsMessagesByProject?.Remove(GetWarningsAsErrorOrMessageKey(projectFinishedEvent));
             }
 
-            if (loggingEvent is BuildEventArgs)
+            if (loggingEvent is BuildEventArgs loggingEventBuildArgs)
             {
-                RouteBuildEvent((BuildEventArgs)loggingEvent);
+                RouteBuildEvent(loggingEventBuildArgs);
             }
-            else if (loggingEvent is KeyValuePair<int, BuildEventArgs>)
+            else if (loggingEvent is KeyValuePair<int, BuildEventArgs> loggingEventKeyValuePair)
             {
-                RouteBuildEvent((KeyValuePair<int, BuildEventArgs>)loggingEvent);
+                RouteBuildEvent(loggingEventKeyValuePair);
             }
         }
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 328bb76db85..b8d7794cbef 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -714,9 +714,7 @@ private void SetCommonWorkerThreadParameters()
             CultureInfo.CurrentCulture = _componentHost.BuildParameters.Culture;
             CultureInfo.CurrentUICulture = _componentHost.BuildParameters.UICulture;
 
-#if FEATURE_THREAD_PRIORITY
             Thread.CurrentThread.Priority = _componentHost.BuildParameters.BuildThreadPriority;
-#endif
             Thread.CurrentThread.IsBackground = true;
 
             // NOTE: This is safe to do because we have specified long-running so we get our own new thread.
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
index dde1f2f56de..49a849c4313 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
@@ -1,4 +1,4 @@
-ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
@@ -410,13 +410,6 @@ internal List<TargetSpecification> GetDependencies(ProjectLoggingContext project
         /// </summary>
         internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry requestEntry, ProjectLoggingContext projectLoggingContext, CancellationToken cancellationToken)
         {
-#if MSBUILDENABLEVSPROFILING 
-            try
-            {
-                string beginTargetBuild = String.Format(CultureInfo.CurrentCulture, "Build Target {0} in Project {1} - Start", this.Name, projectFullPath);
-                DataCollection.CommentMarkProfile(8800, beginTargetBuild);
-#endif 
-
             try
             {
                 VerifyState(_state, TargetEntryState.Execution);
@@ -668,14 +661,6 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re
             {
                 _isExecuting = false;
             }
-#if MSBUILDENABLEVSPROFILING 
-            }
-            finally
-            {
-                string endTargetBuild = String.Format(CultureInfo.CurrentCulture, "Build Target {0} in Project {1} - End", this.Name, projectFullPath);
-                DataCollection.CommentMarkProfile(8801, endTargetBuild);
-            }
-#endif
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index e60a7f4b146..fc7de19ac50 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -704,7 +704,7 @@ private ICollection<string> WarningsAsErrors
             get
             {
                 // Test compatibility
-                if(_taskLoggingContext == null)
+                if (_taskLoggingContext == null)
                 {
                     return null;
                 }
diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index bd3661c89d2..cdb1553f181 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -647,11 +647,7 @@ private void Cancel()
 
             // Let the task finish now.  If cancellation worked, hopefully it finishes sooner than it would have otherwise.
             // If the task builder crashed, this could have already been disposed
-#if FEATURE_HANDLE_SAFEWAITHANDLE
             if (!_taskExecutionIdle.SafeWaitHandle.IsClosed)
-#else
-            if (!_taskExecutionIdle.GetSafeWaitHandle().IsClosed)
-#endif
             {
                 // Kick off a task to log the message so that we don't block the calling thread.
                 Task.Run(async delegate
diff --git a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
index 7c3efec3bac..50349f0f2e8 100644
--- a/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
+++ b/src/Build/Collections/RetrievableEntryHashSet/HashSet.cs
@@ -93,8 +93,10 @@ internal class RetrievableEntryHashSet<T> : ICollection<T>,
     {
         // store lower 31 bits of hash code
         private const int Lower31BitMask = 0x7FFFFFFF;
+#if NEVER
         // cutoff point, above which we won't do stackallocs. This corresponds to 100 integers.
         private const int StackAllocThreshold = 100;
+#endif
         // when constructing a hashset from an existing collection, it may contain duplicates, 
         // so this is used as the max acceptable excess ratio of capacity to count. Note that
         // this is only used on the ctor and not to automatically shrink if the hashset has, e.g,
@@ -121,7 +123,7 @@ internal class RetrievableEntryHashSet<T> : ICollection<T>,
         // temporary variable needed during deserialization
         private SerializationInfo _siInfo;
 
-        #region Constructors
+#region Constructors
 
         public RetrievableEntryHashSet(IEqualityComparer<string> comparer)
         {
@@ -204,7 +206,7 @@ protected RetrievableEntryHashSet(SerializationInfo info, StreamingContext conte
             _siInfo = info;
         }
 
-        #endregion
+#endregion
 
         // Convenience to minimise change to callers used to dictionaries
         public ICollection<string> Keys
@@ -230,7 +232,7 @@ public ICollection<T> Values
             get { return this; }
         }
 
-        #region ICollection<T> methods
+#region ICollection<T> methods
 
         // Convenience to minimise change to callers used to dictionaries
         internal T this[string name]
@@ -481,9 +483,9 @@ internal void MakeReadOnly()
             _readOnly = true;
         }
 
-        #endregion
+#endregion
 
-        #region IEnumerable methods
+#region IEnumerable methods
 
         public Enumerator GetEnumerator()
         {
@@ -508,9 +510,9 @@ IEnumerator IEnumerable.GetEnumerator()
             return new Enumerator(this);
         }
 
-        #endregion
+#endregion
 
-        #region ISerializable methods
+#region ISerializable methods
 
         // [SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)]
         [SecurityCritical]
@@ -533,9 +535,9 @@ public virtual void GetObjectData(SerializationInfo info, StreamingContext conte
             }
         }
 
-        #endregion
+#endregion
 
-        #region IDeserializationCallback methods
+#region IDeserializationCallback methods
 
         public virtual void OnDeserialization(Object sender)
         {
@@ -580,9 +582,9 @@ public virtual void OnDeserialization(Object sender)
             _siInfo = null;
         }
 
-        #endregion
+#endregion
 
-        #region HashSet methods
+#region HashSet methods
 
         /// <summary>
         /// Add item to this HashSet. 
@@ -630,7 +632,7 @@ public void UnionWith(IEnumerable<T> other)
             }
         }
 
-#if NEVER 
+#if NEVER
                                                                                                                                                         /// <summary>
                                                                                                                                                         /// Takes the intersection of this set with other. Modifies this set.
                                                                                                                                                         /// 
@@ -1152,9 +1154,9 @@ public static IEqualityComparer<RetrievableEntryHashSet<T>> CreateSetComparer()
 #endif
 #endif
 
-        #endregion
+#endregion
 
-        #region Helper methods
+#region Helper methods
 
         /// <summary>
         /// Initializes buckets and slots arrays. Uses suggested capacity by finding next prime
@@ -1723,7 +1725,7 @@ private int InternalGetHashCode(string item)
             return _comparer.GetHashCode(item) & Lower31BitMask;
         }
 
-        #endregion
+#endregion
 
         // used for set checking operations (using enumerables) that rely on counting
         internal struct ElementCount
diff --git a/src/Build/ElementLocation/XmlDocumentWithLocation.cs b/src/Build/ElementLocation/XmlDocumentWithLocation.cs
index 68b74ac0598..9b8b04e1736 100644
--- a/src/Build/ElementLocation/XmlDocumentWithLocation.cs
+++ b/src/Build/ElementLocation/XmlDocumentWithLocation.cs
@@ -165,7 +165,6 @@ public override void Load(XmlReader reader)
             _reader = null;
         }
 
-#if FEATURE_XML_LOADPATH
         /// <summary>
         /// Grab the path to the file, for use in our location information.
         /// </summary>
@@ -180,7 +179,6 @@ public override void Load(string fullPath)
                 this.Load(xtr.Reader);
             }
         }
-#endif
 
         /// <summary>
         /// Called during load, to add an element.
@@ -281,7 +279,6 @@ public override void Save(Stream outStream)
             base.Save(outStream);
         }
 
-#if FEATURE_XML_LOADPATH
         /// <summary>
         /// Override Save to verify file was not loaded as readonly
         /// </summary>
@@ -290,7 +287,6 @@ public override void Save(string filename)
             VerifyThrowNotReadOnly();
             base.Save(filename);
         }
-#endif
 
         /// <summary>
         /// Override Save to verify file was not loaded as readonly
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 4e230f3dfcf..88d911a7b4a 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -3385,9 +3385,9 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                         // The object that we're about to call methods on may have escaped characters
                         // in it, we want to operate on the unescaped string in the function, just as we
                         // want to pass arguments that are unescaped (see below)
-                        if (objectInstance is string)
+                        if (objectInstance is string objectInstanceString)
                         {
-                            objectInstance = EscapingUtilities.UnescapeAll((string)objectInstance);
+                            objectInstance = EscapingUtilities.UnescapeAll(objectInstanceString);
                         }
                     }
 
@@ -3511,9 +3511,9 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                     // If the result of the function call is a string, then we need to escape the result
                     // so that we maintain the "engine contains escaped data" state.
                     // The exception is that the user is explicitly calling MSBuild::Unescape or MSBuild::Escape
-                    if (functionResult is string && !String.Equals("Unescape", _methodMethodName, StringComparison.OrdinalIgnoreCase) && !String.Equals("Escape", _methodMethodName, StringComparison.OrdinalIgnoreCase))
+                    if (functionResult is string functionResultString && !String.Equals("Unescape", _methodMethodName, StringComparison.OrdinalIgnoreCase) && !String.Equals("Escape", _methodMethodName, StringComparison.OrdinalIgnoreCase))
                     {
-                        functionResult = EscapingUtilities.Escape((string)functionResult);
+                        functionResult = EscapingUtilities.Escape(functionResultString);
                     }
 
                     // We have nothing left to parse, so we'll return what we have
@@ -3763,9 +3763,8 @@ private bool TryExecuteWellKnownFunction(out object returnVal, object objectInst
                         }
                     }
                 }
-                else if (objectInstance is string[])
+                else if (objectInstance is string[] stringArray)
                 {
-                    string[] stringArray = (string[])objectInstance;
                     if (string.Equals(_methodMethodName, "GetValue", StringComparison.OrdinalIgnoreCase))
                     {
                         if (TryGetArg(args, out int index))
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index 94978503a36..94344843b96 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -2597,19 +2597,8 @@ private static ProjectInstance[] GenerateSolutionWrapperUsingOldOM
                         clearedVariables.Add(environmentVariable);
                     }
                 }
-#if (!STANDALONEBUILD)
-                wrapperProjectXml = Microsoft.Build.BuildEngine.SolutionWrapperProject.Generate(projectFile, toolsVersion, projectBuildEventContext);
-#else
                 wrapperProjectXml = "";
-#endif
             }
-#if (!STANDALONEBUILD)
-            catch (Microsoft.Build.BuildEngine.InvalidProjectFileException ex)
-            {
-                // Whenever calling the old engine, we must translate its exception types into ours
-                throw new InvalidProjectFileException(ex.ProjectFile, ex.LineNumber, ex.ColumnNumber, ex.EndLineNumber, ex.EndColumnNumber, ex.Message, ex.ErrorSubcategory, ex.ErrorCode, ex.HelpKeyword, ex.InnerException);
-            }
-#endif
             finally
             {
                 // Set the cleared environment variables back to what they were.
diff --git a/src/Build/Instance/ProjectTargetInstance.cs b/src/Build/Instance/ProjectTargetInstance.cs
index d485da28e85..a10cb8456fb 100644
--- a/src/Build/Instance/ProjectTargetInstance.cs
+++ b/src/Build/Instance/ProjectTargetInstance.cs
@@ -493,14 +493,12 @@ internal ProjectTargetElement ToProjectTargetElement(ProjectRootElement rootElem
 
                 foreach (ProjectTaskInstanceChild outputInstance in taskInstance.Outputs)
                 {
-                    if (outputInstance is ProjectTaskOutputItemInstance)
+                    if (outputInstance is ProjectTaskOutputItemInstance outputItemInstance)
                     {
-                        ProjectTaskOutputItemInstance outputItemInstance = outputInstance as ProjectTaskOutputItemInstance;
                         taskElement.AddOutputItem(outputItemInstance.TaskParameter, outputItemInstance.ItemType, outputItemInstance.Condition);
                     }
-                    else if (outputInstance is ProjectTaskOutputPropertyInstance)
+                    else if (outputInstance is ProjectTaskOutputPropertyInstance outputPropertyInstance)
                     {
-                        ProjectTaskOutputPropertyInstance outputPropertyInstance = outputInstance as ProjectTaskOutputPropertyInstance;
                         taskElement.AddOutputItem(outputPropertyInstance.TaskParameter, outputPropertyInstance.PropertyName, outputPropertyInstance.Condition);
                     }
                 }
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index ce29ccbed30..4132f75aa57 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -203,9 +203,9 @@ public object GetPropertyValue(TaskPropertyInfo property)
             {
                 // If we returned an exception, then we want to throw it when we 
                 // do the get.  
-                if (value is Exception)
+                if (value is Exception ex)
                 {
-                    throw (Exception)value;
+                    throw ex;
                 }
 
                 return value;
@@ -520,21 +520,21 @@ private void HandleLoggedMessage(LogMessagePacket logMessagePacket)
 
                     // "Custom events" in terms of the communications infrastructure can also be, e.g. custom error events, 
                     // in which case they need to be dealt with in the same way as their base type of event. 
-                    if (buildEvent is BuildErrorEventArgs)
+                    if (buildEvent is BuildErrorEventArgs buildErrorEventArgs)
                     {
-                        this.BuildEngine.LogErrorEvent((BuildErrorEventArgs)buildEvent);
+                        this.BuildEngine.LogErrorEvent(buildErrorEventArgs);
                     }
-                    else if (buildEvent is BuildWarningEventArgs)
+                    else if (buildEvent is BuildWarningEventArgs buildWarningEventArgs)
                     {
-                        this.BuildEngine.LogWarningEvent((BuildWarningEventArgs)buildEvent);
+                        this.BuildEngine.LogWarningEvent(buildWarningEventArgs);
                     }
-                    else if (buildEvent is BuildMessageEventArgs)
+                    else if (buildEvent is BuildMessageEventArgs buildMessageEventArgs)
                     {
-                        this.BuildEngine.LogMessageEvent((BuildMessageEventArgs)buildEvent);
+                        this.BuildEngine.LogMessageEvent(buildMessageEventArgs);
                     }
-                    else if (buildEvent is CustomBuildEventArgs)
+                    else if (buildEvent is CustomBuildEventArgs customBuildEventArgs)
                     {
-                        this.BuildEngine.LogCustomEvent((CustomBuildEventArgs)buildEvent);
+                        this.BuildEngine.LogCustomEvent(customBuildEventArgs);
                     }
                     else
                     {
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs
index 3eb9fc9f65c..bfb588a0275 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsDispatcher.cs
@@ -87,57 +87,57 @@ public class EventArgsDispatcher : IEventSource
         /// </summary>
         public void Dispatch(BuildEventArgs buildEvent)
         {
-            if (buildEvent is BuildMessageEventArgs)
+            if (buildEvent is BuildMessageEventArgs buildMessageEventArgs)
             {
-                MessageRaised?.Invoke(null, (BuildMessageEventArgs)buildEvent);
+                MessageRaised?.Invoke(null, buildMessageEventArgs);
             }
-            else if (buildEvent is TaskStartedEventArgs)
+            else if (buildEvent is TaskStartedEventArgs taskStartedEventArgs)
             {
-                TaskStarted?.Invoke(null, (TaskStartedEventArgs)buildEvent);
+                TaskStarted?.Invoke(null, taskStartedEventArgs);
             }
-            else if (buildEvent is TaskFinishedEventArgs)
+            else if (buildEvent is TaskFinishedEventArgs taskFinishedEventArgs)
             {
-                TaskFinished?.Invoke(null, (TaskFinishedEventArgs)buildEvent);
+                TaskFinished?.Invoke(null, taskFinishedEventArgs);
             }
-            else if (buildEvent is TargetStartedEventArgs)
+            else if (buildEvent is TargetStartedEventArgs targetStartedEventArgs)
             {
-                TargetStarted?.Invoke(null, (TargetStartedEventArgs)buildEvent);
+                TargetStarted?.Invoke(null, targetStartedEventArgs);
             }
-            else if (buildEvent is TargetFinishedEventArgs)
+            else if (buildEvent is TargetFinishedEventArgs targetFinishedEventArgs)
             {
-                TargetFinished?.Invoke(null, (TargetFinishedEventArgs)buildEvent);
+                TargetFinished?.Invoke(null, targetFinishedEventArgs);
             }
-            else if (buildEvent is ProjectStartedEventArgs)
+            else if (buildEvent is ProjectStartedEventArgs projectStartedEventArgs)
             {
-                ProjectStarted?.Invoke(null, (ProjectStartedEventArgs)buildEvent);
+                ProjectStarted?.Invoke(null, projectStartedEventArgs);
             }
-            else if (buildEvent is ProjectFinishedEventArgs)
+            else if (buildEvent is ProjectFinishedEventArgs projectFinishedEventArgs)
             {
-                ProjectFinished?.Invoke(null, (ProjectFinishedEventArgs)buildEvent);
+                ProjectFinished?.Invoke(null, projectFinishedEventArgs);
             }
-            else if (buildEvent is BuildStartedEventArgs)
+            else if (buildEvent is BuildStartedEventArgs buildStartedEventArgs)
             {
-                BuildStarted?.Invoke(null, (BuildStartedEventArgs)buildEvent);
+                BuildStarted?.Invoke(null, buildStartedEventArgs);
             }
-            else if (buildEvent is BuildFinishedEventArgs)
+            else if (buildEvent is BuildFinishedEventArgs buildFinishedEventArgs)
             {
-                BuildFinished?.Invoke(null, (BuildFinishedEventArgs)buildEvent);
+                BuildFinished?.Invoke(null, buildFinishedEventArgs);
             }
-            else if (buildEvent is CustomBuildEventArgs)
+            else if (buildEvent is CustomBuildEventArgs customBuildEventArgs)
             {
-                CustomEventRaised?.Invoke(null, (CustomBuildEventArgs)buildEvent);
+                CustomEventRaised?.Invoke(null, customBuildEventArgs);
             }
-            else if (buildEvent is BuildStatusEventArgs)
+            else if (buildEvent is BuildStatusEventArgs buildStatusEventArgs)
             {
-                StatusEventRaised?.Invoke(null, (BuildStatusEventArgs)buildEvent);
+                StatusEventRaised?.Invoke(null, buildStatusEventArgs);
             }
-            else if (buildEvent is BuildWarningEventArgs)
+            else if (buildEvent is BuildWarningEventArgs buildWarningEventArgs)
             {
-                WarningRaised?.Invoke(null, (BuildWarningEventArgs)buildEvent);
+                WarningRaised?.Invoke(null, buildWarningEventArgs);
             }
-            else if (buildEvent is BuildErrorEventArgs)
+            else if (buildEvent is BuildErrorEventArgs buildErrorEventArgs)
             {
-                ErrorRaised?.Invoke(null, (BuildErrorEventArgs)buildEvent);
+                ErrorRaised?.Invoke(null, buildErrorEventArgs);
             }
 
             AnyEventRaised?.Invoke(null, buildEvent);
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 373a0f364f0..d6032382d75 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -83,7 +83,6 @@ private void CheckIfOutputSupportsAlignment()
             // If forceNoAlign is set there is no point getting the console width as there will be no aligning of the text
             if (!_forceNoAlign)
             {
-#if FEATURE_CONSOLE_BUFFERWIDTH
                 if (runningWithCharacterFileType)
                 {
                     // Get the size of the console buffer so messages can be formatted to the console width
@@ -100,7 +99,6 @@ private void CheckIfOutputSupportsAlignment()
                     }
                 }
                 else
-#endif
                 {
                     _alignMessages = false;
                 }
@@ -474,13 +472,13 @@ private void ShowErrorWarningSummary(IEnumerable<BuildEventArgs> listToProcess)
                 // Print out all of the errors under the ProjectEntryPoint / target
                 foreach (BuildEventArgs errorWarningEvent in valuePair.Value)
                 {
-                    if (errorWarningEvent is BuildErrorEventArgs)
+                    if (errorWarningEvent is BuildErrorEventArgs buildErrorEventArgs)
                     {
-                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(errorWarningEvent as BuildErrorEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
+                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(buildErrorEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
                     }
-                    else if (errorWarningEvent is BuildWarningEventArgs)
+                    else if (errorWarningEvent is BuildWarningEventArgs buildWarningEventArgs)
                     {
-                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(errorWarningEvent as BuildWarningEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
+                        WriteMessageAligned("  " + EventArgsFormatting.FormatEventMessage(buildWarningEventArgs, showProjectFile, FindLogOutputProperties(errorWarningEvent)), false);
                     }
                 }
                 WriteNewLine();
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index e69de29bb2d..a0b76d9caa0 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -0,0 +1,2 @@
+Microsoft.Build.Execution.BuildParameters.BuildThreadPriority.get -> System.Threading.ThreadPriority
+Microsoft.Build.Execution.BuildParameters.BuildThreadPriority.set -> void
diff --git a/src/Build/Resources/Constants.cs b/src/Build/Resources/Constants.cs
index ba324f8851b..9ff21f01413 100644
--- a/src/Build/Resources/Constants.cs
+++ b/src/Build/Resources/Constants.cs
@@ -302,38 +302,22 @@ private static void InitializeAvailableMethods()
                         availableStaticMethods.TryAdd("System.Environment::GetLogicalDrives", environmentType);
 
 // All the following properties only have getters
-#if FEATURE_GET_COMMANDLINE
                         availableStaticMethods.TryAdd("System.Environment::CommandLine", environmentType);
-#endif
-#if FEATURE_64BIT_ENVIRONMENT_QUERY
                         availableStaticMethods.TryAdd("System.Environment::Is64BitOperatingSystem", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::Is64BitProcess", environmentType);
-#endif
 
                         availableStaticMethods.TryAdd("System.Environment::MachineName", environmentType);
-#if FEATURE_OSVERSION
                         availableStaticMethods.TryAdd("System.Environment::OSVersion", environmentType);
-#endif
                         availableStaticMethods.TryAdd("System.Environment::ProcessorCount", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::StackTrace", environmentType);
                         availableStaticMethods.TryAdd("System.Environment::SystemDirectory", environmentType);
-#if FEATURE_SYSTEMPAGESIZE
                         availableStaticMethods.TryAdd("System.Environment::SystemPageSize", environmentType);
-#endif
                         availableStaticMethods.TryAdd("System.Environment::TickCount", environmentType);
-#if FEATURE_USERDOMAINNAME
                         availableStaticMethods.TryAdd("System.Environment::UserDomainName", environmentType);
-#endif
-#if FEATURE_USERINTERACTIVE
                         availableStaticMethods.TryAdd("System.Environment::UserInteractive", environmentType);
-#endif
                         availableStaticMethods.TryAdd("System.Environment::UserName", environmentType);
-#if FEATURE_DOTNETVERSION
                         availableStaticMethods.TryAdd("System.Environment::Version", environmentType);
-#endif
-#if FEATURE_WORKINGSET
                         availableStaticMethods.TryAdd("System.Environment::WorkingSet", environmentType);
-#endif
 
                         availableStaticMethods.TryAdd("System.IO.Directory::GetDirectories", directoryType);
                         availableStaticMethods.TryAdd("System.IO.Directory::GetFiles", directoryType);
@@ -347,9 +331,7 @@ private static void InitializeAvailableMethods()
                         availableStaticMethods.TryAdd("System.IO.File::GetLastWriteTime", fileType);
                         availableStaticMethods.TryAdd("System.IO.File::ReadAllText", fileType);
 
-#if FEATURE_CULTUREINFO_GETCULTUREINFO
                         availableStaticMethods.TryAdd("System.Globalization.CultureInfo::GetCultureInfo", new Tuple<string, Type>(null, typeof(CultureInfo))); // user request
-#endif
                         availableStaticMethods.TryAdd("System.Globalization.CultureInfo::new", new Tuple<string, Type>(null, typeof(CultureInfo))); // user request
                         availableStaticMethods.TryAdd("System.Globalization.CultureInfo::CurrentUICulture", new Tuple<string, Type>(null, typeof(CultureInfo))); // user request
 
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index 4ffaeac26fa..708ffe70810 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -2153,7 +2153,7 @@ VyuÅ¾itÃ­:          PrÅ¯mÄrnÃ© vyuÅ¾itÃ­ {0}: {1:###.0}</target>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">Projekt nebyl naÄten s pÅÃ­znakem PProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index 551b2239b08..dddee5c6a65 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -2153,7 +2153,7 @@ Auslastung:          {0} Durchschnittliche Auslastung: {1:###.0}</target>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">Project wurde nicht mit dem Flag ProjectLoadSettings.RecordDuplicateButNotCircularImports geladen.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index 29a24754e88..e23302b1c50 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -2153,7 +2153,7 @@ UtilizaciÃ³n:          UtilizaciÃ³n media de {0}: {1:###.0}</target>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">El proyecto no se cargÃ³ con la marca ProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index 924210932d9..54ec9ef9bd2 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -2153,7 +2153,7 @@ UtilisationÂ :          {0} Utilisation moyenneÂ : {1:###.0}</target>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">Le projet n'a pas Ã©tÃ© chargÃ© avec l'indicateur ProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index fb452d85408..64be5427ab7 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -2153,7 +2153,7 @@ Utilizzo:          {0} Utilizzo medio: {1:###.0}</target>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">Progetto non caricato con il flag ProjectLoadSettings.RecordDuplicateButNotCircularImports.flag.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index 474c518aeac..66b995fd080 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -2153,7 +2153,7 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">ãã­ã¸ã§ã¯ãã ProjectLoadSettings.RecordDuplicateButNotCircularImports ãã©ã°ã§èª­ã¿è¾¼ã¾ãã¦ãã¾ããã</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index 425bf153ffe..ff4d1f8af9b 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -2153,7 +2153,7 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">ProjectLoadSettings.RecordDuplicateButNotCircularImports íëê·¸ì í¨ê» íë¡ì í¸ê° ë¡ëëì§ ìììµëë¤.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index 5dd33960a55..e10e8be1f9c 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -2153,7 +2153,7 @@ Wykorzystanie:          Årednie wykorzystanie {0}: {1:###.0}</target>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">Nie zaÅadowano projektu zÂ flagÄ ProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index 0b8f27890c4..c59aed5b1f1 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -2153,7 +2153,7 @@ UtilizaÃ§Ã£o:          {0} UtilizaÃ§Ã£o MÃ©dia: {1:###.0}</target>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">O projeto nÃ£o foi carregado com o sinalizador ProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index 602d7d4ec4b..057fd65607c 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -2153,7 +2153,7 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">ÐÑÐ¾ÐµÐºÑ Ð½Ðµ Ð±ÑÐ» Ð·Ð°Ð³ÑÑÐ¶ÐµÐ½ Ñ ÑÐ»Ð°Ð³Ð¾Ð¼ ProjectLoadSettings.RecordDuplicateButNotCircularImports.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 7a6e5a77c1d..e1e56d08ba5 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -2153,7 +2153,7 @@ KullanÄ±m:             {0} Ortalama KullanÄ±m: {1:###.0}</target>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">Proje, ProjectLoadSettings.RecordDuplicateButNotCircularImports bayraÄÄ±yla yÃ¼klenmedi.</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index 3ea49f74910..b70e5579c49 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -2153,7 +2153,7 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">å è½½é¡¹ç®æ¶æªä½¿ç¨ ProjectLoadSettings.RecordDuplicateButNotCircularImports æ è®°ã</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index 4ab2b4eecd5..8b4b00c4ca2 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -2153,7 +2153,7 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
       </trans-unit>
       <trans-unit id="OM_MustSetRecordDuplicateInputs">
         <source>Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</source>
-        <target state="new">Project was not loaded with the ProjectLoadSettings.RecordDuplicateButNotCircularImports flag.</target>
+        <target state="translated">å°æ¡ä¸¦æªå ProjectLoadSettings.RecordDuplicateImports ææ¨ä¸èµ·è¼å¥ã</target>
         <note />
       </trans-unit>
       <trans-unit id="OM_CannotSaveFileLoadedAsReadOnly">
diff --git a/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs b/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs
index acfe28f7bdc..557447e9cda 100644
--- a/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/FileLogger_Tests.cs
@@ -401,7 +401,7 @@ public void DistributedFileLoggerParameters()
                 }
                 finally
                 {
-                    if(Directory.Exists(Path.Combine(Environment.CurrentDirectory, "tempura")))
+                    if (Directory.Exists(Path.Combine(Environment.CurrentDirectory, "tempura")))
                     {
                         File.Delete(Path.Combine(Environment.CurrentDirectory, "tempura\\mylogfile1.log"));
                         Directory.Delete(Path.Combine(Environment.CurrentDirectory, "tempura"));
diff --git a/src/Deprecated/Engine.UnitTests/Project_Tests.cs b/src/Deprecated/Engine.UnitTests/Project_Tests.cs
index 1144ce87b6f..ad705831690 100644
--- a/src/Deprecated/Engine.UnitTests/Project_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Project_Tests.cs
@@ -4641,7 +4641,7 @@ public void MSBuildExtensionsPathDefault()
             Project myProject = new Project(myEngine);
 
             string expectedValue = null;
-            if(Environment.Is64BitOperatingSystem)
+            if (Environment.Is64BitOperatingSystem)
             {
                 expectedValue = Environment.GetEnvironmentVariable("ProgramFiles(x86)");
             }
diff --git a/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs b/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
index 9ca7eca684f..57fc959a2fc 100644
--- a/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
+++ b/src/Deprecated/Engine/Collections/CopyOnWriteHashtable.cs
@@ -174,7 +174,7 @@ public Object this[Object key]
             {
                 lock (sharedLock)
                 {
-                    if(writeableData != null)
+                    if (writeableData != null)
                     {
                         writeableData[key] = value;
                     }
diff --git a/src/Deprecated/Engine/Engine/Engine.cs b/src/Deprecated/Engine/Engine/Engine.cs
index fa138a85c81..e0bd956d1c4 100644
--- a/src/Deprecated/Engine/Engine/Engine.cs
+++ b/src/Deprecated/Engine/Engine/Engine.cs
@@ -11,13 +11,6 @@
 using System.Globalization;
 using System.Threading;
 
-#if (!STANDALONEBUILD)
-using Microsoft.Internal.Performance;
-#if MSBUILDENABLEVSPROFILING 
-using Microsoft.VisualStudio.Profiler;
-#endif
-#endif
-
 using Microsoft.Build.Framework;
 using Microsoft.Build.BuildEngine.Shared;
 
@@ -200,7 +193,7 @@ public class Engine
         // this seed is used to generate unique logger ids for each distributed logger
         private int lastUsedLoggerId;
 
-        // this boolean is true if central logging is enabled 
+        // this boolean is true if central logging is enabled
         private bool enabledCentralLogging;
 
         // The class used to observe engine operation to collect data and detect errors
@@ -212,7 +205,7 @@ public class Engine
         // Number of CPUs this engine is instantiated with
         private int numberOfCpus;
 
-        // The current directory at the time the Engine was constructed -- 
+        // The current directory at the time the Engine was constructed --
         // if msbuild.exe is hosting, this is the current directory when
         // msbuild.exe was started
         private string startupDirectory;
@@ -350,7 +343,7 @@ internal Engine
             ToolsetDefinitionLocations locations
         )
         {
-            // No need to check whether locations parameter 
+            // No need to check whether locations parameter
             // is null, because it is a value type
 
             this.startupDirectory = Environment.CurrentDirectory;
@@ -908,8 +901,8 @@ internal void AddToolset(Toolset toolset)
                 // It already exists: replace it with the new toolset
                 toolsetStateMap[toolset.ToolsVersion] = new ToolsetState(this, toolset);
 
-                // We must be sure to notify all of the loaded projects with this 
-                // tools version that they are dirty so they will later pick up any changes 
+                // We must be sure to notify all of the loaded projects with this
+                // tools version that they are dirty so they will later pick up any changes
                 // to the ToolsetState.
                 DirtyProjectsUsingToolsVersion(toolset.ToolsVersion);
             }
@@ -982,7 +975,7 @@ internal void PopulateToolsetStateMap(ToolsetDefinitionLocations locations)
                     if (pathTo20Framework == null)
                     {
                         // We have been given no default, so we want to choose 2.0, but .NET 2.0 is not installed.
-                        // In general we do not verify that MSBuildToolsPath's point to a valid location, 
+                        // In general we do not verify that MSBuildToolsPath's point to a valid location,
                         // so failing here would be inconsistent. The build might not even use this toolset.
                         // Instead, synthesize what would be the path to the .NET 2.0 install location.
                         // If the build tries to use the default toolset, the problem will be discovered then.
@@ -1126,7 +1119,7 @@ public void RegisterDistributedLogger(ILogger centralLogger, LoggerDescription f
             lastUsedLoggerId++;
             forwardingLogger.LoggerId = loggerId;
 
-            //Create and configure the local node logger 
+            //Create and configure the local node logger
             IForwardingLogger localForwardingLogger = null;
             try
             {
@@ -1136,7 +1129,7 @@ public void RegisterDistributedLogger(ILogger centralLogger, LoggerDescription f
                 {
                     InternalLoggerException.Throw(null, null, "LoggerNotFoundError", true, forwardingLogger.Name);
                 }
-                // Configure the object 
+                // Configure the object
                 EventRedirector newRedirector = new EventRedirector(forwardingLogger.LoggerId, primaryLoggingServices);
                 localForwardingLogger.BuildEventRedirector = newRedirector;
                 localForwardingLogger.Parameters = forwardingLogger.LoggerSwitchParameters;
@@ -1163,7 +1156,7 @@ public void RegisterDistributedLogger(ILogger centralLogger, LoggerDescription f
             // Register the local forwarding logger to listen for all local events
             RegisterLoggerInternal(localForwardingLogger, eventSourceForForwarding, true);
 
-            //Register this logger's node logger with the node manager so that all 
+            //Register this logger's node logger with the node manager so that all
             //the nodes instantiate this node logger and forward the events
             nodeManager.RegisterNodeLogger(forwardingLogger);
 
@@ -1279,7 +1272,7 @@ internal void EndingEngineExecution(bool buildResult, bool exitedDueToError)
                     // Post the event to old style loggers and forwarding loggers on parent node
                     LoggingServices.LogBuildFinished(buildResult);
 
-                    // Cause the forwarding loggers to process BuildFinished event and whatever other events 
+                    // Cause the forwarding loggers to process BuildFinished event and whatever other events
                     // were in the queue (on the child the event are flushed to the level of the outofproc logging service)
                     LoggingServices.ProcessPostedLoggingEvents();
 
@@ -1296,15 +1289,15 @@ internal void EndingEngineExecution(bool buildResult, bool exitedDueToError)
                 // For each of the projects that the host has actually loaded (and holding on to),
                 // remove all projects with that same fullpath from the ProjectManager.  There are
                 // a couple of reasons for this:
-                // 1.   Because the host is hanging on to this projects, during design-time the host 
+                // 1.   Because the host is hanging on to this projects, during design-time the host
                 //      might decide to change the GlobalProperties on one of these projects.  He might
                 //      change the GlobalProperties such that they now are equivalent to the GlobalProperties
-                //      for one of the projects in the ProjectManager.  That would get weird because 
+                //      for one of the projects in the ProjectManager.  That would get weird because
                 //      we'd end up with two projects with the same fullpath and same GlobalProperties,
                 //      and we wouldn't know which one to choose (on the next build).
-                // 2.   Because the host is hanging on to the projects, it may decide to make in-memory 
+                // 2.   Because the host is hanging on to the projects, it may decide to make in-memory
                 //      changes to the project.  On next build, we need to take those changes into
-                //      account, and any instances of Project in the ProjectManager won't have those 
+                //      account, and any instances of Project in the ProjectManager won't have those
                 //      changes.
                 this.cacheOfBuildingProjects.RemoveProjects(loadedProjectFullPath);
             }
@@ -1376,7 +1369,7 @@ Project project
 
             // Host is mucking with this project.  Remove the cached versions of
             // all projects with this same full path.  Over aggressively getting rid
-            // of stuff from the cache is better than accidentally leaving crud in 
+            // of stuff from the cache is better than accidentally leaving crud in
             // there.
             UnloadProject(project, true /* Unload all versions */);
         }
@@ -1433,7 +1426,7 @@ string newFullFileName
 
                 // Host is mucking with this project.  Remove the cached versions of
                 // all projects with this same full path.  Over aggressively getting rid
-                // of stuff from the cache is better than accidentally leaving crud in 
+                // of stuff from the cache is better than accidentally leaving crud in
                 // there.
                 this.cacheOfBuildingProjects.RemoveProjects(oldFullFileName);
             }
@@ -1454,7 +1447,7 @@ string newFullFileName
 
                 // Host is mucking with this project.  Remove the cached versions of
                 // all projects with this same full path.  Over aggressively getting rid
-                // of stuff from the cache is better than accidentally leaving crud in 
+                // of stuff from the cache is better than accidentally leaving crud in
                 // there.
                 this.cacheOfBuildingProjects.RemoveProjects(newFullFileName);
             }
@@ -1463,7 +1456,7 @@ string newFullFileName
             {
                 // MSBuild projects keep track of PropertyGroups that are imported from other
                 // files.  It does this tracking by using the project file name of the imported
-                // file.  So when a project gets renamed, as is being done here, we need 
+                // file.  So when a project gets renamed, as is being done here, we need
                 // to go update all those imported PropertyGroup records with the new filename.
 
                 // Loop through every loaded project, and inform it about the newly named
@@ -1632,7 +1625,7 @@ internal BuildResult EngineBuildLoop(BuildRequest terminatingBuildRequest)
             {
                 int eventType;
 
-                // See if we have anything to do without waiting on the handles which is expensive 
+                // See if we have anything to do without waiting on the handles which is expensive
                 // for kernel mode objects.
                 if (this.engineAbortCachedValue)
                 {
@@ -1693,7 +1686,7 @@ internal BuildResult EngineBuildLoop(BuildRequest terminatingBuildRequest)
                     // Execute the command
                     engineCommand.Execute(this);
 
-                    // Don't consider node status request to be activity 
+                    // Don't consider node status request to be activity
                     if (!(engineCommand is RequestStatusEngineCommand))
                     {
                         lastLoopActivity = DateTime.Now.Ticks;
@@ -1863,14 +1856,6 @@ bool initialCall
                 SetBuildItemCurrentDirectory(project);
                 if (initialCall)
                 {
-#if (!STANDALONEBUILD)
-                    CodeMarkers.Instance.CodeMarker(CodeMarkerEvent.perfMSBuildEngineBuildProjectBegin);
-#endif
-#if MSBUILDENABLEVSPROFILING 
-                    string beginProjectBuild = String.Format(CultureInfo.CurrentCulture, "Build Project {0} Using Old OM - Start", project.FullFileName);
-                    DataCollection.CommentMarkProfile(8802, beginProjectBuild);
-#endif 
-
                     // Make sure we were passed in a project object.
                     error.VerifyThrowArgument(project != null, "MissingProject", "Project");
 
@@ -1941,13 +1926,6 @@ bool initialCall
 
                 if (buildRequest?.BuildCompleted == true || exitedDueToError)
                 {
-#if (!STANDALONEBUILD)
-                    CodeMarkers.Instance.CodeMarker(CodeMarkerEvent.perfMSBuildEngineBuildProjectEnd);
-#endif
-#if MSBUILDENABLEVSPROFILING 
-                    string endProjectBuild = String.Format(CultureInfo.CurrentCulture, "Build Project {0} Using Old OM - End", project.FullFileName);
-                    DataCollection.CommentMarkProfile(8803, endProjectBuild);
-#endif 
                 }
             }
         }
@@ -2088,7 +2066,7 @@ private void StartRootProjectBuild(BuildRequest buildRequest, Project project)
 
             if (0 == (buildRequest.BuildSettings & BuildSettings.DoNotResetPreviouslyBuiltTargets))
             {
-                // Reset the build state for all projects that are still cached from the 
+                // Reset the build state for all projects that are still cached from the
                 // last build and the currently loaded projects that we just added to
                 // the ProjectManager.
                 this.cacheOfBuildingProjects.ResetBuildStatusForAllProjects();
@@ -2353,7 +2331,7 @@ string [] toolVersions
             Hashtable[] targetOutputsWorkingCopy = new Hashtable[buildRequests.Length];
             for (int i = 0; i < buildRequests.Length; i++)
             {
-                // if the caller wants to retrieve target outputs, create a working copy to avoid clobbering 
+                // if the caller wants to retrieve target outputs, create a working copy to avoid clobbering
                 // other data in the hashtable
                 if (targetOutputsPerProject[i] != null)
                 {
@@ -2421,10 +2399,10 @@ string [] toolVersions
             {
                 // Post build finished event if the finally is not being executed due to an exception
                 EndingEngineExecution(overallResult, exitedDueToError);
-                // Reset the current directory to the value before this 
+                // Reset the current directory to the value before this
                 // project built
                 Environment.CurrentDirectory = currentDirectory;
-                // We reset the path back to the original value in case the 
+                // We reset the path back to the original value in case the
                 // host is depending on the current directory to find projects
                 Project.PerThreadProjectDirectory = currentPerThreadProjectDirectory;
             }
@@ -2452,7 +2430,7 @@ private BuildRequest CreateLocalBuildRequest(BuildEventContext buildEventContext
             buildRequest.ProjectToBuild = project;
             // Set the request build flags
             buildRequest.BuildSettings = buildFlags;
-            // Set the boolean requesting the project start/finish events 
+            // Set the boolean requesting the project start/finish events
             buildRequest.FireProjectStartedFinishedEvents = true;
             // Set the dictionary to return target outputs in, if any
             buildRequest.OutputsByTarget = targetOutputs;
@@ -2503,7 +2481,7 @@ BuildRequest buildRequest
                 ArrayList actuallyBuiltTargets;
 
                 // If the tools version is empty take a quick peek at the project file to determine if it has a tools version defined
-                if(String.IsNullOrEmpty(buildRequest.ToolsetVersion))
+                if (String.IsNullOrEmpty(buildRequest.ToolsetVersion))
                 {
                     buildRequest.ToolsetVersion = XmlUtilities.GetAttributeValueForElementFromFile(buildRequest.ProjectFileName, XMakeAttributes.project, XMakeAttributes.toolsVersion);
                     buildRequest.ToolsVersionPeekedFromProjectFile = true;
@@ -2521,7 +2499,7 @@ BuildRequest buildRequest
                 {
                     // There's no cached result: we have to build it. Figure out which node to build it on.
                     Project matchingProjectCurrentlyLoaded = null;
-                    
+
                     // See if we have a project loaded by the host already that matches the full path, in the
                     // list of projects which were loaded at the beginning of the build.
                     Project projectCurrentlyLoaded = (Project)this.projectsLoadedByHost[projectFileInfo.FullName];
@@ -2594,7 +2572,7 @@ BuildRequest buildRequest
 
                     if (evaluationNode != EngineCallback.inProcNode)
                     {
-                        // The project will be evaluated remotely so add a record 
+                        // The project will be evaluated remotely so add a record
                         // indicating where this project is being evaluated
                         if (evaluationNode != EngineCallback.parentNode)
                         {
@@ -2617,7 +2595,7 @@ BuildRequest buildRequest
                     }
                     else
                     {
-                        // Increment number of projects in progress 
+                        // Increment number of projects in progress
                         if (!buildRequest.IsGeneratedRequest)
                         {
                             IncrementProjectsInProgress();
@@ -2759,7 +2737,7 @@ bool toolsVersionPeekedFromProjectFile
                         // If a user customized his build process and is explicitly passing in Properties to the
                         // <MSBuild> task, then we would be entering this codepath for a totally legitimate
                         // scenario, so we don't want to disallow it.  We just want to know about it if it happens
-                        // to anyone before we ship, just so we can investigate to see if there may be a bug 
+                        // to anyone before we ship, just so we can investigate to see if there may be a bug
                         // somewhere.
                         if (this.projectsLoadedByHost.Count > 1)
                         {
@@ -3070,7 +3048,7 @@ internal void PostNodeStatus(int postingNodeId, NodeStatus nodeStatus)
         /// </summary>
         internal void ResetPerBuildDataStructures()
         {
-            // Reset the build state for all projects that are still cached from the 
+            // Reset the build state for all projects that are still cached from the
             // last build and the currently loaded projects that we just added to
             // the ProjectManager.
             this.cacheOfBuildingProjects.ResetBuildStatusForAllProjects();
diff --git a/src/Deprecated/Engine/Engine/EngineProxy.cs b/src/Deprecated/Engine/Engine/EngineProxy.cs
index 9ce4307122e..afc4259b5be 100644
--- a/src/Deprecated/Engine/Engine/EngineProxy.cs
+++ b/src/Deprecated/Engine/Engine/EngineProxy.cs
@@ -176,7 +176,7 @@ public void LogErrorEvent(BuildErrorEventArgs e)
             }
             else
             {
-                if(e.GetType().Equals(BuildErrorEventArgsType))
+                if (e.GetType().Equals(BuildErrorEventArgsType))
                 {
                     // We'd like to add the project file to the subcategory, but since this property
                     // is read-only on the BuildErrorEventArgs type, this requires creating a new
@@ -264,7 +264,7 @@ private static string GetUpdatedMessage(string file, string message, string pare
             }
 
             // Don't bother adding the project file path if it's already in the file part
-            if(String.Equals(file, parentProjectFullFileName, StringComparison.OrdinalIgnoreCase))
+            if (String.Equals(file, parentProjectFullFileName, StringComparison.OrdinalIgnoreCase))
             {
                 return message;
             }
diff --git a/src/Deprecated/Engine/Engine/Project.cs b/src/Deprecated/Engine/Engine/Project.cs
index fa38a06859d..45327c63a75 100644
--- a/src/Deprecated/Engine/Engine/Project.cs
+++ b/src/Deprecated/Engine/Engine/Project.cs
@@ -10,12 +10,6 @@
 using System.IO;
 using System.Text;
 using System.Globalization;
-#if (!STANDALONEBUILD)
-using Microsoft.Internal.Performance;
-#if MSBUILDENABLEVSPROFILING 
-using Microsoft.VisualStudio.Profiler;
-#endif
-#endif
 
 using Microsoft.Build.Framework;
 using Microsoft.Build.BuildEngine.Shared;
@@ -344,14 +338,6 @@ public Project
             string toolsVersion
         )
         {
-#if MSBUILDENABLEVSPROFILING 
-            try
-            {
-                DataCollection.CommentMarkProfile(8808, "Construct Project Using Old OM - Start");
-#endif 
-#if (!STANDALONEBUILD)
-            using (new CodeMarkerStartEnd(CodeMarkerEvent.perfMSBuildProjectConstructBegin, CodeMarkerEvent.perfMSBuildProjectConstructEnd))
-#endif
             {
                 if (engine == null)
                 {
@@ -438,13 +424,6 @@ string toolsVersion
                 this.GlobalProperties = this.parentEngine.GlobalProperties;
                 this.EnvironmentProperties = this.parentEngine.EnvironmentProperties;
             }
-#if MSBUILDENABLEVSPROFILING 
-            }
-            finally
-            {
-                DataCollection.CommentMarkProfile(8809, "Construct Project Using Old OM - End");
-            }
-#endif
         }
 
         /// <summary>
@@ -1779,18 +1758,11 @@ ProjectLoadSettings projectLoadSettings
             ErrorUtilities.VerifyThrowArgument(projectFileName.Length > 0, "EmptyProjectFileName");
             ErrorUtilities.VerifyThrowArgument(File.Exists(projectFileName), "ProjectFileNotFound", projectFileName);
 
-#if (!STANDALONEBUILD)
-            using (new CodeMarkerStartEnd(CodeMarkerEvent.perfMSBuildProjectLoadFromFileBegin, CodeMarkerEvent.perfMSBuildProjectLoadFromFileEnd))
-#endif
             {
                 string projectFullFileName = Path.GetFullPath(projectFileName);
 
                 try
                 {
-#if MSBUILDENABLEVSPROFILING 
-                string beginProjectLoad = String.Format(CultureInfo.CurrentCulture, "Load Project {0} Using Old OM - Start", projectFullFileName);
-                DataCollection.CommentMarkProfile(8806, beginProjectLoad);
-#endif
                     XmlDocument projectDocument = null;
                     if (IsSolutionFilename(projectFileName))
                     {
@@ -1892,9 +1864,6 @@ ProjectLoadSettings projectLoadSettings
                 {
                     // Flush the logging queue
                     ParentEngine.LoggingServices.ProcessPostedLoggingEvents();
-#if MSBUILDENABLEVSPROFILING 
-                DataCollection.CommentMarkProfile(8807, "Load Project Using Old OM - End");
-#endif
                 }
             }
         }
@@ -2116,17 +2085,7 @@ public void Save
             Encoding encoding
             )
         {
-#if (!STANDALONEBUILD)
-            using (new CodeMarkerStartEnd(CodeMarkerEvent.perfMSBuildProjectSaveToFileBegin, CodeMarkerEvent.perfMSBuildProjectSaveToFileEnd))
-#endif
-            {
-#if MSBUILDENABLEVSPROFILING 
-            try
             {
-                string beginProjectSave = String.Format(CultureInfo.CurrentCulture, "Save Project {0} Using Old OM - Start", projectFileName);
-                DataCollection.CommentMarkProfile(8810, beginProjectSave);
-#endif
-
                 // HIGHCHAR: Project.SaveToFileWithEncoding accepts encoding from caller.
                 using (ProjectWriter projectWriter = new ProjectWriter(projectFileName, encoding))
                 {
@@ -2143,14 +2102,6 @@ Encoding encoding
 
                 // reset the dirty flag
                 dirtyNeedToSaveProjectFile = false;
-#if MSBUILDENABLEVSPROFILING 
-            }
-            finally
-            {
-                string endProjectSave = String.Format(CultureInfo.CurrentCulture, "Save Project {0} Using Old OM - End", projectFileName);
-                DataCollection.CommentMarkProfile(8810, endProjectSave);
-            }
-#endif
             }
         }
 
@@ -4268,16 +4219,7 @@ internal void OnRenameOfImportedFile(string oldFileName, string newFileName)
         /// <owner>RGoel</owner>
         private void EvaluateProject(bool currentlyLoading)
         {
-#if (!STANDALONEBUILD)
-            using (new CodeMarkerStartEnd(CodeMarkerEvent.perfMSBuildProjectEvaluateBegin, CodeMarkerEvent.perfMSBuildProjectEvaluateEnd))
-#endif
             {
-#if MSBUILDENABLEVSPROFILING 
-                try
-                {
-                    string beginProjectEvaluate = String.Format(CultureInfo.CurrentCulture, "Evaluate Project {0} Using Old OM - Start", this.FullFileName);
-                    DataCollection.CommentMarkProfile(8812, beginProjectEvaluate);
-#endif
                 string currentPerThreadProjectDirectory = Project.PerThreadProjectDirectory;
 
                 try
@@ -4333,14 +4275,6 @@ private void EvaluateProject(bool currentlyLoading)
                     // host is depending on the current directory to find projects
                     Project.PerThreadProjectDirectory = currentPerThreadProjectDirectory;
                 }
-#if MSBUILDENABLEVSPROFILING 
-                }
-                finally
-                {
-                    string beginProjectEvaluate = String.Format(CultureInfo.CurrentCulture, "Evaluate Project {0} Using Old OM - End", this.FullFileName);
-                    DataCollection.CommentMarkProfile(8813, beginProjectEvaluate);
-                }
-#endif
             }
         }
 
diff --git a/src/Deprecated/Engine/Engine/TargetCollection.cs b/src/Deprecated/Engine/Engine/TargetCollection.cs
index bed5d8f9b23..3db0507014b 100644
--- a/src/Deprecated/Engine/Engine/TargetCollection.cs
+++ b/src/Deprecated/Engine/Engine/TargetCollection.cs
@@ -5,10 +5,6 @@
 using System.Xml;
 using System.Collections;
 
-#if (!STANDALONEBUILD)
-using Microsoft.Internal.Performance;
-#endif
-
 using Microsoft.Build.BuildEngine.Shared;
 
 using error = Microsoft.Build.BuildEngine.Shared.ErrorUtilities;
diff --git a/src/Deprecated/Engine/Engine/ToolsetReader.cs b/src/Deprecated/Engine/Engine/ToolsetReader.cs
index ba52d9732a2..c952cf4bb5c 100644
--- a/src/Deprecated/Engine/Engine/ToolsetReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetReader.cs
@@ -343,7 +343,7 @@ private Toolset ReadToolset(PropertyDefinition toolsVersion,
                         );
                     }
                 }
-                else if(ReservedPropertyNames.IsReservedProperty(property.Name))
+                else if (ReservedPropertyNames.IsReservedProperty(property.Name))
                 {
                     // We don't allow toolsets to define reserved properties
                     string baseMessage = ResourceUtilities.FormatResourceString("CannotModifyReservedProperty", property.Name);
diff --git a/src/Deprecated/Engine/Items/BuildItem.cs b/src/Deprecated/Engine/Items/BuildItem.cs
index 00d9a385ae0..b6f4df29c36 100644
--- a/src/Deprecated/Engine/Items/BuildItem.cs
+++ b/src/Deprecated/Engine/Items/BuildItem.cs
@@ -8,9 +8,6 @@
 using System.Collections.Generic;
 using System.IO;
 
-#if (!STANDALONEBUILD)
-using Microsoft.Internal.Performance;
-#endif
 
 using Microsoft.Build.Framework;
 using Microsoft.Build.BuildEngine.Shared;
diff --git a/src/Deprecated/Engine/Logging/ConsoleLogger.cs b/src/Deprecated/Engine/Logging/ConsoleLogger.cs
index e772b01690a..c82db95717a 100644
--- a/src/Deprecated/Engine/Logging/ConsoleLogger.cs
+++ b/src/Deprecated/Engine/Logging/ConsoleLogger.cs
@@ -137,7 +137,7 @@ private void InitializeBaseConsoleLogger()
                     consoleLogger = new ParallelConsoleLogger(verbosity, write, colorSet, colorReset);
                 }
 
-                if(!string.IsNullOrEmpty(parameters))
+                if (!string.IsNullOrEmpty(parameters))
                 {
                     consoleLogger.Parameters = parameters;
                     parameters = null;
diff --git a/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs b/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
index 7955a4fed44..5bcd93e943b 100644
--- a/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
+++ b/src/Deprecated/Engine/Logging/DistributedLoggers/DistributedFileLogger.cs
@@ -65,7 +65,7 @@ private void ApplyFileLoggerParameter(string parameterName, string parameterValu
         {
             if (String.Equals("LOGFILE", parameterName, StringComparison.OrdinalIgnoreCase))
             {
-                if(string.IsNullOrEmpty(parameterValue))
+                if (string.IsNullOrEmpty(parameterValue))
                 {
                     string message = ResourceUtilities.FormatResourceString("InvalidFileLoggerFile", string.Empty, ResourceUtilities.FormatResourceString("logfilePathNullOrEmpty"));
                     throw new LoggerException(message);
diff --git a/src/Deprecated/Engine/Microsoft.Build.Engine.csproj b/src/Deprecated/Engine/Microsoft.Build.Engine.csproj
index 123a2e664f5..051c7517343 100644
--- a/src/Deprecated/Engine/Microsoft.Build.Engine.csproj
+++ b/src/Deprecated/Engine/Microsoft.Build.Engine.csproj
@@ -8,7 +8,6 @@
     <AdditionalTlbExpAsmPaths>$(XMakeRefPath)</AdditionalTlbExpAsmPaths>
     <PublishTlbPath>$(XMakeRefPath)</PublishTlbPath>
     <GenerateAssemblyRefs>true</GenerateAssemblyRefs>
-    <DefineConstants Condition="'$(MSBUILDENABLEVSPROFILING)' != ''">$(DefineConstants);MSBUILDENABLEVSPROFILING</DefineConstants>
     <CopyToSuiteBin>true</CopyToSuiteBin>
     <IsPackable>true</IsPackable>
     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which contains the legacy compatibility shim for the MSBuild engine.  NOTE: This assembly is deprecated.</PackageDescription>
diff --git a/src/Deprecated/Engine/Shared/FileUtilities.cs b/src/Deprecated/Engine/Shared/FileUtilities.cs
index 929f6333d22..a86d5e08b5a 100644
--- a/src/Deprecated/Engine/Shared/FileUtilities.cs
+++ b/src/Deprecated/Engine/Shared/FileUtilities.cs
@@ -330,7 +330,7 @@ internal static string GetItemSpecModifier(string currentDirectory, string itemS
                 {
                     if (String.Equals(modifier, ItemSpecModifiers.FullPath, StringComparison.OrdinalIgnoreCase))
                     {
-                        if(currentDirectory == null)
+                        if (currentDirectory == null)
                         {
                             currentDirectory = String.Empty;
                         }
diff --git a/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs b/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
index bf0b4845cec..20c1c45cb27 100644
--- a/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
+++ b/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
@@ -401,7 +401,7 @@ private static string GenerateReferenceAssemblyDirectory(string versionPrefix)
             string programFilesReferenceAssemblyDirectory = Path.Combine(programFilesReferenceAssemblyLocation, versionPrefix);
             string referenceAssemblyDirectory = null;
 
-            if(Directory.Exists(programFilesReferenceAssemblyDirectory))
+            if (Directory.Exists(programFilesReferenceAssemblyDirectory))
             {
                 referenceAssemblyDirectory = programFilesReferenceAssemblyDirectory;
             }
diff --git a/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs b/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs
index aaa477d46f1..d8345c8d90d 100644
--- a/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs
+++ b/src/Deprecated/Engine/Shared/UnitTests/MockEngine.cs
@@ -321,7 +321,7 @@ internal void AssertLogContains(string contains)
             // If we do not contain this string than pass it to
             // MockLogger. Since MockLogger is also registered as
             // a logger it may have this string.
-            if(!upperLog.Contains
+            if (!upperLog.Contains
                 (
                     contains.ToUpperInvariant()
                 )
diff --git a/src/Directory.BeforeCommon.targets b/src/Directory.BeforeCommon.targets
index f5c22d31e89..81b11a5b4ed 100644
--- a/src/Directory.BeforeCommon.targets
+++ b/src/Directory.BeforeCommon.targets
@@ -11,41 +11,28 @@
   </PropertyGroup>
 
   <PropertyGroup>
-    <DefineConstants>$(DefineConstants);STANDALONEBUILD</DefineConstants>
-
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_DEBUG_LAUNCH</DefineConstants>
   </PropertyGroup>
 
   <PropertyGroup Condition="$(TargetFramework.StartsWith('net4')) Or $(TargetFramework.StartsWith('net3'))">
-    <DefineConstants>$(DefineConstants);FEATURE_64BIT_ENVIRONMENT_QUERY</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_APARTMENT_STATE</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_APM</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_APPDOMAIN</DefineConstants>
     <FeatureAppDomain>true</FeatureAppDomain>
-    <DefineConstants>$(DefineConstants);FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_ASPNET_COMPILER</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_ASSEMBLY_LOCATION</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_ASSEMBLY_GETENTRYASSEMBLY</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_ASSEMBLYNAME_CLONE</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_TYPE_GETCONSTRUCTOR</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_COM_INTEROP</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_COMPILED_XSL</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_COMPILE_IN_TESTS</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_CONSOLE_BUFFERWIDTH</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CONSTRAINED_EXECUTION</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_CHARSET_AUTO</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CODETASKFACTORY</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_GETCULTUREINFO</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_CULTUREINFO_GETCULTURES</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_DOTNETVERSION</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_ENCODING_DEFAULT</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_ENVIRONMENT_SYSTEMDIRECTORY</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_FILE_TRACKER</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_GAC</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_GET_COMMANDLINE</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_HANDLE_SAFEWAITHANDLE</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_HANDLEPROCESSCORRUPTEDSTATEEXCEPTIONS</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_HANDLEREF</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_HTTP_LISTENER</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_INSTALLED_MSBUILD</DefineConstants>
     <!-- Directory.GetCurrentDirectory The pre .Net 4.6.2 implementation of Directory.GetCurrentDirectory is slow and creates strings in its work. -->
@@ -53,7 +40,6 @@
     <!-- Path.GetFullPath The pre .Net 4.6.2 implementation of Path.GetFullPath is slow and creates strings in its work. -->
     <DefineConstants>$(DefineConstants);FEATURE_LEGACY_GETFULLPATH</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_NAMED_PIPE_SECURITY_CONSTRUCTOR</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_OSVERSION</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_PERFORMANCE_COUNTERS</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_PIPE_SECURITY</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_PFX_SIGNING</DefineConstants>
@@ -64,38 +50,25 @@
     <DefineConstants>$(DefineConstants);FEATURE_RESGEN</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_RESGENCACHE</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_RESOURCE_EXPOSURE</DefineConstants>
-    <!-- System.Resources.ResourceManager.GetResourceSet() method is currently only in full framework -->
-    <DefineConstants>$(DefineConstants);FEATURE_RESOURCEMANAGER_GETRESOURCESET</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_RESXREADER_LIVEDESERIALIZATION</DefineConstants>
-    <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_RTLMOVEMEMORY</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_RUN_EXE_IN_TESTS</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' == 'true'">$(DefineConstants);USE_MSBUILD_DLL_EXTN</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_SECURITY_PERMISSIONS</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_SECURITY_PRINCIPAL_WINDOWS</DefineConstants>
-    <FeatureSpecialFolders>true</FeatureSpecialFolders>
-    <DefineConstants>$(DefineConstants);FEATURE_STRING_INTERN</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_STRONG_NAMES</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_SYSTEM_CONFIGURATION</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_SYSTEMPAGESIZE</DefineConstants>
     <FeatureSystemConfiguration>true</FeatureSystemConfiguration>
     <DefineConstants>$(DefineConstants);FEATURE_TASK_GENERATERESOURCES</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_THREAD_ABORT</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_THREAD_CULTURE</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_THREAD_PRIORITY</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_MULTIPLE_TOOLSETS</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_NODE_REUSE</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_NET35_TASKHOST</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_USERINTERACTIVE</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_USERDOMAINNAME</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_XAML_TYPES</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_XAMLTASKFACTORY</DefineConstants>
     <FeatureXamlTypes>true</FeatureXamlTypes>
-    <DefineConstants>$(DefineConstants);FEATURE_XML_SOURCE_URI</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_XML_LOADPATH</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_XML_SCHEMA_VALIDATION</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_DEBUGGER</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_WIN32_REGISTRY</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_WORKINGSET</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true' and '$(TargetFrameworkVersion)' != 'v3.5' and '$(DotNetBuildFromSource)' != 'true'">$(DefineConstants);FEATURE_VISUALSTUDIOSETUP</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_MSCOREE</DefineConstants>
   </PropertyGroup>
diff --git a/src/Framework/AssemblyUtilities.cs b/src/Framework/AssemblyUtilities.cs
index 57f9c13fe4d..32948ee3d39 100644
--- a/src/Framework/AssemblyUtilities.cs
+++ b/src/Framework/AssemblyUtilities.cs
@@ -147,15 +147,7 @@ private static void Initialize()
 
         private static Assembly GetEntryAssembly()
         {
-#if FEATURE_ASSEMBLY_GETENTRYASSEMBLY
             return System.Reflection.Assembly.GetEntryAssembly();
-#else
-            var getEntryAssembly = typeof(Assembly).GetMethod("GetEntryAssembly");
-
-            FrameworkErrorUtilities.VerifyThrowInternalNull(getEntryAssembly, "Assembly does not have the method GetEntryAssembly");
-
-            return (Assembly) getEntryAssembly.Invoke(null, Array.Empty<object>());
-#endif
         }
 
 #if !FEATURE_CULTUREINFO_GETCULTURES
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 31aad3fc0f7..9c3a8dbaec5 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -55,9 +55,7 @@ internal static class NativeMethods
 
     internal static DateTime MinFileDate { get; } = DateTime.FromFileTimeUtc(0);
 
-#if FEATURE_HANDLEREF
     internal static HandleRef NullHandleRef = new HandleRef(null, IntPtr.Zero);
-#endif
 
     internal static IntPtr NullIntPtr = new IntPtr(0);
 
@@ -73,12 +71,6 @@ internal static class NativeMethods
     internal const uint WAIT_OBJECT_0 = 0x00000000;
     internal const uint WAIT_TIMEOUT = 0x00000102;
 
-#if FEATURE_CHARSET_AUTO
-    internal const CharSet AutoOrUnicode = CharSet.Auto;
-#else
-        internal const CharSet AutoOrUnicode = CharSet.Unicode;
-#endif
-
     #endregion
 
     #region Enums
@@ -253,7 +245,7 @@ protected override bool ReleaseHandle()
     /// <summary>
     /// Contains information about the current state of both physical and virtual memory, including extended memory
     /// </summary>
-    [StructLayout(LayoutKind.Sequential, CharSet = AutoOrUnicode)]
+    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
     internal class MemoryStatus
     {
         /// <summary>
@@ -1515,11 +1507,7 @@ internal static extern uint GetRequestedRuntimeInfo(String pExe,
     /// </summary>
     [DllImport(kernel32Dll, SetLastError = true, CharSet = CharSet.Unicode)]
     internal static extern int GetModuleFileName(
-#if FEATURE_HANDLEREF
             HandleRef hModule,
-#else
-            IntPtr hModule,
-#endif
             [Out] StringBuilder buffer, int length);
 
     [DllImport("kernel32.dll")]
@@ -1565,7 +1553,7 @@ internal static bool SetCurrentDirectory(string path)
     private static extern int NtQueryInformationProcess(SafeProcessHandle hProcess, PROCESSINFOCLASS pic, ref PROCESS_BASIC_INFORMATION pbi, uint cb, ref int pSize);
 
     [return: MarshalAs(UnmanagedType.Bool)]
-    [DllImport("kernel32.dll", CharSet = AutoOrUnicode, SetLastError = true)]
+    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
     private static extern bool GlobalMemoryStatusEx([In, Out] MemoryStatus lpBuffer);
 
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, BestFitMapping = false)]
@@ -1574,10 +1562,10 @@ internal static bool SetCurrentDirectory(string path)
     [DllImport("kernel32.dll", CharSet = CharSet.Unicode, BestFitMapping = false)]
     internal static extern int GetLongPathName([In] string path, [Out] StringBuilder fullpath, [In] int length);
 
-    [DllImport("kernel32.dll", CharSet = AutoOrUnicode, SetLastError = true)]
+    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
     internal static extern bool CreatePipe(out SafeFileHandle hReadPipe, out SafeFileHandle hWritePipe, SecurityAttributes lpPipeAttributes, int nSize);
 
-    [DllImport("kernel32.dll", CharSet = AutoOrUnicode, SetLastError = true)]
+    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
     internal static extern bool ReadFile(SafeFileHandle hFile, byte[] lpBuffer, uint nNumberOfBytesToRead, out uint lpNumberOfBytesRead, IntPtr lpOverlapped);
 
     /// <summary>
@@ -1594,7 +1582,7 @@ internal static bool SetCurrentDirectory(string path)
     internal const uint FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000;
     internal const uint OPEN_EXISTING = 3;
 
-    [DllImport("kernel32.dll", CharSet = AutoOrUnicode, CallingConvention = CallingConvention.StdCall,
+    [DllImport("kernel32.dll", CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall,
         SetLastError = true)]
     internal static extern SafeFileHandle CreateFile(
         string lpFileName,
@@ -1655,11 +1643,7 @@ internal static bool MsgWaitOne(this WaitHandle handle, int timeout)
         // VS needs this in order to allow the in-proc compilers to properly initialize, since they will make calls from the
         // build thread which the main thread (blocked on BuildSubmission.Execute) must service.
         int waitIndex;
-#if FEATURE_HANDLE_SAFEWAITHANDLE
         IntPtr handlePtr = handle.SafeWaitHandle.DangerousGetHandle();
-#else
-            IntPtr handlePtr = handle.GetSafeWaitHandle().DangerousGetHandle();
-#endif
         int returnValue = CoWaitForMultipleHandles(COWAIT_FLAGS.COWAIT_NONE, timeout, 1, new IntPtr[] { handlePtr }, out waitIndex);
 
         if (!(returnValue == 0 || ((uint)returnValue == RPC_S_CALLPENDING && timeout != Timeout.Infinite)))
diff --git a/src/Framework/Profiler/EvaluationLocation.cs b/src/Framework/Profiler/EvaluationLocation.cs
index fd5f57114cd..f37093e78a0 100644
--- a/src/Framework/Profiler/EvaluationLocation.cs
+++ b/src/Framework/Profiler/EvaluationLocation.cs
@@ -229,9 +229,8 @@ public EvaluationLocation WithGlob(string globDescription)
         /// <nodoc/>
         public override bool Equals(object obj)
         {
-            if (obj is EvaluationLocation)
+            if (obj is EvaluationLocation other)
             {
-                var other = (EvaluationLocation) obj;
                 return
                     Id == other.Id &&
                     ParentId == other.ParentId &&
diff --git a/src/Framework/Profiler/ProfilerResult.cs b/src/Framework/Profiler/ProfilerResult.cs
index 3e85be55367..70bd4ebed95 100644
--- a/src/Framework/Profiler/ProfilerResult.cs
+++ b/src/Framework/Profiler/ProfilerResult.cs
@@ -28,13 +28,11 @@ public ProfilerResult(IDictionary<EvaluationLocation, ProfiledLocation> profiled
         /// <inheritdoc />
         public override bool Equals(object obj)
         {
-            if (!(obj is ProfilerResult))
+            if (!(obj is ProfilerResult result))
             {
                 return false;
             }
 
-            var result = (ProfilerResult)obj;
-
             return (ProfiledLocations == result.ProfiledLocations) ||
                    (ProfiledLocations.Count == result.ProfiledLocations.Count &&
                     !ProfiledLocations.Except(result.ProfiledLocations).Any());
@@ -73,13 +71,8 @@ public ProfiledLocation(TimeSpan inclusiveTime, TimeSpan exclusiveTime, int numb
         /// <inheritdoc />
         public override bool Equals(object obj)
         {
-            if (!(obj is ProfiledLocation))
-            {
-                return false;
-            }
-
-            var location = (ProfiledLocation)obj;
-            return InclusiveTime.Equals(location.InclusiveTime) &&
+            return obj is ProfiledLocation location &&
+                   InclusiveTime.Equals(location.InclusiveTime) &&
                    ExclusiveTime.Equals(location.ExclusiveTime) &&
                    NumberOfHits == location.NumberOfHits;
         }
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index e1098e6d7e8..ccefc2aa252 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -1021,7 +1021,8 @@ public void InvalidToolsVersionErrors()
                                         graphBuildOptions: null,
                                         lowPriority: false,
                                         inputResultsCaches: null,
-                                        outputResultsCache: null
+                                        outputResultsCache: null,
+                                        commandLine: null
                         );
                 }
                 finally
@@ -1333,7 +1334,6 @@ public static IEnumerable<object[]> GetInvalidFilenames()
             yield return new object[] { $"C:\\a_path\\with{Path.GetInvalidPathChars().First()}invalid\\chars" };
         }
 
-#if FEATURE_RESOURCEMANAGER_GETRESOURCESET
         /// <summary>
         /// Verifies that help messages are correctly formed with the right width and leading spaces.
         /// </summary>
@@ -1397,7 +1397,6 @@ public void HelpMessagesAreValid()
                 }
             }
         }
-#endif
 
         /// <summary>
         /// Verifies that a switch collection has an error registered for the given command line arg.
diff --git a/src/MSBuild.UnitTests/PerfLog_Tests.cs b/src/MSBuild.UnitTests/PerfLog_Tests.cs
index 395632f29e2..a167de8abad 100644
--- a/src/MSBuild.UnitTests/PerfLog_Tests.cs
+++ b/src/MSBuild.UnitTests/PerfLog_Tests.cs
@@ -14,12 +14,6 @@ namespace Microsoft.Build.UnitTests
 {
     public class PerfLogTests
     {
-#if USE_MSBUILD_DLL_EXTN
-        private const string MSBuildExeName = "MSBuild.dll";
-#else
-        private const string MSBuildExeName = "MSBuild.exe";
-#endif
-
         private readonly ITestOutputHelper _output;
 
         public PerfLogTests(ITestOutputHelper output)
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index 23a059ab05b..d9bc14e1a6f 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -44,9 +44,6 @@ internal enum ParameterlessSwitch
             FileLogger7,
             FileLogger8,
             FileLogger9,
-#if (!STANDALONEBUILD)
-            OldOM,
-#endif
             DistributedFileLogger,
 #if DEBUG
             WaitForDebugger,
@@ -219,9 +216,6 @@ bool emptyParametersAllowed
             new ParameterlessSwitchInfo(  new string[] { "filelogger7", "fl7" },            ParameterlessSwitch.FileLogger7,           null),
             new ParameterlessSwitchInfo(  new string[] { "filelogger8", "fl8" },            ParameterlessSwitch.FileLogger8,           null),
             new ParameterlessSwitchInfo(  new string[] { "filelogger9", "fl9" },            ParameterlessSwitch.FileLogger9,           null),
-#if (!STANDALONEBUILD)
-            new ParameterlessSwitchInfo(  new string[] { "oldom" },                         ParameterlessSwitch.OldOM,                 null),
-#endif
             new ParameterlessSwitchInfo(  new string[] { "distributedfilelogger", "dfl" },  ParameterlessSwitch.DistributedFileLogger, null),
 #if DEBUG
             new ParameterlessSwitchInfo(  new string[] { "waitfordebugger", "wfd" },        ParameterlessSwitch.WaitForDebugger,       null),
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index af23490551d..49aded135a5 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -28,12 +28,6 @@
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-#if (!STANDALONEBUILD)
-using Microsoft.Internal.Performance;
-#endif
-#if MSBUILDENABLEVSPROFILING 
-using Microsoft.VisualStudio.Profiler;
-#endif
 
 using FileLogger = Microsoft.Build.Logging.FileLogger;
 using ConsoleLogger = Microsoft.Build.Logging.ConsoleLogger;
@@ -507,9 +501,7 @@ string[] commandLine
             ErrorUtilities.VerifyThrowArgumentLength(commandLine, nameof(commandLine));
 #endif
 
-#if FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION
             AppDomain.CurrentDomain.UnhandledException += ExceptionHandling.UnhandledExceptionHandler;
-#endif
 
             ExitType exitType = ExitType.Success;
 
@@ -646,50 +638,41 @@ string[] commandLine
                     }
                     else // regular build
                     {
-#if !STANDALONEBUILD
-                    if (Environment.GetEnvironmentVariable("MSBUILDOLDOM") != "1")
-#endif
-                        {
-                            // if everything checks out, and sufficient information is available to start building
-                            if (
-                                !BuildProject(
-                                    projectFile,
-                                    targets,
-                                    toolsVersion,
-                                    globalProperties,
-                                    restoreProperties,
-                                    loggers,
-                                    verbosity,
-                                    distributedLoggerRecords.ToArray(),
+                        // if everything checks out, and sufficient information is available to start building
+                        if (
+                            !BuildProject(
+                                projectFile,
+                                targets,
+                                toolsVersion,
+                                globalProperties,
+                                restoreProperties,
+                                loggers,
+                                verbosity,
+                                distributedLoggerRecords.ToArray(),
 #if FEATURE_XML_SCHEMA_VALIDATION
-                                    needToValidateProject, schemaFile,
+                                needToValidateProject, schemaFile,
 #endif
-                                    cpuCount,
-                                    enableNodeReuse,
-                                    preprocessWriter,
-                                    targetsWriter,
-                                    detailedSummary,
-                                    warningsAsErrors,
-                                    warningsAsMessages,
-                                    enableRestore,
-                                    profilerLogger,
-                                    enableProfiler,
-                                    interactive,
-                                    isolateProjects,
-                                    graphBuildOptions,
-                                    lowPriority,
-                                    inputResultsCaches,
-                                    outputResultsCache))
-                            {
-                                exitType = ExitType.BuildError;
-                            }
+                                cpuCount,
+                                enableNodeReuse,
+                                preprocessWriter,
+                                targetsWriter,
+                                detailedSummary,
+                                warningsAsErrors,
+                                warningsAsMessages,
+                                enableRestore,
+                                profilerLogger,
+                                enableProfiler,
+                                interactive,
+                                isolateProjects,
+                                graphBuildOptions,
+                                lowPriority,
+                                inputResultsCaches,
+                                outputResultsCache,
+                                commandLine
+                                ))
+                        {
+                            exitType = ExitType.BuildError;
                         }
-#if !STANDALONEBUILD
-                    else
-                    {
-                        exitType = OldOMBuildProject(exitType, projectFile, targets, toolsVersion, globalProperties, loggers, verbosity, needToValidateProject, schemaFile, cpuCount);
-                    }
-#endif
                     } // end of build
 
                     DateTime t2 = DateTime.Now;
@@ -852,35 +835,6 @@ string[] commandLine
             return exitType;
         }
 
-#if (!STANDALONEBUILD)
-        /// <summary>
-        /// Use the Orcas Engine to build the project
-        /// #############################################################################################
-        /// #### Segregated into another method to avoid loading the old Engine in the regular case. ####
-        /// #### Do not move back in to the main code path! #############################################
-        /// #############################################################################################
-        ///  We have marked this method as NoInlining because we do not want Microsoft.Build.Engine.dll to be loaded unless we really execute this code path
-        /// </summary>
-        [MethodImpl(MethodImplOptions.NoInlining)]
-        private static ExitType OldOMBuildProject(ExitType exitType, string projectFile, string[] targets, string toolsVersion, Dictionary<string, string> globalProperties, ILogger[] loggers, LoggerVerbosity verbosity, bool needToValidateProject, string schemaFile, int cpuCount)
-        {
-            // Log something to avoid confusion caused by errant environment variable sending us down here
-            Console.WriteLine(AssemblyResources.GetString("Using35Engine"));
-
-            Microsoft.Build.BuildEngine.BuildPropertyGroup oldGlobalProps = new Microsoft.Build.BuildEngine.BuildPropertyGroup();
-            // Copy over the global properties to the old OM
-            foreach (KeyValuePair<string, string> globalProp in globalProperties)
-            {
-                oldGlobalProps.SetProperty(globalProp.Key, globalProp.Value);
-            }
-
-            if (!BuildProjectWithOldOM(projectFile, targets, toolsVersion, oldGlobalProps, loggers, verbosity, null, needToValidateProject, schemaFile, cpuCount))
-            {
-                exitType = ExitType.BuildError;
-            }
-            return exitType;
-        }
-#endif
         /// <summary>
         /// Handler for when CTRL-C or CTRL-BREAK is called.
         /// CTRL-BREAK means "die immediately"
@@ -1006,7 +960,12 @@ internal static bool BuildProject
             GraphBuildOptions graphBuildOptions,
             bool lowPriority,
             string[] inputResultsCaches,
-            string outputResultsCache
+            string outputResultsCache,
+#if FEATURE_GET_COMMANDLINE
+            string commandLine
+#else
+            string[] commandLine
+#endif
         )
         {
             if (FileUtilities.IsVCProjFilename(projectFile) || FileUtilities.IsDspFilename(projectFile))
@@ -1202,14 +1161,19 @@ string outputResultsCache
 
                     BuildManager buildManager = BuildManager.DefaultBuildManager;
 
-#if MSBUILDENABLEVSPROFILING
-                    DataCollection.CommentMarkProfile(8800, "Pending Build Request from MSBuild.exe");
-#endif
                     BuildResultCode? result = null;
 
-                    var messagesToLogInBuildLoggers = Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager
-                        ? null
-                        : GetMessagesToLogInBuildLoggers();
+                    IEnumerable<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = null;
+                    if (!Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager)
+                    {
+                        var commandLineString = 
+#if FEATURE_GET_COMMANDLINE
+                            commandLine;
+#else
+                            string.Join(" ", commandLine);
+#endif
+                        messagesToLogInBuildLoggers = GetMessagesToLogInBuildLoggers(commandLineString);
+                    }
 
                     buildManager.BeginBuild(parameters, messagesToLogInBuildLoggers);
 
@@ -1355,7 +1319,7 @@ private static bool PrintTargets(string projectFile, string toolsVersion, Dictio
             }
         }
 
-        private static IEnumerable<BuildManager.DeferredBuildMessage> GetMessagesToLogInBuildLoggers()
+        private static IEnumerable<BuildManager.DeferredBuildMessage> GetMessagesToLogInBuildLoggers(string commandLineString)
         {
             return new[]
             {
@@ -1372,7 +1336,7 @@ private static bool PrintTargets(string projectFile, string toolsVersion, Dictio
                 new BuildManager.DeferredBuildMessage(
                     ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
                         "CommandLine",
-                        Environment.CommandLine),
+                        commandLineString),
                     MessageImportance.Low),
                 new BuildManager.DeferredBuildMessage(
                     ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
@@ -1455,103 +1419,21 @@ private static (BuildResultCode result, Exception exception) ExecuteRestore(stri
             return ExecuteBuild(buildManager, restoreRequest);
         }
 
-#if (!STANDALONEBUILD)
-        /// <summary>
-        /// Initializes the build engine, and starts the project build.
-        /// Uses the Whidbey/Orcas object model.
-        /// #############################################################################################
-        /// #### Segregated into another method to avoid loading the old Engine in the regular case. ####
-        /// #### Do not move back in to the main code path! #############################################
-        /// #############################################################################################
-        ///  We have marked this method as NoInlining because we do not want Microsoft.Build.Engine.dll to be loaded unless we really execute this code path
-        /// </summary>
-        /// <returns>true, if build succeeds</returns>
-        [MethodImpl(MethodImplOptions.NoInlining)]
-        private static bool BuildProjectWithOldOM(string projectFile, string[] targets, string toolsVersion, Microsoft.Build.BuildEngine.BuildPropertyGroup propertyBag, ILogger[] loggers, LoggerVerbosity verbosity, DistributedLoggerRecord[] distributedLoggerRecords, bool needToValidateProject, string schemaFile, int cpuCount)
-        {
-            string msbuildLocation = Path.GetDirectoryName(Assembly.GetAssembly(typeof(MSBuildApp)).Location);
-            string localNodeProviderParameters = "msbuildlocation=" + msbuildLocation; /*This assembly is the exe*/ ;
-
-            localNodeProviderParameters += ";nodereuse=false";
-
-            Microsoft.Build.BuildEngine.Engine engine = new Microsoft.Build.BuildEngine.Engine(propertyBag, Microsoft.Build.BuildEngine.ToolsetDefinitionLocations.ConfigurationFile | Microsoft.Build.BuildEngine.ToolsetDefinitionLocations.Registry, cpuCount, localNodeProviderParameters);
-            bool success = false;
-
-            try
-            {
-                foreach (ILogger logger in loggers)
-                {
-                    engine.RegisterLogger(logger);
-                }
 
-                // Targeted perf optimization for the case where we only have our own parallel console logger, and verbosity is quiet. In such a case
-                // we know we won't emit any messages except for errors and warnings, so the engine should not bother even logging them.
-                // If we're using the original serial console logger we can't do this, as it shows project started/finished context
-                // around errors and warnings.
-                // Telling the engine to not bother logging non-critical messages means that typically it can avoid loading any resources in the successful
-                // build case.
-                if (loggers.Length == 1 &&
-                    verbosity == LoggerVerbosity.Quiet &&
-                    loggers[0].Parameters.IndexOf("ENABLEMPLOGGING", StringComparison.OrdinalIgnoreCase) != -1 &&
-                    loggers[0].Parameters.IndexOf("DISABLEMPLOGGING", StringComparison.OrdinalIgnoreCase) == -1 &&
-                    loggers[0].Parameters.IndexOf("V=", StringComparison.OrdinalIgnoreCase) == -1 &&                // Console logger could have had a verbosity
-                    loggers[0].Parameters.IndexOf("VERBOSITY=", StringComparison.OrdinalIgnoreCase) == -1)          // override with the /clp switch
-                {
-                    // Must be exactly the console logger, not a derived type like the file logger.
-                    Type t1 = loggers[0].GetType();
-                    Type t2 = typeof(ConsoleLogger);
-                    if (t1 == t2)
-                    {
-                        engine.OnlyLogCriticalEvents = true;
-                    }
-                }
-
-                Microsoft.Build.BuildEngine.Project project = null;
-
-                try
-                {
-                    project = new Microsoft.Build.BuildEngine.Project(engine, toolsVersion);
-                }
-                catch (InvalidOperationException e)
-                {
-                    InitializationException.Throw("InvalidToolsVersionError", toolsVersion, e, false /*no stack*/);
-                }
-
-                project.IsValidated = needToValidateProject;
-                project.SchemaFile = schemaFile;
-
-                project.Load(projectFile);
-
-                success = engine.BuildProject(project, targets);
-            }
-            // handle project file errors
-            catch (InvalidProjectFileException)
-            {
-                // just eat the exception because it has already been logged
-            }
-            finally
-            {
-                // Unregister loggers and finish with engine
-                engine.Shutdown();
-            }
-            return success;
-        }
-#endif
         /// <summary>
         /// Verifies that the code is running on a supported operating system.
         /// </summary>
         private static void VerifyThrowSupportedOS()
         {
-#if FEATURE_OSVERSION
-            if (Environment.OSVersion.Platform != PlatformID.Win32NT ||
-                Environment.OSVersion.Version.Major < 6 ||
-                (Environment.OSVersion.Version.Major == 6 && Environment.OSVersion.Version.Minor < 1)) // Windows 7 is minimum
+            if (NativeMethodsShared.IsWindows &&
+                (Environment.OSVersion.Platform != PlatformID.Win32NT ||
+                 Environment.OSVersion.Version.Major < 6 ||
+                 (Environment.OSVersion.Version.Major == 6 && Environment.OSVersion.Version.Minor < 1))) // Windows 7 is minimum
             {
                 // If we're running on any of the unsupported OS's, fail immediately.  This way,
                 // we don't run into some obscure error down the line, totally confusing the user.
                 InitializationException.Throw("UnsupportedOS", null, null, false);
             }
-#endif
         }
 
         /// <summary>
@@ -2443,7 +2325,7 @@ internal static bool ProcessNodeReuseSwitch(string[] parameters)
             }
 
 #if !FEATURE_NODE_REUSE
-            if(enableNodeReuse) // Only allowed to pass False on the command line for this switch if the feature is disabled for this installation
+            if (enableNodeReuse) // Only allowed to pass False on the command line for this switch if the feature is disabled for this installation
                 CommandLineSwitchException.Throw("InvalidNodeReuseTrueValue", parameters[parameters.Length - 1]);
 #endif
 
@@ -2647,77 +2529,48 @@ private static void StartLocalNode(CommandLineSwitches commandLineSwitches)
                 CommandLineSwitchException.VerifyThrow(nodeModeNumber >= 0, "InvalidNodeNumberValueIsNegative", input[0]);
             }
 
-#if !STANDALONEBUILD
-            if (!commandLineSwitches[CommandLineSwitches.ParameterlessSwitch.OldOM])
-#endif
+            bool restart = true;
+            while (restart)
             {
-                bool restart = true;
-                while (restart)
+                Exception nodeException = null;
+                NodeEngineShutdownReason shutdownReason = NodeEngineShutdownReason.Error;
+                // normal OOP node case
+                if (nodeModeNumber == 1)
                 {
-                    Exception nodeException = null;
-                    NodeEngineShutdownReason shutdownReason = NodeEngineShutdownReason.Error;
-                    // normal OOP node case
-                    if (nodeModeNumber == 1)
-                    {
-                        OutOfProcNode node = new OutOfProcNode();
+                    OutOfProcNode node = new OutOfProcNode();
 
-                        // If FEATURE_NODE_REUSE is OFF, just validates that the switch is OK, and always returns False
-                        bool nodeReuse = ProcessNodeReuseSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.NodeReuse]);
-                        string[] lowPriorityInput = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.LowPriority];
-                        bool lowpriority = lowPriorityInput.Length > 0 && lowPriorityInput[0].Equals("true");
+                    // If FEATURE_NODE_REUSE is OFF, just validates that the switch is OK, and always returns False
+                    bool nodeReuse = ProcessNodeReuseSwitch(commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.NodeReuse]);
+                    string[] lowPriorityInput = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.LowPriority];
+                    bool lowpriority = lowPriorityInput.Length > 0 && lowPriorityInput[0].Equals("true");
 
-                        shutdownReason = node.Run(nodeReuse, lowpriority, out nodeException);
+                    shutdownReason = node.Run(nodeReuse, lowpriority, out nodeException);
 
-                        FileUtilities.ClearCacheDirectory();
-                    }
-                    else if (nodeModeNumber == 2)
-                    {
-                        OutOfProcTaskHostNode node = new OutOfProcTaskHostNode();
-                        shutdownReason = node.Run(out nodeException);
-                    }
-                    else
-                    {
-                        CommandLineSwitchException.Throw("InvalidNodeNumberValue", nodeModeNumber.ToString());
-                    }
+                    FileUtilities.ClearCacheDirectory();
+                }
+                else if (nodeModeNumber == 2)
+                {
+                    OutOfProcTaskHostNode node = new OutOfProcTaskHostNode();
+                    shutdownReason = node.Run(out nodeException);
+                }
+                else
+                {
+                    CommandLineSwitchException.Throw("InvalidNodeNumberValue", nodeModeNumber.ToString());
+                }
 
-                    if (shutdownReason == NodeEngineShutdownReason.Error)
-                    {
-                        Debug.WriteLine("An error has happened, throwing an exception");
-                        throw nodeException;
-                    }
+                if (shutdownReason == NodeEngineShutdownReason.Error)
+                {
+                    Debug.WriteLine("An error has happened, throwing an exception");
+                    throw nodeException;
+                }
 
-                    if (shutdownReason != NodeEngineShutdownReason.BuildCompleteReuse)
-                    {
-                        restart = false;
-                    }
+                if (shutdownReason != NodeEngineShutdownReason.BuildCompleteReuse)
+                {
+                    restart = false;
                 }
             }
-#if !STANDALONEBUILD
-            else
-            {
-                StartLocalNodeOldOM(nodeModeNumber);
-            }
-#endif
         }
 
-#if !STANDALONEBUILD
-        /// <summary>
-        /// Start an old-OM local node
-        /// </summary>
-        /// <remarks>
-        /// #############################################################################################
-        /// #### Segregated into another method to avoid loading the old Engine in the regular case. ####
-        /// #### Do not move back in to the main code path! #############################################
-        /// #############################################################################################
-        ///  We have marked this method as NoInlining because we do not want Microsoft.Build.Engine.dll to be loaded unless we really execute this code path
-        /// </remarks>
-        [MethodImpl(MethodImplOptions.NoInlining)]
-        private static void StartLocalNodeOldOM(int nodeNumber)
-        {
-            Microsoft.Build.BuildEngine.LocalNode.StartLocalNodeServer(nodeNumber);
-        }
-#endif
-
         /// <summary>
         /// Process the /m: switch giving the CPU count
         /// </summary>
diff --git a/src/Shared/BuildEventFileInfo.cs b/src/Shared/BuildEventFileInfo.cs
index a6e8f9108b3..ab15bb7a088 100644
--- a/src/Shared/BuildEventFileInfo.cs
+++ b/src/Shared/BuildEventFileInfo.cs
@@ -85,11 +85,7 @@ internal BuildEventFileInfo(string file, int line, int column, int endLine, int
         internal BuildEventFileInfo(XmlException e)
         {
             ErrorUtilities.VerifyThrow(e != null, "Need exception context.");
-#if FEATURE_XML_SOURCE_URI
             _file = (e.SourceUri.Length == 0) ? String.Empty : new Uri(e.SourceUri).LocalPath;
-#else
-            _file = String.Empty;
-#endif
             _line = e.LineNumber;
             _column = e.LinePosition;
             _endLine = 0;
diff --git a/src/Shared/EnvironmentUtilities.cs b/src/Shared/EnvironmentUtilities.cs
index 99f25138db0..e9e0482619f 100644
--- a/src/Shared/EnvironmentUtilities.cs
+++ b/src/Shared/EnvironmentUtilities.cs
@@ -13,11 +13,6 @@ internal static partial class EnvironmentUtilities
         public static bool Is64BitProcess => Marshal.SizeOf<IntPtr>() == 8;
 
         public static bool Is64BitOperatingSystem =>
-#if FEATURE_64BIT_ENVIRONMENT_QUERY
             Environment.Is64BitOperatingSystem;
-#else
-            RuntimeInformation.OSArchitecture == Architecture.Arm64 ||
-            RuntimeInformation.OSArchitecture == Architecture.X64;
-#endif
     }
 }
diff --git a/src/Shared/ExceptionHandling.cs b/src/Shared/ExceptionHandling.cs
index f4ebaa3bc9c..dd432c913ce 100644
--- a/src/Shared/ExceptionHandling.cs
+++ b/src/Shared/ExceptionHandling.cs
@@ -9,9 +9,7 @@ namespace Microsoft.Build.AppxPackage.Shared
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
-#if FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION
 using System.Diagnostics.CodeAnalysis;
-#endif
 using System.Globalization;
 using System.IO;
 using System.Linq;
@@ -304,7 +302,6 @@ internal static bool NotExpectedFunctionException(Exception e)
             return true;
         }
 
-#if FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION
         /// <summary>
         /// Dump any unhandled exceptions to a file so they can be diagnosed
         /// </summary>
@@ -314,7 +311,6 @@ internal static void UnhandledExceptionHandler(object sender, UnhandledException
             Exception ex = (Exception)e.ExceptionObject;
             DumpExceptionToFile(ex);
         }
-#endif
 
         /// <summary>
         /// Dump the exception information to a file
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 6a6bf071998..3d467547ad4 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -1089,27 +1089,6 @@ internal static string MakeRelative(string basePath, string path)
             return StringBuilderCache.GetStringAndRelease(sb);
         }
 
-        /// <summary>
-        /// Helper function to create an Uri object from path.
-        /// </summary>
-        /// <param name="path">path string</param>
-        /// <returns>uri object</returns>
-        private static Uri CreateUriFromPath(string path)
-        {
-            ErrorUtilities.VerifyThrowArgumentLength(path, nameof(path));
-
-            Uri pathUri;
-
-            // Try absolute first, then fall back on relative, otherwise it
-            // makes some absolute UNC paths like (\\foo\bar) relative ...
-            if (!Uri.TryCreate(path, UriKind.Absolute, out pathUri))
-            {
-                pathUri = new Uri(path, UriKind.Relative);
-            }
-
-            return pathUri;
-        }
-
         /// <summary>
         /// Normalizes the path if and only if it is longer than max path,
         /// or would be if rooted by the current directory.
diff --git a/src/Shared/FileUtilitiesRegex.cs b/src/Shared/FileUtilitiesRegex.cs
index 0c94e83cd23..de492cc69ac 100644
--- a/src/Shared/FileUtilitiesRegex.cs
+++ b/src/Shared/FileUtilitiesRegex.cs
@@ -124,7 +124,7 @@ internal static int StartsWithUncPatternMatchLength(string pattern)
                         // We get here in the case of an extra slash.
                         return -1;
                     }
-                    else if(hasShare)
+                    else if (hasShare)
                     {
                         return i;
                     }
@@ -138,7 +138,7 @@ internal static int StartsWithUncPatternMatchLength(string pattern)
                 }
             }
 
-            if(!hasShare)
+            if (!hasShare)
             {
                 // no subfolder means no unc pattern. string is something like "\\abc" in this case
                 return -1;
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index ce66179fa8c..7e592d7513d 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -141,21 +141,10 @@ internal enum LoggingEventType : int
     /// </summary>
     internal abstract class LogMessagePacketBase : INodePacket
     {
-#if FEATURE_DOTNETVERSION
         /// <summary>
         /// The packet version, which is based on the CLR version. Cached because querying Environment.Version each time becomes an allocation bottleneck.
         /// </summary>
         private static readonly int s_defaultPacketVersion = (Environment.Version.Major * 10) + Environment.Version.Minor;
-#else
-        private static readonly int s_defaultPacketVersion = GetDefaultPacketVersion();
-
-        private static int GetDefaultPacketVersion()
-        {
-            Assembly coreAssembly = typeof(object).GetTypeInfo().Assembly;
-            Version coreAssemblyVersion = coreAssembly.GetName().Version;
-            return 1000 + (coreAssemblyVersion.Major * 10) + coreAssemblyVersion.Minor;
-        }
-#endif
 
         /// <summary>
         /// Dictionary of methods used to read BuildEventArgs.
diff --git a/src/Shared/TaskLoader.cs b/src/Shared/TaskLoader.cs
index e49e0d0d041..0ab62f70203 100644
--- a/src/Shared/TaskLoader.cs
+++ b/src/Shared/TaskLoader.cs
@@ -110,10 +110,8 @@ internal static ITask CreateTask(LoadedType loadedType, string taskName, string
                             taskAppDomain.Load(loadedType.LoadedAssembly.GetName());
                         }
 
-#if FEATURE_APPDOMAIN_UNHANDLED_EXCEPTION
                         // Hook up last minute dumping of any exceptions 
                         taskAppDomain.UnhandledException += ExceptionHandling.UnhandledExceptionHandler;
-#endif
                     }
                 }
                 else
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index 4f79f3ad053..515500a98b0 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -284,11 +284,8 @@ private ITaskItem CreateNewTaskItemFrom(ITaskItem copyFrom)
                 escapedDefiningProject = copyFromAsITaskItem2.GetMetadataValueEscaped(FileUtilities.ItemSpecModifiers.DefiningProjectFullPath);
                 IDictionary nonGenericEscapedMetadata = copyFromAsITaskItem2.CloneCustomMetadataEscaped();
 
-                if (nonGenericEscapedMetadata is Dictionary<string, string>)
-                {
-                    escapedMetadata = (Dictionary<string, string>)nonGenericEscapedMetadata;
-                }
-                else
+                escapedMetadata = nonGenericEscapedMetadata as Dictionary<string, string>;
+                if (escapedMetadata is null)
                 {
                     escapedMetadata = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                     foreach (object key in nonGenericEscapedMetadata.Keys)
diff --git a/src/Shared/UnitTests/EngineTestEnvironment.cs b/src/Shared/UnitTests/EngineTestEnvironment.cs
index 393f2880db7..649d0ff35db 100644
--- a/src/Shared/UnitTests/EngineTestEnvironment.cs
+++ b/src/Shared/UnitTests/EngineTestEnvironment.cs
@@ -24,7 +24,9 @@ namespace Microsoft.Build.UnitTests
     public partial class TestEnvironment
     {
         // reset the default build manager and the state it might have accumulated from other tests
+#pragma warning disable CA1823 // Avoid unused private fields
         private object _resetBuildManager = new ResetDefaultBuildManager();
+#pragma warning restore CA1823 // Avoid unused private fields
 
         private class ResetDefaultBuildManager
         {
diff --git a/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs b/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
index cbfb268bad9..41007129e72 100644
--- a/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
+++ b/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
@@ -105,12 +105,12 @@ public override bool Execute()
 
             var writeOutput = true;
 
-            if(FileSystems.Default.FileExists(OutputAppConfigFile.ItemSpec))
+            if (FileSystems.Default.FileExists(OutputAppConfigFile.ItemSpec))
             {
                 try
                 {
                     var outputDoc = LoadAppConfig(OutputAppConfigFile);
-                    if(outputDoc.ToString() == doc.ToString())
+                    if (outputDoc.ToString() == doc.ToString())
                     {
                         writeOutput = false;
                     }
@@ -130,7 +130,7 @@ public override bool Execute()
                 OutputAppConfigFile.SetMetadata(ItemMetadataNames.targetPath, TargetName);
             }
 
-            if(writeOutput)
+            if (writeOutput)
             {
                 using (var stream = FileUtilities.OpenWrite(OutputAppConfigFile.ItemSpec, false))
                 {
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index a9ec79dc413..85a5643f5c9 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1249,9 +1249,8 @@ quiet at the engine level.
                     // Log general resolution exceptions.
                     foreach (Exception error in generalResolutionExceptions)
                     {
-                        if (error is InvalidReferenceAssemblyNameException)
+                        if (error is InvalidReferenceAssemblyNameException e)
                         {
-                            InvalidReferenceAssemblyNameException e = (InvalidReferenceAssemblyNameException)error;
                             Log.LogWarningWithCodeFromResources("General.MalformedAssemblyName", e.SourceItemSpec);
                         }
                         else
@@ -1269,9 +1268,9 @@ quiet at the engine level.
             {
                 foreach (Resolver r in dependencyTable.Resolvers)
                 {
-                    if (r is AssemblyFoldersExResolver)
+                    if (r is AssemblyFoldersExResolver assemblyFoldersExResolver)
                     {
-                        AssemblyFoldersEx assemblyFoldersEx = ((AssemblyFoldersExResolver)r).AssemblyFoldersExLocations;
+                        AssemblyFoldersEx assemblyFoldersEx = assemblyFoldersExResolver.AssemblyFoldersExLocations;
 
                         if (assemblyFoldersEx != null && _showAssemblyFoldersExLocations.TryGetValue(r.SearchPath, out messageImportance))
                         {
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index e6921de70e3..d4773311288 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -600,7 +600,7 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens
                 if (NativeMethodsShared.IsWindows)
                 {
                     commandLine.AppendSwitch("/Q"); // echo off
-                    if(!Traits.Instance.EscapeHatches.UseAutoRunWhenLaunchingProcessUnderCmd)
+                    if (!Traits.Instance.EscapeHatches.UseAutoRunWhenLaunchingProcessUnderCmd)
                     {
                         commandLine.AppendSwitch("/D"); // do not load AutoRun configuration from the registry (perf)
                     }
diff --git a/src/Tasks/GenerateManifestBase.cs b/src/Tasks/GenerateManifestBase.cs
index d4ca836cf2d..65ea58c62b0 100644
--- a/src/Tasks/GenerateManifestBase.cs
+++ b/src/Tasks/GenerateManifestBase.cs
@@ -248,9 +248,8 @@ private AssemblyIdentity CreateAssemblyIdentity(AssemblyIdentity baseIdentity, A
             }
 
             // Fixup for non-ClickOnce case...
-            if (_manifest is ApplicationManifest)
+            if (_manifest is ApplicationManifest applicationManifest)
             {
-                var applicationManifest = _manifest as ApplicationManifest;
                 if (!applicationManifest.IsClickOnceManifest)
                 {
                     // Don't need publicKeyToken attribute for non-ClickOnce case
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index 4b65c008b58..e5cb2b89c17 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -560,9 +560,9 @@ static GenerateResource()
             try
             {
                 object allowUntrustedFiles = Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\.NETFramework\SDK", "AllowProcessOfUntrustedResourceFiles", null);
-                if (allowUntrustedFiles is String)
+                if (allowUntrustedFiles is string allowUntrustedFilesString)
                 {
-                    allowMOTW = ((string)allowUntrustedFiles).Equals("true", StringComparison.OrdinalIgnoreCase);
+                    allowMOTW = allowUntrustedFilesString.Equals("true", StringComparison.OrdinalIgnoreCase);
                 }
             }
             catch { }
@@ -902,10 +902,10 @@ public override bool Execute()
                                 {
                                     foreach (ITaskItem item in _remotedTaskItems)
                                     {
-                                        if (item is MarshalByRefObject)
+                                        if (item is MarshalByRefObject marshalByRefObject)
                                         {
                                             // Tell remoting to forget connections to the taskitem
-                                            RemotingServices.Disconnect((MarshalByRefObject)item);
+                                            RemotingServices.Disconnect(marshalByRefObject);
                                         }
                                     }
                                 }
@@ -934,17 +934,7 @@ public override bool Execute()
         private static bool allowMOTW;
 
         private const string CLSID_InternetSecurityManager = "7b8a2d94-0ac9-11d1-896c-00c04fb6bfc4";
-
-        private const uint ZoneLocalMachine = 0;
-
-        private const uint ZoneIntranet = 1;
-
-        private const uint ZoneTrusted = 2;
-
         private const uint ZoneInternet = 3;
-
-        private const uint ZoneUntrusted = 4;
-
         private static IInternetSecurityManager internetSecurityManager = null;
 
         // Resources can have arbitrarily serialized objects in them which can execute arbitrary code
@@ -2618,9 +2608,8 @@ private bool ProcessFile(string inFile, string outFileOrDir)
             }
             catch (ArgumentException ae)
             {
-                if (ae.InnerException is XmlException)
+                if (ae.InnerException is XmlException xe)
                 {
-                    XmlException xe = (XmlException) ae.InnerException;
                     _logger.LogErrorWithCodeFromResources(null, FileUtilities.GetFullPathNoThrow(inFile), xe.LineNumber,
                         xe.LinePosition, 0, 0, "General.InvalidResxFile", xe.Message);
                 }
diff --git a/src/Tasks/LockCheck.cs b/src/Tasks/LockCheck.cs
index 566553eff41..fcd8a41a300 100644
--- a/src/Tasks/LockCheck.cs
+++ b/src/Tasks/LockCheck.cs
@@ -83,8 +83,6 @@ internal struct RM_UNIQUE_PROCESS
             public FILETIME ProcessStartTime;
         }
 
-        const int RM_INVALID_SESSION = -1;
-        const int RM_INVALID_PROCESS = -1;
         const int CCH_RM_MAX_APP_NAME = 255;
         const int CCH_RM_MAX_SVC_NAME = 63;
         const int ERROR_SEM_TIMEOUT = 121;
diff --git a/src/Tasks/ManifestUtil/Manifest.cs b/src/Tasks/ManifestUtil/Manifest.cs
index c60cbd61a32..0d17d52f4e4 100644
--- a/src/Tasks/ManifestUtil/Manifest.cs
+++ b/src/Tasks/ManifestUtil/Manifest.cs
@@ -759,22 +759,20 @@ public int Compare(object x, object y)
                     Debug.Fail("Comparing null objects");
                     return 0;
                 }
-                if (!(x is BaseReference) || !(y is BaseReference))
-                {
-                    Debug.Fail("Comparing objects that are not BaseReferences");
-                    return 0;
-                }
-
-                BaseReference xRef = x as BaseReference;
-                BaseReference yRef = y as BaseReference;
 
-                if (xRef.SortName == null || yRef.SortName == null)
+                if (x is BaseReference xRef && y is BaseReference yRef)
                 {
-                    Debug.Fail("Objects do not have a SortName");
-                    return 0;
+                    if (xRef.SortName == null || yRef.SortName == null)
+                    {
+                        Debug.Fail("Objects do not have a SortName");
+                        return 0;
+                    }
+
+                    return xRef.SortName.CompareTo(yRef.SortName);
                 }
 
-                return xRef.SortName.CompareTo(yRef.SortName);
+                Debug.Fail("Comparing objects that are not BaseReferences");
+                return 0;
             }
         }
 
diff --git a/src/Tasks/ManifestUtil/SecurityUtil.cs b/src/Tasks/ManifestUtil/SecurityUtil.cs
index a567076b3cb..c2469244409 100644
--- a/src/Tasks/ManifestUtil/SecurityUtil.cs
+++ b/src/Tasks/ManifestUtil/SecurityUtil.cs
@@ -58,8 +58,8 @@ public static class SecurityUtilities
 #if !RUNTIME_TYPE_NETCORE
         private const int Fx2MajorVersion = 2;
         private const int Fx3MajorVersion = 3;
-#endif
         private static readonly Version s_dotNet40Version = new Version("4.0");
+#endif
         private static readonly Version s_dotNet45Version = new Version("4.5");
 
 #if !RUNTIME_TYPE_NETCORE
@@ -659,9 +659,9 @@ private static void SignFileInternal(X509Certificate2 cert, Uri timestampUrl, st
                         }
                         var manifest = new SignedCmiManifest2(doc, useSha256);
                         CmiManifestSigner2 signer;
-                        if (useSha256 && rsa is RSACryptoServiceProvider)
+                        if (useSha256 && rsa is RSACryptoServiceProvider rsacsp)
                         {
-                            RSACryptoServiceProvider csp = SignedCmiManifest2.GetFixedRSACryptoServiceProvider(rsa as RSACryptoServiceProvider, useSha256);
+                            RSACryptoServiceProvider csp = SignedCmiManifest2.GetFixedRSACryptoServiceProvider(rsacsp, useSha256);
                             signer = new CmiManifestSigner2(csp, cert, useSha256);
                         }
                         else
diff --git a/src/Tasks/ManifestUtil/Util.cs b/src/Tasks/ManifestUtil/Util.cs
index f6715320062..4f098df2091 100644
--- a/src/Tasks/ManifestUtil/Util.cs
+++ b/src/Tasks/ManifestUtil/Util.cs
@@ -29,9 +29,10 @@ internal static class Util
         internal static readonly string logPath = GetLogPath();
         private static readonly char[] s_fileNameInvalidChars = { '\\', '/', ':', '*', '?', '"', '<', '>', '|' };
         private static StreamWriter s_logFileWriter;
+#if !RUNTIME_TYPE_NETCORE
         // Major, Minor, Build and Revision of CLR v2.0
         private static readonly int[] s_clrVersion2 = { 2, 0, 50727, 0 };
-#if RUNTIME_TYPE_NETCORE
+#else
         // Major, Minor, Build and Revision of CLR v4.0
         private static readonly int[] s_clrVersion4 = { 4, 0, 30319, 0 };
 #endif
diff --git a/src/Tasks/ManifestUtil/mansign2.cs b/src/Tasks/ManifestUtil/mansign2.cs
index 191add569e4..0f70c92a0e2 100644
--- a/src/Tasks/ManifestUtil/mansign2.cs
+++ b/src/Tasks/ManifestUtil/mansign2.cs
@@ -281,20 +281,6 @@ private void init()
 #endif
         }
 
-        private static XmlElement FindIdElement(XmlElement context, string idValue)
-        {
-            if (context == null)
-                return null;
-
-            XmlElement idReference = context.SelectSingleNode("//*[@Id=\"" + idValue + "\"]") as XmlElement;
-            if (idReference != null)
-                return idReference;
-            idReference = context.SelectSingleNode("//*[@id=\"" + idValue + "\"]") as XmlElement;
-            if (idReference != null)
-                return idReference;
-            return context.SelectSingleNode("//*[@ID=\"" + idValue + "\"]") as XmlElement;
-        }
-
         public override XmlElement GetIdElement(XmlDocument document, string idValue)
         {
             // We only care about Id references inside of the KeyInfo section
@@ -320,9 +306,6 @@ internal class SignedCmiManifest2
         private const string Sha1SignatureMethodUri = @"http://www.w3.org/2000/09/xmldsig#rsa-sha1";
         private const string Sha1DigestMethod = @"http://www.w3.org/2000/09/xmldsig#sha1";
 
-        private const string wintrustPolicyFlagsRegPath = "Software\\Microsoft\\Windows\\CurrentVersion\\WinTrust\\Trust Providers\\Software Publishing";
-        private const string wintrustPolicyFlagsRegName = "State";
-
         private SignedCmiManifest2() { }
 
         internal SignedCmiManifest2(XmlDocument manifestDom, bool useSha256)
@@ -514,8 +497,9 @@ private static void ReplacePublicKeyToken(XmlDocument manifestDom, AsymmetricAlg
 
             byte[] cspPublicKeyBlob;
 
-            if(snKey is RSACryptoServiceProvider){
-                cspPublicKeyBlob = (GetFixedRSACryptoServiceProvider((RSACryptoServiceProvider)snKey, useSha256)).ExportCspBlob(false);
+            if (snKey is RSACryptoServiceProvider rsacsp)
+            {
+                cspPublicKeyBlob = (GetFixedRSACryptoServiceProvider(rsacsp, useSha256)).ExportCspBlob(false);
                 if (cspPublicKeyBlob == null || cspPublicKeyBlob.Length == 0)
                 {
                     throw new CryptographicException(Win32.NTE_BAD_KEY);
@@ -931,9 +915,9 @@ private static void StrongNameSignManifestDom(XmlDocument manifestDom, XmlDocume
 
             // Setup up XMLDSIG engine.
             ManifestSignedXml2 signedXml = new ManifestSignedXml2(signatureParent);
-            if (signer.StrongNameKey is RSACryptoServiceProvider)
+            if (signer.StrongNameKey is RSACryptoServiceProvider rsacsp)
             {
-                signedXml.SigningKey = GetFixedRSACryptoServiceProvider(signer.StrongNameKey as RSACryptoServiceProvider, useSha256);
+                signedXml.SigningKey = GetFixedRSACryptoServiceProvider(rsacsp, useSha256);
             }
             else
             {
diff --git a/src/Tasks/NativeMethods.cs b/src/Tasks/NativeMethods.cs
index 48f3d17926a..45bc7d9faad 100644
--- a/src/Tasks/NativeMethods.cs
+++ b/src/Tasks/NativeMethods.cs
@@ -785,7 +785,9 @@ internal struct CRYPTOAPI_BLOB
         #region PInvoke
         private const string Crypt32DLL = "crypt32.dll";
         private const string Advapi32DLL = "advapi32.dll";
+#if !RUNTIME_TYPE_NETCORE
         private const string MscoreeDLL = "mscoree.dll";
+#endif
 
         //------------------------------------------------------------------------------
         // CreateHardLink
@@ -1133,9 +1135,9 @@ internal static extern int CreateAssemblyNameObject(
         [DllImport(MscoreeDLL, SetLastError = true, CharSet = CharSet.Unicode)]
         internal static extern uint GetFileVersion(String szFullPath, StringBuilder szBuffer, int cchBuffer, out uint dwLength);
 #endif
-        #endregion
+#endregion
 
-        #region Methods
+#region Methods
 #if FEATURE_HANDLEPROCESSCORRUPTEDSTATEEXCEPTIONS
         /// <summary>
         /// Given a pointer to a metadata blob, read the string parameter from it.  Returns true if
@@ -1256,8 +1258,8 @@ internal static unsafe int CorSigUncompressData(IntPtr data, out int uncompresse
 
             return count;
         }
-        #endregion
-        #region InternalClass
+#endregion
+#region InternalClass
 #if FEATURE_COM_INTEROP
         /// <summary>
         /// This class is a wrapper over the native GAC enumeration API.
@@ -1497,6 +1499,6 @@ public static string AssemblyPathFromStrongName(string strongName)
             }
         }
 #endif
-        #endregion
+#endregion
     }
 }
diff --git a/src/Tasks/ResolveKeySource.cs b/src/Tasks/ResolveKeySource.cs
index 676d5a4d249..95e3a2ecf68 100644
--- a/src/Tasks/ResolveKeySource.cs
+++ b/src/Tasks/ResolveKeySource.cs
@@ -24,7 +24,9 @@ namespace Microsoft.Build.Tasks
     public class ResolveKeySource : TaskExtension
     {
         private const string pfxFileExtension = ".pfx";
+#if !RUNTIME_TYPE_NETCORE
         private const string pfxFileContainerPrefix = "VS_KEY_";
+#endif
         
         #region Properties
 
diff --git a/src/Tasks/ResolveSDKReference.cs b/src/Tasks/ResolveSDKReference.cs
index 7331980d82e..d479f1e3206 100644
--- a/src/Tasks/ResolveSDKReference.cs
+++ b/src/Tasks/ResolveSDKReference.cs
@@ -661,16 +661,6 @@ internal class SDKReference : IEquatable<SDKReference>
             /// </summary>
             private const string X64Arch = "X64";
 
-            /// <summary>
-            /// X86 architecture name
-            /// </summary>
-            private const string X86Arch = "X86";
-
-            /// <summary>
-            /// ARM architecture name
-            /// </summary>
-            private const string ARMArch = "ARM";
-
             /// <summary>
             /// ANY CPU architecture name
             /// </summary>
diff --git a/src/Tasks/ResourceHandling/MSBuildResXReader.cs b/src/Tasks/ResourceHandling/MSBuildResXReader.cs
index f3f3d5db1ff..86dc5d50311 100644
--- a/src/Tasks/ResourceHandling/MSBuildResXReader.cs
+++ b/src/Tasks/ResourceHandling/MSBuildResXReader.cs
@@ -72,13 +72,8 @@ private static void ParseAssemblyAlias(Dictionary<string,string> aliases, XEleme
         // Consts from https://github.com/dotnet/winforms/blob/16b192389b377c647ab3d280130781ab1a9d3385/src/System.Windows.Forms/src/System/Resources/ResXResourceWriter.cs#L46-L63
         private const string Beta2CompatSerializedObjectMimeType = "text/microsoft-urt/psuedoml-serialized/base64";
         private const string CompatBinSerializedObjectMimeType = "text/microsoft-urt/binary-serialized/base64";
-        private const string CompatSoapSerializedObjectMimeType = "text/microsoft-urt/soap-serialized/base64";
         private const string BinSerializedObjectMimeType = "application/x-microsoft.net.object.binary.base64";
-        private const string SoapSerializedObjectMimeType = "application/x-microsoft.net.object.soap.base64";
-        private const string DefaultSerializedObjectMimeType = BinSerializedObjectMimeType;
         private const string ByteArraySerializedObjectMimeType = "application/x-microsoft.net.object.bytearray.base64";
-        private const string ResMimeType = "text/microsoft-resx";
-
         private const string StringTypeNamePrefix = "System.String, mscorlib,";
         private const string StringTypeName40 = "System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
         private const string MemoryStreamTypeNamePrefix = "System.IO.MemoryStream, mscorlib,";
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index ec48b416e19..9fa199f380d 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -738,7 +738,7 @@ private bool TryCompileInMemoryAssembly(IBuildEngine buildEngine, RoslynCodeTask
 
         private static string[] GetMonoLibDirs()
         {
-            if(NativeMethodsShared.IsMono)
+            if (NativeMethodsShared.IsMono)
             {
                 string monoLibDir = Path.GetDirectoryName(typeof(object).Assembly.Location);
                 string monoLibFacadesDir = Path.Combine(monoLibDir, "Facades");
diff --git a/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs b/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
index fbafeb6cf97..19501687e94 100644
--- a/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
+++ b/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
@@ -21,6 +21,7 @@ internal static string ProcessorArchitectureIntToString()
                 NativeMethodsShared.ProcessorArchitectures.X64 => ProcessorArchitecture.AMD64,
                 NativeMethodsShared.ProcessorArchitectures.IA64 => ProcessorArchitecture.IA64,
                 NativeMethodsShared.ProcessorArchitectures.ARM => ProcessorArchitecture.ARM,
+                NativeMethodsShared.ProcessorArchitectures.ARM64 => ProcessorArchitecture.ARM64,
                 // unknown architecture? return null
                 _ => null,
             };
@@ -35,6 +36,7 @@ public void ValidateProcessorArchitectureStrings()
             ProcessorArchitecture.AMD64.ShouldBe("AMD64"); // "AMD64 ProcessorArchitecture isn't correct"
             ProcessorArchitecture.MSIL.ShouldBe("MSIL"); // "MSIL ProcessorArchitecture isn't correct"
             ProcessorArchitecture.ARM.ShouldBe("ARM"); // "ARM ProcessorArchitecture isn't correct"
+            ProcessorArchitecture.ARM64.ShouldBe("ARM64"); // "ARM ProcessorArchitecture isn't correct"
         }
 
         [Fact]
@@ -55,7 +57,15 @@ public void ValidateConvertDotNetFrameworkArchitectureToProcessorArchitecture()
                     procArchitecture.ShouldBe(ProcessorArchitecture.ARM);
 
                     procArchitecture = ToolLocationHelper.ConvertDotNetFrameworkArchitectureToProcessorArchitecture(Utilities.DotNetFrameworkArchitecture.Bitness64);
-                    procArchitecture.ShouldBeNull(); // "We should not have any Bitness64 Processor architecture returned in arm"
+                    procArchitecture.ShouldBeNull();
+                    break;
+
+                case ProcessorArchitecture.ARM64:
+                    procArchitecture = ToolLocationHelper.ConvertDotNetFrameworkArchitectureToProcessorArchitecture(Utilities.DotNetFrameworkArchitecture.Bitness64);
+                    procArchitecture.ShouldBe(ProcessorArchitecture.ARM64);
+
+                    procArchitecture = ToolLocationHelper.ConvertDotNetFrameworkArchitectureToProcessorArchitecture(Utilities.DotNetFrameworkArchitecture.Bitness32);
+                    procArchitecture.ShouldBe(ProcessorArchitecture.ARM);
                     break;
 
                 case ProcessorArchitecture.X86:
diff --git a/src/Utilities/CommandLineBuilder.cs b/src/Utilities/CommandLineBuilder.cs
index e6825a190d4..4f4cb1ab3bd 100644
--- a/src/Utilities/CommandLineBuilder.cs
+++ b/src/Utilities/CommandLineBuilder.cs
@@ -220,7 +220,7 @@ protected void AppendSpaceIfNotEmpty()
                 {
                     CommandLine.Append(Environment.NewLine);
                 }
-                else if(CommandLine[CommandLine.Length - 1] != ' ')
+                else if (CommandLine[CommandLine.Length - 1] != ' ')
                 {
                     CommandLine.Append(' ');
                 }
diff --git a/src/Utilities/PlatformManifest.cs b/src/Utilities/PlatformManifest.cs
index 50cb5f42e5a..670634b4db3 100644
--- a/src/Utilities/PlatformManifest.cs
+++ b/src/Utilities/PlatformManifest.cs
@@ -135,7 +135,7 @@ private void LoadManifestFile()
                             {
                                 ApiContract.ReadContractsElement(childElement, ApiContracts);
                             }
-                            else if(ApiContract.IsVersionedContentElement(childElement.Name))
+                            else if (ApiContract.IsVersionedContentElement(childElement.Name))
                             {
                                 bool.TryParse(childElement.InnerText, out bool versionedContent);
                                 VersionedContent = versionedContent;
diff --git a/src/Utilities/ToolLocationHelper.cs b/src/Utilities/ToolLocationHelper.cs
index 875bb79b0ca..f4daea8da3a 100644
--- a/src/Utilities/ToolLocationHelper.cs
+++ b/src/Utilities/ToolLocationHelper.cs
@@ -1513,7 +1513,7 @@ public static string FindRootFolderWhereAllFilesExist(string possibleRoots, stri
                         }
                     }
 
-                    if(allFilesFound)
+                    if (allFilesFound)
                     {
                         return root;
                     }
@@ -3399,7 +3399,8 @@ internal static string ConvertDotNetFrameworkArchitectureToProcessorArchitecture
             switch (architecture)
             {
                 case DotNetFrameworkArchitecture.Bitness32:
-                    if (ProcessorArchitecture.CurrentProcessArchitecture == ProcessorArchitecture.ARM)
+                    if (ProcessorArchitecture.CurrentProcessArchitecture == ProcessorArchitecture.ARM ||
+                        ProcessorArchitecture.CurrentProcessArchitecture == ProcessorArchitecture.ARM64)
                     {
                         return ProcessorArchitecture.ARM;
                     }
@@ -3410,6 +3411,7 @@ internal static string ConvertDotNetFrameworkArchitectureToProcessorArchitecture
                     {
                         NativeMethodsShared.ProcessorArchitectures.X64 => ProcessorArchitecture.AMD64,
                         NativeMethodsShared.ProcessorArchitectures.IA64 => ProcessorArchitecture.IA64,
+                        NativeMethodsShared.ProcessorArchitectures.ARM64 => ProcessorArchitecture.ARM64,
                         // Error, OK, we're trying to get the 64-bit path on a 32-bit machine.
                         // That ... doesn't make sense. 
                         NativeMethodsShared.ProcessorArchitectures.X86 => null,
