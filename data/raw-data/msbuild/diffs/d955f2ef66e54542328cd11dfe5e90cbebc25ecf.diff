diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
index 91986ca83f6..f704ef169a1 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
@@ -389,54 +389,6 @@ public void ForceOutOfDateByDeletion()
             Utilities.AssertLogContainsResource(t2, "GenerateResource.ResourceNotFound", t2.Sources[0].ItemSpec);
         }
 
-        [Fact]
-        public void QuestionOutOfDateByDeletion()
-        {
-            var folder = _env.CreateFolder();
-            string resxFileInput = Utilities.WriteTestResX(false, null, null, _env.CreateFile(folder, ".resx").Path);
-            TaskItem stateFile = new TaskItem(_env.GetTempFile(".cache").Path);
-            ITaskItem[] sources = new ITaskItem[] { new TaskItem(resxFileInput) };
-            ITaskItem[] output;
-
-            GenerateResource t1 = Utilities.CreateTask(_output);
-            t1.Sources = sources;
-            t1.StateFile = stateFile;
-            Utilities.ExecuteTask(t1);
-            Utilities.AssertLogContainsResource(t1, "GenerateResource.OutputDoesntExist", t1.OutputResources[0].ItemSpec);
-            output = t1.OutputResources;
-
-            // Run again to ensure all files are up to date.
-            GenerateResource t2 = Utilities.CreateTask(_output);
-            t2.Sources = sources;
-            t2.StateFile = stateFile;
-            t2.FailIfNotIncremental = true;
-            Utilities.ExecuteTask(t2);
-
-            // Delete the file and verify that FailIfNotIncremental will print the missing file
-            GenerateResource t3 = Utilities.CreateTask(_output);
-            t3.StateFile = stateFile;
-            t3.Sources = sources;
-            t3.FailIfNotIncremental = true;
-
-            // Delete the output
-            File.Delete(output[0].ItemSpec);
-            t3.Execute().ShouldBeFalse();
-            Utilities.AssertLogContainsResource(t3, "GenerateResource.ProcessingFile", sources[0].ItemSpec, output[0].ItemSpec);
-
-            GenerateResource t4 = Utilities.CreateTask(_output);
-            t4.Sources = sources;
-            t4.StateFile = stateFile;
-            Utilities.ExecuteTask(t4);
-            Utilities.AssertLogContainsResource(t4, "GenerateResource.OutputDoesntExist", t4.OutputResources[0].ItemSpec);
-
-            // Run again to ensure all files are up to date.
-            GenerateResource t5 = Utilities.CreateTask(_output);
-            t5.Sources = sources;
-            t5.StateFile = stateFile;
-            t5.FailIfNotIncremental = true;
-            Utilities.ExecuteTask(t5);
-        }
-
         /// <summary>
         ///  Force out-of-date with ShouldRebuildResgenOutputFile on the linked file
         /// </summary>
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index 3f69cf4ef6c..535e0a3dd2d 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -725,16 +725,7 @@ public override bool Execute()
                 }
                 else if (FailIfNotIncremental)
                 {
-                    int maxCount = Math.Min(inputsToProcess.Count, outputsToProcess.Count);
-                    maxCount = Math.Min(maxCount, 5);  // Limit to just 5
-
-                    for (int index = 0; index < maxCount; index++)
-                    {
-                        // Log the file that would be process as an error.
-                        Log.LogErrorFromResources("GenerateResource.ProcessingFile", inputsToProcess[index], outputsToProcess[index]);
-                    }
-
-                    return false;
+                    Log.LogErrorFromResources("GenerateResource.OutOfDate");
                 }
                 else
                 {
