diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index 935d146d443..9e8211cd3dc 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -210,6 +210,9 @@ public partial interface IBuildEngine6 : Microsoft.Build.Framework.IBuildEngine,
     public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6
     {
         bool AllowFailureWithoutError { get; set; }
+    }
+    public partial interface IBuildEngine8 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7
+    {
         void ReleaseCores(int coresToRelease);
         int RequestCores(int requestedCores);
     }
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index b77ffbb111d..ea0615e7872 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -210,6 +210,9 @@ public partial interface IBuildEngine6 : Microsoft.Build.Framework.IBuildEngine,
     public partial interface IBuildEngine7 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6
     {
         bool AllowFailureWithoutError { get; set; }
+    }
+    public partial interface IBuildEngine8 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7
+    {
         void ReleaseCores(int coresToRelease);
         int RequestCores(int requestedCores);
     }
diff --git a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
index 40abd53b294..56a49e69207 100644
--- a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
@@ -353,6 +353,7 @@ protected Task(System.Resources.ResourceManager taskResources, string helpKeywor
         public Microsoft.Build.Framework.IBuildEngine5 BuildEngine5 { get { throw null; } }
         public Microsoft.Build.Framework.IBuildEngine6 BuildEngine6 { get { throw null; } }
         public Microsoft.Build.Framework.IBuildEngine7 BuildEngine7 { get { throw null; } }
+        public Microsoft.Build.Framework.IBuildEngine8 BuildEngine8 { get { throw null; } }
         protected string HelpKeywordPrefix { get { throw null; } set { } }
         public Microsoft.Build.Framework.ITaskHost HostObject { get { throw null; } set { } }
         public Microsoft.Build.Utilities.TaskLoggingHelper Log { get { throw null; } }
diff --git a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
index e6cc6f3fa50..ae04054e92b 100644
--- a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
@@ -198,6 +198,7 @@ protected Task(System.Resources.ResourceManager taskResources, string helpKeywor
         public Microsoft.Build.Framework.IBuildEngine5 BuildEngine5 { get { throw null; } }
         public Microsoft.Build.Framework.IBuildEngine6 BuildEngine6 { get { throw null; } }
         public Microsoft.Build.Framework.IBuildEngine7 BuildEngine7 { get { throw null; } }
+        public Microsoft.Build.Framework.IBuildEngine8 BuildEngine8 { get { throw null; } }
         protected string HelpKeywordPrefix { get { throw null; } set { } }
         public Microsoft.Build.Framework.ITaskHost HostObject { get { throw null; } set { } }
         public Microsoft.Build.Utilities.TaskLoggingHelper Log { get { throw null; } }
diff --git a/src/Build/BackEnd/Components/IBuildComponentHost.cs b/src/Build/BackEnd/Components/IBuildComponentHost.cs
index d3a5ddd6253..da27a3049dc 100644
--- a/src/Build/BackEnd/Components/IBuildComponentHost.cs
+++ b/src/Build/BackEnd/Components/IBuildComponentHost.cs
@@ -130,7 +130,7 @@ internal enum BuildComponentType
         SdkResolverService,
 
         /// <summary>
-        /// Resource manager for tasks to use via <see cref="Microsoft.Build.Framework.IBuildEngine7.RequestCores(int)"/>.
+        /// Resource manager for tasks to use via <see cref="Microsoft.Build.Framework.IBuildEngine8.RequestCores(int)"/>.
         /// </summary>
         TaskResourceManager,
     }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 1e68e12e9f0..8b6f8f87eec 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -34,7 +34,7 @@ internal class TaskHost :
 #if FEATURE_APPDOMAIN
         MarshalByRefObject,
 #endif
-        IBuildEngine7
+        IBuildEngine8
     {
         /// <summary>
         /// True if the "secret" environment variable MSBUILDNOINPROCNODE is set.
@@ -677,6 +677,15 @@ public IReadOnlyDictionary<string, string> GetGlobalProperties()
 
         #region IBuildEngine7 Members
 
+        /// <summary>
+        /// Enables or disables emitting a default error when a task fails without logging errors
+        /// </summary>
+        public bool AllowFailureWithoutError { get; set; } = false;
+
+        #endregion
+
+        #region IBuildEngine8 Members
+
         int runningTotal = 0;
 
         public int RequestCores(int requestedCores)
@@ -729,10 +738,6 @@ internal void ReleaseAllCores()
             runningTotal = 0;
         }
 
-        /// <summary>
-        /// Enables or disables emitting a default error when a task fails without logging errors
-        /// </summary>
-        public bool AllowFailureWithoutError { get; set; } = false;
         #endregion
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
index eec2d265530..72ba752baed 100644
--- a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
+++ b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
@@ -2,13 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using Microsoft.Build.Shared;
-using System;
-using System.Collections.Generic;
-using System.Diagnostics;
-using System.Linq;
-using System.Text;
 using System.Threading;
-using System.Threading.Tasks;
 
 #nullable enable
 
diff --git a/src/Framework/IBuildEngine7.cs b/src/Framework/IBuildEngine7.cs
index ca82448e707..7f9200da1ab 100644
--- a/src/Framework/IBuildEngine7.cs
+++ b/src/Framework/IBuildEngine7.cs
@@ -10,19 +10,5 @@ namespace Microsoft.Build.Framework
     public interface IBuildEngine7 : IBuildEngine6
     {
         public bool AllowFailureWithoutError { get; set; }
-
-        /// <summary>
-        /// If a task launches multiple parallel processes, it should ask how many cores it can use.
-        /// </summary>
-        /// <param name="requestedCores">The number of cores a task can potentially use.</param>
-        /// <returns>The number of cores a task is allowed to use.</returns>
-        int RequestCores(int requestedCores);
-
-        /// <summary>
-        /// A task should notify the build manager when all or some of the requested cores are not used anymore.
-        /// When task is finished, the cores it requested are automatically released.
-        /// </summary>
-        /// <param name="coresToRelease">Number of cores no longer in use.</param>
-        void ReleaseCores(int coresToRelease);
     }
 }
diff --git a/src/Framework/IBuildEngine8.cs b/src/Framework/IBuildEngine8.cs
new file mode 100644
index 00000000000..dea08af8fdd
--- /dev/null
+++ b/src/Framework/IBuildEngine8.cs
@@ -0,0 +1,26 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// This interface extends <see cref="IBuildEngine6" /> to allow tasks to set whether they want to
+    /// log an error when a task returns without logging an error.
+    /// </summary>
+    public interface IBuildEngine8 : IBuildEngine7
+    {
+        /// <summary>
+        /// If a task launches multiple parallel processes, it should ask how many cores it can use.
+        /// </summary>
+        /// <param name="requestedCores">The number of cores a task can potentially use.</param>
+        /// <returns>The number of cores a task is allowed to use.</returns>
+        int RequestCores(int requestedCores);
+
+        /// <summary>
+        /// A task should notify the build manager when all or some of the requested cores are not used anymore.
+        /// When task is finished, the cores it requested are automatically released.
+        /// </summary>
+        /// <param name="coresToRelease">Number of cores no longer in use.</param>
+        void ReleaseCores(int coresToRelease);
+    }
+}
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index d3f232f3399..bebd72ec86d 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -33,7 +33,7 @@ internal class OutOfProcTaskHostNode :
 #if CLR2COMPATIBILITY
         IBuildEngine3
 #else
-        IBuildEngine7
+        IBuildEngine8
 #endif
     {
         /// <summary>
diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/Shared/UnitTests/MockEngine.cs
index 67b485c4a25..c9b5ad61fe8 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/Shared/UnitTests/MockEngine.cs
@@ -31,7 +31,7 @@ namespace Microsoft.Build.UnitTests
      * is somewhat of a no-no for task assemblies.
      * 
      **************************************************************************/
-    internal sealed class MockEngine : IBuildEngine7
+    internal sealed class MockEngine : IBuildEngine8
     {
         private readonly object _lockObj = new object();  // Protects _log, _output
         private readonly ITestOutputHelper _output;
diff --git a/src/Tasks/SemaphoreCPUTask.cs b/src/Tasks/SemaphoreCPUTask.cs
index 9b2cd9cc63d..7bf57804326 100644
--- a/src/Tasks/SemaphoreCPUTask.cs
+++ b/src/Tasks/SemaphoreCPUTask.cs
@@ -16,7 +16,7 @@ public override bool Execute()
         {
             Log.LogMessageFromText($"Starting in {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
 
-            BuildEngine7.Yield();
+            BuildEngine8.Yield();
 
             //int initial = BuildEngine7.RequestCores(3123890);
             //Log.LogMessageFromText($"Got {initial} cores from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
@@ -47,12 +47,12 @@ public override bool Execute()
             for (int i = 0; i < Repetitions; i++)
             {
                 int i_local = i;
-                tasks[i] = System.Threading.Tasks.Task.Run(() => LaunchAndComplete(i_local, () => BuildEngine7.ReleaseCores(1)));
+                tasks[i] = System.Threading.Tasks.Task.Run(() => LaunchAndComplete(i_local, () => BuildEngine8.ReleaseCores(1)));
             }
 
             System.Threading.Tasks.Task.WhenAll(tasks).Wait();
 
-            BuildEngine7.Reacquire();
+            BuildEngine8.Reacquire();
 
             return !Log.HasLoggedErrors;
         }
@@ -61,7 +61,7 @@ void LaunchAndComplete(int i, Action completionCallback)
         {
             Stopwatch s = new Stopwatch();
             s.Start();
-            BuildEngine7.RequestCores(1);
+            BuildEngine8.RequestCores(1);
             Log.LogMessageFromText($"Action {i} started from {System.Diagnostics.Process.GetCurrentProcess().Id}, waited {s.Elapsed}", Framework.MessageImportance.High);
             Thread.Sleep(2_000);
             Log.LogMessageFromText($"Action {i} completed from {System.Diagnostics.Process.GetCurrentProcess().Id}, total {s.Elapsed}", Framework.MessageImportance.High);
diff --git a/src/Utilities/Task.cs b/src/Utilities/Task.cs
index 39846721d3c..db751b30d91 100644
--- a/src/Utilities/Task.cs
+++ b/src/Utilities/Task.cs
@@ -56,7 +56,7 @@ protected Task(ResourceManager taskResources, string helpKeywordPrefix)
         /// <value>The build engine interface available to tasks.</value>
         public IBuildEngine BuildEngine { get; set; }
 
-        // The casts below are always possible because this class is built against the 
+        // The casts below are always possible because this class is built against the
         // Orcas Framework assembly or later, so the version of MSBuild that does not
         // know about IBuildEngine2 will never load it.
         // No setters needed; the Engine always sets through the BuildEngine setter
@@ -94,6 +94,12 @@ protected Task(ResourceManager taskResources, string helpKeywordPrefix)
         /// </summary>
         public IBuildEngine7 BuildEngine7 => (IBuildEngine7)BuildEngine;
 
+        /// <summary>
+        /// Retrieves the <see cref="IBuildEngine8" /> version of the build engine interface provided by the host.
+        /// </summary>
+        public IBuildEngine8 BuildEngine8 => (IBuildEngine8)BuildEngine;
+
+
         /// <summary>
         /// The build engine sets this property if the host IDE has associated a host object with this particular task.
         /// </summary>
@@ -103,7 +109,7 @@ protected Task(ResourceManager taskResources, string helpKeywordPrefix)
         /// <summary>
         /// Gets an instance of a TaskLoggingHelper class containing task logging methods.
         /// The taskLoggingHelper is a MarshallByRef object which needs to have MarkAsInactive called
-        /// if the parent task is making the appdomain and marshaling this object into it. If the appdomain is not unloaded at the end of 
+        /// if the parent task is making the appdomain and marshaling this object into it. If the appdomain is not unloaded at the end of
         /// the task execution and the MarkAsInactive method is not called this will result in a leak of the task instances in the appdomain the task was created within.
         /// </summary>
         /// <value>The logging helper object.</value>
