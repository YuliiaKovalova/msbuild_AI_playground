diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 9006ff672fa..ab53a1f9a78 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1131,6 +1131,7 @@ private async Task<BuildResult> BuildProject()
             if (!isRestore)
             {
                 buildCheckManager = (_componentHost.GetComponent(BuildComponentType.BuildCheck) as IBuildCheckManagerProvider)!.Instance;
+                buildCheckManager.isRestore = false;
                 buildCheckManager.SetDataSource(BuildCheckDataSource.BuildExecution);
             }
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index b860423748e..5a538f41745 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -26,55 +26,58 @@ public void Initialize(IEventSource eventSource)
 
     private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
     {
-        if (e is ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)
+        if (!buildCheckManager.isRestore)
         {
-            if (projectEvaluationFinishedEventArgs.ProjectFile?.EndsWith(".metaproj") ?? false)
+            if (e is ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)
             {
-                return;
-            }
+                if (projectEvaluationFinishedEventArgs.ProjectFile?.EndsWith(".metaproj") ?? false)
+                {
+                    return;
+                }
 
-            try
-            {
-                buildCheckManager.ProcessEvaluationFinishedEventArgs(
-                    loggingContextFactory.CreateLoggingContext(e.BuildEventContext!),
-                    projectEvaluationFinishedEventArgs);
+                try
+                {
+                    buildCheckManager.ProcessEvaluationFinishedEventArgs(
+                        loggingContextFactory.CreateLoggingContext(e.BuildEventContext!),
+                        projectEvaluationFinishedEventArgs);
+                }
+                catch (Exception exception)
+                {
+                    Debugger.Launch();
+                    Console.WriteLine(exception);
+                    throw;
+                }
+
+                buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
             }
-            catch (Exception exception)
+            else if (e is ProjectEvaluationStartedEventArgs projectEvaluationStartedEventArgs)
             {
-                Debugger.Launch();
-                Console.WriteLine(exception);
-                throw;
-            }
+                if (projectEvaluationStartedEventArgs.ProjectFile?.EndsWith(".metaproj") ?? false)
+                {
+                    return;
+                }
 
-            buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
-        }
-        else if (e is ProjectEvaluationStartedEventArgs projectEvaluationStartedEventArgs)
-        {
-            if (projectEvaluationStartedEventArgs.ProjectFile?.EndsWith(".metaproj") ?? false)
+                buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!,
+                    projectEvaluationStartedEventArgs.ProjectFile!);
+            }
+            else if (e is ProjectStartedEventArgs projectStartedEvent)
             {
-                return;
+                buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
             }
-
-            buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!,
-                projectEvaluationStartedEventArgs.ProjectFile!);
-        }
-        else if (e is ProjectStartedEventArgs projectStartedEvent)
-        {
-            buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
-        }
-        else if (e is ProjectFinishedEventArgs projectFinishedEventArgs)
-        {
-            buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
-        }
-        else if (e is BuildCheckEventArgs buildCheckBuildEventArgs)
-        {
-            if (buildCheckBuildEventArgs is BuildCheckTracingEventArgs tracingEventArgs)
+            else if (e is ProjectFinishedEventArgs projectFinishedEventArgs)
             {
-                _stats.Merge(tracingEventArgs.TracingData, (span1, span2) => span1 + span2);
+                buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
             }
-            else if (buildCheckBuildEventArgs is BuildCheckAcquisitionEventArgs acquisitionEventArgs)
+            else if (e is BuildCheckEventArgs buildCheckBuildEventArgs)
             {
-                buildCheckManager.ProcessAnalyzerAcquisition(acquisitionEventArgs.ToAnalyzerAcquisitionData());
+                if (buildCheckBuildEventArgs is BuildCheckTracingEventArgs tracingEventArgs)
+                {
+                    _stats.Merge(tracingEventArgs.TracingData, (span1, span2) => span1 + span2);
+                }
+                else if (buildCheckBuildEventArgs is BuildCheckAcquisitionEventArgs acquisitionEventArgs)
+                {
+                    buildCheckManager.ProcessAnalyzerAcquisition(acquisitionEventArgs.ToAnalyzerAcquisitionData());
+                }
             }
         }
     }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index df5385b08ba..e73aef2dbd0 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -81,6 +81,8 @@ private sealed class BuildCheckManager : IBuildCheckManager
         private bool IsInProcNode => _enabledDataSources[(int)BuildCheckDataSource.EventArgs] &&
                                      _enabledDataSources[(int)BuildCheckDataSource.BuildExecution];
 
+        bool IBuildCheckManager.isRestore { get; set; } = true;
+
         /// <summary>
         /// Notifies the manager that the data source will be used -
         ///   so it should register the built-in analyzers for the source if it hasn't been done yet.
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index 703d0b6bfa9..e3a6a7b8b70 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -27,6 +27,8 @@ internal enum BuildCheckDataSource
 /// </summary>
 internal interface IBuildCheckManager
 {
+    bool isRestore { get; set; }
+
     void ProcessEvaluationFinishedEventArgs(
         IBuildAnalysisLoggingContext buildAnalysisContext,
         ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs);
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index d6685345652..fa5c0334d66 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -15,6 +15,8 @@ namespace Microsoft.Build.BuildCheck.Infrastructure;
 
 internal class NullBuildCheckManager : IBuildCheckManager
 {
+    public bool isRestore { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }
+
     public void Shutdown() { }
 
     public void ProcessEvaluationFinishedEventArgs(IBuildAnalysisLoggingContext buildAnalysisContext,
