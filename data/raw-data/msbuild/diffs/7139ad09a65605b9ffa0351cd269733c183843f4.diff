diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index 2bf912f6b1d..3f0a0330b05 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -8,7 +8,7 @@
 using System.Linq;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
-using Microsoft.Build.Logging;
+using Microsoft.Build.Framework;
 using Microsoft.Build.ObjectModelRemoting;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
@@ -28,7 +28,7 @@ namespace Microsoft.Build.Evaluation
     /// we do use it for build-time items.
     /// </comment>
     [DebuggerDisplay("{ItemType}={EvaluatedInclude} [{UnevaluatedInclude}] #DirectMetadata={DirectMetadataCount}")]
-    public class ProjectItem : IItem<ProjectMetadata>, IProjectMetadataParent, IItemData
+    public class ProjectItem : IItem<ProjectMetadata>, IProjectMetadataParent, IItemDataWithMetadata
     {
         /// <summary>
         /// Project that this item lives in.
@@ -144,8 +144,11 @@ internal ProjectItem(
 
         internal virtual ProjectItemLink Link => null;
 
-        /// <inheritdoc cref="IItemData.EnumerateMetadata"/>
-        IEnumerable<KeyValuePair<string, string>> IItemData.EnumerateMetadata() => this.Metadata.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue));
+        /// <inheritdoc cref="IItemData.ItemSpec"/>
+        string IItemData.ItemSpec => this.EvaluatedInclude;
+
+        /// <inheritdoc cref="IItemDataWithMetadata.EnumerateMetadata"/>
+        IEnumerable <KeyValuePair<string, string>> IItemDataWithMetadata.EnumerateMetadata() => this.Metadata.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue));
 
         /// <summary>
         /// Backing XML item.
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 44f60b2a51b..82a53158881 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -16,7 +16,6 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
@@ -39,7 +38,7 @@ public class ProjectItemInstance :
         ITranslatable,
         IMetadataContainer,
         IItemTypeDefinition,
-        IItemData
+        IItemDataWithMetadata
     {
         /// <summary>
         /// The project instance to which this item belongs.
@@ -303,8 +302,11 @@ string ITaskItem.ItemSpec
             }
         }
 
-        /// <inheritdoc cref="IItemData.EnumerateMetadata"/>
-        IEnumerable<KeyValuePair<string, string>> IItemData.EnumerateMetadata() => ((IMetadataContainer)this).EnumerateMetadata();
+        /// <inheritdoc cref="IItemData.ItemSpec"/>
+        string IItemData.ItemSpec => this.EvaluatedInclude;
+
+        /// <inheritdoc cref="IItemDataWithMetadata.EnumerateMetadata"/>
+        IEnumerable<KeyValuePair<string, string>> IItemDataWithMetadata.EnumerateMetadata() => ((IMetadataContainer)this).EnumerateMetadata();
 
         /// <summary>
         /// ITaskItem implementation
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
index 4643636b031..66f0bb3ae28 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
@@ -49,6 +49,30 @@ public static class BuildEventArgsExtensions
         this ProjectStartedEventArgs eventArgs)
         => EnumerateItems(eventArgs.Items);
 
+    /// <summary>
+    /// Enumerates custom metadata of an item, without known type.
+    /// </summary>
+    public static IEnumerable<KeyValuePair<string, string>> EnumerateMetadata(this IItemData itemData)
+    {
+        if (itemData is IItemDataWithMetadata iTemDataWithMetadata)
+        {
+            return iTemDataWithMetadata.EnumerateMetadata();
+        }
+
+        if (itemData is ITaskItem taskItem)
+        {
+            return ITaskItemExtensions.EnumerateMetadata(taskItem);
+        }
+
+        return [];
+    }
+
+    /// <summary>
+    /// Gets the item evaluated include data. It is in fact a 'specification' of the item (e.g. path on disk to a specific ProjectReference)
+    /// </summary>
+    public static string GetEvaluatedInclude(this IItemData itemData)
+        => itemData.ItemSpec;
+
     private static IEnumerable<(string propertyName, string propertyValue)> EnumerateProperties(IEnumerable? properties)
         => Internal.Utilities.EnumerateProperties(properties);
 
diff --git a/src/Build/Logging/BinaryLogger/IItemData.cs b/src/Build/Logging/BinaryLogger/IItemData.cs
deleted file mode 100644
index a071e6fdcb3..00000000000
--- a/src/Build/Logging/BinaryLogger/IItemData.cs
+++ /dev/null
@@ -1,24 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System.Collections.Generic;
-using Microsoft.Build.Framework;
-
-namespace Microsoft.Build.Logging;
-
-
-/// <summary>
-/// Represents an item data (per single item type) that van be returned via <see cref="ProjectEvaluationFinishedEventArgs"/> or <see cref="ProjectStartedEventArgs"/>.
-/// </summary>
-public interface IItemData
-{
-    /// <summary>
-    /// The item evaluated include value
-    /// </summary>
-    string EvaluatedInclude { get; }
-
-    /// <summary>
-    /// The item metadata
-    /// </summary>
-    IEnumerable<KeyValuePair<string, string>> EnumerateMetadata();
-}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 9b2ef31db17..5697c631b25 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -171,7 +171,6 @@
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="Instance\IPropertyElementWithLocation.cs" />
     <Compile Include="Logging\BinaryLogger\BuildEventArgsExtensions.cs" />
-    <Compile Include="Logging\BinaryLogger\IItemData.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index 65b4dc12728..5a79cab99a6 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -763,10 +763,6 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
                         {
                             data = dt;
                         }
-                        else if (itemValue is ITaskItem taskItem)
-                        {
-                            data = new ItemAccessor(taskItem);
-                        }
                     }
 
                     if (!String.IsNullOrEmpty(itemType))
@@ -777,12 +773,6 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
             }
         }
 
-        private class ItemAccessor(ITaskItem item) : IItemData
-        {
-            public string EvaluatedInclude => item.ItemSpec;
-            public IEnumerable<KeyValuePair<string, string>> EnumerateMetadata() => item.EnumerateMetadata();
-        }
-
         public static void EnumerateItems(IEnumerable items, Action<DictionaryEntry> callback)
         {
             foreach (var tuple in EnumerateItems(items))
diff --git a/src/Framework/IItemData.cs b/src/Framework/IItemData.cs
new file mode 100644
index 00000000000..bcb814769af
--- /dev/null
+++ b/src/Framework/IItemData.cs
@@ -0,0 +1,42 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Collections.Generic;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Framework;
+
+
+/// <summary>
+/// Represents an item data (per single item type) that might be returned via <see cref="ProjectEvaluationFinishedEventArgs"/> or <see cref="ProjectStartedEventArgs"/>.
+/// </summary>
+public interface IItemData
+{
+    ///// <summary>
+    ///// The item evaluated include value
+    ///// </summary>
+    //string EvaluatedInclude { get; }
+
+    /// <summary>
+    /// Gets or sets the item "specification" e.g. for disk-based items this would be the file path.
+    /// </summary>
+    /// <remarks>
+    /// This should be named "EvaluatedInclude" but that would be a breaking change to this interface.
+    /// </remarks>
+    /// <value>The item-spec string.</value>
+    string ItemSpec
+    {
+        get;
+    }
+}
+
+/// <summary>
+/// Represents a metadata that can natively provide it's metadata.
+/// </summary>
+public interface IItemDataWithMetadata : IItemData
+{
+    /// <summary>
+    /// The item metadata
+    /// </summary>
+    IEnumerable<KeyValuePair<string, string>> EnumerateMetadata();
+}
diff --git a/src/Framework/ITaskItem.cs b/src/Framework/ITaskItem.cs
index a69eeec483c..c6c3285e868 100644
--- a/src/Framework/ITaskItem.cs
+++ b/src/Framework/ITaskItem.cs
@@ -14,7 +14,7 @@ namespace Microsoft.Build.Framework
     /// </summary>
     [ComVisible(true)]
     [Guid("8661674F-2148-4F71-A92A-49875511C528")]
-    public interface ITaskItem
+    public interface ITaskItem : IItemData
     {
         /// <summary>
         /// Gets or sets the item "specification" e.g. for disk-based items this would be the file path.
@@ -23,7 +23,7 @@ public interface ITaskItem
         /// This should be named "EvaluatedInclude" but that would be a breaking change to this interface.
         /// </remarks>
         /// <value>The item-spec string.</value>
-        string ItemSpec
+        new string ItemSpec
         {
             get;
 
diff --git a/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs b/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
index 07b1ce57a0f..eff41e10b9e 100644
--- a/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
+++ b/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
@@ -415,6 +415,8 @@ IDictionary ITaskItem.CloneCustomMetadata()
             {
                 throw new NotImplementedException();
             }
+
+            string IItemData.ItemSpec => ((ITaskItem)this).ItemSpec;
         }
     }
 }
