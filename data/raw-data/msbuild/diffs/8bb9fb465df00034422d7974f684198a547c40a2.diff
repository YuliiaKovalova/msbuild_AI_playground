diff --git a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
index 1fd341f71a8..7c36b29cdb3 100644
--- a/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
+++ b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
@@ -88,18 +88,31 @@ public void MSBuildServerTest()
         {
             TransientTestFile project = _env.CreateFile("testProject.proj", printPidContents);
             _env.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
-            string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, false, _output);
-            success.ShouldBeTrue();
-            int pidOfInitialProcess = ParseNumber(output, "Process ID is ");
-            int pidOfServerProcess = ParseNumber(output, "Server ID is ");
-            pidOfInitialProcess.ShouldNotBe(pidOfServerProcess, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
 
-            output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, false, _output);
-            success.ShouldBeTrue();
-            int newPidOfInitialProcess = ParseNumber(output, "Process ID is ");
-            newPidOfInitialProcess.ShouldNotBe(pidOfServerProcess, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
-            newPidOfInitialProcess.ShouldNotBe(pidOfInitialProcess, "Process started by two MSBuild executions should be different.");
-            pidOfServerProcess.ShouldBe(ParseNumber(output, "Server ID is "), "Node used by both the first and second build should be the same.");
+            int pidOfInitialProcess = 0;
+            int pidOfServerProcess = 0;
+            int newPidOfInitialProcess = 0;
+            int newPidOfServerProcess = 0;
+            Task u = Task.Run(() =>
+            {
+                string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, false, _output, waitForExit: false);
+                success.ShouldBeTrue();
+                pidOfInitialProcess = ParseNumber(output, "Process ID is ");
+                pidOfServerProcess = ParseNumber(output, "Server ID is ");
+                pidOfInitialProcess.ShouldNotBe(pidOfServerProcess, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
+            });
+
+            Thread.Sleep(1000);
+
+            Task v = Task.Run(() =>
+            {
+                string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, false, _output, waitForExit: false);
+                success.ShouldBeTrue();
+                newPidOfInitialProcess = ParseNumber(output, "Process ID is ");
+                newPidOfServerProcess = ParseNumber(output, "Server ID is ");
+            });
+
+            Thread.Sleep(1000);
 
             // Prep to kill the long-lived task we're about to start.
             Task t = Task.Run(() =>
@@ -118,11 +131,23 @@ public void MSBuildServerTest()
 
             t.Wait();
 
-            // Ensure that a new build can still succeed and that its server node is different.
-            output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, false, _output);
-            success.ShouldBeTrue();
-            newPidOfInitialProcess = ParseNumber(output, "Process ID is ");
-            int newServerProcessId = ParseNumber(output, "Server ID is ");
+            int newServerProcessId = 0;
+            int newServerServerId = 0;
+            t = Task.Run(() =>
+            {
+                // Ensure that a new build can still succeed and that its server node is different.
+                string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, false, _output);
+                success.ShouldBeTrue();
+                newServerServerId = ParseNumber(output, "Process ID is ");
+                newServerProcessId = ParseNumber(output, "Server ID is ");
+            });
+
+            Thread.Sleep(1000);
+
+            newPidOfInitialProcess.ShouldNotBe(pidOfServerProcess, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
+            newPidOfInitialProcess.ShouldNotBe(pidOfInitialProcess, "Process started by two MSBuild executions should be different.");
+            pidOfServerProcess.ShouldBe(newPidOfServerProcess, "Node used by both the first and second build should be the same.");
+
             newPidOfInitialProcess.ShouldNotBe(pidOfInitialProcess, "Process started by two MSBuild executions should be different.");
             newPidOfInitialProcess.ShouldNotBe(newServerProcessId, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
             pidOfServerProcess.ShouldNotBe(newServerProcessId, "Node used by both the first and second build should not be the same.");
@@ -168,14 +193,21 @@ public void BuildsWhileBuildIsRunningOnServer()
 
             int pidOfServerProcess = -1;
             Task? t = null;
+            Task? u = null;
+            Task? v = null;
+            Task? w = null;
             try
             {
                 // Start a server node and find its PID.
-
                 _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Start first execution");
-                string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out bool success, false, _output);
-                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:End first execution");
-                pidOfServerProcess = ParseNumber(output, "Server ID is ");
+                t = Task.Run(() =>
+                {
+                    string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out bool success, false, _output);
+                    _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:End first execution");
+                    pidOfServerProcess = ParseNumber(output, "Server ID is ");
+                });
+
+                Thread.Sleep(1000);
 
                 foreach (Process p in Process.GetProcesses())
                 {
@@ -183,9 +215,8 @@ public void BuildsWhileBuildIsRunningOnServer()
                     p.OutputDataReceived += (object sender, DataReceivedEventArgs args) => _output.WriteLine(args is null ? "empty" : args.Data);
                 }
 
-
                 _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Start second execution");
-                t = Task.Run(() =>
+                u = Task.Run(() =>
                 {
                     RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, sleepProject.Path + " -v:diag", out _, false, _output);
                 });
@@ -204,21 +235,29 @@ public void BuildsWhileBuildIsRunningOnServer()
                 _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Set MSBUILDUSESERVER to 0");
 
                 _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Start 3rd execution");
-                output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out success, false, _output);
-                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:End 3rd execution");
-                success.ShouldBeTrue();
-                ParseNumber(output, "Server ID is ").ShouldBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
+                v = Task.Run(() =>
+                {
+                    string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out bool success, false, _output);
+                    _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:End 3rd execution");
+                    success.ShouldBeTrue();
+                    ParseNumber(output, "Server ID is ").ShouldBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
+                });
+
+                Thread.Sleep(1000);
 
                 Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
                 _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Set MSBUILDUSESERVER back to 1");
 
                 _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:Start 4th execution");
-                output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out success, false, _output);
-                _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:End 4th execution");
-                success.ShouldBeTrue();
-                pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Server ID is "), "The server should be otherwise occupied.");
-                pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
-                ParseNumber(output, "Server ID is ").ShouldBe(ParseNumber(output, "Process ID is "), "Process ID and Server ID should coincide.");
+                w = Task.Run(() =>
+                {
+                    string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path + " -v:diag", out bool success, false, _output);
+                    _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:End 4th execution");
+                    success.ShouldBeTrue();
+                    pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Server ID is "), "The server should be otherwise occupied.");
+                    pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
+                    ParseNumber(output, "Server ID is ").ShouldBe(ParseNumber(output, "Process ID is "), "Process ID and Server ID should coincide.");
+                });
 
                 _output.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}: End of test.");
             }
@@ -235,14 +274,17 @@ public void BuildsWhileBuildIsRunningOnServer()
 
                 if (pidOfServerProcess > -1)
                 {
-                    ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
+                    try
+                    {
+                        ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
+                    }
+                    catch (Exception) { }
                 }
 
-
-                if (t is not null)
-                {
-                    t.Wait();
-                }
+                t?.Wait();
+                u?.Wait();
+                v?.Wait();
+                w?.Wait();
             }
         }
 
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 0869ffa51e1..ff1a3ee74a3 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -24,7 +24,7 @@ public static string ExecMSBuild(string msbuildParameters, out bool successfulEx
         /// Invoke msbuild.exe with the given parameters and return the stdout, stderr, and process exit status.
         /// This method may invoke msbuild via other runtimes.
         /// </summary>
-        public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null)
+        public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null, bool waitForExit = true)
         {
 #if FEATURE_RUN_EXE_IN_TESTS
             var pathToExecutable = pathToMsBuildExe;
@@ -33,7 +33,7 @@ public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParamete
             msbuildParameters = FileUtilities.EnsureDoubleQuotes(pathToMsBuildExe) + " " + msbuildParameters;
 #endif
 
-            return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
+            return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper, waitForExit);
         }
 
         private static void AdjustForShellExecution(ref string pathToExecutable, ref string arguments)
@@ -69,7 +69,7 @@ private static string ResolveRuntimeExecutableName()
         /// <summary>
         /// Run the process and get stdout and stderr
         /// </summary>
-        public static string RunProcessAndGetOutput(string process, string parameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null)
+        public static string RunProcessAndGetOutput(string process, string parameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null, bool waitForExit = true)
         {
             outputHelper?.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:RunProcessAndGetOutput:1");
 
@@ -133,7 +133,10 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 p.WaitForExit(30000);
 
                 outputHelper?.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:RunProcessAndGetOutput:10");
-                p.WaitForExit(); // The timeout overload does not wait for output to be received.
+                if (waitForExit)
+                {
+                    p.WaitForExit(); // The timeout overload does not wait for output to be received.
+                }
 
                 outputHelper?.WriteLine($"{DateTime.Now.ToString("hh:mm:ss tt")}:RunProcessAndGetOutput:11");
 
