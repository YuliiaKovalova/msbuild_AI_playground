diff --git a/eng/cibuild_bootstrapped_msbuild.ps1 b/eng/cibuild_bootstrapped_msbuild.ps1
index 83c0a808a68..21c676af220 100644
--- a/eng/cibuild_bootstrapped_msbuild.ps1
+++ b/eng/cibuild_bootstrapped_msbuild.ps1
@@ -112,6 +112,9 @@ try {
   # Opt into performance logging. https://github.com/dotnet/msbuild/issues/5900
   $env:DOTNET_PERFLOG_DIR=$PerfLogDir
 
+  # Expose stage 1 path so unit tests can find the bootstrapped MSBuild.
+  $env:MSBUILD_BOOTSTRAPPED_BINDIR=$Stage1BinDir
+
   # When using bootstrapped MSBuild:
   # - Turn off node reuse (so that bootstrapped MSBuild processes don't stay running and lock files)
   # - Do run tests
diff --git a/eng/cibuild_bootstrapped_msbuild.sh b/eng/cibuild_bootstrapped_msbuild.sh
index 50b23e83c14..e3b283402bc 100755
--- a/eng/cibuild_bootstrapped_msbuild.sh
+++ b/eng/cibuild_bootstrapped_msbuild.sh
@@ -66,6 +66,9 @@ mv $ArtifactsDir $Stage1Dir
 # Ensure that debug bits fail fast, rather than hanging waiting for a debugger attach.
 export MSBUILDDONOTLAUNCHDEBUGGER=true
 
+# Expose stage 1 path so unit tests can find the bootstrapped MSBuild.
+export MSBUILD_BOOTSTRAPPED_BINDIR="$Stage1Dir/bin"
+
 # Opt into performance logging.
 export DOTNET_PERFLOG_DIR=$PerfLogDir
 
diff --git a/src/Analyzers.UnitTests/BootstrapRunner.cs b/src/Analyzers.UnitTests/BootstrapRunner.cs
index 5ac2402511b..02805ab8897 100644
--- a/src/Analyzers.UnitTests/BootstrapRunner.cs
+++ b/src/Analyzers.UnitTests/BootstrapRunner.cs
@@ -11,6 +11,10 @@
 using Microsoft.Build.UnitTests.Shared;
 using Xunit.Abstractions;
 
+#if FEATURE_MSIOREDIST
+using Path = Microsoft.IO.Path;
+#endif
+
 namespace Microsoft.Build.Analyzers.UnitTests
 {
     internal static class BootstrapRunner
@@ -20,10 +24,17 @@ internal static class BootstrapRunner
         // Better solution would be to have a single test utility project - instead of linked code files.
         public static string ExecBootstrapedMSBuild(string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper? outputHelper = null)
         {
-            var binaryFolder = Assembly.GetExecutingAssembly()
-                .GetCustomAttribute<BootstrapLocationAttribute>()!
-                .BootstrapMsbuildBinaryLocation;
+            BootstrapLocationAttribute attribute = Assembly.GetExecutingAssembly().GetCustomAttribute<BootstrapLocationAttribute>()
+                ?? throw new InvalidOperationException("This test assembly does not have the BootstrapLocationAttribute");
 
+            string binaryFolder = attribute.BootstrapMsbuildBinaryLocation;
+            string? bindirOverride = Environment.GetEnvironmentVariable("MSBUILD_BOOTSTRAPPED_BINDIR");
+            if (!string.IsNullOrEmpty(bindirOverride))
+            {
+                // The bootstrap environment has moved to another location. Assume the same relative layout and adjust the path.
+                string relativePath = Path.GetRelativePath(attribute.BootstrapRoot, binaryFolder);
+                binaryFolder = Path.GetFullPath(relativePath, bindirOverride);
+            }
 #if NET
             string pathToExecutable = EnvironmentProvider.GetDotnetExePath()!;
             msbuildParameters = Path.Combine(binaryFolder, "msbuild.dll") + " " + msbuildParameters;
