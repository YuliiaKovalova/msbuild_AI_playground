diff --git a/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs b/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
index b81ad8990c2..e157a44d7be 100644
--- a/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
@@ -37,7 +37,7 @@ private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedProperties
                     SupportedRule,
                     ElementLocation.Create(envVariableData.Value.File, envVariableData.Value.Line, envVariableData.Value.Column),
                     envVariableData.Key,
-                    "LOCATION?"));
+                    envVariableData.Value.EnvVarValue));
             }
         }
     }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
index e97aa45db5b..cad410e3282 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
@@ -31,7 +31,7 @@ internal BuildCheckBuildEventHandler(
         {
             { typeof(ProjectEvaluationFinishedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationFinishedEvent((ProjectEvaluationFinishedEventArgs)e) },
             { typeof(ProjectEvaluationStartedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationStartedEvent((ProjectEvaluationStartedEventArgs)e) },
-            { typeof(EnvironmentVariableReadEventArgs), (BuildEventArgs e) => HandleEnvironmentVariableReadEvent((EnvironmentVariableReadEventArgs)e) },
+            { typeof(ExtendedEnvironmentVariableReadEventArgs), (BuildEventArgs e) => HandleEnvironmentVariableReadEvent((ExtendedEnvironmentVariableReadEventArgs)e) },
             { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
             { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
             { typeof(BuildCheckTracingEventArgs), (BuildEventArgs e) => HandleBuildCheckTracingEvent((BuildCheckTracingEventArgs)e) },
@@ -102,7 +102,7 @@ private void HandleBuildCheckAcquisitionEvent(BuildCheckAcquisitionEventArgs eve
                 eventArgs.ToAnalyzerAcquisitionData(),
                 _analyzerContextFactory.CreateAnalysisContext(GetBuildEventContext(eventArgs)));
 
-    private void HandleEnvironmentVariableReadEvent(EnvironmentVariableReadEventArgs eventArgs)
+    private void HandleEnvironmentVariableReadEvent(ExtendedEnvironmentVariableReadEventArgs eventArgs)
         => _buildCheckManager.ProcessEvaluationEventArgs(
                 _analyzerContextFactory.CreateAnalysisContext(GetBuildEventContext(eventArgs)),
                 eventArgs);
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 075dc3bc164..1d8202e65d0 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -328,12 +328,13 @@ public void ProcessEvaluationFinishedEventArgs(
             => _buildEventsProcessor
                 .ProcessEvaluationFinishedEventArgs(analysisContext, evaluationFinishedEventArgs);
 
-        public void ProcessEvaluationEventArgs(IAnalysisContext analysisContext, EnvironmentVariableReadEventArgs projectEvaluationEventArgs)
+        public void ProcessEvaluationEventArgs(IAnalysisContext analysisContext, ExtendedEnvironmentVariableReadEventArgs projectEvaluationEventArgs)
         {
-            if (projectEvaluationEventArgs is EnvironmentVariableReadEventArgs evr)
+            if (projectEvaluationEventArgs is ExtendedEnvironmentVariableReadEventArgs evr)
             {
                 _buildEventsProcessor.ProcessEnvironmentVariableReadEventArgs(
                     evr.EnvironmentVariableName,
+                    evr.Message,
                     evr.File,
                     evr.LineNumber,
                     evr.ColumnNumber);
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index 42922c7e886..a0af931ad2d 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -49,7 +49,7 @@ public TaskKey(BuildEventContext context)
 
     private readonly SimpleProjectRootElementCache _cache = new SimpleProjectRootElementCache();
     private readonly BuildCheckCentralContext _buildCheckCentralContext = buildCheckCentralContext;
-    private Dictionary<string, (string File, int Line, int Column)> _evaluatedEnvironmentVariables = new Dictionary<string, (string File, int Line, int Column)>();
+    private Dictionary<string, (string EnvVarValue, string File, int Line, int Column)> _evaluatedEnvironmentVariables = new Dictionary<string, (string EnvVarValue, string File, int Line, int Column)>();
 
     /// <summary>
     /// Keeps track of in-flight tasks. Keyed by task ID as passed in <see cref="BuildEventContext.TaskId"/>.
@@ -86,11 +86,11 @@ internal void ProcessEvaluationFinishedEventArgs(
     /// <summary>
     /// The method collects events associated with the used environment variables in projects.
     /// </summary>
-    internal void ProcessEnvironmentVariableReadEventArgs(string environmentVariableName, string file, int line, int column)
+    internal void ProcessEnvironmentVariableReadEventArgs(string envVarName, string envVarValue, string file, int line, int column)
     {
-        if (!_evaluatedEnvironmentVariables.ContainsKey(environmentVariableName))
+        if (!_evaluatedEnvironmentVariables.ContainsKey(envVarName))
         {
-            _evaluatedEnvironmentVariables.Add(environmentVariableName, (file, line, column));
+            _evaluatedEnvironmentVariables.Add(envVarName, (envVarValue, file, line, column));
         }
     }
 
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index a6526b7d2ab..910aa53f1bd 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -41,7 +41,7 @@ void ProcessEvaluationFinishedEventArgs(
 
     void ProcessEvaluationEventArgs(
         IAnalysisContext analysisContext,
-        EnvironmentVariableReadEventArgs envVariableReadEventArgs);
+        ExtendedEnvironmentVariableReadEventArgs envVariableReadEventArgs);
 
     void ProcessTaskStartedEventArgs(
         IAnalysisContext analysisContext,
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index 5080118bba0..62cd76e4ede 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -89,6 +89,6 @@ public void EndTaskInvocation(BuildCheckDataSource buildCheckDataSource, TaskFin
     public void ProcessTaskParameter(BuildCheckDataSource buildCheckDataSource, TaskParameterEventArgs eventArg)
     { }
 
-    public void ProcessEvaluationEventArgs(IAnalysisContext analysisContext, EnvironmentVariableReadEventArgs projectEvaluationEventArgs)
+    public void ProcessEvaluationEventArgs(IAnalysisContext analysisContext, ExtendedEnvironmentVariableReadEventArgs projectEvaluationEventArgs)
     { }
 }
diff --git a/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs b/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
index ee70f02a2b6..78fd0d38a42 100644
--- a/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
+++ b/src/Build/BuildCheck/OM/EvaluatedPropertiesAnalysisData.cs
@@ -14,7 +14,7 @@ public class EvaluatedPropertiesAnalysisData : AnalysisData
     internal EvaluatedPropertiesAnalysisData(
             string projectFilePath,
             IReadOnlyDictionary<string, string> evaluatedProperties,
-            IReadOnlyDictionary<string, (string File, int Line, int Column)> evaluatedEnvironmentVariables)
+            IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> evaluatedEnvironmentVariables)
             : base(projectFilePath)
     {
         EvaluatedProperties = evaluatedProperties;
@@ -23,5 +23,5 @@ internal EvaluatedPropertiesAnalysisData(
 
     public IReadOnlyDictionary<string, string> EvaluatedProperties { get; }
 
-    public IReadOnlyDictionary<string, (string File, int Line, int Column)> EvaluatedEnvironmentVariables { get; }
+    public IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)> EvaluatedEnvironmentVariables { get; }
 }
diff --git a/src/Build/Definition/ProjectProperty.cs b/src/Build/Definition/ProjectProperty.cs
index 6a05f7dadbc..fbde6a8f62b 100644
--- a/src/Build/Definition/ProjectProperty.cs
+++ b/src/Build/Definition/ProjectProperty.cs
@@ -19,7 +19,7 @@ namespace Microsoft.Build.Evaluation
     /// An evaluated design-time property
     /// </summary>
     [DebuggerDisplay("{Name}={EvaluatedValue} [{UnevaluatedValue}]")]
-    public abstract class ProjectProperty : IKeyed, IValued, IProperty, IEquatable<ProjectProperty>
+    public abstract class ProjectProperty : IKeyed, IValued, IProperty2, IEquatable<ProjectProperty>
     {
         /// <summary>
         /// Project that this property lives in.
@@ -110,6 +110,19 @@ string IProperty.EvaluatedValueEscaped
             }
         }
 
+        string IProperty2.GetEvaluatedValueEscaped(IElementLocation location)
+        {
+            if (this is EnvironmentDerivedProjectProperty environmentProperty && environmentProperty.loggingContext is { IsValid: true } loggingContext && !environmentProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)
+            {
+                ExtendedEnvironmentVariableReadEventArgs args = new(Name, EvaluatedValueEscapedInternal, location.File, location.Line, location.Column);
+                args.BuildEventContext = loggingContext.BuildEventContext;
+                loggingContext.LogBuildEvent(args);
+                environmentProperty._loggedEnvProperty = true;
+            }
+
+            return EvaluatedValueEscapedInternal;
+        }
+
         /// <summary>
         /// Gets or sets the unevaluated property value.
         /// Updates the evaluated value in the project, although this is not sure to be correct until re-evaluation.
diff --git a/src/Build/Evaluation/ConditionEvaluator.cs b/src/Build/Evaluation/ConditionEvaluator.cs
index f7918c19052..2e4681b953c 100644
--- a/src/Build/Evaluation/ConditionEvaluator.cs
+++ b/src/Build/Evaluation/ConditionEvaluator.cs
@@ -189,7 +189,7 @@ internal static bool EvaluateCondition<P, I>(
             IFileSystem fileSystem,
             LoggingContext? loggingContext,
             ProjectRootElementCacheBase? projectRootElementCache = null)
-            where P : class, IProperty
+            where P : class, IProperty2
             where I : class, IItem
         {
             return EvaluateConditionCollectingConditionedProperties(
@@ -223,7 +223,7 @@ internal static bool EvaluateConditionCollectingConditionedProperties<P, I>(
             IFileSystem fileSystem,
             LoggingContext? loggingContext,
             ProjectRootElementCacheBase? projectRootElementCache = null)
-            where P : class, IProperty
+            where P : class, IProperty2
             where I : class, IItem
         {
             ErrorUtilities.VerifyThrowArgumentNull(condition, nameof(condition));
@@ -384,7 +384,7 @@ internal interface IConditionEvaluationState
         /// is stateless and reusable
         /// </summary>
         internal class ConditionEvaluationState<P, I> : IConditionEvaluationState
-            where P : class, IProperty
+            where P : class, IProperty2
             where I : class, IItem
         {
             private readonly Expander<P, I> _expander;
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index b82733a9d8e..45441510d73 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -54,7 +54,7 @@ namespace Microsoft.Build.Evaluation
     /// This class could be improved to do partial (minimal) reevaluation: at present we wipe all state and start over.
     /// </remarks>
     internal class Evaluator<P, I, M, D>
-        where P : class, IProperty, IEquatable<P>, IValued
+        where P : class, IProperty2, IEquatable<P>, IValued
         where I : class, IItem<M>, IMetadataTable
         where M : class, IMetadatum
         where D : class, IItemDefinition<M>
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index c64d877596a..b3248dfcd14 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -130,7 +130,7 @@ internal enum ExpanderOptions
     /// <typeparam name="P">Type of the properties used.</typeparam>
     /// <typeparam name="I">Type of the items used.</typeparam>
     internal class Expander<P, I>
-        where P : class, IProperty
+        where P : class, IProperty2
         where I : class, IItem
     {
         /// <summary>
@@ -1126,7 +1126,7 @@ _metadata is IItemTypeDefinition itemMetadata &&
         /// </remarks>
         /// <typeparam name="T">Type of the properties used to expand the expression.</typeparam>
         private static class PropertyExpander<T>
-            where T : class, IProperty
+            where T : class, IProperty2
         {
             /// <summary>
             /// This method takes a string which may contain any number of
@@ -1583,7 +1583,7 @@ private static object LookupProperty(IPropertyProvider<T> properties, string pro
                         environmentDerivedProperty.loggingContext = propertiesUseTracker.LoggingContext;
                     }
 
-                    propertyValue = property.EvaluatedValueEscaped;
+                    propertyValue = property.GetEvaluatedValueEscaped(elementLocation);
                 }
 
                 return propertyValue;
@@ -3153,7 +3153,7 @@ private static class RegularExpressions
         }
 
         private struct FunctionBuilder<T>
-            where T : class, IProperty
+            where T : class, IProperty2
         {
             /// <summary>
             /// The type of this function's receiver.
@@ -3221,7 +3221,7 @@ internal readonly Function<T> Build()
         /// </summary>
         /// <typeparam name="T">Type of the properties used to expand the expression.</typeparam>
         internal class Function<T>
-            where T : class, IProperty
+            where T : class, IProperty2
         {
             /// <summary>
             /// The type of this function's receiver.
diff --git a/src/Build/Evaluation/IProperty2.cs b/src/Build/Evaluation/IProperty2.cs
new file mode 100644
index 00000000000..2faabc0c060
--- /dev/null
+++ b/src/Build/Evaluation/IProperty2.cs
@@ -0,0 +1,12 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Evaluation
+{
+    internal interface IProperty2 : IProperty
+    {
+        string GetEvaluatedValueEscaped(IElementLocation location);
+    }
+}
diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index e9b381b5aa1..ca2d1b530c9 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.Evaluation
     ///     provides some operations over them (like matching items against a given ItemSpec)
     /// </summary>
     internal class ItemSpec<P, I>
-        where P : class, IProperty
+        where P : class, IProperty2
         where I : class, IItem, IMetadataTable
     {
         internal readonly struct ReferencedItem
@@ -569,7 +569,9 @@ public override IEnumerable<string> GetReferencedItems()
     /// </summary>
     /// <typeparam name="P">Property type</typeparam>
     /// <typeparam name="I">Item type</typeparam>
-    internal sealed class MetadataTrie<P, I> where P : class, IProperty where I : class, IItem, IMetadataTable
+    internal sealed class MetadataTrie<P, I>
+        where P : class, IProperty2
+        where I : class, IItem, IMetadataTable
     {
         private readonly Dictionary<string, MetadataTrie<P, I>> _children;
         private readonly Func<string, string> _normalize;
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index 4b658abbecf..525e7c58ab3 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -24,7 +24,7 @@
 namespace Microsoft.Build.Evaluation
 {
     internal partial class LazyItemEvaluator<P, I, M, D>
-        where P : class, IProperty, IEquatable<P>, IValued
+        where P : class, IProperty2, IEquatable<P>, IValued
         where I : class, IItem<M>, IMetadataTable
         where M : class, IMetadatum
         where D : class, IItemDefinition<M>
diff --git a/src/Build/Instance/ProjectPropertyInstance.cs b/src/Build/Instance/ProjectPropertyInstance.cs
index 9c2d9ed766e..be0305ebb77 100644
--- a/src/Build/Instance/ProjectPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyInstance.cs
@@ -21,7 +21,7 @@ namespace Microsoft.Build.Execution
     /// Added and removed via methods on the ProjectInstance object.
     /// </summary>
     [DebuggerDisplay("{_name}={_escapedValue}")]
-    public class ProjectPropertyInstance : IKeyed, IValued, IProperty, IEquatable<ProjectPropertyInstance>, ITranslatable
+    public class ProjectPropertyInstance : IKeyed, IValued, IProperty2, IEquatable<ProjectPropertyInstance>, ITranslatable
     {
         /// <summary>
         /// Name of the property
@@ -100,8 +100,22 @@ string IProperty.EvaluatedValueEscaped
                 return _escapedValue;
             }
         }
+
+        string IProperty2.GetEvaluatedValueEscaped(IElementLocation location)
+        {
+            if (this is EnvironmentDerivedProjectPropertyInstance envProperty && envProperty.loggingContext?.IsValid == true && !envProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)
+            {
+                ExtendedEnvironmentVariableReadEventArgs args = new(Name, _escapedValue, location.File, location.Line, location.Column);
+                args.BuildEventContext = envProperty.loggingContext.BuildEventContext;
+                envProperty.loggingContext.LogBuildEvent(args);
+                envProperty._loggedEnvProperty = true;
+            }
+
+            return _escapedValue;
+        }
+
         /// <summary>
-        /// Implementation of IKeyed exposing the property name
+        /// Implementation of IKeyed exposing the property name.
         /// </summary>
         [DebuggerBrowsable(DebuggerBrowsableState.Never)]
         string IKeyed.Key => Name;
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 598819b3cd4..393e459c0c8 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -247,7 +247,7 @@ internal IDictionary<RegisteredTaskIdentity, List<RegisteredTaskRecord>> TaskReg
         /// <summary>
         /// Evaluate the usingtask and add the result into the data passed in
         /// </summary>
-        /// <typeparam name="P">A type derived from IProperty</typeparam>
+        /// <typeparam name="P">A type derived from IProperty2</typeparam>
         /// <typeparam name="I">A type derived from IItem</typeparam>
         internal static void InitializeTaskRegistryFromUsingTaskElements<P, I>(
             LoggingContext loggingContext,
@@ -256,7 +256,7 @@ internal static void InitializeTaskRegistryFromUsingTaskElements<P, I>(
             Expander<P, I> expander,
             ExpanderOptions expanderOptions,
             IFileSystem fileSystem)
-            where P : class, IProperty
+            where P : class, IProperty2
             where I : class, IItem
         {
             foreach ((ProjectUsingTaskElement projectUsingTaskXml, string directoryOfImportingFile) registration in registrations)
@@ -279,7 +279,7 @@ internal static void InitializeTaskRegistryFromUsingTaskElements<P, I>(
         /// <summary>
         /// Evaluate the usingtask and add the result into the data passed in
         /// </summary>
-        /// <typeparam name="P">A type derived from IProperty</typeparam>
+        /// <typeparam name="P">A type derived from IProperty2</typeparam>
         /// <typeparam name="I">A type derived from IItem</typeparam>
         private static void RegisterTasksFromUsingTaskElement
             <P, I>(
@@ -290,7 +290,7 @@ private static void RegisterTasksFromUsingTaskElement
             Expander<P, I> expander,
             ExpanderOptions expanderOptions,
             IFileSystem fileSystem)
-            where P : class, IProperty
+            where P : class, IProperty2
             where I : class, IItem
         {
             ErrorUtilities.VerifyThrowInternalNull(directoryOfImportingFile, nameof(directoryOfImportingFile));
@@ -1610,7 +1610,7 @@ internal bool TaskBodyEvaluated
                 /// <typeparam name="P">Property type</typeparam>
                 /// <typeparam name="I">Item Type</typeparam>
                 internal void ExpandUsingTask<P, I>(ProjectUsingTaskElement projectUsingTaskXml, Expander<P, I> expander, ExpanderOptions expanderOptions)
-                    where P : class, IProperty
+                    where P : class, IProperty2
                     where I : class, IItem
                 {
                     ErrorUtilities.VerifyThrowArgumentNull(projectUsingTaskXml, nameof(projectUsingTaskXml));
@@ -1636,7 +1636,7 @@ internal void ExpandUsingTask<P, I>(ProjectUsingTaskElement projectUsingTaskXml,
                 /// <typeparam name="P">IProperttyTypes</typeparam>
                 /// <typeparam name="I">IItems</typeparam>
                 private void EvaluateTaskBody<P, I>(Expander<P, I> expander, ProjectUsingTaskBodyElement taskElement, ExpanderOptions expanderOptions)
-                    where P : class, IProperty
+                    where P : class, IProperty2
                     where I : class, IItem
                 {
                     bool evaluate;
@@ -1672,7 +1672,7 @@ private void EvaluateTaskBody<P, I>(Expander<P, I> expander, ProjectUsingTaskBod
                 /// <typeparam name="P">Property type</typeparam>
                 /// <typeparam name="I">Item types</typeparam>
                 private void ParseUsingTaskParameterGroupElement<P, I>(UsingTaskParameterGroupElement usingTaskParameterGroup, Expander<P, I> expander, ExpanderOptions expanderOptions)
-                    where P : class, IProperty
+                    where P : class, IProperty2
                     where I : class, IItem
                 {
                     _usingTaskParameters ??= new Dictionary<string, TaskPropertyInfo>(StringComparer.OrdinalIgnoreCase);
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 363a6330ddd..17cba8792a1 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -158,6 +158,7 @@
     <Compile Include="FileSystem\*.cs" />
     <Compile Include="BuildCheck\**\*.cs" />
     <Compile Include="Evaluation\IItemTypeDefinition.cs" />
+    <Compile Include="Evaluation\IProperty2.cs" />
     <Compile Include="Evaluation\PropertiesUseTracker.cs" />
     <Compile Include="FileAccess\DesiredAccess.cs" />
     <Compile Include="FileAccess\FileAccessData.cs" />
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index cd445e70dbe..65147394641 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -154,10 +154,12 @@ private void PrepareSampleProjectsAndConfig(
         projectFile = _env.CreateFile(workFolder, "FooBar.csproj", contents);
         TransientTestFile projectFile2 = _env.CreateFile(workFolder, "FooBar-Copy.csproj", contents2);
 
+        string configContent = File.ReadAllText(Path.Combine(TestAssetsRootPath, testAssetsFolderName, ".editorconfig")).Replace("BC0101Severity", BC0101Severity);
+
         TransientTestFile config = _env.CreateFile(
                       workFolder,
                       ".editorconfig",
-                      File.ReadAllText(Path.Combine(TestAssetsRootPath, testAssetsFolderName, ".editorconfig")));
+                      configContent);
 
         // OSX links /var into /private, which makes Path.GetTempPath() return "/var..." but Directory.GetCurrentDirectory return "/private/var...".
         // This discrepancy breaks path equality checks in analyzers if we pass to MSBuild full path to the initial project.
diff --git a/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs b/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
new file mode 100644
index 00000000000..664c2c9a17f
--- /dev/null
+++ b/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
@@ -0,0 +1,43 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+#nullable disable
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// Arguments for the environment variable read event.
+    /// </summary>
+    [Serializable]
+    public class ExtendedEnvironmentVariableReadEventArgs : BuildMessageEventArgs
+    {
+        /// <summary>
+        /// Initializes an instance of the ExtendedEnvironmentVariableReadEventArgs class.
+        /// </summary>
+        /// <param name="envVarName">The name of the environment variable that was read.</param>
+        /// <param name="envVarValue">The value of the environment variable that was read.</param>
+        /// <param name="file">file associated with the event</param>
+        /// <param name="line">line number (0 if not applicable)</param>
+        /// <param name="column">column number (0 if not applicable)</param>
+        /// <param name="helpKeyword">Help keyword.</param>
+        /// <param name="senderName">The name of the sender of the event.</param>
+        /// <param name="importance">The importance of the message.</param>
+        public ExtendedEnvironmentVariableReadEventArgs(
+            string envVarName,
+            string envVarValue,
+            string file,
+            int line,
+            int column,
+            string helpKeyword = null,
+            string senderName = null,
+            MessageImportance importance = MessageImportance.Low)
+            : base("", "", file, line, column, 0, 0, envVarValue, helpKeyword, senderName, importance) => EnvironmentVariableName = envVarName;
+
+        /// <summary>
+        /// The name of the environment variable that was read.
+        /// </summary>
+        public string EnvironmentVariableName { get; set; }
+    }
+}
