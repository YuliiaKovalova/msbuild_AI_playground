diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 272f0df9705..483397e7298 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2979,7 +2979,7 @@ private ILoggingService CreateLoggingService(IEnumerable<ILogger> loggers, IEnum
                         loggerClassName: typeof(ConfigurableForwardingLogger).FullName,
                         loggerAssemblyName: typeof(ConfigurableForwardingLogger).GetTypeInfo().Assembly.GetName().FullName,
                         loggerAssemblyFile: null,
-                        loggerSwitchParameters: "PROJECTSTARTEDEVENT;PROJECTFINISHEDEVENT",
+                        loggerSwitchParameters: "PROJECTSTARTEDEVENT;PROJECTFINISHEDEVENT;FORWARDPROJECTCONTEXTEVENTS",
                         verbosity: LoggerVerbosity.Quiet);
 
                     ForwardingLoggerRecord[] forwardingLogger = { new ForwardingLoggerRecord(new NullLogger(), forwardingLoggerDescription) };
diff --git a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
index 65a7ccca8ff..0d97dd41083 100644
--- a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
+++ b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
@@ -114,12 +114,21 @@ private void ParseParameters()
                     }
                 }
                 // Setting events to forward on the commandline will override the verbosity and other switches such as
-                // showPerfSummand and ShowSummary
+                // showPerfSummary and ShowSummary
                 if (_forwardingSetFromParameters)
                 {
                     _showPerfSummary = false;
                     _showSummary = true;
                 }
+
+                if (_forwardProjectContext)
+                {
+                    // We can't know whether the project items needed to find ForwardProjectContextDescription
+                    // will be set on ProjectStarted or ProjectEvaluationFinished because we don't know
+                    // all of the other loggers that will be attached. So turn both on.
+                    _forwardingTable[ProjectStartedEventDescription] = 1;
+                    _forwardingTable[ProjectEvaluationFinishedEventDescription] = 1;
+                }
             }
         }
 
@@ -151,6 +160,10 @@ private void ApplyParameter(string parameterName)
             {
                 _showCommandLine = true;
             }
+            else if (string.Equals(parameterName, ForwardProjectContextDescription, StringComparison.OrdinalIgnoreCase))
+            {
+                _forwardProjectContext = true;
+            }
         }
 
         /// <summary>
@@ -545,6 +558,7 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
         private const string PerformanceSummaryDescription = "PERFORMANCESUMMARY";
         private const string NoSummaryDescription = "NOSUMMARY";
         private const string ShowCommandLineDescription = "SHOWCOMMANDLINE";
+        private const string ForwardProjectContextDescription = "FORWARDPROJECTCONTEXTEVENTS";
 
         #region Per-build Members
 
@@ -566,6 +580,12 @@ private bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity)
         /// </summary>
         private bool _forwardingSetFromParameters;
 
+        /// <summary>
+        /// Indicates if the events to forward should include project context events, if not
+        /// overridden by individual-event forwarding in <see cref="_forwardingSetFromParameters"/>.
+        /// </summary>
+        private bool _forwardProjectContext = false;
+
         /// <summary>
         /// Console logger should show error and warning summary at the end of build?
         /// </summary>
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index 14344b83ba1..43b90b55d98 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -2006,8 +2006,8 @@ public void ProcessConsoleLoggerSwitches()
                 "Expected parameter in logger to match parameters passed in",
                 StringCompareShould.IgnoreCase);
             distributedLogger.ForwardingLoggerDescription.LoggerSwitchParameters.ShouldBe(
-                "SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;Parameter;Parameter",
-                "Expected parameter in logger to match parameter passed in",
+                "SHOWPROJECTFILE=TRUE;Parameter1;Parameter;;;Parameter;Parameter;FORWARDPROJECTCONTEXTEVENTS",
+                "Expected parameter in logger to match parameter passed in + FORWARDPROJECTCONTEXTEVENTS",
                 StringCompareShould.IgnoreCase);
         }
         #endregion
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index e28ca074553..2895af63159 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -280,7 +280,7 @@ private static void AppendOutputFile(string path, long elapsedTime)
         /// Also, the strings are not localized.
         /// Before execution, this is called with initialize only, causing counters to get called with NextValue() to
         /// initialize them.
-        /// </comments>         
+        /// </comments>
         private static void DumpCounters(bool initializeOnly)
         {
             Process currentProcess = Process.GetCurrentProcess();
@@ -305,7 +305,7 @@ private static void DumpCounters(bool initializeOnly)
             // Generally, the instance names, such as "msbuild" and "msbuild#2" are non deterministic; we want this process.
             // Don't use the "ID Process" counter out of the "Process" category, as it doesn't use the same naming scheme
             // as the .NET counters. However, the "Process ID" counter out of the ".NET CLR Memory" category apparently uses
-            // the same scheme as the other .NET categories.            
+            // the same scheme as the other .NET categories.
             string currentInstance = null;
             PerformanceCounterCategory processCategory = new PerformanceCounterCategory("Process");
             foreach (string instance in processCategory.GetInstanceNames())
@@ -334,7 +334,7 @@ private static void DumpCounters(bool initializeOnly)
 #if FEATURE_PERFORMANCE_COUNTERS
         /// <summary>
         /// Dumps all counters in the category
-        /// </summary>        
+        /// </summary>
         private static void DumpAllInCategory(string currentInstance, PerformanceCounterCategory category, bool initializeOnly)
         {
             if (category.CategoryName.IndexOf("remoting", StringComparison.OrdinalIgnoreCase) != -1) // not interesting
@@ -371,7 +371,7 @@ private static void DumpAllInCategory(string currentInstance, PerformanceCounter
 
         /// <summary>
         /// Dumps one counter
-        /// </summary>          
+        /// </summary>
         private static void DumpCounter(PerformanceCounter counter, bool initializeOnly)
         {
             try
@@ -386,7 +386,7 @@ private static void DumpCounter(PerformanceCounter counter, bool initializeOnly)
                 if (!initializeOnly)
                 {
                     string friendlyCounterType = GetFriendlyCounterType(counter.CounterType, counter.CounterName);
-                    
+
                     // At least some (such as % in GC; maybe all) "%" counters are already multiplied by 100. So we don't do that here.
 
                     // Show decimal places if meaningful
@@ -404,7 +404,7 @@ private static void DumpCounter(PerformanceCounter counter, bool initializeOnly)
 
         /// <summary>
         /// Gets a friendly representation of the counter units
-        /// </summary>        
+        /// </summary>
         private static string GetFriendlyCounterType(PerformanceCounterType type, string name)
         {
             if (name.IndexOf("bytes", StringComparison.OrdinalIgnoreCase) != -1)
@@ -611,7 +611,7 @@ string[] commandLine
                     }
                     if (preprocessWriter != null && !BuildEnvironmentHelper.Instance.RunningTests)
                     {
-                        // Indicate to the engine that it can NOT toss extraneous file content: we want to 
+                        // Indicate to the engine that it can NOT toss extraneous file content: we want to
                         // see that in preprocessing/debugging
                         Environment.SetEnvironmentVariable("MSBUILDLOADALLFILESASWRITEABLE", "1");
                     }
@@ -864,7 +864,7 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs
             // The OS takes a lock in
             // kernel32.dll!_SetConsoleCtrlHandler, so if a task
             // waits for that lock somehow before quitting, it would hang
-            // because we're in it here. One way a task can end up here is 
+            // because we're in it here. One way a task can end up here is
             // by calling Microsoft.Win32.SystemEvents.Initialize.
             // So do our work asynchronously so we can return immediately.
             // We're already on a threadpool thread anyway.
@@ -1070,7 +1070,7 @@ string[] commandLine
                 }
 
 #if FEATURE_XML_SCHEMA_VALIDATION
-                // If the user has requested that the schema be validated, do that here. 
+                // If the user has requested that the schema be validated, do that here.
                 if (needToValidateProject && !FileUtilities.IsSolutionFilename(projectFile))
                 {
                     Microsoft.Build.Evaluation.Project project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);
@@ -1084,7 +1084,7 @@ string[] commandLine
                     ProjectSchemaValidationHandler.VerifyProjectSchema(projectFile, schemaFile, toolset.ToolsPath);
 
                     // If there are schema validation errors, an InitializationException is thrown, so if we get here,
-                    // we can safely assume that the project successfully validated. 
+                    // we can safely assume that the project successfully validated.
                     projectCollection.UnloadProject(project);
                 }
 #endif
@@ -1152,7 +1152,7 @@ string[] commandLine
                     {
                         parameters.MemoryUseLimit = Convert.ToInt32(memoryUseLimit, CultureInfo.InvariantCulture);
 
-                        // The following ensures that when we divide the use by node count to get the per-limit amount, we always end up with a 
+                        // The following ensures that when we divide the use by node count to get the per-limit amount, we always end up with a
                         // positive value - otherwise setting it too low will result in a zero, which will enable only the default cache behavior
                         // which is not what is intended by using this environment variable.
                         if (parameters.MemoryUseLimit < parameters.MaxNodeCount)
@@ -1168,7 +1168,7 @@ string[] commandLine
                     IEnumerable<BuildManager.DeferredBuildMessage> messagesToLogInBuildLoggers = null;
                     if (!Traits.Instance.EscapeHatches.DoNotSendDeferredMessagesToBuildManager)
                     {
-                        var commandLineString = 
+                        var commandLineString =
 #if FEATURE_GET_COMMANDLINE
                             commandLine;
 #else
@@ -1266,7 +1266,7 @@ string[] commandLine
                             }
                             else
                             {
-                                // After throwing again below the stack will be reset. Make certain we log everything we 
+                                // After throwing again below the stack will be reset. Make certain we log everything we
                                 // can now
                                 Console.WriteLine(AssemblyResources.GetString("FatalError"));
 #if DEBUG
@@ -1591,7 +1591,7 @@ internal static void GatherCommandLineSwitches(List<string> commandLineArgs, Com
 
                         // Special case: for the switches "/m" (or "/maxCpuCount") and "/bl" (or "/binarylogger") we wish to pretend we saw a default argument
                         // This allows a subsequent /m:n on the command line to override it.
-                        // We could create a new kind of switch with optional parameters, but it's a great deal of churn for this single case. 
+                        // We could create a new kind of switch with optional parameters, but it's a great deal of churn for this single case.
                         // Note that if no "/m" or "/maxCpuCount" switch -- either with or without parameters -- is present, then we still default to 1 cpu
                         // for backwards compatibility.
                         if (string.IsNullOrEmpty(switchParameters))
@@ -2825,7 +2825,7 @@ private static string[] ProcessTargetSwitch(string[] parameters)
         private static readonly char[] s_propertyValueSeparator = MSBuildConstants.EqualsChar;
 
         /// <summary>
-        /// This is a set of wildcard chars which can cause a file extension to be invalid 
+        /// This is a set of wildcard chars which can cause a file extension to be invalid
         /// </summary>
         private static readonly char[] s_wildcards = MSBuildConstants.WildcardChars;
 
@@ -2839,7 +2839,7 @@ private static string ProcessToolsVersionSwitch(string[] parameters)
         {
             if (parameters.Length > 0)
             {
-                // We don't do any validation on the value of the ToolsVersion here, since we don't 
+                // We don't do any validation on the value of the ToolsVersion here, since we don't
                 // know what a valid value looks like.  The engine will take care of this later.
                 return parameters[parameters.Length - 1];
             }
@@ -2931,7 +2931,7 @@ out bool enableProfiler
         /// Parameters for a particular logger may be passed in fragments that we have to aggregate: for example,
         ///   /flp:foo=bar;baz=biz /flp:boz=bez becomes "foo=bar;baz=biz;boz=bez"
         /// We are going to aggregate the LoggerParameters into one LoggerParameters string
-        /// to do this we must first trim off the ; from the start and the end of the strings as 
+        /// to do this we must first trim off the ; from the start and the end of the strings as
         /// this would interfere with the use of string.Join by possibly having ;; at the beginning or end of a
         /// logger parameter
         /// </summary>
@@ -2963,7 +2963,7 @@ private static void ProcessFileLoggers(string[][] groupedFileLoggerParameters, L
 
                 string fileParameters = "SHOWPROJECTFILE=TRUE;";
                 // Use a default log file name of "msbuild.log", "msbuild1.log", "msbuild2.log", etc; put this first on the parameter
-                // list so that any supplied log file parameter will override it 
+                // list so that any supplied log file parameter will override it
                 if (i == 0)
                 {
                     fileParameters += "logfile=msbuild.log;";
@@ -3041,7 +3041,7 @@ List<ILogger> loggers
             // the console logger is always active, unless specifically disabled
             if (!noConsoleLogger)
             {
-                // A central logger will be created for single proc and multiproc 
+                // A central logger will be created for single proc and multiproc
                 ConsoleLogger logger = new ConsoleLogger(verbosity);
                 string consoleParameters = "SHOWPROJECTFILE=TRUE;";
 
@@ -3073,7 +3073,7 @@ List<ILogger> loggers
         }
 
         /// <summary>
-        /// Returns a DistributedLoggerRecord containing this logger and a ConfigurableForwardingLogger. 
+        /// Returns a DistributedLoggerRecord containing this logger and a ConfigurableForwardingLogger.
         /// Looks at the logger's parameters for any verbosity parameter in order to make sure it is setting up the ConfigurableForwardingLogger
         /// with the verbosity level that the logger will actually use.
         /// </summary>
@@ -3089,6 +3089,11 @@ private static DistributedLoggerRecord CreateForwardingLoggerRecord(ILogger logg
                 effectiveVerbosity = ProcessVerbositySwitch(verbosityValue);
             }
 
+            // Ensure that the forwarding logger is passed evaluation-finished
+            // and project-started events unless the user has specified individual
+            // events of interest.
+            loggerParameters += ";FORWARDPROJECTCONTEXTEVENTS";
+
             // Gets the currently loaded assembly in which the specified class is defined
             Assembly engineAssembly = typeof(ProjectCollection).GetTypeInfo().Assembly;
             string loggerClassName = "Microsoft.Build.Logging.ConfigurableForwardingLogger";
@@ -3213,7 +3218,7 @@ private static string ExtractAnyParameterValue(string parameter)
         /// </summary>
         /// <remarks>
         /// Internal for unit testing only
-        /// </remarks> 
+        /// </remarks>
         /// <param name="value"></param>
         /// <returns>The logger verbosity level.</returns>
         internal static LoggerVerbosity ProcessVerbositySwitch(string value)
@@ -3556,7 +3561,7 @@ private static string ProcessValidateSwitch(string[] parameters)
         }
 
         /// <summary>
-        /// Given an invalid ToolsVersion string and the collection of valid toolsets, 
+        /// Given an invalid ToolsVersion string and the collection of valid toolsets,
         /// throws an InitializationException with the appropriate message.
         /// </summary>
         private static void ThrowInvalidToolsVersionInitializationException(IEnumerable<Toolset> toolsets, string toolsVersion)
