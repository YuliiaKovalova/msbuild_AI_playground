diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 94c77e619f9..0ac572eae73 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -369,7 +369,7 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo
 
             if (this.TaskInstance is IIncrementalTask incrementalTask)
             {
-                incrementalTask.Question = _buildComponentHost.BuildParameters.Question;
+                incrementalTask.FailIfNotIncremental = _buildComponentHost.BuildParameters.Question;
             }
 
             if (taskInitialized)
diff --git a/src/Framework/IIncrementalTask.cs b/src/Framework/IIncrementalTask.cs
index feb30733575..23d5b508d47 100644
--- a/src/Framework/IIncrementalTask.cs
+++ b/src/Framework/IIncrementalTask.cs
@@ -6,10 +6,14 @@
 namespace Microsoft.Build.Framework
 {
     /// <summary>
-    /// Interface for tasks which is incremental
+    /// Interface for tasks which is supports incrementality.
     /// </summary>
+    /// <remarks>The tasks implementing this interface should return false to stop the build when in <see cref="FailIfNotIncremental"/> is true and task is not fully incremental.  Try to provide helpful information diagnose incremental behavior.</remarks>
     public interface IIncrementalTask
     {
-        bool Question { set; }
+        /// <summary>
+        /// Set by MSBuild when Question flag is used.
+        /// </summary>
+        bool FailIfNotIncremental { set; }
     }
 }
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index 89314eabd1f..c3632d8b48a 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -158,8 +158,8 @@ public void QuestionCopyFile()
                     DestinationFiles = destinationFiles,
                     UseHardlinksIfPossible = UseHardLinks,
                     UseSymboliclinksIfPossible = UseSymbolicLinks,
+                    FailIfNotIncremental = true,
                 };
-                t.Question = true;
 
                 Assert.False(t.Execute(m.CopyFile, _parallelismThreadCount));
 
@@ -218,8 +218,8 @@ public void QuestionCopyFileSameContent()
                     UseHardlinksIfPossible = UseHardLinks,
                     UseSymboliclinksIfPossible = UseSymbolicLinks,
                     SkipUnchangedFiles = true,
+                    FailIfNotIncremental = true,
                 };
-                t.Question = true;
                 Assert.True(t.Execute(m.CopyFile, _parallelismThreadCount));
 
                 // Expect for there to have been no copies.
@@ -269,8 +269,8 @@ public void QuestionCopyFileNotSameContent()
                     UseHardlinksIfPossible = UseHardLinks,
                     UseSymboliclinksIfPossible = UseSymbolicLinks,
                     SkipUnchangedFiles = true,
+                    FailIfNotIncremental = true,
                 };
-                t.Question = true;
 
                 Assert.False(t.Execute(m.CopyFile, _parallelismThreadCount));
 
diff --git a/src/Tasks.UnitTests/MakeDir_Tests.cs b/src/Tasks.UnitTests/MakeDir_Tests.cs
index a173dbd84a4..5f19c0d146e 100644
--- a/src/Tasks.UnitTests/MakeDir_Tests.cs
+++ b/src/Tasks.UnitTests/MakeDir_Tests.cs
@@ -184,7 +184,7 @@ public void QuestionCreateNewDirectory()
                 MakeDir t = new MakeDir();
                 MockEngine engine = new MockEngine();
                 t.BuildEngine = engine;
-                t.Question = true;
+                t.FailIfNotIncremental = true;
                 t.Directories = dirList;
 
                 bool success = t.Execute();
@@ -206,7 +206,7 @@ public void QuestionCreateNewDirectory()
 
                 // Question an existing directory should return true.
                 engine.Log = "";
-                t.Question = true;
+                t.FailIfNotIncremental = true;
                 success = t.Execute();
                 Assert.True(success);
 
diff --git a/src/Tasks.UnitTests/RemoveDir_Tests.cs b/src/Tasks.UnitTests/RemoveDir_Tests.cs
index f9102cdca37..c0dd5b24cc2 100644
--- a/src/Tasks.UnitTests/RemoveDir_Tests.cs
+++ b/src/Tasks.UnitTests/RemoveDir_Tests.cs
@@ -61,8 +61,8 @@ public void SimpleDelete()
                 {
                     Directories = list.ToArray(),
                     BuildEngine = new MockEngine(_output),
+                    FailIfNotIncremental = true,
                 };
-                t.Question = true;
                 t.Execute().ShouldBeFalse();
 
                 RemoveDir t2 = new RemoveDir()
@@ -83,8 +83,8 @@ public void SimpleDelete()
                 {
                     Directories = list.ToArray(),
                     BuildEngine = new MockEngine(_output),
+                    FailIfNotIncremental = true,
                 };
-                t3.Question = true;
                 t3.Execute().ShouldBeTrue();
             }
         }
diff --git a/src/Tasks.UnitTests/Touch_Tests.cs b/src/Tasks.UnitTests/Touch_Tests.cs
index 1ae983f0e2c..4a37da4ee33 100644
--- a/src/Tasks.UnitTests/Touch_Tests.cs
+++ b/src/Tasks.UnitTests/Touch_Tests.cs
@@ -342,7 +342,7 @@ public void QuestionTouchNonExisting()
             Touch t = new Touch();
             MockEngine engine = new MockEngine();
             t.BuildEngine = engine;
-            t.Question = true;
+            t.FailIfNotIncremental = true;
 
             t.Files = new ITaskItem[]
             {
@@ -368,7 +368,7 @@ public void QuestionTouchNonExistingAlwaysCreate()
             Touch t = new Touch();
             MockEngine engine = new MockEngine();
             t.BuildEngine = engine;
-            t.Question = true;
+            t.FailIfNotIncremental = true;
             t.AlwaysCreate = true;
             t.Files = new ITaskItem[]
             {
@@ -393,7 +393,7 @@ public void QuestionTouchExisting()
             Touch t = new Touch();
             MockEngine engine = new MockEngine();
             t.BuildEngine = engine;
-            t.Question = true;
+            t.FailIfNotIncremental = true;
             t.Files = new ITaskItem[]
             {
                 new TaskItem(myexisting_txt)
diff --git a/src/Tasks.UnitTests/Unzip_Tests.cs b/src/Tasks.UnitTests/Unzip_Tests.cs
index 4e413a0974b..c791d775fa2 100644
--- a/src/Tasks.UnitTests/Unzip_Tests.cs
+++ b/src/Tasks.UnitTests/Unzip_Tests.cs
@@ -67,7 +67,7 @@ public void CanUnzip()
                     OverwriteReadOnlyFiles = true,
                     SkipUnchangedFiles = false,
                     SourceFiles = new ITaskItem[] { new TaskItem(zipArchive.Path) },
-                    Question = true,
+                    FailIfNotIncremental = true,
                 };
                 unzip.Execute().ShouldBeFalse(() => _mockEngine.Log);
                 _mockEngine.Log = string.Empty;
@@ -80,7 +80,7 @@ public void CanUnzip()
                     OverwriteReadOnlyFiles = true,
                     SkipUnchangedFiles = false,
                     SourceFiles = new ITaskItem[] { new TaskItem(zipArchive.Path) },
-                    Question = false,
+                    FailIfNotIncremental = false,
                 };
                 unzip2.Execute().ShouldBeTrue(() => _mockEngine.Log);
 
@@ -95,7 +95,7 @@ public void CanUnzip()
                     OverwriteReadOnlyFiles = true,
                     SkipUnchangedFiles = true,
                     SourceFiles = new ITaskItem[] { new TaskItem(zipArchive.Path) },
-                    Question = true,
+                    FailIfNotIncremental = true,
                 };
                 unzip3.Execute().ShouldBeTrue(() => _mockEngine.Log);
             }
diff --git a/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs b/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
index b0029d1453f..85449beccfc 100644
--- a/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
+++ b/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
@@ -192,8 +192,8 @@ public void QuestionWriteLinesWriteOnlyWhenDifferentTest()
                     File = new TaskItem(file),
                     WriteOnlyWhenDifferent = true,
                     Lines = new ITaskItem[] { new TaskItem("File contents1") },
+                    FailIfNotIncremental = true,
                 };
-                a2.Question = true;
                 a2.Execute().ShouldBeTrue();
                 File.GetLastWriteTime(file).ShouldBe(writeTime, tolerance: TimeSpan.FromSeconds(1));
 
@@ -205,9 +205,8 @@ public void QuestionWriteLinesWriteOnlyWhenDifferentTest()
                     File = new TaskItem(file),
                     WriteOnlyWhenDifferent = true,
                     Lines = new ITaskItem[] { new TaskItem("File contents2") },
+                    FailIfNotIncremental = true,
                 };
-                a3.Question = true;
-
                 a3.Execute().ShouldBeFalse();
                 File.GetLastWriteTime(file).ShouldBe(writeTime, tolerance: TimeSpan.FromSeconds(1));
             }
diff --git a/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs b/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
index 31932e78da9..7fba132b2bd 100644
--- a/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
+++ b/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs
@@ -142,7 +142,7 @@ public override bool Execute()
             }
             else if (outputExists)
             {
-                // instead of writing, touch the output file
+                // if the file exists and the content is up to date, then touch the output file.
                 var now = DateTime.Now;
                 File.SetLastAccessTime(OutputAppConfigFile.ItemSpec, now);
                 File.SetLastWriteTime(OutputAppConfigFile.ItemSpec, now);
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 81a0f99a45a..f496dff7d1c 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1039,8 +1039,7 @@ public String DependsOnNETStandard
         [Output]
         public ITaskItem[] UnresolvedAssemblyConflicts => _unresolvedConflicts.ToArray();
 
-        public bool Question { get; set; }
-
+        public bool FailIfNotIncremental { get; set; }
 
         #endregion
         #region Logging
@@ -2054,7 +2053,7 @@ internal void WriteStateFile()
             }
             else if (!String.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
             {
-                if (Question)
+                if (FailIfNotIncremental)
                 {
                     Log.LogErrorFromResources("ResolveAssemblyReference.WritingCacheFile", _stateFile);
                     return;
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index 12f4a076a2a..1f10d2f535c 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -153,7 +153,7 @@ public Copy()
         /// </summary>
         public bool OverwriteReadOnlyFiles { get; set; }
 
-        public bool Question { get; set; }
+        public bool FailIfNotIncremental { get; set; }
 
         #endregion
 
@@ -258,7 +258,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)
             {
                 if (!FileSystems.Default.DirectoryExists(destinationFolder))
                 {
-                    if (Question)
+                    if (FailIfNotIncremental)
                     {
                         Log.LogError(CreatesDirectory, destinationFolder);
                         return false;
@@ -276,7 +276,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)
                 _directoriesKnownToExist.TryAdd(destinationFolder, true);
             }
 
-            if (Question)
+            if (FailIfNotIncremental)
             {
                 string sourceFilePath = FileUtilities.GetFullPathNoThrow(sourceFileState.Name);
                 string destinationFilePath = FileUtilities.GetFullPathNoThrow(destinationFileState.Name);
@@ -769,7 +769,7 @@ private bool DoCopyIfNecessary(FileState sourceFileState, FileState destinationF
                 {
                     MSBuildEventSource.Log.CopyUpToDateStop(destinationFileState.Name, false);
 
-                    if (Question)
+                    if (FailIfNotIncremental)
                     {
                         Log.LogError(FileComment, sourceFileState.Name, destinationFileState.Name);
                         success = false;
diff --git a/src/Tasks/Delete.cs b/src/Tasks/Delete.cs
index d73f652a7a3..0dbe2f78609 100644
--- a/src/Tasks/Delete.cs
+++ b/src/Tasks/Delete.cs
@@ -61,7 +61,8 @@ public ITaskItem[] Files
         /// Set question parameter to verify if this is incremental.
         /// </summary>
         /// <remarks></remarks>
-        public bool Question { get; set; }
+        public bool FailIfNotIncremental { get; set; }
+
         /// <summary>
         /// Verify that the inputs are correct.
         /// </summary>
@@ -120,7 +121,7 @@ public override bool Execute()
                     {
                         if (FileSystems.Default.FileExists(file.ItemSpec))
                         {
-                            if (Question)
+                            if (FailIfNotIncremental)
                             {
                                 Log.LogErrorFromResources("Delete.DeletingFile", file.ItemSpec);
                             }
diff --git a/src/Tasks/DownloadFile.cs b/src/Tasks/DownloadFile.cs
index e72dc796587..d35ad4c3069 100644
--- a/src/Tasks/DownloadFile.cs
+++ b/src/Tasks/DownloadFile.cs
@@ -65,8 +65,7 @@ public sealed class DownloadFile : TaskExtension, ICancelableTask, IIncrementalT
         /// </summary>
         public int Timeout { get; set; } = 100_000;
 
-
-        public bool Question { get; set; }
+        public bool FailIfNotIncremental { get; set; }
 
         /// <summary>
         /// Gets or sets a <see cref="HttpMessageHandler"/> to use.  This is used by unit tests to mock a connection to a remote server.
@@ -186,7 +185,7 @@ private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
 
                         return;
                     }
-                    else if (Question)
+                    else if (FailIfNotIncremental)
                     {
                         Log.LogErrorFromResources("DownloadFile.Downloading", SourceUrl, destinationFile.FullName, response.Content.Headers.ContentLength);
                         return;
diff --git a/src/Tasks/FileIO/WriteLinesToFile.cs b/src/Tasks/FileIO/WriteLinesToFile.cs
index ee2fae55dc8..ada40e89f8e 100644
--- a/src/Tasks/FileIO/WriteLinesToFile.cs
+++ b/src/Tasks/FileIO/WriteLinesToFile.cs
@@ -52,7 +52,7 @@ public class WriteLinesToFile : TaskExtension, IIncrementalTask
         /// Question whether this task is incremental.
         /// </summary>
         /// <remarks>When question is true, then this task would not write to disk.  If CanBeIncremental is true, then error out.</remarks>
-        public bool Question { get; set; }
+        public bool FailIfNotIncremental { get; set; }
 
         public bool CanBeIncremental => WriteOnlyWhenDifferent;
 
@@ -69,7 +69,7 @@ public override bool Execute()
                 // do not return if Lines is null, because we may
                 // want to delete the file in that case
                 StringBuilder buffer = new StringBuilder();
-                if (Lines != null && (!Question || WriteOnlyWhenDifferent))
+                if (Lines != null && (!FailIfNotIncremental || WriteOnlyWhenDifferent))
                 {
                     foreach (ITaskItem line in Lines)
                     {
@@ -116,7 +116,7 @@ public override bool Execute()
                                             MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, true);
                                             return true;
                                         }
-                                        else if (Question)
+                                        else if (FailIfNotIncremental)
                                         {
                                             Log.LogErrorWithCodeFromResources("WriteLinesToFile.ErrorReadingFile", File.ItemSpec);
                                             return false;
@@ -131,7 +131,7 @@ public override bool Execute()
                             MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, false);
                         }
 
-                        if (Question)
+                        if (FailIfNotIncremental)
                         {
                             Log.LogErrorWithCodeFromResources("WriteLinesToFile.ErrorReadingFile", File.ItemSpec);
                             return false;
@@ -143,7 +143,7 @@ public override bool Execute()
                     }
                     else
                     {
-                        if (Question)
+                        if (FailIfNotIncremental)
                         {
                             Log.LogErrorWithCodeFromResources("WriteLinesToFile.ErrorOrWarning", File.ItemSpec, string.Empty);
                             return false;
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index 23242673ce5..42832f620c7 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -546,8 +546,7 @@ public GenerateResource()
             // do nothing
         }
 
-
-        public bool Question { get; set; }
+        public bool FailIfNotIncremental { get; set; }
 
         /// <summary>
         /// Logs a Resgen.exe command line that indicates what parameters were
@@ -718,7 +717,7 @@ public override bool Execute()
 
                     Log.LogMessageFromResources("GenerateResource.NothingOutOfDate");
                 }
-                else if (Question)
+                else if (FailIfNotIncremental)
                 {
                     Log.LogErrorFromResources("GenerateResource.OutOfDate");
                 }
diff --git a/src/Tasks/MakeDir.cs b/src/Tasks/MakeDir.cs
index e84f9a5feac..90d675ef066 100644
--- a/src/Tasks/MakeDir.cs
+++ b/src/Tasks/MakeDir.cs
@@ -31,7 +31,7 @@ public ITaskItem[] Directories
         [Output]
         public ITaskItem[] DirectoriesCreated { get; private set; }
 
-        public bool Question { get; set; }
+        public bool FailIfNotIncremental { get; set; }
 
         private ITaskItem[] _directories;
 
@@ -61,7 +61,7 @@ public override bool Execute()
                             // Only log a message if we actually need to create the folder
                             if (!FileUtilities.DirectoryExistsNoThrow(directory.ItemSpec))
                             {
-                                if (Question)
+                                if (FailIfNotIncremental)
                                 {
                                     Log.LogErrorFromResources("MakeDir.Comment", directory.ItemSpec);
                                 }
diff --git a/src/Tasks/Move.cs b/src/Tasks/Move.cs
index e7d2c1e4611..746ce275be7 100644
--- a/src/Tasks/Move.cs
+++ b/src/Tasks/Move.cs
@@ -73,7 +73,7 @@ public class Move : TaskExtension, ICancelableTask, IIncrementalTask
         /// <remarks>Move can be chained A->B->C with location C as the final location.
         /// Incrementally, it is hard to question A->B if both files are gone.
         /// In short, question will always return false and author should use target inputs/outputs.</remarks>
-        public bool Question { get; set; }
+        public bool FailIfNotIncremental { get; set; }
 
         /// <summary>
         /// Stop and return (in an undefined state) as soon as possible.
@@ -157,7 +157,7 @@ public override bool Execute()
 
                 try
                 {
-                    if (!Question && MoveFileWithLogging(sourceFile, destinationFile))
+                    if (!FailIfNotIncremental && MoveFileWithLogging(sourceFile, destinationFile))
                     {
                         SourceFiles[i].CopyMetadataTo(DestinationFiles[i]);
                         destinationFilesSuccessfullyMoved.Add(DestinationFiles[i]);
diff --git a/src/Tasks/RemoveDir.cs b/src/Tasks/RemoveDir.cs
index 6586d975cf9..962a266e172 100644
--- a/src/Tasks/RemoveDir.cs
+++ b/src/Tasks/RemoveDir.cs
@@ -41,7 +41,7 @@ public ITaskItem[] Directories
         [Output]
         public ITaskItem[] RemovedDirectories { get; set; }
 
-        public bool Question { get; set; }
+        public bool FailIfNotIncremental { get; set; }
 
         //-----------------------------------------------------------------------------------
         // Execute -- this runs the task
@@ -63,7 +63,7 @@ public override bool Execute()
 
                 if (FileSystems.Default.DirectoryExists(directory.ItemSpec))
                 {
-                    if (Question)
+                    if (FailIfNotIncremental)
                     {
                         Log.LogErrorFromResources("RemoveDir.Removing", directory.ItemSpec);
                         continue;
diff --git a/src/Tasks/Touch.cs b/src/Tasks/Touch.cs
index 9d497021f8f..867591c6b09 100644
--- a/src/Tasks/Touch.cs
+++ b/src/Tasks/Touch.cs
@@ -57,7 +57,7 @@ public class Touch : TaskExtension, IIncrementalTask
         /// </summary>
         /// <remarks>When Question is true, skip touching the disk to avoid causing incremental issue.
         /// Unless the file doesn't exists, in which case, error out.</remarks>
-        public bool Question { get; set; }
+        public bool FailIfNotIncremental { get; set; }
 
         /// <summary>
         /// Implementation of the execute method.
@@ -205,7 +205,7 @@ private bool TouchFile(
                 // If the file does not exist then we check if we need to create it.
                 if (AlwaysCreate)
                 {
-                    if (Question)
+                    if (FailIfNotIncremental)
                     {
                         Log.LogErrorFromResources("Touch.CreatingFile", file, "AlwaysCreate");
                         return false;
@@ -229,7 +229,7 @@ private bool TouchFile(
 
             Log.LogMessageFromResources(messageImportance, "Touch.Touching", file);
 
-            if (Question)
+            if (FailIfNotIncremental)
             {
                 return true;
             }
diff --git a/src/Tasks/Unzip.cs b/src/Tasks/Unzip.cs
index 3b7808ca892..53ad3198125 100644
--- a/src/Tasks/Unzip.cs
+++ b/src/Tasks/Unzip.cs
@@ -73,7 +73,7 @@ public sealed class Unzip : TaskExtension, ICancelableTask, IIncrementalTask
         /// </summary>
         public string Exclude { get; set; }
 
-        public bool Question { get; set; }
+        public bool FailIfNotIncremental { get; set; }
 
         /// <inheritdoc cref="ICancelableTask.Cancel"/>
         public void Cancel()
@@ -195,7 +195,7 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector
                     Log.LogMessageFromResources(MessageImportance.Low, "Unzip.DidNotUnzipBecauseOfFileMatch", zipArchiveEntry.FullName, destinationPath.FullName, nameof(SkipUnchangedFiles), "true");
                     continue;
                 }
-                else if (Question)
+                else if (FailIfNotIncremental)
                 {
                     Log.LogErrorFromResources("Unzip.FileComment", zipArchiveEntry.FullName, destinationPath.FullName);
                     continue;
diff --git a/src/Tasks/ZipDirectory.cs b/src/Tasks/ZipDirectory.cs
index 2b8bc585087..9618c6d3fa5 100644
--- a/src/Tasks/ZipDirectory.cs
+++ b/src/Tasks/ZipDirectory.cs
@@ -29,7 +29,7 @@ public sealed class ZipDirectory : TaskExtension, IIncrementalTask
         [Required]
         public ITaskItem SourceDirectory { get; set; }
 
-        public bool Question { get; set; }
+        public bool FailIfNotIncremental { get; set; }
 
         public override bool Execute()
         {
@@ -49,7 +49,7 @@ public override bool Execute()
             {
                 if (destinationFile.Exists)
                 {
-                    if (!Overwrite || Question)
+                    if (!Overwrite || FailIfNotIncremental)
                     {
                         Log.LogErrorWithCodeFromResources("ZipDirectory.ErrorFileExists", destinationFile.FullName);
 
@@ -70,7 +70,7 @@ public override bool Execute()
 
                 try
                 {
-                    if (Question)
+                    if (FailIfNotIncremental)
                     {
                         Log.LogErrorFromResources("ZipDirectory.Comment", sourceDirectory.FullName, destinationFile.FullName);
                     }
diff --git a/src/Utilities/ToolTask.cs b/src/Utilities/ToolTask.cs
index d7fb0967965..598703283b2 100644
--- a/src/Utilities/ToolTask.cs
+++ b/src/Utilities/ToolTask.cs
@@ -358,7 +358,7 @@ protected virtual void ProcessStarted() { }
         /// </summary>
         protected bool canBeIncremental { get; set; } = true;
 
-        public bool Question { get; set; }
+        public bool FailIfNotIncremental { get; set; }
 
         /// <summary>
         /// Returns a string with those switches and other information that can go into a response file.
@@ -1331,7 +1331,7 @@ public override bool Execute()
                     // doing any actual work).
                     return true;
                 }
-                else if (canBeIncremental && Question)
+                else if (canBeIncremental && FailIfNotIncremental)
                 {
                     LogPrivate.LogErrorWithCodeFromResources("ToolTask.NotUpToDate");
                     return false;
