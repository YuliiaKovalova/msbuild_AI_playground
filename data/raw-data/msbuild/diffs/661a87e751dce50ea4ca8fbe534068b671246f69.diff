diff --git a/src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs b/src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs
index d8ad5a396ef..b34ab8f726b 100644
--- a/src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs
+++ b/src/Build/BuildCheck/API/IBuildCheckRegistrationContext.cs
@@ -8,6 +8,8 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 public interface IBuildCheckRegistrationContext
 {
     void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);
+
     void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);
+
     void RegisterTaskInvocationAction(Action<BuildCheckDataContext<TaskInvocationAnalysisData>> taskInvocationAction);
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index a7064469c27..5e57eebe860 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -341,7 +341,7 @@ public void ProcessEvaluationEventArgs(IAnalysisContext analysisContext, Extende
                 _buildEventsProcessor.ProcessEnvironmentVariableReadEventArgs(
                     evr.EnvironmentVariableName,
                     evr.Message ?? string.Empty,
-                    evr.File,
+                    evr.FileName,
                     evr.LineNumber,
                     evr.ColumnNumber);
             }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 446a9bf27ff..62471f3a0cb 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -1117,9 +1117,9 @@ private BuildEventArgs ReadExtendedEnvironmentVariableReadEventArgs()
             BuildEventArgs e = new ExtendedEnvironmentVariableReadEventArgs(
                     environmentVariableName ?? string.Empty,
                     fields.Message,
-                    fields.File ?? string.Empty,
-                    fields.LineNumber,
-                    fields.ColumnNumber,
+                    fileName ?? string.Empty,
+                    line,
+                    column,
                     fields.HelpKeyword,
                     fields.SenderName);
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index e99a32ac11f..69c897abff9 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -6,6 +6,7 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.Data.Common;
+using System.Diagnostics;
 using System.Globalization;
 using System.IO;
 using System.Linq;
@@ -560,8 +561,8 @@ private BinaryLogRecordKind Write(ExtendedEnvironmentVariableReadEventArgs e)
         {
             WriteMessageFields(e, writeImportance: false);
             WriteDeduplicatedString(e.EnvironmentVariableName);
-            Write(e.Line);
-            Write(e.Column);
+            Write(e.LineNumber);
+            Write(e.ColumnNumber);
             WriteDeduplicatedString(e.FileName);
 
             return BinaryLogRecordKind.ExtendedEnvironmentVariableRead;
diff --git a/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs b/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
index 4a5ec823ef9..e8bd73664c7 100644
--- a/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
+++ b/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
@@ -39,16 +39,6 @@ public ExtendedEnvironmentVariableReadEventArgs(
             ColumnNumber = column;
         }
 
-        /// <summary>
-        /// The line number where environment variable is used.
-        /// </summary>
-        public int Line { get; set; }
-
-        /// <summary>
-        /// The column where environment variable is used.
-        /// </summary>
-        public int Column { get; set; }
-
         /// <summary>
         /// The file name where environment variable is used.
         /// </summary>
@@ -63,8 +53,8 @@ internal override void WriteToStream(BinaryWriter writer)
         {
             base.WriteToStream(writer);
             writer.Write(EnvironmentVariableName);
-            writer.Write7BitEncodedInt(Line);
-            writer.Write7BitEncodedInt(Column);
+            writer.Write7BitEncodedInt(LineNumber);
+            writer.Write7BitEncodedInt(ColumnNumber);
             writer.WriteOptionalString(FileName);
         }
 
