diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 26fc279753f..0b187644116 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -204,7 +204,7 @@ internal static bool HasWildcardsSemicolonItemOrPropertyReferences(string filesp
         /// </summary>
         internal static bool HasPropertyOrItemReferences(string filespec)
         {
-            return s_propertyAndItemReferences.Any(ref=> filespec.Contains(ref));
+            return s_propertyAndItemReferences.Any(filespec.Contains);
         }
 
         /// <summary>
diff --git a/src/Tasks/Unzip.cs b/src/Tasks/Unzip.cs
index 665ab8e59a5..e9b55609031 100644
--- a/src/Tasks/Unzip.cs
+++ b/src/Tasks/Unzip.cs
@@ -96,7 +96,9 @@ public override bool Execute()
 
             try
             {
-                if (ParseIncludeExclude())
+                ParseIncludeExclude();
+
+                if (!Log.HasLoggedErrors)
                 {
                     foreach (ITaskItem sourceFile in SourceFiles.TakeWhile(i => !_cancellationToken.IsCancellationRequested))
                     {
@@ -266,38 +268,33 @@ private bool ShouldSkipEntry(ZipArchiveEntry zipArchiveEntry, FileInfo fileInfo)
                    && zipArchiveEntry.Length == fileInfo.Length;
         }
 
-        private bool ParseIncludeExclude()
+        private void ParseIncludeExclude()
         {
-            return ParsePattern(Include, out _includePatterns) && ParsePattern(Exclude, out _excludePatterns);
+            ParsePattern(Include, out _includePatterns);
+            ParsePattern(Exclude, out _excludePatterns);
         }
 
-        private bool ParsePattern(string pattern, out string[] patterns)
+        private void ParsePattern(string pattern, out string[] patterns)
         {
-            bool result = false;
             patterns = Array.Empty<string>();
-            if (string.IsNullOrWhiteSpace(pattern))
+            if (!string.IsNullOrWhiteSpace(pattern))
             {
-                result = true;
-            }
-            else if (FileMatcher.HasPropertyOrItemReferences(pattern))
-            {
-                // Supporting property references would require access to Expander which is unavailable in Microsoft.Build.Tasks
-                Log.LogErrorWithCodeFromResources("Unzip.ErrorParsingPatternPropertyReferences", pattern);
-            }
-            else if (pattern.IndexOfAny(FileUtilities.InvalidPathChars) != -1)
-            {
-                Log.LogErrorWithCodeFromResources("Unzip.ErrorParsingPatternInvalidPath", pattern);
-            }
-            else
-            {
-                patterns = pattern.Contains(';')
-                               ? pattern.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries).Select(FileMatcher.Normalize).ToArray()
-                               : new[] { pattern };
-
-                result = true;
+                if (FileMatcher.HasPropertyOrItemReferences(pattern))
+                {
+                    // Supporting property references would require access to Expander which is unavailable in Microsoft.Build.Tasks
+                    Log.LogErrorWithCodeFromResources("Unzip.ErrorParsingPatternPropertyReferences", pattern);
+                }
+                else if (pattern.IndexOfAny(FileUtilities.InvalidPathChars) != -1)
+                {
+                    Log.LogErrorWithCodeFromResources("Unzip.ErrorParsingPatternInvalidPath", pattern);
+                }
+                else
+                {
+                    patterns = pattern.Contains(';')
+                                   ? pattern.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries).Select(FileMatcher.Normalize).ToArray()
+                                   : new[] { pattern };
+                }
             }
-
-            return result;
         }
     }
 }
