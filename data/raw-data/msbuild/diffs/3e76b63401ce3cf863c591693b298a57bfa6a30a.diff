diff --git a/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs b/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
index 2faf7294143..d014c3ec256 100644
--- a/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
@@ -2307,18 +2307,20 @@ public void InvalidChooseOverflow()
 
             Assert.Throws<InvalidProjectFileException>(infiniteChooseLoop);
         }
+
         /// <summary>
-        /// Setting item condition should dirty project
+        /// Setting item condition should dirty project.
         /// </summary>
         [Fact]
         public void Dirtying_ItemCondition()
         {
-            XmlReader content = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            using var stringReader = new StringReader(ObjectModelHelpers.CleanupFileContents(
 @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
   <ItemGroup>
     <i Include=""i1"" />
   </ItemGroup>
-</Project>")));
+</Project>"));
+            using XmlReader content = XmlReader.Create(stringReader);
 
             Project project = new Project(content);
             ProjectItem item = Helpers.GetFirst(project.Items);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
index 922608cecd5..e45cb441a95 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
@@ -31,7 +31,9 @@ public void Read()
                  </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectExtensionsElement extensions = (ProjectExtensionsElement)Helpers.GetFirst(project.Children);
 
             Assert.Equal(@"<a />", extensions.Content);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
index 317fb32847a..ef429d3a09e 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
@@ -108,12 +108,15 @@ public void ProjectAddItemFormatting_StartOfGroup()
   </ItemGroup>
 </Project>");
 
-            ProjectRootElement xml = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)),
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement xml = ProjectRootElement.Create(
+                xmlReader,
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
             Project project = new Project(xml);
             project.AddItem("Compile", "Class1.cs");
-            StringWriter writer = new StringWriter();
+            using StringWriter writer = new StringWriter();
             project.Save(writer);
 
             string expected = ObjectModelHelpers.CleanupFileContents(@"<?xml version=""1.0"" encoding=""utf-16""?>
diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
index 2b59cd43574..0b0ce00f9fc 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
@@ -95,7 +95,9 @@ public void ReadBasic()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
 
             List<ProjectImportElement> imports = Helpers.MakeList(project.Imports);
 
@@ -251,9 +253,14 @@ public void ImportWithRelativePath()
             try
             {
                 Directory.CreateDirectory(testTempPath);
-                ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(projectfileContent)));
+                using var stringReader = new StringReader(projectfileContent);
+                using var xmlReader = XmlReader.Create(stringReader);
+                ProjectRootElement project = ProjectRootElement.Create(xmlReader);
                 project.Save(projectfile);
-                project = ProjectRootElement.Create(XmlReader.Create(new StringReader(targetsfileContent)));
+
+                using var stringReader2 = new StringReader(targetsfileContent);
+                using var xmlReader2 = XmlReader.Create(stringReader);
+                project = ProjectRootElement.Create(xmlReader2);
                 project.Save(targetsFile);
                 Project msbuildProject = new Project(projectfile);
             }
diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
index f32676c98f3..4f40aa82b8a 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
@@ -31,7 +31,9 @@ public void AddImportWhenNoImportGroupExists()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
 
             project.AddImport("b.proj");
 
@@ -114,8 +116,9 @@ public void AddImportOnlyConditionedImportGroupsExist()
                         </ImportGroup>
                     </Project>
                 ";
-
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
 
             project.AddImport("d.proj");
 
@@ -157,8 +160,9 @@ public void ReadNoChild()
                         <ImportGroup />
                     </Project>
                 ";
-
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
 
             ProjectImportGroupElement importGroup = (ProjectImportGroupElement)Helpers.GetFirst(project.ImportGroups);
 
@@ -256,8 +260,9 @@ public void ReadBasic()
                         </ImportGroup>
                     </Project>
                 ";
-
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
 
             List<ProjectImportElement> imports = Helpers.MakeList(project.Imports);
             List<ProjectImportGroupElement> importGroups = Helpers.MakeList(project.ImportGroups);
@@ -287,8 +292,9 @@ public void ReadMultipleImportGroups()
                         </ImportGroup>
                     </Project>
                 ";
-
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
 
             List<ProjectImportElement> imports = Helpers.MakeList(project.Imports);
             List<ProjectImportGroupElement> importGroups = Helpers.MakeList(project.ImportGroups);
@@ -318,8 +324,9 @@ public void SetProjectValid()
                         </ImportGroup>
                     </Project>
                 ";
-
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
 
             ProjectImportGroupElement importGroup = (ProjectImportGroupElement)Helpers.GetFirst(project.Children);
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs
index 0228b259612..65e1a3704dd 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs
@@ -31,7 +31,9 @@ public void ReadNoChildren()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)Helpers.GetFirst(project.Children);
             ProjectItemDefinitionElement itemDefinition = Helpers.GetFirst(itemDefinitionGroup.ItemDefinitions);
 
@@ -53,8 +55,9 @@ public void ReadBasic()
                         </ItemDefinitionGroup>
                     </Project>
                 ";
-
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)Helpers.GetFirst(project.Children);
             ProjectItemDefinitionElement definition = Helpers.GetFirst(itemDefinitionGroup.ItemDefinitions);
 
@@ -82,7 +85,9 @@ public void ReadBuiltInElementName()
                     </Project>
                 ";
 
-            ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement.Create(xmlReader);
         }
 
         /// <summary>
@@ -101,8 +106,9 @@ public void ReadMetadata()
                         </ItemDefinitionGroup>
                     </Project>
                 ";
-
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)Helpers.GetFirst(project.Children);
             ProjectItemDefinitionElement itemDefinition = Helpers.GetFirst(itemDefinitionGroup.ItemDefinitions);
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
index 7191ec67da7..f5429c29191 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
@@ -56,7 +56,9 @@ public void ReadNoChildren()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)Helpers.GetFirst(project.Children);
 
             Assert.Equal(0, Helpers.Count(itemDefinitionGroup.ItemDefinitions));
@@ -80,7 +82,9 @@ public void ReadBasic()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
 
             var itemDefinitionGroups = Helpers.MakeList(project.ItemDefinitionGroups);
             Assert.Equal(2, itemDefinitionGroups.Count);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
index 721a4521fdc..937171ffe93 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
@@ -159,7 +159,9 @@ public void ReadInvalidContainsText(string project)
         {
             Assert.Throws<InvalidProjectFileException>(() =>
             {
-                ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
+                using var stringReader = new StringReader(project);
+                using var xmlReader = XmlReader.Create(stringReader);
+                ProjectRootElement.Create(xmlReader);
             });
         }
 
@@ -187,7 +189,9 @@ public void ReadInvalidEmptyInclude(string project)
         {
             Assert.Throws<InvalidProjectFileException>(() =>
             {
-                ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
+                using var stringReader = new StringReader(project);
+                using var xmlReader = XmlReader.Create(stringReader);
+                ProjectRootElement.Create(xmlReader);
             });
         }
 
@@ -215,7 +219,9 @@ public void ReadInvalidReservedElementName(string project)
         {
             Assert.Throws<InvalidProjectFileException>(() =>
             {
-                ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
+                using var stringReader = new StringReader(project);
+                using var xmlReader = XmlReader.Create(stringReader);
+                ProjectRootElement.Create(xmlReader);
             });
         }
 
@@ -258,7 +264,12 @@ public void ReadInvalidExcludeWithoutIncludeUnderTarget()
 
             var exception =
                 Assert.Throws<InvalidProjectFileException>(
-                    () => { ProjectRootElement.Create(XmlReader.Create(new StringReader(project))); });
+                    () =>
+                    {
+                        using var stringReader = new StringReader(project);
+                        using var xmlReader = XmlReader.Create(stringReader);
+                        ProjectRootElement.Create(xmlReader);
+                    });
 
             Assert.Contains("The attribute \"Exclude\" in element <i> is unrecognized.", exception.Message);
         }
@@ -300,7 +311,9 @@ public void ReadInvalidItemAttributeCasing(string project)
         {
             Assert.Throws<InvalidProjectFileException>(() =>
             {
-                ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
+                using var stringReader = new StringReader(project);
+                using var xmlReader = XmlReader.Create(stringReader);
+                ProjectRootElement.Create(xmlReader);
             });
         }
 
@@ -354,7 +367,9 @@ public void ReadInvalidItemAttributeCasing(string project)
                 ")]
         public void ReadBasic(string project)
         {
-            ProjectRootElement projectElement = ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
+            using var stringReader = new StringReader(project);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var items = Helpers.MakeList(itemGroup.Items);
@@ -406,7 +421,9 @@ public void ReadBasic(string project)
                 ")]
         public void ReadMetadata(string project)
         {
-            ProjectRootElement projectElement = ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
+            using var stringReader = new StringReader(project);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
             ProjectItemElement item = Helpers.GetFirst(itemGroup.Items);
 
@@ -580,7 +597,9 @@ public void ReadInvalidIncludeAndRemove(string project)
         {
             Assert.Throws<InvalidProjectFileException>(() =>
             {
-                ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
+                using var stringReader = new StringReader(project);
+                using var xmlReader = XmlReader.Create(stringReader);
+                ProjectRootElement.Create(xmlReader);
             });
         }
 
@@ -1036,7 +1055,9 @@ public void SettingItemUpdateDirties()
 
         private static ProjectItemElement GetItemFromContent(string content)
         {
-            var project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            var project = ProjectRootElement.Create(xmlReader);
             return Helpers.GetFirst(project.Items);
         }
     }
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
index 61660b61ef0..669d8f917b1 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
@@ -39,7 +39,9 @@ public void ReadEmptyItemGroup()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectItemGroupElement group = (ProjectItemGroupElement)Helpers.GetFirst(project.Children);
 
             Assert.Equal(0, Helpers.Count(group.Items));
@@ -60,7 +62,9 @@ public void ReadItemGroupTwoItems()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectItemGroupElement group = (ProjectItemGroupElement)Helpers.GetFirst(project.Children);
 
             var items = Helpers.MakeList(group.Items);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
index a57c3694e45..c9b76121683 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
@@ -296,7 +296,9 @@ public void SetExpressedAsAttributeIllegalName()
                 ")]
         public void AddMetadataAsAttributeIllegalName(string project)
         {
-            ProjectRootElement projectElement = ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
+            using var stringReader = new StringReader(project);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var items = Helpers.MakeList(itemGroup.Items);
@@ -322,7 +324,9 @@ public void AddMetadataAsAttributeToItemDefinitionIllegalName()
                     </Project>
                 ";
 
-            ProjectRootElement projectElement = ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
+            using var stringReader = new StringReader(project);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemDefinitionGroupElement);
 
             var itemDefinitions = Helpers.MakeList(itemDefinitionGroup.ItemDefinitions);
@@ -400,7 +404,9 @@ public void ReadValidItemExpressionInMetadata()
                 ";
 
             // Should not throw
-            ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement.Create(xmlReader);
         }
 
         [Theory]
@@ -446,7 +452,10 @@ public void ReadMetadataAsAttributeOnItemDefinition()
                         </ItemDefinitionGroup>
                     </Project>
                 ";
-            ProjectRootElement projectElement = ProjectRootElement.Create(XmlReader.Create(new StringReader(project)));
+
+            using var stringReader = new StringReader(project);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemDefinitionGroupElement);
 
             var itemDefinitions = Helpers.MakeList(itemDefinitionGroup.ItemDefinitions);
@@ -613,7 +622,7 @@ public void UpdateMetadataValueAsAttributeOnItemDefinition()
             Assert.True(project.IsDirty);
             Assert.True(metadata.ExpressedAsAttribute);
 
-            StringWriter writer = new StringWriter();
+            using StringWriter writer = new StringWriter();
             project.Save(writer);
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
@@ -728,7 +737,7 @@ public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters(
             Assert.True(project.IsDirty);
             Assert.True(metadata.ExpressedAsAttribute);
 
-            StringWriter writer = new StringWriter();
+            using StringWriter writer = new StringWriter();
             project.Save(writer);
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
@@ -790,7 +799,10 @@ public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters(
                     </Project>")]
         public void ChangeMetadataToAttribute(string projectContents, string updatedProject)
         {
-            ProjectRootElement projectElement = ProjectRootElement.Create(XmlReader.Create(new StringReader(projectContents)),
+            using var stringReader = new StringReader(projectContents);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement projectElement = ProjectRootElement.Create(
+                xmlReader,
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
@@ -812,7 +824,7 @@ public void ChangeMetadataToAttribute(string projectContents, string updatedProj
             Assert.True(project.IsDirty);
             Assert.True(metadata.ExpressedAsAttribute);
 
-            StringWriter writer = new StringWriter();
+            using StringWriter writer = new StringWriter();
             project.Save(writer);
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
@@ -940,7 +952,7 @@ public void ChangeAttributeToMetadata(string projectContents, string updatedProj
             Assert.False(metadata.ExpressedAsAttribute);
             Assert.True(project.IsDirty);
 
-            StringWriter writer = new StringWriter();
+            using StringWriter writer = new StringWriter();
             project.Save(writer);
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
@@ -1048,7 +1060,7 @@ public void AddMetadataAsAttribute(string projectContents, string updatedProject
             Assert.True(metadata.ExpressedAsAttribute);
             Assert.True(project.IsDirty);
 
-            StringWriter writer = new StringWriter();
+            using StringWriter writer = new StringWriter();
             project.Save(writer);
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
@@ -1162,7 +1174,7 @@ public void AddMetadataAsAttributeAndAsElement(string projectContents, string up
             Assert.False(metadata.ExpressedAsAttribute);
             Assert.True(project.IsDirty);
 
-            StringWriter writer = new StringWriter();
+            using StringWriter writer = new StringWriter();
             project.Save(writer);
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
@@ -1207,7 +1219,7 @@ public void AddMetadataToItemDefinitionAsAttributeAndAsElement()
             Assert.False(metadata.ExpressedAsAttribute);
             Assert.True(project.IsDirty);
 
-            StringWriter writer = new StringWriter();
+            using StringWriter writer = new StringWriter();
             project.Save(writer);
 
             string expected = @"<?xml version=""1.0"" encoding=""utf-16""?>" +
@@ -1239,7 +1251,9 @@ private static ProjectMetadataElement GetMetadataXml()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)Helpers.GetFirst(project.Children);
             ProjectItemElement item = Helpers.GetFirst(itemGroup.Items);
             ProjectMetadataElement metadata = Helpers.GetFirst(item.Metadata);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
index 0bad6797fbe..fa905b6b5a0 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
@@ -46,7 +46,9 @@ public void ReadTargetTwoOnErrors()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
             var onErrors = Helpers.MakeList(target.OnErrors);
 
@@ -297,7 +299,9 @@ private static ProjectOnErrorElement GetOnError()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
             ProjectOnErrorElement onError = (ProjectOnErrorElement)Helpers.GetFirst(target.Children);
             return onError;
diff --git a/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
index 2193bf0ca8e..579af51dcbe 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
@@ -287,7 +287,9 @@ private static ProjectOutputElement GetOutputItem()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
             ProjectTaskElement task = (ProjectTaskElement)Helpers.GetFirst(target.Children);
             return Helpers.GetFirst(task.Outputs);
@@ -309,7 +311,9 @@ private static ProjectOutputElement GetOutputProperty()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
             ProjectTaskElement task = (ProjectTaskElement)Helpers.GetFirst(target.Children);
             return Helpers.GetFirst(task.Outputs);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
index 148b5f409ef..738a495b4b2 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
@@ -44,7 +44,9 @@ public void ReadPropertyWithChildren()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectPropertyGroupElement propertyGroup = (ProjectPropertyGroupElement)Helpers.GetFirst(project.Children);
             ProjectPropertyElement property = Helpers.GetFirst(propertyGroup.Properties);
 
@@ -274,7 +276,9 @@ private static ProjectPropertyElement GetPropertyXml()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectPropertyGroupElement propertyGroup = (ProjectPropertyGroupElement)Helpers.GetFirst(project.Children);
             ProjectPropertyElement property = Helpers.GetFirst(propertyGroup.Properties);
             return property;
diff --git a/src/Build.OM.UnitTests/Construction/ProjectPropertyGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectPropertyGroupElement_Tests.cs
index d70ad718687..2854feb7bff 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectPropertyGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectPropertyGroupElement_Tests.cs
@@ -38,7 +38,9 @@ public void ReadEmptyPropertyGroup()
                     </Project>
                 ");
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectPropertyGroupElement group = (ProjectPropertyGroupElement)Helpers.GetFirst(project.Children);
 
             Assert.Equal(0, Helpers.Count(group.Properties));
@@ -59,7 +61,9 @@ public void ReadPropertyGroupTwoProperties()
                     </Project>
                 ");
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectPropertyGroupElement group = (ProjectPropertyGroupElement)Helpers.GetFirst(project.Children);
 
             var properties = Helpers.MakeList(group.Properties);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
index a9edfebe54b..fb1a2caf45c 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
@@ -220,7 +220,9 @@ public void ConstructOverSameFileReturnsSameEvenWithOneBeingRelativePath3()
         {
             string content = "<Project ToolsVersion=\"4.0\">\r\n</Project>";
 
-            ProjectRootElement projectXml1 = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement projectXml1 = ProjectRootElement.Create(xmlReader);
 
             projectXml1.FullPath = @"xyz\abc";
 
@@ -366,7 +368,9 @@ public void InvalidNamespaceErrorReport()
             bool exceptionThrown = false;
             try
             {
-                Project project = new Project(XmlReader.Create(new StringReader(content)));
+                using var stringReader = new StringReader(content);
+                using var xmlReader = XmlReader.Create(stringReader);
+                Project project = new Project(xmlReader);
             }
             catch (InvalidProjectFileException ex)
             {
diff --git a/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
index aa46fef257e..0c0e95c05e4 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
@@ -56,7 +56,9 @@ public void ReadEmptyTarget()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
 
             Assert.Equal(0, Helpers.Count(target.Children));
diff --git a/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
index 86d90da04cf..636337c933c 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
@@ -299,7 +299,9 @@ public void SetCondition()
         /// </summary>
         private static ProjectTaskElement GetTaskFromContent(string content)
         {
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
             return (ProjectTaskElement)Helpers.GetFirst(target.Children);
         }
diff --git a/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
index fe49f9cb243..d59e91da262 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
@@ -417,7 +417,9 @@ RANDOM GOO
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectUsingTaskElement usingTask = (ProjectUsingTaskElement)Helpers.GetFirst(project.Children);
             Assert.NotNull(usingTask);
             Assert.Equal(2, usingTask.Count);
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
index 12424a672a4..8e05e57a980 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
@@ -135,7 +135,9 @@ private static ProjectUsingTaskBodyElement GetBodyXml()
                     </Project>
                 ";
 
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectUsingTaskElement usingTask = (ProjectUsingTaskElement)Helpers.GetFirst(project.Children);
             ProjectUsingTaskBodyElement body = usingTask.TaskBody;
             return body;
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
index 955f6a1fe89..ee0b73fbbe3 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
@@ -224,7 +224,9 @@ public void SetNullRequired()
         /// </summary>
         private static ProjectUsingTaskParameterElement GetParameterXml(string contents)
         {
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(contents)));
+            using var stringReader = new StringReader(contents);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectUsingTaskElement usingTask = (ProjectUsingTaskElement)Helpers.GetFirst(project.Children);
             UsingTaskParameterGroupElement parameterGroup = usingTask.ParameterGroup;
             ProjectUsingTaskParameterElement body = Helpers.GetFirst(parameterGroup.Parameters);
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
index dcdf5f8ac7f..7442ee6180e 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
@@ -135,7 +135,9 @@ public void ReadInvalidAttribute()
         /// </summary>
         private static UsingTaskParameterGroupElement GetParameterGroupXml(string contents)
         {
-            ProjectRootElement project = ProjectRootElement.Create(XmlReader.Create(new StringReader(contents)));
+            using var stringReader = new StringReader(contents);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
             ProjectUsingTaskElement usingTask = (ProjectUsingTaskElement)Helpers.GetFirst(project.Children);
             return usingTask.ParameterGroup;
         }
diff --git a/src/Build.OM.UnitTests/Construction/WhiteSpacePreservation_Tests.cs b/src/Build.OM.UnitTests/Construction/WhiteSpacePreservation_Tests.cs
index 0411b347ea2..87017af556a 100644
--- a/src/Build.OM.UnitTests/Construction/WhiteSpacePreservation_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/WhiteSpacePreservation_Tests.cs
@@ -475,7 +475,7 @@ private void AssertWhiteSpacePreservation(
                 act(projectElement, project);
 
                 // Write the project to a UTF8 string writer to compare against
-                var writer = new EncodingStringWriter();
+                using var writer = new EncodingStringWriter();
                 project.Save(writer);
                 actual = writer.ToString();
             }
diff --git a/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs b/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs
index 5b5f799bf78..c842c4e8f95 100644
--- a/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs
@@ -707,7 +707,7 @@ public void SetMetadata_ItemOriginatingWithWildcard()
         [Fact]
         public void SetMetadata_ItemOriginatingWithItemList()
         {
-            XmlReader content = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            using var stringReader = new StringReader(ObjectModelHelpers.CleanupFileContents(
 @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
   <ItemGroup>
     <h Include=""h1;h2"">
@@ -715,7 +715,8 @@ public void SetMetadata_ItemOriginatingWithItemList()
     </h>
     <i Include=""@(h)"" />
   </ItemGroup>
-</Project>")));
+</Project>"));
+            using var content = XmlReader.Create(stringReader);
 
             Project project = new Project(content);
 
diff --git a/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs b/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs
index 0b63edcfbef..beb7d8ffb21 100644
--- a/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs
@@ -340,7 +340,9 @@ public void RemoveProperty()
         /// <returns>The project contents.</returns>
         private Project GetProject(string contents)
         {
-            return new Project(XmlReader.Create(new StringReader(contents)));
+            using var stringReader = new StringReader(contents);
+            using var xmlReader = XmlReader.Create(stringReader);
+            return new Project(xmlReader);
         }
     }
 }
diff --git a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
index 71aef5e0df8..8f98323a46a 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
@@ -121,7 +121,7 @@ public void AddProjectOnSave_SpecifiedProjectCollection()
 
             try
             {
-                ProjectCollection collection = new ProjectCollection();
+                using ProjectCollection collection = new ProjectCollection();
                 Project project = new Project(collection);
 
                 path = FileUtilities.GetTemporaryFileName();
@@ -163,7 +163,7 @@ public void GlobalPropertyInheritLoadFromFile()
             {
                 path = CreateProjectFile();
 
-                var collection = new ProjectCollection();
+                using var collection = new ProjectCollection();
                 collection.SetGlobalProperty("p", "v");
                 Project project = collection.LoadProject(path);
 
@@ -194,7 +194,7 @@ public void GlobalPropertyInheritLoadFromFile2()
             {
                 path = CreateProjectFile();
 
-                ProjectCollection collection = new ProjectCollection();
+                using ProjectCollection collection = new ProjectCollection();
                 collection.SetGlobalProperty("p", "v");
                 Project project = collection.LoadProject(path, "4.0");
 
@@ -225,7 +225,7 @@ public void GlobalPropertyInheritLoadFromFile3()
             {
                 path = CreateProjectFile();
 
-                ProjectCollection collection = new ProjectCollection();
+                using ProjectCollection collection = new ProjectCollection();
                 collection.SetGlobalProperty("p", "v");
                 Project project = collection.LoadProject(path, null, "4.0");
 
@@ -246,9 +246,9 @@ public void GlobalPropertyInheritLoadFromFile3()
         [Fact]
         public void GlobalPropertyInheritLoadFromXml1()
         {
-            XmlReader reader = CreateProjectXmlReader();
+            using XmlReader reader = CreateProjectXmlReader();
 
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             collection.SetGlobalProperty("p", "v");
 
             Project project = collection.LoadProject(reader);
@@ -262,9 +262,9 @@ public void GlobalPropertyInheritLoadFromXml1()
         [Fact]
         public void GlobalPropertyInheritLoadFromXml2()
         {
-            XmlReader reader = CreateProjectXmlReader();
+            using XmlReader reader = CreateProjectXmlReader();
 
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             collection.SetGlobalProperty("p", "v");
 
             Project project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
@@ -278,7 +278,7 @@ public void GlobalPropertyInheritLoadFromXml2()
         [Fact]
         public void GlobalPropertyInheritProjectConstructor()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             collection.SetGlobalProperty("p", "v");
 
             var project = new Project(collection);
@@ -322,7 +322,7 @@ public void GetLoadedProjectWrongCollection()
         {
             var project1 = new Project { FullPath = "c:\\1" };
 
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             var project2 = new Project(collection) { FullPath = "c:\\1" };
 
             Assert.True(ReferenceEquals(project2, collection.LoadProject("c:\\1")));
@@ -343,13 +343,13 @@ public void GetLoadedProjectRootElementWrongCollection()
                 path = FileUtilities.GetTemporaryFileName();
                 ProjectRootElement.Create(path).Save();
 
-                ProjectCollection collection1 = new ProjectCollection();
+                using ProjectCollection collection1 = new ProjectCollection();
                 Project project1 = collection1.LoadProject(path);
                 Project project1b = collection1.LoadProject(path);
 
                 Assert.True(ReferenceEquals(project1.Xml, project1b.Xml));
 
-                ProjectCollection collection2 = new ProjectCollection();
+                using ProjectCollection collection2 = new ProjectCollection();
                 Project project2 = collection2.LoadProject(path);
 
                 Assert.False(ReferenceEquals(project1.Xml, project2.Xml));
@@ -527,7 +527,9 @@ public void ReloadProjectWithInvalidToolsVersionInFile()
                     </Project>
                 ";
 
-            var project = new Project(XmlReader.Create(new StringReader(content))) { FullPath = "c:\\123.proj" };
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            var project = new Project(xmlReader) { FullPath = "c:\\123.proj" };
 
             Project project2 = ProjectCollection.GlobalProjectCollection.LoadProject("c:\\123.proj", null, null);
 
@@ -547,7 +549,9 @@ public void ReloadProjectWithProjectToolsVersionDifferentFromEffectiveToolsVersi
                     </Project>
                 ";
 
-            var project = new Project(XmlReader.Create(new StringReader(content))) { FullPath = "c:\\123.proj" };
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            var project = new Project(xmlReader) { FullPath = "c:\\123.proj" };
 
             Project project2 = ProjectCollection.GlobalProjectCollection.LoadProject("c:\\123.proj", null, null);
 
@@ -561,7 +565,7 @@ public void ReloadProjectWithProjectToolsVersionDifferentFromEffectiveToolsVersi
         [Fact]
         public void ChangingGlobalPropertiesUpdatesCollection()
         {
-            ProjectCollection collection = new ProjectCollection();
+            using ProjectCollection collection = new ProjectCollection();
             var project = new Project(collection) { FullPath = "c:\\x" };
             project.SetGlobalProperty("p", "v1"); // should update collection
 
@@ -578,7 +582,7 @@ public void ChangingGlobalPropertiesUpdatesCollection()
         [Fact]
         public void SettingGlobalPropertiesOnCollectionUpdatesProjects()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             var project1 = new Project(collection) { FullPath = "c:\\y" };
             Assert.Empty(project1.GlobalProperties);
 
@@ -605,7 +609,7 @@ public void SettingGlobalPropertiesOnCollectionUpdatesProjects()
         [Fact]
         public void SettingGlobalPropertiesOnCollectionUpdatesProjects2()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             var project1 = new Project(collection) { FullPath = "c:\\y" };
             // load into collection
             project1.SetGlobalProperty("g1", "v0");
@@ -627,7 +631,7 @@ public void SettingGlobalPropertiesOnCollectionUpdatesProjects2()
         [Fact]
         public void RemovingGlobalPropertiesOnCollectionUpdatesProjects()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             var project1 = new Project(collection) { FullPath = "c:\\y" };
             Assert.Empty(project1.GlobalProperties);
 
@@ -672,7 +676,7 @@ public void RemovingGlobalPropertiesOnCollectionUpdatesProjects()
         [Fact]
         public void RemovingGlobalPropertiesOnCollectionUpdatesProjects2()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             collection.SetGlobalProperty("g1", "v1");
 
             var project1 = new Project(collection) { FullPath = "c:\\y" };
@@ -831,7 +835,7 @@ public void SaveToNewNameAndUnload()
                 Project project = new Project();
                 project.Save(file1);
 
-                ProjectCollection collection = new ProjectCollection();
+                using ProjectCollection collection = new ProjectCollection();
 
                 Project project2 = collection.LoadProject(file1);
                 project2.Save(file2);
@@ -871,7 +875,7 @@ public void LoadUnloadReloadSaveToNewName()
                 project.Save(file1);
                 project.ProjectCollection.UnloadProject(project);
 
-                var collection = new ProjectCollection();
+                using var collection = new ProjectCollection();
 
                 Project project2 = collection.LoadProject(file1);
                 collection.UnloadProject(project2);
@@ -914,7 +918,7 @@ public void LoadUnloadAllReloadSaveToNewName()
                 project.Save(file1);
                 project.ProjectCollection.UnloadProject(project);
 
-                var collection = new ProjectCollection();
+                using var collection = new ProjectCollection();
 
                 collection.LoadProject(file1);
                 collection.UnloadAllProjects();
@@ -944,7 +948,7 @@ public void LoadUnloadAllReloadSaveToNewName()
         [Fact]
         public void AddToolset()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             collection.RemoveAllToolsets();
 
             var toolset = new Toolset("x", "c:\\y", collection, null);
@@ -964,7 +968,7 @@ public void AddToolset()
         [Fact]
         public void AddTwoToolsets()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             collection.RemoveAllToolsets();
 
             var toolset1 = new Toolset("x", "c:\\y", collection, null);
@@ -988,7 +992,7 @@ public void AddTwoToolsets()
         [Fact]
         public void ReplaceToolset()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             collection.RemoveAllToolsets();
 
             var toolset1 = new Toolset("x", "c:\\y", collection, null);
@@ -1022,7 +1026,7 @@ public void AddNullToolset()
         [Fact]
         public void RemoveToolset()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
 
             var toolset1 = new Toolset("x", "c:\\y", collection, null);
             var toolset2 = new Toolset("y", "c:\\z", collection, null);
@@ -1044,7 +1048,7 @@ public void RemoveToolset()
         [Fact]
         public void RemoveNonexistentToolset()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             Assert.False(collection.RemoveToolset("nonexistent"));
         }
 
@@ -1084,7 +1088,7 @@ public void DefaultToolsVersion()
                 return;
             }
 
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             Assert.Equal(ObjectModelHelpers.MSBuildDefaultToolsVersion, collection.DefaultToolsVersion);
         }
 
@@ -1104,7 +1108,7 @@ public void DefaultToolsVersion2()
                 return;
             }
 
-            var collection = new ProjectCollection(null, null, ToolsetDefinitionLocations.Registry);
+            using var collection = new ProjectCollection(null, null, ToolsetDefinitionLocations.Registry);
             Assert.Equal(ObjectModelHelpers.MSBuildDefaultToolsVersion, collection.DefaultToolsVersion);
         }
 
@@ -1138,7 +1142,7 @@ public void SetDefaultToolsVersionNonexistentToolset()
         [Fact]
         public void SetDefaultToolsVersion()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             collection.AddToolset(new Toolset("x", @"c:\y", collection, null));
 
             collection.DefaultToolsVersion = "x";
@@ -1151,7 +1155,9 @@ public void SetDefaultToolsVersion()
                     </Project>
                 ");
 
-            var project = new Project(XmlReader.Create(new StringReader(content)), null, null, collection);
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            var project = new Project(xmlReader, null, null, collection);
 
             // ... and after all that, we end up defaulting to the current ToolsVersion instead.  There's a way
             // to turn this behavior (new in Dev12) off, but it requires setting an environment variable and
@@ -1166,7 +1172,7 @@ public void SetDefaultToolsVersion()
         [Fact]
         public void ProjectCollectionChangedEvent()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             bool dirtyRaised = false;
             ProjectCollectionChangedState expectedChange = ProjectCollectionChangedState.Loggers;
             collection.ProjectCollectionChanged +=
@@ -1260,62 +1266,70 @@ public void ProjectCollectionChangedEvent2()
             // then the projects value for the property should not change and no event should be fired.
             var collection = new ProjectCollection();
             XmlReader reader = CreateProjectXmlReader();
-            Project project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
-            project.SetProperty("a", "1");
-            collection.SetGlobalProperty("a", "1");
-            VerifyProjectCollectionEvents(collection, false, "1");
-
-            // Verify if the project, project collection and the value we are setting in the project collection are all the same
-            // then the projects value for the property should not change and no event should be fired.
-            collection = new ProjectCollection();
-            reader = CreateProjectXmlReader();
-            project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
-            project.SetProperty("a", "%28x86%29");
-            collection.SetGlobalProperty("a", "%28x86%29");
-            VerifyProjectCollectionEvents(collection, false, "%28x86%29");
-
-            // Verify if the project, project collection have the same value but a new value is set in the project collection
-            // then the projects value for the property should be change and an event should be fired.
-            collection = new ProjectCollection();
-            reader = CreateProjectXmlReader();
-            project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
-            project.SetProperty("a", "1");
-            collection.SetGlobalProperty("a", "1");
-            VerifyProjectCollectionEvents(collection, true, "2");
-
-            // Verify if the project, project collection have the same value but a new value is set in the project collection
-            // then the projects value for the property should be change and an event should be fired.
-            collection = new ProjectCollection();
-            reader = CreateProjectXmlReader();
-            project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
-            project.SetProperty("a", "1");
-            collection.SetGlobalProperty("a", "(x86)");
-            VerifyProjectCollectionEvents(collection, true, "%28x86%29");
-
-            // Verify if the project has one value and project collection and the property we are setting on the project collection have the same value
-            // then the projects value for the property should be change but no event should be fired
-            collection = new ProjectCollection();
-            reader = CreateProjectXmlReader();
-            project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
-            project.SetProperty("a", "2");
-            collection.SetGlobalProperty("a", "1");
-
-            VerifyProjectCollectionEvents(collection, false, "1");
-
-            // Verify if the project and the property being set have one value but the project collection has another
-            // then the projects value for the property should not change and event should be fired
-            collection = new ProjectCollection();
-            reader = CreateProjectXmlReader();
-            project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
-            project.SetProperty("a", "1");
-            collection.SetGlobalProperty("a", "2");
-            VerifyProjectCollectionEvents(collection, true, "1");
-
-            // item is added to project collection for the first time. Make sure it is added to the project and an event is fired.
-            collection = new ProjectCollection();
-            reader = CreateProjectXmlReader();
-            project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
-            VerifyProjectCollectionEvents(collection, true, "1");
+            try
+            {
+                Project project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
+                project.SetProperty("a", "1");
+                collection.SetGlobalProperty("a", "1");
+                VerifyProjectCollectionEvents(collection, false, "1");
+
+                // Verify if the project, project collection and the value we are setting in the project collection are all the same
+                // then the projects value for the property should not change and no event should be fired.
+                collection = new ProjectCollection();
+                reader = CreateProjectXmlReader();
+                project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
+                project.SetProperty("a", "%28x86%29");
+                collection.SetGlobalProperty("a", "%28x86%29");
+                VerifyProjectCollectionEvents(collection, false, "%28x86%29");
+
+                // Verify if the project, project collection have the same value but a new value is set in the project collection
+                // then the projects value for the property should be change and an event should be fired.
+                collection = new ProjectCollection();
+                reader = CreateProjectXmlReader();
+                project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
+                project.SetProperty("a", "1");
+                collection.SetGlobalProperty("a", "1");
+                VerifyProjectCollectionEvents(collection, true, "2");
+
+                // Verify if the project, project collection have the same value but a new value is set in the project collection
+                // then the projects value for the property should be change and an event should be fired.
+                collection = new ProjectCollection();
+                reader = CreateProjectXmlReader();
+                project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
+                project.SetProperty("a", "1");
+                collection.SetGlobalProperty("a", "(x86)");
+                VerifyProjectCollectionEvents(collection, true, "%28x86%29");
+
+                // Verify if the project has one value and project collection and the property we are setting on the project collection have the same value
+                // then the projects value for the property should be change but no event should be fired
+                collection = new ProjectCollection();
+                reader = CreateProjectXmlReader();
+                project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
+                project.SetProperty("a", "2");
+                collection.SetGlobalProperty("a", "1");
+
+                VerifyProjectCollectionEvents(collection, false, "1");
+
+                // Verify if the project and the property being set have one value but the project collection has another
+                // then the projects value for the property should not change and event should be fired
+                collection = new ProjectCollection();
+                reader = CreateProjectXmlReader();
+                project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
+                project.SetProperty("a", "1");
+                collection.SetGlobalProperty("a", "2");
+                VerifyProjectCollectionEvents(collection, true, "1");
+
+                // item is added to project collection for the first time. Make sure it is added to the project and an event is fired.
+                collection = new ProjectCollection();
+                reader = CreateProjectXmlReader();
+                project = collection.LoadProject(reader, ObjectModelHelpers.MSBuildDefaultToolsVersion);
+                VerifyProjectCollectionEvents(collection, true, "1");
+            }
+            finally
+            {
+                reader.Dispose();
+                collection.Dispose();
+            }
         }
 
         /// <summary>
@@ -1324,7 +1338,7 @@ public void ProjectCollectionChangedEvent2()
         [Fact]
         public void ProjectXmlChangedEvent()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             ProjectRootElement pre = null;
             bool dirtyRaised = false;
             collection.ProjectXmlChanged +=
@@ -1383,7 +1397,7 @@ public void ProjectXmlChangedEvent()
         [Fact]
         public void ProjectChangedEvent()
         {
-            var collection = new ProjectCollection();
+            using var collection = new ProjectCollection();
             Project project = null;
             bool dirtyRaised = false;
             collection.ProjectChanged +=
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
index 37537057d34..1b54be784b9 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
@@ -210,8 +210,9 @@ public void BatchingConsidersItemDefinitionMetadata()
     <Message Text='@(i)/%(m)'/>
   </Target>
 </Project>");
-
-            Project project = new Project(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            Project project = new Project(xmlReader);
 
             MockLogger logger = new MockLogger();
             List<ILogger> loggers = new List<ILogger>() { logger };
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 3c17cb2aea3..2d25c39b64f 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -157,8 +157,9 @@ public void GetMetadataObjectsFromDefinition()
                         </ItemGroup>
                     </Project>
                 ";
-
-            Project project = new Project(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            Project project = new Project(xmlReader);
 
             ProjectItem item = Helpers.GetFirst(project.GetItems("i"));
             ProjectMetadata m0 = item.GetMetadata("m0");
diff --git a/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs
index 2078a37b8db..46a0ea9b453 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs
@@ -49,8 +49,9 @@ public void SetUnevaluatedValue()
                         </ItemGroup>
                     </Project>
                 ");
-
-            ProjectRootElement projectXml = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement projectXml = ProjectRootElement.Create(xmlReader);
             Project project = new Project(projectXml);
 
             Assert.False(project.IsDirty);
diff --git a/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
index b53259968f4..423e222bbe8 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
@@ -285,7 +285,9 @@ public void SetPropertyImported()
         /// </summary>
         private static ProjectProperty GetFirstProperty(string content)
         {
-            ProjectRootElement projectXml = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement projectXml = ProjectRootElement.Create(xmlReader);
             Project project = new Project(projectXml);
             ProjectProperty property = project.GetProperty("p");
 
diff --git a/src/Build.OM.UnitTests/Definition/Project_Tests.cs b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
index 3313fd7bf81..f134686d59f 100644
--- a/src/Build.OM.UnitTests/Definition/Project_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
@@ -104,8 +104,9 @@ public void VerifyNewLinesAndTabsEvaluateToEmpty()
                           <Message Text=""$(Message3)"" Importance=""High""/>
                        </Target>
                     </Project>");
-
-            ProjectRootElement xml = ProjectRootElement.Create(XmlReader.Create(new StringReader(projectFileContent)));
+            using var stringReader = new StringReader(projectFileContent);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
             Project project = new Project(xml);
             bool result = project.Build(new ILogger[] { mockLogger });
             result.ShouldBeTrue();
diff --git a/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs b/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
index 9da3706a604..a3b83138e51 100644
--- a/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
@@ -603,7 +603,10 @@ private Project GetProject()
                 </Project>";
 
             projectContents = Expand(projectContents);
-            Project project = new Project(XmlReader.Create(new StringReader(projectContents)));
+            using var stringReader = new StringReader(projectContents);
+            using var xmlReader = XmlReader.Create(stringReader);
+            Project project = new Project(xmlReader);
+
             return project;
         }
 
diff --git a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
index 7379237e594..d2350904461 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
@@ -415,7 +415,7 @@ public void BuildProjectInstancesConsecutively()
         public void CreateProjectInstanceWithItemsContainingProjects()
         {
             const string CapturedMetadataName = "DefiningProjectFullPath";
-            var pc = new ProjectCollection();
+            using var pc = new ProjectCollection();
             var projA = ProjectRootElement.Create(pc);
             var projB = ProjectRootElement.Create(pc);
             projA.FullPath = Path.Combine(Path.GetTempPath(), "a.proj");
diff --git a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
index 44a917968a2..951d0d5bb13 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
@@ -1167,7 +1167,9 @@ private static ProjectItemInstance GetOneItem(string content)
         /// </summary>
         private static IList<ProjectItemInstance> GetItems(string content)
         {
-            ProjectRootElement xml = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
             ProjectInstance project = new ProjectInstance(xml);
 
             return Helpers.MakeList(project.GetItems("i"));
diff --git a/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs
index 65d57fca9f6..3df8d7d105d 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs
@@ -42,7 +42,9 @@ private static ProjectOnErrorInstance GetSampleOnErrorInstance()
                     </Project>
                 ";
 
-            ProjectRootElement xml = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
             Project project = new Project(xml);
             ProjectInstance instance = project.CreateProjectInstance();
             ProjectOnErrorInstance onError = (ProjectOnErrorInstance)instance.Targets["t"].OnErrorChildren[0];
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs
index a9345ebf6cd..9259779082b 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs
@@ -141,8 +141,9 @@ private static ProjectTargetInstance GetSampleTargetInstance()
                         </Target>
                     </Project>
                 ";
-
-            ProjectRootElement xml = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
             Project project = new Project(xml);
             ProjectInstance instance = project.CreateProjectInstance();
             ProjectTargetInstance target = instance.Targets["t"];
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs
index 52a7f5a2fe1..db271dea200 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs
@@ -71,8 +71,9 @@ private static ProjectTaskInstance GetTaskInstance(string taskXmlString)
                         </Target>
                     </Project>
                 ";
-
-            ProjectRootElement xml = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
             Project project = new Project(xml);
             ProjectInstance instance = project.CreateProjectInstance();
             ProjectTaskInstance task = (ProjectTaskInstance)(instance.Targets["t"].Children[0]);
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs
index 53101e5ff09..98d1f969b8f 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs
@@ -45,7 +45,9 @@ private static ProjectTaskOutputItemInstance GetSampleTaskOutputInstance()
                     </Project>
                 ";
 
-            ProjectRootElement xml = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
             Project project = new Project(xml);
             ProjectInstance instance = project.CreateProjectInstance();
             ProjectTaskInstance task = (ProjectTaskInstance)instance.Targets["t"].Children[0];
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs
index ef41a9564f9..1ab4d581421 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs
@@ -44,8 +44,9 @@ private static ProjectTaskOutputPropertyInstance GetSampleTaskOutputInstance()
                         </Target>
                     </Project>
                 ";
-
-            ProjectRootElement xml = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
             Project project = new Project(xml);
             ProjectInstance instance = project.CreateProjectInstance();
             ProjectTaskInstance task = (ProjectTaskInstance)instance.Targets["t"].Children[0];
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
index c15ef79fb8f..3d3613d574e 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
@@ -167,7 +167,9 @@ private ProjectCollectionLinker(ConnectedProjectCollections group)
         public Project LoadInMemoryWithSettings(string content, ProjectLoadSettings settings = ProjectLoadSettings.Default)
         {
             content = ObjectModelHelpers.CleanupFileContents(content);
-            ProjectRootElement xml = ProjectRootElement.Create(XmlReader.Create(new StringReader(content)));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
             Project project = new Project(xml, null, null, this.Collection, settings);
             return project;
         }
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 33fba22ca1e..0cd7cf3c08c 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2004,7 +2004,7 @@ private Dictionary<ProjectGraphNode, BuildResult> BuildGraph(
             IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetsPerNode,
             GraphBuildRequestData graphBuildRequestData)
         {
-            var waitHandle = new AutoResetEvent(true);
+            using var waitHandle = new AutoResetEvent(true);
             var graphBuildStateLock = new object();
 
             var blockedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes);
diff --git a/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs b/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
index 5670a61e3f1..8bd6604924d 100644
--- a/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
+++ b/src/Build/BackEnd/BuildManager/LegacyThreadingData.cs
@@ -88,9 +88,9 @@ internal void RegisterSubmissionForLegacyThread(int submissionId)
             {
                 ErrorUtilities.VerifyThrow(!_legacyThreadingEventsById.ContainsKey(submissionId), "Submission {0} should not already be registered with LegacyThreadingData", submissionId);
 
-                _legacyThreadingEventsById[submissionId] = new Tuple<AutoResetEvent, ManualResetEvent>(
-                                new AutoResetEvent(false),
-                                new ManualResetEvent(false));
+                using var autoResetEvent = new AutoResetEvent(false);
+                using var manualResetEvent = new ManualResetEvent(false);
+                _legacyThreadingEventsById[submissionId] = new Tuple<AutoResetEvent, ManualResetEvent>(autoResetEvent, manualResetEvent);
             }
         }
 
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index 6b2715903e7..038870977e2 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -445,7 +445,8 @@ private RedirectConsoleWriter(Action<string> writeCallback)
 
             public static TextWriter Create(Action<string> writeCallback)
             {
-                RedirectConsoleWriter writer = new(writeCallback);
+                using RedirectConsoleWriter writer = new(writeCallback);
+
                 return writer._syncWriter;
             }
 
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index eda42874f86..98bae15ec07 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -1032,12 +1032,16 @@ private ITranslator GetConfigurationTranslator(TranslationDirection direction)
                 if (direction == TranslationDirection.WriteToStream)
                 {
                     Directory.CreateDirectory(Path.GetDirectoryName(cacheFile));
-                    return BinaryTranslator.GetWriteTranslator(File.Create(cacheFile));
+                    using FileStream file = File.Create(cacheFile);
+
+                    return BinaryTranslator.GetWriteTranslator(file);
                 }
                 else
                 {
+                    using FileStream file = File.OpenRead(cacheFile);
+
                     // Not using sharedReadBuffer because this is not a memory stream and so the buffer won't be used anyway.
-                    return BinaryTranslator.GetReadTranslator(File.OpenRead(cacheFile), InterningBinaryReader.PoolingBuffer);
+                    return BinaryTranslator.GetReadTranslator(file, InterningBinaryReader.PoolingBuffer);
                 }
             }
             catch (Exception e) when (e is DirectoryNotFoundException || e is UnauthorizedAccessException)
diff --git a/src/Build/BackEnd/Shared/TargetResult.cs b/src/Build/BackEnd/Shared/TargetResult.cs
index d435d1c3606..ec2c1b4567d 100644
--- a/src/Build/BackEnd/Shared/TargetResult.cs
+++ b/src/Build/BackEnd/Shared/TargetResult.cs
@@ -351,11 +351,15 @@ private static ITranslator GetResultsCacheTranslator(int configId, string target
                     return null;
                 }
 
-                return BinaryTranslator.GetWriteTranslator(File.Create(cacheFile));
+                using FileStream file = File.Create(cacheFile);
+
+                return BinaryTranslator.GetWriteTranslator(file);
             }
             else
             {
-                return BinaryTranslator.GetReadTranslator(File.OpenRead(cacheFile), InterningBinaryReader.PoolingBuffer);
+                using FileStream file = File.OpenRead(cacheFile);
+
+                return BinaryTranslator.GetReadTranslator(file, InterningBinaryReader.PoolingBuffer);
             }
         }
 
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 6f8c5ed00f6..84aefed175a 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -291,26 +291,34 @@ internal static object GetRegistryValueFromView(string keyName, string valueName
                         return string.Empty;
                     }
 
-                    using (RegistryKey key = GetBaseKeyFromKeyName(keyName, view, out string subKeyName))
+                    RegistryKey key = null;
+                    try
                     {
-                        if (key != null)
+                        using (key = GetBaseKeyFromKeyName(keyName, view, out string subKeyName))
                         {
-                            using (RegistryKey subKey = key.OpenSubKey(subKeyName, false))
+                            if (key != null)
                             {
-                                // If we managed to retrieve the subkey, then move onto locating the value
-                                if (subKey != null)
+                                using (RegistryKey subKey = key.OpenSubKey(subKeyName, false))
                                 {
-                                    result = subKey.GetValue(valueName);
-                                }
-
-                                // We've found a value, so stop looking
-                                if (result != null)
-                                {
-                                    break;
+                                    // If we managed to retrieve the subkey, then move onto locating the value
+                                    if (subKey != null)
+                                    {
+                                        result = subKey.GetValue(valueName);
+                                    }
+
+                                    // We've found a value, so stop looking
+                                    if (result != null)
+                                    {
+                                        break;
+                                    }
                                 }
                             }
                         }
                     }
+                    finally
+                    {
+                        key?.Dispose();
+                    }
                 }
             }
 
@@ -446,12 +454,13 @@ internal static object StableStringHash(string toHash, StringHashingAlgorithm al
 
         private static string CalculateSha256(string toHash)
         {
-            var sha = System.Security.Cryptography.SHA256.Create();
+            using var sha = System.Security.Cryptography.SHA256.Create();
             var hashResult = new StringBuilder();
             foreach (byte theByte in sha.ComputeHash(Encoding.UTF8.GetBytes(toHash)))
             {
                 hashResult.Append(theByte.ToString("x2"));
             }
+
             return hashResult.ToString();
         }
 
diff --git a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
index 9dfd281b165..d18ee4c4ae1 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
@@ -107,16 +107,24 @@ protected override ImmutableArray<I> SelectItems(OrderedItemDataCollection.Build
                                 MSBuildEventSource.Log.ExpandGlobStart(_rootDirectory ?? string.Empty, glob, string.Join(", ", excludePatternsForGlobs));
                             }
 
-                            using (_lazyEvaluator._evaluationProfiler.TrackGlob(_rootDirectory, glob, excludePatternsForGlobs))
+                            IDisposable? disposedGlob = null;
+                            try
                             {
-                                includeSplitFilesEscaped = EngineFileUtilities.GetFileListEscaped(
-                                    _rootDirectory,
-                                    glob,
-                                    excludePatternsForGlobs,
-                                    fileMatcher: FileMatcher,
-                                    loggingMechanism: _lazyEvaluator._loggingContext,
-                                    includeLocation: _itemElement.IncludeLocation,
-                                    excludeLocation: _itemElement.ExcludeLocation);
+                                using (disposedGlob = _lazyEvaluator._evaluationProfiler.TrackGlob(_rootDirectory, glob, excludePatternsForGlobs))
+                                {
+                                    includeSplitFilesEscaped = EngineFileUtilities.GetFileListEscaped(
+                                        _rootDirectory,
+                                        glob,
+                                        excludePatternsForGlobs,
+                                        fileMatcher: FileMatcher,
+                                        loggingMechanism: _lazyEvaluator._loggingContext,
+                                        includeLocation: _itemElement.IncludeLocation,
+                                        excludeLocation: _itemElement.ExcludeLocation);
+                                }
+                            }
+                            finally
+                            {
+                                disposedGlob?.Dispose();
                             }
 
                             if (MSBuildEventSource.Log.IsEnabled())
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index fe63676c1d2..1837bb2663f 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -2771,8 +2771,9 @@ private static ProjectInstance[] GenerateSolutionWrapperUsingOldOM(
             XmlReaderSettings xrs = new XmlReaderSettings();
             xrs.DtdProcessing = DtdProcessing.Ignore;
 
-            ProjectRootElement projectRootElement = new ProjectRootElement(XmlReader.Create(new StringReader(wrapperProjectXml), xrs), projectRootElementCache, isExplicitlyLoaded,
-                preserveFormatting: false);
+            using var stringReader = new StringReader(wrapperProjectXml);
+            using var xmlReader = XmlReader.Create(stringReader, xrs);
+            ProjectRootElement projectRootElement = new ProjectRootElement(xmlReader, projectRootElementCache, isExplicitlyLoaded, preserveFormatting: false);
             projectRootElement.DirectoryPath = Path.GetDirectoryName(projectFile);
             ProjectInstance instance = new ProjectInstance(projectRootElement, globalProperties, toolsVersion, buildParameters, loggingService, projectBuildEventContext, sdkResolverService, submissionId);
             return new ProjectInstance[] { instance };
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs b/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
index 2993b3953c1..5fadcd93306 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
@@ -60,12 +60,14 @@ public static byte[] ReadToEnd(this Stream stream)
         {
             if (stream.TryGetLength(out long length))
             {
-                BinaryReader reader = new(stream);
+                using BinaryReader reader = new(stream);
+
                 return reader.ReadBytes((int)length);
             }
 
             using var ms = new MemoryStream();
             stream.CopyTo(ms);
+
             return ms.ToArray();
         }
 
diff --git a/src/Deprecated/Engine/Engine/IntrinsicFunctions.cs b/src/Deprecated/Engine/Engine/IntrinsicFunctions.cs
index e38ed53576e..1ef4472659f 100644
--- a/src/Deprecated/Engine/Engine/IntrinsicFunctions.cs
+++ b/src/Deprecated/Engine/Engine/IntrinsicFunctions.cs
@@ -196,27 +196,34 @@ internal static object GetRegistryValueFromView(string keyName, string valueName
                     // This may throw - and that's fine as the user will receive a controlled version
                     // of that error.
                     RegistryView view = (RegistryView)Enum.Parse(typeof(RegistryView), viewAsString, true);
-
-                    using (RegistryKey key = GetBaseKeyFromKeyName(keyName, view, out subKeyName))
+                    RegistryKey key = null;
+                    try
                     {
-                        if (key != null)
+                        using (key = GetBaseKeyFromKeyName(keyName, view, out subKeyName))
                         {
-                            using (RegistryKey subKey = key.OpenSubKey(subKeyName, false))
+                            if (key != null)
                             {
-                                // If we managed to retrieve the subkey, then move onto locating the value
-                                if (subKey != null)
-                                {
-                                    result = subKey.GetValue(valueName);
-                                }
-
-                                // We've found a value, so stop looking
-                                if (result != null)
+                                using (RegistryKey subKey = key.OpenSubKey(subKeyName, false))
                                 {
-                                    break;
+                                    // If we managed to retrieve the subkey, then move onto locating the value
+                                    if (subKey != null)
+                                    {
+                                        result = subKey.GetValue(valueName);
+                                    }
+
+                                    // We've found a value, so stop looking
+                                    if (result != null)
+                                    {
+                                        break;
+                                    }
                                 }
                             }
                         }
                     }
+                    finally
+                    {
+                        key?.Dispose();
+                    }
                 }
             }
 
diff --git a/src/Deprecated/Engine/LocalProvider/LocalNode.cs b/src/Deprecated/Engine/LocalProvider/LocalNode.cs
index 73869190849..0183e9abd10 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalNode.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalNode.cs
@@ -9,9 +9,9 @@
 using System.Collections;
 using System.Diagnostics;
 using System.IO;
+using System.Security.AccessControl;
 using System.Threading;
 using Microsoft.Build.BuildEngine.Shared;
-using System.Security.AccessControl;
 
 namespace Microsoft.Build.BuildEngine
 {
@@ -237,9 +237,14 @@ public static void StartLocalNodeServer(int nodeNumber)
             if (!Engine.debugMode)
             {
                 // Create null streams for the current input/output/error streams
-                Console.SetOut(new StreamWriter(Stream.Null));
-                Console.SetError(new StreamWriter(Stream.Null));
-                Console.SetIn(new StreamReader(Stream.Null));
+                using var outStream = new StreamWriter(Stream.Null);
+                Console.SetOut(outStream);
+
+                using var errorStream = new StreamWriter(Stream.Null);
+                Console.SetError(errorStream);
+
+                using var inStream = new StreamReader(Stream.Null);
+                Console.SetIn(inStream);
             }
 
             bool continueRunning = true;
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index b543973746e..bdca981b836 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -1201,7 +1201,7 @@ internal static void KillTree(int processIdToKill)
 
             // Grab the process handle.  We want to keep this open for the duration of the function so that
             // it cannot be reused while we are running.
-            SafeProcessHandle hProcess = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, processIdToKill);
+            using SafeProcessHandle hProcess = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, processIdToKill);
             if (hProcess.IsInvalid)
             {
                 return;
@@ -1235,19 +1235,19 @@ internal static void KillTree(int processIdToKill)
                 {
                     foreach (KeyValuePair<int, SafeProcessHandle> childProcessInfo in children)
                     {
-                        childProcessInfo.Value.Dispose();
+                        childProcessInfo.Value?.Dispose();
                     }
                 }
             }
             finally
             {
                 // Release the handle.  After this point no more children of this process exist and this process has also exited.
-                hProcess.Dispose();
+                hProcess?.Dispose();
             }
         }
         finally
         {
-            thisProcess.Dispose();
+            thisProcess?.Dispose();
         }
     }
 
@@ -1296,7 +1296,7 @@ internal static int GetParentProcessId(int processId)
         else
 #endif
         {
-            SafeProcessHandle hProcess = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, processId);
+            using SafeProcessHandle hProcess = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, processId);
 
             if (!hProcess.IsInvalid)
             {
@@ -1314,7 +1314,7 @@ internal static int GetParentProcessId(int processId)
                 }
                 finally
                 {
-                    hProcess.Dispose();
+                    hProcess?.Dispose();
                 }
             }
         }
@@ -1337,7 +1337,7 @@ internal static List<KeyValuePair<int, SafeProcessHandle>> GetChildProcessIds(in
             {
                 // Hold the child process handle open so that children cannot die and restart with a different parent after we've started looking at it.
                 // This way, any handle we pass back is guaranteed to be one of our actual children.
-                SafeProcessHandle childHandle = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, possibleChildProcess.Id);
+                using SafeProcessHandle childHandle = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, possibleChildProcess.Id);
                 if (childHandle.IsInvalid)
                 {
                     continue;
@@ -1364,7 +1364,7 @@ internal static List<KeyValuePair<int, SafeProcessHandle>> GetChildProcessIds(in
                 {
                     if (!keepHandle)
                     {
-                        childHandle.Dispose();
+                        childHandle?.Dispose();
                     }
                 }
             }
diff --git a/src/Framework/Telemetry/LoggingConfigurationTelemetry.cs b/src/Framework/Telemetry/LoggingConfigurationTelemetry.cs
index 493a945a526..9c721301747 100644
--- a/src/Framework/Telemetry/LoggingConfigurationTelemetry.cs
+++ b/src/Framework/Telemetry/LoggingConfigurationTelemetry.cs
@@ -1,7 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
 using System.Collections.Generic;
 using System.Globalization;
 
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 213b842ae6a..f069fc6e379 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -34,8 +34,6 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.Debugging;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
-using static Microsoft.Build.CommandLine.MSBuildApp;
 using BinaryLogger = Microsoft.Build.Logging.BinaryLogger;
 using ConsoleLogger = Microsoft.Build.Logging.ConsoleLogger;
 using FileLogger = Microsoft.Build.Logging.FileLogger;
@@ -824,7 +822,8 @@ public static ExitType Execute(
                             using (ProjectCollection collection = new(globalProperties, loggers, ToolsetDefinitionLocations.Default))
                             {
                                 Project project = collection.LoadProject(projectFile, globalProperties, toolsVersion);
-                                TextWriter output = getResultOutputFile.Length > 0 ? new StreamWriter(getResultOutputFile) : Console.Out;
+                                using var streamWriter = new StreamWriter(getResultOutputFile);
+                                TextWriter output = getResultOutputFile.Length > 0 ? streamWriter : Console.Out;
                                 exitType = OutputPropertiesAfterEvaluation(getProperty, getItem, project, output);
                                 collection.LogBuildFinishedEvent(exitType == ExitType.Success);
                             }
@@ -887,7 +886,8 @@ public static ExitType Execute(
 
                     if (outputPropertiesItemsOrTargetResults && targets?.Length > 0 && result is not null)
                     {
-                        TextWriter outputStream = getResultOutputFile.Length > 0 ? new StreamWriter(getResultOutputFile) : Console.Out;
+                        using var streamWriter = new StreamWriter(getResultOutputFile);
+                        TextWriter outputStream = getResultOutputFile.Length > 0 ? streamWriter : Console.Out;
                         exitType = OutputBuildInformationInJson(result, getProperty, getItem, getTargetResult, loggers, exitType, outputStream);
                     }
 
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 6c12448b1ad..580229eabf7 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -481,8 +481,9 @@ private void PacketPumpProc()
                 }
             }
 
+            using var stream = new BufferedReadStream(_pipeServer);
             RunReadLoop(
-                new BufferedReadStream(_pipeServer),
+                stream,
                 _pipeServer,
                 localPacketQueue, localPacketAvailable, localTerminatePacketPump);
 
@@ -592,7 +593,8 @@ private void RunReadLoop(Stream localReadPipe, Stream localWritePipe,
 
                             try
                             {
-                                _packetFactory.DeserializeAndRoutePacket(0, packetType, BinaryTranslator.GetReadTranslator(localReadPipe, _sharedReadBuffer));
+                                using ITranslator readTranslator = BinaryTranslator.GetReadTranslator(localReadPipe, _sharedReadBuffer);
+                                _packetFactory.DeserializeAndRoutePacket(0, packetType, readTranslator);
                             }
                             catch (Exception e)
                             {
@@ -624,7 +626,7 @@ private void RunReadLoop(Stream localReadPipe, Stream localWritePipe,
                                 var packetStream = _packetStream;
                                 packetStream.SetLength(0);
 
-                                ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(packetStream);
+                                using ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(packetStream);
 
                                 packetStream.WriteByte((byte)packet.Type);
 
diff --git a/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs b/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs
index 1cd5bc6f38f..6b4ca8d6510 100644
--- a/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs
+++ b/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs
@@ -45,20 +45,22 @@ private SpanBasedStringBuilder MakeSpanBasedStringBuilder(InterningTestData.Test
         }
 
         public static IEnumerable<object[]> TestData => InterningTestData.TestData;
+
         public static IEnumerable<object[]> TestDataForTrim => InterningTestData.TestDataForTrim;
 
         [Theory]
         [MemberData(nameof(TestData))]
         public void LengthReturnsLength(InterningTestData.TestDatum datum)
         {
-            MakeSpanBasedStringBuilder(datum).Length.ShouldBe(datum.Length);
+            using SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
+            stringBuilder.Length.ShouldBe(datum.Length);
         }
 
         [Theory]
         [MemberData(nameof(TestData))]
         public void EnumeratorEnumeratesCharacters(InterningTestData.TestDatum datum)
         {
-            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
+            using SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
             int index = 0;
             foreach (char ch in stringBuilder)
             {
@@ -71,7 +73,8 @@ public void EnumeratorEnumeratesCharacters(InterningTestData.TestDatum datum)
         [MemberData(nameof(TestData))]
         public void EqualsReturnsExpectedValue(InterningTestData.TestDatum datum)
         {
-            InternableString internableString = new InternableString(MakeSpanBasedStringBuilder(datum));
+            using SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
+            InternableString internableString = new InternableString(stringBuilder);
             internableString.Equals(string.Empty).ShouldBe(internableString.Length == 0);
 
             string substr = datum.Fragments[0] ?? string.Empty;
@@ -110,7 +113,7 @@ public void GetHashCodeIsStableRegardlessOfSpanLength(string testString)
             {
                 for (int j = i + 1; j < testString.Length; j++)
                 {
-                    SpanBasedStringBuilder stringBuilder = new SpanBasedStringBuilder();
+                    using SpanBasedStringBuilder stringBuilder = new SpanBasedStringBuilder();
                     stringBuilder.Append(testString.Substring(0, i));
                     stringBuilder.Append(testString.Substring(i, j - i));
                     stringBuilder.Append(testString.Substring(j));
@@ -124,7 +127,7 @@ public void GetHashCodeIsStableRegardlessOfSpanLength(string testString)
         [MemberData(nameof(TestData))]
         public void AppendAppendsString(InterningTestData.TestDatum datum)
         {
-            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum, false);
+            using SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum, false);
             new InternableString(stringBuilder).ExpensiveConvertToString().ShouldBe(datum.ToString());
         }
 
@@ -132,7 +135,7 @@ public void AppendAppendsString(InterningTestData.TestDatum datum)
         [MemberData(nameof(TestData))]
         public void AppendAppendsSubstring(InterningTestData.TestDatum datum)
         {
-            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum, true);
+            using SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum, true);
             new InternableString(stringBuilder).ExpensiveConvertToString().ShouldBe(datum.ToString());
         }
 
@@ -141,7 +144,7 @@ public void AppendAppendsSubstring(InterningTestData.TestDatum datum)
         [MemberData(nameof(TestDataForTrim))]
         public void TrimStartRemovesLeadingWhiteSpace(InterningTestData.TestDatum datum)
         {
-            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
+            using SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
             stringBuilder.TrimStart();
             new InternableString(stringBuilder).ExpensiveConvertToString().ShouldBe(datum.ToString().TrimStart());
         }
@@ -150,7 +153,7 @@ public void TrimStartRemovesLeadingWhiteSpace(InterningTestData.TestDatum datum)
         [MemberData(nameof(TestDataForTrim))]
         public void TrimEndRemovesTrailingWhiteSpace(InterningTestData.TestDatum datum)
         {
-            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
+            using SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
             stringBuilder.TrimEnd();
             new InternableString(stringBuilder).ExpensiveConvertToString().ShouldBe(datum.ToString().TrimEnd());
         }
@@ -159,7 +162,7 @@ public void TrimEndRemovesTrailingWhiteSpace(InterningTestData.TestDatum datum)
         [MemberData(nameof(TestDataForTrim))]
         public void TrimRemovesLeadingAndTrailingWhiteSpace(InterningTestData.TestDatum datum)
         {
-            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
+            using SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
             stringBuilder.Trim();
             new InternableString(stringBuilder).ExpensiveConvertToString().ShouldBe(datum.ToString().Trim());
         }
@@ -169,7 +172,7 @@ public void TrimRemovesLeadingAndTrailingWhiteSpace(InterningTestData.TestDatum
         [MemberData(nameof(TestData))]
         public void ClearRemovesAllCharacters(InterningTestData.TestDatum datum)
         {
-            SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
+            using SpanBasedStringBuilder stringBuilder = MakeSpanBasedStringBuilder(datum);
             stringBuilder.Clear();
             stringBuilder.Length.ShouldBe(0);
             stringBuilder.GetEnumerator().MoveNext().ShouldBeFalse();
diff --git a/src/Tasks/AppConfig/AppConfig.cs b/src/Tasks/AppConfig/AppConfig.cs
index 7f50e75cc29..5add09b4058 100644
--- a/src/Tasks/AppConfig/AppConfig.cs
+++ b/src/Tasks/AppConfig/AppConfig.cs
@@ -25,7 +25,7 @@ internal void Load(string appConfigFilePath)
             XmlReader reader = null;
             try
             {
-                var readerSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore, CloseInput = true};
+                var readerSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore, CloseInput = true };
 
                 // it's important to normalize the path as it may contain two slashes
                 // see https://github.com/dotnet/msbuild/issues/4335 for details.
@@ -33,9 +33,13 @@ internal void Load(string appConfigFilePath)
 
                 // Need a filestream as the XmlReader doesn't support nonstandard unicode characters in path.
                 // No need to dispose - as 'CloseInput' was passed to XmlReaderSettings
-                FileStream fs = File.OpenRead(appConfigFilePath);
-                reader = XmlReader.Create(fs, readerSettings);
-                Read(reader);
+                using (FileStream fs = File.OpenRead(appConfigFilePath))
+                {
+                    using (reader = XmlReader.Create(fs, readerSettings))
+                    {
+                        Read(reader);
+                    }
+                }
             }
             catch (XmlException e)
             {
diff --git a/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs b/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
index 0b296e958ca..07020bd7a45 100644
--- a/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
+++ b/src/Tasks/BootstrapperUtil/BootstrapperBuilder.cs
@@ -225,7 +225,8 @@ public BuildResults Build(BuildSettings settings)
                     var fi = new FileInfo(de.Value);
                     using (FileStream fs = fi.OpenRead())
                     {
-                        data = new StreamReader(fs).ReadToEnd();
+                        using StreamReader sr = new StreamReader(fs);
+                        data = sr.ReadToEnd();
                     }
 
                     resourceUpdater.AddStringResource(44, de.Key, data);
@@ -835,7 +836,7 @@ private XmlDocument LoadAndValidateXmlDocument(string filePath, bool validateFil
                     if (validate)
                     {
 #pragma warning disable 618 // Using XmlValidatingReader. TODO: We need to switch to using XmlReader.Create() with validation.
-                        var validatingReader = new XmlValidatingReader(xmlReader);
+                        using var validatingReader = new XmlValidatingReader(xmlReader);
 #pragma warning restore 618
                         var xrSettings = new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore, CloseInput = true };
                         FileStream fs = File.OpenRead(schemaPath);
@@ -1657,7 +1658,7 @@ private static string GetFileHash(string filePath)
             // pre-signed anwyay; this is a fallback in case we ever encounter a bootstrapper that is
             // not signed.
 #pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
-            System.Security.Cryptography.SHA256 sha = System.Security.Cryptography.SHA256.Create(
+            using System.Security.Cryptography.SHA256 sha = System.Security.Cryptography.SHA256.Create(
 #if FEATURE_CRYPTOGRAPHIC_FACTORY_ALGORITHM_NAMES
                 "System.Security.Cryptography.SHA256CryptoServiceProvider"
 #endif
@@ -2033,7 +2034,9 @@ private static void DumpXmlToFile(XmlNode node, string fileName)
                     {
                         xmlwriter.Formatting = Formatting.Indented;
                         xmlwriter.Indentation = 4;
-                        xmlwriter.WriteNode(new XmlNodeReader(node), true);
+
+                        using var xmlNodeReader = new XmlNodeReader(node);
+                        xmlwriter.WriteNode(xmlNodeReader, true);
                     }
                 }
                 catch (IOException)
@@ -2194,8 +2197,9 @@ private static string GetPublicKeyOfFile(string fileSource)
             {
                 try
                 {
-                    var cert = new X509Certificate(fileSource);
+                    using var cert = new X509Certificate(fileSource);
                     string publicKey = cert.GetPublicKeyString();
+
                     return publicKey;
                 }
                 catch (System.Security.Cryptography.CryptographicException)
diff --git a/src/Tasks/CodeTaskFactory.cs b/src/Tasks/CodeTaskFactory.cs
index f863c969cbf..e1923c87f9d 100644
--- a/src/Tasks/CodeTaskFactory.cs
+++ b/src/Tasks/CodeTaskFactory.cs
@@ -738,7 +738,7 @@ private Assembly CompileInMemoryAssembly()
 
                 // Horrible code dom / compilation declarations
                 var codeBuilder = new StringBuilder();
-                var writer = new StringWriter(codeBuilder, CultureInfo.CurrentCulture);
+                using var writer = new StringWriter(codeBuilder, CultureInfo.CurrentCulture);
                 var codeGeneratorOptions = new CodeGeneratorOptions
                 {
                     BlankLinesBetweenMembers = true,
diff --git a/src/Tasks/DownloadFile.cs b/src/Tasks/DownloadFile.cs
index efe54f514ca..fdb34c176b1 100644
--- a/src/Tasks/DownloadFile.cs
+++ b/src/Tasks/DownloadFile.cs
@@ -145,8 +145,9 @@ private async Task<bool> ExecuteAsync()
         /// <param name="cancellationToken">The cancellation token for the task.</param>
         private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
         {
+            using var httpHandler = new HttpClientHandler();
             // The main reason to use HttpClient vs WebClient is because we can pass a message handler for unit tests to mock
-            using (var client = new HttpClient(HttpMessageHandler ?? new HttpClientHandler(), disposeHandler: true) { Timeout = TimeSpan.FromMilliseconds(Timeout) })
+            using (var client = new HttpClient(HttpMessageHandler ?? httpHandler, disposeHandler: true) { Timeout = TimeSpan.FromMilliseconds(Timeout) })
             {
                 // Only get the response without downloading the file so we can determine if the file is already up-to-date
                 using (HttpResponseMessage response = await client.GetAsync(uri, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false))
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index 572a19ea3bb..0c2f4678721 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -975,7 +975,7 @@ private bool IsDangerous(String filename)
                 dangerous = false;
 
                 FileStream stream = new FileStream(filename, FileMode.Open, FileAccess.Read, FileShare.Read);
-                XmlTextReader reader = new XmlTextReader(stream);
+                using XmlTextReader reader = new XmlTextReader(stream);
                 reader.DtdProcessing = DtdProcessing.Ignore;
                 reader.XmlResolver = null;
                 try
@@ -1624,12 +1624,12 @@ private void GetStronglyTypedResourceToProcess(ref List<ITaskItem> inputsToProce
             bool needToRebuildSTR = false;
 
             // The resource file isn't out of date. So check whether the STR class file is.
+            CodeDomProvider provider = null;
+
             try
             {
                 if (StronglyTypedFileName == null)
                 {
-                    CodeDomProvider provider = null;
-
                     if (ProcessResourceFiles.TryCreateCodeDomProvider(Log, StronglyTypedLanguage, out provider))
                     {
                         StronglyTypedFileName = ProcessResourceFiles.GenerateDefaultStronglyTypedFilename(provider, OutputResources[0].ItemSpec);
@@ -1645,6 +1645,10 @@ private void GetStronglyTypedResourceToProcess(ref List<ITaskItem> inputsToProce
                 _stronglyTypedResourceSuccessfullyCreated = false;
                 return;
             }
+            finally
+            {
+                provider?.Dispose();
+            }
 
             // Now we have the filename, check if it's up to date
             DateTime sourceTime = NativeMethodsShared.GetLastWriteFileUtcTime(Sources[0].ItemSpec);
@@ -2153,11 +2157,17 @@ private void RecordFilesWritten()
             {
                 if (StronglyTypedFileName == null)
                 {
-                    CodeDomProvider provider;
-                    if (ProcessResourceFiles.TryCreateCodeDomProvider(Log, StronglyTypedLanguage, out provider))
+                    CodeDomProvider provider = null;
+                    try
+                    {
+                        if (ProcessResourceFiles.TryCreateCodeDomProvider(Log, StronglyTypedLanguage, out provider))
+                        {
+                            StronglyTypedFileName = ProcessResourceFiles.GenerateDefaultStronglyTypedFilename(provider, OutputResources[0].ItemSpec);
+                        }
+                    }
+                    finally
                     {
-                        StronglyTypedFileName = ProcessResourceFiles.GenerateDefaultStronglyTypedFilename(
-                            provider, OutputResources[0].ItemSpec);
+                        provider?.Dispose();
                     }
                 }
 
@@ -3412,11 +3422,18 @@ private bool HaveSystemResourcesExtensionsReference
         /// <param name="sourceFile">The generated strongly typed filename</param>
         private void CreateStronglyTypedResources(ReaderInfo reader, String outFile, String inputFileName, out String sourceFile)
         {
-            CodeDomProvider provider;
-            if (!TryCreateCodeDomProvider(_logger, _stronglyTypedLanguage, out provider))
+            CodeDomProvider provider = null;
+            try
             {
-                sourceFile = null;
-                return;
+                if (!TryCreateCodeDomProvider(_logger, _stronglyTypedLanguage, out provider))
+                {
+                    sourceFile = null;
+                    return;
+                }
+            }
+            finally
+            {
+                provider?.Dispose();
             }
 
             // Default the class name if we need to
@@ -3542,15 +3559,16 @@ private void ReadResources(ReaderInfo readerInfo, IResourceReader reader, String
 #endif // FEATURE_RESXREADER_LIVEDESERIALIZATION
 
         /// <summary>
-        /// Read resources from a text format file
+        /// Read resources from a text format file.
         /// </summary>
-        /// <param name="reader">Reader info</param>
-        /// <param name="fileName">Input resources filename</param>
+        /// <param name="reader">Reader info.</param>
+        /// <param name="fileName">Input resources filename.</param>
         private void ReadTextResources(ReaderInfo reader, String fileName)
         {
             // Check for byte order marks in the beginning of the input file, but
             // default to UTF-8.
-            using (LineNumberStreamReader sr = new LineNumberStreamReader(fileName, new UTF8Encoding(true), true))
+            using FileStream fileStream = File.Open(fileName, FileMode.Open, FileAccess.Read, FileShare.Read);
+            using (LineNumberStreamReader sr = new LineNumberStreamReader(fileStream, new UTF8Encoding(true), true))
             {
                 StringBuilder name = new StringBuilder(255);
                 StringBuilder value = new StringBuilder(2048);
@@ -3876,8 +3894,8 @@ internal sealed class LineNumberStreamReader : StreamReader
             private int _lineNumber;
             private int _col;
 
-            internal LineNumberStreamReader(String fileName, Encoding encoding, bool detectEncoding)
-                : base(File.Open(fileName, FileMode.Open, FileAccess.Read, FileShare.Read), encoding, detectEncoding)
+            internal LineNumberStreamReader(Stream fileStream, Encoding encoding, bool detectEncoding)
+                : base(fileStream, encoding, detectEncoding)
             {
                 _lineNumber = 1;
                 _col = 0;
diff --git a/src/Tasks/GetAssembliesMetadata.cs b/src/Tasks/GetAssembliesMetadata.cs
index d5f67c62f36..eb26ab77c95 100644
--- a/src/Tasks/GetAssembliesMetadata.cs
+++ b/src/Tasks/GetAssembliesMetadata.cs
@@ -2,20 +2,11 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.Diagnostics.CodeAnalysis;
-using System.Globalization;
 using System.IO;
-using System.Linq;
-using System.Reflection;
 using System.Runtime.Versioning;
-using System.Threading;
-using System.Threading.Tasks;
-using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Tasks.AssemblyDependency;
 using Microsoft.Build.Utilities;
 
@@ -50,7 +41,7 @@ public override bool Execute()
                 // During DTB the referenced project may not has been built yet, so we need to check if the assembly already exists.
                 if (File.Exists(assemblyPath))
                 {
-                    AssemblyInformation assemblyInformation = new(assemblyPath);
+                    using AssemblyInformation assemblyInformation = new(assemblyPath);
                     AssemblyAttributes attributes = assemblyInformation.GetAssemblyMetadata();
 
                     if (attributes != null)
diff --git a/src/Tasks/GetInstalledSDKLocations.cs b/src/Tasks/GetInstalledSDKLocations.cs
index 011ce919725..8f4bb052bd9 100644
--- a/src/Tasks/GetInstalledSDKLocations.cs
+++ b/src/Tasks/GetInstalledSDKLocations.cs
@@ -194,7 +194,7 @@ public override bool Execute()
                 object staticCacheDisposer = buildEngine4.GetRegisteredTaskObject(StaticSDKCacheKey, RegisteredTaskObjectLifetime.Build);
                 if (staticCacheDisposer == null)
                 {
-                    BuildCacheDisposeWrapper staticDisposer = new BuildCacheDisposeWrapper(ToolLocationHelper.ClearSDKStaticCache);
+                    using BuildCacheDisposeWrapper staticDisposer = new BuildCacheDisposeWrapper(ToolLocationHelper.ClearSDKStaticCache);
                     buildEngine4.RegisterTaskObject(StaticSDKCacheKey, staticDisposer, RegisteredTaskObjectLifetime.Build, allowEarlyCollection: false);
                 }
             }
diff --git a/src/Tasks/ManifestUtil/ManifestFormatter.cs b/src/Tasks/ManifestUtil/ManifestFormatter.cs
index a4295b3da34..7171fff8e71 100644
--- a/src/Tasks/ManifestUtil/ManifestFormatter.cs
+++ b/src/Tasks/ManifestUtil/ManifestFormatter.cs
@@ -17,7 +17,7 @@ public static Stream Format(Stream input)
         {
             int t1 = Environment.TickCount;
 
-            var r = new XmlTextReader(input)
+            using var r = new XmlTextReader(input)
             {
                 DtdProcessing = DtdProcessing.Ignore,
                 WhitespaceHandling = WhitespaceHandling.None
@@ -25,7 +25,7 @@ public static Stream Format(Stream input)
             XmlNamespaceManager nsmgr = XmlNamespaces.GetNamespaceManager(r.NameTable);
 
             var m = new MemoryStream();
-            var w = new XmlTextWriter(m, Encoding.UTF8)
+            using var w = new XmlTextWriter(m, Encoding.UTF8)
             {
                 Formatting = Formatting.Indented,
                 Indentation = 2
diff --git a/src/Tasks/ManifestUtil/ManifestReader.cs b/src/Tasks/ManifestUtil/ManifestReader.cs
index fc4afee3919..f10c0d2a963 100644
--- a/src/Tasks/ManifestUtil/ManifestReader.cs
+++ b/src/Tasks/ManifestUtil/ManifestReader.cs
@@ -224,7 +224,7 @@ public static Manifest ReadManifest(string manifestType, Stream input, bool pres
         private static Manifest Deserialize(Stream s)
         {
             s.Position = 0;
-            var r = new XmlTextReader(s) { DtdProcessing = DtdProcessing.Ignore };
+            using var r = new XmlTextReader(s) { DtdProcessing = DtdProcessing.Ignore };
 
             do
             {
diff --git a/src/Tasks/ManifestUtil/ManifestWriter.cs b/src/Tasks/ManifestUtil/ManifestWriter.cs
index 562cc1f1c0f..da4a25b1d0a 100644
--- a/src/Tasks/ManifestUtil/ManifestWriter.cs
+++ b/src/Tasks/ManifestUtil/ManifestWriter.cs
@@ -22,9 +22,9 @@ public static class ManifestWriter
         private static Stream Serialize(Manifest manifest)
         {
             manifest.OnBeforeSave();
-            var m = new MemoryStream();
+            using var m = new MemoryStream();
             var s = new XmlSerializer(manifest.GetType());
-            var w = new StreamWriter(m);
+            using var w = new StreamWriter(m);
 
             int t1 = Environment.TickCount;
             s.Serialize(w, manifest);
diff --git a/src/Tasks/ManifestUtil/SecurityUtil.cs b/src/Tasks/ManifestUtil/SecurityUtil.cs
index 9951399b793..abe7dc3277e 100644
--- a/src/Tasks/ManifestUtil/SecurityUtil.cs
+++ b/src/Tasks/ManifestUtil/SecurityUtil.cs
@@ -205,7 +205,7 @@ private static XmlElement GetXmlElement(string targetZone, FrameworkName fn)
                         {
                             try
                             {
-                                var sr = new StreamReader(fs);
+                                using var sr = new StreamReader(fs);
                                 string data = sr.ReadToEnd();
                                 if (!string.IsNullOrEmpty(data))
                                 {
@@ -610,7 +610,7 @@ public static void SignFile(string certThumbprint,
         [SupportedOSPlatform("windows")]
         public static void SignFile(string certPath, SecureString certPassword, Uri timestampUrl, string path)
         {
-            X509Certificate2 cert = new X509Certificate2(certPath, certPassword, X509KeyStorageFlags.PersistKeySet);
+            using X509Certificate2 cert = new X509Certificate2(certPath, certPassword, X509KeyStorageFlags.PersistKeySet);
             SignFile(cert, timestampUrl, path);
         }
 
@@ -705,7 +705,7 @@ private static void SignFileInternal(X509Certificate2 cert,
                         CmiManifestSigner2 signer;
                         if (useSha256 && rsa is RSACryptoServiceProvider rsacsp)
                         {
-                            RSACryptoServiceProvider csp = SignedCmiManifest2.GetFixedRSACryptoServiceProvider(rsacsp, useSha256);
+                            using RSACryptoServiceProvider csp = SignedCmiManifest2.GetFixedRSACryptoServiceProvider(rsacsp, useSha256);
                             signer = new CmiManifestSigner2(csp, cert, useSha256);
                         }
                         else
diff --git a/src/Tasks/ManifestUtil/TrustInfo.cs b/src/Tasks/ManifestUtil/TrustInfo.cs
index ecc02c975a7..8776175eddc 100644
--- a/src/Tasks/ManifestUtil/TrustInfo.cs
+++ b/src/Tasks/ManifestUtil/TrustInfo.cs
@@ -534,7 +534,8 @@ public override string ToString()
             var m = new MemoryStream();
             Write(m);
             m.Position = 0;
-            var r = new StreamReader(m);
+            using var r = new StreamReader(m);
+
             return r.ReadToEnd();
         }
 
diff --git a/src/Tasks/ManifestUtil/Util.cs b/src/Tasks/ManifestUtil/Util.cs
index 4d6b6ca09ea..6197c05a299 100644
--- a/src/Tasks/ManifestUtil/Util.cs
+++ b/src/Tasks/ManifestUtil/Util.cs
@@ -208,8 +208,9 @@ public static Version GetTargetFrameworkVersion(string targetFramework)
 
         public static string GetEmbeddedResourceString(string name)
         {
-            Stream s = GetEmbeddedResourceStream(name);
-            StreamReader r = new StreamReader(s);
+            using Stream s = GetEmbeddedResourceStream(name);
+            using StreamReader r = new StreamReader(s);
+
             return r.ReadToEnd();
         }
 
@@ -238,11 +239,11 @@ private static void GetFileInfoImpl(string path, string targetFrameWorkVersion,
             length = fi.Length;
 
             Stream s = null;
+            HashAlgorithm hashAlg = null;
             try
             {
                 s = fi.OpenRead();
-                HashAlgorithm hashAlg;
-
+             
                 if (string.IsNullOrEmpty(targetFrameWorkVersion) || CompareFrameworkVersions(targetFrameWorkVersion, Constants.TargetFrameworkVersion40) <= 0)
                 {
 #pragma warning disable SA1111, SA1009 // Closing parenthesis should be on line of last parameter
@@ -269,6 +270,7 @@ private static void GetFileInfoImpl(string path, string targetFrameWorkVersion,
             finally
             {
                 s?.Close();
+                hashAlg?.Dispose();
             }
         }
 
@@ -473,7 +475,7 @@ public static void WriteFile(string path, string s)
 
         public static void WriteFile(string path, Stream s)
         {
-            StreamReader r = new StreamReader(s);
+            using StreamReader r = new StreamReader(s);
             WriteFile(path, r.ReadToEnd());
         }
 
@@ -520,7 +522,7 @@ public static void WriteLogFile(string filename, Stream s)
             }
 
             string path = Path.Combine(logPath, filename);
-            StreamReader r = new StreamReader(s);
+            using StreamReader r = new StreamReader(s);
             string text = r.ReadToEnd();
             try
             {
diff --git a/src/Tasks/ManifestUtil/XmlUtil.cs b/src/Tasks/ManifestUtil/XmlUtil.cs
index ca35d8090a0..709aaa1e9e3 100644
--- a/src/Tasks/ManifestUtil/XmlUtil.cs
+++ b/src/Tasks/ManifestUtil/XmlUtil.cs
@@ -114,8 +114,8 @@ public static Stream XslTransform(string resource, Stream input, params Dictiona
                     }
                 }
 
-                var m = new MemoryStream();
-                var w = new XmlTextWriter(m, Encoding.UTF8);
+                using var m = new MemoryStream();
+                using var w = new XmlTextWriter(m, Encoding.UTF8);
                 w.WriteStartDocument();
 
                 int t5 = Environment.TickCount;
diff --git a/src/Tasks/ManifestUtil/mansign2.cs b/src/Tasks/ManifestUtil/mansign2.cs
index dfc7d8e46c2..1e98ca0ec72 100644
--- a/src/Tasks/ManifestUtil/mansign2.cs
+++ b/src/Tasks/ManifestUtil/mansign2.cs
@@ -511,7 +511,8 @@ private static void ReplacePublicKeyToken(XmlDocument manifestDom, AsymmetricAlg
 
             if (snKey is RSACryptoServiceProvider rsacsp)
             {
-                cspPublicKeyBlob = (GetFixedRSACryptoServiceProvider(rsacsp, useSha256)).ExportCspBlob(false);
+                using var cryptoProvider = GetFixedRSACryptoServiceProvider(rsacsp, useSha256);
+                cspPublicKeyBlob = cryptoProvider.ExportCspBlob(false);
                 if (cspPublicKeyBlob == null || cspPublicKeyBlob.Length == 0)
                 {
                     throw new CryptographicException(Win32.NTE_BAD_KEY);
diff --git a/src/Tasks/ResGen.cs b/src/Tasks/ResGen.cs
index 5bce63d6e60..69a313cdfb1 100644
--- a/src/Tasks/ResGen.cs
+++ b/src/Tasks/ResGen.cs
@@ -289,7 +289,7 @@ public override bool Execute()
                     // Default the filename if we need to - regardless of whether the STR was successfully generated
                     if (StronglyTypedFileName == null)
                     {
-                        CodeDomProvider provider;
+                        CodeDomProvider provider = null;
                         try
                         {
                             provider = CodeDomProvider.CreateProvider(StronglyTypedLanguage);
@@ -306,6 +306,10 @@ public override bool Execute()
                             // logged an appropriate error.
                             return false;
                         }
+                        finally
+                        {
+                            provider?.Dispose();
+                        }
 
                         StronglyTypedFileName = ProcessResourceFiles.GenerateDefaultStronglyTypedFilename(provider, outputFile.ItemSpec);
                     }
diff --git a/src/Tasks/ResolveKeySource.cs b/src/Tasks/ResolveKeySource.cs
index deade89479b..2fcfbe94245 100644
--- a/src/Tasks/ResolveKeySource.cs
+++ b/src/Tasks/ResolveKeySource.cs
@@ -216,7 +216,7 @@ private bool ResolveManifestKey()
                     {
                         bool imported = false;
                         // first try it with no password
-                        var cert = new X509Certificate2();
+                        using var cert = new X509Certificate2();
                         var personalStore = new X509Store(StoreName.My, StoreLocation.CurrentUser);
                         try
                         {
diff --git a/src/Tasks/ResourceHandling/FileStreamResource.cs b/src/Tasks/ResourceHandling/FileStreamResource.cs
index ea29bf5b772..ea0c714b80b 100644
--- a/src/Tasks/ResourceHandling/FileStreamResource.cs
+++ b/src/Tasks/ResourceHandling/FileStreamResource.cs
@@ -12,8 +12,11 @@ namespace Microsoft.Build.Tasks.ResourceHandling
     internal class FileStreamResource : IResource
     {
         public string Name { get; }
+
         public string TypeAssemblyQualifiedName { get; }
+
         public string OriginatingFile { get; }
+
         public string FileName { get; }
 
         public string TypeFullName => NameUtilities.FullNameFromAssemblyQualifiedName(TypeAssemblyQualifiedName);
@@ -37,7 +40,7 @@ public void AddTo(IResourceWriter writer)
         {
             if (writer is PreserializedResourceWriter preserializedResourceWriter)
             {
-                FileStream fileStream = new FileStream(FileName, FileMode.Open, FileAccess.Read, FileShare.Read);
+                using FileStream fileStream = new FileStream(FileName, FileMode.Open, FileAccess.Read, FileShare.Read);
 
                 preserializedResourceWriter.AddActivatorResource(Name, fileStream, TypeAssemblyQualifiedName, closeAfterWrite: true);
             }
diff --git a/src/Tasks/Unzip.cs b/src/Tasks/Unzip.cs
index 53ad3198125..6b09424270f 100644
--- a/src/Tasks/Unzip.cs
+++ b/src/Tasks/Unzip.cs
@@ -5,6 +5,7 @@
 using System.IO;
 using System.IO.Compression;
 using System.Linq;
+using System.Runtime.InteropServices.ComTypes;
 using System.Threading;
 
 using Microsoft.Build.Framework;
@@ -98,6 +99,9 @@ public override bool Execute()
 
             BuildEngine3.Yield();
 
+            FileStream stream = null;
+            ZipArchive zipArchive = null;
+
             try
             {
                 ParseIncludeExclude();
@@ -114,9 +118,9 @@ public override bool Execute()
 
                         try
                         {
-                            using (FileStream stream = new FileStream(sourceFile.ItemSpec, FileMode.Open, FileAccess.Read, FileShare.Read, bufferSize: 0x1000, useAsync: false))
+                            using (stream = new FileStream(sourceFile.ItemSpec, FileMode.Open, FileAccess.Read, FileShare.Read, bufferSize: 0x1000, useAsync: false))
                             {
-                                using (ZipArchive zipArchive = new ZipArchive(stream, ZipArchiveMode.Read, leaveOpen: false))
+                                using (zipArchive = new ZipArchive(stream, ZipArchiveMode.Read, leaveOpen: false))
                                 {
                                     try
                                     {
@@ -146,6 +150,8 @@ public override bool Execute()
             finally
             {
                 BuildEngine3.Reacquire();
+                stream?.Dispose();
+                zipArchive?.Dispose();
             }
 
             return !_cancellationToken.IsCancellationRequested && !Log.HasLoggedErrors;
diff --git a/src/Tasks/WriteCodeFragment.cs b/src/Tasks/WriteCodeFragment.cs
index 77128537b7a..b586495371c 100644
--- a/src/Tasks/WriteCodeFragment.cs
+++ b/src/Tasks/WriteCodeFragment.cs
@@ -140,7 +140,7 @@ private string GenerateCode(out string extension)
             extension = null;
             bool haveGeneratedContent = false;
 
-            CodeDomProvider provider;
+            CodeDomProvider provider = null;
 
             try
             {
@@ -156,6 +156,10 @@ private string GenerateCode(out string extension)
                 Log.LogErrorWithCodeFromResources("WriteCodeFragment.CouldNotCreateProvider", Language, e.Message);
                 return null;
             }
+            finally
+            {
+                provider?.Dispose();
+            }
 
             extension = provider.FileExtension;
 
diff --git a/src/Tasks/XamlTaskFactory/TaskParser.cs b/src/Tasks/XamlTaskFactory/TaskParser.cs
index bd9f1aa2185..4f487e5ca1e 100644
--- a/src/Tasks/XamlTaskFactory/TaskParser.cs
+++ b/src/Tasks/XamlTaskFactory/TaskParser.cs
@@ -144,7 +144,9 @@ private bool ParseAsContentOrFile(string contentOrFile, string desiredRule)
                     throw new ArgumentException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("Xaml.RuleFileNotFound", contentOrFile));
                 }
 
-                return ParseXamlDocument(new StreamReader(contentOrFile), desiredRule);
+                using var stringReader = new StreamReader(contentOrFile);
+
+                return ParseXamlDocument(stringReader, desiredRule);
             }
 
             // On Windows, xml content string is not a valid path, so, maybeFullPath == null
@@ -158,7 +160,9 @@ private bool ParseAsContentOrFile(string contentOrFile, string desiredRule)
             if (FileSystems.Default.FileExists(maybeFullPath))
             {
                 // file found, parse as a file
-                return ParseXamlDocument(new StreamReader(maybeFullPath), desiredRule);
+                using var stringReader = new StreamReader(maybeFullPath);
+
+                return ParseXamlDocument(stringReader, desiredRule);
             }
 
             // @maybeFullPath is either:
diff --git a/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs b/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs
index 4094d25b62e..342fb1f30b2 100644
--- a/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs
+++ b/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs
@@ -131,7 +131,7 @@ public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> ta
             };
 
             // create the code provider
-            var codegenerator = CodeDomProvider.CreateProvider("cs");
+            using var codegenerator = CodeDomProvider.CreateProvider("cs");
             CompilerResults results;
             bool debugXamlTask = Environment.GetEnvironmentVariable("MSBUILDWRITEXAMLTASK") == "1";
             if (debugXamlTask)
diff --git a/src/Tasks/XslTransformation.cs b/src/Tasks/XslTransformation.cs
index 2f255f143cc..bc42c074438 100644
--- a/src/Tasks/XslTransformation.cs
+++ b/src/Tasks/XslTransformation.cs
@@ -451,8 +451,12 @@ public XslCompiledTransform LoadXslt(bool useTrustedSettings)
                 switch (_xslMode)
                 {
                     case XslModes.Xslt:
-                        xslct.Load(XmlReader.Create(new StringReader(_data)), settings, new XmlUrlResolver());
-                        break;
+                        {
+                            using var xmlReader = XmlReader.Create(new StringReader(_data));
+                            xslct.Load(xmlReader, settings, new XmlUrlResolver());
+                            break;
+                        }
+
                     case XslModes.XsltFile:
                         if (useTrustedSettings)
                         {
diff --git a/src/UnitTests.Shared/ObjectModelHelpers.cs b/src/UnitTests.Shared/ObjectModelHelpers.cs
index ce51be22785..a4ae2e159ff 100644
--- a/src/UnitTests.Shared/ObjectModelHelpers.cs
+++ b/src/UnitTests.Shared/ObjectModelHelpers.cs
@@ -22,11 +22,9 @@
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
-using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using InvalidProjectFileException = Microsoft.Build.Exceptions.InvalidProjectFileException;
 
 #nullable disable
 
@@ -662,9 +660,13 @@ public static ProjectRootElement CreateInMemoryProjectRootElement(string project
         {
             var cleanedProject = CleanupFileContents(projectContents);
 
+            using var stringReader = new StringReader(cleanedProject);
+            using var xmlReader = XmlReader.Create(stringReader);
+            using var projectCollection = new ProjectCollection();
+
             return ProjectRootElement.Create(
-                XmlReader.Create(new StringReader(cleanedProject)),
-                collection ?? new ProjectCollection(),
+                xmlReader,
+                collection ?? projectCollection,
                 preserveFormatting);
         }
 
@@ -686,7 +688,8 @@ public static Project CreateInMemoryProject(string xml)
         /// <returns>Returns created <see cref="Project"/>.</returns>
         public static Project CreateInMemoryProject(string xml, params ILogger[] loggers)
         {
-            return CreateInMemoryProject(new ProjectCollection(), xml, loggers);
+            using var projectCollection = new ProjectCollection();
+            return CreateInMemoryProject(projectCollection, xml, loggers);
         }
 
         /// <summary>
@@ -724,8 +727,10 @@ public static Project CreateInMemoryProject(
                 }
             }
 
+            using var stringReader = new StringReader(CleanupFileContents(xml));
+            using var xmlReader = XmlReader.Create(stringReader, readerSettings);
             Project project = new Project(
-                XmlReader.Create(new StringReader(CleanupFileContents(xml)), readerSettings),
+                xmlReader,
                 globalProperties: null,
                 toolsVersion,
                 projectCollection);
@@ -976,7 +981,7 @@ public static Project LoadProjectFileInTempProjectDirectory(string projectFileRe
         {
             string projectFileFullPath = Path.Combine(TempProjectDir, projectFileRelativePath);
 
-            ProjectCollection projectCollection = new ProjectCollection();
+            using ProjectCollection projectCollection = new ProjectCollection();
 
             Project project = new Project(projectFileFullPath, null, null, projectCollection);
 
@@ -1091,7 +1096,9 @@ public static IList<ProjectItem> GetItemsFromFragment(string fragment, bool allI
         /// </summary>
         public static IList<ProjectItem> GetItems(string content, bool allItems = false, bool ignoreCondition = false)
         {
-            var projectXml = ProjectRootElement.Create(XmlReader.Create(new StringReader(CleanupFileContents(content))));
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            var projectXml = ProjectRootElement.Create(xmlReader);
             Project project = new Project(projectXml);
             IList<ProjectItem> item = Helpers.MakeList(
                 ignoreCondition ?
@@ -1349,7 +1356,9 @@ private static void BuildProjectWithNewOM(string content, ref MockLogger logger,
             // Replace the nonstandard quotes with real ones
             content = ObjectModelHelpers.CleanupFileContents(content);
 
-            Project project = new Project(XmlReader.Create(new StringReader(content)), globalProperties, toolsVersion: null);
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            Project project = new Project(xmlReader, globalProperties, toolsVersion: null);
             logger ??= new MockLogger
             {
                 AllowTaskCrashes = allowTaskCrash
@@ -1364,7 +1373,9 @@ public static void BuildProjectWithNewOMAndBinaryLogger(string content, BinaryLo
             // Replace the nonstandard quotes with real ones
             content = ObjectModelHelpers.CleanupFileContents(content);
 
-            Project project = new Project(XmlReader.Create(new StringReader(content)), null, toolsVersion: null);
+            using var stringReader = new StringReader(content);
+            using var xmlReader = XmlReader.Create(stringReader);
+            Project project = new Project(xmlReader, null, toolsVersion: null);
 
             List<ILogger> loggers = new List<ILogger>() { binaryLogger };
 
@@ -1971,7 +1982,8 @@ public static void VerifyAssertLineByLine(string expected, string actual, bool i
         /// </summary>
         public static void ClearDirtyFlag(ProjectRootElement project)
         {
-            project.Save(new StringWriter());
+            using var stringWriter = new StringWriter();
+            project.Save(stringWriter);
             Assert.False(project.HasUnsavedChanges);
         }
 
diff --git a/src/UnitTests.Shared/StreamHelpers.cs b/src/UnitTests.Shared/StreamHelpers.cs
index e28bf080fd3..a86f36aba53 100644
--- a/src/UnitTests.Shared/StreamHelpers.cs
+++ b/src/UnitTests.Shared/StreamHelpers.cs
@@ -18,9 +18,9 @@ public static StreamReader StringToStreamReader(string value)
         {
             MemoryStream m = new MemoryStream();
 #if FEATURE_ENCODING_DEFAULT
-            TextWriter w = new StreamWriter(m, System.Text.Encoding.Default);
+            using TextWriter w = new StreamWriter(m, System.Text.Encoding.Default);
 #else
-            TextWriter w = new StreamWriter(m, System.Text.Encoding.UTF8);
+            using TextWriter w = new StreamWriter(m, System.Text.Encoding.UTF8);
 #endif
 
             w.Write(value);
@@ -53,12 +53,13 @@ public static Stream StringToStream(string value)
          */
         public static Stream StringToStream(string value, System.Text.Encoding encoding)
         {
-            MemoryStream m = new MemoryStream();
-            TextWriter w = new StreamWriter(m, encoding); // HIGHCHAR: StringToStream helper accepts encoding from caller.
+            using MemoryStream m = new MemoryStream();
+            using TextWriter w = new StreamWriter(m, encoding); // HIGHCHAR: StringToStream helper accepts encoding from caller.
 
             w.Write(value);
             w.Flush();
             m.Seek(0, SeekOrigin.Begin);
+
             return m;
         }
     }
