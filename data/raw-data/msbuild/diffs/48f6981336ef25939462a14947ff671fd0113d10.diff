diff --git a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
index 0379de04e70..1f887d229ee 100644
--- a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
+++ b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
@@ -33,6 +33,9 @@
   </ItemGroup>
 
   <ItemGroup>
+    <Compile Include="..\Shared\Constants.cs">
+      <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
+    </Compile>
     <Compile Include="..\Shared\EncodingStringWriter.cs">
       <Link>EncodingStringWriter.cs</Link>
     </Compile>
diff --git a/src/Build.UnitTests/ChangeWaves_Tests.cs b/src/Build.UnitTests/ChangeWaves_Tests.cs
index 8d5a372f604..c7194ad5d5d 100644
--- a/src/Build.UnitTests/ChangeWaves_Tests.cs
+++ b/src/Build.UnitTests/ChangeWaves_Tests.cs
@@ -8,6 +8,7 @@
 using Microsoft.Build.UnitTests;
 using Xunit.Abstractions;
 using System;
+using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Engine.UnitTests
 {
@@ -19,6 +20,18 @@ public ChangeWaves_Tests(ITestOutputHelper output)
             _output = output;
         }
 
+        /// <summary>
+        /// Performs necessary operations for setting the MSBuildDisableFeaturesFromVersion environment variable.
+        /// This is required because Change Waves is static and stale values can be seen between tests in the same assembly.
+        /// </summary>
+        /// <param name="wave">The version to set as the current Change Wave.</param>
+        private void SetChangeWave(string wave, TestEnvironment env)
+        {
+            ChangeWaves.ResetStateForTests();
+            env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", wave);
+            BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+        }
+
         /// <summary>
         /// Helper function to build a simple project based on a particular change wave being set.
         /// Call SetChangeWave on your TestEnvironment before calling this function.
@@ -65,7 +78,7 @@ public void EnableAllFeaturesBehindChangeWavesEnablesAllFeaturesBehindChangeWave
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                env.SetChangeWave(ChangeWaves.EnableAllFeatures);
+                SetChangeWave(ChangeWaves.EnableAllFeatures.ToString(), env);
 
                 for (int i = 0; i < ChangeWaves.AllWaves.Length - 1; i++)
                 {
@@ -105,7 +118,7 @@ public void InvalidFormatThrowsWarningAndLeavesFeaturesEnabled(string disableFea
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                env.SetChangeWave(disableFeaturesFromVersion);
+                SetChangeWave(disableFeaturesFromVersion, env);
 
                 buildSimpleProjectAndValidateChangeWave(testEnvironment: env,
                                                         versionToCheckAgainstCurrentChangeWave: ChangeWaves.HighestWave,
@@ -122,7 +135,7 @@ public void VersionTooLowClampsToLowestVersionInRotation(string disableFeaturesF
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                env.SetChangeWave(disableFeaturesFromVersion);
+                SetChangeWave(disableFeaturesFromVersion, env);
 
                 // All waves should be disabled
                 for (int i = 0; i < ChangeWaves.AllWaves.Length; i++)
@@ -142,7 +155,7 @@ public void VersionTooHighClampsToHighestVersionInRotation(string disableFeature
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                env.SetChangeWave(disableFeaturesFromVersion);
+                SetChangeWave(disableFeaturesFromVersion, env);
 
                 // all waves but the highest should pass
                 for (int i = 0; i < ChangeWaves.AllWaves.Length - 1; i++)
@@ -166,7 +179,7 @@ public void VersionSetToValidValueButInvalidVersionSetsNextVersion()
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                env.SetChangeWave($"{ChangeWaves.LowestWave.Major}.{ChangeWaves.LowestWave.Minor}.{ChangeWaves.LowestWave.Build + 1}");
+                SetChangeWave($"{ChangeWaves.LowestWave.Major}.{ChangeWaves.LowestWave.Minor}.{ChangeWaves.LowestWave.Build + 1}", env);
 
                 buildSimpleProjectAndValidateChangeWave(testEnvironment: env,
                                                         versionToCheckAgainstCurrentChangeWave: ChangeWaves.LowestWave,
@@ -180,7 +193,7 @@ public void CorrectlyDetermineEnabledFeatures()
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                env.SetChangeWave(ChangeWaves.HighestWave);
+                SetChangeWave(ChangeWaves.HighestWave.ToString(), env);
 
                 for (int i = 0; i < ChangeWaves.AllWaves.Length - 1; i++)
                 {
@@ -203,7 +216,7 @@ public void CorrectlyDetermineDisabledFeatures()
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                env.SetChangeWave(ChangeWaves.LowestWave);
+                SetChangeWave(ChangeWaves.LowestWave.ToString(), env);
 
                 foreach (Version wave in ChangeWaves.AllWaves)
                 {
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 48164d9284d..b53348ae690 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -1555,7 +1555,8 @@ public void ExpandAllIntoStringNotTruncated()
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
-                env.SetChangeWave(ChangeWaves.Wave16_8);
+                ChangeWaves.ResetStateForTests();
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_8.ToString());
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
                 ProjectInstance project = ProjectHelpers.CreateEmptyProjectInstance();
                 var manySpaces = "".PadLeft(2000);
diff --git a/src/Build.UnitTests/Scanner_Tests.cs b/src/Build.UnitTests/Scanner_Tests.cs
index 518af020622..3ac9383f3e7 100644
--- a/src/Build.UnitTests/Scanner_Tests.cs
+++ b/src/Build.UnitTests/Scanner_Tests.cs
@@ -5,6 +5,7 @@
 
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Exceptions;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 using Xunit;
 
@@ -120,7 +121,9 @@ public void SpaceProperty()
         public void SpacePropertyOptOutWave16_10()
         {
             using TestEnvironment env = TestEnvironment.Create();
-            env.SetChangeWave(ChangeWaves.Wave16_10);
+            ChangeWaves.ResetStateForTests();
+            env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_10.ToString());
+            BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
 
             Scanner lexer = new Scanner("$(x )", ParserOptions.AllowProperties);
             AdvanceToScannerError(lexer);
diff --git a/src/Framework/Properties/AssemblyInfo.cs b/src/Framework/Properties/AssemblyInfo.cs
index 7c2d06baccb..c7d7b4aaa38 100644
--- a/src/Framework/Properties/AssemblyInfo.cs
+++ b/src/Framework/Properties/AssemblyInfo.cs
@@ -45,7 +45,6 @@
 [assembly: InternalsVisibleTo("MSBuild, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")]
 [assembly: InternalsVisibleTo("Microsoft.Build.Conversion.Core, PublicKey=002400000480000094000000060200000024000052534131000400000100010007d1fa57c4aed9f0a32e84aa0faefd0de9e8fd6aec8f87fb03766c834c99921eb23be79ad9d5dcc1dd9ad236132102900b723cf980957fc4e177108fc607774f29e8320e92ea05ece4e821c0a5efe8f1645c4c0c93c1ab99285d622caa652c1dfad63d745d6f2de5f17e5eaf0fc4963d261c8a12436518206dc093344d5ad293")]
 
-[assembly: InternalsVisibleTo("Microsoft.Build.Engine.OM.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
 [assembly: InternalsVisibleTo("Microsoft.Build.Engine.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
 [assembly: InternalsVisibleTo("Microsoft.Build.Utilities.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
 [assembly: InternalsVisibleTo("Microsoft.Build.CommandLine.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index 9e152aef562..d93dce91915 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -88,35 +88,9 @@ private void Cleanup()
                 // Assert invariants
                 foreach (var item in _invariants)
                     item.AssertInvariant(Output);
-
-                // Reset change waves
-                SetChangeWave(string.Empty);
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
             }
         }
 
-        /// <summary>
-        /// Performs necessary operations for setting the MSBuildDisableFeaturesFromVersion environment variable.
-        /// This is required because Change Waves is static and stale values can be seen between tests in the same assembly.
-        /// </summary>
-        /// <param name="wave">The version to set as the current Change Wave.</param>
-        public void SetChangeWave(Version wave)
-        {
-            SetChangeWave(wave.ToString());
-        }
-
-        /// <summary>
-        /// Performs necessary operations for setting the MSBuildDisableFeaturesFromVersion environment variable.
-        /// This is required because Change Waves is static and stale values can be seen between tests in the same assembly.
-        /// </summary>
-        /// <param name="wave">The version to set as the current Change Wave.</param>
-        public void SetChangeWave(string wave)
-        {
-            ChangeWaves.ResetStateForTests();
-            SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", wave);
-            BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-        }
-
         /// <summary>
         ///     Evaluate the test with the given invariant.
         /// </summary>
