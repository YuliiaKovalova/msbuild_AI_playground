diff --git a/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs b/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs
index 35e3bb8022a..3ed3e05caf1 100644
--- a/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs
@@ -9,7 +9,7 @@ namespace Microsoft.Build.BackEnd
     /// <summary>
     /// This is an implementation of INodeEndpoint for the out-of-proc nodes.  It acts only as a client.
     /// </summary>
-    internal class ServerNodeEndpointOutOfProc : NodeEndpointOutOfProcBase
+    internal sealed class ServerNodeEndpointOutOfProc : NodeEndpointOutOfProcBase
     {
         #region Private Data
 
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index fc70790e835..b7cf5af0326 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.Execution
     /// <summary>
     /// This class represents an implementation of INode for out-of-proc server nodes aka MSBuild server 
     /// </summary>
-    public class OutOfProcServerNode : INode, INodePacketFactory, INodePacketHandler
+    public sealed class OutOfProcServerNode : INode, INodePacketFactory, INodePacketHandler
     {
         private readonly Func<string, (int exitCode, string exitType)> _buildFunction;
 
@@ -73,7 +73,7 @@ public OutOfProcServerNode(Func<string, (int exitCode, string exitType)> buildFu
             _shutdownEvent = new ManualResetEvent(false);
             _packetFactory = new NodePacketFactory();
 
-            (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.ServerNodeBuilCommand, ServerNodeBuildCommand.FactoryForDeserialization, this);
+            (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.ServerNodeBuildCommand, ServerNodeBuildCommand.FactoryForDeserialization, this);
             (this as INodePacketFactory).RegisterPacketHandler(NodePacketType.NodeBuildComplete, NodeBuildComplete.FactoryForDeserialization, this);
         }
 
@@ -290,7 +290,7 @@ private void HandlePacket(INodePacket packet)
         {
             switch (packet.Type)
             {
-                case NodePacketType.ServerNodeBuilCommand:
+                case NodePacketType.ServerNodeBuildCommand:
                     HandleServerNodeBuildCommand((ServerNodeBuildCommand)packet);
                     break;
                 case NodePacketType.NodeBuildComplete:
@@ -337,14 +337,12 @@ private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
 
             Console.SetOut(oldOut);
             Console.SetError(oldErr);
-            outWriter.Dispose();
-            errWriter.Dispose();
 
             // On Windows, a process holds a handle to the current directory,
             // so reset it away from a user-requested folder that may get deleted.
             NativeMethodsShared.SetCurrentDirectory(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory);
 
-            var response = new ServerNodeResponse(exitCode, exitType);
+            var response = new ServerNodeBuildResult(exitCode, exitType);
             SendPacket(response);
 
             _shutdownReason = NodeEngineShutdownReason.BuildCompleteReuse;
@@ -352,7 +350,7 @@ private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
         }
 
         // TODO: unit tests
-        internal class RedirectConsoleWriter : StringWriter
+        internal sealed class RedirectConsoleWriter : StringWriter
         {
             private readonly string _newLineString;
 
diff --git a/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
index 43353e6f473..7615d9b1704 100644
--- a/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
+++ b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.BackEnd
     /// <summary>
     /// Contains all of the information necessary for a entry node to run a command line.
     /// </summary>
-    internal class ServerNodeBuildCommand : INodePacket
+    internal sealed class ServerNodeBuildCommand : INodePacket
     {
         public ServerNodeBuildCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture)
         {
@@ -34,7 +34,7 @@ private ServerNodeBuildCommand()
         /// <summary>
         /// Retrieves the packet type.
         /// </summary>
-        public NodePacketType Type => NodePacketType.ServerNodeBuilCommand;
+        public NodePacketType Type => NodePacketType.ServerNodeBuildCommand;
 
         #endregion
 
diff --git a/src/Build/BackEnd/Node/ServerNodeResponse.cs b/src/Build/BackEnd/Node/ServerNodeBuildResult.cs
similarity index 83%
rename from src/Build/BackEnd/Node/ServerNodeResponse.cs
rename to src/Build/BackEnd/Node/ServerNodeBuildResult.cs
index 4ed6eb241ca..e791b95c759 100644
--- a/src/Build/BackEnd/Node/ServerNodeResponse.cs
+++ b/src/Build/BackEnd/Node/ServerNodeBuildResult.cs
@@ -6,9 +6,9 @@
 
 namespace Microsoft.Build.BackEnd
 {
-    internal class ServerNodeResponse : INodePacket
+    internal sealed class ServerNodeBuildResult : INodePacket
     {
-        public ServerNodeResponse(int exitCode, string exitType)
+        public ServerNodeBuildResult(int exitCode, string exitType)
         {
             ExitCode = exitCode;
             ExitType = exitType;
@@ -20,7 +20,7 @@ public ServerNodeResponse(int exitCode, string exitType)
         /// Packet type.
         /// This has to be in sync with Microsoft.Build.BackEnd.NodePacketType.ServerNodeBuildCommand
         /// </summary>
-        public NodePacketType Type => NodePacketType.ServerNodeResponse;
+        public NodePacketType Type => NodePacketType.ServerNodeBuildResult;
 
         #endregion
 
diff --git a/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs b/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
index 59e6469bfdb..28302db41fb 100644
--- a/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
+++ b/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
@@ -5,7 +5,7 @@
 
 namespace Microsoft.Build.BackEnd
 {
-    internal class ServerNodeConsoleWrite : INodePacket
+    internal sealed class ServerNodeConsoleWrite : INodePacket
     {
         public string Text { get; }
 
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 27574a0dea2..099f8330d6e 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -153,7 +153,7 @@
     <Compile Include="FileSystem\*.cs" />
     <Compile Include="BackEnd\Node\ServerNodeBuildCommand.cs" />
     <Compile Include="BackEnd\Node\ServerNodeConsoleWrite.cs" />
-    <Compile Include="BackEnd\Node\ServerNodeResponse.cs" />
+    <Compile Include="BackEnd\Node\ServerNodeBuildResult.cs" />
     <Compile Include="BackEnd\Node\OutOfProcServerNode.cs" />
     <Compile Include="Utilities\ImmutableCollectionsExtensions.cs" />
     <Compile Include="Utilities\NuGetFrameworkWrapper.cs" />
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 8a456cf9e77..62a65273ad5 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -142,7 +142,7 @@ public int[] RetrieveHandshakeComponents()
         public byte? ExpectedVersionInFirstByte => CommunicationsUtilities.handshakeVersion;
     }
 
-    internal class ServerNodeHandshake : IHandshake
+    internal sealed class ServerNodeHandshake : IHandshake
     {
         readonly int _options;
         readonly int _salt;
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index 785ac585d98..4ae56476b38 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -194,13 +194,13 @@ internal enum NodePacketType : byte
         /// Command in form of MSBuild command line for server node - MSBuild Server.
         /// Keep this enum value constant intact as this is part of contract with dotnet CLI
         /// </summary>
-        ServerNodeBuilCommand = 0xF0,
+        ServerNodeBuildCommand = 0xF0,
 
         /// <summary>
         /// Response from server node command
         /// Keep this enum value constant intact as this is part of contract with dotnet CLI
         /// </summary>
-        ServerNodeResponse = 0xF1,
+        ServerNodeBuildResult = 0xF1,
 
         /// <summary>
         /// Info about server console activity. 
