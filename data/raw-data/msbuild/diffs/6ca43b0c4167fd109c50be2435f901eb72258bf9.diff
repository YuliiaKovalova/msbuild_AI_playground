diff --git a/eng/BootStrapMSBuild.targets b/eng/BootStrapMSBuild.targets
index bdc268f62da..c1876e6a2e2 100644
--- a/eng/BootStrapMSBuild.targets
+++ b/eng/BootStrapMSBuild.targets
@@ -66,7 +66,7 @@
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\*.targets" />
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\*.props" />
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\Tracker*.dll" />
-	<InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\Tracker*.exe" />
+      <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\Tracker*.exe" />
       <InstalledVersionedExtensions Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\**\FileTracker*.dll" />
       <SdkResolverFiles Include="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Bin\SdkResolvers\Microsoft.DotNet.MSBuildSdkResolver\**\*.*" />
       <NuGetSdkResolverManifest Include= "$(RepoRoot)src\MSBuild\SdkResolvers\VS\Microsoft.Build.NuGetSdkResolver.xml" Condition="'$(MonoBuild)' != 'true'" />
diff --git a/src/Shared/BuildEnvironmentHelper.cs b/src/Shared/BuildEnvironmentHelper.cs
index 00fc6500c69..b2f5106d38d 100644
--- a/src/Shared/BuildEnvironmentHelper.cs
+++ b/src/Shared/BuildEnvironmentHelper.cs
@@ -81,9 +81,9 @@ private static BuildEnvironment Initialize()
             {
                 TryFromEnvironmentVariable,
                 TryFromVisualStudioProcess,
-                TryFromDevConsole,
                 TryFromMSBuildProcess,
                 TryFromMSBuildAssembly,
+                TryFromDevConsole,
                 TryFromSetupApi,
                 TryFromAppContextBaseDirectory
             };
diff --git a/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs b/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
index 855f6deb94b..0b3d12f099e 100644
--- a/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
+++ b/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
@@ -238,68 +238,6 @@ public void QuestionWriteLinesWriteOnlyWhenDifferentTest()
             }
         }
 
-        /// <summary>
-        /// Question WriteLines to return false when a write will be required.
-        /// </summary>
-        [Fact]
-        public void QuestionWriteLinesWriteOnlyWhenDifferentTest()
-        {
-            var file = FileUtilities.GetTemporaryFile();
-            try
-            {
-                // Write an initial file.
-                var a = new WriteLinesToFile
-                {
-                    Overwrite = true,
-                    BuildEngine = new MockEngine(_output),
-                    File = new TaskItem(file),
-                    WriteOnlyWhenDifferent = true,
-                    Lines = new ITaskItem[] { new TaskItem("File contents1") }
-                };
-
-                a.Execute().ShouldBeTrue();
-
-                // Verify contents
-                var r = new ReadLinesFromFile { File = new TaskItem(file) };
-                r.Execute().ShouldBeTrue();
-                r.Lines[0].ItemSpec.ShouldBe("File contents1");
-
-                var writeTime = DateTime.Now.AddHours(-1);
-
-                File.SetLastWriteTime(file, writeTime);
-
-                // Write the same contents to the file, timestamps should match.
-                var a2 = new WriteLinesToFile
-                {
-                    Overwrite = true,
-                    BuildEngine = new MockEngine(_output),
-                    File = new TaskItem(file),
-                    WriteOnlyWhenDifferent = true,
-                    Lines = new ITaskItem[] { new TaskItem("File contents1") },
-                    FailIfNotIncremental = true,
-                };
-                a2.Execute().ShouldBeTrue();
-                File.GetLastWriteTime(file).ShouldBe(writeTime, tolerance: TimeSpan.FromSeconds(1));
-
-                // Write different contents to the file, last write time should differ.
-                var a3 = new WriteLinesToFile
-                {
-                    Overwrite = true,
-                    BuildEngine = new MockEngine(_output),
-                    File = new TaskItem(file),
-                    WriteOnlyWhenDifferent = true,
-                    Lines = new ITaskItem[] { new TaskItem("File contents2") },
-                    FailIfNotIncremental = true,
-                };
-                a3.Execute().ShouldBeFalse();
-                File.GetLastWriteTime(file).ShouldBe(writeTime, tolerance: TimeSpan.FromSeconds(1));
-            }
-            finally
-            {
-                File.Delete(file);
-            }
-        }
-
         /// <summary>
         /// Should create directory structure when target <see cref="WriteLinesToFile.File"/> does not exist.
         /// </summary>
