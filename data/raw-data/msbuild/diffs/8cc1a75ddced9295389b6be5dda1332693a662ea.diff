diff --git a/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs b/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
index be38a8a2c7b..a0dc533bbd1 100644
--- a/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
+++ b/src/Build/BackEnd/Components/Communications/SerializationContractInitializer.cs
@@ -23,21 +23,21 @@ private static void RegisterExceptions()
         {
             // Any exception not contained int this list will be transferred as a GenericBuildTransferredException
             BuildExceptionSerializationHelper.InitializeSerializationContract(
-                typeof(GenericBuildTransferredException),
-                typeof(SdkResolverException),
-                typeof(BuildAbortedException),
-                typeof(CircularDependencyException),
-                typeof(InternalLoggerException),
-                typeof(InvalidProjectFileException),
-                typeof(InvalidToolsetDefinitionException),
-                typeof(ProjectCacheException),
-                typeof(InternalErrorException),
-                typeof(LoggerException),
-                typeof(NodeFailedToLaunchException),
-                typeof(SchedulerCircularDependencyException),
-                typeof(RegistryException),
-                typeof(HostObjectException),
-                typeof(UnbuildableProjectTypeException));
+                new(typeof(GenericBuildTransferredException), (msg, inner) => new GenericBuildTransferredException(msg, inner)),
+                new(typeof(SdkResolverException), (msg, inner) => new SdkResolverException(msg, inner)),
+                new(typeof(BuildAbortedException), BuildAbortedException.CreateFromRemote),
+                new(typeof(CircularDependencyException), (msg, inner) => new CircularDependencyException(msg, inner)),
+                new(typeof(InternalLoggerException), (msg, inner) => new InternalLoggerException(msg, inner)),
+                new(typeof(InvalidProjectFileException), (msg, inner) => new InvalidProjectFileException(msg, inner)),
+                new(typeof(InvalidToolsetDefinitionException), (msg, inner) => new InvalidToolsetDefinitionException(msg, inner)),
+                new(typeof(ProjectCacheException), (msg, inner) => new ProjectCacheException(msg, inner)),
+                new(typeof(InternalErrorException), InternalErrorException.CreateFromRemote),
+                new(typeof(LoggerException), (msg, inner) => new LoggerException(msg, inner)),
+                new(typeof(NodeFailedToLaunchException), (msg, inner) => new NodeFailedToLaunchException(msg, inner)),
+                new(typeof(SchedulerCircularDependencyException), (msg, inner) => new SchedulerCircularDependencyException(msg, inner)),
+                new(typeof(RegistryException), (msg, inner) => new RegistryException(msg, inner)),
+                new(typeof(HostObjectException), (msg, inner) => new HostObjectException(msg, inner)),
+                new(typeof(UnbuildableProjectTypeException), (msg, inner) => new UnbuildableProjectTypeException(msg, inner)));
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
index 2b9ae83883d..d2f76b4c577 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheException.cs
@@ -34,8 +34,7 @@ private ProjectCacheException(
             ErrorCode = errorCode;
         }
 
-        // Do not remove - used by BuildExceptionSerializationHelper
-        private ProjectCacheException(string message, Exception inner)
+        internal ProjectCacheException(string message, Exception inner)
             : base(message, inner)
         { }
 
diff --git a/src/Build/BackEnd/Shared/BuildAbortedException.cs b/src/Build/BackEnd/Shared/BuildAbortedException.cs
index 0bf883a4182..09f107a93f8 100644
--- a/src/Build/BackEnd/Shared/BuildAbortedException.cs
+++ b/src/Build/BackEnd/Shared/BuildAbortedException.cs
@@ -54,8 +54,7 @@ public BuildAbortedException(string message, Exception innerException)
             : this(message, innerException, false)
         { }
 
-        // Do not remove - used by BuildExceptionSerializationHelper
-        private static BuildAbortedException CreateFromRemote(string message, Exception innerException)
+        internal static BuildAbortedException CreateFromRemote(string message, Exception innerException)
         {
             return new BuildAbortedException(message, innerException, true /* calledFromDeserialization */);
         }
diff --git a/src/Build/Instance/HostObjectException.cs b/src/Build/Instance/HostObjectException.cs
index e211a7d7ebd..ee4613d1b14 100644
--- a/src/Build/Instance/HostObjectException.cs
+++ b/src/Build/Instance/HostObjectException.cs
@@ -58,8 +58,7 @@ internal HostObjectException(
         {
         }
 
-        // Do not remove - used by BuildExceptionSerializationHelper
-        private HostObjectException(string message, Exception innerException)
+        internal HostObjectException(string message, Exception innerException)
             : base(
                 message,
                 innerException)
diff --git a/src/Framework/BuildException/BuildExceptionSerializationHelper.cs b/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
index 3bdd0311910..030fd532e00 100644
--- a/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
+++ b/src/Framework/BuildException/BuildExceptionSerializationHelper.cs
@@ -3,14 +3,24 @@
 
 using System;
 using System.Collections.Generic;
-using System.Diagnostics;
-using System.Reflection;
 using System.Threading;
 
 namespace Microsoft.Build.Framework.BuildException
 {
     internal static class BuildExceptionSerializationHelper
     {
+        public class TypeConstructionTuple
+        {
+            public TypeConstructionTuple(Type type, Func<string, Exception?, BuildExceptionBase> factory)
+            {
+                Type = type;
+                Factory = factory;
+            }
+
+            public Type Type { get; }
+            public Func<string, Exception?, BuildExceptionBase> Factory { get; }
+        }
+
         private static Dictionary<string, Func<string, Exception?, BuildExceptionBase>>? s_exceptionFactories;
 
         private static readonly Func<string, Exception?, BuildExceptionBase> s_defaultFactory =
@@ -24,12 +34,12 @@ internal static bool IsSupportedExceptionType(Type type)
                    type.IsSubclassOf(typeof(BuildExceptionBase));
         }
 
-        internal static void InitializeSerializationContract(params Type[] exceptionTypesAllowlist)
+        internal static void InitializeSerializationContract(params TypeConstructionTuple[] exceptionsAllowlist)
         {
-            InitializeSerializationContract((IEnumerable<Type>)exceptionTypesAllowlist);
+            InitializeSerializationContract((IEnumerable<TypeConstructionTuple>)exceptionsAllowlist);
         }
 
-        internal static void InitializeSerializationContract(IEnumerable<Type> exceptionTypesAllowlist)
+        internal static void InitializeSerializationContract(IEnumerable<TypeConstructionTuple> exceptionsAllowlist)
         {
             if (s_exceptionFactories != null)
             {
@@ -38,50 +48,18 @@ internal static void InitializeSerializationContract(IEnumerable<Type> exception
 
             var exceptionFactories = new Dictionary<string, Func<string, Exception?, BuildExceptionBase>>();
 
-            foreach (Type exceptionType in exceptionTypesAllowlist)
+            foreach (TypeConstructionTuple typeConstructionTuple in exceptionsAllowlist)
             {
+                Type exceptionType = typeConstructionTuple.Type;
+                Func<string, Exception?, BuildExceptionBase> exceptionFactory = typeConstructionTuple.Factory;
+
                 if (!IsSupportedExceptionType(exceptionType))
                 {
                     EscapeHatches.ThrowInternalError($"Type {exceptionType.FullName} is not recognized as a build exception type.");
                 }
 
-                // First try to find a static method CreateFromRemote
-                //   - to be used when exception has custom constructor logic (e.g. altering messages)
-                MethodInfo? methodInfo = exceptionType.GetMethod(
-                    "CreateFromRemote",
-                    BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic,
-                    null,
-                    new[] { typeof(string), typeof(Exception) },
-                    null);
-
-                if (methodInfo != null)
-                {
-                    string key = GetExceptionSerializationKey(exceptionType);
-                    var value = (Func<string, Exception?, BuildExceptionBase>)Delegate.CreateDelegate(typeof(Func<string, Exception?, BuildExceptionBase>), methodInfo);
-
-                    exceptionFactories[key] = value;
-                    continue;
-                }
-
-                // Otherwise use the constructor that accepts inner exception and a message
-                ConstructorInfo? ctorInfo = exceptionType.GetConstructor(
-                    BindingFlags.CreateInstance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance,
-                    null,
-                    new[] { typeof(string), typeof(Exception) },
-                    null);
-
-                if (ctorInfo != null)
-                {
-                    string key = GetExceptionSerializationKey(exceptionType);
-                    Func<string, Exception?, BuildExceptionBase> value = (message, innerException) =>
-                        (BuildExceptionBase)ctorInfo.Invoke(new object?[] { message, innerException });
-
-                    exceptionFactories[key] = value;
-                }
-                else
-                {
-                    Debug.Fail($"Unable to find a factory for exception type {exceptionType.FullName}");
-                }
+                string key = GetExceptionSerializationKey(exceptionType);
+                exceptionFactories[key] = exceptionFactory;
             }
 
             if (Interlocked.Exchange(ref s_exceptionFactories, exceptionFactories) != null)
diff --git a/src/Framework/InternalErrorException.cs b/src/Framework/InternalErrorException.cs
index 96141696665..4aef7c049ea 100644
--- a/src/Framework/InternalErrorException.cs
+++ b/src/Framework/InternalErrorException.cs
@@ -49,8 +49,7 @@ internal InternalErrorException(
             this(message, innerException, false)
         { }
 
-        // Do not remove - used by BuildExceptionSerializationHelper
-        private static InternalErrorException CreateFromRemote(string message, Exception innerException)
+        internal static InternalErrorException CreateFromRemote(string message, Exception innerException)
         {
             return new InternalErrorException(message, innerException, true /* calledFromDeserialization */);
         }
