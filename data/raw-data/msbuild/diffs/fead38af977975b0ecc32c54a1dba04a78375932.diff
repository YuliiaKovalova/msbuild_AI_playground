diff --git a/src/Build/BuildCheck/Acquisition/CheckAcquisitionData.cs b/src/Build/BuildCheck/Acquisition/CheckAcquisitionData.cs
index 6c2465e1578..74a0c87be38 100644
--- a/src/Build/BuildCheck/Acquisition/CheckAcquisitionData.cs
+++ b/src/Build/BuildCheck/Acquisition/CheckAcquisitionData.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.Experimental.BuildCheck.Acquisition;
 // https://github.com/dotnet/msbuild/issues/9633
 // Acquisition
 //  define the data that will be passed to the acquisition module (and remoted if needed)
-internal class AnalyzerAcquisitionData(string assemblyPath, string projectPath)
+internal class CheckAcquisitionData(string assemblyPath, string projectPath)
 {
     public string AssemblyPath { get; init; } = assemblyPath;
 
@@ -22,8 +22,8 @@ internal class AnalyzerAcquisitionData(string assemblyPath, string projectPath)
 
 internal static class CheckAcquisitionDataExtensions
 {
-    public static AnalyzerAcquisitionData ToAnalyzerAcquisitionData(this BuildCheckAcquisitionEventArgs eventArgs) =>
+    public static CheckAcquisitionData ToCheckAcquisitionData(this BuildCheckAcquisitionEventArgs eventArgs) =>
         new(eventArgs.AcquisitionPath, eventArgs.ProjectPath);
 
-    public static BuildCheckAcquisitionEventArgs ToBuildEventArgs(this AnalyzerAcquisitionData data) => new(data.AssemblyPath, data.ProjectPath);
+    public static BuildCheckAcquisitionEventArgs ToBuildEventArgs(this CheckAcquisitionData data) => new(data.AssemblyPath, data.ProjectPath);
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 1f93090036a..7e581e2979d 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 /// <summary>
 /// Central logger for the build check infrastructure.
 /// Receives events from the <see cref="BuildCheckForwardingLogger"/>.
-/// Processes the events and forwards them to the <see cref="IBuildCheckManager"/> and registered analyzers.
+/// Processes the events and forwards them to the <see cref="IBuildCheckManager"/> and registered checks.
 /// </summary>
 /// <remarks>
 /// Ensure that the consuming events are in sync with <see cref="BuildCheckForwardingLogger"/>.
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs
index 02808f434a5..45bd095f415 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckForwardingLogger.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 /// <summary>
 /// Forwarding logger for the build check infrastructure.
 /// For now we just want to forward all events that are needed for BuildCheckConnectorLogger and filter out all other.
-/// If the custom analyzer is detected, starts to unconditionally forward all events.
+/// If the custom check is detected, starts to unconditionally forward all events.
 /// In the future we may need more specific behavior.
 /// </summary>
 /// <remarks>
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index dc9b4c593c6..ff1c4c8cf4d 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -112,10 +112,10 @@ public void ProcessCheckAcquisition(
             Stopwatch stopwatch = Stopwatch.StartNew();
             if (IsInProcNode)
             {
-                var checkFactories = _acquisitionModule.CreateBuildExecutionCheckFactories(acquisitionData, checkContext);
-                if (checkFactories.Count != 0)
+                var checksFactories = _acquisitionModule.CreateBuildExecutionCheckFactories(acquisitionData, checkContext);
+                if (checksFactories.Count != 0)
                 {
-                    RegisterCustomAnalyzer(acquisitionData.ProjectPath, BuildCheckDataSource.EventArgs, analyzersFactories, analysisContext);
+                    RegisterCustomCheck(acquisitionData.ProjectPath, BuildCheckDataSource.EventArgs, checksFactories, checkContext);
                 }
                 else
                 {
@@ -173,9 +173,9 @@ private void RegisterBuiltInChecks(BuildCheckDataSource buildCheckDataSource)
         /// </summary>
         /// <param name="projectPath">The project path is used for the correct .editorconfig resolution.</param>
         /// <param name="buildCheckDataSource">Represents different data sources used in build check operations.</param>
-        /// <param name="factories">A collection of build analyzer factories for rules instantiation.</param>
-        /// <param name="analysisContext">The logging context of the build event.</param>
-        internal void RegisterCustomAnalyzer(
+        /// <param name="factories">A collection of build check factories for rules instantiation.</param>
+        /// <param name="checkContext">The logging context of the build event.</param>
+        internal void RegisterCustomCheck(
             string projectPath,
             BuildCheckDataSource buildCheckDataSource,
             IEnumerable<BuildExecutionCheckFactory> factories,
@@ -186,16 +186,16 @@ internal void RegisterCustomAnalyzer(
                 foreach (var factory in factories)
                 {
                     var instance = factory();
-                    var analyzerFactoryContext = new BuildAnalyzerFactoryContext(
+                    var checkFactoryContext = new BuildExecutionCheckFactoryContext(
                         factory,
                         instance.SupportedRules.Select(r => r.Id).ToArray(),
                         instance.SupportedRules.Any(r => r.DefaultConfiguration.IsEnabled == true));
 
-                    if (analyzerFactoryContext != null)
+                    if (checkFactoryContext != null)
                     {
-                        _analyzersRegistry.Add(analyzerFactoryContext);
-                        SetupSingleAnalyzer(analyzerFactoryContext, projectPath);
-                        analysisContext.DispatchAsComment(MessageImportance.Normal, "CustomAnalyzerSuccessfulAcquisition", instance.FriendlyName);
+                        _checkRegistry.Add(checkFactoryContext);
+                        SetupSingleCheck(checkFactoryContext, projectPath);
+                        checkContext.DispatchAsComment(MessageImportance.Normal, "CustomCheckSuccessfulAcquisition", instance.FriendlyName);
                     }
                 }
             }
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index c8e71cb24d4..206e1501bef 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -102,12 +102,12 @@ internal void VerifyCustomConfigurationEquality(string ruleId, CustomConfigurati
         }
     }
 
-    public BuildAnalyzerConfigurationEffective[] GetMergedConfigurations(
+    public BuildExecutionCheckConfigurationEffective[] GetMergedConfigurations(
         string projectFullPath,
         BuildExecutionCheck check)
         => FillConfiguration(projectFullPath, check.SupportedRules, GetMergedConfiguration);
 
-    public BuildAnalyzerConfiguration[] GetUserConfigurations(
+    public BuildExecutionCheckConfiguration[] GetUserConfigurations(
         string projectFullPath,
         IReadOnlyList<string> ruleIds)
         => FillConfiguration(projectFullPath, ruleIds, GetUserConfiguration);
@@ -123,9 +123,9 @@ public CustomConfigurationData[] GetCustomConfigurations(
         IReadOnlyList<string> ruleIds)
         => FillConfiguration(projectFullPath, ruleIds, GetCustomConfiguration);
 
-    public BuildAnalyzerConfigurationEffective[] GetMergedConfigurations(
-        BuildAnalyzerConfiguration[] userConfigs,
-        BuildAnalyzer analyzer)
+    public BuildExecutionCheckConfigurationEffective[] GetMergedConfigurations(
+        BuildExecutionCheckConfiguration[] userConfigs,
+        BuildExecutionCheck check)
     {
         var configurations = new BuildExecutionCheckConfigurationEffective[userConfigs.Length];
 
diff --git a/src/Build/BuildCheck/Infrastructure/IConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/IConfigurationProvider.cs
index b3d942ce93a..ad85a8d90bc 100644
--- a/src/Build/BuildCheck/Infrastructure/IConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/IConfigurationProvider.cs
@@ -8,17 +8,17 @@
 namespace Microsoft.Build.BuildCheck.Infrastructure;
 internal interface IConfigurationProvider
 {
-    BuildAnalyzerConfiguration[] GetUserConfigurations(
+    BuildExecutionCheckConfiguration[] GetUserConfigurations(
         string projectFullPath,
         IReadOnlyList<string> ruleIds);
 
-    BuildAnalyzerConfigurationEffective[] GetMergedConfigurations(
+    BuildExecutionCheckConfigurationEffective[] GetMergedConfigurations(
         string projectFullPath,
-        BuildAnalyzer analyzer);
+        BuildExecutionCheck check);
 
-    BuildAnalyzerConfigurationEffective[] GetMergedConfigurations(
-        BuildAnalyzerConfiguration[] userConfigs,
-        BuildAnalyzer analyzer);
+    BuildExecutionCheckConfigurationEffective[] GetMergedConfigurations(
+        BuildExecutionCheckConfiguration[] userConfigs,
+        BuildExecutionCheck check);
 
     CustomConfigurationData[] GetCustomConfigurations(
         string projectFullPath,
diff --git a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
index 69a919d4e7f..719032158b2 100644
--- a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
+++ b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
@@ -39,10 +39,10 @@ public BuildCheckManagerTests(ITestOutputHelper output)
     public void ProcessCheckAcquisitionTest(bool isCheckRuleExist, string[] expectedMessages)
     {
         MockConfigurationProvider();
-        MockBuildCheckAcquisition(isAnalyzerRuleExist);
+        MockBuildCheckAcquisition(isCheckRuleExist);
         MockEnabledDataSourcesDefinition();
 
-        _testedInstance.ProcessAnalyzerAcquisition(new AnalyzerAcquisitionData("DummyPath", "ProjectPath"), new AnalysisLoggingContext(_loggingService, new BuildEventContext(1, 2, 3, 4, 5, 6, 7)));
+        _testedInstance.ProcessCheckAcquisition(new CheckAcquisitionData("DummyPath", "ProjectPath"), new CheckLoggingContext(_loggingService, new BuildEventContext(1, 2, 3, 4, 5, 6, 7)));
 
         _logger.AllBuildEvents.Where(be => be.GetType() == typeof(BuildMessageEventArgs)).Select(be => be.Message).ToArray()
             .ShouldBeEquivalentTo(expectedMessages);
@@ -70,11 +70,11 @@ public void CheckCustomConfigurationDataValidity(string projectFullPath, string
 
     public CustomConfigurationData[] GetCustomConfigurations(string projectFullPath, IReadOnlyList<string> ruleIds) => [];
 
-    public BuildAnalyzerConfigurationEffective[] GetMergedConfigurations(string projectFullPath, BuildAnalyzer analyzer) => [];
+    public BuildExecutionCheckConfigurationEffective[] GetMergedConfigurations(string projectFullPath, BuildExecutionCheck check) => [];
 
-    public BuildAnalyzerConfigurationEffective[] GetMergedConfigurations(BuildAnalyzerConfiguration[] userConfigs, BuildAnalyzer analyzer) => [];
+    public BuildExecutionCheckConfigurationEffective[] GetMergedConfigurations(BuildExecutionCheckConfiguration[] userConfigs, BuildExecutionCheck check) => [];
 
-    public BuildAnalyzerConfiguration[] GetUserConfigurations(string projectFullPath, IReadOnlyList<string> ruleIds) => [];
+    public BuildExecutionCheckConfiguration[] GetUserConfigurations(string projectFullPath, IReadOnlyList<string> ruleIds) => [];
 }
 
 internal sealed class BuildCheckAcquisitionModuleMock : IBuildCheckAcquisitionModule
diff --git a/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs b/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs
index 92c46e1c962..9ba383dec85 100644
--- a/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs
+++ b/src/BuildCheck.UnitTests/DoubleWritesAnalyzer_Tests.cs
@@ -15,7 +15,7 @@ namespace Microsoft.Build.BuildCheck.UnitTests
 {
     public sealed class DoubleWritesCheck_Tests
     {
-        private readonly DoubleWritesAnalyzer _analyzer;
+        private readonly DoubleWritesCheck _check;
 
         private readonly MockBuildCheckRegistrationContext _registrationContext;
 
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index b93f2d7d9f5..2c1500a2685 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -187,8 +187,8 @@ public void CustomCheckTest_NoEditorConfig(string checkCandidate, string[] expec
             var checkCandidatePath = Path.Combine(TestAssetsRootPath, checkCandidate);
             AddCustomDataSourceToNugetConfig(checkCandidatePath);
 
-            string projectAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
-                $"{Path.Combine(analysisCandidatePath, $"{analysisCandidate}.csproj")} /m:1 -nr:False -restore -analyze -verbosity:n",
+            string projectCheckBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
+                $"{Path.Combine(checkCandidatePath, $"{checkCandidate}.csproj")} /m:1 -nr:False -restore -check -verbosity:n",
                 out bool successBuild);
             successBuild.ShouldBeTrue(projectCheckBuildLog);
 
@@ -199,35 +199,35 @@ public void CustomCheckTest_NoEditorConfig(string checkCandidate, string[] expec
 
             if (expectedRejectedChecks)
             {
-                projectAnalysisBuildLog.ShouldContain(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(
-                    "CustomAnalyzerBaseTypeNotAssignable",
-                    "InvalidAnalyzer",
-                    "InvalidCustomAnalyzer, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
+                projectCheckBuildLog.ShouldContain(ResourceUtilities.FormatResourceStringStripCodeAndKeyword(
+                    "CustomCheckBaseTypeNotAssignable",
+                    "InvalidCheck",
+                    "InvalidCustomCheck, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"));
             }
         }
     }
 
     [Theory]
-    [InlineData("AnalysisCandidate", "X01234", "error", "error X01234")]
-    [InlineData("AnalysisCandidateWithMultipleAnalyzersInjected", "X01234", "warning", "warning X01234")]
-    public void CustomAnalyzerTest_WithEditorConfig(string analysisCandidate, string ruleId, string severity, string expectedMessage)
+    [InlineData("CheckCandidate", "X01234", "error", "error X01234")]
+    [InlineData("CheckCandidateWithMultipleChecksInjected", "X01234", "warning", "warning X01234")]
+    public void CustomCheckTest_WithEditorConfig(string checkCandidate, string ruleId, string severity, string expectedMessage)
     {
         using (var env = TestEnvironment.Create())
         {
-            var analysisCandidatePath = Path.Combine(TestAssetsRootPath, analysisCandidate);
-            AddCustomDataSourceToNugetConfig(analysisCandidatePath);
-            File.WriteAllText(Path.Combine(analysisCandidatePath, EditorConfigFileName), ReadEditorConfig(new List<(string, string)>() { (ruleId, severity) }, analysisCandidatePath));
+            var checkCandidatePath = Path.Combine(TestAssetsRootPath, checkCandidate);
+            AddCustomDataSourceToNugetConfig(checkCandidatePath);
+            File.WriteAllText(Path.Combine(checkCandidatePath, EditorConfigFileName), ReadEditorConfig(new List<(string, string)>() { (ruleId, severity) }, checkCandidatePath));
 
-            string projectAnalysisBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
-                $"{Path.Combine(analysisCandidatePath, $"{analysisCandidate}.csproj")} /m:1 -nr:False -restore -analyze -verbosity:n", out bool _, timeoutMilliseconds: 1200_0000);
+            string projectCheckBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
+                $"{Path.Combine(checkCandidatePath, $"{checkCandidate}.csproj")} /m:1 -nr:False -restore -check -verbosity:n", out bool _, timeoutMilliseconds: 1200_0000);
 
-            projectAnalysisBuildLog.ShouldContain(expectedMessage);
+            projectCheckBuildLog.ShouldContain(expectedMessage);
         }
     }
 
-    private void AddCustomDataSourceToNugetConfig(string analysisCandidatePath)
+    private void AddCustomDataSourceToNugetConfig(string checkCandidatePath)
     {
-        var nugetTemplatePath = Path.Combine(analysisCandidatePath, "nugetTemplate.config");
+        var nugetTemplatePath = Path.Combine(checkCandidatePath, "nugetTemplate.config");
 
         var doc = new XmlDocument();
         doc.LoadXml(File.ReadAllText(nugetTemplatePath));
diff --git a/src/BuildCheck.UnitTests/Microsoft.Build.BuildCheck.UnitTests.csproj b/src/BuildCheck.UnitTests/Microsoft.Build.BuildCheck.UnitTests.csproj
index e22e82079af..4bf9428f9c0 100644
--- a/src/BuildCheck.UnitTests/Microsoft.Build.BuildCheck.UnitTests.csproj
+++ b/src/BuildCheck.UnitTests/Microsoft.Build.BuildCheck.UnitTests.csproj
@@ -45,10 +45,21 @@
   </ItemGroup>
 
   <ItemGroup>
-    <None Update="TestAssets\AnalysisCandidateWithMultipleAnalyzersInjected\.editorconfigtest">
+    <Compile Remove="TestAssets\SampleAnalyzerIntegrationTest\**" />
+    <EmbeddedResource Remove="TestAssets\SampleAnalyzerIntegrationTest\**" />
+    <None Remove="TestAssets\SampleAnalyzerIntegrationTest\**" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <None Remove="TestAssets\SampleCheckIntegrationTest\.editorconfigcustomised" />
+    <None Remove="TestAssets\SampleCheckIntegrationTest\.editorconfigcustomised" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <None Update="TestAssets\CheckCandidateWithMultipleChecksInjected\.editorconfigtest">
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </None>
-    <None Update="TestAssets\AnalysisCandidate\.editorconfigtest">
+    <None Update="TestAssets\CheckCandidate\.editorconfigtest">
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </None>
   </ItemGroup>
diff --git a/src/BuildCheck.UnitTests/MockBuildCheckRegistrationContext.cs b/src/BuildCheck.UnitTests/MockBuildCheckRegistrationContext.cs
index 883bb0f188e..38f2a985dd5 100644
--- a/src/BuildCheck.UnitTests/MockBuildCheckRegistrationContext.cs
+++ b/src/BuildCheck.UnitTests/MockBuildCheckRegistrationContext.cs
@@ -10,23 +10,23 @@ namespace Microsoft.Build.BuildCheck.UnitTests
 {
     internal sealed class MockBuildCheckRegistrationContext : IBuildCheckRegistrationContext
     {
-        private event Action<BuildCheckDataContext<TaskInvocationAnalysisData>>? _taskInvocationAction;
-        private event Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>>? _evaluatedPropertiesAction;
+        private event Action<BuildCheckDataContext<TaskInvocationCheckData>>? _taskInvocationAction;
+        private event Action<BuildCheckDataContext<EvaluatedPropertiesCheckData>>? _evaluatedPropertiesAction;
 
         public List<BuildCheckResult> Results { get; } = new();
 
-        public void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction)
+        public void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesCheckData>> evaluatedPropertiesAction)
             => _evaluatedPropertiesAction += evaluatedPropertiesAction;
-        public void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction) => throw new NotImplementedException();
+        public void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsCheckData>> parsedItemsAction) => throw new NotImplementedException();
 
-        public void RegisterTaskInvocationAction(Action<BuildCheckDataContext<TaskInvocationAnalysisData>> taskInvocationAction)
+        public void RegisterTaskInvocationAction(Action<BuildCheckDataContext<TaskInvocationCheckData>> taskInvocationAction)
             => _taskInvocationAction += taskInvocationAction;
 
-        public void TriggerTaskInvocationAction(TaskInvocationAnalysisData data)
+        public void TriggerTaskInvocationAction(TaskInvocationCheckData data)
         {
             if (_taskInvocationAction is not null)
             {
-                BuildCheckDataContext<TaskInvocationAnalysisData> context = new BuildCheckDataContext<TaskInvocationAnalysisData>(
+                BuildCheckDataContext<TaskInvocationCheckData> context = new BuildCheckDataContext<TaskInvocationCheckData>(
                     null!,
                     null!,
                     null!,
@@ -35,11 +35,11 @@ public void TriggerTaskInvocationAction(TaskInvocationAnalysisData data)
                 _taskInvocationAction(context);
             }
         }
-        public void TriggerEvaluatedPropertiesAction(EvaluatedPropertiesAnalysisData data)
+        public void TriggerEvaluatedPropertiesAction(EvaluatedPropertiesCheckData data)
         {
             if (_evaluatedPropertiesAction is not null)
             {
-                BuildCheckDataContext<EvaluatedPropertiesAnalysisData> context = new BuildCheckDataContext<EvaluatedPropertiesAnalysisData>(
+                BuildCheckDataContext<EvaluatedPropertiesCheckData> context = new BuildCheckDataContext<EvaluatedPropertiesCheckData>(
                     null!,
                     null!,
                     null!,
@@ -49,7 +49,7 @@ public void TriggerEvaluatedPropertiesAction(EvaluatedPropertiesAnalysisData dat
             }
         }
 
-        private void ResultHandler(BuildAnalyzerWrapper wrapper, IAnalysisContext context, BuildAnalyzerConfigurationEffective[] configs, BuildCheckResult result)
+        private void ResultHandler(BuildExecutionCheckWrapper wrapper, ICheckContext context, BuildExecutionCheckConfigurationEffective[] configs, BuildCheckResult result)
             => Results.Add(result);
     }
 }
diff --git a/src/BuildCheck.UnitTests/SharedOutputPathAnalyzer_Tests.cs b/src/BuildCheck.UnitTests/SharedOutputPathCheck_Tests.cs
similarity index 87%
rename from src/BuildCheck.UnitTests/SharedOutputPathAnalyzer_Tests.cs
rename to src/BuildCheck.UnitTests/SharedOutputPathCheck_Tests.cs
index 35800db9553..c44457dddb5 100644
--- a/src/BuildCheck.UnitTests/SharedOutputPathAnalyzer_Tests.cs
+++ b/src/BuildCheck.UnitTests/SharedOutputPathCheck_Tests.cs
@@ -8,31 +8,31 @@
 using System.Text;
 using System.Threading.Tasks;
 using Microsoft.Build.Experimental.BuildCheck;
-using Microsoft.Build.Experimental.BuildCheck.Analyzers;
+using Microsoft.Build.Experimental.BuildCheck.Checks;
 using Shouldly;
 using Xunit;
 
 namespace Microsoft.Build.BuildCheck.UnitTests
 {
-    public class SharedOutputPathAnalyzer_Tests
+    public class SharedOutputPathCheck_Tests
     {
-        private readonly SharedOutputPathAnalyzer _analyzer;
+        private readonly SharedOutputPathCheck _check;
 
         private readonly MockBuildCheckRegistrationContext _registrationContext;
 
-        public SharedOutputPathAnalyzer_Tests()
+        public SharedOutputPathCheck_Tests()
         {
-            _analyzer = new SharedOutputPathAnalyzer();
+            _check = new SharedOutputPathCheck();
             _registrationContext = new MockBuildCheckRegistrationContext();
-            _analyzer.RegisterActions(_registrationContext);
+            _check.RegisterActions(_registrationContext);
         }
 
-        private EvaluatedPropertiesAnalysisData MakeEvaluatedPropertiesAction(
+        private EvaluatedPropertiesCheckData MakeEvaluatedPropertiesAction(
             string projectFile,
             Dictionary<string, string>? evaluatedProperties,
             IReadOnlyDictionary<string, (string EnvVarValue, string File, int Line, int Column)>? evaluatedEnvVars)
         {
-            return new EvaluatedPropertiesAnalysisData(
+            return new EvaluatedPropertiesCheckData(
                 projectFile,
                 null,
                 evaluatedProperties ?? new Dictionary<string, string>(),
@@ -62,7 +62,7 @@ public void TestTwoProjectsWithSameRelativeOutputPath()
                 },
                 null));
 
-            // Relative paths coincide but full does not. SharedOutputPathAnalyzer should not report it.
+            // Relative paths coincide but full does not. SharedOutputPathCheck should not report it.
             _registrationContext.Results.Count.ShouldBe(0);
         }
 
@@ -91,8 +91,8 @@ public void TestProjectsWithDifferentPathsSeparators()
 
             // 2 reports for bin and obj folders.
             _registrationContext.Results.Count.ShouldBe(2);
-            _registrationContext.Results[0].BuildAnalyzerRule.Id.ShouldBe("BC0101");
-            _registrationContext.Results[1].BuildAnalyzerRule.Id.ShouldBe("BC0101");
+            _registrationContext.Results[0].BuildExecutionCheckRule.Id.ShouldBe("BC0101");
+            _registrationContext.Results[1].BuildExecutionCheckRule.Id.ShouldBe("BC0101");
 
             // Check that paths are formed with correct paths separators
             string wrongPathSeparator = NativeMethodsShared.IsWindows ? "/" : "\\";
@@ -136,7 +136,7 @@ public void TestThreeProjectsWithSameOutputPath()
             _registrationContext.Results.Count.ShouldBe(4); // 4 reports for two pairs of project: (1, 2) and (1, 3).
             foreach (var result in _registrationContext.Results)
             {
-                result.BuildAnalyzerRule.Id.ShouldBe("BC0101");
+                result.BuildExecutionCheckRule.Id.ShouldBe("BC0101");
             }
         }
     }
diff --git a/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/.editorconfigcustomised b/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/.editorconfigcustomised
deleted file mode 100644
index 28ca732c908..00000000000
--- a/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/.editorconfigcustomised
+++ /dev/null
@@ -1,11 +0,0 @@
-root=true
-
-[*.csproj]
-build_check.BC0101.Severity=BC0101Severity
-
-build_check.BC0102.Severity=warning
-build_check.BC0103.Severity=warning
-
-build_check.COND0543.Severity=Error
-build_check.COND0543.EvaluationAnalysisScope=AnalyzedProjectOnly
-build_check.COND0543.CustomSwitch=QWERTY
diff --git a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/.editorconfigtest b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/.editorconfigtest
index 18c24cce509..d685e5d0eea 100644
--- a/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/.editorconfigtest
+++ b/src/BuildCheck.UnitTests/TestAssets/SampleCheckIntegrationTest/.editorconfigtest
@@ -7,5 +7,5 @@ build_check.BC0102.Severity=warning
 build_check.BC0103.Severity=warning
 
 build_check.COND0543.Severity=Error
-build_check.COND0543.EvaluationCheckScope=AnalyzedProjectOnly
+build_check.COND0543.EvaluationCheckScope=CheckedProjectOnly
 build_check.COND0543.CustomSwitch=QWERTY
