diff --git a/src/Build.UnitTests/BackEnd/KnownTelemetry_Tests.cs b/src/Build.UnitTests/BackEnd/KnownTelemetry_Tests.cs
index 408f4942b98..cfbf63deebd 100644
--- a/src/Build.UnitTests/BackEnd/KnownTelemetry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/KnownTelemetry_Tests.cs
@@ -49,7 +49,6 @@ public void BuildTelemetryConstructedHasNoProperties()
         buildTelemetry.Target.ShouldBeNull();
         buildTelemetry.Version.ShouldBeNull();
 
-        buildTelemetry.UpdateEventProperties();
         buildTelemetry.GetProperties().ShouldBeEmpty();
     }
 
@@ -75,7 +74,6 @@ public void BuildTelemetryCreateProperProperties()
         buildTelemetry.Target = "clean";
         buildTelemetry.Version = new Version(1, 2, 3, 4);
 
-        buildTelemetry.UpdateEventProperties();
         var properties = buildTelemetry.GetProperties();
 
         properties.Count.ShouldBe(11);
@@ -102,22 +100,18 @@ public void BuildTelemetryHandleNullsInRecordedTimes()
 
         buildTelemetry.StartAt = DateTime.MinValue;
         buildTelemetry.FinishedAt = null;
-        buildTelemetry.UpdateEventProperties();
         buildTelemetry.GetProperties().ShouldBeEmpty();
 
         buildTelemetry.StartAt = null;
         buildTelemetry.FinishedAt = DateTime.MaxValue;
-        buildTelemetry.UpdateEventProperties();
         buildTelemetry.GetProperties().ShouldBeEmpty();
 
         buildTelemetry.InnerStartAt = DateTime.MinValue;
         buildTelemetry.FinishedAt = null;
-        buildTelemetry.UpdateEventProperties();
         buildTelemetry.GetProperties().ShouldBeEmpty();
 
         buildTelemetry.InnerStartAt = null;
         buildTelemetry.FinishedAt = DateTime.MaxValue;
-        buildTelemetry.UpdateEventProperties();
         buildTelemetry.GetProperties().ShouldBeEmpty();
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/LoggingConfigurationTelemetry_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingConfigurationTelemetry_Tests.cs
index ee669e455d4..d6e66cc6ecd 100644
--- a/src/Build.UnitTests/BackEnd/LoggingConfigurationTelemetry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingConfigurationTelemetry_Tests.cs
@@ -40,7 +40,6 @@ public void BuildTelemetryConstructedHasNoProperties()
         telemetry.BinaryLogger.ShouldBe(false);
         telemetry.BinaryLoggerUsedDefaultName.ShouldBe(false);
 
-        telemetry.UpdateEventProperties();
         telemetry.GetProperties().Where(kv => kv.Value != bool.FalseString).ShouldBeEmpty();
     }
 
@@ -65,7 +64,6 @@ public void BuildTelemetryCreateProperProperties()
             BinaryLoggerUsedDefaultName = true
         };
 
-        telemetry.UpdateEventProperties();
         var properties = telemetry.GetProperties();
         properties["TerminalLogger"].ShouldBe(bool.TrueString);
         properties["TerminalLoggerUserIntent"].ShouldBe("on");
diff --git a/src/Build.UnitTests/TerminalLoggerConfiguration_Tests.cs b/src/Build.UnitTests/TerminalLoggerConfiguration_Tests.cs
index 2cd55cf1471..6266cb6e4c7 100644
--- a/src/Build.UnitTests/TerminalLoggerConfiguration_Tests.cs
+++ b/src/Build.UnitTests/TerminalLoggerConfiguration_Tests.cs
@@ -70,7 +70,6 @@ public void TerminalLoggerOn(string tlValue)
             FileLogger = false,
         };
 
-        expectedTelemetry.UpdateEventProperties();
         foreach (KeyValuePair<string, string> pair in expectedTelemetry.GetProperties())
         {
             output.ShouldContain($"{expectedTelemetry.EventName}:{pair.Key}={pair.Value}");
@@ -101,7 +100,6 @@ public void TerminalLoggerWithTlAutoIsOff(string tlValue)
             FileLogger = false,
         };
 
-        expectedTelemetry.UpdateEventProperties();
         foreach (KeyValuePair<string, string> pair in expectedTelemetry.GetProperties())
         {
             output.ShouldContain($"{expectedTelemetry.EventName}:{pair.Key}={pair.Value}");
@@ -129,7 +127,6 @@ public void TerminalLoggerDefaultByEnv()
             FileLogger = false,
         };
 
-        expectedTelemetry.UpdateEventProperties();
         foreach (KeyValuePair<string, string> pair in expectedTelemetry.GetProperties())
         {
             output.ShouldContain($"{expectedTelemetry.EventName}:{pair.Key}={pair.Value}");
@@ -159,7 +156,6 @@ public void TerminalLoggerOnByEnv(string envVarSource)
             FileLogger = false,
         };
 
-        expectedTelemetry.UpdateEventProperties();
         foreach (KeyValuePair<string, string> pair in expectedTelemetry.GetProperties())
         {
             output.ShouldContain($"{expectedTelemetry.EventName}:{pair.Key}={pair.Value}");
@@ -188,7 +184,6 @@ public void TerminalLoggerDefaultOn(string defaultValue)
             FileLogger = false,
         };
 
-        expectedTelemetry.UpdateEventProperties();
         foreach (KeyValuePair<string, string> pair in expectedTelemetry.GetProperties())
         {
             output.ShouldContain($"{expectedTelemetry.EventName}:{pair.Key}={pair.Value}");
@@ -219,7 +214,6 @@ public void TerminalLoggerDefaultOff(string defaultValue)
             FileLogger = false,
         };
 
-        expectedTelemetry.UpdateEventProperties();
         foreach (KeyValuePair<string, string> pair in expectedTelemetry.GetProperties())
         {
             output.ShouldContain($"{expectedTelemetry.EventName}:{pair.Key}={pair.Value}");
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index f9b4dea1e9a..3ab4f9a3191 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -576,7 +576,6 @@ public void BeginBuild(BuildParameters parameters)
                 LogDeferredMessages(loggingService, _deferredBuildMessages);
 
                 // Log known deferred telemetry
-                KnownTelemetry.LoggingConfigurationTelemetry.UpdateEventProperties();
                 loggingService.LogTelemetry(buildEventContext: null, KnownTelemetry.LoggingConfigurationTelemetry.EventName, KnownTelemetry.LoggingConfigurationTelemetry.GetProperties());
 
                 InitializeCaches();
@@ -1090,7 +1089,6 @@ public void EndBuild()
                             }
                             _buildTelemetry.Host = host;
 
-                            _buildTelemetry.UpdateEventProperties();
                             loggingService.LogTelemetry(buildEventContext: null, _buildTelemetry.EventName, _buildTelemetry.GetProperties());
                             // Clean telemetry to make it ready for next build submission.
                             _buildTelemetry = null;
diff --git a/src/Framework/Telemetry/BuildTelemetry.cs b/src/Framework/Telemetry/BuildTelemetry.cs
index 1316be4b12a..7e2e0c6b514 100644
--- a/src/Framework/Telemetry/BuildTelemetry.cs
+++ b/src/Framework/Telemetry/BuildTelemetry.cs
@@ -87,65 +87,65 @@ internal class BuildTelemetry : TelemetryBase
 
         public override IDictionary<string, string> GetProperties()
         {
-            return Properties;
-        }
+            var properties = new Dictionary<string, string>();
 
-        public override void UpdateEventProperties()
-        {
+            // populate property values
             if (DisplayVersion != null)
             {
-                Properties["BuildEngineDisplayVersion"] = DisplayVersion;
+                properties["BuildEngineDisplayVersion"] = DisplayVersion;
             }
 
             if (StartAt.HasValue && FinishedAt.HasValue)
             {
-                Properties["BuildDurationInMilliseconds"] = (FinishedAt.Value - StartAt.Value).TotalMilliseconds.ToString(CultureInfo.InvariantCulture);
+                properties["BuildDurationInMilliseconds"] = (FinishedAt.Value - StartAt.Value).TotalMilliseconds.ToString(CultureInfo.InvariantCulture);
             }
 
             if (InnerStartAt.HasValue && FinishedAt.HasValue)
             {
-                Properties["InnerBuildDurationInMilliseconds"] = (FinishedAt.Value - InnerStartAt.Value).TotalMilliseconds.ToString(CultureInfo.InvariantCulture);
+                properties["InnerBuildDurationInMilliseconds"] = (FinishedAt.Value - InnerStartAt.Value).TotalMilliseconds.ToString(CultureInfo.InvariantCulture);
             }
 
             if (FrameworkName != null)
             {
-                Properties["BuildEngineFrameworkName"] = FrameworkName;
+                properties["BuildEngineFrameworkName"] = FrameworkName;
             }
 
             if (Host != null)
             {
-                Properties["BuildEngineHost"] = Host;
+                properties["BuildEngineHost"] = Host;
             }
 
             if (InitialServerState != null)
             {
-                Properties["InitialMSBuildServerState"] = InitialServerState;
+                properties["InitialMSBuildServerState"] = InitialServerState;
             }
 
             if (Project != null)
             {
-                Properties["ProjectPath"] = Project;
+                properties["ProjectPath"] = Project;
             }
 
             if (ServerFallbackReason != null)
             {
-                Properties["ServerFallbackReason"] = ServerFallbackReason;
+                properties["ServerFallbackReason"] = ServerFallbackReason;
             }
 
             if (Success.HasValue)
             {
-                Properties["BuildSuccess"] = Success.HasValue.ToString(CultureInfo.InvariantCulture);
+                properties["BuildSuccess"] = Success.HasValue.ToString(CultureInfo.InvariantCulture);
             }
 
             if (Target != null)
             {
-                Properties["BuildTarget"] = Target;
+                properties["BuildTarget"] = Target;
             }
 
             if (Version != null)
             {
-                Properties["BuildEngineVersion"] = Version.ToString();
+                properties["BuildEngineVersion"] = Version.ToString();
             }
+
+            return properties;
         }
     }
 }
diff --git a/src/Framework/Telemetry/LoggingConfigurationTelemetry.cs b/src/Framework/Telemetry/LoggingConfigurationTelemetry.cs
index 764538dd52c..493a945a526 100644
--- a/src/Framework/Telemetry/LoggingConfigurationTelemetry.cs
+++ b/src/Framework/Telemetry/LoggingConfigurationTelemetry.cs
@@ -9,8 +9,6 @@ namespace Microsoft.Build.Framework.Telemetry;
 
 internal class LoggingConfigurationTelemetry : TelemetryBase
 {
-    private readonly object _propertiesLock = new object();
-
     public override string EventName => "loggingConfiguration";
 
     /// <summary>
@@ -102,63 +100,57 @@ internal class LoggingConfigurationTelemetry : TelemetryBase
 
     public override IDictionary<string, string> GetProperties()
     {
-        lock (_propertiesLock)
+        var properties = new Dictionary<string, string>();
+
+        // populate property values
+        properties["TerminalLogger"] = TerminalLogger.ToString(CultureInfo.InvariantCulture);
+
+        if (TerminalLoggerUserIntent != null)
         {
-            return new Dictionary<string, string>(Properties);
+            properties["TerminalLoggerUserIntent"] = TerminalLoggerUserIntent;
         }
-    }
 
-    public override void UpdateEventProperties()
-    {
-        lock (_propertiesLock)
+        if (TerminalLoggerUserIntentSource != null)
         {
-            Properties["TerminalLogger"] = TerminalLogger.ToString(CultureInfo.InvariantCulture);
-
-            if (TerminalLoggerUserIntent != null)
-            {
-                Properties["TerminalLoggerUserIntent"] = TerminalLoggerUserIntent;
-            }
-
-            if (TerminalLoggerUserIntentSource != null)
-            {
-                Properties["TerminalLoggerUserIntentSource"] = TerminalLoggerUserIntentSource;
-            }
-
-            if (TerminalLoggerDefault != null)
-            {
-                Properties["TerminalLoggerDefault"] = TerminalLoggerDefault;
-            }
-
-            if (TerminalLoggerDefaultSource != null)
-            {
-                Properties["TerminalLoggerDefaultSource"] = TerminalLoggerDefaultSource;
-            }
-
-            Properties["ConsoleLogger"] = ConsoleLogger.ToString(CultureInfo.InvariantCulture);
-            if (ConsoleLoggerType != null)
-            {
-                Properties["ConsoleLoggerType"] = ConsoleLoggerType;
-            }
-
-            if (ConsoleLoggerVerbosity != null)
-            {
-                Properties["ConsoleLoggerVerbosity"] = ConsoleLoggerVerbosity;
-            }
-
-            Properties["FileLogger"] = FileLogger.ToString(CultureInfo.InvariantCulture);
-            if (FileLoggerType != null)
-            {
-                Properties["FileLoggerType"] = FileLoggerType;
-                Properties["FileLoggersCount"] = FileLoggersCount.ToString(CultureInfo.InvariantCulture);
-            }
-
-            if (FileLoggerVerbosity != null)
-            {
-                Properties["FileLoggerVerbosity"] = FileLoggerVerbosity;
-            }
-
-            Properties["BinaryLogger"] = BinaryLogger.ToString(CultureInfo.InvariantCulture);
-            Properties["BinaryLoggerUsedDefaultName"] = BinaryLoggerUsedDefaultName.ToString(CultureInfo.InvariantCulture);
+            properties["TerminalLoggerUserIntentSource"] = TerminalLoggerUserIntentSource;
         }
+
+        if (TerminalLoggerDefault != null)
+        {
+            properties["TerminalLoggerDefault"] = TerminalLoggerDefault;
+        }
+
+        if (TerminalLoggerDefaultSource != null)
+        {
+            properties["TerminalLoggerDefaultSource"] = TerminalLoggerDefaultSource;
+        }
+
+        properties["ConsoleLogger"] = ConsoleLogger.ToString(CultureInfo.InvariantCulture);
+        if (ConsoleLoggerType != null)
+        {
+            properties["ConsoleLoggerType"] = ConsoleLoggerType;
+        }
+
+        if (ConsoleLoggerVerbosity != null)
+        {
+            properties["ConsoleLoggerVerbosity"] = ConsoleLoggerVerbosity;
+        }
+
+        properties["FileLogger"] = FileLogger.ToString(CultureInfo.InvariantCulture);
+        if (FileLoggerType != null)
+        {
+            properties["FileLoggerType"] = FileLoggerType;
+            properties["FileLoggersCount"] = FileLoggersCount.ToString(CultureInfo.InvariantCulture);
+        }
+
+        if (FileLoggerVerbosity != null)
+        {
+            properties["FileLoggerVerbosity"] = FileLoggerVerbosity;
+        }
+
+        properties["BinaryLogger"] = BinaryLogger.ToString(CultureInfo.InvariantCulture);
+        properties["BinaryLoggerUsedDefaultName"] = BinaryLoggerUsedDefaultName.ToString(CultureInfo.InvariantCulture);
+
+        return properties;
     }
 }
diff --git a/src/Framework/Telemetry/TelemetryBase.cs b/src/Framework/Telemetry/TelemetryBase.cs
index 6328da8b3b3..57988be2834 100644
--- a/src/Framework/Telemetry/TelemetryBase.cs
+++ b/src/Framework/Telemetry/TelemetryBase.cs
@@ -13,17 +13,7 @@ internal abstract class TelemetryBase
     public abstract string EventName { get; }
 
     /// <summary>
-    /// Gets or sets a list of properties associated with the event.
-    /// </summary>
-    private protected IDictionary<string, string> Properties { get; set; } = new Dictionary<string, string>();
-
-    /// <summary>
-    /// Fetch current properties <see cref="Properties"/>.
+    /// Fetches current properties wrapped in Dictionary
     /// </summary>
     public abstract IDictionary<string, string> GetProperties();
-
-    /// <summary>
-    /// Translate all derived type members into properties which will be used to build <see cref="TelemetryEventArgs"/>.
-    /// </summary>
-    public abstract void UpdateEventProperties();
 }
