diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index a0d025091fa..3bb850e03c1 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -229,7 +229,7 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)
                 CommunicationsUtilities.Trace("Build finished.");
             }
 
-            NativeMethodsShared.RestoreConsoleMode(_originalConsoleMode, NativeMethodsShared.STD_OUTPUT_HANDLE);
+            NativeMethodsShared.RestoreConsoleMode(_originalConsoleMode, Framework.NativeMethods.StreamHandleType.StdOut);
 
             return _exitResult;
         }
@@ -373,7 +373,7 @@ private void ReadPacketsLoop(CancellationToken cancellationToken)
 
         private void ConfigureAndQueryConsoleProperties()
         {
-            (var acceptAnsiColorCodes, var outputIsScreen, _originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes(NativeMethodsShared.STD_OUTPUT_HANDLE);
+            (var acceptAnsiColorCodes, var outputIsScreen, _originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes(NativeMethodsShared.StreamHandleType.StdOut);
             int bufferWidth = QueryConsoleBufferWidth();
             ConsoleColor backgroundColor = QueryConsoleBackgroundColor();
 
diff --git a/src/Build/Logging/SimpleErrorLogger.cs b/src/Build/Logging/SimpleErrorLogger.cs
index f25319e4e18..821d0309eff 100644
--- a/src/Build/Logging/SimpleErrorLogger.cs
+++ b/src/Build/Logging/SimpleErrorLogger.cs
@@ -23,7 +23,7 @@ public sealed class SimpleErrorLogger : INodeLogger
         private readonly uint? originalConsoleMode;
         public SimpleErrorLogger()
         {
-            (acceptAnsiColorCodes, _, originalConsoleMode) = NativeMethods.QueryIsScreenAndTryEnableAnsiColorCodes(NativeMethods.STD_ERROR_HANDLE);
+            (acceptAnsiColorCodes, _, originalConsoleMode) = NativeMethods.QueryIsScreenAndTryEnableAnsiColorCodes(NativeMethods.StreamHandleType.StdErr);
         }
 
         public bool HasLoggedErrors { get; private set; } = false;
@@ -82,7 +82,7 @@ public void Initialize(IEventSource eventSource)
 
         public void Shutdown()
         {
-            NativeMethods.RestoreConsoleMode(originalConsoleMode, NativeMethods.STD_ERROR_HANDLE);
+            NativeMethods.RestoreConsoleMode(originalConsoleMode, NativeMethods.StreamHandleType.StdErr);
         }
     }
 }
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index 6c7e19119c1..1eb088d3d58 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -77,6 +77,12 @@ internal static class NativeMethods
 
     #region Enums
 
+    internal enum StreamHandleType
+    {
+        StdOut = STD_OUTPUT_HANDLE,
+        StdErr = STD_ERROR_HANDLE,
+    };
+
     private enum PROCESSINFOCLASS : int
     {
         ProcessBasicInformation = 0,
@@ -1482,7 +1488,7 @@ internal static void VerifyThrowWin32Result(int result)
     }
 
 #if !CLR2COMPATIBILITY
-    internal static (bool acceptAnsiColorCodes, bool outputIsScreen, uint? originalConsoleMode) QueryIsScreenAndTryEnableAnsiColorCodes(int outputStreamHandle)
+    internal static (bool acceptAnsiColorCodes, bool outputIsScreen, uint? originalConsoleMode) QueryIsScreenAndTryEnableAnsiColorCodes(StreamHandleType handleType)
     {
         if (Console.IsOutputRedirected)
         {
@@ -1497,7 +1503,7 @@ internal static (bool acceptAnsiColorCodes, bool outputIsScreen, uint? originalC
         {
             try
             {
-                IntPtr outputStream = GetStdHandle(outputStreamHandle);
+                IntPtr outputStream = GetStdHandle((int)handleType);
                 if (GetConsoleMode(outputStream, out uint consoleMode))
                 {
                     if ((consoleMode & ENABLE_VIRTUAL_TERMINAL_PROCESSING) == ENABLE_VIRTUAL_TERMINAL_PROCESSING)
@@ -1538,11 +1544,11 @@ internal static (bool acceptAnsiColorCodes, bool outputIsScreen, uint? originalC
         return (acceptAnsiColorCodes, outputIsScreen, originalConsoleMode);
     }
 
-    internal static void RestoreConsoleMode(uint? originalConsoleMode, int outputStreamHandle)
+    internal static void RestoreConsoleMode(uint? originalConsoleMode, StreamHandleType handleType)
     {
         if (IsWindows && originalConsoleMode is not null)
         {
-            IntPtr stdOut = GetStdHandle(outputStreamHandle);
+            IntPtr stdOut = GetStdHandle((int)handleType);
             _ = SetConsoleMode(stdOut, originalConsoleMode.Value);
         }
     }
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 51cc293e4f7..6c6dc27e0c0 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -995,7 +995,7 @@ public static ExitType Execute(
                 // Wait for any pending cancel, so that we get any remaining messages
                 s_cancelComplete.WaitOne();
 
-                NativeMethodsShared.RestoreConsoleMode(s_originalConsoleMode, NativeMethodsShared.STD_OUTPUT_HANDLE);
+                NativeMethodsShared.RestoreConsoleMode(s_originalConsoleMode, NativeMethodsShared.StreamHandleType.StdOut);
 
 #if FEATURE_GET_COMMANDLINE
                 MSBuildEventSource.Log.MSBuildExeStop(commandLine);
@@ -2697,7 +2697,7 @@ private static bool ProcessTerminalLoggerConfiguration(CommandLineSwitches comma
 
             static bool DoesEnvironmentSupportTerminalLogger()
             {
-                (var acceptAnsiColorCodes, var outputIsScreen, s_originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes(NativeMethodsShared.STD_OUTPUT_HANDLE);
+                (var acceptAnsiColorCodes, var outputIsScreen, s_originalConsoleMode) = NativeMethodsShared.QueryIsScreenAndTryEnableAnsiColorCodes(NativeMethodsShared.StreamHandleType.StdOut);
 
                 if (!outputIsScreen)
                 {
