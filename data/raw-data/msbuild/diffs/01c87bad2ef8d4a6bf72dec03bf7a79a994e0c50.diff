diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index e531d573336..fa5a1c1721b 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2602,11 +2602,7 @@ private void PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)
                         break;
 
                     case ScheduleActionType.CreateNode:
-                        var nodeConfig = GetNodeConfiguration();
-
-                        IList<NodeInfo> newNodes;
-
-                        newNodes = _nodeManager.CreateNodes(nodeConfig, response.RequiredNodeType, response.NumberOfNodesToCreate);
+                        IList<NodeInfo> newNodes = _nodeManager.CreateNodes(GetNodeConfiguration(), response.RequiredNodeType, response.NumberOfNodesToCreate);
 
                         if (newNodes?.Count != response.NumberOfNodesToCreate || newNodes.Any(n => n == null))
                         {
@@ -2620,8 +2616,8 @@ private void PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)
                         {
                             _noNodesActiveEvent.Reset();
                             _activeNodes.Add(node.NodeId);
-                            ErrorUtilities.VerifyThrow(_activeNodes.Count != 0, "Still 0 nodes after asking for a new node.  Build cannot proceed.");
                         }
+                        ErrorUtilities.VerifyThrow(_activeNodes.Count != 0, "Still 0 nodes after asking for a new node.  Build cannot proceed.");
 
                         IEnumerable<ScheduleResponse> newResponses = _scheduler.ReportNodesCreated(newNodes);
                         PerformSchedulingActions(newResponses);
diff --git a/src/Build/BackEnd/Components/Communications/INodeProvider.cs b/src/Build/BackEnd/Components/Communications/INodeProvider.cs
index 5194c3df8b7..4d669238546 100644
--- a/src/Build/BackEnd/Components/Communications/INodeProvider.cs
+++ b/src/Build/BackEnd/Components/Communications/INodeProvider.cs
@@ -58,14 +58,14 @@ int AvailableNodes
         /// <summary>
         /// Requests that a new node be created on the specified machine.
         /// </summary>
-        /// <param name="nextNodeId">The id to assign to the first created node. Following nodes ids will be increasing by 1.</param>
+        /// <param name="nextNodeId">The id to assign to the first created node. Resulting nodes ids will be in range [nextNodeId, nextNodeId + numberOfNodesToCreate - 1]</param>
         /// <param name="packetFactory">
         /// The packet factory used to create packets when data is
         /// received on this node.
         /// </param>
         /// <param name="configurationFactory">NodeConfiguration factory of particular node</param>
         /// <param name="numberOfNodesToCreate">Required number of nodes to create</param>
-        /// <returns>Array of NodeInfo which size is equal of successfully created nodes</returns>
+        /// <returns>Array of NodeInfo of successfully created nodes</returns>
         IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory packetFactory, Func<NodeInfo, NodeConfiguration> configurationFactory, int numberOfNodesToCreate);
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs b/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
index 4a953968788..7d169e96108 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderInProc.cs
@@ -193,10 +193,12 @@ public IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory factory, F
             {
                 int nodeId = nextNodeId + i;
 
-                NodeInfo nodeInfo = CreateNode(nodeId, factory, configurationFactory);
-                // If it fails let it return what we have crated so far to so caller can somehow acquire missing nodes.
-                if (nodeInfo == null)
+                NodeInfo nodeInfo = new(nodeId, ProviderType);
+                if (!CreateNode(nodeId, factory, configurationFactory(nodeInfo)))
+                {
+                    // If it fails let it return what we have crated so far to so caller can somehow acquire missing nodes.
                     break;
+                }
 
                 nodes.Add(nodeInfo);
             }
@@ -209,8 +211,8 @@ public IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory factory, F
         /// </summary>
         /// <param name="nodeId">The id of the node to create.</param>
         /// <param name="factory">The factory to use to create packets from this node.</param>
-        /// <param name="configurationFactory">The configuration factory for the node.</param>
-        private NodeInfo CreateNode(int nodeId, INodePacketFactory factory, Func<NodeInfo, NodeConfiguration> configurationFactory)
+        /// <param name="configuration">The configuration for the node.</param>
+        private bool CreateNode(int nodeId, INodePacketFactory factory, NodeConfiguration configuration)
         {
             ErrorUtilities.VerifyThrow(nodeId != InvalidInProcNodeId, "Cannot create in-proc node.");
 
@@ -235,7 +237,7 @@ private NodeInfo CreateNode(int nodeId, INodePacketFactory factory, Func<NodeInf
                     if (!InProcNodeOwningOperatingEnvironment.WaitOne(0))
                     {
                         // Can't take the operating environment.
-                        return null;
+                        return false;
                     }
                 }
             }
@@ -245,16 +247,14 @@ private NodeInfo CreateNode(int nodeId, INodePacketFactory factory, Func<NodeInf
             {
                 if (!InstantiateNode(factory))
                 {
-                    return null;
+                    return false;
                 }
             }
 
-            NodeInfo nodeInfo = new(nodeId, ProviderType);
-
-            _inProcNodeEndpoint.SendData(configurationFactory(nodeInfo));
+            _inProcNodeEndpoint.SendData(configuration);
             _inProcNodeId = nodeId;
 
-            return nodeInfo;
+            return true;
         }
 
         #endregion
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
index 93b6709a493..771142893f1 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProc.cs
@@ -84,7 +84,7 @@ public IList<NodeInfo> CreateNodes(int nextNodeId, INodePacketFactory factory, F
             //   we add into _nodeContexts premise of future node and verify that it will not cross limits.
             if (_nodeContexts.Count + numberOfNodesToCreate > ComponentHost.BuildParameters.MaxNodeCount)
             {
-                ErrorUtilities.ThrowInternalError("Exceeded max node count of '{0}'; current count '{_nodeContexts.Count}' ", _nodeContexts.Count);
+                ErrorUtilities.ThrowInternalError("Exceeded max node count of '{0}', current count is '{1}' ", ComponentHost.BuildParameters.MaxNodeCount, _nodeContexts.Count);
                 return new List<NodeInfo>();
             }
 
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 25059698d2b..820394b57fb 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -349,23 +349,19 @@ bool StartNewNode(int nodeId)
                         {
                             try
                             {
-                                CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it has exited with exit code {1}. This can indicate a crash at startup",
-                                    msbuildProcess.Id, msbuildProcess.ExitCode);
+                                CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it has exited with exit code {1}. This can indicate a crash at startup", msbuildProcess.Id, msbuildProcess.ExitCode);
                             }
                             catch (InvalidOperationException)
                             {
                                 // This case is common on Windows where we called CreateProcess and the Process object
                                 // can't get the exit code.
-                                CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it has exited with unknown exit code. This can indicate a crash at startup",
-                                    msbuildProcess.Id);
+                                CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it has exited with unknown exit code. This can indicate a crash at startup", msbuildProcess.Id);
                             }
                         }
                     }
                     else
                     {
-                        CommunicationsUtilities.Trace(
-                            "Could not connect to node with PID {0}; it is still running. This can occur when two multiprocess builds run in parallel and the other one 'stole' this node",
-                            msbuildProcess.Id);
+                        CommunicationsUtilities.Trace("Could not connect to node with PID {0}; it is still running. This can occur when two multiprocess builds run in parallel and the other one 'stole' this node", msbuildProcess.Id);
                     }
                 }
 
@@ -386,7 +382,7 @@ void CreateNodeContext(int nodeId, Process nodeToReuse, Stream nodeStream)
         /// <param name="msbuildLocation"></param>
         /// <returns>
         /// Item 1 is the name of the process being searched for.
-        /// Item 2 is the queue of ordered processes themselves.
+        /// Item 2 is the ConcurrentQueue of ordered processes themselves.
         /// </returns>
         private (string expectedProcessName, ConcurrentQueue<Process> nodeProcesses) GetPossibleRunningNodes(string msbuildLocation = null)
         {
