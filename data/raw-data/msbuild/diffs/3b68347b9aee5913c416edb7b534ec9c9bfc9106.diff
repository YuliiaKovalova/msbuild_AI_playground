diff --git a/eng/cibuild_bootstrapped_msbuild.ps1 b/eng/cibuild_bootstrapped_msbuild.ps1
index 46d471d042b..2c4bb6601a9 100644
--- a/eng/cibuild_bootstrapped_msbuild.ps1
+++ b/eng/cibuild_bootstrapped_msbuild.ps1
@@ -64,67 +64,11 @@ try {
 
   if ($buildStage1)
   {
-    & $PSScriptRoot\Common\Build.ps1 -restore -build -ci -msbuildEngine $msbuildEngine /p:CreateBootstrap=true @properties
+    & $PSScriptRoot\Common\Build.ps1 -restore -build -test -ci -msbuildEngine $msbuildEngine /p:CreateBootstrap=true @properties
   }
 
   KillProcessesFromRepo
 
-  $bootstrapRoot = Join-Path $Stage1BinDir "bootstrap"
-
-  # we need to do this to guarantee we have/know where dotnet.exe is installed
-  $dotnetToolPath = InitializeDotNetCli $true
-  $dotnetExePath = Join-Path $dotnetToolPath "dotnet.exe"
-
-  if ($msbuildEngine -eq 'vs')
-  {
-    $buildToolPath = Join-Path $bootstrapRoot "net472\MSBuild\Current\Bin\MSBuild.exe"
-    $buildToolCommand = "";
-    $buildToolFramework = "net472"
-
-    if ($configuration -eq "Debug-MONO" -or $configuration -eq "Release-MONO")
-    {
-      # Copy MSBuild.dll to MSBuild.exe so we can run it without a host
-      $sourceDll = Join-Path $bootstrapRoot "net472\MSBuild\Current\Bin\MSBuild.dll"
-      Copy-Item -Path $sourceDll -Destination $msbuildToUse
-    }
-  }
-  else
-  {
-    $buildToolPath = $dotnetExePath
-    $buildToolCommand = Join-Path $bootstrapRoot "net8.0\MSBuild\MSBuild.dll"
-    $buildToolFramework = "net8.0"
-  }
-
-  # Use separate artifacts folder for stage 2
-  # $env:ArtifactsDir = Join-Path $ArtifactsDir "2\"
-
-  & $dotnetExePath build-server shutdown
-
-  if ($buildStage1)
-  {
-    if (Test-Path $Stage1Dir)
-    {
-      Remove-Item -Force -Recurse $Stage1Dir
-    }
-
-    Move-Item -Path $ArtifactsDir -Destination $Stage1Dir -Force
-  }
-
-  $buildTool = @{ Path = $buildToolPath; Command = $buildToolCommand; Tool = $msbuildEngine; Framework = $buildToolFramework }
-  $global:_BuildTool = $buildTool
-
-  # Ensure that debug bits fail fast, rather than hanging waiting for a debugger attach.
-  $env:MSBUILDDONOTLAUNCHDEBUGGER="true"
-
-  # Opt into performance logging. https://github.com/dotnet/msbuild/issues/5900
-  $env:DOTNET_PERFLOG_DIR=$PerfLogDir
-
-  # When using bootstrapped MSBuild:
-  # - Turn off node reuse (so that bootstrapped MSBuild processes don't stay running and lock files)
-  # - Do run tests
-  # - Don't try to create a bootstrap deployment
-  & $PSScriptRoot\Common\Build.ps1 -restore -build -test -ci /p:CreateBootstrap=false /nr:false @properties
-
   exit $lastExitCode
 }
 catch {
diff --git a/eng/cibuild_bootstrapped_msbuild.sh b/eng/cibuild_bootstrapped_msbuild.sh
index ceb2b343329..9d4b441ed3c 100755
--- a/eng/cibuild_bootstrapped_msbuild.sh
+++ b/eng/cibuild_bootstrapped_msbuild.sh
@@ -55,7 +55,7 @@ fi
 
 if [[ $build_stage1 == true ]];
 then
-	/bin/bash "$ScriptRoot/common/build.sh" --restore --build --ci --configuration $configuration /p:CreateBootstrap=true $properties $extra_properties || exit $?
+	/bin/bash "$ScriptRoot/common/build.sh" --restore --build --ci --test --configuration $configuration /p:CreateBootstrap=false $properties $extra_properties || exit $?
 fi
 
 bootstrapRoot="$Stage1Dir/bin/bootstrap"
@@ -93,9 +93,3 @@ export DOTNET_PERFLOG_DIR=$PerfLogDir
 # Prior to 3.0, the Csc task uses this environment variable to decide whether to run
 # a CLI host or directly execute the compiler.
 export DOTNET_HOST_PATH="$_InitializeDotNetCli/dotnet"
-
-# When using bootstrapped MSBuild:
-# - Turn off node reuse (so that bootstrapped MSBuild processes don't stay running and lock files)
-# - Do run tests
-# - Don't try to create a bootstrap deployment
-. "$ScriptRoot/common/build.sh" --restore --build --test --ci --nodereuse false --configuration $configuration /p:CreateBootstrap=false $properties $extra_properties
