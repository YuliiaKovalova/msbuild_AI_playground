diff --git a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
index d9d322d7f3f..f6d0b3a01ed 100644
--- a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
+++ b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
@@ -16,9 +16,6 @@ namespace Microsoft.Build.UnitTests
 #if FEATURE_CODETASKFACTORY
 
     using System.CodeDom.Compiler;
-    using System.IO.Compression;
-    using Microsoft.Build.Logging;
-    using Shouldly;
 
     public sealed class CodeTaskFactoryTests
     {
@@ -1043,164 +1040,6 @@ public override bool Execute()
             }
         }
 
-        [Fact]
-        public void EmbedsSourceFileInBinlog()
-        {
-            string sourceFileContent = @"
-                                       using System;
-                    using System.Collections.Generic;
-                    using System.Text;
-                    using Microsoft.Build.Utilities;
-                    using Microsoft.Build.Framework;
-
-                    namespace Microsoft.Build.NonShippingTasks
-                    {
-                        public class LogNameValue_ClassSourcesTest : Task
-                        {
-                            private string variableName;
-                            private string variableValue;
-
-
-                            [Required]
-                            public string Name
-                            {
-                                get { return variableName; }
-                                set { variableName = value; }
-                            }
-
-
-                            public string Value
-                            {
-                                get { return variableValue; }
-                                set { variableValue = value; }
-                            }
-
-
-                            public override bool Execute()
-                            {
-                                // Set the process environment
-                                Log.LogMessage(""Setting {0}={1}"", this.variableName, this.variableValue);
-                                return true;
-                            }
-                        }
-                    }
-";
-
-            string tempFileDirectory = Path.GetTempPath();
-            string tempFileName = Guid.NewGuid().ToString() + ".cs";
-            string tempSourceFile = Path.Combine(tempFileDirectory, tempFileName);
-            File.WriteAllText(tempSourceFile, sourceFileContent);
-
-            try
-            {
-                string projectFileContents = @"
-                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
-                        <UsingTask TaskName=`LogNameValue_ClassSourcesTest` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
-                        <ParameterGroup>
-                            <Name ParameterType='System.String' />
-                            <Value ParameterType='System.String' />
-                        </ParameterGroup>
-                        <Task>
-                            <Code Source='" + tempSourceFile + @"'/>
-                         </Task>
-                         </UsingTask>
-                        <Target Name=`Build`>
-                            <LogNameValue_ClassSourcesTest Name='MyName' Value='MyValue'/>
-                        </Target>
-                    </Project>";
-
-                string binaryLogFile = Path.Combine(tempFileDirectory, "output.binlog");
-                var binaryLogger = new BinaryLogger()
-                {
-                    Parameters = $"LogFile={binaryLogFile}",
-                    CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,
-                };
-
-                Helpers.BuildProjectWithNewOMAndBinaryLogger(projectFileContents, binaryLogger, out bool result);
-
-                result.ShouldBeTrue();
-
-                string projectImportsZipPath = Path.ChangeExtension(binaryLogFile, ".ProjectImports.zip");
-                using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);
-                using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);
-
-                // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
-                // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
-                zipArchive.Entries.ShouldContain(zE => zE.Name.EndsWith(tempFileName),
-                    "");
-            }
-            finally
-            {
-                if (File.Exists(tempSourceFile))
-                {
-                    File.Delete(tempSourceFile);
-                }
-            }
-        }
-
-        [Fact]
-        public void EmbedsSourceFileInBinlogWhenFailsToCompile()
-        {
-            string sourceFileContentThatFailsToCompile = @"
-                    namespace Microsoft.Build.NonShippingTasks
-                    {
-                        public class LogNameValue_ClassSourcesTest : Task
-                        {
-                            private string 
-";
-
-            string tempFileDirectory = Path.GetTempPath();
-            string tempFileName = Guid.NewGuid().ToString() + ".cs";
-            string tempSourceFile = Path.Combine(tempFileDirectory, tempFileName);
-            File.WriteAllText(tempSourceFile, sourceFileContentThatFailsToCompile);
-
-            try
-            {
-                string projectFileContents = @"
-                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
-                        <UsingTask TaskName=`LogNameValue_ClassSourcesTest` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
-                        <ParameterGroup>
-                            <Name ParameterType='System.String' />
-                            <Value ParameterType='System.String' />
-                        </ParameterGroup>
-                        <Task>
-                            <Code Source='" + tempSourceFile + @"'/>
-                         </Task>
-                         </UsingTask>
-                        <Target Name=`Build`>
-                            <LogNameValue_ClassSourcesTest Name='MyName' Value='MyValue'/>
-                        </Target>
-                    </Project>";
-
-                string binaryLogFile = Path.Combine(tempFileDirectory, "output.binlog");
-                var binaryLogger = new BinaryLogger()
-                {
-                    Parameters = $"LogFile={binaryLogFile}",
-                    CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,
-                };
-
-                Helpers.BuildProjectWithNewOMAndBinaryLogger(projectFileContents, binaryLogger, out bool result);
-
-                result.ShouldBeFalse();
-
-                string projectImportsZipPath = Path.ChangeExtension(binaryLogFile, ".ProjectImports.zip");
-                using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);
-                using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);
-
-                // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
-                // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
-                zipArchive.Entries.ShouldContain(zE => zE.Name.EndsWith(tempFileName),
-                    "");
-            }
-            finally
-            {
-                if (File.Exists(tempSourceFile))
-                {
-                    File.Delete(tempSourceFile);
-                }
-            }
-        }
-
         /// <summary>
         /// Code factory test where the TMP directory does not exist.
         /// See https://github.com/dotnet/msbuild/issues/328 for details.
