diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index dd1e5009679..3c513ab2627 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -249,7 +249,10 @@ private void ExecuteRemove(ProjectItemGroupTaskItemInstance child, ItemBucket bu
             }
             else
             {
-                itemsToRemove = FindItemsUsingMatchOnMetadata(group, child, bucket, matchOnMetadata, matchingOptions);
+                ImmutableList<string> metadataList = matchOnMetadata.ToImmutableList();
+                MetadataSet<ProjectPropertyInstance, ProjectItemInstance> metadataSet = new(matchingOptions, metadataList,
+                    new ItemSpec<ProjectPropertyInstance, ProjectItemInstance>(child.Remove, bucket.Expander, child.RemoveLocation, Project.Directory, true));
+                itemsToRemove = group.Where(item => metadataSet.Contains(metadataList.Select(m => item.GetMetadata(m).EvaluatedValue))).ToList();
             }
 
             if (itemsToRemove != null)
@@ -268,29 +271,6 @@ private void ExecuteRemove(ProjectItemGroupTaskItemInstance child, ItemBucket bu
             }
         }
 
-        private List<ProjectItemInstance> FindItemsUsingMatchOnMetadata(
-            ICollection<ProjectItemInstance> items,
-            ProjectItemGroupTaskItemInstance child,
-            ItemBucket bucket,
-            HashSet<string> matchOnMetadata,
-            MatchOnMetadataOptions options)
-        {
-            ErrorUtilities.VerifyThrowArgumentNull(matchOnMetadata, nameof(matchOnMetadata));
-
-            var itemSpec = new ItemSpec<ProjectPropertyInstance, ProjectItemInstance>(child.Remove, bucket.Expander, child.RemoveLocation, Project.Directory, true);
-
-            ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
-                itemSpec.Fragments.Count == 1
-                && itemSpec.Fragments.First() is ItemSpec<ProjectPropertyInstance, ProjectItemInstance>.ItemExpressionFragment
-                && matchOnMetadata.Count == 1,
-                new BuildEventFileInfo(string.Empty),
-                "OM_MatchOnMetadataIsRestrictedToOnlyOneReferencedItem",
-                child.RemoveLocation,
-                child.Remove);
-
-            return items.Where(item => itemSpec.MatchesItemOnMetadata(item, matchOnMetadata, options)).ToList();
-        }
-
         /// <summary>
         /// Modifies items in the world - specifically, changes their metadata. Changes to items that are part of the project manifest are backed up, so 
         /// they can be reverted when the project is reset after the end of the build.
diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index 2756ccb9c37..e7ba2e13ff9 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Collections.Immutable;
 using System.Linq;
 using Microsoft.Build.Globbing;
 using Microsoft.Build.Internal;
@@ -85,24 +86,6 @@ public override bool IsMatch(string itemToMatch)
                 return ReferencedItems.Any(v => v.ItemAsValueFragment.IsMatch(itemToMatch));
             }
 
-            public override bool IsMatchOnMetadata(IItem item, IEnumerable<string> metadata, MatchOnMetadataOptions options)
-            {
-                return ReferencedItems.Any(referencedItem =>
-                        metadata.All(m => !item.GetMetadataValue(m).Equals(string.Empty) && MetadataComparer(options, item.GetMetadataValue(m), referencedItem.Item.GetMetadataValue(m))));
-            }
-
-            private bool MetadataComparer(MatchOnMetadataOptions options, string itemMetadata, string referencedItemMetadata)
-            {
-                if (options.Equals(MatchOnMetadataOptions.PathLike))
-                {
-                    return FileUtilities.ComparePathsNoThrow(itemMetadata, referencedItemMetadata, ProjectDirectory);
-                }
-                else 
-                {
-                    return String.Equals(itemMetadata, referencedItemMetadata, options.Equals(MatchOnMetadataOptions.CaseInsensitive) ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal);
-                }
-            }
-
             public override IMSBuildGlob ToMSBuildGlob()
             {
                 return MsBuildGlob;
@@ -310,26 +293,6 @@ public bool MatchesItem(I item)
             return false;
         }
 
-        /// <summary>
-        ///     Return true if any of the given <paramref name="metadata" /> matches the metadata on <paramref name="item" />
-        /// </summary>
-        /// <param name="item">The item to attempt to find a match for based on matching metadata</param>
-        /// <param name="metadata">Names of metadata to look for matches for</param>
-        /// <param name="options">metadata option matching</param>
-        /// <returns></returns>
-        public bool MatchesItemOnMetadata(IItem item, IEnumerable<string> metadata, MatchOnMetadataOptions options)
-        {
-            foreach (var fragment in Fragments)
-            {
-                if (fragment.IsMatchOnMetadata(item, metadata, options))
-                {
-                    return true;
-                }
-            }
-
-            return false;
-        }
-
         /// <summary>
         ///     Return the fragments that match against the given <paramref name="itemToMatch" />
         /// </summary>
@@ -456,14 +419,6 @@ public virtual bool IsMatch(string itemToMatch)
             return FileMatcher.IsMatch(itemToMatch);
         }
 
-        /// <summary>
-        /// Returns true if <paramref name="itemToMatch" /> matches any ReferencedItems based on <paramref name="metadata" /> and <paramref name="options" />.
-        /// </summary>
-        public virtual bool IsMatchOnMetadata(IItem itemToMatch, IEnumerable<string> metadata, MatchOnMetadataOptions options)
-        {
-            return false;
-        }
-
         public virtual IMSBuildGlob ToMSBuildGlob()
         {
             return MsBuildGlob;
@@ -504,4 +459,87 @@ public GlobFragment(string textFragment, string projectDirectory)
             && TextFragment[2] == '*'
             && FileUtilities.IsAnySlash(TextFragment[3]);
     }
+
+    internal class MetadataSet<P, I> where P : class, IProperty where I : class, IItem, IMetadataTable
+    {
+        private Dictionary<string, MetadataSet<P, I>> children;
+        MatchOnMetadataOptions options;
+
+        internal MetadataSet(MatchOnMetadataOptions options, ImmutableList<string> metadata, ItemSpec<P, I> itemSpec)
+        {
+            StringComparer comparer = options == MatchOnMetadataOptions.CaseInsensitive ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal;
+            children = new Dictionary<string, MetadataSet<P, I>>(comparer);
+            this.options = options;
+            foreach (ItemSpec<P, I>.ItemExpressionFragment frag in itemSpec.Fragments)
+            {
+                foreach (ItemSpec<P, I>.ReferencedItem referencedItem in frag.ReferencedItems)
+                {
+                    this.Add(metadata.Select(m => referencedItem.Item.GetMetadataValue(m)));
+                }
+            }
+        }
+
+        private MetadataSet(MatchOnMetadataOptions options)
+        {
+            StringComparer comparer = options == MatchOnMetadataOptions.CaseInsensitive ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal;
+            children = new Dictionary<string, MetadataSet<P, I>>(comparer);
+            this.options = options;
+        }
+
+        // Relies on IEnumerable returning the metadata in a reasonable order. Reasonable?
+        private void Add(IEnumerable<string> metadata)
+        {
+            MetadataSet<P, I> current = this;
+            foreach (string s in metadata)
+            {
+                string normalizedString = options == MatchOnMetadataOptions.PathLike ?
+                    FileUtilities.NormalizeForPathComparison(s) :
+                    s;
+                if (current.children.TryGetValue(normalizedString, out MetadataSet<P, I> child))
+                {
+                    current = child;
+                }
+                else
+                {
+                    current.children.Add(normalizedString, new MetadataSet<P, I>(current.options));
+                    current = current.children[normalizedString];
+                }
+            }
+        }
+
+        internal bool Contains(IEnumerable<string> metadata)
+        {
+            List<string> metadataList = metadata.ToList();
+            return this.Contains(metadataList, 0);
+        }
+
+        private bool Contains(List<string> metadata, int index)
+        {
+            if (index == metadata.Count)
+            {
+                return true;
+            }
+            else if (String.IsNullOrEmpty(metadata[index]))
+            {
+                return children.Any(kvp => !String.IsNullOrEmpty(kvp.Key) && kvp.Value.Contains(metadata, index + 1));
+            }
+            else
+            {
+                return (children.TryGetValue(FileUtilities.NormalizeForPathComparison(metadata[index]), out MetadataSet<P, I> child) && child.Contains(metadata, index + 1)) ||
+                    (children.TryGetValue(string.Empty, out MetadataSet<P, I> emptyChild) && emptyChild.Contains(metadata, index + 1));
+            }
+        }
+    }
+
+    public enum MatchOnMetadataOptions
+    {
+        CaseSensitive,
+        CaseInsensitive,
+        PathLike
+    }
+
+    public static class MatchOnMetadataConstants
+    {
+        public const MatchOnMetadataOptions MatchOnMetadataOptionsDefaultValue = MatchOnMetadataOptions.CaseSensitive;
+    }
 }
diff --git a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
index 39509aa02ef..e77bd9b79ba 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
@@ -2,6 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using Microsoft.Build.Construction;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 using System;
 using System.Collections.Generic;
@@ -16,7 +17,7 @@ class RemoveOperation : LazyItemOperation
         {
             readonly ImmutableList<string> _matchOnMetadata;
             readonly MatchOnMetadataOptions _matchOnMetadataOptions;
-            private MetadataSet metadataSet;
+            private MetadataSet<P, I> metadataSet;
 
             public RemoveOperation(RemoveOperationBuilder builder, LazyItemEvaluator<P, I, M, D> lazyEvaluator)
                 : base(builder, lazyEvaluator)
@@ -69,14 +70,7 @@ private bool MatchesItemOnMetadata(I item)
             {
                 if (metadataSet == null)
                 {
-                    metadataSet = new MetadataSet(_matchOnMetadataOptions);
-                    foreach (ItemSpec<P, I>.ItemExpressionFragment frag in _itemSpec.Fragments)
-                    {
-                        foreach (ItemSpec<P, I>.ReferencedItem referencedItem in frag.ReferencedItems)
-                        {
-                            metadataSet.Add(_matchOnMetadata.Select(m => (referencedItem.Item.GetMetadata(m) as ProjectMetadata).EvaluatedValue));
-                        }
-                    }
+                    metadataSet = new MetadataSet<P, I>(_matchOnMetadataOptions, _matchOnMetadata, _itemSpec);
                 }
 
                 return metadataSet.Contains(_matchOnMetadata.Select(m => (item.GetMetadata(m) as ProjectMetadata).EvaluatedValue));
@@ -120,72 +114,4 @@ public RemoveOperationBuilder(ProjectItemElement itemElement, bool conditionResu
             }
         }
     }
-
-    internal class MetadataSet
-    {
-        private Dictionary<string, MetadataSet> children;
-        MatchOnMetadataOptions options;
-
-        internal MetadataSet(MatchOnMetadataOptions options)
-        {
-            StringComparer comparer = options == MatchOnMetadataOptions.CaseInsensitive ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal;
-            children = new Dictionary<string, MetadataSet>(comparer);
-            this.options = options;
-        }
-
-        // Relies on IEnumerable returning the metadata in a reasonable order. Reasonable?
-        internal void Add(IEnumerable<string> metadata)
-        {
-            MetadataSet current = this;
-            foreach (string s in metadata)
-            {
-                string normalizedString = options == MatchOnMetadataOptions.PathLike ?
-                    FileUtilities.NormalizeForPathComparison(s) :
-                    s;
-                if (current.children.TryGetValue(normalizedString, out MetadataSet child))
-                {
-                    current = child;
-                }
-                else
-                {
-                    current.children.Add(normalizedString, new MetadataSet(current.options));
-                    current = current.children[normalizedString];
-                }
-            }
-        }
-
-        internal bool Contains(IEnumerable<string> metadata)
-        {
-            List<string> metadataList = metadata.ToList();
-            return this.Contains(metadataList, 0);
-        }
-
-        private bool Contains(List<string> metadata, int index)
-        {
-            if (index == metadata.Count)
-            {
-                return true;
-            }
-            else if (String.IsNullOrEmpty(metadata[index]))
-            {
-                return children.Any(kvp => !String.IsNullOrEmpty(kvp.Key) && kvp.Value.Contains(metadata, index + 1));
-            }
-            else
-            {
-                return (children.TryGetValue(FileUtilities.NormalizeForPathComparison(metadata[index]), out MetadataSet child) && child.Contains(metadata, index + 1)) ||
-                    (children.TryGetValue(string.Empty, out MetadataSet emptyChild) && emptyChild.Contains(metadata, index + 1));
-            }
-        }
-    }
-
-    public enum MatchOnMetadataOptions
-    {
-        CaseSensitive,
-        CaseInsensitive,
-        PathLike
-    }
-
-    public static class MatchOnMetadataConstants {
-        public const MatchOnMetadataOptions MatchOnMetadataOptionsDefaultValue = MatchOnMetadataOptions.CaseSensitive;
-    }
 }
