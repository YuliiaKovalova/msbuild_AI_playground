diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
new file mode 100644
index 00000000000..b9c9a1a2135
--- /dev/null
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -0,0 +1,100 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+using System;
+
+namespace Microsoft.Build.Logging.FancyLogger
+{
+    public enum ANSIForegroundColor
+    {
+        None = 0,
+        Red = 31,
+        Green = 32,
+        Yellow = 33,
+        Blue = 34,
+        Magenta = 35,
+        Cyan = 36,
+        White = 37
+    }
+
+    public enum ANSIBackgroundColor
+    {
+        None = 0,
+        Red = 41,
+        Green = 42,
+        Yellow = 43,
+        Blue = 44,
+        Magenta = 45,
+        Cyan = 46,
+        White = 47
+    }
+
+    public static class ANSIBuilder
+    {
+        public static class Formatting
+        {
+            public static string Bold(string text)
+            {
+                return String.Format("\x1b[1m{0}\x1b[22m", text);
+            }
+            public static string Dim(string text)
+            {
+                return String.Format("\x1b[2m{0}\x1b[22m", text);
+            }
+            public static string Italics(string text)
+            {
+                return String.Format("\x1b[3m{0}\x1b[23m", text);
+            }
+            public static string Underlined(string text)
+            {
+                return String.Format("\x1b[4m{0}\x1b[24m", text);
+            }
+            public static string Blinking(string text)
+            {
+                return String.Format("\x1b[5m{0}\x1b[25m", text);
+            }
+            public static string Strikethrough(string text)
+            {
+                return String.Format("\x1b[9m{0}\x1b[29m", text);
+            }
+            public static string Color(string text, ANSIBackgroundColor color) {
+                return String.Format("\x1b[{0}m{1}\x1b[0m", (int)color, text);
+            }
+            public static string Color(string text, ANSIForegroundColor color)
+            {
+                return String.Format("\x1b[{0}m{1}\x1b[0m", (int)color, text);
+            }
+        }
+        public static class Cursor
+        {
+            public static string GoToPosition(int row, int column)
+            {
+                return String.Format("\x1b[{0};{1}H", row, column);
+            }
+        }
+        public static class Eraser
+        {
+            public static string EraseCurrentLine()
+            {
+                return "\x1b[2K";
+            }
+        }
+        public static class Graphics
+        {
+            public static string ProgressBar(float percentage, int width = 10, char completedChar = '█', char remainingChar = '░')
+            {
+                string result = "";
+                for (int i = 0; i < (int)Math.Floor(width * percentage); i++)
+                {
+                    result += completedChar;
+                }
+                for (int i = (int)Math.Floor(width * percentage); i < width; i++)
+                {
+                    result += remainingChar;
+                }
+                return result;
+            }
+        }
+    }
+}
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 3b75e7ce2dd..670d2db03b8 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -5,10 +5,10 @@
 using System.Security;
 
 using Microsoft.Build.Framework;
-// using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
+using Microsoft.Build.Logging;
 
-namespace FancyLogger
+namespace Microsoft.Build.Logging.FancyLogger
 {
     public class LogLine
     {
@@ -43,9 +43,9 @@ public static LogLine WriteNewLine(string text)
             LogLines.Add(line.Id, line);
             Console.Write(
                 "\n" +
-                ANSIBuilder.Cursor.GoToPosition(lineNumber, 0) +
-                line.Text +
-                ANSIBuilder.Cursor.GoToPosition(lineNumber+1, 0)
+                // ANSIBuilder.Cursor.GoToPosition(lineNumber, 0) +
+                line.Text
+                // ANSIBuilder.Cursor.GoToPosition(lineNumber+1, 0)
             );
             // Return line
             return line;
@@ -60,9 +60,9 @@ public static void WriteInLine(string text, int lineId)
                 line.Text = text;
                 // Log it
                 Console.Write(
-                    ANSIBuilder.Cursor.GoToPosition(line.LineNumber, 0)
-                    + "\r" + text +
-                    ANSIBuilder.Cursor.GoToPosition(line.LineNumber + 1, 0)
+                    // ANSIBuilder.Cursor.GoToPosition(line.LineNumber, 0)
+                    "\r" + text
+                    // ANSIBuilder.Cursor.GoToPosition(line.LineNumber + 1, 0)
                 );
             }
         }
@@ -72,101 +72,6 @@ public static void DeleteLine(int lineId)
         }
     }
 
-
-    #region ANSI Formatting
-    internal enum ANSIColors
-    {
-        Red = 31,
-        Green = 32,
-        Yellow = 33,
-        Blue = 34,
-        Magenta = 35,
-        Cyan = 36,
-        White = 37
-    }
-    internal static class ANSIBuilder
-    {
-        internal static class Formatting
-        {
-            public static string Bold(string text)
-            {
-                return String.Format("\x1b[1m{0}\x1b[22m", text);
-            }
-            public static string Dim(string text)
-            {
-                return String.Format("\x1b[2m{0}\x1b[22m", text);
-            }
-            public static string Italic(string text)
-            {
-                return String.Format("\x1b[3m{0}\x1b[23m", text);
-            }
-            public static string Underline(string text)
-            {
-                return String.Format("\x1b[4m{0}\x1b[24m", text);
-            }
-            public static string Blinking(string text)
-            {
-                return String.Format("\x1b[5m{0}\x1b[25m", text);
-            }
-            public static string StrikeThrough(string text)
-            {
-                return String.Format("\x1b[9m{0}\x1b[29m", text);
-            }
-            public static string Color(string text, ANSIColors color)
-            {
-                return String.Format("\x1b[{0}m{1}\x1b[0m", (int) color, text);
-            }
-        }
-
-        internal static class Cursor
-        {
-            private static int savedCursorLine = 0;
-            public static string GoToPosition(int line, int column)
-            {
-                return String.Format("\x1b[{0};{1}H", line, column);
-                // Console.SetCursorPosition(line, column);
-                // return "";
-            }
-            public static string SaveCursorPosition()
-            {
-                savedCursorLine = Console.CursorTop;
-                return "";
-                // return "\x1b 7";
-            }
-            public static string RestoreCursorPosition()
-            {
-                return GoToPosition(savedCursorLine, 0);
-                // return "\x1b 8";
-            }
-        }
-
-        internal static class Eraser
-        {
-            public static string EraseLine()
-            {
-                return "\x1b[2K";
-            }
-        }
-
-        internal static class Graphics
-        {
-            public static string ProgressBar(float percentage, int width = 10, char completedChar= '█', char remainingChar = '░')
-            {
-                string result = "[";
-                for (int i = 0; i < (int) Math.Floor(width * percentage); i++)
-                {
-                    result += completedChar;
-                }
-                for (int i = (int) Math.Floor(width * percentage) + 1; i < width; i++)
-                {
-                    result += remainingChar;
-                }
-                return result + "]";
-            }
-        }
-    }
-    #endregion
-
     public class FancyLogger : ILogger
     {
         public int i = 0;
@@ -241,12 +146,9 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
                 targetConsoleLines[e.BuildEventContext.TargetId] = line.Id;
 
                 LogLine nextLine = Log.WriteNewLine(
-                    ANSIBuilder.Formatting.Dim("\tTasks will go here")
+                    ANSIBuilder.Formatting.Dim("\tTasks will go here") 
                 );
-                // Log.WriteNewLine("");
-
-                // Log.WriteInLine("Task task task task task task", nextLine.Id);
-                // Number of 
+                Log.WriteNewLine("");
             }
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
@@ -258,11 +160,11 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
                 if (e.Succeeded)
                 {
                     Log.WriteInLine(
-                        ANSIBuilder.Formatting.Color("✓ " + e.TargetName, ANSIColors.Green)
+                        ANSIBuilder.Formatting.Color("✓ " + e.TargetName, ANSIForegroundColor.Green)
                     , lineId);
                 }
                 Log.WriteInLine(
-                    ANSIBuilder.Eraser.EraseLine(), lineId+1
+                    ANSIBuilder.Eraser.EraseCurrentLine(), lineId+1
                 );
             }
         }
@@ -274,7 +176,8 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
             {
                 int targetLineId = targetConsoleLines[e.BuildEventContext.TargetId];
                 Log.WriteInLine(
-                    ANSIBuilder.Eraser.EraseLine() + "\t" + ANSIBuilder.Graphics.ProgressBar(0.6f, 16) + "\t" +
+                    ANSIBuilder.Eraser.EraseCurrentLine() + "\t" +
+                    ANSIBuilder.Graphics.ProgressBar(0.6f, 16) + "\t" +
                     ANSIBuilder.Formatting.Dim(e.TaskName), 
                     targetLineId + 1
                 );
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.dll b/src/Build/Logging/FancyLogger/FancyLogger.dll
deleted file mode 100644
index 6d555ef5760..00000000000
Binary files a/src/Build/Logging/FancyLogger/FancyLogger.dll and /dev/null differ
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index b05720f0071..f36722eb0b0 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -159,6 +159,7 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
+    <Compile Include="Logging\FancyLogger\ANSIBuilder.cs" />
     <Compile Include="Logging\FancyLogger\FancyLogger.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 3f98ef728bf..f7482c58fec 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -38,6 +38,7 @@
 using Microsoft.Build.Experimental;
 using Microsoft.Build.Framework.Telemetry;
 using Microsoft.Build.Internal;
+using Microsoft.Build.Logging.FancyLogger;
 
 #nullable disable
 
@@ -3221,10 +3222,10 @@ out bool enableProfiler
             distributedLoggerRecords = ProcessDistributedLoggerSwitch(distributedLoggerSwitchParameters, verbosity);
 
             // Choose default console logger
-            // TODO: Add conditions for terminals that do not support ANSI
             if(
                 shouldUseFancyLogger &&
-                !Console.IsOutputRedirected // Avoid using the FancyLogger when output is redirected to a file
+                !Console.IsOutputRedirected && // Avoid using the FancyLogger when output is redirected to a file
+                Environment.GetEnvironmentVariable("TERM") != "dumb" // TODO: Check for better ways of figuring out terminals' capabilities
             )
             {
                 ProcessFancyLogger(noConsoleLogger, loggers);
@@ -3413,7 +3414,7 @@ List<ILogger> loggers
             // Check for flags and env variables
             if (true && !noConsoleLogger)
             {
-                FancyLogger.FancyLogger l = new FancyLogger.FancyLogger();
+                FancyLogger l = new FancyLogger();
                 loggers.Add(l);
             }
         }
