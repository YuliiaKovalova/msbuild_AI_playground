diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt
index 41c66d63cde..04778898b3c 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Linux.verified.txt
@@ -1,8 +1,9 @@
 ï»¿]9;4;3;\  project [33;1msucceeded with warnings[m (0.2s)
-    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: A 
-       Multi 
-       Line 
-       Warning!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: 
+      A
+      Multi
+      Line
+      Warning!
 [?25l[1F
 [?25h
 Build [33;1msucceeded with warnings[m in 5.0s
diff --git a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Windows.verified.txt b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Windows.verified.txt
index 41c66d63cde..04778898b3c 100644
--- a/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Windows.verified.txt
+++ b/src/MSBuild.UnitTests/Snapshots/TerminalLogger_Tests.PrintBuildSummary_SucceededWithWarnings.Windows.verified.txt
@@ -1,8 +1,9 @@
 ï»¿]9;4;3;\  project [33;1msucceeded with warnings[m (0.2s)
-    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: A 
-       Multi 
-       Line 
-       Warning!
+    directory/[1mfile[m(1,2,3,4): [33;1mwarning[m [33;1mAA0000[m: 
+      A
+      Multi
+      Line
+      Warning!
 [?25l[1F
 [?25h
 Build [33;1msucceeded with warnings[m in 5.0s
diff --git a/src/MSBuild.UnitTests/TerminalLogger_Tests.cs b/src/MSBuild.UnitTests/TerminalLogger_Tests.cs
index 521fa9e911f..a1c6889502a 100644
--- a/src/MSBuild.UnitTests/TerminalLogger_Tests.cs
+++ b/src/MSBuild.UnitTests/TerminalLogger_Tests.cs
@@ -99,7 +99,6 @@ public void Dispose()
         {
             _terminallogger.Shutdown();
             Thread.CurrentThread.CurrentCulture = _originalCulture;
-
         }
 
         #endregion
@@ -227,7 +226,7 @@ public Task PrintBuildSummary_SucceededWithWarnings()
         {
             InvokeLoggerCallbacksForSimpleProject(succeeded: true, () =>
             {
-                WarningRaised?.Invoke(_eventSender, MakeWarningEventArgs("A \n Multi \r\n Line \n Warning!"));
+                WarningRaised?.Invoke(_eventSender, MakeWarningEventArgs("A\nMulti\r\nLine\nWarning!"));
             });
 
             return Verify(_outputWriter.ToString(), _settings).UniqueForOSPlatform();
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 0e4068c5672..07ff18979e0 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -550,21 +550,7 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                     {
                         foreach (BuildMessage buildMessage in project.BuildMessages)
                         {
-                            if (buildMessage.Message.IndexOf('\n') == -1) // Check for multi-line message
-                            {
-                                Terminal.WriteLine($"{Indentation}{Indentation}{buildMessage.Message}");
-                            }
-                            else
-                            {
-                                string[] lines = buildMessage.Message.Split(newLineStrings, StringSplitOptions.None);
-
-                                Terminal.WriteLine($"{Indentation}{Indentation}{lines[0]}");
-
-                                for (int i = 1; i < lines.Length; i++)
-                                {
-                                    Terminal.WriteLine($"{Indentation}{Indentation}{Indentation}{lines[i]}");
-                                }
-                            }
+                            Terminal.WriteLine($"{Indentation}{Indentation}{buildMessage.Message}");
                         }
                     }
 
@@ -962,6 +948,7 @@ internal static string FormatEventMessage(
             int columnNumber,
             int endColumnNumber)
     {
+        message ??= string.Empty;
         using SpanBasedStringBuilder builder = new(128);
 
         if (string.IsNullOrEmpty(file))
@@ -1008,7 +995,22 @@ internal static string FormatEventMessage(
             builder.Append(" ");
         }
 
-        builder.Append($"{category} {code}: {message}");
+        builder.Append($"{category} {code}: ");
+
+        // render multi-line message in a special way
+        if (message.IndexOf('\n') >= 0)
+        {
+            string[] lines = message.Split(newLineStrings, StringSplitOptions.None);
+
+            for (int i = 0; i < lines.Length; i++)
+            {
+                builder.Append($"{Environment.NewLine}{Indentation}{Indentation}{Indentation}{lines[i]}");
+            }
+        }
+        else
+        {
+            builder.Append(message);
+        }
 
         return builder.ToString();
     }
