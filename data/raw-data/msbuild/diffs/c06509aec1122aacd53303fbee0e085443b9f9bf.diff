diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index 9632d9491fb..4a800918f77 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -859,8 +859,6 @@ public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(Except
             }
             finally
             {
-                buildSession.ShouldNotBeNull();
-
                 // These exceptions prevent the creation of a plugin so there's no plugin to shutdown.
                 var exceptionsThatPreventEndBuildFromThrowing = ExceptionLocations.Constructor |
                                                                 ExceptionLocations.BeginBuildAsync;
@@ -868,11 +866,11 @@ public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(Except
                 if ((exceptionLocations & exceptionsThatPreventEndBuildFromThrowing) != 0 ||
                     !exceptionLocations.HasFlag(ExceptionLocations.EndBuildAsync))
                 {
-                    Should.NotThrow(() => buildSession.Dispose());
+                    Should.NotThrow(() => buildSession!.Dispose());
                 }
                 else if (exceptionLocations.HasFlag(ExceptionLocations.EndBuildAsync))
                 {
-                    var e = Should.Throw<Exception>(() => buildSession.Dispose());
+                    var e = Should.Throw<Exception>(() => buildSession!.Dispose());
                     e.Message.ShouldContain("Cache plugin exception from EndBuildAsync");
                 }
                 else
@@ -881,6 +879,8 @@ public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(Except
                 }
             }
 
+            logger.BuildFinishedEvents.First().Succeeded.ShouldBeFalse();
+
             // Plugin query must happen after plugin init. So if plugin init fails, then the plugin should not get queried.
             var exceptionsThatShouldPreventCacheQueryAndEndBuildAsync = ExceptionLocations.Constructor | ExceptionLocations.BeginBuildAsync;
 
@@ -897,8 +897,6 @@ public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(Except
 
             // TODO: this ain't right now is it?
             logger.FullLog.ShouldNotContain("Cache plugin exception");
-
-            // TODO: assert Build Failed event
         }
 
         [Theory]
@@ -956,10 +954,10 @@ public void EngineShouldHandleExceptionsFromCachePluginViaGraphBuild(ExceptionLo
             {
                 // Since all plugin exceptions during a graph build end up in the GraphBuildResult, they should not get rethrown by BM.EndBuild
                 Should.NotThrow(() => buildSession.Dispose());
-
-                // TODO: assert Build Failed event
             }
 
+            logger.BuildFinishedEvents.First().Succeeded.ShouldBeFalse();
+
             var exceptionsThatShouldPreventCacheQueryAndEndBuildAsync = ExceptionLocations.Constructor | ExceptionLocations.BeginBuildAsync;
 
             if ((exceptionsThatShouldPreventCacheQueryAndEndBuildAsync & exceptionLocations) != 0)
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 5951f579dec..ff1c04acaf7 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -748,32 +748,33 @@ public BuildResult BuildRequest(BuildRequestData requestData)
         /// <exception cref="InvalidOperationException">Thrown if there is no build in progress.</exception>
         public void EndBuild()
         {
-            lock (_syncLock)
-            {
-                ErrorIfState(BuildManagerState.WaitingForBuildToComplete, "WaitingForEndOfBuild");
-                ErrorIfState(BuildManagerState.Idle, "NoBuildInProgress");
-                VerifyStateInternal(BuildManagerState.Building);
+            ILoggingService loggingService = ((IBuildComponentHost)this).LoggingService;
+            var exceptionsThrownInEndBuild = false;
 
-                // If there are any submissions which never started, remove them now.
-                var submissionsToCheck = new List<BuildSubmission>(_buildSubmissions.Values);
-                foreach (BuildSubmission submission in submissionsToCheck)
+            try
+            {
+                lock (_syncLock)
                 {
-                    CheckSubmissionCompletenessAndRemove(submission);
-                }
+                    ErrorIfState(BuildManagerState.WaitingForBuildToComplete, "WaitingForEndOfBuild");
+                    ErrorIfState(BuildManagerState.Idle, "NoBuildInProgress");
+                    VerifyStateInternal(BuildManagerState.Building);
 
-                var graphSubmissionsToCheck = new List<GraphBuildSubmission>(_graphBuildSubmissions.Values);
-                foreach (GraphBuildSubmission submission in graphSubmissionsToCheck)
-                {
-                    CheckSubmissionCompletenessAndRemove(submission);
-                }
+                    // If there are any submissions which never started, remove them now.
+                    var submissionsToCheck = new List<BuildSubmission>(_buildSubmissions.Values);
+                    foreach (BuildSubmission submission in submissionsToCheck)
+                    {
+                        CheckSubmissionCompletenessAndRemove(submission);
+                    }
 
-                _buildManagerState = BuildManagerState.WaitingForBuildToComplete;
-            }
+                    var graphSubmissionsToCheck = new List<GraphBuildSubmission>(_graphBuildSubmissions.Values);
+                    foreach (GraphBuildSubmission submission in graphSubmissionsToCheck)
+                    {
+                        CheckSubmissionCompletenessAndRemove(submission);
+                    }
 
-            ILoggingService loggingService = ((IBuildComponentHost)this).LoggingService;
+                    _buildManagerState = BuildManagerState.WaitingForBuildToComplete;
+                }
 
-            try
-            {
                 _noActiveSubmissionsEvent.WaitOne();
                 ShutdownConnectedNodes(false /* normal termination */);
                 _noNodesActiveEvent.WaitOne();
@@ -798,17 +799,6 @@ public void EndBuild()
 
                 projectCacheShutdown?.Wait();
 
-                if (loggingService != null)
-                {
-                    // Override the build success if the user specified /warnaserror and any errors were logged outside of a build submission.
-                    if (_overallBuildSuccess && loggingService.HasBuildSubmissionLoggedErrors(BuildEventContext.InvalidSubmissionId))
-                    {
-                        _overallBuildSuccess = false;
-                    }
-
-                    loggingService.LogBuildFinished(_overallBuildSuccess);
-                }
-
 #if DEBUG
                 if (_projectStartedEvents.Count != 0)
                 {
@@ -839,14 +829,33 @@ public void EndBuild()
                     _resultsCache.ClearResults();
                 }
             }
-            catch (AggregateException ae) when (ae.InnerExceptions.Count == 1)
+            catch (Exception e)
             {
-                throw ae.InnerExceptions.First();
+                exceptionsThrownInEndBuild = true;
+
+                if (e is AggregateException ae && ae.InnerExceptions.Count == 1)
+                {
+                    e = ae.InnerExceptions.First();
+                }
+
+                throw e;
             }
             finally
             {
                 try
                 {
+                    if (loggingService != null)
+                    {
+                        // Override the build success if the user specified /warnaserror and any errors were logged outside of a build submission.
+                        if (exceptionsThrownInEndBuild ||
+                            _overallBuildSuccess && loggingService.HasBuildSubmissionLoggedErrors(BuildEventContext.InvalidSubmissionId))
+                        {
+                            _overallBuildSuccess = false;
+                        }
+
+                        loggingService.LogBuildFinished(_overallBuildSuccess);
+                    }
+
                     ShutdownLoggingService(loggingService);
                 }
                 finally
