diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index df945ce4a04..a4d816c5d02 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -588,7 +588,7 @@ private unsafe static int GetLogicalCoreCountOnWindows()
     /// Use only when calling GetFileInformationByHandleEx.
     /// </summary>
     [StructLayout(LayoutKind.Sequential)]
-    internal class FileAttributeTagInfo
+    internal struct FileAttributeTagInfo
     {
         internal int fileAttributes;
         internal int reparseTag;
@@ -1681,27 +1681,12 @@ private static extern bool GetFileInformationByHandleEx(
         int dwBufferSize);
 
     [SupportedOSPlatform("windows")]
-    static bool GetFileAttributeTagInfoByHandle(SafeFileHandle fileHandle, out FileAttributeTagInfo fileAttributeTagInfo)
+    static unsafe bool GetFileAttributeTagInfoByHandle(SafeFileHandle fileHandle, out FileAttributeTagInfo fileAttributeTagInfo)
     {
-        int typeSize = Marshal.SizeOf(typeof(FileAttributeTagInfo));
-        IntPtr ptr = Marshal.AllocHGlobal(typeSize);
-        try
-        {
-            bool ret = GetFileInformationByHandleEx(fileHandle, FileInfoByHandleClass.FileAttributeTagInfo, ptr, typeSize);
-            if (ret)
-            {
-                fileAttributeTagInfo = (FileAttributeTagInfo)Marshal.PtrToStructure(ptr, typeof(FileAttributeTagInfo));
-            }
-            else
-            {
-                fileAttributeTagInfo = new FileAttributeTagInfo();
-            }
-
-            return ret;
-        }
-        finally
+        fileAttributeTagInfo = new FileAttributeTagInfo();
+        fixed (FileAttributeTagInfo* ptr = &fileAttributeTagInfo)
         {
-            Marshal.FreeHGlobal(ptr);
+            return GetFileInformationByHandleEx(fileHandle, FileInfoByHandleClass.FileAttributeTagInfo, (IntPtr)ptr, sizeof(FileAttributeTagInfo));
         }
     }
         
