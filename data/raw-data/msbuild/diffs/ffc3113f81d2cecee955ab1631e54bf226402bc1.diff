diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 5df8c74f964..1acc641650b 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -134,71 +134,33 @@ public void Write(BuildEventArgs e)
 
         private void WriteCore(BuildEventArgs e)
         {
-            // the cases are ordered by most used first for performance
-            if (e is BuildMessageEventArgs buildMessage)
-            {
-                Write(buildMessage);
-            }
-            else if (e is TaskStartedEventArgs taskStarted)
-            {
-                Write(taskStarted);
-            }
-            else if (e is TaskFinishedEventArgs taskFinished)
-            {
-                Write(taskFinished);
-            }
-            else if (e is TargetStartedEventArgs targetStarted)
-            {
-                Write(targetStarted);
-            }
-            else if (e is TargetFinishedEventArgs targetFinished)
-            {
-                Write(targetFinished);
-            }
-            else if (e is BuildErrorEventArgs buildError)
-            {
-                Write(buildError);
-            }
-            else if (e is BuildWarningEventArgs buildWarning)
-            {
-                Write(buildWarning);
-            }
-            else if (e is ProjectStartedEventArgs projectStarted)
-            {
-                Write(projectStarted);
-            }
-            else if (e is ProjectFinishedEventArgs projectFinished)
-            {
-                Write(projectFinished);
-            }
-            else if (e is BuildStartedEventArgs buildStarted)
-            {
-                Write(buildStarted);
-            }
-            else if (e is BuildFinishedEventArgs buildFinished)
-            {
-                Write(buildFinished);
-            }
-            else if (e is ProjectEvaluationStartedEventArgs projectEvaluationStarted)
-            {
-                Write(projectEvaluationStarted);
-            }
-            else if (e is ProjectEvaluationFinishedEventArgs projectEvaluationFinished)
-            {
-                Write(projectEvaluationFinished);
-            }
-            else
-            {
-                // convert all unrecognized objects to message
-                // and just preserve the message
-                var buildMessageEventArgs = new BuildMessageEventArgs(
-                    e.Message,
-                    e.HelpKeyword,
-                    e.SenderName,
-                    MessageImportance.Normal,
-                    e.Timestamp);
-                buildMessageEventArgs.BuildEventContext = e.BuildEventContext ?? BuildEventContext.Invalid;
-                Write(buildMessageEventArgs);
+            switch (e)
+            {
+                case BuildMessageEventArgs buildMessage: Write(buildMessage); break;
+                case TaskStartedEventArgs taskStarted: Write(taskStarted); break;
+                case TaskFinishedEventArgs taskFinished: Write(taskFinished); break;
+                case TargetStartedEventArgs targetStarted: Write(targetStarted); break;
+                case TargetFinishedEventArgs targetFinished: Write(targetFinished); break;
+                case BuildErrorEventArgs buildError: Write(buildError); break;
+                case BuildWarningEventArgs buildWarning: Write(buildWarning); break;
+                case ProjectStartedEventArgs projectStarted: Write(projectStarted); break;
+                case ProjectFinishedEventArgs projectFinished: Write(projectFinished); break;
+                case BuildStartedEventArgs buildStarted: Write(buildStarted); break;
+                case BuildFinishedEventArgs buildFinished: Write(buildFinished); break;
+                case ProjectEvaluationStartedEventArgs projectEvaluationStarted: Write(projectEvaluationStarted); break;
+                case ProjectEvaluationFinishedEventArgs projectEvaluationFinished: Write(projectEvaluationFinished); break;
+                default:
+                    // convert all unrecognized objects to message
+                    // and just preserve the message
+                    var buildMessageEventArgs = new BuildMessageEventArgs(
+                        e.Message,
+                        e.HelpKeyword,
+                        e.SenderName,
+                        MessageImportance.Normal,
+                        e.Timestamp);
+                    buildMessageEventArgs.BuildEventContext = e.BuildEventContext ?? BuildEventContext.Invalid;
+                    Write(buildMessageEventArgs);
+                    break;
             }
         }
 
diff --git a/src/Framework/TaskItemData.cs b/src/Framework/TaskItemData.cs
index 81e6b547746..8441badb819 100644
--- a/src/Framework/TaskItemData.cs
+++ b/src/Framework/TaskItemData.cs
@@ -8,7 +8,7 @@
 namespace Microsoft.Build.Framework
 {
     /// <summary>
-    /// Lightweight specialized implementation of ITaskItem only used for deserializing items.
+    /// Lightweight specialized implementation of <see cref="ITaskItem"/> only used for deserializing items.
     /// The goal is to minimize overhead when representing deserialized items.
     /// Used by node packet translator and binary logger.
     /// </summary>
diff --git a/src/Framework/TaskParameterEventArgs.cs b/src/Framework/TaskParameterEventArgs.cs
index 232f39f7b67..f53363237ce 100644
--- a/src/Framework/TaskParameterEventArgs.cs
+++ b/src/Framework/TaskParameterEventArgs.cs
@@ -56,8 +56,10 @@ DateTime eventTimestamp
         /// which is an implementations assembly. This seems like the easiest way to inject the
         /// implementation for realizing the Message.
         /// </summary>
-        /// <remarks>Note that the current implementation never runs and is provided merely
-        /// as a safeguard in case MessageGetter isn't set for some reason.</remarks>
+        /// <remarks>
+        /// Note that the current implementation never runs and is provided merely
+        /// as a safeguard in case MessageGetter isn't set for some reason.
+        /// </remarks>
         internal static Func<TaskParameterEventArgs, string> MessageGetter = args =>
         {
             var sb = new StringBuilder();
