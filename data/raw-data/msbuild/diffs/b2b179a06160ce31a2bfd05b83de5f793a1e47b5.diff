diff --git a/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs b/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
index 52360d65ff4..f7c7b5445f2 100644
--- a/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
+++ b/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
@@ -58,15 +58,15 @@ private void ProcessEnvironmentVariableReadAction(BuildCheckDataContext<Environm
         EnvironmentVariableIdentityKey identityKey = new(context.Data.EvaluatedEnvironmentVariable.EnvVarValue, context.Data.EvaluatedEnvironmentVariable.Location);
         if (!_environmentVariablesCache.Contains(identityKey))
         {
-            string buildCheckResultMessageArgs = _isVerboseEnvVarOutput ? $"'{context.Data.EvaluatedEnvironmentVariable.EnvVarValue}' with value: '{context.Data.EvaluatedEnvironmentVariable.EnvVarValue}'" : $"'{context.Data.EvaluatedEnvironmentVariable.EnvVarValue}'";
+            string buildCheckResultMessageArgs = _isVerboseEnvVarOutput ? $"'{context.Data.EvaluatedEnvironmentVariable.EnvVarKey}' with value: '{context.Data.EvaluatedEnvironmentVariable.EnvVarValue}'" : $"'{context.Data.EvaluatedEnvironmentVariable.EnvVarKey}'";
 
             // Scope information is available after evaluation of the project file. If it is not ready, we will report the check later.
-            if (CheckScopeClassifier.IsScopingReady && CheckScopeClassifier.IsActionInObservedScope(
-                _scope,
-                context.Data.EvaluatedEnvironmentVariable.Location.File,
-                context.Data.ProjectFilePath ?? string.Empty))
+            if (CheckScopeClassifier.IsScopingReady && CheckScopeClassifier.IsActionInObservedScope(_scope, context.Data.EvaluatedEnvironmentVariable.Location.File, context.Data.ProjectFilePath ?? string.Empty))
             {
-                context.ReportResult(BuildCheckResult.Create(SupportedRule, context.Data.EvaluatedEnvironmentVariable.Location, buildCheckResultMessageArgs));
+                context.ReportResult(BuildCheckResult.Create(
+                    SupportedRule,
+                    context.Data.EvaluatedEnvironmentVariable.Location,
+                    buildCheckResultMessageArgs));
             }
             else if (_scope != EvaluationCheckScope.ProjectFileOnly)
             {
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index 22bc94b5bca..a33a140bf16 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -91,7 +91,7 @@ internal void ProcessEvaluationFinishedEventArgs(
     /// </summary>
     internal void ProcessEnvironmentVariableReadEventArgs(ICheckContext checkContext, string envVarName, string envVarValue, string file, int line, int column)
     {
-        EnvironmentVariableCheckData checkData = new(file, checkContext.BuildEventContext?.ProjectInstanceId, (envVarName, ElementLocation.Create(file, line, column)));
+        EnvironmentVariableCheckData checkData = new(file, checkContext.BuildEventContext?.ProjectInstanceId, (envVarName, envVarValue, ElementLocation.Create(file, line, column)));
 
         _buildCheckCentralContext.RunEnvironmentVariableActions(checkData, checkContext, ReportResult);
     }
diff --git a/src/Build/BuildCheck/OM/EnvironmentVariableCheckData.cs b/src/Build/BuildCheck/OM/EnvironmentVariableCheckData.cs
index d8c7c957ff0..e3e84d92276 100644
--- a/src/Build/BuildCheck/OM/EnvironmentVariableCheckData.cs
+++ b/src/Build/BuildCheck/OM/EnvironmentVariableCheckData.cs
@@ -13,11 +13,11 @@ public class EnvironmentVariableCheckData : CheckData
     internal EnvironmentVariableCheckData(
         string projectFilePath,
         int? projectConfigurationId,
-        (string EnvVarValue, IMSBuildElementLocation Location) evaluatedEnvironmentVariable)
+        (string EnvVarKey, string EnvVarValue, IMSBuildElementLocation Location) evaluatedEnvironmentVariable)
         : base(projectFilePath, projectConfigurationId) => EvaluatedEnvironmentVariable = evaluatedEnvironmentVariable;
 
     /// <summary>
     /// Gets the evaluated environment variable.
     /// </summary>
-    public (string EnvVarValue, IMSBuildElementLocation Location) EvaluatedEnvironmentVariable { get; }
+    public (string EnvVarKey, string EnvVarValue, IMSBuildElementLocation Location) EvaluatedEnvironmentVariable { get; }
 }
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index ca44e1f0fcd..287b4538b6d 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -255,7 +255,7 @@ public void NoEnvironmentVariableProperty_Test(bool? customConfigEnabled, string
             customConfigData);
 
         string output = RunnerUtilities.ExecBootstrapedMSBuild(
-            $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -check", out bool success, false, _env.Output);
+            $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -check", out bool success, false, _env.Output, timeoutMilliseconds: 12000_000);
 
         foreach (string expectedMessage in expectedMessages)
         {
