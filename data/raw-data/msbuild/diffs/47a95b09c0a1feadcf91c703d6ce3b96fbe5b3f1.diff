diff --git a/src/Framework/BuildEventArgs.cs b/src/Framework/BuildEventArgs.cs
index e7d5868c1d8..014a1ce3111 100644
--- a/src/Framework/BuildEventArgs.cs
+++ b/src/Framework/BuildEventArgs.cs
@@ -200,6 +200,17 @@ internal virtual void WriteToStream(BinaryWriter writer)
             WriteToStreamWithExplicitMessage(writer, RawMessage);
         }
 
+
+        /// <summary>
+        /// Convenience access point for CreateFromStream method to avoid making everything public.
+        /// </summary>
+        /// <param name="reader"></param>
+        /// <param name="version"></param>
+        public void PublicCreateFromStream(BinaryReader reader, int version)
+        {
+            CreateFromStream(reader, version);
+        }
+
         /// <summary>
         /// Deserializes from a stream through a binary reader
         /// </summary>
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index 36e8e9db0df..db098934c20 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -18,6 +18,8 @@
 using Microsoft.Build.Framework.Profiler;
 using System.Collections;
 using System.Linq;
+using System.Diagnostics;
+
 #endif
 
 #if FEATURE_APPDOMAIN
@@ -270,11 +272,12 @@ internal abstract class LogMessagePacketBase : INodePacket
         /// </summary>
         private static readonly int s_defaultPacketVersion = (Environment.Version.Major * 10) + Environment.Version.Minor;
 
+#if TASKHOST
         /// <summary>
         /// Dictionary of methods used to read BuildEventArgs.
         /// </summary>
         private static Dictionary<LoggingEventType, MethodInfo> s_readMethodCache = new Dictionary<LoggingEventType, MethodInfo>();
-
+#endif
         /// <summary>
         /// Dictionary of methods used to write BuildEventArgs.
         /// </summary>
@@ -468,16 +471,18 @@ internal void ReadFromStream(ITranslator translator)
 
             _buildEvent = GetBuildEventArgFromId();
 
+
             // The other side is telling us whether the event knows how to log itself, or whether we're going to have
             // to do it manually
             int packetVersion = s_defaultPacketVersion;
             translator.Translate(ref packetVersion);
-
             bool eventCanSerializeItself = true;
             translator.Translate(ref eventCanSerializeItself);
 
             if (eventCanSerializeItself)
             {
+
+#if TASKHOST
                 MethodInfo methodInfo = null;
                 lock (s_readMethodCache)
                 {
@@ -488,10 +493,15 @@ internal void ReadFromStream(ITranslator translator)
                         s_readMethodCache.Add(_eventType, methodInfo);
                     }
                 }
-
                 ArgsReaderDelegate readerMethod = (ArgsReaderDelegate)CreateDelegateRobust(typeof(ArgsReaderDelegate), _buildEvent, methodInfo);
 
                 readerMethod(translator.Reader, packetVersion);
+
+#else
+                _buildEvent.PublicCreateFromStream(translator.Reader, packetVersion);
+#endif
+
+                
                 if (_eventType == LoggingEventType.TargetFinishedEvent && _targetFinishedTranslator != null)
                 {
                     _targetFinishedTranslator(translator, (TargetFinishedEventArgs)_buildEvent);
