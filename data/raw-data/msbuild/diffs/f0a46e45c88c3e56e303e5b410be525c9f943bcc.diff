diff --git a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
index 2a7f57ece4e..f4d976aa19a 100644
--- a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
@@ -1,6 +1,7 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Diagnostics;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
@@ -33,6 +34,7 @@ internal NodeEndpointOutOfProc(bool enableReuse, bool lowPriority)
         /// </summary>
         protected override Handshake GetHandshake()
         {
+            Debugger.Launch();
             HandshakeOptions handshakeOptions = CommunicationsUtilities.GetHandshakeOptions(
                 taskHost: false,
                 architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(),
diff --git a/src/Build/BackEnd/Components/Communications/NodeLauncher.cs b/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
index ff60a441e23..1a488958366 100644
--- a/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeLauncher.cs
@@ -38,12 +38,12 @@ public void ShutdownComponent()
         public Process Start(string msbuildLocation, string commandLineArgs, int nodeId)
         {
             // Disable MSBuild server for a child process.
-            // In case of starting msbuild server it prevents an infinite recurson. In case of starting msbuild node we also do not want this variable to be set.
+            // In case of starting msbuild server it prevents an infinite recursion. In case of starting msbuild node we also do not want this variable to be set.
             return DisableMSBuildServer(() => StartInternal(msbuildLocation, commandLineArgs));
         }
 
         /// <summary>
-        /// Creates a new MSBuild process
+        /// Creates a new MSBuild or dotnet process.
         /// </summary>
         private Process StartInternal(string msbuildLocation, string commandLineArgs)
         {
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 87602148672..cb0f8d4c3e2 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -25,6 +25,8 @@
 using Task = System.Threading.Tasks.Task;
 using Microsoft.Build.Framework;
 using Microsoft.Build.BackEnd.Logging;
+using System.Runtime.InteropServices.ComTypes;
+using Microsoft.Build.Collections;
 
 #nullable disable
 
@@ -44,7 +46,7 @@ internal abstract class NodeProviderOutOfProcBase
         /// <summary>
         /// The number of times to retry creating an out-of-proc node.
         /// </summary>
-        private const int NodeCreationRetries = 10;
+        private const int NodeCreationRetries = 1;
 
         /// <summary>
         /// The amount of time to wait for an out-of-proc node to spool up before we give up.
@@ -183,7 +185,8 @@ protected void ShutdownAllNodes(bool nodeReuse, NodeContextTerminateDelegate ter
         /// <summary>
         /// Finds or creates a child processes which can act as a node.
         /// </summary>
-        protected IList<NodeContext> GetNodes(string msbuildLocation,
+        protected IList<NodeContext> GetNodes(
+            string msbuildExecutableLocation,
             string commandLineArgs,
             int nextNodeId,
             INodePacketFactory factory,
@@ -199,19 +202,19 @@ protected IList<NodeContext> GetNodes(string msbuildLocation,
             }
 #endif
 
-            if (String.IsNullOrEmpty(msbuildLocation))
+            if (String.IsNullOrEmpty(msbuildExecutableLocation))
             {
-                msbuildLocation = _componentHost.BuildParameters.NodeExeLocation;
+                msbuildExecutableLocation = _componentHost.BuildParameters.NodeExeLocation;
             }
 
-            if (String.IsNullOrEmpty(msbuildLocation))
+            if (String.IsNullOrEmpty(msbuildExecutableLocation))
             {
                 string msbuildExeName = Environment.GetEnvironmentVariable("MSBUILD_EXE_NAME");
 
                 if (!String.IsNullOrEmpty(msbuildExeName))
                 {
                     // we assume that MSBUILD_EXE_NAME is, in fact, just the name.
-                    msbuildLocation = Path.Combine(msbuildExeName, ".exe");
+                    msbuildExecutableLocation = Path.Combine(msbuildExeName, ".exe");
                 }
             }
 
@@ -226,7 +229,7 @@ protected IList<NodeContext> GetNodes(string msbuildLocation,
             if (_componentHost.BuildParameters.EnableNodeReuse)
             {
                 IList<Process> possibleRunningNodesList;
-                (expectedProcessName, possibleRunningNodesList) = GetPossibleRunningNodes(msbuildLocation);
+                (expectedProcessName, possibleRunningNodesList) = GetPossibleRunningNodes(msbuildExecutableLocation);
                 possibleRunningNodes = new ConcurrentQueue<Process>(possibleRunningNodesList);
 
                 if (possibleRunningNodesList.Count > 0)
@@ -317,13 +320,13 @@ bool StartNewNode(int nodeId)
                     // It's also a waste of time when we attempt several times to launch multiple MSBuildTaskHost.exe (CLR2 TaskHost)
                     // nodes because we should never be able to connect in this case.
                     string taskHostNameForClr2TaskHost = Path.GetFileNameWithoutExtension(NodeProviderOutOfProcTaskHost.TaskHostNameForClr2TaskHost);
-                    if (Path.GetFileNameWithoutExtension(msbuildLocation).Equals(taskHostNameForClr2TaskHost, StringComparison.OrdinalIgnoreCase))
+                    if (Path.GetFileNameWithoutExtension(msbuildExecutableLocation).Equals(taskHostNameForClr2TaskHost, StringComparison.OrdinalIgnoreCase))
                     {
                         if (FrameworkLocationHelper.GetPathToDotNetFrameworkV35(DotNetFrameworkArchitecture.Current) == null)
                         {
                             CommunicationsUtilities.Trace(
                                 "Failed to launch node from {0}. The required .NET Framework v3.5 is not installed or enabled. CommandLine: {1}",
-                                msbuildLocation,
+                                msbuildExecutableLocation,
                                 commandLineArgs);
 
                             string nodeFailedToLaunchError = ResourceUtilities.GetResourceString("TaskHostNodeFailedToLaunchErrorCodeNet35NotInstalled");
@@ -333,7 +336,7 @@ bool StartNewNode(int nodeId)
 #endif
                     // Create the node process
                     INodeLauncher nodeLauncher = (INodeLauncher)_componentHost.GetComponent(BuildComponentType.NodeLauncher);
-                    Process msbuildProcess = nodeLauncher.Start(msbuildLocation, commandLineArgs, nodeId);
+                    Process msbuildProcess = nodeLauncher.Start(msbuildExecutableLocation, commandLineArgs, nodeId);
                     _processesToIgnore.TryAdd(GetProcessesToIgnoreKey(hostHandshake, msbuildProcess.Id), default);
 
                     // Note, when running under IMAGEFILEEXECUTIONOPTIONS registry key to debug, the process ID
@@ -506,6 +509,8 @@ internal static void ConnectToPipeStream(NamedPipeClientStream nodeStream, strin
             for (int i = 0; i < handshakeComponents.Length; i++)
             {
                 CommunicationsUtilities.Trace("Writing handshake part {0} ({1}) to pipe {2}", i, handshakeComponents[i], pipeName);
+                CommunicationsUtilities.Trace($"Pipe state: {nodeStream.IsConnected}, Handle valid: {!nodeStream.SafePipeHandle.IsClosed}");
+                CommunicationsUtilities.Trace($"Can write: {nodeStream.CanWrite}");
                 nodeStream.WriteIntForHandshake(handshakeComponents[i]);
             }
 
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
index 1d0f0f525d3..1a6f2d93609 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcTaskHost.cs
@@ -42,6 +42,11 @@ internal class NodeProviderOutOfProcTaskHost : NodeProviderOutOfProcBase, INodeP
         /// </summary>
         private static string s_baseTaskHostPathArm64;
 
+        /// <summary>
+        /// Store the NET path for MSBuildTaskHost so that we don't have to keep recalculating it.
+        /// </summary>
+        private static string s_baseTaskHostPathNet;
+
         /// <summary>
         /// Store the path for the 32-bit MSBuildTaskHost so that we don't have to keep re-calculating it.
         /// </summary>
@@ -385,12 +390,9 @@ internal static string GetTaskHostNameFromHostContext(HandshakeOptions hostConte
                 {
                     s_msbuildName = Environment.GetEnvironmentVariable("MSBUILD_EXE_NAME");
 
-                    if (s_msbuildName == null)
-                    {
-                        s_msbuildName = (hostContext & HandshakeOptions.NET) == HandshakeOptions.NET
-                            ? "MSBuild.dll"
+                    s_msbuildName ??= (hostContext & HandshakeOptions.NET) == HandshakeOptions.NET
+                            ? "dotnet.exe"
                             : "MSBuild.exe";
-                    }
                 }
 
                 return s_msbuildName;
@@ -399,26 +401,28 @@ internal static string GetTaskHostNameFromHostContext(HandshakeOptions hostConte
 
         /// <summary>
         /// Given a TaskHostContext, return the appropriate location of the
-        /// executable (MSBuild or MSBuildTaskHost) that we wish to use, or null
-        /// if that location cannot be resolved.
+        /// executable (MSBuild, MSBuildTaskHost or dotnet) and path to MSBuild.dll if we want to use a custom one.
+        /// null is returned if executable cannot be resolved.
         /// </summary>
-        internal static string GetMSBuildLocationFromHostContext(HandshakeOptions hostContext)
+        internal static (string msbuildExcutable, string msbuildAssemblyPath) GetHostExecutionInfoFromContext(HandshakeOptions hostContext)
         {
             string toolName = GetTaskHostNameFromHostContext(hostContext);
             string toolPath = null;
+            string msbuildAssemblyPath = null;
 
             s_baseTaskHostPath = BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32;
             s_baseTaskHostPath64 = BuildEnvironmentHelper.Instance.MSBuildToolsDirectory64;
             s_baseTaskHostPathArm64 = BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryArm64;
+            s_baseTaskHostPathNet = BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryNET;
 
-            ErrorUtilities.VerifyThrowInternalErrorUnreachable((hostContext & HandshakeOptions.TaskHost) == HandshakeOptions.TaskHost);
+            ErrorUtilities.VerifyThrowInternalErrorUnreachable(IsHandshakeOptionEnabled(HandshakeOptions.TaskHost));
 
-            if ((hostContext & HandshakeOptions.Arm64) == HandshakeOptions.Arm64 && (hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)
+            if (IsHandshakeOptionEnabled(HandshakeOptions.Arm64) && IsHandshakeOptionEnabled(HandshakeOptions.CLR2))
             {
                 // Unsupported, throw.
                 ErrorUtilities.ThrowInternalError("ARM64 CLR2 task hosts are not supported.");
             }
-            else if ((hostContext & HandshakeOptions.X64) == HandshakeOptions.X64 && (hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)
+            else if (IsHandshakeOptionEnabled(HandshakeOptions.X64) && IsHandshakeOptionEnabled(HandshakeOptions.CLR2))
             {
                 if (s_pathToX64Clr2 == null)
                 {
@@ -432,7 +436,7 @@ internal static string GetMSBuildLocationFromHostContext(HandshakeOptions hostCo
 
                 toolPath = s_pathToX64Clr2;
             }
-            else if ((hostContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2)
+            else if (IsHandshakeOptionEnabled(HandshakeOptions.CLR2))
             {
                 if (s_pathToX32Clr2 == null)
                 {
@@ -445,40 +449,43 @@ internal static string GetMSBuildLocationFromHostContext(HandshakeOptions hostCo
 
                 toolPath = s_pathToX32Clr2;
             }
-            else if ((hostContext & HandshakeOptions.X64) == HandshakeOptions.X64)
+            else if (IsHandshakeOptionEnabled(HandshakeOptions.X64))
             {
-                if (s_pathToX64Clr4 == null)
-                {
-                    s_pathToX64Clr4 = s_baseTaskHostPath64;
-                }
+                s_pathToX64Clr4 ??= s_baseTaskHostPath64;
 
                 toolPath = s_pathToX64Clr4;
             }
-            else if ((hostContext & HandshakeOptions.Arm64) == HandshakeOptions.Arm64)
+            else if (IsHandshakeOptionEnabled(HandshakeOptions.Arm64))
             {
-                if (s_pathToArm64Clr4 == null)
-                {
-                    s_pathToArm64Clr4 = s_baseTaskHostPathArm64;
-                }
+                s_pathToArm64Clr4 ??= s_baseTaskHostPathArm64;
 
                 toolPath = s_pathToArm64Clr4;
             }
-            else
+            else if (IsHandshakeOptionEnabled(HandshakeOptions.NET))
             {
-                if (s_pathToX32Clr4 == null)
+                // if we want some flexibility in the future, we can add a new environment variable for this.
+                var envTaskHostPathNet = Environment.GetEnvironmentVariable("DOTNET_HOST_PATH");
+                if (envTaskHostPathNet != null && FileUtilities.FileExistsNoThrow(Path.Combine(envTaskHostPathNet, toolName)))
                 {
-                    s_pathToX32Clr4 = s_baseTaskHostPath;
+                    s_baseTaskHostPathNet = envTaskHostPathNet;
                 }
 
-                toolPath = s_pathToX32Clr4;
+                // TODO Get path to msbuild.dll
+                msbuildAssemblyPath = @"C:\msbuild\msbuild_yk\msbuild\artifacts\bin\bootstrap\core\sdk\9.0.200-preview.0.24523.19\MSBuild.dll";
+                toolPath = s_baseTaskHostPathNet;
             }
-
-            if (toolName != null && toolPath != null)
+            else
             {
-                return Path.Combine(toolPath, toolName);
+                s_pathToX32Clr4 ??= s_baseTaskHostPath;
+
+                toolPath = s_pathToX32Clr4;
             }
 
-            return null;
+            return toolName != null && toolPath != null
+                ? (msbuildExcutable: Path.Combine(toolPath, toolName), msbuildAssemblyPath)
+                : (msbuildExcutable: null, null);
+
+            bool IsHandshakeOptionEnabled(HandshakeOptions option) => (hostContext & option) == option;
         }
 
         /// <summary>
@@ -527,6 +534,7 @@ internal void DisconnectFromHost(HandshakeOptions hostContext)
         /// </summary>
         internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factory, INodePacketHandler handler, TaskHostConfiguration configuration)
         {
+            //Debugger.Launch();
             ErrorUtilities.VerifyThrowArgumentNull(factory);
             ErrorUtilities.VerifyThrow(!_nodeIdToPacketFactory.ContainsKey((int)hostContext), "We should not already have a factory for this context!  Did we forget to call DisconnectFromHost somewhere?");
 
@@ -538,22 +546,34 @@ internal bool CreateNode(HandshakeOptions hostContext, INodePacketFactory factor
 
             // Start the new process.  We pass in a node mode with a node number of 2, to indicate that we
             // want to start up an MSBuild task host node.
-            string commandLineArgs = $" /nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} /low:{ComponentHost.BuildParameters.LowPriority} ";
-
-            string msbuildLocation = GetMSBuildLocationFromHostContext(hostContext);
+            // Start the new process. We pass in a node mode with a node number of 2, to indicate that we
+            // want to start up an MSBuild task host node.
+            (string msbuildExecutable, string msbuildAssemblyLocation) = GetHostExecutionInfoFromContext(hostContext);
 
             // we couldn't even figure out the location we're trying to launch ... just go ahead and fail.
-            if (msbuildLocation == null)
+            if (msbuildExecutable == null)
             {
                 return false;
             }
 
-            CommunicationsUtilities.Trace("For a host context of {0}, spawning executable from {1}.", hostContext.ToString(), msbuildLocation ?? "MSBuild.exe");
+            string commandLineArgs;
+            if (msbuildAssemblyLocation != null)
+            {
+                // For dotnet.exe, the dll path must come first, then -- to separate application arguments
+                commandLineArgs = $"\"{msbuildAssemblyLocation}\" -- /nodemode:2 ";
+            }
+            else
+            {
+                // Original format for non-dotnet executables
+                commandLineArgs = $"/nologo /nodemode:2 /nodereuse:{ComponentHost.BuildParameters.EnableNodeReuse} /low:{ComponentHost.BuildParameters.LowPriority}";
+            }
+
+            CommunicationsUtilities.Trace("For a host context of {0}, spawning executable from {1}.", hostContext.ToString(), msbuildExecutable ?? "MSBuild.exe");
 
             // There is always one task host per host context so we always create just 1 one task host node here.
             int nodeId = (int)hostContext;
             IList<NodeContext> nodeContexts = GetNodes(
-                msbuildLocation,
+                msbuildExecutable,
                 commandLineArgs,
                 nodeId,
                 this,
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 032f95a251c..a09e4aab023 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -510,7 +510,7 @@ internal static bool DoesTaskHostExist(string runtime, string architecture)
             parameters.Add(XMakeAttributes.architecture, architecture);
 
             HandshakeOptions desiredContext = CommunicationsUtilities.GetHandshakeOptions(taskHost: true, taskHostParameters: parameters);
-            string taskHostLocation = NodeProviderOutOfProcTaskHost.GetMSBuildLocationFromHostContext(desiredContext);
+            string taskHostLocation = NodeProviderOutOfProcTaskHost.GetHostExecutionInfoFromContext(desiredContext).msbuildExcutable;
 
             if (taskHostLocation != null && FileUtilities.FileExistsNoThrow(taskHostLocation))
             {
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 784b67b200c..a988ddf3854 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -569,7 +569,7 @@ private void HandleLoggedMessage(LogMessagePacket logMessagePacket)
         /// </summary>
         private void LogErrorUnableToCreateTaskHost(HandshakeOptions requiredContext, string runtime, string architecture, NodeFailedToLaunchException e)
         {
-            string msbuildLocation = NodeProviderOutOfProcTaskHost.GetMSBuildLocationFromHostContext(requiredContext) ??
+            string msbuildLocation = NodeProviderOutOfProcTaskHost.GetHostExecutionInfoFromContext(requiredContext).msbuildExcutable ??
                 // We don't know the path -- probably we're trying to get a 64-bit assembly on a
                 // 32-bit machine.  At least give them the exe name to look for, though ...
                 ((requiredContext & HandshakeOptions.CLR2) == HandshakeOptions.CLR2 ? "MSBuildTaskHost.exe" : "MSBuild.exe");
diff --git a/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs b/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
index a2f7e5695fc..1f30a7dcd34 100644
--- a/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
+++ b/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
@@ -1,6 +1,7 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Diagnostics;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Internal;
 
@@ -30,6 +31,7 @@ internal NodeEndpointOutOfProcTaskHost()
         /// </summary>
         protected override Handshake GetHandshake()
         {
+            Debugger.Launch();
             return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: true));
         }
     }
diff --git a/src/Shared/BuildEnvironmentHelper.cs b/src/Shared/BuildEnvironmentHelper.cs
index 2f3dce9f66b..99b4813f654 100644
--- a/src/Shared/BuildEnvironmentHelper.cs
+++ b/src/Shared/BuildEnvironmentHelper.cs
@@ -610,6 +610,7 @@ NativeMethodsShared.ProcessorArchitectures.X64 or NativeMethodsShared.ProcessorA
 
                 MSBuildToolsDirectory32 = MSBuildToolsDirectoryRoot;
                 MSBuildToolsDirectory64 = existsCheck(potentialAmd64FromX86) ? Path.Combine(MSBuildToolsDirectoryRoot, "amd64") : CurrentMSBuildToolsDirectory;
+                MSBuildToolsDirectoryNET = @"C:\msbuild\msbuild_yk\msbuild\artifacts\bin\bootstrap\core";
 #if RUNTIME_TYPE_NETCORE
                 // Fall back to "current" for any architecture since .NET SDK doesn't
                 // support cross-arch task invocations.
@@ -662,6 +663,11 @@ NativeMethodsShared.ProcessorArchitectures.X64 or NativeMethodsShared.ProcessorA
         /// </summary>
         internal string MSBuildToolsDirectoryArm64 { get; }
 
+        /// <summary>
+        /// Path to the NET tools directory.
+        /// </summary>
+        internal string MSBuildToolsDirectoryNET { get; }
+
         /// <summary>
         /// Path to the Sdks folder for this MSBuild instance.
         /// </summary>
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index d9d361df7ba..05c25c64812 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -100,7 +100,9 @@ protected internal Handshake(HandshakeOptions nodeType)
 
             string handshakeSalt = Environment.GetEnvironmentVariable("MSBUILDNODEHANDSHAKESALT");
             CommunicationsUtilities.Trace("Handshake salt is " + handshakeSalt);
-            string toolsDirectory = BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryRoot;
+            string toolsDirectory = (nodeType & HandshakeOptions.NET) == HandshakeOptions.NET
+                ? BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryNET
+                : BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryRoot;
             CommunicationsUtilities.Trace("Tools directory root is " + toolsDirectory);
             salt = CommunicationsUtilities.GetHashCode(handshakeSalt + toolsDirectory);
             Version fileVersion = new Version(FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).FileVersion);
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 7e8e8506a8c..99cf24a158b 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -15,6 +15,8 @@
 using Microsoft.Build.Shared;
 #if FEATURE_SECURITY_PERMISSIONS || FEATURE_PIPE_SECURITY
 using System.Security.AccessControl;
+using System.Diagnostics;
+
 
 #endif
 #if FEATURE_PIPE_SECURITY && FEATURE_NAMED_PIPE_SECURITY_CONSTRUCTOR
@@ -346,6 +348,7 @@ private void InitializeAsyncPacketThread()
         /// </summary>
         private void PacketPumpProc()
         {
+            System.Diagnostics.Debugger.Launch();
             NamedPipeServerStream localPipeServer = _pipeServer;
 
             AutoResetEvent localPacketAvailable = _packetAvailable;
