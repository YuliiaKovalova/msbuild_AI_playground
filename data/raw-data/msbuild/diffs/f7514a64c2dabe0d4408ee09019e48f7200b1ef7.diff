diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs
index 14e2a4cfd41..d94abbd20fa 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs
@@ -82,17 +82,17 @@ public BuildManager_Logging_Tests(ITestOutputHelper output)
         [InlineData("1", true)]
         // [InlineData("0", true)] <-- explicitly opting out on core will lead to node crash (as documented)
         [InlineData(null, true)]
-        public void Build_WithCustomBuildArgs_NetCore(string envVariableValue, bool isWarningExpected)
-            => TestCustomEventWarning<BuildErrorEventArgs>(envVariableValue, isWarningExpected);
+        public void Build_WithCustomBuildArgs_NetCore(string envVariableValue, bool isErrorExpected)
+            => TestCustomEvent<BuildErrorEventArgs>(envVariableValue, isErrorExpected);
 
         [WindowsFullFrameworkOnlyTheory]
         [InlineData("1", true)]
         [InlineData("0", false)]
-        [InlineData(null, false)]
-        public void Build_WithCustomBuildArgs_Framework(string envVariableValue, bool isWarningExpected) =>
-            TestCustomEventWarning<BuildWarningEventArgs>(envVariableValue, isWarningExpected);
+        [InlineData(null, true)]
+        public void Build_WithCustomBuildArgs_Framework(string envVariableValue, bool isErrorExpected) =>
+            TestCustomEvent<BuildErrorEventArgs>(envVariableValue, isErrorExpected);
 
-        private void TestCustomEventWarning<T>(string envVariableValue, bool isWarningExpected) where T : LazyFormattedBuildEventArgs
+        private void TestCustomEvent<T>(string envVariableValue, bool isWarningExpected) where T : LazyFormattedBuildEventArgs
         {
             var testFiles = _env.CreateTestProjectWithFiles(string.Empty, new[] { "main", "child1" }, string.Empty);
 
diff --git a/src/Framework/Traits.cs b/src/Framework/Traits.cs
index e053a44600d..90a8e152956 100644
--- a/src/Framework/Traits.cs
+++ b/src/Framework/Traits.cs
@@ -404,8 +404,13 @@ public bool IsBinaryFormatterSerializationAllowed
             {
                 if (!_isBinaryFormatterSerializationAllowed.HasValue)
                 {
+#if !NET35
+
                     if (AppContext.TryGetSwitch("System.Runtime.Serialization.EnableUnsafeBinaryFormatterSerialization",
                             out bool enabled))
+#else
+                    bool enabled;
+#endif
                     {
 #if RUNTIME_TYPE_NETCORE
                         // Unexpected, but not worth to throw, but since maybe in future it will be removed from .NET Core, let's assert here.
@@ -421,9 +426,8 @@ public bool IsBinaryFormatterSerializationAllowed
                 }
 
                 return _isBinaryFormatterSerializationAllowed.Value;
+                }
             }
-        }
-
 
         private static bool? ParseNullableBoolFromEnvironmentVariable(string environmentVariable)
         {
