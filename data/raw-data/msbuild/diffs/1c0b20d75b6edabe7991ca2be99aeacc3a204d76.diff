diff --git a/src/StringTools/InternableString.cs b/src/StringTools/InternableString.cs
index 15508eb6fea..302d50bfd6c 100644
--- a/src/StringTools/InternableString.cs
+++ b/src/StringTools/InternableString.cs
@@ -92,13 +92,13 @@ public bool MoveNext()
         }
 
         /// <summary>
-        /// The span held by this struct, inline to be able to represent <see cref="ReadOnlySpan{char}"/>. May be empty.
+        /// The span held by this struct, inline to be able to represent <see cref="ReadOnlySpan{T}"/>. May be empty.
         /// </summary>
         private readonly ReadOnlySpan<char> _inlineSpan;
 
 #if NETSTANDARD
         /// <summary>
-        /// .NET Core does not keep a reference to the containing object in <see cref="ReadOnlySpan{char}"/>. In particular,
+        /// .NET Core does not keep a reference to the containing object in <see cref="ReadOnlySpan{T}"/>. In particular,
         /// it cannot recover the string if the span represents one. We have to hold the reference separately to be able to
         /// roundtrip String-&gt;InternableString-&gt;String without allocating a new String.
         /// </summary>
@@ -111,7 +111,7 @@ public bool MoveNext()
         private List<ReadOnlyMemory<char>>? _spans;
 
         /// <summary>
-        /// Constructs a new InternableString wrapping the given <see cref="ReadOnlySpan{char}"/>.
+        /// Constructs a new InternableString wrapping the given <see cref="ReadOnlySpan{T}"/>.
         /// </summary>
         /// <param name="span">The span to wrap.</param>
         /// <remarks>
