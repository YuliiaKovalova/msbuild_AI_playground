diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index d3561d25242..0adce7354db 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -314,7 +314,7 @@ internal static void GetSolutionFileAndVisualStudioMajorVersions(TextReader read
 
                 ReadOnlySpan<char> lineSpan = line.AsSpan().Trim();
 
-                if (lineSpan.StartsWith(slnFileHeaderNoVersion.AsSpan(), StringComparison.Ordinal))
+                if (lineSpan.StartsWith(slnFileHeaderNoVersion, StringComparison.Ordinal))
                 {
                     // Found it. Validate the version.
                     string fileVersionFromHeader = lineSpan.Slice(slnFileHeaderNoVersion.Length).ToString();
@@ -344,7 +344,7 @@ internal static void GetSolutionFileAndVisualStudioMajorVersions(TextReader read
 
                     validVersionFound = true;
                 }
-                else if (lineSpan.StartsWith(slnFileVSVLinePrefix.AsSpan(), StringComparison.Ordinal))
+                else if (lineSpan.StartsWith(slnFileVSVLinePrefix, StringComparison.Ordinal))
                 {
                     if (ParseVisualStudioVersion(line.AsSpan()) is { Major: int major })
                     {
@@ -511,23 +511,23 @@ internal void ParseSolution()
 
             while (TryReadLine(out ReadOnlySpan<char> line))
             {
-                if (line.StartsWith("Project(".AsSpan(), StringComparison.Ordinal))
+                if (line.StartsWith("Project(", StringComparison.Ordinal))
                 {
                     ParseProject(line, pool);
                 }
-                else if (line.StartsWith("GlobalSection(NestedProjects)".AsSpan(), StringComparison.Ordinal))
+                else if (line.StartsWith("GlobalSection(NestedProjects)", StringComparison.Ordinal))
                 {
                     ParseNestedProjects(pool);
                 }
-                else if (line.StartsWith("GlobalSection(SolutionConfigurationPlatforms)".AsSpan(), StringComparison.Ordinal))
+                else if (line.StartsWith("GlobalSection(SolutionConfigurationPlatforms)", StringComparison.Ordinal))
                 {
                     ParseSolutionConfigurations(pool);
                 }
-                else if (line.StartsWith("GlobalSection(ProjectConfigurationPlatforms)".AsSpan(), StringComparison.Ordinal))
+                else if (line.StartsWith("GlobalSection(ProjectConfigurationPlatforms)", StringComparison.Ordinal))
                 {
                     rawProjectConfigurationsEntries = ParseProjectConfigurations(pool);
                 }
-                else if (line.StartsWith("VisualStudioVersion".AsSpan(), StringComparison.Ordinal))
+                else if (line.StartsWith("VisualStudioVersion", StringComparison.Ordinal))
                 {
                     _currentVisualStudioVersion = ParseVisualStudioVersion(line);
                 }
@@ -669,7 +669,7 @@ private void ParseFileHeader()
                     break;
                 }
 
-                if (line.StartsWith(slnFileHeaderNoVersion.AsSpan(), StringComparison.Ordinal))
+                if (line.StartsWith(slnFileHeaderNoVersion, StringComparison.Ordinal))
                 {
                     // Found it. Validate the version.
                     ValidateSolutionFileVersion(line.Slice(slnFileHeaderNoVersion.Length));
@@ -787,16 +787,16 @@ private void ParseProject(ReadOnlySpan<char> firstLine, StringPool pool)
             while (TryReadLine(out ReadOnlySpan<char> line))
             {
                 // If we see an "EndProject", well ... that's the end of this project!
-                if (line.Equals("EndProject".AsSpan(), StringComparison.Ordinal))
+                if (line.Equals("EndProject", StringComparison.Ordinal))
                 {
                     break;
                 }
-                else if (line.StartsWith("ProjectSection(ProjectDependencies)".AsSpan(), StringComparison.Ordinal))
+                else if (line.StartsWith("ProjectSection(ProjectDependencies)", StringComparison.Ordinal))
                 {
                     // We have a ProjectDependencies section.  Each subsequent line should identify
                     // a dependency.
                     line = ReadRequiredLine();
-                    while (!line.StartsWith("EndProjectSection".AsSpan(), StringComparison.Ordinal))
+                    while (!line.StartsWith("EndProjectSection", StringComparison.Ordinal))
                     {
                         // This should be a dependency.  The GUID identifying the parent project should
                         // be both the property name and the property value.
@@ -814,13 +814,13 @@ private void ParseProject(ReadOnlySpan<char> firstLine, StringPool pool)
                         line = ReadRequiredLine();
                     }
                 }
-                else if (line.StartsWith("ProjectSection(WebsiteProperties)".AsSpan(), StringComparison.Ordinal))
+                else if (line.StartsWith("ProjectSection(WebsiteProperties)", StringComparison.Ordinal))
                 {
                     // We have a WebsiteProperties section.  This section is present only in Venus
                     // projects, and contains properties that we'll need in order to call the
                     // AspNetCompiler task.
                     line = ReadRequiredLine();
-                    while (!line.StartsWith("EndProjectSection".AsSpan(), StringComparison.Ordinal))
+                    while (!line.StartsWith("EndProjectSection", StringComparison.Ordinal))
                     {
                         if (!TryParseNameValue(line, allowEmpty: true, allowEqualsInValue: true, out ReadOnlySpan<char> propertyName, out ReadOnlySpan<char> propertyValue))
                         {
@@ -837,7 +837,7 @@ private void ParseProject(ReadOnlySpan<char> firstLine, StringPool pool)
                         line = ReadRequiredLine();
                     }
                 }
-                else if (line.StartsWith("Project(".AsSpan(), StringComparison.Ordinal))
+                else if (line.StartsWith("Project(", StringComparison.Ordinal))
                 {
                     // Another Project spotted instead of EndProject for the current one - solution file is malformed.
                     string warning = ResourceUtilities.FormatResourceStringStripCodeAndKeyword(out _, out _, "Shared.InvalidProjectFile",
@@ -1320,7 +1320,7 @@ static bool TryReadQuotedString(
 
             static bool TrySkip(ref ReadOnlySpan<char> line, string value)
             {
-                if (!line.StartsWith(value.AsSpan()))
+                if (!line.StartsWith(value, StringComparison.Ordinal))
                 {
                     return false;
                 }
@@ -1441,7 +1441,7 @@ internal void ParseNestedProjects(StringPool pool)
         {
             while (TryReadLine(out ReadOnlySpan<char> line))
             {
-                if (line.Equals("EndGlobalSection".AsSpan(), StringComparison.Ordinal))
+                if (line.Equals("EndGlobalSection", StringComparison.Ordinal))
                 {
                     break;
                 }
@@ -1496,7 +1496,7 @@ internal void ParseSolutionConfigurations(StringPool pool)
         {
             while (TryReadLine(out ReadOnlySpan<char> line))
             {
-                if (line.Equals("EndGlobalSection".AsSpan(), StringComparison.Ordinal))
+                if (line.Equals("EndGlobalSection", StringComparison.Ordinal))
                 {
                     break;
                 }
@@ -1518,7 +1518,7 @@ internal void ParseSolutionConfigurations(StringPool pool)
                 }
 
                 // Fixing bug 555577: Solution file can have description information, in which case we ignore.
-                if (name.Equals("DESCRIPTION".AsSpan(), StringComparison.OrdinalIgnoreCase))
+                if (name.Equals("DESCRIPTION", StringComparison.OrdinalIgnoreCase))
                 {
                     continue;
                 }
@@ -1610,7 +1610,7 @@ internal Dictionary<ProjectConfigurationKey, string> ParseProjectConfigurations(
 
             while (TryReadLine(out ReadOnlySpan<char> line))
             {
-                if (line.Equals("EndGlobalSection".AsSpan(), StringComparison.Ordinal))
+                if (line.Equals("EndGlobalSection", StringComparison.Ordinal))
                 {
                     break;
                 }
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index f758cdb62fc..14a282aa759 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -160,6 +160,7 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
+    <Compile Include="Utilities\SpanExtensions.cs" />
     <Compile Include="Utilities\StringPool.cs" />
     <Compile Include="Utilities\StreamLineSpanReader.cs" />
     <Compile Include="Evaluation\IItemTypeDefinition.cs" />
diff --git a/src/Build/Utilities/SpanExtensions.cs b/src/Build/Utilities/SpanExtensions.cs
new file mode 100644
index 00000000000..3937c5a1e36
--- /dev/null
+++ b/src/Build/Utilities/SpanExtensions.cs
@@ -0,0 +1,21 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+#if NETFRAMEWORK
+using System;
+
+namespace Microsoft.Build.Utilities;
+
+internal static class SpanExtensions
+{
+    public static bool StartsWith(this ReadOnlySpan<char> span, string s, StringComparison comparisonType)
+    {
+        return span.StartsWith(s.AsSpan(), comparisonType);
+    }
+
+    public static bool Equals(this ReadOnlySpan<char> span, string other, StringComparison comparisonType)
+    {
+        return span.Equals(other.AsSpan(), comparisonType);
+    }
+}
+#endif
