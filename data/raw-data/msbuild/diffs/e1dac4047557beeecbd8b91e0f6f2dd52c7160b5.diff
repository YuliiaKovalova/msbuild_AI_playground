diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index adb84a56c94..5a028da8058 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Logging.FancyLogger
     public class FancyLogger : ILogger
     {
 
-        // public FancyLoggerNode root = new FancyLoggerNode("-1", FancyLoggerNodeType.None);
+        public FancyLoggerNode root = new FancyLoggerNode(-1, FancyLoggerNodeType.None);
 
         public Dictionary<int, FancyLoggerBufferLine> projectConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
         public Dictionary<int, FancyLoggerBufferLine> targetConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
@@ -69,15 +69,25 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
                 + ANSIBuilder.Formatting.Dim("Project: ")
                 + e.ProjectFile
             );
-            projectConsoleLines[id] = line;
+            // projectConsoleLines[id] = line;
             // Node
             FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Project);
             node.Line = line;
+            // If has parent project
+            /* if (e.ParentProjectBuildEventContext?.ProjectInstanceId != null)
+            {
+                FancyLoggerNode? parentNode = root.Find($"project-{e.ParentProjectBuildEventContext.ProjectInstanceId}");
+                if (parentNode == null) return;
+                parentNode.Add(node);
+            } else */
+            {
+                root.Add(node);
+            }
         }
         void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
             if (e.BuildEventContext?.ProjectInstanceId == null) return;
-            int lineId = projectConsoleLines[e.BuildEventContext.ProjectInstanceId].Id;
+            int lineId = root.Find($"project-{e.BuildEventContext.ProjectInstanceId}")?.Line?.Id ?? -1;
             if(lineId == -1) return;
             FancyLoggerBuffer.UpdateLine(lineId, ""
                 + ANSIBuilder.Formatting.Color("✓", ANSIBuilder.Formatting.ForegroundColor.Green)
@@ -93,12 +103,17 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
             FancyLoggerBufferLine line = FancyLoggerBuffer.WriteNewLine("\t  "
                 + ANSIBuilder.Formatting.Dim("Target: ")
                 + e.TargetName);
-            targetConsoleLines[id] = line;
+            // Node
+            FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Target);
+            node.Line = line;
+            FancyLoggerNode? parentNode = root.Find($"project-{e.BuildEventContext.ProjectInstanceId}");
+            if (parentNode == null) return;
+            parentNode.Add(node);
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
             if (e.BuildEventContext?.TargetId == null) return;
-            int lineId = targetConsoleLines[e.BuildEventContext.TargetId].Id;
+            int lineId = root.Find($"target-{e.BuildEventContext.TargetId}")?.Line?.Id ?? -1;
             if(lineId == -1) return;
             FancyLoggerBuffer.UpdateLine(lineId, "\t"
                 + ANSIBuilder.Formatting.Color("✓ ", ANSIBuilder.Formatting.ForegroundColor.Green)
@@ -117,14 +132,21 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
                 + ANSIBuilder.Formatting.Dim("Task: ")
                 + e.TaskName
             );
-            taskConsoleLines[id] = line;
+            // Node
+            FancyLoggerNode node = new FancyLoggerNode(id, FancyLoggerNodeType.Task);
+            node.Line = line;
+            FancyLoggerNode? parentNode = root.Find($"target-{e.BuildEventContext.TargetId}");
+            if (parentNode == null) return;
+            parentNode.Add(node);
         }
 
         void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
         {
             completedTasks++;
             if (e.BuildEventContext?.TaskId == null) return;
-            int lineId = taskConsoleLines[e.BuildEventContext.TaskId].Id;
+            // int lineId = taskConsoleLines[e.BuildEventContext.TaskId].Id;
+            int lineId = root.Find($"task-{e.BuildEventContext.TaskId}")?.Line?.Id ?? -1;
+            if (lineId == -1) return;
             FancyLoggerBuffer.UpdateLine(lineId, "\t\t"
                 + ANSIBuilder.Formatting.Color("✓ ", ANSIBuilder.Formatting.ForegroundColor.Green)
                 + ANSIBuilder.Formatting.Dim("Task: ")
@@ -140,6 +162,7 @@ void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
             // Console.WriteLine("Warning raised");
+            FancyLoggerBuffer.WriteNewLine("Warning!");
         }
         void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
index 903b5857b59..8b0a30ce6a1 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
@@ -63,9 +63,55 @@ public FancyLoggerNode(int id, FancyLoggerNodeType type)
                     Id = id.ToString(); break;
             }
         }
+        public FancyLoggerNode? Find(string id)
+        {
+            // If self
+            if(Id == id) return this;
+            // If no children
+            if(Children.Count == 0) return null;
+            // Iterate
+            foreach (var child in Children)
+            {
+                FancyLoggerNode? node = child.Value.Find(id);
+                if (node != null) return node;
+            }
+            return null;
+        }
+
+        public void Add(FancyLoggerNode node)
+        {
+            Children.Add(node.Id, node);
+            node.Depth = Depth + 1;
+        }
+
+        public int GetLastLineId()
+        {
+            // If no line
+            if (Line == null) return -1;
+            // If line and no children
+            if (Children.Count == 0) return FancyLoggerBuffer.GetLineIndexById(Line.Id);
+            // Get from children
+            int lastLineId = -1;
+            int lastLineIndex = -1;
+            foreach (var child in Children)
+            {
+                int lineIndex = child.Value.GetLastLineId();
+                if (lineIndex > lastLineIndex)
+                {
+                    lastLineIndex = lineIndex;
+                    lastLineId = Line.Id;
+                }
+            }
+            return lastLineId;
+        }
 
+        public void Write()
+        {
+            if (Line == null) return;
+            // Implement logic for printing here...
+        }
 
-        public void Collapse(bool isRoot)
+        /*public void Collapse(bool isRoot)
         {
             // Children
             foreach (var child in Children)
@@ -82,8 +128,7 @@ public void Expand(bool isRoot)
             {
                 child.Value.Expand(false);
             }
-            // Self
-            if (!isRoot) Line?.Unhide();
+            if (isRoot) return;
         }
         public int GetRootLineId()
         {
@@ -106,6 +151,6 @@ public int GetLastLineId()
                 }
             }
             return lastLineId;
-        }
+        }*/
     }
 }
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 4c84885e6fc..95e8b5b9438 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -39,6 +39,7 @@
 using Microsoft.Build.Framework.Telemetry;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Logging.FancyLogger;
+using System.Runtime.InteropServices;
 
 #nullable disable
 
@@ -127,7 +128,7 @@ public enum ExitType
         private static readonly CancellationTokenSource s_buildCancellationSource = new CancellationTokenSource();
 
         private static readonly char[] s_commaSemicolon = { ',', ';' };
-
+ 
         /// <summary>
         /// Static constructor
         /// </summary>
@@ -3223,6 +3224,7 @@ out bool enableProfiler
 
             // Choose default console logger
             bool outputSupportsFancyLogger = !Console.IsOutputRedirected && // Avoid using the FancyLogger when output is redirected to a file
+                ( RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && Environment.GetEnvironmentVariable("WT_SESSION") != "" ) && // Avoid when NOT using Windows Terminal
                 Environment.GetEnvironmentVariable("TERM") != "dumb"; // Avoid using FancyLogger when output is dumb (does not support ANSI). TODO: Check for better ways of figuring out terminals' capabilities
             if (!outputSupportsFancyLogger)
             {
