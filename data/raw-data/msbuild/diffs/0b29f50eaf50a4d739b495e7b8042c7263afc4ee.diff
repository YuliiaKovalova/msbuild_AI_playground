diff --git a/NuGet.config b/NuGet.config
index a11137a9563..c39ceddacb7 100644
--- a/NuGet.config
+++ b/NuGet.config
@@ -15,13 +15,37 @@
     <add key="dotnet9" value="https://dnceng.pkgs.visualstudio.com/public/_packaging/dotnet9/nuget/v3/index.json" />
     <add key="dotnet9-transport" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9-transport/nuget/v3/index.json" />
     <add key="vs-impl" value="https://pkgs.dev.azure.com/azure-public/vside/_packaging/vs-impl/nuget/v3/index.json" />
-    <!-- We don't want other than VS OpenTelemetry libraries from vs-impl -->
-    <packageSourceMapping>
-      <packageSource key="vs-impl">
-        <package pattern="Microsoft.VisualStudio.OpenTelemetry*" />
-      </packageSource>
-    </packageSourceMapping>
   </packageSources>
+  <!-- We don't want other than VS OpenTelemetry libraries from vs-impl -->
+  <packageSourceMapping>
+    <packageSource key="vs-impl">
+      <package pattern="Microsoft.VisualStudio.OpenTelemetry*" />
+    </packageSource>
+    <packageSource key="arcade">
+      <package pattern="*" />
+    </packageSource>
+    <packageSource key="dotnet-public">
+      <package pattern="*" />
+    </packageSource>
+    <packageSource key="dotnet-tools">
+      <package pattern="*" />
+    </packageSource>
+    <packageSource key="dotnet6">
+      <package pattern="*" />
+    </packageSource>
+    <packageSource key="dotnet8">
+      <package pattern="*" />
+    </packageSource>
+    <packageSource key="dotnet8-transport">
+      <package pattern="*" />
+    </packageSource>
+    <packageSource key="dotnet9">
+      <package pattern="*" />
+    </packageSource>
+    <packageSource key="dotnet9-transport">
+      <package pattern="*" />
+    </packageSource>
+  </packageSourceMapping>
   <disabledPackageSources>
     <!--Begin: Package sources managed by Dependency Flow automation. Do not edit the sources below.-->
     <!--  Begin: Package sources from dotnet-runtime -->
diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index 0cc5b4a5866..c5bdebbf16b 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <Dependencies>
-  <Source Uri="https://github.com/dotnet/dotnet" Mapping="msbuild" Sha="ad8565092bbfdd5c8b4a94a718d10b2d394f7aee" BarId="268384" />
+  <Source Uri="https://github.com/dotnet/dotnet" Mapping="msbuild" Sha="170498a9429a5553fe7ac0ec2341d19bbb97cbe8" BarId="268722" />
   <ProductDependencies>
     <!-- Necessary for source-build. This allows the live version of the package to be used by source-build. -->
     <Dependency Name="Microsoft.Bcl.Cryptography" Version="9.0.0">
@@ -120,9 +120,9 @@
       <Uri>https://github.com/nuget/nuget.client</Uri>
       <Sha>e4e3b79701686199bc804a06533d2df054924d7e</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.14.0-3.25259.3">
+    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.14.0-3.25262.10">
       <Uri>https://github.com/dotnet/roslyn</Uri>
-      <Sha>02a0d723b2b93db48cc623904ff071f9ef8514b7</Sha>
+      <Sha>8edf7bcd4f1594c3d68a6a567469f41dbd33dd1b</Sha>
     </Dependency>
     <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="9.0.0-beta.25266.2">
       <Uri>https://github.com/dotnet/arcade</Uri>
diff --git a/eng/Versions.props b/eng/Versions.props
index 5205baac212..cb3ecb5e343 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -81,7 +81,7 @@
     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\global.json')), '"dotnet": "([^"]*)"').Groups.get_Item(1))</DotNetCliVersion>
     <MicrosoftCodeAnalysisCollectionsVersion>4.2.0-1.22102.8</MicrosoftCodeAnalysisCollectionsVersion>
     <MicrosoftDotNetXUnitExtensionsVersion>9.0.0-beta.25266.2</MicrosoftDotNetXUnitExtensionsVersion>
-    <MicrosoftNetCompilersToolsetVersion>4.14.0-3.25259.3</MicrosoftNetCompilersToolsetVersion>
+    <MicrosoftNetCompilersToolsetVersion>4.14.0-3.25262.10</MicrosoftNetCompilersToolsetVersion>
     <NuGetBuildTasksVersion>6.15.0-preview.1.50</NuGetBuildTasksVersion>
   </PropertyGroup>
   <PropertyGroup Condition="!$(TargetFramework.StartsWith('net4'))">
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 489db4af2c1..9ac693a6d28 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -984,6 +984,13 @@ private void AddCustomDataSourceToNugetConfig(string checkCandidatePath)
             // MSBuild packages are placed in a separate folder, so we need to add it as a package source.
             AddPackageSource(doc, packageSourcesNode, "MSBuildTestPackagesSource", RunnerUtilities.ArtifactsLocationAttribute.ArtifactsLocation);
 
+            // PackageSourceMapping is enabled at the repository level. For the test packages we need to add the PackageSourceMapping as well.
+            XmlNode? packageSourceMapping = doc.CreateElement("packageSourceMapping");
+            string[] packagePatterns = new string[] { "*" };
+            AddPackageSourceMapping(doc, packageSourceMapping, "CustomCheckSource", packagePatterns);
+            AddPackageSourceMapping(doc, packageSourceMapping, "MSBuildTestPackagesSource", packagePatterns);
+            doc.DocumentElement.AppendChild(packageSourceMapping);
+
             doc.Save(Path.Combine(checkCandidatePath, "nuget.config"));
         }
     }
@@ -1001,6 +1008,23 @@ private void AddPackageSource(XmlDocument doc, XmlNode? packageSourcesNode, stri
         }
     }
 
+    private void AddPackageSourceMapping(XmlDocument doc, XmlNode? packageSourceMapping, string key, string[] packagePatterns)
+    {
+        if (packageSourceMapping != null)
+        {
+            XmlElement packageSourceNode = doc.CreateElement("packageSource");
+            PopulateXmlAttribute(doc, packageSourceNode, "key", key);
+            foreach (var pattern in packagePatterns)
+            {
+                XmlElement packageNode = doc.CreateElement("package");
+                PopulateXmlAttribute(doc, packageNode, "pattern", pattern);
+                packageSourceNode.AppendChild(packageNode);
+            }
+            
+            packageSourceMapping.AppendChild(packageSourceNode);
+        }
+    }
+
     private void PopulateXmlAttribute(XmlDocument doc, XmlNode node, string attributeName, string attributeValue)
     {
         node.ShouldNotBeNull($"The attribute {attributeName} can not be populated with {attributeValue}. Xml node is null.");
