diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index acafeaa3df9..f1dd1b2a3d2 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -47,12 +47,14 @@ public void Initialize(IEventSource eventSource)
             FancyLoggerBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
             FancyLoggerBuffer.WriteNewLine("");
-            // for (int i = 0; i < 120; i++) FancyLoggerBuffer.WriteNewLine( new string(Convert.ToString(i, 16)[0], 200) );
-            FancyLoggerBuffer.Render();
-
-
+            // Log all projects periodically
             Task.Run(() =>
             {
+                /*while (true)
+                {
+                    await Task.Delay((1/60)*10);
+                    foreach (var project in projects) project.Value.Log();
+                }*/
             });
         }
 
@@ -96,7 +98,6 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddTarget(e);
-            // node.Log();
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
@@ -105,7 +106,6 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.FinishedTargets++;
-            // node.Log();
         }
 
         // Task
@@ -117,7 +117,6 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddTask(e);
-            // node.Log();
             existingTasks++;
         }
 
@@ -133,7 +132,6 @@ void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddMessage(e);
-            // node.Log();
         }
         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
@@ -142,7 +140,6 @@ void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddWarning(e);
-            // node.Log();
         }
         void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
@@ -151,7 +148,6 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddError(e);
-            // node.Log();
         }
 
 
@@ -160,7 +156,6 @@ public void Shutdown()
             FancyLoggerBuffer.Terminate();
             // TODO: Remove. There is a bug that causes switching to main buffer without deleting the contents of the alternate buffer
             Console.Clear();
-            // Console.WriteLine("Build status, warnings and errors will be shown here after the build has ended and the interactive logger has closed");
             if (Succeeded)
             {
                 Console.WriteLine(ANSIBuilder.Formatting.Color("Build succeeded.", ANSIBuilder.Formatting.ForegroundColor.Green));
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 6fc1b030cdf..70eef6c5d96 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -49,34 +49,26 @@ public static void Initialize()
             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
             Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
 
-            /*Task.Run(async () => {
-                while (true)
-                {
-                    await Task.Delay((1/60)/1000);
-                    Render();
-                }
-            });*/
-
-            Task.Run(() =>
+            Task.Run(async () =>
             {
-                /*while (true)
+                while (true)
                 {
                     switch (Console.ReadKey().Key)
                     {
                         case ConsoleKey.UpArrow:
                             if (TopLineIndex > 0) TopLineIndex--;
-                            Render();
                             break;
                         case ConsoleKey.DownArrow:
                             TopLineIndex++;
-                            Render();
                             break;
                         case ConsoleKey.Spacebar:
                         case ConsoleKey.Escape:
-                            AutoScrollEnabled = !AutoScrollEnabled;
+                            // AutoScrollEnabled = !AutoScrollEnabled;
                             break;
                     }
-                }*/
+                    await Task.Delay((1 / 60) * 1_000);
+                    Render();
+            }
             });
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
index d39f8945307..bc2b7f6cf1e 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
@@ -15,6 +15,10 @@ public class FancyLoggerMessageNode
         public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
         {
             Message = args.Message ?? string.Empty;
+            if (Message.Length > 300)
+            {
+                Message = Message.Substring(0, 300);
+            }
         }
 
         public void Log()
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index 7d771aaf336..324785cbbf8 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -5,7 +5,6 @@
 using System;
 using System.Collections.Generic;
 using System.IO;
-using System.Threading.Tasks;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.FancyLogger
@@ -88,10 +87,7 @@ public void Log()
             }
 
             // Update buffer
-            Task.Run(() =>
-            {
-                FancyLoggerBuffer.Render();
-            });
+            FancyLoggerBuffer.Render();
         }
 
         public void AddTarget(TargetStartedEventArgs args)
