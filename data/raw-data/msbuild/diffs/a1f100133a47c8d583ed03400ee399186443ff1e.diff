diff --git a/scripts/Deploy-MSBuild.ps1 b/scripts/Deploy-MSBuild.ps1
index 47eec2ccff8..b7bf08ced01 100644
--- a/scripts/Deploy-MSBuild.ps1
+++ b/scripts/Deploy-MSBuild.ps1
@@ -48,7 +48,7 @@ Write-Host "Existing MSBuild assemblies backed up to $BackupFolder"
 if ($runtime -eq "Desktop") {
     $targetFramework = "net472"
 } else {
-    $targetFramework = "netcoreapp2.1"
+    $targetFramework = "net5.0"
 }
 
 $bootstrapBinDirectory = "artifacts\bin\MSBuild.Bootstrap\$configuration\$targetFramework"
diff --git a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
index 87c18c4b5b9..950e93323a5 100644
--- a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
@@ -3,8 +3,11 @@
 
 using System;
 using System.Collections.Generic;
+using System.Configuration.Assemblies;
+using System.Globalization;
 using Microsoft.Build.BackEnd;
 using System.IO;
+using System.Reflection;
 using Xunit;
 
 namespace Microsoft.Build.UnitTests.BackEnd
@@ -45,8 +48,8 @@ public void TestSerializeBool()
         public void TestSerializeByte()
         {
             byte val = 0x55;
-            HelperTestSimpleType((byte)0, val);
-            HelperTestSimpleType(val, (byte)0);
+            HelperTestSimpleType((byte) 0, val);
+            HelperTestSimpleType(val, (byte) 0);
         }
 
         /// <summary>
@@ -56,8 +59,8 @@ public void TestSerializeByte()
         public void TestSerializeShort()
         {
             short val = 0x55AA;
-            HelperTestSimpleType((short)0, val);
-            HelperTestSimpleType(val, (short)0);
+            HelperTestSimpleType((short) 0, val);
+            HelperTestSimpleType(val, (short) 0);
         }
 
         /// <summary>
@@ -67,8 +70,8 @@ public void TestSerializeShort()
         public void TestSerializeLong()
         {
             long val = 0x55AABBCCDDEE;
-            HelperTestSimpleType((long)0, val);
-            HelperTestSimpleType(val, (long)0);
+            HelperTestSimpleType((long) 0, val);
+            HelperTestSimpleType(val, (long) 0);
         }
 
         /// <summary>
@@ -78,8 +81,8 @@ public void TestSerializeLong()
         public void TestSerializeDouble()
         {
             double val = 3.1416;
-            HelperTestSimpleType((double)0, val);
-            HelperTestSimpleType(val, (double)0);
+            HelperTestSimpleType((double) 0, val);
+            HelperTestSimpleType(val, (double) 0);
         }
 
         /// <summary>
@@ -100,8 +103,8 @@ public void TestSerializeTimeSpan()
         public void TestSerializeInt()
         {
             int val = 0x55AA55AA;
-            HelperTestSimpleType((int)0, val);
-            HelperTestSimpleType(val, (int)0);
+            HelperTestSimpleType((int) 0, val);
+            HelperTestSimpleType(val, (int) 0);
         }
 
         /// <summary>
@@ -122,7 +125,7 @@ public void TestSerializeString()
         public void TestSerializeStringArray()
         {
             HelperTestArray(new string[] { }, StringComparer.Ordinal);
-            HelperTestArray(new string[] { "foo", "bar" }, StringComparer.Ordinal);
+            HelperTestArray(new string[] {"foo", "bar"}, StringComparer.Ordinal);
             HelperTestArray(null, StringComparer.Ordinal);
         }
 
@@ -157,10 +160,10 @@ public void TestSerializeDateTime()
         public void TestSerializeEnum()
         {
             TranslationDirection value = TranslationDirection.ReadFromStream;
-            TranslationHelpers.GetWriteTranslator().TranslateEnum(ref value, (int)value);
+            TranslationHelpers.GetWriteTranslator().TranslateEnum(ref value, (int) value);
 
             TranslationDirection deserializedValue = TranslationDirection.WriteToStream;
-            TranslationHelpers.GetReadTranslator().TranslateEnum(ref deserializedValue, (int)deserializedValue);
+            TranslationHelpers.GetReadTranslator().TranslateEnum(ref deserializedValue, (int) deserializedValue);
 
             Assert.Equal(value, deserializedValue);
         }
@@ -262,7 +265,7 @@ public void TestSerializeWithFactoryNull()
         [Fact]
         public void TestSerializeArray()
         {
-            DerivedClass[] value = new DerivedClass[] { new DerivedClass(1, 2), new DerivedClass(3, 4) };
+            DerivedClass[] value = new DerivedClass[] {new DerivedClass(1, 2), new DerivedClass(3, 4)};
             TranslationHelpers.GetWriteTranslator().TranslateArray(ref value);
 
             DerivedClass[] deserializedValue = null;
@@ -292,7 +295,7 @@ public void TestSerializeArrayNull()
         [Fact]
         public void TestSerializeArrayWithFactory()
         {
-            BaseClass[] value = new BaseClass[] { new BaseClass(1), new BaseClass(2) };
+            BaseClass[] value = new BaseClass[] {new BaseClass(1), new BaseClass(2)};
             TranslationHelpers.GetWriteTranslator().TranslateArray(ref value, BaseClass.FactoryForDeserialization);
 
             BaseClass[] deserializedValue = null;
@@ -431,6 +434,163 @@ public void TestSerializeDictionaryStringTNoComparerNull()
             Assert.Equal(value, deserializedValue);
         }
 
+        [Theory]
+        [InlineData("en")]
+        [InlineData("en-US")]
+        [InlineData("en-CA")]
+        [InlineData("zh-HK")]
+        [InlineData("sr-Cyrl-CS")]
+        public void CultureInfo(string name)
+        {
+            CultureInfo value = new CultureInfo(name);
+            TranslationHelpers.GetWriteTranslator().Translate(ref value);
+
+            CultureInfo deserializedValue = null;
+            TranslationHelpers.GetReadTranslator().Translate(ref deserializedValue);
+
+            Assert.Equal(value, deserializedValue);
+        }
+
+        [Fact]
+        public void CultureInfoAsNull()
+        {
+            CultureInfo value = null;
+            TranslationHelpers.GetWriteTranslator().Translate(ref value);
+
+            CultureInfo deserializedValue = null;
+            TranslationHelpers.GetReadTranslator().Translate(ref deserializedValue);
+
+            Assert.Null(deserializedValue);
+        }
+
+        [Theory]
+        [InlineData("1.2")]
+        [InlineData("1.2.3")]
+        [InlineData("1.2.3.4")]
+        public void Version(string version)
+        {
+            Version value = new Version(version);
+            TranslationHelpers.GetWriteTranslator().Translate(ref value);
+
+            Version deserializedValue = null;
+            TranslationHelpers.GetReadTranslator().Translate(ref deserializedValue);
+
+            Assert.Equal(value, deserializedValue);
+        }
+
+        [Fact]
+        public void VersionAsNull()
+        {
+            Version value = null;
+            TranslationHelpers.GetWriteTranslator().Translate(ref value);
+
+            Version deserializedValue = null;
+            TranslationHelpers.GetReadTranslator().Translate(ref deserializedValue);
+
+            Assert.Null(deserializedValue);
+        }
+
+        [Fact]
+        public void HashSetOfT()
+        {
+            HashSet<BaseClass> value = new()
+            {
+                new BaseClass(1),
+                new BaseClass(2),
+                null
+            };
+            TranslationHelpers.GetWriteTranslator().TranslateHashSet(ref value, BaseClass.FactoryForDeserialization, capacity => new ());
+
+            HashSet<BaseClass> deserializedValue = null;
+            TranslationHelpers.GetReadTranslator().TranslateHashSet(ref deserializedValue, BaseClass.FactoryForDeserialization, capacity => new ());
+
+            Assert.Equal(value, deserializedValue, BaseClass.EqualityComparer);
+        }
+
+        [Fact]
+        public void HashSetOfTAsNull()
+        {
+            HashSet<BaseClass> value = null;
+            TranslationHelpers.GetWriteTranslator().TranslateHashSet(ref value, BaseClass.FactoryForDeserialization, capacity => new());
+
+            HashSet<BaseClass> deserializedValue = null;
+            TranslationHelpers.GetReadTranslator().TranslateHashSet(ref deserializedValue, BaseClass.FactoryForDeserialization, capacity => new());
+
+            Assert.Null(deserializedValue);
+        }
+
+        [Fact]
+        public void AssemblyNameAsNull()
+        {
+            AssemblyName value = null;
+            TranslationHelpers.GetWriteTranslator().Translate(ref value);
+
+            AssemblyName deserializedValue = null;
+            TranslationHelpers.GetReadTranslator().Translate(ref deserializedValue);
+
+            Assert.Null(deserializedValue);
+        }
+
+        [Fact]
+        public void AssemblyNameWithAllFields()
+        {
+            AssemblyName value = new()
+            {
+                Name = "a",
+                Version = new Version(1, 2, 3),
+                Flags = AssemblyNameFlags.PublicKey,
+                ProcessorArchitecture = ProcessorArchitecture.X86,
+                CultureInfo = new CultureInfo("zh-HK"),
+                HashAlgorithm = System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA256,
+                VersionCompatibility = AssemblyVersionCompatibility.SameMachine,
+                CodeBase = "C:\\src",
+                KeyPair = new StrongNameKeyPair(new byte[] { 4, 3, 2, 1 }),
+                ContentType = AssemblyContentType.WindowsRuntime,
+                CultureName = "zh-HK",
+            };
+            value.SetPublicKey(new byte[]{ 3, 2, 1});
+            value.SetPublicKeyToken(new byte[] { 8, 7, 6, 5, 4, 3, 2, 1 });
+
+            TranslationHelpers.GetWriteTranslator().Translate(ref value);
+
+            AssemblyName deserializedValue = null;
+            TranslationHelpers.GetReadTranslator().Translate(ref deserializedValue);
+
+            HelperAssertAssemblyNameEqual(value, deserializedValue);
+        }
+
+        [Fact]
+        public void AssemblyNameWithMinimalFields()
+        {
+            AssemblyName value = new();
+
+            TranslationHelpers.GetWriteTranslator().Translate(ref value);
+
+            AssemblyName deserializedValue = null;
+            TranslationHelpers.GetReadTranslator().Translate(ref deserializedValue);
+
+            HelperAssertAssemblyNameEqual(value, deserializedValue);
+        }
+
+        /// <summary>
+        /// Assert two AssemblyName objects values are same.
+        /// Ignoring KeyPair, ContentType, CultureName as those are not serialized
+        /// </summary>
+        private static void HelperAssertAssemblyNameEqual(AssemblyName expected, AssemblyName actual)
+        {
+            Assert.Equal(expected.Name, actual.Name);
+            Assert.Equal(expected.Version, actual.Version);
+            Assert.Equal(expected.Flags, actual.Flags);
+            Assert.Equal(expected.ProcessorArchitecture, actual.ProcessorArchitecture);
+            Assert.Equal(expected.CultureInfo, actual.CultureInfo);
+            Assert.Equal(expected.HashAlgorithm, actual.HashAlgorithm);
+            Assert.Equal(expected.VersionCompatibility, actual.VersionCompatibility);
+            Assert.Equal(expected.CodeBase, actual.CodeBase);
+
+            Assert.Equal(expected.GetPublicKey(), actual.GetPublicKey());
+            Assert.Equal(expected.GetPublicKeyToken(), actual.GetPublicKeyToken());
+        }
+
         /// <summary>
         /// Helper for bool serialization.
         /// </summary>
@@ -618,6 +778,11 @@ static public IComparer<BaseClass> Comparer
                 get { return new BaseClassComparer(); }
             }
 
+            static public IEqualityComparer<BaseClass> EqualityComparer
+            {
+                get { return new BaseClassEqualityComparer(); }
+            }
+
             /// <summary>
             /// Gets the value.
             /// </summary>
@@ -676,6 +841,23 @@ public int Compare(BaseClass x, BaseClass y)
                 }
                 #endregion
             }
+
+            private class BaseClassEqualityComparer : IEqualityComparer<BaseClass>
+            {
+                public bool Equals(BaseClass x, BaseClass y)
+                {
+                    if (ReferenceEquals(x, y)) return true;
+                    if (ReferenceEquals(x, null)) return false;
+                    if (ReferenceEquals(y, null)) return false;
+                    if (x.GetType() != y.GetType()) return false;
+                    return x._baseValue == y._baseValue;
+                }
+
+                public int GetHashCode(BaseClass obj)
+                {
+                    return obj._baseValue;
+                }
+            }
         }
 
         /// <summary>
diff --git a/src/Shared/TranslatorHelpers.cs b/src/Shared/TranslatorHelpers.cs
index c7b0481f173..5524d802659 100644
--- a/src/Shared/TranslatorHelpers.cs
+++ b/src/Shared/TranslatorHelpers.cs
@@ -116,7 +116,11 @@ public static void TranslateHashSet<T>(
             if (!translator.TranslateNullable(hashSet))
                 return;
 
-            int count = hashSet.Count;
+            int count = default;
+            if (translator.Mode == TranslationDirection.WriteToStream)
+            {
+                count = hashSet.Count;
+            }
             translator.Translate(ref count);
 
             if (translator.Mode == TranslationDirection.ReadFromStream)
@@ -140,6 +144,66 @@ public static void TranslateHashSet<T>(
             }
         }
 
+        public static void Translate(this ITranslator translator, ref CultureInfo cultureInfo)
+        {
+            if (!translator.TranslateNullable(cultureInfo))
+                return;
+
+            int lcid = default;
+
+            if (translator.Mode == TranslationDirection.WriteToStream)
+            {
+                lcid = cultureInfo.LCID;
+            }
+
+            translator.Translate(ref lcid);
+
+            if (translator.Mode == TranslationDirection.ReadFromStream)
+            {
+                cultureInfo = new CultureInfo(lcid);
+            }
+        }
+
+        public static void Translate(this ITranslator translator, ref Version version)
+        {
+            if (!translator.TranslateNullable(version))
+                return;
+
+            int major = 0;
+            int minor = 0;
+            int build = 0;
+            int revision = 0;
+
+            if (translator.Mode == TranslationDirection.WriteToStream)
+            {
+                major = version.Major;
+                minor = version.Minor;
+                build = version.Build;
+                revision = version.Revision;
+            }
+
+            translator.Translate(ref major);
+            translator.Translate(ref minor);
+            translator.Translate(ref build);
+            translator.Translate(ref revision);
+
+            if (translator.Mode == TranslationDirection.ReadFromStream)
+            {
+                if (build < 0)
+                {
+                    version = new Version(major, minor);
+                }
+                else if (revision < 0)
+                {
+                    version = new Version(major, minor, build);
+                }
+                else
+                {
+                    version = new Version(major, minor, build, revision);
+                }
+            }
+        }
+
         public static void Translate(this ITranslator translator, ref AssemblyName assemblyName)
         {
             if (!translator.TranslateNullable(assemblyName))
@@ -205,65 +269,5 @@ public static void Translate(this ITranslator translator, ref AssemblyName assem
                 assemblyName.SetPublicKeyToken(publicKeyToken);
             }
         }
-
-        public static void Translate(this ITranslator translator, ref CultureInfo cultureInfo)
-        {
-            if (!translator.TranslateNullable(cultureInfo))
-                return;
-
-            int lcid = default;
-
-            if (translator.Mode == TranslationDirection.ReadFromStream)
-            {
-                lcid = cultureInfo.LCID;
-            }
-
-            translator.Translate(ref lcid);
-
-            if (translator.Mode == TranslationDirection.ReadFromStream)
-            {
-                cultureInfo = new CultureInfo(lcid);
-            }
-        }
-
-        public static void Translate(this ITranslator translator, ref Version version)
-        {
-            if (!translator.TranslateNullable(version))
-                return;
-
-            int major = 0;
-            int minor = 0;
-            int build = 0;
-            int revision = 0;
-
-            if (translator.Mode == TranslationDirection.WriteToStream)
-            {
-                major = version.Major;
-                minor = version.Minor;
-                build = version.Build;
-                revision = version.Revision;
-            }
-
-            translator.Translate(ref major);
-            translator.Translate(ref minor);
-            translator.Translate(ref build);
-            translator.Translate(ref revision);
-
-            if (translator.Mode == TranslationDirection.ReadFromStream)
-            {
-                if (build < 0)
-                {
-                    version = new Version(major, minor);
-                }
-                else if (revision < 0)
-                {
-                    version = new Version(major, minor, build);
-                }
-                else
-                {
-                    version = new Version(major, minor, build, revision);
-                }
-            }
-        }
     }
 }
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
new file mode 100644
index 00000000000..fa1585b557a
--- /dev/null
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
@@ -0,0 +1,39 @@
+using System;
+using System.IO;
+using Microsoft.Build.Tasks;
+using Microsoft.Build.Utilities;
+using Xunit;
+
+namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
+{
+    public class ResolveAssemblyReferenceCacheSerialization
+    {
+        [Fact]
+        public void RoundTripEmptyState()
+        {
+            string rarCacheFile = Path.Combine(Path.GetTempPath(), Guid.NewGuid() + ".UnitTest.RarCache");
+            var taskLoggingHelper = new TaskLoggingHelper(new MockEngine(), "TaskA");
+
+            SystemState systemState = new();
+
+            systemState.SerializeCacheByTranslator(rarCacheFile, taskLoggingHelper);
+
+            var deserialized = SystemState.DeserializeCacheByTranslator(rarCacheFile, taskLoggingHelper);
+
+            Assert.NotNull(deserialized);
+        }
+
+        [Fact]
+        public void RoundTripFullFileState()
+        {
+            // read old file
+            // white as TR
+            // read as TR
+            // write as BF
+            // compare old and new BF
+
+            string rarCacheFile = Path.Combine(Path.GetTempPath(), Guid.NewGuid() + ".UnitTest.RarCache");
+            var taskLoggingHelper = new TaskLoggingHelper(new MockEngine(), "TaskA");
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
index eab4bd23cd8..406ce641895 100644
--- a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
+++ b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
@@ -36,7 +36,6 @@
     <Reference Include="System.Xml.Linq" />
   </ItemGroup>
 
-
   <ItemGroup>
     <Compile Include="..\Shared\FxCopExclusions\Microsoft.Build.Shared.Suppressions.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 9a9d47d64ed..9b289dfd75e 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -322,7 +322,7 @@ internal void SerializeCacheByTranslator(string stateFile, TaskLoggingHelper log
                     var translator = BinaryTranslator.GetWriteTranslator(s);
 
                     // write file signature
-                    translator.Writer.Write(TranslateContractSignature); 
+                    translator.Writer.Write(TranslateContractSignature);
                     translator.Writer.Write(TranslateContractVersion);
 
                     Translate(translator);
