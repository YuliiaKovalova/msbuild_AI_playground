diff --git a/src/Tasks.UnitTests/CombineTargetFrameworkInfoProperties_Tests.cs b/src/Tasks.UnitTests/CombineTargetFrameworkInfoProperties_Tests.cs
new file mode 100644
index 00000000000..553c62862d9
--- /dev/null
+++ b/src/Tasks.UnitTests/CombineTargetFrameworkInfoProperties_Tests.cs
@@ -0,0 +1,36 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Tasks;
+using Shouldly;
+using Xunit;
+
+namespace Microsoft.Build.UnitTests
+{
+    public sealed class CombineTargetFrameworkInfoProperties_Tests
+    {
+        /// <summary>
+        /// https://github.com/dotnet/msbuild/issues/8320
+        /// </summary>
+        [Fact]
+        public void RootElementNameNotValid()
+        {
+            var task = new CombineTargetFrameworkInfoProperties();
+            var items = new ITaskItem[]
+            {
+                new TaskItemData("ItemSpec1", null)
+            };
+            task.PropertiesAndValues = items;
+            task.UseAttributeForTargetFrameworkInfoPropertyNames = true;
+            var exp = Assert.Throws<ArgumentNullException>(() => task.Execute());
+            exp.Message.ShouldContain("RootElementName");
+
+            task.RootElementName = string.Empty;
+            task.UseAttributeForTargetFrameworkInfoPropertyNames = false;
+            var exp1 = Assert.Throws<ArgumentException>(() => task.Execute());
+            exp1.Message.ShouldContain("RootElementName");
+        }
+    }
+}
diff --git a/src/Tasks/CombineTargetFrameworkInfoProperties.cs b/src/Tasks/CombineTargetFrameworkInfoProperties.cs
index 6830ba9cb99..8707e14c169 100644
--- a/src/Tasks/CombineTargetFrameworkInfoProperties.cs
+++ b/src/Tasks/CombineTargetFrameworkInfoProperties.cs
@@ -17,7 +17,28 @@ public class CombineTargetFrameworkInfoProperties : TaskExtension
         /// <summary>
         /// The root element name to use for the generated XML string
         /// </summary>
-        public string RootElementName { get; set; }
+        private string _rootElementName;
+
+        /// <summary>
+        /// Gets or sets the root element name to use for the generated XML string
+        /// </summary>
+        public string RootElementName
+        {
+            get
+            {
+                if (!UseAttributeForTargetFrameworkInfoPropertyNames)
+                {
+                    ErrorUtilities.VerifyThrowArgumentLength(_rootElementName, nameof(RootElementName));
+                }
+                else
+                {
+                    ErrorUtilities.VerifyThrowArgumentNull(_rootElementName, nameof(RootElementName));
+                }
+                return _rootElementName;
+            }
+
+            set => _rootElementName = value;
+        }
 
         /// <summary>
         /// Items to include in the XML.  The ItemSpec should be the property name, and it should have Value metadata for its value.
@@ -39,9 +60,17 @@ public override bool Execute()
         {
             if (PropertiesAndValues != null)
             {
+                if (!UseAttributeForTargetFrameworkInfoPropertyNames)
+                {
+                    ErrorUtilities.VerifyThrowArgumentLength(_rootElementName, nameof(RootElementName));
+                }
+                else
+                {
+                    ErrorUtilities.VerifyThrowArgumentNull(_rootElementName, nameof(RootElementName));
+                }
                 XElement root = UseAttributeForTargetFrameworkInfoPropertyNames ?
-                    new("TargetFramework", new XAttribute("Name", EscapingUtilities.Escape(RootElementName))) :
-                    new(RootElementName);
+                    new("TargetFramework", new XAttribute("Name", EscapingUtilities.Escape(_rootElementName))) :
+                    new(_rootElementName);
 
                 foreach (ITaskItem item in PropertiesAndValues)
                 {
