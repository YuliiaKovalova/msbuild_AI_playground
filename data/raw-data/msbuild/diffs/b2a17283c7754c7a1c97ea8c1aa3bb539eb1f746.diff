diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index b907742edd1..bb143dde9b8 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -1526,7 +1526,7 @@ internal static unsafe string GetFullPath(string path)
         char* buffer = stackalloc char[bufferSize];
         int fullPathLength = GetFullPathWin32(path, bufferSize, buffer, IntPtr.Zero);
         // Avoid creating new strings unnecessarily
-        return AreStringsEqual(buffer, fullPathLength, path) ? path : new string(buffer, startIndex: 0, length: fullPathLength);
+        return MemoryExtensions.SequenceEqual(path.AsSpan(), new ReadOnlySpan<char>(buffer, fullPathLength)) ? path : new string(buffer, startIndex: 0, length: fullPathLength);
     }
 
     [SupportedOSPlatform("windows")]
@@ -1537,31 +1537,6 @@ private static unsafe int GetFullPathWin32(string target, int bufferLength, char
         return pathLength;
     }
 
-    /// <summary>
-    /// Compare an unsafe char buffer with a <see cref="System.String"/> to see if their contents are identical.
-    /// </summary>
-    /// <param name="buffer">The beginning of the char buffer.</param>
-    /// <param name="len">The length of the buffer.</param>
-    /// <param name="s">The string.</param>
-    /// <returns>True only if the contents of <paramref name="s"/> and the first <paramref name="len"/> characters in <paramref name="buffer"/> are identical.</returns>
-    private static unsafe bool AreStringsEqual(char* buffer, int len, string s)
-    {
-        if (len != s.Length)
-        {
-            return false;
-        }
-
-        foreach (char ch in s)
-        {
-            if (ch != *buffer++)
-            {
-                return false;
-            }
-        }
-
-        return true;
-    }
-
     internal static void VerifyThrowWin32Result(int result)
     {
         bool isError = result == 0;
