diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index 4869dfbda9d..1259648e255 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -215,7 +215,6 @@ public class BuildParameters : ITranslatable
         private string[] _inputResultsCacheFiles;
 
         private string _outputResultsCacheFile;
-        private string _resourceManagerSemaphoreName = $"MSBuild.{Guid.NewGuid().ToString()}";
 
         /// <summary>
         /// Constructor for those who intend to set all properties themselves.
@@ -774,12 +773,6 @@ public string OutputResultsCacheFile
             set => _outputResultsCacheFile = value;
         }
 
-        public string ResourceManagerSemaphoreName
-        {
-            get => _resourceManagerSemaphoreName;
-            set => _resourceManagerSemaphoreName = value;
-        }
-
         /// <summary>
         /// Determines whether MSBuild will save the results of builds after EndBuild to speed up future builds.
         /// </summary>
@@ -856,7 +849,6 @@ void ITranslatable.Translate(ITranslator translator)
             translator.TranslateEnum(ref _projectLoadSettings, (int) _projectLoadSettings);
             translator.Translate(ref _interactive);
             translator.Translate(ref _isolateProjects);
-            translator.Translate(ref _resourceManagerSemaphoreName);
 
             // ProjectRootElementCache is not transmitted.
             // ResetCaches is not transmitted.
diff --git a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
index 087f4018bf0..cee32b41ff9 100644
--- a/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
+++ b/src/Build/BackEnd/Components/ResourceManager/ResourceManagerService.cs
@@ -13,9 +13,7 @@ namespace Microsoft.Build.BackEnd.Components.ResourceManager
 {
     class ResourceManagerService : IBuildComponent
     {
-        Semaphore? s = null;
-
-        ILoggingService? _loggingService;
+        //ILoggingService? _loggingService;
 
         public int TotalNumberHeld = -1;
         public int Count = 0;
@@ -29,101 +27,29 @@ internal static IBuildComponent CreateComponent(BuildComponentType type)
 
         public void InitializeComponent(IBuildComponentHost host)
         {
-            if (NativeMethodsShared.IsWindows)
-            {
-                string semaphoreName = host.BuildParameters.ResourceManagerSemaphoreName;
-
-                int resourceCount = host.BuildParameters.MaxNodeCount + Traits.Instance.ResourceManagerOversubscription;
-
-                Count = resourceCount;
-
-                _loggingService = host.LoggingService;
-
-                TotalNumberHeld = 0;
-
-                s = new Semaphore(resourceCount, resourceCount, semaphoreName); // TODO: SemaphoreSecurity?
-            }
-            else
-            {
-                // UNDONE: just don't support gathering additional cores on non-Windows
-                s = null;
-            }
 
         }
 
         public void ShutdownComponent()
         {
-            s?.Dispose();
-            s = null;
-
-            _loggingService = null;
+            //_loggingService = null;
 
             TotalNumberHeld = -2;
         }
 
         public int? RequestCores(int requestedCores, TaskLoggingContext _taskLoggingContext)
         {
-            if (s is null)
-            {
-                return null;
-            }
-
-            int i;
-
-            // Keep requesting cores until we can't anymore, or we've gotten the number of cores we wanted.
-            for (i = 0; i < requestedCores; i++)
-            {
-                if (!s.WaitOne(0))
-                {
-                    break;
-                }
-            }
-
-            TotalNumberHeld += i;
+            return null;
 
-            _loggingService?.LogComment(_taskLoggingContext.BuildEventContext, Framework.MessageImportance.Low, "ResourceManagerRequestedCores", requestedCores, i, TotalNumberHeld);
-
-            return i;
+            // _loggingService?.LogComment(_taskLoggingContext.BuildEventContext, Framework.MessageImportance.Low, "ResourceManagerRequestedCores", requestedCores, i, TotalNumberHeld);
         }
 
         public void ReleaseCores(int coresToRelease, TaskLoggingContext _taskLoggingContext)
         {
-            if (s is null)
-            {
-                // Since the current implementation of the cross-process resource count uses
-                // named semaphores, it's not usable on non-Windows, so just continue.
-                return;
-            }
-
             ErrorUtilities.VerifyThrow(coresToRelease > 0, "Tried to release {0} cores", coresToRelease);
+            return;
 
-            if (coresToRelease > TotalNumberHeld)
-            {
-                _loggingService?.LogWarning(_taskLoggingContext.BuildEventContext, null, null, "ResourceManagerExcessRelease", coresToRelease);
-
-                coresToRelease = TotalNumberHeld;
-            }
-
-            s.Release(coresToRelease);
-
-            TotalNumberHeld -= coresToRelease;
-
-            _loggingService?.LogComment(_taskLoggingContext.BuildEventContext, Framework.MessageImportance.Low, "ResourceManagerReleasedCores", coresToRelease, TotalNumberHeld);
-        }
-
-        internal void RequireCores(int requestedCores)
-        {
-            if (s is null)
-            {
-                // Since the current implementation of the cross-process resource count uses
-                // named semaphores, it's not usable on non-Windows, so just continue.
-                return;
-            }
-
-            if (!s.WaitOne())
-            {
-                ErrorUtilities.ThrowInternalError("Couldn't get a core to run a task even with infinite timeout");
-            }
+            //_loggingService?.LogComment(_taskLoggingContext.BuildEventContext, Framework.MessageImportance.Low, "ResourceManagerReleasedCores", coresToRelease, TotalNumberHeld);
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index fc7b75da51f..3777ce994af 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -72,7 +72,7 @@ internal class Scheduler : IScheduler
         /// </summary>
         private int _nodeLimitOffset;
 
-        private int _resourceManagedCoresUsed = 0;
+        // private int _resourceManagedCoresUsed = 0;
 
         /// <summary>
         /// { nodeId -> NodeInfo }
@@ -934,7 +934,6 @@ private void AssignUnscheduledRequestsWithConfigurationCountLevelling(List<Sched
                 {
                     if (CanScheduleRequestToNode(request, nodeId))
                     {
-                        _resourceManager.RequireCores(1); // TODO: is it ok to block here?
                         AssignUnscheduledRequestToNode(request, nodeId, responses);
                         idleNodes.Remove(nodeId);
                         break;
@@ -1286,14 +1285,12 @@ private bool AtSchedulingLimit()
                 return false;
             }
 
-            int limit = 1;
-
-            if (_componentHost.BuildParameters.MaxNodeCount > 1)
+            int limit = _componentHost.BuildParameters.MaxNodeCount switch
             {
-                // Delegate the oversubscription factor to the resource manager
-                // but continue to support a manual override here
-                limit = _resourceManager.Count + _nodeLimitOffset;
-            }
+                1 => 1,
+                2 => _componentHost.BuildParameters.MaxNodeCount + 1 + _nodeLimitOffset,
+                _ => _componentHost.BuildParameters.MaxNodeCount + 2 + _nodeLimitOffset,
+            };
 
             // We're at our limit of schedulable requests if: 
             // (1) MaxNodeCount requests are currently executing
diff --git a/src/Shared/UnitTests/MockEngine.cs b/src/Shared/UnitTests/MockEngine.cs
index a85f75230d1..dd8d06ca6ec 100644
--- a/src/Shared/UnitTests/MockEngine.cs
+++ b/src/Shared/UnitTests/MockEngine.cs
@@ -491,44 +491,13 @@ public object UnregisterTaskObject(object key, RegisteredTaskObjectLifetime life
             return obj;
         }
 
-        int runningTotal = 0;
-        Semaphore cpuCount;
         public int? RequestCores(int requestedCores)
         {
-            cpuCount ??= Semaphore.OpenExisting(ResourceSemaphoreName);
-
-            cpuCount.WaitOne();
-            int coresAcquired = 1;
-
-            // Keep requesting cores until we can't anymore, or we've gotten the number of cores we wanted.
-            for (int i = 1; i < requestedCores; i++)
-            {
-                if (cpuCount.WaitOne(0))
-                {
-                    coresAcquired++;
-                }
-                else
-                {
-                    break;
-                }
-            }
-
-            runningTotal += coresAcquired;
-
-            return coresAcquired;
+            return null;
         }
 
         public void ReleaseCores(int coresToRelease)
         {
-            cpuCount ??= Semaphore.OpenExisting(ResourceSemaphoreName);
-
-            coresToRelease = Math.Min(runningTotal, coresToRelease);
-
-            // if we attempt to release 0 cores, Release throws an exception.
-            if(coresToRelease > 0)
-            {
-                cpuCount.Release(coresToRelease);
-            }
         }
     }
 }
