diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
index 07e725c703a..eb55d482ba0 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCachePluginBase.cs
@@ -1,6 +1,7 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.Execution;
@@ -44,6 +45,7 @@ public abstract Task<CacheResult> GetCacheResultAsync(
         /// <summary>
         ///     Called for each file access from an MSBuild node or one of its children.
         /// </summary>
+        [CLSCompliant(false)]
         public virtual void HandleFileAccess(FileAccessContext fileAccessContext, FileAccessData fileAccessData)
         {
         }
@@ -51,6 +53,7 @@ public virtual void HandleFileAccess(FileAccessContext fileAccessContext, FileAc
         /// <summary>
         ///     Called for each new child process created by an MSBuild node or one of its children.
         /// </summary>
+        [CLSCompliant(false)]
         public virtual void HandleProcess(FileAccessContext fileAccessContext, ProcessData processData)
         {
         }
diff --git a/src/Framework/EngineServices.cs b/src/Framework/EngineServices.cs
index 8d61e37c032..853663d4e5b 100644
--- a/src/Framework/EngineServices.cs
+++ b/src/Framework/EngineServices.cs
@@ -59,6 +59,7 @@ public abstract class EngineServices
         /// Reports a file access from a task.
         /// </summary>
         /// <param name="fileAccessData">The file access to report.</param>
+        [CLSCompliant(false)]
         public virtual void ReportFileAccess(FileAccessData fileAccessData) => throw new NotImplementedException();
     }
 }
diff --git a/src/Framework/FileAccess/DesiredAccess.cs b/src/Framework/FileAccess/DesiredAccess.cs
index a205acf9d03..1bb2e4bb492 100644
--- a/src/Framework/FileAccess/DesiredAccess.cs
+++ b/src/Framework/FileAccess/DesiredAccess.cs
@@ -12,11 +12,9 @@ namespace Microsoft.Build.Framework.FileAccess
     /// See https://learn.microsoft.com/en-us/windows/win32/fileio/file-access-rights-constants for a full list of values.
     /// </remarks>
     [Flags]
+    [CLSCompliant(false)]
 
-    // TODO dshepelev: Fix suppression.
-#pragma warning disable CS3009 // Base type is not CLS-compliant.
     public enum DesiredAccess : uint
-#pragma warning restore CS3009 // Base type is not CLS-compliant.
     {
         /// <summary>
         /// For a directory, the right to list the contents of the directory.
diff --git a/src/Framework/FileAccess/FileAccessData.cs b/src/Framework/FileAccess/FileAccessData.cs
index b61af0a7fcb..2f95ce9d471 100644
--- a/src/Framework/FileAccess/FileAccessData.cs
+++ b/src/Framework/FileAccess/FileAccessData.cs
@@ -1,6 +1,8 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
+
 namespace Microsoft.Build.Framework.FileAccess
 {
     /// <summary>
@@ -15,13 +17,12 @@ namespace Microsoft.Build.Framework.FileAccess
     /// <param name="Path">The path being accessed.</param>
     /// <param name="ProcessArgs">The process arguments.</param>
     /// <param name="IsAnAugmentedFileAccess">Whether the file access is augmented.</param>
+    [CLSCompliant(false)]
     public readonly record struct FileAccessData(
         ReportedFileOperation Operation,
         RequestedAccess RequestedAccess,
-#pragma warning disable CS3001, CS3003 // Argument type is not CLS-compliant; Type is not CLS-compliant.
         uint ProcessId,
         uint Error,
-#pragma warning restore CS3001, CS3003 // Argument type is not CLS-compliant; Type is not CLS-compliant.
         DesiredAccess DesiredAccess,
         FlagsAndAttributes FlagsAndAttributes,
         string Path,
diff --git a/src/Framework/FileAccess/FlagsAndAttributes.cs b/src/Framework/FileAccess/FlagsAndAttributes.cs
index b386c2119f4..00e0b9a5c2d 100644
--- a/src/Framework/FileAccess/FlagsAndAttributes.cs
+++ b/src/Framework/FileAccess/FlagsAndAttributes.cs
@@ -9,11 +9,8 @@ namespace Microsoft.Build.Framework.FileAccess
     /// The file or device attributes and flags.
     /// </summary>
     [Flags]
-
-    // TODO dshepelev: Fix suppression.
-#pragma warning disable CS3009 // Base type is not CLS-compliant.
+    [CLSCompliant(false)]
     public enum FlagsAndAttributes : uint
-#pragma warning restore CS3009 // Base type is not CLS-compliant.
     {
         /// <summary>
         /// The file is read only. Applications can read the file but cannot write to or delete it.
diff --git a/src/Framework/FileAccess/ProcessData.cs b/src/Framework/FileAccess/ProcessData.cs
index 18e1f57366a..aa7a17b57cd 100644
--- a/src/Framework/FileAccess/ProcessData.cs
+++ b/src/Framework/FileAccess/ProcessData.cs
@@ -14,19 +14,13 @@ namespace Microsoft.Build.Framework.FileAccess
     /// <param name="CreationDateTime">The creation date time.</param>
     /// <param name="ExitDateTime">The exit date time.</param>
     /// <param name="ExitCode">The exit code.</param>
+    [CLSCompliant(false)]
     public readonly record struct ProcessData(
         string ProcessName,
 
-        // TODO dshepelev: Fix suppression.
-#pragma warning disable CS3001, CS3003 // Argument type is not CLS-compliant; Type is not CLS-compliant.
         uint ProcessId,
         uint ParentProcessId,
-#pragma warning restore CS3001, CS3003 // Argument type is not CLS-compliant; Type is not CLS-compliant.
         DateTime CreationDateTime,
         DateTime ExitDateTime,
-
-        // TODO dshepelev: Fix suppression.
-#pragma warning disable CS3001, CS3003 // Argument type is not CLS-compliant; Type is not CLS-compliant.
         uint ExitCode);
-#pragma warning restore CS3001, CS3003 // Argument type is not CLS-compliant; Type is not CLS-compliant.
 }
