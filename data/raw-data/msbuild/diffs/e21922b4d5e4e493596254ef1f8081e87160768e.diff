diff --git a/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs b/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
index 8bd5360d434..82bfa74f78e 100644
--- a/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/CacheAggregator_Tests.cs
@@ -142,34 +142,74 @@ public void RejectCachesWithMismatchedIds()
             }
         }
 
-        [Fact]
-        public void RejectCollidingConfigurationsFromSeparateCaches()
+        [Theory]
+        [InlineData(true, true, null)]
+        [InlineData(true, false, "Input caches should not contain duplicate entries where only some are exempt from isolation constraints")]
+        [InlineData(false, true, "Input caches should not contain duplicate entries where only some are exempt from isolation constraints")]
+        [InlineData(false, false, "Input caches should not contain entries for the same configuration")]
+        public void RejectCollidingConfigurationsFromSeparateCaches(bool config1IsExempt, bool config2IsExempt, string expectedErrorMessage)
         {
             // collides with the config id from configCache2
+            var config1 = new BuildRequestConfiguration(1,
+                new BuildRequestData(
+                    projectFullPath: "path",
+                    globalProperties: new Dictionary<string, string> {["p"] = "v"},
+                    toolsVersion: "13",
+                    targetsToBuild: new[] {"foo"},
+                    hostServices: null), "13")
+            {
+                SkippedFromStaticGraphIsolationConstraints = config1IsExempt
+            };
+
             var configCache1 = new ConfigCache();
-            configCache1.AddConfiguration(new BuildRequestConfiguration(configId: 1, new BuildRequestData("path", new Dictionary<string, string>(){["p"] = "v"}, "13", new []{"a", "b"}, null), "13"));
+            configCache1.AddConfiguration(config1);
 
             var resultsCache1 = new ResultsCache();
-            var buildResult11 = new BuildResult(new BuildRequest(1, 2, configurationId: 1, new List<string>(){"a", "b"}, null, BuildEventContext.Invalid, null));
-            buildResult11.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult());
+            var buildResult11 = new BuildResult(new BuildRequest(1, 2, configurationId: 1,
+                new List<string>() {"foo"}, null, BuildEventContext.Invalid, null));
+            buildResult11.AddResultsForTarget("foo", GetNonEmptySucceedingTargetResult());
             resultsCache1.AddResult(buildResult11);
 
+            var config2 = new BuildRequestConfiguration(1,
+                new BuildRequestData(
+                    projectFullPath: "path",
+                    globalProperties: new Dictionary<string, string> {["p"] = "v"},
+                    toolsVersion: "13",
+                    targetsToBuild: new[] {"bar"},
+                    hostServices: null), "13")
+            {
+                SkippedFromStaticGraphIsolationConstraints = config2IsExempt
+            };
+
             var configCache2 = new ConfigCache();
-            configCache2.AddConfiguration(new BuildRequestConfiguration(configId: 1, new BuildRequestData("path", new Dictionary<string, string>(){["p"] = "v"}, "13", new []{"a", "b"}, null), "13"));
+            configCache2.AddConfiguration(config2);
 
             var resultsCache2 = new ResultsCache();
-            var buildResult21 = new BuildResult(new BuildRequest(1, 2, configurationId: 1, new List<string>(){"e", "f"}, null, BuildEventContext.Invalid, null));
-            buildResult21.AddResultsForTarget("a", GetNonEmptySucceedingTargetResult());
+            var buildResult21 = new BuildResult(new BuildRequest(1, 2, configurationId: 1,
+                new List<string>() {"e", "f"}, null, BuildEventContext.Invalid, null));
+            buildResult21.AddResultsForTarget("bar", GetNonEmptySucceedingTargetResult());
             resultsCache2.AddResult(buildResult21);
 
             aggregator.Add(configCache1, resultsCache1);
             aggregator.Add(configCache2, resultsCache2);
 
-            using (var env = TestEnvironment.Create())
+            if (expectedErrorMessage == null)
             {
+                var aggregatedCaches = aggregator.Aggregate();
+                aggregatedCaches.ConfigCache.Count().ShouldBe(1);
+                aggregatedCaches.ResultsCache.Count().ShouldBe(1);
+
+                // In case of accepted duplicate configs, first one wins.
+                aggregatedCaches.ConfigCache.First().TargetNames.ShouldBeEquivalentTo(new []{"foo"});
+                aggregatedCaches.ResultsCache.First().HasResultsForTarget("foo");
+            }
+            else
+            {
+                using var env = TestEnvironment.Create();
+
                 env.SetEnvironmentVariable("MSBUILDDONOTLAUNCHDEBUGGER", "1");
                 var e = Should.Throw<InternalErrorException>(() => aggregator.Aggregate());
-                e.Message.ShouldContain("Input caches should not contain entries for the same configuration");
+                e.Message.ShouldContain(expectedErrorMessage);
             }
         }
 
diff --git a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
index 7cc2060da0f..251c6fe20fe 100644
--- a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
+++ b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
@@ -12,6 +12,7 @@
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
+using static Microsoft.Build.UnitTests.Helpers;
 
 namespace Microsoft.Build.Graph.UnitTests
 {
@@ -376,6 +377,131 @@ public void UndeclaredReferenceEnforcementShouldNormalizeFilePaths(Func<string,
                 msbuildOnDeclaredReferenceModifier: msbuildProjectModifier);
         }
 
+        [Fact]
+        public void ProjectExemptFromIsolationIsIncludedInTheOutputResultsCacheFile()
+        {
+            var exemptProjectFile = _env.CreateFile(
+                "ExemptProject.proj",
+                @"
+                <Project>
+                    <Target Name=`BuildExemptProject`>
+                        <Message Text=`BuildExemptProject` />
+                    </Target>
+                </Project>".Cleanup()).Path;
+
+            var graph = CreateProjectGraph(
+                _env,
+                dependencyEdges: new Dictionary<int, int[]>
+                {
+                    {1, new[] {3, 4}},
+                    {2, new[] {3, 4}},
+                },
+                extraContentPerProjectNumber: new Dictionary<int, string>
+                {
+                    {
+                        1,
+                        $@"
+                          <ItemGroup>
+                            <{ItemTypeNames.GraphIsolationExemptReference} Include='{exemptProjectFile}' />
+                          </ItemGroup>
+
+                          <Target Name=`Build` DependsOnTargets=`BeforeBuild`>
+                            <MSBuild Projects=`@(ProjectReference)` Targets='Build'/>
+                          </Target>
+
+                          <Target Name=`BeforeBuild`>
+                            <MSBuild Projects=`{exemptProjectFile}` Targets='BuildExemptProject'/>
+                          </Target>"
+                    },
+                    {
+                        2,
+                        @"
+                          <Target Name=`Build`>
+                            <MSBuild Projects=`@(ProjectReference)` Targets='Build'/>
+                          </Target>"
+                    },
+                    {
+                        3,
+                        $@"
+                          <ItemGroup>
+                            <{ItemTypeNames.GraphIsolationExemptReference} Include='{exemptProjectFile}' />
+                          </ItemGroup>
+
+                          <Target Name=`Build` DependsOnTargets=`BeforeBuild`>
+                            <Message Text=`Build` />
+                          </Target>
+
+                          <Target Name=`BeforeBuild`>
+                            <MSBuild Projects=`{exemptProjectFile}` Targets='BuildExemptProject'/>
+                          </Target>"
+                    },
+                    {
+                        4,
+                        $@"
+                          <ItemGroup>
+                            <{ItemTypeNames.GraphIsolationExemptReference} Include='{exemptProjectFile}' />
+                          </ItemGroup>
+
+                          <Target Name=`Build` DependsOnTargets=`BeforeBuild`>
+                            <Message Text=`Build` />
+                          </Target>
+
+                          <Target Name=`BeforeBuild`>
+                            <MSBuild Projects=`{exemptProjectFile}` Targets='BuildExemptProject'/>
+                          </Target>"
+                    }
+                }
+                );
+
+            var cacheFiles = new Dictionary<ProjectGraphNode, string>();
+
+            var buildResults = ResultCacheBasedBuilds_Tests.BuildGraphUsingCacheFiles(
+                _env,
+                graph: graph,
+                expectedLogOutputPerNode: new Dictionary<ProjectGraphNode, string[]>(),
+                outputCaches: cacheFiles,
+                generateCacheFiles: true,
+                assertBuildResults: false);
+
+            foreach (var result in buildResults)
+            {
+                result.Value.Result.OverallResult.ShouldBe(BuildResultCode.Success);
+            }
+
+            cacheFiles.Count.ShouldBe(4);
+
+            var caches = cacheFiles.ToDictionary(kvp => kvp.Key, kvp => CacheSerialization.DeserializeCaches(kvp.Value));
+
+            // 1 does not contain the exempt project because it does not build it, it reads it from the input caches
+            var projectsWhoseOutputCacheShouldContainTheExemptProject = new[] {3, 4};
+
+            foreach (var cache in caches)
+            {
+                cache.Value.exception.ShouldBeNull();
+                var projectNumber = ProjectNumber(cache.Key.ProjectInstance.FullPath);
+
+                cache.Value.ConfigCache.ShouldContain(c => ProjectNumber(c.ProjectFullPath) == projectNumber);
+
+                if (projectsWhoseOutputCacheShouldContainTheExemptProject.Contains(projectNumber))
+                {
+                    cache.Value.ConfigCache.ShouldContain(c => c.ProjectFullPath.Equals(exemptProjectFile));
+                    cache.Value.ConfigCache.Count().ShouldBe(2);
+
+                    cache.Value.ResultsCache.ShouldContain(r => r.HasResultsForTarget("BuildExemptProject"));
+                    cache.Value.ResultsCache.Count().ShouldBe(2);
+                }
+                else
+                {
+                    cache.Value.ConfigCache.Count().ShouldBe(1);
+
+                    cache.Value.ResultsCache.ShouldNotContain(r => r.HasResultsForTarget("BuildExemptProject"));
+                    cache.Value.ResultsCache.Count().ShouldBe(1);
+                }
+            }
+        }
+
+        private static int ProjectNumber(string path) => int.Parse(Path.GetFileNameWithoutExtension(path));
+
         private void AssertBuild(
             string[] targets,
             Action<BuildResult, MockLogger> assert,
diff --git a/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs b/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
index b5c5b6f4923..99a87ab488d 100644
--- a/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
+++ b/src/Build.UnitTests/Graph/ResultCacheBasedBuilds_Tests.cs
@@ -546,7 +546,7 @@ public void CacheFilesShouldNotContainTransitiveContent()
                     buildParameters.OutputResultsCacheFile = outputCaches[node];
                 }
 
-                var logger = new MockLogger();
+                var logger = new MockLogger(env.Output);
 
                 buildParameters.Loggers = new[] {logger};
 
diff --git a/src/Build/BackEnd/BuildManager/CacheAggregator.cs b/src/Build/BackEnd/BuildManager/CacheAggregator.cs
index 7c4530234cb..495bc999f99 100644
--- a/src/Build/BackEnd/BuildManager/CacheAggregator.cs
+++ b/src/Build/BackEnd/BuildManager/CacheAggregator.cs
@@ -63,14 +63,30 @@ private void InsertCaches(IConfigCache configCache, IResultsCache resultsCache)
                 return;
             }
 
-            var seenConfigIds = new HashSet<int>();
+            var acceptedConfigs = new HashSet<int>();
+            var skipedConfigs = new HashSet<int>();
             var configIdMapping = new Dictionary<int, int>();
 
             foreach (var config in configs)
             {
-                seenConfigIds.Add(config.ConfigurationId);
+                var existingConfig = _aggregatedConfigCache.GetMatchingConfiguration(config);
 
-                ErrorUtilities.VerifyThrow(_aggregatedConfigCache.GetMatchingConfiguration(config) == null, "Input caches should not contain entries for the same configuration");
+                if (existingConfig != null && !(existingConfig.SkippedFromStaticGraphIsolationConstraints && config.SkippedFromStaticGraphIsolationConstraints))
+                {
+                    throw existingConfig.SkippedFromStaticGraphIsolationConstraints || config.SkippedFromStaticGraphIsolationConstraints
+                        ? new InternalErrorException(
+                            $"Input caches should not contain duplicate entries where only some are exempt from isolation constraints: {existingConfig.ProjectFullPath}")
+                        : new InternalErrorException($"Input caches should not contain entries for the same configuration: {existingConfig.ProjectFullPath}");
+                }
+
+                if (existingConfig != null && (existingConfig.SkippedFromStaticGraphIsolationConstraints && config.SkippedFromStaticGraphIsolationConstraints))
+                {
+                    skipedConfigs.Add(config.ConfigurationId);
+                    // If conflict is allowed, resolve by keeping the existing config.
+                    continue;
+                }
+
+                acceptedConfigs.Add(config.ConfigurationId);
 
                 _lastConfigurationId = _nextConfigurationId();
                 configIdMapping[config.ConfigurationId] = _lastConfigurationId;
@@ -83,7 +99,13 @@ private void InsertCaches(IConfigCache configCache, IResultsCache resultsCache)
 
             foreach (var result in results)
             {
-                ErrorUtilities.VerifyThrow(seenConfigIds.Contains(result.ConfigurationId), "Each result should have a corresponding configuration. Otherwise the caches are not consistent");
+                if (skipedConfigs.Contains(result.ConfigurationId))
+                {
+                    // If a config has been skipped, do not add its corresponding result.
+                    continue;
+                }
+
+                ErrorUtilities.VerifyThrow(acceptedConfigs.Contains(result.ConfigurationId), "Each result should have a corresponding configuration. Otherwise the caches are not consistent");
 
                 _aggregatedResultsCache.AddResult(
                     new BuildResult(
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index d34a2df0426..fbe6ab70363 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -1586,6 +1586,11 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,
                 {
                     emitNonErrorLogs(_componentHost.LoggingService);
 
+                    if (request.SkipStaticGraphIsolationConstraints)
+                    {
+                        _configCache[request.ConfigurationId].SkippedFromStaticGraphIsolationConstraints = true;
+                    }
+
                     // Ensure there is no affinity mismatch between this request and a previous request of the same configuration.
                     NodeAffinity requestAffinity = GetNodeAffinityForRequest(request);
                     NodeAffinity existingRequestAffinity = NodeAffinity.Any;
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index 301a9246a07..b8f74a16d05 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -241,6 +241,7 @@ private BuildRequestConfiguration(int configId, BuildRequestConfiguration other)
             IsCacheable = other.IsCacheable;
             _configId = configId;
             TargetNames = other.TargetNames;
+            _skippedFromStaticGraphIsolationConstraints = other._skippedFromStaticGraphIsolationConstraints;
         }
 
         /// <summary>
@@ -547,6 +548,12 @@ internal int ResultsNodeId
             set => _resultsNodeId = value;
         }
 
+        public bool SkippedFromStaticGraphIsolationConstraints
+        {
+            get => _skippedFromStaticGraphIsolationConstraints;
+            set => _skippedFromStaticGraphIsolationConstraints = value;
+        }
+
         /// <summary>
         /// Implementation of the equality operator.
         /// </summary>
@@ -678,6 +685,7 @@ public List<string> GetTargetsUsedToBuildRequest(BuildRequest request)
         }
 
         private Func<string, bool> shouldSkipStaticGraphIsolationOnReference;
+        private bool _skippedFromStaticGraphIsolationConstraints;
 
         public bool ShouldSkipIsolationConstraintsForReference(string referenceFullPath)
         {
@@ -804,6 +812,7 @@ public void Translate(ITranslator translator)
             translator.Translate(ref _resultsNodeId);
             translator.Translate(ref _savedCurrentDirectory);
             translator.TranslateDictionary(ref _savedEnvironmentVariables, StringComparer.OrdinalIgnoreCase);
+            translator.Translate(ref _skippedFromStaticGraphIsolationConstraints);
 
             // if the entire state is translated, then the transferred state, if exists, represents the full evaluation data
             if (_translateEntireProjectInstanceState &&
@@ -823,6 +832,7 @@ internal void TranslateForFutureUse(ITranslator translator)
             translator.Translate(ref _projectDefaultTargets);
             translator.Translate(ref _projectInitialTargets);
             translator.TranslateDictionary(ref _globalProperties, ProjectPropertyInstance.FactoryForDeserialization);
+            translator.Translate(ref _skippedFromStaticGraphIsolationConstraints);
         }
 
         /// <summary>
