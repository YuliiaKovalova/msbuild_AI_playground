diff --git a/src/Tasks/RegisterAssembly.cs b/src/Tasks/RegisterAssembly.cs
index ecd34871a69..e68e23bbaf4 100644
--- a/src/Tasks/RegisterAssembly.cs
+++ b/src/Tasks/RegisterAssembly.cs
@@ -74,8 +74,7 @@ public override bool Execute()
 
             if ((AssemblyListFile != null) && (AssemblyListFile.ItemSpec.Length > 0))
             {
-                cacheFile = (AssemblyRegistrationCache)StateFileBase.DeserializeCache(AssemblyListFile.ItemSpec, Log, typeof(AssemblyRegistrationCache)) ??
-                            new AssemblyRegistrationCache();
+                cacheFile = StateFileBase.DeserializeCache<AssemblyRegistrationCache>(AssemblyListFile.ItemSpec, Log) ?? new AssemblyRegistrationCache();
             }
 
             bool taskReturnValue = true;
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 6691ac91dd5..654bb1be94c 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -394,8 +394,7 @@ private FileState GetFileState(string path)
         private FileState ComputeFileStateFromCachesAndDisk(string path)
         {
             DateTime lastModified = GetAndCacheLastModified(path);
-            FileState cachedInstanceFileState = (FileState)instanceLocalFileStateCache[path];
-            bool isCachedInInstance = cachedInstanceFileState != null;
+            bool isCachedInInstance = instanceLocalFileStateCache.TryGetValue(path, out FileState cachedInstanceFileState);
             bool isCachedInProcess =
                 s_processWideFileStateCache.TryGetValue(path, out FileState cachedProcessFileState);
             
@@ -614,12 +613,12 @@ internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, Ta
         /// </summary>
         internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
         {
-            Hashtable newInstanceLocalFileStateCache = new Hashtable(instanceLocalFileStateCache.Count);
-            foreach (DictionaryEntry kvp in instanceLocalFileStateCache)
+            Dictionary<string, FileState> newInstanceLocalFileStateCache = new Dictionary<string, FileState>(instanceLocalFileStateCache.Count);
+            foreach (KeyValuePair<string, FileState> kvp in instanceLocalFileStateCache)
             {
                 // Add MVID to allow us to verify that we are using the same assembly later
-                string absolutePath = (string)kvp.Key;
-                FileState fileState = (FileState)kvp.Value;
+                string absolutePath = kvp.Key;
+                FileState fileState = kvp.Value;
                 using (var reader = new PEReader(File.OpenRead(absolutePath)))
                 {
                     var metadataReader = reader.GetMetadataReader();
