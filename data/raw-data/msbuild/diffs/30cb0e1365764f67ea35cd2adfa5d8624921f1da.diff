diff --git a/src/Build/Definition/ProjectProperty.cs b/src/Build/Definition/ProjectProperty.cs
index 971dafabfc6..ae8dfac6675 100644
--- a/src/Build/Definition/ProjectProperty.cs
+++ b/src/Build/Definition/ProjectProperty.cs
@@ -98,7 +98,7 @@ string IProperty.EvaluatedValueEscaped
             [DebuggerStepThrough]
             get
             {
-                if ((this as IProperty).IsEnvironmentProperty && this is ProjectPropertyNotXmlBacked notXmlBacked && notXmlBacked.loggingContext?.IsValid == true && !_loggedEnvProperty)
+                if (IsEnvironmentProperty && this is ProjectPropertyNotXmlBacked notXmlBacked && notXmlBacked.loggingContext?.IsValid == true && !_loggedEnvProperty)
                 {
                     EnvironmentVariableReadEventArgs args = new(Name, EvaluatedValueEscapedInternal);
                     args.BuildEventContext = notXmlBacked.loggingContext.BuildEventContext;
@@ -219,8 +219,6 @@ string IValued.EscapedValue
             get => EvaluatedValueEscapedInternal;
         }
 
-        bool IProperty.IsEnvironmentProperty { get => IsEnvironmentProperty; set => throw new NotImplementedException(); }
-
         #region IEquatable<ProjectProperty> Members
 
         /// <summary>
diff --git a/src/Build/Evaluation/IProperty.cs b/src/Build/Evaluation/IProperty.cs
index a5342841b89..ed57eef4ea3 100644
--- a/src/Build/Evaluation/IProperty.cs
+++ b/src/Build/Evaluation/IProperty.cs
@@ -35,11 +35,5 @@ string EvaluatedValueEscaped
         {
             get;
         }
-
-        bool IsEnvironmentProperty
-        {
-            get;
-            set;
-        }
     }
 }
diff --git a/src/Build/Instance/ProjectPropertyInstance.cs b/src/Build/Instance/ProjectPropertyInstance.cs
index 72461b7e62d..859c280a704 100644
--- a/src/Build/Instance/ProjectPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyInstance.cs
@@ -85,6 +85,8 @@ public string EvaluatedValue
 
         private bool _loggedEnvProperty = false;
 
+        internal bool IsEnvironmentProperty { get; set; }
+
         /// <summary>
         /// Evaluated value of the property, escaped as necessary.
         /// Setter assumes caller has protected global properties, if necessary.
@@ -94,7 +96,7 @@ string IProperty.EvaluatedValueEscaped
         {
             get
             {
-                if ((this as IProperty).IsEnvironmentProperty && loggingContext?.IsValid == true && !_loggedEnvProperty)
+                if (IsEnvironmentProperty && loggingContext?.IsValid == true && !_loggedEnvProperty)
                 {
                     EnvironmentVariableReadEventArgs args = new(Name, _escapedValue);
                     args.BuildEventContext = loggingContext.BuildEventContext;
@@ -117,8 +119,6 @@ string IProperty.EvaluatedValueEscaped
         [DebuggerBrowsable(DebuggerBrowsableState.Never)]
         string IValued.EscapedValue => _escapedValue;
 
-        bool IProperty.IsEnvironmentProperty { get; set; }
-
         #region IEquatable<ProjectPropertyInstance> Members
 
         /// <summary>
@@ -233,7 +233,7 @@ internal static ProjectPropertyInstance Create(string name, string escapedValue,
         /// </summary>
         internal static ProjectPropertyInstance Create(ProjectPropertyInstance that)
         {
-            return Create(that._name, that._escapedValue, mayBeReserved: true /* already validated */, isImmutable: that.IsImmutable, ((IProperty)that).IsEnvironmentProperty);
+            return Create(that._name, that._escapedValue, mayBeReserved: true /* already validated */, isImmutable: that.IsImmutable, that.IsEnvironmentProperty);
         }
 
         /// <summary>
@@ -242,7 +242,7 @@ internal static ProjectPropertyInstance Create(ProjectPropertyInstance that)
         /// </summary>
         internal static ProjectPropertyInstance Create(ProjectPropertyInstance that, bool isImmutable)
         {
-            return Create(that._name, that._escapedValue, mayBeReserved: true /* already validated */, isImmutable: isImmutable, ((IProperty)that).IsEnvironmentProperty);
+            return Create(that._name, that._escapedValue, mayBeReserved: true /* already validated */, isImmutable: isImmutable, that.IsEnvironmentProperty);
         }
 
         /// <summary>
@@ -317,7 +317,7 @@ private static ProjectPropertyInstance Create(string name, string escapedValue,
             }
 
             ProjectPropertyInstance instance = isImmutable ? new ProjectPropertyInstanceImmutable(name, escapedValue) : new ProjectPropertyInstance(name, escapedValue);
-            ((IProperty)instance).IsEnvironmentProperty = isEnvironmentProperty;
+            instance.IsEnvironmentProperty = isEnvironmentProperty;
             instance.loggingContext = loggingContext;
             return instance;
         }
