diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index 4c273b94f41..daf2112d3bf 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -1163,16 +1163,12 @@ public UnregisterAssembly() { }
     public sealed partial class Unzip : Microsoft.Build.Tasks.TaskExtension, Microsoft.Build.Framework.ICancelableTask, Microsoft.Build.Framework.ITask
     {
         public Unzip() { }
-        [Microsoft.Build.Framework.OutputAttribute]
-        public Microsoft.Build.Framework.ITaskItem[] DestinationFiles { get { throw null; } }
         [Microsoft.Build.Framework.RequiredAttribute]
         public Microsoft.Build.Framework.ITaskItem DestinationFolder { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public bool OverwriteReadOnlyFiles { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public bool SkipUnchangedFiles { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         [Microsoft.Build.Framework.RequiredAttribute]
         public Microsoft.Build.Framework.ITaskItem[] SourceFiles { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
-        [Microsoft.Build.Framework.OutputAttribute]
-        public Microsoft.Build.Framework.ITaskItem[] UnzippedFiles { get { throw null; } }
         public void Cancel() { }
         public override bool Execute() { throw null; }
     }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 70156e740e0..dc14a5dbaf8 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -669,16 +669,12 @@ public Touch() { }
     public sealed partial class Unzip : Microsoft.Build.Tasks.TaskExtension, Microsoft.Build.Framework.ICancelableTask, Microsoft.Build.Framework.ITask
     {
         public Unzip() { }
-        [Microsoft.Build.Framework.OutputAttribute]
-        public Microsoft.Build.Framework.ITaskItem[] DestinationFiles { get { throw null; } }
         [Microsoft.Build.Framework.RequiredAttribute]
         public Microsoft.Build.Framework.ITaskItem DestinationFolder { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public bool OverwriteReadOnlyFiles { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public bool SkipUnchangedFiles { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         [Microsoft.Build.Framework.RequiredAttribute]
         public Microsoft.Build.Framework.ITaskItem[] SourceFiles { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
-        [Microsoft.Build.Framework.OutputAttribute]
-        public Microsoft.Build.Framework.ITaskItem[] UnzippedFiles { get { throw null; } }
         public void Cancel() { }
         public override bool Execute() { throw null; }
     }
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index 75c813a5766..63946d5b6e9 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -2,6 +2,7 @@
 using System.Collections;
 using System.Collections.Generic;
 using System.IO;
+using System.IO.Compression;
 using System.Linq;
 using System.Text.RegularExpressions;
 using Microsoft.Build.Shared;
@@ -605,4 +606,32 @@ public override void Revert()
             Directory.SetCurrentDirectory(_originalValue);
         }
     }
+
+    public class TransientZipArchive : TransientTestState
+    {
+        private TransientZipArchive()
+        {
+        }
+
+        public string Path { get; set; }
+
+        public static TransientZipArchive Create(TransientTestFolder source, TransientTestFolder destination, string filename = "test.zip")
+        {
+            Directory.CreateDirectory(destination.FolderPath);
+
+            string path = System.IO.Path.Combine(destination.FolderPath, filename);
+
+            ZipFile.CreateFromDirectory(source.FolderPath, path);
+
+            return new TransientZipArchive
+            {
+                Path = path
+            };
+        }
+
+        public override void Revert()
+        {
+            FileUtilities.DeleteNoThrow(Path);
+        }
+    }
 }
diff --git a/src/Tasks.UnitTests/Unzip_Tests.cs b/src/Tasks.UnitTests/Unzip_Tests.cs
new file mode 100644
index 00000000000..f4f899607cb
--- /dev/null
+++ b/src/Tasks.UnitTests/Unzip_Tests.cs
@@ -0,0 +1,154 @@
+ï»¿using Microsoft.Build.Framework;
+using Microsoft.Build.UnitTests;
+using Microsoft.Build.Utilities;
+using Shouldly;
+using System.IO;
+using Xunit;
+
+namespace Microsoft.Build.Tasks.UnitTests
+{
+    public class Unzip_Tests
+    {
+        private readonly MockEngine _mockEngine = new MockEngine();
+
+        [Fact]
+        public void CanOverwriteReadOnlyFile()
+        {
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder source = testEnvironment.CreateFolder(createFolder: true);
+                TransientTestFolder destination = testEnvironment.CreateFolder(createFolder: false);
+                TransientTestFile file1 = testEnvironment.CreateFile(source, "638AF4AE88A146E09CB69FE1CA7083DC.txt", "file1");
+
+                new FileInfo(file1.Path).IsReadOnly = true;
+
+                TransientZipArchive zipArchive = TransientZipArchive.Create(source, destination);
+
+                Unzip unzip = new Unzip
+                {
+                    BuildEngine = _mockEngine,
+                    DestinationFolder = new TaskItem(source.FolderPath),
+                    OverwriteReadOnlyFiles = true,
+                    SkipUnchangedFiles = false,
+                    SourceFiles = new ITaskItem[] { new TaskItem(zipArchive.Path) }
+                };
+
+                unzip.Execute().ShouldBeTrue(() => _mockEngine.Log);
+
+                _mockEngine.Log.ShouldContain("638AF4AE88A146E09CB69FE1CA7083DC", () => _mockEngine.Log);
+            }
+        }
+
+        [Fact]
+        public void CanUnzip()
+        {
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder source = testEnvironment.CreateFolder(createFolder: true);
+                TransientTestFolder destination = testEnvironment.CreateFolder(createFolder: false);
+                testEnvironment.CreateFile(source, "BE78A17D30144B549D21F71D5C633F7D.txt", "file1");
+                testEnvironment.CreateFile(source, "A04FF4B88DF14860B7C73A8E75A4FB76.txt", "file2");
+
+                TransientZipArchive zipArchive = TransientZipArchive.Create(source, testEnvironment.CreateFolder(createFolder: true));
+
+                Unzip unzip = new Unzip
+                {
+                    BuildEngine = _mockEngine,
+                    DestinationFolder = new TaskItem(destination.FolderPath),
+                    OverwriteReadOnlyFiles = true,
+                    SkipUnchangedFiles = false,
+                    SourceFiles = new ITaskItem[] { new TaskItem(zipArchive.Path) }
+                };
+
+                unzip.Execute().ShouldBeTrue(() => _mockEngine.Log);
+
+                _mockEngine.Log.ShouldContain(Path.Combine(destination.FolderPath, "BE78A17D30144B549D21F71D5C633F7D.txt"), () => _mockEngine.Log);
+                _mockEngine.Log.ShouldContain(Path.Combine(destination.FolderPath, "A04FF4B88DF14860B7C73A8E75A4FB76.txt"), () => _mockEngine.Log);
+            }
+        }
+
+        [Fact]
+        public void LogsErrorIfDirectoryCannotBeCreated()
+        {
+            Unzip unzip = new Unzip
+            {
+                BuildEngine = _mockEngine,
+                DestinationFolder = new TaskItem(@"Y:\foo")
+            };
+
+            unzip.Execute().ShouldBeFalse(() => _mockEngine.Log);
+
+            _mockEngine.Log.ShouldContain("MSB3911", () => _mockEngine.Log);
+        }
+
+        [Fact]
+        public void LogsErrorIfReadOnlyFileCannotBeOverwitten()
+        {
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder source = testEnvironment.CreateFolder(createFolder: true);
+                TransientTestFolder destination = testEnvironment.CreateFolder(createFolder: false);
+                TransientTestFile file1 = testEnvironment.CreateFile(source, "D6DFD219DACE48F8B86EFCDF98433333.txt", "file1");
+
+                new FileInfo(file1.Path).IsReadOnly = true;
+
+                TransientZipArchive zipArchive = TransientZipArchive.Create(source, destination);
+
+                Unzip unzip = new Unzip
+                {
+                    BuildEngine = _mockEngine,
+                    DestinationFolder = new TaskItem(source.FolderPath),
+                    OverwriteReadOnlyFiles = false,
+                    SkipUnchangedFiles = false,
+                    SourceFiles = new ITaskItem[] { new TaskItem(zipArchive.Path) }
+                };
+
+                unzip.Execute().ShouldBeFalse(() => _mockEngine.Log);
+
+                _mockEngine.Log.ShouldContain("D6DFD219DACE48F8B86EFCDF98433333.txt' is denied", () => _mockEngine.Log);
+            }
+        }
+
+        [Fact]
+        public void LogsErrorIfSourceFileCannotBeOpened()
+        {
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: false);
+
+                TransientTestFile file = testEnvironment.CreateFile("foo.txt", "foo");
+
+                Unzip unzip = new Unzip
+                {
+                    BuildEngine = _mockEngine,
+                    DestinationFolder = new TaskItem(folder.FolderPath),
+                    SourceFiles = new ITaskItem[] { new TaskItem(file.Path), }
+                };
+
+                unzip.Execute().ShouldBeFalse(() => _mockEngine.Log);
+
+                _mockEngine.Log.ShouldContain("MSB3913", () => _mockEngine.Log);
+            }
+        }
+
+        [Fact]
+        public void LogsErrorIfSourceFileDoesNotExist()
+        {
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = testEnvironment.CreateFolder(createFolder: false);
+
+                Unzip unzip = new Unzip
+                {
+                    BuildEngine = _mockEngine,
+                    DestinationFolder = new TaskItem(folder.FolderPath),
+                    SourceFiles = new ITaskItem[] { new TaskItem(Path.Combine(testEnvironment.DefaultTestDirectory.FolderPath, "foo.zip")), }
+                };
+
+                unzip.Execute().ShouldBeFalse(() => _mockEngine.Log);
+
+                _mockEngine.Log.ShouldContain("MSB3912", () => _mockEngine.Log);
+            }
+        }
+    }
+}
diff --git a/src/Tasks/Unzip.cs b/src/Tasks/Unzip.cs
index 5fbf0ddf8b7..f738654d880 100644
--- a/src/Tasks/Unzip.cs
+++ b/src/Tasks/Unzip.cs
@@ -17,27 +17,11 @@ namespace Microsoft.Build.Tasks
     /// </summary>
     public sealed class Unzip : TaskExtension, ICancelableTask
     {
-        /// <summary>
-        /// Stores a collection of all destination files.
-        /// </summary>
-        private readonly Collection<ITaskItem> _destinationFiles = new Collection<ITaskItem>();
-
-        /// <summary>
-        /// Stores a collection of all files that were unzipped.
-        /// </summary>
-        private readonly Collection<ITaskItem> _unzippedFiles = new Collection<ITaskItem>();
-
         /// <summary>
         /// Stores a value indicating if a cancellation was requested.
         /// </summary>
         private bool _canceling;
 
-        /// <summary>
-        /// Gets an array of <see cref="ITaskItem"/> objects containing details about all of the destination files.
-        /// </summary>
-        [Output]
-        public ITaskItem[] DestinationFiles => _destinationFiles.ToArray();
-
         /// <summary>
         /// Gets or sets a <see cref="ITaskItem"/> with a destination folder path to unzip the files to.
         /// </summary>
@@ -60,12 +44,6 @@ public sealed class Unzip : TaskExtension, ICancelableTask
         [Required]
         public ITaskItem[] SourceFiles { get; set; }
 
-        /// <summary>
-        /// Gets an array of <see cref="ITaskItem"/> objects containing details about only the files that were unzipped.
-        /// </summary>
-        [Output]
-        public ITaskItem[] UnzippedFiles => _unzippedFiles.ToArray();
-
         /// <inheritdoc cref="ICancelableTask.Cancel"/>
         public void Cancel()
         {
@@ -117,7 +95,7 @@ public override bool Execute()
                 catch (Exception e)
                 {
                     // Should only be thrown if the archive could not be opened (Access denied, corrupt file, etc)
-                    Log.LogErrorFromResources("Unzip.ErrorCouldNotOpenFile", e.Message);
+                    Log.LogErrorFromResources("Unzip.ErrorCouldNotOpenFile", sourceFile.ItemSpec, e.Message);
                 }
             }
 
@@ -144,12 +122,6 @@ private void Extract(ITaskItem sourceTaskItem, ZipArchive sourceArchive, Directo
                     continue;
                 }
                 
-                TaskItem taskItem = new TaskItem(EscapingUtilities.Escape(destinationPath.FullName));
-
-                sourceTaskItem.CopyMetadataTo(taskItem);
-
-                _destinationFiles.Add(taskItem);
-
                 if (ShouldSkipEntry(zipArchiveEntry, destinationPath))
                 {
                     Log.LogMessageFromResources(MessageImportance.Low, "Unzip.DidNotUnzipBecauseOfFileMatch", zipArchiveEntry.FullName, destinationPath.FullName, nameof(SkipUnchangedFiles), "true");
@@ -166,7 +138,7 @@ private void Extract(ITaskItem sourceTaskItem, ZipArchive sourceArchive, Directo
                     continue;
                 }
 
-                if (OverwriteReadOnlyFiles && destinationPath.IsReadOnly)
+                if (OverwriteReadOnlyFiles && destinationPath.Exists && destinationPath.IsReadOnly)
                 {
                     try
                     {
@@ -185,7 +157,6 @@ private void Extract(ITaskItem sourceTaskItem, ZipArchive sourceArchive, Directo
 
                     zipArchiveEntry.ExtractToFile(destinationPath.FullName, overwrite: true);
 
-                    _unzippedFiles.Add(taskItem);
                 }
                 catch (IOException e)
                 {
