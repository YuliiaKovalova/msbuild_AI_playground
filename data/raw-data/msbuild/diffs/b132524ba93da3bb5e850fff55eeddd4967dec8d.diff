diff --git a/MSBuild.sln b/MSBuild.sln
index 258d1a5c5d7..1669e3821ca 100644
--- a/MSBuild.sln
+++ b/MSBuild.sln
@@ -84,6 +84,8 @@ Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Microsoft.Build.BuildCheck.
 EndProject
 Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Microsoft.Build.Templates", "template_feed\Microsoft.Build.Templates.csproj", "{A86EE74A-AEF0-42ED-A5A7-7A54BC0773D8}"
 EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MSBuild.Bootstrap.Utils", "src\MSBuild.Bootstrap.Utils\MSBuild.Bootstrap.Utils.csproj", "{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -916,6 +918,30 @@ Global
 		{A86EE74A-AEF0-42ED-A5A7-7A54BC0773D8}.Release|x64.Build.0 = Release|Any CPU
 		{A86EE74A-AEF0-42ED-A5A7-7A54BC0773D8}.Release|x86.ActiveCfg = Release|Any CPU
 		{A86EE74A-AEF0-42ED-A5A7-7A54BC0773D8}.Release|x86.Build.0 = Release|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Debug|ARM64.ActiveCfg = Debug|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Debug|ARM64.Build.0 = Debug|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Debug|x64.ActiveCfg = Debug|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Debug|x64.Build.0 = Debug|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Debug|x86.ActiveCfg = Debug|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Debug|x86.Build.0 = Debug|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.MachineIndependent|Any CPU.ActiveCfg = MachineIndependent|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.MachineIndependent|Any CPU.Build.0 = MachineIndependent|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.MachineIndependent|ARM64.ActiveCfg = MachineIndependent|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.MachineIndependent|ARM64.Build.0 = MachineIndependent|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.MachineIndependent|x64.ActiveCfg = MachineIndependent|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.MachineIndependent|x64.Build.0 = MachineIndependent|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.MachineIndependent|x86.ActiveCfg = MachineIndependent|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.MachineIndependent|x86.Build.0 = MachineIndependent|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Release|Any CPU.Build.0 = Release|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Release|ARM64.ActiveCfg = Release|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Release|ARM64.Build.0 = Release|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Release|x64.ActiveCfg = Release|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Release|x64.Build.0 = Release|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Release|x86.ActiveCfg = Release|Any CPU
+		{E12F619A-80F1-4643-9AEC-D3D5C2FB8443}.Release|x86.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/eng/BootStrapMsBuild.targets b/eng/BootStrapMsBuild.targets
index 9209876eecf..044d1bdfabe 100644
--- a/eng/BootStrapMsBuild.targets
+++ b/eng/BootStrapMsBuild.targets
@@ -202,56 +202,24 @@
            AlwaysCreate="true" />
   </Target>
 
+  <!-- <UsingTask TaskName="InstallDotNetCoreTask" AssemblyFile="$(AssemblyPath)"/> -->
   <Target Name="BootstrapNetCore" DependsOnTargets="CleanBootstrapFolder">
 
-    <!-- Publish the project first.  The more obvious way to do this would be to depend on the Publish target,
-         but that causes a target dependency cycle, even though it seems like AfterTargets="AfterBuild" should
-         probably not count as a link in the cycle. -->
-    <MSBuild Projects="$(MSBuildProjectFile)" Targets="Publish" BuildInParallel="$(BuildInParallel)" />
+    <InstallDotNetCoreTask DotNetInstallScript="$(DotNetRoot)" InstallDir="$(BootstrapDestination)">
+      <Output TaskParameter="ExtractedVersion" PropertyName="ExtractedVersion" />
+    </InstallDotNetCoreTask>
 
-    <ItemGroup>
-      <!-- Copy all items from the publish folder to the bootstrap folder.  We might be able to just use the published
-            version as the bootstrapped version, but the extra separation here seems like it could be valuable. -->
-      <DeployedItems Include="$(PublishDir)\**\*.*" />
-
-      <NuGetSdkResolverManifest Include= "$(RepoRoot)src\MSBuild\SdkResolvers\Standalone\Microsoft.Build.NuGetSdkResolver.xml" />
-      <InstalledSdks Include="$(DOTNET_INSTALL_DIR)\sdk\$(DotNetCliVersion)\Sdks\**\*.*" />
-      <InstalledExtensions Include="$(DOTNET_INSTALL_DIR)\sdk\$(DotNetCliVersion)\Current\**\*.*" Exclude="$(DOTNET_INSTALL_DIR)\sdk\$(DotNetCliVersion)\Current\Microsoft.Common.props" />
-    </ItemGroup>
-    <Copy SourceFiles="@(DeployedItems)"
-          DestinationFolder="$(BootstrapDestination)%(RecursiveDir)" />
-
-    <Copy SourceFiles="@(NuGetSdkResolverManifest)"
-          DestinationFolder="$(BootstrapDestination)SdkResolvers\Microsoft.Build.NuGetSdkResolver" />
-
-    <Copy SourceFiles="$(RuntimeIdentifierGraphPath)"
-          DestinationFolder="$(BootstrapDestination)" />
-
-    <Copy SourceFiles="@(InstalledSdks)"
-          DestinationFiles="@(InstalledSdks -> '$(BootstrapDestination)Sdks\%(RecursiveDir)%(Filename)%(Extension)')" />
-
-    <!-- The .NET SDK has a dependency on DependencyModel, but relies on having it in the final
-         MSBuild.deps.json, which differs from ours because it's generated in the SDK repo.
-
-         Copy it from "next to MSBuild" in the pre-bootstrap SDK to our little weirdo bootstrap
-         layout next to the SDK tasks, so it can get loaded by the SDK tasks that need it. -->
-    <Copy SourceFiles="$(DOTNET_INSTALL_DIR)\sdk\$(DotNetCliVersion)\Microsoft.Extensions.DependencyModel.dll"
-          DestinationFolder="$(BootstrapDestination)Sdks\Microsoft.NET.Sdk\tools\$(LatestDotNetCoreForMSBuild)" />
+  </Target>
 
-    <Copy SourceFiles="@(InstalledExtensions)"
-          DestinationFolder="$(BootstrapDestination)Current\%(RecursiveDir)" />
+  <Target Name="BootstrapNetCorePatch" AfterTargets="BootstrapNetCore">
 
-    <Copy SourceFiles="@(_NuGetRuntimeDependencies)"
-          DestinationFolder="$(BootstrapDestination)" />
-
-    <Copy SourceFiles="$(RepoRoot)src\MSBuild.Bootstrap\RedirectNuGetConsoleProcess.After.Microsoft.Common.targets"
-          DestinationFolder="$(BootstrapDestination)\Current\Microsoft.Common.targets\ImportAfter" />
+    <ItemGroup>
+      <FreshlyBuiltNetBinaries Include="$(OutDir)**\*.*" />
+    </ItemGroup>
 
-    <Copy SourceFiles="$(RepoRoot)src\MSBuild.Bootstrap\RedirectNuGetConsoleProcess.After.Microsoft.Common.targets"
-          DestinationFolder="$(BootstrapDestination)\Current\SolutionFile\ImportAfter" />
+    <Copy SourceFiles="@(FreshlyBuiltNetBinaries)"
+          DestinationFolder="$(BootstrapDestination)sdk\8.0.302\%(RecursiveDir)" />
 
-    <!-- Disable workload resolver until we can figure out whether it can work in the bootstrap
-         https://github.com/dotnet/msbuild/issues/6566 -->
-    <Touch Files="$(BootstrapDestination)\DisableWorkloadResolver.sentinel" AlwaysCreate="true" />
   </Target>
+
 </Project>
diff --git a/src/MSBuild.Bootstrap.Utils/AssemblyInfo.cs b/src/MSBuild.Bootstrap.Utils/AssemblyInfo.cs
new file mode 100644
index 00000000000..3b5d7bbb185
--- /dev/null
+++ b/src/MSBuild.Bootstrap.Utils/AssemblyInfo.cs
@@ -0,0 +1,4 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+global using NativeMethodsShared = Microsoft.Build.Framework.NativeMethods;
diff --git a/src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj b/src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj
new file mode 100644
index 00000000000..e8fa7d63ead
--- /dev/null
+++ b/src/MSBuild.Bootstrap.Utils/MSBuild.Bootstrap.Utils.csproj
@@ -0,0 +1,19 @@
+<Project Sdk="Microsoft.NET.Sdk">
+  <PropertyGroup>
+    <!-- Don't build a netfx version of this unit with dotnet, as the netfx bootstrap layout created with 'dotnet build' is incomplete. -->
+    <TargetFrameworks>$(LatestDotNetCoreForMSBuild)</TargetFrameworks>
+    <TargetFrameworks Condition="'$(MSBuildRuntimeType)' == 'Full'">$(FullFrameworkTFM);$(TargetFrameworks)</TargetFrameworks>
+
+    <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
+    <IsPackable>false</IsPackable>
+    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\Build\Microsoft.Build.csproj" />
+    <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
+    <ProjectReference Include="..\MSBuild\MSBuild.csproj" />
+    <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
+  </ItemGroup>
+  
+</Project>
diff --git a/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs b/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
new file mode 100644
index 00000000000..d6d4fc613a4
--- /dev/null
+++ b/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
@@ -0,0 +1,126 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.Diagnostics;
+using Microsoft.Build.Framework;
+
+namespace MSBuild.Bootstrap.Utils.Tasks
+{
+    public sealed class InstallDotNetCoreTask : TaskExtension
+    {
+        private const string DotNetInstallBaseUrl = "https://dot.net/v1/";
+
+        public InstallDotNetCoreTask()
+        {
+            InstallDir = string.Empty;
+            DotNetInstallScript = string.Empty;
+            Channel = string.Empty;
+        }
+
+        [Required]
+        public string InstallDir { get; set; }
+
+        [Required]
+        public string DotNetInstallScript { get; set; }
+
+        public string Channel { get; set; }
+
+        public override bool Execute()
+        {
+            string scriptName = GetScriptName();
+            string scriptPath = Path.Combine(DotNetInstallScript, scriptName);
+
+            if (!File.Exists(scriptPath))
+            {
+                DownloadScript(scriptName, scriptPath);
+            }
+
+            string scriptArgs = GetScriptArgs();
+            Log.LogMessage(MessageImportance.Low, $"Executing: {scriptPath} {scriptArgs}");
+
+            if (!NativeMethods.IsWindows)
+            {
+                MakeScriptExecutable(scriptPath);
+            }
+
+            return RunScript(scriptPath, scriptArgs);
+        }
+
+        private void DownloadScript(string scriptName, string scriptPath)
+        {
+            using (HttpClient client = new HttpClient())
+            {
+                HttpResponseMessage response = client.GetAsync($"{DotNetInstallBaseUrl}{scriptName}").Result;
+                response.EnsureSuccessStatusCode();
+
+                string scriptContent = response.Content.ReadAsStringAsync().Result;
+                File.WriteAllText(scriptPath, scriptContent);
+            }
+        }
+
+        private void MakeScriptExecutable(string scriptPath)
+        {
+            using (Process chmodProcess = new Process
+            {
+                StartInfo = new ProcessStartInfo
+                {
+                    FileName = "chmod",
+                    Arguments = $"+x {scriptPath}",
+                    UseShellExecute = false
+                },
+            })
+            {
+                chmodProcess.Start();
+                chmodProcess.WaitForExit();
+            }
+        }
+
+        private bool RunScript(string scriptPath, string scriptArgs)
+        {
+            ProcessStartInfo startInfo = new ProcessStartInfo
+            {
+                FileName = GetProcessName(),
+                Arguments = GetProcessArguments(scriptPath, scriptArgs),
+                RedirectStandardOutput = true,
+                RedirectStandardError = true,
+                UseShellExecute = false,
+                CreateNoWindow = true
+            };
+
+            using (Process process = new Process { StartInfo = startInfo })
+            {
+                process.Start();
+
+                string output = process.StandardOutput.ReadToEnd();
+                Log.LogMessage(output);
+
+                string errors = process.StandardError.ReadToEnd();
+                process.WaitForExit();
+
+                if (process.ExitCode != 0)
+                {
+                    if (!string.IsNullOrEmpty(errors))
+                    {
+                        Log.LogError("Errors: " + errors);
+                    }
+
+                    Log.LogError("dotnet-install failed");
+                }
+            }
+
+            return !Log.HasLoggedErrors;
+        }
+
+        private string GetScriptName() => NativeMethodsShared.IsWindows ? "dotnet-install.ps1" : "dotnet-install.sh";
+
+        private string GetProcessName() => NativeMethodsShared.IsWindows ? "powershell.exe" : @"/bin/bash";
+
+        private string GetProcessArguments(string scriptPath, string scriptArgs) => NativeMethodsShared.IsWindows
+            ? $"-NoProfile -ExecutionPolicy Bypass -File \"{scriptPath}\" {scriptArgs}"
+            : $"{scriptPath} {scriptArgs}";
+
+        private string GetScriptArgs() => NativeMethodsShared.IsWindows
+            ? $"{(string.IsNullOrEmpty(Channel) ? "-Quality preview" : $"-Channel {Channel}")} -InstallDir {InstallDir}"
+            : $"{(string.IsNullOrEmpty(Channel) ? "--quality preview" : $"--channel {Channel}")} --install-dir {InstallDir}";
+    }
+}
