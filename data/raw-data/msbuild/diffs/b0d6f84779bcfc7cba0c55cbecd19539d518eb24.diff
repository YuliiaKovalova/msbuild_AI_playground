diff --git a/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs b/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
index e157a44d7be..90bd0f19e9a 100644
--- a/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/NoEnvironmentVariablePropertyAnalyzer.cs
@@ -14,7 +14,7 @@ internal sealed class NoEnvironmentVariablePropertyAnalyzer : BuildAnalyzer
         "NoEnvironmentVariablePropertyAnalyzer",
         "No implicit property derived from an environment variable should be used during the build",
         "Property is derived from environment variable: '{0}' with value: '{1}'. Properties should be passed explicitly using the /p option.",
-        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning, IsEnabled = true });
+        new BuildAnalyzerConfiguration() { Severity = BuildAnalyzerResultSeverity.Warning });
 
     public override string FriendlyName => "MSBuild.NoEnvironmentVariablePropertyAnalyzer";
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 2ba545bb2f5..446a9bf27ff 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -311,7 +311,7 @@ void HandleError(FormatErrorMessage msgFactory, bool noThrow, ReaderErrorType re
                 BinaryLogRecordKind.ProjectImported => ReadProjectImportedEventArgs(),
                 BinaryLogRecordKind.TargetSkipped => ReadTargetSkippedEventArgs(),
                 BinaryLogRecordKind.EnvironmentVariableRead => ReadEnvironmentVariableReadEventArgs(),
-                BinaryLogRecordKind.ExtendedEnvironmentVariableRead => ReadEnvironmentVariableReadEventArgs(),
+                BinaryLogRecordKind.ExtendedEnvironmentVariableRead => ReadExtendedEnvironmentVariableReadEventArgs(),
                 BinaryLogRecordKind.ResponseFileUsed => ReadResponseFileUsedEventArgs(),
                 BinaryLogRecordKind.PropertyReassignment => ReadPropertyReassignmentEventArgs(),
                 BinaryLogRecordKind.UninitializedPropertyRead => ReadUninitializedPropertyReadEventArgs(),
@@ -1095,19 +1095,26 @@ private BuildEventArgs ReadEnvironmentVariableReadEventArgs()
             var fields = ReadBuildEventArgsFields(readImportance: true);
             var environmentVariableName = ReadDeduplicatedString();
 
-            BuildEventArgs e;
-            if (fields.Extended == null)
-            {
-                e = new EnvironmentVariableReadEventArgs(
+            BuildEventArgs e = new EnvironmentVariableReadEventArgs(
                     environmentVariableName,
                     fields.Message,
                     fields.HelpKeyword,
                     fields.SenderName,
                     fields.Importance);
-            }
-            else
-            {
-                e = new ExtendedEnvironmentVariableReadEventArgs(
+
+            return e;
+        }
+
+        private BuildEventArgs ReadExtendedEnvironmentVariableReadEventArgs()
+        {
+            var fields = ReadBuildEventArgsFields();
+
+            string? environmentVariableName = ReadDeduplicatedString();
+            int line = ReadInt32();
+            int column = ReadInt32();
+            string? fileName = ReadDeduplicatedString();
+
+            BuildEventArgs e = new ExtendedEnvironmentVariableReadEventArgs(
                     environmentVariableName ?? string.Empty,
                     fields.Message,
                     fields.File ?? string.Empty,
@@ -1115,7 +1122,6 @@ private BuildEventArgs ReadEnvironmentVariableReadEventArgs()
                     fields.ColumnNumber,
                     fields.HelpKeyword,
                     fields.SenderName);
-            }
 
             return e;
         }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index c9f55d0a599..e99a32ac11f 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -5,6 +5,7 @@
 using System.Buffers;
 using System.Collections;
 using System.Collections.Generic;
+using System.Data.Common;
 using System.Globalization;
 using System.IO;
 using System.Linq;
@@ -469,6 +470,7 @@ private BinaryLogRecordKind Write(BuildMessageEventArgs e)
                 case TaskCommandLineEventArgs taskCommandLine: return Write(taskCommandLine);
                 case UninitializedPropertyReadEventArgs uninitializedPropertyRead: return Write(uninitializedPropertyRead);
                 case EnvironmentVariableReadEventArgs environmentVariableRead: return Write(environmentVariableRead);
+                case ExtendedEnvironmentVariableReadEventArgs extendedEnvironmentVariableRead: return Write(extendedEnvironmentVariableRead);
                 case PropertyInitialValueSetEventArgs propertyInitialValueSet: return Write(propertyInitialValueSet);
                 case CriticalBuildMessageEventArgs criticalBuildMessage: return Write(criticalBuildMessage);
                 case AssemblyLoadBuildEventArgs assemblyLoad: return Write(assemblyLoad);
@@ -554,6 +556,17 @@ private BinaryLogRecordKind Write(EnvironmentVariableReadEventArgs e)
             return BinaryLogRecordKind.EnvironmentVariableRead;
         }
 
+        private BinaryLogRecordKind Write(ExtendedEnvironmentVariableReadEventArgs e)
+        {
+            WriteMessageFields(e, writeImportance: false);
+            WriteDeduplicatedString(e.EnvironmentVariableName);
+            Write(e.Line);
+            Write(e.Column);
+            WriteDeduplicatedString(e.FileName);
+
+            return BinaryLogRecordKind.ExtendedEnvironmentVariableRead;
+        }
+
         private BinaryLogRecordKind Write(ResponseFileUsedEventArgs e)
         {
             WriteMessageFields(e);
diff --git a/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/.editorconfig b/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/.editorconfig
index 1f83361d23c..01575fdd37c 100644
--- a/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/.editorconfig
+++ b/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/.editorconfig
@@ -1,5 +1,5 @@
 [*.csproj]
-build_check.BC0101.Severity={BC0101Severity}
+build_check.BC0101.Severity=BC0101Severity
 
 build_check.BC0102.Severity=warning
 build_check.BC0103.Severity=warning
diff --git a/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/Project1 b/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/Project1
index 77d92da3727..5588596ed11 100644
--- a/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/Project1
+++ b/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/Project1
@@ -10,6 +10,10 @@
    <PropertyGroup Condition="$(Test) == true">
        <TestProperty>Test</TestProperty>
    </PropertyGroup>
+
+    <PropertyGroup Condition="$(Test) == true">
+        <ReadFromEnvVariable>$(DOTNET_ROOT)</ReadFromEnvVariable>
+    </PropertyGroup>
     
    <Target Name="Hello">
        <Message Importance="High" Condition="$(Test2) == true" Text="XYZABC" />
@@ -17,4 +21,4 @@
        <MSBuild Projects=".\FooBar-Copy.csproj" Targets="Hello" />
    </Target>
                 
-</Project>
\ No newline at end of file
+</Project>
diff --git a/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs b/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
index a44aa7a8496..4a5ec823ef9 100644
--- a/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
+++ b/src/Framework/ExtendedEnvironmentVariableReadEventArgs.cs
@@ -9,28 +9,9 @@ namespace Microsoft.Build.Framework
     /// <summary>
     /// Arguments for the environment variable read event.
     /// </summary>
-    public sealed class ExtendedEnvironmentVariableReadEventArgs : EnvironmentVariableReadEventArgs, IExtendedBuildEventArgs
+    public sealed class ExtendedEnvironmentVariableReadEventArgs : BuildMessageEventArgs
     {
-        /// <summary>
-        /// Default constructor. Used for deserialization.
-        /// </summary>
-        public ExtendedEnvironmentVariableReadEventArgs()
-            : this("undefined") { }
-
-        /// <summary>
-        /// This constructor specifies only type of extended data.
-        /// </summary>
-        /// <param name="type">Type of <see cref="IExtendedBuildEventArgs.ExtendedType"/>.</param>
-        public ExtendedEnvironmentVariableReadEventArgs(string type) => ExtendedType = type;
-
-        /// <inheritdoc />
-        public string ExtendedType { get; set; } = string.Empty;
-
-        /// <inheritdoc />
-        public Dictionary<string, string?>? ExtendedMetadata { get; set; }
-
-        /// <inheritdoc />
-        public string? ExtendedData { get; set; }
+        public ExtendedEnvironmentVariableReadEventArgs() { }
 
         /// <summary>
         /// Initializes an instance of the ExtendedEnvironmentVariableReadEventArgs class.
@@ -50,8 +31,9 @@ public ExtendedEnvironmentVariableReadEventArgs(
             int column,
             string? helpKeyword = null,
             string? senderName = null)
-            : base(environmentVarName, environmentVarValue, helpKeyword, senderName)
+            : base(environmentVarValue, helpKeyword, senderName, MessageImportance.Normal)
         {
+            EnvironmentVariableName = environmentVarName;
             FileName = file;
             LineNumber = line;
             ColumnNumber = column;
@@ -72,6 +54,11 @@ public ExtendedEnvironmentVariableReadEventArgs(
         /// </summary>
         public string FileName { get; set; } = string.Empty;
 
+        /// <summary>
+        /// The environment variable name.
+        /// </summary>
+        public string EnvironmentVariableName { get; set; } = string.Empty;
+
         internal override void WriteToStream(BinaryWriter writer)
         {
             base.WriteToStream(writer);
@@ -79,8 +66,6 @@ internal override void WriteToStream(BinaryWriter writer)
             writer.Write7BitEncodedInt(Line);
             writer.Write7BitEncodedInt(Column);
             writer.WriteOptionalString(FileName);
-
-            writer.WriteExtendedBuildEventData(this);
         }
 
         internal override void CreateFromStream(BinaryReader reader, int version)
@@ -90,8 +75,6 @@ internal override void CreateFromStream(BinaryReader reader, int version)
             LineNumber = reader.Read7BitEncodedInt();
             ColumnNumber = reader.Read7BitEncodedInt();
             FileName = reader.ReadOptionalString() ?? string.Empty;
-
-            reader.ReadExtendedBuildEventData(this);
         }
     }
 }
