diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 3d8ccf424fb..824a99d2e35 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -866,7 +866,7 @@ public ProjectInstance GetProjectInstanceForBuild(Project project)
         /// </summary>
         /// <exception cref="InvalidOperationException">Thrown if StartBuild has not been called or if EndBuild has been called.</exception>
         public BuildSubmission PendBuildRequest(BuildRequestData requestData)
-            => (BuildSubmission) PendBuildRequest<BuildRequestData, BuildResult>(requestData);
+            => (BuildSubmission)PendBuildRequest<BuildRequestData, BuildResult>(requestData);
 
         /// <summary>
         /// Submits a graph build request to the current build but does not start it immediately.  Allows the user to
@@ -874,7 +874,7 @@ public BuildSubmission PendBuildRequest(BuildRequestData requestData)
         /// </summary>
         /// <exception cref="InvalidOperationException">Thrown if StartBuild has not been called or if EndBuild has been called.</exception>
         public GraphBuildSubmission PendBuildRequest(GraphBuildRequestData requestData)
-            => (GraphBuildSubmission) PendBuildRequest<GraphBuildRequestData, GraphBuildResult>(requestData);
+            => (GraphBuildSubmission)PendBuildRequest<GraphBuildRequestData, GraphBuildResult>(requestData);
 
         /// <summary>
         /// Submits a build request to the current build but does not start it immediately.  Allows the user to
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCache.cs b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
index e34dd90c5b1..606f0a8fc84 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCache.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCache.cs
@@ -350,14 +350,14 @@ private static bool CheckResults(BuildResult result, List<string> targets, HashS
         /// <param name="buildResult">The candidate build result.</param>
         /// <returns>True if the flags and project state filter of the build request is compatible with the build result.</returns>
         private static bool AreBuildResultFlagsCompatible(BuildRequest buildRequest, BuildResult buildResult)
-        { 
+        {
             if (buildResult.BuildRequestDataFlags is null)
             {
                 return true;
             }
 
             BuildRequestDataFlags buildRequestDataFlags = buildRequest.BuildRequestDataFlags;
-            BuildRequestDataFlags buildResultDataFlags = (BuildRequestDataFlags) buildResult.BuildRequestDataFlags;
+            BuildRequestDataFlags buildResultDataFlags = (BuildRequestDataFlags)buildResult.BuildRequestDataFlags;
 
             if ((buildRequestDataFlags & FlagsAffectingBuildResults) != (buildResultDataFlags & FlagsAffectingBuildResults))
             {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 0d9b660b451..30cd228f23a 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1155,7 +1155,7 @@ private async Task<BuildResult> BuildProject()
                     _requestEntry.Request.BuildEventContext);
             }
 
-            
+
             try
             {
                 HandleProjectStarted(buildCheckManager);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 09567c2370f..5b48d71b6db 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -395,7 +395,7 @@ public void Reacquire()
             }
         }
 
-#endregion
+        #endregion
 
         #region IBuildEngine Members
 
@@ -957,7 +957,7 @@ public void ReportFileAccess(FileAccessData fileAccessData)
 
         public EngineServices EngineServices { get; }
 
-#endregion
+        #endregion
 
         /// <summary>
         /// Called by the internal MSBuild task.
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index cf2f12b58a2..8eda48978c8 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -110,7 +110,7 @@ public virtual void ClearCaches()
         /// <inheritdoc cref="ISdkResolverService.ResolveSdk"/>
         public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio, bool failOnUnresolvedSdk)
         {
-                        // If we are running in .NET core, we ask the built-in default resolver first.
+            // If we are running in .NET core, we ask the built-in default resolver first.
             // - It is a perf optimization (no need to discover and load any of the plug-in assemblies to resolve an "in-box" Sdk).
             // - It brings `dotnet build` to parity with `MSBuild.exe` functionally, as the Framework build of Microsoft.DotNet.MSBuildSdkResolver
             //   contains the same logic and it is the first resolver in priority order.
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 3998a51002f..66e092b2939 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -2763,7 +2763,7 @@ private static IEnumerable<ProjectItemElement> GetItemElementsThatMightAffectIte
                         itemElement.RemoveLocation == null);
 
                 // add the include operation that created the project item element
-                return [item.Xml, ..relevantElementsAfterInclude];
+                return [item.Xml, .. relevantElementsAfterInclude];
             }
 
             private static List<ProjectItemElement> GetItemElementsByType(IEnumerable<ProjectItemElement> itemElements, string itemType)
diff --git a/src/Build/Evaluation/Conditionals/StringExpressionNode.cs b/src/Build/Evaluation/Conditionals/StringExpressionNode.cs
index f66e2d5efee..9e528acc5f4 100644
--- a/src/Build/Evaluation/Conditionals/StringExpressionNode.cs
+++ b/src/Build/Evaluation/Conditionals/StringExpressionNode.cs
@@ -118,7 +118,7 @@ internal override bool EvaluatesToEmpty(ConditionEvaluator.IConditionEvaluationS
 
 
         /// <inheritdoc cref="GenericExpressionNode"/>
-        internal override bool IsUnexpandedValueEmpty() 
+        internal override bool IsUnexpandedValueEmpty()
             => string.IsNullOrEmpty(_value);
 
         /// <summary>
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 4df1c7e3ea7..33f74a646f1 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -681,7 +681,7 @@ public IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> GetTargetLis
                                     targetName);
 
                                 ProjectGraphNode node = GetNodeForProject(project);
-                                ProjectGraphBuildRequest entryEdge = new(node,[projectTargetName]);
+                                ProjectGraphBuildRequest entryEdge = new(node, [projectTargetName]);
                                 encounteredEdges.Add(entryEdge);
                                 edgesToVisit.Enqueue(entryEdge);
                                 isSolutionTraversalTarget = true;
@@ -696,7 +696,7 @@ public IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> GetTargetLis
                     {
                         foreach (ProjectGraphNode entryPointNode in EntryPointNodes)
                         {
-                            ProjectGraphBuildRequest entryEdge = new(entryPointNode,[targetName]);
+                            ProjectGraphBuildRequest entryEdge = new(entryPointNode, [targetName]);
                             encounteredEdges.Add(entryEdge);
                             edgesToVisit.Enqueue(entryEdge);
                         }
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs
index 985e761411a..e8105d6d2fc 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs
@@ -38,7 +38,7 @@ public static Action<ArchiveFileEventArgs> ToArchiveFileHandler(this Action<Stri
             var contentArgs = new StringReadEventArgs(archiveFile.Content);
             stringHandler(contentArgs);
 
-            if(pathArgs.StringToBeUsed != pathArgs.OriginalString ||
+            if (pathArgs.StringToBeUsed != pathArgs.OriginalString ||
                contentArgs.StringToBeUsed != contentArgs.OriginalString)
             {
                 args.ArchiveData = new ArchiveFile(pathArgs.StringToBeUsed, contentArgs.StringToBeUsed);
diff --git a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
index 876227f72f9..85d37114460 100644
--- a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
+++ b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
@@ -56,7 +56,7 @@ public string AlignConsoleOutput(string message, bool prefixAlreadyWritten, int
             // Empiric value of average line length in console output. Used to estimate number of lines in message for StringBuilder capacity.
             // Wrongly estimated capacity is not a problem as StringBuilder will grow as needed. It is just optimization to avoid multiple reallocations.
             const int averageLineLength = 40;
-            int estimatedCapacity = message.Length + ((prefixAlreadyWritten ? 0 : prefixWidth)  + Environment.NewLine.Length) * (message.Length / averageLineLength + 1);
+            int estimatedCapacity = message.Length + ((prefixAlreadyWritten ? 0 : prefixWidth) + Environment.NewLine.Length) * (message.Length / averageLineLength + 1);
             StringBuilder sb = _stringBuilderProvider.Acquire(estimatedCapacity);
 
             // The string contains new lines, treat each new line as a different string to format and send to the console
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index 49573c943fb..ebd8c4520ea 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -588,7 +588,7 @@ public override void StatusEventHandler(object sender, BuildStatusEventArgs e)
                 }
             }
             else if (e is BuildCanceledEventArgs buildCanceled)
-            {;
+            {
                 Console.WriteLine(e.Message);
             }
         }
diff --git a/src/Framework/BuildCanceledEventArgs.cs b/src/Framework/BuildCanceledEventArgs.cs
index 9f9e4ac5cf9..6209b398156 100644
--- a/src/Framework/BuildCanceledEventArgs.cs
+++ b/src/Framework/BuildCanceledEventArgs.cs
@@ -18,7 +18,7 @@ public sealed class BuildCanceledEventArgs : BuildStatusEventArgs
         /// <param name="message">text message</param>
         public BuildCanceledEventArgs(string message)
             : this(message, DateTime.UtcNow)
-        { 
+        {
         }
 
         /// <summary>
diff --git a/src/Framework/BuildCheck/BuildCheckEventArgs.cs b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
index adff612cc95..c6929b3c19e 100644
--- a/src/Framework/BuildCheck/BuildCheckEventArgs.cs
+++ b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
@@ -229,7 +229,7 @@ internal sealed class BuildCheckResultMessage : BuildMessageEventArgs
     public BuildCheckResultMessage(IBuildCheckResult result)
         : base(message: result.FormatMessage(), file: result.Location.File, lineNumber: result.Location.Line, columnNumber: result.Location.Column, MessageImportance.High)
         => RawMessage = result.FormatMessage();
-    
+
 
     internal BuildCheckResultMessage(string formattedMessage) => RawMessage = formattedMessage;
 
diff --git a/src/Framework/BuildException/BuildExceptionBase.cs b/src/Framework/BuildException/BuildExceptionBase.cs
index 426ad35526b..b165050d341 100644
--- a/src/Framework/BuildException/BuildExceptionBase.cs
+++ b/src/Framework/BuildException/BuildExceptionBase.cs
@@ -89,7 +89,7 @@ internal static void WriteExceptionToTranslator(ITranslator translator, Exceptio
 #if NET || NET45_OR_GREATER
         int? hresult = exception.HResult;
 #else
-            int? hresult = null;
+        int? hresult = null;
 #endif
         writer.WriteOptionalInt32(hresult);
 
diff --git a/src/Framework/BuildSubmissionStartedEventArgs.cs b/src/Framework/BuildSubmissionStartedEventArgs.cs
index 3e42bbb142b..385d3d342c5 100644
--- a/src/Framework/BuildSubmissionStartedEventArgs.cs
+++ b/src/Framework/BuildSubmissionStartedEventArgs.cs
@@ -62,7 +62,7 @@ internal override void WriteToStream(BinaryWriter writer)
             }
 
             writer.Write(EntryProjectsFullPath.Count());
-            foreach(var entry in EntryProjectsFullPath)
+            foreach (var entry in EntryProjectsFullPath)
             {
                 writer.Write((string)entry);
             }
diff --git a/src/Framework/ExtendedCustomBuildEventArgs.cs b/src/Framework/ExtendedCustomBuildEventArgs.cs
index 0669c025843..c29352897a1 100644
--- a/src/Framework/ExtendedCustomBuildEventArgs.cs
+++ b/src/Framework/ExtendedCustomBuildEventArgs.cs
@@ -27,7 +27,9 @@ public sealed class ExtendedCustomBuildEventArgs : CustomBuildEventArgs, IExtend
     /// This constructor allows event data to be initialized.
     /// </summary>
     /// <seealso cref="IExtendedBuildEventArgs.ExtendedType"/>
-    internal ExtendedCustomBuildEventArgs() : this("undefined") {}
+    internal ExtendedCustomBuildEventArgs()
+        : this("undefined")
+    { }
 
     /// <summary>
     /// This constructor allows event data to be initialized.
diff --git a/src/Framework/IItemData.cs b/src/Framework/IItemData.cs
index 55d323474b0..bddfadbe570 100644
--- a/src/Framework/IItemData.cs
+++ b/src/Framework/IItemData.cs
@@ -45,7 +45,7 @@ public readonly struct ItemData
 
     public ItemData(string type, object value)
     {
-        
+
         Type = type;
         Value = value;
 
diff --git a/src/Framework/LoggerException.cs b/src/Framework/LoggerException.cs
index 19d0eab57ac..1d36dbdd09d 100644
--- a/src/Framework/LoggerException.cs
+++ b/src/Framework/LoggerException.cs
@@ -127,7 +127,7 @@ protected override void InitializeCustomState(IDictionary<string, string> state)
             helpKeyword = state[nameof(helpKeyword)];
         }
 
-#endregion
+        #endregion
 
         #region Properties
 
diff --git a/src/Framework/TaskStartedEventArgs.cs b/src/Framework/TaskStartedEventArgs.cs
index db1f450e95b..c3b1881616b 100644
--- a/src/Framework/TaskStartedEventArgs.cs
+++ b/src/Framework/TaskStartedEventArgs.cs
@@ -120,7 +120,7 @@ public TaskStartedEventArgs(
             this.taskFile = taskFile;
             TaskAssemblyLocation = taskAssemblyLocation;
         }
-        
+
         private string taskName;
         private string projectFile;
         private string taskFile;
diff --git a/src/Shared/ExceptionHandling.cs b/src/Shared/ExceptionHandling.cs
index 5e2425fa76d..bfce3376e3e 100644
--- a/src/Shared/ExceptionHandling.cs
+++ b/src/Shared/ExceptionHandling.cs
@@ -372,7 +372,7 @@ internal static void DumpExceptionToFile(Exception ex)
                     }
                 }
             }
-            
+
             // Some customers experience exceptions such as 'OutOfMemory' errors when msbuild attempts to log errors to a local file.
             // This catch helps to prevent the application from crashing in this best-effort dump-diagnostics path,
             // but doesn't prevent the overall crash from going to Watson.
diff --git a/src/Shared/TaskParameter.cs b/src/Shared/TaskParameter.cs
index 79e0ea37008..bee266fa0e6 100644
--- a/src/Shared/TaskParameter.cs
+++ b/src/Shared/TaskParameter.cs
@@ -238,10 +238,10 @@ public void Translate(ITranslator translator)
                     TranslatePrimitiveTypeArray(translator);
                     break;
                 case TaskParameterType.ValueType:
-                        TranslateValueType(translator);
+                    TranslateValueType(translator);
                     break;
                 case TaskParameterType.ValueTypeArray:
-                        TranslateValueTypeArray(translator);
+                    TranslateValueTypeArray(translator);
                     break;
                 case TaskParameterType.ITaskItem:
                     TranslateITaskItem(translator);
diff --git a/src/Tasks/AssignCulture.cs b/src/Tasks/AssignCulture.cs
index 277145c17d7..d416f96b4c0 100644
--- a/src/Tasks/AssignCulture.cs
+++ b/src/Tasks/AssignCulture.cs
@@ -141,7 +141,7 @@ public override bool Execute()
 
                     string dependentUpon = AssignedFiles[i].GetMetadata(ItemMetadataNames.dependentUpon);
                     string existingCulture = AssignedFiles[i].GetMetadata(ItemMetadataNames.culture);
-                    
+
                     if (RespectAlreadyAssignedItemCulture && !string.IsNullOrEmpty(existingCulture))
                     {
                         AssignedFiles[i].SetMetadata(ItemMetadataNames.withCulture, "true");
diff --git a/src/Tasks/XslTransformation.cs b/src/Tasks/XslTransformation.cs
index dd15d64cea9..90b49a9780b 100644
--- a/src/Tasks/XslTransformation.cs
+++ b/src/Tasks/XslTransformation.cs
@@ -456,7 +456,7 @@ public XslCompiledTransform LoadXslt(bool useTrustedSettings)
                             using var xmlReader = XmlReader.Create(sr);
                             xslct.Load(xmlReader, settings, new XmlUrlResolver());
                             break;
-                        }         
+                        }
                     case XslModes.XsltFile:
                         if (useTrustedSettings)
                         {
