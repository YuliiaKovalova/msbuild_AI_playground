diff --git a/src/Build/AssemblyInfo.cs b/src/Build/AssemblyInfo.cs
index b4dbc09c40a..36254bf8544 100644
--- a/src/Build/AssemblyInfo.cs
+++ b/src/Build/AssemblyInfo.cs
@@ -38,3 +38,5 @@
 
 [assembly: Dependency("BuildXL.Utilities.Core", LoadHint.Sometimes)]
 [assembly: Dependency("BuildXL.Processes", LoadHint.Sometimes)]
+
+[assembly: TypeForwardedTo(typeof(Microsoft.Build.Execution.BuildRequestDataFlags))]
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index cecd5ae977d..98f98388834 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -1390,6 +1390,7 @@ internal void ExecuteSubmission<TRequestData, TResultData>(
                 submission.BuildRequestDataBase.TargetNames,
                 submission.BuildRequestDataBase.Flags,
                 submission.SubmissionId);
+            submissionStartedEvent.BuildEventContext = buildEventContext;
 
             ((IBuildComponentHost)this).LoggingService.LogBuildEvent(submissionStartedEvent);
 
diff --git a/src/Build/BackEnd/BuildManager/BuildRequestData.cs b/src/Build/BackEnd/BuildManager/BuildRequestData.cs
index 458f9184610..5c69b4aebd0 100644
--- a/src/Build/BackEnd/BuildManager/BuildRequestData.cs
+++ b/src/Build/BackEnd/BuildManager/BuildRequestData.cs
@@ -13,7 +13,6 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
-[assembly: TypeForwardedTo(typeof(Microsoft.Build.Execution.BuildRequestDataFlags))]
 namespace Microsoft.Build.Execution
 {
     /// <summary>
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index 22921695dea..9331fa14664 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -15,6 +15,7 @@ public enum BinaryLogRecordKind
         EndOfFile = 0,
         BuildStarted,
         BuildFinished,
+        BuildSubmissionStarted,
         ProjectStarted,
         ProjectFinished,
         TargetStarted,
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 0acec68a4a0..49b35a40b6f 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -11,6 +11,7 @@
 using System.Text;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
@@ -294,6 +295,7 @@ void HandleError(FormatErrorMessage msgFactory, bool noThrow, ReaderErrorType re
             {
                 BinaryLogRecordKind.BuildStarted => ReadBuildStartedEventArgs(),
                 BinaryLogRecordKind.BuildFinished => ReadBuildFinishedEventArgs(),
+                BinaryLogRecordKind.BuildSubmissionStarted => ReadBuildSubmissionStartedEventArgs(),
                 BinaryLogRecordKind.ProjectStarted => ReadProjectStartedEventArgs(),
                 BinaryLogRecordKind.ProjectFinished => ReadProjectFinishedEventArgs(),
                 BinaryLogRecordKind.TargetStarted => ReadTargetStartedEventArgs(),
@@ -617,6 +619,34 @@ private BuildEventArgs ReadBuildFinishedEventArgs()
             return e;
         }
 
+        private BuildEventArgs ReadBuildSubmissionStartedEventArgs()
+        {
+            var fields = ReadBuildEventArgsFields();
+
+            var entryProjectsFullPath = ReadPropertyList();
+            var targetNames = ReadStringDictionary();
+            var flags = (BuildRequestDataFlags)ReadInt32();
+            var submissionId = ReadInt32();
+
+            IDictionary<string, string>? globalProperties = null;
+            // See ReadProjectEvaluationFinishedEventArgs for details on why we always store global properties in newer version.
+            if (_fileFormatVersion >= BinaryLogger.ForwardCompatibilityMinimalVersion ||
+                ReadBoolean())
+            {
+                globalProperties = ReadStringDictionary();
+            }
+
+            var e = new BuildSubmissionStartedEventArgs(
+                globalProperties,
+                entryProjectsFullPath,
+                targetNames,
+                flags,
+                submissionId);
+            SetCommonFields(e, fields);
+
+            return e;
+        }
+
         private BuildEventArgs ReadProjectEvaluationStartedEventArgs()
         {
             var fields = ReadBuildEventArgsFields();
diff --git a/src/Framework/BuildSubmissionStartedEventArgs.cs b/src/Framework/BuildSubmissionStartedEventArgs.cs
index 7f7226e76e8..4737d687a07 100644
--- a/src/Framework/BuildSubmissionStartedEventArgs.cs
+++ b/src/Framework/BuildSubmissionStartedEventArgs.cs
@@ -2,8 +2,10 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 
@@ -11,20 +13,11 @@ namespace Microsoft.Build.Framework
 {
     public sealed class BuildSubmissionStartedEventArgs : BuildStatusEventArgs
     {
-        public IReadOnlyDictionary<string, string?>? GlobalProperties { get; set; }
-
-        public IEnumerable<string>? EntryProjectsFullPath { get; set; }
-
-        public ICollection<string>? TargetNames { get; set; }
-
-        public BuildRequestDataFlags? Flags { get; set; }
-
-        public int? SubmissionId { get; set; }
 
         public BuildSubmissionStartedEventArgs(
-            IReadOnlyDictionary<string, string?>? globalProperties,
+            IEnumerable? globalProperties,
             IEnumerable<string>? entryProjectsFullPath,
-            ICollection<string>? targetNames,
+            IEnumerable<string>? targetNames,
             BuildRequestDataFlags? flags,
             int? submissionId)
         {
@@ -35,14 +28,50 @@ public BuildSubmissionStartedEventArgs(
             SubmissionId = submissionId;
         }
 
+        // Dictionary<string, string?>
+        public IEnumerable? GlobalProperties { get; set; }
+
+        // IEnumerable<string>
+        public IEnumerable<string>? EntryProjectsFullPath { get; set; }
+
+        // ICollection<string>
+        public IEnumerable<string>? TargetNames { get; set; }
+
+        public BuildRequestDataFlags? Flags { get; set; }
+
+        public int? SubmissionId { get; set; }
+
         internal override void WriteToStream(BinaryWriter writer)
         {
-            // TODO
+            base.WriteToStream(writer);
+
+            var properties = GlobalProperties.Cast<DictionaryEntry>().Where(entry => entry.Key != null && entry.Value != null);
+            writer.Write7BitEncodedInt(properties.Count());
+            foreach (var entry in properties)
+            {
+                writer.Write((string)entry.Key);
+                writer.Write((string?)entry.Value ?? "");
+            }
+
+            writer.Write7BitEncodedInt(EntryProjectsFullPath.Count());
+            foreach(var entry in EntryProjectsFullPath)
+            {
+                writer.Write((string)entry);
+            }
+
+            writer.Write7BitEncodedInt(TargetNames.Count());
+            foreach (var entry in TargetNames)
+            {
+                writer.Write((string)entry);
+            }
+
+            writer.Write7BitEncodedInt((int)Flags);
+            writer.Write7BitEncodedInt((int)SubmissionId);
         }
 
         internal override void CreateFromStream(BinaryReader reader, int version)
         {
-            // TODO
+            base.CreateFromStream(reader, version);
         }
     }
 }
