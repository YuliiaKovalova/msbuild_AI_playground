diff --git a/documentation/specs/proposed/BuildCheck-Architecture.md b/documentation/specs/proposed/BuildCheck-Architecture.md
new file mode 100644
index 00000000000..8f40156e5ba
--- /dev/null
+++ b/documentation/specs/proposed/BuildCheck-Architecture.md
@@ -0,0 +1,92 @@
+
+# BuildCheck - Architecture and Implementation Spec
+
+This is internal engineering document. For general overview and user point of view - please check the [BuildCheck - Design Spec](BuildCheck.md).
+
+# Areas of Ownership
+
+| Area     |      Owner     |
+|----------|:-------------|
+| PM                  | @baronfel |
+| Advisory/Leadership | @rainersigwald |
+| Infrastructure      | @jankrivanek |
+| Configuration       | @f-alizada   |
+| Custom Analyzers    | @YuliiaKovalova |
+| Inbox Analyzers     | @ladipro |
+| Replay Mode         | @surayya-MS |
+| Tracing             | @maridematte |
+| Perf Advisory       | @AR-May |
+
+# Table of Contents
+
+- [Infrastructure and Execution](#infrastructure-and-execution)
+   * [Data Source](#data-source)
+   * [Execution Modes](#execution-modes)
+   * [Live Mode Hosting](#live-mode-hosting)
+   * [Handling the Distributed Model](#handling-the-distributed-model)
+   * [Analyzers Lifecycle](#analyzers-lifecycle)
+- [Configuration](#configuration)
+- [Acquisition](#acquisition)
+- [Build OM for Analyzers Authoring](#build-om-for-analyzers-authoring)
+
+# Infrastructure and Execution
+
+## Data Source
+
+The major source of data for BuildCheck will be the `BuildEventArgs` data - as it is already well established diagnostic source for MSBuild builds.
+
+BuildCheck can source this data either offline from the binlog, or as a plugged logger during the live build execution. Choice was made to support both modes.
+
+## Execution Modes
+
+**Replay Mode** - so that users can choose to perform analyses post build, without impacting the performance of the build. And so that some level of analysis can be run on artifacts from builds produced by older versions of MSBuild.
+
+**Live mode** - this is what users are used to from compilation analyses. Integrating into build execution will as well help driving adoption by opting-in users by default to some level of checking and hence exposing them to the feature.
+
+## Live Mode Hosting
+
+The BuildCheck infrastructure will be prepared to be available concurrently within the main node as well as in the additional execution nodes. There are 2 reasons for this:
+* BuildCheck will need to recognize custom analyzers packages during the evaluation time - so some basic code related to BuildCheck will need to be present in the execution node.
+* Presence in execution node (as part of the `RequestBuilder`), will allow inbox analyzers to agile leverage data not available within `BuildEventArgs` (while data prooved to be useful should over time be exposed to `BuildEventArgs`)
+
+## Handling the Distributed Model
+
+We want to get some bnefits (mostly inbox analyzers agility) from hosting BuildCheck infrastructure in execution nodes, but foremost we should prevent leaking the details of this model into public API and OM, until we are sure we cannot achive all goals from just main node from `BuildEventArgs` (which will likely never happen - as the build should be fully reconstructable from the `BuildEventArgs`).
+
+How we'll internally handle the distributed model:
+* Each node will have just a single instance of infrastructure (`IBuildCheckManager`) available (registered via the MSBuild DI - `IBuildComponentHost`). This applies to a main node with inproc execution node as well.
+* Main node will have an MSBuild `ILogger` registered that will enable funneling data from execution nodes BuildChecks to the main node BuildCheck - namely:
+    * Acquisition module will be able to communicated to the main node that particular analyzer should be loaded and instantiated
+    * Tracing module will be able to send partitioned stats and aggregate them together
+    * Theoretical execution-data-only sourcing inbox analyzer will be able to aggregate data from the whole build context (again - we should use this only for agility purposes, but shoot for analyzer that needs presence only in main node).
+* Appart from the scenarios above - the BuildCheck infrastructure modules in individual nodes should be able to function independently (namely - load the inbox analyzers that should live in nodes; send the analyzers reports via logging infrastructure; load user configuration from `.editorconfig` and decide on need to enable/disable/configure particular analyzers).
+* Communication from main to execution node between BuildCheck infra modules is not planned.
+
+## Analyzers Lifecycle
+
+Planned model:
+* Analyzers factories get registered with the BuildCheck infrastructure (`BuildCheckManager`)
+    * For inbox analyzers - this happens on startup.
+    * For custom analyzers - this happens on connecting `ILogger` instance in main node receives acquistion event (`BuildCheckAcquisitionEventArgs`).
+* `BuildCheckManager` receives info about new project starting to be build
+    * On main node the information is sourced from `ProjectEvaluationStartedEventArgs`
+    * On execution node this is received from `RequestBuilder.BuildProject`
+* `BuildCheckManager` calls Configuration module and gets information for all analyzers in it's registry
+    * Analyzers with issues in configuration (communicated via `BuildCheckConfigurationException`) will be deregistered for the rest of the build.
+    * Global configuration issue (communicated via `BuildCheckConfigurationException`) will lead to defuncting whole BuildCheck.
+* `BuildCheckManager` instantiates all newly enabled analyzers and updates configuration for all allready instantiated analyzers.
+* At that point of time analyzers are prepared for receiving data and performing their work. MSBuild will start calling `BuildCheckManager` callbacks (mostly pumping `BuildEventArgs`), passed data will be transalted into BuildCheck OM and passed to analyzers.
+* Analyzers may decide to report results of their findings (via `BuildCopDataContext.ReportResult`), the infrastructure will then perform post-processing (filter out reports for `Rule`s that are disabled, set the severity based on configuration) and send the result via the standard MSBuild logging infrastructure.
+
+# Configuration
+
+**TBD** - implementation details to be amended by @f-alizada 
+
+# Acquisition
+
+**TBD** - implementation details to be amended by @YuliiaKovalova
+
+
+# Build OM for Analyzers Authoring
+
+**TBD** - details for the initial inbox analyzers set to be amended by @ladipro
\ No newline at end of file
diff --git a/documentation/specs/proposed/BuildCheck.md b/documentation/specs/proposed/BuildCheck.md
new file mode 100644
index 00000000000..f6630044599
--- /dev/null
+++ b/documentation/specs/proposed/BuildCheck.md
@@ -0,0 +1,353 @@
+
+# BuildCheck - Design Spec
+
+AKA MSBuild Analyzers
+
+The feature is meant to help customers to improve and understand quality of their MSBuild scripts via rules violations reporting. It will allow MSBuild to gradually roll out additional rules, as users will be capable to configure their opt-in and severity of reports – preventing unwanted build breakages. And to equip powerusers to roll out their own quality checks – whether for general community or internal enterprise usage.
+
+# Table of Contents
+
+- [Areas of Ownership](#areas-of-ownership)
+- [Terminology](#terminology)
+- [North Star / Longer-term vision](#north-star-longer-term-vision)
+- [Scope of initial iteration](#scope-of-initial-iteration)
+- [User Experience](#user-experience)
+   * [Running / UX](#running-ux)
+      + [Inbox Analyzers](#inbox-analyzers)
+      + [Live Build](#live-build)
+      + [Binlog Replay mode](#binlog-replay-mode)
+   * [Configuration](#configuration)
+      + [Sample configuration](#sample-configuration)
+   * [Analyzers and Rules Identification](#analyzers-and-rules-identification)
+   * [Custom Analyzers Authoring](#custom-analyzers-authoring)
+      + [Implementation](#implementation)
+         - [Analyzer declaration](#analyzer-declaration)
+         - [Rules declaration](#rules-declaration)
+         - [Standardized configuration declaration](#standardized-configuration-declaration)
+         - [Custom configuration declaration](#custom-configuration-declaration)
+         - [Compatibility](#compatibility)
+      + [Testing and Debugging](#testing-and-debugging)
+      + [Packaging](#packaging)
+   * [Acquisition of custom analyzers](#acquisition-of-custom-analyzers)
+
+
+
+# Terminology
+
+* **Analyzer** – unit of execution (single implementing class), can host multiple rules. 
+* **Rule** – Single violation type, with single unique code (`“MSB123: Redefining built-in target”`). 
+* **Report** – Output from Analyzer informing about violating particular rule.
+* **CodeFix** – Violation remedy suggestion. Not yet applicable for MSBuild.
+* **BuildCheck** - Feature name. The infrastructure within MSBuild allowing pluggability and execution of Analyzers and their Rules
+
+
+# North Star / Longer-term vision
+
+MSBuild provides a rich OM exposing the build scripts, data and execution so that various quality checking rules can be authored. Identical OM is exposed from live build execution and via post-build log event sourcing – so that users can choose whether the build analysis will happen as part of the build or as a separate process.
+
+Users are able to tune the behavior of the checks via `.editorconfig` which brings unified and standardized experience with other tooling leveraging `.editorconfig` files.
+
+Powerusers are able to develop, test and publish their custom analyzers easily and contribute them back to community. The local development scenario doesn’t require roundtrip through packaging.
+
+Solid set of in-the-box analyzers is provided by the dotnet team, extended each release, with high quality reports (pointing exact locations of issue, offering clear and actionable explanations, not repetitive for builds with multi-execution or/and multi-importing of a same script in single build context).
+
+The analysis has small impact on build duration with ability to opt-out from analysis altogether which will remove all the performance costs associated with the analysis.
+
+
+# Scope of initial iteration
+
+Majority of following cases are included in appropriate context within the scenarios in [User Experience](#user-experience) section.
+
+**In scope**
+* Inbox (build-in) analyzers that run during the build execution.
+* Inbox analyzers that run when replaying binlog.
+* Custom authored analyzers, delivered via nuget.
+* Errors and warning in logger, VS error window
+* Codes will be distinguishable from standard build warnings/error (to prevent easy mixups and attempts to configure standard msbuild warnings/errors via editorconfig), but otherwise the outputs are very similar.
+* Default opt-ins and levels for inbox analyzers set by sdk version (via [`$SdkAnalysisLevel`]((https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md)))
+* Custom analyzers opted in via `PackageReference` of a particular nuget with the analyzer.
+* Explicit overrides of enablement and analysis levels via `.editorconfig` file (with up to a per project scope).
+* Standards of `.editorconfig`s will be observed. 
+* Simplified authoring experience via template and doc.
+* Single analyzer can produce reports for multiple rules. However those need to be declared upfront
+* Opt-in reporting of time spent via specific analyzers and infra overall.
+* Collect touched `.editorconfg`s into binlog embedded files.
+* Possibility to opt-out from analysis - the perf should not be impacted then
+* Team collects performance impact numbers on the OrchardCore build with the inbox analyzers enabled.
+
+**Non Goals, but subject for consideration**
+* Custom anlyzer in a local project (source codes) or a binary.
+* Bulk configuration of multiple rules (based on prefixes).
+* Specifying scope of MSBuild imports that will be considered for analysis (so that e.g. data from sdk won't even be passed to anlyzer, if not requested).
+* Attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.
+* Configuring analysis levels when analysing from binlog - beyond the collected editorconfigs
+* Rich information in VS error window.
+
+
+**Out of scope**
+* Custom analyzers with equal data access as built-in
+* All inbox analyzers reports have precise location(s) of issues
+* Opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files)
+* Simplified authoring experience via dedicated reference assembly
+* Restore phase analysis
+* Turning analysis off/on based on target (e.g. multi-targetted builds, calling MSBuild task etc.)
+* Controling/Configuring lifetime of analyzers - analyzers will currently be held alive, as single instance per analyzer, for the whole duration of the build. But future versions might prevent some of the analyzers to survive beyond scope of single project built (means for sharing data would be provided).
+* ETW for analyzers
+* Attributing `.editorconfig` configurations to .sln files
+* Attributing `.editorconfig` configurations to lower granularity than whole projects.
+* Respecting `.editorconfig` file in msbuild import locations (unless they are in the parent folders hieararchy of particular project file)
+ 
+
+# User Experience
+
+## Running / UX
+
+### Inbox Analyzers
+
+**TBD** - suggested list of analyzers to be shipped with V1 (along with proposed configuration)
+
+### Live Build
+
+BuildCheck will run as part of the build and execute [inbox analyzers](#inbox-analyzers) and [custom analyzers](#acquisition-of-custom-analyzers) based on the [configuration](#configuration). Users will have an option to completely opt-out from BuildCheck to run via commandline switch.
+
+Findings - reports - of analyzers will be otput as build messages/warnings/errors, while the code should help distinguish BuildCheck produced reports from regular build errors/warnings.
+
+### Binlog Replay mode
+
+Users will have option to explicitly opt-in to run BuildCheck during the binlog replay mode:
+
+```bash
+> dotnet build msbuild.binlog /analyze
+```
+
+Would there be any analyzers that are not possible to run during the replay mode (subject to internal design - this difference won't be exposed during [custom analyzers authoring](#custom-analyzers-authoring)), replay mode will inform user about those via warnings.
+
+Replay mode will by default consider `.editorconfig` files stored within the binlog and will run analyzers based on those. This may lead to double-reports – as binlog will have the runtime analysis reports stored, plus the replay-time analysis reports will be augumented.
+
+For this reason we will consider following modes (all are non-goals):
+* Ability to specify skipping all binlog stored reports
+* Ability to specify skipping of the stored .editorconfig files
+* Ability to specify single replay-time .editorconfig file and it’s precedence (only the specified, specified as most significant, specified as least significant)
+
+## Configuration
+
+There will be 3 mechanisms of configuring the analyzers and rules:
+* The default configuration declared by the analyzers themselves ([more details on implementation](#rules-declaration))
+* [Sdk Analysis Level property](https://github.com/dotnet/designs/blob/main/proposed/sdk-analysis-level.md) – mostly for the inbox analyzers
+* `.editorconfig` file
+
+For the `.editorconfig` file configuration, following will apply:
+* Only `.editorconfig` files collocated with the project file or up the folder hierarchy will be considered.
+* `.editorconfig` files placed along with explicitly or implicitly imported msbuild files won’t be considered.
+* `.editorconfig` files packaged within nuget packages won’t be considered (unless the unpack action will place them alongside the referencing project).
+
+Non-Goals (but might be considered):
+* bulk configuration of multiple rules - based on analyzers/rules prefixes or/and categories.
+* attempts to try to configure standard msbuild warnings/errors via `.editorconfig` should lead to fail fast errors.
+* configuring analysis levels when analysing from binlog - beyond the collected editorconfigs.
+* Aliasing the analyzers/rules, allowing to create multiple instances with different custom configuration (e.g. single analyzer checking configurable list of forbidden properties prefixes can have 2 instance, each initialized with different list to check, each of the instance configurable for individual projects separately).
+
+Out of scope for configuration:
+* opt-out of analysis on code-level (analogy to C# pragmas, but within msbuild xml files).
+* lower granularity of `.editorconfig` settings other than whole projects.
+* attributing configuration to a .sln file and expecting it will apply to all contained projects.
+* Support for multiple [custom configurations](#custom-configuration-declaration) within a single build for a single rule. (Not to be mixed with [standardized configuration](#standardized-configuration-declaration) - which can be configured freely per project) If a custom configuration will be used, it will need to be specified identically in each explicit configurations of the rule. This is chosen so that there are no implicit requirements on lifetime of the analyzer or analyzer instancing – each analyzer will be instantiated only once per build (this is however something that will very likely change in future versions – so authors are advised not to take hard dependency on single instance policy).
+
+### Sample configuration
+(TBD)
+
+
+## Analyzers and Rules Identification
+
+**TBD**
+
+* Recommended and reserved prefixes
+* Short vs descriptive names
+* Rules categories
+* Ability to use prefixes during configuration
+
+
+## Custom Analyzers Authoring
+
+### Implementation
+
+To author custom analyzer, user will need to implement given contract (delivered in Microsoft.Build package). The contract will provide access to the exposed Build OM focused on build analysis.
+
+#### Analyzer declaration
+
+Simplified proposal:
+
+```csharp
+public abstract class BuildAnalyzer : IDisposable
+{
+    /// <summary>
+    /// Friendly name of the analyzer.
+    /// Should be unique - as it will be used in the tracing stats, infrastructure error messages, etc.
+    /// </summary>
+    public abstract string FriendlyName { get; }
+
+    /// <summary>
+    /// Single or multiple rules supported by the analyzer.
+    /// </summary>
+    public abstract IReadOnlyList<BuildAnalyzerRule> SupportedRules { get; }
+
+    /// <summary>
+    /// Optional initialization of the analyzer.
+    /// </summary>
+    /// <param name="configurationContext">
+    /// Custom data (not recognized by the infrastructure) passed from .editorconfig
+    /// Currently the custom data has to be identical for all rules in the analyzer and all projects.
+    /// </param>
+    public abstract void Initialize(ConfigurationContext configurationContext);
+
+    /// <summary>
+    /// 
+    /// </summary>
+    /// <param name="context"></param>
+    public abstract void RegisterActions(IBuildCheckRegistrationContext context);
+
+    public virtual void Dispose()
+    { }
+}
+```
+
+The context in `RegisterActions` call will enable subscriptions for data pumping from the infrastructure. 
+
+Sample of how registrations might look like:
+
+```csharp
+public interface IBuildCheckRegistrationContext
+{
+    void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);
+
+    void RegisterParsedItemsAction(Action<BuildCheckDataContext<ParsedItemsAnalysisData>> parsedItemsAction);
+
+    // ...
+}
+```
+
+The data provide in callbacks will allow analyzer to submit reports for its rules. Single callback can lead to multiple reports being generated.
+
+Any analyzer will be allowed to produce reports only for Rules that it declared in it’s `SupportedRules` definition.
+
+#### Rules declaration
+
+Single analyzer can declare support of multiple rules – since it might produce reports for those on top of same input data – and for efficiency reasons a single processing of data might be needed.
+
+Simplified proposal of definition of a single rule:
+
+```csharp
+public class BuildAnalyzerRule
+{
+    // Identification/Description fields
+
+    /// <summary>
+    /// The default configuration - overridable by the user via .editorconfig.
+    /// If no user specified configuration is provided, this default will be used.
+    /// </summary>
+    public BuildAnalyzerConfiguration DefaultConfiguration { get; }
+}
+```
+
+Each rule will supply its default configuration (mainly enablement and report severity) – those will apply if `.editorconfig` file will not set those settings explicitly. If the rule doesn't provide (some of) its defaults, a global hardcoded defults are used (`severity: message, enabled: false`).
+
+#### Standardized configuration declaration
+
+Proposal of configuration specification:
+
+```csharp
+/// <summary>
+/// Configuration for a build analyzer.
+/// Default values can be specified by the Analyzer in code.
+/// Users can overwrite the defaults by explicit settings in the .editorconfig file.
+/// Each rule can have its own configuration, which can differ per each project.
+/// The <see cref="EvaluationAnalysisScope"/> setting must be same for all rules in the same analyzer (but can differ between projects)
+/// </summary>
+public class BuildAnalyzerConfiguration
+{
+    /// <summary>
+    /// This applies only to specific events, that can distinguish whether they are directly inferred from
+    ///  the current project, or from some import. If supported it can help tuning the level of detail or noise from analysis.
+    ///
+    /// If not supported by the data source - then the setting is ignored
+    /// </summary>
+    public EvaluationAnalysisScope? EvaluationAnalysisScope { get; internal init; }
+
+    /// <summary>
+    /// The severity of the result for the rule.
+    /// </summary>
+    public BuildAnalyzerResultSeverity? Severity { get; internal init; }
+
+    /// <summary>
+    /// Whether the analyzer rule is enabled.
+    /// If all rules within the analyzer are not enabled, it will not be run.
+    /// If some rules are enabled and some are not, the analyzer will be run and reports will be post-filtered.
+    /// </summary>
+    public bool? IsEnabled { get; internal init; }
+}
+```
+
+Values for this recognized contract, that are explicitly specified via .editorconfig files are passed only to the BuildCheck infrastructure – they are invisible to the actual analyzers.
+
+#### Custom configuration declaration
+
+However if user will specify additional – unrecognized - values in `.editorconfig` file as part of a particular analyzer configuration – those values will be extracted as key-value pairs and passed to the analyzer initialization call (`Initialize`) via `ConfigurationContext`:
+
+```csharp
+/// <summary>
+/// Holder of an optional configuration from .editorconfig file (not recognized by the infrastructure)
+/// </summary>
+public class ConfigurationContext
+{
+    /// <summary>
+    /// Custom configuration data - per each rule that has some specified.
+    /// </summary>
+    public CustomConfigurationData[] CustomConfigurationData { get; init; }
+}
+```
+
+This can allow creation of extendable checks – e.g. a check that will validate that properties defined within project do not start with any forbidden prefix, while actual prefixes to check are configurable – so the user of the check can tune the behavior to their needs.
+
+More details on configuration are in [Configuration](#configuration) section.
+
+
+#### Compatibility
+
+All the publicly exposed contracts will be available within `Microsoft.Build.Experimental.BuildCheck` interface. The interface is expressing that contracts are not guaranteed to be forward compatible (however breakage will be limited to necessary cases). The availability of particular set of BuildCheck API will be queryable via [Feature Query API](https://github.com/dotnet/msbuild/pull/9665):
+
+```csharp
+var availability = Features.CheckFeatureAvailability("BuildCheck.Beta");
+```
+
+This way the analyzers authors will be equipped to write highly-compatible analyzers even in a possibility of changing API.
+
+
+### Testing and Debugging
+
+**TBD**
+
+We aim to provide ability to locally test analyzers from local projects or assemblies without a need to roundtrip through packaging them. The exact way is yet to be determined.
+
+At the same time we aim to provide mocks providing the BuildCheck context data – this work is however a non-goal.
+
+### Packaging
+
+Several requirements are mandated for analyzer packages to be properly recognized (Netstandard only, A call to designated property function will need to be part of the packaged build assets, dependencies will need to be packaged, binaries structure flattened).
+
+Also such a dependency is a purely development time harness - so it should be marked as [`DevelopmentDependency`](https://learn.microsoft.com/en-us/nuget/reference/nuspec#developmentdependency).
+
+In order to simplify the packaging process (and meeting above mentioned requiements) a dotnet template will be provided producing proper package on pack action.
+
+**TBD** - dotnet new sample on initiating the development.
+
+## Acquisition of custom analyzers
+
+Apart from [inbox analyzers](#inbox-analyzers) (shipped together with msbuild), users will be able to plug-in packaged analyzers shipped as nugets (this will serve for community contributions, but possibly as a venue for off-cycle distribution of official analyzers).
+
+In order to use an analyzer package users just need to reference them via `<PackageReference>` element as standard package reference. 
+
+```xml
+<PackageReference Include="Contoso.Analyzers" Version="1.2.3" />
+```
+
+Only projects referencing the package will be able to run its analyzers. Enabling the rules from package on other projects won’t take any effect.
\ No newline at end of file
