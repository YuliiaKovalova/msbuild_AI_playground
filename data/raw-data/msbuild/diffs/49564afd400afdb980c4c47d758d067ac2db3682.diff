diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 08436200d56..594d813b8a9 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -220,18 +220,24 @@ public static FancyLoggerBufferLine WriteNewLine(FancyLoggerBufferLine line)
         public static FancyLoggerBufferLine? WriteNewLineAfterIndex(FancyLoggerBufferLine line, int lineIndex)
         {
             if (lineIndex == -1) return null;
+            // Get Id of currentTopLineIndex
+            int currentTopLineId = lines[CurrentTopLineIndex].Id;
             lines.Insert(lineIndex + 1, line);
-            // Scroll to end if lineIndex >= lines
-            if (lineIndex >= lines.Count -2 && AutoScrollEnabled) ScrollToEnd();
-            else ScrollToLine(CurrentTopLineIndex);
-            return line;
+            // Get new current top line index
+            CurrentTopLineIndex = GetLineIndexById(currentTopLineId);
+            ScrollToLine(CurrentTopLineIndex);
+            return line; 
         }
 
         public static void DeleteLine(int lineId)
         {
             int lineIndex = GetLineIndexById(lineId);
             if (lineIndex == -1) return;
+            // Get Id of currentTopLineIndex
+            int currentTopLineId = lines[CurrentTopLineIndex].Id;
             lines.RemoveAt(lineIndex);
+            //
+            CurrentTopLineIndex = GetLineIndexById(currentTopLineId);
             ScrollToLine(CurrentTopLineIndex);
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
index e0c1142400b..258678b330a 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerNode.cs
@@ -40,7 +40,7 @@ public FancyLoggerProjectNode(ProjectStartedEventArgs args)
         public void Log()
         {
             string lineContents = ANSIBuilder.Alignment.SpaceBetween(
-                $"{(Finished ? ANSIBuilder.Formatting.Color("✓", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim("Project - ")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}",
+                $"{(Finished ? ANSIBuilder.Formatting.Color("✓", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner())} {ANSIBuilder.Formatting.Dim("Project: ")} {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )}",
                 $"({FinishedTargets} targets completed)",
                 Console.WindowWidth
             );
@@ -55,7 +55,7 @@ public void Log()
                 FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
                 return;
             }
-            string currentTargetLineContents = $"\t  └── {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}";
+            string currentTargetLineContents = $"   └── {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}";
             if (CurrentTargetLine == null) CurrentTargetLine = FancyLoggerBuffer.WriteNewLineAfter(currentTargetLineContents, Line.Id);
             else FancyLoggerBuffer.UpdateLine(CurrentTargetLine.Id, currentTargetLineContents);
         }
