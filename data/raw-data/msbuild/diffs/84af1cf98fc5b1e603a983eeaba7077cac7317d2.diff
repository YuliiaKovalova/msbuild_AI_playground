diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 24463a8e71e..cfe30774111 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -71,7 +71,7 @@ public static void Initialize()
                 // Execute while the buffer is active
                 while (!IsTerminated)
                 {
-                    // Delay by 60 fps (1/60 seconds)
+                    // Delay by 1/60 seconds
                     i++;
                     Task.Delay((i/60) * 1_000).ContinueWith((t) =>
                     {
@@ -106,9 +106,8 @@ public static void Terminate()
             // Reset configuration for buffer and cursor, and clear screen
             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
             Console.Write(ANSIBuilder.Eraser.Display());
-            Console.Write(ANSIBuilder.Cursor.Visible());
-            // TODO: Remove. Fixes a bug that causes contents of the alternate buffer to still show up in the main buffer
             Console.Clear();
+            Console.Write(ANSIBuilder.Cursor.Visible());
             Lines = new();
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
index c0905a5a145..8a0b42dbd1c 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 //
 
+using System;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.FancyLogger
@@ -9,6 +10,8 @@ namespace Microsoft.Build.Logging.FancyLogger
 
     public class FancyLoggerMessageNode
     {
+        // Use this to change the max lenngth (relative to screen size) of messages
+        private static int MAX_LENGTH = 3 * Console.BufferWidth;
         public enum MessageType
         {
             HighPriorityMessage,
@@ -25,7 +28,7 @@ public enum MessageType
         public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
         {
             Message = args.Message ?? string.Empty;
-            if (Message.Length > 400) Message = Message.Substring(0, 400);
+            if (Message.Length > MAX_LENGTH) Message = Message.Substring(0, MAX_LENGTH - 1) + "â€¦";
             // Get type
             switch (args)
             {
