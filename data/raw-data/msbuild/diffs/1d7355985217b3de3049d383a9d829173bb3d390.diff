diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index b877214bef2..5a3ab85eaa0 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1855,18 +1855,13 @@ private void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[
 
             if (_cache == null)
             {
-                _cache = SystemState.DeserializePrecomputedCaches(PreComputedCacheFileList, Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo);
-                return;
+                _cache = SystemState.DeserializePrecomputedCaches(PreComputedCacheFileList ?? new string[0], Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo);
             }
-
-            // Construct the cache if necessary.
-            if (_cache == null)
+            else
             {
-                _cache = new SystemState();
+                _cache.SetGetLastWriteTime(getLastWriteTime);
+                _cache.SetInstalledAssemblyInformation(installedAssemblyTableInfo);
             }
-
-            _cache.SetGetLastWriteTime(getLastWriteTime);
-            _cache.SetInstalledAssemblyInformation(installedAssemblyTableInfo);
         }
 
         /// <summary>
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 6275d3bcd30..b13e439a3c7 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -978,6 +978,7 @@
   </ItemGroup>
   <ItemGroup>
     <PackageReference Include="System.Collections.Immutable" />
+    <PackageReference Include="System.Reflection.Metadata" />
     <PackageReference Include="System.Resources.Extensions" />
   </ItemGroup>
 
@@ -996,7 +997,6 @@
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
     <PackageReference Include="System.CodeDom" />
-    <PackageReference Include="System.Reflection.Metadata" />
     <PackageReference Include="System.Reflection.TypeExtensions" />
     <PackageReference Include="System.Security.Permissions" />
     <PackageReference Include="System.Threading.Tasks.Dataflow" />
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index c5f0d90353f..fa027695ebb 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -9,11 +9,14 @@
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
 using System.Reflection;
+using System.Reflection.Metadata;
+using System.Reflection.PortableExecutable;
 using System.Runtime.Serialization;
 using System.Runtime.Versioning;
 using System.Security.Permissions;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.AssemblyDependency;
+using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.Tasks
@@ -557,22 +560,28 @@ internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, Ta
             SystemState retVal = new SystemState();
             retVal.SetGetLastWriteTime(getLastWriteTime);
             retVal.SetInstalledAssemblyInformation(installedAssemblyTableInfo);
-            retVal.isDirty = true;
+            retVal.isDirty = stateFiles.Length > 0;
 
             foreach (string stateFile in stateFiles)
             {
                 // Verify that it's a real stateFile; log message but do not error if not
                 SystemState sfBase = (SystemState)DeserializeCache(stateFile, log, requiredReturnType);
-                foreach (string s in sfBase.instanceLocalFileStateCache.Keys)
+                foreach (string relativePath in sfBase.instanceLocalFileStateCache.Keys)
                 {
-                    if (!retVal.instanceLocalFileStateCache.ContainsKey(s))
+                    if (!retVal.instanceLocalFileStateCache.ContainsKey(relativePath))
                     {
-                        FileState fileState = (FileState)sfBase.instanceLocalFileStateCache[s];
+                        FileState fileState = (FileState)sfBase.instanceLocalFileStateCache[relativePath];
                         // Verify that the assembly is correct
-                        if (File.Exists(s) && Assembly.LoadFile(s).ManifestModule.ModuleVersionId.Equals(fileState.ModuleVersionID))
+                        Guid mvid;
+                        using (var reader = new PEReader(File.OpenRead(relativePath)))
+                        {
+                            var metadataReader = reader.GetMetadataReader();
+                            mvid = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);
+                        }
+                        if (File.Exists(relativePath) && Assembly.Load(File.ReadAllBytes(relativePath)).ManifestModule.ModuleVersionId.Equals(fileState.ModuleVersionID))
                         {
                             // Correct file path and timestamp
-                            string fullPath = Path.GetFullPath(Path.Combine(Directory.GetCurrentDirectory(), stateFile));
+                            string fullPath = Path.GetFullPath(Path.Combine(stateFile, relativePath));
                             fileState.LastModified = retVal.getLastWriteTime(fullPath);
                             retVal.instanceLocalFileStateCache[fullPath] = fileState;
                         }
@@ -588,7 +597,11 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
             foreach (string path in instanceLocalFileStateCache.Keys)
             {
                 FileState fileState = (FileState)instanceLocalFileStateCache[path];
-                fileState.ModuleVersionID = Assembly.LoadFrom(path).ManifestModule.ModuleVersionId;
+                using (var reader = new PEReader(File.OpenRead(path)))
+                {
+                    var metadataReader = reader.GetMetadataReader();
+                    fileState.ModuleVersionID = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);
+                }
                 instanceLocalFileStateCache.Remove(path);
                 string relativePath = new Uri(Path.GetDirectoryName(stateFile)).MakeRelativeUri(new Uri(path)).ToString();
                 instanceLocalFileStateCache[relativePath] = fileState;
