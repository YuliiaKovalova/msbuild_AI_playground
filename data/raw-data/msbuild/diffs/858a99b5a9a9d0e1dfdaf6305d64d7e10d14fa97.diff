diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index 875f276b48e..b200004c15d 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -660,12 +660,27 @@ public void TranslateDictionary<D, T>(ref D dictionary, ObjectTranslator<T> obje
                 }
             }
 
-            /// <summary>
-            /// Reads in the boolean which says if this object is null or not.
-            /// </summary>
-            /// <typeparam name="T">The type of object to test.</typeparam>
-            /// <returns>True if the object should be read, false otherwise.</returns>
-            public bool TranslateNullable<T>(T value)
+            public void TranslateDictionary(ref Dictionary<string, DateTime> dictionary, StringComparer comparer)
+            {
+                int count = 0;
+                dictionary = new(comparer);
+                Translate(ref count);
+                string key = string.Empty;
+                DateTime val = DateTime.MinValue;
+                for (int i = 0; i < count; i++)
+                {
+                    Translate(ref key);
+                    Translate(ref val);
+                    dictionary.Add(key, val);
+                }
+            }
+
+        /// <summary>
+        /// Reads in the boolean which says if this object is null or not.
+        /// </summary>
+        /// <typeparam name="T">The type of object to test.</typeparam>
+        /// <returns>True if the object should be read, false otherwise.</returns>
+        public bool TranslateNullable<T>(T value)
             {
                 bool haveRef = _reader.ReadBoolean();
                 return haveRef;
@@ -1261,31 +1276,14 @@ public void TranslateDictionary<D, T>(ref D dictionary, ObjectTranslator<T> obje
             /// <param name="comparer">Key comparer</param>
             public void TranslateDictionary(ref Dictionary<string, DateTime> dictionary, StringComparer comparer)
             {
-                int count = 0;
-                if (Mode == TranslationDirection.ReadFromStream)
-                {
-                    dictionary = new(comparer);
-                    Translate(ref count);
-                    string key = string.Empty;
-                    DateTime val = DateTime.MinValue;
-                    for (int i = 0; i < count; i++)
-                    {
-                        Translate(ref key);
-                        Translate(ref val);
-                        dictionary.Add(key, val);
-                    }
-                }
-                else
+                int count = dictionary.Count;
+                Translate(ref count);
+                foreach (KeyValuePair<string, DateTime> kvp in dictionary)
                 {
-                    count = dictionary.Count;
-                    Translate(ref count);
-                    foreach (KeyValuePair<string, DateTime> kvp in dictionary)
-                    {
-                        string key = kvp.Key;
-                        DateTime val = kvp.Value;
-                        Translate(ref key);
-                        Translate(ref val);
-                    }
+                    string key = kvp.Key;
+                    DateTime val = kvp.Value;
+                    Translate(ref key);
+                    Translate(ref val);
                 }
             }
 
diff --git a/src/Shared/ITranslator.cs b/src/Shared/ITranslator.cs
index 55e56c24746..97ea429de96 100644
--- a/src/Shared/ITranslator.cs
+++ b/src/Shared/ITranslator.cs
@@ -301,7 +301,7 @@ void TranslateArray<T>(ref T[] array)
 
         void TranslateDictionary(ref IDictionary<string, string> dictionary, NodePacketCollectionCreator<IDictionary<string, string>> collectionCreator);
 
-        public void TranslateDictionary(ref Dictionary<string, DateTime> dictionary, StringComparer comparer);
+        void TranslateDictionary(ref Dictionary<string, DateTime> dictionary, StringComparer comparer);
 
         void TranslateDictionary<K, V>(ref IDictionary<K, V> dictionary, ObjectTranslator<K> keyTranslator, ObjectTranslator<V> valueTranslator, NodePacketCollectionCreator<IDictionary<K, V>> dictionaryCreator);
 
diff --git a/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
index bb4ca7de48f..fa4c5af5675 100644
--- a/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
@@ -31,7 +31,7 @@ public void DirtyCleanScenario(bool useMSBuildResXReader)
                 libFile.outputFiles = new string[] { "first", "second" };
                 libFile.assemblySimpleName = "simpleName";
                 libFile.lastModified = DateTime.Now.Subtract(TimeSpan.FromSeconds(10));
-                cache.portableLibraries.AddDependencyFile("fileName", libFile);
+                cache.portableLibraries.Add("fileName", libFile);
 
                 // Writing the file to disk should make the cache clean.
                 cache.SerializeCache(stateFile, /* Log */ null);
@@ -42,8 +42,8 @@ public void DirtyCleanScenario(bool useMSBuildResXReader)
                 cache.IsDirty.ShouldBeTrue();
 
                 // Add linkedFiles to further test serialization and deserialization.
-                cache.resXFiles.dependencies.TryGetValue(resx, out DependencyFile file).ShouldBeTrue();
-                (file as ResGenDependencies.ResXFile).linkedFiles = new string[] { "third", "fourth" };
+                cache.resXFiles.TryGetValue(resx, out ResGenDependencies.ResXFile file).ShouldBeTrue();
+                file.linkedFiles = new string[] { "third", "fourth" };
 
                 // Writing the file to disk should make the cache clean again.
                 cache.SerializeCache(stateFile, /* Log */ null);
@@ -54,16 +54,16 @@ public void DirtyCleanScenario(bool useMSBuildResXReader)
                 cache2.IsDirty.ShouldBeFalse();
 
                 // Validate that serialization worked
-                ResGenDependencies.PortableLibraryFile portableLibrary = cache.portableLibraries.GetDependencyFile("fileName") as ResGenDependencies.PortableLibraryFile;
-                ResGenDependencies.PortableLibraryFile portableLibrary2 = cache2.portableLibraries.GetDependencyFile("fileName") as ResGenDependencies.PortableLibraryFile;
+                cache.portableLibraries.TryGetValue("fileName", out ResGenDependencies.PortableLibraryFile portableLibrary);
+                cache2.portableLibraries.TryGetValue("fileName", out ResGenDependencies.PortableLibraryFile portableLibrary2);
                 portableLibrary2.filename.ShouldBe(portableLibrary.filename);
                 portableLibrary2.exists.ShouldBe(portableLibrary.exists);
                 portableLibrary2.assemblySimpleName.ShouldBe(portableLibrary.assemblySimpleName);
                 portableLibrary2.lastModified.ShouldBe(portableLibrary.lastModified);
                 portableLibrary2.outputFiles.Length.ShouldBe(portableLibrary.outputFiles.Length);
                 portableLibrary2.outputFiles[1].ShouldBe(portableLibrary.outputFiles[1]);
-                ResGenDependencies.ResXFile resX = cache.resXFiles.GetDependencyFile(resx) as ResGenDependencies.ResXFile;
-                ResGenDependencies.ResXFile resX2 = cache2.resXFiles.GetDependencyFile(resx) as ResGenDependencies.ResXFile;
+                cache.resXFiles.TryGetValue(resx, out ResGenDependencies.ResXFile resX);
+                cache2.resXFiles.TryGetValue(resx, out ResGenDependencies.ResXFile resX2);
                 resX2.filename.ShouldBe(resX.filename);
                 resX2.lastModified.ShouldBe(resX.lastModified);
                 resX2.linkedFiles.Length.ShouldBe(resX.linkedFiles.Length);
diff --git a/src/Tasks/Dependencies.cs b/src/Tasks/Dependencies.cs
deleted file mode 100644
index 45cbc87d3c2..00000000000
--- a/src/Tasks/Dependencies.cs
+++ /dev/null
@@ -1,89 +0,0 @@
-ï»¿// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-using Microsoft.Build.BackEnd;
-using System;
-using System.Collections.Generic;
-
-namespace Microsoft.Build.Tasks
-{
-    /// <summary>
-    /// Represents a cache of inputs to a compilation-style task.
-    /// </summary>
-    internal class Dependencies
-    {
-        /// <summary>
-        /// Dictionary of other dependency files.
-        /// Key is filename and value is DependencyFile.
-        /// </summary>
-        internal Dictionary<string, DependencyFile> dependencies = new();
-
-        internal Dependencies() { }
-
-        internal Dependencies(ITranslator translator, Type t)
-        {
-            Translate(translator, t);
-        }
-
-        public void Translate(ITranslator translator, Type t)
-        {
-            translator.TranslateDictionary(ref dependencies, (ITranslator translator, ref DependencyFile dependency) =>
-            {
-                if (t == typeof(ResGenDependencies.ResXFile))
-                {
-                    ResGenDependencies.ResXFile resx = dependency as ResGenDependencies.ResXFile;
-                    resx ??= new();
-                    resx.Translate(translator);
-                    dependency = resx;
-                }
-                else if (t == typeof(ResGenDependencies.PortableLibraryFile))
-                {
-                    ResGenDependencies.PortableLibraryFile lib = dependency as ResGenDependencies.PortableLibraryFile;
-                    lib ??= new();
-                    lib.Translate(translator);
-                    dependency = lib;
-                }
-
-                dependency ??= new();
-                translator.Translate(ref dependency.filename);
-                translator.Translate(ref dependency.lastModified);
-                translator.Translate(ref dependency.exists);
-            });
-        }
-
-        /// <summary>
-        /// Look up a dependency file. Return null if it isn't there.
-        /// </summary>
-        /// <param name="filename"></param>
-        /// <returns></returns>
-            internal DependencyFile GetDependencyFile(string filename)
-        {
-            dependencies.TryGetValue(filename, out DependencyFile file);
-            return file;
-        }
-
-        /// <summary>
-        /// Add a new dependency file.
-        /// </summary>
-        internal void AddDependencyFile(string filename, DependencyFile file)
-        {
-            dependencies[filename] = file;
-        }
-
-        /// <summary>
-        /// Remove new dependency file.
-        /// </summary>
-        internal void RemoveDependencyFile(string filename)
-        {
-            dependencies.Remove(filename);
-        }
-
-        /// <summary>
-        /// Remove all entries from the dependency table.
-        /// </summary>
-        internal void Clear()
-        {
-            dependencies.Clear();
-        }
-    }
-}
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 6e05beb2f75..ff5b4b525d0 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -91,7 +91,7 @@
     <Compile Include="..\Shared\NGen.cs">
       <Link>NGen.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\IConstrainedEqualityComparer.cs"/>
+    <Compile Include="..\Shared\IConstrainedEqualityComparer.cs" />
     <Compile Include="..\Shared\PropertyParser.cs">
       <Link>PropertyParser.cs</Link>
       <ExcludeFromStyleCop>True</ExcludeFromStyleCop>
@@ -550,7 +550,6 @@
     <Compile Include="CodeTaskFactory.cs" />
     <Compile Include="XamlTaskFactory\XamlTaskFactory.cs" />
     <Compile Include="StateFileBase.cs" />
-    <Compile Include="Dependencies.cs" />
     <Compile Include="SystemState.cs" />
     <Compile Include="DependencyFile.cs" />
     <Compile Include="ZipDirectory.cs" />
diff --git a/src/Tasks/ResGenDependencies.cs b/src/Tasks/ResGenDependencies.cs
index af9f6e2ffb9..55f67c4b0f4 100644
--- a/src/Tasks/ResGenDependencies.cs
+++ b/src/Tasks/ResGenDependencies.cs
@@ -27,12 +27,12 @@ internal sealed class ResGenDependencies : StateFileBase, ITranslatable
         /// <summary>
         /// The list of resx files.
         /// </summary>
-        internal Dependencies resXFiles = new Dependencies();
+        internal IDictionary<string, ResXFile> resXFiles = new Dictionary<string, ResXFile>();
 
         /// <summary>
         /// A list of portable libraries and the ResW files they can produce.
         /// </summary>
-        internal Dependencies portableLibraries = new Dependencies();
+        internal IDictionary<string, PortableLibraryFile> portableLibraries = new Dictionary<string, PortableLibraryFile>();
 
         /// <summary>
         /// A newly-created ResGenDependencies is not dirty.
@@ -98,8 +98,22 @@ public ResGenDependencies(ITranslator translator)
 
         public override void Translate(ITranslator translator)
         {
-            resXFiles.Translate(translator, typeof(ResXFile));
-            portableLibraries.Translate(translator, typeof(PortableLibraryFile));
+            translator.TranslateDictionary(ref resXFiles,
+                (ITranslator translator, ref string s) => translator.Translate(ref s),
+                (ITranslator translator, ref ResXFile resx) => {
+                    ResXFile temp = resx ?? new();
+                    temp.Translate(translator);
+                    resx = temp;
+                },
+                count => new Dictionary<string, ResXFile>(count));
+            translator.TranslateDictionary(ref portableLibraries,
+                (ITranslator translator, ref string s) => translator.Translate(ref s),
+                (ITranslator translator, ref PortableLibraryFile portableLibrary) => {
+                    PortableLibraryFile temp = portableLibrary ?? new();
+                    temp.Translate(translator);
+                    portableLibrary = temp;
+                },
+                count => new Dictionary<string, PortableLibraryFile>(count));
             translator.Translate(ref baseLinkedFileDirectory);
             translator.Translate(ref _serializedVersion);
         }
@@ -107,7 +121,7 @@ public override void Translate(ITranslator translator)
         internal ResXFile GetResXFileInfo(string resxFile, bool useMSBuildResXReader)
         {
             // First, try to retrieve the resx information from our hashtable.
-            if ((resXFiles.GetDependencyFile(resxFile) as ResXFile retVal) is null)
+            if (!resXFiles.TryGetValue(resxFile, out ResXFile retVal))
             {
                 // Ok, the file wasn't there.  Add it to our cache and return it to the caller.  
                 retVal = AddResxFile(resxFile, useMSBuildResXReader);
@@ -118,7 +132,7 @@ internal ResXFile GetResXFileInfo(string resxFile, bool useMSBuildResXReader)
                 // by removing it from the hashtable and readding it.
                 if (retVal.HasFileChanged())
                 {
-                    resXFiles.RemoveDependencyFile(resxFile);
+                    resXFiles.Remove(resxFile);
                     _isDirty = true;
                     retVal = AddResxFile(resxFile, useMSBuildResXReader);
                 }
@@ -133,7 +147,7 @@ private ResXFile AddResxFile(string file, bool useMSBuildResXReader)
             // to be cracked for contained files.
 
             var resxFile = new ResXFile(file, BaseLinkedFileDirectory, useMSBuildResXReader);
-            resXFiles.AddDependencyFile(file, resxFile);
+            resXFiles.Add(file, resxFile);
             _isDirty = true;
             return resxFile;
         }
@@ -141,13 +155,13 @@ private ResXFile AddResxFile(string file, bool useMSBuildResXReader)
         internal PortableLibraryFile TryGetPortableLibraryInfo(string libraryPath)
         {
             // First, try to retrieve the portable library information from our hashtable.  
-            var retVal = (PortableLibraryFile)portableLibraries.GetDependencyFile(libraryPath);
+            portableLibraries.TryGetValue(libraryPath, out PortableLibraryFile retVal);
 
             // The file is in our cache.  Make sure it's up to date.  If not, discard
             // this entry from the cache and rebuild all the state at a later point.
             if (retVal?.HasFileChanged() == true)
             {
-                portableLibraries.RemoveDependencyFile(libraryPath);
+                portableLibraries.Remove(libraryPath);
                 _isDirty = true;
                 retVal = null;
             }
@@ -157,11 +171,10 @@ internal PortableLibraryFile TryGetPortableLibraryInfo(string libraryPath)
 
         internal void UpdatePortableLibrary(PortableLibraryFile library)
         {
-            var cached = (PortableLibraryFile)portableLibraries.GetDependencyFile(library.FileName);
-            if (cached == null || !library.Equals(cached))
+            if (!portableLibraries.TryGetValue(library.FileName, out PortableLibraryFile cached) || !library.Equals(cached))
             {
                 // Add a new entry or replace the existing one.
-                portableLibraries.AddDependencyFile(library.FileName, library);
+                portableLibraries.Add(library.FileName, library);
                 _isDirty = true;
             }
         }
@@ -228,6 +241,9 @@ internal ResXFile()
             public void Translate(ITranslator translator)
             {
                 translator.Translate(ref linkedFiles);
+                translator.Translate(ref filename);
+                translator.Translate(ref lastModified);
+                translator.Translate(ref exists);
             }
 
             /// <summary>
@@ -317,6 +333,9 @@ public void Translate(ITranslator translator)
                 translator.Translate(ref assemblySimpleName);
                 translator.Translate(ref outputFiles);
                 translator.Translate(ref neutralResourceLanguage);
+                translator.Translate(ref filename);
+                translator.Translate(ref lastModified);
+                translator.Translate(ref exists);
             }
 
             internal PortableLibraryFile(string filename)
