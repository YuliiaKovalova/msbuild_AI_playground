diff --git a/src/Build/BuildCheck/Analyzers/PropertiesUsageAnalyzer.cs b/src/Build/BuildCheck/Analyzers/PropertiesUsageAnalyzer.cs
index 9aad639c560..d16e702397f 100644
--- a/src/Build/BuildCheck/Analyzers/PropertiesUsageAnalyzer.cs
+++ b/src/Build/BuildCheck/Analyzers/PropertiesUsageAnalyzer.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
@@ -86,17 +87,27 @@ public override void RegisterInternalActions(IInternalBuildCheckRegistrationCont
         registrationContext.RegisterProjectProcessingDoneAction(DoneWithProject);
     }
 
-    private Dictionary<string, IMsBuildElementLocation?> _writenProperties = new Dictionary<string, IMsBuildElementLocation?>(MSBuildNameIgnoreCaseComparer.Default);
-    private HashSet<string> _readProperties = new HashSet<string>(MSBuildNameIgnoreCaseComparer.Default);
-    private Dictionary<string, IMsBuildElementLocation> _uninitializedReads = new Dictionary<string, IMsBuildElementLocation>(MSBuildNameIgnoreCaseComparer.Default);
+    private Dictionary<string, IMsBuildElementLocation?> _writenProperties = new(MSBuildNameIgnoreCaseComparer.Default);
+    private HashSet<string> _readProperties = new(MSBuildNameIgnoreCaseComparer.Default);
+    private Dictionary<string, IMsBuildElementLocation> _uninitializedReads = new(MSBuildNameIgnoreCaseComparer.Default);
+
+    // TODO: this is temporary - will be improved once we have scoping argument propagated to user config data.
+    private bool IsActionInObservedScope(IMsBuildElementLocation? location, string projectFilePath)
+    {
+        return location != null && location.File == projectFilePath;
+    }
 
     private void ProcessPropertyWrite(BuildCheckDataContext<PropertyWriteData> context)
     {
         PropertyWriteData writeData = context.Data;
 
-        _writenProperties[writeData.PropertyName] = writeData.ElementLocation;
+        if (IsActionInObservedScope(writeData.ElementLocation, writeData.ProjectFilePath))
+        {
+            _writenProperties[writeData.PropertyName] = writeData.ElementLocation;
+        }
 
-        if (!writeData.IsEmpty && _uninitializedReads.TryGetValue(writeData.PropertyName, out IMsBuildElementLocation? uninitReadLocation))
+        if (!writeData.IsEmpty &&
+            _uninitializedReads.TryGetValue(writeData.PropertyName, out IMsBuildElementLocation? uninitReadLocation))
         {
             _uninitializedReads.Remove(writeData.PropertyName);
 
@@ -119,7 +130,9 @@ private void ProcessPropertyRead(BuildCheckDataContext<PropertyReadData> context
         if (readData.IsUninitialized &&
             readData.PropertyReadContext != PropertyReadContext.PropertyEvaluationSelf &&
             readData.PropertyReadContext != PropertyReadContext.ConditionEvaluationWithOneSideEmpty &&
-            (!_allowUninitPropsInConditions || readData.PropertyReadContext != PropertyReadContext.ConditionEvaluation))
+            (!_allowUninitPropsInConditions ||
+             readData.PropertyReadContext != PropertyReadContext.ConditionEvaluation) &&
+            IsActionInObservedScope(readData.ElementLocation, readData.ProjectFilePath))
         {
             _uninitializedReads[readData.PropertyName] = readData.ElementLocation;
         }
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index e90d9f9838c..8cc3887b4ae 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -5528,7 +5528,7 @@ internal void TrackRead(string propertyName, int startIndex, int endIndex, IElem
 
             if (BuildCheckManagerProvider.GlobalBuildEngineDataConsumer is not null && loggingContext is null)
             {
-                Debugger.Launch();
+                // Debugger.Launch();
             }
 
             // We are collecting the read data here - instead of in the PropertyTrackingEvaluatorDataWrapper
