diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 81d663d87eb..3c0ec06b3c2 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -223,7 +223,7 @@ private void SetupSingleCheck(CheckFactoryContext checkFactoryContext, string pr
             // For custom checks - it should run only on projects where referenced
             // (otherwise error out - https://github.com/orgs/dotnet/projects/373/views/1?pane=issue&itemId=57849480)
             // on others it should work similarly as disabling them.
-            // Disabled check should not only post-filter results - it shouldn't even see the data 
+            // Disabled check should not only post-filter results - it shouldn't even see the data
             CheckWrapper wrapper;
             CheckConfigurationEffective[] configurations;
             if (checkFactoryContext.MaterializedCheck == null)
@@ -376,9 +376,12 @@ public void ProcessEvaluationFinishedEventArgs(
             {
                 if (importedProjects != null && TryGetProjectFullPath(checkContext.BuildEventContext, out string projectPath))
                 {
-                    foreach (string importedProject in importedProjects)
+                    lock (importedProjects)
                     {
-                        _buildEventsProcessor.ProcessProjectImportedEventArgs(checkContext, projectPath, importedProject);
+                        foreach (string importedProject in importedProjects)
+                        {
+                            _buildEventsProcessor.ProcessProjectImportedEventArgs(checkContext, projectPath, importedProject);
+                        }
                     }
                 }
             }
@@ -583,10 +586,12 @@ public void StartProjectRequest(ICheckContext checkContext, string projectFullPa
         /// <param name="newImportedProjectFile">The path of the newly imported project file.</param>
         private void PropagateImport(int evaluationId, string originalProjectFile, string newImportedProjectFile)
         {
-            if (_deferredProjectEvalIdToImportedProjects.TryGetValue(evaluationId, out HashSet<string>? importedProjects)
-                && importedProjects.Contains(originalProjectFile))
+            if (_deferredProjectEvalIdToImportedProjects.TryGetValue(evaluationId, out HashSet<string>? importedProjects))
             {
-                importedProjects.Add(newImportedProjectFile);
+                lock (importedProjects)
+                {
+                    importedProjects.Add(newImportedProjectFile);
+                }
             }
         }
 
