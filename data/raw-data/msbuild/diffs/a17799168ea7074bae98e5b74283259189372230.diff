diff --git a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
index 2fb9b61cfd8..9f839cfff5f 100644
--- a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
+++ b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
@@ -3,8 +3,8 @@
 
 #nullable enable
 using System;
+using System.Diagnostics;
 using System.Text;
-using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.BackEnd.Logging
@@ -20,6 +20,7 @@ internal class ConsoleOutputAligner
     {
         internal const int ConsoleTabWidth = 8;
 
+        private readonly StringBuilder _reusedStringBuilder = new(1024);
         private readonly int _bufferWidth;
         private readonly bool _alignMessages;
 
@@ -51,7 +52,9 @@ public string AlignConsoleOutput(string message, bool prefixAlreadyWritten, int
             int i = 0;
             int j = message.IndexOfAny(MSBuildConstants.CrLf);
 
-            using ReuseableStringBuilder sb = new();
+            StringBuilder sb = _reusedStringBuilder;
+            // prepare reused StringBuilder instance for new use.
+            sb.Length = 0;
             // The string contains new lines, treat each new line as a different string to format and send to the console
             while (j >= 0)
             {
@@ -69,7 +72,7 @@ public string AlignConsoleOutput(string message, bool prefixAlreadyWritten, int
         /// <summary>
         /// Append aligned and indented message lines into running <see cref="StringBuilder"/>.
         /// </summary>
-        private void AlignAndIndentLineOfMessage(ReuseableStringBuilder sb, bool prefixAlreadyWritten, int prefixWidth, string message, int start, int count)
+        private void AlignAndIndentLineOfMessage(StringBuilder sb, bool prefixAlreadyWritten, int prefixWidth, string message, int start, int count)
         {
             int bufferWidthMinusNewLine = _bufferWidth - 1;
 
@@ -119,7 +122,7 @@ private void AlignAndIndentLineOfMessage(ReuseableStringBuilder sb, bool prefixA
                     }
 
                     sb.Append(message, start + index, endIndex - index);
-                    sb.Append(Environment.NewLine);
+                    sb.AppendLine();
 
                     index = endIndex;
                 }
@@ -133,7 +136,7 @@ private void AlignAndIndentLineOfMessage(ReuseableStringBuilder sb, bool prefixA
                 }
 
                 sb.Append(message, start, count);
-                sb.Append(Environment.NewLine);
+                sb.AppendLine();
             }
         }
     }
diff --git a/src/Framework/ReuseableStringBuilder.cs b/src/Framework/ReuseableStringBuilder.cs
index 5dcc137503c..363588e856f 100644
--- a/src/Framework/ReuseableStringBuilder.cs
+++ b/src/Framework/ReuseableStringBuilder.cs
@@ -114,16 +114,6 @@ internal ReuseableStringBuilder Append(string value, int startIndex, int count)
             return this;
         }
 
-        /// <summary>
-        /// Appends a specified number of copies of the string representation of a Unicode character to this instance.
-        /// </summary>
-        internal ReuseableStringBuilder Append(char value, int repeatCount)
-        {
-            LazyPrepare();
-            _borrowedBuilder.Append(value, repeatCount);
-            return this;
-        }
-
         public ReuseableStringBuilder AppendSeparated(char separator, ICollection<string> strings)
         {
             LazyPrepare();
