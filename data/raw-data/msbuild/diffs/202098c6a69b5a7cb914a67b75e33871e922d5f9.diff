diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 4f3bf7eae28..628a635a158 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -370,7 +370,7 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo
 
             if (this.TaskInstance is IIncrementalTask incrementalTask)
             {
-                incrementalTask.Question = _buildComponentHost.BuildParameters.Question;
+                incrementalTask.SetQuestion(_buildComponentHost.BuildParameters.Question);
             }
 
             if (taskInitialized)
diff --git a/src/Framework/IIncrementalTask.cs b/src/Framework/IIncrementalTask.cs
index 3f2e3c7a243..c4449ee907a 100644
--- a/src/Framework/IIncrementalTask.cs
+++ b/src/Framework/IIncrementalTask.cs
@@ -10,8 +10,6 @@ namespace Microsoft.Build.Framework
     /// </summary>
     public interface IIncrementalTask
     {
-        bool Question { get; set; }
-
-        bool CanBeIncremental { get; }
+        void  SetQuestion(bool question);
     }
 }
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index 8ba2b67c728..ad4de97136f 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -159,8 +159,8 @@ public void QuestionCopyFile()
                     DestinationFiles = destinationFiles,
                     UseHardlinksIfPossible = UseHardLinks,
                     UseSymboliclinksIfPossible = UseSymbolicLinks,
-                    Question = true
                 };
+                t.SetQuestion(true);
 
                 Assert.False(t.Execute(m.CopyFile, _parallelismThreadCount));
 
@@ -184,6 +184,7 @@ public void QuestionCopyFileSameContent()
             string source = FileUtilities.GetTemporaryFile();
             string destination = FileUtilities.GetTemporaryFile();
             string content = "This is a source file.";
+            DateTime testTime = DateTime.Now;
 
             try
             {
@@ -197,6 +198,12 @@ public void QuestionCopyFileSameContent()
                     sw.Write(content);
                 }
 
+                FileInfo sourcefi = new FileInfo(source);
+                sourcefi.LastWriteTimeUtc = testTime;
+
+                FileInfo destinationfi = new FileInfo(destination);
+                destinationfi.LastWriteTimeUtc = testTime;
+
                 ITaskItem sourceItem = new TaskItem(source);
                 ITaskItem destinationItem = new TaskItem(destination);
                 ITaskItem[] sourceFiles = { sourceItem };
@@ -212,9 +219,8 @@ public void QuestionCopyFileSameContent()
                     UseHardlinksIfPossible = UseHardLinks,
                     UseSymboliclinksIfPossible = UseSymbolicLinks,
                     SkipUnchangedFiles = true,
-                    Question = true
                 };
-
+                t.SetQuestion(true);
                 Assert.True(t.Execute(m.CopyFile, _parallelismThreadCount));
 
                 // Expect for there to have been no copies.
@@ -264,8 +270,8 @@ public void QuestionCopyFileNotSameContent()
                     UseHardlinksIfPossible = UseHardLinks,
                     UseSymboliclinksIfPossible = UseSymbolicLinks,
                     SkipUnchangedFiles = true,
-                    Question = true
                 };
+                t.SetQuestion(true);
 
                 Assert.False(t.Execute(m.CopyFile, _parallelismThreadCount));
 
diff --git a/src/Tasks.UnitTests/MakeDir_Tests.cs b/src/Tasks.UnitTests/MakeDir_Tests.cs
index 02996ea59ab..7e7765eae25 100644
--- a/src/Tasks.UnitTests/MakeDir_Tests.cs
+++ b/src/Tasks.UnitTests/MakeDir_Tests.cs
@@ -188,7 +188,7 @@ public void QuestionCreateNewDirectory()
                 MakeDir t = new MakeDir();
                 MockEngine engine = new MockEngine();
                 t.BuildEngine = engine;
-                t.Question = true;
+                t.SetQuestion(true);
                 t.Directories = dirList;
 
                 bool success = t.Execute();
@@ -211,7 +211,7 @@ public void QuestionCreateNewDirectory()
 
                 // Question an existing directory should return true.
                 engine.Log = "";
-                t.Question = true;
+                t.SetQuestion(true);
                 success = t.Execute();
                 Assert.True(success);
 
diff --git a/src/Tasks.UnitTests/Touch_Tests.cs b/src/Tasks.UnitTests/Touch_Tests.cs
index 776336fcd00..aa93e1896f0 100644
--- a/src/Tasks.UnitTests/Touch_Tests.cs
+++ b/src/Tasks.UnitTests/Touch_Tests.cs
@@ -347,7 +347,7 @@ public void QuestionTouchNonExisting()
             Touch t = new Touch();
             MockEngine engine = new MockEngine();
             t.BuildEngine = engine;
-            t.Question = true;
+            t.SetQuestion(true);
 
             t.Files = new ITaskItem[]
             {
@@ -374,7 +374,7 @@ public void QuestionTouchNonExistingAlwaysCreate()
             Touch t = new Touch();
             MockEngine engine = new MockEngine();
             t.BuildEngine = engine;
-            t.Question = true;
+            t.SetQuestion(true);
             t.AlwaysCreate = true;
             t.Files = new ITaskItem[]
             {
@@ -400,7 +400,7 @@ public void QuestionTouchExisting()
             Touch t = new Touch();
             MockEngine engine = new MockEngine();
             t.BuildEngine = engine;
-            t.Question = true;
+            t.SetQuestion(true);
             t.Files = new ITaskItem[]
             {
                 new TaskItem(myexisting_txt)
diff --git a/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs b/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
index 69e5a296230..7555a2f447a 100644
--- a/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
+++ b/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
@@ -189,8 +189,8 @@ public void QuestionWriteLinesWriteOnlyWhenDifferentTest()
                     File = new TaskItem(file),
                     WriteOnlyWhenDifferent = true,
                     Lines = new ITaskItem[] { new TaskItem("File contents1") },
-                    Question = true
                 };
+                a2.SetQuestion(true);
                 a2.Execute().ShouldBeTrue();
                 File.GetLastWriteTime(file).ShouldBe(writeTime, tolerance: TimeSpan.FromSeconds(1));
 
@@ -202,8 +202,8 @@ public void QuestionWriteLinesWriteOnlyWhenDifferentTest()
                     File = new TaskItem(file),
                     WriteOnlyWhenDifferent = true,
                     Lines = new ITaskItem[] { new TaskItem("File contents2") },
-                    Question = true
                 };
+                a3.SetQuestion(true);
 
                 a3.Execute().ShouldBeFalse();
                 File.GetLastWriteTime(file).ShouldBe(writeTime, tolerance: TimeSpan.FromSeconds(1));
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index 34e2e5731bd..8c7de8b218f 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -151,9 +151,9 @@ public Copy()
         /// </summary>
         public bool OverwriteReadOnlyFiles { get; set; }
 
-        public bool Question { get; set; }
+        public void SetQuestion(bool question) { this.question = question; }
 
-        public bool CanBeIncremental { get; } = true;
+        private bool question = false;
 
         #endregion
 
@@ -749,7 +749,7 @@ private bool DoCopyIfNecessary(FileState sourceFileState, FileState destinationF
                 {
                     MSBuildEventSource.Log.CopyUpToDateStop(destinationFileState.Name, false);
 
-                    if (CanBeIncremental && Question)
+                    if (question)
                     {
                         success = false;
                     }
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index 9d1af016e24..c05a3afb682 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -37,7 +37,6 @@ public Exec()
             // If the cmd file contains non-ANSI characters encoding may change.
             _standardOutputEncoding = EncodingUtilities.CurrentSystemOemEncoding;
             _standardErrorEncoding = EncodingUtilities.CurrentSystemOemEncoding;
-            CanBeIncremental = false;
         }
 
         #endregion
diff --git a/src/Tasks/FileIO/WriteLinesToFile.cs b/src/Tasks/FileIO/WriteLinesToFile.cs
index 8adf9f67bf2..45d13bbe3fd 100644
--- a/src/Tasks/FileIO/WriteLinesToFile.cs
+++ b/src/Tasks/FileIO/WriteLinesToFile.cs
@@ -52,7 +52,9 @@ public class WriteLinesToFile : TaskExtension, IIncrementalTask
         /// Question whether this task is incremental.
         /// </summary>
         /// <remarks>When question is true, then this task would not write to disk.  If CanBeIncremental is true, then error out.</remarks>
-        public bool Question { get; set; }
+        public void SetQuestion(bool question) { this.question = question; }
+
+        private bool question = false;
 
         public bool CanBeIncremental => WriteOnlyWhenDifferent;
 
@@ -69,7 +71,7 @@ public override bool Execute()
                 // do not return if Lines is null, because we may
                 // want to delete the file in that case
                 StringBuilder buffer = new StringBuilder();
-                if (Lines != null && (!Question || WriteOnlyWhenDifferent))
+                if (Lines != null && (!question || WriteOnlyWhenDifferent))
                 {
                     foreach (ITaskItem line in Lines)
                     {
@@ -116,7 +118,7 @@ public override bool Execute()
                                             MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, true);
                                             return true;
                                         }
-                                        else if (Question)
+                                        else if (question)
                                         {
                                             return false;
                                         }
@@ -130,12 +132,12 @@ public override bool Execute()
                             MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, false);
                         }
 
-                        if (!Question)
+                        if (!question)
                             System.IO.File.WriteAllText(File.ItemSpec, contentsAsString, encoding);
                     }
                     else
                     {
-                        if (!Question)
+                        if (!question)
                         {
                             Directory.CreateDirectory(directoryPath);
                             System.IO.File.AppendAllText(File.ItemSpec, buffer.ToString(), encoding);
diff --git a/src/Tasks/MakeDir.cs b/src/Tasks/MakeDir.cs
index 7bf019147e6..142174da5b8 100644
--- a/src/Tasks/MakeDir.cs
+++ b/src/Tasks/MakeDir.cs
@@ -31,9 +31,9 @@ public ITaskItem[] Directories
         [Output]
         public ITaskItem[] DirectoriesCreated { get; private set; }
 
-        public bool Question { get; set; }
+        public void SetQuestion(bool question) { this.question = question; }
 
-        public bool CanBeIncremental => true;
+        private bool question = false;
 
         private ITaskItem[] _directories;
 
@@ -63,7 +63,7 @@ public override bool Execute()
                             // Only log a message if we actually need to create the folder
                             if (!FileUtilities.DirectoryExistsNoThrow(directory.ItemSpec))
                             {
-                                if (CanBeIncremental && Question)
+                                if (question)
                                 {
                                     Log.LogErrorFromResources("MakeDir.Comment", directory.ItemSpec);
                                 }
diff --git a/src/Tasks/Touch.cs b/src/Tasks/Touch.cs
index 85590feb637..2004e1eb303 100644
--- a/src/Tasks/Touch.cs
+++ b/src/Tasks/Touch.cs
@@ -57,9 +57,9 @@ public class Touch : TaskExtension, IIncrementalTask
         /// </summary>
         /// <remarks>When Question is true, skip touching the disk to avoid causing incremental issue.
         /// Unless the file doesn't exists, in which case, error out.</remarks>
-        public bool Question { get; set; }
+        public void SetQuestion(bool question) { this.question = question; }
 
-        public bool CanBeIncremental => true;
+        private bool question = false;
 
         /// <summary>
         /// Implementation of the execute method.
@@ -220,7 +220,7 @@ SetLastWriteTime fileSetLastWriteTime
                 {
                     Log.LogMessageFromResources(messageImportance, "Touch.CreatingFile", file, "AlwaysCreate");
 
-                    if (Question)
+                    if (question)
                     {
                         return false;
                     }
@@ -239,7 +239,7 @@ SetLastWriteTime fileSetLastWriteTime
 
             Log.LogMessageFromResources(messageImportance, "Touch.Touching", file);
 
-            if (Question)
+            if (question)
             {
                 return true;
             }
diff --git a/src/Utilities/ToolTask.cs b/src/Utilities/ToolTask.cs
index aba838e7b36..babbc033365 100644
--- a/src/Utilities/ToolTask.cs
+++ b/src/Utilities/ToolTask.cs
@@ -351,11 +351,13 @@ protected virtual void ProcessStarted() { }
         /// Returns true if task execution is not necessary. Executed after ValidateParameters
         /// </summary>
         /// <returns></returns>
-        protected virtual bool SkipTaskExecution() { CanBeIncremental = false; return false; }
+        protected virtual bool SkipTaskExecution() { canBeIncremental = false; return false; }
 
-        public bool CanBeIncremental { get; set; } = false;
+        private bool canBeIncremental { get; set; } = true;
 
-        public bool Question { get; set; }
+        public void SetQuestion(bool question) { this.question = question; }
+
+        private bool question = false;
 
         /// <summary>
         /// Returns a string with those switches and other information that can go into a response file.
@@ -1334,7 +1336,7 @@ public override bool Execute()
                     // doing any actual work).
                     return true;
                 }
-                else if (CanBeIncremental && Question)
+                else if (canBeIncremental && question)
                 {
                     return false;
                 }
