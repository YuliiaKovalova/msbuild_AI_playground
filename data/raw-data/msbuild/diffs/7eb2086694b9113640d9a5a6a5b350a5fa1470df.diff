diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index f17c888437e..0ece9486288 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -12,7 +12,7 @@ public class FancyLogger : ILogger
     {
         public Dictionary<int, int> projectConsoleLines = new Dictionary<int, int>();
         public Dictionary<int, int> tasksConsoleLines = new Dictionary<int, int>();
-        public Dictionary<int, int> targetConsoleLines = new Dictionary<int, int>();
+        public Dictionary<int, FancyLoggerBufferLine> targetConsoleLines = new Dictionary<int, FancyLoggerBufferLine>();
 
         public string Parameters {  get; set; }
 
@@ -42,8 +42,6 @@ public void Initialize(IEventSource eventSource)
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             {
                 FancyLoggerBuffer.Initialize();
-
-                Thread.Sleep(15_000);
             }
         }
 
@@ -66,9 +64,21 @@ void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         // Target
         void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
+            if (e.BuildEventContext?.TargetId == null) return;
+            targetConsoleLines[e.BuildEventContext.TargetId] = FancyLoggerBuffer.WriteNewLine("  "
+                + ANSIBuilder.Formatting.Dim("Target: ")
+                + e.TargetName);
+            Thread.Sleep(500);
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
+            if (e.BuildEventContext?.TargetId == null) return;
+            int lineId = targetConsoleLines[e.BuildEventContext.TargetId].Id;
+            FancyLoggerBuffer.UpdateLine(lineId, ""
+                + ANSIBuilder.Formatting.Color("âœ“", ANSIBuilder.Formatting.ForegroundColor.Green)
+                + ANSIBuilder.Formatting.Dim("Target: ")
+                + ANSIBuilder.Formatting.Color(e.TargetName, ANSIBuilder.Formatting.ForegroundColor.Green)
+            );
         }
 
         // Task
@@ -95,6 +105,9 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         }
 
 
-        public void Shutdown() { }
+        public void Shutdown() {
+            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
+            Console.WriteLine("Build status, warnings and errors will be shown here after the build has ended and the interactive logger has closed");
+        }
     }
 }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 5c561e9e45f..401b62ff4c0 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -10,7 +10,7 @@
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
-    internal class FancyLoggerBufferLine
+    public class FancyLoggerBufferLine
     {
         private static int counter = 0;
         public int Id;
@@ -64,6 +64,8 @@ public static void Initialize()
             RenderFooter();
             ScrollToEnd();
         }
+
+        #region Rendering and scrolling
         private static void RenderTitleBar()
         {
             Console.Write(""
@@ -119,6 +121,7 @@ private static void ScrollToEnd()
             // Go to end
             Console.Write(ANSIBuilder.Cursor.Position(Height, 0));
         }
+        #endregion
 
         private static void ScrollUp()
         {
@@ -130,7 +133,22 @@ private static void ScrollDown()
             ScrollToLine(CurrentTopLineIndex + 1);
         }
 
-        public static void WriteNewLine(string text)
+        public static int GetLineIndexById(int lineId)
+        {
+            for (int i = 0; i < lines.Count; i++)
+            {
+                if (lines[i].Id == lineId) return i;
+            }
+            return -1;
+        }
+        public static FancyLoggerBufferLine? GetLineById(int lineId)
+        {
+            int i = GetLineIndexById(lineId);
+            if (i == -1) return null;
+            return lines[i];
+        }
+
+        public static FancyLoggerBufferLine WriteNewLine(string text)
         {
             // Create line
             FancyLoggerBufferLine line = new FancyLoggerBufferLine(text);
@@ -138,6 +156,17 @@ public static void WriteNewLine(string text)
             lines.Add(line);
             // Update contents
             ScrollToEnd();
+            return line;
+        }
+
+        public static FancyLoggerBufferLine? UpdateLine(int lineId, string text)
+        {
+            FancyLoggerBufferLine? line = GetLineById(lineId);
+            if (line == null) return null;
+
+            line.Text = text;
+            ScrollToLine(CurrentTopLineIndex);
+            return line;
         }
     }
 }
