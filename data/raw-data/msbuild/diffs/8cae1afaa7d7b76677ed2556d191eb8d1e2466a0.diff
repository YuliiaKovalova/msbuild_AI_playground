diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 6d6c6bbc486..a99deface23 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -153,6 +153,13 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         public void Shutdown()
         {
             FancyLoggerBuffer.Terminate();
+            foreach (var project in projects)
+            {
+                foreach (var message in project.Value.AdditionalDetails)
+                {
+                    Console.WriteLine(message.Message);
+                }
+            }
             // TODO: Remove. There is a bug that causes switching to main buffer without deleting the contents of the alternate buffer
             // Console.Clear();
             // Console.WriteLine("Build status, warnings and errors will be shown here after the build has ended and the interactive logger has closed");
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
index 93fdc56ff30..54b4c5101cd 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
@@ -21,19 +21,36 @@ public enum MessageType
             Warning,
             Error
         }
-
         public string Message;
         public FancyLoggerBufferLine? Line;
         public MessageType Type;
+        //
+        public string? Code;
+        public string? FilePath;
+        public int? LineNumber;
+        public int? ColumnNumber;
         public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
         {
             // Get type
-            if (args is BuildMessageEventArgs) Type = MessageType.HighPriorityMessage;
-            else if (args is BuildWarningEventArgs) Type = MessageType.Warning;
-            else if (args is BuildErrorEventArgs) Type = MessageType.Error;
+            if (args is BuildMessageEventArgs message)
+            {
+                Type = MessageType.HighPriorityMessage;
+            }
+            else if (args is BuildWarningEventArgs warning)
+            {
+                Type = MessageType.Warning;
+            }
+            else if (args is BuildErrorEventArgs error)
+            {
+                Type = MessageType.Error;
+                Code = error.Code;
+                FilePath = error.File;
+                LineNumber = error.LineNumber;
+                ColumnNumber = error.ColumnNumber;
+            }
 
-            // TODO: Replace
-            if (args.Message == null)
+                // TODO: Replace
+                if (args.Message == null)
             {
                 Message = string.Empty;
             }
@@ -64,7 +81,7 @@ public void Log()
             } else if (Type == MessageType.Error)
             {
                 FancyLoggerBuffer.UpdateLine(Line.Id, $"    └── {ANSIBuilder.Formatting.Color(
-                    ANSIBuilder.Formatting.Italic($"{ANSIBuilder.Formatting.Dim("Error:")} {Message}"),
+                    ANSIBuilder.Formatting.Italic($"Error {Code}: {FilePath}({LineNumber},{ColumnNumber}) {Message}"),
                     ANSIBuilder.Formatting.ForegroundColor.Red
                 )}");
             }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index 9a125c7996d..c951759e591 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -35,7 +35,7 @@ private static string GetUnambiguousPath(string path)
         public FancyLoggerBufferLine? CurrentTargetLine;
         public FancyLoggerTargetNode? CurrentTargetNode;
         // Messages, errors and warnings
-        List<FancyLoggerMessageNode> AdditionalDetails = new();
+        public List<FancyLoggerMessageNode> AdditionalDetails = new();
         // Count messages, warnings and errors
         public int MessageCount = 0;
         public int WarningCount = 0;
@@ -61,11 +61,11 @@ public void Log()
             // Project details
             string lineContents = ANSIBuilder.Alignment.SpaceBetween(
                 // Show indicator
-                (Finished ? ANSIBuilder.Formatting.Color("✓", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Graphics.Spinner()) +
+                (Finished ? ANSIBuilder.Formatting.Color("✓", ANSIBuilder.Formatting.ForegroundColor.Green) : ANSIBuilder.Formatting.Blinking(ANSIBuilder.Graphics.Spinner())) +
                 // Project
                 ANSIBuilder.Formatting.Dim("Project: ") +
                 // Project file path with color
-                $"{ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )} [{TargetFramework}]",
+                $"{ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )} [{TargetFramework ?? "*"}]",
                 $"({MessageCount} Messages, {WarningCount} Warnings, {ErrorCount} Errors)",
                 Console.WindowWidth
             );
@@ -83,7 +83,7 @@ public void Log()
                     // Only delete high priority messages
                     if (node.Type != FancyLoggerMessageNode.MessageType.HighPriorityMessage) continue;
                     if (node.Line != null) FancyLoggerBuffer.DeleteLine(node.Line.Id);
-                    AdditionalDetails.Remove(node);
+                    // AdditionalDetails.Remove(node);
                 }
             }
 
@@ -96,6 +96,7 @@ public void Log()
             // Messages, warnings and errors
             foreach (FancyLoggerMessageNode node in AdditionalDetails)
             {
+                if (Finished && node.Type == FancyLoggerMessageNode.MessageType.HighPriorityMessage) continue;
                 if (node.Line == null) node.Line = FancyLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
                 node.Log();
             }
@@ -114,21 +115,27 @@ public void AddTask(TaskStartedEventArgs args)
                 CurrentTargetNode.AddTask(args);
             }
         }
-        public void AddMessage(BuildMessageEventArgs args)
+        public FancyLoggerMessageNode? AddMessage(BuildMessageEventArgs args)
         {
-            if (args.Importance != MessageImportance.High) return;
+            if (args.Importance != MessageImportance.High) return null;
             MessageCount++;
-            AdditionalDetails.Add(new FancyLoggerMessageNode(args));
+            FancyLoggerMessageNode node = new FancyLoggerMessageNode(args);
+            AdditionalDetails.Add(node);
+            return node;
         }
-        public void AddWarning(BuildWarningEventArgs args)
+        public FancyLoggerMessageNode? AddWarning(BuildWarningEventArgs args)
         {
             WarningCount++;
-            AdditionalDetails.Add(new FancyLoggerMessageNode(args));
+            FancyLoggerMessageNode node = new FancyLoggerMessageNode(args);
+            AdditionalDetails.Add(node);
+            return node;
         }
-        public void AddError(BuildErrorEventArgs args)
+        public FancyLoggerMessageNode? AddError(BuildErrorEventArgs args)
         {
             ErrorCount++;
-            AdditionalDetails.Add(new FancyLoggerMessageNode(args));
+            FancyLoggerMessageNode node = new FancyLoggerMessageNode(args);
+            AdditionalDetails.Add(node);
+            return node;
         }
     }
 }
