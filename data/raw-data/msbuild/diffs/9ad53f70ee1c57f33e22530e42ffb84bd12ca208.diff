diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index 09f5183121b..2fdef86e4c8 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -84,6 +84,13 @@ public sealed class SolutionFile
 
         private const char CommentStartChar = '#';
 
+        /// <summary>
+        /// Cache the return value of this method, as each invocation returns a new instance.
+        /// The method has to defend against code changing the values within the array, but we don't.
+        /// By caching it we avoid a per-call allocation.
+        /// </summary>
+        private static readonly char[] s_invalidPathChars = Path.GetInvalidPathChars();
+
         #endregion
 
         #region Member data
@@ -1063,7 +1070,7 @@ private void ValidateProjectRelativePath(ProjectInSolution proj)
             ErrorUtilities.VerifyThrow(proj.RelativePath != null, "Project relative path cannot be null.");
 
             // Verify the relative path does not contain invalid characters
-            if (proj.RelativePath.IndexOfAny(Path.GetInvalidPathChars()) != -1)
+            if (proj.RelativePath.IndexOfAny(s_invalidPathChars) != -1)
             {
                 ProjectFileErrorUtilities.ThrowInvalidProjectFile(
                     "SubCategoryForSolutionParsingErrors",
