diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index eb7651b949c..4f7374a90f0 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -2838,6 +2838,45 @@ public void IsOSPlatformDotNet(string platform)
             expander.ExpandIntoStringLeaveEscaped(propertyFunction, ExpanderOptions.ExpandProperties, MockElementLocation.Instance).ShouldBe(expected);
         }
 
+        [WindowsFullFrameworkOnlyTheory]
+        [InlineData("windows", 4)]
+        [InlineData("linux", 0)]
+        [InlineData("macos", 10)]
+        [InlineData("macos", 999)]
+        [InlineData("osx", 0)]
+        public void IsOSPlatformVersionAtLeastFullFramework(string platform, int major)
+        {
+            string propertyFunction = $"$([System.OperatingSystem]::IsOSPlatformVersionAtLeast('{platform}', {major}, 0, 0, 0))";
+            bool result = false;
+#if !NET5_0_OR_GREATER
+            result = Microsoft.Build.Framework.OperatingSystem.IsOSPlatformVersionAtLeast(platform, major, 0, 0, 0);
+#endif
+            string expected = result ? "True" : "False";
+            var pg = new PropertyDictionary<ProjectPropertyInstance>();
+            var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
+            expander.ExpandIntoStringLeaveEscaped(propertyFunction, ExpanderOptions.ExpandProperties, MockElementLocation.Instance).ShouldBe(expected);
+        }
+
+        [DotNetOnlyTheory]
+        [InlineData("windows", 4)]
+        [InlineData("windows", 999)]
+        [InlineData("linux", 0)]
+        [InlineData("macos", 10)]
+        [InlineData("macos", 999)]
+        [InlineData("osx", 0)]
+        public void IsOSPlatformVersionAtLeastDotNet(string platform, int major)
+        {
+            string propertyFunction = $"$([System.OperatingSystem]::IsOSPlatformVersionAtLeast('{platform}', {major}, 0, 0, 0))";
+            bool result = false;
+#if NET5_0_OR_GREATER
+            result = System.OperatingSystem.IsOSPlatformVersionAtLeast(platform, major, 0, 0, 0);
+#endif
+            string expected = result ? "True" : "False";
+            var pg = new PropertyDictionary<ProjectPropertyInstance>();
+            var expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
+            expander.ExpandIntoStringLeaveEscaped(propertyFunction, ExpanderOptions.ExpandProperties, MockElementLocation.Instance).ShouldBe(expected);
+        }
+
         [Theory]
         [InlineData("AString", "x12x456789x11", "$(AString.IndexOf('x', 1))", "3")]
         [InlineData("AString", "x12x456789x11", "$(AString.IndexOf('x45', 1))", "3")]
