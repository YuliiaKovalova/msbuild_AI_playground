diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 9e79cf4b51e..d04a219eea0 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -16,6 +16,7 @@ public class BuildEventArgsReader : IDisposable
     {
         private readonly BinaryReader binaryReader;
         private readonly int fileFormatVersion;
+        private long recordNumber = 0;
 
         /// <summary>
         /// A list of string records we've encountered so far. If it's a small string, it will be the string directly.
@@ -96,6 +97,8 @@ public BuildEventArgs Read()
                     ReadBlob(recordKind);
                 }
 
+                recordNumber += 1;
+
                 recordKind = (BinaryLogRecordKind)ReadInt32();
             }
 
@@ -171,6 +174,8 @@ public BuildEventArgs Read()
                     break;
             }
 
+            recordNumber += 1;
+
             return result;
         }
 
@@ -224,7 +229,9 @@ private IDictionary<string, string> GetNameValueList(int id)
                 return dictionary;
             }
 
-            return new Dictionary<string, string>();
+            // this should never happen for valid binlogs
+            throw new InvalidDataException(
+                $"NameValueList record number {recordNumber} is invalid: index {id} is not within {stringRecords.Count}.");
         }
 
         private void ReadStringRecord()
@@ -1065,7 +1072,9 @@ private string GetStringFromRecord(int index)
                 return result;
             }
 
-            return string.Empty;
+            // this should never happen for valid binlogs
+            throw new InvalidDataException(
+                $"String record number {recordNumber} is invalid: string index {index} is not within {stringRecords.Count}.");
         }
 
         private int ReadInt32()
