diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 88c7f74bca7..9471945f4e3 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -1737,7 +1737,6 @@ internal void ResetToolsetsForTests(ToolsetConfigurationReader configurationRead
             InitializeToolsetCollection(configReader:configurationReaderForTestsOnly);
         }
 
-#if FEATURE_WIN32_REGISTRY
         /// <summary>
         /// Reset the toolsets using the provided toolset reader, used by unit tests
         /// </summary>
@@ -1745,16 +1744,13 @@ internal void ResetToolsetsForTests(ToolsetRegistryReader registryReaderForTests
         {
             InitializeToolsetCollection(registryReader:registryReaderForTestsOnly);
         }
-#endif
 
         /// <summary>
         /// Populate Toolsets with a dictionary of (toolset version, Toolset)
         /// using information from the registry and config file, if any.
         /// </summary>
         private void InitializeToolsetCollection(
-#if FEATURE_WIN32_REGISTRY
                 ToolsetRegistryReader registryReader = null,
-#endif
                 ToolsetConfigurationReader configReader = null
                 )
         {
@@ -1762,9 +1758,7 @@ private void InitializeToolsetCollection(
 
             // We only want our local toolset (as defined in MSBuild.exe.config) when we're operating locally...
             _defaultToolsVersion = ToolsetReader.ReadAllToolsets(_toolsets,
-#if FEATURE_WIN32_REGISTRY
                     registryReader,
-#endif
                     configReader,
                     EnvironmentProperties, _globalProperties, ToolsetLocations);
 
diff --git a/src/Build/Definition/ToolsetReader.cs b/src/Build/Definition/ToolsetReader.cs
index 869b3318ea4..56591a93104 100644
--- a/src/Build/Definition/ToolsetReader.cs
+++ b/src/Build/Definition/ToolsetReader.cs
@@ -84,9 +84,7 @@ protected abstract string DefaultOverrideToolsVersion
         internal static string ReadAllToolsets(Dictionary<string, Toolset> toolsets, PropertyDictionary<ProjectPropertyInstance> environmentProperties, PropertyDictionary<ProjectPropertyInstance> globalProperties, ToolsetDefinitionLocations locations)
         {
             return ReadAllToolsets(toolsets,
-#if FEATURE_WIN32_REGISTRY
                 null,
-#endif
                 null,
                 environmentProperties, globalProperties, locations);
         }
@@ -98,9 +96,7 @@ internal static string ReadAllToolsets(Dictionary<string, Toolset> toolsets, Pro
         internal static string ReadAllToolsets
             (
             Dictionary<string, Toolset> toolsets,
-#if FEATURE_WIN32_REGISTRY
             ToolsetRegistryReader registryReader,
-#endif
             ToolsetConfigurationReader configurationReader,
             PropertyDictionary<ProjectPropertyInstance> environmentProperties,
             PropertyDictionary<ProjectPropertyInstance> globalProperties,
@@ -137,7 +133,6 @@ ToolsetDefinitionLocations locations
 
             if ((locations & ToolsetDefinitionLocations.Registry) == ToolsetDefinitionLocations.Registry)
             {
-#if FEATURE_WIN32_REGISTRY
                 if (NativeMethodsShared.IsWindows || registryReader != null)
                 {
                     // If we haven't been provided a registry reader (i.e. unit tests), create one
@@ -151,7 +146,6 @@ ToolsetDefinitionLocations locations
                         out defaultOverrideToolsVersionFromRegistry);
                 }
                 else
-#endif
                 {
                     var currentDir = BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory.TrimEnd(Path.DirectorySeparatorChar);
                     var props = new PropertyDictionary<ProjectPropertyInstance>();
diff --git a/src/Build/Definition/ToolsetRegistryReader.cs b/src/Build/Definition/ToolsetRegistryReader.cs
index 7a083fbebbd..7b1bfc4dd76 100644
--- a/src/Build/Definition/ToolsetRegistryReader.cs
+++ b/src/Build/Definition/ToolsetRegistryReader.cs
@@ -1,13 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#if FEATURE_WIN32_REGISTRY
-
-using Microsoft.Win32;
 using System;
 using System.Collections.Generic;
-using System.IO;
-using System.Security;
 
 using Microsoft.Build.Shared;
 using error = Microsoft.Build.Shared.ErrorUtilities;
@@ -346,4 +341,3 @@ private static string GetValue(RegistryKeyWrapper wrapper, string valueName)
         }
     }
 }
-#endif
\ No newline at end of file
diff --git a/src/Build/Utilities/RegistryKeyWrapper.cs b/src/Build/Utilities/RegistryKeyWrapper.cs
index 5db9a22e37c..8ab3c88e6a9 100644
--- a/src/Build/Utilities/RegistryKeyWrapper.cs
+++ b/src/Build/Utilities/RegistryKeyWrapper.cs
@@ -1,12 +1,7 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
-#if FEATURE_WIN32_REGISTRY
 
 using System;
-using System.Collections.Generic;
-using System.Globalization;
-using System.IO;
-using System.Security;
 
 using Microsoft.Build.Shared;
 using Microsoft.Win32;
@@ -271,4 +266,3 @@ private void Dispose(bool disposing)
         }
     }
 }
-#endif
