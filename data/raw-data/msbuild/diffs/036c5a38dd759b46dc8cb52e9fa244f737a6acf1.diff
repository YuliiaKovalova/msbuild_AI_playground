diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 5a3ab85eaa0..9065ea7c22f 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -441,9 +441,17 @@ public string TargetedRuntimeVersion
             set { _targetedRuntimeVersionRawValue = value; }
         }
 
-        public string PreComputedCacheOutputPath { get; set; }
+        /// <summary>
+        /// If not null, serializes a cache to this location. This overrides the usual cache, so only use this if you will
+        /// not have access to the usual cache at the next build.
+        /// </summary>
+        public string CacheOutputPath { get; set; }
 
-        public string[] PreComputedCacheFileList { get; set; }
+        /// <summary>
+        /// If not null, uses this set of caches as inputs if RAR cannot find the usual cache in the obj folder. Typically
+        /// used for demos and first-run scenarios.
+        /// </summary>
+        public string[] CacheInputPaths { get; set; }
 
         /// <summary>
         /// List of locations to search for assemblyFiles when resolving dependencies.
@@ -1847,7 +1855,7 @@ private void LogConflict(Reference reference, string fusionName)
 
         #region StateFile
         /// <summary>
-        /// Reads the state file (if present) into the cache.
+        /// Reads the state file (if present) into the cache. If not present, attempts to read from CacheInputPaths, then creates a new cache if necessary.
         /// </summary>
         private void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)
         {
@@ -1855,7 +1863,7 @@ private void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[
 
             if (_cache == null)
             {
-                _cache = SystemState.DeserializePrecomputedCaches(PreComputedCacheFileList ?? new string[0], Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo);
+                _cache = SystemState.DeserializePrecomputedCaches(CacheInputPaths ?? new string[0], Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo);
             }
             else
             {
@@ -1865,13 +1873,13 @@ private void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[
         }
 
         /// <summary>
-        /// Write out the state file if a state name was supplied and the cache is dirty.
+        /// If CacheOutputPath is non-null, writes out a cache to that location. Otherwise, writes out the state file if a state name was supplied and the cache is dirty.
         /// </summary>
         private void WriteStateFile()
         {
-            if (!string.IsNullOrEmpty(PreComputedCacheOutputPath))
+            if (!string.IsNullOrEmpty(CacheOutputPath))
             {
-                _cache.SerializePrecomputedCache(PreComputedCacheOutputPath, Log);
+                _cache.SerializePrecomputedCache(CacheOutputPath, Log);
             }
             else if (!string.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
             {
diff --git a/src/Tasks/StateFileBase.cs b/src/Tasks/StateFileBase.cs
index 3d17a4967a4..8a48a986219 100644
--- a/src/Tasks/StateFileBase.cs
+++ b/src/Tasks/StateFileBase.cs
@@ -64,7 +64,7 @@ internal virtual void SerializeCache(string stateFile, TaskLoggingHelper log)
         /// <summary>
         /// Reads the specified file from disk into a StateFileBase derived object.
         /// </summary>
-        internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelper log, Type requiredReturnType)
+        internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelper log, Type requiredReturnType, bool logWarnings = true)
         {
             StateFileBase retVal = null;
 
@@ -89,16 +89,20 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp
                             // If there is an invalid cast, a message rather than a warning should be emitted.
                             log.LogMessageFromResources("General.CouldNotReadStateFileMessage", stateFile, log.FormatResourceString("General.IncompatibleStateFileType"));
                         }
-
-                        if ((retVal != null) && (!requiredReturnType.IsInstanceOfType(retVal)))
+                        else if (retVal != null && (!requiredReturnType.IsInstanceOfType(retVal)))
                         {
-                            log.LogWarningWithCodeFromResources("General.CouldNotReadStateFile", stateFile,
-                                log.FormatResourceString("General.IncompatibleStateFileType"));
+                            if (logWarnings)
+                            {
+                                log.LogWarningWithCodeFromResources("General.CouldNotReadStateFile", stateFile, log.FormatResourceString("General.IncompatibleStateFileType"));
+                            }
+                            else
+                            {
+                                log.LogMessageFromResources("General.CouldNotReadStateFile", stateFile, log.FormatResourceString("General.IncompatibleStateFileType"));
+                            }
                             retVal = null;
                         }
-
                         // If we get back a valid object and internals were changed, things are likely to be null. Check the version before we use it.
-                        if (retVal != null && retVal._serializedVersion != CurrentSerializationVersion)
+                        else if (retVal != null && retVal._serializedVersion != CurrentSerializationVersion)
                         {
                             log.LogMessageFromResources("General.CouldNotReadStateFileMessage", stateFile, log.FormatResourceString("General.IncompatibleStateFileType"));
                             retVal = null;
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index fa027695ebb..b663f73c5a3 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -8,7 +8,6 @@
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
-using System.Reflection;
 using System.Reflection.Metadata;
 using System.Reflection.PortableExecutable;
 using System.Runtime.Serialization;
@@ -16,7 +15,6 @@
 using System.Security.Permissions;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.AssemblyDependency;
-using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
 using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.Tasks
@@ -239,6 +237,9 @@ internal FrameworkName FrameworkNameAttribute
                 set { frameworkName = value; }
             }
 
+            /// <summary>
+            /// Get or set the ID of this assembly. Used to verify it is the same version.
+            /// </summary>
             internal Guid ModuleVersionID { get; set; }
         }
 
@@ -555,6 +556,9 @@ out fileState.frameworkName
             frameworkName = fileState.frameworkName;
         }
 
+        /// <summary>
+        /// Reads in cached data from stateFiles to build an initial cache. Avoids logging warnings or errors.
+        /// </summary>
         internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, TaskLoggingHelper log, Type requiredReturnType, GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)
         {
             SystemState retVal = new SystemState();
@@ -565,7 +569,7 @@ internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, Ta
             foreach (string stateFile in stateFiles)
             {
                 // Verify that it's a real stateFile; log message but do not error if not
-                SystemState sfBase = (SystemState)DeserializeCache(stateFile, log, requiredReturnType);
+                SystemState sfBase = (SystemState)DeserializeCache(stateFile, log, requiredReturnType, false);
                 foreach (string relativePath in sfBase.instanceLocalFileStateCache.Keys)
                 {
                     if (!retVal.instanceLocalFileStateCache.ContainsKey(relativePath))
@@ -578,7 +582,7 @@ internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, Ta
                             var metadataReader = reader.GetMetadataReader();
                             mvid = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);
                         }
-                        if (File.Exists(relativePath) && Assembly.Load(File.ReadAllBytes(relativePath)).ManifestModule.ModuleVersionId.Equals(fileState.ModuleVersionID))
+                        if (File.Exists(relativePath) && mvid.Equals(fileState.ModuleVersionID))
                         {
                             // Correct file path and timestamp
                             string fullPath = Path.GetFullPath(Path.Combine(stateFile, relativePath));
@@ -592,16 +596,21 @@ internal static SystemState DeserializePrecomputedCaches(string[] stateFiles, Ta
             return retVal;
         }
 
+        /// <summary>
+        /// Modifies this object to be more portable across machines, then writes it to stateFile.
+        /// </summary>
         internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
         {
             foreach (string path in instanceLocalFileStateCache.Keys)
             {
+                // Add MVID to allow us to verify that we are using the same assembly later
                 FileState fileState = (FileState)instanceLocalFileStateCache[path];
                 using (var reader = new PEReader(File.OpenRead(path)))
                 {
                     var metadataReader = reader.GetMetadataReader();
                     fileState.ModuleVersionID = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);
                 }
+
                 instanceLocalFileStateCache.Remove(path);
                 string relativePath = new Uri(Path.GetDirectoryName(stateFile)).MakeRelativeUri(new Uri(path)).ToString();
                 instanceLocalFileStateCache[relativePath] = fileState;
