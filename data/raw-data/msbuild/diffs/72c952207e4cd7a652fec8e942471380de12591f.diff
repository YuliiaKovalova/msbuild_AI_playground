diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index 3eb387b5f30..a62dbc61e2e 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -1,8 +1,9 @@
-// Licensed to the .NET Foundation under one or more agreements.
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Threading.Tasks;
 using Microsoft.Build.Framework;
 
@@ -17,8 +18,7 @@ internal class LiveLogger : ILogger
         private int finishedProjects = 0;
         private Dictionary<string, int> blockedProjects = new();
 
-        private DateTime startTime;
-        private DateTime endTime;
+        private Stopwatch? _stopwatch;
 
         public LoggerVerbosity Verbosity { get; set; }
         public string Parameters { get; set; }
@@ -30,6 +30,10 @@ public LiveLogger()
 
         public void Initialize(IEventSource eventSource)
         {
+            // Start the stopwatch as soon as the logger is initialized to capture
+            // any time before the BuildStarted event
+            _stopwatch = Stopwatch.StartNew();
+
             // Register for different events
             // Started
             eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);
@@ -122,7 +126,6 @@ private void UpdateFooter()
         // Build
         private void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)
         {
-            startTime = DateTime.Now;
         }
 
         private void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
@@ -291,7 +294,6 @@ private void console_CancelKeyPressed(object? sender, ConsoleCancelEventArgs eve
 
         public void Shutdown()
         {
-            TimeSpan buildDuration = endTime - startTime;
             TerminalBuffer.Terminate();
             int errorCount = 0;
             int warningCount = 0;
@@ -312,9 +314,12 @@ public void Shutdown()
                 Console.WriteLine();
             }
 
-            // Emmpty line
+            // Empty line
             Console.WriteLine();
 
+            Debug.Assert(_stopwatch is not null, $"Expected {nameof(_stopwatch)} to be initialized long before Shutdown()");
+            TimeSpan buildDuration = _stopwatch.Elapsed;
+
             string prettyDuration = buildDuration.TotalHours > 1.0 ?
                 buildDuration.ToString(@"h\:mm\:ss") :
                 buildDuration.ToString(@"m\:ss");
