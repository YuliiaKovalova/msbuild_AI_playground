diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index 3581225789d..62581e4328c 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -454,6 +454,18 @@ public void WriteLinesToFileUpToDateStop(string fileItemSpec, bool wasUpToDate)
             WriteEvent(61, fileItemSpec, wasUpToDate);
         }
 
+        [Event(70, Keywords = Keywords.All)]
+        public void GetLastWriteFileUtcTimeStart(string file)
+        {
+            WriteEvent(70, file);
+        }
+
+        [Event(71, Keywords = Keywords.All)]
+        public void GetLastWriteFileUtcTimeStop(string file, bool cacheHit, bool exists)
+        {
+            WriteEvent(71, file, cacheHit, exists);
+        }
+
         #endregion
     }
 }
diff --git a/src/Shared/NativeMethodsShared.cs b/src/Shared/NativeMethodsShared.cs
index 810125d90ac..b2569de9606 100644
--- a/src/Shared/NativeMethodsShared.cs
+++ b/src/Shared/NativeMethodsShared.cs
@@ -7,10 +7,14 @@
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
+using System.Linq;
 using System.Runtime.InteropServices;
 using System.Text;
 using System.Threading;
 using System.Reflection;
+#if !CLR2COMPATIBILITY
+using Microsoft.Build.Eventing;
+#endif
 using Microsoft.Win32;
 using Microsoft.Win32.SafeHandles;
 
@@ -603,10 +607,20 @@ internal static int MaxPath
         /// </summary>
         private static int _maxPath;
 
+        private static readonly ProjectFileClassifier FilesImmutabilityClassifier;
+        private static readonly Dictionary<string, DateTime> ImmutableFilesTimestampCache = new(StringComparer.OrdinalIgnoreCase);
+        private static readonly object FilesImmutabilityLock = new object();
+
         private static bool IsMaxPathSet { get; set; }
 
         private static readonly object MaxPathLock = new object();
 
+        static NativeMethodsShared()
+        {
+            FilesImmutabilityClassifier = new ProjectFileClassifier();
+            FilesImmutabilityClassifier.NuGetPackageFolders = @"C:\Users\rokon\.nuget;E:\NugetCache";
+        }
+
         private static void SetMaxPath()
         {
             lock (MaxPathLock)
@@ -1052,37 +1066,86 @@ internal static MemoryStatus GetMemoryStatus()
         /// </remarks>
         internal static DateTime GetLastWriteFileUtcTime(string fullPath)
         {
-            DateTime fileModifiedTime = DateTime.MinValue;
-
-            if (IsWindows)
+#if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
+            MSBuildEventSource.Log.GetLastWriteFileUtcTimeStart(fullPath);
+            bool cacheHit = false;
+#endif
+            DateTime modifiedTime = DateTime.MinValue;
+            try
             {
-                if (Traits.Instance.EscapeHatches.AlwaysUseContentTimestamp)
+                if (Environment.GetEnvironmentVariable("MSBUILDCACHEIMMUTABLEFILESLASTMODIFIED") != "1")
                 {
-                    return GetContentLastWriteFileUtcTime(fullPath);
+                    return LastWriteFileUtcTime(fullPath);
                 }
 
-                WIN32_FILE_ATTRIBUTE_DATA data = new WIN32_FILE_ATTRIBUTE_DATA();
-                bool success = NativeMethodsShared.GetFileAttributesEx(fullPath, 0, ref data);
-
-                if (success && (data.fileAttributes & NativeMethodsShared.FILE_ATTRIBUTE_DIRECTORY) == 0)
+                bool isModifiable = !FilesImmutabilityClassifier.IsNonModifiable(fullPath);
+                if (!isModifiable)
                 {
-                    long dt = ((long)(data.ftLastWriteTimeHigh) << 32) | ((long)data.ftLastWriteTimeLow);
-                    fileModifiedTime = DateTime.FromFileTimeUtc(dt);
+                    lock (FilesImmutabilityLock)
+                    {
+                        if (ImmutableFilesTimestampCache.TryGetValue(fullPath, out DateTime modifiedAt))
+                        {
+#if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
+                            cacheHit = true;
+#endif
+                            return modifiedAt;
+                        }
+                    }
+                }
+
+                modifiedTime = LastWriteFileUtcTime(fullPath);
 
-                    // If file is a symlink _and_ we're not instructed to do the wrong thing, get a more accurate timestamp. 
-                    if ((data.fileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) == FILE_ATTRIBUTE_REPARSE_POINT && !Traits.Instance.EscapeHatches.UseSymlinkTimeInsteadOfTargetTime)
+                if (!isModifiable && modifiedTime != DateTime.MinValue)
+                {
+                    lock (FilesImmutabilityLock)
                     {
-                        fileModifiedTime = GetContentLastWriteFileUtcTime(fullPath);
+                        ImmutableFilesTimestampCache[fullPath] = modifiedTime;
                     }
                 }
 
-                return fileModifiedTime;
+                return modifiedTime;
             }
-            else
+            finally
+            {
+#if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
+                MSBuildEventSource.Log.GetLastWriteFileUtcTimeStop(fullPath, cacheHit, modifiedTime != DateTime.MinValue);
+#endif 
+            }
+
+            DateTime LastWriteFileUtcTime(string path)
             {
-                return File.Exists(fullPath)
-                        ? File.GetLastWriteTimeUtc(fullPath)
+                DateTime fileModifiedTime = DateTime.MinValue;
+
+                if (IsWindows)
+                {
+                    if (Traits.Instance.EscapeHatches.AlwaysUseContentTimestamp)
+                    {
+                        return GetContentLastWriteFileUtcTime(path);
+                    }
+
+                    WIN32_FILE_ATTRIBUTE_DATA data = new WIN32_FILE_ATTRIBUTE_DATA();
+                    bool success = NativeMethodsShared.GetFileAttributesEx(path, 0, ref data);
+
+                    if (success && (data.fileAttributes & NativeMethodsShared.FILE_ATTRIBUTE_DIRECTORY) == 0)
+                    {
+                        long dt = ((long) (data.ftLastWriteTimeHigh) << 32) | ((long) data.ftLastWriteTimeLow);
+                        fileModifiedTime = DateTime.FromFileTimeUtc(dt);
+
+                        // If file is a symlink _and_ we're not instructed to do the wrong thing, get a more accurate timestamp. 
+                        if ((data.fileAttributes & FILE_ATTRIBUTE_REPARSE_POINT) == FILE_ATTRIBUTE_REPARSE_POINT && !Traits.Instance.EscapeHatches.UseSymlinkTimeInsteadOfTargetTime)
+                        {
+                            fileModifiedTime = GetContentLastWriteFileUtcTime(path);
+                        }
+                    }
+
+                    return fileModifiedTime;
+                }
+                else
+                {
+                    return File.Exists(path)
+                        ? File.GetLastWriteTimeUtc(path)
                         : DateTime.MinValue;
+                }
             }
         }
 
@@ -1703,6 +1766,160 @@ internal static bool FileOrDirectoryExistsWindows(string path)
             return GetFileAttributesEx(path, 0, ref data);
         }
 
+        /// <summary>
+        /// Attempts to classify project files for various purposes such as safety and performance.
+        /// </summary>
+        /// <remarks>
+        /// <para>
+        /// The term "project files" refers to the root project file (e.g. <c>MyProject.csproj</c>) and
+        /// any other <c>.props</c> and <c>.targets</c> files it imports.
+        /// </para>
+        /// <para>
+        /// Classifications provided are:
+        /// <list type="number">
+        ///   <item>
+        ///     <see cref="IsNonUserEditable"/> which indicates the file is not intended to be edited by the
+        ///     user. It may be generated, or ship as part of Visual Studio, MSBuild, a NuGet package, etc.
+        ///   </item>
+        ///   <item>
+        ///     <see cref="IsNonModifiable"/> which indicates the file is not expected to change over time,
+        ///     other than when it is first created. This is a subset of non-user-editable files and
+        ///     generally excludes generated files which can be regenerated in response to user actions.
+        ///   </item>
+        /// </list>
+        /// </para>
+        /// </remarks>
+        private sealed class ProjectFileClassifier
+        {
+            const StringComparison PathComparison = StringComparison.OrdinalIgnoreCase;
+
+            /// <summary>
+            /// Single, static instance of an array that contains a semi-colon ';', which is used to split strings.
+            /// </summary>
+            private static readonly char[] SemicolonDelimiter = new char[] { ';' };
+
+            private readonly string _programFiles86;
+            private readonly string _programFiles64;
+            private readonly string _vsInstallationDirectory;
+
+#if CLR2COMPATIBILITY
+            private string[] _nuGetPackageFolders = new string[0];
+#else
+            private string[] _nuGetPackageFolders = Array.Empty<string>();
+#endif
+
+            private string _nuGetPackageFoldersString;
+            private string _projectExtensionsPath;
+
+            /// <summary>
+            /// Gets and sets the <c>MSBuildProjectExtensionsPath</c> property value for this project.
+            /// Project files under this folder are considered non-modifiable.
+            /// </summary>
+            /// <remarks>
+            /// This value is only needed for <see cref="IsNonUserEditable"/>. Files under this path
+            /// are changed over time by tooling, so do not satisfy <see cref="IsNonModifiable"/>.
+            /// </remarks>
+            /// <remarks>
+            /// Example value: <c>"C:\repos\MySolution\MyProject\obj\"</c>
+            /// </remarks>
+            public string ProjectExtensionsPath
+            {
+                get => _projectExtensionsPath;
+                set
+                {
+                    _projectExtensionsPath = value;
+                    EnsureTrailingSlash(ref _projectExtensionsPath);
+                }
+            }
+
+            /// <summary>
+            /// Gets and sets the paths found in the <c>NuGetPackageFolders</c> property value for this project.
+            /// Project files under any of these folders are considered non-modifiable.
+            /// </summary>
+            /// <remarks>
+            /// This value is used by both <see cref="IsNonUserEditable"/> and <see cref="IsNonModifiable"/>.
+            /// Files in the NuGet package cache are not expected to change over time, once they are created.
+            /// </remarks>
+            /// <remarks>
+            /// Example value: <c>"C:\Users\myusername\.nuget\;D:\LocalNuGetCache\"</c>
+            /// </remarks>
+            public string NuGetPackageFolders
+            {
+                set
+                {
+                    if (!string.Equals(_nuGetPackageFoldersString, value, PathComparison))
+                    {
+                        _nuGetPackageFoldersString = value;
+                        _nuGetPackageFolders = value.Split(SemicolonDelimiter, StringSplitOptions.RemoveEmptyEntries);
+                    }
+                }
+            }
+
+            public ProjectFileClassifier()
+            {
+                _programFiles64 = Environment.GetEnvironmentVariable("ProgramW6432");
+                _programFiles86 = Environment.GetEnvironmentVariable("ProgramFiles(x86)");
+
+                _vsInstallationDirectory = GetVSInstallationDirectory();
+
+                EnsureTrailingSlash(ref _programFiles86);
+                EnsureTrailingSlash(ref _programFiles64);
+                EnsureTrailingSlash(ref _vsInstallationDirectory);
+
+                return;
+
+                static string GetVSInstallationDirectory()
+                {
+                    string dir = Environment.GetEnvironmentVariable("VSAPPIDDIR");
+
+                    // The path provided is not the installation root, but rather the location of devenv.exe.
+                    // __VSSPROPID.VSSPROPID_InstallDirectory has the same value.
+                    // Failing a better way to obtain the installation root, remove that suffix.
+                    // Obviously this is brittle against changes to the relative path of devenv.exe, however that seems
+                    // unlikely and should be easy to work around if ever needed.
+                    const string DevEnvExeRelativePath = "Common7\\IDE\\";
+
+                    if (dir?.EndsWith(DevEnvExeRelativePath, PathComparison) == true)
+                    {
+                        dir = dir.Substring(0, dir.Length - DevEnvExeRelativePath.Length);
+                    }
+
+                    return dir;
+                }
+            }
+
+            private static void EnsureTrailingSlash(ref string path)
+            {
+                if (path is not null)
+                {
+                    path = FileUtilities.EnsureTrailingSlash(path);
+                }
+            }
+
+            /// <summary>
+            /// Gets whether this file is not intended to be edited by the user.
+            /// </summary>
+            /// <param name="filePath">The path to the file to test.</param>
+            /// <returns><see langword="true"/> if the file is non-user-editable, otherwise <see langword="false"/>.</returns>
+            public bool IsNonUserEditable(string filePath)
+            {
+                return IsNonModifiable(filePath)
+                       || (ProjectExtensionsPath != null && filePath.StartsWith(ProjectExtensionsPath, PathComparison));
+            }
+
+            /// <summary>
+            /// Gets whether a file is expected to not be modified in place on disk once it has been created.
+            /// </summary>
+            /// <param name="filePath">The path to the file to test.</param>
+            /// <returns><see langword="true"/> if the file is non-modifiable, otherwise <see langword="false"/>.</returns>
+            public bool IsNonModifiable(string filePath)
+            {
+                return (_programFiles64 != null && filePath.StartsWith(_programFiles64, PathComparison))
+                       || filePath.StartsWith(_programFiles86, PathComparison)
+                       || _nuGetPackageFolders.Any(nugetFolder => filePath.StartsWith(nugetFolder, PathComparison))
+                       || (_vsInstallationDirectory != null && filePath.StartsWith(_vsInstallationDirectory, PathComparison));
+            }
+        }
 #endregion
     }
 }
