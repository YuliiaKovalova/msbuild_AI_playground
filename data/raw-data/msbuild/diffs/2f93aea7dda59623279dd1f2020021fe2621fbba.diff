diff --git a/src/Build/BackEnd/Node/NodeConfiguration.cs b/src/Build/BackEnd/Node/NodeConfiguration.cs
index 0b678346842..418855b2416 100644
--- a/src/Build/BackEnd/Node/NodeConfiguration.cs
+++ b/src/Build/BackEnd/Node/NodeConfiguration.cs
@@ -28,6 +28,11 @@ internal class NodeConfiguration : INodePacket
         private BuildParameters _buildParameters;
 
 #if FEATURE_APPDOMAIN
+        /// <summary>
+        /// The app domain configuration bytes sent via RPC.
+        /// </summary>
+        private byte[] _appDomainConfigBytes;
+
         /// <summary>
         /// The app domain information needed for setting up AppDomain-isolated tasks.
         /// </summary>
@@ -66,6 +71,7 @@ public NodeConfiguration(
             _buildParameters = buildParameters;
             _forwardingLoggers = forwardingLoggers;
 #if FEATURE_APPDOMAIN
+            _appDomainConfigBytes = appDomainSetup?.GetConfigurationBytes();
             _appDomainSetup = appDomainSetup;
 #endif
             _loggingNodeConfiguration = loggingNodeConfiguration;
@@ -161,7 +167,7 @@ public void Translate(ITranslator translator)
             translator.Translate(ref _buildParameters, BuildParameters.FactoryForDeserialization);
             translator.TranslateArray(ref _forwardingLoggers, LoggerDescription.FactoryForTranslation);
 #if FEATURE_APPDOMAIN
-            translator.TranslateDotNet(ref _appDomainSetup);
+            translator.Translate(ref _appDomainConfigBytes);
 #endif
             translator.Translate(ref _loggingNodeConfiguration);
         }
@@ -173,6 +179,13 @@ internal static INodePacket FactoryForDeserialization(ITranslator translator)
         {
             NodeConfiguration configuration = new NodeConfiguration();
             configuration.Translate(translator);
+#if FEATURE_APPDOMAIN
+            if (configuration._appDomainConfigBytes != null)
+            {
+                configuration._appDomainSetup = new AppDomainSetup();
+                configuration._appDomainSetup.SetConfigurationBytes(configuration._appDomainConfigBytes);
+            }
+#endif
             return configuration;
         }
         #endregion
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 822495b0179..f5e9c25f9fc 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -44,6 +44,11 @@ internal class TaskHostConfiguration : INodePacket
         private CultureInfo _uiCulture = CultureInfo.CurrentUICulture;
 
 #if FEATURE_APPDOMAIN
+        /// <summary>
+        /// The app domain configuration bytes sent via RPC.
+        /// </summary>
+        private byte[] _appDomainConfigBytes;
+
         /// <summary>
         /// The AppDomainSetup that we may want to use on AppDomainIsolated tasks. 
         /// </summary>
@@ -182,6 +187,7 @@ public TaskHostConfiguration(
             _culture = culture;
             _uiCulture = uiCulture;
 #if FEATURE_APPDOMAIN
+            _appDomainConfigBytes = appDomainSetup?.GetConfigurationBytes();
             _appDomainSetup = appDomainSetup;
 #endif
             _lineNumberOfTask = lineNumberOfTask;
@@ -417,7 +423,7 @@ public void Translate(ITranslator translator)
             translator.TranslateCulture(ref _culture);
             translator.TranslateCulture(ref _uiCulture);
 #if FEATURE_APPDOMAIN
-            translator.TranslateDotNet(ref _appDomainSetup);
+            translator.Translate(ref _appDomainConfigBytes);
 #endif
             translator.Translate(ref _lineNumberOfTask);
             translator.Translate(ref _columnNumberOfTask);
@@ -458,6 +464,13 @@ internal static INodePacket FactoryForDeserialization(ITranslator translator)
         {
             TaskHostConfiguration configuration = new TaskHostConfiguration();
             configuration.Translate(translator);
+#if FEATURE_APPDOMAIN
+            if (configuration._appDomainConfigBytes != null)
+            {
+                configuration._appDomainSetup = new AppDomainSetup();
+                configuration._appDomainSetup.SetConfigurationBytes(configuration._appDomainConfigBytes);
+            }
+#endif
             return configuration;
         }
     }
