diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index e7c7fc19ff0..0832273c79b 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -1156,7 +1156,7 @@ internal sealed class CopyMonitor
             *
             * Don't really copy the file, just count how many times this was called.
             */
-            internal bool? CopyFile(FileState source, FileState destination, string sourceFileFullPath, string destinationFileFullPath)
+            internal bool? CopyFile(FileState source, FileState destination)
             {
                 Interlocked.Increment(ref copyCount);
                 return true;
@@ -1602,7 +1602,7 @@ public void CopyWithDuplicatesUsingFolder()
                 UseSymboliclinksIfPossible = UseSymbolicLinks,
             };
 
-            bool success = t.Execute(delegate (FileState source, FileState dest, string sourceFileFullPath, string destinationFileFullPath)
+            bool success = t.Execute(delegate (FileState source, FileState dest)
             {
                 lock (filesActuallyCopied)
                 {
@@ -1668,7 +1668,7 @@ public void CopyWithDuplicatesUsingFiles()
                 UseSymboliclinksIfPossible = UseSymbolicLinks,
             };
 
-            bool success = t.Execute(delegate (FileState source, FileState dest, string sourceFileFullPath, string destinationFileFullPath)
+            bool success = t.Execute(delegate (FileState source, FileState dest)
             {
                 lock (filesActuallyCopied)
                 {
@@ -2148,7 +2148,7 @@ internal CopyFunctor(int countOfSuccess, bool throwOnFailure)
             /// <summary>
             /// Pretend to be File.Copy.
             /// </summary>
-            internal bool? Copy(FileState source, FileState destination, string sourceFileFullPath, string destinationFileFullPath)
+            internal bool? Copy(FileState source, FileState destination)
             {
                 lock (_lockObj)
                 {
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index 4de750f8786..824ba77c1bd 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -226,9 +226,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)
         /// <returns>Return true to indicate success, return false to indicate failure and NO retry, return NULL to indicate retry.</returns>
         private bool? CopyFileWithLogging(
             FileState sourceFileState,
-            FileState destinationFileState,
-            string sourceFileFullPath,
-            string destinationFileFullPath)
+            FileState destinationFileState)
         {
             if (destinationFileState.DirectoryExists)
             {
@@ -278,7 +276,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)
 
             if (FailIfNotIncremental)
             {
-                Log.LogError(FileComment, sourceFileFullPath, destinationFileFullPath);
+                Log.LogError(FileComment, sourceFileState.FileNameFullPath, destinationFileState.FileNameFullPath);
                 return false;
             }
 
@@ -308,11 +306,11 @@ private void LogDiagnostic(string message, params object[] messageArgs)
                     if (UseSymboliclinksIfPossible)
                     {
                         // This is a message for fallback to SymbolicLinks if HardLinks fail when UseHardlinksIfPossible and UseSymboliclinksIfPossible are true
-                        Log.LogMessage(MessageImportance.Normal, RetryingAsSymbolicLink, sourceFileFullPath, destinationFileFullPath, errorMessage);
+                        Log.LogMessage(MessageImportance.Normal, RetryingAsSymbolicLink, sourceFileState.FileNameFullPath, destinationFileState.FileNameFullPath, errorMessage);
                     }
                     else
                     {
-                        Log.LogMessage(MessageImportance.Normal, RetryingAsFileCopy, sourceFileFullPath, destinationFileFullPath, errorMessage);
+                        Log.LogMessage(MessageImportance.Normal, RetryingAsFileCopy, sourceFileState.FileNameFullPath, destinationFileState.FileNameFullPath, errorMessage);
                     }
                 }
             }
@@ -328,13 +326,13 @@ private void LogDiagnostic(string message, params object[] messageArgs)
                         errorMessage = Log.FormatResourceString("Copy.NonWindowsLinkErrorMessage", "symlink()", errorMessage);
                     }
 
-                    Log.LogMessage(MessageImportance.Normal, RetryingAsFileCopy, sourceFileFullPath, destinationFileFullPath, errorMessage);
+                    Log.LogMessage(MessageImportance.Normal, RetryingAsFileCopy, sourceFileState.FileNameFullPath, destinationFileState.FileNameFullPath, errorMessage);
                 }
             }
 
             if (ErrorIfLinkFails && !hardLinkCreated && !symbolicLinkCreated)
             {
-                Log.LogErrorWithCodeFromResources("Copy.LinkFailed", sourceFileFullPath, destinationFileFullPath);
+                Log.LogErrorWithCodeFromResources("Copy.LinkFailed", sourceFileState.FileNameFullPath, destinationFileState.FileNameFullPath);
                 return false;
             }
 
@@ -343,7 +341,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)
             if (!hardLinkCreated && !symbolicLinkCreated)
             {
                 // Do not log a fake command line as well, as it's superfluous, and also potentially expensive
-                Log.LogMessage(MessageImportance.Normal, FileComment, sourceFileFullPath, destinationFileFullPath);
+                Log.LogMessage(MessageImportance.Normal, FileComment, sourceFileState.FileNameFullPath, destinationFileState.FileNameFullPath);
 
                 File.Copy(sourceFileState.Name, destinationFileState.Name, true);
 
@@ -749,11 +747,7 @@ private bool DoCopyIfNecessary(FileState sourceFileState, FileState destinationF
                         "true");
                     MSBuildEventSource.Log.CopyUpToDateStop(destinationFileState.Name, true);
                 }
-                else if (!PathsAreIdentical(
-                             sourceFileState.Name,
-                             destinationFileState.Name,
-                             out string sourceFileFullPath,
-                             out string destinationFileFullPath))
+                else if (!PathsAreIdentical(sourceFileState, destinationFileState))
                 {
                     MSBuildEventSource.Log.CopyUpToDateStop(destinationFileState.Name, false);
 
@@ -764,7 +758,7 @@ private bool DoCopyIfNecessary(FileState sourceFileState, FileState destinationF
                     }
                     else
                     {
-                        success = DoCopyWithRetries(sourceFileState, destinationFileState, sourceFileFullPath, destinationFileFullPath, copyFile);
+                        success = DoCopyWithRetries(sourceFileState, destinationFileState, copyFile);
                     }
                 }
                 else
@@ -793,7 +787,7 @@ private bool DoCopyIfNecessary(FileState sourceFileState, FileState destinationF
         /// <summary>
         /// Copy one file with the appropriate number of retries if it fails.
         /// </summary>
-        private bool DoCopyWithRetries(FileState sourceFileState, FileState destinationFileState, string sourceFileFullPath, string destinationFileFullPath, CopyFileWithState copyFile)
+        private bool DoCopyWithRetries(FileState sourceFileState, FileState destinationFileState, CopyFileWithState copyFile)
         {
             int retries = 0;
 
@@ -801,7 +795,7 @@ private bool DoCopyWithRetries(FileState sourceFileState, FileState destinationF
             {
                 try
                 {
-                    bool? result = copyFile(sourceFileState, destinationFileState, sourceFileFullPath, destinationFileFullPath);
+                    bool? result = copyFile(sourceFileState, destinationFileState);
                     if (result.HasValue)
                     {
                         return result.Value;
@@ -957,20 +951,16 @@ public override bool Execute()
         /// Compares two paths to see if they refer to the same file. We can't solve the general
         /// canonicalization problem, so we just compare strings on the full paths.
         /// </summary>
-        private static bool PathsAreIdentical(string source, string destination, out string sourceFileFullPath, out string destinationFileFullPath)
+        private static bool PathsAreIdentical(FileState source, FileState destination)
         {
-            // If the source and destination strings are identical, we will not do the copy or even log the full path,
-            // so we can lie here about whether the paths are full paths.
-            if (String.Equals(source, destination, FileUtilities.PathComparison))
+            if (string.Equals(source.Name, destination.Name, FileUtilities.PathComparison))
             {
-                sourceFileFullPath = source;
-                destinationFileFullPath = destination;
                 return true;
             }
 
-            sourceFileFullPath = Path.GetFullPath(source);
-            destinationFileFullPath = Path.GetFullPath(destination);
-            return String.Equals(sourceFileFullPath, destinationFileFullPath, FileUtilities.PathComparison);
+            source.FileNameFullPath = Path.GetFullPath(source.Name);
+            destination.FileNameFullPath = Path.GetFullPath(destination.Name);
+            return string.Equals(source.FileNameFullPath, destination.FileNameFullPath, FileUtilities.PathComparison);
         }
 
         private static int GetParallelismFromEnvironment()
diff --git a/src/Tasks/FileState.cs b/src/Tasks/FileState.cs
index 8b5b7930683..4e00e4af725 100644
--- a/src/Tasks/FileState.cs
+++ b/src/Tasks/FileState.cs
@@ -17,9 +17,7 @@ namespace Microsoft.Build.Tasks
     /// </summary>
     /// <param name="source">Source file</param>
     /// <param name="destination">Destination file</param>
-    /// <param name="sourceFileFullPath">Source file's full path</param>
-    /// <param name="destinationFileFullPath">Destination file's full path</param>
-    internal delegate bool? CopyFileWithState(FileState source, FileState destination, string sourceFileFullPath, string destinationFileFullPath);
+    internal delegate bool? CopyFileWithState(FileState source, FileState destination);
 
     /// <summary>
     /// Short-term cache saves the result of IO operations on a filename. Should only be
@@ -233,6 +231,11 @@ public void ThrowException()
         /// </summary>
         private readonly string _filename;
 
+        /// <summary>
+        /// Holds the full path equivalent of _filename
+        /// </summary>
+        public string FileNameFullPath;
+
         /// <summary>
         /// Actual file or directory information
         /// </summary>
