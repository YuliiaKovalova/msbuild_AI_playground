diff --git a/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md b/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md
index 9074e381ee8..d95476fbcab 100644
--- a/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md
+++ b/documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md
@@ -1,30 +1,33 @@
 MSBuild can be successfully built on Windows, OS X 10.13, Ubuntu 14.04, and Ubuntu 16.04.
 
-# Windows #
+# Windows
+
 ## Build process
 
 `build.cmd -hosttype core`
 
-# Unix #
+# Unix
 
-**Required packages for OSX & Ubuntu**
+## Required packages for OSX & Ubuntu
 
 [.NET Core prerequisites](https://github.com/dotnet/core/blob/master/Documentation/prereqs.md).
 
-* *OpenSSL*: MSBuild uses the .Net CLI to download Nuget packages during its build process. The CLI requires a recent OpenSSL library available in `/usr/lib`. This can be downloaded using [brew](http://brew.sh/) on OS X (`brew install openssl`) and apt-get (`apt-get install openssl`) on Ubuntu, or [building from source](https://wiki.openssl.org/index.php/Compilation_and_Installation#Mac). If you use a different package manager and see an error that says `Unable to load DLL 'System.Security.Cryptography.Native'`, `dotnet` may be looking in the wrong place for the library.
+* *OpenSSL*: MSBuild uses the .Net CLI to download NuGet packages during its build process. The CLI requires a recent OpenSSL library available in `/usr/lib`. This can be downloaded using [brew](http://brew.sh/) on OS X (`brew install openssl`) and apt-get (`apt-get install openssl`) on Ubuntu, or [building from source](https://wiki.openssl.org/index.php/Compilation_and_Installation#Mac). If you use a different package manager and see an error that says `Unable to load DLL 'System.Security.Cryptography.Native'`, `dotnet` may be looking in the wrong place for the library.
 
-##Build process##
+## Build
 
 `./build.sh -skipTests`
 
-##Tests##
+## Tests
 
 `./build.sh`
 
-## Getting .Net Core MSBuild binaries without building the code ##
+## Getting .Net Core MSBuild binaries without building the code
+
 The best way to get .NET Core MSBuild is through the [dotnet CLI](https://github.com/dotnet/cli/), which redistributes us. It's not always the very very latest but they take regular drops. After installing it, you can use MSBuild through `dotnet build` or by manual invocation of the `MSBuild.dll` in the dotnet distribution.
 
 ## Debugging
 
 ### Wait in Main
-Set the environment variable `MSBUILDDEBUGONSTART` to 2.
\ No newline at end of file
+
+Set the environment variable `MSBUILDDEBUGONSTART` to `2`.
\ No newline at end of file
