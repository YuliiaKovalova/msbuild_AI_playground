diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 8629bd94317..7381c712da9 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -8,6 +8,7 @@
 using System.Diagnostics.CodeAnalysis;
 using System.Linq;
 using System.Reflection;
+using System.Runtime.CompilerServices;
 using System.Threading;
 using System.Xml;
 
@@ -300,20 +301,35 @@ public ProjectCollection(IDictionary<string, string> globalProperties, IEnumerab
         /// <param name="maxNodeCount">The maximum number of nodes to use for building.</param>
         /// <param name="onlyLogCriticalEvents">If set to true, only critical events will be logged.</param>
         /// <param name="loadProjectsReadOnly">If set to true, load all projects as read-only.</param>
-        public ProjectCollection(IDictionary<string, string> globalProperties, IEnumerable<ILogger> loggers, IEnumerable<ForwardingLoggerRecord> remoteLoggers, ToolsetDefinitionLocations toolsetDefinitionLocations, int maxNodeCount, bool onlyLogCriticalEvents, bool loadProjectsReadOnly)
+        public ProjectCollection(IDictionary<string, string> globalProperties, IEnumerable<ILogger> loggers, IEnumerable<ForwardingLoggerRecord> remoteLoggers, ToolsetDefinitionLocations toolsetDefinitionLocations, int maxNodeCount,
+            bool onlyLogCriticalEvents, bool loadProjectsReadOnly)
+            : this(globalProperties, loggers, remoteLoggers, toolsetDefinitionLocations, maxNodeCount, onlyLogCriticalEvents, loadProjectsReadOnly, null)
+        {
+        }
+
+        /// <summary>
+        /// Instantiates a project collection with specified global properties and loggers and using the
+        /// specified toolset locations, node count, and setting of onlyLogCriticalEvents.
+        /// Global properties and loggers may be null.
+        /// Throws InvalidProjectFileException if any of the global properties are reserved.
+        /// May throw InvalidToolsetDefinitionException.
+        /// </summary>
+        /// <param name="globalProperties">The default global properties to use. May be null.</param>
+        /// <param name="loggers">The loggers to register. May be null and specified to any build instead.</param>
+        /// <param name="remoteLoggers">Any remote loggers to register. May be null and specified to any build instead.</param>
+        /// <param name="toolsetDefinitionLocations">The locations from which to load toolsets.</param>
+        /// <param name="maxNodeCount">The maximum number of nodes to use for building.</param>
+        /// <param name="onlyLogCriticalEvents">If set to true, only critical events will be logged.</param>
+        /// <param name="loadProjectsReadOnly">If set to true, load all projects as read-only.</param>
+        /// <param name="projectCollectionRootElementCache">An existing project collection cache from which it will get the same cache for ProjectRootElement. May be null and in that case it will create a new one.</param>
+        public ProjectCollection(IDictionary<string, string> globalProperties, IEnumerable<ILogger> loggers, IEnumerable<ForwardingLoggerRecord> remoteLoggers, ToolsetDefinitionLocations toolsetDefinitionLocations, int maxNodeCount, bool onlyLogCriticalEvents, bool loadProjectsReadOnly, ProjectCollectionRootElementCache projectCollectionRootElementCache)
         {
             _loadedProjects = new LoadedProjectCollection();
             ToolsetLocations = toolsetDefinitionLocations;
             MaxNodeCount = maxNodeCount;
 
-            if (Traits.Instance.UseSimpleProjectRootElementCacheConcurrency)
-            {
-                ProjectRootElementCache = new SimpleProjectRootElementCache();
-            }
-            else
-            {
-                ProjectRootElementCache = new ProjectRootElementCache(autoReloadFromDisk: false, loadProjectsReadOnly);
-            }
+            ProjectCollectionRootElementCache = projectCollectionRootElementCache ?? new ProjectCollectionRootElementCache(loadProjectsReadOnly);
+            ProjectRootElementCache = ProjectCollectionRootElementCache.ProjectRootElementCache;
             OnlyLogCriticalEvents = onlyLogCriticalEvents;
 
             try
@@ -402,6 +418,11 @@ public ProjectCollection(IDictionary<string, string> globalProperties, IEnumerab
         /// </remarks>
         public event EventHandler<ProjectChangedEventArgs> ProjectChanged;
 
+        /// <summary>
+        /// Gets the cache used for <see cref="ProjectRootElement"/>
+        /// </summary>
+        public ProjectCollectionRootElementCache ProjectCollectionRootElementCache { get; }
+
         /// <summary>
         /// Retrieves the global project collection object.
         /// This is a singleton project collection with no global properties or loggers that reads toolset
diff --git a/src/Build/Definition/ProjectCollectionRootElementCache.cs b/src/Build/Definition/ProjectCollectionRootElementCache.cs
new file mode 100644
index 00000000000..ac6532d9752
--- /dev/null
+++ b/src/Build/Definition/ProjectCollectionRootElementCache.cs
@@ -0,0 +1,32 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Construction;
+using Microsoft.Build.Framework;
+
+namespace Microsoft.Build.Evaluation;
+
+/// <summary>
+/// ProjectCollectionRootElementCache represents the cache used by a <see cref="ProjectCollection"/> for <see cref="ProjectRootElement"/>.
+/// </summary>
+public class ProjectCollectionRootElementCache
+{
+    internal readonly ProjectRootElementCacheBase ProjectRootElementCache;
+
+    /// <summary>
+    /// Initialize a ProjectCollectionRootElementCache instance.
+    /// </summary>
+    /// <param name="loadProjectsReadOnly">If set to true, load all projects as read-only.</param>
+    /// <param name="autoReloadFromDisk">If set to true, Whether the cache should check the timestamp of the file on disk whenever it is requested, and update with the latest content of that file if it has changed.</param>
+    public ProjectCollectionRootElementCache(bool loadProjectsReadOnly, bool autoReloadFromDisk = false)
+    {
+        if (Traits.Instance.UseSimpleProjectRootElementCacheConcurrency)
+        {
+            ProjectRootElementCache = new SimpleProjectRootElementCache();
+        }
+        else
+        {
+            ProjectRootElementCache = new ProjectRootElementCache(autoReloadFromDisk: autoReloadFromDisk, loadProjectsReadOnly);
+        }
+    }
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 19c39093f3f..4f871beebb7 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -149,6 +149,7 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
+    <Compile Include="Definition\ProjectCollectionRootElementCache.cs" />
     <Compile Include="Utilities\ImmutableCollectionsExtensions.cs" />
     <Compile Include="Utilities\NuGetFrameworkWrapper.cs" />
     <Compile Include="ObjectModelRemoting\ConstructionObjectLinks\ProjectUsingTaskParameterElementLink.cs" />
diff --git a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
index 9281b0c3cf8..177c7fa334e 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -1,5 +1,9 @@
 Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
 Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
+Microsoft.Build.Evaluation.ProjectCollection.ProjectCollection(System.Collections.Generic.IDictionary<string, string> globalProperties, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers, Microsoft.Build.Evaluation.ToolsetDefinitionLocations toolsetDefinitionLocations, int maxNodeCount, bool onlyLogCriticalEvents, bool loadProjectsReadOnly, Microsoft.Build.Evaluation.ProjectCollectionRootElementCache projectCollectionRootElementCache) -> void
+Microsoft.Build.Evaluation.ProjectCollection.ProjectCollectionRootElementCache.get -> Microsoft.Build.Evaluation.ProjectCollectionRootElementCache
+Microsoft.Build.Evaluation.ProjectCollectionRootElementCache
+Microsoft.Build.Evaluation.ProjectCollectionRootElementCache.ProjectCollectionRootElementCache(bool loadProjectsReadOnly, bool autoReloadFromDisk = false) -> void
 Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
 Microsoft.Build.FileSystem.FindPredicate
 Microsoft.Build.FileSystem.FindTransform<TResult>
