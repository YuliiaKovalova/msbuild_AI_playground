diff --git a/src/Build.UnitTests/BackEnd/MockHost.cs b/src/Build.UnitTests/BackEnd/MockHost.cs
index 1de3f968fc2..6a6e70f8dd2 100644
--- a/src/Build.UnitTests/BackEnd/MockHost.cs
+++ b/src/Build.UnitTests/BackEnd/MockHost.cs
@@ -1,9 +1,10 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System;
+using System.Diagnostics.CodeAnalysis;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
-using System;
 using Microsoft.Build.BackEnd.SdkResolution;
 using Microsoft.Build.Engine.UnitTests.BackEnd;
 using Microsoft.Build.Evaluation;
@@ -66,24 +67,48 @@ internal class MockHost : MockLoggingService, IBuildComponentHost, IBuildCompone
         #endregion;
 
         /// <summary>
-        /// Constructor
+        /// Initializes a new instance of the <see cref="MockHost"/> class.
         /// </summary>
-        public MockHost()
-            : this(new BuildParameters())
+        /// <param name="overrideConfigCache">The override config cache.</param>
+        /// <param name="overrideResultsCache">The override results cache.</param>
+        public MockHost(ConfigCache overrideConfigCache = null, ResultsCache overrideResultsCache = null)
+            : this(new BuildParameters(), overrideConfigCache, overrideResultsCache)
         {
         }
 
         /// <summary>
-        /// Constructor
+        /// Initializes a new instance of the <see cref="MockHost"/> class.
         /// </summary>
-        public MockHost(BuildParameters buildParameters)
+        /// <param name="buildParameters">The mock host's build parameters.</param>
+        /// <param name="overrideConfigCache">The override config cache.</param>
+        /// <param name="overrideResultsCache">The override results cache.</param>
+        public MockHost(BuildParameters buildParameters, ConfigCache overrideConfigCache = null, ResultsCache overrideResultsCache = null)
         {
             _buildParameters = buildParameters;
 
             _buildParameters.ProjectRootElementCache = new ProjectRootElementCache(false);
 
-            _configCache = new ConfigCache();
-            ((IBuildComponent)_configCache).InitializeComponent(this);
+            if (overrideConfigCache != null && overrideResultsCache != null)
+            {
+                _configCache = new ConfigCacheWithOverride(overrideConfigCache);
+                _resultsCache = new ResultsCacheWithOverride(overrideResultsCache);
+            }
+            else if (overrideConfigCache == null && overrideResultsCache == null)
+            {
+                _configCache = new ConfigCache();
+                _resultsCache = new ResultsCache();
+            }
+            else if (overrideConfigCache == null)
+            {
+
+                throw new ArgumentNullException($"Attempted to create an override cache with a null {nameof(overrideConfigCache)}.");
+            }
+            else
+            {
+                throw new ArgumentNullException($"Attempted to create an override cache with a null {nameof(overrideResultsCache)}.");
+            }
+
+            _configCache.InitializeComponent(this);
 
             // We are a logging service
             _loggingService = this;
@@ -93,10 +118,9 @@ public MockHost(BuildParameters buildParameters)
             _requestEngine = new BuildRequestEngine();
             ((IBuildComponent)_requestEngine).InitializeComponent(this);
 
-            _resultsCache = new ResultsCache();
-            ((IBuildComponent)_resultsCache).InitializeComponent(this);
+            _resultsCache.InitializeComponent(this);
 
-            _requestBuilder = new Microsoft.Build.UnitTests.BackEnd.BuildRequestEngine_Tests.MockRequestBuilder();
+            _requestBuilder = new BuildRequestEngine_Tests.MockRequestBuilder();
             ((IBuildComponent)_requestBuilder).InitializeComponent(this);
 
             _targetBuilder = new TestTargetBuilder();
diff --git a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
index c6406b169b7..27dcead8c66 100644
--- a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
@@ -597,6 +597,22 @@ public void VerifyNoOverCreationOfNodesWithBuildLoop()
             Assert.Equal(4, nextNodeId); // 3 nodes
         }
 
+        [Fact]
+        public void BuildResultNotPlacedInCurrentCacheIfExistsInOverrideCache()
+        {
+            ConfigCache overrideConfigCache = new();
+            ResultsCache overrideResultsCache = new();
+            CreateConfiguration(1, "test.csproj", overrideConfigCache);
+            BuildRequest br1 = CreateBuildRequest(1, 1, new string[] { "A" });
+            CacheBuildResult(br1, "A", BuildResultUtilities.GetSuccessResult(), overrideResultsCache);
+            _host = new MockHost(overrideConfigCache, overrideResultsCache);
+            _scheduler = new Scheduler();
+            _scheduler.InitializeComponent(_host);
+            BuildRequest br2 = CreateBuildRequest(1, 1, new string[] { "B" });
+            _scheduler.RecordResultToCurrentCacheIfConfigNotInOverrideCache(CreateBuildResult(br2, "B", BuildResultUtilities.GetSuccessResult()));
+            Assert.Null(((ResultsCacheWithOverride)_host.GetComponent(BuildComponentType.ResultsCache)).CurrentCache.GetResultsForConfiguration(1));
+        }
+
         /// <summary>
         /// Verify that if we get two requests but one of them is a failure, we only get the failure result back.
         /// </summary>
@@ -706,26 +722,46 @@ public void TestDetailedSummary()
         }
 
         /// <summary>
-        /// Creates a configuration and stores it in the cache.
+        /// Creates a configuration to store in the <see cref="ConfigCache"/>.
         /// </summary>
-        private void CreateConfiguration(int configId, string file)
+        /// <param name="configId">The configuration id.</param>
+        /// <param name="projectFullPath">The project's full path.</param>
+        /// <param name="configCache">The config cache in which to place to configuration.</param>
+        private void CreateConfiguration(int configId, string projectFullPath, ConfigCache configCache = null)
         {
-            BuildRequestData data = new BuildRequestData(file, new Dictionary<string, string>(), "4.0", Array.Empty<string>(), null);
-            BuildRequestConfiguration config = new BuildRequestConfiguration(configId, data, "4.0");
-            config.ProjectInitialTargets = new List<string>();
-            config.ProjectDefaultTargets = new List<string>();
-
-            (_host.GetComponent(BuildComponentType.ConfigCache) as IConfigCache).AddConfiguration(config);
+            BuildRequestData data = new(projectFullPath, new Dictionary<string, string>(), "4.0", Array.Empty<string>(), null);
+            BuildRequestConfiguration config = new(configId, data, "4.0") { ProjectInitialTargets = new List<string>(), ProjectDefaultTargets = new List<string>() };
+            if (configCache == null)
+            {
+                (_host.GetComponent(BuildComponentType.ConfigCache) as IConfigCache).AddConfiguration(config);
+            }
+            else
+            {
+                configCache.AddConfiguration(config);
+            }
         }
 
         /// <summary>
-        /// Creates and caches a built result.
+        /// Creates and caches a <see cref="BuildResult"/> in the <see cref="ResultsCache"/>.
         /// </summary>
-        private BuildResult CacheBuildResult(BuildRequest request, string target, WorkUnitResult workUnitResult)
+        /// <param name="request">The build request corresponding to the <see cref="BuildResult"/> to be
+        /// created and cached.</param>
+        /// <param name="target">The target for which there will be a result.</param>
+        /// <param name="workUnitResult">The result of executing the specified target.</param>
+        /// <param name="resultsCache">The results cache to contain the <see cref="BuildResult"/>.</param>
+        /// <returns>The build result.</returns>
+        private BuildResult CacheBuildResult(BuildRequest request, string target, WorkUnitResult workUnitResult, ResultsCache resultsCache = null)
         {
             BuildResult result = CreateBuildResult(request, target, workUnitResult);
-            IResultsCache resultsCache = _host.GetComponent(BuildComponentType.ResultsCache) as IResultsCache;
-            resultsCache.AddResult(result);
+            if (resultsCache == null)
+            {
+                (_host.GetComponent(BuildComponentType.ResultsCache) as IResultsCache).AddResult(result);
+            }
+            else
+            {
+                resultsCache.AddResult(result);
+            }
+
             return result;
         }
 
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 4a37b0aed28..9370fa14e5a 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -364,15 +364,7 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
             _schedulingData.EventTime = DateTime.UtcNow;
             List<ScheduleResponse> responses = new List<ScheduleResponse>();
             TraceScheduler("Reporting result from node {0} for request {1}, parent {2}.", nodeId, result.GlobalRequestId, result.ParentGlobalRequestId);
-
-            // Record these results to the cache only if they are not present in the
-            // override cache, which can happen if we are building in isolation mode
-            // (IsolateProjects.Message), and the received result was built by an
-            // isolation-violating dependency project.
-            if (_configCache is not ConfigCacheWithOverride || !((ConfigCacheWithOverride)_configCache).HasConfigurationInOverrideCache(result.ConfigurationId))
-            {
-                _resultsCache.AddResult(result);
-            }
+            RecordResultToCurrentCacheIfConfigNotInOverrideCache(result);
 
             if (result.NodeRequestId == BuildRequest.ResultsTransferNodeRequestId)
             {
@@ -2054,6 +2046,23 @@ string ConcatenateGlobalProperties(BuildRequestConfiguration configuration)
             }
         }
 
+        /// <summary>
+        /// Records the result to the current cache if its config isn't in the override cache.
+        /// </summary>
+        /// <param name="result">The result to potentially record in the current cache.</param>
+        internal void RecordResultToCurrentCacheIfConfigNotInOverrideCache(BuildResult result)
+        {
+            // Record these results to the cache only if their config isn't in the
+            // override cache, which can happen if we are building in isolation mode
+            // (IsolateProjects.Message), and the received result was built by an
+            // isolation-violating dependency project.
+            if (_configCache is not ConfigCacheWithOverride
+                || !((ConfigCacheWithOverride)_configCache).HasConfigurationInOverrideCache(result.ConfigurationId))
+            {
+                _resultsCache.AddResult(result);
+            }
+        }
+
         /// <summary>
         /// Gets the appropriate ScheduleResponse for a result, either to complete a submission or to report to a node.
         /// </summary>
