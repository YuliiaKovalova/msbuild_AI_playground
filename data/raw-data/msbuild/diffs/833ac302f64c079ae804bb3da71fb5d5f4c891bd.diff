diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index c94de3e3688..fffbfd81114 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -611,6 +611,16 @@ public GetAssemblyIdentity() { }
         public Microsoft.Build.Framework.ITaskItem[] AssemblyFiles { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
+    public partial class GetCompatiblePlatform : Microsoft.Build.Tasks.TaskExtension
+    {
+        public GetCompatiblePlatform() { }
+        public Microsoft.Build.Framework.ITaskItem[] AnnotatedProjects { get { throw null; } set { } }
+        [Microsoft.Build.Framework.OutputAttribute]
+        public Microsoft.Build.Framework.ITaskItem[] AssignedProjectsWithPlatform { get { throw null; } set { } }
+        public string ParentProjectPlatform { get { throw null; } set { } }
+        public string PlatformLookupTable { get { throw null; } set { } }
+        public override bool Execute() { throw null; }
+    }
     public sealed partial class GetFileHash : Microsoft.Build.Tasks.TaskExtension
     {
         public GetFileHash() { }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 27ba53105be..ccf74f77065 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -504,6 +504,16 @@ public GetAssemblyIdentity() { }
         public Microsoft.Build.Framework.ITaskItem[] AssemblyFiles { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
+    public partial class GetCompatiblePlatform : Microsoft.Build.Tasks.TaskExtension
+    {
+        public GetCompatiblePlatform() { }
+        public Microsoft.Build.Framework.ITaskItem[] AnnotatedProjects { get { throw null; } set { } }
+        [Microsoft.Build.Framework.OutputAttribute]
+        public Microsoft.Build.Framework.ITaskItem[] AssignedProjectsWithPlatform { get { throw null; } set { } }
+        public string ParentProjectPlatform { get { throw null; } set { } }
+        public string PlatformLookupTable { get { throw null; } set { } }
+        public override bool Execute() { throw null; }
+    }
     public sealed partial class GetFileHash : Microsoft.Build.Tasks.TaskExtension
     {
         public GetFileHash() { }
diff --git a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
index b3ecb343f0a..b27bb480e14 100644
--- a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
+++ b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
@@ -1,4 +1,8 @@
-﻿using Microsoft.Build.UnitTests;
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Shared;
+using Microsoft.Build.UnitTests;
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
@@ -15,16 +19,6 @@ public GetCompatiblePlatform_Tests(ITestOutputHelper output)
             _output = output;
         }
 
-        /*
-         * What tests do we need for the task?
-         * Proper Cases:
-         * - Based on mapping
-         * - Based on same plat
-         * - AnyCPU default
-         * Failure Cases:
-         * - Warn when no compat found
-         */
-
         [Fact]
         public void ResolvesViaPlatformLookupTable_Task()
         {
@@ -109,5 +103,26 @@ public void FailsToResolve_Task()
             // When the task logs a warning, it does not set NearestPlatform
             task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("");
         }
+
+        /// <summary>
+        /// Invalid format on PlatformLookupTable results in an exception being thrown.
+        /// </summary>
+        [Fact]
+        public void FailsOnInvalidFormatLookupTable ()
+        {
+            MockLogger log = new MockLogger(_output);
+            TaskItem childProj = new TaskItem("foo.bar");
+            childProj.SetMetadata("PlatformOptions", "x64");
+
+            GetCompatiblePlatform task = new GetCompatiblePlatform()
+            {
+                BuildEngine = new MockEngine(_output),
+                ParentProjectPlatform = "x86",
+                PlatformLookupTable = "AnyCPU=;A=B", // invalid format
+                AnnotatedProjects = new TaskItem[] { childProj },
+            };
+
+            Should.Throw<InternalErrorException>(() => task.Execute());
+        }
     }
 }
diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
index eae79dda84b..976a95f877d 100644
--- a/src/Tasks/GetCompatiblePlatform.cs
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -1,4 +1,8 @@
-﻿using Microsoft.Build.Framework;
+﻿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
 using System;
 using System.Collections.Generic;
@@ -7,14 +11,34 @@
 
 namespace Microsoft.Build.Tasks
 {
-    class GetCompatiblePlatform : TaskExtension
+    /// <summary>
+    /// Performs SetPlatform negotiation for all project references when opted
+    /// in via the EnableDynamicPlatformResolution property.
+    /// 
+    /// See ProjectReference-Protocol.md for details.
+    /// </summary>
+    public class GetCompatiblePlatform : TaskExtension
     {
+        /// <summary>
+        /// All ProjectReference items.
+        /// </summary>
         public ITaskItem[] AnnotatedProjects { get; set; }
 
+        /// <summary>
+        /// The platform the parent is building as. 
+        /// </summary>
         public string ParentProjectPlatform { get; set; }
 
+        /// <summary>
+        /// Optional parameter that defines translations from parent platforms to
+        /// what the ProjectReference should build as.
+        /// Win32=x86, for example.
+        /// </summary>
         public string PlatformLookupTable { get; set; }
 
+        /// <summary>
+        /// The resulting items with NearestPlatform metadata set.
+        /// </summary>
         [Output]
         public ITaskItem[] AssignedProjectsWithPlatform { get; set; }
 
@@ -23,18 +47,16 @@ public override bool Execute()
             Dictionary<string, string> translationTable = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             if (!string.IsNullOrEmpty(PlatformLookupTable))
             {
-                foreach (string s in PlatformLookupTable.Split(';'))
+                foreach (string s in PlatformLookupTable.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
                 {
-                    // Minimum translation: a=b
-                    if (s.Length < 3)
-                    {
-                        continue;
-                    }
-                    string key = s.Split('=')[0];
-                    string val = s.Split('=')[1];
-                    translationTable[key] = val;
+                    string[] keyVal = s.Split(MSBuildConstants.EqualsChar, StringSplitOptions.RemoveEmptyEntries);
+
+                    ErrorUtilities.VerifyThrow(keyVal.Length > 1, "PlatformLookupTable must be of the form A=B;C=D");
+
+                    translationTable[keyVal[0]] = keyVal[1];
                 }
-                Log.LogMessage($"Translation Table: {translationTable.Aggregate(new StringBuilder(), (sb, kvp) => sb.Append(kvp.Key + "=" + kvp.Value + ";"), sb => sb.ToString())}");
+                
+                Log.LogMessage($"Translation Table: {string.Join(";", translationTable.Select(kvp => $"{kvp.Key}={kvp.Value}"))}");
             }
 
             AssignedProjectsWithPlatform = new ITaskItem[AnnotatedProjects.Length];
@@ -49,12 +71,9 @@ public override bool Execute()
                 }
 
                 HashSet<string> childPlatforms = new HashSet<string>();
-                foreach (string s in AssignedProjectsWithPlatform[i].GetMetadata("PlatformOptions").Split(';'))
+                foreach (string s in AssignedProjectsWithPlatform[i].GetMetadata("PlatformOptions").Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
                 {
-                    if (!string.IsNullOrEmpty(s))
-                    {
-                        childPlatforms.Add(s);
-                    }
+                    childPlatforms.Add(s);
                 }
 
                 string buildChildProjectAs = "";
@@ -89,7 +108,7 @@ public override bool Execute()
                 Log.LogMessage($"Project '{AssignedProjectsWithPlatform[i].ItemSpec}' will build with Platform: '{buildChildProjectAs}'");
             }
 
-            return true;
+            return !Log.HasLoggedErrors;
         }
     }
 }
diff --git a/src/Tasks/Microsoft.Common.CrossTargeting.targets b/src/Tasks/Microsoft.Common.CrossTargeting.targets
index db6799e8512..43adfa1c630 100644
--- a/src/Tasks/Microsoft.Common.CrossTargeting.targets
+++ b/src/Tasks/Microsoft.Common.CrossTargeting.targets
@@ -21,7 +21,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
           Condition="'$(ImportByWildcardBeforeMicrosoftCommonCrossTargetingTargets)' == 'true' and exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.CrossTargeting.targets\ImportBefore')"/>
 
   <Import Project="$(CustomBeforeMicrosoftCommonCrossTargetingTargets)" Condition="'$(CustomBeforeMicrosoftCommonCrossTargetingTargets)' != '' and Exists('$(CustomBeforeMicrosoftCommonCrossTargetingTargets)')"/>
-  
+
   <Target Name="GetTargetFrameworks"
           DependsOnTargets="GetTargetFrameworksWithPlatformFromInnerBuilds"
           Returns="@(_ThisProjectBuildMetadata)">
