diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index a62b03686d4..c778e1b0f58 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -5,6 +5,7 @@
 using System.Collections;
 using System.Collections.Generic;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Logging;
@@ -30,6 +31,11 @@ public MockLoggingService(Action<string> writter = null)
 
         #region ILoggingService Members
 
+        /// <summary>
+        /// Router of the build engine runtime execution information.
+        /// </summary>
+        public IBuildEngineDataRouter BuildEngineDataRouter => this;
+
         /// <summary>
         /// The event to raise when there is a logging exception
         /// </summary>
@@ -640,5 +646,11 @@ public void LogIncludeFile(BuildEventContext buildEventContext, string filePath)
         }
 
         #endregion
+
+        public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, BuildEventContext buildEventContext)
+        { /* Ignore the data */ }
+
+        public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, BuildEventContext buildEventContext)
+        { /* Ignore the data */ }
     }
 }
diff --git a/src/Build/BackEnd/Components/Logging/BuildLoggingContext.cs b/src/Build/BackEnd/Components/Logging/BuildLoggingContext.cs
index 415a79fa848..387b4db9841 100644
--- a/src/Build/BackEnd/Components/Logging/BuildLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/BuildLoggingContext.cs
@@ -36,7 +36,7 @@ protected BuildLoggingContext(ILoggingService loggingService, BuildEventContext
         }
 
         /// <inheritdoc cref="LoggingContext"/>
-        protected BuildLoggingContext(BuildLoggingContext baseContext) : base(baseContext)
+        protected BuildLoggingContext(BuildLoggingContext baseContext, BuildEventContext newEventContext) : base(baseContext, newEventContext)
         {
             _isInProcNode = baseContext._isInProcNode;
         }
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 3e44402a61e..d4fd4c8b8c3 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
+using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
@@ -27,7 +28,7 @@ namespace Microsoft.Build.BackEnd.Logging
     /// Interface representing logging services in the build system.
     /// Implementations should be thread-safe.
     /// </summary>
-    internal interface ILoggingService
+    internal interface ILoggingService : IBuildEngineDataRouter
     {
         #region Events
         /// <summary>
@@ -52,6 +53,11 @@ internal interface ILoggingService
 
         #region Properties
 
+        /// <summary>
+        /// Router of the build engine runtime execution information.
+        /// </summary>
+        IBuildEngineDataRouter BuildEngineDataRouter { get; }
+
         /// <summary>
         /// Provide the current state of the loggingService.
         /// Is it Inistantiated
diff --git a/src/Build/BackEnd/Components/Logging/LoggingContext.cs b/src/Build/BackEnd/Components/Logging/LoggingContext.cs
index 15b6000a7aa..4c9f392ee20 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingContext.cs
@@ -3,12 +3,11 @@
 
 using System;
 using System.Diagnostics;
+using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
-#nullable disable
-
 namespace Microsoft.Build.BackEnd.Logging
 {
     /// <summary>
@@ -16,7 +15,7 @@ namespace Microsoft.Build.BackEnd.Logging
     /// hides the requirement to pass BuildEventContexts to the logging service or query the
     /// host for the logging service all of the time.
     /// </summary>
-    internal class LoggingContext
+    internal class LoggingContext : IBuildEngineDataConsumer
     {
         /// <summary>
         /// The logging service to which this context is attached
@@ -57,13 +56,19 @@ public LoggingContext(ILoggingService loggingService, BuildEventContext eventCon
         /// while the event context will come from a call into the logging service itself.
         /// </summary>
         /// <param name="baseContext">The context from which this context is being created.</param>
-        public LoggingContext(LoggingContext baseContext)
+        /// <param name="newEventContext">The new logging context to be associated here.</param>
+        public LoggingContext(LoggingContext baseContext, BuildEventContext newEventContext)
         {
             _loggingService = baseContext._loggingService;
-            _eventContext = null;
+            _eventContext = newEventContext;
             _isValid = baseContext._isValid;
         }
 
+        /// <summary>
+        /// Consumer of the execution information from the build engine.
+        /// </summary>
+        internal IBuildEngineDataConsumer BuildEngineDataConsumer => this;
+
         /// <summary>
         /// Retrieves the logging service
         /// </summary>
@@ -87,12 +92,6 @@ public BuildEventContext BuildEventContext
             {
                 return _eventContext;
             }
-
-            protected set
-            {
-                ErrorUtilities.VerifyThrow(_eventContext == null, "eventContext should be null");
-                _eventContext = value;
-            }
         }
 
         /// <summary>
@@ -122,7 +121,7 @@ protected set
         /// <param name="importance">Importance level of the message</param>
         /// <param name="messageResourceName">string within the resource which indicates the format string to use</param>
         /// <param name="messageArgs">string resource arguments</param>
-        internal void LogComment(MessageImportance importance, string messageResourceName, params object[] messageArgs)
+        internal void LogComment(MessageImportance importance, string messageResourceName, params object?[]? messageArgs)
         {
             ErrorUtilities.VerifyThrow(_isValid, "must be valid");
             _loggingService.LogComment(_eventContext, importance, messageResourceName, messageArgs);
@@ -135,7 +134,7 @@ internal void LogComment(MessageImportance importance, string messageResourceNam
         /// <param name="file">The file in which the event occurred</param>
         /// <param name="messageResourceName">string within the resource which indicates the format string to use</param>
         /// <param name="messageArgs">string resource arguments</param>
-        internal void LogComment(MessageImportance importance, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
+        internal void LogComment(MessageImportance importance, BuildEventFileInfo file, string messageResourceName, params object?[]? messageArgs)
         {
             ErrorUtilities.VerifyThrow(_isValid, "must be valid");
 
@@ -201,7 +200,7 @@ internal void LogError(BuildEventFileInfo file, string messageResourceName, para
         /// <param name="file">The file in which the error occurred</param>
         /// <param name="messageResourceName">The resource name for the error</param>
         /// <param name="messageArgs">Parameters for the resource string</param>
-        internal void LogErrorWithSubcategory(string subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
+        internal void LogErrorWithSubcategory(string? subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
         {
             ErrorUtilities.VerifyThrow(_isValid, "must be valid");
             _loggingService.LogError(_eventContext, subcategoryResourceName, file, messageResourceName, messageArgs);
@@ -216,7 +215,7 @@ internal void LogErrorWithSubcategory(string subcategoryResourceName, BuildEvent
         /// <param name="helpKeyword">Help keyword</param>
         /// <param name="file">The file in which the error occurred</param>
         /// <param name="message">Error message</param>
-        internal void LogErrorFromText(string subcategoryResourceName, string errorCode, string helpKeyword, BuildEventFileInfo file, string message)
+        internal void LogErrorFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message)
         {
             ErrorUtilities.VerifyThrow(_isValid, "must be valid");
             _loggingService.LogErrorFromText(_eventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);
@@ -241,7 +240,7 @@ internal void LogInvalidProjectFileError(InvalidProjectFileException invalidProj
         /// <param name="file">The file in which the error occurred</param>
         /// <param name="messageResourceName">The string resource which has the formatting string for the error</param>
         /// <param name="messageArgs">The arguments for the error message</param>
-        internal void LogFatalError(Exception exception, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
+        internal void LogFatalError(Exception exception, BuildEventFileInfo file, string messageResourceName, params object?[]? messageArgs)
         {
             ErrorUtilities.VerifyThrow(_isValid, "must be valid");
             _loggingService.LogFatalError(_eventContext, exception, file, messageResourceName, messageArgs);
@@ -261,7 +260,7 @@ internal void LogWarning(string messageResourceName, params object[] messageArgs
         /// <param name="file">The file in which the warning occurred</param>
         /// <param name="messageResourceName">The string resource which contains the formatted warning string</param>
         /// <param name="messageArgs">parameters for the string resource</param>
-        internal void LogWarning(string subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, params object[] messageArgs)
+        internal void LogWarning(string? subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, params object?[]? messageArgs)
         {
             ErrorUtilities.VerifyThrow(_isValid, "must be valid");
             _loggingService.LogWarning(_eventContext, subcategoryResourceName, file, messageResourceName, messageArgs);
@@ -275,7 +274,7 @@ internal void LogWarning(string subcategoryResourceName, BuildEventFileInfo file
         /// <param name="helpKeyword"> Help keyword</param>
         /// <param name="file">The file in which the warning occurred</param>
         /// <param name="message">The message to be logged as a warning</param>
-        internal void LogWarningFromText(string subcategoryResourceName, string warningCode, string helpKeyword, BuildEventFileInfo file, string message)
+        internal void LogWarningFromText(string? subcategoryResourceName, string warningCode, string helpKeyword, BuildEventFileInfo file, string message)
         {
             ErrorUtilities.VerifyThrow(_isValid, "must be valid");
             _loggingService.LogWarningFromText(_eventContext, subcategoryResourceName, warningCode, helpKeyword, file, message);
@@ -312,5 +311,9 @@ internal void LogIncludeFile(string filePath)
             ErrorUtilities.VerifyThrow(IsValid, "must be valid");
             _loggingService.LogIncludeFile(BuildEventContext, filePath);
         }
+
+        public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo) => _loggingService.BuildEngineDataRouter.ProcessPropertyRead(propertyReadInfo, BuildEventContext);
+
+        public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo) => _loggingService.BuildEngineDataRouter.ProcessPropertyWrite(propertyWriteInfo, BuildEventContext);
     }
 }
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index a70ab4f9fb4..650586c3ef0 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -15,6 +15,7 @@
 using Microsoft.Build.Shared;
 using InternalLoggerException = Microsoft.Build.Exceptions.InternalLoggerException;
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
+using Microsoft.Build.BuildCheck.Infrastructure;
 
 #nullable disable
 
@@ -356,6 +357,11 @@ protected LoggingService(LoggerMode loggerMode, int nodeId)
 
         #region Properties
 
+        /// <summary>
+        /// Router of the build engine runtime execution information.
+        /// </summary>
+        public IBuildEngineDataRouter BuildEngineDataRouter => this;
+
         /// <summary>
         /// Properties we need to serialize from the child node
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index 547554d06d8..94d48a724fb 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -4,6 +4,8 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
+using Microsoft.Build.BuildCheck.Infrastructure;
+using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
@@ -817,5 +819,11 @@ public void LogIncludeFile(BuildEventContext buildEventContext, string filePath)
         }
 
         #endregion
+
+        public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, BuildEventContext buildEventContext)
+            => BuildCheckManagerProvider.GlobalBuildEngineDataRouter?.ProcessPropertyRead(propertyReadInfo, buildEventContext);
+
+        public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, BuildEventContext buildEventContext)
+            => BuildCheckManagerProvider.GlobalBuildEngineDataRouter?.ProcessPropertyWrite(propertyWriteInfo, buildEventContext);
     }
 }
diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index eaf5e31be4f..49a3cd48fb7 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -3,6 +3,7 @@
 
 using System.Collections;
 using System.Collections.Generic;
+using System.Configuration;
 using System.Linq;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Execution;
@@ -85,19 +86,54 @@ private ProjectLoggingContext(
             BuildEventContext parentBuildEventContext,
             int evaluationId,
             int projectContextId)
-            : base(nodeLoggingContext)
+            : base(nodeLoggingContext,
+                CreateInitialContext(nodeLoggingContext,
+                    submissionId,
+                     configurationId,
+                    projectFullPath,
+                    targets,
+                    toolsVersion,
+                    projectProperties,
+                    projectItems,
+                    parentBuildEventContext,
+                    evaluationId,
+                    projectContextId))
         {
             _projectFullPath = projectFullPath;
 
+            // No need to log a redundant message in the common case
+            if (toolsVersion != "Current")
+            {
+                LoggingService.LogComment(this.BuildEventContext, MessageImportance.Low, "ToolsVersionInEffectForBuild", toolsVersion);
+            }
+
+            this.IsValid = true;
+        }
+
+        private static BuildEventContext CreateInitialContext(
+            NodeLoggingContext nodeLoggingContext,
+            int submissionId,
+            int configurationId,
+            string projectFullPath,
+            List<string> targets,
+            string toolsVersion,
+            PropertyDictionary<ProjectPropertyInstance> projectProperties,
+            IItemDictionary<ProjectItemInstance> projectItems,
+            BuildEventContext parentBuildEventContext,
+            int evaluationId,
+            int projectContextId)
+        {
             IEnumerable<DictionaryEntry> properties = null;
             IEnumerable<DictionaryEntry> items = null;
 
-            string[] propertiesToSerialize = LoggingService.PropertiesToSerialize;
+            ILoggingService loggingService = nodeLoggingContext.LoggingService;
+
+            string[] propertiesToSerialize = loggingService.PropertiesToSerialize;
 
             // If we are only logging critical events lets not pass back the items or properties
-            if (!LoggingService.OnlyLogCriticalEvents &&
-                !LoggingService.IncludeEvaluationPropertiesAndItems &&
-                (!LoggingService.RunningOnRemoteNode || LoggingService.SerializeAllProperties))
+            if (!loggingService.OnlyLogCriticalEvents &&
+                !loggingService.IncludeEvaluationPropertiesAndItems &&
+                (!loggingService.RunningOnRemoteNode || loggingService.SerializeAllProperties))
             {
                 if (projectProperties is null)
                 {
@@ -116,9 +152,9 @@ private ProjectLoggingContext(
             }
 
             if (projectProperties != null &&
-                !LoggingService.IncludeEvaluationPropertiesAndItems &&
+                !loggingService.IncludeEvaluationPropertiesAndItems &&
                 propertiesToSerialize?.Length > 0 &&
-                !LoggingService.SerializeAllProperties)
+                !loggingService.SerializeAllProperties)
             {
                 PropertyDictionary<ProjectPropertyInstance> projectPropertiesToSerialize = new PropertyDictionary<ProjectPropertyInstance>();
                 foreach (string propertyToGet in propertiesToSerialize)
@@ -135,7 +171,7 @@ private ProjectLoggingContext(
                 properties = projectPropertiesToSerialize.Select((ProjectPropertyInstance property) => new DictionaryEntry(property.Name, property.EvaluatedValue));
             }
 
-            this.BuildEventContext = LoggingService.LogProjectStarted(
+            return loggingService.LogProjectStarted(
                 nodeLoggingContext.BuildEventContext,
                 submissionId,
                 configurationId,
@@ -146,14 +182,6 @@ private ProjectLoggingContext(
                 items,
                 evaluationId,
                 projectContextId);
-
-            // No need to log a redundant message in the common case
-            if (toolsVersion != "Current")
-            {
-                LoggingService.LogComment(this.BuildEventContext, MessageImportance.Low, "ToolsVersionInEffectForBuild", toolsVersion);
-            }
-
-            this.IsValid = true;
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs
index af37bd0f690..79c24fd6668 100644
--- a/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs
@@ -37,15 +37,25 @@ internal class TargetLoggingContext : BuildLoggingContext
         /// Creates a new target logging context from an existing project context and target.
         /// </summary>
         internal TargetLoggingContext(ProjectLoggingContext projectLoggingContext, string projectFullPath, ProjectTargetInstance target, string parentTargetName, TargetBuiltReason buildReason)
-            : base(projectLoggingContext)
+            : base(projectLoggingContext, CreateInitialContext(projectLoggingContext, projectFullPath, target, parentTargetName, buildReason))
         {
             _projectLoggingContext = projectLoggingContext;
             _target = target;
 
-            this.BuildEventContext = LoggingService.LogTargetStarted(projectLoggingContext.BuildEventContext, target.Name, projectFullPath, target.Location.File, parentTargetName, buildReason);
             this.IsValid = true;
         }
 
+        private static BuildEventContext CreateInitialContext(ProjectLoggingContext projectLoggingContext,
+            string projectFullPath, ProjectTargetInstance target, string parentTargetName,
+            TargetBuiltReason buildReason)
+        {
+            BuildEventContext buildEventContext = projectLoggingContext.LoggingService.LogTargetStarted(
+                projectLoggingContext.BuildEventContext, target.Name, projectFullPath, target.Location.File,
+                parentTargetName, buildReason);
+
+            return buildEventContext;
+        }
+
         /// <summary>
         /// Constructor used to support out-of-proc task host (proxy for in-proc logging service.)
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
index f962f3da74d..33016e59e9b 100644
--- a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
@@ -35,46 +35,50 @@ internal class TaskLoggingContext : BuildLoggingContext
         /// Constructs a task logging context from a parent target context and a task node.
         /// </summary>
         internal TaskLoggingContext(TargetLoggingContext targetLoggingContext, string projectFullPath, ProjectTargetInstanceChild task, string taskAssemblyLocation)
-            : base(targetLoggingContext)
+            : base(targetLoggingContext, CreateInitialContext(targetLoggingContext, projectFullPath, task, taskAssemblyLocation))
         {
             _targetLoggingContext = targetLoggingContext;
             _task = task;
+            _taskName = GetTaskName(task);
+            this.IsValid = true;
+        }
 
+        private static BuildEventContext CreateInitialContext(TargetLoggingContext targetLoggingContext,
+            string projectFullPath, ProjectTargetInstanceChild task, string taskAssemblyLocation)
+        {
+            BuildEventContext buildEventContext = targetLoggingContext.LoggingService.LogTaskStarted2(
+                targetLoggingContext.BuildEventContext,
+                GetTaskName(task),
+                projectFullPath,
+                task.Location.File,
+                task.Location.Line,
+                task.Location.Column,
+                taskAssemblyLocation);
+
+            return buildEventContext;
+        }
+
+        private static string GetTaskName(ProjectTargetInstanceChild task)
+        {
             ProjectTaskInstance taskInstance = task as ProjectTaskInstance;
             if (taskInstance != null)
             {
-                _taskName = taskInstance.Name;
+                return taskInstance.Name;
             }
-            else
+
+            ProjectPropertyGroupTaskInstance propertyGroupInstance = task as ProjectPropertyGroupTaskInstance;
+            if (propertyGroupInstance != null)
             {
-                ProjectPropertyGroupTaskInstance propertyGroupInstance = task as ProjectPropertyGroupTaskInstance;
-                if (propertyGroupInstance != null)
-                {
-                    _taskName = "PropertyGroup";
-                }
-                else
-                {
-                    ProjectItemGroupTaskInstance itemGroupInstance = task as ProjectItemGroupTaskInstance;
-                    if (itemGroupInstance != null)
-                    {
-                        _taskName = "ItemGroup";
-                    }
-                    else
-                    {
-                        _taskName = "Unknown";
-                    }
-                }
+                return "PropertyGroup";
             }
 
-            this.BuildEventContext = LoggingService.LogTaskStarted2(
-                targetLoggingContext.BuildEventContext,
-                _taskName,
-                projectFullPath,
-                task.Location.File,
-                task.Location.Line,
-                task.Location.Column,
-                taskAssemblyLocation);
-            this.IsValid = true;
+            ProjectItemGroupTaskInstance itemGroupInstance = task as ProjectItemGroupTaskInstance;
+            if (itemGroupInstance != null)
+            {
+                return "ItemGroup";
+            }
+
+            return "Unknown";
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
index 18d85f2323c..bebcf7d3060 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/PropertyGroupIntrinsicTask.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System.Collections.Generic;
+using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
@@ -90,6 +91,7 @@ internal override void ExecuteTask(Lookup lookup)
                             }
 
                             bucket.Lookup.SetProperty(ProjectPropertyInstance.Create(property.Name, evaluatedValue, property.Location, Project.IsImmutable));
+                            LoggingContext.ProcessPropertyWrite(new PropertyWriteInfo(property.Name, string.IsNullOrEmpty(evaluatedValue), property.Location));
                         }
                     }
                 }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 577fc877071..666bf4e82e9 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1225,7 +1225,8 @@ private async Task<BuildResult> BuildProject()
             {
                 buildCheckManager.EndProjectRequest(
                     BuildCheckDataSource.BuildExecution,
-                    _requestEntry.Request.ParentBuildEventContext);
+                    _requestEntry.Request.ParentBuildEventContext,
+                    _requestEntry.RequestConfiguration.ProjectFullPath);
             }
 
             BuildResult CopyTargetResultsFromProxyTargetsToRealTargets(BuildResult resultFromTargetBuilder)
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
index 32078038875..cae0812077a 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckCentralContext.cs
@@ -25,9 +25,21 @@ internal BuildCheckCentralContext(ConfigurationProvider configurationProvider)
     private record CallbackRegistry(
         List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>>)> EvaluatedPropertiesActions,
         List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<ParsedItemsAnalysisData>>)> ParsedItemsActions,
-        List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<TaskInvocationAnalysisData>>)> TaskInvocationActions)
+        List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<TaskInvocationAnalysisData>>)> TaskInvocationActions,
+        List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<PropertyReadData>>)> PropertyReadActions,
+        List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<PropertyWriteData>>)> PropertyWriteActions,
+        List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<ProjectProcessingDoneData>>)> ProjectProcessingDoneActions)
     {
-        public CallbackRegistry() : this([], [], []) { }
+        public CallbackRegistry() : this([], [], [], [], [], []) { }
+
+        internal void DeregisterAnalyzer(BuildAnalyzerWrapper analyzer)
+        {
+            EvaluatedPropertiesActions.RemoveAll(a => a.Item1 == analyzer);
+            ParsedItemsActions.RemoveAll(a => a.Item1 == analyzer);
+            PropertyReadActions.RemoveAll(a => a.Item1 == analyzer);
+            PropertyWriteActions.RemoveAll(a => a.Item1 == analyzer);
+            ProjectProcessingDoneActions.RemoveAll(a => a.Item1 == analyzer);
+        }
     }
 
     // In a future we can have callbacks per project as well
@@ -38,6 +50,8 @@ public CallbackRegistry() : this([], [], []) { }
     internal bool HasEvaluatedPropertiesActions => _globalCallbacks.EvaluatedPropertiesActions.Count > 0;
     internal bool HasParsedItemsActions => _globalCallbacks.ParsedItemsActions.Count > 0;
     internal bool HasTaskInvocationActions => _globalCallbacks.TaskInvocationActions.Count > 0;
+    internal bool HasPropertyReadActions => _globalCallbacks.PropertyReadActions.Count > 0;
+    internal bool HasPropertyWriteActions => _globalCallbacks.PropertyWriteActions.Count > 0;
 
     internal void RegisterEvaluatedPropertiesAction(BuildAnalyzerWrapper analyzer, Action<BuildCheckDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction)
         // Here we might want to communicate to node that props need to be sent.
@@ -50,6 +64,15 @@ internal void RegisterParsedItemsAction(BuildAnalyzerWrapper analyzer, Action<Bu
     internal void RegisterTaskInvocationAction(BuildAnalyzerWrapper analyzer, Action<BuildCheckDataContext<TaskInvocationAnalysisData>> taskInvocationAction)
         => RegisterAction(analyzer, taskInvocationAction, _globalCallbacks.TaskInvocationActions);
 
+    internal void RegisterPropertyReadAction(BuildAnalyzerWrapper analyzer, Action<BuildCheckDataContext<PropertyReadData>> propertyReadAction)
+        => RegisterAction(analyzer, propertyReadAction, _globalCallbacks.PropertyReadActions);
+
+    internal void RegisterPropertyWriteAction(BuildAnalyzerWrapper analyzer, Action<BuildCheckDataContext<PropertyWriteData>> propertyWriteAction)
+        => RegisterAction(analyzer, propertyWriteAction, _globalCallbacks.PropertyWriteActions);
+
+    internal void RegisterProjectProcessingDoneAction(BuildAnalyzerWrapper analyzer, Action<BuildCheckDataContext<ProjectProcessingDoneData>> projectDoneAction)
+        => RegisterAction(analyzer, projectDoneAction, _globalCallbacks.ProjectProcessingDoneActions);
+
     private void RegisterAction<T>(
         BuildAnalyzerWrapper wrappedAnalyzer,
         Action<BuildCheckDataContext<T>> handler,
@@ -70,9 +93,7 @@ void WrappedHandler(BuildCheckDataContext<T> context)
 
     internal void DeregisterAnalyzer(BuildAnalyzerWrapper analyzer)
     {
-        _globalCallbacks.EvaluatedPropertiesActions.RemoveAll(a => a.Item1 == analyzer);
-        _globalCallbacks.ParsedItemsActions.RemoveAll(a => a.Item1 == analyzer);
-        _globalCallbacks.TaskInvocationActions.RemoveAll(a => a.Item1 == analyzer);
+        _globalCallbacks.DeregisterAnalyzer(analyzer);
     }
 
     internal void RunEvaluatedPropertiesActions(
@@ -99,6 +120,30 @@ internal void RunTaskInvocationActions(
         => RunRegisteredActions(_globalCallbacks.TaskInvocationActions, taskInvocationAnalysisData,
             loggingContext, resultHandler);
 
+    internal void RunPropertyReadActions(
+        PropertyReadData propertyReadDataData,
+        LoggingContext loggingContext,
+        Action<BuildAnalyzerWrapper, LoggingContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult>
+            resultHandler)
+        => RunRegisteredActions(_globalCallbacks.PropertyReadActions, propertyReadDataData,
+            loggingContext, resultHandler);
+
+    internal void RunPropertyWriteActions(
+        PropertyWriteData propertyWriteData,
+        LoggingContext loggingContext,
+        Action<BuildAnalyzerWrapper, LoggingContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult>
+            resultHandler)
+        => RunRegisteredActions(_globalCallbacks.PropertyWriteActions, propertyWriteData,
+            loggingContext, resultHandler);
+
+    internal void RunProjectProcessingDoneActions(
+        ProjectProcessingDoneData projectProcessingDoneData,
+        LoggingContext loggingContext,
+        Action<BuildAnalyzerWrapper, LoggingContext, BuildAnalyzerConfigurationInternal[], BuildCheckResult>
+            resultHandler)
+        => RunRegisteredActions(_globalCallbacks.ProjectProcessingDoneActions, projectProcessingDoneData,
+            loggingContext, resultHandler);
+
     private void RunRegisteredActions<T>(
         List<(BuildAnalyzerWrapper, Action<BuildCheckDataContext<T>>)> registeredCallbacks,
         T analysisData,
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 7dad5f0c4da..b9784d952d2 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -159,7 +159,7 @@ private string BuildCsvString(string title, Dictionary<string, TimeSpan> rowData
         { typeof(ProjectEvaluationFinishedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationFinishedEvent((ProjectEvaluationFinishedEventArgs)e) },
         { typeof(ProjectEvaluationStartedEventArgs), (BuildEventArgs e) => HandleProjectEvaluationStartedEvent((ProjectEvaluationStartedEventArgs)e) },
         { typeof(ProjectStartedEventArgs), (BuildEventArgs e) => _buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
-        { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!) },
+        { typeof(ProjectFinishedEventArgs), (BuildEventArgs e) => _buildCheckManager.EndProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!, (e as ProjectFinishedEventArgs)!.ProjectFile!) },
         { typeof(BuildCheckTracingEventArgs), (BuildEventArgs e) => HandleBuildCheckTracingEvent((BuildCheckTracingEventArgs)e) },
         { typeof(BuildCheckAcquisitionEventArgs), (BuildEventArgs e) => _buildCheckManager.ProcessAnalyzerAcquisition(((BuildCheckAcquisitionEventArgs)e).ToAnalyzerAcquisitionData(), GetBuildEventContext(e)) },
         { typeof(TaskStartedEventArgs), (BuildEventArgs e) => HandleTaskStartedEvent((TaskStartedEventArgs)e) },
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 945990a102b..33c7b677ba3 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Linq;
@@ -14,6 +15,8 @@
 using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using Microsoft.Build.BuildCheck.Infrastructure;
+using Microsoft.Build.Evaluation;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
@@ -31,6 +34,9 @@ internal sealed class BuildCheckManagerProvider : IBuildCheckManagerProvider
 
     public IBuildCheckManager Instance => GlobalInstance;
 
+    public IBuildEngineDataRouter BuildEngineDataRouter => (IBuildEngineDataRouter)GlobalInstance;
+    public static IBuildEngineDataRouter? GlobalBuildEngineDataRouter => (IBuildEngineDataRouter?)s_globalInstance;
+
     internal static IBuildComponent CreateComponent(BuildComponentType type)
     {
         ErrorUtilities.VerifyThrow(type == BuildComponentType.BuildCheckManagerProvider, "Cannot create components of type {0}", type);
@@ -61,7 +67,7 @@ public void InitializeComponent(IBuildComponentHost host)
 
     public void ShutdownComponent() => GlobalInstance.Shutdown();
 
-    internal sealed class BuildCheckManager : IBuildCheckManager
+    internal sealed class BuildCheckManager : IBuildCheckManager, IBuildEngineDataRouter
     {
         private readonly TracingReporter _tracingReporter = new TracingReporter();
         private readonly ConfigurationProvider _configurationProvider = new ConfigurationProvider();
@@ -376,8 +382,28 @@ public void FinalizeProcessing(LoggingContext loggingContext)
             loggingContext.LogBuildEvent(analyzerEventArg);
         }
 
+        private readonly ConcurrentDictionary<int, string> _projectsByContextId = new();
+        private string GetProjectFullPath(BuildEventContext buildEventContext)
+        {
+            const string defaultProjectFullPath = "Unknown_Project";
+
+            if (_projectsByContextId.TryGetValue(buildEventContext.ProjectContextId, out string? projectFullPath))
+            {
+                return projectFullPath;
+            }
+            else if (buildEventContext.ProjectContextId == BuildEventContext.InvalidProjectContextId &&
+                     _projectsByContextId.Count == 1)
+            {
+                // The coalescing is for a rare possibility of a race where other thread removed the item.
+                // We currently do not support multiple projects in parallel in a single node anyway.
+                return _projectsByContextId.FirstOrDefault().Value ?? defaultProjectFullPath;
+            }
+
+            return defaultProjectFullPath;
+        }
+
         public void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext,
-            string fullPath)
+            string projectFullPath)
         {
             if (buildCheckDataSource == BuildCheckDataSource.EventArgs && IsInProcNode)
             {
@@ -387,7 +413,8 @@ public void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, Bu
                 return;
             }
 
-            SetupAnalyzersForNewProject(fullPath, buildEventContext);
+            SetupAnalyzersForNewProject(projectFullPath, buildEventContext);
+            _projectsByContextId[buildEventContext.ProjectContextId] = projectFullPath;
         }
 
         /*
@@ -405,8 +432,38 @@ public void StartProjectRequest(BuildCheckDataSource buildCheckDataSource, Build
         {
         }
 
-        public void EndProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
+        public void EndProjectRequest(
+            BuildCheckDataSource buildCheckDataSource,
+            BuildEventContext buildEventContext,
+            string projectFullPath)
         {
+            AnalyzerLoggingContext loggingContext = new(_loggingService, buildEventContext);
+            _buildEventsProcessor.ProcessProjectDone(loggingContext, projectFullPath);
+            _projectsByContextId.TryRemove(buildEventContext.ProjectContextId, out _);
+        }
+
+        public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, BuildEventContext buildEventContext)
+        {
+            if (!_buildCheckCentralContext.HasPropertyReadActions)
+            {
+                return;
+            }
+
+            AnalyzerLoggingContext loggingContext = new(_loggingService, buildEventContext);
+            PropertyReadData propertyReadData = new(GetProjectFullPath(buildEventContext), propertyReadInfo);
+            _buildEventsProcessor.ProcessPropertyRead(propertyReadData, loggingContext);
+        }
+
+        public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, BuildEventContext buildEventContext)
+        {
+            if (!_buildCheckCentralContext.HasPropertyWriteActions)
+            {
+                return;
+            }
+
+            AnalyzerLoggingContext loggingContext = new(_loggingService, buildEventContext);
+            PropertyWriteData propertyWriteData = new(GetProjectFullPath(buildEventContext), propertyWriteInfo);
+            _buildEventsProcessor.ProcessPropertyWrite(propertyWriteData, loggingContext);
         }
 
         public void Shutdown()
diff --git a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
index e9a5f9e8aa2..cf4caad287c 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildEventsProcessor.cs
@@ -175,6 +175,24 @@ internal void ProcessTaskParameterEventArgs(
         }
     }
 
+    public void ProcessPropertyRead(PropertyReadData propertyReadData, AnalyzerLoggingContext buildAnalysisContext)
+    {
+        _buildCheckCentralContext.RunPropertyReadActions(propertyReadData, buildAnalysisContext,
+            ReportResult);
+    }
+
+    public void ProcessPropertyWrite(PropertyWriteData propertyWriteData, AnalyzerLoggingContext buildAnalysisContext)
+    {
+        _buildCheckCentralContext.RunPropertyWriteActions(propertyWriteData, buildAnalysisContext,
+            ReportResult);
+    }
+
+    public void ProcessProjectDone(AnalyzerLoggingContext buildAnalysisContext, string projectFullPath)
+    {
+        _buildCheckCentralContext.RunProjectProcessingDoneActions(new ProjectProcessingDoneData(projectFullPath),
+            buildAnalysisContext, ReportResult);
+    }
+
     private static void ReportResult(
         BuildAnalyzerWrapper analyzerWrapper,
         LoggingContext loggingContext,
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index 9f39f8dcb69..d62d29bf5f9 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -64,13 +64,13 @@ void ProcessTaskParameterEventArgs(
     //  but as well from the ConnectorLogger - as even if interleaved, it gives the info
     //  to manager about what analyzers need to be materialized and configuration fetched.
     // No unloading of analyzers is yet considered - once loaded it stays for whole build.
-    void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext, string fullPath);
+    void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext, string projectFullPath);
 
     void EndProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
 
     void StartProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
 
-    void EndProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
+    void EndProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext, string projectFullPath);
 
     void Shutdown();
 }
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManagerProvider.cs
index 43b08b39111..44d62247fcb 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManagerProvider.cs
@@ -7,11 +7,13 @@
 using System.Text;
 using System.Threading.Tasks;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Experimental.BuildCheck;
+using Microsoft.Build.BuildCheck.Infrastructure;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
 internal interface IBuildCheckManagerProvider : IBuildComponent
 {
     IBuildCheckManager Instance { get; }
+
+    IBuildEngineDataRouter BuildEngineDataRouter { get; }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildEngineDataConsumer.cs b/src/Build/BuildCheck/Infrastructure/IBuildEngineDataConsumer.cs
new file mode 100644
index 00000000000..55ca2198c1c
--- /dev/null
+++ b/src/Build/BuildCheck/Infrastructure/IBuildEngineDataConsumer.cs
@@ -0,0 +1,64 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.BuildCheck.Infrastructure;
+
+internal readonly record struct PropertyReadInfo(
+    string PropertyName,
+    int StartIndex,
+    int EndIndex,
+    IMsBuildElementLocation ElementLocation,
+    bool IsUninitialized,
+    PropertyReadContext PropertyReadContext);
+
+/// <summary>
+/// 
+/// </summary>
+/// <param name="PropertyName">Name of the property.</param>
+/// <param name="IsEmpty">Was any value written? (E.g. if we set propA with value propB, while propB is undefined - the isEmpty will be true)</param>
+/// <param name="ElementLocation">Location of the property write</param>
+internal readonly record struct PropertyWriteInfo(
+    string PropertyName,
+    bool IsEmpty,
+    IMsBuildElementLocation? ElementLocation);
+
+/// <summary>
+/// Consumer of the data from the build engine.
+/// Currently, this is used to send data for analysis to the BuildCheck.
+/// In the future we can multiplex the data to other consumers (e.g. copilot).
+/// </summary>
+internal interface IBuildEngineDataConsumer
+{
+    void ProcessPropertyRead(PropertyReadInfo propertyReadInfo);
+    
+    /// <summary>
+    /// Signals that a property was written to.
+    /// </summary>
+    /// <param name="propertyWriteInfo">Name of the property.</param>
+    void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo);
+
+    // TODO: We might want to move acquisition data processing into this interface as well
+    // void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData);
+}
+
+/// <summary>
+/// The module that routes the data to the final consumer.
+/// Typically, it is the BuildCheck (in case of in-node analysis) or LoggingService
+///  (in case of centralized analysis, where the data will first be wrapped to BuildEventArgs and sent to central node).
+/// </summary>
+internal interface IBuildEngineDataRouter
+{
+    void ProcessPropertyRead(
+        PropertyReadInfo propertyReadInfo,
+        BuildEventContext buildEventContext);
+
+    /// <summary>
+    /// Signals that a property was written to.
+    /// </summary>
+    void ProcessPropertyWrite(
+        PropertyWriteInfo propertyWriteInfo,
+        BuildEventContext buildEventContext);
+}
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index a0136eafac8..46fa25c3fdd 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -8,10 +8,11 @@
 using Microsoft.Build.Experimental.BuildCheck.Logging;
 using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
+using Microsoft.Build.BuildCheck.Infrastructure;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
-internal class NullBuildCheckManager : IBuildCheckManager
+internal class NullBuildCheckManager : IBuildCheckManager, IBuildEngineDataRouter
 {
     public void Shutdown()
     {
@@ -62,7 +63,8 @@ public void StartProjectRequest(BuildCheckDataSource buildCheckDataSource, Build
     {
     }
 
-    public void EndProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext)
+    public void EndProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext,
+        string projectFullPath)
     {
     }
 
@@ -84,4 +86,10 @@ public void EndTaskInvocation(BuildCheckDataSource buildCheckDataSource, TaskFin
 
     public void ProcessTaskParameter(BuildCheckDataSource buildCheckDataSource, TaskParameterEventArgs eventArg)
     { }
+
+    public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, BuildEventContext buildEventContext)
+    { }
+
+    public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, BuildEventContext buildEventContext)
+    { }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManagerProvider.cs
index 6005d4a7ea8..2bcc6c53a69 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManagerProvider.cs
@@ -7,13 +7,16 @@
 using System.Text;
 using System.Threading.Tasks;
 using Microsoft.Build.BackEnd;
+using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Experimental.BuildCheck;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
 internal class NullBuildCheckManagerProvider : IBuildCheckManagerProvider
 {
-    public IBuildCheckManager Instance { get; } = new NullBuildCheckManager();
+    private readonly NullBuildCheckManager _instance = new NullBuildCheckManager();
+    public IBuildCheckManager Instance => _instance;
+    public IBuildEngineDataRouter BuildEngineDataRouter => _instance;
 
     public void InitializeComponent(IBuildComponentHost host) { }
     public void ShutdownComponent() { }
diff --git a/src/Build/BuildCheck/Logging/AnalyzerLoggingContext.cs b/src/Build/BuildCheck/Logging/AnalyzerLoggingContext.cs
index b7e39eaa8b0..a7e7c63a087 100644
--- a/src/Build/BuildCheck/Logging/AnalyzerLoggingContext.cs
+++ b/src/Build/BuildCheck/Logging/AnalyzerLoggingContext.cs
@@ -14,9 +14,4 @@ public AnalyzerLoggingContext(ILoggingService loggingService, BuildEventContext
     {
         IsValid = true;
     }
-
-    public AnalyzerLoggingContext(LoggingContext baseContext) : base(baseContext)
-    {
-        IsValid = true;
-    }
 }
diff --git a/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs b/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs
new file mode 100644
index 00000000000..3d1d21d39c6
--- /dev/null
+++ b/src/Build/BuildCheck/OM/ProjectProcessingDoneData.cs
@@ -0,0 +1,8 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.Experimental.BuildCheck;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+internal class ProjectProcessingDoneData(string projectFilePath) : AnalysisData(projectFilePath);
diff --git a/src/Build/BuildCheck/OM/PropertyReadData.cs b/src/Build/BuildCheck/OM/PropertyReadData.cs
new file mode 100644
index 00000000000..628a9eac8fa
--- /dev/null
+++ b/src/Build/BuildCheck/OM/PropertyReadData.cs
@@ -0,0 +1,51 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.BuildCheck.Infrastructure;
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Experimental.BuildCheck;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+/// <summary>
+/// Information about property being accessed - whether during evaluation or build.
+/// </summary>
+internal class PropertyReadData(
+    string projectFilePath,
+    string propertyName,
+    IMsBuildElementLocation elementLocation,
+    bool isUninitialized,
+    PropertyReadContext propertyReadContext)
+    : AnalysisData(projectFilePath)
+{
+    public PropertyReadData(
+        string projectFilePath,
+        PropertyReadInfo propertyReadInfo)
+        : this(projectFilePath,
+            propertyReadInfo.PropertyName.Substring(propertyReadInfo.StartIndex, propertyReadInfo.EndIndex - propertyReadInfo.StartIndex + 1),
+            propertyReadInfo.ElementLocation,
+            propertyReadInfo.IsUninitialized,
+            propertyReadInfo.PropertyReadContext)
+    { }
+
+    /// <summary>
+    /// Name of the property that was accessed.
+    /// </summary>
+    public string PropertyName { get; } = propertyName;
+
+    /// <summary>
+    /// Location of the property access.
+    /// </summary>
+    public IMsBuildElementLocation ElementLocation { get; } = elementLocation;
+
+    /// <summary>
+    /// Indicates whether the property was accessed before being initialized.
+    /// </summary>
+    public bool IsUninitialized { get; } = isUninitialized;
+
+    /// <summary>
+    /// Gets the context type in which the property was accessed.
+    /// </summary>
+    public PropertyReadContext PropertyReadContext { get; } = propertyReadContext;
+}
diff --git a/src/Build/BuildCheck/OM/PropertyWriteData.cs b/src/Build/BuildCheck/OM/PropertyWriteData.cs
new file mode 100644
index 00000000000..63060ecd6b3
--- /dev/null
+++ b/src/Build/BuildCheck/OM/PropertyWriteData.cs
@@ -0,0 +1,44 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Microsoft.Build.BuildCheck.Infrastructure;
+using Microsoft.Build.Experimental.BuildCheck;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+/// <summary>
+/// Information about property being written to - either during evaluation phase
+///  or as part of property definition within the target.
+/// </summary>
+internal class PropertyWriteData(
+    string projectFilePath,
+    string propertyName,
+    IMsBuildElementLocation? elementLocation,
+    bool isEmpty)
+    : AnalysisData(projectFilePath)
+{
+    public PropertyWriteData(string projectFilePath, PropertyWriteInfo propertyWriteInfo)
+        : this(projectFilePath,
+            propertyWriteInfo.PropertyName,
+            propertyWriteInfo.ElementLocation,
+            propertyWriteInfo.IsEmpty)
+    { }
+
+    /// <summary>
+    /// Name of the property that was written to.
+    /// </summary>
+    public string PropertyName { get; } = propertyName;
+
+    /// <summary>
+    /// Location of the property write.
+    /// If the location is null, it means that the property doesn't come from xml, but rather other sources
+    ///  (environment variable, global property, toolset properties etc.).
+    /// </summary>
+    public IMsBuildElementLocation? ElementLocation { get; } = elementLocation;
+
+    /// <summary>
+    /// Was any value written? (E.g. if we set propA with value propB, while propB is undefined - the isEmpty will be true).
+    /// </summary>
+    public bool IsEmpty { get; } = isEmpty;
+}
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 741babe959c..ef1fbe5bd37 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -4439,7 +4439,7 @@ public IItemDefinition<ProjectMetadata> GetItemDefinition(string itemType)
             /// <summary>
             /// Sets a property which is not derived from Xml.
             /// </summary>
-            public ProjectProperty SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable = false, BackEnd.Logging.LoggingContext loggingContext = null)
+            public ProjectProperty SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, LoggingContext loggingContext, bool isEnvironmentVariable = false)
             {
                 ProjectProperty property = ProjectProperty.Create(Project, name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, loggingContext);
                 Properties.Set(property);
@@ -4452,7 +4452,7 @@ public ProjectProperty SetProperty(string name, string evaluatedValueEscaped, bo
             /// <summary>
             /// Sets a property derived from Xml.
             /// </summary>
-            public ProjectProperty SetProperty(ProjectPropertyElement propertyElement, string evaluatedValueEscaped)
+            public ProjectProperty SetProperty(ProjectPropertyElement propertyElement, string evaluatedValueEscaped, LoggingContext loggingContext)
             {
                 ProjectProperty predecessor = GetProperty(propertyElement.Name);
                 ProjectProperty property = ProjectProperty.Create(Project, propertyElement, evaluatedValueEscaped, predecessor);
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index b82733a9d8e..3b2462f9563 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -598,6 +598,8 @@ private void Evaluate()
             using (AssemblyLoadsTracker.StartTracking(_evaluationLoggingContext, AssemblyLoadingContext.Evaluation))
             using (_evaluationProfiler.TrackPass(EvaluationPass.TotalEvaluation))
             {
+                _evaluationLoggingContext.LogProjectEvaluationStarted();
+
                 ErrorUtilities.VerifyThrow(_data.EvaluationId == BuildEventContext.InvalidEvaluationId, "There is no prior evaluation ID. The evaluator data needs to be reset at this point");
                 _data.EvaluationId = _evaluationLoggingContext.BuildEventContext.EvaluationId;
 
@@ -621,8 +623,6 @@ private void Evaluate()
                     }
                 }
 
-                _evaluationLoggingContext.LogProjectEvaluationStarted();
-
                 ErrorUtilities.VerifyThrow(_data.EvaluationId != BuildEventContext.InvalidEvaluationId, "Evaluation should produce an evaluation ID");
 
                 MSBuildEventSource.Log.EvaluatePass0Stop(projectFile);
@@ -1199,7 +1199,7 @@ private void AddToolsetProperties()
         {
             foreach (ProjectPropertyInstance toolsetProperty in _data.Toolset.Properties.Values)
             {
-                _data.SetProperty(toolsetProperty.Name, ((IProperty)toolsetProperty).EvaluatedValueEscaped, false /* NOT global property */, false /* may NOT be a reserved name */);
+                _data.SetProperty(toolsetProperty.Name, ((IProperty)toolsetProperty).EvaluatedValueEscaped, false /* NOT global property */, false /* may NOT be a reserved name */, loggingContext: _evaluationLoggingContext);
             }
 
             if (_data.SubToolsetVersion == null)
@@ -1208,7 +1208,7 @@ private void AddToolsetProperties()
                 // is most likely not a subtoolset now, we need to add VisualStudioVersion if its not already a property.
                 if (!_data.Properties.Contains(Constants.VisualStudioVersionPropertyName))
                 {
-                    _data.SetProperty(Constants.VisualStudioVersionPropertyName, MSBuildConstants.CurrentVisualStudioVersion, false /* NOT global property */, false /* may NOT be a reserved name */);
+                    _data.SetProperty(Constants.VisualStudioVersionPropertyName, MSBuildConstants.CurrentVisualStudioVersion, false /* NOT global property */, false /* may NOT be a reserved name */, loggingContext: _evaluationLoggingContext);
                 }
             }
             else
@@ -1218,14 +1218,14 @@ private void AddToolsetProperties()
                 // set the property even if there is no matching sub-toolset.
                 if (!_data.Properties.Contains(Constants.SubToolsetVersionPropertyName))
                 {
-                    _data.SetProperty(Constants.SubToolsetVersionPropertyName, _data.SubToolsetVersion, false /* NOT global property */, false /* may NOT be a reserved name */);
+                    _data.SetProperty(Constants.SubToolsetVersionPropertyName, _data.SubToolsetVersion, false /* NOT global property */, false /* may NOT be a reserved name */, loggingContext: _evaluationLoggingContext);
                 }
 
                 if (_data.Toolset.SubToolsets.TryGetValue(_data.SubToolsetVersion, out SubToolset subToolset))
                 {
                     foreach (ProjectPropertyInstance subToolsetProperty in subToolset.Properties.Values)
                     {
-                        _data.SetProperty(subToolsetProperty.Name, ((IProperty)subToolsetProperty).EvaluatedValueEscaped, false /* NOT global property */, false /* may NOT be a reserved name */);
+                        _data.SetProperty(subToolsetProperty.Name, ((IProperty)subToolsetProperty).EvaluatedValueEscaped, false /* NOT global property */, false /* may NOT be a reserved name */, loggingContext: _evaluationLoggingContext);
                     }
                 }
             }
@@ -1243,7 +1243,7 @@ private int AddGlobalProperties()
 
             foreach (ProjectPropertyInstance globalProperty in _data.GlobalPropertiesDictionary)
             {
-                _data.SetProperty(globalProperty.Name, ((IProperty)globalProperty).EvaluatedValueEscaped, true /* IS global property */, false /* may NOT be a reserved name */);
+                _data.SetProperty(globalProperty.Name, ((IProperty)globalProperty).EvaluatedValueEscaped, true /* IS global property */, false /* may NOT be a reserved name */, loggingContext: _evaluationLoggingContext);
             }
 
             return _data.GlobalPropertiesDictionary.Count;
@@ -1257,7 +1257,7 @@ private int AddGlobalProperties()
         /// </summary>
         private P SetBuiltInProperty(string name, string evaluatedValueEscaped)
         {
-            P property = _data.SetProperty(name, evaluatedValueEscaped, false /* NOT global property */, true /* OK to be a reserved name */);
+            P property = _data.SetProperty(name, evaluatedValueEscaped, false /* NOT global property */, true /* OK to be a reserved name */, loggingContext: _evaluationLoggingContext);
             return property;
         }
 
@@ -1295,7 +1295,7 @@ private void EvaluatePropertyElement(ProjectPropertyElement propertyElement)
 
                 _expander.PropertiesUseTracker.CheckPreexistingUndefinedUsage(propertyElement, evaluatedValue, _evaluationLoggingContext);
 
-                _data.SetProperty(propertyElement, evaluatedValue);
+                _data.SetProperty(propertyElement, evaluatedValue, _evaluationLoggingContext);
             }
         }
 
@@ -2562,7 +2562,8 @@ private void SetAllProjectsProperty()
                         ? $"{_lastModifiedProject.FullPath}{streamImports}"
                         : $"{_lastModifiedProject.FullPath}{streamImports};{oldValue.EvaluatedValue}",
                     isGlobalProperty: false,
-                    mayBeReserved: false);
+                    mayBeReserved: false,
+                    loggingContext: _evaluationLoggingContext);
             }
         }
 
diff --git a/src/Build/Evaluation/IEvaluatorData.cs b/src/Build/Evaluation/IEvaluatorData.cs
index 12d42a71ea9..212f446d70f 100644
--- a/src/Build/Evaluation/IEvaluatorData.cs
+++ b/src/Build/Evaluation/IEvaluatorData.cs
@@ -268,12 +268,12 @@ List<ProjectItemElement> EvaluatedItemElements
         /// <summary>
         /// Sets a property which does not come from the Xml.
         /// </summary>
-        P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable = false, BackEnd.Logging.LoggingContext loggingContext = null);
+        P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, BackEnd.Logging.LoggingContext loggingContext, bool isEnvironmentVariable = false);
 
         /// <summary>
         /// Sets a property which comes from the Xml.
         /// </summary>
-        P SetProperty(ProjectPropertyElement propertyElement, string evaluatedValueEscaped);
+        P SetProperty(ProjectPropertyElement propertyElement, string evaluatedValueEscaped, BackEnd.Logging.LoggingContext loggingContext);
 
         /// <summary>
         /// Retrieves an existing target, if any.
diff --git a/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs b/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs
index 248945f74fd..5d749befd8d 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.EvaluatorData.cs
@@ -306,12 +306,12 @@ public void RecordImportWithDuplicates(ProjectImportElement importElement, Proje
                 _wrappedData.RecordImportWithDuplicates(importElement, import, versionEvaluated);
             }
 
-            public P SetProperty(ProjectPropertyElement propertyElement, string evaluatedValueEscaped)
+            public P SetProperty(ProjectPropertyElement propertyElement, string evaluatedValueEscaped, BackEnd.Logging.LoggingContext loggingContext)
             {
-                return _wrappedData.SetProperty(propertyElement, evaluatedValueEscaped);
+                return _wrappedData.SetProperty(propertyElement, evaluatedValueEscaped, loggingContext);
             }
 
-            public P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable = false, LoggingContext loggingContext = null)
+            public P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, LoggingContext loggingContext, bool isEnvironmentVariable = false)
             {
                 return _wrappedData.SetProperty(name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, loggingContext: loggingContext);
             }
diff --git a/src/Build/Evaluation/PropertiesUseTracker.cs b/src/Build/Evaluation/PropertiesUseTracker.cs
index b88423adff1..6e3c8f67862 100644
--- a/src/Build/Evaluation/PropertiesUseTracker.cs
+++ b/src/Build/Evaluation/PropertiesUseTracker.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using System.Diagnostics.CodeAnalysis;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
@@ -38,7 +39,15 @@ internal sealed class PropertiesUseTracker
 
     internal void TrackRead(string propertyName, int startIndex, int endIndex, IElementLocation elementLocation, bool isUninitialized, bool isArtificial)
     {
-        if (isArtificial || !isUninitialized)
+        if (isArtificial)
+        {
+            return;
+        }
+
+        LoggingContext.ProcessPropertyRead(new PropertyReadInfo(propertyName, startIndex, endIndex,
+            elementLocation, isUninitialized, GetPropertyReadContext(propertyName, startIndex, endIndex)));
+
+        if (!isUninitialized)
         {
             return;
         }
@@ -64,6 +73,19 @@ internal void TrackRead(string propertyName, int startIndex, int endIndex, IElem
         }
     }
 
+    private PropertyReadContext GetPropertyReadContext(string propertyName, int startIndex, int endIndex)
+    {
+        if (PropertyReadContext == PropertyReadContext.PropertyEvaluation &&
+            !string.IsNullOrEmpty(CurrentlyEvaluatingPropertyElementName) &&
+            MSBuildNameIgnoreCaseComparer.Default.Equals(CurrentlyEvaluatingPropertyElementName, propertyName,
+                startIndex, endIndex - startIndex + 1))
+        {
+            return PropertyReadContext.PropertyEvaluationSelf;
+        }
+
+        return PropertyReadContext;
+    }
+
     internal void TryAdd(string propertyName, IElementLocation elementLocation)
     {
         if (_properties is null)
diff --git a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
index 4b2cd613881..19bd4150be6 100644
--- a/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
+++ b/src/Build/Evaluation/PropertyTrackingEvaluatorDataWrapper.cs
@@ -6,6 +6,7 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Components.Logging;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation.Context;
@@ -86,16 +87,17 @@ public P GetProperty(string name, int startIndex, int endIndex)
         /// <summary>
         /// Sets a property which does not come from the Xml.
         /// </summary>
-        public P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable = false, LoggingContext? loggingContext = null)
+        public P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, LoggingContext loggingContext, bool isEnvironmentVariable = false)
         {
             P? originalProperty = _wrapped.GetProperty(name);
-            P newProperty = _wrapped.SetProperty(name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, isEnvironmentVariable, _evaluationLoggingContext);
+            P newProperty = _wrapped.SetProperty(name, evaluatedValueEscaped, isGlobalProperty, mayBeReserved, _evaluationLoggingContext, isEnvironmentVariable);
 
             this.TrackPropertyWrite(
                 originalProperty,
                 newProperty,
                 null,
-                this.DeterminePropertySource(isGlobalProperty, mayBeReserved, isEnvironmentVariable));
+                this.DeterminePropertySource(isGlobalProperty, mayBeReserved, isEnvironmentVariable),
+                loggingContext);
 
             return newProperty;
         }
@@ -107,16 +109,17 @@ public P SetProperty(string name, string evaluatedValueEscaped, bool isGlobalPro
         /// project file, and whose conditions evaluated to true.
         /// If there are none above this is null.
         /// </summary>
-        public P SetProperty(ProjectPropertyElement propertyElement, string evaluatedValueEscaped)
+        public P SetProperty(ProjectPropertyElement propertyElement, string evaluatedValueEscaped, LoggingContext loggingContext)
         {
             P? originalProperty = _wrapped.GetProperty(propertyElement.Name);
-            P newProperty = _wrapped.SetProperty(propertyElement, evaluatedValueEscaped);
+            P newProperty = _wrapped.SetProperty(propertyElement, evaluatedValueEscaped, loggingContext);
 
             this.TrackPropertyWrite(
                 originalProperty,
                 newProperty,
                 propertyElement.Location,
-                PropertySource.Xml);
+                PropertySource.Xml,
+                loggingContext);
 
             return newProperty;
         }
@@ -238,10 +241,17 @@ private void TrackUninitializedPropertyRead(string name)
             _evaluationLoggingContext.LogBuildEvent(args);
         }
 
-        private void TrackPropertyWrite(P? predecessor, P property, IElementLocation? location, PropertySource source)
+        private void TrackPropertyWrite(
+            P? predecessor,
+            P property,
+            IElementLocation? location,
+            PropertySource source,
+            LoggingContext loggingContext)
         {
             string name = property.Name;
 
+            loggingContext.ProcessPropertyWrite(new PropertyWriteInfo(property.Name, string.IsNullOrEmpty(property.EscapedValue), location));
+
             if (predecessor == null)
             {
                 // If this property had no previous value, then track an initial value.
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index c8bdd009a8f..e35d0f39134 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -1665,7 +1665,7 @@ IItemDefinition<ProjectMetadataInstance> IEvaluatorData<ProjectPropertyInstance,
         /// immutable if we are immutable.
         /// Only called during evaluation, so does not check for immutability.
         /// </summary>
-        ProjectPropertyInstance IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, ProjectMetadataInstance, ProjectItemDefinitionInstance>.SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, bool isEnvironmentVariable, LoggingContext loggingContext)
+        ProjectPropertyInstance IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, ProjectMetadataInstance, ProjectItemDefinitionInstance>.SetProperty(string name, string evaluatedValueEscaped, bool isGlobalProperty, bool mayBeReserved, LoggingContext loggingContext, bool isEnvironmentVariable)
         {
             // Mutability not verified as this is being populated during evaluation
             ProjectPropertyInstance property = ProjectPropertyInstance.Create(name, evaluatedValueEscaped, mayBeReserved, _isImmutable, isEnvironmentVariable, loggingContext);
@@ -1678,7 +1678,7 @@ ProjectPropertyInstance IEvaluatorData<ProjectPropertyInstance, ProjectItemInsta
         /// Predecessor is discarded as it is a design time only artefact.
         /// Only called during evaluation, so does not check for immutability.
         /// </summary>
-        ProjectPropertyInstance IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, ProjectMetadataInstance, ProjectItemDefinitionInstance>.SetProperty(ProjectPropertyElement propertyElement, string evaluatedValueEscaped)
+        ProjectPropertyInstance IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, ProjectMetadataInstance, ProjectItemDefinitionInstance>.SetProperty(ProjectPropertyElement propertyElement, string evaluatedValueEscaped, LoggingContext loggingContext)
         {
             // Mutability not verified as this is being populated during evaluation
             ProjectPropertyInstance property = ProjectPropertyInstance.Create(propertyElement.Name, evaluatedValueEscaped, false /* may not be reserved */, _isImmutable);
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index aeedba3e4c2..7b61cb04743 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -164,6 +164,7 @@
     <Compile Include="BuildCheck\Infrastructure\BuildCheckForwardingLogger.cs" />
     <Compile Include="BuildCheck\Infrastructure\BuildEventsProcessor.cs" />
     <Compile Include="BuildCheck\Infrastructure\IBuildCheckManagerProvider.cs" />
+    <Compile Include="BuildCheck\Infrastructure\IBuildEngineDataConsumer.cs" />
     <Compile Include="BuildCheck\Infrastructure\NullBuildCheckManager.cs" />
     <Compile Include="BuildCheck\Infrastructure\NullBuildCheckManagerProvider.cs" />
     <Compile Include="BuildCheck\Infrastructure\TracingReporter.cs" />
@@ -192,6 +193,9 @@
     <Compile Include="BuildCheck\Logging\IBuildAnalysisLoggingContextFactory.cs" />
     <Compile Include="BuildCheck\OM\EvaluatedPropertiesAnalysisData.cs" />
     <Compile Include="BuildCheck\OM\ParsedItemsAnalysisData.cs" />
+    <Compile Include="BuildCheck\OM\ProjectProcessingDoneData.cs" />
+    <Compile Include="BuildCheck\OM\PropertyReadData.cs" />
+    <Compile Include="BuildCheck\OM\PropertyWriteData.cs" />
     <Compile Include="BuildCheck\Utilities\Constants.cs" />
     <Compile Include="BuildCheck\Utilities\EnumerableExtensions.cs" />
     <Compile Include="Evaluation\IItemTypeDefinition.cs" />
diff --git a/src/Shared/IElementLocation.cs b/src/Shared/IElementLocation.cs
index 6353e3d17fb..f9058dce4db 100644
--- a/src/Shared/IElementLocation.cs
+++ b/src/Shared/IElementLocation.cs
@@ -7,15 +7,16 @@
 
 namespace Microsoft.Build.Shared
 {
+    internal interface IElementLocation : IMsBuildElementLocation, ITranslatable { }
+
     /// <summary>
     /// Represents the location information for error reporting purposes.  This is normally used to
     /// associate a run-time error with the original XML.
     /// This is not used for arbitrary errors from tasks, which store location in a BuildXXXXEventArgs.
     /// All implementations should be IMMUTABLE.
-    /// This is not public because the current implementation only provides correct data for unedited projects.
-    /// DO NOT make it public without considering a solution to this problem.
+    /// Any editing of the project XML through the MSBuild API's will invalidate locations in that XML until the XML is reloaded.
     /// </summary>
-    internal interface IElementLocation : ITranslatable
+    public interface IMsBuildElementLocation
     {
         /// <summary>
         /// The file from which this particular element originated.  It may
