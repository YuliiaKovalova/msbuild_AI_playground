diff --git a/documentation/specs/proposed/Wasm-tasks.md b/documentation/specs/proposed/Wasm-tasks.md
index 23bc2ce117e..b5f9688468e 100644
--- a/documentation/specs/proposed/Wasm-tasks.md
+++ b/documentation/specs/proposed/Wasm-tasks.md
@@ -176,7 +176,7 @@ After the task is run, Output parameters as a JSON are read from stdout of the W
 
 ### Json format for parameter spec
 They mirror MSBuild Task parameters as they need to be reflected to a C# class.
-```json
+```jsonc
 {
     "Properties": {
         "Param1": {
@@ -204,7 +204,7 @@ They mirror MSBuild Task parameters as they need to be reflected to a C# class.
 
 ```
 ### Json format for parameter values
-```json
+```jsonc
 {
     "Properties" : {
         "Param1": "hello",
@@ -220,7 +220,7 @@ They mirror MSBuild Task parameters as they need to be reflected to a C# class.
 
 ### Json format for task output
 Only parameters with the output attribute set to true are recognized from the output in the MSBuild task.
-```json
+```jsonc
 {
         "Param4": [
             {
diff --git a/documentation/specs/proposed/wasmtask.wit b/documentation/specs/proposed/wasmtask.wit
index 96a458d9782..31358c902a5 100644
--- a/documentation/specs/proposed/wasmtask.wit
+++ b/documentation/specs/proposed/wasmtask.wit
@@ -1,62 +1,88 @@
-﻿package msbuildtask:v0
+﻿package MSBuildWasm:v0
 
-record str-kv-pair {
-    key: string
-    value: string
+// WIT doesn't have maps/dictionaries
+record StringKVPair {
+    Key: string
+    Value: string
 }
+type StringMap = list<StringKVPair>
 
-type str-dictionary = list<str-kv-pair>
+// mirroring TaskItem in MSBuild - it's a description of a file or directory
+record TaskItem { 
+    // Path inside the sandbox
+    WasmPath: string;
+    Metadata: StringMap
+}
+// enum for types of properties in Tasks
+enum PropertyType {
+    BoolType,
+    StringType,
+    TaskItemType,
+    BoolArrayType,
+    StringArrayType,
+    TaskItemArrayType
+}
+
+// variant contains one of the possible types of properties
+variant PropertyValue {
+    Bool(bool);
+    String(string);
+    TaskItem(TaskItem);
+    BoolArray(BoolList);
+    StringArray(StringList);
+    TaskItemArray(TaskItemList);
+}
 
-record TaskItem {
-    ItemSpec: string
-    Metadata: str-dictionary
+type TaskItemList = list<TaskItem>
+type BoolList = list<bool>
+type StringList = list<string>
+
+// mirrors MSBuild's TaskPropertyInfo
+record TaskPropertyInfo {
+    Name: string;
+    Type: PropertyType;
+    Output: bool;
+    Required: bool;
 }
 
-type TaskItems = list<TaskItem>
-type Bools = list<bool>
-type Strings = list<string>
+// information about a task passed from the Task to MSBuild
+record TaskInfo {
+    Name: string; 
+    Parameters: list<TaskPropertyInfo>; 
+    Metadata: StringMap; // e.g. requirements for the host environment
+}
 
-interface host-data {
-    GetHostData: func() -> str-dictionary
+// information about the host environment passed from MSBuild to the Task
+record HostInfo {
+    PreopenedDirectories: TaskItemList;
 }
 
+// input to Execute 
+// (in MSBuild normally the task already magically has set its properties to the values from the project file, but here we need to pass them explicitly)
+record TaskInput {
+    HostInfo: HostInfo;
+    Properties: list<PropertyValue>;
+}
 
-interface host-logger {
+// callbacks with logs from the task to MSBuild logging system
+interface HostLogger {
     enum MessageImportance {
         High, 
         Normal,
         Low
     }
 
-    LogMessage: func(message: string, importance: MessageImportance)
-    LogError: func(message: string);
+    LogMessage: func(importance: MessageImportance, message: string)
     LogWarning: func(message: string);
+    LogError: func(message: string);
 }
 
-
-interface task-info {
-    GetTaskInfo: func() -> str-dictionary
-    LoadParameters: func()
-}
-
-interface host-task-parameter {
-    GetParameter: func(name: string) -> Variant<bool, string, TaskItem, Bools, Strings, TaskItems>;
-    GetBoolParameter: func(name: string) -> bool;
-    GetStringParameter: func(name: string) -> string;
-    GetTaskItemParameter: func(name: string) -> TaskItem;
-    GetBoolsParameter: func(name: string) -> Bools;
-    GetStringsParameter: func(name: string) -> Strings;
-    GetTaskItemsParameter: func(name: string) -> TaskItems;
-}
-
-interface execute {
-    Execute: func() -> bool;
-}
-
-world MSBuildTask {
-    import host-data;
-    import host-logger;
-    import host-task-parameter;
-    export task-info;
-    export execute;
+// world describes the task's interface to MSBuild
+world WasmTask {
+    // host obtains information about the task to know what properties to read from project file and pass in
+    export GetTaskInfo: func() -> TaskInfo;
+    // execute is the entry point for the task, returns success
+    export Execute: func(input: TaskInput) -> bool;
+    // task should call HostLogger functions to log messages
+    import HostLogger;
 }
