diff --git a/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs b/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs
index b5e169aa70d..e173c47c640 100644
--- a/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs
@@ -285,8 +285,8 @@ public void ParseSolutionFilter(bool convertToSlnx)
         private static string ConvertToSlnx(string slnPath)
         {
             string slnxPath = slnPath + "x";
-            ISolutionSerializer? serializer = SolutionSerializers.GetSerializerByMoniker(slnPath);
-            SolutionModel solutionModel = serializer!.OpenAsync(slnPath, CancellationToken.None).Result;
+            ISolutionSerializer serializer = SolutionSerializers.GetSerializerByMoniker(slnPath).ShouldNotBeNull();
+            SolutionModel solutionModel = serializer.OpenAsync(slnPath, CancellationToken.None).Result;
             SolutionSerializers.SlnXml.SaveAsync(slnxPath, solutionModel, CancellationToken.None).Wait();
             return slnxPath;
         }
diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index 475ddb9df67..3121cb0bbb5 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -335,7 +335,7 @@ internal void ParseUsingNewParser()
         /// <param name="solutionModel"></param>
         private void ReadSolutionModel(SolutionModel solutionModel)
         {
-            ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(_solutionFile), "ParseSolutionFile() got a null solution file!");
+            ErrorUtilities.VerifyThrow(!string.IsNullOrEmpty(_solutionFile), "ParseSolutionFile() got a null or empty solution file.");
             ErrorUtilities.VerifyThrowInternalRooted(_solutionFile);
 
             _projectsByGuid = new Dictionary<string, ProjectInSolution>(StringComparer.OrdinalIgnoreCase);
@@ -409,7 +409,7 @@ private string GetProjectName(SolutionProjectModel projectModel)
             => !string.IsNullOrEmpty(projectModel.DisplayName) ? projectModel.DisplayName : projectModel.ActualDisplayName;
 
         /// <summary>
-        /// Returns a string from Guid in the format "{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}".
+        /// Returns a string from Guid in the format that the old MSBuild solution parser returned.
         /// </summary>
         private static string ToProjectGuidFormat(Guid id) => id.ToString("B").ToUpper();
 
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index c3002f6d502..56b3811f249 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -1819,10 +1819,11 @@ public void TestProcessProjectSwitchSlnProjDifferentNames()
         [Fact]
         public void TestProcessProjectSwitchSlnxProjDifferentNames()
         {
+            string[] projects = { "test.proj", "Different.slnx" };
+            string[] extensionsToIgnore = null;
+
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = { "test.proj", "Different.slnx" };
-                string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
                 MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             });
