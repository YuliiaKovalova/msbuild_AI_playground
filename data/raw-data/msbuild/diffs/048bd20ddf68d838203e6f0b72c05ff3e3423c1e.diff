diff --git a/src/MSBuild/AutomaticEncodingRestorer.cs b/src/MSBuild/AutomaticEncodingRestorer.cs
index 1129cca0708..b5696d62ab8 100644
--- a/src/MSBuild/AutomaticEncodingRestorer.cs
+++ b/src/MSBuild/AutomaticEncodingRestorer.cs
@@ -20,33 +20,25 @@ public class AutomaticEncodingRestorer : IDisposable
         private Encoding? _originalOutputEncoding = null;
         private Encoding? _originalInputEncoding = null;
 
-        private bool outputEncodingAccessible = false;
-        private bool inputEncodingAccessible = false;
-
         public AutomaticEncodingRestorer()
         {
             try
             {
-                if (
 #if NET7_0_OR_GREATER
-                        !OperatingSystem.IsIOS() && !OperatingSystem.IsAndroid() && !OperatingSystem.IsTvOS()) // Output + Input Encoding are unavailable on these platforms per docs.
-#else
-                        IsWindowsOS()) // Windows is the only platform where we need to change the encoding as other platforms are UTF 8 by default, so for now its the only one required to restore.
-#endif
+                if (OperatingSystem.IsIOS() || OperatingSystem.IsAndroid() || OperatingSystem.IsTvOS()) // Output + Input Encoding are unavailable on these platforms per docs, and they're only available past net 5.
                 {
-                    _originalOutputEncoding = Console.OutputEncoding;
-                    outputEncodingAccessible = true;
-                    if (
-#if NET7_0_OR_GREATER
-                        !OperatingSystem.IsBrowser()) // Input Encoding is also unavailable in this platform.
-#else
-                        IsWindowsOS())
+                    return;
+                }
 #endif
-                    {
-                        _originalInputEncoding = Console.InputEncoding;
-                        inputEncodingAccessible = true;
-                    }
+                _originalOutputEncoding = Console.OutputEncoding;
+
+#if NET7_0_OR_GREATER
+                if (OperatingSystem.IsBrowser()) // Input Encoding is also unavailable in this platform. (No concern for net472 as browser is unavailable.)
+                {
+                    return;
                 }
+#endif
+                _originalInputEncoding = Console.InputEncoding;
             }
             catch (Exception ex) when (ex is IOException || ex is SecurityException)
             {
@@ -58,11 +50,11 @@ public void Dispose()
         {
             try
             {
-                if (outputEncodingAccessible && _originalOutputEncoding != null)
+                if (_originalOutputEncoding != null)
                 {
                     Console.OutputEncoding = _originalOutputEncoding;
                 }
-                if (inputEncodingAccessible && _originalInputEncoding != null)
+                if (_originalInputEncoding != null)
                 {
                     Console.InputEncoding = _originalInputEncoding;
                 }
@@ -72,18 +64,5 @@ public void Dispose()
                 // The encoding is unavailable. Do nothing.
             }
         }
-
-        /// <summary>
-        /// Return whether the running OS is windows for net472.
-        /// RuntimeInformation.IsOSPlatform(OSPlatform.Windows) is sometimes available in net472 but in this context it's an unavailable API, so this function is needed.
-        /// </summary>
-        /// <returns>
-        /// A boolean of 'true' iff the current machine os is windows.
-        /// </returns>
-        private bool IsWindowsOS()
-        {
-            string? windir = Environment.GetEnvironmentVariable("windir");
-            return !string.IsNullOrEmpty(windir) && windir.Contains(@"\") && Directory.Exists(windir);
-        }
     }
 }
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 17ce67916a7..1f457069c18 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1639,6 +1639,7 @@ internal static void SetConsoleUI()
             // Eliminate the complex script cultures from the language selection.
             var desiredCulture = GetExternalOverridenUILanguageIfSupportableWithEncoding() ?? CultureInfo.CurrentUICulture.GetConsoleFallbackUICulture();
             thisThread.CurrentUICulture = desiredCulture;
+
             // For full framework, both the above and below must be set. This is not true in core, but it is a no op in core.
             // https://learn.microsoft.com/en-us/dotnet/api/system.globalization.cultureinfo.defaultthreadcurrentculture?redirectedfrom=MSDN&view=net-7.0#remarks
             CultureInfo.CurrentUICulture = desiredCulture;
