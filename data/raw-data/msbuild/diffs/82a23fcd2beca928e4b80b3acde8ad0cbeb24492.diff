diff --git a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
index 1781342fefb..0185fbd7911 100644
--- a/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ImportFromMSBuildExtensionsPath_Tests.cs
@@ -1,13 +1,6 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#if FEATURE_SYSTEM_CONFIGURATION
-// NOTE: This test WOULD work in net5.0 after the System.Configuration.ConfigurationManager change. However, it would
-//       only work if ToolsetDefinitionLocations is set to ConfigurationFile and that ReadApplicationConfiguration in
-//       ToolsetConfigurationReader.cs removes the RunningTests condition since ConfigurationManager.OpenExeConfiguration
-//       would try to get testhost.exe.config instead of the actual configuration file. But those changes seems more 
-//       fitting as a different test rather than making all these changes instead.
-
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Exceptions;
@@ -54,7 +47,11 @@ public void ImportFromExtensionsPathNotFound()
                 extnDir1 = GetNewExtensionsPathAndCreateFile("extensions1", Path.Combine("foo", "extn.proj"), GetExtensionTargetsFileContent1());
                 mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", GetMainTargetFileContent());
 
+#if FEATURE_SYSTEM_CONFIGURATION
                 var projColln = new ProjectCollection();
+#else
+                var projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);
+#endif
                 projColln.ResetToolsetsForTests(WriteConfigFileAndGetReader("MSBuildExtensionsPath", extnDir1, Path.Combine("tmp", "nonexistent")));
                 var logger = new MockLogger();
                 projColln.RegisterLogger(logger);
@@ -299,7 +296,11 @@ public void ImportFromExtensionsPathInvalidFile()
                 extnDir1 = GetNewExtensionsPathAndCreateFile("extensions1", Path.Combine("foo", "extn.proj"), extnTargetsFileContent);
                 mainProjectPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("main.proj", GetMainTargetFileContent());
 
+#if FEATURE_SYSTEM_CONFIGURATION
                 var projColln = new ProjectCollection();
+#else
+                var projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);
+#endif
                 projColln.ResetToolsetsForTests(WriteConfigFileAndGetReader("MSBuildExtensionsPath", extnDir1,
                                                                                 Path.Combine("tmp", "nonexistent")));
                 var logger = new MockLogger();
@@ -398,7 +399,11 @@ public void ImportFromExtensionsPathSearchOrder2()
 
             // MSBuildExtensionsPath* property value has highest priority for the lookups
             try {
+#if FEATURE_SYSTEM_CONFIGURATION
                 var projColln = new ProjectCollection();
+#else
+                var projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);
+#endif
                 projColln.ResetToolsetsForTests(WriteConfigFileAndGetReader("MSBuildExtensionsPath", Path.Combine("tmp", "non-existent"), extnDir1));
                 var logger = new MockLogger();
                 projColln.RegisterLogger(logger);
@@ -487,7 +492,12 @@ public void ImportFromExtensionsPathAnd32And64()
                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(String.Format(configFileContents, extnDir1, extnDir2, extnDir3));
                 var reader = GetStandardConfigurationReader();
 
+#if FEATURE_SYSTEM_CONFIGURATION
                 var projColln = new ProjectCollection();
+#else
+                var projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);
+#endif
+
                 projColln.ResetToolsetsForTests(reader);
                 var logger = new MockLogger();
                 projColln.RegisterLogger(logger);
@@ -561,7 +571,11 @@ public void ExpandExtensionsPathFallback()
                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(configFileContents);
                 var reader = GetStandardConfigurationReader();
 
-                var projectCollection = new ProjectCollection(new Dictionary<string, string> {["FallbackExpandDir1"] = extnDir1});
+#if FEATURE_SYSTEM_CONFIGURATION
+                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
+#else
+                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 }, null, ToolsetDefinitionLocations.ConfigurationFile);
+#endif
 
                 projectCollection.ResetToolsetsForTests(reader);
                 var logger = new MockLogger();
@@ -622,7 +636,11 @@ public void ExpandExtensionsPathFallbackInErrorMessage()
                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(configFileContents);
                 var reader = GetStandardConfigurationReader();
 
+#if FEATURE_SYSTEM_CONFIGURATION
                 var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
+#else
+                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 }, null, ToolsetDefinitionLocations.ConfigurationFile);
+#endif
 
                 projectCollection.ResetToolsetsForTests(reader);
                 var logger = new MockLogger();
@@ -692,7 +710,11 @@ public void FallbackImportWithIndirectReference()
                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(configFileContents);
                 var reader = GetStandardConfigurationReader();
 
+#if FEATURE_SYSTEM_CONFIGURATION
                 var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
+#else
+                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 }, null, ToolsetDefinitionLocations.ConfigurationFile);
+#endif
 
                 projectCollection.ResetToolsetsForTests(reader);
                 var logger = new MockLogger();
@@ -757,7 +779,11 @@ public void FallbackImportWithUndefinedProperty()
                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(configFileContents);
                 var reader = GetStandardConfigurationReader();
 
+#if FEATURE_SYSTEM_CONFIGURATION
                 var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
+#else
+                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 }, null, ToolsetDefinitionLocations.ConfigurationFile);
+#endif
 
                 projectCollection.ResetToolsetsForTests(reader);
                 var logger = new MockLogger();
@@ -816,7 +842,11 @@ public void FallbackImportWithFileNotFoundWhenPropertyNotDefined()
                 ToolsetConfigurationReaderTestHelper.WriteConfigFile(configFileContents);
                 var reader = GetStandardConfigurationReader();
 
+#if FEATURE_SYSTEM_CONFIGURATION
                 var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 });
+#else
+                var projectCollection = new ProjectCollection(new Dictionary<string, string> { ["FallbackExpandDir1"] = extnDir1 }, null, ToolsetDefinitionLocations.ConfigurationFile);
+#endif
 
                 projectCollection.ResetToolsetsForTests(reader);
                 var logger = new MockLogger();
@@ -867,7 +897,11 @@ void CreateAndBuildProjectForImportFromExtensionsPath(string mainProjectPath, st
                 Action<Project, MockLogger> action)
         {
             try {
+#if FEATURE_SYSTEM_CONFIGURATION
                 var projColln = new ProjectCollection();
+#else
+                var projColln = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);
+#endif
                 projColln.ResetToolsetsForTests(WriteConfigFileAndGetReader(extnPathPropertyName, extnDirs));
                 var logger = new MockLogger();
                 projColln.RegisterLogger(logger);
@@ -979,4 +1013,3 @@ private ToolsetConfigurationReader GetStandardConfigurationReader()
         }
     }
 }
-#endif
diff --git a/src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs b/src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs
new file mode 100644
index 00000000000..10927cbb41a
--- /dev/null
+++ b/src/Build.UnitTests/Evaluation/ToolsetConfigurationNet5_Tests.cs
@@ -0,0 +1,77 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#if !FEATURE_SYSTEM_CONFIGURATION
+/*  This test is designed especially to test Configuration parsing in net5.0
+ *  which means it WON'T work in net472 and thus we don't run it in net472 */
+
+using Microsoft.Build.Evaluation;
+using Microsoft.Build.Execution;
+
+using Xunit;
+using System.Collections.Generic;
+
+namespace Microsoft.Build.UnitTests.Evaluation
+{
+    /// <summary>
+    /// Unit tests for MSBuild Net5.0 Configuration Parsing
+    /// </summary>
+    public class ToolsetConfigurationNet5Test
+    {
+        [Fact]
+        // The default ToolsetDefintionLocations is None, which results in only the local which results in only the several included
+        // paths such as SDK path and RoslynTargetPath and nothing else. This behavior is expected and the exact same as before.
+        public void ToolsetDefinitionLocationsIsDefault()
+        {
+            var projectCollection = new ProjectCollection();
+            IDictionary<string, string> toolsetProperties
+                = new Dictionary<string, string>();
+
+            foreach (Toolset toolset in projectCollection.Toolsets)
+            {
+                foreach (KeyValuePair<string, ProjectPropertyInstance> properties in toolset.Properties)
+                {
+                    toolsetProperties[properties.Value.Name] = properties.Value.EvaluatedValue;
+                }
+            }
+
+            Assert.True(toolsetProperties.ContainsKey("MSBuildSDKsPath"));
+            Assert.True(toolsetProperties.ContainsKey("RoslynTargetsPath"));
+            Assert.Contains("net5.0", toolsetProperties["MSBuildSDKsPath"]);
+            Assert.Contains("net5.0", toolsetProperties["RoslynTargetsPath"]);
+            Assert.False(toolsetProperties.ContainsKey("VCTargetsPath"));
+            Assert.False(toolsetProperties.ContainsKey("MSBuildToolsRoot"));
+            Assert.False(toolsetProperties.ContainsKey("MSBuildExtensionsPath"));
+        }
+
+        [Fact]
+        // With ToolsetDefintionLocations set to ConfigurationFile (Which would only happen in net5.0 if the user decides to set it). 
+        // Most toolsets are available and the MsBuildTools and SDK paths are all in the net5.0 runtime.
+        public void ToolsetDefinitionLocationsIsConfiguration()
+        {
+            var projectCollection = new ProjectCollection(ToolsetDefinitionLocations.ConfigurationFile);
+            IDictionary<string, string> toolsetProperties
+                = new Dictionary<string, string>();
+
+            foreach (Toolset toolset in projectCollection.Toolsets)
+            {
+                foreach (KeyValuePair<string, ProjectPropertyInstance> properties in toolset.Properties)
+                {
+                    toolsetProperties[properties.Value.Name] = properties.Value.EvaluatedValue;
+                }
+            }
+
+            Assert.True(toolsetProperties.ContainsKey("MSBuildSDKsPath"));
+            Assert.True(toolsetProperties.ContainsKey("RoslynTargetsPath"));
+            Assert.Contains("net5.0", toolsetProperties["MSBuildSDKsPath"]);
+            Assert.Contains("net5.0", toolsetProperties["RoslynTargetsPath"]);
+
+            Assert.True(toolsetProperties.ContainsKey("VCTargetsPath"));
+            Assert.True(toolsetProperties.ContainsKey("MSBuildToolsRoot"));
+            Assert.True(toolsetProperties.ContainsKey("MSBuildExtensionsPath"));
+            Assert.Contains("net5.0", toolsetProperties["VCTargetsPath"]);
+            Assert.Contains("net5.0", toolsetProperties["MSBuildExtensionsPath"]);
+        }
+    }
+}
+#endif
diff --git a/src/Build/Definition/ToolsetConfigurationReader.cs b/src/Build/Definition/ToolsetConfigurationReader.cs
index 52128c04fa6..2b586dd9fdf 100644
--- a/src/Build/Definition/ToolsetConfigurationReader.cs
+++ b/src/Build/Definition/ToolsetConfigurationReader.cs
@@ -253,7 +253,9 @@ private static Configuration ReadApplicationConfiguration()
         {
             // When running from the command-line or from VS, use the msbuild.exe.config file.
             if (BuildEnvironmentHelper.Instance.Mode != BuildEnvironmentMode.None &&
+#if FEATURE_SYSTEM_CONFIGURATION
                 !BuildEnvironmentHelper.Instance.RunningTests &&
+#endif
                 FileSystems.Default.FileExists(BuildEnvironmentHelper.Instance.CurrentMSBuildConfigurationFile))
             {
                 var configFile = new ExeConfigurationFileMap { ExeConfigFilename = BuildEnvironmentHelper.Instance.CurrentMSBuildConfigurationFile };
