diff --git a/src/Framework/README.md b/src/Framework/README.md
index 40373c5dad8..1b72454f526 100644
--- a/src/Framework/README.md
+++ b/src/Framework/README.md
@@ -6,6 +6,6 @@ The items in this namespace are primarily base-level classes and interfaces shar
 [`ITask`](https://docs.microsoft.com/dotnet/api/microsoft.build.framework.itask), and [`ILogger`](https://docs.microsoft.com/dotnet/api/microsoft.build.framework.ilogger).
 
 ### netstandard2.0 target
-The `netstandard2.0` target of this build is configured only to output ref assemblies, we do not ship the implementation assemblies. Please use the net6.0-targeted assemblies for .NET Core 6+ scenarios.
+The `netstandard2.0` target of this build is configured only to output reference assemblies; at runtime MSBuild will be `net6.0` or `net472`. Please use the `net6.0`-targeted assemblies for .NET Core 6+ scenarios.
 
 For context, see https://github.com/dotnet/msbuild/pull/6148
\ No newline at end of file
diff --git a/src/Framework/SupportedOSPlatform.cs b/src/Framework/SupportedOSPlatform.cs
index 71deb58019b..8a50d7c82f0 100644
--- a/src/Framework/SupportedOSPlatform.cs
+++ b/src/Framework/SupportedOSPlatform.cs
@@ -1,7 +1,7 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-#if !NET5_0_OR_GREATER
+#if !NET6_0_OR_GREATER
 namespace System.Runtime.Versioning
 {
     /// <summary>
diff --git a/src/Tasks/DownloadFile.cs b/src/Tasks/DownloadFile.cs
index 3b834c15c6f..2e54c018c86 100644
--- a/src/Tasks/DownloadFile.cs
+++ b/src/Tasks/DownloadFile.cs
@@ -148,7 +148,7 @@ private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
                     }
                     catch (HttpRequestException e)
                     {
-#if RUNTIME_TYPE_NETCORE
+#if NET6_0_OR_GREATER
                         // MSBuild History: CustomHttpRequestException was created as a wrapper over HttpRequestException
                         // so it could include the StatusCode. As of net5.0, the statuscode is now in HttpRequestException.
                         throw new HttpRequestException(e.Message, e.InnerException, response.StatusCode);
@@ -186,7 +186,7 @@ private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
                             Log.LogMessageFromResources(MessageImportance.High, "DownloadFile.Downloading", SourceUrl, destinationFile.FullName, response.Content.Headers.ContentLength);
 
                             using (Stream responseStream = await response.Content.ReadAsStreamAsync(
-#if RUNTIME_TYPE_NETCORE
+#if NET6_0_OR_GREATER
                             cancellationToken
 #endif
                             ).ConfigureAwait(false))
@@ -241,7 +241,7 @@ private static bool IsRetriable(Exception exception, out Exception actualExcepti
                     }
                 }
 
-#if RUNTIME_TYPE_NETCORE
+#if NET6_0_OR_GREATER
                 // net5.0 included StatusCode in the HttpRequestException.
                 switch (httpRequestException.StatusCode)
                 {
@@ -310,7 +310,7 @@ private bool TryGetFileName(HttpResponseMessage response, out string filename)
             return !String.IsNullOrWhiteSpace(filename);
         }
 
-#if !RUNTIME_TYPE_NETCORE
+#if !NET6_0_OR_GREATER
         /// <summary>
         /// Represents a wrapper around the <see cref="HttpRequestException"/> that also contains the <see cref="HttpStatusCode"/>.
         /// DEPRECATED as of net5.0, which included the StatusCode in the HttpRequestException class.
