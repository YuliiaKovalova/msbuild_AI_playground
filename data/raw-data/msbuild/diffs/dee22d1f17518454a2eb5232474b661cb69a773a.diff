diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 3b60f4f1a4c..28e8fe62c93 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -14,6 +14,7 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Utilities;
+using Microsoft.NET.StringTools;
 using Microsoft.Win32;
 
 // Needed for DoesTaskHostExistForParameters
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index ffc7d17dbc0..701c7b6b5fc 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -15,6 +15,7 @@
 using Microsoft.Build.Framework.Profiler;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
+using Microsoft.NET.StringTools;
 
 #nullable disable
 
@@ -1260,9 +1261,9 @@ private void Write(IExtendedBuildEventArgs extendedData)
 
         internal readonly struct HashKey : IEquatable<HashKey>
         {
-            private readonly ulong value;
+            private readonly long value;
 
-            private HashKey(ulong i)
+            private HashKey(long i)
             {
                 value = i;
             }
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 67490385761..a42e76cc270 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -153,7 +153,6 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
-    <Compile Include="Utilities\FowlerNollVo1aHash.cs" />
     <Compile Include="Evaluation\IItemTypeDefinition.cs" />
     <Compile Include="FileAccess\DesiredAccess.cs" />
     <Compile Include="FileAccess\FileAccessData.cs" />
diff --git a/src/Build/Utilities/FowlerNollVo1aHash.cs b/src/StringTools/FowlerNollVo1aHash.cs
similarity index 60%
rename from src/Build/Utilities/FowlerNollVo1aHash.cs
rename to src/StringTools/FowlerNollVo1aHash.cs
index f55ff6393af..61574db2094 100644
--- a/src/Build/Utilities/FowlerNollVo1aHash.cs
+++ b/src/StringTools/FowlerNollVo1aHash.cs
@@ -4,9 +4,12 @@
 using System.Runtime.InteropServices;
 using System;
 
-namespace Microsoft.Build.Utilities
+namespace Microsoft.NET.StringTools
 {
-    internal static class FowlerNollVo1aHash
+    /// <summary>
+    /// Fowler/Noll/Vo hashing.
+    /// </summary>
+    public static class FowlerNollVo1aHash
     {
         // Fowler/Noll/Vo hashing.
         // http://www.isthe.com/chongo/tech/comp/fnv/
@@ -18,23 +21,40 @@ internal static class FowlerNollVo1aHash
         private const uint fnvOffsetBasisA32Bit = 2166136261;
 
         // 64 bit FNV prime and offset basis for FNV-1a.
-        private const ulong fnvPrimeA64Bit = 1099511628211;
-        private const ulong fnvOffsetBasisA64Bit = 14695981039346656037;
+        private const long fnvPrimeA64Bit = 1099511628211;
+        private const long fnvOffsetBasisA64Bit = unchecked((long)14695981039346656037);
 
         /// <summary>
         /// Computes 32 bit Fowler/Noll/Vo-1a hash of a string (regardless of encoding).
         /// </summary>
         /// <param name="text">String to be hashed.</param>
         /// <returns>32 bit signed hash</returns>
-        internal static int ComputeHash32(string text)
+        public static int ComputeHash32(string text)
         {
             uint hash = fnvOffsetBasisA32Bit;
 
+#if NET35
+            unchecked
+            {
+                for (int i = 0; i < text.Length; i++)
+                {
+                    char ch = text[i];
+                    byte b = (byte)ch;
+                    hash ^= b;
+                    hash *= fnvPrimeA32Bit;
+
+                    b = (byte)(ch >> 8);
+                    hash ^= b;
+                    hash *= fnvPrimeA32Bit;
+                }
+            }
+#else
             ReadOnlySpan<byte> span = MemoryMarshal.Cast<char, byte>(text.AsSpan());
             foreach (byte b in span)
             {
                 hash = unchecked((hash ^ b) * fnvPrimeA32Bit);
             }
+#endif
 
             return unchecked((int)hash);
         }
@@ -46,9 +66,9 @@ internal static int ComputeHash32(string text)
         /// </summary>
         /// <param name="text">String to be hashed.</param>
         /// <returns>64 bit unsigned hash</returns>
-        internal static ulong ComputeHash64Fast(string text)
+        public static long ComputeHash64Fast(string text)
         {
-            ulong hash = fnvOffsetBasisA64Bit;
+            long hash = fnvOffsetBasisA64Bit;
 
             unchecked
             {
@@ -68,20 +88,44 @@ internal static ulong ComputeHash64Fast(string text)
         /// </summary>
         /// <param name="text">String to be hashed.</param>
         /// <returns>64 bit unsigned hash</returns>
-        internal static ulong ComputeHash64(string text)
+        public static long ComputeHash64(string text)
         {
-            ulong hash = fnvOffsetBasisA64Bit;
+            long hash = fnvOffsetBasisA64Bit;
+
+#if NET35
+            unchecked
+            {
+                for (int i = 0; i < text.Length; i++)
+                {
+                    char ch = text[i];
+                    byte b = (byte)ch;
+                    hash ^= b;
+                    hash *= fnvPrimeA64Bit;
 
+                    b = (byte)(ch >> 8);
+                    hash ^= b;
+                    hash *= fnvPrimeA64Bit;
+                }
+            }
+#else
             ReadOnlySpan<byte> span = MemoryMarshal.Cast<char, byte>(text.AsSpan());
             foreach (byte b in span)
             {
                 hash = unchecked((hash ^ b) * fnvPrimeA64Bit);
             }
+#endif
 
             return hash;
         }
 
-        internal static ulong Combine64(ulong left, ulong right)
+        /// <summary>
+        /// Combines two 64 bit hashes into one.
+        /// </summary>
+        /// <param name="left"></param>
+        /// <param name="right"></param>
+        /// <returns></returns>
+        [CLSCompliant(false)]
+        public static long Combine64(long left, long right)
         {
             unchecked
             {
