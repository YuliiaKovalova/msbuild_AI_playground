diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 91f09eeeaf1..9541239a554 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -336,11 +336,12 @@
       <AssemblyPath ParameterType="System.String" Required="true" />
     </ParameterGroup>
     <Task>
+      <Reference Include="System.Xml" />
       <Using Namespace="Microsoft.Build.Utilities" />
       <Using Namespace="System.IO" />
       <Using Namespace="System.Reflection" />
       <Using Namespace="System.Xml" />
-      <Code Type="Fragment" Source="ValidateMSBuildPackageDependencyVersions.cs" Language="cs">
+      <Code Source="ValidateMSBuildPackageDependencyVersions.cs" Language="cs">
       </Code>
     </Task>
   </UsingTask>
diff --git a/src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs b/src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs
index 170a7be1b3b..b1b7b88a53c 100644
--- a/src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs
+++ b/src/MSBuild/ValidateMSBuildPackageDependencyVersions.cs
@@ -1,62 +1,84 @@
-XmlDocument doc = new XmlDocument();
-doc.Load(AppConfig);
-foreach (var topLevelElement in doc.ChildNodes)
+using Microsoft.Build.Utilities;
+using System.IO;
+using System.Reflection;
+using System.Runtime.CompilerServices;
+using System.Runtime.Remoting.Messaging;
+using System.Threading.Tasks;
+using System.Xml;
+namespace MSBuild
 {
-    if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals("configuration", System.StringComparison.OrdinalIgnoreCase))
+    public class ValidateMSBuildPackageDependencyVersions : Task
     {
-        foreach (var configurationElement in topLevelXmlElement.ChildNodes)
+        [RequiredAttribute]
+        public string AppConfig { get; set; }
+        [RequiredAttribute]
+        public string AssemblyPath { get; set; }
+
+        public override bool Execute()
         {
-            if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals("runtime", System.StringComparison.OrdinalIgnoreCase))
+            XmlDocument doc = new XmlDocument();
+            doc.Load(AppConfig);
+            foreach (var topLevelElement in doc.ChildNodes)
             {
-                foreach (var runtimeElement in configurationXmlElement.ChildNodes)
+                if (topLevelElement is XmlElement topLevelXmlElement && topLevelXmlElement.Name.Equals("configuration", System.StringComparison.OrdinalIgnoreCase))
                 {
-                    if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals("assemblyBinding", System.StringComparison.OrdinalIgnoreCase))
+                    foreach (var configurationElement in topLevelXmlElement.ChildNodes)
                     {
-                        foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)
+                        if (configurationElement is XmlElement configurationXmlElement && configurationXmlElement.Name.Equals("runtime", System.StringComparison.OrdinalIgnoreCase))
                         {
-                            if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals("dependentAssembly", System.StringComparison.OrdinalIgnoreCase))
+                            foreach (var runtimeElement in configurationXmlElement.ChildNodes)
                             {
-                                string name = string.Empty;
-                                string version = string.Empty;
-                                foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)
+                                if (runtimeElement is XmlElement runtimeXmlElement && runtimeXmlElement.Name.Equals("assemblyBinding", System.StringComparison.OrdinalIgnoreCase))
                                 {
-                                    if (dependentAssembly is XmlElement dependentAssemblyXmlElement)
+                                    foreach (var assemblyBindingElement in runtimeXmlElement.ChildNodes)
                                     {
-                                        if (dependentAssemblyXmlElement.Name.Equals("assemblyIdentity", System.StringComparison.OrdinalIgnoreCase))
+                                        if (assemblyBindingElement is XmlElement assemblyBindingXmlElement && assemblyBindingXmlElement.Name.Equals("dependentAssembly", System.StringComparison.OrdinalIgnoreCase))
                                         {
-                                            foreach (var assemblyIdentityAttribute in dependentAssemblyXmlElement.Attributes)
+                                            string name = string.Empty;
+                                            string version = string.Empty;
+                                            foreach (var dependentAssembly in assemblyBindingXmlElement.ChildNodes)
                                             {
-                                                if (assemblyIdentityAttribute is XmlAttribute assemblyIdentityAttributeXmlElement && assemblyIdentityAttributeXmlElement.Name.Equals("name", System.StringComparison.OrdinalIgnoreCase))
+                                                if (dependentAssembly is XmlElement dependentAssemblyXmlElement)
                                                 {
-                                                    name = assemblyIdentityAttributeXmlElement.Value;
+                                                    if (dependentAssemblyXmlElement.Name.Equals("assemblyIdentity", System.StringComparison.OrdinalIgnoreCase))
+                                                    {
+                                                        foreach (var assemblyIdentityAttribute in dependentAssemblyXmlElement.Attributes)
+                                                        {
+                                                            if (assemblyIdentityAttribute is XmlAttribute assemblyIdentityAttributeXmlElement && assemblyIdentityAttributeXmlElement.Name.Equals("name", System.StringComparison.OrdinalIgnoreCase))
+                                                            {
+                                                                name = assemblyIdentityAttributeXmlElement.Value;
+                                                            }
+                                                        }
+                                                    }
+                                                    else if (dependentAssemblyXmlElement.Name.Equals("bindingRedirect", System.StringComparison.OrdinalIgnoreCase))
+                                                    {
+                                                        foreach (var bindingRedirectAttribute in dependentAssemblyXmlElement.Attributes)
+                                                        {
+                                                            if (bindingRedirectAttribute is XmlAttribute bindingRedirectAttributeXmlElement && bindingRedirectAttributeXmlElement.Name.Equals("newVersion", System.StringComparison.OrdinalIgnoreCase))
+                                                            {
+                                                                version = bindingRedirectAttributeXmlElement.Value;
+                                                            }
+                                                        }
+                                                    }
                                                 }
                                             }
-                                        }
-                                        else if (dependentAssemblyXmlElement.Name.Equals("bindingRedirect", System.StringComparison.OrdinalIgnoreCase))
-                                        {
-                                            foreach (var bindingRedirectAttribute in dependentAssemblyXmlElement.Attributes)
+                                            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version))
                                             {
-                                                if (bindingRedirectAttribute is XmlAttribute bindingRedirectAttributeXmlElement && bindingRedirectAttributeXmlElement.Name.Equals("newVersion", System.StringComparison.OrdinalIgnoreCase))
+                                                string path = Path.Combine(AssemblyPath, name + ".dll");
+                                                if (File.Exists(path) && !version.Equals(Assembly.LoadFile(path).GetName().Version.ToString()))
                                                 {
-                                                    version = bindingRedirectAttributeXmlElement.Value;
+                                                    Log.LogError("Binding redirect redirects to a different version than MSBuild ships.");
                                                 }
                                             }
                                         }
                                     }
                                 }
-                                if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(version))
-                                {
-                                    string path = Path.Combine(AssemblyPath, name + ".dll");
-                                    if (File.Exists(path) && !version.Equals(Assembly.LoadFile(path).GetName().Version.ToString()))
-                                    {
-                                        Log.LogError("Binding redirect redirects to a different version than MSBuild ships.");
-                                    }
-                                }
                             }
                         }
                     }
                 }
             }
+            return !Log.HasLoggedErrors;
         }
     }
 }
