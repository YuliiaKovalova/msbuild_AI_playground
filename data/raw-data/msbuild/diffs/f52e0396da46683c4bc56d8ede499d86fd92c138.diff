diff --git a/src/Tasks.UnitTests/PopulateSupportedArchitectures_Tests.cs b/src/Tasks.UnitTests/PopulateSupportedArchitectures_Tests.cs
index 429635fda06..10964deeb95 100644
--- a/src/Tasks.UnitTests/PopulateSupportedArchitectures_Tests.cs
+++ b/src/Tasks.UnitTests/PopulateSupportedArchitectures_Tests.cs
@@ -66,8 +66,7 @@ public void ManifestPopulationCheck(string manifestName, bool expectedResult)
             }
         }
 
-#if NETFRAMEWORK
-        [Theory]
+        [WindowsOnlyTheory]
         [InlineData(null, true)]
         [InlineData("buildIn.manifest", true)]
         [InlineData("testManifestWithValidSupportedArchs.manifest", true)]
@@ -176,6 +175,5 @@ public enum LoadLibraryFlags : uint { LOAD_LIBRARY_AS_DATAFILE = 2 };
                 return null;
             }
         }
-#endif
     }
 }
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 6c874864e1d..4b8adf91fd0 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -4170,13 +4170,13 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       DependsOnTargets="SetWin32ManifestProperties">
 
     <PropertyGroup>
-      <SupportedArchitectures>amd64 arm64</SupportedArchitectures>
+      <_SupportedArchitectures>amd64 arm64</_SupportedArchitectures>
     </PropertyGroup>
 
     <PopulateSupportedArchitectures
         ApplicationManifestPath="$(Win32Manifest)"
         OutputDirectory="$(IntermediateOutputPath)"
-        SupportedArchitectures="$(SupportedArchitectures)">
+        SupportedArchitectures="$(_SupportedArchitectures)">
 
         <Output TaskParameter="ManifestPath" PropertyName="_Win32Manifest"/>
     </PopulateSupportedArchitectures>
diff --git a/src/Tasks/NETMessage.cs b/src/Tasks/NETMessage.cs
index 0929fbc5079..5d080c97c25 100644
--- a/src/Tasks/NETMessage.cs
+++ b/src/Tasks/NETMessage.cs
@@ -2,7 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks.Deployment.Bootstrapper;
 
@@ -10,37 +9,6 @@ namespace Microsoft.Build.Tasks
 {
     public sealed class NETMessage : TaskExtension
     {
-        private readonly Dictionary<BuildMessageSeverity, Func<bool>> _severityToActionMap;
-
-        public NETMessage()
-        {
-            _severityToActionMap = new Dictionary<BuildMessageSeverity, Func<bool>>()
-            {
-                {
-                    BuildMessageSeverity.Error, () =>
-                    {
-                        Log.LogErrorWithCodeFromResources(ResourceName, FormatArguments);
-                        return false;
-                    }
-                },
-                {
-                    BuildMessageSeverity.Warning, () =>
-                    {
-                        Log.LogWarningWithCodeFromResources(ResourceName, FormatArguments);
-                        return true;
-                    }
-                },
-                {
-                    BuildMessageSeverity.Info, () =>
-                    {
-                        MessageImportance importance = (MessageImportance)Enum.Parse(typeof(MessageImportance), MessageImportance, true);
-                        Log.LogMessageFromResources(importance, ResourceName, FormatArguments);
-                        return true;
-                    }
-                },
-            };
-        }
-
         /// <summary>
         /// The name of the resource in Strings.resx that contains the desired error message.
         /// </summary>
@@ -67,9 +35,23 @@ public override bool Execute()
         {
             if (Enum.TryParse(Severity, ignoreCase: true, out BuildMessageSeverity severity))
             {
-                if (_severityToActionMap.TryGetValue(severity, out Func<bool>? logMessageFunc))
+                switch (severity)
                 {
-                    return logMessageFunc();
+                    case BuildMessageSeverity.Error:
+                        Log.LogErrorWithCodeFromResources(ResourceName, FormatArguments);
+                        return false;
+
+                    case BuildMessageSeverity.Warning:
+                        Log.LogWarningWithCodeFromResources(ResourceName, FormatArguments);
+                        return true;
+
+                    case BuildMessageSeverity.Info:
+                        MessageImportance importance = (MessageImportance)Enum.Parse(typeof(MessageImportance), MessageImportance, true);
+                        Log.LogMessageFromResources(importance, ResourceName, FormatArguments);
+                        return true;
+
+                    default:
+                        return false;
                 }
             }
 
diff --git a/src/Tasks/PopulateSupportedArchitectures.cs b/src/Tasks/PopulateSupportedArchitectures.cs
index d6f90798f36..b208098026b 100644
--- a/src/Tasks/PopulateSupportedArchitectures.cs
+++ b/src/Tasks/PopulateSupportedArchitectures.cs
@@ -84,32 +84,36 @@ public string ManifestPath
             private set => _generatedManifestFullPath = value;
         }
 
-        private (bool canProcceed, string? path) GetPathToManifest()
+        private Stream? GetManifestStream()
         {
             if (!string.IsNullOrEmpty(ApplicationManifestPath))
             {
                 if (!File.Exists(ApplicationManifestPath))
                 {
                     Log.LogErrorWithCodeFromResources("PopulateSupportedArchitectures.SpecifiedApplicationManifestCanNotBeFound", ApplicationManifestPath);
-                    return (false, null);
+                    return null;
                 }
 
-                return (true, ApplicationManifestPath);
+                return File.OpenRead(ApplicationManifestPath);
             }
 
+            string? defaultManifestPath = ToolLocationHelper.GetPathToDotNetFrameworkFile(DefaultManifestName, TargetDotNetFrameworkVersion.Version46);
+
             // The logic for getting default manifest is similar to the one from Roslyn:
             // If Roslyn logic returns null, we fall back to reading embedded manifest.
-            return (true, ToolLocationHelper.GetPathToDotNetFrameworkFile(DefaultManifestName, TargetDotNetFrameworkVersion.Version46));
+            return defaultManifestPath is null
+                    ? typeof(PopulateSupportedArchitectures).Assembly.GetManifestResourceStream($"Microsoft.Build.Tasks.Resources.{DefaultManifestName}")
+                    : File.OpenRead(defaultManifestPath);
         }
 
         public override bool Execute()
         {
-            (bool canProcceed, string? pathToManifest) = GetPathToManifest();
+            using Stream? stream = GetManifestStream();
 
             // Only if ApplicationManifest was not specified, we can try to load the embedded manifest.
-            if (canProcceed)
+            if (stream is not null)
             {
-                XmlDocument document = LoadManifest(pathToManifest);
+                XmlDocument document = LoadManifest(stream);
                 XmlNamespaceManager xmlNamespaceManager = XmlNamespaces.GetNamespaceManager(document.NameTable);
 
                 ManifestValidationResult validationResult = ValidateManifest(document, xmlNamespaceManager);
@@ -118,7 +122,7 @@ public override bool Execute()
                 {
                     case ManifestValidationResult.Success:
                         PopulateSupportedArchitecturesElement(document, xmlNamespaceManager);
-                        SaveManifest(document, Path.GetFileName(pathToManifest) ?? DefaultManifestName);
+                        SaveManifest(document, Path.GetFileName(ApplicationManifestPath) ?? DefaultManifestName);
                         return true;
                     case ManifestValidationResult.SupportedArchitecturesExists:
                         return true;
@@ -130,20 +134,13 @@ public override bool Execute()
             return false;
         }
 
-        private XmlDocument LoadManifest(string? path)
+        private XmlDocument LoadManifest(Stream stream)
         {
             XmlDocument document = new XmlDocument();
 
-            using Stream? stream = path is null
-                ? typeof(PopulateSupportedArchitectures).Assembly.GetManifestResourceStream($"Microsoft.Build.Tasks.Resources.{DefaultManifestName}")
-                : File.OpenRead(path);
-
-            if (stream is not null)
+            using (XmlReader xr = XmlReader.Create(stream, new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore, CloseInput = true }))
             {
-                using (XmlReader xr = XmlReader.Create(stream, new XmlReaderSettings { DtdProcessing = DtdProcessing.Ignore, CloseInput = true }))
-                {
-                    document.Load(xr);
-                }
+                document.Load(xr);
             }
 
             return document;
