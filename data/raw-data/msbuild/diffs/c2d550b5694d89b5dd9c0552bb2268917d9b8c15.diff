diff --git a/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs b/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs
index 7686c5afd74..58408ad5b08 100644
--- a/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/OpenTelemetryManager_Tests.cs
@@ -71,10 +71,6 @@ public void Initialize_ShouldSetStateToUnsampled_WhenNoOverrideOnNetCore()
             // Clear any override that might have existed
             Environment.SetEnvironmentVariable(TelemetrySampleRateOverrideEnvVarName, null);
 
-            // Also ensure we are not opting out
-            Environment.SetEnvironmentVariable(DotnetOptOut, "false");
-            Environment.SetEnvironmentVariable(TelemetryFxOptoutEnvVarName, "false");
-
             OpenTelemetryManager.Instance.Initialize(isStandalone: false);
 
             var state = GetTelemetryState(OpenTelemetryManager.Instance);
@@ -83,15 +79,13 @@ public void Initialize_ShouldSetStateToUnsampled_WhenNoOverrideOnNetCore()
         }
 #endif
 
-        [WindowsFullFrameworkOnlyTheory]
+        [WindowsOnlyTheory]
         [InlineData(true)]
         [InlineData(false)]
         public void Initialize_ShouldSetSampleRateOverride_AndCreateActivitySource_WhenRandomBelowOverride(bool standalone)
         {
 
             // Arrange
-            Environment.SetEnvironmentVariable(TelemetryFxOptoutEnvVarName, "false");
-            Environment.SetEnvironmentVariable(DotnetOptOut, "false");
             Environment.SetEnvironmentVariable(TelemetrySampleRateOverrideEnvVarName, "1.0");
 
             // Act
diff --git a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
index a5f9ba12a47..c49cd75150a 100644
--- a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
+++ b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
@@ -26,6 +26,9 @@
       <PrivateAssets>all</PrivateAssets>
     </PackageReference>
 
+    <PackageReference Include="Microsoft.VisualStudio.OpenTelemetry.ClientExtensions" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" />
+    <PackageReference Include="Microsoft.VisualStudio.OpenTelemetry.Collector" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" />
+    
     <ProjectReference Include="..\Build\Microsoft.Build.csproj" />
     <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
     <ProjectReference Include="..\MSBuild\MSBuild.csproj" />
@@ -34,7 +37,7 @@
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
     <ProjectReference Include="..\UnitTests.Shared\Microsoft.Build.UnitTests.Shared.csproj" />
-
+    
     <ProjectReference Include="..\Samples\TaskWithDependency\TaskWithDependency.csproj" Private="false" ReferenceOutputAssembly="false" OutputItemType="TaskWithDependencyResolvedProjectReferencePath">
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">TargetFramework=$(LatestDotNetCoreForMSBuild)</SetTargetFramework>
@@ -45,7 +48,7 @@
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">TargetFramework=$(LatestDotNetCoreForMSBuild)</SetTargetFramework>
     </ProjectReference>
-
+    
     <Reference Include="System.IO.Compression" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' " />
   </ItemGroup>
 
diff --git a/src/Framework/Telemetry/OpenTelemetryManager.cs b/src/Framework/Telemetry/OpenTelemetryManager.cs
index 0623194a600..6a26999f562 100644
--- a/src/Framework/Telemetry/OpenTelemetryManager.cs
+++ b/src/Framework/Telemetry/OpenTelemetryManager.cs
@@ -75,6 +75,7 @@ public void Initialize(bool isStandalone)
                 }
 
                 DefaultActivitySource = new MSBuildActivitySource(TelemetryConstants.DefaultActivitySourceNamespace);
+                _telemetryState = TelemetryState.TracerInitialized;
 
 #if NETFRAMEWORK
                 try
@@ -154,7 +155,7 @@ public void ForceFlush()
                 ForceFlushInner();
             }
         }
-
+        
         // to avoid assembly loading OpenTelemetry in tests
         private void ShutdownInner()
         {
