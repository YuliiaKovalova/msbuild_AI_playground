diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index 9d86a4731dd..cd19bb38ebc 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -1677,19 +1677,33 @@ private void ReloadFrom(Func<bool, XmlDocumentWithLocation> documentProducer, bo
         {
             ThrowIfUnsavedChanges(throwIfUnsavedChanges);
 
-            XmlDocumentWithLocation document = documentProducer(preserveFormatting ?? PreserveFormatting);
-
-            // Reload should only mutate the state if there are no parse errors.
-            ThrowIfDocumentHasParsingErrors(document);
-
-            // Do not clear the string cache.
-            // Based on the assumption that Projects are reloaded repeatedly from their file with small increments,
-            // and thus most strings would get reused
-            //this.XmlDocument.ClearAnyCachedStrings();
+            var oldDocument = XmlDocument;
+            XmlDocumentWithLocation newDocument = documentProducer(preserveFormatting ?? PreserveFormatting);
+            try
+            {
+                // Reload should only mutate the state if there are no parse errors.
+                ThrowIfDocumentHasParsingErrors(newDocument);
 
-            RemoveAllChildren();
+                RemoveAllChildren();
 
-            ProjectParser.Parse(document, this);
+                ProjectParser.Parse(newDocument, this);
+            }
+            finally
+            {
+                // Whichever document didn't become this element's document must be removed from the string cache.
+                // We do it after the fact based on the assumption that Projects are reloaded repeatedly from their
+                // file with small increments, and thus most strings would get reused avoiding unnecessary churn in
+                // the string cache.
+                var currentDocument = XmlDocument;
+                if (!object.ReferenceEquals(currentDocument, oldDocument))
+                {
+                    oldDocument.ClearAnyCachedStrings();
+                }
+                if (!object.ReferenceEquals(currentDocument, newDocument))
+                {
+                    newDocument.ClearAnyCachedStrings();
+                }
+            }
 
             MarkDirty("Project reloaded", null);
         }
