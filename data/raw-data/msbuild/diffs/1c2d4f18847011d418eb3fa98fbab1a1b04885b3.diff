diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 182d6213d8c..84f716a3a9f 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -1452,20 +1452,7 @@ public void CopyMetadataTo(ITaskItem destinationItem, bool addOriginalItemSpec)
                 else if (destinationItem is IMetadataContainer destinationItemAsMetadataContainer)
                 {
                     // The destination implements IMetadataContainer so we can use the ImportMetadata bulk-set operation.
-                    IEnumerable<ProjectMetadataInstance> metadataEnumerable = MetadataCollection;
-                    IEnumerable<KeyValuePair<string, string>> metadataToImport = metadataEnumerable
-                        .Where(metadatum => string.IsNullOrEmpty(destinationItem.GetMetadata(metadatum.Name)))
-                        .Select(metadatum => new KeyValuePair<string, string>(metadatum.Name, GetMetadataEscaped(metadatum.Name)));
-
-#if FEATURE_APPDOMAIN
-                    if (RemotingServices.IsTransparentProxy(destinationItem))
-                    {
-                        // Linq is not serializable so materialize the collection before making the call.
-                        metadataToImport = metadataToImport.ToList();
-                    }
-#endif
-
-                    destinationItemAsMetadataContainer.ImportMetadata(metadataToImport);
+                    BulkImportMetadata(destinationItem, destinationItemAsMetadataContainer);
                 }
                 else
                 {
@@ -1492,6 +1479,24 @@ public void CopyMetadataTo(ITaskItem destinationItem, bool addOriginalItemSpec)
                 }
             }
 
+            private void BulkImportMetadata(ITaskItem destinationItem, IMetadataContainer destinationItemAsMetadataContainer)
+            {
+                IEnumerable<ProjectMetadataInstance> metadataEnumerable = MetadataCollection;
+                IEnumerable<KeyValuePair<string, string>> metadataToImport = metadataEnumerable
+                    .Where(metadatum => string.IsNullOrEmpty(destinationItem.GetMetadata(metadatum.Name)))
+                    .Select(metadatum => new KeyValuePair<string, string>(metadatum.Name, GetMetadataEscaped(metadatum.Name)));
+
+#if FEATURE_APPDOMAIN
+                if (RemotingServices.IsTransparentProxy(destinationItem))
+                {
+                    // Linq is not serializable so materialize the collection before making the call.
+                    metadataToImport = metadataToImport.ToList();
+                }
+#endif
+
+                destinationItemAsMetadataContainer.ImportMetadata(metadataToImport);
+            }
+
             /// <summary>
             /// ITaskItem implementation which returns a clone of the metadata on this object.
             /// Values returned are unescaped. To get the original escaped values, use ITaskItem2.CloneCustomMetadataEscaped instead.
