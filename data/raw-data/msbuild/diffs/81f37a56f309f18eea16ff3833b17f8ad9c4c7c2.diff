diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index c5044896db5..1becd3123fd 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -3664,7 +3664,7 @@ public void TestBase64Conversion(string testCase)
         [InlineData("easycase", "ZWFzeWNhc2U=")]
         [InlineData("", "")]
         [InlineData("\"\n()\tsdfIR$%#*;==", "IgooKQlzZGZJUiQlIyo7PT0=")]
-        public void TestExplicitToBase64Conversion(string testCase, string result)
+        public void TestExplicitToBase64Conversion(string plaintext, string base64)
         {
             PropertyDictionary<ProjectPropertyInstance> pg = new();
             Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);
@@ -3676,7 +3676,7 @@ public void TestExplicitToBase64Conversion(string testCase, string result)
         [InlineData("easycase", "ZWFzeWNhc2U=")]
         [InlineData("", "")]
         [InlineData("\"\n()\tsdfIR$%#*;==", "IgooKQlzZGZJUiQlIyo7PT0=")]
-        public void TestExplicitFromBase64Conversion(string testCase, string intermediate)
+        public void TestExplicitFromBase64Conversion(string plaintext, string base64)
         {
             PropertyDictionary<ProjectPropertyInstance> pg = new();
             Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new(pg, FileSystems.Default);
diff --git a/src/Build/Evaluation/IntrinsicFunctions.cs b/src/Build/Evaluation/IntrinsicFunctions.cs
index 2f1f1321e01..bd073584157 100644
--- a/src/Build/Evaluation/IntrinsicFunctions.cs
+++ b/src/Build/Evaluation/IntrinsicFunctions.cs
@@ -355,7 +355,7 @@ internal static string ValueOrDefault(string conditionValue, string defaultValue
         /// Returns the string after converting all bytes to base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.
         /// </summary>
         /// <param name="toEncode">String to encode in base 64.</param>
-        /// <returns></returns>
+        /// <returns>The encoded string.</returns>
         internal static string ConvertToBase64(string toEncode)
         {
             return Convert.ToBase64String(Encoding.UTF8.GetBytes(toEncode));
@@ -365,7 +365,7 @@ internal static string ConvertToBase64(string toEncode)
         /// Returns the string after converting from base 64 (alphanumeric characters plus '+' and '/'), ending in one or two '='.
         /// </summary>
         /// <param name="toDecode">The string to decode.</param>
-        /// <returns></returns>
+        /// <returns>The decoded string.</returns>
         internal static string ConvertFromBase64(string toDecode)
         {
             return Encoding.UTF8.GetString(Convert.FromBase64String(toDecode));
