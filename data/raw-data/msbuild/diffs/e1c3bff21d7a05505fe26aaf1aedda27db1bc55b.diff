diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 44fa9699dcc..90b1f647afa 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -720,6 +720,7 @@ public void BlockingWaitForCore()
             var rms = _host.GetComponent(BuildComponentType.TaskResourceManager) as ResourceManagerService;
 
             rms.RequireCores(1);
+            runningTotal += 1;
         }
 
         internal void ReleaseAllCores()
diff --git a/src/Tasks/SemaphoreCPUTask.cs b/src/Tasks/SemaphoreCPUTask.cs
index 177e2c07fce..7c8ca923dbd 100644
--- a/src/Tasks/SemaphoreCPUTask.cs
+++ b/src/Tasks/SemaphoreCPUTask.cs
@@ -3,6 +3,7 @@
 
 using Microsoft.Build.Utilities;
 using System;
+using System.Diagnostics;
 using System.Threading;
 
 namespace Microsoft.Build.Tasks
@@ -13,6 +14,8 @@ class SemaphoreCPUTask : Task
 
         public override bool Execute()
         {
+            Log.LogMessageFromText($"Starting in {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
+
             BuildEngine7.Yield();
 
             //int initial = BuildEngine7.RequestCores(3123890);
@@ -56,10 +59,12 @@ public override bool Execute()
 
         void LaunchAndComplete(int i, Action completionCallback)
         {
+            Stopwatch s = new Stopwatch();
+            s.Start();
             BuildEngine7.BlockingWaitForCore();
-            Log.LogMessageFromText($"Action {i} started from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
+            Log.LogMessageFromText($"Action {i} started from {System.Diagnostics.Process.GetCurrentProcess().Id}, waited {s.Elapsed}", Framework.MessageImportance.High);
             Thread.Sleep(2_000);
-            Log.LogMessageFromText($"Action {i} completed from {System.Diagnostics.Process.GetCurrentProcess().Id}", Framework.MessageImportance.High);
+            Log.LogMessageFromText($"Action {i} completed from {System.Diagnostics.Process.GetCurrentProcess().Id}, total {s.Elapsed}", Framework.MessageImportance.High);
 
             completionCallback.Invoke();
         }
