diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 2ccc4a88c32..2c65c0255c4 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -193,6 +193,36 @@ public void EditorConfig_SeverityAppliedCorrectly(string BC0101Severity, string
         }
     }
 
+    [Fact]
+    public void EditorConfig_CustomConfigAppliedCorrectly()
+    {
+        using (var env = TestEnvironment.Create())
+        {
+            string checkCandidatePath = Path.Combine(TestAssetsRootPath, "CheckCandidate");
+            string message = "An extra message for the analyzer";
+            // Can't use Transitive environment due to the need to dogfood local nuget packages.
+            AddCustomDataSourceToNugetConfig(checkCandidatePath);
+            string editorConfigName = Path.Combine(checkCandidatePath, EditorConfigFileName);
+            File.WriteAllText(editorConfigName, ReadEditorConfig(
+                new List<(string, string)>() { ("X01234", "warning") },
+                new List<(string, (string, string))>
+                {
+                    ("X01234",("setMessage", message))
+                },
+                checkCandidatePath));
+
+            string projectCheckBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
+                $"{Path.Combine(checkCandidatePath, $"CheckCandidate.csproj")} /m:1 -nr:False -restore -check -verbosity:n", out bool success, timeoutMilliseconds: 1200_0000);
+            success.ShouldBeTrue();
+
+            projectCheckBuildLog.ShouldContain("warning X01234");
+            projectCheckBuildLog.ShouldContain(message);
+
+            // Cleanup
+            File.Delete(editorConfigName);
+        }
+    }
+
     [Theory]
     [InlineData(true, true)]
     [InlineData(false, true)]
@@ -435,7 +465,7 @@ private void PrepareSampleProjectsAndConfig(
         TransientTestFile projectFile2 = _env.CreateFile(workFolder, "FooBar-Copy.csproj", contents2);
         TransientTestFile importedFile1 = _env.CreateFile(workFolder, "ImportedFile1.props", contentsImported);
 
-        _env.CreateFile(workFolder, ".editorconfig", ReadEditorConfig(ruleToSeverity, ruleToCustomConfig, testAssetsFolderName));
+        var configFile = _env.CreateFile(workFolder, ".editorconfig", ReadEditorConfig(ruleToSeverity, ruleToCustomConfig, testAssetsFolderName));
 
         // OSX links /var into /private, which makes Path.GetTempPath() return "/var..." but Directory.GetCurrentDirectory return "/private/var...".
         // This discrepancy breaks path equality checks in MSBuild checks if we pass to MSBuild full path to the initial project.
diff --git a/src/BuildCheck.UnitTests/TestAssets/CheckCandidate/.editorconfigtest b/src/BuildCheck.UnitTests/TestAssets/CheckCandidate/.editorconfigtest
index be166e833cd..0a06c0d3eb8 100644
--- a/src/BuildCheck.UnitTests/TestAssets/CheckCandidate/.editorconfigtest
+++ b/src/BuildCheck.UnitTests/TestAssets/CheckCandidate/.editorconfigtest
@@ -2,3 +2,4 @@ root = true
 
 [*.csproj]
 build_check.X01234.Severity=X01234Severity
+build_check.X01234.CustomConfig=dummy
diff --git a/src/BuildCheck.UnitTests/TestAssets/CustomCheck/Check1.cs b/src/BuildCheck.UnitTests/TestAssets/CustomCheck/Check1.cs
index 940791d3705..fe77f57f961 100644
--- a/src/BuildCheck.UnitTests/TestAssets/CustomCheck/Check1.cs
+++ b/src/BuildCheck.UnitTests/TestAssets/CustomCheck/Check1.cs
@@ -17,9 +17,17 @@ public sealed class Check1 : Check
 
         public override IReadOnlyList<CheckRule> SupportedRules { get; } = new List<CheckRule>() { SupportedRule };
 
+        private string message = "Argument for the message format";
+
         public override void Initialize(ConfigurationContext configurationContext)
         {
+            var customData = configurationContext.CustomConfigurationData[0].ConfigurationData;
             // configurationContext to be used only if check needs external configuration data.
+            if (customData is not null &&
+                configurationContext.CustomConfigurationData[0].RuleId == "X01234")
+            {
+                message = customData["setmessage"];
+            }
         }
 
         public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)
@@ -32,7 +40,7 @@ private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedProperties
             context.ReportResult(BuildCheckResult.Create(
                 SupportedRule,
                 ElementLocation.EmptyLocation,
-                "Argument for the message format"));
+                message));
         }
     }
 }
