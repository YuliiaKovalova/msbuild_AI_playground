diff --git a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
index 251c6fe20fe..c8fe5cbfd52 100644
--- a/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
+++ b/src/Build.UnitTests/Graph/IsolateProjects_Tests.cs
@@ -5,6 +5,7 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
@@ -131,6 +132,7 @@ public IsolateProjectsTests(ITestOutputHelper testOutput)
         {
             _testOutput = testOutput;
             _env = TestEnvironment.Create(_testOutput);
+            _env.DoNotLaunchDebugger();
 
             if (NativeMethodsShared.IsOSX)
             {
@@ -378,7 +380,7 @@ public void UndeclaredReferenceEnforcementShouldNormalizeFilePaths(Func<string,
         }
 
         [Fact]
-        public void ProjectExemptFromIsolationIsIncludedInTheOutputResultsCacheFile()
+        public void ProjectExemptFromIsolationIsIncludedInTheOutputCacheFile()
         {
             var exemptProjectFile = _env.CreateFile(
                 "ExemptProject.proj",
@@ -405,11 +407,11 @@ public void ProjectExemptFromIsolationIsIncludedInTheOutputResultsCacheFile()
                             <{ItemTypeNames.GraphIsolationExemptReference} Include='{exemptProjectFile}' />
                           </ItemGroup>
 
-                          <Target Name=`Build` DependsOnTargets=`BeforeBuild`>
+                          <Target Name=`Build` DependsOnTargets=`TargetBuildingTheExemptProject`>
                             <MSBuild Projects=`@(ProjectReference)` Targets='Build'/>
                           </Target>
 
-                          <Target Name=`BeforeBuild`>
+                          <Target Name=`TargetBuildingTheExemptProject`>
                             <MSBuild Projects=`{exemptProjectFile}` Targets='BuildExemptProject'/>
                           </Target>"
                     },
@@ -427,11 +429,11 @@ public void ProjectExemptFromIsolationIsIncludedInTheOutputResultsCacheFile()
                             <{ItemTypeNames.GraphIsolationExemptReference} Include='{exemptProjectFile}' />
                           </ItemGroup>
 
-                          <Target Name=`Build` DependsOnTargets=`BeforeBuild`>
+                          <Target Name=`Build` DependsOnTargets=`TargetBuildingTheExemptProject`>
                             <Message Text=`Build` />
                           </Target>
 
-                          <Target Name=`BeforeBuild`>
+                          <Target Name=`TargetBuildingTheExemptProject`>
                             <MSBuild Projects=`{exemptProjectFile}` Targets='BuildExemptProject'/>
                           </Target>"
                     },
@@ -442,11 +444,11 @@ public void ProjectExemptFromIsolationIsIncludedInTheOutputResultsCacheFile()
                             <{ItemTypeNames.GraphIsolationExemptReference} Include='{exemptProjectFile}' />
                           </ItemGroup>
 
-                          <Target Name=`Build` DependsOnTargets=`BeforeBuild`>
+                          <Target Name=`Build`>
                             <Message Text=`Build` />
                           </Target>
 
-                          <Target Name=`BeforeBuild`>
+                          <Target Name=`TargetBuildingTheExemptProject` AfterTargets=`Build`>
                             <MSBuild Projects=`{exemptProjectFile}` Targets='BuildExemptProject'/>
                           </Target>"
                     }
@@ -472,7 +474,9 @@ public void ProjectExemptFromIsolationIsIncludedInTheOutputResultsCacheFile()
 
             var caches = cacheFiles.ToDictionary(kvp => kvp.Key, kvp => CacheSerialization.DeserializeCaches(kvp.Value));
 
-            // 1 does not contain the exempt project because it does not build it, it reads it from the input caches
+            // 1 builds the exempt project but does not contain the exempt project in its output cache because it reads the
+            // exempt project's results from the input caches
+            // 2 does not contain the exempt project in its output cache because it does not build it
             var projectsWhoseOutputCacheShouldContainTheExemptProject = new[] {3, 4};
 
             foreach (var cache in caches)
@@ -482,16 +486,36 @@ public void ProjectExemptFromIsolationIsIncludedInTheOutputResultsCacheFile()
 
                 cache.Value.ConfigCache.ShouldContain(c => ProjectNumber(c.ProjectFullPath) == projectNumber);
 
+                cache.Value.ResultsCache.ShouldContain(r => r.HasResultsForTarget("Build"));
+
+                if (projectNumber != 2)
+                {
+                    cache.Value.ResultsCache.ShouldContain(r => r.HasResultsForTarget("TargetBuildingTheExemptProject"));
+                }
+
                 if (projectsWhoseOutputCacheShouldContainTheExemptProject.Contains(projectNumber))
                 {
-                    cache.Value.ConfigCache.ShouldContain(c => c.ProjectFullPath.Equals(exemptProjectFile));
                     cache.Value.ConfigCache.Count().ShouldBe(2);
 
-                    cache.Value.ResultsCache.ShouldContain(r => r.HasResultsForTarget("BuildExemptProject"));
+                    var exemptConfigs = cache.Value.ConfigCache.Where(c => c.ProjectFullPath.Equals(exemptProjectFile)).ToArray();
+                    exemptConfigs.Length.ShouldBe(1);
+
+                    exemptConfigs.First().SkippedFromStaticGraphIsolationConstraints.ShouldBeTrue();
+
                     cache.Value.ResultsCache.Count().ShouldBe(2);
+
+                    var exemptResults = cache.Value.ResultsCache
+                        .Where(r => r.ConfigurationId == exemptConfigs.First().ConfigurationId).ToArray();
+                    exemptResults.Length.ShouldBe(1);
+
+                    exemptResults.First().ResultsByTarget.TryGetValue("BuildExemptProject", out var targetResult);
+
+                    targetResult.ShouldNotBeNull();
+                    targetResult.ResultCode.ShouldBe(TargetResultCode.Success);
                 }
                 else
                 {
+                    cache.Value.ConfigCache.ShouldNotContain(c => c.SkippedFromStaticGraphIsolationConstraints);
                     cache.Value.ConfigCache.Count().ShouldBe(1);
 
                     cache.Value.ResultsCache.ShouldNotContain(r => r.HasResultsForTarget("BuildExemptProject"));
@@ -500,7 +524,96 @@ public void ProjectExemptFromIsolationIsIncludedInTheOutputResultsCacheFile()
             }
         }
 
+        [Fact]
+        public void ProjectExemptFromIsolationOnlyIncludesNewlyBuiltTargetsInOutputCacheFile()
+        {
+            var graph = CreateProjectGraph(
+                _env,
+                dependencyEdges: new Dictionary<int, int[]>
+                {
+                    {1, new[] {2}},
+                },
+                extraContentPerProjectNumber: new Dictionary<int, string>
+                {
+                    {
+                        1,
+                        $@"
+                          <ItemGroup>
+                            <{ItemTypeNames.GraphIsolationExemptReference} Include='$(MSBuildThisFileDirectory)\2.proj' />
+                          </ItemGroup>
+
+                          <Target Name=`Build`>
+                            <MSBuild Projects=`@(ProjectReference)` Targets='Build2'/>
+                          </Target>
+
+                          <Target Name=`ExtraBuild` AfterTargets=`Build`>
+                            <!-- UncachedTarget won't be in the input results cache from 2 -->
+                            <MSBuild Projects=`@(ProjectReference)` Targets='UncachedTarget'/>
+                          </Target>"
+                    },
+                    {
+                        2,
+                        @"
+                          <Target Name=`Build2`>
+                            <Message Text=`Build2` />
+                          </Target>
+
+                          <Target Name=`UncachedTarget`>
+                            <Message Text=`UncachedTarget` />
+                          </Target>"
+                    }
+                }
+                );
+
+            var cacheFiles = new Dictionary<ProjectGraphNode, string>();
+
+            var buildResults = ResultCacheBasedBuilds_Tests.BuildGraphUsingCacheFiles(
+                _env,
+                graph: graph,
+                expectedLogOutputPerNode: new Dictionary<ProjectGraphNode, string[]>(),
+                outputCaches: cacheFiles,
+                generateCacheFiles: true,
+                assertBuildResults: false);
+
+            foreach (var result in buildResults)
+            {
+                result.Value.Result.OverallResult.ShouldBe(BuildResultCode.Success);
+            }
+
+            cacheFiles.Count.ShouldBe(2);
+
+            var caches = cacheFiles.ToDictionary(kvp => kvp.Key, kvp => CacheSerialization.DeserializeCaches(kvp.Value));
+
+            var cache2 = caches.FirstOrDefault(c => ProjectNumber(c.Key) == 2);
+
+            cache2.Value.ConfigCache.ShouldHaveSingleItem();
+            cache2.Value.ConfigCache.First().ProjectFullPath.ShouldBe(cache2.Key.ProjectInstance.FullPath);
+
+            cache2.Value.ResultsCache.ShouldHaveSingleItem();
+            cache2.Value.ResultsCache.First().ResultsByTarget.Keys.ShouldBeEquivalentTo(new[] { "Build2" });
+
+            var cache1 = caches.FirstOrDefault(c => ProjectNumber(c.Key) == 1);
+
+            cache1.Value.ConfigCache.Count().ShouldBe(2);
+            cache1.Value.ResultsCache.Count().ShouldBe(2);
+
+            foreach (var config in cache1.Value.ConfigCache)
+            {
+                switch (ProjectNumber(config.ProjectFullPath))
+                {
+                    case 1:
+                        cache1.Value.ResultsCache.GetResultsForConfiguration(config.ConfigurationId).ResultsByTarget.Keys.ShouldBeEquivalentTo(new []{ "Build", "ExtraBuild"});
+                        break;
+                    case 2:
+                        cache1.Value.ResultsCache.GetResultsForConfiguration(config.ConfigurationId).ResultsByTarget.Keys.ShouldBeEquivalentTo(new[] { "UncachedTarget"});
+                        break;
+                    default: throw new NotImplementedException();
+                }
+            }
+        }
+
         private static int ProjectNumber(string path) => int.Parse(Path.GetFileNameWithoutExtension(path));
+        private static int ProjectNumber(ProjectGraphNode node) => int.Parse(Path.GetFileNameWithoutExtension(node.ProjectInstance.FullPath));
 
         private void AssertBuild(
             string[] targets,
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 10dbc54a7ae..e27729e3fb6 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2493,8 +2493,10 @@ private bool ReuseOldCaches(string[] inputCacheFiles)
                 // should contain only the results from new builds, and should not contain old results inherited from the cache files.
                 // The override cache will contain the old build results, and the current cache will contain new results.
                 // Upon reads, both caches are interrogated (override before current), but writes should only happen in the current cache.
-                _componentFactories.ReplaceFactory(BuildComponentType.ConfigCache, new ConfigCacheWithOverride(cacheAggregation.ConfigCache, _buildParameters.IsolateProjects));
-                _componentFactories.ReplaceFactory(BuildComponentType.ResultsCache, new ResultsCacheWithOverride(cacheAggregation.ResultsCache, _buildParameters.IsolateProjects));
+                var configCacheWithOverride = new ConfigCacheWithOverride(cacheAggregation.ConfigCache, _buildParameters.IsolateProjects);
+                _componentFactories.ReplaceFactory(BuildComponentType.ConfigCache, configCacheWithOverride);
+                _componentFactories.ReplaceFactory(BuildComponentType.ResultsCache,
+                    new ResultsCacheWithOverride(cacheAggregation.ResultsCache, _buildParameters.IsolateProjects, configCacheWithOverride));
 
                 return true;
             }
diff --git a/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs b/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs
index f94a757a1c6..288c34cc030 100644
--- a/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs
+++ b/src/Build/BackEnd/Components/Caching/ConfigCacheWithOverride.cs
@@ -1,6 +1,7 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using System;
 using System.Collections;
 using System.Collections.Generic;
 using Microsoft.Build.BackEnd;
@@ -169,11 +170,23 @@ public bool WriteConfigurationsToDisk()
             return CurrentCache.WriteConfigurationsToDisk();
         }
 
-        private void AssertCurrentCacheDoesNotContainConfig(BuildRequestConfiguration config)
+        private void AssertCurrentCacheDoesNotContainConfig(BuildRequestConfiguration overrideConfig)
         {
-            if (_isolateProjects)
+            ErrorUtilities.VerifyThrow(!CurrentCache.HasConfiguration(overrideConfig.ConfigurationId), "caches should not overlap");
+        }
+
+        public void BuildResultAddedForConfiguration(int configId)
+        {
+            // If a build result is added for a configuration, that configuration must exist in the CurrentCache.
+            // If the configuration is in the override cache, then it must be moved into the CurrentCache.
+            // This is because if the caches are serialized to files, both the config and the build result serialized caches must have a 1-1 mapping
+            // between themselves.
+            if (_override.TryGetConfiguration(configId, out var overrideConfig))
             {
-                ErrorUtilities.VerifyThrow(!CurrentCache.HasConfiguration(config.ConfigurationId), "caches should not overlap");
+                AssertCurrentCacheDoesNotContainConfig(overrideConfig);
+
+                _override.RemoveConfiguration(configId);
+                CurrentCache.AddConfiguration(overrideConfig);
             }
         }
     }
diff --git a/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs b/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs
index bc08a0b483e..64ff05ada47 100644
--- a/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs
+++ b/src/Build/BackEnd/Components/Caching/ResultsCacheWithOverride.cs
@@ -1,7 +1,6 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
 using System.Collections;
 using System.Collections.Generic;
 using Microsoft.Build.BackEnd;
@@ -16,13 +15,17 @@ internal class ResultsCacheWithOverride : IResultsCache
     {
         private readonly IResultsCache _override;
         private readonly bool _isolateProjects;
+        private readonly ConfigCacheWithOverride _configCacheWithOverride;
         public ResultsCache CurrentCache { get; }
 
 
-        public ResultsCacheWithOverride(IResultsCache @override, bool isolateProjects)
+        public ResultsCacheWithOverride(IResultsCache @override, bool isolateProjects,
+            ConfigCacheWithOverride configCacheWithOverride)
         {
             _override = @override;
             _isolateProjects = isolateProjects;
+            _configCacheWithOverride = configCacheWithOverride;
+
             CurrentCache = new ResultsCache();
         }
 
@@ -44,6 +47,8 @@ public void Translate(ITranslator translator)
         public void AddResult(BuildResult result)
         {
             CurrentCache.AddResult(result);
+
+            _configCacheWithOverride.BuildResultAddedForConfiguration(result.ConfigurationId);
         }
 
         public void ClearResults()
@@ -57,8 +62,6 @@ public BuildResult GetResultForRequest(BuildRequest request)
 
             if (overrideResult != null)
             {
-                AssertCachesDoNotOverlap(() => CurrentCache.GetResultForRequest(request) == null);
-
                 return overrideResult;
             }
 
@@ -70,8 +73,6 @@ public BuildResult GetResultsForConfiguration(int configurationId)
             var overrideResult = _override.GetResultsForConfiguration(configurationId);
             if (overrideResult != null)
             {
-                AssertCachesDoNotOverlap(() => CurrentCache.GetResultsForConfiguration(configurationId) == null);
-
                 return overrideResult;
             }
 
@@ -92,12 +93,7 @@ public ResultsCacheResponse SatisfyRequest(
 
             if (overrideRequest.Type == ResultsCacheResponseType.Satisfied)
             {
-                AssertCachesDoNotOverlap(() => CurrentCache.SatisfyRequest(
-                        request,
-                        configInitialTargets,
-                        configDefaultTargets,
-                        skippedResultsDoNotCauseCacheMiss)
-                    .Type == ResultsCacheResponseType.NotSatisfied);
+                AssertOverrideResultIsSupersetOfCurrentResult(_override.GetResultsForConfiguration(request.ConfigurationId), additionalTargetsToCheckForOverallResult);
 
                 return overrideRequest;
             }
@@ -131,11 +127,18 @@ IEnumerator IEnumerable.GetEnumerator()
             return GetEnumerator();
         }
 
-        private void AssertCachesDoNotOverlap(Func<bool> condition)
+        private void AssertOverrideResultIsSupersetOfCurrentResult(BuildResult overrideResult, List<string> additionalTargetsToCheckForOverallResult)
         {
-            if (_isolateProjects)
+            // There could be an exempt project being built for which there is already an entry in the override cache (if the exempt project is also present
+            // in an input cache, for example if a project both exempts a reference, and also has a ProjectReference on it).
+            // In this situation, the exempt project may be built with additional targets for which there are no results in the override cache.
+            // This will cause the newly built targets to be saved both in the override cache, and also in the current cache.
+            // For this particular case, skip the check that a BuildResult for a particular configuration id should be in only one of the caches, not both.
+            var skipCheck = _isolateProjects && _configCacheWithOverride[overrideResult.ConfigurationId].SkippedFromStaticGraphIsolationConstraints;
+
+            if (!skipCheck)
             {
-                ErrorUtilities.VerifyThrow(condition(), "caches should not overlap");
+                ErrorUtilities.VerifyThrow(CurrentCache.GetResultsForConfiguration(overrideResult.ConfigurationId) == null, "caches should not overlap");
             }
         }
     }
