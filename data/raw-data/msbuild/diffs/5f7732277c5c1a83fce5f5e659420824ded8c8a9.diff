diff --git a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
index e5751dbd25a..2e989f6bc9c 100644
--- a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
+++ b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
@@ -45,31 +45,34 @@ public void TestPrecomputedCacheOutput()
         }
 
         [Fact]
-        public void TestPreComputedCacheInputAndOutput()
+        public void StandardCacheTakesPrecedence()
         {
-            using (TestEnvironment env = TestEnvironment.Create()) {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
                 TransientTestFile standardCache = env.CreateFile(".cache");
                 ResolveAssemblyReference rarWriterTask = new ResolveAssemblyReference()
                 {
                     _cache = new SystemState()
                 };
-                rarWriterTask._cache.instanceLocalFileStateCache = new Dictionary<string, SystemState.FileState>() {
-                    { Path.Combine(standardCache.Path, "assembly1"), new SystemState.FileState(DateTime.Now) },
-                    { Path.Combine(standardCache.Path, "assembly2"), new SystemState.FileState(DateTime.Now) { Assembly = new Shared.AssemblyNameExtension("hi") } } };
+                rarWriterTask._cache.instanceLocalFileStateCache = new Dictionary<string, SystemState.FileState>();
                 rarWriterTask.StateFile = standardCache.Path;
                 rarWriterTask._cache.IsDirty = true;
+                // Write standard cache
                 rarWriterTask.WriteStateFile();
 
                 string dllName = Path.Combine(Path.GetDirectoryName(standardCache.Path), "randomFolder", "dll.dll");
                 rarWriterTask._cache.instanceLocalFileStateCache.Add(dllName,
-                    new SystemState.FileState(DateTime.Now) {
+                    new SystemState.FileState(DateTime.Now)
+                    {
                         Assembly = null,
                         RuntimeVersion = "v4.0.30319",
                         FrameworkNameAttribute = new System.Runtime.Versioning.FrameworkName(".NETFramework", Version.Parse("4.7.2"), "Profile"),
-                        scatterFiles = new string[] { "first", "second" } });
+                        scatterFiles = new string[] { "first", "second" }
+                    });
                 string precomputedCachePath = standardCache.Path + ".cache";
                 rarWriterTask.AssemblyInformationCacheOutputPath = precomputedCachePath;
                 rarWriterTask._cache.IsDirty = true;
+                // Write precomputed cache
                 rarWriterTask.WriteStateFile();
 
                 ResolveAssemblyReference rarReaderTask = new ResolveAssemblyReference();
@@ -80,16 +83,46 @@ public void TestPreComputedCacheInputAndOutput()
                 };
 
                 // At this point, we should have created two cache files: one "normal" one and one "precomputed" one.
-                // When we read the state file the first time, it should read from the caches produced in a normal
-                // build, partially because we can read it faster. If that cache does not exist, as with the second
-                // time we try to read the state file, it defaults to reading the "precomputed" cache. In this case,
+                // When we read the state file, it should read from the caches produced in a normal build. In this case,
                 // the normal cache does not have dll.dll, whereas the precomputed cache does, so it should not be
-                // present when we read the first time but should be present the second time. Then we verify that the
-                // information contained in that cache matches what we'd expect.
+                // present when we read it.
                 rarReaderTask.ReadStateFile(File.GetLastWriteTime, Array.Empty<AssemblyTableInfo>(), p => true);
                 rarReaderTask._cache.instanceLocalFileStateCache.ShouldNotContainKey(dllName);
-                File.Delete(standardCache.Path);
-                rarReaderTask._cache = null;
+            }
+        }
+
+        [Fact]
+        public void TestPreComputedCacheInputMatchesOutput()
+        {
+            using (TestEnvironment env = TestEnvironment.Create()) {
+                TransientTestFile precomputedCache = env.CreateFile(".cache");
+                ResolveAssemblyReference rarWriterTask = new ResolveAssemblyReference()
+                {
+                    _cache = new SystemState()
+                };
+                string dllName = Path.Combine(Path.GetDirectoryName(precomputedCache.Path), "randomFolder", "dll.dll");
+                rarWriterTask._cache.instanceLocalFileStateCache = new Dictionary<string, SystemState.FileState>() {
+                    { Path.Combine(precomputedCache.Path, "..", "assembly1", "assembly1"), new SystemState.FileState(DateTime.Now) },
+                    { Path.Combine(precomputedCache.Path, "assembly2"), new SystemState.FileState(DateTime.Now) { Assembly = new Shared.AssemblyNameExtension("hi") } },
+                    { dllName, new SystemState.FileState(DateTime.Now) {
+                        Assembly = null,
+                        RuntimeVersion = "v4.0.30319",
+                        FrameworkNameAttribute = new System.Runtime.Versioning.FrameworkName(".NETFramework", Version.Parse("4.7.2"), "Profile"),
+                        scatterFiles = new string[] { "first", "second" } } } };
+
+                rarWriterTask.AssemblyInformationCacheOutputPath = precomputedCache.Path;
+                rarWriterTask._cache.IsDirty = true;
+                rarWriterTask.WriteStateFile();
+
+                ResolveAssemblyReference rarReaderTask = new ResolveAssemblyReference();
+                rarReaderTask.StateFile = precomputedCache.Path.Substring(0, precomputedCache.Path.Length - 6); // Not a real path; should not be used.
+                rarReaderTask.AssemblyInformationCachePaths = new ITaskItem[]
+                {
+                    new TaskItem(precomputedCache.Path)
+                };
+
+                // At this point, the standard cache does not exist, so it defaults to reading the "precomputed" cache.
+                // Then we verify that the information contained in that cache matches what we'd expect.
                 rarReaderTask.ReadStateFile(File.GetLastWriteTime, Array.Empty<AssemblyTableInfo>(), p => true);
                 rarReaderTask._cache.instanceLocalFileStateCache.ShouldContainKey(dllName);
                 SystemState.FileState assembly3 = rarReaderTask._cache.instanceLocalFileStateCache[dllName];
