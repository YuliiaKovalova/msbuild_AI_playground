diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index 0bfbbae55ff..9fe1638fd3a 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -35,6 +35,5 @@ internal enum BinaryLogRecordKind
         TaskParameter,
         ResponseFileUsed,
         AssemblyLoad,
-        ExtendedMessage,
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 3ec00ed38b4..6c4e32345fb 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -62,9 +62,7 @@ public sealed class BinaryLogger : ILogger
         // version 16:
         //   - AssemblyLoadBuildEventArgs
         // version 17:
-        //   - new record kind: ExtendedMessage
-        //   - Error: added extended data
-        //   - Warning: added extended data
+        //   - Added extended data for types implementing IExtendedBuildEventArgs
         internal const int FileFormatVersion = 17;
 
         private Stream stream;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsFieldFlags.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsFieldFlags.cs
index 65468da0972..0f579c2a549 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsFieldFlags.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsFieldFlags.cs
@@ -29,6 +29,7 @@ internal enum BuildEventArgsFieldFlags
         EndLineNumber = 1 << 12,
         EndColumnNumber = 1 << 13,
         Arguments = 1 << 14,
-        Importance = 1 << 15
+        Importance = 1 << 15,
+        Extended = 1 << 16,
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsFields.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsFields.cs
index f5aba4eb60c..fcc7c4433ff 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsFields.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsFields.cs
@@ -32,5 +32,6 @@ internal class BuildEventArgsFields
         public int ColumnNumber { get; set; }
         public int EndLineNumber { get; set; }
         public int EndColumnNumber { get; set; }
+        public ExtendedDataFields Extended { get; set; }
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 307b106176f..2dcee0e9b6c 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -159,9 +159,6 @@ public void Dispose()
                 case BinaryLogRecordKind.Message:
                     result = ReadBuildMessageEventArgs();
                     break;
-                case BinaryLogRecordKind.ExtendedMessage:
-                    result = ReadExtendedBuildMessageEventArgs();
-                    break;
                 case BinaryLogRecordKind.CriticalBuildMessage:
                     result = ReadCriticalBuildMessageEventArgs();
                     break;
@@ -606,10 +603,9 @@ private BuildEventArgs ReadBuildErrorEventArgs()
         {
             var fields = ReadBuildEventArgsFields();
             ReadDiagnosticFields(fields);
-            var extended = ReadExtendedDataFields();
 
             BuildEventArgs e;
-            if (extended == null)
+            if (fields.Extended == null)
             {
                 e = new BuildErrorEventArgs(
                     fields.Subcategory,
@@ -631,7 +627,7 @@ private BuildEventArgs ReadBuildErrorEventArgs()
             else
             {
                 e = new ExtendedBuildErrorEventArgs(
-                    extended.ExtendedType,
+                    fields.Extended.ExtendedType,
                     fields.Subcategory,
                     fields.Code,
                     fields.File,
@@ -646,8 +642,8 @@ private BuildEventArgs ReadBuildErrorEventArgs()
                     fields.Arguments)
                 {
                     ProjectFile = fields.ProjectFile,
-                    ExtendedMetadata = extended.ExtendedMetadata,
-                    ExtendedData = extended.ExtendedData,
+                    ExtendedMetadata = fields.Extended.ExtendedMetadata,
+                    ExtendedData = fields.Extended.ExtendedData,
                 };
             }
             e.BuildEventContext = fields.BuildEventContext;
@@ -659,10 +655,9 @@ private BuildEventArgs ReadBuildWarningEventArgs()
         {
             var fields = ReadBuildEventArgsFields();
             ReadDiagnosticFields(fields);
-            var extended = ReadExtendedDataFields();
 
             BuildEventArgs e;
-            if (extended == null)
+            if (fields.Extended == null)
             {
                 e = new BuildWarningEventArgs(
                     fields.Subcategory,
@@ -684,7 +679,7 @@ private BuildEventArgs ReadBuildWarningEventArgs()
             else
             {
                 e = new ExtendedBuildWarningEventArgs(
-                    extended.ExtendedType,
+                    fields.Extended.ExtendedType,
                     fields.Subcategory,
                     fields.Code,
                     fields.File,
@@ -699,8 +694,8 @@ private BuildEventArgs ReadBuildWarningEventArgs()
                     fields.Arguments)
                 {
                     ProjectFile = fields.ProjectFile,
-                    ExtendedMetadata = extended.ExtendedMetadata,
-                    ExtendedData = extended.ExtendedData,
+                    ExtendedMetadata = fields.Extended.ExtendedMetadata,
+                    ExtendedData = fields.Extended.ExtendedData,
                 };
             }
             e.BuildEventContext = fields.BuildEventContext;
@@ -712,7 +707,10 @@ private BuildEventArgs ReadBuildMessageEventArgs()
         {
             var fields = ReadBuildEventArgsFields(readImportance: true);
 
-            BuildEventArgs e = new BuildMessageEventArgs(
+            BuildEventArgs e;
+            if (fields.Extended == null)
+            {
+                e = new BuildMessageEventArgs(
                     fields.Subcategory,
                     fields.Code,
                     fields.File,
@@ -727,20 +725,13 @@ private BuildEventArgs ReadBuildMessageEventArgs()
                     fields.Timestamp,
                     fields.Arguments)
                 {
-                    BuildEventContext = fields.BuildEventContext,
                     ProjectFile = fields.ProjectFile,
                 };
-
-            return e;
-        }
-
-        private BuildEventArgs ReadExtendedBuildMessageEventArgs()
-        {
-            var fields = ReadBuildEventArgsFields(readImportance: true);
-            var extended = ReadExtendedDataFields();
-
-            var e = new ExtendedBuildMessageEventArgs(
-                    extended?.ExtendedType ?? string.Empty,
+            }
+            else
+            {
+                e = new ExtendedBuildMessageEventArgs(
+                    fields.Extended?.ExtendedType ?? string.Empty,
                     fields.Subcategory,
                     fields.Code,
                     fields.File,
@@ -755,11 +746,13 @@ private BuildEventArgs ReadExtendedBuildMessageEventArgs()
                     fields.Timestamp,
                     fields.Arguments)
                 {
-                    BuildEventContext = fields.BuildEventContext,
                     ProjectFile = fields.ProjectFile,
-                    ExtendedMetadata = extended?.ExtendedMetadata,
-                    ExtendedData = extended?.ExtendedData,
+                    ExtendedMetadata = fields.Extended?.ExtendedMetadata,
+                    ExtendedData = fields.Extended?.ExtendedData,
                 };
+            }
+
+            e.BuildEventContext = fields.BuildEventContext;
 
             return e;
         }
@@ -954,17 +947,12 @@ private void ReadDiagnosticFields(BuildEventArgsFields fields)
         private ExtendedDataFields? ReadExtendedDataFields()
         {
             ExtendedDataFields? fields = null;
-            if (fileFormatVersion >= 17)
-            {
-                bool containsExtendedData = ReadBoolean();
-                if (containsExtendedData)
-                {
-                    fields = new ExtendedDataFields();
-                    fields.ExtendedType = ReadOptionalString();
-                    fields.ExtendedMetadata = ReadStringDictionary();
-                    fields.ExtendedData = ReadOptionalString();
-                }
-            }
+
+            fields = new ExtendedDataFields();
+
+            fields.ExtendedType = ReadOptionalString();
+            fields.ExtendedMetadata = ReadStringDictionary();
+            fields.ExtendedData = ReadOptionalString();
 
             return fields;
         }
@@ -975,6 +963,8 @@ private BuildEventArgsFields ReadBuildEventArgsFields(bool readImportance = fals
             var result = new BuildEventArgsFields();
             result.Flags = flags;
 
+            // Base Fields
+
             if ((flags & BuildEventArgsFieldFlags.Message) != 0)
             {
                 result.Message = ReadDeduplicatedString();
@@ -1005,6 +995,13 @@ private BuildEventArgsFields ReadBuildEventArgsFields(bool readImportance = fals
                 result.Timestamp = ReadDateTime();
             }
 
+            if ((flags & BuildEventArgsFieldFlags.Extended) != 0)
+            {
+                result.Extended = ReadExtendedDataFields();
+            }
+
+            // End of BaseFields
+
             if ((flags & BuildEventArgsFieldFlags.Subcategory) != 0)
             {
                 result.Subcategory = ReadDeduplicatedString();
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 068611f20ae..76c805f4bae 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -445,7 +445,6 @@ private void Write(BuildErrorEventArgs e)
             Write(e.ColumnNumber);
             Write(e.EndLineNumber);
             Write(e.EndColumnNumber);
-            Write(e as IExtendedBuildEventArgs);
         }
 
         private void Write(BuildWarningEventArgs e)
@@ -461,7 +460,6 @@ private void Write(BuildWarningEventArgs e)
             Write(e.ColumnNumber);
             Write(e.EndLineNumber);
             Write(e.EndColumnNumber);
-            Write(e as IExtendedBuildEventArgs);
         }
 
         private void Write(BuildMessageEventArgs e)
@@ -479,7 +477,6 @@ private void Write(BuildMessageEventArgs e)
                 case PropertyInitialValueSetEventArgs propertyInitialValueSet: Write(propertyInitialValueSet); break;
                 case CriticalBuildMessageEventArgs criticalBuildMessage: Write(criticalBuildMessage); break;
                 case AssemblyLoadBuildEventArgs assemblyLoad: Write(assemblyLoad); break;
-                case ExtendedBuildMessageEventArgs extendedMessage: Write(extendedMessage); break;
                 default: // actual BuildMessageEventArgs
                     Write(BinaryLogRecordKind.Message);
                     WriteMessageFields(e, writeImportance: true);
@@ -487,12 +484,6 @@ private void Write(BuildMessageEventArgs e)
             }
         }
 
-        private void Write(ExtendedBuildMessageEventArgs extendedMessage)
-        {
-            Write(BinaryLogRecordKind.ExtendedMessage);
-            WriteMessageFields(extendedMessage, writeImportance: true);
-            Write((IExtendedBuildEventArgs)extendedMessage);
-        }
 
         private void Write(ProjectImportedEventArgs e)
         {
@@ -639,6 +630,11 @@ private void WriteBaseFields(BuildEventArgs e, BuildEventArgsFieldFlags flags)
             {
                 Write(e.Timestamp);
             }
+
+            if ((flags & BuildEventArgsFieldFlags.Extended) != 0)
+            {
+                Write(e as IExtendedBuildEventArgs);
+            }
         }
 
         private void WriteMessageFields(BuildMessageEventArgs e, bool writeMessage = true, bool writeImportance = false)
@@ -701,7 +697,7 @@ private void WriteMessageFields(BuildMessageEventArgs e, bool writeMessage = tru
             }
         }
 
-        private void WriteArguments(object[] arguments)
+            private void WriteArguments(object[] arguments)
         {
             if (arguments == null || arguments.Length == 0)
             {
@@ -804,6 +800,11 @@ private static BuildEventArgsFieldFlags GetBuildEventArgsFieldFlags(BuildEventAr
                 flags |= BuildEventArgsFieldFlags.Timestamp;
             }
 
+            if (e is IExtendedBuildEventArgs extendedData)
+            {
+                flags |= BuildEventArgsFieldFlags.Extended;
+            }
+
             return flags;
         }
 
@@ -1249,13 +1250,8 @@ private void Write(ProfiledLocation e)
 
         private void Write(IExtendedBuildEventArgs extendedData)
         {
-            if (extendedData?.ExtendedType == null)
-            {
-                Write(false);
-            }
-            else
+            if (extendedData?.ExtendedType != null)
             {
-                Write(true); // Contains ExtendedData
                 WriteDeduplicatedString(extendedData.ExtendedType);
                 Write(extendedData.ExtendedMetadata);
                 WriteDeduplicatedString(extendedData.ExtendedData);
