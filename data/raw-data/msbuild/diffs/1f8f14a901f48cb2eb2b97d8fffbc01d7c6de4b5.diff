diff --git a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
index 833150a1056..0d2e6824fa9 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.Construction;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
+
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
@@ -38,10 +40,11 @@ public void BasicParseFirstProjectLine()
             SolutionFile p = new SolutionFile();
             p.FullPath = NativeMethodsShared.IsWindows ? "c:\\foo.sln" : "/foo.sln";
             ProjectInSolution proj = new ProjectInSolution(p);
+            StringPool pool = new();
 
             p.ParseFirstProjectLine(
                 "Project(\"{Project GUID}\") = \"Project name\", \"Relative path to project file\", \"Unique name-GUID\"".AsSpan(),
-                proj);
+                proj, pool);
             proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
             proj.ProjectName.ShouldBe("Project name");
             proj.RelativePath.ShouldBe("Relative path to project file");
@@ -62,10 +65,11 @@ public void ParseFirstProjectLine_VC()
                 SolutionFile p = new SolutionFile();
                 p.FullPath = "c:\\foo.sln";
                 ProjectInSolution proj = new ProjectInSolution(p);
+                StringPool pool = new();
 
                 p.ParseFirstProjectLine(
                     "Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"Project name.vcproj\", \"Relative path\\to\\Project name.vcproj\", \"Unique name-GUID\"".AsSpan(),
-                    proj);
+                    proj, pool);
             });
         }
 
@@ -80,10 +84,11 @@ public void ParseFirstProjectLine_VC2()
             SolutionFile p = new SolutionFile();
             p.FullPath = NativeMethodsShared.IsWindows ? "c:\\foo.sln" : "/foo.sln";
             ProjectInSolution proj = new ProjectInSolution(p);
+            StringPool pool = new();
 
             p.ParseFirstProjectLine(
                 "Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"Project name.myvctype\", \"Relative path\\to\\Project name.myvctype\", \"Unique name-GUID\"".AsSpan(),
-                proj);
+                proj, pool);
             proj.ProjectType.ShouldBe(SolutionProjectType.KnownToBeMSBuildFormat);
             proj.ProjectName.ShouldBe("Project name.myvctype");
             proj.RelativePath.ShouldBe("Relative path\\to\\Project name.myvctype");
@@ -99,10 +104,11 @@ public void ParseFirstProjectLineWithDifferentSpacing()
             SolutionFile p = new SolutionFile();
             p.FullPath = NativeMethodsShared.IsWindows ? "c:\\foo.sln" : "/foo.sln";
             ProjectInSolution proj = new ProjectInSolution(p);
+            StringPool pool = new();
 
             p.ParseFirstProjectLine(
                 "Project(\" {Project GUID} \")  = \" Project name \",  \" Relative path to project file \"    , \" Unique name-GUID \"".AsSpan(),
-                proj);
+                proj, pool);
             proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
             proj.ProjectName.ShouldBe("Project name");
             proj.RelativePath.ShouldBe("Relative path to project file");
@@ -119,10 +125,11 @@ public void ParseFirstProjectLine_InvalidProject()
             SolutionFile p = new SolutionFile();
             p.FullPath = NativeMethodsShared.IsWindows ? "c:\\foo.sln" : "/foo.sln";
             ProjectInSolution proj = new ProjectInSolution(p);
+            StringPool pool = new();
 
             p.ParseFirstProjectLine(
                 "Project(\"{Project GUID}\") = \"\", \"src\\.proj\", \"Unique name-GUID\"".AsSpan(),
-                proj);
+                proj, pool);
             proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
             proj.ProjectName.ShouldStartWith("EmptyProjectName");
             proj.RelativePath.ShouldBe("src\\.proj");
@@ -681,10 +688,11 @@ public void ParseFirstProjectLineWhereProjectNameHasSpecialCharacters()
             SolutionFile p = new SolutionFile();
             p.FullPath = NativeMethodsShared.IsWindows ? "c:\\foo.sln" : "/foo.sln";
             ProjectInSolution proj = new ProjectInSolution(p);
+            StringPool pool = new();
 
             p.ParseFirstProjectLine(
                 "Project(\"{Project GUID}\")  = \"MyProject,(=IsGreat)\",  \"Relative path to project file\"    , \"Unique name-GUID\"".AsSpan(),
-                proj);
+                proj, pool);
             proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
             proj.ProjectName.ShouldBe("MyProject,(=IsGreat)");
             proj.RelativePath.ShouldBe("Relative path to project file");
@@ -707,10 +715,11 @@ public void ParseFirstProjectLineWhereProjectPathHasBackslash()
                 p.FullPath = Path.Combine(solutionFolder.Path, "RelativePath", "project file");
                 p.SolutionFileDirectory = Path.GetFullPath(solutionFolder.Path);
                 ProjectInSolution proj = new ProjectInSolution(p);
+                StringPool pool = new();
 
                 p.ParseFirstProjectLine(
                     "Project(\"{Project GUID}\")  = \"ProjectInSubdirectory\",  \"RelativePath\\project file\"    , \"Unique name-GUID\"".AsSpan(),
-                    proj);
+                    proj, pool);
                 proj.ProjectType.ShouldBe(SolutionProjectType.Unknown);
                 proj.ProjectName.ShouldBe("ProjectInSubdirectory");
                 proj.RelativePath.ShouldBe(Path.Combine("RelativePath", "project file"));
@@ -2439,16 +2448,18 @@ public void TryParseNameValue(string input, bool allowEmpty, bool allowEqualsInV
         [InlineData("A|B|C", false, null, null)]
         public void ParseConfigurationName(string input, bool expectedSuccess, string expectedConfiguration, string expectedPlatform)
         {
+            StringPool pool = new();
+
             if (expectedSuccess)
             {
-                (string actualConfiguration, string actualPlatform) = SolutionFile.ParseConfigurationName(input.AsSpan(), "path", 0, "containing string".AsSpan());
+                (string actualConfiguration, string actualPlatform) = SolutionFile.ParseConfigurationName(input.AsSpan(), "path", 0, "containing string".AsSpan(), pool);
 
                 Assert.Equal(expectedConfiguration, actualConfiguration);
                 Assert.Equal(expectedPlatform, actualPlatform);
             }
             else
             {
-                Assert.ThrowsAny<Exception>(() => SolutionFile.ParseConfigurationName(input.AsSpan(), "path", 0, "containing string".AsSpan()));
+                Assert.ThrowsAny<Exception>(() => SolutionFile.ParseConfigurationName(input.AsSpan(), "path", 0, "containing string".AsSpan(), pool));
             }
         }
 
@@ -2711,7 +2722,9 @@ public void TryParseFirstProjectLine(string description, string line, bool expec
         {
             _ = description;
 
-            bool actualSuccess = SolutionFile.TryParseFirstProjectLine(line.AsSpan(), out string actualProjectTypeGuid, out string actualProjectName, out string actualRelativePath, out string actualProjectGuid);
+            StringPool pool = new();
+
+            bool actualSuccess = SolutionFile.TryParseFirstProjectLine(line.AsSpan(), pool, out string actualProjectTypeGuid, out string actualProjectName, out string actualRelativePath, out string actualProjectGuid);
 
             if (expectedSuccess)
             {
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index bfb0f9d0809..d3d9ad53f76 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -21,6 +21,7 @@
 using Microsoft.Build.Graph;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.Experimental.ProjectCache
 {
@@ -549,6 +550,8 @@ static IReadOnlyCollection<ProjectGraphEntryPoint> GenerateGraphEntryPointsFromS
                     return Array.Empty<ProjectGraphEntryPoint>();
                 }
 
+                StringPool pool = new();
+
                 var graphEntryPoints = new List<ProjectGraphEntryPoint>(projectConfigurations.Count);
 
                 foreach (XmlElement projectConfiguration in projectConfigurations)
@@ -569,7 +572,7 @@ static IReadOnlyCollection<ProjectGraphEntryPoint> GenerateGraphEntryPointsFromS
 
                     string projectPath = projectPathAttribute!.Value;
 
-                    (string configuration, string platform) = SolutionFile.ParseConfigurationName(projectConfiguration.InnerText.AsSpan(), definingProjectPath, 0, solutionConfigurationXml.AsSpan());
+                    (string configuration, string platform) = SolutionFile.ParseConfigurationName(projectConfiguration.InnerText.AsSpan(), definingProjectPath, 0, solutionConfigurationXml.AsSpan(), pool);
 
                     // Take the defining project global properties and override the configuration and platform.
                     // It's sufficient to only set Configuration and Platform.
diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index db3cd7dd4d4..806272fef8d 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -490,6 +490,9 @@ internal void ParseSolution()
             _defaultConfigurationName = null;
             _defaultPlatformName = null;
 
+            // Pool strings as we parse them, de-duplicating them in memory.
+            StringPool pool = new();
+
             // the raw list of project configurations in solution configurations, to be processed after it's fully read in.
             Dictionary<ProjectConfigurationKey, string>? rawProjectConfigurationsEntries = null;
 
@@ -499,19 +502,19 @@ internal void ParseSolution()
             {
                 if (line.StartsWith("Project(".AsSpan(), StringComparison.Ordinal))
                 {
-                    ParseProject(line);
+                    ParseProject(line, pool);
                 }
                 else if (line.StartsWith("GlobalSection(NestedProjects)".AsSpan(), StringComparison.Ordinal))
                 {
-                    ParseNestedProjects();
+                    ParseNestedProjects(pool);
                 }
                 else if (line.StartsWith("GlobalSection(SolutionConfigurationPlatforms)".AsSpan(), StringComparison.Ordinal))
                 {
-                    ParseSolutionConfigurations();
+                    ParseSolutionConfigurations(pool);
                 }
                 else if (line.StartsWith("GlobalSection(ProjectConfigurationPlatforms)".AsSpan(), StringComparison.Ordinal))
                 {
-                    rawProjectConfigurationsEntries = ParseProjectConfigurations();
+                    rawProjectConfigurationsEntries = ParseProjectConfigurations(pool);
                 }
                 else if (line.StartsWith("VisualStudioVersion".AsSpan(), StringComparison.Ordinal))
                 {
@@ -548,7 +551,7 @@ internal void ParseSolution()
 
             if (rawProjectConfigurationsEntries != null)
             {
-                ProcessProjectConfigurationSection(rawProjectConfigurationsEntries);
+                ProcessProjectConfigurationSection(rawProjectConfigurationsEntries, pool);
             }
 
             // Cache the unique name of each project, and check that we don't have any duplicates.
@@ -754,7 +757,7 @@ private void ValidateSolutionFileVersion(ReadOnlySpan<char> versionString)
         ///  EndProject
         /// </code>
         /// </summary>
-        private void ParseProject(ReadOnlySpan<char> firstLine)
+        private void ParseProject(ReadOnlySpan<char> firstLine, StringPool pool)
         {
             ErrorUtilities.VerifyThrow(!firstLine.IsEmpty, "ParseProject() got an empty firstLine!");
             ErrorUtilities.VerifyThrow(SolutionReader != null, "ParseProject() got a null reader!");
@@ -762,7 +765,7 @@ private void ParseProject(ReadOnlySpan<char> firstLine)
             ProjectInSolution proj = new(this);
 
             // Extract the important information from the first line.
-            ParseFirstProjectLine(firstLine, proj);
+            ParseFirstProjectLine(firstLine, proj, pool);
 
             // Search for project dependencies. Keeping reading lines until we either:
             // 1. reach the end of the file,
@@ -793,7 +796,7 @@ private void ParseProject(ReadOnlySpan<char> firstLine)
                                 proj.ProjectName);
                         }
 
-                        proj.AddDependency(referencedProjectGuid: propertyName.ToString());
+                        proj.AddDependency(referencedProjectGuid: pool.Intern(propertyName));
 
                         line = ReadRequiredLine();
                     }
@@ -829,7 +832,7 @@ private void ParseProject(ReadOnlySpan<char> firstLine)
                     SolutionParserWarnings.Add(warning);
 
                     // The line with new project is already read and we can't go one line back - we have no choice but to recursively parse spotted project.
-                    ParseProject(firstLine: line);
+                    ParseProject(firstLine: line, pool);
 
                     // We're not waiting for the EndProject for malformed project, so we carry on.
                     break;
@@ -1244,6 +1247,7 @@ static string TrimQuotes(string property)
 
         internal static bool TryParseFirstProjectLine(
             ReadOnlySpan<char> line,
+            StringPool pool,
             [NotNullWhen(returnValue: true)] out string? projectTypeGuid,
             [NotNullWhen(returnValue: true)] out string? projectName,
             [NotNullWhen(returnValue: true)] out string? relativePath,
@@ -1252,16 +1256,14 @@ internal static bool TryParseFirstProjectLine(
             //// Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Microsoft.Build", "src\Build\Microsoft.Build.csproj", "{69BE05E2-CBDA-4D27-9733-44E12B0F5627}"
 
             if (!TrySkip(ref line, "Project(") ||
-                // TODO use pool here
-                !TryReadQuotedString(ref line, out projectTypeGuid) ||
+                !TryReadQuotedString(ref line, out projectTypeGuid, pool) ||
                 !TrySkip(ref line, ")") ||
                 !TrySkipDelimiter(ref line, '=') ||
                 !TryReadQuotedString(ref line, out projectName) ||
                 !TrySkipDelimiter(ref line, ',') ||
                 !TryReadQuotedString(ref line, out relativePath) ||
                 !TrySkipDelimiter(ref line, ',') ||
-                // TODO use pool here
-                !TryReadQuotedString(ref line, out projectGuid) ||
+                !TryReadQuotedString(ref line, out projectGuid, pool) ||
                 !line.IsEmpty)
             {
                 projectTypeGuid = null;
@@ -1275,7 +1277,8 @@ internal static bool TryParseFirstProjectLine(
 
             static bool TryReadQuotedString(
                 ref ReadOnlySpan<char> line,
-                [NotNullWhen(returnValue: true)] out string? value)
+                [NotNullWhen(returnValue: true)] out string? value,
+                StringPool? pool = null)
             {
                 if (line.Length == 0 ||
                     line[0] != '"')
@@ -1294,7 +1297,9 @@ static bool TryReadQuotedString(
                     return false;
                 }
 
-                value = line.Slice(0, quoteIndex).Trim().ToString();
+                ReadOnlySpan<char> valueSpan = line.Slice(0, quoteIndex).Trim();
+
+                value = pool?.Intern(valueSpan) ?? valueSpan.ToString();
                 line = line.Slice(quoteIndex + 1);
                 return true;
             }
@@ -1334,9 +1339,9 @@ static bool TrySkipDelimiter(ref ReadOnlySpan<char> line, char delimiter)
         /// Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "Microsoft.Build", "src\Build\Microsoft.Build.csproj", "{69BE05E2-CBDA-4D27-9733-44E12B0F5627}"
         /// </code>
         /// </remarks>
-        internal void ParseFirstProjectLine(ReadOnlySpan<char> firstLine, ProjectInSolution proj)
+        internal void ParseFirstProjectLine(ReadOnlySpan<char> firstLine, ProjectInSolution proj, StringPool pool)
         {
-            if (!TryParseFirstProjectLine(firstLine, out string projectTypeGuid, out string projectName, out string relativePath, out string projectGuid))
+            if (!TryParseFirstProjectLine(firstLine, pool, out string? projectTypeGuid, out string? projectName, out string? relativePath, out string? projectGuid))
             {
                 ProjectFileErrorUtilities.ThrowInvalidProjectFile(
                     "SubCategoryForSolutionParsingErrors",
@@ -1418,7 +1423,7 @@ internal void ParseFirstProjectLine(ReadOnlySpan<char> firstLine, ProjectInSolut
         /// Read nested projects section.
         /// This is required to find a unique name for each project's target.
         /// </summary>
-        internal void ParseNestedProjects()
+        internal void ParseNestedProjects(StringPool pool)
         {
             while (TryReadLine(out ReadOnlySpan<char> line))
             {
@@ -1441,9 +1446,8 @@ internal void ParseNestedProjects()
                         "SolutionParseNestedProjectError");
                 }
 
-                // TODO use pool here
-                string projectGuid = propertyName.ToString();
-                string parentProjectGuid = propertyValue.ToString();
+                string projectGuid = pool.Intern(propertyName);
+                string parentProjectGuid = pool.Intern(propertyValue);
 
                 if (!_projects!.TryGetValue(projectGuid, out ProjectInSolution? proj))
                 {
@@ -1474,7 +1478,7 @@ internal void ParseNestedProjects()
         /// EndGlobalSection
         /// </code>
         /// </remarks>
-        internal void ParseSolutionConfigurations()
+        internal void ParseSolutionConfigurations(StringPool pool)
         {
             while (TryReadLine(out ReadOnlySpan<char> line))
             {
@@ -1515,13 +1519,13 @@ internal void ParseSolutionConfigurations()
                         line.ToString());
                 }
 
-                (string configuration, string platform) = ParseConfigurationName(name, FullPath, _currentLineNumber, line);
+                (string configuration, string platform) = ParseConfigurationName(name, FullPath, _currentLineNumber, line, pool);
 
                 _solutionConfigurations!.Add(new SolutionConfigurationInSolution(configuration, platform));
             }
         }
 
-        internal static (string Configuration, string Platform) ParseConfigurationName(ReadOnlySpan<char> fullConfigurationName, string projectPath, int lineNumber, ReadOnlySpan<char> containingString)
+        internal static (string Configuration, string Platform) ParseConfigurationName(ReadOnlySpan<char> fullConfigurationName, string? projectPath, int lineNumber, ReadOnlySpan<char> containingString, StringPool pool)
         {
             if (!TryParseConfigurationPlatform(fullConfigurationName, isPlatformRequired: true, out ReadOnlySpan<char> configuration, out ReadOnlySpan<char> platform))
             {
@@ -1532,8 +1536,7 @@ internal static (string Configuration, string Platform) ParseConfigurationName(R
                     containingString.ToString());
             }
 
-            // TODO use pool here
-            return (configuration.ToString(), platform.ToString());
+            return (pool.Intern(configuration), pool.Intern(platform));
         }
 
         internal readonly struct ProjectConfigurationKey : IEquatable<ProjectConfigurationKey>
@@ -1587,13 +1590,10 @@ public bool Equals(ProjectConfigurationKey other)
         /// </code>
         /// </remarks>
         /// <returns>An unprocessed dictionary of entries in this section.</returns>
-        internal Dictionary<ProjectConfigurationKey, string> ParseProjectConfigurations()
+        internal Dictionary<ProjectConfigurationKey, string> ParseProjectConfigurations(StringPool pool)
         {
             Dictionary<ProjectConfigurationKey, string> rawProjectConfigurationsEntries = new();
 
-            // TODO use pool in other places too, during parsing?
-            StringPool pool = new();
-
             while (TryReadLine(out ReadOnlySpan<char> line))
             {
                 if (line.Equals("EndGlobalSection".AsSpan(), StringComparison.Ordinal))
@@ -1622,8 +1622,9 @@ internal Dictionary<ProjectConfigurationKey, string> ParseProjectConfigurations(
                 {
                     ReadOnlySpan<char> guid = name.Slice(0, periodIndex);
                     ReadOnlySpan<char> suffix = name.Slice(periodIndex + 1);
+                    ProjectConfigurationKey key = new(pool.Intern(guid), pool.Intern(suffix));
 
-                    rawProjectConfigurationsEntries[new(pool.Intern(guid), pool.Intern(suffix))] = value.ToString();
+                    rawProjectConfigurationsEntries[key] = pool.Intern(value);
                 }
             }
 
@@ -1631,17 +1632,18 @@ internal Dictionary<ProjectConfigurationKey, string> ParseProjectConfigurations(
         }
 
         /// <summary>
-        /// Read the project configuration information for every project in the solution, using pre-cached 
-        /// solution section data. 
+        /// Read the project configuration information for every project in the solution, using pre-cached
+        /// solution section data.
         /// </summary>
         /// <param name="rawProjectConfigurationsEntries">Cached data from the project configuration section</param>
-        internal void ProcessProjectConfigurationSection(Dictionary<ProjectConfigurationKey, string> rawProjectConfigurationsEntries)
+        /// <param name="pool">Allows efficient deduplication of repeated strings.</param>
+        internal void ProcessProjectConfigurationSection(Dictionary<ProjectConfigurationKey, string> rawProjectConfigurationsEntries, StringPool pool)
         {
-            // Instead of parsing the data line by line, we parse it project by project, constructing the 
-            // entry name (e.g. "{A6F99D27-47B9-4EA4-BFC9-25157CBDC281}.Release|Any CPU.ActiveCfg") and retrieving its 
+            // Instead of parsing the data line by line, we parse it project by project, constructing the
+            // entry name (e.g. "{A6F99D27-47B9-4EA4-BFC9-25157CBDC281}.Release|Any CPU.ActiveCfg") and retrieving its
             // value from the raw data. The reason for this is that the IDE does it this way, and as the result
             // the '.' character is allowed in configuration names although it technically separates different
-            // parts of the entry name string. This could lead to ambiguous results if we tried to parse 
+            // parts of the entry name string. This could lead to ambiguous results if we tried to parse
             // the entry name instead of constructing it and looking it up. Although it's pretty unlikely that
             // this would ever be a problem, it's safer to do it the same way VS IDE does it.
             foreach (ProjectInSolution project in _projectsInOrder!)
@@ -1677,8 +1679,8 @@ internal void ProcessProjectConfigurationSection(Dictionary<ProjectConfiguration
                             }
 
                             ProjectConfigurationInSolution projectConfiguration = new(
-                                configuration.ToString(),
-                                platform.ToString(),
+                                pool.Intern(configuration),
+                                pool.Intern(platform),
                                 includeInBuild: rawProjectConfigurationsEntries.ContainsKey(buildKey));
 
                             project.SetProjectConfiguration(solutionConfiguration.FullName, projectConfiguration);
