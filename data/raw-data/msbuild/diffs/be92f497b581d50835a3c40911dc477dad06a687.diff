diff --git a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
index 14b91ed0795..8ac6ba52f14 100644
--- a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
@@ -4769,6 +4769,23 @@ public void VerifyPropertyTrackingLoggingAll()
                 });
         }
 
+        [Fact]
+        public void VerifyGetTypeEvaluationBlocked()
+        {
+            string projectContents = ObjectModelHelpers.CleanupFileContents(@"
+                             <Project>
+                               <PropertyGroup>
+                                 <TestProp>$(MSBuildRuntimeType.GetType())</TestProp>
+                               </PropertyGroup>
+                             </Project>");
+
+            ProjectCollection fakeProjectCollection =
+                GetProjectCollectionWithFakeToolset(null /* no global properties */);
+
+            Should.Throw<InvalidProjectFileException>(() =>
+                new Project(XmlReader.Create(new StringReader(projectContents)), null, "Fake", fakeProjectCollection));
+        }
+
         private void VerifyPropertyTrackingLoggingScenario(string envVarValue, Action<MockLogger> loggerEvaluatorAction)
         {
             // The default is that only reassignments are logged.
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 2153f368007..fe397e4469a 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -3352,6 +3352,12 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                     }
                     else
                     {
+                        // Check that the function that we're going to call is valid to call
+                        if (!IsInstanceMethodAvailable(_methodMethodName))
+                        {
+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "InvalidFunctionMethodUnavailable", _methodMethodName, _receiverType.FullName);
+                        }
+
                         _bindingFlags |= BindingFlags.Instance;
 
                         // The object that we're about to call methods on may have escaped characters
@@ -5017,6 +5023,19 @@ private static bool IsStaticMethodAvailable(Type receiverType, string methodName
                 return AvailableStaticMethods.GetTypeInformationFromTypeCache(receiverType.FullName, methodName) != null;
             }
 
+            [MethodImpl(MethodImplOptions.AggressiveInlining)]
+            private static bool IsInstanceMethodAvailable(string methodName)
+            {
+                if (Traits.Instance.EnableAllPropertyFunctions)
+                {
+                    // anything goes
+                    return true;
+                }
+
+                // This could be expanded to an allow / deny list.
+                return methodName != "GetType";
+            }
+
             /// <summary>
             /// Construct and instance of objectType based on the constructor or method arguments provided.
             /// Arguments must never be null.
diff --git a/src/Shared/ResourceUtilities.cs b/src/Shared/ResourceUtilities.cs
index 545d6241d18..1cd325959fc 100644
--- a/src/Shared/ResourceUtilities.cs
+++ b/src/Shared/ResourceUtilities.cs
@@ -231,12 +231,14 @@ internal static string FormatString(string unformatted, params object[] args)
                 // FormatResourceString calls ToString() which returns the full name of the type!
                 foreach (object param in args)
                 {
-                    // Check it has a real implementation of ToString()
+                    // Check it has a real implementation of ToString() and the type is not actually System.String
                     if (param != null)
                     {
-                        if (String.Equals(param.GetType().ToString(), param.ToString(), StringComparison.Ordinal))
+                        if (string.Equals(param.GetType().ToString(), param.ToString(), StringComparison.Ordinal) &&
+                            param.GetType() != typeof(string))
                         {
-                            ErrorUtilities.ThrowInternalError("Invalid resource parameter type, was {0}", param.GetType().FullName);
+                            ErrorUtilities.ThrowInternalError("Invalid resource parameter type, was {0}",
+                                param.GetType().FullName);
                         }
                     }
                 }
