diff --git a/src/Framework/LogInterpolatedStringHandler.cs b/src/Framework/LogInterpolatedStringHandler.cs
index ee4c089f10d..91df63549f4 100644
--- a/src/Framework/LogInterpolatedStringHandler.cs
+++ b/src/Framework/LogInterpolatedStringHandler.cs
@@ -15,19 +15,22 @@ public ref struct LogInterpolatedStringHandler
         private int position = 0;
         private int argPosition = 0;
 
-        public object?[] Arguments { get; } = Array.Empty<object?>();
+        public readonly object?[] Arguments { get; } = Array.Empty<object?>();
 
         public LogInterpolatedStringHandler(int literalLength, int formattedCount)
         {
-            if (formattedCount > 99)
+            int bufferSize;
+
+            // Buffer size is computed with reserved space for "{x..x}" placeholders
+            if (formattedCount < 10)
             {
-                throw new ArgumentOutOfRangeException("Number of formatted arguments must be less than 100.");
+                bufferSize = literalLength + (3 * formattedCount);
+            }
+            else
+            {
+                int maxNumberOfDigits = (int)(Math.Log10(formattedCount) + 1);
+                bufferSize = literalLength + (formattedCount * (maxNumberOfDigits + 2));
             }
-
-            // Buffer size is computed with reserved space for "{x}" and "{xx}" placeholders
-            int bufferSize = formattedCount < 10 ?
-                literalLength + (3 * formattedCount) :
-                literalLength + 3 * (formattedCount % 10) + 4 * (formattedCount - (formattedCount % 10));
 
             buffer = new char[bufferSize];
 
@@ -45,10 +48,19 @@ public void AppendLiteral(string s)
 
         public void AppendFormatted<T>(T t)
         {
-            string indexString = argPosition.ToString();
             buffer[position++] = '{';
-            indexString.AsSpan().CopyTo(buffer.AsSpan().Slice(position));
-            position += indexString.Length;
+
+            if (argPosition < 10)
+            {
+                buffer[position++] = (char)('0' + argPosition);
+            }
+            else
+            {
+                string indexString = argPosition.ToString();
+                indexString.AsSpan().CopyTo(buffer.AsSpan().Slice(position));
+                position += indexString.Length;
+            }
+
             buffer[position++] = '}';
 
             Arguments[argPosition++] = t;
diff --git a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
index 64aba184220..af9d8c29ff4 100644
--- a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
+++ b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
@@ -2,7 +2,11 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.IO;
+using System.Linq;
+using System.Linq.Expressions;
+using System.Reflection;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
@@ -312,59 +316,53 @@ public void TestLogFromExceptionWithAggregateException()
         }
 
 #if NET6_0_OR_GREATER
-        [Fact]
-        public void LogMessageWithInterpolatedString()
-        {
-            MockEngine mockEngine = new MockEngine();
-            Task t = new MockTask();
-            t.BuildEngine = mockEngine;
-
-            t.Log.LogMessage($"echo {0} and {"1"} {2} {3} {4} {5} {6} {7} {8} {9} {10}");
 
-            mockEngine.BuildEventArgs.Count.ShouldBe(1);
-            mockEngine.BuildEventArgs[0].ShouldBeOfType<BuildMessageEventArgs>();
-            mockEngine.BuildEventArgs[0].Message.ShouldBe("echo 0 and 1 2 3 4 5 6 7 8 9 10");
-        }
-
-        [Fact]
-        public void LogMessageWithInterpolatedString_RespectsImportanceLevel()
+        public static IEnumerable<object[]> InterpolatedLogTestData()
         {
-            MockEngine mockEngine = new MockEngine();
-            Task t = new MockTask();
-            t.BuildEngine = mockEngine;
-
-            mockEngine.MinimumMessageImportance = MessageImportance.High;
-            t.Log.LogMessage(MessageImportance.Low, $"echo {0} and {"1"}");
+            Action<Task> logMessage = t => t.Log.LogMessage($"echo {0} and {"1"} {2} {3} {4} {5} {6} {7} {8} {9} {10}");
+            Action<Task> logWarning = t => t.Log.LogWarning($"echo {0} and {"1"}");
+            Action<Task> logError = t => t.Log.LogError($"echo {0} and {"1"}");
 
-            mockEngine.BuildEventArgs.Count.ShouldBe(0);
+            yield return new object[] { logMessage, "echo 0 and 1 2 3 4 5 6 7 8 9 10", typeof(BuildMessageEventArgs) };
+            yield return new object[] { logWarning, "echo 0 and 1", typeof(BuildWarningEventArgs) };
+            yield return new object[] { logError, "echo 0 and 1", typeof(BuildErrorEventArgs) };
         }
 
-        [Fact]
-        public void LogWarningWithInterpolatedString()
+        [Theory]
+        [MemberData(nameof(InterpolatedLogTestData))]
+        public void LogWithInterpolatedString(Action<Task> logAction, string expectedResult, Type expectedEventType)
         {
             MockEngine mockEngine = new MockEngine();
             Task t = new MockTask();
             t.BuildEngine = mockEngine;
 
-            t.Log.LogWarning($"echo {0} and {"1"}");
+            logAction(t);
 
             mockEngine.BuildEventArgs.Count.ShouldBe(1);
-            mockEngine.BuildEventArgs[0].ShouldBeOfType<BuildWarningEventArgs>();
-            mockEngine.BuildEventArgs[0].Message.ShouldBe("echo 0 and 1");
+            mockEngine.BuildEventArgs[0].ShouldBeOfType(expectedEventType);
+            mockEngine.BuildEventArgs[0].Message.ShouldBe(expectedResult);
+
+            MethodBody logActionBody = logAction
+                .GetMethodInfo()
+                .GetMethodBody();
+
+            logActionBody
+                .LocalVariables
+                .Select(lvi => lvi.LocalType)
+                .ShouldContain(typeof(LogInterpolatedStringHandler), "Wrong logging method was bound");
         }
 
         [Fact]
-        public void LogErrorWithInterpolatedString()
+        public void LogMessageWithInterpolatedString_RespectsImportanceLevel()
         {
             MockEngine mockEngine = new MockEngine();
             Task t = new MockTask();
             t.BuildEngine = mockEngine;
 
-            t.Log.LogError($"echo {0} and {"1"}");
+            mockEngine.MinimumMessageImportance = MessageImportance.High;
+            t.Log.LogMessage(MessageImportance.Low, $"echo {0} and {"1"}");
 
-            mockEngine.BuildEventArgs.Count.ShouldBe(1);
-            mockEngine.BuildEventArgs[0].ShouldBeOfType<BuildErrorEventArgs>();
-            mockEngine.BuildEventArgs[0].Message.ShouldBe("echo 0 and 1");
+            mockEngine.BuildEventArgs.Count.ShouldBe(0);
         }
 #endif
 
