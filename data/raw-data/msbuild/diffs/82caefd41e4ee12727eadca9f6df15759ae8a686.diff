diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index 3a5a4fe2043..3d532f3506c 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -87,7 +87,7 @@ public NodeEngineShutdownReason Run(out Exception? shutdownException)
         {
             string msBuildLocation = BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
             var handshake = new ServerNodeHandshake(
-                CommunicationsUtilities.GetHandshakeOptions(taskHost: false, is64Bit: EnvironmentUtilities.Is64BitProcess),
+                CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture()),
                 msBuildLocation);
 
             string pipeName = NamedPipeUtil.GetPipeNameOrPath("MSBuildServer-" + handshake.ComputeHash());
@@ -364,88 +364,5 @@ public override void Flush()
                 base.Flush();
             }
         }
-
-        internal sealed class ServerNamedMutex : IDisposable
-        {
-            public const string RunningServerMutexNamePrefix = @"Global\server-running-";
-            public const string BusyServerMutexNamePrefix = @"Global\server-busy-";
-
-            private readonly Mutex _serverMutex;
-
-            public bool IsDisposed { get; private set; }
-
-            public bool IsLocked { get; private set; }
-
-            public ServerNamedMutex(string mutexName, out bool createdNew)
-            {
-                _serverMutex = new Mutex(
-                    initiallyOwned: true,
-                    name: mutexName,
-                    createdNew: out createdNew);
-
-                if (createdNew)
-                {
-                    IsLocked = true;
-                }
-            }
-
-            internal static ServerNamedMutex OpenOrCreateMutex(string name, out bool createdNew)
-            {
-                // TODO: verify it is not needed anymore
-                // if (PlatformInformation.IsRunningOnMono)
-                // {
-                //     return new ServerFileMutexPair(name, initiallyOwned: true, out createdNew);
-                // }
-                // else
-
-                return new ServerNamedMutex(name, out createdNew);
-            }
-
-            public static bool WasOpen(string mutexName)
-            {
-                bool result = Mutex.TryOpenExisting(mutexName, out Mutex? mutex);
-                mutex?.Dispose();
-
-                return result;
-            }
-
-            public bool TryLock(int timeoutMs)
-            {
-                if (IsDisposed)
-                {
-                    throw new ObjectDisposedException(nameof(ServerNamedMutex));
-                }
-
-                if (IsLocked)
-                {
-                    throw new InvalidOperationException("Lock already held");
-                }
-
-                return IsLocked = _serverMutex.WaitOne(timeoutMs);
-            }
-
-            public void Dispose()
-            {
-                if (IsDisposed)
-                {
-                    return;
-                }
-
-                IsDisposed = true;
-
-                try
-                {
-                    if (IsLocked)
-                    {
-                        _serverMutex.ReleaseMutex();
-                    }
-                }
-                finally
-                {
-                    _serverMutex.Dispose();
-                    IsLocked = false;
-                }
-            }
-        }
     }
 }
diff --git a/src/Build/BackEnd/Node/ServerNamedMutex.cs b/src/Build/BackEnd/Node/ServerNamedMutex.cs
new file mode 100644
index 00000000000..e149cda704b
--- /dev/null
+++ b/src/Build/BackEnd/Node/ServerNamedMutex.cs
@@ -0,0 +1,91 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Threading;
+
+namespace Microsoft.Build.Execution
+{
+    internal sealed class ServerNamedMutex : IDisposable
+    {
+        public const string RunningServerMutexNamePrefix = @"Global\server-running-";
+        public const string BusyServerMutexNamePrefix = @"Global\server-busy-";
+
+        private readonly Mutex _serverMutex;
+
+        public bool IsDisposed { get; private set; }
+
+        public bool IsLocked { get; private set; }
+
+        public ServerNamedMutex(string mutexName, out bool createdNew)
+        {
+            _serverMutex = new Mutex(
+                initiallyOwned: true,
+                name: mutexName,
+                createdNew: out createdNew);
+
+            if (createdNew)
+            {
+                IsLocked = true;
+            }
+        }
+
+        internal static ServerNamedMutex OpenOrCreateMutex(string name, out bool createdNew)
+        {
+            // TODO: verify it is not needed anymore
+            // if (PlatformInformation.IsRunningOnMono)
+            // {
+            //     return new ServerFileMutexPair(name, initiallyOwned: true, out createdNew);
+            // }
+            // else
+
+            return new ServerNamedMutex(name, out createdNew);
+        }
+
+        public static bool WasOpen(string mutexName)
+        {
+            bool result = Mutex.TryOpenExisting(mutexName, out Mutex? mutex);
+            mutex?.Dispose();
+
+            return result;
+        }
+
+        public bool TryLock(int timeoutMs)
+        {
+            if (IsDisposed)
+            {
+                throw new ObjectDisposedException(nameof(ServerNamedMutex));
+            }
+
+            if (IsLocked)
+            {
+                throw new InvalidOperationException("Lock already held");
+            }
+
+            return IsLocked = _serverMutex.WaitOne(timeoutMs);
+        }
+
+        public void Dispose()
+        {
+            if (IsDisposed)
+            {
+                return;
+            }
+
+            IsDisposed = true;
+
+            try
+            {
+                if (IsLocked)
+                {
+                    _serverMutex.ReleaseMutex();
+                }
+            }
+            finally
+            {
+                _serverMutex.Dispose();
+                IsLocked = false;
+            }
+        }
+    }
+}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 74bfcc670aa..0bdc0df6561 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -150,6 +150,7 @@
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
+    <Compile Include="BackEnd\Node\ServerNamedMutex.cs" />
     <Compile Include="BackEnd\Node\ServerNodeBuildCommand.cs" />
     <Compile Include="BackEnd\Node\ServerNodeConsoleWrite.cs" />
     <Compile Include="BackEnd\Node\ServerNodeBuildResult.cs" />
