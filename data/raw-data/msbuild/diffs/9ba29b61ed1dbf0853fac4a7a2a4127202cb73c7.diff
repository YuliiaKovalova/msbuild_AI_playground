diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index e6f1294b28d..ee399d91c3e 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -143,6 +143,7 @@ private bool TryAddAssemblyFromManifest(string pathToManifest, string manifestFo
             {
                 // <SdkResolver>
                 //   <Path>...</Path>
+                //   <NamePattern>(Optional field)</NamePattern>
                 // </SdkResolver>
                 var manifest = SdkResolverManifest.Load(pathToManifest);
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
index 295ec8d7877..a102a4d9be6 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
@@ -13,6 +13,8 @@ internal class SdkResolverManifest
     {
         internal string Path { get; set; }
 
+        internal string NamePattern { get; set; }
+
         /// <summary>
         /// Deserialize the file into an SdkResolverManifest.
         /// </summary>
@@ -47,22 +49,34 @@ internal static SdkResolverManifest Load(string filePath)
             return null;
         }
 
+        // This parsing code is very specific, but it should be all right as long as manifest has simple structure.
         private static SdkResolverManifest ParseSdkResolverElement(XmlReader reader)
         {
             SdkResolverManifest manifest = new SdkResolverManifest();
 
-            while (reader.Read())
+            reader.Read();
+            while (!reader.EOF)
             {
                 switch (reader.NodeType)
                 {
                     case XmlNodeType.Element:
                         {
-                            manifest.Path = reader.Name switch
+                            switch (reader.Name)
                             {
-                                "Path" => reader.ReadElementContentAsString(),
-                                _ => throw new XmlException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnrecognizedElement", reader.Name)),
-                            };
+                                case "Path":
+                                    manifest.Path = reader.ReadElementContentAsString();
+                                    break;
+                                case "NamePattern":
+                                    manifest.NamePattern = reader.ReadElementContentAsString();
+                                    break;
+                                default:
+                                    throw new XmlException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnrecognizedElement", reader.Name));
+                            }
+                            break;
                         }
+
+                    case XmlNodeType.EndElement:
+                        reader.Read();
                         break;
 
                     default:
