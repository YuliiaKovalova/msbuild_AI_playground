diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 7f855ca0350..5477f18af83 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -95,6 +95,46 @@ public void RoundtripBuildFinishedEventArgs()
                 e => e.Succeeded.ToString());
         }
 
+        [Fact]
+        public void RoundtripBuildSubmissionStartedEventArgs()
+        {
+            var globalVariables = new Dictionary<string, string?>
+            {
+                {"Variable1", "Value1" },
+                {"Variable2", "" },
+                {"Variable3", null },
+            };
+            var entryPointProjects = new List<string>()
+            {
+                "project1",
+                "project2",
+                "",
+            };
+            var targetNames = new List<string>()
+            {
+                "target1",
+                "target2",
+                "",
+            };
+            var flag = Execution.BuildRequestDataFlags.FailOnUnresolvedSdk;
+            var submissionId = 1234;
+
+            BuildSubmissionStartedEventArgs args = new(
+                globalVariables,
+                entryPointProjects,
+                targetNames,
+                flag,
+                submissionId);
+
+            Roundtrip<BuildSubmissionStartedEventArgs>(args,
+                e => e.GlobalProperties.ToString(),
+                e => TranslationHelpers.GetPropertiesString(e.GlobalProperties),
+                e => TranslationHelpers.GetPropertiesString(e.EntryProjectsFullPath),
+                e => TranslationHelpers.GetPropertiesString(e.TargetNames),
+                e => e.Flags.ToString(),
+                e => e.SubmissionId.ToString());
+        }
+
         [Fact]
         public void RoundtripProjectStartedEventArgs()
         {
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 28f7f2326c1..6ade9b7dfda 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -639,7 +639,7 @@ private BuildEventArgs ReadBuildSubmissionStartedEventArgs()
             var submissionId = ReadInt32();
 
             var e = new BuildSubmissionStartedEventArgs(
-                globalProperties,
+                (IReadOnlyDictionary<string, string?>)globalProperties,
                 entryProjectsFullPath,
                 targetNames,
                 flags,
@@ -1593,7 +1593,7 @@ private ITaskItem ReadTaskItem()
 
             for (int i = 0; i < count; i++)
             {
-                string item = ReadString();
+                string item = ReadDeduplicatedString();
                 list[i] = item;
             }
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 6ee4aff9d74..9ab28a3824a 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -13,6 +13,7 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Profiler;
+using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.NET.StringTools;
 
@@ -183,6 +184,7 @@ Base types and inheritance ("EventArgs" suffix omitted):
                     TargetFinished
                     ProjectStarted
                     ProjectFinished
+                    BuildSubmissionStarted
                     BuildStarted
                     BuildFinished
                     ProjectEvaluationStarted
@@ -210,6 +212,7 @@ private BinaryLogRecordKind WriteCore(BuildEventArgs e)
                 case BuildWarningEventArgs buildWarning: return Write(buildWarning);
                 case ProjectStartedEventArgs projectStarted: return Write(projectStarted);
                 case ProjectFinishedEventArgs projectFinished: return Write(projectFinished);
+                case BuildSubmissionStartedEventArgs buildSubmissionStarted: return Write(buildSubmissionStarted);
                 case BuildStartedEventArgs buildStarted: return Write(buildStarted);
                 case BuildFinishedEventArgs buildFinished: return Write(buildFinished);
                 case ProjectEvaluationStartedEventArgs projectEvaluationStarted: return Write(projectEvaluationStarted);
@@ -336,6 +339,18 @@ private BinaryLogRecordKind Write(ProjectEvaluationFinishedEventArgs e)
             return BinaryLogRecordKind.ProjectEvaluationFinished;
         }
 
+        private BinaryLogRecordKind Write(BuildSubmissionStartedEventArgs e)
+        {
+            WriteBuildEventArgsFields(e, writeMessage: false);
+            Write(e.GlobalProperties);
+            WriteStringList(e.EntryProjectsFullPath);
+            WriteStringList(e.TargetNames);
+            Write((int)e.Flags);
+            Write(e.SubmissionId);
+
+            return BinaryLogRecordKind.BuildSubmissionStarted;
+        }
+
         private BinaryLogRecordKind Write(ProjectStartedEventArgs e)
         {
             WriteBuildEventArgsFields(e, writeMessage: false);
@@ -1044,6 +1059,16 @@ private void Write(IEnumerable<KeyValuePair<string, string>> keyValuePairs)
             nameValueListBuffer.Clear();
         }
 
+        private void WriteStringList(IEnumerable<string> items)
+        {
+            int length = items.Count();
+            Write(length);
+            foreach (string entry in items)
+            {
+                WriteStringRecord(entry);
+            }
+        }
+
         private void WriteNameValueList()
         {
             if (nameValueListBuffer.Count == 0)
diff --git a/src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs b/src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs
index 0c1814a3e4a..247be55382d 100644
--- a/src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs
+++ b/src/Framework.UnitTests/BuildSubmissionStartedEventAgs_Tests.cs
@@ -21,7 +21,7 @@ public void SerializationDeserializationTest()
             {
                 {"Variable1", "Value1" },
                 {"Variable2", "" },
-                {"Variable3", null},
+                {"Variable3", null },
             };
             var entryPointProjects = new List<string>()
             {
diff --git a/src/Framework/BuildSubmissionStartedEventArgs.cs b/src/Framework/BuildSubmissionStartedEventArgs.cs
index d397697a740..17ce69d8bb8 100644
--- a/src/Framework/BuildSubmissionStartedEventArgs.cs
+++ b/src/Framework/BuildSubmissionStartedEventArgs.cs
@@ -18,7 +18,7 @@ public sealed class BuildSubmissionStartedEventArgs : BuildStatusEventArgs
         /// </summary>
         public BuildSubmissionStartedEventArgs()
         {
-            GlobalProperties = new Dictionary<string, string>();
+            GlobalProperties = new Dictionary<string, string?>();
             EntryProjectsFullPath = Enumerable.Empty<string>();
             TargetNames = Enumerable.Empty<string>();
             Flags = BuildRequestDataFlags.None;
@@ -26,7 +26,7 @@ public BuildSubmissionStartedEventArgs()
         }
 
         public BuildSubmissionStartedEventArgs(
-            IDictionary<string, string> globalProperties,
+            IReadOnlyDictionary<string, string?> globalProperties,
             IEnumerable<string> entryProjectsFullPath,
             IEnumerable<string> targetNames,
             BuildRequestDataFlags flags,
@@ -39,7 +39,7 @@ public BuildSubmissionStartedEventArgs(
             SubmissionId = submissionId;
         }
 
-        public IDictionary<string, string> GlobalProperties { get; set; }
+        public IReadOnlyDictionary<string, string?> GlobalProperties { get; set; }
 
         public IEnumerable<string> EntryProjectsFullPath { get; set; }
 
@@ -53,27 +53,27 @@ internal override void WriteToStream(BinaryWriter writer)
         {
             base.WriteToStream(writer);
 
-            writer.Write7BitEncodedInt(GlobalProperties.Count);
+            writer.Write(GlobalProperties.Count);
             foreach (var entry in GlobalProperties)
             {
                 writer.Write((string)entry.Key);
                 writer.Write((string?)entry.Value ?? "");
             }
 
-            writer.Write7BitEncodedInt(EntryProjectsFullPath.Count());
+            writer.Write(EntryProjectsFullPath.Count());
             foreach(var entry in EntryProjectsFullPath)
             {
                 writer.Write((string)entry);
             }
 
-            writer.Write7BitEncodedInt(TargetNames.Count());
+            writer.Write(TargetNames.Count());
             foreach (var entry in TargetNames)
             {
                 writer.Write((string)entry);
             }
 
-            writer.Write7BitEncodedInt((int)Flags);
-            writer.Write7BitEncodedInt((int)SubmissionId);
+            writer.Write((int)Flags);
+            writer.Write((int)SubmissionId);
         }
 
         internal override void CreateFromStream(BinaryReader reader, int version)
@@ -81,7 +81,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
             base.CreateFromStream(reader, version);
 
             int numberOfProperties = reader.ReadInt32();
-            Dictionary<string, string> globalProperties = new Dictionary<string, string>(numberOfProperties);
+            Dictionary<string, string?> globalProperties = new Dictionary<string, string?>(numberOfProperties);
             for (int i = 0; i < numberOfProperties; i++)
             {
                 string key = reader.ReadString();
@@ -89,10 +89,12 @@ internal override void CreateFromStream(BinaryReader reader, int version)
 
                 if (key != null && value != null)
                 {
-                    globalProperties[value] = key;
+                    globalProperties[key] = value;
                 }
             }
 
+            GlobalProperties = globalProperties;
+
             int numberOfEntries = reader.ReadInt32();
             var entries = new string[numberOfEntries];
             for (int i = 0; i < numberOfEntries; i++)
@@ -100,6 +102,8 @@ internal override void CreateFromStream(BinaryReader reader, int version)
                 entries[i] = reader.ReadString();
             }
 
+            EntryProjectsFullPath = entries;
+
             int numberOfTargets = reader.ReadInt32();
             var targets = new string[numberOfTargets];
             for (int i = 0;i < numberOfTargets; i++)
@@ -107,8 +111,10 @@ internal override void CreateFromStream(BinaryReader reader, int version)
                 targets[i] = reader.ReadString();
             }
 
-            BuildRequestDataFlags flags = (BuildRequestDataFlags)reader.ReadInt32();
-            int submissionId = reader.ReadInt32();
+            TargetNames = targets;
+
+            Flags = (BuildRequestDataFlags)reader.ReadInt32();
+            SubmissionId = reader.ReadInt32();
         }
     }
 }
