diff --git a/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
index 7615d9b1704..ded716cdd68 100644
--- a/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
+++ b/src/Build/BackEnd/Node/ServerNodeBuildCommand.cs
@@ -13,13 +13,19 @@ namespace Microsoft.Build.BackEnd
     /// </summary>
     internal sealed class ServerNodeBuildCommand : INodePacket
     {
+        private string _commandLine = default!;
+        private string _startupDirectory = default!;
+        private Dictionary<string, string> _buildProcessEnvironment = default!;
+        private CultureInfo _culture = default!;
+        private CultureInfo _uiCulture = default!;
+
         public ServerNodeBuildCommand(string commandLine, string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture)
         {
-            CommandLine = commandLine;
-            StartupDirectory = startupDirectory;
-            BuildProcessEnvironment = buildProcessEnvironment;
-            Culture = culture;
-            UICulture = uiCulture;
+            _commandLine = commandLine;
+            _startupDirectory = startupDirectory;
+            _buildProcessEnvironment = buildProcessEnvironment;
+            _culture = culture;
+            _uiCulture = uiCulture;
         }
 
         /// <summary>
@@ -41,27 +47,27 @@ private ServerNodeBuildCommand()
         /// <summary>
         /// The startup directory
         /// </summary>
-        public string CommandLine { get; private set; } = default!;
+        public string CommandLine => _commandLine;
 
         /// <summary>
         /// The startup directory
         /// </summary>
-        public string StartupDirectory { get; private set; } = default!;
+        public string StartupDirectory => _startupDirectory;
 
         /// <summary>
         /// The process environment.
         /// </summary>
-        public Dictionary<string, string> BuildProcessEnvironment { get; private set; } = default!;
+        public Dictionary<string, string> BuildProcessEnvironment => _buildProcessEnvironment;
 
         /// <summary>
         /// The culture
         /// </summary>
-        public CultureInfo Culture { get; private set; } = default!;
+        public CultureInfo Culture => _culture;
 
         /// <summary>
         /// The UI culture.
         /// </summary>
-        public CultureInfo UICulture { get; private set; } = default!;
+        public CultureInfo UICulture => _uiCulture;
 
         #region INodePacketTranslatable Members
 
@@ -71,27 +77,11 @@ private ServerNodeBuildCommand()
         /// <param name="translator">The translator to use.</param>
         public void Translate(ITranslator translator)
         {
-            if (translator.Mode == TranslationDirection.ReadFromStream)
-            {
-                var br = translator.Reader;
-
-                CommandLine = br.ReadString();
-                StartupDirectory = br.ReadString();
-                int count = br.ReadInt32();
-                BuildProcessEnvironment = new Dictionary<string, string>(count, StringComparer.OrdinalIgnoreCase);
-                for (int i = 0; i < count; ++i)
-                {
-                    var key = br.ReadString();
-                    var value = br.ReadString();
-                    BuildProcessEnvironment.Add(key, value);
-                }
-                Culture = new CultureInfo(br.ReadString());
-                UICulture = new CultureInfo(br.ReadString());
-            }
-            else
-            {
-                throw new InvalidOperationException("Writing into stream not supported");
-            }
+            translator.Translate(ref _commandLine);
+            translator.Translate(ref _startupDirectory);
+            translator.TranslateDictionary(ref _buildProcessEnvironment, StringComparer.OrdinalIgnoreCase);
+            translator.TranslateCulture(ref _culture);
+            translator.TranslateCulture(ref _uiCulture);
         }
 
         /// <summary>
diff --git a/src/Build/BackEnd/Node/ServerNodeBuildResult.cs b/src/Build/BackEnd/Node/ServerNodeBuildResult.cs
index e791b95c759..c28a77d704d 100644
--- a/src/Build/BackEnd/Node/ServerNodeBuildResult.cs
+++ b/src/Build/BackEnd/Node/ServerNodeBuildResult.cs
@@ -2,16 +2,22 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 //
 
-using System;
-
 namespace Microsoft.Build.BackEnd
 {
     internal sealed class ServerNodeBuildResult : INodePacket
     {
+        private int _exitCode = default!;
+        private string _exitType = default!;
+
+        /// <summary>
+        /// Private constructor for deserialization
+        /// </summary>
+        private ServerNodeBuildResult() { }
+
         public ServerNodeBuildResult(int exitCode, string exitType)
         {
-            ExitCode = exitCode;
-            ExitType = exitType;
+            _exitCode = exitCode;
+            _exitType = exitType;
         }
 
         #region INodePacket Members
@@ -24,23 +30,25 @@ public ServerNodeBuildResult(int exitCode, string exitType)
 
         #endregion
 
-        public int ExitCode { get; }
+        public int ExitCode => _exitCode;
 
-        public string ExitType { get; }
+        public string ExitType => _exitType;
 
         public void Translate(ITranslator translator)
         {
-            if (translator.Mode == TranslationDirection.WriteToStream)
-            {
-                var bw = translator.Writer;
-
-                bw.Write(ExitCode);
-                bw.Write(ExitType);
-            }
-            else
-            {
-                throw new InvalidOperationException("Read from stream not supported");
-            }
+            translator.Translate(ref _exitCode);
+            translator.Translate(ref _exitType);
+        }
+
+        /// <summary>
+        /// Factory for deserialization.
+        /// </summary>
+        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        {
+            ServerNodeBuildResult command = new();
+            command.Translate(translator);
+
+            return command;
         }
     }
 }
diff --git a/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs b/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
index 28302db41fb..81e783e42c6 100644
--- a/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
+++ b/src/Build/BackEnd/Node/ServerNodeConsoleWrite.cs
@@ -1,23 +1,29 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
-
 namespace Microsoft.Build.BackEnd
 {
     internal sealed class ServerNodeConsoleWrite : INodePacket
     {
-        public string Text { get; }
+        private string _text = default!;
+        private byte _outputType = default!;
+
+        public string Text => _text;
 
         /// <summary>
         /// 1 = stdout, 2 = stderr
         /// </summary>
-        public byte OutputType { get; }
+        public byte OutputType => _outputType;
+
+        /// <summary>
+        /// Private constructor for deserialization
+        /// </summary>
+        private ServerNodeConsoleWrite() { }
 
         public ServerNodeConsoleWrite(string text, byte outputType)
         {
-            Text = text;
-            OutputType = outputType;
+            _text = text;
+            _outputType = outputType;
         }
 
         #region INodePacket Members
@@ -31,17 +37,16 @@ public ServerNodeConsoleWrite(string text, byte outputType)
 
         public void Translate(ITranslator translator)
         {
-            if (translator.Mode == TranslationDirection.WriteToStream)
-            {
-                var bw = translator.Writer;
-
-                bw.Write(Text);
-                bw.Write(OutputType);
-            }
-            else
-            {
-                throw new InvalidOperationException("Read from stream not supported");
-            }
+            translator.Translate(ref _text);
+            translator.Translate(ref _outputType);
+        }
+
+        internal static INodePacket FactoryForDeserialization(ITranslator translator)
+        {
+            ServerNodeConsoleWrite command = new();
+            command.Translate(translator);
+
+            return command;
         }
     }
 }
