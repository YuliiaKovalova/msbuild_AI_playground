diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigFile.cs b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigFile.cs
index d2f93664369..a97da9944d3 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigFile.cs
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigFile.cs
@@ -81,48 +81,45 @@ internal static EditorConfigFile Parse(string text)
         // dictionary, but we also use a case-insensitive key comparer when doing lookups
         var activeSectionProperties = ImmutableDictionary.CreateBuilder<string, string>(StringComparer.OrdinalIgnoreCase);
         string activeSectionName = "";
-        var lines = string.IsNullOrEmpty(text) ? Array.Empty<string>() : text.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);
-
-        foreach(var line in lines)
+        
+        using (var reader = new StringReader(text))
         {
-            if (string.IsNullOrWhiteSpace(line))
-            {
-                continue;
-            }
-
-            if (IsComment(line))
+            string? line;
+            while ((line = reader.ReadLine()) != null)
             {
-                continue;
-            }
-
-            var sectionMatches = GetSectionMatcherRegex().Matches(line);
-            if (sectionMatches.Count > 0 && sectionMatches[0].Groups.Count > 0)
-            {
-                addNewSection();
-
-                var sectionName = sectionMatches[0].Groups[1].Value;
-                Debug.Assert(!string.IsNullOrEmpty(sectionName));
-
-                activeSectionName = sectionName;
-                activeSectionProperties = ImmutableDictionary.CreateBuilder<string, string>();
-                continue;
-            }
-
-            var propMatches = GetPropertyMatcherRegex().Matches(line);
-            if (propMatches.Count > 0 && propMatches[0].Groups.Count > 1)
-            {
-                var key = propMatches[0].Groups[1].Value.ToLower();
-                var value = propMatches[0].Groups[2].Value;
-
-                Debug.Assert(!string.IsNullOrEmpty(key));
-                Debug.Assert(key == key.Trim());
-                Debug.Assert(value == value?.Trim());
-
-                activeSectionProperties[key] = value ?? "";
-                continue;
+                if (string.IsNullOrWhiteSpace(line) || IsComment(line))
+                {
+                    continue;
+                }
+
+                var sectionMatches = GetSectionMatcherRegex().Matches(line);
+                if (sectionMatches.Count > 0 && sectionMatches[0].Groups.Count > 0)
+                {
+                    addNewSection();
+
+                    var sectionName = sectionMatches[0].Groups[1].Value;
+                    Debug.Assert(!string.IsNullOrEmpty(sectionName));
+
+                    activeSectionName = sectionName;
+                    activeSectionProperties = ImmutableDictionary.CreateBuilder<string, string>();
+                    continue;
+                }
+
+                var propMatches = GetPropertyMatcherRegex().Matches(line);
+                if (propMatches.Count > 0 && propMatches[0].Groups.Count > 1)
+                {
+                    var key = propMatches[0].Groups[1].Value.ToLower();
+                    var value = propMatches[0].Groups[2].Value;
+
+                    Debug.Assert(!string.IsNullOrEmpty(key));
+                    Debug.Assert(key == key.Trim());
+                    Debug.Assert(value == value?.Trim());
+
+                    activeSectionProperties[key] = value ?? "";
+                    continue;
+                }
             }
         }
-
         // Add the last section
         addNewSection();
 
diff --git a/src/BuildCheck.UnitTests/EditorConfigParser_Tests.cs b/src/BuildCheck.UnitTests/EditorConfigParser_Tests.cs
index 17bd60abbd1..c95896c1443 100644
--- a/src/BuildCheck.UnitTests/EditorConfigParser_Tests.cs
+++ b/src/BuildCheck.UnitTests/EditorConfigParser_Tests.cs
@@ -81,7 +81,7 @@ public void EditorconfigFileDiscovery_RootTrue()
         """);
 
         var parser = new EditorConfigParser();
-        var listOfEditorConfigFile = parser.DiscoverEditorConfigFiles(Path.Combine(workFolder1.Path, "subfolder", "projectfile.proj") ).ToList();
+        var listOfEditorConfigFile = parser.DiscoverEditorConfigFiles(Path.Combine(workFolder1.Path, "subfolder", "projectfile.proj")).ToList();
         // should be one because root=true so we do not need to go further
         listOfEditorConfigFile.Count.ShouldBe(1);
         listOfEditorConfigFile[0].IsRoot.ShouldBeTrue();
@@ -116,4 +116,31 @@ public void EditorconfigFileDiscovery_RootFalse()
         listOfEditorConfigFile[0].IsRoot.ShouldBeFalse();
         listOfEditorConfigFile[0].NamedSections[0].Name.ShouldBe("*.csproj");
     }
+
+    [Fact]
+    public void Parse_HandlesDifferentLineEndings()
+    {
+        var mixedEndingsText = "root = true\r\n" +
+                           "[*.cs]\n" +
+                           "indent_style = space\r" +
+                           "indent_size = 4\n" +
+                           "[*.md]\r\n" +
+                           "trim_trailing_whitespace = true";
+
+        var result = EditorConfigFile.Parse(mixedEndingsText);
+
+        Assert.True(result.IsRoot, "Root property should be true");
+        Assert.Equal(2, result.NamedSections.Length);
+
+        var csSection = result.NamedSections.FirstOrDefault(s => s.Name == "*.cs");
+        Assert.NotNull(csSection);
+        Assert.Equal(2, csSection.Properties.Count);
+        Assert.Equal("space", csSection.Properties["indent_style"]);
+        Assert.Equal("4", csSection.Properties["indent_size"]);
+
+        var mdSection = result.NamedSections.FirstOrDefault(s => s.Name == "*.md");
+        Assert.NotNull(mdSection);
+        Assert.Single(mdSection.Properties);
+        Assert.Equal("true", mdSection.Properties["trim_trailing_whitespace"]);
+    }
 }
