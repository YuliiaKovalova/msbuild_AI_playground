diff --git a/eng/cibuild_bootstrapped_msbuild.ps1 b/eng/cibuild_bootstrapped_msbuild.ps1
index f1cb3b4a4e9..b6e3c089135 100644
--- a/eng/cibuild_bootstrapped_msbuild.ps1
+++ b/eng/cibuild_bootstrapped_msbuild.ps1
@@ -113,18 +113,14 @@ try {
   # Opt into performance logging. https://github.com/dotnet/msbuild/issues/5900
   $env:DOTNET_PERFLOG_DIR=$PerfLogDir
 
-  # Expose stage 1 path so unit tests can find the bootstrapped MSBuild.
-  $env:MSBUILD_BOOTSTRAPPED_BINDIR=$Stage1BinDir
-
   # When using bootstrapped MSBuild:
   # - Turn off node reuse (so that bootstrapped MSBuild processes don't stay running and lock files)
-  # - Do run tests
-  # - Don't try to create a bootstrap deployment
+  # - Create bootstrap environment as it's required when also running tests
   if ($onlyDocChanged) {
     & $PSScriptRoot\Common\Build.ps1 -restore -build -ci /p:CreateBootstrap=false /nr:false @properties
   }
   else {
-    & $PSScriptRoot\Common\Build.ps1 -restore -build -test -ci /p:CreateBootstrap=false /nr:false @properties
+    & $PSScriptRoot\Common\Build.ps1 -restore -build -test -ci /p:CreateBootstrap=true /nr:false @properties
   }
 
   exit $lastExitCode
diff --git a/eng/cibuild_bootstrapped_msbuild.sh b/eng/cibuild_bootstrapped_msbuild.sh
index 43fa422fad4..8edd377ec73 100755
--- a/eng/cibuild_bootstrapped_msbuild.sh
+++ b/eng/cibuild_bootstrapped_msbuild.sh
@@ -71,9 +71,6 @@ mv $ArtifactsDir $Stage1Dir
 # Ensure that debug bits fail fast, rather than hanging waiting for a debugger attach.
 export MSBUILDDONOTLAUNCHDEBUGGER=true
 
-# Expose stage 1 path so unit tests can find the bootstrapped MSBuild.
-export MSBUILD_BOOTSTRAPPED_BINDIR="$Stage1Dir/bin"
-
 # Opt into performance logging.
 export DOTNET_PERFLOG_DIR=$PerfLogDir
 
@@ -83,11 +80,10 @@ export DOTNET_HOST_PATH="$_InitializeDotNetCli/dotnet"
 
 # When using bootstrapped MSBuild:
 # - Turn off node reuse (so that bootstrapped MSBuild processes don't stay running and lock files)
-# - Do run tests
-# - Don't try to create a bootstrap deployment
+# - Create bootstrap environment as it's required when also running tests
 if [ $onlyDocChanged = 0 ]
 then
-    . "$ScriptRoot/common/build.sh" --restore --build --test --ci --nodereuse false --configuration $configuration /p:CreateBootstrap=false $properties $extra_properties
+    . "$ScriptRoot/common/build.sh" --restore --build --test --ci --nodereuse false --configuration $configuration /p:CreateBootstrap=true $properties $extra_properties
 
 else
     . "$ScriptRoot/common/build.sh" --restore --build --ci --nodereuse false --configuration $configuration /p:CreateBootstrap=false $properties $extra_properties
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index 373692d37f5..6310534a391 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -58,33 +58,11 @@ public static string ExecBootstrapedMSBuild(string msbuildParameters, out bool s
                                                    ?? throw new InvalidOperationException("This test assembly does not have the BootstrapLocationAttribute");
 
             string binaryFolder = attribute.BootstrapMsbuildBinaryLocation;
-            string bindirOverride = Environment.GetEnvironmentVariable("MSBUILD_BOOTSTRAPPED_BINDIR");
-            if (!string.IsNullOrEmpty(bindirOverride))
-            {
-                // The bootstrap environment has moved to another location. Assume the same relative layout and adjust the path.
-#if NET
-                string relativePath = Path.GetRelativePath(attribute.BootstrapRoot, binaryFolder);
-                binaryFolder = Path.GetFullPath(relativePath, bindirOverride);
-#else
-                binaryFolder = Path.GetFullPath(binaryFolder);
-                if (binaryFolder.StartsWith(attribute.BootstrapRoot))
-                {
-                    binaryFolder = binaryFolder.Substring(attribute.BootstrapRoot.Length);
-                    if (binaryFolder.StartsWith(Path.DirectorySeparatorChar.ToString()))
-                    {
-                        binaryFolder = binaryFolder.Substring(1);
-                    }
-
-                    binaryFolder = Path.Combine(bindirOverride, binaryFolder);
-                }
-#endif
-            }
 #if NET
             string pathToExecutable = EnvironmentProvider.GetDotnetExePath()!;
             msbuildParameters = Path.Combine(binaryFolder, "MSBuild.dll") + " " + msbuildParameters;
 #else
-            string pathToExecutable =
-                Path.Combine(binaryFolder, "msbuild.exe");
+            string pathToExecutable = Path.Combine(binaryFolder, "MSBuild.exe");
 #endif
             return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
         }
