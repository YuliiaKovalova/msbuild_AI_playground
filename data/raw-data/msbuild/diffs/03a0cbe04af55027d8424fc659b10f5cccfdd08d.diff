diff --git a/documentation/wiki/ChangeWaves.md b/documentation/wiki/ChangeWaves.md
index 7744d96a090..281e38c28df 100644
--- a/documentation/wiki/ChangeWaves.md
+++ b/documentation/wiki/ChangeWaves.md
@@ -27,6 +27,7 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 - [Log TaskParameterEvent for scalar parameters](https://github.com/dotnet/msbuild/pull/9908)
 - [Convert.ToString during a property evaluation uses the InvariantCulture for all types](https://github.com/dotnet/msbuild/pull/9874)
 - [Fix oversharing of build results in ResultsCache](https://github.com/dotnet/msbuild/pull/9987)
+- [Default value of RespectAlreadyAssignedItemCulture property in AssignCulture task and CommonTargets set to true unless specified](https://github.com/dotnet/msbuild/pull/9987)
 
 ### 17.10
 - [AppDomain configuration is serialized without using BinFmt](https://github.com/dotnet/msbuild/pull/9320) - feature can be opted out only if [BinaryFormatter](https://learn.microsoft.com/en-us/dotnet/api/system.runtime.serialization.formatters.binary.binaryformatter) is allowed at runtime by editing `MSBuild.runtimeconfig.json`
diff --git a/src/Tasks.UnitTests/AssignCulture_Tests.cs b/src/Tasks.UnitTests/AssignCulture_Tests.cs
index 47ceeb5d7b0..8409e953280 100644
--- a/src/Tasks.UnitTests/AssignCulture_Tests.cs
+++ b/src/Tasks.UnitTests/AssignCulture_Tests.cs
@@ -40,18 +40,24 @@ public void Basic()
         [Fact]
         public void CultureAttributePrecedence()
         {
-            AssignCulture t = new AssignCulture();
-            t.BuildEngine = new MockEngine();
-            ITaskItem i = new TaskItem("MyResource.fr.resx");
-            i.SetMetadata("Culture", "en-GB");
-            t.Files = new ITaskItem[] { i };
-            t.Execute();
-
-            Assert.Single(t.AssignedFiles);
-            Assert.Single(t.CultureNeutralAssignedFiles);
-            Assert.Equal("fr", t.AssignedFiles[0].GetMetadata("Culture"));
-            Assert.Equal("MyResource.fr.resx", t.AssignedFiles[0].ItemSpec);
-            Assert.Equal("MyResource.resx", t.CultureNeutralAssignedFiles[0].ItemSpec);
+            using(var testEnv = TestEnvironment.Create())
+            {
+                // AssignCulture behaviour before ChangeWave 17.12
+                testEnv.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", "17.12");
+
+                AssignCulture t = new AssignCulture();
+                t.BuildEngine = new MockEngine();
+                ITaskItem i = new TaskItem("MyResource.fr.resx");
+                i.SetMetadata("Culture", "en-GB");
+                t.Files = new ITaskItem[] { i };
+                t.Execute();
+
+                Assert.Single(t.AssignedFiles);
+                Assert.Single(t.CultureNeutralAssignedFiles);
+                Assert.Equal("fr", t.AssignedFiles[0].GetMetadata("Culture"));
+                Assert.Equal("MyResource.fr.resx", t.AssignedFiles[0].ItemSpec);
+                Assert.Equal("MyResource.resx", t.CultureNeutralAssignedFiles[0].ItemSpec);
+            }
         }
 
         /// <summary>
@@ -62,18 +68,24 @@ public void CultureAttributePrecedence()
         [Fact]
         public void CultureAttributePrecedenceWithBogusCulture()
         {
-            AssignCulture t = new AssignCulture();
-            t.BuildEngine = new MockEngine();
-            ITaskItem i = new TaskItem("MyResource.fr.resx");
-            i.SetMetadata("Culture", "invalid");   // Bogus culture.
-            t.Files = new ITaskItem[] { i };
-            t.Execute();
-
-            Assert.Single(t.AssignedFiles);
-            Assert.Single(t.CultureNeutralAssignedFiles);
-            Assert.Equal("fr", t.AssignedFiles[0].GetMetadata("Culture"));
-            Assert.Equal("MyResource.fr.resx", t.AssignedFiles[0].ItemSpec);
-            Assert.Equal("MyResource.resx", t.CultureNeutralAssignedFiles[0].ItemSpec);
+            using (var testEnv = TestEnvironment.Create())
+            {
+                // AssignCulture behaviour before ChangeWave 17.12
+                testEnv.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", "17.12");
+
+                AssignCulture t = new AssignCulture();
+                t.BuildEngine = new MockEngine();
+                ITaskItem i = new TaskItem("MyResource.fr.resx");
+                i.SetMetadata("Culture", "invalid");   // Bogus culture.
+                t.Files = new ITaskItem[] { i };
+                t.Execute();
+
+                Assert.Single(t.AssignedFiles);
+                Assert.Single(t.CultureNeutralAssignedFiles);
+                Assert.Equal("fr", t.AssignedFiles[0].GetMetadata("Culture"));
+                Assert.Equal("MyResource.fr.resx", t.AssignedFiles[0].ItemSpec);
+                Assert.Equal("MyResource.resx", t.CultureNeutralAssignedFiles[0].ItemSpec);
+            }
         }
 
         /// <summary>
@@ -101,7 +113,7 @@ public void AttributeForwarding()
 
         /// <summary>
         /// Test the case where an item has no embedded culture. For example:
-        /// "MyResource.resx"
+        /// "MyResource.resx".
         /// </summary>
         [Fact]
         public void NoCulture()
@@ -263,17 +275,22 @@ public void Pseudolocales_CaseInsensitive()
         }
 
         /// <summary>
-        /// Any pre-existing Culture attribute on the item is to be respected
+        /// Any pre-existing Culture attribute on the item is to be respected.
         /// </summary>
-        [Fact]
-        public void CultureMetaDataShouldBeRespected()
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void CultureMetaDataShouldBeRespected(bool enableRespectAlreadyAssignedItemCultureExplicitly)
         {
             AssignCulture t = new AssignCulture();
             t.BuildEngine = new MockEngine();
             ITaskItem i = new TaskItem("MyResource.fr.resx");
             i.SetMetadata("Culture", "en-GB");
             t.Files = new ITaskItem[] { i };
-            t.RespectAlreadyAssignedItemCulture = true;
+            if (enableRespectAlreadyAssignedItemCultureExplicitly)
+            {
+                t.RespectAlreadyAssignedItemCulture = true;
+            }
             t.Execute();
 
             Assert.Single(t.AssignedFiles);
@@ -284,17 +301,22 @@ public void CultureMetaDataShouldBeRespected()
         }
 
         /// <summary>
-        /// Any pre-existing Culture attribute on the item is not to be respected, because culture is not set
+        /// Any pre-existing Culture attribute on the item is not to be respected, because culture is not set.
         /// </summary>
-        [Fact]
-        public void CultureMetaDataShouldNotBeRespected()
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void CultureMetaDataShouldNotBeRespected(bool enableRespectAlreadyAssignedItemCultureExplicitly)
         {
             AssignCulture t = new AssignCulture();
             t.BuildEngine = new MockEngine();
             ITaskItem i = new TaskItem("MyResource.fr.resx");
             i.SetMetadata("Culture", "");
             t.Files = new ITaskItem[] { i };
-            t.RespectAlreadyAssignedItemCulture = true;
+            if (enableRespectAlreadyAssignedItemCultureExplicitly)
+            {
+                t.RespectAlreadyAssignedItemCulture = true;
+            }
             t.Execute();
 
             Assert.Single(t.AssignedFiles);
diff --git a/src/Tasks/AssignCulture.cs b/src/Tasks/AssignCulture.cs
index 277145c17d7..6aff24017d5 100644
--- a/src/Tasks/AssignCulture.cs
+++ b/src/Tasks/AssignCulture.cs
@@ -45,7 +45,7 @@ public class AssignCulture : TaskExtension
         /// If the flag set to 'true' the incoming list with existing Culture metadata will not be ammended and CultureNeutralAssignedFiles filename will be equal to the original.
         /// In case the Culture metadata was not provided, the logic of RespectAlreadyAssignedItemCulture will not take any effect.
         /// </summary>
-        public bool RespectAlreadyAssignedItemCulture { get; set; } = false;
+        public bool RespectAlreadyAssignedItemCulture { get; set; } = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12);
 
         /// <summary>
         /// This outgoing list of files is exactly the same as the incoming Files
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 5e81c64c525..b683ac3c6d7 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -3245,7 +3245,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       DependsOnTargets="AssignTargetPaths">
 
     <PropertyGroup>
-      <RespectAlreadyAssignedItemCulture Condition="'$(RespectAlreadyAssignedItemCulture)' == ''">false</RespectAlreadyAssignedItemCulture>
+      <RespectAlreadyAssignedItemCulture Condition="'$(RespectAlreadyAssignedItemCulture)' == '' and '$([MSBuild]::AreFeaturesEnabled(17.12))' != 'true'">false</RespectAlreadyAssignedItemCulture>
+      <RespectAlreadyAssignedItemCulture Condition="'$(RespectAlreadyAssignedItemCulture)' == '' and $([MSBuild]::AreFeaturesEnabled(17.12))">true</RespectAlreadyAssignedItemCulture>
     </PropertyGroup>
 
     <Warning Condition="'@(ResxWithNoCulture)'!=''" Code="MSB9000" Text="ResxWithNoCulture item type is deprecated. Use EmbeddedResource items instead."/>
