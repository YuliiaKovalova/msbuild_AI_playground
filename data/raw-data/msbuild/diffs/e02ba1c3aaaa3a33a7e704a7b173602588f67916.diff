diff --git a/src/Build/Utilities/FowlerNollVo1aHash.cs b/src/Build/Utilities/FowlerNollVo1aHash.cs
index a9b319e7cc0..f55ff6393af 100644
--- a/src/Build/Utilities/FowlerNollVo1aHash.cs
+++ b/src/Build/Utilities/FowlerNollVo1aHash.cs
@@ -1,6 +1,9 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System.Runtime.InteropServices;
+using System;
+
 namespace Microsoft.Build.Utilities
 {
     internal static class FowlerNollVo1aHash
@@ -27,19 +30,10 @@ internal static int ComputeHash32(string text)
         {
             uint hash = fnvOffsetBasisA32Bit;
 
-            unchecked
+            ReadOnlySpan<byte> span = MemoryMarshal.Cast<char, byte>(text.AsSpan());
+            foreach (byte b in span)
             {
-                for (int i = 0; i < text.Length; i++)
-                {
-                    char ch = text[i];
-                    byte b = (byte)ch;
-                    hash ^= b;
-                    hash *= fnvPrimeA32Bit;
-
-                    b = (byte)(ch >> 8);
-                    hash ^= b;
-                    hash *= fnvPrimeA32Bit;
-                }
+                hash = unchecked((hash ^ b) * fnvPrimeA32Bit);
             }
 
             return unchecked((int)hash);
@@ -78,19 +72,10 @@ internal static ulong ComputeHash64(string text)
         {
             ulong hash = fnvOffsetBasisA64Bit;
 
-            unchecked
+            ReadOnlySpan<byte> span = MemoryMarshal.Cast<char, byte>(text.AsSpan());
+            foreach (byte b in span)
             {
-                for (int i = 0; i < text.Length; i++)
-                {
-                    char ch = text[i];
-                    byte b = (byte)ch;
-                    hash ^= b;
-                    hash *= fnvPrimeA64Bit;
-
-                    b = (byte)(ch >> 8);
-                    hash ^= b;
-                    hash *= fnvPrimeA64Bit;
-                }
+                hash = unchecked((hash ^ b) * fnvPrimeA64Bit);
             }
 
             return hash;
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 4c1a4b8f53b..fcd663f17aa 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -386,18 +386,19 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <_GenerateBindingRedirectsIntermediateAppConfig>$(IntermediateOutputPath)$(TargetFileName).config</_GenerateBindingRedirectsIntermediateAppConfig>
   </PropertyGroup>
   
-  <PropertyGroup>
-    <MSBuildCopyMarkerName Condition ="'$(MSBuildCopyMarkerName)' == ''">$(MSBuildProjectFile)</MSBuildCopyMarkerName>
-	<!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 chars of the filename and either the ProjectGuid if it exists -->
+  <PropertyGroup Condition ="'$(MSBuildCopyMarkerName)' == ''">
+    <MSBuildCopyMarkerName>$(MSBuildProjectFile)</MSBuildCopyMarkerName>
+    <!-- For a long MSBuildProjectFile let's shorten this to 17 chars - using the first 8 chars of the filename and either the ProjectGuid if it exists -->
     <MSBuildCopyMarkerName Condition ="'$(MSBuildCopyMarkerName.Length)' &gt; '17' and '$(ProjectGuid)' != ''">$(MSBuildProjectFile.Substring(0,8)).$(ProjectGuid.Substring(1,8))</MSBuildCopyMarkerName>
-	<!-- or a filename hash if the guid is not present (in such case the filename was not shortened and is still over 17 chars long). -->
-	<MSBuildCopyMarkerName Condition ="'$(MSBuildCopyMarkerName.Length)' &gt; '17'">$(MSBuildProjectFile.Substring(0,8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString("X8"))</MSBuildCopyMarkerName>
+    <!-- or a filename hash if the guid is not present (in such case the filename was not shortened and is still over 17 chars long). -->
+    <MSBuildCopyMarkerName Condition ="'$(MSBuildCopyMarkerName.Length)' &gt; '17'">$(MSBuildProjectFile.Substring(0,8)).$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString("X8"))</MSBuildCopyMarkerName>
+    <MSBuildCopyMarkerName>$(MSBuildCopyMarkerName).Up2Date</MSBuildCopyMarkerName>
   </PropertyGroup>
 
   <ItemGroup>
     <IntermediateAssembly Include="$(IntermediateOutputPath)$(TargetName)$(TargetExt)"/>
     <FinalDocFile Include="@(DocFileItem->'$(OutDir)%(Filename)%(Extension)')"/>
-    <CopyUpToDateMarker Include="$([MSBuild]::NormalizePath('$(MSBuildProjectDirectory)', '$(IntermediateOutputPath)', '$(MSBuildCopyMarkerName).Up2Date'))" />
+    <CopyUpToDateMarker Include="$([MSBuild]::NormalizePath('$(MSBuildProjectDirectory)', '$(IntermediateOutputPath)', '$(MSBuildCopyMarkerName)'))" />
   </ItemGroup>
 
   <ItemGroup Condition="'$(ProduceReferenceAssembly)' == 'true'">
