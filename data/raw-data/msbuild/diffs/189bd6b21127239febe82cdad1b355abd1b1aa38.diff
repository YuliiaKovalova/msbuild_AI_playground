diff --git a/documentation/wiki/ChangeWaves.md b/documentation/wiki/ChangeWaves.md
index 1dfe8a21f13..03e13aad129 100644
--- a/documentation/wiki/ChangeWaves.md
+++ b/documentation/wiki/ChangeWaves.md
@@ -27,6 +27,7 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 ### 17.14
 - [.SLNX support - use the new parser for .sln and .slnx](https://github.com/dotnet/msbuild/pull/10836)
 - [Support custom culture in RAR](https://github.com/dotnet/msbuild/pull/11000)
+- [WarningsAsMessages, WarningsAsErrors, WarningsNotAsErrors are now supported on the engine side of MSBuild](https://github.com/dotnet/msbuild/pull/10942)
 
 ### 17.12
 - [Log TaskParameterEvent for scalar parameters](https://github.com/dotnet/msbuild/pull/9908)
diff --git a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
index 1174a41dd95..7a490b59def 100644
--- a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
+++ b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
@@ -174,40 +174,30 @@ public void TreatWarningsAsMessagesWhenSpecifiedIndirectly()
             VerifyBuildMessageEvent(logger);
         }
 
-        [Fact]
-        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditiveProperty()
-        {
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
-                GetTestProject(
-                    customProperties: new List<KeyValuePair<string, string>>
-                    {
-                        new KeyValuePair<string, string>("MSBuildWarningsAsMessages", "123"),
-                        new KeyValuePair<string, string>("MSBuildWarningsAsMessages", $@"$(MSBuildWarningsAsMessages);
-                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
-                        new KeyValuePair<string, string>("MSBuildWarningsAsMessages", "$(MSBuildWarningsAsMessages);ABC")
-                    }));
-
-            VerifyBuildMessageEvent(logger);
-        }
-
-
-        [Fact]
-        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditivePropertyNoPrefix()
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditiveProperty(bool usePrefix)
         {
+            string prefix = usePrefix ? "MSBuild" : "";
             MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
                 GetTestProject(
                     customProperties: new List<KeyValuePair<string, string>>
                     {
-                        new KeyValuePair<string, string>("WarningsAsMessages", "123"),
-                        new KeyValuePair<string, string>("WarningsAsMessages", $@"$(WarningsAsMessages);
+                        new KeyValuePair<string, string>($"{prefix}WarningsAsMessages", "123"),
+                        new KeyValuePair<string, string>($"{prefix}WarningsAsMessages", $@"$({prefix}WarningsAsMessages);
                                                                                        {ExpectedEventCode.ToLowerInvariant()}"),
-                        new KeyValuePair<string, string>("WarningsAsMessages", "$(WarningsAsMessages);ABC")
+                        new KeyValuePair<string, string>($"{prefix}WarningsAsMessages", $"$({prefix}WarningsAsMessages);ABC")
                     }));
 
             VerifyBuildMessageEvent(logger);
         }
 
         [Fact]
+        ///
+        /// This is for chaining the properties together via addition.
+        /// Furthermore it is intended to check if the prefix and no prefix variant interacts properly with each other.
+        ///
         public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditivePropertyCombination()
         {
             MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
@@ -215,49 +205,14 @@ public void TreatWarningsAsMessagesWhenSpecifiedThroughAdditivePropertyCombinati
                     customProperties: new List<KeyValuePair<string, string>>
                     {
                         new KeyValuePair<string, string>("MSBuildWarningsAsMessages", "123"),
-                        new KeyValuePair<string, string>("WarningsAsMessages", $@"$(BuildWarningsAsMessages);
+                        new KeyValuePair<string, string>("WarningsAsMessages", $@"$(MSBuildWarningsAsMessages);
                                                                                        {ExpectedEventCode.ToLowerInvariant()}"),
-                        new KeyValuePair<string, string>("MSBuildWarningsAsMessages", "$(BuildWarningsAsMessages);ABC")
+                        new KeyValuePair<string, string>("MSBuildWarningsAsMessages", "$(WarningsAsMessages);ABC")
                     }));
 
             VerifyBuildMessageEvent(logger);
         }
 
-        [Fact]
-        public void TreatWarningsNotAsErrorsWhenSpecifiedThroughAdditivePropertyx()
-        {
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
-                GetTestProject(
-                    treatAllWarningsAsErrors: true,
-                    customProperties: new List<KeyValuePair<string, string>>
-                    {
-                        new KeyValuePair<string, string>("MSBuildWarningsNotAsErrors", "123"),
-                        new KeyValuePair<string, string>("MSBuildWarningsNotAsErrors", $@"$(MSBuildWarningsNotAsErrors);
-                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
-                        new KeyValuePair<string, string>("MSBuildWarningsNotAsErrors", "$(MSBuildWarningsNotAsErrors);ABC")
-                    }));
-
-            VerifyBuildWarningEvent(logger);
-        }
-
-        [Fact]
-        public void TreatWarningsNotAsErrorsWhenSpecifiedThroughAdditivePropertyNoPrefix()
-        {
-            MockLogger logger = ObjectModelHelpers.BuildProjectExpectSuccess(
-                GetTestProject(
-                    treatAllWarningsAsErrors: true,
-                    customProperties: new List<KeyValuePair<string, string>>
-                    {
-                        new KeyValuePair<string, string>("WarningsNotAsErrors", "123"),
-                        new KeyValuePair<string, string>("WarningsNotAsErrors", $@"$(WarningsNotAsErrors);
-                                                                                       {ExpectedEventCode.ToLowerInvariant()}"),
-                        new KeyValuePair<string, string>("WarningsNotAsErrors", "$(WarningsNotAsErrors);ABC")
-                    }),
-                _output);
-
-            VerifyBuildWarningEvent(logger);
-        }
-
         [Fact]
         public void TreatWarningsNotAsErrorsWhenSpecifiedThroughAdditivePropertyCombination()
         {
@@ -295,7 +250,6 @@ public void TreatWarningsAsErrorsWhenSpecifiedThroughAdditiveProperty(bool MSBui
             VerifyBuildErrorEvent(logger);
         }
 
-
         [Fact]
         public void TreatWarningsAsErrorsWhenSpecifiedThroughAdditivePropertyCombination()
         {
@@ -467,6 +421,47 @@ public void WarningsNotAsErrorsAndMessages_Tests(bool useMSPrefix)
             }
         }
 
+
+
+        [Theory]
+        [InlineData("TreatWarningsAsErrors", "true", false)] // All warnings are treated as errors
+        [InlineData("WarningsAsErrors", "MSB1007", false)]
+        [InlineData("WarningsAsMessages", "MSB1007", false)]
+        [InlineData("WarningsNotAsErrors", "MSB1007", true)]
+        public void WarningsChangeWaveTest(string property, string propertyData, bool treatWarningsAsErrors)
+        {
+            using (TestEnvironment env = TestEnvironment.Create(_output))
+            {
+                string warningCode = "MSB1007";
+                string treatWarningsAsErrorsCodeProperty = treatWarningsAsErrors ? "<MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>" : "";
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_14.ToString());
+                TransientTestProjectWithFiles proj = env.CreateTestProjectWithFiles($@"
+                <Project>
+                    <PropertyGroup>
+                        {treatWarningsAsErrorsCodeProperty}
+                        <{property}>{propertyData}</{property}>
+                    </PropertyGroup>
+                    <Target Name='Build'>
+                        <Warning Text=""some random text"" Code='{warningCode}' />
+                    </Target>
+                </Project>");
+                if (treatWarningsAsErrors)
+                {
+                    // Since the "no prefix" variations can't do anything with the change wave disabled, this should always fail.
+                    MockLogger logger = proj.BuildProjectExpectFailure();
+                }
+                else
+                {
+                    MockLogger logger = proj.BuildProjectExpectSuccess();
+
+                    logger.WarningCount.ShouldBe(1);
+                    logger.ErrorCount.ShouldBe(0);
+
+                    logger.AssertLogContains(warningCode);
+                }
+            }
+        }
+
         /// <summary>
         /// Item1 and Item2 log warnings and continue, item 3 logs a warn-> error and prevents item 4 from running in the batched build.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index d1667b5184d..d1f15570b59 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -8,6 +8,7 @@
 using System.Globalization;
 using System.IO;
 using System.Linq;
+using System.Reflection.Metadata.Ecma335;
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.BackEnd.Logging;
@@ -1390,29 +1391,17 @@ private void ConfigureWarningsAsErrorsAndMessages()
             // Ensure everything that is required is available at this time
             if (project != null && buildEventContext != null && loggingService != null && buildEventContext.ProjectInstanceId != BuildEventContext.InvalidProjectInstanceId)
             {
-                if (String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrors)?.Trim(), "true", StringComparison.OrdinalIgnoreCase) ||
-                    String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrorsNoPrefix)?.Trim(), "true", StringComparison.OrdinalIgnoreCase))
+                if (String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.MSBuildPrefix + MSBuildConstants.TreatWarningsAsErrors)?.Trim(), "true", StringComparison.OrdinalIgnoreCase) ||
+                    (String.Equals(project.GetEngineRequiredPropertyValue(MSBuildConstants.TreatWarningsAsErrors)?.Trim(), "true", StringComparison.OrdinalIgnoreCase) &&
+                     ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14)))
                 {
                     // If <MSBuildTreatWarningsAsErrors was specified then an empty ISet<string> signals the IEventSourceSink to treat all warnings as errors
                     loggingService.AddWarningsAsErrors(buildEventContext, new HashSet<string>());
                 }
                 else
                 {
-                    ISet<string> warningsAsErrors = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsErrors));
-                    var warningsAsErrorsNoPrefix = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsErrorsNoPrefix));
-                    if (warningsAsErrorsNoPrefix != null)
-                    {
-                        if (warningsAsErrors != null)
-                        {
-                            warningsAsErrors.UnionWith(warningsAsErrorsNoPrefix);
-                        }
-                        else
-                        {
-                            warningsAsErrors = warningsAsErrorsNoPrefix;
-                        }
-                    }
-
-
+                    ISet<string> warningsAsErrors = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.MSBuildPrefix + MSBuildConstants.WarningsAsErrors),
+                                                                      project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsErrors));
 
                     if (warningsAsErrors?.Count > 0)
                     {
@@ -1420,20 +1409,8 @@ private void ConfigureWarningsAsErrorsAndMessages()
                     }
                 }
 
-                ISet<string> warningsNotAsErrors = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsNotAsErrors));
-                var warningsNotAsErrorsNoPrefix = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsNotAsErrorsNoPrefix));
-                if (warningsNotAsErrorsNoPrefix != null)
-                {
-                    if (warningsNotAsErrors != null)
-                    {
-                        warningsNotAsErrors.UnionWith(warningsNotAsErrorsNoPrefix);
-                    }
-                    else
-                    {
-                        warningsNotAsErrors = warningsNotAsErrorsNoPrefix;
-                    }
-                }
-
+                ISet<string> warningsNotAsErrors = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.MSBuildPrefix + MSBuildConstants.WarningsNotAsErrors),
+                                                                     project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsNotAsErrors));
 
 
                 if (warningsNotAsErrors?.Count > 0)
@@ -1441,13 +1418,8 @@ private void ConfigureWarningsAsErrorsAndMessages()
                     loggingService.AddWarningsNotAsErrors(buildEventContext, warningsNotAsErrors);
                 }
 
-                ISet<string> warningsAsMessages = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsMessages));
-                var warningsAsMessagesNoPrefix = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsMessagesNoPrefix));
-                if (warningsAsMessagesNoPrefix != null)
-                {
-                    warningsAsMessages?.UnionWith(warningsAsMessagesNoPrefix);
-                    warningsAsMessages ??= warningsAsMessagesNoPrefix;
-                }
+                ISet<string> warningsAsMessages = ParseWarningCodes(project.GetEngineRequiredPropertyValue(MSBuildConstants.MSBuildPrefix + MSBuildConstants.WarningsAsMessages),
+                                                                    project.GetEngineRequiredPropertyValue(MSBuildConstants.WarningsAsMessages));
 
                 if (warningsAsMessages?.Count > 0)
                 {
@@ -1465,16 +1437,40 @@ private void ConfigureKnownImmutableFolders()
             }
         }
 
-        private static ISet<string> ParseWarningCodes(string warnings)
+        private static ISet<string> ParseWarningCodes(string warnings, string warningsNoPrefix)
         {
-            if (String.IsNullOrWhiteSpace(warnings))
+            // When this changewave is rotated out and this gets deleted, please consider removing
+            // the <MSBuildWarningsAsMessages Condition="'$(MSBuildWarningsAsMessages)'==''">$(NoWarn)</MSBuildWarningsAsMessages>
+            // and the two following lines from the msbuild/src/Tasks/Microsoft.Common.CurrentVersion.targets
+            if (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_14))
             {
-                return null;
+                warningsNoPrefix = null;
             }
 
-            return new HashSet<string>(ExpressionShredder.SplitSemiColonSeparatedList(warnings), StringComparer.OrdinalIgnoreCase);
+            HashSet<string> result1 = null;
+            if (!String.IsNullOrWhiteSpace(warnings))
+            {
+                result1 = new HashSet<string>(ExpressionShredder.SplitSemiColonSeparatedList(warnings), StringComparer.OrdinalIgnoreCase);
+            }
+            HashSet<string> result2 = null;
+            if (!String.IsNullOrWhiteSpace(warningsNoPrefix))
+            {
+                result2 = new HashSet<string>(ExpressionShredder.SplitSemiColonSeparatedList(warningsNoPrefix), StringComparer.OrdinalIgnoreCase);
+            }
+
+            if (result1 != null)
+            {
+                if (result2 != null)
+                {
+                    result1.UnionWith(result2);
+                }
+                return result1;
+            }
+
+            return result2;
         }
 
+
         private sealed class DedicatedThreadsTaskScheduler : TaskScheduler
         {
             private readonly BlockingCollection<Task> _tasks = new BlockingCollection<Task>();
diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index c5e104056b0..e0bdae3d9a3 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -29,45 +29,29 @@ internal static class MSBuildConstants
         internal const string SdksPath = "MSBuildSDKsPath";
 
         /// <summary>
-        /// Name of the property that indicates that all warnings should be treated as errors.
+        ///  The prefix that was originally used. Now extracted out for the purpose of allowing even the non-prefixed variant.
         /// </summary>
-        internal const string TreatWarningsAsErrors = "MSBuildTreatWarningsAsErrors";
+        internal const string MSBuildPrefix = "MSBuild";
 
         /// <summary>
         /// Name of the property that indicates that all warnings should be treated as errors.
         /// </summary>
-        internal const string TreatWarningsAsErrorsNoPrefix = "TreatWarningsAsErrors";
+        internal const string TreatWarningsAsErrors = "TreatWarningsAsErrors";
 
         /// <summary>
         /// Name of the property that indicates a list of warnings to treat as errors.
         /// </summary>
-        internal const string WarningsAsErrors = "MSBuildWarningsAsErrors";
-
-        /// <summary>
-        /// Name of the property that indicates a list of warnings to treat as errors.
-        /// </summary>
-        internal const string WarningsAsErrorsNoPrefix = "WarningsAsErrors";
-
-        /// <summary>
-        /// Name of the property that indicates a list of warnings to not treat as errors.
-        /// </summary>
-        internal const string WarningsNotAsErrors = "MSBuildWarningsNotAsErrors";
+        internal const string WarningsAsErrors = "WarningsAsErrors";
 
         /// <summary>
         /// Name of the property that indicates a list of warnings to not treat as errors.
         /// </summary>
-        internal const string WarningsNotAsErrorsNoPrefix = "WarningsNotAsErrors";
-
-        /// <summary>
-        /// Name of the property that indicates the list of warnings to treat as messages.
-        /// </summary>
-        internal const string WarningsAsMessages = "MSBuildWarningsAsMessages";
-
+        internal const string WarningsNotAsErrors = "WarningsNotAsErrors";
 
         /// <summary>
         /// Name of the property that indicates the list of warnings to treat as messages.
         /// </summary>
-        internal const string WarningsAsMessagesNoPrefix = "WarningsAsMessages";
+        internal const string WarningsAsMessages = "WarningsAsMessages";
 
         /// <summary>
         /// The name of the environment variable that users can specify to override where NuGet assemblies are loaded from in the NuGetSdkResolver.
