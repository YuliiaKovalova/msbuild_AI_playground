diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index 2de52014162..3013635e969 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -40,10 +40,10 @@ public SdkResolverService_Tests()
         }
 
         [Fact]
-        // Sdk is not resolved.
+        // Scenario: Sdk is not resolved.
         public void AssertAllResolverErrorsLoggedWhenSdkNotResolved()
         {
-            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeNameSpecificResolvers: true));
+            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeResolversWithPatterns: true));
 
             SdkReference sdk = new SdkReference("notfound", "referencedVersion", "minimumVersion");
 
@@ -105,10 +105,11 @@ public void AssertResolverThrows()
 
 
         [Fact]
-        // MockSdkResolverWithNamePattern2 is specific resolver and successfully resolves sdk.
+        // Scenario: MockSdkResolverWithNamePattern2 is a specific resolver (i.e. resolver with pattern)
+        // and it successfully resolves sdk.
         public void AssertSecondResolverWithPatternCanResolve()
         {
-            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeNameSpecificResolvers: true));
+            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeResolversWithPatterns: true));
 
             SdkReference sdk = new SdkReference("2sdkName", "referencedVersion", "minimumVersion");
 
@@ -121,8 +122,8 @@ public void AssertSecondResolverWithPatternCanResolve()
         }
 
         [Fact]
-        // MockSdkResolverWithNamePattern1 is specific resolver, it is loaded but did not resolve sdk.
-        // MockSdkResolver1 (default) resolver resolves on a fallback. 
+        // Scenario: MockSdkResolverWithNamePattern1 is a specific resolver, it is loaded but did not resolve sdk.
+        // MockSdkResolver1 is a general resolver (i.e. resolver without pattern), it resolves sdk on a fallback. 
         public void AssertFirstResolverCanResolve()
         {
             SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy());
@@ -137,7 +138,7 @@ public void AssertFirstResolverCanResolve()
         }
 
         [Fact]
-        // MockSdkResolver1 has higher priority than MockSdkResolverWithNamePattern1 and resolves sdk.
+        // Scenario: MockSdkResolver1 has higher priority than MockSdkResolverWithNamePattern1 and resolves sdk.
         public void AssertFirstResolverWithPatternCantResolveChangeWave17_4()
         {
             using (TestEnvironment env = TestEnvironment.Create())
@@ -146,7 +147,7 @@ public void AssertFirstResolverWithPatternCantResolveChangeWave17_4()
                 env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_4.ToString());
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
 
-                SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeNameSpecificResolvers: true));
+                SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeResolversWithPatterns: true));
 
                 SdkReference sdk = new SdkReference("1sdkName", "referencedVersion", "minimumVersion");
 
@@ -160,10 +161,11 @@ public void AssertFirstResolverWithPatternCantResolveChangeWave17_4()
         }
 
         [Fact]
-        // MockSdkResolver1 has higher priority than MockSdkResolverWithNamePattern1 but does not resolve sdk becuase it is default and MockSdkResolverWithNamePattern1 is specific.
+        // Scenario: MockSdkResolver1 has higher priority than MockSdkResolverWithNamePattern1 but MockSdkResolverWithNamePattern1 resolves sdk,
+        // becuase MockSdkResolver1 is general and MockSdkResolverWithNamePattern1 is specific.
         public void AssertFirstResolverWithPatternCanResolve()
         {
-            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeNameSpecificResolvers: true));
+            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeResolversWithPatterns: true));
 
             SdkReference sdk = new SdkReference("11sdkName", "referencedVersion", "minimumVersion");
 
@@ -602,20 +604,20 @@ public void IsRunningInVisualStudioIsSetForResolverContext()
         private class MockLoaderStrategy : SdkResolverLoader
         {
             private List<SdkResolver> _resolvers;
-            private List<Tuple<string, SdkResolver>> _nameSpecificResolvers;
+            private List<Tuple<string, SdkResolver>> _resolversWithPatterns;
 
 
-            public MockLoaderStrategy(bool includeErrorResolver = false, bool includeNameSpecificResolvers = false) : this()
+            public MockLoaderStrategy(bool includeErrorResolver = false, bool includeResolversWithPatterns = false) : this()
             {
                 if (includeErrorResolver)
                 {
                     _resolvers.Add(new MockSdkResolverThrows());
                 }
 
-                if (includeNameSpecificResolvers)
+                if (includeResolversWithPatterns)
                 {
-                    _nameSpecificResolvers.Add(new Tuple<string, SdkResolver>("1.*", new MockSdkResolverWithNamePattern1()));
-                    _nameSpecificResolvers.Add(new Tuple<string, SdkResolver>(".*", new MockSdkResolverWithNamePattern2()));
+                    _resolversWithPatterns.Add(new Tuple<string, SdkResolver>("1.*", new MockSdkResolverWithNamePattern1()));
+                    _resolversWithPatterns.Add(new Tuple<string, SdkResolver>(".*", new MockSdkResolverWithNamePattern2()));
                 }
             }
 
@@ -629,7 +631,7 @@ private MockLoaderStrategy()
                     new MockSdkResolverWithState()
                 };
 
-                _nameSpecificResolvers = new List<Tuple<string, SdkResolver>>();
+                _resolversWithPatterns = new List<Tuple<string, SdkResolver>>();
             }
 
             internal override IList<SdkResolver> LoadResolvers(LoggingContext loggingContext, ElementLocation location)
@@ -646,7 +648,7 @@ internal override IList<SdkResolverManifest> GetResolversManifests(LoggingContex
                     SdkResolverManifest sdkResolverManifest = new SdkResolverManifest(resolver.Name, null, null);
                     manifests.Add(sdkResolverManifest);
                 }
-                foreach (var pair in _nameSpecificResolvers)
+                foreach (var pair in _resolversWithPatterns)
                 {
                     SdkResolverManifest sdkResolverManifest = new SdkResolverManifest(pair.Item2.Name, null, pair.Item1);
                     manifests.Add(sdkResolverManifest);
@@ -664,7 +666,7 @@ protected internal override IList<SdkResolver> LoadResolvers(SdkResolverManifest
                         resolvers.Add(resolver);
                     }
                 }
-                foreach (var pair in _nameSpecificResolvers)
+                foreach (var pair in _resolversWithPatterns)
                 {
                     if (pair.Item2.Name == manifest.Name)
                     {
@@ -734,7 +736,7 @@ public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase r
                 resolverContext.Logger.LogMessage("MockSdkResolverWithNamePattern1 running", MessageImportance.Normal);
 
                 if (sdk.Name.StartsWith("11"))
-                    return factory.IndicateSuccess("resolverpathwithnamepattern1", "version1");
+                    return factory.IndicateSuccess("resolverpathwithnamepattern1", "version3");
 
                 return factory.IndicateFailure(new[] { "ERROR3" });
             }
@@ -751,7 +753,7 @@ public override SdkResultBase Resolve(SdkReference sdk, SdkResolverContextBase r
                 resolverContext.Logger.LogMessage("MockSdkResolverWithNamePattern2 running", MessageImportance.Normal);
 
                 if (sdk.Name.StartsWith("2"))
-                    return factory.IndicateSuccess("resolverpathwithnamepattern2", "version2", new[] { "WARNING4" });
+                    return factory.IndicateSuccess("resolverpathwithnamepattern2", "version4", new[] { "WARNING4" });
 
                 return factory.IndicateFailure(new[] { "ERROR4" }, new[] { "WARNING4" });
             }
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index 1eb283b9487..d6a44e870fa 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -103,10 +103,10 @@ internal virtual IList<SdkResolverManifest> FindPotentialSdkResolversManifests(s
                 var assembly = Path.Combine(subfolder.FullName, $"{subfolder.Name}.dll");
                 var manifest = Path.Combine(subfolder.FullName, $"{subfolder.Name}.xml");
 
-                var assemblyAdded = TryAddAssembly(assembly, manifestsList);
+                var assemblyAdded = TryAddAssemblyManifestFromDll(assembly, manifestsList);
                 if (!assemblyAdded)
                 {
-                    assemblyAdded = TryAddAssemblyFromManifest(manifest, subfolder.FullName, manifestsList, location);
+                    assemblyAdded = TryAddAssemblyManifestFromXml(manifest, subfolder.FullName, manifestsList, location);
                 }
 
                 if (!assemblyAdded)
@@ -156,7 +156,7 @@ public int GetHashCode(DirectoryInfo value)
             }
         }
 
-        private bool TryAddAssemblyFromManifest(string pathToManifest, string manifestFolder, List<SdkResolverManifest> manifestsList, ElementLocation location)
+        private bool TryAddAssemblyManifestFromXml(string pathToManifest, string manifestFolder, List<SdkResolverManifest> manifestsList, ElementLocation location)
         {
             if (!string.IsNullOrEmpty(pathToManifest) && !FileUtilities.FileExistsNoThrow(pathToManifest)) return false;
 
@@ -198,7 +198,7 @@ private bool TryAddAssemblyFromManifest(string pathToManifest, string manifestFo
             return true;
         }
 
-        private bool TryAddAssembly(string assemblyPath, List<SdkResolverManifest> manifestsList)
+        private bool TryAddAssemblyManifestFromDll(string assemblyPath, List<SdkResolverManifest> manifestsList)
         {
             if (string.IsNullOrEmpty(assemblyPath) || !FileUtilities.FileExistsNoThrow(assemblyPath)) return false;
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
index 23a7b590ea6..a5b1e86d2f6 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
@@ -62,7 +62,7 @@ internal static SdkResolverManifest Load(string filePath)
             return null;
         }
 
-        // This parsing code is very specific, but it should be all right as long as manifest has simple structure.
+        // This parsing code is very specific and not forward compatible, but it should be all right.
         private static SdkResolverManifest ParseSdkResolverElement(XmlReader reader)
         {
             SdkResolverManifest manifest = new SdkResolverManifest();
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 9c6982b997e..4b975c4e8dd 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -13,7 +13,6 @@
 using System.Reflection;
 using Microsoft.Build.Eventing;
 using System.Linq;
-using System.Xml.Schema;
 using System.Text.RegularExpressions;
 
 #nullable disable
@@ -44,6 +43,9 @@ internal class SdkResolverService : ISdkResolverService
         /// <summary>
         /// Stores the list of SDK resolvers which were loaded.
         /// </summary>
+        /// <remarks>
+        /// Need it for supporting the ChangeWave less than <see cref="ChangeWaves.Wave17_4"/>. Remove when move out Wave17_4.
+        /// </remarks>
         private IList<SdkResolver> _resolversList;
 
         /// <summary>
@@ -54,10 +56,10 @@ internal class SdkResolverService : ISdkResolverService
         /// <summary>
         /// Stores the list of manifests of SDK resolvers which could be loaded.
         /// </summary>
-        private IList<SdkResolverManifest> _resolversRegistry;
+        private IList<SdkResolverManifest> _resolversManifestsRegistry;
 
         /// <summary>
-        /// The regex time-out interval for the  name pattern in milliseconds.
+        /// The time-out interval for the name pattern regex in milliseconds.
         /// </summary>
         private const int ResolverNamePatternRegexTimeoutMsc = 500;
 
@@ -112,7 +114,7 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC
         {
             if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
             {
-                return ResolveSdkUsingMostSpecificResolvers(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
+                return ResolveSdkUsingResolversWithPatternsFirst(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
             }
             else
             {
@@ -120,15 +122,21 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC
             }
         }
 
-        private SdkResult ResolveSdkUsingMostSpecificResolvers(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
+        /// <remarks>
+        /// Resolves the sdk in two passes. First pass consists of all specific resolvers (i.e. resolvers with pattern), which match the sdk name.
+        /// The resolvers are ordered by the priority in first pass and are tried until one of them succeeds.
+        /// If the first pass is unsuccessful, on the second pass all the general resolvers (i.e. resolvers without pattern), ordered by their priority, are tried one after one.
+        /// After that, if the second pass is unsuccessful, sdk resolution is unsuccessful.
+        /// </remarks>
+        private SdkResult ResolveSdkUsingResolversWithPatternsFirst(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
-            if (_resolversRegistry == null)
+            if (_resolversManifestsRegistry == null)
             {
-                RegisterResolvers(loggingContext, sdkReferenceLocation);
+                RegisterResolversManifests(loggingContext, sdkReferenceLocation);
             }
 
-            // Pick up the most specific resolvers (i.e. resolvers with the longest pattern that matches) from the list of resolvers.
-            List<SdkResolverManifest> matchingResolversManifests = _resolversRegistry
+            // Pick up the matching specific resolvers from the list of resolvers.
+            List<SdkResolverManifest> matchingResolversManifests = _resolversManifestsRegistry
                 .Where(r => !string.IsNullOrEmpty(r.NamePattern) && Regex.IsMatch(sdk.Name, r.NamePattern, RegexOptions.None, TimeSpan.FromMilliseconds(ResolverNamePatternRegexTimeoutMsc)))
                 .ToList();
 
@@ -136,6 +144,7 @@ private SdkResult ResolveSdkUsingMostSpecificResolvers(int submissionId, SdkRefe
             SdkResult sdkResult;
             if (matchingResolversManifests.Count != 0)
             {
+                // First pass.
                 resolvers = GetResolvers(matchingResolversManifests, loggingContext, sdkReferenceLocation);
 
                 if (TryResolveSdkUsingSpecifiedResolvers(
@@ -154,9 +163,9 @@ private SdkResult ResolveSdkUsingMostSpecificResolvers(int submissionId, SdkRefe
                 }
             }
 
-            // Fallback to non-specific resolvers. 
+            // Second pass: fallback to general resolvers. 
             resolvers = GetResolvers(
-                _resolversRegistry.Where(r => string.IsNullOrEmpty(r.NamePattern)).ToList(),
+                _resolversManifestsRegistry.Where(r => string.IsNullOrEmpty(r.NamePattern)).ToList(),
                 loggingContext,
                 sdkReferenceLocation).ToList();
 
@@ -189,16 +198,16 @@ private List<SdkResolver> GetResolvers(IList<SdkResolverManifest> resolversManif
                 {
                     lock (_lockObject)
                     {
-                        // Loading of the needed resolvers.
-                        IList<SdkResolver> newResolvers = _sdkResolverLoader.LoadResolvers(resolverManifest, loggingContext, sdkReferenceLocation);
-                        _resolversDict[resolverManifest] = newResolvers;
-                        resolvers.AddRange(newResolvers);
+                        if (!_resolversDict.ContainsKey(resolverManifest))
+                        {
+                            // Loading of the needed resolvers.
+                            IList<SdkResolver> newResolvers = _sdkResolverLoader.LoadResolvers(resolverManifest, loggingContext, sdkReferenceLocation);
+                            _resolversDict[resolverManifest] = newResolvers;
+                        }
                     }
                 }
-                else
-                {
-                    resolvers.AddRange(_resolversDict[resolverManifest]);
-                }
+
+                resolvers.AddRange(_resolversDict[resolverManifest]);
             }
             return resolvers.OrderBy(t => t.Priority).ToList();
         }
@@ -323,7 +332,7 @@ internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<
                 _sdkResolverLoader = resolverLoader;
             }
 
-            _resolversRegistry = null;
+            _resolversManifestsRegistry = null;
             _resolversDict = null;
             _resolversList = null;
 
@@ -331,10 +340,10 @@ internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<
             {
                 if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4))
                 {
-                    _resolversRegistry = new List<SdkResolverManifest>();
+                    _resolversManifestsRegistry = new List<SdkResolverManifest>();
                     _resolversDict = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
                     SdkResolverManifest sdkResolverManifest = new SdkResolverManifest("TestResolvers", null, ".*");
-                    _resolversRegistry.Add(sdkResolverManifest);
+                    _resolversManifestsRegistry.Add(sdkResolverManifest);
                     _resolversDict[sdkResolverManifest] = resolvers;
                 }
                 else
@@ -393,21 +402,21 @@ private void Initialize(LoggingContext loggingContext, ElementLocation location)
             }
         }
 
-        private void RegisterResolvers(LoggingContext loggingContext, ElementLocation location)
+        private void RegisterResolversManifests(LoggingContext loggingContext, ElementLocation location)
         {
             lock (_lockObject)
             {
-                if (_resolversRegistry != null)
+                if (_resolversManifestsRegistry != null)
                 {
                     return;
                 }
 
-                _resolversRegistry = _sdkResolverLoader.GetResolversManifests(loggingContext, location);
+                _resolversManifestsRegistry = _sdkResolverLoader.GetResolversManifests(loggingContext, location);
                 _resolversDict = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
 
                 IList<SdkResolver> defaultResolvers = _sdkResolverLoader.LoadDefaultResolvers(loggingContext, location);
                 SdkResolverManifest sdkResolverManifest = new SdkResolverManifest("Default Resolvers", null, null);
-                _resolversRegistry.Add(sdkResolverManifest);
+                _resolversManifestsRegistry.Add(sdkResolverManifest);
                 _resolversDict[sdkResolverManifest] = defaultResolvers;
             }
         }
@@ -421,7 +430,7 @@ private void SetResolverState(int submissionId, SdkResolver resolver, object sta
                     submissionId,
                     _ => new ConcurrentDictionary<SdkResolver, object>(
                         NativeMethodsShared.GetLogicalCoreCount(),
-                        ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4) ? _resolversRegistry.Count : _resolversList.Count));
+                        ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4) ? _resolversManifestsRegistry.Count : _resolversList.Count));
 
                 resolverState.AddOrUpdate(resolver, state, (sdkResolver, obj) => state);
             }
diff --git a/src/Framework/ChangeWaves.cs b/src/Framework/ChangeWaves.cs
index 7cf3b15987e..ca49aaf226a 100644
--- a/src/Framework/ChangeWaves.cs
+++ b/src/Framework/ChangeWaves.cs
@@ -27,7 +27,7 @@ internal class ChangeWaves
         internal static readonly Version Wave17_0 = new Version(17, 0);
         internal static readonly Version Wave17_2 = new Version(17, 2);
         internal static readonly Version Wave17_4 = new Version(17, 4);
-        internal static readonly Version[] AllWaves = { Wave17_0, Wave17_2, Wave17_4};
+        internal static readonly Version[] AllWaves = { Wave17_0, Wave17_2, Wave17_4 };
 
         /// <summary>
         /// Special value indicating that all features behind all Change Waves should be enabled.
