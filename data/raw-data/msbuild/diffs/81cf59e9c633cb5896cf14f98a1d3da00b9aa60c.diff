diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index e27050b50dc..3660ea702b5 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -13,6 +13,7 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Graph;
+using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 using Shouldly;
 using Xunit;
@@ -477,6 +478,52 @@ public void PreprocessSwitchIdentificationTests(string preprocess)
             unquoteParameters.ShouldBeTrue();
         }
 
+        [Fact]
+        public void EvaluationFromCommandLineSwitchIdentificationTests()
+        {
+            CommandLineSwitches.IsParameterizedSwitch(
+                "getProperty",
+                out CommandLineSwitches.ParameterizedSwitch parameterizedSwitch,
+                out string duplicateSwitchErrorMessage,
+                out bool multipleParametersAllowed,
+                out string missingParametersErrorMessage,
+                out _,
+                out _);
+
+            parameterizedSwitch.ShouldBe(CommandLineSwitches.ParameterizedSwitch.GetProperty);
+            duplicateSwitchErrorMessage.ShouldBeNull();
+            multipleParametersAllowed.ShouldBeTrue();
+            missingParametersErrorMessage.ShouldNotBeNullOrEmpty();
+
+            CommandLineSwitches.IsParameterizedSwitch(
+                "getItem",
+                out parameterizedSwitch,
+                out duplicateSwitchErrorMessage,
+                out multipleParametersAllowed,
+                out missingParametersErrorMessage,
+                out _,
+                out _);
+
+            parameterizedSwitch.ShouldBe(CommandLineSwitches.ParameterizedSwitch.GetItem);
+            duplicateSwitchErrorMessage.ShouldBeNull();
+            multipleParametersAllowed.ShouldBeTrue();
+            missingParametersErrorMessage.ShouldNotBeNullOrEmpty();
+
+            CommandLineSwitches.IsParameterizedSwitch(
+                "getTargetResult",
+                out parameterizedSwitch,
+                out duplicateSwitchErrorMessage,
+                out multipleParametersAllowed,
+                out missingParametersErrorMessage,
+                out _,
+                out _);
+
+            parameterizedSwitch.ShouldBe(CommandLineSwitches.ParameterizedSwitch.GetTargetResult);
+            duplicateSwitchErrorMessage.ShouldBeNull();
+            multipleParametersAllowed.ShouldBeTrue();
+            missingParametersErrorMessage.ShouldNotBeNullOrEmpty();
+        }
+
         [Theory]
         [InlineData("targets")]
         [InlineData("tArGeTs")]
@@ -743,6 +790,96 @@ public void SetParameterizedSwitchTests2()
             Assert.Equal("B", parameters[1]);
         }
 
+        [Fact]
+        public void SettingGetPropertyTurnsDownVerbosity()
+        {
+            using TestEnvironment env = TestEnvironment.Create();
+            string path = env.CreateFile("foo.csproj", string.Empty).Path;
+            CommandLineSwitches switches = new();
+            switches.SetParameterizedSwitch(CommandLineSwitches.ParameterizedSwitch.Verbosity, "diag", "diag", true, true, true);
+            switches.SetParameterizedSwitch(CommandLineSwitches.ParameterizedSwitch.BinaryLogger, "outputPath.binlog", "outputPath.binlog", true, true, true);
+            switches.SetParameterizedSwitch(CommandLineSwitches.ParameterizedSwitch.GetProperty, "MyProp", "MyProp", true, true, true);
+            switches.SetParameterizedSwitch(CommandLineSwitches.ParameterizedSwitch.Project, path, path, true, true, true);
+            switches.SetParameterlessSwitch(CommandLineSwitches.ParameterlessSwitch.NoAutoResponse, "-noautoresponse");
+            string projectFile = string.Empty;
+            string[] targets = Array.Empty<string>();
+            string toolsVersion = string.Empty;
+            Dictionary<string, string> globalProperties = new(0);
+            ILogger[] loggers = Array.Empty<ILogger>();
+            LoggerVerbosity verbosity = LoggerVerbosity.Normal;
+            LoggerVerbosity originalVerbosity = LoggerVerbosity.Normal;
+            List<DistributedLoggerRecord> distributedLoggerRecords = new(0);
+#if FEATURE_XML_SCHEMA_VALIDATION
+            bool needToValidateProject = false;
+            string schemaFile = string.Empty;
+#endif
+            int cpuCount = 0;
+            bool enableNodeReuse = false;
+            TextWriter preprocessWriter = null;
+            TextWriter targetsWriter = null;
+            bool detailedSummary = false;
+            ISet<string> warningsAsErrors = new HashSet<string>(0);
+            ISet<string> warningsNotAsErrors = new HashSet<string>(0);
+            ISet<string> warningsAsMessages = new HashSet<string>(0);
+            bool enableRestore = false;
+            bool interactive = false;
+            ProfilerLogger profilerLogger = null;
+            bool enableProfiler = false;
+            Dictionary<string, string> restoreProperties = new(0);
+            ProjectIsolationMode isolateProjects = ProjectIsolationMode.False;
+            GraphBuildOptions graphBuild = null;
+            string[] inputResultsCaches = Array.Empty<string>();
+            string outputResultsCache = string.Empty;
+            bool lowPriority = false;
+            bool question = false;
+            string[] getProperty = Array.Empty<string>();
+            string[] getItem = Array.Empty<string>();
+            string[] getTargetResult = Array.Empty<string>();
+            bool recursing = false;
+            string commandLine = string.Empty;
+            MSBuildApp.ProcessCommandLineSwitches(
+                new CommandLineSwitches(),
+                switches,
+                ref projectFile,
+                ref targets,
+                ref toolsVersion,
+                ref globalProperties,
+                ref loggers,
+                ref verbosity,
+                ref originalVerbosity,
+                ref distributedLoggerRecords,
+    #if FEATURE_XML_SCHEMA_VALIDATION
+                ref needToValidateProject,
+                ref schemaFile,
+    #endif
+                ref cpuCount,
+                ref enableNodeReuse,
+                ref preprocessWriter,
+                ref targetsWriter,
+                ref detailedSummary,
+                ref warningsAsErrors,
+                ref warningsNotAsErrors,
+                ref warningsAsMessages,
+                ref enableRestore,
+                ref interactive,
+                ref profilerLogger,
+                ref enableProfiler,
+                ref restoreProperties,
+                ref isolateProjects,
+                ref graphBuild,
+                ref inputResultsCaches,
+                ref outputResultsCache,
+                ref lowPriority,
+                ref question,
+                ref getProperty,
+                ref getItem,
+                ref getTargetResult,
+                recursing,
+                commandLine).ShouldBeTrue();
+
+            verbosity.ShouldBe(LoggerVerbosity.Quiet, "Should have been quiet; was " + verbosity);
+        }
+
         [Fact]
         public void SetParameterizedSwitchTests3()
         {
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index dd838ef172f..2fac7c2a3b1 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -566,6 +566,7 @@ public void InvalidVerbosity()
                 MSBuildApp.ProcessVerbositySwitch("loquacious");
             });
         }
+
         [Fact]
         public void ValidMaxCPUCountSwitch()
         {
@@ -617,6 +618,58 @@ public void InvalidMaxCPUCountSwitch4()
             });
         }
 
+        [Theory]
+        [InlineData("-getProperty:Foo;Bar", true, "EvalValue", false, false)]
+        [InlineData("-getProperty:Foo;Bar -t:Build", true, "TargetValue", false, false)]
+        [InlineData("-getItem:MyItem", false, "", true, false)]
+        [InlineData("-getItem:MyItem -t:Build", false, "", true, true)]
+        [InlineData("-getItem:WrongItem -t:Build", false, "", false, false)]
+        [InlineData("-getProperty:Foo;Bar -getItem:MyItem -t:Build", true, "TargetValue", true, true)]
+        [InlineData("-getProperty:Foo;Bar -getItem:MyItem", true, "EvalValue", true, false)]
+        public void ExecuteAppWithGetPropertyAndItem(string extraSwitch, bool fooPresent, string fooResult, bool itemIncludesAlwaysThere, bool itemIncludesTargetItem)
+        {
+            using TestEnvironment env = TestEnvironment.Create();
+            TransientTestFile project = env.CreateFile("testProject.csproj", @"
+<Project>
+
+  <PropertyGroup>
+    <Foo>EvalValue</Foo>
+    <Baz>InnocuousValue</Baz>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <MyItem Include=""itemAlwaysThere"" Metadatum=""metadatumValue"" />
+  </ItemGroup>
+
+  <Target Name=""MyTarget"" BeforeTargets=""Build"">
+    <PropertyGroup>
+      <Foo>TargetValue</Foo>
+    </PropertyGroup>
+    <ItemGroup>
+      <MyItem Include=""targetItem"" Metadato=""OtherMetadatum"" />
+    </ItemGroup>
+  </Target>
+
+  <Target Name=""Build"">
+
+  </Target>
+
+</Project>
+");
+            string results = RunnerUtilities.ExecMSBuild($" {project.Path} {extraSwitch}", out bool success);
+            success.ShouldBeTrue();
+            if (fooPresent)
+            {
+                results.ShouldContain($"\"Foo\": \"{fooResult}\"");
+                results.ShouldContain("\"Bar\": \"\"");
+            }
+
+            results.ShouldNotContain("InnocuousValue");
+
+            results.Contains("itemAlwaysThere").ShouldBe(itemIncludesAlwaysThere);
+            results.Contains("targetItem").ShouldBe(itemIncludesTargetItem);
+        }
+
         /// <summary>
         /// Regression test for bug where the MSBuild.exe command-line app
         /// would sometimes set the UI culture to just "en" which is considered a "neutral" UI
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 399dedd3906..bd3193f602d 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1063,8 +1063,15 @@ private static void PrintItemInstancesInJsonFormat(string[] itemNames, ProjectIn
                         Console.WriteLine($"\t\t\t\t\"{metadatum.Name}\": \"{metadatum.EvaluatedValue}\",");
                     }
 
+                    foreach (string metadatumName in FileUtilities.ItemSpecModifiers.All)
+                    {
+                        Console.WriteLine($"\t\t\t\t\"{metadatumName}\": \"{item.GetMetadataValue(metadatumName)}\",");
+                    }
+
                     Console.WriteLine("\t\t\t},");
                 }
+
+                Console.WriteLine("\t\t],");
             }
 
             Console.WriteLine("\t},");
@@ -1091,8 +1098,15 @@ private static void PrintItemsInJsonFormat(string[] itemNames, Project project)
                         Console.WriteLine($"\t\t\t\t\"{metadatum.Name}\": \"{metadatum.EvaluatedValue}\",");
                     }
 
+                    foreach (string metadatumName in FileUtilities.ItemSpecModifiers.All)
+                    {
+                        Console.WriteLine($"\t\t\t\t\"{metadatumName}\": \"{item.GetMetadataValue(metadatumName)}\",");
+                    }
+
                     Console.WriteLine("\t\t\t},");
                 }
+
+                Console.WriteLine("\t\t],");
             }
 
             Console.WriteLine("\t},");
@@ -2383,7 +2397,7 @@ private static bool GatherAutoResponseFileSwitchesFromFullPath(string autoRespon
         /// performs deeper error checking on the switches and their parameters.
         /// </summary>
         /// <returns>true, if build can be invoked</returns>
-        private static bool ProcessCommandLineSwitches(
+        internal static bool ProcessCommandLineSwitches(
             CommandLineSwitches switchesFromAutoResponseFile,
             CommandLineSwitches switchesNotFromAutoResponseFile,
             ref string projectFile,
@@ -2640,6 +2654,7 @@ private static bool ProcessCommandLineSwitches(
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLogger],
                         commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.ProfileEvaluation],
                         groupedFileLoggerParameters,
+                        getProperty.Length + getItem.Length + getTargetResult.Length == 0,
                         out distributedLoggerRecords,
                         out verbosity,
                         out originalVerbosity,
@@ -3513,6 +3528,7 @@ private static ILogger[] ProcessLoggingSwitches(
             string[] binaryLoggerParameters,
             string[] profileEvaluationParameters,
             string[][] groupedFileLoggerParameters,
+            bool canAdjustVerbosity,
             out List<DistributedLoggerRecord> distributedLoggerRecords,
             out LoggerVerbosity verbosity,
             out LoggerVerbosity originalVerbosity,
@@ -3533,7 +3549,7 @@ private static ILogger[] ProcessLoggingSwitches(
             var loggers = new List<ILogger>();
 
             var outVerbosity = verbosity;
-            ProcessBinaryLogger(binaryLoggerParameters, loggers, ref outVerbosity);
+            ProcessBinaryLogger(binaryLoggerParameters, loggers, canAdjustVerbosity, ref outVerbosity);
 
             ProcessLoggerSwitch(loggerSwitchParameters, loggers, verbosity);
 
@@ -3649,7 +3665,7 @@ private static void ProcessFileLoggers(string[][] groupedFileLoggerParameters, L
             }
         }
 
-        private static void ProcessBinaryLogger(string[] binaryLoggerParameters, List<ILogger> loggers, ref LoggerVerbosity verbosity)
+        private static void ProcessBinaryLogger(string[] binaryLoggerParameters, List<ILogger> loggers, bool canAdjustVerbosity, ref LoggerVerbosity verbosity)
         {
             if (binaryLoggerParameters == null || binaryLoggerParameters.Length == 0)
             {
@@ -3663,7 +3679,7 @@ private static void ProcessBinaryLogger(string[] binaryLoggerParameters, List<IL
             // If we have a binary logger, force verbosity to diagnostic.
             // The only place where verbosity is used downstream is to determine whether to log task inputs.
             // Since we always want task inputs for a binary logger, set it to diagnostic.
-            verbosity = LoggerVerbosity.Diagnostic;
+            verbosity = canAdjustVerbosity ? LoggerVerbosity.Diagnostic : verbosity;
 
             loggers.Add(logger);
         }
