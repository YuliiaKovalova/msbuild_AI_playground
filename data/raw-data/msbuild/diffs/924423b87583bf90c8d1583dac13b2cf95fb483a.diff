diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 38ecbafccc9..7339ac36cd0 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -273,7 +273,7 @@ public bool IsRunningMultipleNodes
         /// Contains all warnings that should be logged as errors.
         /// Non-null empty set when all warnings should be treated as errors.
         /// </summary>
-        private HashSet<string> WarningsAsErrors { get; set; }
+        private ICollection<string> WarningsAsErrors { get; set; }
 
         public bool ShouldTreatWarningAsError(string warningCode)
         {
diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index 1a6c9e3c39c..c99c17040d1 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -293,6 +293,28 @@ public void Translate<T, L>(ref IList<T> list, ObjectTranslator<T> objectTransla
                 }
             }
 
+            /// <summary>
+            /// Translates a collection of strings to the specified type using an <see cref="NodePacketCollectionCreator{T}"/>
+            /// </summary>
+            /// <param name="collection">The collection to be translated.</param>
+            /// <param name="collectionFactory">factory to create the IList.</param>
+            /// <typeparam name="T">The type of collection to be created.</typeparam>
+            public void Translate<T>(ref ICollection<string> collection, NodePacketCollectionCreator<T> collectionFactory) where T : ICollection<string>
+            {
+                if (!TranslateNullable(collection))
+                {
+                    return;
+                }
+
+                int count = _reader.ReadInt32();
+                collection = collectionFactory(count);
+
+                for (int i = 0; i < count; i++)
+                {
+                    collection.Add(_reader.ReadString());
+                }
+            }
+
             /// <summary>
             /// Translates a DateTime.
             /// </summary>
@@ -883,6 +905,27 @@ public void Translate<T, L>(ref IList<T> list, ObjectTranslator<T> objectTransla
                 }
             }
 
+            /// <summary>
+            /// Translates a collection of strings to the specified type using an <see cref="NodePacketCollectionCreator{T}"/>
+            /// </summary>
+            /// <param name="collection">The collection to be translated.</param>
+            /// <param name="collectionFactory">factory to create the IList.</param>
+            /// <typeparam name="T">The type of collection to be created.</typeparam>
+            public void Translate<T>(ref ICollection<string> list, NodePacketCollectionCreator<T> collectionFactory) where T : ICollection<string>
+            {
+                if (!TranslateNullable(list))
+                {
+                    return;
+                }
+
+                _writer.Write(list.Count);
+
+                foreach(string item in list)
+                {
+                    _writer.Write(item);
+                }
+            }
+
             /// <summary>
             /// Translates a DateTime.
             /// </summary>
diff --git a/src/Shared/ITranslator.cs b/src/Shared/ITranslator.cs
index 6fec218805e..25509f193c1 100644
--- a/src/Shared/ITranslator.cs
+++ b/src/Shared/ITranslator.cs
@@ -180,6 +180,14 @@ BinaryWriter Writer
         /// <param name="collectionFactory">factory to create a collection</param>
         void Translate<T, L>(ref IList<T> list, ObjectTranslator<T> objectTranslator, NodePacketCollectionCreator<L> collectionFactory) where L : IList<T>;
 
+        /// <summary>
+        /// Translates a collection of strings to the specified type using an <see cref="NodePacketCollectionCreator{T}"/>
+        /// </summary>
+        /// <param name="collection">The collection to be translated.</param>
+        /// <param name="collectionFactory">factory to create the IList.</param>
+        /// <typeparam name="T">The type of collection to be created.</typeparam>
+        void Translate<T>(ref ICollection<string> collection, NodePacketCollectionCreator<T> collectionFactory) where T : ICollection<string>;
+
         /// <summary>
         /// Translates a DateTime.
         /// </summary>
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 18d25e93e37..a32cf28cd3d 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -85,7 +85,7 @@ internal class TaskHostConfiguration : INodePacket
 
         private Dictionary<string, string> _globalParameters;
 
-        private HashSet<string> _warningsAsErrors;
+        private ICollection<string> _warningsAsErrors;
 
 #if FEATURE_APPDOMAIN
         /// <summary>
@@ -143,7 +143,7 @@ public TaskHostConfiguration
                 string taskLocation,
                 IDictionary<string, object> taskParameters,
                 Dictionary<string, string> globalParameters,
-                HashSet<string> warningsAsErrors
+                ICollection<string> warningsAsErrors
             )
         {
             ErrorUtilities.VerifyThrowInternalLength(taskName, nameof(taskName));
@@ -348,7 +348,7 @@ public NodePacketType Type
             { return NodePacketType.TaskHostConfiguration; }
         }
 
-        public HashSet<string> WarningsAsErrors
+        public ICollection<string> WarningsAsErrors
         {
             [DebuggerStepThrough]
             get
@@ -379,7 +379,7 @@ public void Translate(ITranslator translator)
             translator.TranslateDictionary(ref _taskParameters, StringComparer.OrdinalIgnoreCase, TaskParameter.FactoryForDeserialization);
             translator.Translate(ref _continueOnError);
             translator.TranslateDictionary(ref _globalParameters, StringComparer.OrdinalIgnoreCase);
-            translator.Translate(ref _warningsAsErrors);
+            translator.Translate(ref _warningsAsErrors, count => new HashSet<string>(count));
         }
 
         /// <summary>
