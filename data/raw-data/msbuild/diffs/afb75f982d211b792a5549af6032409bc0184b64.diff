diff --git a/src/Build.OM.UnitTests/NugetRestoreTests.cs b/src/Build.OM.UnitTests/NugetRestoreTests.cs
index 958d0d21bda..daf8cbea8d0 100644
--- a/src/Build.OM.UnitTests/NugetRestoreTests.cs
+++ b/src/Build.OM.UnitTests/NugetRestoreTests.cs
@@ -51,7 +51,7 @@ public void TestOldNuget()
 EndGlobalSection
 EndGlobal
 ");
-            RunnerUtilities.RunProcessAndGetOutput(Path.Combine(msbuildExePath, "nuget", "NuGet.exe"), "restore " + sln.Path + " -MSBuildPath \"" + msbuildExePath + "\"", out bool success, out _, outputHelper: _output);
+            RunnerUtilities.RunProcessAndGetOutput(Path.Combine(msbuildExePath, "nuget", "NuGet.exe"), "restore " + sln.Path + " -MSBuildPath \"" + msbuildExePath + "\"", out bool success, outputHelper: _output);
             success.ShouldBeTrue();
         }
 #endif
diff --git a/src/Build.UnitTests/BackEnd/SleepingTask.cs b/src/Build.UnitTests/BackEnd/SleepingTask.cs
deleted file mode 100644
index d7ed2cbee41..00000000000
--- a/src/Build.UnitTests/BackEnd/SleepingTask.cs
+++ /dev/null
@@ -1,24 +0,0 @@
-ï»¿// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-using Microsoft.Build.Utilities;
-using System.Threading;
-
-namespace Microsoft.Build.UnitTests
-{
-    public class SleepingTask : Task
-    {
-        public int SleepTime { get; set; }
-
-        /// <summary>
-        /// Sleep for SleepTime milliseconds.
-        /// </summary>
-        /// <returns>Success on success.</returns>
-        public override bool Execute()
-        {
-            // Thread.Sleep(SleepTime);
-            System.Threading.Tasks.Task.Delay(SleepTime);
-            return !Log.HasLoggedErrors;
-        }
-    }
-}
diff --git a/src/Build.UnitTests/MSBuildServer_Tests.cs b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
similarity index 76%
rename from src/Build.UnitTests/MSBuildServer_Tests.cs
rename to src/MSBuild.UnitTests/MSBuildServer_Tests.cs
index 122427d9cf5..ba4136f8f5e 100644
--- a/src/Build.UnitTests/MSBuildServer_Tests.cs
+++ b/src/MSBuild.UnitTests/MSBuildServer_Tests.cs
@@ -4,6 +4,9 @@
 using System;
 using System.Diagnostics;
 using System.Reflection;
+using System.Threading;
+using System.Threading.Tasks;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests;
 using Microsoft.Build.UnitTests.Shared;
@@ -13,6 +16,37 @@
 
 namespace Microsoft.Build.Engine.UnitTests
 {
+    public class SleepingTask : Microsoft.Build.Utilities.Task
+    {
+        public int SleepTime { get; set; }
+
+        /// <summary>
+        /// Sleep for SleepTime milliseconds.
+        /// </summary>
+        /// <returns>Success on success.</returns>
+        public override bool Execute()
+        {
+            Thread.Sleep(SleepTime);
+            return !Log.HasLoggedErrors;
+        }
+    }
+
+    public class ProcessIdTask : Microsoft.Build.Utilities.Task
+    {
+        [Output]
+        public int Pid { get; set; }
+
+        /// <summary>
+        /// Log the id for this process.
+        /// </summary>
+        /// <returns></returns>
+        public override bool Execute()
+        {
+            Pid = Process.GetCurrentProcess().Id;
+            return true;
+        }
+    }
+
     public class MSBuildServer_Tests : IDisposable
     {
         private readonly ITestOutputHelper _output;
@@ -48,37 +82,44 @@ public void MSBuildServerTest()
         {
             TransientTestFile project = _env.CreateFile("testProject.proj", printPidContents);
             _env.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
-            string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, out bool exitedWithoutTimeout, false, _output);
+            string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, false, _output);
             success.ShouldBeTrue();
-            exitedWithoutTimeout.ShouldBeTrue("The entrypoint node should die on its own before 5 seconds elapse.");
             int pidOfInitialProcess = ParseNumber(output, "Process ID is ");
             int pidOfServerProcess = ParseNumber(output, "Server ID is ");
             pidOfInitialProcess.ShouldNotBe(pidOfServerProcess, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
 
-            output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, out exitedWithoutTimeout, false, _output);
+            output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, false, _output);
             success.ShouldBeTrue();
-            exitedWithoutTimeout.ShouldBeTrue("The entrypoint node should die on its own before 5 seconds elapse.");
             int newPidOfInitialProcess = ParseNumber(output, "Process ID is ");
             newPidOfInitialProcess.ShouldNotBe(pidOfServerProcess, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
             newPidOfInitialProcess.ShouldNotBe(pidOfInitialProcess, "Process started by two MSBuild executions should be different.");
             pidOfServerProcess.ShouldBe(ParseNumber(output, "Server ID is "), "Node used by both the first and second build should be the same.");
 
+            // Prep to kill the long-lived task we're about to start.
+            Task t = Task.Run(() =>
+            {
+                // Wait for the long-lived task to start
+                // If this test seems to fail randomly, increase this time.
+                Thread.Sleep(1000);
+
+                // Kill the server
+                ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
+            });
+
             // Start long-lived task execution
             TransientTestFile sleepProject = _env.CreateFile("napProject.proj", sleepingTaskContents);
-            RunnerUtilities.RunProcessAndGetOutput(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, sleepProject.Path, out _, out _, waitForExit: false);
+            RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, sleepProject.Path, out _);
 
-            // Kill the server
-            Process.GetProcessById(pidOfServerProcess).KillTree(1000);
+            t.Wait();
 
             // Ensure that a new build can still succeed and that its server node is different.
-            output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, out exitedWithoutTimeout, false, _output);
+            output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, false, _output);
             success.ShouldBeTrue();
-            exitedWithoutTimeout.ShouldBeTrue("The entrypoint node should die on its own before 5 seconds elapse.");
             newPidOfInitialProcess = ParseNumber(output, "Process ID is ");
             int newServerProcessId = ParseNumber(output, "Server ID is ");
             newPidOfInitialProcess.ShouldNotBe(pidOfInitialProcess, "Process started by two MSBuild executions should be different.");
             newPidOfInitialProcess.ShouldNotBe(newServerProcessId, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
-            pidOfServerProcess.ShouldNotBe(newServerProcessId, "Node used by both the first and second build should be the same.");
+            pidOfServerProcess.ShouldNotBe(newServerProcessId, "Node used by both the first and second build should not be the same.");
         }
 
         [Fact]
@@ -87,25 +128,22 @@ public void VerifyMixedLegacyBehavior()
             TransientTestFile project = _env.CreateFile("testProject.proj", printPidContents);
             _env.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
 
-            string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, out bool exitedWithoutTimeout, false, _output);
+            string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, false, _output);
             success.ShouldBeTrue();
-            exitedWithoutTimeout.ShouldBeTrue("The entrypoint node should die on its own before 5 seconds elapse.");
             int pidOfInitialProcess = ParseNumber(output, "Process ID is ");
             int pidOfServerProcess = ParseNumber(output, "Server ID is ");
             pidOfInitialProcess.ShouldNotBe(pidOfServerProcess, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
 
-            _env.SetEnvironmentVariable("MSBUILDUSESERVER", "");
-            output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, out exitedWithoutTimeout, false, _output);
+            Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "");
+            output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, false, _output);
             success.ShouldBeTrue();
-            exitedWithoutTimeout.ShouldBeTrue("The entrypoint node should die on its own before 5 seconds elapse.");
             pidOfInitialProcess = ParseNumber(output, "Process ID is ");
             int pidOfNewserverProcess = ParseNumber(output, "Server ID is ");
             pidOfInitialProcess.ShouldBe(pidOfNewserverProcess, "We did not start a server node to execute the target, so its pid should be the same.");
 
-            _env.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
-            output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, out exitedWithoutTimeout, false, _output);
+            Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
+            output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, false, _output);
             success.ShouldBeTrue();
-            exitedWithoutTimeout.ShouldBeTrue("The entrypoint node should die on its own before 5 seconds elapse.");
             pidOfInitialProcess = ParseNumber(output, "Process ID is ");
             pidOfNewserverProcess = ParseNumber(output, "Server ID is ");
             pidOfInitialProcess.ShouldNotBe(pidOfNewserverProcess, "We started a server node to execute the target rather than running it in-proc, so its pid should be different.");
@@ -120,24 +158,29 @@ public void BuildsWhileBuildIsRunningOnServer()
             TransientTestFile sleepProject = _env.CreateFile("napProject.proj", sleepingTaskContents);
 
             int pidOfServerProcess = -1;
+            Task? t = null;
             try
             {
                 // Start a server node and find its PID.
-                string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, out bool exitedWithoutTimeout, false, _output);
+                string output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out bool success, false, _output);
                 pidOfServerProcess = ParseNumber(output, "Server ID is ");
 
-                RunnerUtilities.RunProcessAndGetOutput(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, sleepProject.Path, out _, out _, waitForExit: false);
+                t = Task.Run(() =>
+                {
+                    RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, sleepProject.Path, out _);
+                });
+
+                // The server will soon be in use; make sure we don't try to use it before that happens.
+                Thread.Sleep(1000);
 
-                _env.SetEnvironmentVariable("MSBUILDUSESERVER", "");
-                output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, out exitedWithoutTimeout, false, _output);
+                Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "0");
+                output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, false, _output);
                 success.ShouldBeTrue();
-                exitedWithoutTimeout.ShouldBeTrue();
                 ParseNumber(output, "Server ID is ").ShouldBe(ParseNumber(output, "Process ID is "), "There should not be a server node for this build.");
 
-                _env.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
-                output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, out exitedWithoutTimeout, false, _output);
+                Environment.SetEnvironmentVariable("MSBUILDUSESERVER", "1");
+                output = RunnerUtilities.ExecMSBuild(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, project.Path, out success, false, _output);
                 success.ShouldBeTrue();
-                exitedWithoutTimeout.ShouldBeTrue();
                 pidOfServerProcess.ShouldBe(ParseNumber(output, "Server ID is "), "Server should be the same as before.");
                 pidOfServerProcess.ShouldNotBe(ParseNumber(output, "Process ID is "), "There should be a server node for this build.");
             }
@@ -145,7 +188,12 @@ public void BuildsWhileBuildIsRunningOnServer()
             {
                 if (pidOfServerProcess > -1)
                 {
-                    Process.GetProcessById(pidOfServerProcess).KillTree(1000);
+                    ProcessExtensions.KillTree(Process.GetProcessById(pidOfServerProcess), 1000);
+                }
+
+                if (t is not null)
+                {
+                    t.Wait();
                 }
             }
         }
@@ -175,7 +223,7 @@ public void MultiProcBuildOnServer()
         private int ParseNumber(string searchString, string toFind)
         {
             int indexOfId = searchString.IndexOf(toFind) + toFind.Length;
-            int endOfId = searchString.IndexOf('\r', indexOfId);
+            int endOfId = searchString.IndexOfAny(new char[] { '\r', '\n' }, indexOfId);
             return int.Parse(searchString.Substring(indexOfId, endOfId - indexOfId));
         }
     }
diff --git a/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj b/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
index e301c3a16b3..ea90a86c84e 100644
--- a/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
+++ b/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
@@ -28,6 +28,7 @@
     <Compile Include="..\Shared\RegistryDelegates.cs">
       <Link>RegistryDelegates.cs</Link>
     </Compile>
+    <Compile Include="..\Shared\ProcessExtensions.cs" />
     <Compile Include="..\Shared\RegistryHelper.cs">
       <Link>RegistryHelper.cs</Link>
     </Compile>
diff --git a/src/Tasks.UnitTests/PortableTasks_Tests.cs b/src/Tasks.UnitTests/PortableTasks_Tests.cs
index 1ef2ad381c7..20353efc583 100644
--- a/src/Tasks.UnitTests/PortableTasks_Tests.cs
+++ b/src/Tasks.UnitTests/PortableTasks_Tests.cs
@@ -69,7 +69,7 @@ private void RunMSBuildOnProjectWithPortableTaskAndAssertOutput(bool useDesktopM
                 _outputHelper.WriteLine($"Building project {projFile}");
 
                 var executionOutput = useDesktopMSBuild
-                    ? RunnerUtilities.RunProcessAndGetOutput("msbuild", projFile, out successfulExit, out _,
+                    ? RunnerUtilities.RunProcessAndGetOutput("msbuild", projFile, out successfulExit,
                         shellExecute: true, outputHelper: _outputHelper)
                     : RunnerUtilities.ExecMSBuild(projFile, out successfulExit);
 
diff --git a/src/UnitTests.Shared/RunnerUtilities.cs b/src/UnitTests.Shared/RunnerUtilities.cs
index e84b849f796..f3082189e18 100644
--- a/src/UnitTests.Shared/RunnerUtilities.cs
+++ b/src/UnitTests.Shared/RunnerUtilities.cs
@@ -1,5 +1,4 @@
 ï»¿using Microsoft.Build.Shared;
-using Microsoft.Build.Utilities;
 using System;
 using System.Diagnostics;
 using Xunit.Abstractions;
@@ -27,11 +26,6 @@ public static string ExecMSBuild(string msbuildParameters, out bool successfulEx
         /// </summary>
         public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null)
         {
-            return ExecMSBuild(pathToMsBuildExe, msbuildParameters, out successfulExit, out _, shellExecute, outputHelper);
-        }
-
-        public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParameters, out bool successfulExit, out bool exitedWithoutTimeout, bool shellExecute = false, ITestOutputHelper outputHelper = null)
-        {
 #if FEATURE_RUN_EXE_IN_TESTS
             var pathToExecutable = pathToMsBuildExe;
 #else
@@ -39,7 +33,7 @@ public static string ExecMSBuild(string pathToMsBuildExe, string msbuildParamete
             msbuildParameters = FileUtilities.EnsureDoubleQuotes(pathToMsBuildExe) + " " + msbuildParameters;
 #endif
 
-            return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, out exitedWithoutTimeout, shellExecute, outputHelper);
+            return RunProcessAndGetOutput(pathToExecutable, msbuildParameters, out successfulExit, shellExecute, outputHelper);
         }
 
         private static void AdjustForShellExecution(ref string pathToExecutable, ref string arguments)
@@ -75,7 +69,7 @@ private static string ResolveRuntimeExecutableName()
         /// <summary>
         /// Run the process and get stdout and stderr
         /// </summary>
-        public static string RunProcessAndGetOutput(string process, string parameters, out bool successfulExit, out bool exitedWithoutTimeout, bool shellExecute = false, ITestOutputHelper outputHelper = null, bool waitForExit = true)
+        public static string RunProcessAndGetOutput(string process, string parameters, out bool successfulExit, bool shellExecute = false, ITestOutputHelper outputHelper = null)
         {
             if (shellExecute)
             {
@@ -93,6 +87,7 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 Arguments = parameters
             };
             var output = string.Empty;
+            int pid = -1;
 
             using (var p = new Process { EnableRaisingEvents = true, StartInfo = psi })
             {
@@ -119,20 +114,14 @@ public static string RunProcessAndGetOutput(string process, string parameters, o
                 p.BeginOutputReadLine();
                 p.BeginErrorReadLine();
                 p.StandardInput.Dispose();
+                p.WaitForExit(30000);
 
-                if (waitForExit)
-                {
-                    exitedWithoutTimeout = p.WaitForExit(30000);
-                    output += "Process ID is " + p.Id + "\r\n";
-                    successfulExit = p.ExitCode == 0;
-                }
-                else
-                {
-                    exitedWithoutTimeout = true;
-                    successfulExit = true;
-                }
+                pid = p.Id;
+                successfulExit = p.ExitCode == 0;
             }
 
+            output += "Process ID is " + pid + "\r\n";
+
             outputHelper?.WriteLine("==== OUTPUT ====");
             outputHelper?.WriteLine(output);
             outputHelper?.WriteLine("==============");
