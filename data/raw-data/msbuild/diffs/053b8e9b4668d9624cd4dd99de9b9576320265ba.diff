diff --git a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
index c249a953174..d98332159c9 100644
--- a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
@@ -289,31 +289,31 @@ public void TestTranslation()
                     CreateTargetSkipped(),
                     new ExtendedBuildErrorEventArgs("extError", "SubCategoryForSchemaValidationErrors", "MSB4000", "file", 1, 2, 3, 4, "message", "help", "sender", DateTime.UtcNow, "arg1")
                     {
-                        ExtendedData = "{'long-json':'mostly-strings'}",
+                        ExtendedData = /*lang=json*/ "{'long-json':'mostly-strings'}",
                         ExtendedMetadata = new Dictionary<string, string> { { "m1", "v1" }, { "m2", "v2" } },
                         BuildEventContext = new BuildEventContext(1, 2, 3, 4, 5, 6, 7)
                     },
                     new ExtendedBuildWarningEventArgs("extWarn", "SubCategoryForSchemaValidationErrors", "MSB4000", "file", 1, 2, 3, 4, "message", "help", "sender", DateTime.UtcNow, "arg1")
                     {
-                        ExtendedData = "{'long-json':'mostly-strings'}",
+                        ExtendedData = /*lang=json*/ "{'long-json':'mostly-strings'}",
                         ExtendedMetadata = new Dictionary<string, string> { { "m1", "v1" }, { "m2", "v2" } },
                         BuildEventContext = new BuildEventContext(1, 2, 3, 4, 5, 6, 7)
                     },
                     new ExtendedBuildMessageEventArgs("extWarn", "SubCategoryForSchemaValidationErrors", "MSB4000", "file", 1, 2, 3, 4, "message", "help", "sender", MessageImportance.Normal, DateTime.UtcNow, "arg1")
                     {
-                        ExtendedData = "{'long-json':'mostly-strings'}",
+                        ExtendedData = /*lang=json*/ "{'long-json':'mostly-strings'}",
                         ExtendedMetadata = new Dictionary<string, string> { { "m1", "v1" }, { "m2", "v2" } },
                         BuildEventContext = new BuildEventContext(1, 2, 3, 4, 5, 6, 7)
                     },
                     new ExtendedCustomBuildEventArgs("extCustom", "message", "help", "sender", DateTime.UtcNow, "arg1")
                     {
-                        ExtendedData = "{'long-json':'mostly-strings'}",
+                        ExtendedData = /*lang=json*/ "{'long-json':'mostly-strings'}",
                         ExtendedMetadata = new Dictionary<string, string> { { "m1", "v1" }, { "m2", "v2" } },
                         BuildEventContext = new BuildEventContext(1, 2, 3, 4, 5, 6, 7)
                     },
                     new ExtendedCriticalBuildMessageEventArgs("extCritMsg", "Subcategory", "Code", "File", 1, 2, 3, 4, "{0}", "HelpKeyword", "Sender", DateTime.Now, "arg1")
                     {
-                        ExtendedData = "{'long-json':'mostly-strings'}",
+                        ExtendedData = /*lang=json*/ "{'long-json':'mostly-strings'}",
                         ExtendedMetadata = new Dictionary<string, string> { { "m1", "v1" }, { "m2", "v2" } },
                         BuildEventContext = new BuildEventContext(1, 2, 3, 4, 5, 6, 7)
                     },
diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index c45baa49e1e..dfc535e30a8 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -341,7 +341,7 @@ public void RoundtripExtendedErrorEventArgs_SerializedAsError(bool withOptionalD
                 DateTime.Parse("9/1/2021 12:02:07 PM"),
                 withOptionalData ? new object[] { "argument0" } : null)
             {
-                ExtendedData = withOptionalData ? "{'long-json':'mostly-strings'}" : null,
+                ExtendedData = withOptionalData ? /*lang=json*/ "{'long-json':'mostly-strings'}" : null,
                 ExtendedMetadata = withOptionalData ? new Dictionary<string, string> { { "m1", "v1" }, { "m2", "v2" } } : null,
                 BuildEventContext = withOptionalData ? new BuildEventContext(1, 2, 3, 4, 5, 6, 7) : null,
             };
@@ -414,7 +414,7 @@ public void RoundtripExtendedWarningEventArgs_SerializedAsWarning(bool withOptio
                 DateTime.Parse("9/1/2021 12:02:07 PM"),
                 withOptionalData ? new object[] { "argument0" } : null)
                 {
-                    ExtendedData = withOptionalData ? "{'long-json':'mostly-strings'}" : null,
+                    ExtendedData = withOptionalData ? /*lang=json*/ "{'long-json':'mostly-strings'}" : null,
                     ExtendedMetadata = withOptionalData ? new Dictionary<string, string> { { "m1", "v1" }, { "m2", "v2" } } : null,
                     BuildEventContext = withOptionalData ? new BuildEventContext(1, 2, 3, 4, 5, 6, 7) : null,
                 };
@@ -490,7 +490,7 @@ public void RoundtripExtendedBuildMessageEventArgs_SerializedAsMessage(bool with
                 DateTime.Parse("12/12/2015 06:11:56 PM"),
                 withOptionalData ? new object[] { "argument0" } : null)
             {
-                ExtendedData = withOptionalData ? "{'long-json':'mostly-strings'}" : null,
+                ExtendedData = withOptionalData ? /*lang=json*/ "{'long-json':'mostly-strings'}" : null,
                 ExtendedMetadata = withOptionalData ? new Dictionary<string, string> { { "m1", "v1" }, { "m2", "v2" } } : null,
                 BuildEventContext = withOptionalData ? new BuildEventContext(1, 2, 3, 4, 5, 6, 7) : null,
             };
@@ -578,7 +578,7 @@ public void ExtendedCustomBuildEventArgs_SerializedAsMessage(bool withOptionalDa
                 eventTimestamp: withOptionalData ? DateTime.Parse("3/1/2017 11:11:56 AM") : DateTime.Now,
                 messageArgs: withOptionalData ? new object[] { "arg0val", "arg1val" } : null)
             {
-                ExtendedData = withOptionalData ? "{'long-json':'mostly-strings'}" : null,
+                ExtendedData = withOptionalData ? /*lang=json*/ "{'long-json':'mostly-strings'}" : null,
                 ExtendedMetadata = withOptionalData ? new Dictionary<string, string> { { "m1", "v1" }, { "m2", "v2" } } : null,
                 BuildEventContext = withOptionalData ? new BuildEventContext(1, 2, 3, 4, 5, 6, 7) : null,
             };
@@ -673,7 +673,7 @@ public void RoundtripExtendedCriticalBuildMessageEventArgs(bool withOptionalData
                 DateTime.Parse("12/12/2015 06:11:56 PM"),
                 withOptionalData ? new object[] { "argument0" } : null)
             {
-                ExtendedData = withOptionalData ? "{'long-json':'mostly-strings'}" : null,
+                ExtendedData = withOptionalData ? /*lang=json*/ "{'long-json':'mostly-strings'}" : null,
                 ExtendedMetadata = withOptionalData ? new Dictionary<string, string> { { "m1", "v1" }, { "m2", "v2" } } : null,
                 BuildEventContext = withOptionalData ? new BuildEventContext(1, 2, 3, 4, 5, 6, 7) : null,
             };
diff --git a/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs b/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs
index 400c3f6af52..5f2a703cfed 100644
--- a/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFilter_Tests.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Diagnostics.CodeAnalysis;
 using System.IO;
 using System.Linq;
 using Microsoft.Build.BackEnd.Logging;
@@ -104,18 +105,19 @@ public void SolutionFilterFiltersProjects(bool graphBuild)
                     EndGlobal
                 ");
                 TransientTestFile filterFile = testEnvironment.CreateFile(folder, "solutionFilter.slnf",
-                    @"
-                {
-                  ""solution"": {
-                    // I'm a comment
-                    ""path"": "".\\SimpleProject\\SimpleProject.sln"",
-                    ""projects"": [
-                    /* ""..\\ClassLibrary\\ClassLibrary\\ClassLibrary.csproj"", */
-                      ""SimpleProject\\SimpleProject.csproj"",
-                    ]
-                    }
-                }
-                ");
+                    /*lang=json*/
+                                  """
+                                  {
+                                    "solution": {
+                                      // I'm a comment
+                                      "path": ".\\SimpleProject\\SimpleProject.sln",
+                                      "projects": [
+                                      /* "..\\ClassLibrary\\ClassLibrary\\ClassLibrary.csproj", */
+                                        "SimpleProject\\SimpleProject.csproj",
+                                      ]
+                                      }
+                                  }
+                                  """);
                 Directory.GetCurrentDirectory().ShouldNotBe(Path.GetDirectoryName(filterFile.Path));
                 if (graphBuild)
                 {
@@ -147,59 +149,59 @@ public void SolutionFilterFiltersProjects(bool graphBuild)
         }
 
         [Theory]
-        [InlineData(@"
-                {
-                  ""solution"": {
-                    ""path"": ""C:\\notAPath\\MSBuild.Dev.sln"",
-                    ""projects2"": [
-                      ""src\\Build\\Microsoft.Build.csproj"",
-                      ""src\\Framework\\Microsoft.Build.Framework.csproj"",
-                      ""src\\MSBuild\\MSBuild.csproj"",
-                      ""src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj""
-                    ]
-                    }
+        [InlineData(/*lang=json,strict*/ """
+            {
+              "solution": {
+                "path": "C:\\notAPath\\MSBuild.Dev.sln",
+                "projects2": [
+                  "src\\Build\\Microsoft.Build.csproj",
+                  "src\\Framework\\Microsoft.Build.Framework.csproj",
+                  "src\\MSBuild\\MSBuild.csproj",
+                  "src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj"
+                ]
                 }
-                ", "MSBuild.SolutionFilterJsonParsingError")]
-        [InlineData(@"
-                [{
-                  ""solution"": {
-                    ""path"": ""C:\\notAPath\\MSBuild.Dev.sln"",
-                    ""projects"": [
-                      ""src\\Build\\Microsoft.Build.csproj"",
-                      ""src\\Framework\\Microsoft.Build.Framework.csproj"",
-                      ""src\\MSBuild\\MSBuild.csproj"",
-                      ""src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj""
-                    ]
-                    }
-                }]
-                ", "MSBuild.SolutionFilterJsonParsingError")]
-        [InlineData(@"
-                {
-                  ""solution"": {
-                    ""path"": ""C:\\notAPath\\MSBuild.Dev.sln"",
-                    ""projects"": [
-                      {""path"": ""src\\Build\\Microsoft.Build.csproj""},
-                      {""path"": ""src\\Framework\\Microsoft.Build.Framework.csproj""},
-                      {""path"": ""src\\MSBuild\\MSBuild.csproj""},
-                      {""path"": ""src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj""}
-                    ]
-                    }
+            }
+            """, "MSBuild.SolutionFilterJsonParsingError")]
+        [InlineData(/*lang=json,strict*/ """
+            [{
+              "solution": {
+                "path": "C:\\notAPath\\MSBuild.Dev.sln",
+                "projects": [
+                  "src\\Build\\Microsoft.Build.csproj",
+                  "src\\Framework\\Microsoft.Build.Framework.csproj",
+                  "src\\MSBuild\\MSBuild.csproj",
+                  "src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj"
+                ]
                 }
-                ", "MSBuild.SolutionFilterJsonParsingError")]
-        [InlineData(@"
-                {
-                  ""solution"": {
-                    ""path"": ""C:\\notAPath2\\MSBuild.Dev.sln"",
-                    ""projects"": [
-                      {""path"": ""src\\Build\\Microsoft.Build.csproj""},
-                      {""path"": ""src\\Framework\\Microsoft.Build.Framework.csproj""},
-                      {""path"": ""src\\MSBuild\\MSBuild.csproj""},
-                      {""path"": ""src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj""}
-                    ]
-                    }
+            }]
+            """, "MSBuild.SolutionFilterJsonParsingError")]
+        [InlineData(/*lang=json,strict*/ """
+            {
+              "solution": {
+                "path": "C:\\notAPath\\MSBuild.Dev.sln",
+                "projects": [
+                  {"path": "src\\Build\\Microsoft.Build.csproj"},
+                  {"path": "src\\Framework\\Microsoft.Build.Framework.csproj"},
+                  {"path": "src\\MSBuild\\MSBuild.csproj"},
+                  {"path": "src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj"}
+                ]
                 }
-                ", "MSBuild.SolutionFilterMissingSolutionError")]
-        public void InvalidSolutionFilters(string slnfValue, string exceptionReason)
+            }
+            """, "MSBuild.SolutionFilterJsonParsingError")]
+        [InlineData(/*lang=json,strict*/ """
+            {
+              "solution": {
+                "path": "C:\\notAPath2\\MSBuild.Dev.sln",
+                "projects": [
+                  {"path": "src\\Build\\Microsoft.Build.csproj"},
+                  {"path": "src\\Framework\\Microsoft.Build.Framework.csproj"},
+                  {"path": "src\\MSBuild\\MSBuild.csproj"},
+                  {"path": "src\\Tasks.UnitTests\\Microsoft.Build.Tasks.UnitTests.csproj"}
+                ]
+                }
+            }
+            """, "MSBuild.SolutionFilterMissingSolutionError")]
+        public void InvalidSolutionFilters([StringSyntax(StringSyntaxAttribute.Json)] string slnfValue, string exceptionReason)
         {
             Assert.False(File.Exists("C:\\notAPath2\\MSBuild.Dev.sln"));
             using (TestEnvironment testEnvironment = TestEnvironment.Create())
diff --git a/src/Framework.UnitTests/ExtendedBuildEventArgs_Tests.cs b/src/Framework.UnitTests/ExtendedBuildEventArgs_Tests.cs
index 6739c53bc98..af945afa8a7 100644
--- a/src/Framework.UnitTests/ExtendedBuildEventArgs_Tests.cs
+++ b/src/Framework.UnitTests/ExtendedBuildEventArgs_Tests.cs
@@ -24,7 +24,7 @@ public void ExtendedCustomBuildEventArgs_SerializationDeserialization(bool withO
             eventTimestamp: withOptionalData ? DateTime.Parse("3/1/2017 11:11:56 AM") : DateTime.Now,
             messageArgs: withOptionalData ? new object[] { "arg0val", "arg1val" } : null)
             {
-                ExtendedData = withOptionalData ? "{'long-json':'mostly-strings'}" : null,
+                ExtendedData = withOptionalData ? /*lang=json*/ "{'long-json':'mostly-strings'}" : null,
                 ExtendedMetadata = withOptionalData ? new Dictionary<string, string?> { {"m1", "v1" }, { "m2", "v2" } } : null,
                 BuildEventContext = withOptionalData ? new BuildEventContext(1, 2, 3, 4, 5, 6, 7) : null,
             };
@@ -62,7 +62,7 @@ public void ExtendedErrorEventArgs_SerializationDeserialization(bool withOptiona
             eventTimestamp: withOptionalData ? DateTime.Parse("3/1/2017 11:11:56 AM") : DateTime.Now,
             messageArgs: withOptionalData ? new object[] { "arg0val", "arg1val" } : null)
         {
-            ExtendedData = withOptionalData ? "{'long-json':'mostly-strings'}" : null,
+            ExtendedData = withOptionalData ? /*lang=json*/ "{'long-json':'mostly-strings'}" : null,
             ExtendedMetadata = withOptionalData ? new Dictionary<string, string?> { { "m1", "v1" }, { "m2", "v2" } } : null,
             BuildEventContext = withOptionalData ? new BuildEventContext(1, 2, 3, 4, 5, 6, 7) : null,
         };
@@ -101,7 +101,7 @@ public void ExtendedWarningEventArgs_SerializationDeserialization(bool withOptio
             eventTimestamp: withOptionalData ? DateTime.Parse("3/1/2017 11:11:56 AM") : DateTime.Now,
             messageArgs: withOptionalData ? new object[] { "arg0val", "arg1val" } : null)
         {
-            ExtendedData = withOptionalData ? "{'long-json':'mostly-strings'}" : null,
+            ExtendedData = withOptionalData ? /*lang=json*/ "{'long-json':'mostly-strings'}" : null,
             ExtendedMetadata = withOptionalData ? new Dictionary<string, string?> { { "m1", "v1" }, { "m2", "v2" } } : null,
             BuildEventContext = withOptionalData ? new BuildEventContext(1, 2, 3, 4, 5, 6, 7) : null,
         };
@@ -139,7 +139,7 @@ public void ExtendedMessageEventArgs_SerializationDeserialization(bool withOptio
             eventTimestamp: withOptionalData ? DateTime.Parse("3/1/2017 11:11:56 AM") : DateTime.Now,
             messageArgs: withOptionalData ? new object[] { "arg0val", "arg1val" } : null)
         {
-            ExtendedData = withOptionalData ? "{'long-json':'mostly-strings'}" : null,
+            ExtendedData = withOptionalData ? /*lang=json*/ "{'long-json':'mostly-strings'}" : null,
             ExtendedMetadata = withOptionalData ? new Dictionary<string, string?> { { "m1", "v1" }, { "m2", "v2" } } : null,
             BuildEventContext = withOptionalData ? new BuildEventContext(1, 2, 3, 4, 5, 6, 7) : null,
         };
@@ -176,7 +176,7 @@ public void ExtendedCriticalMessageEventArgs_SerializationDeserialization(bool w
             eventTimestamp: withOptionalData ? DateTime.Parse("3/1/2017 11:11:56 AM") : DateTime.Now,
             messageArgs: withOptionalData ? new object[] { "arg0val", "arg1val" } : null)
         {
-            ExtendedData = withOptionalData ? "{'long-json':'mostly-strings'}" : null,
+            ExtendedData = withOptionalData ? /*lang=json*/ "{'long-json':'mostly-strings'}" : null,
             ExtendedMetadata = withOptionalData ? new Dictionary<string, string?> { { "m1", "v1" }, { "m2", "v2" } } : null,
             BuildEventContext = withOptionalData ? new BuildEventContext(1, 2, 3, 4, 5, 6, 7) : null,
         };
