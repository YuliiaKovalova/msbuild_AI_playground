diff --git a/NuGet.config b/NuGet.config
index 620a031ac09..c9bda385cf9 100644
--- a/NuGet.config
+++ b/NuGet.config
@@ -14,7 +14,6 @@
     <add key="dotnet8-transport" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8-transport/nuget/v3/index.json" />
     <add key="dotnet9" value="https://dnceng.pkgs.visualstudio.com/public/_packaging/dotnet9/nuget/v3/index.json" />
     <add key="vs-impl" value="https://pkgs.dev.azure.com/azure-public/vside/_packaging/vs-impl/nuget/v3/index.json" />
-    <add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />
 
     <packageSourceMapping>
       <packageSource key="arcade">
@@ -39,11 +38,7 @@
         <package pattern="*" />
       </packageSource>
       <packageSource key="vs-impl">
-        <package pattern="*" />
-      </packageSource>
-      <packageSource key="nuget.org">
-        <package pattern="OpenTelem*" />
-        <package pattern="System.Diagnostics.DiagnosticSource" />
+        <package pattern="Microsoft.VisualStudio.OpenTelemetry*" />
       </packageSource>
     </packageSourceMapping>
   </packageSources>
diff --git a/eng/Packages.props b/eng/Packages.props
index 60e5a74f9fc..8463cb362fe 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -35,10 +35,11 @@
     <PackageVersion Include="xunit.console" Version="$(XUnitVersion)" />
     <PackageVersion Include="Microsoft.VisualStudio.OpenTelemetry.Collector" Version="0.1.700-beta" />
     <PackageVersion Include="Microsoft.VisualStudio.OpenTelemetry.ClientExtensions" Version="0.1.700-beta" />
-    <PackageVersion Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.9.0" />
-    <PackageVersion Include="OpenTelemetry.Exporter.Console" Version="1.9.0" />
-    <PackageVersion Include="OpenTelemetry" Version="1.9.0" />
-    <PackageVersion Include="System.Diagnostics.DiagnosticSource" Version="8.0.1" />
+    <PackageVersion Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.10.0" />
+    <PackageVersion Include="OpenTelemetry.Exporter.Console" Version="1.10.0" />
+    <PackageVersion Include="OpenTelemetry" Version="1.10.0" />
+    <PackageVersion Include="System.Diagnostics.DiagnosticSource" Version="9.0.0" />
+    <PackageVersion Include="Microsoft.Bcl.AsyncInterfaces" Version="9.0.0" />
 
   </ItemGroup>
 </Project>
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 4d069ee41c8..7c935b8525e 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -498,10 +498,10 @@ public void BeginBuild(BuildParameters parameters)
                 parameters.LogTaskInputs = true;
             }
 #if NETFRAMEWORK
-            Environment.SetEnvironmentVariable("OTEL_EXPORTER_OTLP_ENDPOINT", "http://localhost:4317");
-            Environment.SetEnvironmentVariable("OTEL_SERVICE_NAME", "MSBuild");
-            FrameworkTelemetry.Enable();
-            var a = TelemetryHelpers.StartActivity("BeginBuild", new Dictionary<string, object> { { "feature_flag.IsBuildCheckEnabled", parameters.IsBuildCheckEnabled } });
+            // Environment.SetEnvironmentVariable("OTEL_EXPORTER_OTLP_ENDPOINT", "http://localhost:4317");
+            // Environment.SetEnvironmentVariable("OTEL_SERVICE_NAME", "MSBuild");
+            NewOpenTelemetry.Enable();
+            var a = TelemetryHelpers.StartActivity("BeginBuild", new Dictionary<string, object> { { "IsBuildCheckEnabled", parameters.IsBuildCheckEnabled } });
             a.Dispose();
 #endif
 
@@ -1082,11 +1082,11 @@ public void EndBuild()
                             var sacState = NativeMethodsShared.GetSACState();
                             // The Enforcement would lead to build crash - but let's have the check for completeness sake.
                             _buildTelemetry.SACEnabled = sacState == NativeMethodsShared.SAC_State.Evaluation || sacState == NativeMethodsShared.SAC_State.Enforcement;
-                            Debugger.Launch();
+                            // Debugger.Launch();
                             loggingService.LogTelemetry(buildEventContext: null, _buildTelemetry.EventName, _buildTelemetry.GetProperties());
 #if NETFRAMEWORK
                             // var telemetryActivity = TelemetryHelpers.StartActivity("endbuild");
-                            FrameworkTelemetry.EndOfBuildTelemetry(_buildTelemetry);
+                            NewOpenTelemetry.EndOfBuildTelemetry(_buildTelemetry);
                             // telemetryActivity.Dispose();
 #endif
                             // Clean telemetry to make it ready for next build submission.
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 2395b09f44d..20d9d92f7bb 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -25,6 +25,7 @@
 using Task = System.Threading.Tasks.Task;
 using Microsoft.Build.Framework;
 using Microsoft.Build.BackEnd.Logging;
+using Microsoft.Build.Framework.Telemetry;
 
 #nullable disable
 
@@ -333,6 +334,9 @@ bool StartNewNode(int nodeId)
 #endif
                     // Create the node process
                     INodeLauncher nodeLauncher = (INodeLauncher)_componentHost.GetComponent(BuildComponentType.NodeLauncher);
+#if NETFRAMEWORK
+                    var activity = TelemetryHelpers.StartActivity("NodeLaunching", new Dictionary<string, object>() { });
+#endif
                     Process msbuildProcess = nodeLauncher.Start(msbuildLocation, commandLineArgs, nodeId);
                     _processesToIgnore.TryAdd(GetProcessesToIgnoreKey(hostHandshake, msbuildProcess.Id), default);
 
@@ -342,6 +346,9 @@ bool StartNewNode(int nodeId)
 
                     // Now try to connect to it.
                     Stream nodeStream = TryConnectToProcess(msbuildProcess.Id, TimeoutForNewNodeCreation, hostHandshake);
+#if NETFRAMEWORK
+                    activity.Dispose();
+#endif
                     if (nodeStream != null)
                     {
                         // Connection successful, use this node.
diff --git a/src/Framework/Microsoft.Build.Framework.csproj b/src/Framework/Microsoft.Build.Framework.csproj
index 7afa0e527f9..7083062f85f 100644
--- a/src/Framework/Microsoft.Build.Framework.csproj
+++ b/src/Framework/Microsoft.Build.Framework.csproj
@@ -45,7 +45,7 @@
   </ItemGroup>
   
   <ItemGroup>
-    <Compile Remove="Telemetry\FrameworkTelemetry.cs" />
+    <Compile Remove="Telemetry\NewOpenTelemetry.cs" />
   </ItemGroup>
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
@@ -55,7 +55,7 @@
     <PackageReference Include="OpenTelemetry.Exporter.Console" />
     <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" />
     <PackageReference Include="System.Diagnostics.DiagnosticSource" />
-    <Compile Include="Telemetry\FrameworkTelemetry.cs"/>
+    <Compile Include="Telemetry\NewOpenTelemetry.cs"/>
   </ItemGroup>
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
diff --git a/src/Framework/Telemetry/FrameworkTelemetry.cs b/src/Framework/Telemetry/NewOpenTelemetry.cs
similarity index 89%
rename from src/Framework/Telemetry/FrameworkTelemetry.cs
rename to src/Framework/Telemetry/NewOpenTelemetry.cs
index e0157fba200..600a9ec742d 100644
--- a/src/Framework/Telemetry/FrameworkTelemetry.cs
+++ b/src/Framework/Telemetry/NewOpenTelemetry.cs
@@ -23,7 +23,7 @@ namespace Microsoft.Build.Framework.Telemetry
     /// <summary>
     /// A static class to instrument telemetry via OpenTelemetry.
     /// </summary>
-    public static class FrameworkTelemetry
+    public static class NewOpenTelemetry
     {
 
         private const string OTelNamespace = "Microsoft.VisualStudio.OpenTelemetry.MSBuild";
@@ -72,7 +72,7 @@ public static void Enable()
 
             tracerProvider = Sdk.CreateTracerProviderBuilder()
                 .AddVisualStudioDefaultTraceExporter(defaultExporterSettings)
-                .AddOtlpExporter()
+                .AddOtlpExporter() // see if this looks at any env vars
                 .Build();
             logger = factory.CreateLogger(OTelNamespace);
 
@@ -80,16 +80,16 @@ public static void Enable()
                 .AddVisualStudioDefaultMetricExporter(defaultExporterSettings)
                 .Build();
 
+            // this should not happen in VS
             collector = OpenTelemetryCollectorProvider.CreateCollector(collectorSettings);
             collector.StartAsync();
         }
 
-        private const string SamplePropertyPrefix = "VS.MSBuild.Event.";
         internal static void EndOfBuildTelemetry(BuildTelemetry buildTelemetry)
         {
             Enable();
 #pragma warning disable CS8604 // Possible null reference argument.
-            using var telemetryActivity = TelemetryHelpers.StartActivity("build", initialProperties: new
+            using var telemetryActivity = TelemetryHelpers.StartActivity("Build", initialProperties: new
                  Dictionary<string, object>
                 {
                     { "StartAt", buildTelemetry.StartAt?.ToString() },
@@ -97,20 +97,16 @@ internal static void EndOfBuildTelemetry(BuildTelemetry buildTelemetry)
                     { "FinishedAt", buildTelemetry.FinishedAt?.ToString() },
                     { "Success", buildTelemetry.Success },
                     { "Target", buildTelemetry.Target },
-                    { "ServerFallbackReason", buildTelemetry.ServerFallbackReason },
                     { "Version", buildTelemetry.Version?.ToString() },
                     { "DisplayVersion", buildTelemetry.DisplayVersion },
                     { "SAC", buildTelemetry.SACEnabled },
                     { "BuildCheckEnabled", buildTelemetry.BuildCheckEnabled },
+                    { "Host", buildTelemetry.Host },
                 });
 #pragma warning restore CS8604 // Possible null reference argument.
-            telemetryActivity.AddBaggage("baggage", "hey");
-            telemetryActivity.AddEvent(new ActivityEvent("hey2"));
-            telemetryActivity.AddEvent(new ActivityEvent(OTelNamespace + "hey3"));
             telemetryActivity.SetStartTime(buildTelemetry.StartAt ?? DateTime.UtcNow);
             telemetryActivity.Stop();
             telemetryActivity.SetEndTime(buildTelemetry.FinishedAt ?? DateTime.UtcNow);
-            telemetryActivity.SetCustomProperty(SamplePropertyPrefix + "hey", "hello");
             telemetryActivity.Dispose();
         }
 
@@ -148,10 +144,13 @@ public Activity StartActivity(string name = "", ActivityKind kind = ActivityKind
     public static class TelemetryHelpers
     {
 
-        private const string EventPrefix = "VS/MSBuild/Event/";
+        private const string EventPrefix = "MSBuild/";
+        private const string PropertyPrefix = "MSBuild.";
+        // private const string PropertyPrefix = "";
+
         public static Activity StartActivity(string name, IDictionary<string, object> initialProperties)
         {
-            return FrameworkTelemetry.DefaultTelemetrySource
+            return NewOpenTelemetry.DefaultTelemetrySource
                 .StartActivity(EventPrefix + name, ActivityKind.Internal)
                 .WithTags(initialProperties);
         }
@@ -164,7 +163,7 @@ public static Activity WithTags(this Activity activity, IDictionary<string, obje
 
             foreach (KeyValuePair<string, object> tag in tags)
             {
-                activity.SetTag(tag.Key, tag.Value);
+                activity.SetTag(PropertyPrefix + tag.Key, tag.Value);
             }
 
             return activity;
diff --git a/src/MSBuild/app.amd64.config b/src/MSBuild/app.amd64.config
index 339dfe620bf..b2ff35a1606 100644
--- a/src/MSBuild/app.amd64.config
+++ b/src/MSBuild/app.amd64.config
@@ -62,8 +62,8 @@
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Bcl.AsyncInterfaces" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-8.0.0.0" newVersion="8.0.0.0" />
-          <codeBase version="8.0.0.0" href="..\Microsoft.Bcl.AsyncInterfaces.dll"/>
+          <bindingRedirect oldVersion="0.0.0.0-9.0.0.0" newVersion="9.0.0.0" />
+          <codeBase version="9.0.0.0" href="..\Microsoft.Bcl.AsyncInterfaces.dll"/>
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.NET.StringTools" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
diff --git a/src/MSBuild/app.config b/src/MSBuild/app.config
index 063d1f715c5..71ca93c8605 100644
--- a/src/MSBuild/app.config
+++ b/src/MSBuild/app.config
@@ -33,7 +33,7 @@
         <!-- Redirects for assemblies redistributed by MSBuild (in the .vsix). -->
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Bcl.AsyncInterfaces" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-8.0.0.0" newVersion="8.0.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-9.0.0.0" newVersion="9.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.IO.Redist" culture="neutral" publicKeyToken="cc7b13ffcd2ddd51" />
@@ -62,11 +62,11 @@
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Diagnostics.DiagnosticSource" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-8.0.0.1" newVersion="8.0.0.1" />
+          <bindingRedirect oldVersion="0.0.0.0-9.0.0.0" newVersion="9.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Extensions.Configuration.Binder" publicKeyToken="adb9793829ddae60" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-8.0.0.1" newVersion="8.0.0.1" />
+          <bindingRedirect oldVersion="0.0.0.0-9.0.0.0" newVersion="9.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Numerics.Vectors" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
