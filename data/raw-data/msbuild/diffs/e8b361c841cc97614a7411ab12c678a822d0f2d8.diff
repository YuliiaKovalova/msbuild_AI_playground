diff --git a/src/XMakeBuildEngine/BackEnd/BuildManager/BuildManager.cs b/src/XMakeBuildEngine/BackEnd/BuildManager/BuildManager.cs
index ef8db6cfea3..7d169754714 100644
--- a/src/XMakeBuildEngine/BackEnd/BuildManager/BuildManager.cs
+++ b/src/XMakeBuildEngine/BackEnd/BuildManager/BuildManager.cs
@@ -413,7 +413,7 @@ public void BeginBuild(BuildParameters parameters)
                         config.ResultsNodeId = Scheduler.InvalidNodeId;
                     }
 
-                    _buildParameters.ProjectRootElementCache.ScavengeCollectedEntries();
+                    _buildParameters.ProjectRootElementCache.SetImplicitReferencesToAutoReload();
                 }
 
                 // Set up the logging service.
diff --git a/src/XMakeBuildEngine/Construction/ProjectRootElement.cs b/src/XMakeBuildEngine/Construction/ProjectRootElement.cs
index 9ff53b33e4a..02013167501 100644
--- a/src/XMakeBuildEngine/Construction/ProjectRootElement.cs
+++ b/src/XMakeBuildEngine/Construction/ProjectRootElement.cs
@@ -246,6 +246,11 @@ private ProjectRootElement(XmlDocumentWithLocation document, ProjectRootElementC
             ProjectParser.Parse(document, this);
         }
 
+        /// <summary>
+        /// See comments for <see cref="ProjectRootElementCache.SetImplicitReferencesToAutoReload"/> 
+        /// </summary>
+        internal bool AutoReloadFromDisk { get; set; }
+
         /// <summary>
         /// Event raised after this project is renamed
         /// </summary>
diff --git a/src/XMakeBuildEngine/Evaluation/ProjectRootElementCache.cs b/src/XMakeBuildEngine/Evaluation/ProjectRootElementCache.cs
index df9490d8ab2..5c0f59e6092 100644
--- a/src/XMakeBuildEngine/Evaluation/ProjectRootElementCache.cs
+++ b/src/XMakeBuildEngine/Evaluation/ProjectRootElementCache.cs
@@ -208,7 +208,8 @@ internal ProjectRootElement Get(string projectFile, OpenProjectRootElement openP
                     projectRootElement = null;
                 }
 
-                if (projectRootElement != null && _autoReloadFromDisk)
+                if (projectRootElement != null &&
+                    (_autoReloadFromDisk || projectRootElement.AutoReloadFromDisk))
                 {
                     FileInfo fileInfo = FileUtilities.GetFileInfoNoThrow(projectFile);
 
@@ -437,13 +438,33 @@ internal void DiscardImplicitReferences()
         }
 
         /// <summary>
-        /// Remove any entries from the dictionary that represent keys
-        /// that have been garbage collected.
+        /// Set any implicitly loaded entries in the cache to automatically reload if they have
+        /// changed on disk, and clean up any entries that have been garbage collected.
         /// </summary>
-        internal void ScavengeCollectedEntries()
+        /// <remarks>
+        /// Previously, implicit references were always discarded when a build started (in BuildManager.BeginBuild).
+        /// This resulted in a lot of reloading of shared .props and .targets files when loading projects in a large
+        /// solution (see https://github.com/Microsoft/msbuild/issues/1068).
+        /// So now we don't remove these entries from the cache.  In order to preserve the previous behavior, we
+        /// do need to reload them if they've changed on disk, so we set an AutoReloadFromDisk on each ProjectRootElement
+        /// that was not explicitly loaded.
+        /// </remarks>
+        internal void SetImplicitReferencesToAutoReload()
         {
             lock (_locker)
             {
+                foreach (string projectPath in _weakCache.Keys)
+                {
+                    ProjectRootElement rootElement;
+
+                    if (_weakCache.TryGetValue(projectPath, out rootElement))
+                    {
+                        if (!rootElement.IsExplicitlyLoaded)
+                        {
+                            rootElement.AutoReloadFromDisk = true;
+                        }
+                    }
+                }
                 _weakCache.Scavenge();
             }
         }
