diff --git a/ref/Microsoft.Build/net/Microsoft.Build.cs b/ref/Microsoft.Build/net/Microsoft.Build.cs
index 5c3c6fc0b15..0e78423fb3f 100644
--- a/ref/Microsoft.Build/net/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/net/Microsoft.Build.cs
@@ -1495,9 +1495,9 @@ public ProxyTargets(System.Collections.Generic.IReadOnlyDictionary<string, strin
 }
 namespace Microsoft.Build.FileSystem
 {
-    public partial class MSBuildFileSystemBase
+    public abstract partial class MSBuildFileSystemBase
     {
-        public MSBuildFileSystemBase() { }
+        protected MSBuildFileSystemBase() { }
         public virtual bool DirectoryExists(string path) { throw null; }
         public virtual System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
         public virtual System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
diff --git a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
index a6c8e6139b8..62932c63e6d 100644
--- a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
@@ -1489,9 +1489,9 @@ public ProxyTargets(System.Collections.Generic.IReadOnlyDictionary<string, strin
 }
 namespace Microsoft.Build.FileSystem
 {
-    public partial class MSBuildFileSystemBase
+    public abstract partial class MSBuildFileSystemBase
     {
-        public MSBuildFileSystemBase() { }
+        protected MSBuildFileSystemBase() { }
         public virtual bool DirectoryExists(string path) { throw null; }
         public virtual System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
         public virtual System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 54c393cd70a..e889650e4ca 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -13,7 +13,6 @@
 using Microsoft.Build.FileSystem;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Shared.FileSystem;
 
 namespace Microsoft.Build.Experimental.ProjectCache
 {
@@ -25,6 +24,13 @@ internal class ProjectCacheService
         private readonly CancellationToken _cancellationToken;
         private readonly ProjectCachePluginBase _projectCachePlugin;
 
+        /// <summary>
+        /// An instanatiable version of MSBuildFileSystemBase not overriding any methods,
+        /// i.e. falling back to FileSystem.Default.
+        /// </summary>
+        private sealed class DefaultMSBuildFileSystem : MSBuildFileSystemBase
+        { }
+
         private ProjectCacheService(
             ProjectCachePluginBase projectCachePlugin,
             BuildManager buildManager,
@@ -59,7 +65,7 @@ public static async Task<ProjectCacheService> FromDescriptorAsync(
                 await plugin.BeginBuildAsync(
                     new CacheContext(
                         pluginDescriptor.PluginSettings,
-                        new MSBuildFileSystemBase(FileSystems.Default),
+                        new DefaultMSBuildFileSystem(),
                         pluginDescriptor.ProjectGraph,
                         pluginDescriptor.EntryPoints),
                     // TODO: Detect verbosity from logging service.
diff --git a/src/Build/FileSystem/MSBuildFileSystemBase.cs b/src/Build/FileSystem/MSBuildFileSystemBase.cs
index 2a6a631af75..8855cd50da4 100644
--- a/src/Build/FileSystem/MSBuildFileSystemBase.cs
+++ b/src/Build/FileSystem/MSBuildFileSystemBase.cs
@@ -15,94 +15,72 @@ namespace Microsoft.Build.FileSystem
     /// - must be thread safe
     /// - may cache some or all the calls.
     /// </summary>
-    public class MSBuildFileSystemBase : IFileSystem
+    public abstract class MSBuildFileSystemBase : IFileSystem
     {
-        private IFileSystem _defaultFileSystem;
-        private IFileSystem DefaultFileSystem
-        {
-            get
-            {
-                if (_defaultFileSystem == null)
-                {
-                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);
-                    System.Threading.Interlocked.CompareExchange(ref _defaultFileSystem, newDefaultFileSystem, null);
-                }
-                return _defaultFileSystem;
-            }
-        }
-
-        public MSBuildFileSystemBase()
-        { }
-
-        internal MSBuildFileSystemBase(IFileSystem defaultFileSystem)
-        {
-            _defaultFileSystem = defaultFileSystem;
-        }
-
         #region IFileSystem implementation
 
         /// <summary>
         /// Use this for var sr = new StreamReader(path)
         /// </summary>
-        public virtual TextReader ReadFile(string path) => DefaultFileSystem.ReadFile(path);
+        public virtual TextReader ReadFile(string path) => FileSystems.Default.ReadFile(path);
 
         /// <summary>
         /// Use this for new FileStream(path, mode, access, share)
         /// </summary>
-        public virtual Stream GetFileStream(string path, FileMode mode, FileAccess access, FileShare share) => DefaultFileSystem.GetFileStream(path, mode, access, share);
+        public virtual Stream GetFileStream(string path, FileMode mode, FileAccess access, FileShare share) => FileSystems.Default.GetFileStream(path, mode, access, share);
 
         /// <summary>
         /// Use this for File.ReadAllText(path)
         /// </summary>
-        public virtual string ReadFileAllText(string path) => DefaultFileSystem.ReadFileAllText(path);
+        public virtual string ReadFileAllText(string path) => FileSystems.Default.ReadFileAllText(path);
 
         /// <summary>
         /// Use this for File.ReadAllBytes(path)
         /// </summary>
-        public virtual byte[] ReadFileAllBytes(string path) => DefaultFileSystem.ReadFileAllBytes(path);
+        public virtual byte[] ReadFileAllBytes(string path) => FileSystems.Default.ReadFileAllBytes(path);
 
         /// <summary>
         /// Use this for Directory.EnumerateFiles(path, pattern, option)
         /// </summary>
         public virtual IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
-            => DefaultFileSystem.EnumerateFiles(path, searchPattern, searchOption);
+            => FileSystems.Default.EnumerateFiles(path, searchPattern, searchOption);
 
         /// <summary>
         /// Use this for Directory.EnumerateFolders(path, pattern, option)
         /// </summary>
         public virtual IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
-            => DefaultFileSystem.EnumerateDirectories(path, searchPattern, searchOption);
+            => FileSystems.Default.EnumerateDirectories(path, searchPattern, searchOption);
 
         /// <summary>
         /// Use this for Directory.EnumerateFileSystemEntries(path, pattern, option)
         /// </summary>
         public virtual IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
-            => DefaultFileSystem.EnumerateFileSystemEntries(path, searchPattern, searchOption);
+            => FileSystems.Default.EnumerateFileSystemEntries(path, searchPattern, searchOption);
 
         /// <summary>
         /// Use this for File.GetAttributes()
         /// </summary>
-        public virtual FileAttributes GetAttributes(string path) => DefaultFileSystem.GetAttributes(path);
+        public virtual FileAttributes GetAttributes(string path) => FileSystems.Default.GetAttributes(path);
 
         /// <summary>
         /// Use this for File.GetLastWriteTimeUtc(path)
         /// </summary>
-        public virtual DateTime GetLastWriteTimeUtc(string path) => DefaultFileSystem.GetLastWriteTimeUtc(path);
+        public virtual DateTime GetLastWriteTimeUtc(string path) => FileSystems.Default.GetLastWriteTimeUtc(path);
 
         /// <summary>
         /// Use this for Directory.Exists(path)
         /// </summary>
-        public virtual bool DirectoryExists(string path) => DefaultFileSystem.DirectoryExists(path);
+        public virtual bool DirectoryExists(string path) => FileSystems.Default.DirectoryExists(path);
 
         /// <summary>
         /// Use this for File.Exists(path)
         /// </summary>
-        public virtual bool FileExists(string path) => DefaultFileSystem.FileExists(path);
+        public virtual bool FileExists(string path) => FileSystems.Default.FileExists(path);
 
         /// <summary>
         /// Use this for File.Exists(path) || Directory.Exists(path)
         /// </summary>
-        public virtual bool FileOrDirectoryExists(string path) => DefaultFileSystem.FileOrDirectoryExists(path);
+        public virtual bool FileOrDirectoryExists(string path) => FileSystems.Default.FileOrDirectoryExists(path);
 
         #endregion
     }
