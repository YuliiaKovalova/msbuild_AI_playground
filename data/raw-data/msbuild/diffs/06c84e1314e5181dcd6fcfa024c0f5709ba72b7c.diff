diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index a3785da9774..6034676c3cc 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -22,7 +22,7 @@ public static int ANSIBreakpoint(string text, int position)
             int nonAnsiIndex = 0;
             Match nextMatch = Regex.Match(text, ANSIRegex);
             int i = 0;
-            while (i < text.Length && nonAnsiIndex < position)
+            while (i < text.Length && nonAnsiIndex != position)
             {
                 // Jump over ansi codes
                 if (i == nextMatch.Index && nextMatch.Length > 0)
@@ -35,55 +35,19 @@ public static int ANSIBreakpoint(string text, int position)
                 i++;
             }
             return i;
-
-            /*int nonAnsiIndex = 0;
-            Match nextMatch = Regex.Match(text, ANSIRegex);
-            for (int i = 0; i < text.Length; i++)
-            {
-                if (nonAnsiIndex == position) return i;
-                // Match
-                if (i == nextMatch.Index)
-                {
-                    i += nextMatch.Length;
-                    nextMatch = nextMatch.NextMatch();
-                }
-                else
-                {
-                    nonAnsiIndex++;
-                }
-            }
-            return text.Length;*/
-
-
-            /*if (position >= text.Length) return text.Length;
-            // Create new array of positions
-            int[] nonAnsiIndices = new int[text.Length];
-            for (int i = 0; i < text.Length; i++)
-            {
-                // TODO: Figure how to do with spans for greater efficiency
-                nonAnsiIndices[i] = ANSIRemove(text.Substring(0, i)).Length - 1;
-            }
-            // Breakpoint (default at last)
-            int breakpoint = text.Length;
-            for (int i = 0; i < text.Length; i++)
-            {
-                if (nonAnsiIndices[i] == position - 1) breakpoint = i;
-            }
-            return breakpoint;*/
         }
 
         public static List<string> ANSIWrap(string text, int position)
         {
-            // Using spans to improve efficiency of substring operations
-            ReadOnlySpan<char> textSpan = text.AsSpan();
             List<string> result = new();
             int breakpoint = ANSIBreakpoint(text, position);
-            while(textSpan.Length > breakpoint)
+            while (text.Length > breakpoint)
             {
-                result.Add(textSpan.Slice(0, breakpoint).ToString());
-                textSpan = textSpan.Slice(breakpoint);
+                result.Add(text.Substring(0, breakpoint));
+                text = text.Substring(breakpoint);
+                breakpoint = ANSIBreakpoint(text, position);
             }
-            result.Add(textSpan.ToString());
+            result.Add(text);
             return result;
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index f795efaa4d7..d6e23e760f0 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -29,7 +29,7 @@ public void Initialize(IEventSource eventSource)
         {
             // Register for different events
             // Started
-            /*eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);
+            eventSource.BuildStarted += new BuildStartedEventHandler(eventSource_BuildStarted);
             eventSource.ProjectStarted += new ProjectStartedEventHandler(eventSource_ProjectStarted);
             eventSource.TargetStarted += new TargetStartedEventHandler(eventSource_TargetStarted);
             eventSource.TaskStarted += new TaskStartedEventHandler(eventSource_TaskStarted);
@@ -43,14 +43,11 @@ public void Initialize(IEventSource eventSource)
             eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             // Cancelled
-            Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed); */
+            Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed);
             // Initialize FancyLoggerBuffer
             FancyLoggerBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
             FancyLoggerBuffer.WriteNewLine(string.Empty);
-            string s = "Lorem ipsum \x1b[2mdolor sit amet\x1b[0m, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\x1b[0m";
-            FancyLoggerBuffer.WriteNewLine(s);
-            // FancyLoggerBuffer.WriteNewLine("Hi");
             FancyLoggerBuffer.Render();
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 761d8c41b3c..24463a8e71e 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -16,6 +16,7 @@ public class FancyLoggerBufferLine
         private string _text = string.Empty;
         public List<string> WrappedText { get; private set; } = new();
         public int Id;
+        public bool ShouldWrapLines;
         public string Text
         {
             get => _text;
@@ -23,7 +24,8 @@ public string Text
             {
                 // Set text value and get wrapped lines
                 _text = value;
-                WrappedText = ANSIBuilder.ANSIWrap(value, Console.BufferWidth);
+                if (ShouldWrapLines) WrappedText = ANSIBuilder.ANSIWrap(value, Console.BufferWidth);
+                else WrappedText = new List<string> { value };
             }
         }
 
@@ -31,12 +33,19 @@ public FancyLoggerBufferLine()
         {
             Id = Counter++;
             Text = string.Empty;
+            ShouldWrapLines = false;
         }
         public FancyLoggerBufferLine(string text)
             : this()
         {
             Text = text;
         }
+        public FancyLoggerBufferLine(string text, bool shouldWrapLines)
+            : this()
+        {
+            ShouldWrapLines = shouldWrapLines;
+            Text = text;
+        }
     }
 
     public class FancyLoggerBuffer
@@ -156,9 +165,9 @@ public static int GetLineIndexById(int lineId)
 
         #region Line create, update and delete
         // Write new line
-        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, string text)
+        public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, string text, bool shouldWrapLines=true)
         {
-            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text);
+            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text, shouldWrapLines);
             return WriteNewLineAfter(lineId, line);
         }
         public static FancyLoggerBufferLine? WriteNewLineAfter(int lineId, FancyLoggerBufferLine line)
@@ -179,9 +188,9 @@ public static int GetLineIndexById(int lineId)
             return line;
         }
 
-        public static FancyLoggerBufferLine? WriteNewLine(string text)
+        public static FancyLoggerBufferLine? WriteNewLine(string text, bool shouldWrapLines=true)
         {
-            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text);
+            FancyLoggerBufferLine line = new FancyLoggerBufferLine(text, shouldWrapLines);
             return WriteNewLine(line);
         }
         public static FancyLoggerBufferLine? WriteNewLine(FancyLoggerBufferLine line)
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index 50effc76709..dbdc72f974c 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -67,9 +67,8 @@ public void Log()
                 $"({MessageCount} Messages, {WarningCount} Warnings, {ErrorCount} Errors)",
                 Console.WindowWidth
             );
-
             // Create or update line
-            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents);
+            if (Line == null) Line = FancyLoggerBuffer.WriteNewLine(lineContents, false);
             else FancyLoggerBuffer.UpdateLine(Line.Id, lineContents);
 
             // For finished projects
