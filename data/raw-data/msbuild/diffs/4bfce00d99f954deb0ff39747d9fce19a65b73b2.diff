diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index e8151ced06c..6d6c6bbc486 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -154,12 +154,13 @@ public void Shutdown()
         {
             FancyLoggerBuffer.Terminate();
             // TODO: Remove. There is a bug that causes switching to main buffer without deleting the contents of the alternate buffer
-            Console.Clear();
+            // Console.Clear();
             // Console.WriteLine("Build status, warnings and errors will be shown here after the build has ended and the interactive logger has closed");
             if (Succeeded)
             {
                 Console.WriteLine(ANSIBuilder.Formatting.Color("Build succeeded.", ANSIBuilder.Formatting.ForegroundColor.Green));
                 Console.WriteLine("\t0 Warning(s)");
+                Console.WriteLine("\t0 Error(s)");
             }
             else
             {
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index eb6c16316ba..6b31180b72b 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -39,7 +39,7 @@ public static void Initialize()
         {
             // Use alternate buffer
             // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer
-            Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
+            // Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
             Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
 
             Task.Run(async () => {
@@ -74,8 +74,9 @@ public static void Initialize()
         public static void Terminate()
         {
             // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer
+            Console.Clear();
             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
-            Console.Write(ANSIBuilder.Eraser.Display());
+            Console.Clear();
             Lines = new();
         }
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
index 74e9b5c055a..be8079f7a16 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
@@ -15,11 +15,23 @@ namespace Microsoft.Build.Logging.FancyLogger
 
     public class FancyLoggerMessageNode
     {
+        public enum MessageType
+        {
+            HighPriorityMessage,
+            Warning,
+            Error
+        }
+
         public string Message;
         public FancyLoggerBufferLine? Line;
-
+        public MessageType Type;
         public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
         {
+            // Get type
+            if (args is BuildMessageEventArgs) Type = MessageType.HighPriorityMessage;
+            else if (args is BuildWarningEventArgs) Type = MessageType.Warning;
+            else if (args is BuildErrorEventArgs) Type = MessageType.Error;
+
             // TODO: Replace
             if (args.Message == null)
             {
@@ -38,7 +50,13 @@ public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
         public void Log()
         {
             if (Line == null) return;
-            FancyLoggerBuffer.UpdateLine(Line.Id, $"    └── {ANSIBuilder.Formatting.Italic(Message)}");
+            // Get color
+            ANSIBuilder.Formatting.ForegroundColor foregroundColor = ANSIBuilder.Formatting.ForegroundColor.Default;
+            if (Type == MessageType.HighPriorityMessage) foregroundColor = ANSIBuilder.Formatting.ForegroundColor.Default;
+            else if (Type == MessageType.Warning) foregroundColor = ANSIBuilder.Formatting.ForegroundColor.Yellow;
+            else if (Type == MessageType.Error) foregroundColor = ANSIBuilder.Formatting.ForegroundColor.Red;
+
+            FancyLoggerBuffer.UpdateLine(Line.Id, $"    └── {ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Italic(Message), foregroundColor)}");
         }
     }
 }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index a97e265960a..bb40ecb3284 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -69,10 +69,12 @@ public void Log()
             if (Finished)
             {
                 if (CurrentTargetLine != null) FancyLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
-                foreach (FancyLoggerMessageNode node in AdditionalDetails)
+                foreach (FancyLoggerMessageNode node in AdditionalDetails.ToList())
                 {
+                    // Only delete high priority messages
+                    if (node.Type != FancyLoggerMessageNode.MessageType.HighPriorityMessage) continue;
                     if (node.Line != null) FancyLoggerBuffer.DeleteLine(node.Line.Id);
-                    node.Line = null;
+                    AdditionalDetails.Remove(node);
                 }
             }
 
