diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
index 143b7a25486..719a6daaa15 100644
--- a/eng/CodeAnalysis.ruleset
+++ b/eng/CodeAnalysis.ruleset
@@ -105,14 +105,14 @@
       <Rule Id="CA1832" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
       <Rule Id="CA1833" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
       <Rule Id="CA1834" Action="Info" />             <!-- Consider using 'StringBuilder.Append(char)' when applicable. --> 
-      <Rule Id="CA1835" Action="Warning" />          <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' --> 
+      <Rule Id="CA1835" Action="Info" />          <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' --> 
       <Rule Id="CA1836" Action="Info" />             <!-- Prefer IsEmpty over Count --> 
       <Rule Id="CA1837" Action="Info" />             <!-- Use 'Environment.ProcessId' -->  
       <Rule Id="CA1838" Action="Info" />             <!-- Avoid 'StringBuilder' parameters for P/Invokes --> 
       <Rule Id="CA2000" Action="None" />             <!-- Dispose objects before losing scope --> 
       <Rule Id="CA2002" Action="None" />             <!-- Do not lock on objects with weak identity --> 
       <Rule Id="CA2007" Action="Info" />             <!-- Consider calling ConfigureAwait on the awaited task --> 
-      <Rule Id="CA2008" Action="Warning" />          <!-- Do not create tasks without passing a TaskScheduler --> 
+      <Rule Id="CA2008" Action="Info" />          <!-- Do not create tasks without passing a TaskScheduler --> 
       <Rule Id="CA2009" Action="Warning" />          <!-- Do not call ToImmutableCollection on an ImmutableCollection value --> 
       <Rule Id="CA2011" Action="Warning" />          <!-- Avoid infinite recursion --> 
       <Rule Id="CA2012" Action="Warning" />          <!-- Use ValueTasks correctly --> 
