diff --git a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
index 5ed589905e2..0c24f2cab6c 100644
--- a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
+++ b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
@@ -11,67 +11,65 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
-namespace Microsoft.Build.BuildCheck.Acquisition
+namespace Microsoft.Build.BuildCheck.Acquisition;
+
+internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule
 {
-    internal class BuildCheckAcquisitionModule : IBuildCheckAcquisitionModule
-    {
-        private readonly ILoggingService _loggingService;
+    private readonly ILoggingService _loggingService;
 
-        internal BuildCheckAcquisitionModule(ILoggingService loggingService)
-        {
-            _loggingService = loggingService;
-        }
+    internal BuildCheckAcquisitionModule(ILoggingService loggingService)
+    {
+        _loggingService = loggingService;
+    }
 
 #if FEATURE_ASSEMBLYLOADCONTEXT
-        /// <summary>
-        /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory
-        /// </summary>
-        private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();
+    /// <summary>
+    /// AssemblyContextLoader used to load DLLs outside of msbuild.exe directory
+    /// </summary>
+    private static readonly CoreClrAssemblyLoader s_coreClrAssemblyLoader = new();
 #endif
 
-        public IEnumerable<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)
+    /// <summary>
+    /// Creates a list of factory delegates for building analyzer rules instances from a given assembly path.
+    /// </summary>
+    public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)
+    {
+        var analyzersFactories = new List<BuildAnalyzerFactory>();
+
+        try
         {
-            try
-            {
-                Assembly? assembly = null;
+            Assembly? assembly = null;
 #if FEATURE_ASSEMBLYLOADCONTEXT
-                assembly = s_coreClrAssemblyLoader.LoadFromPath(analyzerAcquisitionData.AssemblyPath);
+            assembly = s_coreClrAssemblyLoader.LoadFromPath(analyzerAcquisitionData.AssemblyPath);
 #else
-                assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);
+            assembly = Assembly.LoadFrom(analyzerAcquisitionData.AssemblyPath);
 #endif
 
-                IEnumerable<Type> analyzerTypes = assembly.GetTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));
+            IEnumerable<Type> analyzerTypes = assembly.GetTypes().Where(t => typeof(BuildAnalyzer).IsAssignableFrom(t));
 
-                if (analyzerTypes.Any())
+            foreach (Type analyzerType in analyzerTypes)
+            {
+                if (Activator.CreateInstance(analyzerType) is BuildAnalyzer instance)
                 {
-                    var analyzersFactory = new List<BuildAnalyzerFactory>();
-                    foreach (Type analyzerType in analyzerTypes)
-                    {
-                        if (Activator.CreateInstance(analyzerType) is BuildAnalyzer instance)
-                        {
-                            analyzersFactory.Add(() => instance);
-                        }
-                        else
-                        {
-                            throw new InvalidOperationException($"Failed to create an instance of type {analyzerType.FullName} as BuildAnalyzer.");
-                        }
-                    }
-
-                    return analyzersFactory;
+                    analyzersFactories.Add(() => instance);
+                }
+                else
+                {
+                    throw new InvalidOperationException($"Failed to create an instance of type {analyzerType.FullName} as BuildAnalyzer.");
                 }
             }
-            catch (ReflectionTypeLoadException ex)
+        }
+        catch (ReflectionTypeLoadException ex)
+        {
+            if (ex.LoaderExceptions.Length != 0)
             {
-                if (ex.LoaderExceptions.Length != 0)
+                foreach (Exception? loaderException in ex.LoaderExceptions)
                 {
-                    foreach (Exception? loaderException in ex.LoaderExceptions)
-                    {
-                        _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "CustomAnalyzerFailedRuleLoading", loaderException?.Message);
-                    }
+                    _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "CustomAnalyzerFailedRuleLoading", loaderException?.Message);
                 }
             }
-
-            return Enumerable.Empty<BuildAnalyzerFactory>();
         }
+
+        return analyzersFactories;
     }
 }
diff --git a/src/Build/BuildCheck/Acquisition/IBuildCheckAcquisitionModule.cs b/src/Build/BuildCheck/Acquisition/IBuildCheckAcquisitionModule.cs
index 166aa3fb210..eb9f08b4625 100644
--- a/src/Build/BuildCheck/Acquisition/IBuildCheckAcquisitionModule.cs
+++ b/src/Build/BuildCheck/Acquisition/IBuildCheckAcquisitionModule.cs
@@ -9,6 +9,9 @@ namespace Microsoft.Build.BuildCheck.Acquisition
 {
     internal interface IBuildCheckAcquisitionModule
     {
-        IEnumerable<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext);
+        /// <summary>
+        /// Creates a list of factory delegates for building analyzer rules instances from a given assembly path.
+        /// </summary>
+        List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext);
     }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 8ff2f376f36..9704a5a5e9c 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -100,7 +100,7 @@ public void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData,
             if (IsInProcNode)
             {
                 var analyzersFactories = _acquisitionModule.CreateBuildAnalyzerFactories(acquisitionData, buildEventContext);
-                if (analyzersFactories.Any())
+                if (analyzersFactories.Count != 0)
                 {
                     RegisterCustomAnalyzer(BuildCheckDataSource.EventArgs, analyzersFactories, buildEventContext);
                 }
@@ -146,7 +146,7 @@ private void RegisterBuiltInAnalyzers(BuildCheckDataSource buildCheckDataSource)
 
         /// <summary>
         /// To be used by acquisition module.
-        /// Registeres the custom analyzers, the construction of analyzers is deferred until the first using project is encountered.
+        /// Registers the custom analyzers, the construction of analyzers is deferred until the first using project is encountered.
         /// </summary>
         internal void RegisterCustomAnalyzers(
             BuildCheckDataSource buildCheckDataSource,
@@ -165,8 +165,11 @@ internal void RegisterCustomAnalyzers(
 
         /// <summary>
         /// To be used by acquisition module
-        /// Registeres the custom analyzer, the construction of analyzer is needed during registration
+        /// Registers the custom analyzer, the construction of analyzer is needed during registration.
         /// </summary>
+        /// <param name="buildCheckDataSource">Represents different data sources used in build check operations.</param>
+        /// <param name="factories">A collection of build analyzer factories for rules instantiation.</param>
+        /// <param name="buildEventContext">The context of the build event.</param>
         internal void RegisterCustomAnalyzer(
             BuildCheckDataSource buildCheckDataSource,
             IEnumerable<BuildAnalyzerFactory> factories,
@@ -182,7 +185,7 @@ internal void RegisterCustomAnalyzer(
                         instance.SupportedRules.Select(r => r.Id).ToArray(),
                         instance.SupportedRules.Any(r => r.DefaultConfiguration.IsEnabled == true)));
                     _loggingService.LogComment(buildEventContext, MessageImportance.Normal, "CustomAnalyzerSuccessfulAcquisition", instance.FriendlyName);
-                }        
+                }     
             }
         }
 
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index 117d3aa8a03..331502e95e0 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -8,58 +8,57 @@
 using Microsoft.Build.BuildCheck.Logging;
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Experimental.BuildCheck
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+/// <summary>
+/// Enumerates the different data sources used in build check operations.
+/// </summary>
+internal enum BuildCheckDataSource
 {
     /// <summary>
-    /// Enumerates the different data sources used in build check operations.
+    /// The data source is based on event arguments.
     /// </summary>
-    internal enum BuildCheckDataSource
-    {
-        /// <summary>
-        /// The data source is based on event arguments.
-        /// </summary>
-        EventArgs,
-
-        /// <summary>
-        /// The data source is based on build execution.
-        /// </summary>
-        BuildExecution,
+    EventArgs,
 
-        /// <summary>
-        /// Represents the total number of values in the enum, used for indexing purposes.
-        /// </summary>
-        ValuesCount = BuildExecution + 1,
-    }
+    /// <summary>
+    /// The data source is based on build execution.
+    /// </summary>
+    BuildExecution,
 
     /// <summary>
-    /// The central manager for the BuildCheck - this is the integration point with MSBuild infrastructure.
+    /// Represents the total number of values in the enum, used for indexing purposes.
     /// </summary>
-    internal interface IBuildCheckManager
-    {
-        void ProcessEvaluationFinishedEventArgs(
-            AnalyzerLoggingContext buildAnalysisContext,
-            ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs);
+    ValuesCount = BuildExecution + 1,
+}
+
+/// <summary>
+/// The central manager for the BuildCheck - this is the integration point with MSBuild infrastructure.
+/// </summary>
+internal interface IBuildCheckManager
+{
+    void ProcessEvaluationFinishedEventArgs(
+        AnalyzerLoggingContext buildAnalysisContext,
+        ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs);
 
-        void SetDataSource(BuildCheckDataSource buildCheckDataSource);
+    void SetDataSource(BuildCheckDataSource buildCheckDataSource);
 
-        void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData, BuildEventContext buildEventContext);
+    void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData, BuildEventContext buildEventContext);
 
-        Dictionary<string, TimeSpan> CreateTracingStats();
+    Dictionary<string, TimeSpan> CreateTracingStats();
 
-        void FinalizeProcessing(LoggingContext loggingContext);
+    void FinalizeProcessing(LoggingContext loggingContext);
 
-        // All those to be called from RequestBuilder,
-        //  but as well from the ConnectorLogger - as even if interleaved, it gives the info
-        //  to manager about what analyzers need to be materialized and configuration fetched.
-        // No unloading of analyzers is yet considered - once loaded it stays for whole build.
-        void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext, string fullPath);
+    // All those to be called from RequestBuilder,
+    //  but as well from the ConnectorLogger - as even if interleaved, it gives the info
+    //  to manager about what analyzers need to be materialized and configuration fetched.
+    // No unloading of analyzers is yet considered - once loaded it stays for whole build.
+    void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext, string fullPath);
 
-        void EndProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
+    void EndProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
 
-        void StartProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
+    void StartProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
 
-        void EndProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
+    void EndProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
 
-        void Shutdown();
-    }
+    void Shutdown();
 }
diff --git a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
index 9b9d42e18d1..1518241d42f 100644
--- a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
+++ b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
@@ -66,7 +66,7 @@ internal sealed class BuildCheckAcquisitionModuleMock : IBuildCheckAcquisitionMo
 
     internal BuildCheckAcquisitionModuleMock(bool isAnalyzerRuleExistForTest) => _isAnalyzerRuleExistForTest = isAnalyzerRuleExistForTest;
 
-    public IEnumerable<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)
+    public List<BuildAnalyzerFactory> CreateBuildAnalyzerFactories(AnalyzerAcquisitionData analyzerAcquisitionData, BuildEventContext buildEventContext)
         => _isAnalyzerRuleExistForTest
         ? new List<BuildAnalyzerFactory>() { () => new BuildAnalyzerRuleMock("Rule1"), () => new BuildAnalyzerRuleMock("Rule2") }
         : new List<BuildAnalyzerFactory>();
