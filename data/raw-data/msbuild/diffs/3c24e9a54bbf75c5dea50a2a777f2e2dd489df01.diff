diff --git a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
index 6881debdae2..dce14e3d422 100644
--- a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
@@ -54,7 +54,7 @@ internal NodeEndpointOutOfProc(
         /// <summary>
         /// Returns the host handshake for this node endpoint
         /// </summary>
-        protected override IHandshake GetHandshake()
+        protected override Handshake GetHandshake()
         {
             return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(), nodeReuse: _enableReuse, lowPriority: _lowPriority));
         }
diff --git a/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs b/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs
index 528d27056da..0590a95c1ba 100644
--- a/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/ServerNodeEndpointOutOfProc.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.BackEnd
     /// </summary>
     internal sealed class ServerNodeEndpointOutOfProc : NodeEndpointOutOfProcBase
     {
-        private readonly IHandshake _handshake;
+        private readonly Handshake _handshake;
 
         /// <summary>
         /// Instantiates an endpoint to act as a client
@@ -20,7 +20,7 @@ internal sealed class ServerNodeEndpointOutOfProc : NodeEndpointOutOfProcBase
         /// <param name="handshake"></param>
         internal ServerNodeEndpointOutOfProc(
             string pipeName,
-            IHandshake handshake)
+            Handshake handshake)
         {
             _handshake = handshake;
 
@@ -30,7 +30,7 @@ internal ServerNodeEndpointOutOfProc(
         /// <summary>
         /// Returns the host handshake for this node endpoint
         /// </summary>
-        protected override IHandshake GetHandshake()
+        protected override Handshake GetHandshake()
         {
             return _handshake;
         }
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index 3d532f3506c..e6889579a10 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -85,10 +85,8 @@ public OutOfProcServerNode(Func<string, (int exitCode, string exitType)> buildFu
         /// <returns>The reason for shutting down.</returns>
         public NodeEngineShutdownReason Run(out Exception? shutdownException)
         {
-            string msBuildLocation = BuildEnvironmentHelper.Instance.CurrentMSBuildExePath;
             var handshake = new ServerNodeHandshake(
-                CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture()),
-                msBuildLocation);
+                CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture()));
 
             string pipeName = NamedPipeUtil.GetPipeNameOrPath("MSBuildServer-" + handshake.ComputeHash());
 
diff --git a/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs b/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
index 0f1e1eacb05..36ea494b383 100644
--- a/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
+++ b/src/MSBuild/NodeEndpointOutOfProcTaskHost.cs
@@ -28,7 +28,7 @@ internal NodeEndpointOutOfProcTaskHost()
         /// <summary>
         /// Returns the host handshake for this node endpoint
         /// </summary>
-        protected override IHandshake GetHandshake()
+        protected override Handshake GetHandshake()
         {
             return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: true));
         }
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index 7e86ff4ee03..131a64a0786 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -77,34 +77,17 @@ internal enum HandshakeOptions
         Arm64 = 128,
     }
 
-    internal interface IHandshake
+    internal class Handshake
     {
-        int[] RetrieveHandshakeComponents();
-
-        /// <summary>
-        /// Get string key representing all handshake values. It does not need to be human readable.
-        /// </summary>
-        string GetKey();
-
-        /// <summary>
-        /// Some handshakes uses very 1st byte to encode version of handshake in it,
-        /// so if it does not match it can reject it early based on very first byte.
-        /// Null means that no such encoding is used
-        /// </summary>
-        byte? ExpectedVersionInFirstByte { get; }
-    }
-
-    internal readonly struct Handshake : IHandshake
-    {
-        readonly int options;
-        readonly int salt;
-        readonly int fileVersionMajor;
-        readonly int fileVersionMinor;
-        readonly int fileVersionBuild;
-        readonly int fileVersionPrivate;
-        readonly int sessionId;
-
-        internal Handshake(HandshakeOptions nodeType)
+        protected readonly int options;
+        protected readonly int salt;
+        protected readonly int fileVersionMajor;
+        protected readonly int fileVersionMinor;
+        protected readonly int fileVersionBuild;
+        protected readonly int fileVersionPrivate;
+        private readonly int sessionId;
+
+        internal protected Handshake(HandshakeOptions nodeType)
         {
             const int handshakeVersion = (int)CommunicationsUtilities.handshakeVersion;
 
@@ -132,7 +115,7 @@ public override string ToString()
             return String.Format("{0} {1} {2} {3} {4} {5} {6}", options, salt, fileVersionMajor, fileVersionMinor, fileVersionBuild, fileVersionPrivate, sessionId);
         }
 
-        public int[] RetrieveHandshakeComponents()
+        public virtual int[] RetrieveHandshakeComponents()
         {
             return new int[]
             {
@@ -146,38 +129,20 @@ public int[] RetrieveHandshakeComponents()
             };
         }
 
-        public string GetKey() => $"{options} {salt} {fileVersionMajor} {fileVersionMinor} {fileVersionBuild} {fileVersionPrivate} {sessionId}".ToString(CultureInfo.InvariantCulture);
+        public virtual string GetKey() => $"{options} {salt} {fileVersionMajor} {fileVersionMinor} {fileVersionBuild} {fileVersionPrivate} {sessionId}".ToString(CultureInfo.InvariantCulture);
 
-        public byte? ExpectedVersionInFirstByte => CommunicationsUtilities.handshakeVersion;
+        public virtual byte? ExpectedVersionInFirstByte => CommunicationsUtilities.handshakeVersion;
     }
 
-    internal sealed class ServerNodeHandshake : IHandshake
+    internal sealed class ServerNodeHandshake : Handshake
     {
-        readonly int _options;
-        readonly int _salt;
-        readonly int _fileVersionMajor;
-        readonly int _fileVersionMinor;
-        readonly int _fileVersionBuild;
-        readonly int _fileVersionRevision;
-
-        internal ServerNodeHandshake(HandshakeOptions nodeType, string msBuildLocation)
+        public override byte? ExpectedVersionInFirstByte => null;
+
+        internal ServerNodeHandshake(HandshakeOptions nodeType)
+            : base(nodeType)
         {
-            // We currently use 6 bits of this 32-bit integer. Very old builds will instantly reject any handshake that does not start with F5 or 06; slightly old builds always lead with 00.
-            // This indicates in the first byte that we are a modern build.
-            _options = (int)nodeType | (CommunicationsUtilities.handshakeVersion << 24);
-            string handshakeSalt = Environment.GetEnvironmentVariable("MSBUILDNODEHANDSHAKESALT");
-            var msBuildFile = new FileInfo(msBuildLocation);
-            var msBuildDirectory = msBuildFile.DirectoryName;
-            _salt = ComputeHandshakeHash(handshakeSalt + msBuildDirectory);
-            Version fileVersion = new Version(FileVersionInfo.GetVersionInfo(msBuildLocation).FileVersion ?? string.Empty);
-            _fileVersionMajor = fileVersion.Major;
-            _fileVersionMinor = fileVersion.Minor;
-            _fileVersionBuild = fileVersion.Build;
-            _fileVersionRevision = fileVersion.Revision;
         }
 
-        internal const int EndOfHandshakeSignal = -0x2a2a2a2a;
-
         /// <summary>
         /// Compute stable hash as integer
         /// </summary>
@@ -189,32 +154,25 @@ private static int ComputeHandshakeHash(string fromString)
             return BitConverter.ToInt32(bytes, 0);
         }
 
-        internal static int AvoidEndOfHandshakeSignal(int x)
-        {
-            return x == EndOfHandshakeSignal ? ~x : x;
-        }
-
-        public int[] RetrieveHandshakeComponents()
+        public override int[] RetrieveHandshakeComponents()
         {
             return new int[]
             {
-                AvoidEndOfHandshakeSignal(_options),
-                AvoidEndOfHandshakeSignal(_salt),
-                AvoidEndOfHandshakeSignal(_fileVersionMajor),
-                AvoidEndOfHandshakeSignal(_fileVersionMinor),
-                AvoidEndOfHandshakeSignal(_fileVersionBuild),
-                AvoidEndOfHandshakeSignal(_fileVersionRevision),
+                CommunicationsUtilities.AvoidEndOfHandshakeSignal(options),
+                CommunicationsUtilities.AvoidEndOfHandshakeSignal(salt),
+                CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMajor),
+                CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionMinor),
+                CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionBuild),
+                CommunicationsUtilities.AvoidEndOfHandshakeSignal(fileVersionPrivate),
             };
         }
 
-        public string GetKey()
+        public override string GetKey()
         {
-            return $"{_options} {_salt} {_fileVersionMajor} {_fileVersionMinor} {_fileVersionBuild} {_fileVersionRevision}"
+            return $"{options} {salt} {fileVersionMajor} {fileVersionMinor} {fileVersionBuild} {fileVersionPrivate}"
                 .ToString(CultureInfo.InvariantCulture);
         }
 
-        public byte? ExpectedVersionInFirstByte => null;
-
         /// <summary>
         /// Computes Handshake stable hash string representing whole state of handshake.
         /// </summary>
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index f402ecac71a..9b15f5baf2f 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -246,7 +246,7 @@ internal void InternalConstruct(string pipeName = null)
         /// <summary>
         /// Returns the host handshake for this node endpoint
         /// </summary>
-        protected abstract IHandshake GetHandshake();
+        protected abstract Handshake GetHandshake();
 
         /// <summary>
         /// Updates the current link status if it has changed and notifies any registered delegates.
@@ -374,7 +374,7 @@ private void PacketPumpProc()
                     // The handshake protocol is a series of int exchanges.  The host sends us a each component, and we
                     // verify it. Afterwards, the host sends an "End of Handshake" signal, to which we respond in kind.
                     // Once the handshake is complete, both sides can be assured the other is ready to accept data.
-                    IHandshake handshake = GetHandshake();
+                    Handshake handshake = GetHandshake();
                     try
                     {
                         int[] handshakeComponents = handshake.RetrieveHandshakeComponents();
