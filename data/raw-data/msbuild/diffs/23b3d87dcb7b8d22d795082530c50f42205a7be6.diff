diff --git a/ref/Microsoft.Build/net/Microsoft.Build.cs b/ref/Microsoft.Build/net/Microsoft.Build.cs
index d59f83ba636..5c3c6fc0b15 100644
--- a/ref/Microsoft.Build/net/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/net/Microsoft.Build.cs
@@ -1495,21 +1495,21 @@ public ProxyTargets(System.Collections.Generic.IReadOnlyDictionary<string, strin
 }
 namespace Microsoft.Build.FileSystem
 {
-    public abstract partial class MSBuildFileSystemBase
-    {
-        protected MSBuildFileSystemBase() { }
-        public abstract bool DirectoryExists(string path);
-        public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly);
-        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly);
-        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly);
-        public abstract bool FileExists(string path);
-        public abstract bool FileOrDirectoryExists(string path);
-        public abstract System.IO.FileAttributes GetAttributes(string path);
-        public abstract System.IO.Stream GetFileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
-        public abstract System.DateTime GetLastWriteTimeUtc(string path);
-        public abstract System.IO.TextReader ReadFile(string path);
-        public abstract byte[] ReadFileAllBytes(string path);
-        public abstract string ReadFileAllText(string path);
+    public partial class MSBuildFileSystemBase
+    {
+        public MSBuildFileSystemBase() { }
+        public virtual bool DirectoryExists(string path) { throw null; }
+        public virtual System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
+        public virtual System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
+        public virtual System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
+        public virtual bool FileExists(string path) { throw null; }
+        public virtual bool FileOrDirectoryExists(string path) { throw null; }
+        public virtual System.IO.FileAttributes GetAttributes(string path) { throw null; }
+        public virtual System.IO.Stream GetFileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { throw null; }
+        public virtual System.DateTime GetLastWriteTimeUtc(string path) { throw null; }
+        public virtual System.IO.TextReader ReadFile(string path) { throw null; }
+        public virtual byte[] ReadFileAllBytes(string path) { throw null; }
+        public virtual string ReadFileAllText(string path) { throw null; }
     }
 }
 namespace Microsoft.Build.Globbing
diff --git a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
index ab3acb3d087..a6c8e6139b8 100644
--- a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
@@ -1489,21 +1489,21 @@ public ProxyTargets(System.Collections.Generic.IReadOnlyDictionary<string, strin
 }
 namespace Microsoft.Build.FileSystem
 {
-    public abstract partial class MSBuildFileSystemBase
-    {
-        protected MSBuildFileSystemBase() { }
-        public abstract bool DirectoryExists(string path);
-        public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly);
-        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly);
-        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly);
-        public abstract bool FileExists(string path);
-        public abstract bool FileOrDirectoryExists(string path);
-        public abstract System.IO.FileAttributes GetAttributes(string path);
-        public abstract System.IO.Stream GetFileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
-        public abstract System.DateTime GetLastWriteTimeUtc(string path);
-        public abstract System.IO.TextReader ReadFile(string path);
-        public abstract byte[] ReadFileAllBytes(string path);
-        public abstract string ReadFileAllText(string path);
+    public partial class MSBuildFileSystemBase
+    {
+        public MSBuildFileSystemBase() { }
+        public virtual bool DirectoryExists(string path) { throw null; }
+        public virtual System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
+        public virtual System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
+        public virtual System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
+        public virtual bool FileExists(string path) { throw null; }
+        public virtual bool FileOrDirectoryExists(string path) { throw null; }
+        public virtual System.IO.FileAttributes GetAttributes(string path) { throw null; }
+        public virtual System.IO.Stream GetFileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { throw null; }
+        public virtual System.DateTime GetLastWriteTimeUtc(string path) { throw null; }
+        public virtual System.IO.TextReader ReadFile(string path) { throw null; }
+        public virtual byte[] ReadFileAllBytes(string path) { throw null; }
+        public virtual string ReadFileAllText(string path) { throw null; }
     }
 }
 namespace Microsoft.Build.Globbing
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index ad7259723ce..54c393cd70a 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -59,7 +59,7 @@ public static async Task<ProjectCacheService> FromDescriptorAsync(
                 await plugin.BeginBuildAsync(
                     new CacheContext(
                         pluginDescriptor.PluginSettings,
-                        new IFileSystemAdapter(FileSystems.Default),
+                        new MSBuildFileSystemBase(FileSystems.Default),
                         pluginDescriptor.ProjectGraph,
                         pluginDescriptor.EntryPoints),
                     // TODO: Detect verbosity from logging service.
diff --git a/src/Build/Evaluation/Context/EvaluationContext.cs b/src/Build/Evaluation/Context/EvaluationContext.cs
index 470b4f0cb1e..827d9465d75 100644
--- a/src/Build/Evaluation/Context/EvaluationContext.cs
+++ b/src/Build/Evaluation/Context/EvaluationContext.cs
@@ -91,7 +91,7 @@ public static EvaluationContext Create(SharingPolicy policy, MSBuildFileSystemBa
         {
             var context = new EvaluationContext(
                 policy,
-                fileSystem == null ? null : new MSBuildFileSystemAdapter(fileSystem));
+                fileSystem);
 
             TestOnlyHookOnCreate?.Invoke(context);
 
diff --git a/src/Build/FileSystem/IFileSystemAdapter.cs b/src/Build/FileSystem/IFileSystemAdapter.cs
deleted file mode 100644
index dce1574702c..00000000000
--- a/src/Build/FileSystem/IFileSystemAdapter.cs
+++ /dev/null
@@ -1,97 +0,0 @@
-ï»¿// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-using System;
-using System.Collections.Generic;
-using System.IO;
-using Microsoft.Build.Shared.FileSystem;
-
-namespace Microsoft.Build.FileSystem
-{
-    internal class IFileSystemAdapter : MSBuildFileSystemBase
-    {
-        private readonly IFileSystem _wrappedFileSystem;
-
-        public IFileSystemAdapter(IFileSystem wrappedFileSystem)
-        {
-            _wrappedFileSystem = wrappedFileSystem;
-        }
-
-        public override TextReader ReadFile(string path)
-        {
-            return _wrappedFileSystem.ReadFile(path);
-        }
-
-        public override Stream GetFileStream(
-            string path,
-            FileMode mode,
-            FileAccess access,
-            FileShare share)
-        {
-            return _wrappedFileSystem.GetFileStream(
-                path,
-                mode,
-                access,
-                share);
-        }
-
-        public override string ReadFileAllText(string path)
-        {
-            return _wrappedFileSystem.ReadFileAllText(path);
-        }
-
-        public override byte[] ReadFileAllBytes(string path)
-        {
-            return _wrappedFileSystem.ReadFileAllBytes(path);
-        }
-
-        public override IEnumerable<string> EnumerateFiles(
-            string path,
-            string searchPattern = "*",
-            SearchOption searchOption = SearchOption.TopDirectoryOnly)
-        {
-            return _wrappedFileSystem.EnumerateFiles(path, searchPattern, searchOption);
-        }
-
-        public override IEnumerable<string> EnumerateDirectories(
-            string path,
-            string searchPattern = "*",
-            SearchOption searchOption = SearchOption.TopDirectoryOnly)
-        {
-            return _wrappedFileSystem.EnumerateDirectories(path, searchPattern, searchOption);
-        }
-
-        public override IEnumerable<string> EnumerateFileSystemEntries(
-            string path,
-            string searchPattern = "*",
-            SearchOption searchOption = SearchOption.TopDirectoryOnly)
-        {
-            return _wrappedFileSystem.EnumerateFileSystemEntries(path, searchPattern, searchOption);
-        }
-
-        public override FileAttributes GetAttributes(string path)
-        {
-            return _wrappedFileSystem.GetAttributes(path);
-        }
-
-        public override DateTime GetLastWriteTimeUtc(string path)
-        {
-            return _wrappedFileSystem.GetLastWriteTimeUtc(path);
-        }
-
-        public override bool DirectoryExists(string path)
-        {
-            return _wrappedFileSystem.DirectoryExists(path);
-        }
-
-        public override bool FileExists(string path)
-        {
-            return _wrappedFileSystem.FileExists(path);
-        }
-
-        public override bool FileOrDirectoryExists(string path)
-        {
-            return _wrappedFileSystem.DirectoryEntryExists(path);
-        }
-    }
-}
diff --git a/src/Build/FileSystem/MSBuildFileSystemAdapter.cs b/src/Build/FileSystem/MSBuildFileSystemAdapter.cs
deleted file mode 100644
index 4c69284d955..00000000000
--- a/src/Build/FileSystem/MSBuildFileSystemAdapter.cs
+++ /dev/null
@@ -1,54 +0,0 @@
-ï»¿// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-using System;
-using System.Collections.Generic;
-using System.IO;
-using Microsoft.Build.Shared.FileSystem;
-
-namespace Microsoft.Build.FileSystem
-{
-     internal class MSBuildFileSystemAdapter : IFileSystem
-    {
-        private readonly MSBuildFileSystemBase _msbuildFileSystem;
-        public MSBuildFileSystemAdapter(MSBuildFileSystemBase msbuildFileSystem)
-        {
-            _msbuildFileSystem = msbuildFileSystem;
-        }
-        public TextReader ReadFile(string path) => _msbuildFileSystem.ReadFile(path);
-
-        public Stream GetFileStream(string path, FileMode mode, FileAccess access, FileShare share) => _msbuildFileSystem.GetFileStream(path, mode, access, share);
-
-        public string ReadFileAllText(string path) => _msbuildFileSystem.ReadFileAllText(path);
-
-        public byte[] ReadFileAllBytes(string path) => _msbuildFileSystem.ReadFileAllBytes(path);
-
-        public IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
-        {
-            return _msbuildFileSystem.EnumerateFiles(path, searchPattern, searchOption);
-        }
-
-        public IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
-        {
-            return _msbuildFileSystem.EnumerateDirectories(path, searchPattern, searchOption);
-        }
-
-        public IEnumerable<string> EnumerateFileSystemEntries(
-            string path,
-            string searchPattern = "*",
-            SearchOption searchOption = SearchOption.TopDirectoryOnly)
-        {
-            return _msbuildFileSystem.EnumerateFileSystemEntries(path, searchPattern, searchOption);
-        }
-
-        public FileAttributes GetAttributes(string path) => _msbuildFileSystem.GetAttributes(path);
-
-        public DateTime GetLastWriteTimeUtc(string path) => _msbuildFileSystem.GetLastWriteTimeUtc(path);
-
-        public bool DirectoryExists(string path) => _msbuildFileSystem.DirectoryExists(path);
-
-        public bool FileExists(string path) => _msbuildFileSystem.FileExists(path);
-
-        public bool DirectoryEntryExists(string path) => _msbuildFileSystem.FileOrDirectoryExists(path);
-    }
-}
diff --git a/src/Build/FileSystem/MSBuildFileSystemBase.cs b/src/Build/FileSystem/MSBuildFileSystemBase.cs
index 5383e717a9b..f41979cde42 100644
--- a/src/Build/FileSystem/MSBuildFileSystemBase.cs
+++ b/src/Build/FileSystem/MSBuildFileSystemBase.cs
@@ -1,6 +1,7 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using Microsoft.Build.Shared.FileSystem;
 using System;
 using System.Collections.Generic;
 using System.IO;
@@ -14,66 +15,131 @@ namespace Microsoft.Build.FileSystem
     /// - must be thread safe
     /// - may cache some or all the calls.
     /// </summary>
-    public abstract class MSBuildFileSystemBase
+    public class MSBuildFileSystemBase : IFileSystem
     {
+        private IFileSystem _defaultFileSystem;
+        private IFileSystem DefaultFileSystem
+        {
+            get
+            {
+                if (_defaultFileSystem == null)
+                {
+                    var newDefaultFileSystem = new CachingFileSystemWrapper(FileSystems.Default);
+                    System.Threading.Interlocked.CompareExchange(ref _defaultFileSystem, newDefaultFileSystem, null);
+                }
+                return _defaultFileSystem;
+            }
+        }
+
+        public MSBuildFileSystemBase()
+        { }
+
+        internal MSBuildFileSystemBase(IFileSystem defaultFileSystem)
+        {
+            _defaultFileSystem = defaultFileSystem;
+        }
+
         /// <summary>
         /// Use this for var sr = new StreamReader(path)
         /// </summary>
-        public abstract TextReader ReadFile(string path);
+        public virtual TextReader ReadFile(string path) => DefaultFileSystem.ReadFile(path);
 
         /// <summary>
         /// Use this for new FileStream(path, mode, access, share)
         /// </summary>
-        public abstract Stream GetFileStream(string path, FileMode mode, FileAccess access, FileShare share);
+        public virtual Stream GetFileStream(string path, FileMode mode, FileAccess access, FileShare share) => DefaultFileSystem.GetFileStream(path, mode, access, share);
 
         /// <summary>
         /// Use this for File.ReadAllText(path)
         /// </summary>
-        public abstract string ReadFileAllText(string path);
+        public virtual string ReadFileAllText(string path) => DefaultFileSystem.ReadFileAllText(path);
 
         /// <summary>
         /// Use this for File.ReadAllBytes(path)
         /// </summary>
-        public abstract byte[] ReadFileAllBytes(string path);
+        public virtual byte[] ReadFileAllBytes(string path) => DefaultFileSystem.ReadFileAllBytes(path);
 
         /// <summary>
         /// Use this for Directory.EnumerateFiles(path, pattern, option)
         /// </summary>
-        public abstract IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly);
+        public virtual IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
+            => DefaultFileSystem.EnumerateFiles(path, searchPattern, searchOption);
 
         /// <summary>
         /// Use this for Directory.EnumerateFolders(path, pattern, option)
         /// </summary>
-        public abstract IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly);
+        public virtual IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
+            => DefaultFileSystem.EnumerateDirectories(path, searchPattern, searchOption);
 
         /// <summary>
         /// Use this for Directory.EnumerateFileSystemEntries(path, pattern, option)
         /// </summary>
-        public abstract IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly);
+        public virtual IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
+            => DefaultFileSystem.EnumerateFileSystemEntries(path, searchPattern, searchOption);
 
         /// <summary>
         /// Use this for File.GetAttributes()
         /// </summary>
-        public abstract FileAttributes GetAttributes(string path);
+        public virtual FileAttributes GetAttributes(string path) => DefaultFileSystem.GetAttributes(path);
 
         /// <summary>
         /// Use this for File.GetLastWriteTimeUtc(path)
         /// </summary>
-        public abstract DateTime GetLastWriteTimeUtc(string path);
+        public virtual DateTime GetLastWriteTimeUtc(string path) => DefaultFileSystem.GetLastWriteTimeUtc(path);
 
         /// <summary>
         /// Use this for Directory.Exists(path)
         /// </summary>
-        public abstract bool DirectoryExists(string path);
+        public virtual bool DirectoryExists(string path) => DefaultFileSystem.DirectoryExists(path);
 
         /// <summary>
         /// Use this for File.Exists(path)
         /// </summary>
-        public abstract bool FileExists(string path);
+        public virtual bool FileExists(string path) => DefaultFileSystem.FileExists(path);
 
         /// <summary>
         /// Use this for File.Exists(path) || Directory.Exists(path)
         /// </summary>
-        public abstract bool FileOrDirectoryExists(string path);
+        public virtual bool FileOrDirectoryExists(string path) => DefaultFileSystem.DirectoryEntryExists(path);
+
+        #region IFileSystem implementation
+
+        TextReader IFileSystem.ReadFile(string path) => this.ReadFile(path);
+
+        Stream IFileSystem.GetFileStream(string path, FileMode mode, FileAccess access, FileShare share) => this.GetFileStream(path, mode, access, share);
+
+        string IFileSystem.ReadFileAllText(string path) => this.ReadFileAllText(path);
+
+        byte[] IFileSystem.ReadFileAllBytes(string path) => this.ReadFileAllBytes(path);
+
+        IEnumerable<string> IFileSystem.EnumerateFiles(string path, string searchPattern, SearchOption searchOption)
+        {
+            return this.EnumerateFiles(path, searchPattern, searchOption);
+        }
+
+        IEnumerable<string> IFileSystem.EnumerateDirectories(string path, string searchPattern, SearchOption searchOption)
+        {
+            return this.EnumerateDirectories(path, searchPattern, searchOption);
+        }
+
+        IEnumerable<string> IFileSystem.EnumerateFileSystemEntries(
+            string path,
+            string searchPattern,
+            SearchOption searchOption)
+        {
+            return this.EnumerateFileSystemEntries(path, searchPattern, searchOption);
+        }
+
+        FileAttributes IFileSystem.GetAttributes(string path) => this.GetAttributes(path);
+
+        DateTime IFileSystem.GetLastWriteTimeUtc(string path) => this.GetLastWriteTimeUtc(path);
+
+        bool IFileSystem.DirectoryExists(string path) => this.DirectoryExists(path);
+
+        bool IFileSystem.FileExists(string path) => this.FileExists(path);
+
+        bool IFileSystem.DirectoryEntryExists(string path) => this.FileOrDirectoryExists(path);
+
+        #endregion
     }
 }
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index a9bdd429d16..cd075ef14fa 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -1971,44 +1971,38 @@ public void Dispose()
 
         internal class LoggingFileSystem : MSBuildFileSystemBase
         {
-            private readonly IFileSystem _wrappingFileSystem;
             private int _fileSystemCalls;
 
             public int FileSystemCalls => _fileSystemCalls;
 
             public ConcurrentDictionary<string, int> ExistenceChecks { get; } = new ConcurrentDictionary<string, int>();
 
-            public LoggingFileSystem(IFileSystem wrappingFileSystem = null)
-            {
-                _wrappingFileSystem = wrappingFileSystem ?? FileSystems.Default;
-            }
-
             public override TextReader ReadFile(string path)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.ReadFile(path);
+                return base.ReadFile(path);
             }
 
             public override Stream GetFileStream(string path, FileMode mode, FileAccess access, FileShare share)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.GetFileStream(path, mode, access, share);
+                return base.GetFileStream(path, mode, access, share);
             }
 
             public override string ReadFileAllText(string path)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.ReadFileAllText(path);
+                return base.ReadFileAllText(path);
             }
 
             public override byte[] ReadFileAllBytes(string path)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.ReadFileAllBytes(path);
+                return base.ReadFileAllBytes(path);
             }
 
             public override IEnumerable<string> EnumerateFiles(
@@ -2019,7 +2013,7 @@ public override IEnumerable<string> EnumerateFiles(
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.EnumerateFiles(path, searchPattern, searchOption);
+                return base.EnumerateFiles(path, searchPattern, searchOption);
             }
 
             public override IEnumerable<string> EnumerateDirectories(
@@ -2030,7 +2024,7 @@ public override IEnumerable<string> EnumerateDirectories(
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.EnumerateDirectories(path, searchPattern, searchOption);
+                return base.EnumerateDirectories(path, searchPattern, searchOption);
             }
 
             public override IEnumerable<string> EnumerateFileSystemEntries(
@@ -2041,21 +2035,21 @@ public override IEnumerable<string> EnumerateFileSystemEntries(
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.EnumerateFileSystemEntries(path, searchPattern, searchOption);
+                return base.EnumerateFileSystemEntries(path, searchPattern, searchOption);
             }
 
             public override FileAttributes GetAttributes(string path)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.GetAttributes(path);
+                return base.GetAttributes(path);
             }
 
             public override DateTime GetLastWriteTimeUtc(string path)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.GetLastWriteTimeUtc(path);
+                return base.GetLastWriteTimeUtc(path);
             }
 
             public override bool DirectoryExists(string path)
@@ -2063,7 +2057,7 @@ public override bool DirectoryExists(string path)
                 IncrementCalls(ref _fileSystemCalls);
                 IncrementExistenceChecks(path);
 
-                return _wrappingFileSystem.DirectoryExists(path);
+                return base.DirectoryExists(path);
             }
 
             public override bool FileExists(string path)
@@ -2071,7 +2065,7 @@ public override bool FileExists(string path)
                 IncrementCalls(ref _fileSystemCalls);
                 IncrementExistenceChecks(path);
 
-                return _wrappingFileSystem.FileExists(path);
+                return base.FileExists(path);
             }
 
             private int _directoryEntryExistsCalls;
@@ -2083,7 +2077,7 @@ public override bool FileOrDirectoryExists(string path)
                 IncrementCalls(ref _directoryEntryExistsCalls);
                 IncrementExistenceChecks(path);
 
-                return _wrappingFileSystem.DirectoryEntryExists(path);
+                return base.FileOrDirectoryExists(path);
             }
 
             private void IncrementCalls(ref int incremented)
