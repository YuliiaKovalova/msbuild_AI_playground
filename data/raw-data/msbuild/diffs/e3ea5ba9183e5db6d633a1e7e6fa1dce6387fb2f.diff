diff --git a/eng/BootStrapMSBuild.props b/eng/BootStrapMSBuild.props
deleted file mode 100644
index e70bcb3489d..00000000000
--- a/eng/BootStrapMSBuild.props
+++ /dev/null
@@ -1,21 +0,0 @@
-<Project>
-
-  <!--
-  Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests
-   relying on bootstrapped MSBuild
-   -->
-
-  <PropertyGroup>
-    <BootstrapDestination>$(ArtifactsBinDir)bootstrap\</BootstrapDestination>
-    <BootstrapDestination Condition="'$(Platform)' == 'x64' or '$(Platform)' == 'arm64'">$(BootstrapDestination)$(Platform)\</BootstrapDestination>
-    <BootstrapDestination>$(BootstrapDestination)$(TargetFramework.ToLowerInvariant())\MSBuild\</BootstrapDestination>
-  </PropertyGroup>
-  
-  <PropertyGroup Condition="$(TargetFramework.StartsWith('net4'))">
-	<BootstrapBinaryDestination>$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin</BootstrapBinaryDestination>
-  </PropertyGroup>
-  
-  <PropertyGroup Condition="!$(TargetFramework.StartsWith('net4'))">
-    <BootstrapBinaryDestination>$(BootstrapDestination)</BootstrapBinaryDestination>
-  </PropertyGroup>
-</Project>
diff --git a/eng/BootStrapMsBuild.props b/eng/BootStrapMsBuild.props
deleted file mode 100644
index 858cf76ac54..00000000000
--- a/eng/BootStrapMsBuild.props
+++ /dev/null
@@ -1,21 +0,0 @@
-<Project>
-
-  <!--
-  Construct a location of MSBuild bootstrap folder - to be used for deployment and for tests
-   relying on bootstrapped MSBuild
-   -->
-
-  <PropertyGroup>
-    <BootstrapDestination>$(ArtifactsBinDir)bootstrap\</BootstrapDestination>
-    <BootstrapDestination Condition="'$(Platform)' == 'x64' or '$(Platform)' == 'arm64'">$(BootstrapDestination)$(Platform)\</BootstrapDestination>
-    <BootstrapDestination>$(BootstrapDestination)$(TargetFramework.ToLowerInvariant())\MSBuild\</BootstrapDestination>
-  </PropertyGroup>
-  
-  <PropertyGroup Condition="$(TargetFramework.StartsWith('net4'))">
-    <BootstrapBinaryDestination>$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin</BootstrapBinaryDestination>
-  </PropertyGroup>
-  
-  <PropertyGroup Condition="!$(TargetFramework.StartsWith('net4'))">
-    <BootstrapBinaryDestination>$(BootstrapDestination)</BootstrapBinaryDestination>
-  </PropertyGroup>
-</Project>
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 48122f75f58..e414db7ece0 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -25,11 +25,16 @@ public void Initialize(IEventSource eventSource)
     {
         eventSource.AnyEventRaised += EventSource_AnyEventRaised;
         eventSource.BuildFinished += EventSource_BuildFinished;
+
+
+        if (eventSource is IEventSource4 eventSource4)
+        {
+            eventSource4.IncludeEvaluationPropertiesAndItems();
+        }
     }
 
     private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
     {
-        // NOTE: this event is fired more than one time per project build
         if (e is ProjectFinishedEventArgs projectFinishedEventArgs)
         {
             if (isRestore)
@@ -45,6 +50,24 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
         {
             return;
         }
+        else if (e is ProjectEvaluationStartedEventArgs projectEvaluationStartedEventArgs)
+        {
+            // Skip autogenerated transient projects (as those are not user projects to be analyzed)
+            if (projectEvaluationStartedEventArgs.ProjectFile?.EndsWith(".metaproj") ?? false)
+            {
+                return;
+            }
+
+            if (!projectEvaluationStartedEventArgs.IsRestore)
+            {
+            buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!,
+                projectEvaluationStartedEventArgs.ProjectFile!);
+        }
+            else
+            {
+                isRestore = true;
+            }
+        }
         else if (e is ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs)
         {
             if (projectEvaluationFinishedEventArgs.ProjectFile?.EndsWith(".metaproj") ?? false)
@@ -54,9 +77,9 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
 
             try
             {
-            buildCheckManager.ProcessEvaluationFinishedEventArgs(
-                loggingContextFactory.CreateLoggingContext(e.BuildEventContext!),
-                projectEvaluationFinishedEventArgs);
+                buildCheckManager.ProcessEvaluationFinishedEventArgs(
+                    loggingContextFactory.CreateLoggingContext(e.BuildEventContext!),
+                    projectEvaluationFinishedEventArgs);
             }
             catch (Exception exception)
             {
@@ -67,24 +90,6 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
 
             buildCheckManager.EndProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
         }
-        else if (e is ProjectEvaluationStartedEventArgs projectEvaluationStartedEventArgs)
-        {
-            // Skip autogenerated transient projects (as those are not user projects to be analyzed)
-            if (projectEvaluationStartedEventArgs.ProjectFile?.EndsWith(".metaproj") ?? false)
-            {
-                return;
-            }
-
-            if (!projectEvaluationStartedEventArgs.IsRestore)
-            {
-            buildCheckManager.StartProjectEvaluation(BuildCheckDataSource.EventArgs, e.BuildEventContext!,
-                projectEvaluationStartedEventArgs.ProjectFile!);
-        }
-            else
-            {
-                isRestore = true;
-            }
-        }
         else if (e is ProjectStartedEventArgs projectStartedEvent)
         {
             buildCheckManager.StartProjectRequest(BuildCheckDataSource.EventArgs, e.BuildEventContext!);
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index a0007d2c103..2a93cc62419 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -36,7 +36,7 @@ public EndToEndTests(ITestOutputHelper output)
     public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool analysisRequested)
     {
         string contents = $"""
-            <Project Sdk="Microsoft.NET.Sdk" DefaultTargets="Hello">
+            <Project Sdk="Microsoft.NET.Sdk">
                 
                 <PropertyGroup>
                 <OutputType>Exe</OutputType>
@@ -52,10 +52,6 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana
                 <ItemGroup>
                 <ProjectReference Include=".\FooBar-Copy.csproj" />
                 </ItemGroup>
-                  
-                <Target Name="Hello">
-                <Message Importance="High" Condition="$(Test2) == true" Text="XYZABC" />
-                </Target>
                 
             </Project>
             """;
@@ -84,9 +80,12 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana
                                
             </Project>
             """;
+
+        string content3 = "Console.WriteLine(\"Hello, World!\");\r\n";
         TransientTestFolder workFolder = _env.CreateFolder(createFolder: true);
         TransientTestFile projectFile = _env.CreateFile(workFolder, "FooBar.csproj", contents);
         TransientTestFile projectFile2 = _env.CreateFile(workFolder, "FooBar-Copy.csproj", contents2);
+        TransientTestFile projectFile3 = _env.CreateFile(workFolder, "Program.cs", content3);
 
         // var cache = new SimpleProjectRootElementCache();
         // ProjectRootElement xml = ProjectRootElement.OpenProjectOrSolution(projectFile.Path, /*unused*/null, /*unused*/null, cache, false /*Not explicitly loaded - unused*/);
