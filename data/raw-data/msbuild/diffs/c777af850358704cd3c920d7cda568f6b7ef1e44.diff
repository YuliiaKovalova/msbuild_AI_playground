diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index 25ff7bf10a8..87d3efd618d 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -666,14 +666,14 @@ protected internal override IList<SdkResolver> LoadResolversFromManifest(SdkReso
                 var resolvers = new List<SdkResolver>();
                 foreach (var resolver in _resolvers)
                 {
-                    if (resolver.Name == manifest.Name)
+                    if (resolver.Name == manifest.DisplayName)
                     {
                         resolvers.Add(resolver);
                     }
                 }
                 foreach (var pair in _resolversWithPatterns)
                 {
-                    if (pair.Resolver.Name == manifest.Name)
+                    if (pair.Resolver.Name == manifest.DisplayName)
                     {
                         resolvers.Add(pair.Resolver);
                     }
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index 259b251371e..0ccdd796da6 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -215,7 +215,7 @@ private bool TryAddAssemblyManifestFromDll(string assemblyPath, List<SdkResolver
         {
             if (string.IsNullOrEmpty(assemblyPath) || !FileUtilities.FileExistsNoThrow(assemblyPath)) return false;
 
-            manifestsList.Add(new SdkResolverManifest(assemblyPath, assemblyPath, null));
+            manifestsList.Add(new SdkResolverManifest(DisplayName: assemblyPath, Path: assemblyPath, ResolvableSdkRegex: null));
             return true;
         }
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
index 417e91ed62a..f8d0baf5e71 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
@@ -13,21 +13,24 @@ namespace Microsoft.Build.BackEnd.SdkResolution
     /// </summary>
     internal class SdkResolverManifest
     {
-        public SdkResolverManifest(string name)
+        private SdkResolverManifest()
         {
-            Name = name;
         }
 
-        public SdkResolverManifest(string name, string path, Regex resolvableSdkPattern) : this(name)
+        public SdkResolverManifest(string DisplayName, string Path, Regex ResolvableSdkRegex)
         {
-            Path = path;
-            ResolvableSdkRegex = resolvableSdkPattern;
+            this.DisplayName = DisplayName;
+            this.Path = Path;
+            this.ResolvableSdkRegex = ResolvableSdkRegex;
         }
 
         /// <summary>
-        /// Sdk resolver manifest name.
+        /// Sdk resolver manifest display name.
         /// </summary>
-        public string Name { get; set; }
+        /// <remarks>
+        /// This field should be used only for logging purposes. Do not use for any actual processing, unless that are tests.
+        /// </remarks>
+        public string DisplayName { get; set; }
 
         /// <summary>
         /// Path for resolvers dll location.
@@ -85,7 +88,8 @@ internal static SdkResolverManifest Load(string filePath)
         // This parsing code is very specific and not forward compatible, but since resolvers generally ship in the same release vehicle as MSBuild itself, only backward compatibility is required.
         private static SdkResolverManifest ParseSdkResolverElement(XmlReader reader, string filePath)
         {
-            SdkResolverManifest manifest = new SdkResolverManifest(filePath);
+            SdkResolverManifest manifest = new SdkResolverManifest();
+            manifest.DisplayName = filePath;
 
             reader.Read();
             while (!reader.EOF)
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 306fa589777..c38afed1d3b 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -49,9 +49,9 @@ internal class SdkResolverService : ISdkResolverService
         private IList<SdkResolver> _resolversList;
 
         /// <summary>
-        /// Stores the loaded SDK resolvers.
+        /// Stores the loaded SDK resolvers, mapped to the manifest from which they came.
         /// </summary>
-        private Dictionary<SdkResolverManifest, IList<SdkResolver>> _resolversDict;
+        private Dictionary<SdkResolverManifest, IList<SdkResolver>> _manifestToResolvers;
 
         /// <summary>
         /// Stores the list of manifests of specific SDK resolvers which could be loaded.
@@ -148,7 +148,7 @@ private SdkResult ResolveSdkUsingResolversWithPatternsFirst(int submissionId, Sd
                 }
                 catch (RegexMatchTimeoutException ex)
                 {
-                    ErrorUtilities.ThrowInternalError("Timeout exceeded matching sdk \"{0}\" to <ResolvableSdkPattern> from sdk resolver manifest {1}.", ex, sdk.Name, manifest.Name);
+                    ErrorUtilities.ThrowInternalError("Timeout exceeded matching sdk \"{0}\" to <ResolvableSdkPattern> from sdk resolver manifest {1}.", ex, sdk.Name, manifest.DisplayName);
                 }
             }
 
@@ -206,17 +206,17 @@ private List<SdkResolver> GetResolvers(IList<SdkResolverManifest> resolversManif
             List<SdkResolver> resolvers = new List<SdkResolver>();
             foreach (var resolverManifest in resolversManifests)
             {
-                if (!_resolversDict.TryGetValue(resolverManifest, out IList<SdkResolver> newResolvers))
+                if (!_manifestToResolvers.TryGetValue(resolverManifest, out IList<SdkResolver> newResolvers))
                 {
                     lock (_lockObject)
                     {
-                        if (!_resolversDict.TryGetValue(resolverManifest, out newResolvers))
+                        if (!_manifestToResolvers.TryGetValue(resolverManifest, out newResolvers))
                         {
                             // Loading of the needed resolvers.
                             MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();
                             newResolvers = _sdkResolverLoader.LoadResolversFromManifest(resolverManifest, loggingContext, sdkReferenceLocation);
-                            _resolversDict[resolverManifest] = newResolvers;
-                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(resolverManifest.Name, newResolvers.Count);
+                            _manifestToResolvers[resolverManifest] = newResolvers;
+                            MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(resolverManifest.DisplayName, newResolvers.Count);
                         }
                     }
                 }
@@ -350,7 +350,7 @@ internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<
 
             _specificResolversManifestsRegistry = null;
             _generalResolversManifestsRegistry = null;
-            _resolversDict = null;
+            _manifestToResolvers = null;
             _resolversList = null;
 
             if (resolvers != null)
@@ -359,11 +359,11 @@ internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<
                 {
                     _specificResolversManifestsRegistry = new List<SdkResolverManifest>();
                     _generalResolversManifestsRegistry = new List<SdkResolverManifest>();
-                    _resolversDict = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
+                    _manifestToResolvers = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
 
-                    SdkResolverManifest sdkResolverManifest = new SdkResolverManifest("TestResolversManifest", null, null);
+                    SdkResolverManifest sdkResolverManifest = new SdkResolverManifest(DisplayName: "TestResolversManifest", Path: null, ResolvableSdkRegex: null);
                     _generalResolversManifestsRegistry.Add(sdkResolverManifest);
-                    _resolversDict[sdkResolverManifest] = resolvers;
+                    _manifestToResolvers[sdkResolverManifest] = resolvers;
                 }
                 else
                 {
@@ -433,17 +433,17 @@ private void RegisterResolversManifests(LoggingContext loggingContext, ElementLo
                 MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStart();
                 var allResolversManifests = _sdkResolverLoader.GetResolversManifests(loggingContext, location);
 
-                _resolversDict = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
+                _manifestToResolvers = new Dictionary<SdkResolverManifest, IList<SdkResolver>>();
 
                 // Load and add the manifest for the default resolvers, located directly in this dll.
                 IList<SdkResolver> defaultResolvers = _sdkResolverLoader.GetDefaultResolvers(loggingContext, location);
                 if (defaultResolvers.Count > 0)
                 {
                     MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();
-                    SdkResolverManifest sdkDefaultResolversManifest = new SdkResolverManifest("DefaultResolversManifest", null, null);
+                    SdkResolverManifest sdkDefaultResolversManifest = new SdkResolverManifest(DisplayName: "DefaultResolversManifest", Path: null, ResolvableSdkRegex: null);
                     allResolversManifests.Add(sdkDefaultResolversManifest);
-                    _resolversDict[sdkDefaultResolversManifest] = defaultResolvers;
-                    MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(sdkDefaultResolversManifest.Name, defaultResolvers.Count);
+                    _manifestToResolvers[sdkDefaultResolversManifest] = defaultResolvers;
+                    MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(sdkDefaultResolversManifest.DisplayName, defaultResolvers.Count);
                 }
 
                 MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStop(allResolversManifests.Count);
