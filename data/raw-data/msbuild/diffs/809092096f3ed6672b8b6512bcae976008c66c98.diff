diff --git a/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs b/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs
index e7cb136a4ca..9fee80689c1 100644
--- a/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs
+++ b/src/MSBuild.UnitTests/NodeStatus_Transition_Tests.cs
@@ -33,7 +33,7 @@ public void NodeStatusTargetThrowsForInputWithAnsi()
     {
 #if DEBUG
         Func<NodeStatus> newNodeStatus = () => new NodeStatus("project", "tfm", AnsiCodes.Colorize("colorized target", TerminalColor.Green), new MockStopwatch());
-        newNodeStatus.ShouldThrow<Exception>().Message.ShouldContain("Target should not contain any escape codes, if you want to colorize target use the other constructor.");
+        newNodeStatus.ShouldThrow<ArgumentException>().Message.ShouldContain("Target should not contain any escape codes, if you want to colorize target use the other constructor.");
 #endif
     }
 
diff --git a/src/MSBuild/TerminalLogger/NodeStatus.cs b/src/MSBuild/TerminalLogger/NodeStatus.cs
index 6808278a921..021f506b061 100644
--- a/src/MSBuild/TerminalLogger/NodeStatus.cs
+++ b/src/MSBuild/TerminalLogger/NodeStatus.cs
@@ -1,6 +1,7 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using System.Diagnostics;
 using Microsoft.Build.Shared;
 
@@ -27,7 +28,12 @@ internal class NodeStatus
     /// <param name="stopwatch">Duration of the current step. Written on right after target.</param>
     public NodeStatus(string project, string? targetFramework, string target, StopwatchAbstraction stopwatch)
     {
-        Debug.Assert(!target.Contains("\x1B"), "Target should not contain any escape codes, if you want to colorize target use the other constructor.");
+#if DEBUG
+        if (target.Contains("\x1B"))
+        {
+            throw new ArgumentException("Target should not contain any escape codes, if you want to colorize target use the other constructor.");
+        }
+#endif
         Project = project;
         TargetFramework = targetFramework;
         Target = target;
diff --git a/src/MSBuild/TerminalLogger/NodesFrame.cs b/src/MSBuild/TerminalLogger/NodesFrame.cs
index d2498661143..3c6fd5d8c6d 100644
--- a/src/MSBuild/TerminalLogger/NodesFrame.cs
+++ b/src/MSBuild/TerminalLogger/NodesFrame.cs
@@ -56,7 +56,7 @@ internal ReadOnlySpan<char> RenderNodeStatus(int i)
         string? targetPrefix = status.TargetPrefix;
         TerminalColor targetPrefixColor = status.TargetPrefixColor;
 
-        var targetWithoutAnsiLength = targetPrefix != null
+        var targetWithoutAnsiLength = !string.IsNullOrWhiteSpace(targetPrefix)
             // +1 because we will join them by space in the final output.
             ? targetPrefix.Length + 1 + target.Length
             : target.Length;
@@ -82,7 +82,7 @@ internal ReadOnlySpan<char> RenderNodeStatus(int i)
             }
         }
 
-        var renderedTarget = targetPrefix != null ? $"{AnsiCodes.Colorize(targetPrefix, targetPrefixColor)} {target}" : target;
+        var renderedTarget = !string.IsNullOrWhiteSpace(targetPrefix) ? $"{AnsiCodes.Colorize(targetPrefix, targetPrefixColor)} {target}" : target;
         return $"{TerminalLogger.Indentation}{project}{(targetFramework is null ? string.Empty : " ")}{AnsiCodes.Colorize(targetFramework, TerminalLogger.TargetFrameworkColor)} {AnsiCodes.SetCursorHorizontal(MaxColumn)}{AnsiCodes.MoveCursorBackward(targetWithoutAnsiLength + durationString.Length + 1)}{renderedTarget} {durationString}".AsSpan();
 
         static int Length(string durationString, string project, string? targetFramework, int targetWithoutAnsiLength) =>
