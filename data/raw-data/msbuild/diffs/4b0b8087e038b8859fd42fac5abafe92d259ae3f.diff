diff --git a/src/Tasks.UnitTests/XmlPeek_Tests.cs b/src/Tasks.UnitTests/XmlPeek_Tests.cs
index d7435d0a714..63ce7c1be53 100644
--- a/src/Tasks.UnitTests/XmlPeek_Tests.cs
+++ b/src/Tasks.UnitTests/XmlPeek_Tests.cs
@@ -3,8 +3,10 @@
 
 using System;
 using System.IO;
+using System.Linq;
 
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
 
@@ -48,6 +50,13 @@ public sealed class XmlPeek_Tests
   <variable Type='String' Name='c'></variable>
   <method AccessModifier='public static' Name='GetVal' />
 </class>
+";
+        private readonly string _xmlFileRequiresEscaping = @"
+<Root>
+  <Key>abcdefg</Key>
+  <Key>a$(d)fg</Key>
+  <Key>a$(d.f)</Key>
+</Root>
 ";
 
         [Fact]
@@ -332,6 +341,24 @@ public void PeekWithNoParameters()
             log.AssertLogContains("\"Query\"");
         }
 
+        [Fact]
+        public void PeekEscapesCorrectly()
+        {
+            MockEngine engine = new MockEngine(true);
+            string xmlInputPath;
+            Prepare(_xmlFileRequiresEscaping, out xmlInputPath);
+
+            XmlPeek p = new XmlPeek();
+            p.BuildEngine = engine;
+
+            p.XmlInputPath = new TaskItem(xmlInputPath);
+            p.Query = "//Key/text()";
+
+            Assert.True(p.Execute());
+            Assert.Equal(["abcdefg", "a$(d)fg", "a$(d.f)"], p.Result.Select(x => x.ItemSpec));
+            Assert.Equal(["abcdefg", "a%24%28d%29fg", "a%24%28d.f%29"], p.Result.Cast<TaskItem>().Select(x => x.ToString()));
+        }
+
         private void Prepare(string xmlFile, out string xmlInputPath)
         {
             string dir = Path.Combine(Path.GetTempPath(), DateTime.Now.Ticks.ToString());
diff --git a/src/Tasks/XmlPeek.cs b/src/Tasks/XmlPeek.cs
index 5f9513f5c0c..a6116080c02 100644
--- a/src/Tasks/XmlPeek.cs
+++ b/src/Tasks/XmlPeek.cs
@@ -150,7 +150,7 @@ public override bool Execute()
             int i = 0;
             foreach (string item in peekValues)
             {
-                Result[i++] = new TaskItem(item);
+                Result[i++] = new TaskItem(EscapingUtilities.Escape(item));
 
                 // This can be logged a lot, so low importance
                 Log.LogMessageFromResources(MessageImportance.Low, "XmlPeek.Found", item);
