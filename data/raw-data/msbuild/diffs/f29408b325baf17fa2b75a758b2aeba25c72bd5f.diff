diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index fffbfd81114..6fd931e36c9 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -617,7 +617,7 @@ public GetCompatiblePlatform() { }
         public Microsoft.Build.Framework.ITaskItem[] AnnotatedProjects { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
         public Microsoft.Build.Framework.ITaskItem[] AssignedProjectsWithPlatform { get { throw null; } set { } }
-        public string ParentProjectPlatform { get { throw null; } set { } }
+        public string CurrentProjectPlatform { get { throw null; } set { } }
         public string PlatformLookupTable { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index ccf74f77065..4e39b6565ea 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -510,7 +510,7 @@ public GetCompatiblePlatform() { }
         public Microsoft.Build.Framework.ITaskItem[] AnnotatedProjects { get { throw null; } set { } }
         [Microsoft.Build.Framework.OutputAttribute]
         public Microsoft.Build.Framework.ITaskItem[] AssignedProjectsWithPlatform { get { throw null; } set { } }
-        public string ParentProjectPlatform { get { throw null; } set { } }
+        public string CurrentProjectPlatform { get { throw null; } set { } }
         public string PlatformLookupTable { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
diff --git a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
index b27bb480e14..e8c76cc5dec 100644
--- a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
+++ b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
@@ -29,7 +29,7 @@ public void ResolvesViaPlatformLookupTable_Task()
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
                 BuildEngine = new MockEngine(_output),
-                ParentProjectPlatform = "win32",
+                CurrentProjectPlatform = "win32",
                 PlatformLookupTable = "win32=x64",
                 AnnotatedProjects = new TaskItem[] { childProj }
             };
@@ -51,7 +51,7 @@ public void ResolvesViaAnyCPUDefault_Task()
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
                 BuildEngine = new MockEngine(_output),
-                ParentProjectPlatform = "x86",
+                CurrentProjectPlatform = "x86",
                 PlatformLookupTable = "AnyCPU=x64", 
                 AnnotatedProjects = new TaskItem[] { childProj }
             };
@@ -72,7 +72,7 @@ public void ResolvesViaSamePlatform_Task()
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
                 BuildEngine = new MockEngine(_output),
-                ParentProjectPlatform = "x86",
+                CurrentProjectPlatform = "x86",
                 PlatformLookupTable = "AnyCPU=x64",
                 AnnotatedProjects = new TaskItem[] { childProj }
             };
@@ -94,7 +94,7 @@ public void FailsToResolve_Task()
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
                 BuildEngine = new MockEngine(_output),
-                ParentProjectPlatform = "x86",
+                CurrentProjectPlatform = "x86",
                 PlatformLookupTable = "AnyCPU=x64",
                 AnnotatedProjects = new TaskItem[] { childProj },
             };
@@ -117,7 +117,7 @@ public void FailsOnInvalidFormatLookupTable ()
             GetCompatiblePlatform task = new GetCompatiblePlatform()
             {
                 BuildEngine = new MockEngine(_output),
-                ParentProjectPlatform = "x86",
+                CurrentProjectPlatform = "x86",
                 PlatformLookupTable = "AnyCPU=;A=B", // invalid format
                 AnnotatedProjects = new TaskItem[] { childProj },
             };
diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
index 976a95f877d..aa9268db254 100644
--- a/src/Tasks/GetCompatiblePlatform.cs
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -25,9 +25,9 @@ public class GetCompatiblePlatform : TaskExtension
         public ITaskItem[] AnnotatedProjects { get; set; }
 
         /// <summary>
-        /// The platform the parent is building as. 
+        /// The platform the current project is building as. 
         /// </summary>
-        public string ParentProjectPlatform { get; set; }
+        public string CurrentProjectPlatform { get; set; }
 
         /// <summary>
         /// Optional parameter that defines translations from parent platforms to
@@ -44,19 +44,11 @@ public class GetCompatiblePlatform : TaskExtension
 
         public override bool Execute()
         {
-            Dictionary<string, string> translationTable = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
-            if (!string.IsNullOrEmpty(PlatformLookupTable))
-            {
-                foreach (string s in PlatformLookupTable.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
-                {
-                    string[] keyVal = s.Split(MSBuildConstants.EqualsChar, StringSplitOptions.RemoveEmptyEntries);
-
-                    ErrorUtilities.VerifyThrow(keyVal.Length > 1, "PlatformLookupTable must be of the form A=B;C=D");
+            Dictionary<string, string> translationTable = ExtractLookupTable(PlatformLookupTable);
 
-                    translationTable[keyVal[0]] = keyVal[1];
-                }
-                
-                Log.LogMessage($"Translation Table: {string.Join(";", translationTable.Select(kvp => $"{kvp.Key}={kvp.Value}"))}");
+            if (translationTable != null)
+            {
+                Log.LogMessage($"Current Project's Translation Table: {string.Join(";", translationTable.Select(kvp => $"{kvp.Key}={kvp.Value}"))}");
             }
 
             AssignedProjectsWithPlatform = new ITaskItem[AnnotatedProjects.Length];
@@ -64,26 +56,47 @@ public override bool Execute()
             {
                 AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);
 
-                if (string.IsNullOrEmpty(AssignedProjectsWithPlatform[i].GetMetadata("PlatformOptions")))
+                string childPlatformOptions = AssignedProjectsWithPlatform[i].GetMetadata("PlatformOptions");
+
+                if (string.IsNullOrEmpty(childPlatformOptions))
                 {
                     Log.LogWarningWithCodeFromResources("GetCompatiblePlatform.NoPlatformsListed", AssignedProjectsWithPlatform[i].ItemSpec);
                     continue;
                 }
 
+                // Pull platformlookuptable metadata from the referenced project. This allows custom
+                // translations on a per-ProjectReference basis.
+                Dictionary<string, string> childPlatformLookupTable = ExtractLookupTable(AssignedProjectsWithPlatform[i].GetMetadata("PlatformLookupTable"));
+
+                if (childPlatformLookupTable != null)
+                {
+                    Log.LogMessage($"Referenced Project's Translation Table: {string.Join(";", childPlatformLookupTable.Select(kvp => $"{kvp.Key}={kvp.Value}"))}");
+                }
+
                 HashSet<string> childPlatforms = new HashSet<string>();
-                foreach (string s in AssignedProjectsWithPlatform[i].GetMetadata("PlatformOptions").Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
+                foreach (string s in childPlatformOptions.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
                 {
                     childPlatforms.Add(s);
                 }
 
                 string buildChildProjectAs = "";
 
-                // Translation table takes priority
-                if (translationTable.ContainsKey(ParentProjectPlatform) &&
-                          childPlatforms.Contains(translationTable[ParentProjectPlatform]))
+                // If the referenced project has a translation table, it came from the ProjectReference item's metadata.
+                // Prioritize that over the current project's translation table.
+                if (childPlatformLookupTable != null &&
+                        childPlatformLookupTable.ContainsKey(CurrentProjectPlatform) &&
+                        childPlatforms.Contains(childPlatformLookupTable[CurrentProjectPlatform]))
+                {
+                    buildChildProjectAs = childPlatformLookupTable[CurrentProjectPlatform];
+                    Log.LogMessage($"Found '{CurrentProjectPlatform}={buildChildProjectAs}' in the referenced project's translation table.");
+                }
+                // Current project's translation table follows
+                else if (translationTable != null &&
+                        translationTable.ContainsKey(CurrentProjectPlatform) &&
+                        childPlatforms.Contains(translationTable[CurrentProjectPlatform]))
                 {
-                    buildChildProjectAs = translationTable[ParentProjectPlatform];
-                    Log.LogMessage($"Found '{ParentProjectPlatform}={buildChildProjectAs}' in the given translation table.");
+                    buildChildProjectAs = translationTable[CurrentProjectPlatform];
+                    Log.LogMessage($"Found '{CurrentProjectPlatform}={buildChildProjectAs}' in the current project's translation table.");
                 }
                 // AnyCPU if possible
                 else if (childPlatforms.Contains("AnyCPU"))
@@ -92,14 +105,14 @@ public override bool Execute()
                     Log.LogMessage($"Defaulting to AnyCPU.");
                 }
                 // Prefer matching platforms
-                else if (childPlatforms.Contains(ParentProjectPlatform))
+                else if (childPlatforms.Contains(CurrentProjectPlatform))
                 {
-                    buildChildProjectAs = ParentProjectPlatform;
+                    buildChildProjectAs = CurrentProjectPlatform;
                     Log.LogMessage($"Child and parent have the same platform.");
                 }
                 else
                 {
-                    // Keep it empty, log a warning. Common.CurrentVersion.targets will undefine 
+                    // Keep NearestPlatform empty, log a warning. Common.CurrentVersion.targets will undefine 
                     // Platform/PlatformTarget when this is the case.
                     Log.LogWarningWithCodeFromResources("GetCompatiblePlatform.NoCompatiblePlatformFound", AssignedProjectsWithPlatform[i].ItemSpec);
                 }
@@ -110,5 +123,26 @@ public override bool Execute()
 
             return !Log.HasLoggedErrors;
         }
+
+        private Dictionary<string, string> ExtractLookupTable(string stringTable)
+        {
+            if (string.IsNullOrEmpty(stringTable))
+            {
+                return null;
+            }
+
+            Dictionary<string, string> table = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+
+            foreach (string s in stringTable.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
+            {
+                string[] keyVal = s.Split(MSBuildConstants.EqualsChar, StringSplitOptions.RemoveEmptyEntries);
+
+                ErrorUtilities.VerifyThrow(keyVal.Length > 1, "PlatformLookupTable must be of the form A=B;C=D");
+
+                table[keyVal[0]] = keyVal[1];
+            }
+
+            return table;
+        }
     }
 }
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 35df68f41a7..80972edc2bf 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -1653,9 +1653,9 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     </ItemGroup>
 
     <GetCompatiblePlatform AnnotatedProjects="@(_ProjectReferencePlatformPossibilities)"
-                            ParentProjectPlatform="$(ParentPlatform)"
-                            PlatformLookupTable="$(PlatformLookupTable);%(_ProjectReferencePlatformPossibilities.PlatformLookupTable)"
-                            Condition="'@(_ProjectReferencePlatformPossibilities)' != ''">
+                           CurrentProjectPlatform="$(ParentPlatform)"
+                           PlatformLookupTable="$(PlatformLookupTable)"
+                           Condition="'@(_ProjectReferencePlatformPossibilities)' != ''">
       <Output ItemName="_ProjectsWithPlatformAssignment" TaskParameter="AssignedProjectsWithPlatform" />
     </GetCompatiblePlatform>
 
