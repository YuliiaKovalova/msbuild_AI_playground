diff --git a/src/Tasks/AssemblyDependency/DirectoryResolver.cs b/src/Tasks/AssemblyDependency/DirectoryResolver.cs
index d26b509bcf4..0211d97c8e7 100644
--- a/src/Tasks/AssemblyDependency/DirectoryResolver.cs
+++ b/src/Tasks/AssemblyDependency/DirectoryResolver.cs
@@ -14,12 +14,18 @@ namespace Microsoft.Build.Tasks
     /// </summary>
     internal class DirectoryResolver : Resolver
     {
+        /// <summary>
+        /// The parent assembly that was used for the SearchPath.
+        /// </summary>
+        public readonly string parentAssembly;
+
         /// <summary>
         /// Construct.
         /// </summary>
         public DirectoryResolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVesion, string parentAssembly)
-            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVesion, System.Reflection.ProcessorArchitecture.None, false, parentAssembly)
+            : base(searchPathElement, getAssemblyName, fileExists, getRuntimeVersion, targetedRuntimeVesion, System.Reflection.ProcessorArchitecture.None, false)
         {
+            this.parentAssembly = parentAssembly;
         }
 
         /// <inheritdoc/>
@@ -42,6 +48,12 @@ public override bool Resolve(
 
             // Resolve to the given path.
             string resolvedPath = ResolveFromDirectory(assemblyName, isPrimaryProjectReference, wantSpecificVersion, executableExtensions, searchPathElement, assembliesConsideredAndRejected);
+
+            foreach (var searchLocation in assembliesConsideredAndRejected)
+            {
+                searchLocation.ParentAssembly = parentAssembly;
+            }
+
             if (resolvedPath != null)
             {
                 foundPath = resolvedPath;
diff --git a/src/Tasks/AssemblyDependency/Resolver.cs b/src/Tasks/AssemblyDependency/Resolver.cs
index 7e8f0c36be1..5cebad377ce 100644
--- a/src/Tasks/AssemblyDependency/Resolver.cs
+++ b/src/Tasks/AssemblyDependency/Resolver.cs
@@ -51,15 +51,10 @@ internal abstract class Resolver
         /// </summary>
         protected bool compareProcessorArchitecture;
 
-        /// <summary>
-        /// The parent assembly that was used for the SearchPath.
-        /// </summary>
-        internal readonly string parentAssembly;
-
         /// <summary>
         /// Construct.
         /// </summary>
-        protected Resolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVersion, ProcessorArchitecture targetedProcessorArchitecture, bool compareProcessorArchitecture, string parentAssembly = null)
+        protected Resolver(string searchPathElement, GetAssemblyName getAssemblyName, FileExists fileExists, GetAssemblyRuntimeVersion getRuntimeVersion, Version targetedRuntimeVersion, ProcessorArchitecture targetedProcessorArchitecture, bool compareProcessorArchitecture)
         {
             this.searchPathElement = searchPathElement;
             this.getAssemblyName = getAssemblyName;
@@ -68,7 +63,6 @@ protected Resolver(string searchPathElement, GetAssemblyName getAssemblyName, Fi
             this.targetedRuntimeVersion = targetedRuntimeVersion;
             this.targetProcessorArchitecture = targetedProcessorArchitecture;
             this.compareProcessorArchitecture = compareProcessorArchitecture;
-            this.parentAssembly = parentAssembly;
         }
 
         /// <summary>
@@ -124,8 +118,7 @@ protected bool ResolveAsFile(
                 considered = new ResolutionSearchLocation
                 {
                     FileNameAttempted = fullPath,
-                    SearchPath = searchPathElement,
-                    ParentAssembly = parentAssembly
+                    SearchPath = searchPathElement
                 };
             }
 
