diff --git a/documentation/wiki/Binary-Log.md b/documentation/wiki/Binary-Log.md
index a30f478cf7c..d18badefef0 100644
--- a/documentation/wiki/Binary-Log.md
+++ b/documentation/wiki/Binary-Log.md
@@ -136,18 +136,33 @@ To allow the calling code to decide - based on the type of error, type of events
 
 ```csharp
 /// <summary>
-/// Materializes the error message.
-/// Until it's called the error message is not materialized and no string allocations are made.
+/// An event args for <see cref="IBinaryLogReaderErrors.OnRecoverableReadError"/> event.
 /// </summary>
-/// <returns>The error message.</returns>
-public delegate string FormatErrorMessage();
+public sealed class BinaryLogReaderErrorEventArgs : EventArgs
+{
+    /// <summary>
+    /// Type of the error that occurred during reading.
+    /// </summary>
+    public ReaderErrorType ErrorType { get; }
+
+    /// <summary>
+    /// Kind of the record that encountered the error.
+    /// </summary>
+    public BinaryLogRecordKind RecordKind { get; }
+
+    /// <summary>
+    /// Materializes the error message.
+    /// Until it's called the error message is not materialized and no string allocations are made.
+    /// </summary>
+    /// <returns>The error message.</returns>
+    public string GetFormattedMessage() => _formatErrorMessage();
+}
 
 /// <summary>
 /// Receives recoverable errors during reading.
 /// Communicates type of the error, kind of the record that encountered the error and the message detailing the error.
-/// The error message is returned as a function to avoid unnecessary string allocations in case the error is not logged.
 /// </summary>
-event Action<ReaderErrorType, BinaryLogRecordKind, FormatErrorMessage>? OnRecoverableReadError;
+event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
 ```
 
 Our sample usage of the [Reading API](#reading-api) can be enhanced with recoverable errors handling e.g. as such:
@@ -155,7 +170,7 @@ Our sample usage of the [Reading API](#reading-api) can be enhanced with recover
 ```csharp
 
 // Those can be raised only during forward compatibility reading mode.
-logReader.OnRecoverableReadError += (errorType, recordKind, messageFactory) =>
+logReader.OnRecoverableReadError += errorEventArgs =>
 {
     // ...
 
@@ -163,8 +178,8 @@ logReader.OnRecoverableReadError += (errorType, recordKind, messageFactory) =>
     //  based on the type of the error or/and type of the record or/and the frequency of the error
 
     // Would we decide to completely ignore some errors - we can aid better performance by not materializing the actual error message.
-    // Otherwise the error message can be materialized via the provided delegate:
-    Console.WriteLine($"Recoverable reader error: {messageFactory()}");
+    // Otherwise the error message can be materialized via the provided method on the event argument:
+    Console.WriteLine($"Recoverable reader error: {errorEventArgs.GetFormattedMessage()}");
 };
 
 ```
diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index b7dc391c540..a88867058b0 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -187,7 +187,7 @@ public void TestBinaryLoggerRoundtrip(string projectText, BinlogRoundtripTestRep
         }
 
         /// <summary>
-        /// This test validate then binlog file content is identical upon replaying.
+        /// This test validate that binlog file content is identical upon replaying.
         /// The identity can be defined via 3 ways:
         ///   * byte-for-byte equality
         ///   * byte-for-byte equality of unzipped content
diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index a07ed031429..22ee7ccf750 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -938,14 +938,14 @@ public void ForwardCompatibleRead_HandleAppendOnlyChanges()
                 SkipUnknownEventParts = true
             };
 
-            List<(ReaderErrorType errorType, BinaryLogRecordKind recordKind, string error)> readerErrors = new();
-            buildEventArgsReader.OnRecoverableReadError += (t, et, e) => readerErrors.Add((t, et, e()));
+            List<BinaryLogReaderErrorEventArgs> readerErrors = new();
+            buildEventArgsReader.OnRecoverableReadError += readerErrors.Add;
 
             var deserializedError = (BuildErrorEventArgs)buildEventArgsReader.Read();
 
             readerErrors.Count.ShouldBe(1);
-            readerErrors[0].errorType.ShouldBe(ReaderErrorType.UnknownEventData);
-            readerErrors[0].recordKind.ShouldBe(BinaryLogRecordKind.Error);
+            readerErrors[0].ErrorType.ShouldBe(ReaderErrorType.UnknownEventData);
+            readerErrors[0].RecordKind.ShouldBe(BinaryLogRecordKind.Error);
 
             deserializedError.Should().BeEquivalentTo(error);
 
@@ -998,14 +998,14 @@ public void ForwardCompatibleRead_HandleUnknownEvent()
                 SkipUnknownEvents = true
             };
 
-            List<(ReaderErrorType errorType, BinaryLogRecordKind recordKind, string error)> readerErrors = new();
-            buildEventArgsReader.OnRecoverableReadError += (t, et, e) => readerErrors.Add((t, et, e()));
+            List<BinaryLogReaderErrorEventArgs> readerErrors = new();
+            buildEventArgsReader.OnRecoverableReadError += readerErrors.Add;
 
             var deserializedEvent = buildEventArgsReader.Read();
 
             readerErrors.Count.ShouldBe(1);
-            readerErrors[0].errorType.ShouldBe(ReaderErrorType.UnkownEventType);
-            readerErrors[0].recordKind.ShouldBe(unknownType);
+            readerErrors[0].ErrorType.ShouldBe(ReaderErrorType.UnkownEventType);
+            readerErrors[0].RecordKind.ShouldBe(unknownType);
 
             deserializedEvent.Should().BeEquivalentTo(finished);
 
@@ -1049,15 +1049,15 @@ public void ForwardCompatibleRead_HandleMismatchedFormatOfEvent()
                 SkipUnknownEvents = true
             };
 
-            List<(ReaderErrorType errorType, BinaryLogRecordKind recordKind, string error)> readerErrors = new();
-            buildEventArgsReader.OnRecoverableReadError += (t, et, e) => readerErrors.Add((t, et, e()));
+            List<BinaryLogReaderErrorEventArgs> readerErrors = new();
+            buildEventArgsReader.OnRecoverableReadError += readerErrors.Add;
 
             var deserializedEvent = buildEventArgsReader.Read();
 
             readerErrors.Count.ShouldBe(1);
-            readerErrors[0].errorType.ShouldBe(ReaderErrorType.UnknownFormatOfEventData);
-            readerErrors[0].recordKind.ShouldBe(BinaryLogRecordKind.Error);
-            readerErrors[0].error.ShouldContain("FormatException");
+            readerErrors[0].ErrorType.ShouldBe(ReaderErrorType.UnknownFormatOfEventData);
+            readerErrors[0].RecordKind.ShouldBe(BinaryLogRecordKind.Error);
+            readerErrors[0].GetFormattedMessage().ShouldContain("FormatException");
 
             deserializedEvent.Should().BeEquivalentTo(finished);
 
@@ -1105,15 +1105,15 @@ public void ForwardCompatibleRead_HandleRemovalOfDataFromEventDefinition()
                 SkipUnknownEvents = true
             };
 
-            List<(ReaderErrorType errorType, BinaryLogRecordKind recordKind, string error)> readerErrors = new();
-            buildEventArgsReader.OnRecoverableReadError += (t, et, e) => readerErrors.Add((t, et, e()));
+            List<BinaryLogReaderErrorEventArgs> readerErrors = new();
+            buildEventArgsReader.OnRecoverableReadError += readerErrors.Add;
 
             var deserializedEvent = buildEventArgsReader.Read();
 
             readerErrors.Count.ShouldBe(1);
-            readerErrors[0].errorType.ShouldBe(ReaderErrorType.UnknownFormatOfEventData);
-            readerErrors[0].recordKind.ShouldBe(BinaryLogRecordKind.Error);
-            readerErrors[0].error.ShouldContain("EndOfStreamException");
+            readerErrors[0].ErrorType.ShouldBe(ReaderErrorType.UnknownFormatOfEventData);
+            readerErrors[0].RecordKind.ShouldBe(BinaryLogRecordKind.Error);
+            readerErrors[0].GetFormattedMessage().ShouldContain("EndOfStreamException");
 
             deserializedEvent.Should().BeEquivalentTo(finished);
 
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
index ec287f36b6a..19c68a081ea 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogReplayEventSource.cs
@@ -41,7 +41,7 @@ internal interface IBinaryLogReplaySource :
         IBuildEventStringsReader,
         IEmbeddedContentSource,
         IBuildFileReader,
-        IBinlogReaderErrors
+        IBinaryLogReaderErrors
     { }
 
     /// <summary>
@@ -65,8 +65,8 @@ static BinaryLogReplayEventSource()
         /// </summary>
         public bool AllowForwardCompatibility { private get; init; }
 
-        /// <inheritdoc cref="IBinlogReaderErrors.OnRecoverableReadError"/>
-        public event Action<ReaderErrorType, BinaryLogRecordKind, FormatErrorMessage>? OnRecoverableReadError;
+        /// <inheritdoc cref="IBinaryLogReaderErrors.OnRecoverableReadError"/>
+        public event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
 
         /// <summary>
         /// WARNING: This event is under low support and low maintenance - please use events directly exposed by <see cref="BinaryLogReplayEventSource"/> instead. 
@@ -84,6 +84,17 @@ public void Replay(string sourceFilePath)
             Replay(sourceFilePath, CancellationToken.None);
         }
 
+        /// <summary>
+        /// Read the provided binary log file opened as a stream and raise corresponding events for each BuildEventArgs
+        /// </summary>
+        /// <param name="sourceFileStream">Stream over the binlog content.</param>
+        /// <param name="cancellationToken"></param>
+        public void Replay(Stream sourceFileStream, CancellationToken cancellationToken)
+        {
+            using var binaryReader = OpenReader(sourceFileStream);
+            Replay(binaryReader, cancellationToken);
+        }
+
         /// <summary>
         /// Creates a <see cref="BinaryReader"/> for the provided binary log file.
         /// Performs decompression and buffering in the optimal way.
@@ -97,13 +108,7 @@ public static BinaryReader OpenReader(string sourceFilePath)
             try
             {
                 stream = new FileStream(sourceFilePath, FileMode.Open, FileAccess.Read, FileShare.Read);
-                var gzipStream = new GZipStream(stream, CompressionMode.Decompress, leaveOpen: false);
-
-                // wrapping the GZipStream in a buffered stream significantly improves performance
-                // and the max throughput is reached with a 32K buffer. See details here:
-                // https://github.com/dotnet/runtime/issues/39233#issuecomment-745598847
-                var bufferedStream = new BufferedStream(gzipStream, 32768);
-                return new BinaryReader(bufferedStream.ToReadableSeekableStream());
+                return OpenReader(stream);
             }
             catch (Exception)
             {
@@ -112,6 +117,24 @@ public static BinaryReader OpenReader(string sourceFilePath)
             }
         }
 
+        /// <summary>
+        /// Creates a <see cref="BinaryReader"/> for the provided binary log file.
+        /// Performs decompression and buffering in the optimal way.
+        /// Caller is responsible for disposing the returned reader.
+        /// </summary>
+        /// <param name="sourceFileStream">Stream over the binlog file</param>
+        /// <returns>BinaryReader of the given binlog file.</returns>
+        public static BinaryReader OpenReader(Stream sourceFileStream)
+        {
+            var gzipStream = new GZipStream(sourceFileStream, CompressionMode.Decompress, leaveOpen: false);
+
+            // wrapping the GZipStream in a buffered stream significantly improves performance
+            // and the max throughput is reached with a 32K buffer. See details here:
+            // https://github.com/dotnet/runtime/issues/39233#issuecomment-745598847
+            var bufferedStream = new BufferedStream(gzipStream, 32768);
+            return new BinaryReader(bufferedStream);
+        }
+
         /// <summary>
         /// Creates a <see cref="BuildEventArgsReader"/> for the provided binary reader over binary log file.
         /// Caller is responsible for disposing the returned reader.
@@ -192,7 +215,7 @@ public void Replay(BinaryReader binaryReader, bool closeInput, CancellationToken
         /// <param name="cancellationToken">A <see cref="CancellationToken"/> indicating the replay should stop as soon as possible.</param>
         public void Replay(BuildEventArgsReader reader, CancellationToken cancellationToken)
         {
-            bool supportsForwardCompatibility = reader.FileFormatVersion >= 18;
+            bool supportsForwardCompatibility = reader.FileFormatVersion >= BinaryLogger.ForwardCompatibilityMinimalVersion;
 
             // Allow any possible deferred subscriptions to be registered
             if (HasStructuredEventsSubscribers || !supportsForwardCompatibility)
@@ -245,6 +268,13 @@ public void Replay(BuildEventArgsReader reader, CancellationToken cancellationTo
                     _rawLogRecordReceived?.Invoke(instance.RecordKind, instance.Stream);
                 }
             }
+
+            // Unsubscribe from events for a case if the reader is reused (upon cancellation).
+            reader.EmbeddedContentRead -= _embeddedContentRead;
+            reader.ArchiveFileEncountered -= _archiveFileEncountered;
+            reader.StringReadDone -= _stringReadDone;
+            reader.StringEncountered -= _stringEncountered;
+            reader.OnRecoverableReadError -= OnRecoverableReadError;
         }
 
         /// <inheritdoc cref="IRawLogEventsSource.DeferredInitialize"/>
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 15d67806298..b3d683b462b 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -67,8 +67,18 @@ public sealed class BinaryLogger : ILogger
         //   - Making ProjectStartedEventArgs, ProjectEvaluationFinishedEventArgs, AssemblyLoadBuildEventArgs equal
         //     between de/serialization roundtrips.
         //   - Adding serialized events lengths - to support forward compatible reading
+
+        // This should be never changed.
+        // The minimum version of the binary log reader that can read log of above version.
+        internal const int ForwardCompatibilityMinimalVersion = 18;
+
+        // The current version of the binary log representation.
+        // Changes with each update of the binary log format.
         internal const int FileFormatVersion = 18;
         // The minimum version of the binary log reader that can read log of above version.
+        // This should be changed only when the binary log format is changed in a way that would prevent it from being
+        // read by older readers. (changing of the individual BuildEventArgs or adding new is fine - as reader can
+        // skip them if they are not known to it. Example of change requiring the increment would be the introduction of strings deduplication)
         internal const int MinimumReaderVersion = 18;
 
         private Stream stream;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 6ee2013669a..8e77b366214 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -30,7 +30,6 @@ public class BuildEventArgsReader : IBuildEventArgsReaderNotifications, IDisposa
         private long _recordNumber = 0;
         private bool _skipUnknownEvents;
         private bool _skipUnknownEventParts;
-        private const int ForwardCompatibilityMinimalVersion = 18;
 
         /// <summary>
         /// A list of string records we've encountered so far. If it's a small string, it will be the string directly.
@@ -116,7 +115,7 @@ public bool SkipUnknownEventParts
 
         private void EnsureForwardCompatibleReadingSupported()
         {
-            if (_fileFormatVersion < ForwardCompatibilityMinimalVersion)
+            if (_fileFormatVersion < BinaryLogger.ForwardCompatibilityMinimalVersion)
             {
                 throw new InvalidOperationException(
                     ResourceUtilities.FormatResourceStringStripCodeAndKeyword("Binlog_FwdCompatUnsupported",
@@ -125,10 +124,10 @@ private void EnsureForwardCompatibleReadingSupported()
         }
 
         /// <summary>
-        /// Receives recoverable errors during reading. See <see cref="IBinlogReaderErrors.OnRecoverableReadError"/> for documentation on arguments.
+        /// Receives recoverable errors during reading. See <see cref="IBinaryLogReaderErrors.OnRecoverableReadError"/> for documentation on arguments.
         /// Applicable mainly when <see cref="SkipUnknownEvents"/> or <see cref="SkipUnknownEventParts"/> is set to true."/>
         /// </summary>
-        public event Action<ReaderErrorType, BinaryLogRecordKind, FormatErrorMessage>? OnRecoverableReadError;
+        public event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
 
         public void Dispose()
         {
@@ -212,7 +211,7 @@ internal RawRecord ReadRaw()
                 }
 
                 int serializedEventLength = 0;
-                if (_fileFormatVersion >= ForwardCompatibilityMinimalVersion)
+                if (_fileFormatVersion >= BinaryLogger.ForwardCompatibilityMinimalVersion)
                 {
                     serializedEventLength = ReadInt32(); // record length
                     _readStream.BytesCountAllowedToRead = serializedEventLength;
@@ -271,7 +270,7 @@ void HandleError(FormatErrorMessage msgFactory, bool noThrow, ReaderErrorType re
             {
                 if (noThrow)
                 {
-                    OnRecoverableReadError?.Invoke(readerErrorType, recordKind, msgFactory);
+                    OnRecoverableReadError?.Invoke(new BinaryLogReaderErrorEventArgs(readerErrorType, recordKind, msgFactory));
                     SkipBytes(_readStream.BytesCountAllowedToReadRemaining);
                 }
                 else
@@ -439,7 +438,7 @@ private void ReadEmbeddedContent(BinaryLogRecordKind recordKind)
 
         private void ReadNameValueList()
         {
-            if (_fileFormatVersion >= ForwardCompatibilityMinimalVersion)
+            if (_fileFormatVersion >= BinaryLogger.ForwardCompatibilityMinimalVersion)
             {
                 _readStream.BytesCountAllowedToRead = ReadInt32();
             }
@@ -642,7 +641,7 @@ private BuildEventArgs ReadProjectEvaluationFinishedEventArgs()
 
             if (_fileFormatVersion >= 12)
             {
-                if (_fileFormatVersion < ForwardCompatibilityMinimalVersion)
+                if (_fileFormatVersion < BinaryLogger.ForwardCompatibilityMinimalVersion)
                 {
                     // Throw away, but need to advance past it
                     ReadBoolean();
@@ -698,7 +697,7 @@ private BuildEventArgs ReadProjectStartedEventArgs()
 
             if (_fileFormatVersion > 6)
             {
-                if (_fileFormatVersion < ForwardCompatibilityMinimalVersion)
+                if (_fileFormatVersion < BinaryLogger.ForwardCompatibilityMinimalVersion)
                 {
                     // Throw away, but need to advance past it
                     ReadBoolean();
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 5f524df79c2..b7fae9572c7 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -41,7 +41,7 @@ internal class BuildEventArgsWriter
         ///  (distinct from values count due to variable int encoding)
         /// So using same technique as with 'currentRecordStream'.
         /// </summary>
-        private readonly MemoryStream nameValueListStream = new MemoryStream(256);
+        private readonly MemoryStream nameValueListStream;
 
         /// <summary>
         /// The binary writer around the originalStream.
@@ -129,6 +129,8 @@ public BuildEventArgsWriter(BinaryWriter binaryWriter)
             // starting point to avoid reallocations in the common case
             this.currentRecordStream = new MemoryStream(65536);
 
+            this.nameValueListStream = new MemoryStream(256);
+
             this.originalBinaryWriter = binaryWriter;
             this.currentRecordWriter = new BinaryWriter(currentRecordStream);
 
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFile.cs b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFile.cs
index 89ca3663438..1ada2c9df81 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFile.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFile.cs
@@ -36,7 +36,7 @@ public virtual void Dispose()
     /// Fully materialized (in-memory) embedded file.
     /// Easier to work with (the content is expressed in a single string), but more memory greedy.
     /// </summary>
-    public class ArchiveFile : ArchiveData
+    public sealed class ArchiveFile : ArchiveData
     {
         public ArchiveFile(string fullPath, string content)
             : base(fullPath)
@@ -56,7 +56,7 @@ public override ArchiveFile ToArchString()
     /// Lazy (streaming) embedded file.
     /// Might be favorable for large files, as it doesn't materialize the whole content in memory.
     /// </summary>
-    public class ArchiveStream : ArchiveData
+    public sealed class ArchiveStream : ArchiveData
     {
         public ArchiveStream(string fullPath, StreamReader contentReader)
             : base(fullPath)
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/BinaryLogReaderErrorEventArgs.cs b/src/Build/Logging/BinaryLogger/Postprocessing/BinaryLogReaderErrorEventArgs.cs
new file mode 100644
index 00000000000..2f3c5194246
--- /dev/null
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/BinaryLogReaderErrorEventArgs.cs
@@ -0,0 +1,49 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+namespace Microsoft.Build.Logging
+{
+    /// <summary>
+    /// Materializes the error message.
+    /// Until it's called the error message is not materialized and no string allocations are made.
+    /// </summary>
+    /// <returns>The error message.</returns>
+    internal delegate string FormatErrorMessage();
+
+    /// <summary>
+    /// An event args for <see cref="IBinaryLogReaderErrors.OnRecoverableReadError"/> event.
+    /// </summary>
+    public sealed class BinaryLogReaderErrorEventArgs : EventArgs
+    {
+        private readonly FormatErrorMessage _formatErrorMessage;
+
+        internal BinaryLogReaderErrorEventArgs(
+            ReaderErrorType errorType,
+            BinaryLogRecordKind recordKind,
+            FormatErrorMessage formatErrorMessage)
+        {
+            ErrorType = errorType;
+            RecordKind = recordKind;
+            _formatErrorMessage = formatErrorMessage;
+        }
+
+        /// <summary>
+        /// Type of the error that occurred during reading.
+        /// </summary>
+        public ReaderErrorType ErrorType { get; }
+
+        /// <summary>
+        /// Kind of the record that encountered the error.
+        /// </summary>
+        public BinaryLogRecordKind RecordKind { get; }
+
+        /// <summary>
+        /// Materializes the error message.
+        /// Until it's called the error message is not materialized and no string allocations are made.
+        /// </summary>
+        /// <returns>The error message.</returns>
+        public string GetFormattedMessage() => _formatErrorMessage();
+    }
+}
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/IBinaryLogReaderErrors.cs b/src/Build/Logging/BinaryLogger/Postprocessing/IBinaryLogReaderErrors.cs
new file mode 100644
index 00000000000..2d121fc6dc1
--- /dev/null
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/IBinaryLogReaderErrors.cs
@@ -0,0 +1,16 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+namespace Microsoft.Build.Logging
+{
+    public interface IBinaryLogReaderErrors
+    {
+        /// <summary>
+        /// Receives recoverable errors during reading.
+        /// Communicates type of the error, kind of the record that encountered the error and the message detailing the error.
+        /// </summary>
+        event Action<BinaryLogReaderErrorEventArgs>? OnRecoverableReadError;
+    }
+}
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/IBinlogReaderErrors.cs b/src/Build/Logging/BinaryLogger/Postprocessing/IBinlogReaderErrors.cs
deleted file mode 100644
index 66af288aecb..00000000000
--- a/src/Build/Logging/BinaryLogger/Postprocessing/IBinlogReaderErrors.cs
+++ /dev/null
@@ -1,49 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-
-namespace Microsoft.Build.Logging
-{
-    /// <summary>
-    /// Type of the error that occurred during reading.
-    /// </summary>
-    public enum ReaderErrorType
-    {
-        /// <summary>
-        /// The encountered event is completely unknown to the reader. It cannot interpret neither a part of it.
-        /// </summary>
-        UnkownEventType,
-
-        /// <summary>
-        /// The encountered event is known to the reader and reader is able to read the event as it knows it.
-        /// However there are some extra data (append only extension to the event in future version), that reader cannot interpret,
-        ///  it can only skip it.
-        /// </summary>
-        UnknownEventData,
-
-        /// <summary>
-        /// The encountered event is known to the reader, however the reader cannot interpret the data of the event.
-        /// This is probably caused by the fact that the event definition changed in the future revision in other than append-only manner.
-        /// For this reason reader can only skip the event in full.
-        /// </summary>
-        UnknownFormatOfEventData,
-    }
-
-    /// <summary>
-    /// Materializes the error message.
-    /// Until it's called the error message is not materialized and no string allocations are made.
-    /// </summary>
-    /// <returns>The error message.</returns>
-    public delegate string FormatErrorMessage();
-
-    public interface IBinlogReaderErrors
-    {
-        /// <summary>
-        /// Receives recoverable errors during reading.
-        /// Communicates type of the error, kind of the record that encountered the error and the message detailing the error.
-        /// The error message is returned as a function to avoid unnecessary string allocations in case the error is not logged.
-        /// </summary>
-        event Action<ReaderErrorType, BinaryLogRecordKind, FormatErrorMessage>? OnRecoverableReadError;
-    }
-}
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventArgsReaderNotifications.cs b/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventArgsReaderNotifications.cs
index 0a461cf3a93..401c10a7ec0 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventArgsReaderNotifications.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/IBuildEventArgsReaderNotifications.cs
@@ -9,6 +9,6 @@ namespace Microsoft.Build.Logging
     public interface IBuildEventArgsReaderNotifications :
         IBuildEventStringsReader,
         IBuildFileReader,
-        IBinlogReaderErrors
+        IBinaryLogReaderErrors
     { }
 }
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/ReaderErrorType.cs b/src/Build/Logging/BinaryLogger/Postprocessing/ReaderErrorType.cs
new file mode 100644
index 00000000000..5e5d327c8a2
--- /dev/null
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/ReaderErrorType.cs
@@ -0,0 +1,29 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+namespace Microsoft.Build.Logging;
+
+/// <summary>
+/// Type of the error that occurred during reading.
+/// </summary>
+public enum ReaderErrorType
+{
+    /// <summary>
+    /// The encountered event is completely unknown to the reader. It cannot interpret neither a part of it.
+    /// </summary>
+    UnkownEventType,
+
+    /// <summary>
+    /// The encountered event is known to the reader and reader is able to read the event as it knows it.
+    /// However there are some extra data (append only extension to the event in future version), that reader cannot interpret,
+    ///  it can only skip it.
+    /// </summary>
+    UnknownEventData,
+
+    /// <summary>
+    /// The encountered event is known to the reader, however the reader cannot interpret the data of the event.
+    /// This is probably caused by the fact that the event definition changed in the future revision in other than append-only manner.
+    /// For this reason reader can only skip the event in full.
+    /// </summary>
+    UnknownFormatOfEventData,
+}
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs b/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
index b335f80f0fc..ae2ac982648 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/StreamExtensions.cs
@@ -13,7 +13,7 @@ internal static class StreamExtensions
     {
         private static bool CheckIsSkipNeeded(long bytesCount)
         {
-            if(bytesCount is < 0 or > int.MaxValue)
+            if (bytesCount is < 0 or > int.MaxValue)
             {
                 throw new ArgumentOutOfRangeException(nameof(bytesCount), ResourceUtilities.FormatResourceStringStripCodeAndKeyword("Binlog_StreamUtils_UnsupportedSkipOffset",
                     bytesCount));
@@ -22,7 +22,7 @@ private static bool CheckIsSkipNeeded(long bytesCount)
             return bytesCount > 0;
         }
 
-        public static long SkipBytes(this Stream stream, long bytesCount, bool throwOnEndOfStream)
+        public static long SkipBytes(this Stream stream, long bytesCount)
         {
             if (!CheckIsSkipNeeded(bytesCount))
             {
@@ -31,10 +31,10 @@ public static long SkipBytes(this Stream stream, long bytesCount, bool throwOnEn
 
             byte[] buffer = ArrayPool<byte>.Shared.Rent(4096);
             using var _ = new CleanupScope(() => ArrayPool<byte>.Shared.Return(buffer));
-            return SkipBytes(stream, bytesCount, throwOnEndOfStream, buffer);
+            return SkipBytes(stream, bytesCount, buffer);
         }
 
-        public static long SkipBytes(this Stream stream, long bytesCount, bool throwOnEndOfStream, byte[] buffer)
+        public static long SkipBytes(this Stream stream, long bytesCount, byte[] buffer)
         {
             if (!CheckIsSkipNeeded(bytesCount))
             {
@@ -47,12 +47,7 @@ public static long SkipBytes(this Stream stream, long bytesCount, bool throwOnEn
                 int read = stream.Read(buffer, 0, (int)Math.Min(bytesCount - totalRead, buffer.Length));
                 if (read == 0)
                 {
-                    if (throwOnEndOfStream)
-                    {
-                        throw new InvalidDataException("Unexpected end of stream.");
-                    }
-
-                    return totalRead;
+                    throw new InvalidDataException("Unexpected end of stream.");
                 }
 
                 totalRead += read;
diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs b/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs
index 7bccdbcf8c7..4dd9afa0300 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/TransparentReadStream.cs
@@ -67,7 +67,7 @@ public int? BytesCountAllowedToRead
         public override long Position
         {
             get => _position;
-            set => this.SkipBytes(value - _position, true);
+            set => this.SkipBytes(value - _position);
         }
 
         public override void Flush()
@@ -94,14 +94,14 @@ public override long Seek(long offset, SeekOrigin origin)
                 throw new NotSupportedException(ResourceUtilities.GetResourceString("Binlog_StreamUtils_SeekNonOrigin"));
             }
 
-            this.SkipBytes(offset, true);
+            this.SkipBytes(offset);
 
             return _position;
         }
 
         public override void SetLength(long value)
         {
-            throw new NotSupportedException(ResourceUtilities.GetResourceString("Binlog_StreamUtils_ExpandUnsupported"));
+            throw new NotSupportedException(ResourceUtilities.GetResourceString("Binlog_StreamUtils_SetLengthUnsupported"));
         }
 
         public override void Write(byte[] buffer, int offset, int count)
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index f849a6c4d7d..715bf869b04 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -2061,8 +2061,8 @@ Utilization:          {0} Average Utilization: {1:###.0}</value>
   <data name="Binlog_StreamUtils_SeekNonOrigin" xml:space="preserve">
     <value>Only seeking from SeekOrigin.Current is supported.</value>
   </data>
-  <data name="Binlog_StreamUtils_ExpandUnsupported" xml:space="preserve">
-    <value>Expanding stream is not supported.</value>
+  <data name="Binlog_StreamUtils_SetLengthUnsupported" xml:space="preserve">
+    <value>Changing the stream length is not supported.</value>
   </data>
   <data name="Binlog_StreamUtils_WriteUnsupported" xml:space="preserve">
     <value>Writing is not supported.</value>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index 16373c26ca1..5fb49107557 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index 1880babd08f..6d79738a616 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index bdcaabb5712..431d33403f1 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index d743afd968d..cd0fb1670ee 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index 88d352c0746..fbda3c84398 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index fc498eb167b..be9abfea358 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index 96f7f65655a..59e2c0fd825 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index 6e3cfd8f092..0e185a86011 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index 6c8fda317ae..283d43552ae 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index 3d8f9fecc84..b26b877f36b 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 4b84f0229d3..e5d637b08ba 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index 238748cd1f6..4155d28354a 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index e5210d41355..55f04c1fdef 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -96,11 +96,6 @@
         <target state="new">Structured events and raw events cannot be replayed at the same time.</target>
         <note />
       </trans-unit>
-      <trans-unit id="Binlog_StreamUtils_ExpandUnsupported">
-        <source>Expanding stream is not supported.</source>
-        <target state="new">Expanding stream is not supported.</target>
-        <note />
-      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_MustBeReadable">
         <source>Stream must be readable.</source>
         <target state="new">Stream must be readable.</target>
@@ -111,6 +106,11 @@
         <target state="new">Only seeking from SeekOrigin.Current is supported.</target>
         <note />
       </trans-unit>
+      <trans-unit id="Binlog_StreamUtils_SetLengthUnsupported">
+        <source>Changing the stream length is not supported.</source>
+        <target state="new">Changing the stream length is not supported.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="Binlog_StreamUtils_UnsupportedSkipOffset">
         <source>Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</source>
         <target state="new">Attempt to skip {0} bytes, only non-negative offset up to int.MaxValue is allowed.</target>
