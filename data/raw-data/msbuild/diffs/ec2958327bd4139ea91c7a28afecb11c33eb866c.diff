diff --git a/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs b/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
index 74b8c257d49..6448a80ee70 100644
--- a/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
@@ -135,7 +135,7 @@ public void TestTranslation()
             copy.ProjectFullPath.ShouldBe(initial.ProjectFullPath);
             copy.ToolsVersion.ShouldBe(initial.ToolsVersion);
 
-            Assert.Equal(copy.GlobalProperties.GetCopyOnReadEnumerable(), initial.GlobalProperties.GetCopyOnReadEnumerable(), EqualityComparer<ProjectPropertyInstance>.Default);
+            Assert.Equal(copy.GlobalProperties, initial.GlobalProperties, EqualityComparer<ProjectPropertyInstance>.Default);
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/Collections/CopyOnReadEnumerable_Tests.cs b/src/Build.UnitTests/Collections/CopyOnReadEnumerable_Tests.cs
index 5049533a341..3cc9f46d848 100644
--- a/src/Build.UnitTests/Collections/CopyOnReadEnumerable_Tests.cs
+++ b/src/Build.UnitTests/Collections/CopyOnReadEnumerable_Tests.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Generic;
 using Microsoft.Build.Collections;
+using Shouldly;
 using Xunit;
 
 namespace Microsoft.Build.UnitTests.OM.Collections
@@ -13,11 +14,8 @@ namespace Microsoft.Build.UnitTests.OM.Collections
     /// </summary>
     public class CopyOnReadEnumerable_Tests
     {
-        /// <summary>
-        /// Verify basic case
-        /// </summary>
         [Fact]
-        public void NonCloneableBackingCollection()
+        public void EnumeratesBackingCollection()
         {
             List<int> values = new List<int>(new int[] { 1, 2, 3 });
 
@@ -28,48 +26,34 @@ public void NonCloneableBackingCollection()
                 foreach (int i in enumerable)
                 {
                     enumerator.MoveNext();
-                    Assert.Equal(i, enumerator.Current);
+                    enumerator.Current.ShouldBe(i);
                 }
             }
         }
 
-        /// <summary>
-        /// Verify cloning case
-        /// </summary>
         [Fact]
-        public void CloneableBackingCollection()
+        public void CopiesBackingCollection()
         {
-            List<Cloneable> values = new List<Cloneable>(new Cloneable[] { new Cloneable(), new Cloneable(), new Cloneable() });
+            List<string> values = new List<string>(new string[] { "a", "b", "c" });
 
-            CopyOnReadEnumerable<Cloneable> enumerable = new CopyOnReadEnumerable<Cloneable>(values, values);
+            CopyOnReadEnumerable<string> enumerable = new CopyOnReadEnumerable<string>(values, values);
 
-            using (IEnumerator<Cloneable> enumerator = values.GetEnumerator())
+            int count1 = 0;
+            using (IEnumerator<string> enumerator = values.GetEnumerator())
             {
-                foreach (Cloneable i in enumerable)
-                {
-                    enumerator.MoveNext();
-                    Assert.False(Object.ReferenceEquals(i, enumerator.Current)); // "Enumerator copied references."
-                }
+                count1++;
             }
-        }
+            count1.ShouldBe(values.Count);
 
-        /// <summary>
-        /// A class used for testing cloneable backing collections.
-        /// </summary>
-        private class Cloneable : IDeepCloneable<Cloneable>
-        {
-            #region IDeepCloneable<Cloneable> Members
+            // The list has been copied and adding to it has no effect on the enumerable.
+            values.Add("d");
 
-            /// <summary>
-            /// Clones the object.
-            /// </summary>
-            /// <returns>The new instance.</returns>
-            public Cloneable DeepClone()
+            int count2 = 0;
+            using (IEnumerator<string> enumerator = values.GetEnumerator())
             {
-                return new Cloneable();
+                count2++;
             }
-
-            #endregion
+            count2.ShouldBe(count1);
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index 30ffe92df56..28cdc7efa5a 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -89,11 +89,8 @@ private ProjectLoggingContext(
         {
             _projectFullPath = projectFullPath;
 
-            ProjectPropertyInstanceEnumeratorProxy properties = null;
-            ProjectItemInstanceEnumeratorProxy items = null;
-
-            IEnumerable<ProjectPropertyInstance> projectPropertiesEnumerator = projectProperties == null ? Enumerable.Empty<ProjectPropertyInstance>() : null;
-            IEnumerable<ProjectItemInstance> projectItemsEnumerator = projectItems == null ? Enumerable.Empty<ProjectItemInstance>() : null;
+            IEnumerable<DictionaryEntry> properties = null;
+            IEnumerable<DictionaryEntry> items = null;
 
             string[] propertiesToSerialize = LoggingService.PropertiesToSerialize;
 
@@ -102,18 +99,11 @@ private ProjectLoggingContext(
                 !LoggingService.IncludeEvaluationPropertiesAndItems &&
                 (!LoggingService.RunningOnRemoteNode || LoggingService.SerializeAllProperties))
             {
-                if (projectProperties != null)
-                {
-                    projectPropertiesEnumerator = projectProperties.GetCopyOnReadEnumerable();
-                }
-
-                if (projectItems != null)
-                {
-                    projectItemsEnumerator = projectItems.GetCopyOnReadEnumerable();
-                }
+                var propertyEnumerable = projectProperties?.GetCopyOnReadEnumerable();
+                var itemsEnumerable = projectItems?.GetCopyOnReadEnumerable();
 
-                properties = new ProjectPropertyInstanceEnumeratorProxy(projectPropertiesEnumerator);
-                items = new ProjectItemInstanceEnumeratorProxy(projectItemsEnumerator);
+                properties = propertyEnumerable?.Select(property => new DictionaryEntry(property.Name, property.EvaluatedValue));
+                items = itemsEnumerable?.Select(item => new DictionaryEntry(item.ItemType, new TaskItem(item)));
             }
 
             if (projectProperties != null &&
@@ -133,7 +123,7 @@ private ProjectLoggingContext(
                     }
                 }
 
-                properties = new ProjectPropertyInstanceEnumeratorProxy(projectPropertiesToSerialize);
+                properties = projectPropertiesToSerialize.Select((ProjectPropertyInstance property) => new DictionaryEntry(property.Name, property.EvaluatedValue));
             }
 
             this.BuildEventContext = LoggingService.LogProjectStarted
@@ -144,11 +134,9 @@ private ProjectLoggingContext(
                 parentBuildEventContext,
                 projectFullPath,
                 string.Join(";", targets),
-                properties,
-                items,
-                evaluationId,
-                projectContextId
-                );
+                properties ?? Array.Empty<DictionaryEntry>(),
+                items ?? Array.Empty<DictionaryEntry>(),
+                evaluationId);
 
             // No need to log a redundant message in the common case
             if (toolsVersion != "Current")
@@ -178,105 +166,5 @@ internal TargetLoggingContext LogTargetBatchStarted(string projectFullPath, Proj
             ErrorUtilities.VerifyThrow(this.IsValid, "invalid");
             return new TargetLoggingContext(this, projectFullPath, target, parentTargetName, buildReason);
         }
-
-        /// <summary>
-        /// An enumerable wrapper for items that clones items as they are requested,
-        /// so that writes have no effect on the items.
-        /// </summary>
-        /// <remarks>
-        /// This class is designed to be passed to loggers.
-        /// The expense of copying items is only incurred if and when
-        /// a logger chooses to enumerate over it.
-        /// The type of the items enumerated over is imposed by backwards compatibility for ProjectStartedEvent.
-        /// </remarks>
-        private class ProjectItemInstanceEnumeratorProxy : IEnumerable<DictionaryEntry>
-        {
-            /// <summary>
-            /// Enumerable that this proxies
-            /// </summary>
-            private IEnumerable<ProjectItemInstance> _backingItems;
-
-            /// <summary>
-            /// Constructor
-            /// </summary>
-            /// <param name="backingItems">Enumerator this class should proxy</param>
-            internal ProjectItemInstanceEnumeratorProxy(IEnumerable<ProjectItemInstance> backingItems)
-            {
-                _backingItems = backingItems;
-            }
-
-            /// <summary>
-            /// Returns an enumerator that provides copies of the items
-            /// in the backing store.
-            /// Each dictionary entry has key of the item type and value of an ITaskItem.
-            /// Type of the enumerator is imposed by backwards compatibility for ProjectStartedEvent.
-            /// </summary>
-            public IEnumerator<DictionaryEntry> GetEnumerator()
-            {
-                foreach (ProjectItemInstance item in _backingItems)
-                {
-                    yield return new DictionaryEntry(item.ItemType, new TaskItem(item));
-                }
-            }
-
-            /// <summary>
-            /// Returns an enumerator that provides copies of the items
-            /// in the backing store.
-            /// </summary>
-            IEnumerator IEnumerable.GetEnumerator()
-            {
-                return (IEnumerator)GetEnumerator();
-            }
-        }
-
-        /// <summary>
-        /// An enumerable wrapper for properties that clones properties as they are requested,
-        /// so that writes have no effect on the properties.
-        /// </summary>
-        /// <remarks>
-        /// This class is designed to be passed to loggers.
-        /// The expense of copying items is only incurred if and when
-        /// a logger chooses to enumerate over it.
-        /// The type of the items enumerated over is imposed by backwards compatibility for ProjectStartedEvent.
-        /// </remarks>
-        private class ProjectPropertyInstanceEnumeratorProxy : IEnumerable<DictionaryEntry>
-        {
-            /// <summary>
-            /// Enumerable that this proxies
-            /// </summary>
-            private IEnumerable<ProjectPropertyInstance> _backingProperties;
-
-            /// <summary>
-            /// Constructor
-            /// </summary>
-            /// <param name="backingProperties">Enumerator this class should proxy</param>
-            internal ProjectPropertyInstanceEnumeratorProxy(IEnumerable<ProjectPropertyInstance> backingProperties)
-            {
-                _backingProperties = backingProperties;
-            }
-
-            /// <summary>
-            /// Returns an enumerator that provides copies of the properties
-            /// in the backing store.
-            /// Each DictionaryEntry has key of the property name and value of the property value.
-            /// Type of the enumerator is imposed by backwards compatibility for ProjectStartedEvent.
-            /// </summary>
-            public IEnumerator<DictionaryEntry> GetEnumerator()
-            {
-                foreach (ProjectPropertyInstance property in _backingProperties)
-                {
-                    yield return new DictionaryEntry(property.Name, property.EvaluatedValue);
-                }
-            }
-
-            /// <summary>
-            /// Returns an enumerator that provides copies of the properties
-            /// in the backing store.
-            /// </summary>
-            IEnumerator IEnumerable.GetEnumerator()
-            {
-                return (IEnumerator)GetEnumerator();
-            }
-        }
     }
 }
diff --git a/src/Build/Collections/CopyOnReadEnumerable.cs b/src/Build/Collections/CopyOnReadEnumerable.cs
index 16bde74dd11..56de60720e4 100644
--- a/src/Build/Collections/CopyOnReadEnumerable.cs
+++ b/src/Build/Collections/CopyOnReadEnumerable.cs
@@ -8,11 +8,9 @@
 namespace Microsoft.Build.Collections
 {
     /// <summary>
-    /// A class which implements IEnumerable by creating an optionally-deep copy of the backing collection.
+    /// A class which implements IEnumerable by creating a copy of the backing collection.
     /// </summary>
     /// <remarks>
-    /// If the type contained in the collection implements IDeepCloneable then the copies will be deep clones instead
-    /// of mere reference copies.
     /// <see cref="GetEnumerator()"/> is thread safe for concurrent access.
     /// </remarks>
     /// <typeparam name="T">The type contained in the backing collection.</typeparam>
@@ -51,36 +49,10 @@ public CopyOnReadEnumerable(IEnumerable<T> backingEnumerable, object syncRoot)
         public IEnumerator<T> GetEnumerator()
         {
             List<T> list;
-            if (_backingEnumerable is ICollection backingCollection)
-            {
-                list = new List<T>(backingCollection.Count);
-            }
-            else
-            {
-                list = new List<T>();
-            }
-
-            bool isCloneable = false;
-            bool checkForCloneable = true;
             lock (_syncRoot)
             {
-                foreach (T item in _backingEnumerable)
-                {
-                    if (checkForCloneable)
-                    {
-                        if (item is IDeepCloneable<T>)
-                        {
-                            isCloneable = true;
-                        }
-
-                        checkForCloneable = false;
-                    }
-
-                    T copiedItem = isCloneable ? (item as IDeepCloneable<T>).DeepClone() : item;
-                    list.Add(copiedItem);
-                }
+                list = new List<T>(_backingEnumerable);
             }
-
             return list.GetEnumerator();
         }
 
diff --git a/src/Build/Collections/IDeepCloneable.cs b/src/Build/Collections/IDeepCloneable.cs
deleted file mode 100644
index 7842e447788..00000000000
--- a/src/Build/Collections/IDeepCloneable.cs
+++ /dev/null
@@ -1,19 +0,0 @@
-﻿// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-namespace Microsoft.Build.Collections
-{
-    /// <summary>
-    /// An interface representing an item which can clone itself.
-    /// </summary>
-    /// <typeparam name="T">The type returned by the clone operation.</typeparam>
-    internal interface IDeepCloneable<out T>
-    {
-        /// <summary>
-        /// Creates a clone of the item where no data references are shared.  Changes made to the clone
-        /// do not affect the original item.
-        /// </summary>
-        /// <returns>The cloned item.</returns>
-        T DeepClone();
-    }
-}
diff --git a/src/Build/Collections/PropertyDictionary.cs b/src/Build/Collections/PropertyDictionary.cs
index e1929f7ca58..bc8112aafec 100644
--- a/src/Build/Collections/PropertyDictionary.cs
+++ b/src/Build/Collections/PropertyDictionary.cs
@@ -203,9 +203,8 @@ internal T this[string name]
         }
 
         /// <summary>
-        /// Returns an enumerable which clones the properties 
+        /// Returns an enumerable which copies the underlying data on read.
         /// </summary>
-        /// <returns>Returns a cloning enumerable.</returns>
         public IEnumerable<T> GetCopyOnReadEnumerable()
         {
             return new CopyOnReadEnumerable<T>(this, _properties);
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index db613c1a7aa..59f96d076ad 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -32,7 +32,6 @@ public class ProjectItemInstance :
         ITaskItem2,
         IMetadataTable,
         ITranslatable,
-        IDeepCloneable<ProjectItemInstance>,
         IMetadataContainer
     {
         /// <summary>
@@ -580,19 +579,6 @@ void ITranslatable.Translate(ITranslator translator)
 
         #endregion
 
-        #region IDeepCloneable<T>
-
-        /// <summary>
-        /// Deep clone the item.
-        /// Any metadata inherited from item definitions are also copied.
-        /// </summary>
-        ProjectItemInstance IDeepCloneable<ProjectItemInstance>.DeepClone()
-        {
-            return DeepClone();
-        }
-
-        #endregion
-
         /// <summary>
         /// Set all the supplied metadata on all the supplied items.
         /// </summary>
diff --git a/src/Build/Instance/ProjectMetadataInstance.cs b/src/Build/Instance/ProjectMetadataInstance.cs
index 6f9367bed45..14c19e7d95a 100644
--- a/src/Build/Instance/ProjectMetadataInstance.cs
+++ b/src/Build/Instance/ProjectMetadataInstance.cs
@@ -16,7 +16,7 @@ namespace Microsoft.Build.Execution
     /// IMMUTABLE OBJECT.
     /// </summary>
     [DebuggerDisplay("{_name}={EvaluatedValue}")]
-    public class ProjectMetadataInstance : IEquatable<ProjectMetadataInstance>, ITranslatable, IMetadatum, IDeepCloneable<ProjectMetadataInstance>, IImmutable
+    public class ProjectMetadataInstance : IEquatable<ProjectMetadataInstance>, ITranslatable, IMetadatum, IImmutable
     {
         /// <summary>
         /// Name of the metadatum
diff --git a/src/Build/Instance/ProjectPropertyInstance.cs b/src/Build/Instance/ProjectPropertyInstance.cs
index 037cdac44a2..fea2d2bcb55 100644
--- a/src/Build/Instance/ProjectPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyInstance.cs
@@ -18,7 +18,7 @@ namespace Microsoft.Build.Execution
     /// Added and removed via methods on the ProjectInstance object.
     /// </summary>
     [DebuggerDisplay("{_name}={_escapedValue}")]
-    public class ProjectPropertyInstance : IKeyed, IValued, IProperty, IEquatable<ProjectPropertyInstance>, ITranslatable, IDeepCloneable<ProjectPropertyInstance>
+    public class ProjectPropertyInstance : IKeyed, IValued, IProperty, IEquatable<ProjectPropertyInstance>, ITranslatable
     {
         /// <summary>
         /// Name of the property
@@ -138,18 +138,6 @@ void ITranslatable.Translate(ITranslator translator)
 
         #endregion
 
-        #region IDeepCloneable<T>
-
-        /// <summary>
-        /// Performs a deep clone
-        /// </summary>
-        ProjectPropertyInstance IDeepCloneable<ProjectPropertyInstance>.DeepClone()
-        {
-            return DeepClone();
-        }
-
-        #endregion
-
         /// <summary>
         /// String representation handy for tracing
         /// </summary>
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 19c39093f3f..cd99bc84721 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -356,7 +356,6 @@
       <Link>Collections\CopyOnWriteDictionary.cs</Link>
     </Compile>
     <Compile Include="Collections\CopyOnWritePropertyDictionary.cs" />
-    <Compile Include="Collections\IDeepCloneable.cs" />
     <Compile Include="..\Shared\MSBuildNameIgnoreCaseComparer.cs" />
     <Compile Include="Collections\HashTableUtility.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
