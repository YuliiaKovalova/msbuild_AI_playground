diff --git a/src/Build.OM.UnitTests/Definition/Project_Tests.cs b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
index 966cd6b23c6..0f811524b60 100644
--- a/src/Build.OM.UnitTests/Definition/Project_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
@@ -3272,8 +3272,8 @@ public void GetItemProvenanceMatchesLiteralsWithNonCanonicPaths()
             AssertProvenanceResult(expected1Foo, projectContents, @".\1.foo");
 
             using (var env = TestEnvironment.Create())
-            using (var projectCollection = new ProjectCollection())
             {
+                var projectCollection = env.CreateProjectCollection().Collection;
                 var testFiles = env.CreateTestProjectWithFiles(projectContents, new string[0], "u/x");
                 var project = new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection);
 
@@ -3287,6 +3287,39 @@ public void GetItemProvenanceMatchesLiteralsWithNonCanonicPaths()
             }
         }
 
+        [Fact]
+        public void GetItemProvenanceMatchesAbsoluteAndRelativePaths()
+        {
+            var projectContents =
+                @"<Project ToolsVersion='msbuilddefaulttoolsversion' DefaultTargets='Build' xmlns='msbuildnamespace'>
+                  <ItemGroup>
+                    <A Include=`1.foo`/>
+                    <B Include=`$(MSBuildProjectDirectory)\1.foo`/>
+                  </ItemGroup>
+                </Project>
+                ";
+
+            using (var env = TestEnvironment.Create())
+            {
+                var projectCollection = env.CreateProjectCollection().Collection;
+
+                var testFiles = env.CreateTestProjectWithFiles(projectContents, new string[0]);
+
+                var project = new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection);
+
+                var expectedProvenance = new ProvenanceResultTupleList
+                {
+                    Tuple.Create("A", Operation.Include, Provenance.StringLiteral, 1),
+                    Tuple.Create("B", Operation.Include, Provenance.StringLiteral | Provenance.Inconclusive, 1)
+                };
+
+                AssertProvenanceResult(expectedProvenance, project.GetItemProvenance(@"1.foo"));
+
+                var absoluteFile = Path.Combine(Path.GetDirectoryName(testFiles.ProjectFile), "1.foo");
+                AssertProvenanceResult(expectedProvenance, project.GetItemProvenance(absoluteFile));
+            }
+        }
+
         [Fact]
         public void GetItemProvenanceShouldNotFailWithIllegalPathCharacters()
         {
@@ -3738,6 +3771,36 @@ public void GetAllGlobsShouldProduceGlobThatMatches(string itemContents, string[
             }
         }
 
+        [Fact]
+        public void GetAllGlobsShouldProduceGlobsThatMatchAbsolutePaths()
+        {
+            var projectContents =
+                @"<Project ToolsVersion='msbuilddefaulttoolsversion' DefaultTargets='Build' xmlns='msbuildnamespace'>
+                  <ItemGroup>
+                    <A Include=`*.cs`/>
+                    <B Include=`$(MSBuildProjectDirectory)\*.cs`/>
+                  </ItemGroup>
+                </Project>
+                ";
+
+            using (var env = TestEnvironment.Create())
+            {
+                var projectCollection = env.CreateProjectCollection().Collection;
+
+                var testFiles = env.CreateTestProjectWithFiles(projectContents, new string[0]);
+
+                var project = new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection);
+
+                var absoluteFile = Path.Combine(Path.GetDirectoryName(testFiles.ProjectFile), "a.cs");
+
+                foreach (var globResult in project.GetAllGlobs())
+                {
+                    globResult.MsBuildGlob.IsMatch("a.cs").ShouldBeTrue();
+                    globResult.MsBuildGlob.IsMatch(absoluteFile).ShouldBeTrue();
+                }
+            }
+        }
+
         [Fact]
         public void GetAllGlobsShouldFindGlobsByItemType()
         {
diff --git a/src/Build.UnitTests/Evaluation/ItemSpec_Tests.cs b/src/Build.UnitTests/Evaluation/ItemSpec_Tests.cs
index e4bf119f7c3..37ccb395af5 100644
--- a/src/Build.UnitTests/Evaluation/ItemSpec_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ItemSpec_Tests.cs
@@ -6,7 +6,9 @@
 using System.IO;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Shared;
 using Microsoft.Build.UnitTests.BackEnd;
+using Shouldly;
 using Xunit;
 using ProjectInstanceItemSpec =
     Microsoft.Build.Evaluation.ItemSpec<Microsoft.Build.Execution.ProjectPropertyInstance, Microsoft.Build.Execution.ProjectItemInstance>;
@@ -32,6 +34,26 @@ public void EachFragmentTypeShouldContributeToItemSpecGlob()
             Assert.True(itemSpecGlob.IsMatch("e"));
         }
 
+        [Fact]
+        public void AbsolutePathsShouldMatch()
+        {
+            var absoluteRootPath = NativeMethodsShared.IsWindows
+                ? @"c:\a\b"
+                : "/a/b";
+
+            var projectFile = Path.Combine(absoluteRootPath, "build.proj");
+            var absoluteSpec = Path.Combine(absoluteRootPath, "s.cs");
+
+            var itemSpecFromAbsolute = CreateItemSpecFrom(absoluteSpec, CreateExpander(new Dictionary<string, string[]>()), new MockElementLocation(projectFile));
+            var itemSpecFromRelative = CreateItemSpecFrom("s.cs", CreateExpander(new Dictionary<string, string[]>()), new MockElementLocation(projectFile));
+
+            itemSpecFromRelative.ToMSBuildGlob().IsMatch("s.cs").ShouldBeTrue();
+            itemSpecFromRelative.ToMSBuildGlob().IsMatch(absoluteSpec).ShouldBeTrue();
+
+            itemSpecFromAbsolute.ToMSBuildGlob().IsMatch("s.cs").ShouldBeTrue();
+            itemSpecFromAbsolute.ToMSBuildGlob().IsMatch(absoluteSpec).ShouldBeTrue();
+        }
+
         [Fact]
         public void FragmentGlobsWorkAfterStateIsPartiallyInitializedByOtherOperations()
         {
@@ -52,9 +74,11 @@ public void FragmentGlobsWorkAfterStateIsPartiallyInitializedByOtherOperations()
             Assert.True(itemSpecGlob.IsMatch("e"));
         }
 
-        private ProjectInstanceItemSpec CreateItemSpecFrom(string itemSpec, ProjectInstanceExpander expander)
+        private ProjectInstanceItemSpec CreateItemSpecFrom(string itemSpec, ProjectInstanceExpander expander, IElementLocation location = null)
         {
-            return new ProjectInstanceItemSpec(itemSpec, expander, MockElementLocation.Instance, Path.GetDirectoryName(MockElementLocation.Instance.File));
+            location = location ?? MockElementLocation.Instance;
+
+            return new ProjectInstanceItemSpec(itemSpec, expander, location, Path.GetDirectoryName(location.File));
         }
 
         private ProjectInstanceExpander CreateExpander(Dictionary<string, string[]> items)
