diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index 66ede74bf4f..06f7d43782d 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -89,13 +89,13 @@
       <Uri>https://github.com/nuget/nuget.client</Uri>
       <Sha>19756345139c45de23bd196e9b4be01d48e84fdd</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.13.0-1.24527.7">
+    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.13.0-2.24528.6">
       <Uri>https://github.com/dotnet/roslyn</Uri>
-      <Sha>57c4b92785d4b64bd1c68f6fc7694f313c2e686a</Sha>
+      <Sha>57f05a3c12e332f8408a878852b46237632aaf67</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.SourceBuild.Intermediate.roslyn" Version="4.13.0-1.24527.7">
+    <Dependency Name="Microsoft.SourceBuild.Intermediate.roslyn" Version="4.13.0-2.24528.6">
       <Uri>https://github.com/dotnet/roslyn</Uri>
-      <Sha>57c4b92785d4b64bd1c68f6fc7694f313c2e686a</Sha>
+      <Sha>57f05a3c12e332f8408a878852b46237632aaf67</Sha>
       <SourceBuild RepoName="roslyn" ManagedOnly="true" />
     </Dependency>
     <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="9.0.0-beta.24516.2">
@@ -103,4 +103,4 @@
       <Sha>3c393bbd85ae16ddddba20d0b75035b0c6f1a52d</Sha>
     </Dependency>
   </ToolsetDependencies>
-</Dependencies>
\ No newline at end of file
+</Dependencies>
diff --git a/eng/Versions.props b/eng/Versions.props
index 7cf2fbd88b0..ea964044ec8 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -51,7 +51,7 @@
     <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\global.json')), '"dotnet": "([^"]*)"').Groups.get_Item(1))</DotNetCliVersion>
     <MicrosoftCodeAnalysisCollectionsVersion>4.2.0-1.22102.8</MicrosoftCodeAnalysisCollectionsVersion>
     <MicrosoftDotNetXUnitExtensionsVersion>9.0.0-beta.24516.2</MicrosoftDotNetXUnitExtensionsVersion>
-    <MicrosoftNetCompilersToolsetVersion>4.13.0-1.24527.7</MicrosoftNetCompilersToolsetVersion>
+    <MicrosoftNetCompilersToolsetVersion>4.13.0-2.24528.6</MicrosoftNetCompilersToolsetVersion>
     <NuGetBuildTasksVersion>6.12.0-rc.127</NuGetBuildTasksVersion>
   </PropertyGroup>
   <PropertyGroup Condition="!$(TargetFramework.StartsWith('net4'))">
diff --git a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
index d33261fc6d9..1cd861e4c98 100644
--- a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
+++ b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
@@ -28,7 +28,7 @@ public class BuildCheckManagerTests
     public BuildCheckManagerTests(ITestOutputHelper output)
     {
         _loggingService = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
-        _logger = new MockLogger();
+        _logger = new MockLogger(output);
         _loggingService.RegisterLogger(_logger);
         _testedInstance = new BuildCheckManager();
     }
diff --git a/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs b/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
index 7d109f7da15..e764f20cae5 100644
--- a/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
+++ b/src/BuildCheck.UnitTests/TaskInvocationAnalysisDataTests.cs
@@ -13,6 +13,7 @@
 using Microsoft.Build.Utilities;
 using Shouldly;
 using Xunit;
+using Xunit.Abstractions;
 using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.BuildCheckManagerProvider;
 
 namespace Microsoft.Build.BuildCheck.UnitTests
@@ -51,15 +52,19 @@ private void TaskInvocationAction(BuildCheckDataContext<TaskInvocationCheckData>
             }
         }
 
+        private ITestOutputHelper _output;
+
         private static TestCheck? s_testCheck;
 
-        public TaskInvocationCheckDataTests()
+        public TaskInvocationCheckDataTests(ITestOutputHelper output)
         {
+            _output = output;
+
             BuildCheckManager.s_testFactoriesPerDataSource =
             [
                 // BuildCheckDataSource.EventArgs
                 [
-                    ([TestCheck.SupportedRule.Id], true, () => (s_testCheck = new TestCheck())),
+                    ([TestCheck.SupportedRule.Id], true, () => s_testCheck = new TestCheck()),
                 ],
                 // BuildCheckDataSource.Execution
                 [],
@@ -75,7 +80,7 @@ public void Dispose()
 
         private void BuildProject(string taskInvocation)
         {
-            using (var env = TestEnvironment.Create())
+            using (var env = TestEnvironment.Create(_output))
             {
                 var testProject = env.CreateTestProjectWithFiles($"<Project><Target Name=\"Build\">{taskInvocation}</Target></Project>");
 
@@ -84,6 +89,7 @@ private void BuildProject(string taskInvocation)
                     var request = new BuildRequestData(testProject.ProjectFile, new Dictionary<string, string?>(), MSBuildConstants.CurrentToolsVersion, [], null, BuildRequestDataFlags.None);
                     var parameters = new BuildParameters
                     {
+                        Loggers = [new MockLogger(_output)],
                         LogTaskInputs = true,
                         IsBuildCheckEnabled = true,
                         ShutdownInProcNodeOnBuildFinish = true,
@@ -94,7 +100,7 @@ private void BuildProject(string taskInvocation)
                     result.OverallResult.ShouldBe(BuildResultCode.Success);
                 }
 
-                foreach (var data in s_testCheck!.CheckData)
+                foreach (var data in s_testCheck.ShouldNotBeNull().CheckData)
                 {
                     data.ProjectFilePath.ShouldBe(testProject.ProjectFile);
                     data.TaskInvocationLocation.Line.ShouldBeGreaterThan(0);
diff --git a/src/UnitTests.Shared/MockLogger.cs b/src/UnitTests.Shared/MockLogger.cs
index c07a43b58a5..d9a72966a81 100644
--- a/src/UnitTests.Shared/MockLogger.cs
+++ b/src/UnitTests.Shared/MockLogger.cs
@@ -307,7 +307,7 @@ public void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
                             bool logMessage = !(eventArgs is BuildFinishedEventArgs) || LogBuildFinished;
                             if (logMessage)
                             {
-                                string msg = eventArgs.Message;
+                                string msg = eventArgs.Message ?? $"(null message in {eventArgs.GetType().Name} event)";
                                 if (eventArgs is BuildMessageEventArgs m && m.LineNumber != 0)
                                 {
                                     msg = $"{m.File}({m.LineNumber},{m.ColumnNumber}): {msg}";
