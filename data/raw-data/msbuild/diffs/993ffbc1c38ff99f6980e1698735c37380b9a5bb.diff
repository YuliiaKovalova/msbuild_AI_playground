diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index 2c3e089de70..4961d48c59e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -735,9 +735,12 @@ private async Task<bool> PushTargets(IList<TargetSpecification> targets, TargetE
                     }
                 }
 
+                // The buildReason argument for this function can be BeforeTargets or AfterTargets, we don't want to override the reason when adding a new entry
+                // If the reason is None, it means it does not depend on another target. So we can use the target's BuiltReason.
+                TargetBuiltReason entryReason = buildReason == TargetBuiltReason.None ? targetSpecification._targetBuiltReason : buildReason;
+
                 // Add to the list of targets to push.  We don't actually put it on the stack here because we could run into a circular dependency
                 // during this loop, in which case the target stack would be out of whack.
-                TargetBuiltReason entryReason = buildReason == TargetBuiltReason.None ? targetSpecification._targetBuiltReason : buildReason;
                 TargetEntry newEntry = new TargetEntry(_requestEntry, this as ITargetBuilderCallback, targetSpecification, baseLookup, parentTargetEntry, entryReason, _componentHost, _projectLoggingContext, stopProcessingOnCompletion);
 
                 newEntry.ErrorTarget = addAsErrorTarget;
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index 068a6c234a3..d75ffc1afaa 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -775,15 +775,14 @@ public void RetrieveFromCache()
                     "Targets must be same as proxy targets");
             }
 
-            List<(string name, TargetBuiltReason reason)> initialTargets = _projectInitialTargets.ConvertAll(target => (target, TargetBuiltReason.InitialTargets));
-            List<(string name, TargetBuiltReason reason)> nonInitialTargets = (request.Targets.Count == 0)
-                ? _projectDefaultTargets.ConvertAll(target => (target, TargetBuiltReason.DefaultTargets))
-                : request.Targets.ConvertAll(target => (target, TargetBuiltReason.EntryTargets));
-
-            var allTargets = new List<(string name, TargetBuiltReason reason)>(initialTargets.Count + nonInitialTargets.Count);
+            var allTargets = new List<(string name, TargetBuiltReason reason)>(_projectInitialTargets.Count + nonInitialTargets.Count);
 
-            allTargets.AddRange(initialTargets);
-            allTargets.AddRange(nonInitialTargets);
+            allTargets.AddRange(_projectInitialTargets.ConvertAll(target => (target, TargetBuiltReason.InitialTargets)));
+            allTargets.AddRange(
+                (request.Targets.Count == 0)
+                ? _projectDefaultTargets.ConvertAll(target => (target, TargetBuiltReason.DefaultTargets))
+                : request.Targets.ConvertAll(target => (target, TargetBuiltReason.EntryTargets))
+            );
 
             return allTargets;
         }
diff --git a/src/Framework/TargetBuiltReason.cs b/src/Framework/TargetBuiltReason.cs
index 856ff8fa886..d83710653c2 100644
--- a/src/Framework/TargetBuiltReason.cs
+++ b/src/Framework/TargetBuiltReason.cs
@@ -43,6 +43,6 @@ public enum TargetBuiltReason
         /// <summary>
         /// The target was one of the targets explicitly called to be built.
         /// </summary>
-        EntryTargets
+        EntryTargets,
     }
 }
