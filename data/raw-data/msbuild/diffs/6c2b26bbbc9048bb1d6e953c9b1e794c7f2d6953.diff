diff --git a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
index e470f6be153..3b20b32f0d7 100644
--- a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
@@ -18,13 +18,13 @@
 
 namespace Microsoft.Build.UnitTests.BackEnd
 {
+    using System.Linq;
+    using FluentAssertions;
     using Microsoft.Build.Unittest;
 
     /// <summary>
     /// Tests of the scheduler.
     /// </summary>
-    // Ignore: Causing issues with other tests
-    // NOTE: marked as "internal" to disable the entire test class, as was done for MSTest.
     public class Scheduler_Tests : IDisposable
     {
         /// <summary>
@@ -57,6 +57,11 @@ public class Scheduler_Tests : IDisposable
         /// </summary>
         private BuildParameters _parameters;
 
+        /// <summary>
+        /// Configuration ID.
+        /// </summary>
+        private const int DefaultConfigId = 99;
+
         /// <summary>
         /// Set up
         /// </summary>
@@ -70,8 +75,8 @@ public Scheduler_Tests()
             _host = new MockHost();
             _scheduler = new Scheduler();
             _scheduler.InitializeComponent(_host);
-            CreateConfiguration(99, "parent.proj");
-            _defaultParentRequest = CreateBuildRequest(99, 99, Array.Empty<string>(), null);
+            CreateConfiguration(DefaultConfigId, "parent.proj");
+            _defaultParentRequest = CreateBuildRequest(99, DefaultConfigId, Array.Empty<string>(), null);
 
             // Set up the scheduler with one node to start with.
             _scheduler.ReportNodesCreated(new NodeInfo[] { new NodeInfo(1, NodeProviderType.InProc) });
@@ -101,7 +106,7 @@ public void Dispose()
         /// <summary>
         /// Verify that when a single request is submitted, we get a request assigned back out.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestSimpleRequest()
         {
             CreateConfiguration(1, "foo.proj");
@@ -117,7 +122,7 @@ public void TestSimpleRequest()
         /// <summary>
         /// Verify that when we submit a request and we already have results, we get the results back.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestSimpleRequestWithCachedResultsSuccess()
         {
             CreateConfiguration(1, "foo.proj");
@@ -141,7 +146,7 @@ public void TestSimpleRequestWithCachedResultsSuccess()
         /// <summary>
         /// Verify that when we submit a request with failing results, we get the results back.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestSimpleRequestWithCachedResultsFail()
         {
             CreateConfiguration(1, "foo.proj");
@@ -165,7 +170,7 @@ public void TestSimpleRequestWithCachedResultsFail()
         /// <summary>
         /// Verify that when we submit a child request with results cached, we get those results back.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestChildRequest()
         {
             CreateConfiguration(1, "foo.proj");
@@ -195,7 +200,7 @@ public void TestChildRequest()
         /// <summary>
         /// Verify that when multiple requests are submitted, the first one in is the first one out.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestMultipleRequests()
         {
             CreateConfiguration(1, "foo.proj");
@@ -213,7 +218,7 @@ public void TestMultipleRequests()
         /// <summary>
         /// Verify that when multiple requests are submitted with results cached, we get the results back.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestMultipleRequestsWithSomeResults()
         {
             CreateConfiguration(1, "foo.proj");
@@ -235,7 +240,7 @@ public void TestMultipleRequestsWithSomeResults()
         /// <summary>
         /// Verify that when multiple requests are submitted with results cached, we get the results back.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestMultipleRequestsWithAllResults()
         {
             CreateConfiguration(1, "foo.proj");
@@ -266,7 +271,7 @@ public void TestMultipleRequestsWithAllResults()
         /// Verify that if the affinity of one of the requests is out-of-proc, we create an out-of-proc node (but only one)
         /// even if the max node count = 1.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestOutOfProcNodeCreatedWhenAffinityIsOutOfProc()
         {
             CreateConfiguration(1, "foo.proj");
@@ -288,7 +293,7 @@ public void TestOutOfProcNodeCreatedWhenAffinityIsOutOfProc()
         /// Verify that if the affinity of our requests is out-of-proc, that many out-of-proc nodes will
         /// be made (assuming it does not exceed MaxNodeCount)
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestOutOfProcNodesCreatedWhenAffinityIsOutOfProc()
         {
             _host.BuildParameters.MaxNodeCount = 4;
@@ -313,7 +318,7 @@ public void TestOutOfProcNodesCreatedWhenAffinityIsOutOfProc()
         /// we still won't create any new nodes if they're all for the same configuration --
         /// they'd end up all being assigned to the same node.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestNoNewNodesCreatedForMultipleRequestsWithSameConfiguration()
         {
             _host.BuildParameters.MaxNodeCount = 3;
@@ -336,7 +341,7 @@ public void TestNoNewNodesCreatedForMultipleRequestsWithSameConfiguration()
         /// Verify that if the affinity of our requests is "any", we will not create more than
         /// MaxNodeCount nodes (1 IP node + MaxNodeCount - 1 OOP nodes)
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestMaxNodeCountNotExceededWithRequestsOfAffinityAny()
         {
             _host.BuildParameters.MaxNodeCount = 3;
@@ -366,7 +371,7 @@ public void TestMaxNodeCountNotExceededWithRequestsOfAffinityAny()
         /// node will service an Any request instead of an inproc request, leaving only one non-inproc request for the second round
         /// of node creation.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void VerifyRequestOrderingDoesNotAffectNodeCreationCountWithInProcAndAnyRequests()
         {
             // Since we're creating our own BuildManager, we need to make sure that the default
@@ -386,8 +391,8 @@ public void VerifyRequestOrderingDoesNotAffectNodeCreationCountWithInProcAndAnyR
             _parameters.ShutdownInProcNodeOnBuildFinish = true;
             _buildManager = new BuildManager();
 
-            CreateConfiguration(99, "parent.proj");
-            _defaultParentRequest = CreateBuildRequest(99, 99, Array.Empty<string>(), null);
+            CreateConfiguration(DefaultConfigId, "parent.proj");
+            _defaultParentRequest = CreateBuildRequest(99, DefaultConfigId, Array.Empty<string>(), null);
 
             CreateConfiguration(1, "foo.proj");
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" }, NodeAffinity.Any, _defaultParentRequest);
@@ -414,7 +419,7 @@ public void VerifyRequestOrderingDoesNotAffectNodeCreationCountWithInProcAndAnyR
         /// Verify that if the affinity of our requests is out-of-proc, we will create as many as
         /// MaxNodeCount out-of-proc nodes
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestMaxNodeCountOOPNodesCreatedForOOPAffinitizedRequests()
         {
             _host.BuildParameters.MaxNodeCount = 3;
@@ -444,7 +449,7 @@ public void TestMaxNodeCountOOPNodesCreatedForOOPAffinitizedRequests()
         /// is less than MaxNodeCount, that we only create MaxNodeCount - 1 OOP nodes (for a total of MaxNodeCount
         /// nodes, when the inproc node is included)
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestMaxNodeCountNodesNotExceededWithSomeOOPRequests1()
         {
             _host.BuildParameters.MaxNodeCount = 3;
@@ -474,7 +479,7 @@ public void TestMaxNodeCountNodesNotExceededWithSomeOOPRequests1()
         /// is less than MaxNodeCount, that we only create MaxNodeCount - 1 OOP nodes (for a total of MaxNodeCount
         /// nodes, when the inproc node is included)
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestMaxNodeCountNodesNotExceededWithSomeOOPRequests2()
         {
             _host.BuildParameters.MaxNodeCount = 3;
@@ -511,7 +516,7 @@ public void SchedulerShouldHonorDisableInprocNode()
         /// Make sure that traversal projects are marked with an affinity of "InProc", which means that
         /// even if multiple are available, we should still only have the single inproc node.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestTraversalAffinityIsInProc()
         {
             _host.BuildParameters.MaxNodeCount = 3;
@@ -560,7 +565,7 @@ public void TestProxyAffinityIsInProc()
         /// With something approximating the BuildManager's build loop, make sure that we don't end up
         /// trying to create more nodes than we can actually support.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void VerifyNoOverCreationOfNodesWithBuildLoop()
         {
             // Since we're creating our own BuildManager, we need to make sure that the default
@@ -578,8 +583,8 @@ public void VerifyNoOverCreationOfNodesWithBuildLoop()
             _parameters.ShutdownInProcNodeOnBuildFinish = true;
             _buildManager = new BuildManager();
 
-            CreateConfiguration(99, "parent.proj");
-            _defaultParentRequest = CreateBuildRequest(99, 99, Array.Empty<string>(), null);
+            CreateConfiguration(DefaultConfigId, "parent.proj");
+            _defaultParentRequest = CreateBuildRequest(99, DefaultConfigId, Array.Empty<string>(), null);
 
             CreateConfiguration(1, "foo.proj");
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" }, NodeAffinity.OutOfProc, _defaultParentRequest);
@@ -615,7 +620,7 @@ public void BuildResultNotPlacedInCurrentCacheIfConfigExistsInOverrideCache()
         /// <summary>
         /// Verify that if we get two requests but one of them is a failure, we only get the failure result back.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestTwoRequestsWithFirstFailure()
         {
             CreateConfiguration(1, "foo.proj");
@@ -634,7 +639,7 @@ public void TestTwoRequestsWithFirstFailure()
         /// <summary>
         /// Verify that if we get two requests but one of them is a failure, we only get the failure result back.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestTwoRequestsWithSecondFailure()
         {
             CreateConfiguration(1, "foo.proj");
@@ -653,7 +658,7 @@ public void TestTwoRequestsWithSecondFailure()
         /// <summary>
         /// Verify that if we get three requests but one of them is a failure, we only get the failure result back.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestThreeRequestsWithOneFailure()
         {
             CreateConfiguration(1, "foo.proj");
@@ -673,7 +678,7 @@ public void TestThreeRequestsWithOneFailure()
         /// <summary>
         /// Verify that providing a result to the only outstanding request results in build complete.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestResult()
         {
             CreateConfiguration(1, "foo.proj");
@@ -697,7 +702,7 @@ public void TestResult()
         /// <summary>
         /// Tests that the detailed summary setting causes the summary to be produced.
         /// </summary>
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/515")]
+        [Fact]
         public void TestDetailedSummary()
         {
             string contents = ObjectModelHelpers.CleanupFileContents(@"
@@ -774,6 +779,7 @@ private BuildResult CreateBuildResult(BuildRequest request, string target, WorkU
         {
             BuildResult result = new BuildResult(request);
             result.AddResultsForTarget(target, new TargetResult(Array.Empty<TaskItem>(), workUnitResult));
+
             return result;
         }
 
@@ -788,23 +794,30 @@ private BuildRequest CreateBuildRequest(int nodeRequestId, int configId)
         /// <summary>
         /// Creates a build request.
         /// </summary>
-        private BuildRequest CreateBuildRequest(int nodeRequestId, int configId, string[] targets)
+        private BuildRequest CreateBuildRequest(int nodeRequestId, int configId, string[] targets, BuildRequestDataFlags buildRequestDataFlags = BuildRequestDataFlags.None)
         {
-            return CreateBuildRequest(nodeRequestId, configId, targets, _defaultParentRequest);
+            return CreateBuildRequest(nodeRequestId, configId, targets, _defaultParentRequest, buildRequestDataFlags);
         }
 
         /// <summary>
         /// Creates a build request.
         /// </summary>
-        private BuildRequest CreateBuildRequest(int nodeRequestId, int configId, string[] targets, BuildRequest parentRequest)
+        private BuildRequest CreateBuildRequest(int nodeRequestId, int configId, string[] targets, BuildRequest parentRequest, BuildRequestDataFlags buildRequestDataFlags = BuildRequestDataFlags.None)
         {
-            return CreateBuildRequest(nodeRequestId, configId, targets, NodeAffinity.Any, parentRequest);
+            return CreateBuildRequest(nodeRequestId, configId, targets, NodeAffinity.Any, parentRequest, buildRequestDataFlags: buildRequestDataFlags);
         }
 
         /// <summary>
         /// Creates a build request.
         /// </summary>
-        private BuildRequest CreateBuildRequest(int nodeRequestId, int configId, string[] targets, NodeAffinity nodeAffinity, BuildRequest parentRequest, ProxyTargets proxyTargets = null)
+        private BuildRequest CreateBuildRequest(
+            int nodeRequestId,
+            int configId,
+            string[] targets,
+            NodeAffinity nodeAffinity,
+            BuildRequest parentRequest,
+            ProxyTargets proxyTargets = null,
+            BuildRequestDataFlags buildRequestDataFlags = BuildRequestDataFlags.None)
         {
             (targets == null ^ proxyTargets == null).ShouldBeTrue();
 
@@ -825,16 +838,19 @@ private BuildRequest CreateBuildRequest(int nodeRequestId, int configId, string[
                     targets,
                     hostServices,
                     BuildEventContext.Invalid,
-                    parentRequest);
+                    parentRequest,
+                    buildRequestDataFlags: buildRequestDataFlags);
             }
 
             parentRequest.ShouldBeNull();
+
             return new BuildRequest(
                 submissionId: 1,
                 nodeRequestId,
                 configId,
                 proxyTargets,
-                hostServices);
+                hostServices,
+                buildRequestDataFlags: buildRequestDataFlags);
         }
 
         private BuildRequest CreateProxyBuildRequest(int nodeRequestId, int configId, ProxyTargets proxyTargets, BuildRequest parentRequest)
@@ -848,6 +864,74 @@ private BuildRequest CreateProxyBuildRequest(int nodeRequestId, int configId, Pr
                 proxyTargets);
         }
 
+        /// <summary>
+        /// The test checks how scheduler handles the duplicated requests and cache MISS for this case.
+        /// It's expected to have it rescheduled for the execution.
+        /// </summary>
+        [Fact]
+        public void ReportResultTest_NoCacheHitForDupes()
+        {
+            // Create a duplicate of the existing _defaultParentRequest, but with a different build request flag, so we can't get the result from the cache.
+            BuildRequest duplicateRequest = CreateBuildRequest(2, configId: DefaultConfigId, Array.Empty<string>(), parentRequest: null, BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild);
+
+            // Schedule the duplicate request -> it goes to unscheduled request due to duplicated configId
+            List<ScheduleResponse> responses = [.. _scheduler.ReportRequestBlocked(2, new BuildRequestBlocker(-1, Array.Empty<string>(), [duplicateRequest]))];
+
+            // try to get a result for the parent request and see if we get a result for the duplicate request
+            var results = _scheduler.ReportResult(1, CreateBuildResult(_defaultParentRequest, "", BuildResultUtilities.GetSuccessResult()))
+                .ToList();
+
+            results.ShouldNotBeNull();
+            results.Count.ShouldBe(3);
+
+            // Completed _defaultParentRequest
+            results[0].BuildResult.ShouldNotBeNull();
+            results[0].BuildResult.BuildRequestDataFlags.ShouldBe(BuildRequestDataFlags.None);
+            results[0].Action.ShouldBe(ScheduleActionType.SubmissionComplete);
+
+            // After cache miss, the candidate for rescheduling
+            results[1].BuildResult.ShouldBeNull();
+            results[1].NodeId.Should().Be(-1);
+            results[1].Action.ShouldBe(ScheduleActionType.Schedule);
+            results[1].BuildRequest.BuildRequestDataFlags.ShouldBe(BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild);
+
+            // The candidate for rescheduling has a node assignment for the execution.
+            results[2].BuildResult.ShouldBeNull();
+            results[2].NodeId.Should().Be(1);
+            results[2].Action.ShouldBe(ScheduleActionType.Schedule);
+            results[2].BuildRequest.BuildRequestDataFlags.ShouldBe(BuildRequestDataFlags.ProvideSubsetOfStateAfterBuild);
+        }
+
+        /// <summary>
+        /// The test checks how scheduler handles the duplicated requests and cache HIT for this case.
+        /// </summary>
+        [Fact]
+        public void ReportResultTest_CacheHitForDupes()
+        {
+            // Create a duplicate of the existing _defaultParentRequest.
+            BuildRequest duplicateRequest = CreateBuildRequest(2, configId: DefaultConfigId, Array.Empty<string>(), parentRequest: null, BuildRequestDataFlags.None);
+
+            // Schedule the duplicate request -> it goes to unscheduled request due to duplicated configId
+            List<ScheduleResponse> responses = [.. _scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, Array.Empty<string>(), [duplicateRequest]))];
+
+            // try to get a result for the parent request and see if we get a result for the duplicate request.
+            var results = _scheduler.ReportResult(1, CreateBuildResult(duplicateRequest, "", BuildResultUtilities.GetSuccessResult()))
+                .ToList();
+
+            results.ShouldNotBeNull();
+            results.Count.ShouldBe(2);
+
+            // Completed _defaultParentRequest
+            results[0].BuildResult.ShouldNotBeNull();
+            results[0].BuildResult.BuildRequestDataFlags.ShouldBe(BuildRequestDataFlags.None);
+            results[0].Action.ShouldBe(ScheduleActionType.SubmissionComplete);
+
+            // We hit cache and completed the duplicate request.
+            results[1].BuildResult.ShouldNotBeNull();
+            results[1].BuildResult.BuildRequestDataFlags.ShouldBe(BuildRequestDataFlags.None);
+            results[1].Action.ShouldBe(ScheduleActionType.SubmissionComplete);
+        }
+
         /// <summary>
         /// Method that fakes the actions done by BuildManager.PerformSchedulingActions
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 6bcb954c1f3..aaef5f2d46a 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -431,7 +431,7 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
 
                 // This result may apply to a number of other unscheduled requests which are blocking active requests.  Report to them as well.
                 List<SchedulableRequest> unscheduledRequests = new List<SchedulableRequest>(_schedulingData.UnscheduledRequests);
-                foreach (SchedulableRequest unscheduledRequest in unscheduledRequests)
+               foreach (SchedulableRequest unscheduledRequest in unscheduledRequests)
                 {
                     if (unscheduledRequest.BuildRequest.GlobalRequestId == result.GlobalRequestId)
                     {
@@ -444,30 +444,32 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
                         // There are other requests which we can satisfy based on this result, lets pull the result out of the cache
                         // and satisfy those requests.  Normally a skipped result would lead to the cache refusing to satisfy the
                         // request, because the correct response in that case would be to attempt to rebuild the target in case there
-                        // are state changes that would cause it to now excute.  At this point, however, we already know that the parent
+                        // are state changes that would cause it to now execute.  At this point, however, we already know that the parent
                         // request has completed, and we already know that this request has the same global request ID, which means that
                         // its configuration and set of targets are identical -- from MSBuild's perspective, it's the same.  So since
                         // we're not going to attempt to re-execute it, if there are skipped targets in the result, that's fine. We just
                         // need to know what the target results are so that we can log them.
                         ScheduleResponse response = TrySatisfyRequestFromCache(parentNode, unscheduledRequest.BuildRequest, skippedResultsDoNotCauseCacheMiss: true);
 
-                        // If we have a response we need to tell the loggers that we satisified that request from the cache.
+                        // If we have a response we need to tell the loggers that we satisfied that request from the cache.
                         if (response != null)
                         {
                             LogRequestHandledFromCache(unscheduledRequest.BuildRequest, response.BuildResult);
+
+                            // Mark the request as complete (and the parent is no longer blocked by this request.)
+                            unscheduledRequest.Complete(newResult);
                         }
                         else
                         {
-                            // Response may be null if the result was never added to the cache. This can happen if the result has
-                            // an exception in it. If that is the case, we should report the result directly so that the
-                            // build manager knows that it needs to shut down logging manually.
-                            response = GetResponseForResult(parentNode, unscheduledRequest.BuildRequest, newResult.Clone());
+                            // IF WE HIT IT, WE ARE IN TROUBLE WITH OUR CACHE.
+                            // Response may be null if the result was never added to the cache. This can happen if the result has an exception in it.
+
+                            // We attempt to reschedule the request on the node that was assigned to it.
+                            bool mustSendConfigurationToNode = _availableNodes[nodeId].AssignConfiguration(unscheduledRequest.BuildRequest.ConfigurationId);
+                            response = ScheduleResponse.CreateScheduleResponse(unscheduledRequest.AssignedNode, unscheduledRequest.BuildRequest, mustSendConfigurationToNode);
                         }
 
                         responses.Add(response);
-
-                        // Mark the request as complete (and the parent is no longer blocked by this request.)
-                        unscheduledRequest.Complete(newResult);
                     }
                 }
             }
@@ -674,7 +676,7 @@ private void HandleYieldAction(SchedulableRequest parentRequest, BuildRequestBlo
         /// <param name="responses">The list which should be populated with responses from the scheduling.</param>
         private void ScheduleUnassignedRequests(List<ScheduleResponse> responses)
         {
-            DateTime schedulingTime = DateTime.UtcNow;
+         DateTime schedulingTime = DateTime.UtcNow;
 
             // See if we are done.  We are done if there are no unassigned requests and no requests assigned to nodes.
             if (_schedulingData.UnscheduledRequestsCount == 0 &&
