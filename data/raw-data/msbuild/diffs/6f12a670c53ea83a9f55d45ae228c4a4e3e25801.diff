diff --git a/src/Tasks/LC.cs b/src/Tasks/LC.cs
index 0547a5d3e68..9939247ea13 100644
--- a/src/Tasks/LC.cs
+++ b/src/Tasks/LC.cs
@@ -12,6 +12,7 @@ namespace Microsoft.Build.Tasks
     /// <summary>
     /// The License Compiler task
     /// </summary>
+    [System.Diagnostics.CodeAnalysis.SuppressMessage("ApiDesign", "RS0022:Constructor make noninheritable base class inheritable", Justification = "Class structure has existed for a long time and shouldn't be adjusted.")]
     public class LC : ToolTaskExtension
     {
         #region Input/output properties
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index 11c02825dfc..7c8b0680655 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -516,6 +516,7 @@
     <Compile Include="RoslynCodeTaskFactory\RoslynCodeTaskFactoryCodeType.cs" />
     <Compile Include="RoslynCodeTaskFactory\RoslynCodeTaskFactoryCompilers.cs" />
     <Compile Include="RoslynCodeTaskFactory\RoslynCodeTaskFactoryTaskInfo.cs" />
+    <Compile Include="SdkToolsPathUtility.cs" />
     <Compile Include="SGen.cs" Condition="'$(MonoBuild)' != 'true'">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
@@ -639,7 +640,6 @@
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
     <Compile Include="ResolveSDKReference.cs" />
-    <Compile Include="SdkToolsPathUtility.cs" />
     <Compile Include="RequiresFramework35SP1Assembly.cs" Condition="'$(MonoBuild)' != 'true'">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
diff --git a/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index 8ef966adf50..23c8f38efd6 100644
--- a/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1 +1,24 @@
-override Microsoft.Build.Tasks.LC.Execute() -> bool
\ No newline at end of file
+Microsoft.Build.Tasks.LC
+Microsoft.Build.Tasks.LC.LC() -> void
+Microsoft.Build.Tasks.LC.LicenseTarget.get -> Microsoft.Build.Framework.ITaskItem
+Microsoft.Build.Tasks.LC.LicenseTarget.set -> void
+Microsoft.Build.Tasks.LC.NoLogo.get -> bool
+Microsoft.Build.Tasks.LC.NoLogo.set -> void
+Microsoft.Build.Tasks.LC.OutputDirectory.get -> string
+Microsoft.Build.Tasks.LC.OutputDirectory.set -> void
+Microsoft.Build.Tasks.LC.OutputLicense.get -> Microsoft.Build.Framework.ITaskItem
+Microsoft.Build.Tasks.LC.OutputLicense.set -> void
+Microsoft.Build.Tasks.LC.ReferencedAssemblies.get -> Microsoft.Build.Framework.ITaskItem[]
+Microsoft.Build.Tasks.LC.ReferencedAssemblies.set -> void
+Microsoft.Build.Tasks.LC.SdkToolsPath.get -> string
+Microsoft.Build.Tasks.LC.SdkToolsPath.set -> void
+Microsoft.Build.Tasks.LC.Sources.get -> Microsoft.Build.Framework.ITaskItem[]
+Microsoft.Build.Tasks.LC.Sources.set -> void
+Microsoft.Build.Tasks.LC.TargetFrameworkVersion.get -> string
+Microsoft.Build.Tasks.LC.TargetFrameworkVersion.set -> void
+override Microsoft.Build.Tasks.LC.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension commandLine) -> void
+override Microsoft.Build.Tasks.LC.AddResponseFileCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension commandLine) -> void
+override Microsoft.Build.Tasks.LC.Execute() -> bool
+override Microsoft.Build.Tasks.LC.GenerateFullPathToTool() -> string
+override Microsoft.Build.Tasks.LC.ToolName.get -> string
+override Microsoft.Build.Tasks.LC.ValidateParameters() -> bool
\ No newline at end of file
