diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index d8a7dd80736..7c278ef5d8e 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -2361,7 +2361,7 @@ public void DuplicateProjectReferences()
                 env: _env,
                 dependencyEdges: new Dictionary<int, int[]>()
                 {
-                    {1, new[] {2}},
+                    { 1, new[] { 2 } },
                 },
                 extraContentPerProjectNumber: new Dictionary<int, string>()
                 {
@@ -2371,28 +2371,29 @@ public void DuplicateProjectReferences()
 <ItemGroup>
     <ProjectReferenceTmp Include='@(ProjectReference)' />
     <ProjectReference Include='@(ProjectReferenceTmp)' />
-</ItemGroup>"
-                    },
-                },
-                extraContentForAllNodes: @$"
-<PropertyGroup>
-</PropertyGroup>
+</ItemGroup>
 
 <ItemGroup>
-    <ProjectReferenceTargets Include='Build' Targets='{MSBuildConstants.ProjectReferenceTargetsOrDefaultTargetsMarker}' />
+    <ProjectReferenceTargets Include='SomeDefaultTarget1' Targets='{MSBuildConstants.ProjectReferenceTargetsOrDefaultTargetsMarker}' />
 </ItemGroup>
 
-<Target Name='Build' />
-");
+<Target Name='SomeDefaultTarget1' />
+"
+                    },
+                    {
+                        2,
+                        @"<Target Name='SomeDefaultTarget2' />"
+                    }
+                });
 
-            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = graph.GetTargetLists(new[] { "Build" });
+            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = graph.GetTargetLists(Array.Empty<string>());
 
             ProjectGraphNode project1 = GetFirstNodeWithProjectNumber(graph, 1);
             ProjectGraphNode project2 = GetFirstNodeWithProjectNumber(graph, 2);
 
             project1.ProjectReferences.ShouldHaveSingleItem().ShouldBe(project2);
-            targetLists[project1].ShouldBe(new[] { "Build" });
-            targetLists[project2].ShouldBe(new[] { "Build" });
+            targetLists[project1].ShouldBe(new[] { "SomeDefaultTarget1" });
+            targetLists[project2].ShouldBe(new[] { "SomeDefaultTarget2" });
         }
 
         [Fact]
@@ -2412,28 +2413,29 @@ public void MultipleProjectReferencesSameFileDifferentTargets()
 <ItemGroup>
     <ProjectReferenceTmp Include='@(ProjectReference)' />
     <ProjectReference Include='@(ProjectReferenceTmp)' Targets='SomeOtherTarget' />
-</ItemGroup>"
-                    },
-                },
-                extraContentForAllNodes: @$"
-<PropertyGroup>
-</PropertyGroup>
+</ItemGroup>
 
 <ItemGroup>
-    <ProjectReferenceTargets Include='Build' Targets='{MSBuildConstants.ProjectReferenceTargetsOrDefaultTargetsMarker}' />
+    <ProjectReferenceTargets Include='SomeDefaultTarget1' Targets='{MSBuildConstants.ProjectReferenceTargetsOrDefaultTargetsMarker}' />
 </ItemGroup>
 
-<Target Name='Build' />
-");
+<Target Name='SomeDefaultTarget1' />
+"
+                    },
+                    {
+                        2,
+                        @"<Target Name='SomeDefaultTarget2' />"
+                    }
+                });
 
-            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = graph.GetTargetLists(new[] { "Build" });
+            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetLists = graph.GetTargetLists(Array.Empty<string>());
 
             ProjectGraphNode project1 = GetFirstNodeWithProjectNumber(graph, 1);
             ProjectGraphNode project2 = GetFirstNodeWithProjectNumber(graph, 2);
 
             project1.ProjectReferences.ShouldHaveSingleItem().ShouldBe(project2);
-            targetLists[project1].ShouldBe(new[] { "Build" });
-            targetLists[project2].ShouldBe(new[] { "Build", "SomeOtherTarget" });
+            targetLists[project1].ShouldBe(new[] { "SomeDefaultTarget1" });
+            targetLists[project2].ShouldBe(new[] { "SomeDefaultTarget2", "SomeOtherTarget" });
         }
 
         public void Dispose()
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index 970011e391a..09263b6b97c 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -6,6 +6,7 @@
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Linq;
+using System.Security.Cryptography.Xml;
 using System.Text;
 using System.Threading;
 using Microsoft.Build.BackEnd;
@@ -639,18 +640,18 @@ public void AddOrUpdateEdge((ProjectGraphNode node, ProjectGraphNode reference)
                             return existingItem;
                         }
 
-                        existingTargetsMetadata = GetEffectiveTargets(existingItem, existingTargetsMetadata);
-                        newTargetsMetadata = GetEffectiveTargets(newItem, newTargetsMetadata);
+                        existingTargetsMetadata = GetEffectiveTargets(key.reference, existingTargetsMetadata);
+                        newTargetsMetadata = GetEffectiveTargets(key.reference, newTargetsMetadata);
 
                         ProjectItemInstance mergedItem = existingItem.DeepClone();
                         mergedItem.SetMetadata(ItemMetadataNames.ProjectReferenceTargetsMetadataName, $"{existingTargetsMetadata};{newTargetsMetadata}");
                         return mergedItem;
 
-                        static string GetEffectiveTargets(ProjectItemInstance item, string targetsMetadata)
+                        static string GetEffectiveTargets(ProjectGraphNode reference, string targetsMetadata)
                         {
                             if (string.IsNullOrWhiteSpace(targetsMetadata))
                             {
-                                return string.Join(";", item.Project.DefaultTargets);
+                                return string.Join(";", reference.ProjectInstance.DefaultTargets);
                             }
 
                             return targetsMetadata;
