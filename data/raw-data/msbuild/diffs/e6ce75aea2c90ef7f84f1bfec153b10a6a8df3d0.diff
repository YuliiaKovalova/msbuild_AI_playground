diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index ea363182a87..9da66ddcc95 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1363,12 +1363,10 @@ private void ConfigureKnownImmutableFolders()
             ProjectInstance project = _requestEntry?.RequestConfiguration?.Project;
             if (project != null)
             {
-                //example: C:\Users\USER_NAME\.nuget\;C:\Program Files\dotnet\sdk\NuGetFallbackFolder
-                FileClassifier.Shared.RegisterImmutableDirectories(project.GetPropertyValue("NuGetPackageFolders")?.Trim());
                 // example: C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.7.2
-                FileClassifier.Shared.RegisterImmutableDirectories(project.GetPropertyValue("FrameworkPathOverride")?.Trim());
+                FileClassifier.Shared.RegisterImmutableDirectory(project.GetPropertyValue("FrameworkPathOverride")?.Trim());
                 // example: C:\Program Files\dotnet\
-                FileClassifier.Shared.RegisterImmutableDirectories(project.GetPropertyValue("NetCoreRoot")?.Trim());
+                FileClassifier.Shared.RegisterImmutableDirectory(project.GetPropertyValue("NetCoreRoot")?.Trim());
             }
         }
 
diff --git a/src/Build/Definition/ToolsetReader.cs b/src/Build/Definition/ToolsetReader.cs
index a8f88769138..eb0e6c3a064 100644
--- a/src/Build/Definition/ToolsetReader.cs
+++ b/src/Build/Definition/ToolsetReader.cs
@@ -425,9 +425,9 @@ bool accumulateProperties
 
                     // Register toolset paths into list of immutable directories
                     //   example: C:\Windows\Microsoft.NET\Framework\v4.0.30319\
-                    FileClassifier.Shared.RegisterImmutableDirectories(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath32")?.EvaluatedValue?.Trim());
+                    FileClassifier.Shared.RegisterImmutableDirectory(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath32")?.EvaluatedValue?.Trim());
                     //   example:  C:\Windows\Microsoft.NET\Framework64\v4.0.30319\
-                    FileClassifier.Shared.RegisterImmutableDirectories(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath64")?.EvaluatedValue?.Trim());
+                    FileClassifier.Shared.RegisterImmutableDirectory(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath64")?.EvaluatedValue?.Trim());
 
                     if (toolset != null)
                     {
diff --git a/src/Framework.UnitTests/FileClassifier_Tests.cs b/src/Framework.UnitTests/FileClassifier_Tests.cs
index 04ca226c603..1a48973a067 100644
--- a/src/Framework.UnitTests/FileClassifier_Tests.cs
+++ b/src/Framework.UnitTests/FileClassifier_Tests.cs
@@ -22,7 +22,8 @@ public void IsNonModifiable_EvaluatesModifiability()
             FileClassifier classifier = new();
 
             var volume = NativeMethodsShared.IsWindows ? @"X:\" : "/home/usr";
-            classifier.RegisterImmutableDirectories($"{Path.Combine(volume,"Test1")};{Path.Combine(volume, "Test2")}");
+            classifier.RegisterImmutableDirectory($"{Path.Combine(volume,"Test1")}");
+            classifier.RegisterImmutableDirectory($"{Path.Combine(volume, "Test2")}");
 
             classifier.IsNonModifiable(Path.Combine(volume, "Test1", "File.ext")).ShouldBeTrue();
             classifier.IsNonModifiable(Path.Combine(volume, "Test2", "File.ext")).ShouldBeTrue();
@@ -38,7 +39,8 @@ public void IsNonModifiable_DuplicateNugetRegistry_EvaluatesModifiability()
 
             for (int i = 0; i < 3; ++i)
             {
-                classifier.RegisterImmutableDirectories($"{Path.Combine(volume, "Test1")};{Path.Combine(volume, "Test2")}");
+                classifier.RegisterImmutableDirectory($"{Path.Combine(volume, "Test1")}");
+                classifier.RegisterImmutableDirectory($"{Path.Combine(volume, "Test2")}");
             }
 
             classifier.IsNonModifiable(Path.Combine(volume, "Test1", "File.ext")).ShouldBeTrue();
@@ -52,7 +54,7 @@ public void IsNonModifiable_RespectsOSCaseSensitivity()
             FileClassifier classifier = new();
 
             var volume = NativeMethodsShared.IsWindows ? @"X:\" : "/home/usr";
-            classifier.RegisterImmutableDirectories($"{Path.Combine(volume, "Test1")}");
+            classifier.RegisterImmutableDirectory($"{Path.Combine(volume, "Test1")}");
 
             if (NativeMethodsShared.IsLinux)
             {
diff --git a/src/Framework/FileClassifier.cs b/src/Framework/FileClassifier.cs
index feed353ed56..e459dd8fc3b 100644
--- a/src/Framework/FileClassifier.cs
+++ b/src/Framework/FileClassifier.cs
@@ -43,11 +43,6 @@ internal class FileClassifier
         /// </remarks>
         private static readonly StringComparison PathComparison = RuntimeInformation.IsOSPlatform(OSPlatform.Linux) ? StringComparison.Ordinal : StringComparison.OrdinalIgnoreCase;
 
-        /// <summary>
-        ///     Single, static instance of an array that contains a semi-colon ';', which is used to split strings.
-        /// </summary>
-        private static readonly char[] s_semicolonDelimiter = {';'};
-
         /// <summary>
         ///     Single, static <see cref="Lazy{T}"/> instance of shared file FileClassifier for <see cref="Shared"/> member.
         /// </summary>
@@ -71,15 +66,14 @@ internal class FileClassifier
         ///     Creates default FileClassifier which following immutable folders:
         ///     Classifications provided are:
         ///     <list type="number">
-        ///         <item>Program Files</item>
-        ///         <item>Program Files (x86)</item>
-        ///         <item>Default .nuget cache location</item>
+        ///         <item>Program Files\Reference Assemblies\Microsoft</item>
+        ///         <item>Program Files (x86)\Reference Assemblies\Microsoft</item>
         ///         <item>Visual Studio installation root</item>
         ///     </list>
         /// </summary>
         /// <remarks>
         ///     Individual projects NuGet folders are added during project build by calling
-        ///     <see cref="RegisterImmutableDirectories" />
+        ///     <see cref="RegisterImmutableDirectory" />
         /// </remarks>
         public FileClassifier()
         {
@@ -90,11 +84,11 @@ public FileClassifier()
             {
                 RegisterImmutableDirectory(Path.Combine(programFiles32, "Reference Assemblies", "Microsoft"));
             }
+
             if (!string.IsNullOrEmpty(programFiles64))
             {
                 RegisterImmutableDirectory(Path.Combine(programFiles64, "Reference Assemblies", "Microsoft"));
             }
-            RegisterImmutableDirectory(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), ".nuget", "packages"));
 
 #if !RUNTIME_TYPE_NETCORE
             RegisterImmutableDirectory(GetVSInstallationDirectory());
@@ -156,9 +150,11 @@ static string GetVsRootFromMSBuildAssembly(string msBuildAssembly)
                 static string GetFolderAbove(string path, int count = 1)
                 {
                     if (count < 1)
+                    {
                         return path;
+                    }
 
-                    var parent = Directory.GetParent(path);
+                    DirectoryInfo? parent = Directory.GetParent(path);
 
                     while (count > 1 && parent?.Parent != null)
                     {
@@ -178,29 +174,14 @@ static string GetFolderAbove(string path, int count = 1)
         public static FileClassifier Shared => s_sharedInstance.Value;
 
         /// <summary>
-        ///     Try add paths found into set of known immutable paths.
-        ///     Project files under any of these folders are considered non-modifiable.
+        ///     Try add path into set of known immutable paths.
+        ///     Files under any of these folders are considered non-modifiable.
         /// </summary>
         /// <remarks>
         ///     This value is used by <see cref="IsNonModifiable" />.
         ///     Files in the NuGet package cache are not expected to change over time, once they are created.
         /// </remarks>
-        /// <remarks>
-        ///     Example value: <c>"C:\Users\myusername\.nuget\;D:\LocalNuGetCache\"</c>
-        /// </remarks>
-        public void RegisterImmutableDirectories(string? nuGetPackageFolders)
-        {
-            if (nuGetPackageFolders?.Length > 0)
-            {
-                string[] folders = nuGetPackageFolders.Split(s_semicolonDelimiter, StringSplitOptions.RemoveEmptyEntries);
-                foreach (string folder in folders)
-                {
-                    RegisterImmutableDirectory(folder);
-                }
-            }
-        }
-
-        private void RegisterImmutableDirectory(string? directory)
+        public void RegisterImmutableDirectory(string? directory)
         {
             if (directory?.Length > 0)
             {
@@ -240,7 +221,9 @@ public bool IsNonModifiable(string filePath)
             for (int i = 0; i < immutableDirectories.Count; i++)
             {
                 if (filePath.StartsWith(immutableDirectories[i], PathComparison))
+                {
                     return true;
+                }
             }
 
             return false;
