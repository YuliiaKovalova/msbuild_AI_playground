diff --git a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
index cdedaeeca88..eb5225d098d 100644
--- a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
+++ b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
@@ -17,6 +17,77 @@ public class RoslynCodeTaskFactory_Tests
     {
         private const string TaskName = "MyInlineTask";
 
+        [Fact]
+        public void RoslynCodeTaskFactory_ReuseCompilation()
+        {
+            string text1 = $@"
+<Project>
+
+  <UsingTask
+    TaskName=""Custom1""
+    TaskFactory=""RoslynCodeTaskFactory""
+    AssemblyFile=""$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"" >
+    <ParameterGroup>
+      <SayHi ParameterType=""System.String"" Required=""true"" />
+    </ParameterGroup>
+    <Task>
+      <Reference Include=""{typeof(Enumerable).Assembly.Location}"" />
+      <Code Type=""Fragment"" Language=""cs"">
+        Log.LogMessage(SayHi);
+      </Code>
+    </Task>
+  </UsingTask>
+
+    <Target Name=""Build"">
+        <MSBuild Projects=""p2.proj"" Targets=""Build"" />
+        <Custom1 SayHi=""hello1"" />
+        <Custom1 SayHi=""hello2"" />
+    </Target>
+
+</Project>";
+
+            var text2 = $@"
+<Project>
+
+  <UsingTask
+    TaskName=""Custom1""
+    TaskFactory=""RoslynCodeTaskFactory""
+    AssemblyFile=""$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll"" >
+    <ParameterGroup>
+      <SayHi ParameterType=""System.String"" Required=""true"" />
+    </ParameterGroup>
+    <Task>
+      <Reference Include=""{typeof(Enumerable).Assembly.Location}"" />
+      <Code Type=""Fragment"" Language=""cs"">
+        Log.LogMessage(SayHi);
+      </Code>
+    </Task>
+  </UsingTask>
+
+    <Target Name=""Build"">
+        <Custom1 SayHi=""hello1"" />
+        <Custom1 SayHi=""hello2"" />
+    </Target>
+
+</Project>";
+
+            using var env = TestEnvironment.Create();
+
+            var p2 = env.CreateTestProjectWithFiles("p2.proj", text2);
+            text1 = text1.Replace("p2.proj", p2.ProjectFile);
+            var p1 = env.CreateTestProjectWithFiles("p1.proj", text1);
+
+            var logger = p1.BuildProjectExpectSuccess();
+            var messages = logger
+                .BuildMessageEvents
+                .Where(m => m.Message == "Compiling task source code")
+                .ToArray();
+
+            // with broken cache we get two Compiling messages
+            // as we fail to reuse the first assembly
+            messages.Count().ShouldBe(1);
+        }
+
         [Fact]
         public void VisualBasicFragment()
         {
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryTaskInfo.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryTaskInfo.cs
index 90237fd0920..dcc9f893f81 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryTaskInfo.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryTaskInfo.cs
@@ -51,7 +51,7 @@ public bool Equals(RoslynCodeTaskFactoryTaskInfo other)
                 return true;
             }
 
-            return References.Equals(other.References) && String.Equals(SourceCode, other.SourceCode, StringComparison.OrdinalIgnoreCase);
+            return String.Equals(SourceCode, other.SourceCode, StringComparison.OrdinalIgnoreCase) && References.SetEquals(other.References);
         }
 
         public override bool Equals(object obj)
@@ -66,7 +66,8 @@ public override bool Equals(object obj)
 
         public override int GetHashCode()
         {
-            return 0;
+            // This is good enough to avoid most collisions, no need to hash References
+            return SourceCode.GetHashCode();
         }
     }
 }
