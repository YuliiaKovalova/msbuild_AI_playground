diff --git a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
index fe5a270f1a6..e7518c24872 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
@@ -3,6 +3,7 @@
 
 using Microsoft.Build.Construction;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Linq;
@@ -45,7 +46,8 @@ protected override void ApplyImpl(OrderedItemDataCollection.Builder listBuilder,
                     return;
                 }
 
-                if (_matchOnMetadata.IsEmpty)
+                bool matchingOnMetadata = !_matchOnMetadata.IsEmpty;
+                if (!matchingOnMetadata)
                 {
                     if (ItemspecContainsASingleBareItemReference(_itemSpec, _itemElement.ItemType))
                     {
@@ -56,25 +58,31 @@ protected override void ApplyImpl(OrderedItemDataCollection.Builder listBuilder,
                     }
 
                     // todo Perf: do not match against the globs: https://github.com/Microsoft/msbuild/issues/2329
-                    IList<string> matches = _itemSpec.IntersectsWith(listBuilder.Dictionary);
-                    listBuilder.RemoveAll(matches);
-                }
-                else
-                {
-                    HashSet<I> items = null;
-                    foreach (ItemData item in listBuilder)
+                    if (listBuilder.Count >= Traits.Instance.DictionaryBasedItemRemoveThreshold)
                     {
-                        if (MatchesItemOnMetadata(item.Item))
-                        {
-                            items ??= new HashSet<I>();
-                            items.Add(item.Item);
-                        }
+                        // Perf optimization: If the number of items in the running list is large, construct a dictionary,
+                        // enumerate all items referenced by the item spec, and perform dictionary look-ups to find items
+                        // to remove.
+                        IList<string> matches = _itemSpec.IntersectsWith(listBuilder.Dictionary);
+                        listBuilder.RemoveAll(matches);
+                        return;
                     }
-                    if (items != null)
+                }
+
+                HashSet<I> items = null;
+                foreach (ItemData item in listBuilder)
+                {
+                    bool isMatch = matchingOnMetadata ? MatchesItemOnMetadata(item.Item) : _itemSpec.MatchesItem(item.Item);
+                    if (isMatch)
                     {
-                        listBuilder.RemoveAll(items);
+                        items ??= new HashSet<I>();
+                        items.Add(item.Item);
                     }
                 }
+                if (items != null)
+                {
+                    listBuilder.RemoveAll(items);
+                }
             }
 
             private bool MatchesItemOnMetadata(I item)
diff --git a/src/Shared/Traits.cs b/src/Shared/Traits.cs
index 39fe9f7abb0..d1fc45ffe12 100644
--- a/src/Shared/Traits.cs
+++ b/src/Shared/Traits.cs
@@ -89,6 +89,11 @@ public Traits()
         /// </summary>
         public readonly int LogPropertyTracking = ParseIntFromEnvironmentVariableOrDefault("MsBuildLogPropertyTracking", 0); // Default to logging nothing via the property tracker.
 
+        /// <summary>
+        /// When evaluating items, this is the minimum number of items on the running list to use a dictionary-based remove optimization.
+        /// </summary>
+        public readonly int DictionaryBasedItemRemoveThreshold = ParseIntFromEnvironmentVariableOrDefault("MSBUILDDICTIONARYBASEDITEMREMOVETHRESHOLD", 100);
+
         public readonly bool DebugEngine = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildDebugEngine"));
         public readonly bool DebugScheduler;
         public readonly bool DebugNodeCommunication;
