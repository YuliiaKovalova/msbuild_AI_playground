diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index 8e82c543c32..117d3aa8a03 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -3,54 +3,63 @@
 
 using System;
 using System.Collections.Generic;
-using System.Diagnostics.Tracing;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BuildCheck.Acquisition;
-using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.BuildCheck.Logging;
 using Microsoft.Build.Framework;
 
-namespace Microsoft.Build.Experimental.BuildCheck;
-
-internal enum BuildCheckDataSource
+namespace Microsoft.Build.Experimental.BuildCheck
 {
-    EventArgs,
-    BuildExecution,
-    ValuesCount = BuildExecution + 1,
-}
+    /// <summary>
+    /// Enumerates the different data sources used in build check operations.
+    /// </summary>
+    internal enum BuildCheckDataSource
+    {
+        /// <summary>
+        /// The data source is based on event arguments.
+        /// </summary>
+        EventArgs,
 
-/// <summary>
-/// The central manager for the BuildCheck - this is the integration point with MSBuild infrastructure.
-/// </summary>
-internal interface IBuildCheckManager
-{
-    void ProcessEvaluationFinishedEventArgs(
-        AnalyzerLoggingContext buildAnalysisContext,
-        ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs);
+        /// <summary>
+        /// The data source is based on build execution.
+        /// </summary>
+        BuildExecution,
+
+        /// <summary>
+        /// Represents the total number of values in the enum, used for indexing purposes.
+        /// </summary>
+        ValuesCount = BuildExecution + 1,
+    }
+
+    /// <summary>
+    /// The central manager for the BuildCheck - this is the integration point with MSBuild infrastructure.
+    /// </summary>
+    internal interface IBuildCheckManager
+    {
+        void ProcessEvaluationFinishedEventArgs(
+            AnalyzerLoggingContext buildAnalysisContext,
+            ProjectEvaluationFinishedEventArgs projectEvaluationFinishedEventArgs);
 
-    void SetDataSource(BuildCheckDataSource buildCheckDataSource);
+        void SetDataSource(BuildCheckDataSource buildCheckDataSource);
 
-    void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData, BuildEventContext buildEventContext);
+        void ProcessAnalyzerAcquisition(AnalyzerAcquisitionData acquisitionData, BuildEventContext buildEventContext);
 
-    Dictionary<string, TimeSpan> CreateTracingStats();
+        Dictionary<string, TimeSpan> CreateTracingStats();
 
-    void FinalizeProcessing(LoggingContext loggingContext);
+        void FinalizeProcessing(LoggingContext loggingContext);
 
-    // All those to be called from RequestBuilder,
-    //  but as well from the ConnectorLogger - as even if interleaved, it gives the info
-    //  to manager about what analyzers need to be materialized and configuration fetched.
-    // No unloading of analyzers is yet considered - once loaded it stays for whole build.
-    void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext, string fullPath);
+        // All those to be called from RequestBuilder,
+        //  but as well from the ConnectorLogger - as even if interleaved, it gives the info
+        //  to manager about what analyzers need to be materialized and configuration fetched.
+        // No unloading of analyzers is yet considered - once loaded it stays for whole build.
+        void StartProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext, string fullPath);
 
-    void EndProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
+        void EndProjectEvaluation(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
 
-    void StartProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
+        void StartProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
 
-    void EndProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
+        void EndProjectRequest(BuildCheckDataSource buildCheckDataSource, BuildEventContext buildEventContext);
 
-    void Shutdown();
+        void Shutdown();
+    }
 }
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 354571bb26b..c5e4dedbb10 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -697,7 +697,6 @@
       <Link>SharedUtilities\XmlUtilities.cs</Link>
     </Compile>
     <Compile Include="Evaluation\LazyItemEvaluator.EvaluatorData.cs" />
-    <Content Include="stylecop.json" />
 
     <!-- Win32 RC Files -->
     <RCResourceFile Include="native.rc" />
diff --git a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
index a23089290be..307afe28c86 100644
--- a/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
+++ b/src/BuildCheck.UnitTests/BuildCheckManagerProviderTests.cs
@@ -19,21 +19,14 @@
 
 namespace Microsoft.Build.BuildCheck.UnitTests
 {
-    public class BuildCheckManagerTests : IDisposable
+    public class BuildCheckManagerTests
     {
-        private readonly TestEnvironment _env;
-
         private readonly IBuildCheckManager _testedInstance;
         private readonly ILoggingService _loggingService;
         private readonly MockLogger _logger;
 
         public BuildCheckManagerTests(ITestOutputHelper output)
         {
-            _env = TestEnvironment.Create(output);
-
-            // this is needed to ensure the binary logger does not pollute the environment
-            _env.WithEnvironmentInvariant();
-
             _loggingService = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             _logger = new MockLogger();
             _loggingService.RegisterLogger(_logger);
@@ -54,8 +47,6 @@ public void ProcessAnalyzerAcquisitionTest(bool isAnalyzerRuleExist, string expe
                 .ShouldContain(be => be.Message == expectedMessage);
         }
 
-        public void Dispose() => _env.Dispose();
-
         private void MockBuildCheckAcquisition(bool isAnalyzerRuleExist) => MockField("_acquisitionModule", new BuildCheckAcquisitionModuleMock(isAnalyzerRuleExist));
 
         private void MockEnabledDataSourcesDefinition() => MockField("_enabledDataSources", new[] { true, true });
