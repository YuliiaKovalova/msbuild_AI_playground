diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 378316a71ad..6186f2fda23 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1338,8 +1338,7 @@ void CollectTasksStats(TaskRegistry taskRegistry, ProjectBuildStats projectBuild
                     registeredTaskRecord.Statistics.Reset();
                 }
 
-                CollectTasksStats(taskRegistry.Toolset?._defaultTaskRegistry, projectBuildStats);
-                CollectTasksStats(taskRegistry.Toolset?._overrideTaskRegistry, projectBuildStats);
+                taskRegistry.Toolset?.InspectInternalTaskRegistry(tr => CollectTasksStats(tr, projectBuildStats));
             }
         }
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index 9206e489dc1..075946fbaa6 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -164,10 +164,6 @@ public async Task<BuildResult> BuildTargets(ProjectLoggingContext loggingContext
             // Now process the targets
             ITaskBuilder taskBuilder = _componentHost.GetComponent(BuildComponentType.TaskBuilder) as ITaskBuilder;
 
-            ////((TaskBuilder)taskBuilder).ShutdownComponent();
-            ////TaskExecutionHost te;
-            ////te.
-
             try
             {
                 await ProcessTargetStack(taskBuilder);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
index 2b93cbf75d7..c85b4f41f54 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
@@ -419,8 +419,6 @@ internal List<TargetSpecification> GetDependencies(ProjectLoggingContext project
         /// </summary>
         internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry requestEntry, ProjectLoggingContext projectLoggingContext, CancellationToken cancellationToken)
         {
-            // TODO: here for target stats
-
             try
             {
                 VerifyState(_state, TargetEntryState.Execution);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 7039f521a2b..5a97e87f857 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -428,7 +428,9 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
                     {
                         TaskLoggingContext taskLoggingContext = _targetLoggingContext.LogTaskBatchStarted(_projectFullPath, _targetChildInstance, taskAssemblyLocation);
                         MSBuildEventSource.Log.ExecuteTaskStart(_taskNode?.Name, taskLoggingContext.BuildEventContext.TaskId);
+                        // Can be condition with _componentHost.BuildParameters.IsTelemetryEnabled) - but it's a cheap call
                         taskFactoryWrapper?.Statistics?.ExecutionStarted();
+
                         _buildRequestEntry.Request.CurrentTaskContext = taskLoggingContext.BuildEventContext;
 
                         try
diff --git a/src/Build/Definition/Toolset.cs b/src/Build/Definition/Toolset.cs
index 7eea1591f02..bd84fed6708 100644
--- a/src/Build/Definition/Toolset.cs
+++ b/src/Build/Definition/Toolset.cs
@@ -163,12 +163,12 @@ public class Toolset : ITranslatable
         /// <summary>
         /// holds all the default tasks we know about and the assemblies they exist in
         /// </summary>
-        internal TaskRegistry _defaultTaskRegistry;
+        private TaskRegistry _defaultTaskRegistry;
 
         /// <summary>
         /// holds all the override tasks we know about and the assemblies they exist in
         /// </summary>
-        internal TaskRegistry _overrideTaskRegistry;
+        private TaskRegistry _overrideTaskRegistry;
 
         /// <summary>
         /// Delegate to retrieving files.  For unit testing only.
@@ -365,6 +365,15 @@ private Toolset(ITranslator translator)
             ((ITranslatable)this).Translate(translator);
         }
 
+        /// <summary>
+        /// Helper for inspecting internal task registries that might or might not be initialized at this point.
+        /// </summary>
+        internal void InspectInternalTaskRegistry(Action<TaskRegistry> visitor)
+        {
+            visitor(_defaultTaskRegistry);
+            visitor(_overrideTaskRegistry);
+        }
+
         /// <summary>
         /// Returns a ProjectImportPathMatch struct for the first property found in the expression for which
         /// project import search paths is enabled.
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index c9e0fef5aba..d65389ebf25 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -9,7 +9,6 @@
 using System.IO;
 using System.Linq;
 using System.Reflection;
-using System.Reflection.Metadata;
 using System.Threading;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Components.RequestBuilder;
@@ -443,13 +442,6 @@ private static void RegisterTasksFromUsingTaskElement
                 taskFactoryParameters.Add(XMakeAttributes.architecture, architecture == String.Empty ? XMakeAttributes.MSBuildArchitectureValues.any : architecture);
             }
 
-            bool isCustomTask =
-                ((!string.IsNullOrEmpty(taskFactory)) ||
-                (!string.IsNullOrEmpty(assemblyName) && !AssemblyLoadsTracker.IsBuiltinType(assemblyName)) ||
-                (!string.IsNullOrEmpty(assemblyFile) && !AssemblyLoadsTracker.IsBuiltinType(Path.GetFileName(assemblyFile)) && !FileClassifier.Shared.IsBuiltInLogic(assemblyFile)))
-                // and let's consider all tasks imported by common targets as non custom logic.
-                && !FileClassifier.Shared.IsBuiltInLogic(projectUsingTaskXml.ContainingProject.FullPath);
-
             taskRegistry.RegisterTask(
                 taskName,
                 AssemblyLoadInfo.Create(assemblyName, assemblyFile),
@@ -458,8 +450,7 @@ private static void RegisterTasksFromUsingTaskElement
                 parameterGroupAndTaskElementRecord,
                 loggingContext,
                 projectUsingTaskXml,
-                ConversionUtilities.ValidBooleanTrue(overrideUsingTask),
-                projectUsingTaskXml.ContainingProject.FullPath);
+                ConversionUtilities.ValidBooleanTrue(overrideUsingTask));
         }
 
         private static Dictionary<string, string> CreateTaskFactoryParametersDictionary(int? initialCount = null)
@@ -704,8 +695,7 @@ private void RegisterTask(
             RegisteredTaskRecord.ParameterGroupAndTaskElementRecord inlineTaskRecord,
             LoggingContext loggingContext,
             ProjectUsingTaskElement projectUsingTaskInXml,
-            bool overrideTask,
-            string containingFileFullPath)
+            bool overrideTask)
         {
             ErrorUtilities.VerifyThrowInternalLength(taskName, nameof(taskName));
             ErrorUtilities.VerifyThrowInternalNull(assemblyLoadInfo);
@@ -733,7 +723,7 @@ private void RegisterTask(
                 taskFactoryParameters,
                 inlineTaskRecord,
                 Interlocked.Increment(ref _nextRegistrationOrderId),
-                containingFileFullPath);
+                projectUsingTaskInXml.ContainingProject.FullPath);
 
             if (overrideTask)
             {
@@ -1178,28 +1168,22 @@ internal class RegisteredTaskRecord : ITranslatable
             /// </summary>
             private int _registrationOrderId;
 
-            internal Stats Statistics { get; private init; } = new Stats();
-
-            public bool GetIsCustom()
-            {
-                return
-                (
-                    // TODO: some taskfactories are used within our common targets - but we should flag it somehow as well
-                    (!string.IsNullOrEmpty(_taskFactory)) ||
+            /// <summary>
+            /// Full path to the file that contains definition of this task.
+            /// </summary>
+            private string _definingFileFullPath;
 
-                 (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyName) && !AssemblyLoadsTracker.IsBuiltinType(_taskFactoryAssemblyLoadInfo.AssemblyName)) ||
-                 (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyFile) && !AssemblyLoadsTracker.IsBuiltinType(Path.GetFileName(_taskFactoryAssemblyLoadInfo.AssemblyFile)) && !FileClassifier.Shared.IsBuiltInLogic(_taskFactoryAssemblyLoadInfo.AssemblyFile)))
-                    // and let's consider all tasks imported by common targets as non custom logic.
-                    && !FileClassifier.Shared.IsBuiltInLogic(Statistics?.ContainingFileFullPath);
-            }
+            /// <summary>
+            /// Execution statistics for the tasks.
+            /// Not translatable - the statistics are anyway expected to be reset after each project request.
+            /// </summary>
+            internal Stats Statistics { get; private init; } = new Stats();
 
-            internal class Stats
+            internal struct Stats()
             {
-                public short ExecutedCount { get; private set; }
+                public short ExecutedCount { get; private set; } = 0;
                 private readonly Stopwatch _executedSw  = new Stopwatch();
 
-                public string ContainingFileFullPath { get; set; }
-
                 public TimeSpan ExecutedTime => _executedSw.Elapsed;
 
                 public void ExecutionStarted()
@@ -1259,13 +1243,28 @@ internal RegisteredTaskRecord(
                     _parameterGroupAndTaskBody = new ParameterGroupAndTaskElementRecord();
                 }
 
-                Statistics.ContainingFileFullPath = containingFileFullPath;
+                _definingFileFullPath = containingFileFullPath;
             }
 
             private RegisteredTaskRecord()
             {
             }
 
+            public bool GetIsCustom()
+            {
+                return
+                    (
+                        // Some taskfactories are used within our common targets - but we should flag it somehow as well
+                        (!string.IsNullOrEmpty(_taskFactory)) ||
+                        (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyName) &&
+                         !AssemblyLoadsTracker.IsBuiltinType(_taskFactoryAssemblyLoadInfo.AssemblyName)) ||
+                        (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyFile) &&
+                         !AssemblyLoadsTracker.IsBuiltinType(Path.GetFileName(_taskFactoryAssemblyLoadInfo.AssemblyFile)) &&
+                         !FileClassifier.Shared.IsBuiltInLogic(_taskFactoryAssemblyLoadInfo.AssemblyFile)))
+                    // and let's consider all tasks imported by common targets as non custom logic.
+                    && !FileClassifier.Shared.IsBuiltInLogic(_definingFileFullPath);
+            }
+
             /// <summary>
             /// Gets the task name this record was registered with.
             /// </summary>
@@ -1886,6 +1885,7 @@ public void Translate(ITranslator translator)
                 translator.Translate(ref _taskFactory);
                 translator.Translate(ref _parameterGroupAndTaskBody);
                 translator.Translate(ref _registrationOrderId);
+                translator.Translate(ref _definingFileFullPath);
 
                 IDictionary<string, string> localParameters = _taskFactoryParameters;
                 translator.TranslateDictionary(ref localParameters, count => CreateTaskFactoryParametersDictionary(count));
diff --git a/src/Framework/FileClassifier.cs b/src/Framework/FileClassifier.cs
index 3a8414808d9..dfd360b726a 100644
--- a/src/Framework/FileClassifier.cs
+++ b/src/Framework/FileClassifier.cs
@@ -5,10 +5,10 @@
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using System.Runtime.InteropServices;
 #if !RUNTIME_TYPE_NETCORE
 using System.Diagnostics;
-using System.Linq;
 using System.Text.RegularExpressions;
 #endif
 
@@ -219,14 +219,11 @@ private protected void RegisterImmutableDirectory(string? directory, bool isCust
                 {
                     _knownImmutableDirectoriesSnapshot = new List<string>(_knownImmutableDirectories.Values);
 
-                    // Add the location to the build in logic locations
-                    // TODO: add more readable way
+                    // Add the location to the build in logic locations - but create a new readonly destination
                     if (!isCustomLogicLocation)
                     {
-                        string[] tmp = new string[_knownBuiltInLogicDirectoriesSnapshot.Count + 1];
-                        Array.Copy((string[])_knownBuiltInLogicDirectoriesSnapshot, tmp, tmp.Length - 1);
-                        tmp[tmp.Length - 1] = directory;
-                        _knownBuiltInLogicDirectoriesSnapshot = tmp;
+                        _knownBuiltInLogicDirectoriesSnapshot =
+                            _knownBuiltInLogicDirectoriesSnapshot.Append(d).ToArray();
                     }
                 }
             }
