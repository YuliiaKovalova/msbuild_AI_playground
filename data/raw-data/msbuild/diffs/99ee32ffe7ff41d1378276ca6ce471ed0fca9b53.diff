diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index 7b6d8bd1110..e829d9f4384 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -662,7 +662,7 @@ public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, CheckLoggingC
         public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, CheckLoggingContext checkContext)
         { /* Ignore the data */ }
 
-        public void StartProjectEvaluation(ICheckContext analysisContext, string projectFullPath)
+        public void ProcessProjectEvaluationStarted(ICheckContext analysisContext, string projectFullPath)
         { /* Ignore the data */ }
     }
 }
diff --git a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
index 2a2baa83d38..15f4387218a 100644
--- a/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/EvaluationLoggingContext.cs
@@ -31,7 +31,7 @@ public EvaluationLoggingContext(ILoggingService loggingService, BuildEventContex
         public void LogProjectEvaluationStarted()
         {
             LoggingService.LogProjectEvaluationStarted(BuildEventContext, _projectFile);
-            LoggingService.BuildEngineDataRouter.StartProjectEvaluation(
+            LoggingService.BuildEngineDataRouter.ProcessProjectEvaluationStarted(
                 new CheckLoggingContext(LoggingService, BuildEventContext), _projectFile);
         }
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index 15cd5fd0515..40762761917 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -804,7 +804,7 @@ public void ProcessPropertyRead(PropertyReadInfo propertyReadInfo, CheckLoggingC
         public void ProcessPropertyWrite(PropertyWriteInfo propertyWriteInfo, CheckLoggingContext checkContext)
             => BuildCheckManagerProvider.GlobalBuildEngineDataRouter?.ProcessPropertyWrite(propertyWriteInfo, checkContext);
 
-        public void StartProjectEvaluation(ICheckContext checkContext, string projectFullPath)
-            => BuildCheckManagerProvider.GlobalBuildEngineDataRouter?.StartProjectEvaluation(checkContext, projectFullPath);
+        public void ProcessProjectEvaluationStarted(ICheckContext checkContext, string projectFullPath)
+            => BuildCheckManagerProvider.GlobalBuildEngineDataRouter?.ProcessProjectEvaluationStarted(checkContext, projectFullPath);
     }
 }
diff --git a/src/Build/BuildCheck/API/IInternalBuildCheckRegistrationContext.cs b/src/Build/BuildCheck/API/IInternalCheckRegistrationContext.cs
similarity index 75%
rename from src/Build/BuildCheck/API/IInternalBuildCheckRegistrationContext.cs
rename to src/Build/BuildCheck/API/IInternalCheckRegistrationContext.cs
index 0ca6d25579b..2f8875fb62a 100644
--- a/src/Build/BuildCheck/API/IInternalBuildCheckRegistrationContext.cs
+++ b/src/Build/BuildCheck/API/IInternalCheckRegistrationContext.cs
@@ -1,9 +1,8 @@
 ï»¿using System;
-using Microsoft.Build.Experimental.BuildCheck;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Checks;
 
-internal interface IInternalBuildCheckRegistrationContext : IBuildCheckRegistrationContext
+internal interface IInternalCheckRegistrationContext : IBuildCheckRegistrationContext
 {
     void RegisterPropertyReadAction(Action<BuildCheckDataContext<PropertyReadData>> propertyReadAction);
 
diff --git a/src/Build/BuildCheck/API/InternalCheck.cs b/src/Build/BuildCheck/API/InternalCheck.cs
index 15f7f61dd1c..58e71338e93 100644
--- a/src/Build/BuildCheck/API/InternalCheck.cs
+++ b/src/Build/BuildCheck/API/InternalCheck.cs
@@ -6,10 +6,11 @@ namespace Microsoft.Build.Experimental.BuildCheck.Checks;
 internal abstract class InternalCheck : Check
 {
     /// <summary>
-    /// 
+    /// Used by the implementors to subscribe to data and events they are interested in.
+    /// This offers superset of registrations options to <see cref="Check.RegisterActions"/>.
     /// </summary>
     /// <param name="registrationContext"></param>
-    public abstract void RegisterInternalActions(IInternalBuildCheckRegistrationContext registrationContext);
+    public abstract void RegisterInternalActions(IInternalCheckRegistrationContext registrationContext);
 
     /// <summary>
     /// This is intentionally not implemented, as it is extended by <see cref="RegisterInternalActions"/>.
@@ -17,7 +18,7 @@ internal abstract class InternalCheck : Check
     /// <param name="registrationContext"></param>
     public override void RegisterActions(IBuildCheckRegistrationContext registrationContext)
     {
-        if (registrationContext is not IInternalBuildCheckRegistrationContext internalRegistrationContext)
+        if (registrationContext is not IInternalCheckRegistrationContext internalRegistrationContext)
         {
             throw new ArgumentException("The registration context for InternalBuildAnalyzer must be of type IInternalBuildCheckRegistrationContext.", nameof(registrationContext));
         }
diff --git a/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs b/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs
index c3f8029df61..5af02c861ee 100644
--- a/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs
+++ b/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs
@@ -103,7 +103,7 @@ public override void Initialize(ConfigurationContext configurationContext)
         return null;
     }
 
-    public override void RegisterInternalActions(IInternalBuildCheckRegistrationContext registrationContext)
+    public override void RegisterInternalActions(IInternalCheckRegistrationContext registrationContext)
     {
         registrationContext.RegisterPropertyReadAction(ProcessPropertyRead);
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
index 82f9ec15253..419ca2c9f26 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
@@ -92,7 +92,7 @@ private void HandleProjectEvaluationStartedEvent(ProjectEvaluationStartedEventAr
                 BuildCheckDataSource.EventArgs,
                 checkContext,
                 eventArgs.ProjectFile!);
-            _buildCheckManager.StartProjectEvaluation(
+            _buildCheckManager.ProcessProjectEvaluationStarted(
                 checkContext,
                 eventArgs.ProjectFile!);
         }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 18fb36db92c..7f76541d134 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -260,7 +260,7 @@ private void SetupSingleCheck(CheckFactoryContext checkFactoryContext, string pr
 
                 // Create the wrapper and register to central context
                 wrapper.StartNewProject(projectFullPath, configurations);
-                var wrappedContext = new BuildCheckRegistrationContext(wrapper, _buildCheckCentralContext);
+                var wrappedContext = new CheckRegistrationContext(wrapper, _buildCheckCentralContext);
                 check.RegisterActions(wrappedContext);
             }
             else
@@ -481,7 +481,7 @@ public void ProjectFirstEncountered(
             SetupChecksForNewProject(projectFullPath, checkContext);
         }
 
-        public void StartProjectEvaluation(
+        public void ProcessProjectEvaluationStarted(
             ICheckContext checkContext,
             string projectFullPath)
         {
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs b/src/Build/BuildCheck/Infrastructure/CheckRegistrationContext.cs
similarity index 91%
rename from src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
rename to src/Build/BuildCheck/Infrastructure/CheckRegistrationContext.cs
index eadd39ab712..33fb7e09ff3 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckRegistrationContext.cs
@@ -8,7 +8,7 @@
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
-internal sealed class BuildCheckRegistrationContext(CheckWrapper checkWrapper, BuildCheckCentralContext buildCheckCentralContext) : IInternalBuildCheckRegistrationContext
+internal sealed class CheckRegistrationContext(CheckWrapper checkWrapper, BuildCheckCentralContext buildCheckCentralContext) : IInternalCheckRegistrationContext
 {
     public void RegisterEvaluatedPropertiesAction(Action<BuildCheckDataContext<EvaluatedPropertiesCheckData>> evaluatedPropertiesAction)
     {
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
index 9472501e57a..88c644954e7 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManager.cs
@@ -75,7 +75,7 @@ void ProcessTaskParameterEventArgs(
     //  - but we still need to know about it, hence the dedicated event.
     void ProjectFirstEncountered(BuildCheckDataSource buildCheckDataSource, ICheckContext analysisContext, string projectFullPath);
 
-    void StartProjectEvaluation(ICheckContext checksContext, string projectFullPath);
+    void ProcessProjectEvaluationStarted(ICheckContext checksContext, string projectFullPath);
 
     void EndProjectEvaluation(BuildEventContext buildEventContext);
 
diff --git a/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs b/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs
index e426130f703..6d94625052c 100644
--- a/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs
+++ b/src/Build/BuildCheck/Infrastructure/InternalOM/IBuildEngineDataRouter.cs
@@ -28,5 +28,5 @@ void ProcessPropertyWrite(
     /// </summary>
     /// <param name="checkContext"></param>
     /// <param name="projectFullPath"></param>
-    void StartProjectEvaluation(ICheckContext checkContext, string projectFullPath);
+    void ProcessProjectEvaluationStarted(ICheckContext checkContext, string projectFullPath);
 }
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
index 4b18a3d0eef..a5bf0b968a8 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManager.cs
@@ -63,7 +63,7 @@ public void ProjectFirstEncountered(BuildCheckDataSource buildCheckDataSource, I
     {
     }
 
-    public void StartProjectEvaluation(ICheckContext checkContext, string fullPath)
+    public void ProcessProjectEvaluationStarted(ICheckContext checkContext, string projectFullPath)
     {
     }
 
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 52b9731359e..2ccc4a88c32 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -45,31 +45,20 @@ public void PropertiesUsageAnalyzerTest()
         string contents = """
                               <Project DefaultTargets="PrintEnvVar">
 
-                              <PropertyGroup>
-                              <!--
-                              <MyProp1>value-of-prop1</MyProp1>
-                              <MyProp2>$(MyProp1)</MyProp2>
-                              <MyProp3>blah</MyProp3>
-                              -->
+                              <!-- MyProp4 is not defined - but it's checked against empty - which is allowed -->
+                              <PropertyGroup Condition="'$(MyProp4)' == ''">
+                                <!-- MyProp3 defined here - but not used anywhere -->
+                                <!-- MyProp1 used here - but not defined -->
+                                <MyProp3>$(MyProp1)</MyProp3>
                               </PropertyGroup>
 
 
-                              <PropertyGroup Condition="'$(MyProp12)' == ''">
-                                <MyProp13>$(MyProp11)</MyProp13>
-                              </PropertyGroup>
-
-
-                              <!--
-                              <ItemGroup>
-                                <a Include="$(nonexistent)" />
-                              </ItemGroup>
-                              -->
-
                               <Target Name="PrintEnvVar">
-                              <Message Text="MyPropT2 has value $(MyPropT2)" Importance="High" Condition="'$(MyPropT2)' == ''" />
-                              <PropertyGroup>
-                              <MyPropT2>$(MyPropT2);xxx</MyPropT2>
-                              </PropertyGroup>
+                                  <!-- MyProp2 used here - but defined later -->
+                                  <Message Text="MyProp2 has value $(MyProp2)" Importance="High" Condition="'$(MyProp2)' == ''" />
+                                  <PropertyGroup>
+                                    <MyProp2>$(MyProp2);xxx</MyProp2>
+                                  </PropertyGroup>
                               </Target>
 
                               </Project>
@@ -82,10 +71,10 @@ public void PropertiesUsageAnalyzerTest()
         _env.Output.WriteLine("=========================");
         success.ShouldBeTrue(output);
 
-        output.ShouldMatch(@"BC0201: .* Property: \[MyProp11\]");
-        output.ShouldMatch(@"BC0202: .* Property: \[MyPropT2\]");
+        output.ShouldMatch(@"BC0201: .* Property: \[MyProp1\]");
+        output.ShouldMatch(@"BC0202: .* Property: \[MyProp2\]");
         // since it's just suggestion, it doesn't have a colon ':'
-        output.ShouldMatch(@"BC0203 .* Property: \[MyProp13\]");
+        output.ShouldMatch(@"BC0203 .* Property: \[MyProp3\]");
 
         // each finding should be found just once - but reported twice, due to summary
         Regex.Matches(output, "BC0201: .* Property").Count.ShouldBe(2);
