diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index c94de3e3688..036bd6a7ea8 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -745,6 +745,7 @@ public Hash() { }
         [Microsoft.Build.Framework.OutputAttribute]
         public string HashResult { get { throw null; } set { } }
         public bool IgnoreCase { get { throw null; } set { } }
+        public bool IgnoreOrder { get { throw null; } set { } }
         [Microsoft.Build.Framework.RequiredAttribute]
         public Microsoft.Build.Framework.ITaskItem[] ItemsToHash { get { throw null; } set { } }
         public override bool Execute() { throw null; }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 27ba53105be..ec5d7226fbf 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -577,6 +577,7 @@ public Hash() { }
         [Microsoft.Build.Framework.OutputAttribute]
         public string HashResult { get { throw null; } set { } }
         public bool IgnoreCase { get { throw null; } set { } }
+        public bool IgnoreOrder { get { throw null; } set { } }
         [Microsoft.Build.Framework.RequiredAttribute]
         public Microsoft.Build.Framework.ITaskItem[] ItemsToHash { get { throw null; } set { } }
         public override bool Execute() { throw null; }
diff --git a/src/Tasks.UnitTests/Hash_Tests.cs b/src/Tasks.UnitTests/Hash_Tests.cs
index e2b64378d47..50bb37ff4f7 100644
--- a/src/Tasks.UnitTests/Hash_Tests.cs
+++ b/src/Tasks.UnitTests/Hash_Tests.cs
@@ -43,6 +43,113 @@ public void HashTaskEmptyInputTest()
             Assert.Null(zeroLengthItemsHash);
         }
 
+        [Fact]
+        public void HashTaskIgnoreOrderTest()
+        {
+            var variant1 =
+                ExecuteHashTask(new ITaskItem[]
+                    {
+                        new TaskItem("item1"),
+                        new TaskItem("item2"),
+                        new TaskItem("item3")
+                    },
+                    ignoreOrder: true);
+            var variant2 =
+                ExecuteHashTask(new ITaskItem[]
+                    {
+                        new TaskItem("item2"),
+                        new TaskItem("item1"),
+                        new TaskItem("item3")
+                    },
+                    ignoreOrder: true);
+            var variant3 =
+                ExecuteHashTask(new ITaskItem[]
+                    {
+                        new TaskItem("item1"),
+                        new TaskItem("item3"),
+                        new TaskItem("item2")
+                    },
+                    ignoreOrder: true);
+            Assert.Equal(variant1, variant3);
+            Assert.Equal(variant1, variant2);
+            Assert.Equal(variant2, variant3);
+        }
+
+        [Fact]
+        public void HashTaskIgnoreOrderNegativeTest()
+        {
+            var variant1 =
+                ExecuteHashTask(new ITaskItem[]
+                    {
+                        new TaskItem("item1"),
+                        new TaskItem("item2"),
+                        new TaskItem("item3")
+                    });
+            var variant2 =
+                ExecuteHashTask(new ITaskItem[]
+                    {
+                        new TaskItem("item2"),
+                        new TaskItem("item1"),
+                        new TaskItem("item3")
+                    });
+            Assert.NotEqual(variant1, variant2);
+        }
+
+        [Fact]
+        public void HashTaskIgnoreCaseNegativeTest()
+        {
+            var uppercaseHash =
+                ExecuteHashTask(new ITaskItem[]
+                    {
+                        new TaskItem("ITEM1"),
+                        new TaskItem("ITEM2"),
+                        new TaskItem("ITEM3")
+                    });
+            var mixedcaseHash =
+                ExecuteHashTask(new ITaskItem[]
+                    {
+                        new TaskItem("Item1"),
+                        new TaskItem("iTEm2"),
+                        new TaskItem("iteM3")
+                    });
+            Assert.NotEqual(uppercaseHash, mixedcaseHash);
+        }
+
+        [Fact]
+        public void HashTaskIgnoreOrderIgnoreCaseTest()
+        {
+            var variant1 =
+                ExecuteHashTask(new ITaskItem[]
+                    {
+                        new TaskItem("ITEM1"),
+                        new TaskItem("ITEM2"),
+                        new TaskItem("ITEM3")
+                    },
+                    ignoreCase: true,
+                    ignoreOrder: true);
+            var variant2 =
+                ExecuteHashTask(new ITaskItem[]
+                    {
+                        new TaskItem("iTEm2"),
+                        new TaskItem("Item1"),
+                        new TaskItem("iteM3")
+                    },
+                    ignoreCase: true,
+                    ignoreOrder: true);
+            var variant3 =
+                ExecuteHashTask(new ITaskItem[]
+                    {
+                        new TaskItem("item1"),
+                        new TaskItem("item3"),
+                        new TaskItem("item2")
+                    },
+                    ignoreCase: true,
+                    ignoreOrder: true);
+            Assert.Equal(variant1, variant3);
+            Assert.Equal(variant1, variant2);
+            Assert.Equal(variant2, variant3);
+        }
+
         [Fact]
         public void HashTaskIgnoreCaseTest()
         {
@@ -53,7 +160,7 @@ public void HashTaskIgnoreCaseTest()
                         new TaskItem("ITEM2"),
                         new TaskItem("ITEM3")
                     },
-                    true);
+                    ignoreCase: true);
             var mixedcaseHash =
                 ExecuteHashTask(new ITaskItem[]
                     {
@@ -61,7 +168,7 @@ public void HashTaskIgnoreCaseTest()
                         new TaskItem("iTEm2"),
                         new TaskItem("iteM3")
                     },
-                    true);
+                    ignoreCase: true);
             var lowercaseHash =
                 ExecuteHashTask(new ITaskItem[]
                     {
@@ -69,19 +176,20 @@ public void HashTaskIgnoreCaseTest()
                         new TaskItem("item2"),
                         new TaskItem("item3")
                     },
-                    true);
+                    ignoreCase: true);
             Assert.Equal(uppercaseHash, lowercaseHash);
             Assert.Equal(uppercaseHash, mixedcaseHash);
             Assert.Equal(mixedcaseHash, lowercaseHash);
         }
 
-        private string ExecuteHashTask(ITaskItem[] items, bool ignoreCase = false)
+        private string ExecuteHashTask(ITaskItem[] items, bool ignoreCase = false, bool ignoreOrder = false)
         {
             var hashTask = new Hash
             {
                 BuildEngine = new MockEngine(),
                 ItemsToHash = items,
-                IgnoreCase = ignoreCase
+                IgnoreCase = ignoreCase,
+                IgnoreOrder = ignoreOrder
             };
 
             Assert.True(hashTask.Execute());
diff --git a/src/Tasks/Hash.cs b/src/Tasks/Hash.cs
index c822fa90f90..09ec2ceb4bc 100644
--- a/src/Tasks/Hash.cs
+++ b/src/Tasks/Hash.cs
@@ -2,6 +2,8 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Collections.Generic;
+using System.Linq;
 using System.Security.Cryptography;
 using System.Text;
 using Microsoft.Build.Framework;
@@ -31,6 +33,14 @@ public class Hash : TaskExtension
         /// </summary>
         public bool IgnoreCase { get; set; }
 
+        /// <summary>
+        /// When true, will generate a hash that does not depend on the order of the items.
+        /// </summary>
+        /// <remarks>
+        /// When true, the items are sorted first using their Identity
+        /// </remarks>
+        public bool IgnoreOrder { get; set; }
+
         /// <summary>
         /// Hash of the ItemsToHash ItemSpec.
         /// </summary>
@@ -52,7 +62,12 @@ public override bool Execute()
 
                     using (var stringBuilder = new ReuseableStringBuilder(Math.Max(concatenatedItemStringSize, hashStringSize)))
                     {
-                        foreach (var item in ItemsToHash)
+                        IEnumerable<ITaskItem> items = ItemsToHash;
+                        if (IgnoreOrder)
+                        {
+                            items = items.OrderBy(o => o.ItemSpec, IgnoreCase ? StringComparer.OrdinalIgnoreCase : StringComparer.Ordinal);
+                        }
+                        foreach (var item in items)
                         {
                             string itemSpec = item.ItemSpec;
                             stringBuilder.Append(IgnoreCase ? itemSpec.ToUpperInvariant() : itemSpec);
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index c87052240f9..37f9e0e605b 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -3537,6 +3537,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
     <Hash
       ItemsToHash="@(CoreCompileCache)"
+      IgnoreOrder="$([MSBuild]::ValueOrDefault(`$(CoreCompileCacheIgnoreOrder)`, `false`))"
       IgnoreCase="$([MSBuild]::ValueOrDefault(`$(CoreCompileCacheIgnoreCase)`, `true`))">
       <Output TaskParameter="HashResult" PropertyName="CoreCompileDependencyHash" />
     </Hash>
