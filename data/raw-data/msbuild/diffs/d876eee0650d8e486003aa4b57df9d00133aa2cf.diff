diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
index 61770c39641..6840c267f7a 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
@@ -96,7 +96,7 @@ public void ValidateSerializationAndDeserialization()
                         Assembly = null,
                         RuntimeVersion = "v4.0.30319",
                         FrameworkNameAttribute = new FrameworkName(".NETFramework", Version.Parse("4.7.2"), "Profile"),
-                        scatterFiles = new string[] { "first", "second" } } } };
+                        ScatterFiles = new string[] { "first", "second" } } } };
             ResolveAssemblyReferenceCache rarCache = new();
             rarCache.instanceLocalFileStateCache = cache;
             ResolveAssemblyReferenceCache rarCache2 = null;
@@ -116,8 +116,8 @@ public void ValidateSerializationAndDeserialization()
             dll2.FrameworkNameAttribute.FullName.ShouldBe(dll.FrameworkNameAttribute.FullName);
             dll2.LastModified.ShouldBe(dll.LastModified);
             dll2.RuntimeVersion.ShouldBe(dll.RuntimeVersion);
-            dll2.scatterFiles.Length.ShouldBe(dll.scatterFiles.Length);
-            dll2.scatterFiles[1].ShouldBe(dll.scatterFiles[1]);
+            dll2.ScatterFiles.Length.ShouldBe(dll.ScatterFiles.Length);
+            dll2.ScatterFiles[1].ShouldBe(dll.ScatterFiles[1]);
         }
     }
 }
diff --git a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
index 5ee15dd3f9c..47943ab6ca8 100644
--- a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
+++ b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
@@ -31,7 +31,7 @@ public void TestPrecomputedCacheOutput()
                     { Path.Combine(standardCache.Path, "assembly2"), new ResolveAssemblyReferenceCache.FileState(DateTime.Now) { Assembly = new Shared.AssemblyNameExtension("hi") } } };
                 t._cache.IsDirty = true;
                 t.StateFile = standardCache.Path;
-                t.WriteStateFile();
+                t.WriteStateFile(p => DateTime.Now);
                 int standardLen = File.ReadAllText(standardCache.Path).Length;
                 File.Delete(standardCache.Path);
                 standardLen.ShouldBeGreaterThan(0);
@@ -39,7 +39,7 @@ public void TestPrecomputedCacheOutput()
                 string precomputedPath = standardCache.Path + ".cache";
                 t._cache.IsDirty = true;
                 t.AssemblyInformationCacheOutputPath = precomputedPath;
-                t.WriteStateFile();
+                t.WriteStateFile(p => DateTime.Now);
                 File.Exists(standardCache.Path).ShouldBeFalse();
                 int preLen = File.ReadAllText(precomputedPath).Length;
                 preLen.ShouldBeGreaterThan(0);
@@ -61,7 +61,7 @@ public void StandardCacheTakesPrecedence()
                 rarWriterTask.StateFile = standardCache.Path;
                 rarWriterTask._cache.IsDirty = true;
                 // Write standard cache
-                rarWriterTask.WriteStateFile();
+                rarWriterTask.WriteStateFile(p => DateTime.Now);
 
                 string dllName = Path.Combine(Path.GetDirectoryName(standardCache.Path), "randomFolder", "dll.dll");
                 rarWriterTask._cache.instanceLocalFileStateCache.Add(dllName,
@@ -70,13 +70,13 @@ public void StandardCacheTakesPrecedence()
                         Assembly = null,
                         RuntimeVersion = "v4.0.30319",
                         FrameworkNameAttribute = new System.Runtime.Versioning.FrameworkName(".NETFramework", Version.Parse("4.7.2"), "Profile"),
-                        scatterFiles = new string[] { "first", "second" }
+                        ScatterFiles = new string[] { "first", "second" }
                     });
                 string precomputedCachePath = standardCache.Path + ".cache";
                 rarWriterTask.AssemblyInformationCacheOutputPath = precomputedCachePath;
                 rarWriterTask._cache.IsDirty = true;
                 // Write precomputed cache
-                rarWriterTask.WriteStateFile();
+                rarWriterTask.WriteStateFile(p => DateTime.Now);
 
                 ResolveAssemblyReference rarReaderTask = new ResolveAssemblyReference();
                 rarReaderTask.StateFile = standardCache.Path;
@@ -89,7 +89,7 @@ public void StandardCacheTakesPrecedence()
                 // When we read the state file, it should read from the caches produced in a normal build. In this case,
                 // the normal cache does not have dll.dll, whereas the precomputed cache does, so it should not be
                 // present when we read it.
-                rarReaderTask.ReadStateFile(p => true);
+                rarReaderTask.ReadStateFile(p => true, p => DateTime.Now);
                 rarReaderTask._cache.instanceLocalFileStateCache.ShouldNotContainKey(dllName);
             }
         }
@@ -112,15 +112,15 @@ public void TestPreComputedCacheInputMatchesOutput()
                         Assembly = null,
                         RuntimeVersion = "v4.0.30319",
                         FrameworkNameAttribute = new System.Runtime.Versioning.FrameworkName(".NETFramework", Version.Parse("4.7.2"), "Profile"),
-                        scatterFiles = new string[] { "first", "second" } } } };
+                        ScatterFiles = new string[] { "first", "second" } } } };
 
                 rarWriterTask.AssemblyInformationCacheOutputPath = precomputedCache.Path;
                 rarWriterTask._cache.IsDirty = true;
 
                 // Throws an exception because precomputedCache.Path already exists.
-                Should.Throw<InvalidOperationException>(() => rarWriterTask.WriteStateFile());
+                Should.Throw<InvalidOperationException>(() => rarWriterTask.WriteStateFile(p => DateTime.Now));
                 File.Delete(precomputedCache.Path);
-                rarWriterTask.WriteStateFile();
+                rarWriterTask.WriteStateFile(p => DateTime.Now);
 
                 ResolveAssemblyReference rarReaderTask = new ResolveAssemblyReference();
                 rarReaderTask.StateFile = precomputedCache.Path.Substring(0, precomputedCache.Path.Length - 6); // Not a real path; should not be used.
@@ -131,14 +131,14 @@ public void TestPreComputedCacheInputMatchesOutput()
 
                 // At this point, the standard cache does not exist, so it defaults to reading the "precomputed" cache.
                 // Then we verify that the information contained in that cache matches what we'd expect.
-                rarReaderTask.ReadStateFile(p => true);
+                rarReaderTask.ReadStateFile(p => true, p => DateTime.Now);
                 rarReaderTask._cache.instanceLocalFileStateCache.ShouldContainKey(dllName);
                 ResolveAssemblyReferenceCache.FileState assembly3 = rarReaderTask._cache.instanceLocalFileStateCache[dllName];
                 assembly3.Assembly.ShouldBeNull();
                 assembly3.RuntimeVersion.ShouldBe("v4.0.30319");
                 assembly3.FrameworkNameAttribute.Version.ShouldBe(Version.Parse("4.7.2"));
-                assembly3.scatterFiles.Length.ShouldBe(2);
-                assembly3.scatterFiles[1].ShouldBe("second");
+                assembly3.ScatterFiles.Length.ShouldBe(2);
+                assembly3.ScatterFiles[1].ShouldBe("second");
             }
         }
     }
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index d9012131511..ce31346cdb6 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -2034,13 +2034,19 @@ private void LogConflict(Reference reference, string fusionName, StringBuilder l
         /// <summary>
         /// Reads the state file (if present) into the cache.
         /// </summary>
-        internal void ReadStateFile(FileExists fileExists)
+        internal void ReadStateFile(FileExists fileExists, GetLastWriteTime getLastWriteTime)
         {
             ResolveAssemblyReferenceCache diskCache = null;
 
             _cache = new SystemState(loadDiskCacheCallback: () =>
                 {
+                    Console.WriteLine("### Loading disk cache");
                     diskCache = StateFileBase.DeserializeCache<ResolveAssemblyReferenceCache>(_stateFile, Log);
+                    if (diskCache != null)
+                    {
+                        DateTime stateFileLastWriteTime = getLastWriteTime(_stateFile);
+                        ResolveAssemblyReferenceCache.s_processWideCacheFileCache[_stateFile] = (stateFileLastWriteTime, ResolveAssemblyReferenceCache.GetNextSequenceNumber());
+                    }
 
                     // Fall back to precomputed caches if we got nothing from the per-project state file.
                     if (diskCache == null && AssemblyInformationCachePaths != null && AssemblyInformationCachePaths.Length > 0)
@@ -2056,7 +2062,7 @@ internal void ReadStateFile(FileExists fileExists)
         /// <summary>
         /// Write out the state file if a state name was supplied and the cache is dirty.
         /// </summary>
-        internal void WriteStateFile()
+        internal void WriteStateFile(GetLastWriteTime getLastWriteTime)
         {
             if (!string.IsNullOrEmpty(AssemblyInformationCacheOutputPath))
             {
@@ -2089,9 +2095,27 @@ internal void WriteStateFile()
                     // we've lost our in-memory timestamps (long-running process has been restarted) so we're not sure if the file is stale
                     // or not, we read it, see that it's *not* stale, and we're done.
 
-                    // TODO: Implement timestamp-based check for up-to-date cache file.
+                    // For the cache file to be up to date, two conditions must hold. It needs to have the same timestamp as the last time we
+                    // read it. And none of the entries used during this RAR task execution must have been updated after we read it.
+                    bool loadCacheFile = true;
+                    if (ResolveAssemblyReferenceCache.s_processWideCacheFileCache.TryGetValue(_stateFile, out var timestamps) &&
+                        timestamps.FileTimestamp == getLastWriteTime(_stateFile))
+                    {
+                        loadCacheFile = false;
+                        foreach (KeyValuePair<string, ResolveAssemblyReferenceCache.FileState> kvp in _cache.instanceLocalFileStateCache)
+                        {
+                            if (kvp.Value.SequenceNumber > timestamps.ContentSequenceNumber)
+                            {
+                                loadCacheFile = true;
+                                break;
+                            }
+                        }
+                    }
 
-                    _cache.EnsureResolveAssemblyReferenceCacheLoaded();
+                    if (loadCacheFile && !_cache.EnsureResolveAssemblyReferenceCacheLoaded())
+                    {
+                        _cache.IsDirty = true;
+                    }
                 }
 
                 if (_cache.IsDirty)
@@ -2102,7 +2126,11 @@ internal void WriteStateFile()
                         return;
                     }
 
+                    Console.WriteLine("### Saving disk cache");
                     _cache.SerializeCache(_stateFile, Log);
+
+                    DateTime stateFileLastWriteTime = getLastWriteTime(_stateFile);
+                    ResolveAssemblyReferenceCache.s_processWideCacheFileCache[_stateFile] = (stateFileLastWriteTime, ResolveAssemblyReferenceCache.GetNextSequenceNumber());
                 }
             }
         }
@@ -2331,7 +2359,7 @@ internal bool Execute(
                     }
 
                     // Load any prior saved state.
-                    ReadStateFile(fileExists);
+                    ReadStateFile(fileExists, getLastWriteTime);
                     _cache.SetInstalledAssemblyInformation(installedAssemblyTableInfo);
 
                     // Cache delegates.
@@ -2603,7 +2631,7 @@ internal bool Execute(
                     this.DependsOnSystemRuntime = useSystemRuntime.ToString();
                     this.DependsOnNETStandard = useNetStandard.ToString();
 
-                    WriteStateFile();
+                    WriteStateFile(getLastWriteTime);
 
                     // Save the new state out and put into the file exists if it is actually on disk.
                     if (_stateFile != null && fileExists(_stateFile))
diff --git a/src/Tasks/ResolveAssemblyReferenceCache.cs b/src/Tasks/ResolveAssemblyReferenceCache.cs
index 76acb7f63c3..579ef4a6d4e 100644
--- a/src/Tasks/ResolveAssemblyReferenceCache.cs
+++ b/src/Tasks/ResolveAssemblyReferenceCache.cs
@@ -2,11 +2,12 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.Diagnostics.CodeAnalysis;
 using System.IO;
 using System.Linq;
 using System.Runtime.Versioning;
+using System.Threading;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
@@ -26,6 +27,15 @@ internal class ResolveAssemblyReferenceCache : StateFileBase, ITranslatable
         /// </summary>
         internal Dictionary<string, FileState> instanceLocalFileStateCache = new Dictionary<string, FileState>(StringComparer.OrdinalIgnoreCase);
 
+        /// <summary>
+        /// 
+        /// </summary>
+        internal static ConcurrentDictionary<string, (DateTime FileTimestamp, long ContentSequenceNumber)> s_processWideCacheFileCache = new(StringComparer.OrdinalIgnoreCase);
+
+        private static long s_sequenceNumber;
+
+        internal static long GetNextSequenceNumber() => Interlocked.Increment(ref s_sequenceNumber);
+
         /// <summary>
         /// True if the contents have changed.
         /// </summary>
@@ -51,6 +61,11 @@ internal bool IsDirty
         /// </summary>
         internal sealed class FileState : ITranslatable, IEquatable<FileState>
         {
+            /// <summary>
+            /// The value of a monotonically increasing counter at the time this instance was last modified. Not to be serialized.
+            /// </summary>
+            private long sequenceNumber;
+
             /// <summary>
             /// The last modified time for this file.
             /// </summary>
@@ -64,28 +79,29 @@ internal sealed class FileState : ITranslatable, IEquatable<FileState>
             /// <summary>
             /// The assemblies that this file depends on.
             /// </summary>
-            internal AssemblyNameExtension[] dependencies;
+            private AssemblyNameExtension[] dependencies;
 
             /// <summary>
             /// The scatter files associated with this assembly.
             /// </summary>
-            internal string[] scatterFiles;
+            private string[] scatterFiles;
 
             /// <summary>
             /// FrameworkName the file was built against
             /// </summary>
-            internal FrameworkName frameworkName;
+            private FrameworkName frameworkName;
 
             /// <summary>
             /// The CLR runtime version for the assembly.
             /// </summary>
-            internal string runtimeVersion;
+            private string runtimeVersion;
 
             /// <summary>
             /// Default construct.
             /// </summary>
             internal FileState(DateTime lastModified)
             {
+                sequenceNumber = GetNextSequenceNumber();
                 this.lastModified = lastModified;
             }
 
@@ -94,6 +110,7 @@ internal FileState(DateTime lastModified)
             /// </summary>
             internal FileState(ITranslator translator)
             {
+                sequenceNumber = GetNextSequenceNumber();
                 Translate(translator);
             }
 
@@ -116,23 +133,68 @@ public void Translate(ITranslator translator)
 
             public bool Equals(FileState other)
             {
+                bool NullAwareSequenceEquals<T>(IEnumerable<T> first, IEnumerable<T> second)
+                {
+                    if (first == null || second == null)
+                    {
+                        return first == second;
+                    }
+                    return Enumerable.SequenceEqual(first, second);
+                }
+
+                bool NullAwareEquatableEquals<T>(IEquatable<T> first, IEquatable<T> second) where T : class
+                {
+                    if (first == null || second == null)
+                    {
+                        return first == second;
+                    }
+                    return first.Equals(second as T);
+                }
+
                 return
                     lastModified == other.LastModified &&
-                    assemblyName.Equals(other.assemblyName) &&
-                    Enumerable.SequenceEqual(dependencies, other.dependencies) &&
-                    Enumerable.SequenceEqual(scatterFiles, other.scatterFiles) &&
-                    frameworkName.Equals(other.frameworkName) &&
+                    NullAwareEquatableEquals(assemblyName, other.assemblyName) &&
+                    NullAwareSequenceEquals(dependencies, other.dependencies) &&
+                    NullAwareSequenceEquals(scatterFiles, other.scatterFiles) &&
+                    NullAwareEquatableEquals(frameworkName, other.frameworkName) &&
                     runtimeVersion == other.runtimeVersion;
             }
 
+            public void MergeTo(FileState other)
+            {
+                // If we're not talking about the same version of the assembly then don't do anything.
+                if (lastModified == other.lastModified)
+                {
+                    if (assemblyName != null && other.assemblyName == null)
+                    {
+                        other.assemblyName = assemblyName;
+                    }
+                    if (dependencies != null && other.dependencies == null)
+                    {
+                        other.dependencies = dependencies;
+                    }
+                    if (scatterFiles != null && other.scatterFiles == null)
+                    {
+                        other.scatterFiles = scatterFiles;
+                    }
+                    if (frameworkName != null && other.frameworkName == null)
+                    {
+                        other.frameworkName = frameworkName;
+                    }
+                    if (runtimeVersion != null && other.runtimeVersion == null)
+                    {
+                        other.runtimeVersion = runtimeVersion;
+                    }
+                }
+            }
+
+            internal long SequenceNumber => sequenceNumber;
+
             /// <summary>
             /// Gets the last modified date.
             /// </summary>
             /// <value></value>
-            internal DateTime LastModified
-            {
-                get { return lastModified; }
-            }
+            internal DateTime LastModified => lastModified;
 
             /// <summary>
             /// Get or set the assemblyName.
@@ -140,8 +202,51 @@ internal DateTime LastModified
             /// <value></value>
             internal AssemblyNameExtension Assembly
             {
-                get { return assemblyName; }
-                set { assemblyName = value; }
+                get => assemblyName;
+                set
+                {
+                    assemblyName = value;
+                    sequenceNumber = GetNextSequenceNumber();
+                }
+            }
+
+            /// <summary>
+            /// 
+            /// </summary>
+            internal AssemblyNameExtension[] Dependencies
+            {
+                get => dependencies;
+                set
+                {
+                    dependencies = value;
+                    sequenceNumber = GetNextSequenceNumber();
+                }
+            }
+
+            /// <summary>
+            /// 
+            /// </summary>
+            internal string[] ScatterFiles
+            {
+                get => scatterFiles;
+                set
+                {
+                    scatterFiles = value;
+                    sequenceNumber = GetNextSequenceNumber();
+                }
+            }
+
+            /// <summary>
+            /// 
+            /// </summary>
+            internal FrameworkName FrameworkName
+            {
+                get => frameworkName;
+                set
+                {
+                    frameworkName = value;
+                    sequenceNumber = GetNextSequenceNumber();
+                }
             }
 
             /// <summary>
@@ -150,18 +255,36 @@ internal AssemblyNameExtension Assembly
             /// <value></value>
             internal string RuntimeVersion
             {
-                get { return runtimeVersion; }
-                set { runtimeVersion = value; }
+                get => runtimeVersion;
+                set
+                {
+                    runtimeVersion = value;
+                    sequenceNumber = GetNextSequenceNumber();
+                }
             }
 
             /// <summary>
             /// Get or set the framework name the file was built against
             /// </summary>
-            [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification = "Could be used in other assemblies")]
             internal FrameworkName FrameworkNameAttribute
             {
-                get { return frameworkName; }
-                set { frameworkName = value; }
+                get => frameworkName;
+                set
+                {
+                    frameworkName = value;
+                    sequenceNumber = GetNextSequenceNumber();
+                }
+            }
+
+            /// <summary>
+            /// 
+            /// </summary>
+            internal void SetAssemblyMetadata(AssemblyNameExtension[] dependencies, string[] scatterFiles, FrameworkName frameworkName)
+            {
+                this.dependencies = dependencies;
+                this.scatterFiles = scatterFiles;
+                this.frameworkName = frameworkName;
+                sequenceNumber = GetNextSequenceNumber();
             }
 
             /// <summary>
@@ -282,7 +405,7 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
         }
 
         /// <summary>
-        /// Merges the existing data in <paramref name="toCache"/> the data from <paramref name="fromCache"/> and sets <see cref="IsDirty"/>
+        /// Merges the existing data in <paramref name="toCache"/> with the data from <paramref name="fromCache"/> and sets <see cref="IsDirty"/>
         /// on <paramref name="toCache"/> accordingly.
         /// </summary>
         /// <param name="fromCache">The cache deserialized from disk.</param>
@@ -302,11 +425,12 @@ internal static void MergeInstanceLocalFileStateCache(ResolveAssemblyReferenceCa
 
                 foreach (KeyValuePair<string, FileState> kvp in fromCache.instanceLocalFileStateCache)
                 {
-                    // The "to" FileState is more up-to-date, so we add missing items only. We compare items present in both dictionaries
-                    // to calculate the new value of toCache.IsDirty.
+                    // We set toCache.IsDirty if the "to" FileState ends up being different from the "from" one as this indicates
+                    // the need to write the updated cache back to disk.
                     if (toCache.instanceLocalFileStateCache.TryGetValue(kvp.Key, out FileState toFileState))
                     {
-                        toIsDirty |= !toFileState.Equals(kvp.Value);
+                        kvp.Value.MergeTo(toFileState);
+                        toIsDirty = toIsDirty || !toFileState.Equals(kvp.Value);
                     }
                     else
                     {
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index b4e7de3aad6..57445cb11c7 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -411,24 +411,28 @@ private void GetAssemblyMetadata(
             out FrameworkName frameworkName)
         {
             FileState fileState = GetFileState(path);
-            if (fileState.dependencies == null)
+            if (fileState.Dependencies == null)
             {
                 getAssemblyMetadata(
                     path,
                     assemblyMetadataCache,
-                    out fileState.dependencies,
-                    out fileState.scatterFiles,
-                    out fileState.frameworkName);
+                    out dependencies,
+                    out scatterFiles,
+                    out frameworkName);
+
+                fileState.SetAssemblyMetadata(dependencies, scatterFiles, frameworkName);
 
                 if (fileState.IsWorthPersisting)
                 {
                     SetIsDirty();
                 }
             }
-
-            dependencies = fileState.dependencies;
-            scatterFiles = fileState.scatterFiles;
-            frameworkName = fileState.frameworkName;
+            else
+            {
+                dependencies = fileState.Dependencies;
+                scatterFiles = fileState.ScatterFiles;
+                frameworkName = fileState.FrameworkName;
+            }
         }
 
         /// <summary>
