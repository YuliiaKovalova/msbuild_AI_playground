diff --git a/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs b/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs
index 6e909c83a0e..41a7edf7e42 100644
--- a/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs
+++ b/src/Build.UnitTests/BackEnd/EventSourceTestHelper.cs
@@ -10,6 +10,24 @@
 
 namespace Microsoft.Build.Engine.UnitTests.BackEnd
 {
+    /// <summary>
+    /// This class provides the ability to fetch events emitted from the "Microsoft-Build" EventSource.
+    /// The instance listens and saves emitted events in-memory.
+    /// To fetch the events, use the <see cref="GetEvents"/> method.
+    /// Note that the current implementation of this class does not have protection against concurrent usage in tests.
+    /// If used in tests, ensure to rely on unique variables, names, or IDs. For example usage: <see cref="SdkResolverService_Tests.AssertSdkResolutionMessagesAreLoggedInEventSource"/>.
+    /// 
+    /// Reference: <see href="https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.tracing.eventlistener"/>
+    /// <example>
+    /// <code>
+    /// // ...
+    /// using var eventSourceTestListener = new EventSourceTestHelper();
+    /// // ...
+    /// var events = eventSourceTestListener.GetEvents();
+    /// // verification
+    /// </code>
+    /// </example>
+    /// </summary>
     internal sealed class EventSourceTestHelper : EventListener
     {
         private readonly string eventSourceName = "Microsoft-Build";
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index 0b5b07544dc..f5887f5a46b 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -29,7 +29,6 @@ public class SdkResolverService_Tests : IDisposable
     {
         private readonly MockLogger _logger;
         private readonly LoggingContext _loggingContext;
-        private readonly EventSourceTestHelper _eventSourceTestListener;
 
         public SdkResolverService_Tests()
         {
@@ -37,8 +36,6 @@ public SdkResolverService_Tests()
             ILoggingService loggingService = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             loggingService.RegisterLogger(_logger);
 
-            _eventSourceTestListener = new EventSourceTestHelper();
-
             _loggingContext = new MockLoggingContext(
                 loggingService,
                 new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0, 0));
@@ -46,7 +43,6 @@ public SdkResolverService_Tests()
 
         public void Dispose()
         {
-            _eventSourceTestListener.Dispose();
             SdkResolverService.Instance.InitializeForTests();
         }
 
@@ -211,12 +207,13 @@ public void AssertSdkResolutionMessagesAreLogged()
         [Fact]
         public void AssertSdkResolutionMessagesAreLoggedInEventSource()
         {
+            using var eventSourceTestListener = new EventSourceTestHelper();
             SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(false, false, true));
             var sdkName = Guid.NewGuid().ToString();
             SdkReference sdk = new SdkReference(sdkName, "referencedVersion", "minimumVersion");
 
             SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false, failOnUnresolvedSdk: true);
-            var eventsLogged = _eventSourceTestListener.GetEvents();
+            var eventsLogged = eventSourceTestListener.GetEvents();
             eventsLogged.ShouldContain(x => x.EventId == 64); // Start of the sdk resolve
             eventsLogged.ShouldContain(x => x.EventId == 65 && x.Payload[1].ToString() == sdkName);
         }
