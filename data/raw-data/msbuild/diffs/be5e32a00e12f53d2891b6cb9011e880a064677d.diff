diff --git a/.editorconfig b/.editorconfig
index 72c7d4a2b87..b8e856dc62d 100644
--- a/.editorconfig
+++ b/.editorconfig
@@ -1,25 +1,199 @@
-# EditorConfig is awesome:
-http://EditorConfig.org
+# editorconfig.org
 
 # top-most EditorConfig file
 root = true
 
 # Default settings:
+# A newline ending every file
 # Use 4 spaces as indentation
 [*]
+insert_final_newline = true
 indent_style = space
 indent_size = 4
-insert_final_newline = true
 trim_trailing_whitespace = true
 
+[project.json]
+indent_size = 2
+
+# C# files
+[*.cs]
+# New line preferences
+csharp_new_line_before_open_brace = all
+csharp_new_line_before_else = true
+csharp_new_line_before_catch = true
+csharp_new_line_before_finally = true
+csharp_new_line_before_members_in_object_initializers = true
+csharp_new_line_before_members_in_anonymous_types = true
+csharp_new_line_between_query_expression_clauses = true
+
+# Indentation preferences
+csharp_indent_block_contents = true
+csharp_indent_braces = false
+csharp_indent_case_contents = true
+csharp_indent_case_contents_when_block = true
+csharp_indent_switch_labels = true
+csharp_indent_labels = one_less_than_current
+
+# Modifier preferences
+csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion
+
+# avoid this. unless absolutely necessary
+dotnet_style_qualification_for_field = false:suggestion
+dotnet_style_qualification_for_property = false:suggestion
+dotnet_style_qualification_for_method = false:suggestion
+dotnet_style_qualification_for_event = false:suggestion
+
+# Types: use keywords instead of BCL types, and permit var only when the type is clear
+csharp_style_var_for_built_in_types = false:suggestion
+csharp_style_var_when_type_is_apparent = false:none
+csharp_style_var_elsewhere = false:suggestion
+dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
+dotnet_style_predefined_type_for_member_access = true:suggestion
+
+# name all constant fields using PascalCase
+dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion
+dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols  = constant_fields
+dotnet_naming_rule.constant_fields_should_be_pascal_case.style    = pascal_case_style
+dotnet_naming_symbols.constant_fields.applicable_kinds   = field
+dotnet_naming_symbols.constant_fields.required_modifiers = const
+dotnet_naming_style.pascal_case_style.capitalization = pascal_case
+
+# static fields should have s_ prefix
+dotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion
+dotnet_naming_rule.static_fields_should_have_prefix.symbols  = static_fields
+dotnet_naming_rule.static_fields_should_have_prefix.style    = static_prefix_style
+dotnet_naming_symbols.static_fields.applicable_kinds   = field
+dotnet_naming_symbols.static_fields.required_modifiers = static
+dotnet_naming_symbols.static_fields.applicable_accessibilities = private, internal, private_protected
+dotnet_naming_style.static_prefix_style.required_prefix = s_
+dotnet_naming_style.static_prefix_style.capitalization = camel_case
+
+# internal and private fields should be _camelCase
+dotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion
+dotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields
+dotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style
+dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
+dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal
+dotnet_naming_style.camel_case_underscore_style.required_prefix = _
+dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case
+
+# Code style defaults
+csharp_using_directive_placement = outside_namespace:suggestion
+dotnet_sort_system_directives_first = true
+csharp_prefer_braces = true:silent
+csharp_preserve_single_line_blocks = true:none
+csharp_preserve_single_line_statements = false:none
+csharp_prefer_static_local_function = true:suggestion
+csharp_prefer_simple_using_statement = false:none
+csharp_style_prefer_switch_expression = true:suggestion
+
+# Code quality
+dotnet_style_readonly_field = true:suggestion
+dotnet_code_quality_unused_parameters = non_public:suggestion
+
+# Expression-level preferences
+dotnet_style_object_initializer = true:suggestion
+dotnet_style_collection_initializer = true:suggestion
+dotnet_style_explicit_tuple_names = true:suggestion
+dotnet_style_coalesce_expression = true:suggestion
+dotnet_style_null_propagation = true:suggestion
+dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
+dotnet_style_prefer_inferred_tuple_names = true:suggestion
+dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
+dotnet_style_prefer_auto_properties = true:suggestion
+dotnet_style_prefer_conditional_expression_over_assignment = true:silent
+dotnet_style_prefer_conditional_expression_over_return = true:silent
+csharp_prefer_simple_default_expression = true:suggestion
+
+# Expression-bodied members
+csharp_style_expression_bodied_methods = true:silent
+csharp_style_expression_bodied_constructors = true:silent
+csharp_style_expression_bodied_operators = true:silent
+csharp_style_expression_bodied_properties = true:silent
+csharp_style_expression_bodied_indexers = true:silent
+csharp_style_expression_bodied_accessors = true:silent
+csharp_style_expression_bodied_lambdas = true:silent
+csharp_style_expression_bodied_local_functions = true:silent
+
+# Pattern matching
+csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
+csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
+csharp_style_inlined_variable_declaration = true:suggestion
+
+# Null checking preferences
+csharp_style_throw_expression = true:suggestion
+csharp_style_conditional_delegate_call = true:suggestion
+
+# Other features
+csharp_style_prefer_index_operator = false:none
+csharp_style_prefer_range_operator = false:none
+csharp_style_pattern_local_over_anonymous_function = false:none
+
+# Space preferences
+csharp_space_after_cast = false
+csharp_space_after_colon_in_inheritance_clause = true
+csharp_space_after_comma = true
+csharp_space_after_dot = false
+csharp_space_after_keywords_in_control_flow_statements = true
+csharp_space_after_semicolon_in_for_statement = true
+csharp_space_around_binary_operators = before_and_after
+csharp_space_around_declaration_statements = do_not_ignore
+csharp_space_before_colon_in_inheritance_clause = true
+csharp_space_before_comma = false
+csharp_space_before_dot = false
+csharp_space_before_open_square_brackets = false
+csharp_space_before_semicolon_in_for_statement = false
+csharp_space_between_empty_square_brackets = false
+csharp_space_between_method_call_empty_parameter_list_parentheses = false
+csharp_space_between_method_call_name_and_opening_parenthesis = false
+csharp_space_between_method_call_parameter_list_parentheses = false
+csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
+csharp_space_between_method_declaration_name_and_open_parenthesis = false
+csharp_space_between_method_declaration_parameter_list_parentheses = false
+csharp_space_between_parentheses = false
+csharp_space_between_square_brackets = false
+
+# Analyzers
+dotnet_code_quality.ca1802.api_surface = private, internal
+dotnet_code_quality.ca2208.api_surface = public
+
+# License header
+file_header_template = Licensed to the .NET Foundation under one or more agreements.\nThe .NET Foundation licenses this file to you under the MIT license.\n
+
+# C++ Files
+[*.{cpp,h,in}]
+curly_bracket_next_line = true
+indent_brace_style = Allman
+
 # Xml project files
-[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
+[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]
+indent_size = 2
+
+[*.{csproj,vbproj,proj,nativeproj,locproj}]
+charset = utf-8
+
+# Xml build files
+[*.builds]
+indent_size = 2
+
+# Xml files
+[*.{xml,stylecop,resx,ruleset}]
 indent_size = 2
 
 # Xml config files
-[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
+[*.{props,targets,config,nuspec}]
 indent_size = 2
 
+# YAML config files
+[*.{yml,yaml}]
+indent_size = 2
+
+# Shell scripts
+[*.sh]
+end_of_line = lf
+[*.{cmd, bat}]
+end_of_line = crlf
+
 [src/**/*.{cs,vb}]
 # IDE0005: Remove unnecessary usings/imports
 dotnet_diagnostic.IDE0005.severity = warning
diff --git a/.github/ISSUE_TEMPLATE/01_bugreport.md b/.github/ISSUE_TEMPLATE/01_bugreport.md
index 3d8e508c782..58a8cb2c372 100644
--- a/.github/ISSUE_TEMPLATE/01_bugreport.md
+++ b/.github/ISSUE_TEMPLATE/01_bugreport.md
@@ -2,7 +2,7 @@
 name: üêû Bug Report
 about: Report a bug to help us improve MSBuild.
 title: ''
-labels: bug, untriaged
+labels: bug, needs-triage
 ---
 
 <!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->
diff --git a/.github/ISSUE_TEMPLATE/02_performanceissue.md b/.github/ISSUE_TEMPLATE/02_performanceissue.md
index e3d875c8f91..69ac8410706 100644
--- a/.github/ISSUE_TEMPLATE/02_performanceissue.md
+++ b/.github/ISSUE_TEMPLATE/02_performanceissue.md
@@ -2,7 +2,7 @@
 name: üìâ Performance Issue
 about: Report a performance issue or regression.
 title: ''
-labels: performance, untriaged
+labels: performance, needs-triage
 ---
 
 <!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->
diff --git a/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md b/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md
index 19dcf3094f1..a873a40f1e4 100644
--- a/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md
+++ b/.github/ISSUE_TEMPLATE/03_mybuildisbroken.md
@@ -2,7 +2,7 @@
 name: üòµ My Build is Broken
 about: Use this template for helping figure out what's wrong with your build.
 title: ''
-labels: untriaged
+labels: needs-triage
 ---
 
 <!-- NOTE: The MSBuild team receives a lot of issues and we need to prioritize them accordingly. Please understand that we may not get to your issue for some time. -->
diff --git a/.github/ISSUE_TEMPLATE/04_blankissue.md b/.github/ISSUE_TEMPLATE/04_blankissue.md
index 9be0e37587f..d3ae09b4431 100644
--- a/.github/ISSUE_TEMPLATE/04_blankissue.md
+++ b/.github/ISSUE_TEMPLATE/04_blankissue.md
@@ -2,5 +2,5 @@
 name: üìÑ Blank Issue
 about: Doesn't fit the other categories? File a blank ticket here.
 title: ''
-labels: untriaged
+labels: needs-triage
 ---
\ No newline at end of file
diff --git a/.vsts-dotnet-ci.yml b/.vsts-dotnet-ci.yml
index 8a7978a2291..bbbf0897830 100644
--- a/.vsts-dotnet-ci.yml
+++ b/.vsts-dotnet-ci.yml
@@ -107,12 +107,6 @@ jobs:
     inputs:
       filename: 'eng/cibuild.cmd'
       arguments: '-configuration Release -test'
-  - task: RichCodeNavIndexer@0
-    displayName: RichCodeNav Upload
-    inputs:
-      languages: 'csharp'
-    continueOnError: true
-    condition: succeeded()
   - task: PublishTestResults@2
     displayName: Publish .NET Framework Test Results
     inputs:
@@ -150,6 +144,22 @@ jobs:
     continueOnError: true
     condition: always()
 
+- job: RichCodeNavIndex
+  displayName: "Windows Code Indexing"
+  pool:
+    vmImage: 'windows-latest'
+  steps:
+  - task: BatchScript@1
+    displayName: build.cmd
+    inputs:
+      filename: 'build.cmd'
+  - task: RichCodeNavIndexer@0
+    displayName: RichCodeNav Upload
+    inputs:
+      languages: 'csharp'
+    continueOnError: true
+    condition: succeeded()
+
 - job: CoreBootstrappedOnLinux
   displayName: "Linux Core"
   pool:
@@ -258,3 +268,9 @@ jobs:
       ArtifactName: 'MonoOnMac test logs'
     continueOnError: true
     condition: always()
+
+- template: /eng/common/templates/job/source-build.yml
+  parameters:
+    platform:
+      name: 'Managed'
+      container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'
diff --git a/.vsts-dotnet.yml b/.vsts-dotnet.yml
index 33075c0ad6b..415fa36b412 100644
--- a/.vsts-dotnet.yml
+++ b/.vsts-dotnet.yml
@@ -10,12 +10,28 @@ trigger:
 #   SignType: real
 #   SkipApplyOptimizationData: false
 
+parameters:
+- name: OptProfDropName
+  displayName: Optional OptProfDrop Override
+  type: string
+  default: 'default'
+
 variables:
+  # if OptProfDrop is not set, string '$(OptProfDrop)' will be passed to the build script.
+  - name: OptProfDrop
+    value: ''
   - name: SourceBranch
     value: $(IbcSourceBranchName)
-  - ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/exp/') }}:
+  # If we're not on a vs* branch, use main as our optprof collection branch
+  - ${{ if not(startsWith(variables['Build.SourceBranch'], 'refs/heads/vs')) }}:
     - name: SourceBranch
       value: main
+  # if OptProfDropName is set as a parameter, set OptProfDrop to the parameter and unset SourceBranch
+  - ${{ if ne(parameters.OptProfDropName, 'default') }}:
+    - name: OptProfDrop
+      value: ${{parameters.OptProfDropName}}
+    - name: SourceBranch
+      value: ''
   - name: _DotNetArtifactsCategory
     value: .NETCore
   - name: _DotNetValidationArtifactsCategory
@@ -49,9 +65,9 @@ stages:
     - name: TeamName
       value: MSBuild
     - name: VisualStudio.MajorVersion
-      value: 16
+      value: 17
     - name: VisualStudio.ChannelName
-      value: 'int.d16.11'
+      value: 'int.main'
     - name: VisualStudio.DropName
       value: Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)
 
@@ -105,7 +121,7 @@ stages:
                 /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
                 /p:TeamName=MSBuild
                 /p:DotNetPublishUsingPipelines=true
-                /p:VisualStudioIbcDrop=$(OptProfDropName)
+                /p:VisualStudioIbcDrop=$(OptProfDrop)
       displayName: Build
       condition: succeeded()
 
@@ -223,12 +239,19 @@ stages:
       displayName: Execute cleanup tasks
       condition: succeededOrFailed()
 
+  - template: /eng/common/templates/job/source-build.yml
+    parameters:
+      platform:
+        name: 'Managed'
+        container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'
+
   - template: /eng/common/templates/job/publish-build-assets.yml
     parameters:
       enablePublishBuildArtifacts: true
       publishUsingPipelines: true
       dependsOn:
         - Windows_NT
+        - Source_Build_Managed
       pool:
         vmImage: vs2017-win2016
 
diff --git a/Directory.Build.props b/Directory.Build.props
index 2cc17a1372f..93150ee88bd 100644
--- a/Directory.Build.props
+++ b/Directory.Build.props
@@ -1,4 +1,4 @@
-Ôªø<?xml version="1.0" encoding="utf-8"?>
+<?xml version="1.0" encoding="utf-8"?>
 <Project>
   <Import Project="Sdk.props" Sdk="Microsoft.DotNet.Arcade.Sdk" />
 
@@ -35,11 +35,10 @@
          NU5105: we're explicitly opting in to semver2, as is most of .NET Core
         CS1701 and CS1702 are by default ignored by Microsoft.NET.Sdk, but if you define the NoWarn property in Directory.Build.props,
         you don't get those defaults.
-        NU5125: Arcade uses licenseUrl when doing pack, which now causes NU5125 warning. This disables that warning until arcade can switch over.
         SYSLIB0011: Removing binary formatter will happen as part of a larger .NET-wide effort.
     -->
 
-    <NoWarn>$(NoWarn);NU1603;NU5105;NU5125;1701;1702;SYSLIB0011</NoWarn>
+    <NoWarn>$(NoWarn);NU1603;NU5105;1701;1702;SYSLIB0011</NoWarn>
   </PropertyGroup>
 
   <PropertyGroup Condition="'$(Configuration)' == 'Debug-MONO'">
@@ -62,10 +61,21 @@
     <MachineIndependentBuild>true</MachineIndependentBuild>
   </PropertyGroup>
 
+  <PropertyGroup>
+    <AssemblyInformationCachePaths Condition="Exists('$(NetCoreRoot)sdk\$(NetCoreSdkVersion)\SdkPrecomputedAssemblyReferences.cache')">$(AssemblyInformationCachePaths);$(NetCoreRoot)sdk\$(NetCoreSdkVersion)\SDKPrecomputedAssemblyReferences.cache</AssemblyInformationCachePaths>
+  </PropertyGroup>
+
   <PropertyGroup>
     <DefaultItemExcludes>$(DefaultItemExcludes);*.log</DefaultItemExcludes>
     <DefaultItemExcludes>$(DefaultItemExcludes);*.binlog</DefaultItemExcludes>
 
     <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
   </PropertyGroup>
+  
+  <Import Project="$(RepositoryEngineeringDir)Analyzers.props" />
+
+  <PropertyGroup>
+    <EnableAnalyzers>true</EnableAnalyzers>
+  </PropertyGroup>
+  
 </Project>
diff --git a/NuGet.config b/NuGet.config
index cfa8997361c..9b4c6f6759c 100644
--- a/NuGet.config
+++ b/NuGet.config
@@ -5,6 +5,7 @@
     <add key="arcade" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json" />
     <add key="dotnet-public" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json" />
     <add key="dotnet-tools" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json" />
+    <add key="dotnet6" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json" />
   </packageSources>
   <disabledPackageSources />
 </configuration>
diff --git a/README.md b/README.md
index 4f47a8eab8d..66ce222ad7e 100644
--- a/README.md
+++ b/README.md
@@ -8,25 +8,25 @@ The [changelog](documentation/Changelog.md) has detailed information about chang
 
 ### Build Status
 
-The current development branch is `main`. Changes in `main` will go into a future update of MSBuild, which will release with Visual Studio 17.0 and a corresponding version of the .NET Core SDK.
+The current development branch is `main`. Changes in `main` will go into a future update of MSBuild, which will release with Visual Studio 17.1 and a corresponding version of the .NET Core SDK.
 
-[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=main)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=86&branchName=main)
+[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=main)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=main)
 
-We have forked for MSBuild 16.11 in the branch [`vs16.11`](https://github.com/Microsoft/msbuild/tree/vs16.11). Changes to that branch need special approval.
+We have forked for MSBuild 17.0 in the branch [`vs17.0`](https://github.com/Microsoft/msbuild/tree/vs17.0). Changes to that branch need special approval.
 
-[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.11)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=86&branchName=vs16.11)
+[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs17.0)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs17.0)
 
-MSBuild 16.9 builds from the branch [`vs16.9`](https://github.com/dotnet/msbuild/tree/vs16.9). Only high-priority bugfixes will be considered for servicing 16.9.
+16.11 builds from the branch [`vs16.11`](https://github.com/Microsoft/msbuild/tree/vs16.11). Only high-priority bugfixes will be considered for servicing 16.11.
 
-[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.9)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=86&branchName=vs16.9)
+[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.11)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs16.11)
 
-MSBuild 16.7 builds from the branch [`vs16.7`](https://github.com/dotnet/msbuild/tree/vs16.7). Only high-priority bugfixes will be considered for servicing 16.7.
+MSBuild 16.9 builds from the branch [`vs16.9`](https://github.com/dotnet/msbuild/tree/vs16.9). Only high-priority bugfixes will be considered for servicing 16.9.
 
-[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.7)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=86&branchName=vs16.7)
+[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.9)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs16.9)
 
-MSBuild 16.4 builds from the branch [`vs16.4`](https://github.com/dotnet/msbuild/tree/vs16.4). Only high-priority bugfixes will be considered for servicing 16.4.
+MSBuild 16.7 builds from the branch [`vs16.7`](https://github.com/dotnet/msbuild/tree/vs16.7). Only high-priority bugfixes will be considered for servicing 16.7.
 
-[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.4)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=86&branchName=vs16.4)
+[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.7)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs16.7)
 
 MSBuild 15.9 builds from the branch [`vs15.9`](https://github.com/dotnet/msbuild/tree/vs15.9). Only very-high-priority bugfixes will be considered for servicing 15.9.
 
@@ -60,20 +60,24 @@ MSBuild can be run on Unix systems that support .NET Core. Set-up instructions c
 
 You can turn on localized builds via the `/p:LocalizedBuild=true` command line argument. For more information on localized builds and how to make contributions to MSBuild's translations, see our [localization documentation](documentation/wiki/Localization.md)
 
-#### Getting Started
-
+### Interested in contributing?
 Before you contribute, please read through the contributing and developer guides to get an idea of what kinds of pull requests we accept.
 
 * [Contributing Guide](documentation/wiki/Contributing-Code.md)
-
 * **Developer Guide on:**
    - [.NET Core](documentation/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild.md)
    - [Full Framework](documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md)
    - [Mono](documentation/wiki/Building-Testing-and-Debugging-on-Mono-MSBuild.md)
 
-Looking for something to work on? This list of [up for grabs issues](https://github.com/Microsoft/msbuild/issues?q=is%3Aopen+is%3Aissue+label%3Aup-for-grabs) is a great place to start.
+* See our [up for grabs issues](https://github.com/Microsoft/msbuild/issues?q=is%3Aopen+is%3Aissue+label%3Aup-for-grabs) for a list of issues we think are great to onboard new developers.
+   - **Note:** Please leave a comment asking to be assigned the issue if you want to work on it.
+* See our [label documentation](documentation/wiki/labels.md) for descriptions of labels we use throughout the repo.
+
+### Other ways to contribute
+We encourage any contributions you decide to make to the repo!
 
-You are also encouraged to start a discussion by filing an issue or creating a gist.
+* [File an issue](https://github.com/dotnet/msbuild/issues/new/choose)
+* [Start a discussion](https://github.com/dotnet/msbuild/discussions)
 
 ### MSBuild Components
 
diff --git a/documentation/Changelog.md b/documentation/Changelog.md
index 4a9dbaf4710..19f97e2e2e7 100644
--- a/documentation/Changelog.md
+++ b/documentation/Changelog.md
@@ -2,10 +2,13 @@
 
 ## MSBuild 16.11.0
 
-This version of MSBuild will ship with Visual Studio 2019 version 16.11.0 and .NET SDK 5.0.400.
+This version of MSBuild shipped with Visual Studio 2019 version 16.11.0 and .NET SDK 5.0.400.
 
 ### What's new
 
+* MSBuild now supports long paths in the 64-bit `amd64\MSBuild.exe` executable.
+* New version properties `MSBuildFileVersion` (4-part, matches file version) and `MSBuildSemanticVersion` (matches package versions) are now available for use (#6534).
+
 ### Detailed release notes
 
 #### Added
@@ -26,6 +29,10 @@ This version of MSBuild will ship with Visual Studio 2019 version 16.11.0 and .N
 * Allow `ResolveAssemblyReferences` precomputed cache files to be in read-only locations (#6393).
 * 64-bit `al.exe` is used when targeting 64-bit architectures (for real this time) (#6484).
 * Builds with `ProduceOnlyReferenceAssembly` no longer expect debug symbols to be produced (#6511). Thanks, @Zastai!
+* 64-bit `MSBuild.exe` supports long paths (and other .NET default behaviors) (#6562).
+* Non-graph builds no longer crash in the experimental project cache (#6568).
+* The experimental project cache is initialized only once (#6569).
+* The experimental project cache no longer tries to schedule proxy builds to the in-proc node (#6635).
 
 #### Infrastructure
 
@@ -35,7 +42,15 @@ This version of MSBuild will ship with Visual Studio 2019 version 16.11.0 and .N
 * Switched to OneLocBuild for localization PRs (#6561).
 * Moved to latest Ubuntu image for PR test legs (#6573).
 
-#### Documentation
+## MSBuild 16.10.2
+
+This version of MSBuild shipped with Visual Studio 2019 version 16.10.2 and will ship with .NET SDK 5.0.302.
+
+#### Fixed
+
+* Fixed a regression in the `MakeRelative` property function that dropped trailing slashes (#6513). Thanks, @dsparkplug and @pmisik!
+* Fixed a regression in glob matching where files without extensions were erroneously not matched (#6531).
+* Fixed a change in logging that caused crashes in Azure DevOps loggers (#6520).
 
 ## MSBuild 16.10.2
 
diff --git a/documentation/ProjectReference-Protocol.md b/documentation/ProjectReference-Protocol.md
index f5363b9f43f..9dc2f404fa2 100644
--- a/documentation/ProjectReference-Protocol.md
+++ b/documentation/ProjectReference-Protocol.md
@@ -22,7 +22,7 @@ Importing `Microsoft.Common.targets` includes logic that consumes these items an
 
 ## Who this document is for
 
-This document describes that process, including what is required of a project to be referenceable through a `ProjectReference`. It is intended for for MSBuild SDK maintainers, and those who have created a completely custom project type that needs to interoperate with other projects. It may also be of interest if you'd like to see the implementation details of references. Understanding the details should not be necessary to _use_ `ProjectReferences` in your project.
+This document describes that process, including what is required of a project to be referenceable through a `ProjectReference`. It is intended for MSBuild SDK maintainers, and those who have created a completely custom project type that needs to interoperate with other projects. It may also be of interest if you'd like to see the implementation details of references. Understanding the details should not be necessary to _use_ `ProjectReferences` in your project.
 
 ## Targets related to consuming a reference
 
@@ -51,13 +51,14 @@ These targets should exist in a project to be compatible with the common targets
 
 These targets are all defined in `Microsoft.Common.targets` and are defined in Microsoft SDKs. You should only have to implement them yourself if you require custom behavior or are authoring a project that doesn't import the common targets.
 
-If implementing a project with an ‚Äúouter‚Äù (determine what properties to pass to the real build) and ‚Äúinner‚Äù (fully specified) build, only `GetTargetFrameworkProperties` is required in the ‚Äúouter‚Äù build. The other targets listed can be ‚Äúinner‚Äù build only.
+If implementing a project with an ‚Äúouter‚Äù (determine what properties to pass to the real build) and ‚Äúinner‚Äù (fully specified) build, only `GetTargetFrameworks` is required in the ‚Äúouter‚Äù build. The other targets listed can be ‚Äúinner‚Äù build only.
 
 * `GetTargetFrameworks` tells referencing projects what options are available to the build.
   * It returns an item with the following metadata:
     * `TargetFrameworks` indicating what TargetFrameworks are available in the project
     * `TargetFrameworkMonikers` and `TargetPlatformMonikers` indicating what framework / platform the `TargetFrameworks` map to.  This is to support implicitly setting the target platform version (for example inferring that `net5.0-windows` means the same as `net5.0-windows7.0`) as well as treating the `TargetFramework` values [as aliases](https://github.com/NuGet/Home/issues/5154)
     * Boolean metadata for `HasSingleTargetFramework` and `IsRidAgnostic`.
+    * `Platforms` indicating what platforms are available for the project to build as, and boolean metadata `IsVcxOrNativeProj` (used for [SetPlatform Negotiation](#setplatform-negotiation))
   * The `GetReferenceNearestTargetFrameworkTask` (provided by NuGet) is responsible for selecting the best matching `TargetFramework` of the referenced project
   * This target is _optional_. If not present, the reference will be built with no additional properties.
   * **New** in MSBuild 15.5.  (`TargetFrameworkMonikers` and `TargetPlatformMonikers` metadata is new in MSBuild 16.8)
@@ -84,7 +85,6 @@ If implementing a project with an ‚Äúouter‚Äù (determine what properties to pass
   * As of 15.7, this is _optional_. If a project does not contain a `GetCopyToOutputDirectoryItems` target, projects that reference it will not copy any of its outputs to their own output folders, but the build can succeed.
 * `Clean` should delete all outputs of the project.
   * It is not called during a normal build, only during "Clean" and "Rebuild".
-
 ## Other protocol requirements
 
 As with all MSBuild logic, targets can be added to do other work with `ProjectReference`s.
@@ -106,6 +106,8 @@ As of MSBuild 16.10, it is possible to gather additional properties from referen
 
 These properties will then be gathered via the `GetTargetFrameworks` call.  They will be available to the referencing project via the `AdditionalPropertiesFromProject` metadata on the `_MSBuildProjectReferenceExistent` item.  The `AdditionalPropertiesFromProject` value will be an XML string which contains the values of the properties for each `TargetFramework` in the referenced project.  For example:
 
+> :warning: This format is being changed. Soon, the schema will replace `<net5.0>` with `<TargetFramework Name="net5.0">`. You can opt into that behavior early by setting the `_UseAttributeForTargetFrameworkInfoPropertyNames` property to true. This property will have no effect after the transition is complete.
+
 ```xml
 <AdditionalProjectProperties>
   <net5.0>
@@ -119,4 +121,66 @@ These properties will then be gathered via the `GetTargetFrameworks` call.  They
 </AdditionalProjectProperties>
 ```
 
-The `NearestTargetFramework` metadata will be the target framework which was selected as the best one to use for the reference (via `GetReferenceNearestTargetFrameworkTask`).  This can be used to select which set of properties were used in the target framework that was active for the reference.
\ No newline at end of file
+The `NearestTargetFramework` metadata will be the target framework which was selected as the best one to use for the reference (via `GetReferenceNearestTargetFrameworkTask`).  This can be used to select which set of properties were used in the target framework that was active for the reference.
+
+## SetPlatform Negotiation
+As of version 17.0, MSBuild can now dynamically figure out what platform a `ProjectReference` should build as. This includes a new target and task to determine what the `SetPlatform` metadata should be, or whether to undefine the platform so the referenced project builds with its default platform.
+
+* `_GetProjectReferenceTargetFrameworkProperties` target performs the majority of the work for assigning `SetPlatform` metadata to project references.
+  * Calls the `GetCompatiblePlatform` task, which is responsible for negotiating between the current project's platform and the platforms of the referenced project to assign a `NearestPlatform` metadata to the item.
+  * Sets or undefines `SetPlatform` based on the `NearestPlatform` assignment from `GetCompatiblePlatform`
+  * This target explicitly runs after `_GetProjectReferenceTargetFrameworkProperties` because it needs to use the `IsVcxOrNativeProj` and `Platforms` properties returned by the `GetTargetFrameworks` call.
+
+Note: If a `ProjectReference` has `SetPlatform` metadata defined already, the negotiation logic is skipped over.
+### Impact on the build
+In addition to the above task and target, `.vcxproj` and `.nativeproj` projects will receive an extra MSBuild call to the `GetTargetFrameworks` target. Previously, TargetFramework negotiation skipped over these projects because they could not multi-target in the first place. Because SetPlatform negotiation needs information given from the `GetTargetFrameworks` target, it is required that the `_GetProjectReferenceTargetFrameworkProperties` target calls the MSBuild task on the ProjectReference.
+
+This means most projects will see an evaluation with no global properties defined, unless set by the user.
+
+### How To Opt In
+First, set the properties `EnableDynamicPlatformResolution` and `DisableTransitiveProjectReferences` to `true` for **every project** in your solution. The easiest way to do this is by creating a `Directory.Build.props` file and placing it at the root of your project directory:
+
+```xml
+<Project>
+  <PropertyGroup>
+    <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
+    <DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>
+  </PropertyGroup>
+</Project>
+```
+
+If only set in one project, the `SetPlatform` metadata will carry forward to every consecutive project reference.
+
+Next, every referenced project is required to define a `Platforms` property, where `Platforms` is a semicolon-delimited list of platforms that project could build as. For `.vcxproj` or `.nativeproj` projects, `Platforms` is constructed from the `ProjectConfiguration` items that already exist in the project. For managed SDK projects, the default is `AnyCPU`. Managed non-SDK projects need to define this manually.
+
+Lastly, a `PlatformLookupTable` may need to be defined for more complex scenarios. A `PlatformLookupTable` is a semicolon-delimited list of mappings between platforms. `<PlatformLookupTable>Win32=x86</PlatformLookupTable>`, for example. This means that when the current project is building as `Win32`, it will attempt to build the referenced project as x86. This property is **required** when a managed AnyCPU project references an unmanaged project because `AnyCPU` does not directly map to an architecture-specific platform. You can define the table in two ways:
+
+1. A standard property within the current project, in a Directory.Build.props/targets
+2. Metadata on the `ProjectReference` item. This option takes priority over the first to allow customizations per `ProjectReference`.
+
+### References between managed and unmanaged projects
+Some cases of `ProjectReference`s require a `$(PlatformLookupTable)` to correctly determine what a referenced project should build as. References between managed and unmanaged projects also get a default lookup table that can be opted out of by setting the property `UseDefaultPlatformLookupTables` to false. See the table below for details.
+
+Note: Defining a `PlatformLookupTable` overrides the default mapping.
+| Project Reference Type | `PlatformLookupTable` Required? | Notes |
+| :--  | :-: | :-: |
+| Unmanaged -> Unmanaged | No |  |
+| Managed -> Managed | No |  |
+| Unmanaged -> Managed | Optional | Uses default mapping: `Win32=x86` |
+| Managed -> Unmanaged | **Yes** when the project is AnyCPU | Uses default mapping: `x86=Win32` |
+
+Example:
+Project A: Managed, building as `AnyCPU`, has a `ProjectReference` on Project B.
+Project B: Unmanaged, has `$(Platforms)` constructed from its `Platform` metadata from its `ProjectConfiguration` items, defined as `x64;Win32`.
+
+Because `AnyCPU` does not map to anything architecture-specific, a custom mapping must be defined. Project A can either:
+1. Define `PlatformLookupTable` in its project or a Directory.Build.props as `AnyCPU=x64` or `AnyCPU=Win32`.
+2. Define `PlatformLookupTable` as metadata on the `ProjectReference` item, which would take priority over a lookup table defined elsewhere.
+     *  When only one mapping is valid, you could also directly define `SetPlatform` metadata as `Platform=foo`. This would skip over most negotiation logic.
+
+Example of project A defining a lookup table directly on the `ProjectReference`:
+```xml
+<ItemGroup>
+  <ProjectReference Include="B.csproj" PlatformLookupTable="AnyCPU=Win32">
+</ItemGroup>
+```
diff --git a/documentation/specs/project-cache.md b/documentation/specs/project-cache.md
index a9da734d26f..6a0095354ca 100644
--- a/documentation/specs/project-cache.md
+++ b/documentation/specs/project-cache.md
@@ -1,16 +1,3 @@
-- [Summary](#summary)
-- [Motivation](#motivation)
-- [Plugin requirements](#plugin-requirements)
-- [High-level design](#high-level-design)
-- [APIs and calling patterns](#apis-and-calling-patterns)
-  - [From BuildManager API users who have a project dependency graph at hand and want to manually issue builds for each graph node in reverse topo sort order.](#from-buildmanager-api-users-who-have-a-project-dependency-graph-at-hand-and-want-to-manually-issue-builds-for-each-graph-node-in-reverse-topo-sort-order)
-  - [From command line](#from-command-line)
-  - [From Visual Studio, a temporary workaround](#from-visual-studio-a-temporary-workaround)
-- [Details](#details)
-- [Caveats](#caveats)
-- [Future work](#future-work)
-- [Potential work of dubious value](#potential-work-of-dubious-value)
-
 # Summary
 
 Project cache is a new assembly-based plugin extension point in MSBuild which determines whether a build request (a project) can be skipped during build. The main expected benefit is reduced build times via [caching and/or distribution](https://github.com/dotnet/msbuild/blob/master/documentation/specs/static-graph.md#weakness-of-the-old-model-caching-and-distributability).
diff --git a/documentation/specs/sdk-resolvers.md b/documentation/specs/sdk-resolvers.md
new file mode 100644
index 00000000000..ddb73668e2b
--- /dev/null
+++ b/documentation/specs/sdk-resolvers.md
@@ -0,0 +1,29 @@
+> üöß Note
+>
+> This page is a work in progress.
+
+### Failed SDK Resolution
+SDK resolvers previously attempted to continue when one critically fails (throws an unhandled exception). This lead to misleading error messages such as:
+
+```
+warning MSB4242: The SDK resolver "Microsoft.DotNet.MSBuildWorkloadSdkResolver" failed to run. 's' is an invalid start of a property name. Expected a '"'. LineNumber: 14 | BytePositionInLine: 8.
+error MSB4236: The SDK 'Microsoft.NET.SDK.WorkloadAutoImportPropsLocator' specified could not be found. [C:\foo\bar.csproj]
+```
+
+`MSB4236` is a red herring while `MSB4242` is the real error despite being logged as a warning. Because of this, SDK resolvers now fail the build _immediately_ upon unhandled exceptions. These exceptions are propogated as `SdkResolverException`s, and `MSB4242` has been promoted to an error code. The new error message appears like so:
+
+```
+C:\src\temp\8-18>"C:\foo\dotnet-sdk-6.0.100-preview.7.21379.14-win-x64\dotnet.exe" build    
+Microsoft (R) Build Engine version 17.0.0-dev-21420-01+5df152759 for .NET
+Copyright (C) Microsoft Corporation. All rights reserved.
+
+C:\foo\bar.csproj : error MSB4242: SDK Resolver Failure: "The SDK resolver "Microsoft.DotNet.MSBuildWorkloadSdkResolver" failed while attempting to resolve the SDK "Microsoft.NET.Sdk". Exception: "'s' is an invalid start of a property name. Expected a '"'. LineNumber: 14 | BytePositionInLine: 8."".
+
+Build FAILED.
+
+C:\foo\bar.csproj : error MSB4242: SDK Resolver Failure: "The SDK resolver "Microsoft.DotNet.MSBuildWorkloadSdkResolver" failed while attempting to resolve the SDK "Microsoft.NET.Sdk". Exception: "'s' is an invalid start of a property name. Expected a '"'. LineNumber: 14 | BytePositionInLine: 8."".
+    0 Warning(s)
+    1 Error(s)
+
+Time Elapsed 00:00:00.15
+```
\ No newline at end of file
diff --git a/documentation/specs/static-graph-implementation-details.md b/documentation/specs/static-graph-implementation-details.md
index 028fb333359..d8a109a0133 100644
--- a/documentation/specs/static-graph-implementation-details.md
+++ b/documentation/specs/static-graph-implementation-details.md
@@ -1,8 +1,3 @@
-- [Single project isolated builds: implementation details](#single-project-isolated-builds-implementation-details)
-  - [Input / Output cache implementation](#input--output-cache-implementation)
-  - [Isolation implementation](#isolation-implementation)
-    - [How isolation exemption complicates everything](#how-isolation-exemption-complicates-everything)
-
 # Single project isolated builds: implementation details
 
 <!-- workflow -->
@@ -17,7 +12,7 @@ The presence of either input or output caches turns on [isolated build constrain
 
 ## Input / Output cache implementation
 <!-- cache structure -->
-The cache files contain the serialized state of MSBuild's [ConfigCache](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Caching/ConfigCache.cs) and [ResultsCache](https://github.com/dotnet/msbuild/blob/master/src/Build/BackEnd/Components/Caching/ResultsCache.cs). These two caches have been traditionally used by the engine to cache build results. For example, it is these caches which ensure that a target is only built once per build submission. The `ConfigCache` entries are instances of [BuildRequestConfiguration](https://github.com/microsoft/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs#L25). The `ResultsCache` entries are instances of [BuildResult](https://github.com/microsoft/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Shared/BuildResult.cs#L34), which contain or more instances of [TargetResult](https://github.com/microsoft/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Shared/TargetResult.cs#L22). 
+The cache files contain the serialized state of MSBuild's [ConfigCache](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Caching/ConfigCache.cs) and [ResultsCache](https://github.com/dotnet/msbuild/blob/master/src/Build/BackEnd/Components/Caching/ResultsCache.cs). These two caches have been traditionally used by the engine to cache build results. For example, it is these caches which ensure that a target is only built once per build submission. The `ConfigCache` entries are instances of [BuildRequestConfiguration](https://github.com/microsoft/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs#L25). The `ResultsCache` entries are instances of [BuildResult](https://github.com/microsoft/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Shared/BuildResult.cs#L34), which contain or more instances of [TargetResult](https://github.com/microsoft/msbuild/blob/37c5a9fec416b403212a63f95f15b03dbd5e8b5d/src/Build/BackEnd/Shared/TargetResult.cs#L22).
 
 One can view the two caches as the following mapping: `(project path, global properties) -> results`. `(project path, global properties)` is represented by a `BuildRequestConfiguration`, and the results are represented by `BuildResult` and `TargetResult`.
 
diff --git a/documentation/specs/static-graph.md b/documentation/specs/static-graph.md
index 6e4527a7470..90349da4c7e 100644
--- a/documentation/specs/static-graph.md
+++ b/documentation/specs/static-graph.md
@@ -1,36 +1,5 @@
 # Static Graph
 
-- [Static Graph](#static-graph)
-  - [What is static graph for?](#what-is-static-graph-for)
-    - [Weakness of the old model: project-level scheduling](#weakness-of-the-old-model-project-level-scheduling)
-    - [Weakness of the old model: incrementality](#weakness-of-the-old-model-incrementality)
-    - [Weakness of the old model: caching and distributability](#weakness-of-the-old-model-caching-and-distributability)
-  - [What is static graph?](#what-is-static-graph)
-  - [Design documentation](#design-documentation)
-    - [Design goals](#design-goals)
-  - [Project Graph](#project-graph)
-    - [Constructing the project graph](#constructing-the-project-graph)
-    - [Build dimensions](#build-dimensions)
-      - [Multitargeting](#multitargeting)
-    - [Executing targets on a graph](#executing-targets-on-a-graph)
-      - [Command line](#command-line)
-      - [APIs](#apis)
-    - [Inferring which targets to run for a project within the graph](#inferring-which-targets-to-run-for-a-project-within-the-graph)
-      - [Multitargeting details](#multitargeting-details)
-    - [Underspecified graphs](#underspecified-graphs)
-    - [Public API](#public-api)
-  - [Isolated builds](#isolated-builds)
-    - [Isolated graph builds](#isolated-graph-builds)
-    - [Single project isolated builds](#single-project-isolated-builds)
-      - [APIs](#apis-1)
-      - [Command line](#command-line-1)
-      - [Exempting references from isolation constraints](#exempting-references-from-isolation-constraints)
-  - [I/O Tracking](#io-tracking)
-    - [Detours](#detours)
-    - [Isolation requirement](#isolation-requirement)
-    - [Tool servers](#tool-servers)
-  - [Examples](#examples)
-
 ## What is static graph for?
 
 As a repo gets bigger and more complex, weaknesses in MSBuild's scheduling and incrementality models become more apparent. MSBuild's static graph features are intended to ameliorate these weaknesses while remaining as compatible as possible with existing projects and SDKs.
diff --git a/documentation/wiki/ChangeWaves.md b/documentation/wiki/ChangeWaves.md
index 66b119cd485..5b152e7c1a7 100644
--- a/documentation/wiki/ChangeWaves.md
+++ b/documentation/wiki/ChangeWaves.md
@@ -7,6 +7,9 @@ Opt-out is a better approach for us because we'd likely get limited feedback whe
 ## How do they work?
 The opt-out comes in the form of setting the environment variable `MSBuildDisableFeaturesFromVersion` to the Change Wave (or version) that contains the feature you want **disabled**. This version happens to be the version of MSBuild that the features were developed for. See the mapping of change waves to features below.
 
+## When do they become permanent?
+A wave of features is set to "rotate out" (i.e. become standard functionality) two bands after its release. For example, wave 16.8 stayed opt-out through wave 16.10, becoming standard functionalty when wave 17.0 is introduced.
+
 ## MSBuildDisableFeaturesFromVersion Values & Outcomes
 | `MSBuildDisableFeaturesFromVersion` Value                         | Result        | Receive Warning? |
 | :-------------                                                    | :----------   | :----------: |
@@ -19,15 +22,19 @@ The opt-out comes in the form of setting the environment variable `MSBuildDisabl
 # Change Waves & Associated Features
 
 ## Current Rotation of Change Waves
-### 16.8
-- [Enable NoWarn](https://github.com/dotnet/msbuild/pull/5671)
-- [Truncate Target/Task skipped log messages to 1024 chars](https://github.com/dotnet/msbuild/pull/5553)
-- [Don't expand full drive globs with false condition](https://github.com/dotnet/msbuild/pull/5669)
 ### 16.10
 - [Error when a property expansion in a condition has whitespace](https://github.com/dotnet/msbuild/pull/5672)
 - [Allow Custom CopyToOutputDirectory Location With TargetPath](https://github.com/dotnet/msbuild/pull/6237)
 - [Allow users that have certain special characters in their username to build successfully when using exec](https://github.com/dotnet/msbuild/pull/6223)
 - [Fail restore operations when an SDK is unresolveable](https://github.com/dotnet/msbuild/pull/6430)
 ### 17.0
+- [Scheduler should honor BuildParameters.DisableInprocNode](https://github.com/dotnet/msbuild/pull/6400)
+- [Don't compile globbing regexes on .NET Framework](https://github.com/dotnet/msbuild/pull/6632)
+- [Default to transitively copying content items](https://github.com/dotnet/msbuild/pull/6622)
+- [Improve debugging experience: add global switch MSBuildDebugEngine; Inject binary logger from BuildManager; print static graph as .dot file](https://github.com/dotnet/msbuild/pull/6639)
 
 ## Change Waves No Longer In Rotation
+### 16.8
+- [Enable NoWarn](https://github.com/dotnet/msbuild/pull/5671)
+- [Truncate Target/Task skipped log messages to 1024 chars](https://github.com/dotnet/msbuild/pull/5553)
+- [Don't expand full drive globs with false condition](https://github.com/dotnet/msbuild/pull/5669)
diff --git a/documentation/wiki/Labels.md b/documentation/wiki/Labels.md
new file mode 100644
index 00000000000..7f65e10ad9b
--- /dev/null
+++ b/documentation/wiki/Labels.md
@@ -0,0 +1,12 @@
+# MSBuild Labels
+Here's a brief explanation on the labels most often used by the MSBuild team excluding hopefully self-evident ones such as `bug`.
+
+| Label             | Applied When | Notes |
+|-------------------|--------------|-------|
+| `needs-triage`    | Team has yet to determine what area/prioritization applies to the issue. | This is the primary label queried during a regular bug triage meeting. Automatically removed when `needs-more-info` is applied. |
+| `needs-attention` | An issue requires the team look at it during bug triage. | Automatically applied when a stale issue receives a comment. |
+| `needs-more-info` | Team asked for info needed to continue an investigation. | If no response is given within 7 days, the `stale` label is applied. |
+| `initial-investigation` | A member of the team does a "first pass" investigation. | `needs-triage` is applied and team member and unassigns themselves after the initial investigation is complete. |
+| `stale` | An issue marked with `needs-more-info` is inactive for 7 days. | The issue will be closed after 30 days of inactivity while the `stale` label is applied. |
+| `For consideration` | An issue should get higher prioritization when planning the next set of features. | |
+| `up-for-grabs` | Anyone can take ownership over this issue. | If a contributor wants to take the issue on, they should ask that it be assigned to them BEFORE doing development work.  |
diff --git a/documentation/wiki/Localization.md b/documentation/wiki/Localization.md
index e0d31a285b8..e58212cd5d9 100644
--- a/documentation/wiki/Localization.md
+++ b/documentation/wiki/Localization.md
@@ -35,17 +35,8 @@ Code completion ("IntelliSense") for MSBuild project files is provided minimally
 
 ### If there is a bug in XSD localization
 
-File xsd localization bugs in this repo. The MSBuild team will coordinate with the Visual Studio localization team to redirect it appropriately.
+File XSD localization bugs in this repo. The MSBuild team will coordinate with the Visual Studio localization team to redirect it appropriately.
 
 ### When an XSD has been updated
 
-After updating an XSD in the GitHub repo, someone with internal access must update the copy in the `VS` repo. To do so:
-
-1. Locally clone VS following the standard instructions.
-2. Locally update your clone of the GitHub msbuild repo to include the merge of the change.
-3. Start a new branch in the VS repository from the current working branch (probably `master`).
-4. Copy from the msbuild path `src/MSBuild/MSBuild/*.xsd` to the VS path `src/xmake/XMakeCommandLine`.
-5. Ensure that the commit message has a full link to the commit used to update the `.xsd` files, like `https://github.com/microsoft/msbuild/commit/ba9a1d64a7abf15a8505827c00413156a3eb7f62`.
-6. Push and submit through the usual VS PR process, including the `MSBuild` team as reviewers.
-
-Example PR doing this: https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/186890.
+After updating an XSD in the GitHub repo, the MSBuild-to-VS-repo insertion process automatically updates the canonical Visual Studio copy of the XSD.
diff --git a/eng/AfterSigning.targets b/eng/AfterSigning.targets
index e699c81e7dc..0bc6b1db9cd 100644
--- a/eng/AfterSigning.targets
+++ b/eng/AfterSigning.targets
@@ -1,5 +1,5 @@
 <Project>
-    <Target Name="CopyAMD64Symbols" Condition="'$(OfficialBuild)' == 'true'" BeforeTargets="Build">
+    <Target Name="CopyAMD64Symbols" Condition="'$(OfficialBuild)' == 'true' AND '$(ArcadeBuildFromSource)' != 'true'" BeforeTargets="Build">
         <Copy 
             SourceFiles="$(ArtifactsBinDir)MSBuild\x64\Release\net472\MSBuild.pdb"
             DestinationFolder="$(ArtifactsSymStoreDirectory)\MSBuild\net472\amd64"
diff --git a/eng/Analyzers.props b/eng/Analyzers.props
new file mode 100644
index 00000000000..2a523c21b2c
--- /dev/null
+++ b/eng/Analyzers.props
@@ -0,0 +1,7 @@
+<Project>
+  <PropertyGroup>
+    <CodeAnalysisRuleset>$(MSBuildThisFileDirectory)CodeAnalysis.ruleset</CodeAnalysisRuleset>
+    <!-- Disable analyzers in sourcebuild -->
+    <EnableAnalyzers Condition="'$(DotNetBuildFromSource)' == 'true'">false</EnableAnalyzers>
+  </PropertyGroup>
+</Project>
diff --git a/eng/BootStrapMSBuild.targets b/eng/BootStrapMSBuild.targets
index b379b227dd6..52c0b7ec043 100644
--- a/eng/BootStrapMSBuild.targets
+++ b/eng/BootStrapMSBuild.targets
@@ -154,7 +154,7 @@
     <!-- Copy our binaries to the x64 location. -->
      <Copy SourceFiles="@(FreshlyBuiltBinariesx64)"
           DestinationFiles="@(FreshlyBuiltBinariesx64 -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\Bin\amd64\%(RecursiveDir)%(Filename)%(Extension)')" />
-    
+
     <!-- Copy our freshly-built props and targets, overwriting anything we copied from the machine -->
     <Copy SourceFiles="@(FreshlyBuiltRootProjects)"
           DestinationFiles="@(FreshlyBuiltRootProjects -> '$(BootstrapDestination)$(TargetMSBuildToolsVersion)\%(Filename)%(Extension)')" />
@@ -190,10 +190,22 @@
     <Copy SourceFiles="@(InstalledSdks)"
           DestinationFiles="@(InstalledSdks -> '$(BootstrapDestination)Sdks\%(RecursiveDir)%(Filename)%(Extension)')" />
 
+    <!-- The .NET SDK has a dependency on DependencyModel, but relies on having it in the final
+         MSBuild.deps.json, which differs from ours because it's generated in the SDK repo.
+
+         Copy it from "next to MSBuild" in the pre-bootstrap SDK to our little weirdo bootstrap
+         layout next to the SDK tasks, so it can get loaded by the SDK tasks that need it. -->
+    <Copy SourceFiles="$(DOTNET_INSTALL_DIR)\sdk\$(DotNetCliVersion)\Microsoft.Extensions.DependencyModel.dll"
+          DestinationFolder="$(BootstrapDestination)Sdks\Microsoft.NET.Sdk\tools\net6.0" />
+
     <Copy SourceFiles="@(InstalledExtensions)"
           DestinationFolder="$(BootstrapDestination)Current\%(RecursiveDir)" />
 
     <Copy SourceFiles="@(_NuGetRuntimeDependencies)"
           DestinationFolder="$(BootstrapDestination)" />
+
+    <!-- Disable workload resolver until we can figure out whether it can work in the bootstrap
+         https://github.com/dotnet/msbuild/issues/6566 -->
+    <Touch Files="$(BootstrapDestination)\DisableWorkloadResolver.sentinel" AlwaysCreate="true" />
   </Target>
 </Project>
diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
new file mode 100644
index 00000000000..2078c42fe6c
--- /dev/null
+++ b/eng/CodeAnalysis.ruleset
@@ -0,0 +1,389 @@
+Ôªø<?xml version="1.0" encoding="utf-8"?>
+<RuleSet Name="Microsoft.Analyzers.ManagedCodeAnalysis" Description="Microsoft.Analyzers.ManagedCodeAnalysis" ToolsVersion="16.0">
+  <Rules AnalyzerId="Microsoft.DotNet.CodeAnalysis" RuleNamespace="Microsoft.DotNet.CodeAnalysis.Analyzers"> 
+    <Rule Id="BCL0001" Action="Warning" />         <!-- Ensure minimum API surface is respected --> 
+    <Rule Id="BCL0010" Action="Warning" />         <!-- AppContext default value expected to be true --> 
+    <Rule Id="BCL0011" Action="Warning" />         <!-- AppContext default value defined in if statement with incorrect pattern --> 
+    <Rule Id="BCL0012" Action="Warning" />         <!-- AppContext default value defined in if statement at root of switch case --> 
+    <Rule Id="BCL0015" Action="None" />            <!-- Invalid P/Invoke call --> 
+    <Rule Id="BCL0020" Action="Warning" />         <!-- Invalid SR.Format call --> 
+  </Rules> 
+  <Rules AnalyzerId="Microsoft.CodeAnalysis.NetAnalyzers" RuleNamespace="Microsoft.CodeAnalysis.NetAnalyzers"> 
+    <Rule Id="CA1000" Action="None" />             <!-- Do not declare static members on generic types --> 
+    <Rule Id="CA1001" Action="None" />             <!-- Types that own disposable fields should be disposable --> 
+    <Rule Id="CA1002" Action="None" />             <!-- Do not expose generic lists --> 
+    <Rule Id="CA1003" Action="None" />             <!-- Use generic event handler instances --> 
+    <Rule Id="CA1005" Action="None" />             <!-- Avoid excessive parameters on generic types --> 
+    <Rule Id="CA1008" Action="None" />             <!-- Enums should have zero value --> 
+    <Rule Id="CA1010" Action="None" />             <!-- Generic interface should also be implemented --> 
+    <Rule Id="CA1012" Action="None" />             <!-- Abstract types should not have constructors --> 
+    <Rule Id="CA1014" Action="None" />             <!-- Mark assemblies with CLSCompliant --> 
+    <Rule Id="CA1016" Action="None" />             <!-- Mark assemblies with assembly version --> 
+    <Rule Id="CA1017" Action="None" />             <!-- Mark assemblies with ComVisible --> 
+    <Rule Id="CA1018" Action="Warning" />          <!-- Mark attributes with AttributeUsageAttribute --> 
+    <Rule Id="CA1019" Action="None" />             <!-- Define accessors for attribute arguments --> 
+    <Rule Id="CA1024" Action="None" />             <!-- Use properties where appropriate --> 
+    <Rule Id="CA1027" Action="None" />             <!-- Mark enums with FlagsAttribute --> 
+    <Rule Id="CA1028" Action="None" />             <!-- Enum Storage should be Int32 --> 
+    <Rule Id="CA1030" Action="None" />             <!-- Use events where appropriate --> 
+    <Rule Id="CA1031" Action="None" />             <!-- Do not catch general exception types --> 
+    <Rule Id="CA1032" Action="None" />
+    <Rule Id="CA1033" Action="None" />             <!-- Interface methods should be callable by child types --> 
+    <Rule Id="CA1034" Action="None" />
+    <Rule Id="CA1036" Action="None" />             <!-- Override methods on comparable types --> 
+    <Rule Id="CA1040" Action="None" />             <!-- Avoid empty interfaces --> 
+    <Rule Id="CA1041" Action="None" />             <!-- Provide ObsoleteAttribute message --> 
+    <Rule Id="CA1043" Action="None" />             <!-- Use Integral Or String Argument For Indexers --> 
+    <Rule Id="CA1044" Action="None" />             <!-- Properties should not be write only --> 
+    <Rule Id="CA1046" Action="None" />             <!-- Do not overload equality operator on reference types --> 
+    <Rule Id="CA1047" Action="Warning" />          <!-- Do not declare protected member in sealed type --> 
+    <Rule Id="CA1050" Action="Info" />             <!-- Declare types in namespaces --> 
+    <Rule Id="CA1051" Action="None" />             <!-- Do not declare visible instance fields --> 
+    <Rule Id="CA1052" Action="None" />             <!-- Static holder types should be Static or NotInheritable --> 
+    <Rule Id="CA1054" Action="None" />             <!-- Uri parameters should not be strings --> 
+    <Rule Id="CA1055" Action="None" />             <!-- Uri return values should not be strings --> 
+    <Rule Id="CA1056" Action="None" />             <!-- Uri properties should not be strings --> 
+    <Rule Id="CA1058" Action="None" />             <!-- Types should not extend certain base types --> 
+    <Rule Id="CA1061" Action="None" />             <!-- Do not hide base class methods --> 
+    <Rule Id="CA1062" Action="None" />             <!-- Validate arguments of public methods --> 
+    <Rule Id="CA1063" Action="None" />             <!-- Implement IDisposable Correctly --> 
+    <Rule Id="CA1064" Action="None" />             <!-- Exceptions should be public --> 
+    <Rule Id="CA1065" Action="None" />             <!-- Do not raise exceptions in unexpected locations --> 
+    <Rule Id="CA1066" Action="None" />             <!-- Implement IEquatable when overriding Object.Equals --> 
+    <Rule Id="CA1067" Action="None" />             <!-- Override Object.Equals(object) when implementing IEquatable<T> --> 
+    <Rule Id="CA1068" Action="None" />             <!-- CancellationToken parameters must come last --> 
+    <Rule Id="CA1069" Action="None" />             <!-- Enums values should not be duplicated --> 
+    <Rule Id="CA1070" Action="Info" />             <!-- Do not declare event fields as virtual --> 
+    <Rule Id="CA1200" Action="Info" />             <!-- Avoid using cref tags with a prefix --> 
+    <Rule Id="CA1303" Action="None" />             <!-- Do not pass literals as localized parameters --> 
+    <Rule Id="CA1304" Action="None" />             <!-- Specify CultureInfo --> 
+    <Rule Id="CA1305" Action="None" />             <!-- Specify IFormatProvider --> 
+    <Rule Id="CA1307" Action="None" />             <!-- Specify StringComparison --> 
+    <Rule Id="CA1308" Action="None" />             <!-- Normalize strings to uppercase --> 
+    <Rule Id="CA1309" Action="None" />             <!-- Use ordinal stringcomparison --> 
+    <Rule Id="CA1401" Action="Warning" />          <!-- P/Invokes should not be visible --> 
+    <Rule Id="CA1417" Action="Warning" />          <!-- Do not use 'OutAttribute' on string parameters for P/Invokes --> 
+    <Rule Id="CA1502" Action="None" />             <!-- Avoid excessive complexity --> 
+    <Rule Id="CA1505" Action="None" />             <!-- Avoid unmaintainable code --> 
+    <Rule Id="CA1506" Action="None" />             <!-- Avoid excessive class coupling --> 
+    <Rule Id="CA1507" Action="Info" />             <!-- Use nameof to express symbol names --> 
+    <Rule Id="CA1508" Action="None" />             <!-- Avoid dead conditional code --> 
+    <Rule Id="CA1509" Action="None" />             <!-- Invalid entry in code metrics rule specification file --> 
+    <Rule Id="CA1700" Action="None" />             <!-- Do not name enum values 'Reserved' --> 
+    <Rule Id="CA1707" Action="None" />
+    <Rule Id="CA1710" Action="None" />             <!-- Identifiers should have correct suffix --> 
+    <Rule Id="CA1711" Action="None" />             <!-- Identifiers should not have incorrect suffix --> 
+    <Rule Id="CA1712" Action="None" />             <!-- Do not prefix enum values with type name --> 
+    <Rule Id="CA1714" Action="None" />
+    <Rule Id="CA1715" Action="None" />             <!-- Identifiers should have correct prefix --> 
+    <Rule Id="CA1716" Action="None" />             <!-- Identifiers should not match keywords --> 
+    <Rule Id="CA1717" Action="None" />
+    <Rule Id="CA1720" Action="None" />             <!-- Identifier contains type name --> 
+    <Rule Id="CA1721" Action="None" />             <!-- Property names should not match get methods --> 
+    <Rule Id="CA1724" Action="None" />             <!-- Type names should not match namespaces --> 
+    <Rule Id="CA1801" Action="None" />             <!-- Review unused parameters --> 
+    <Rule Id="CA1802" Action="Info" />             <!-- Use literals where appropriate --> 
+    <Rule Id="CA1805" Action="Info" />             <!-- Do not initialize unnecessarily --> 
+    <Rule Id="CA1806" Action="None" />
+    <Rule Id="CA1810" Action="Info" />             <!-- Initialize reference type static fields inline --> 
+    <Rule Id="CA1812" Action="None" />             <!-- Avoid uninstantiated internal classes --> 
+    <Rule Id="CA1814" Action="None" />
+    <Rule Id="CA1815" Action="None" />
+    <Rule Id="CA1816" Action="None" />             <!-- Dispose methods should call SuppressFinalize --> 
+    <Rule Id="CA1819" Action="None" />
+    <Rule Id="CA1820" Action="None" />             <!-- Test for empty strings using string length --> 
+    <Rule Id="CA1821" Action="Warning" />          <!-- Remove empty Finalizers --> 
+    <Rule Id="CA1822" Action="None" />             <!-- Mark members as static --> 
+    <Rule Id="CA1823" Action="Info" />             <!-- Avoid unused private fields --> 
+    <Rule Id="CA1824" Action="Warning" />          <!-- Mark assemblies with NeutralResourcesLanguageAttribute -->
+    <Rule Id="CA1825" Action="Info" />             <!-- Avoid zero-length array allocations. --> 
+    <Rule Id="CA1827" Action="Warning" />          <!-- Do not use Count() or LongCount() when Any() can be used --> 
+    <Rule Id="CA1828" Action="Warning" />          <!-- Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used --> 
+    <Rule Id="CA1829" Action="Info" />             <!-- Use Length/Count property instead of Count() when available --> 
+    <Rule Id="CA1830" Action="Warning" />          <!-- Prefer strongly-typed Append and Insert method overloads on StringBuilder. --> 
+    <Rule Id="CA1831" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
+    <Rule Id="CA1832" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
+    <Rule Id="CA1833" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
+    <Rule Id="CA1834" Action="Info" />             <!-- Consider using 'StringBuilder.Append(char)' when applicable. --> 
+    <Rule Id="CA1835" Action="Info" />             <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' --> 
+    <Rule Id="CA1836" Action="Info" />             <!-- Prefer IsEmpty over Count --> 
+    <Rule Id="CA1837" Action="Info" />             <!-- Use 'Environment.ProcessId' -->  
+    <Rule Id="CA1838" Action="Info" />             <!-- Avoid 'StringBuilder' parameters for P/Invokes --> 
+    <Rule Id="CA2000" Action="None" />             <!-- Dispose objects before losing scope --> 
+    <Rule Id="CA2002" Action="None" />             <!-- Do not lock on objects with weak identity --> 
+    <Rule Id="CA2007" Action="Info" />             <!-- Consider calling ConfigureAwait on the awaited task --> 
+    <Rule Id="CA2008" Action="Info" />             <!-- Do not create tasks without passing a TaskScheduler --> 
+    <Rule Id="CA2009" Action="Warning" />          <!-- Do not call ToImmutableCollection on an ImmutableCollection value --> 
+    <Rule Id="CA2011" Action="Warning" />          <!-- Avoid infinite recursion --> 
+    <Rule Id="CA2012" Action="Warning" />          <!-- Use ValueTasks correctly --> 
+    <Rule Id="CA2013" Action="Warning" />          <!-- Do not use ReferenceEquals with value types --> 
+    <Rule Id="CA2014" Action="Warning" />          <!-- Do not use stackalloc in loops. --> 
+    <Rule Id="CA2015" Action="Warning" />          <!-- Do not define finalizers for types derived from MemoryManager<T> --> 
+    <Rule Id="CA2016" Action="Info" />             <!-- Forward the 'CancellationToken' parameter to methods that take one --> 
+    <Rule Id="CA2100" Action="None" />             <!-- Review SQL queries for security vulnerabilities --> 
+    <Rule Id="CA2101" Action="None" />             <!-- Specify marshaling for P/Invoke string arguments --> 
+    <Rule Id="CA2109" Action="None" />             <!-- Review visible event handlers --> 
+    <Rule Id="CA2119" Action="None" />             <!-- Seal methods that satisfy private interfaces --> 
+    <Rule Id="CA2153" Action="None" />             <!-- Do Not Catch Corrupted State Exceptions --> 
+    <Rule Id="CA2201" Action="None" />             <!-- Do not raise reserved exception types --> 
+    <Rule Id="CA2208" Action="Info" />             <!-- Instantiate argument exceptions correctly --> 
+    <Rule Id="CA2211" Action="None" />             <!-- Non-constant fields should not be visible --> 
+    <Rule Id="CA2213" Action="None" />             <!-- Disposable fields should be disposed --> 
+    <Rule Id="CA2215" Action="None" />             <!-- Dispose methods should call base class dispose --> 
+    <Rule Id="CA2216" Action="None" />             <!-- Disposable types should declare finalizer --> 
+    <Rule Id="CA2219" Action="None" />
+    <Rule Id="CA2224" Action="None" />             <!-- Override Equals on overloading operator equals --> 
+    <Rule Id="CA2225" Action="None" />             <!-- Operator overloads have named alternates --> 
+    <Rule Id="CA2226" Action="None" />             <!-- Operators should have symmetrical overloads --> 
+    <Rule Id="CA2227" Action="None" />             <!-- Collection properties should be read only --> 
+    <Rule Id="CA2231" Action="None" />             <!-- Overload operator equals on overriding value type Equals --> 
+    <Rule Id="CA2234" Action="None" />             <!-- Pass system uri objects instead of strings --> 
+    <Rule Id="CA2235" Action="None" />             <!-- Mark all non-serializable fields --> 
+    <Rule Id="CA2241" Action="Info" />             <!-- Provide correct arguments to formatting methods --> 
+    <Rule Id="CA2242" Action="Warning" />          <!-- Test for NaN correctly --> 
+    <Rule Id="CA2243" Action="None" />             <!-- Attribute string literals should parse correctly --> 
+    <Rule Id="CA2244" Action="None" />             <!-- Do not duplicate indexed element initializations --> 
+    <Rule Id="CA2245" Action="Warning" />          <!-- Do not assign a property to itself. --> 
+    <Rule Id="CA2246" Action="None" />             <!-- Assigning symbol and its member in the same statement. --> 
+    <Rule Id="CA2247" Action="Warning" />          <!-- Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum. --> 
+    <Rule Id="CA2248" Action="Warning" />          <!-- Provide correct 'enum' argument to 'Enum.HasFlag' --> 
+    <Rule Id="CA2249" Action="Info" />             <!-- Consider using 'string.Contains' instead of 'string.IndexOf' --> 
+    <Rule Id="CA2300" Action="None" />             <!-- Do not use insecure deserializer BinaryFormatter --> 
+    <Rule Id="CA2301" Action="None" />             <!-- Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder --> 
+    <Rule Id="CA2302" Action="None" />             <!-- Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize --> 
+    <Rule Id="CA2305" Action="None" />             <!-- Do not use insecure deserializer LosFormatter --> 
+    <Rule Id="CA2310" Action="None" />             <!-- Do not use insecure deserializer NetDataContractSerializer --> 
+    <Rule Id="CA2311" Action="None" />             <!-- Do not deserialize without first setting NetDataContractSerializer.Binder --> 
+    <Rule Id="CA2312" Action="None" />             <!-- Ensure NetDataContractSerializer.Binder is set before deserializing --> 
+    <Rule Id="CA2315" Action="None" />             <!-- Do not use insecure deserializer ObjectStateFormatter --> 
+    <Rule Id="CA2321" Action="None" />             <!-- Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver --> 
+    <Rule Id="CA2322" Action="None" />             <!-- Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing --> 
+    <Rule Id="CA2326" Action="None" />             <!-- Do not use TypeNameHandling values other than None --> 
+    <Rule Id="CA2350" Action="None" />             <!-- Do not use DataTable.ReadXml() with untrusted data --> 
+    <Rule Id="CA2351" Action="None" />             <!-- Do not use DataSet.ReadXml() with untrusted data --> 
+    <Rule Id="CA2352" Action="None" />             <!-- Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks --> 
+    <Rule Id="CA2353" Action="None" />             <!-- Unsafe DataSet or DataTable in serializable type --> 
+    <Rule Id="CA2354" Action="None" />             <!-- Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks --> 
+    <Rule Id="CA2355" Action="None" />             <!-- Unsafe DataSet or DataTable type found in deserializable object graph --> 
+    <Rule Id="CA2356" Action="None" />             <!-- Unsafe DataSet or DataTable type in web deserializable object graph --> 
+    <Rule Id="CA2361" Action="None" />             <!-- Ensure autogenerated class containing DataSet.ReadXml() is not used with untrusted data --> 
+    <Rule Id="CA2362" Action="None" />             <!-- Unsafe DataSet or DataTable in autogenerated serializable type can be vulnerable to remote code execution attacks --> 
+    <Rule Id="CA3001" Action="None" />             <!-- Review code for SQL injection vulnerabilities --> 
+    <Rule Id="CA3002" Action="None" />             <!-- Review code for XSS vulnerabilities --> 
+    <Rule Id="CA3003" Action="None" />             <!-- Review code for file path injection vulnerabilities --> 
+    <Rule Id="CA3004" Action="None" />             <!-- Review code for information disclosure vulnerabilities --> 
+    <Rule Id="CA3005" Action="None" />             <!-- Review code for LDAP injection vulnerabilities --> 
+    <Rule Id="CA3006" Action="None" />             <!-- Review code for process command injection vulnerabilities --> 
+    <Rule Id="CA3007" Action="None" />             <!-- Review code for open redirect vulnerabilities --> 
+    <Rule Id="CA3008" Action="None" />             <!-- Review code for XPath injection vulnerabilities --> 
+    <Rule Id="CA3009" Action="None" />             <!-- Review code for XML injection vulnerabilities --> 
+    <Rule Id="CA3010" Action="None" />             <!-- Review code for XAML injection vulnerabilities --> 
+    <Rule Id="CA3011" Action="None" />             <!-- Review code for DLL injection vulnerabilities --> 
+    <Rule Id="CA3012" Action="None" />             <!-- Review code for regex injection vulnerabilities --> 
+    <Rule Id="CA3061" Action="Warning" />          <!-- Do Not Add Schema By URL --> 
+    <Rule Id="CA3075" Action="Warning" />          <!-- Insecure DTD processing in XML --> 
+    <Rule Id="CA3076" Action="Warning" />          <!-- Insecure XSLT script processing. --> 
+    <Rule Id="CA3077" Action="Warning" />          <!-- Insecure Processing in API Design, XmlDocument and XmlTextReader --> 
+    <Rule Id="CA3147" Action="Warning" />          <!-- Mark Verb Handlers With Validate Antiforgery Token --> 
+    <Rule Id="CA5350" Action="Warning" />          <!-- Do Not Use Weak Cryptographic Algorithms --> 
+    <Rule Id="CA5351" Action="Warning" />          <!-- Do Not Use Broken Cryptographic Algorithms --> 
+    <Rule Id="CA5358" Action="None" />             <!-- Review cipher mode usage with cryptography experts --> 
+    <Rule Id="CA5359" Action="Warning" />          <!-- Do Not Disable Certificate Validation --> 
+    <Rule Id="CA5360" Action="Warning" />          <!-- Do Not Call Dangerous Methods In Deserialization --> 
+    <Rule Id="CA5361" Action="Warning" />          <!-- Do Not Disable SChannel Use of Strong Crypto --> 
+    <Rule Id="CA5362" Action="None" />             <!-- Potential reference cycle in deserialized object graph --> 
+    <Rule Id="CA5363" Action="Warning" />          <!-- Do Not Disable Request Validation --> 
+    <Rule Id="CA5364" Action="Warning" />          <!-- Do Not Use Deprecated Security Protocols --> 
+    <Rule Id="CA5365" Action="Warning" />          <!-- Do Not Disable HTTP Header Checking --> 
+    <Rule Id="CA5366" Action="None" />             <!-- Use XmlReader For DataSet Read Xml --> 
+    <Rule Id="CA5367" Action="None" />             <!-- Do Not Serialize Types With Pointer Fields --> 
+    <Rule Id="CA5368" Action="Warning" />          <!-- Set ViewStateUserKey For Classes Derived From Page --> 
+    <Rule Id="CA5369" Action="None" />             <!-- Use XmlReader For Deserialize --> 
+    <Rule Id="CA5370" Action="Warning" />          <!-- Use XmlReader For Validating Reader --> 
+    <Rule Id="CA5371" Action="None" />             <!-- Use XmlReader For Schema Read --> 
+    <Rule Id="CA5372" Action="None" />             <!-- Use XmlReader For XPathDocument --> 
+    <Rule Id="CA5373" Action="Warning" />          <!-- Do not use obsolete key derivation function --> 
+    <Rule Id="CA5374" Action="Warning" />          <!-- Do Not Use XslTransform --> 
+    <Rule Id="CA5375" Action="None" />             <!-- Do Not Use Account Shared Access Signature --> 
+    <Rule Id="CA5376" Action="Warning" />          <!-- Use SharedAccessProtocol HttpsOnly --> 
+    <Rule Id="CA5377" Action="Warning" />          <!-- Use Container Level Access Policy --> 
+    <Rule Id="CA5378" Action="Warning" />          <!-- Do not disable ServicePointManagerSecurityProtocols --> 
+    <Rule Id="CA5379" Action="Warning" />          <!-- Do Not Use Weak Key Derivation Function Algorithm --> 
+    <Rule Id="CA5380" Action="Warning" />          <!-- Do Not Add Certificates To Root Store --> 
+    <Rule Id="CA5381" Action="Warning" />          <!-- Ensure Certificates Are Not Added To Root Store --> 
+    <Rule Id="CA5382" Action="None" />             <!-- Use Secure Cookies In ASP.Net Core --> 
+    <Rule Id="CA5383" Action="None" />             <!-- Ensure Use Secure Cookies In ASP.Net Core --> 
+    <Rule Id="CA5384" Action="Warning" />          <!-- Do Not Use Digital Signature Algorithm (DSA) --> 
+    <Rule Id="CA5385" Action="Warning" />          <!-- Use Rivest‚ÄìShamir‚ÄìAdleman (RSA) Algorithm With Sufficient Key Size --> 
+    <Rule Id="CA5386" Action="None" />             <!-- Avoid hardcoding SecurityProtocolType value --> 
+    <Rule Id="CA5387" Action="None" />             <!-- Do Not Use Weak Key Derivation Function With Insufficient Iteration Count --> 
+    <Rule Id="CA5388" Action="None" />             <!-- Ensure Sufficient Iteration Count When Using Weak Key Derivation Function --> 
+    <Rule Id="CA5389" Action="None" />             <!-- Do Not Add Archive Item's Path To The Target File System Path --> 
+    <Rule Id="CA5390" Action="None" />             <!-- Do not hard-code encryption key --> 
+    <Rule Id="CA5391" Action="None" />             <!-- Use antiforgery tokens in ASP.NET Core MVC controllers --> 
+    <Rule Id="CA5392" Action="None" />             <!-- Use DefaultDllImportSearchPaths attribute for P/Invokes --> 
+    <Rule Id="CA5393" Action="None" />             <!-- Do not use unsafe DllImportSearchPath value --> 
+    <Rule Id="CA5394" Action="None" />             <!-- Do not use insecure randomness --> 
+    <Rule Id="CA5395" Action="None" />             <!-- Miss HttpVerb attribute for action methods --> 
+    <Rule Id="CA5396" Action="None" />             <!-- Set HttpOnly to true for HttpCookie --> 
+    <Rule Id="CA5397" Action="None" />             <!-- Do not use deprecated SslProtocols values --> 
+    <Rule Id="CA5398" Action="None" />             <!-- Avoid hardcoded SslProtocols values --> 
+    <Rule Id="CA5399" Action="None" />             <!-- HttpClients should enable certificate revocation list checks --> 
+    <Rule Id="CA5400" Action="None" />             <!-- Ensure HttpClient certificate revocation list check is not disabled --> 
+    <Rule Id="CA5401" Action="None" />             <!-- Do not use CreateEncryptor with non-default IV --> 
+    <Rule Id="CA5402" Action="None" />             <!-- Use CreateEncryptor with the default IV  --> 
+    <Rule Id="CA5403" Action="None" />             <!-- Do not hard-code certificate --> 
+    <Rule Id="IL3000" Action="None" />             <!-- Avoid using accessing Assembly file path when publishing as a single-file --> 
+    <Rule Id="IL3001" Action="None" />             <!-- Avoid using accessing Assembly file path when publishing as a single-file --> 
+  </Rules> 
+  <Rules AnalyzerId="StyleCop.Analyzers" RuleNamespace="StyleCop.Analyzers"> 
+    <Rule Id="AD0001" Action="Info" /> <!-- Analyzer threw an exception --> 
+    <Rule Id="SA0001" Action="Info" /> <!-- XML comments --> 
+    <Rule Id="SA1000" Action="None" />
+    <Rule Id="SA1001" Action="None" />
+    <Rule Id="SA1002" Action="Info" /> <!-- Semicolons should not be preceded by a space --> 
+    <Rule Id="SA1003" Action="None" />
+    <Rule Id="SA1004" Action="Info" /> <!-- Documentation line should begin with a space --> 
+    <Rule Id="SA1005" Action="Info" /> <!-- Single line comment should begin with a space -->
+    <Rule Id="SA1006" Action="Info" /> <!-- Region should not be preceded by a space -->
+    <Rule Id="SA1008" Action="Info" /> <!-- Opening parenthesis should not be preceded by a space --> 
+    <Rule Id="SA1009" Action="Info" /> <!-- Closing parenthesis should not be followed by a space --> 
+    <Rule Id="SA1010" Action="Info" /> <!-- Opening square brackets should not be preceded by a space --> 
+    <Rule Id="SA1011" Action="Info" /> <!-- Closing square bracket should be followed by a space --> 
+    <Rule Id="SA1012" Action="Info" /> <!-- Opening brace should be followed by a space --> 
+    <Rule Id="SA1013" Action="Info" /> <!-- Closing brace should be preceded by a space --> 
+    <Rule Id="SA1015" Action="Info" /> <!-- Closing generic bracket should not be followed by a space --> 
+    <Rule Id="SA1019" Action="None" />
+    <Rule Id="SA1021" Action="Info" /> <!-- Negative sign should be preceded by a space --> 
+    <Rule Id="SA1023" Action="Info" /> <!-- Dereference symbol '*' should not be preceded by a space." --> 
+    <Rule Id="SA1024" Action="Info" /> <!-- Colon should be followed by a space --> 
+    <Rule Id="SA1025" Action="Info" /> <!-- Code should not contain multiple whitespace characters in a row --> 
+    <Rule Id="SA1026" Action="None" />
+    <Rule Id="SA1027" Action="None" />
+    <Rule Id="SA1028" Action="None" />
+    <Rule Id="SA1100" Action="Info" /> <!-- Do not prefix calls with base unless local implementation exists --> 
+    <Rule Id="SA1101" Action="None" />
+    <Rule Id="SA1102" Action="Info" />
+    <Rule Id="SA1106" Action="Info" /> <!-- Code should not contain empty statements --> 
+    <Rule Id="SA1107" Action="Info" /> <!-- Code should not contain multiple statements on one line --> 
+    <Rule Id="SA1108" Action="None" />
+    <Rule Id="SA1110" Action="Info" /> <!-- Opening parenthesis or bracket should be on declaration line --> 
+    <Rule Id="SA1111" Action="Info" /> <!-- Closing parenthesis should be on line of last parameter --> 
+    <Rule Id="SA1112" Action="None" />
+    <Rule Id="SA1113" Action="None" />
+    <Rule Id="SA1114" Action="Info" /> <!-- Parameter list should follow declaration --> 
+    <Rule Id="SA1115" Action="None" />
+    <Rule Id="SA1116" Action="Info" /> <!-- Split parameters should start on line after declaration --> 
+    <Rule Id="SA1117" Action="Info" /> <!-- Parameters should be on same line or separate lines --> 
+    <Rule Id="SA1118" Action="None" />
+    <Rule Id="SA1119" Action="None" />
+    <Rule Id="SA1120" Action="Info" /> <!-- Comments should contain text --> 
+    <Rule Id="SA1121" Action="None" />
+    <Rule Id="SA1122" Action="Info" /> <!-- Use string.Empty for empty strings --> 
+    <Rule Id="SA1123" Action="Info" /> <!-- Region should not be located within a code element --> 
+    <Rule Id="SA1124" Action="None" />
+    <Rule Id="SA1125" Action="Info" /> <!-- Use shorthand for nullable types --> 
+    <Rule Id="SA1127" Action="Info" /> <!-- Generic type constraints should be on their own line --> 
+    <Rule Id="SA1128" Action="Info" /> <!-- Put constructor initializers on their own line --> 
+    <Rule Id="SA1129" Action="None" />
+    <Rule Id="SA1130" Action="Info" /> <!-- Use lambda syntax --> 
+    <Rule Id="SA1131" Action="Info" /> <!-- Constant values should appear on the right-hand side of comparisons --> 
+    <Rule Id="SA1132" Action="Info" /> <!-- Do not combine fields --> 
+    <Rule Id="SA1133" Action="Info" /> <!-- Do not combine attributes --> 
+    <Rule Id="SA1134" Action="Info" /> <!-- Each attribute should be placed on its own line of code --> 
+    <Rule Id="SA1135" Action="Info" /> <!-- Using directive should be qualified --> 
+    <Rule Id="SA1136" Action="Info" /> <!-- Enum values should be on separate lines --> 
+    <Rule Id="SA1137" Action="Info" /> <!-- Elements should have the same indentation --> 
+    <Rule Id="SA1139" Action="None" />
+    <Rule Id="SA1200" Action="None" />
+    <Rule Id="SA1201" Action="Info" /> <!-- Elements should appear in the correct order --> 
+    <Rule Id="SA1202" Action="Info" /> <!-- Elements should be ordered by access --> 
+    <Rule Id="SA1203" Action="Info" /> <!-- Constants should appear before fields --> 
+    <Rule Id="SA1204" Action="Info" /> <!-- Static elements should appear before instance elements --> 
+    <Rule Id="SA1205" Action="None" />
+    <Rule Id="SA1206" Action="None" />
+    <Rule Id="SA1208" Action="Info" /> <!-- Using directive ordering --> 
+    <Rule Id="SA1209" Action="Info" /> <!-- Using alias directives should be placed after all using namespace directives --> 
+    <Rule Id="SA1210" Action="Info" /> <!-- Using directives should be ordered alphabetically by the namespaces --> 
+    <Rule Id="SA1211" Action="Info" /> <!-- Using alias directive ordering --> 
+    <Rule Id="SA1212" Action="None" />
+    <Rule Id="SA1214" Action="Info" /> <!-- Readonly fields should appear before non-readonly fields --> 
+    <Rule Id="SA1216" Action="Info" /> <!-- Using static directives should be placed at the correct location --> 
+    <Rule Id="SA1300" Action="Info" /> <!-- Element should begin with an uppercase letter --> 
+    <Rule Id="SA1303" Action="Info" /> <!-- Const field names should begin with upper-case letter --> 
+    <Rule Id="SA1304" Action="Info" /> <!-- Non-private readonly fields should begin with upper-case letter --> 
+    <Rule Id="SA1306" Action="Info" /> <!-- Field should begin with lower-case letter --> 
+    <Rule Id="SA1307" Action="None" />
+    <Rule Id="SA1308" Action="Info" /> <!-- Field should not begin with the prefix 's_' --> 
+    <Rule Id="SA1309" Action="None" />
+    <Rule Id="SA1310" Action="None" />
+    <Rule Id="SA1311" Action="Info" /> <!-- Static readonly fields should begin with upper-case letter --> 
+    <Rule Id="SA1312" Action="Info" /> <!-- Variable should begin with lower-case letter --> 
+    <Rule Id="SA1313" Action="Info" /> <!-- Parameter should begin with lower-case letter --> 
+    <Rule Id="SA1314" Action="None" />
+    <Rule Id="SA1316" Action="Info" /> <!-- Tuple element names should use correct casing --> 
+    <Rule Id="SA1400" Action="None" />
+    <Rule Id="SA1401" Action="Info" /> <!-- Fields should be private --> 
+    <Rule Id="SA1402" Action="Info" /> <!-- File may only contain a single type --> 
+    <Rule Id="SA1403" Action="Info" /> <!-- File may only contain a single namespace --> 
+    <Rule Id="SA1404" Action="Info" /> <!-- Code analysis suppression should have justification --> 
+    <Rule Id="SA1405" Action="Info" /> <!-- Debug.Assert should provide message text --> 
+    <Rule Id="SA1407" Action="Info" /> <!-- Arithmetic expressions should declare precedence --> 
+    <Rule Id="SA1408" Action="Info" /> <!-- Conditional expressions should declare precedence --> 
+    <Rule Id="SA1410" Action="None" />
+    <Rule Id="SA1411" Action="None" />
+    <Rule Id="SA1413" Action="Info" /> <!-- Use trailing comma in multi-line initializers --> 
+    <Rule Id="SA1414" Action="Info" /> <!-- Tuple types in signatures should have element names --> 
+    <Rule Id="SA1500" Action="Info" /> <!-- Braces for multi-line statements should not share line --> 
+    <Rule Id="SA1501" Action="Info" /> <!-- Statement should not be on a single line --> 
+    <Rule Id="SA1502" Action="Info" /> <!-- Element should not be on a single line --> 
+    <Rule Id="SA1503" Action="Info" /> <!-- Braces should not be omitted --> 
+    <Rule Id="SA1504" Action="Info" /> <!-- All accessors should be single-line or multi-line --> 
+    <Rule Id="SA1505" Action="Info" /> <!-- An opening brace should not be followed by a blank line --> 
+    <Rule Id="SA1506" Action="Info" /> <!-- Element documentation headers should not be followed by blank line --> 
+    <Rule Id="SA1507" Action="Info" /> <!-- Code should not contain multiple blank lines in a row --> 
+    <Rule Id="SA1508" Action="Info" /> <!-- A closing brace should not be preceded by a blank line --> 
+    <Rule Id="SA1509" Action="Info" /> <!-- Opening braces should not be preceded by blank line --> 
+    <Rule Id="SA1510" Action="Info" /> <!-- 'else' statement should not be preceded by a blank line --> 
+    <Rule Id="SA1512" Action="Info" /> <!-- Single-line comments should not be followed by blank line --> 
+    <Rule Id="SA1513" Action="Info" /> <!-- Closing brace should be followed by blank line --> 
+    <Rule Id="SA1514" Action="Info" /> <!-- Element documentation header should be preceded by blank line --> 
+    <Rule Id="SA1515" Action="Info" /> <!-- Single-line comment should be preceded by blank line --> 
+    <Rule Id="SA1516" Action="Info" /> <!-- Elements should be separated by blank line --> 
+    <Rule Id="SA1517" Action="None" />
+    <Rule Id="SA1518" Action="Info" /> <!-- Code should not contain blank lines at the end of the file -->
+    <Rule Id="SA1519" Action="Info" /> <!-- Braces should not be omitted from multi-line child statement --> 
+    <Rule Id="SA1520" Action="Info" /> <!-- Use braces consistently --> 
+    <Rule Id="SA1600" Action="None" />
+    <Rule Id="SA1601" Action="Info" /> <!-- Partial elements should be documented --> 
+    <Rule Id="SA1602" Action="Info" /> <!-- Enumeration items should be documented --> 
+    <Rule Id="SA1604" Action="Info" /> <!-- Element documentation should have summary --> 
+    <Rule Id="SA1605" Action="Info" /> <!-- Partial element documentation should have summary --> 
+    <Rule Id="SA1606" Action="Info" /> <!-- Element documentation should have summary text --> 
+    <Rule Id="SA1608" Action="Info" /> <!-- Element documentation should not have default summary --> 
+    <Rule Id="SA1610" Action="Info" /> <!-- Property documentation should have value text --> 
+    <Rule Id="SA1611" Action="Info" /> <!-- The documentation for parameter 'message' is missing --> 
+    <Rule Id="SA1612" Action="Info" /> <!-- The parameter documentation is at incorrect position --> 
+    <Rule Id="SA1614" Action="Info" /> <!-- Element parameter documentation should have text --> 
+    <Rule Id="SA1615" Action="None" />
+    <Rule Id="SA1616" Action="Info" /> <!-- Element return value documentation should have text --> 
+    <Rule Id="SA1617" Action="None" />
+    <Rule Id="SA1618" Action="Info" /> <!-- The documentation for type parameter is missing --> 
+    <Rule Id="SA1619" Action="Info" /> <!-- The documentation for type parameter is missing --> 
+    <Rule Id="SA1622" Action="Info" /> <!-- Generic type parameter documentation should have text --> 
+    <Rule Id="SA1623" Action="Info" /> <!-- Property documentation text --> 
+    <Rule Id="SA1624" Action="Info" /> <!-- Because the property only contains a visible get accessor, the documentation summary text should begin with 'Gets' --> 
+    <Rule Id="SA1625" Action="None" />
+    <Rule Id="SA1626" Action="Info" /> <!-- Single-line comments should not use documentation style slashes --> 
+    <Rule Id="SA1627" Action="Info" /> <!-- The documentation text within the \'exception\' tag should not be empty --> 
+    <Rule Id="SA1629" Action="Info" /> <!-- Documentation text should end with a period --> 
+    <Rule Id="SA1633" Action="Info" /> <!-- File should have header --> 
+    <Rule Id="SA1642" Action="Info" /> <!-- Constructor summary documentation should begin with standard text --> 
+    <Rule Id="SA1643" Action="Info" /> <!-- Destructor summary documentation should begin with standard text --> 
+    <Rule Id="SA1649" Action="Info" /> <!-- File name should match first type name --> 
+    <Rule Id="SA1652" Action="None" />
+  </Rules> 
+  <Rules AnalyzerId="xunit.analyzers" RuleNamespace="xunit.analyzers"> 
+    <Rule Id="xUnit2013" Action="None" /> <!-- Do not use equality check to check for collection size. --> 
+  </Rules> 
+</RuleSet> 
diff --git a/eng/Packages.props b/eng/Packages.props
index d6917bd7207..eb0144f9b65 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -9,8 +9,10 @@
     <PackageReference Update="LargeAddressAware" Version="1.0.5" />
     <PackageReference Update="Microsoft.Build.NuGetSdkResolver" Version="$(NuGetBuildTasksVersion)" />
     <PackageReference Update="Microsoft.CodeAnalysis.Build.Tasks" Version="$(MicrosoftNetCompilersToolsetVersion)" />
+    <PackageReference Update="Microsoft.CodeAnalysis.Collections" Version="4.0.0-4.21379.20" />
+    <PackageReference Update="Microsoft.CodeQuality.Analyzers" Version="3.3.0" PrivateAssets="all" />
     <PackageReference Update="Microsoft.DotNet.GenAPI" Version="2.1.0-prerelease-02404-02" />
-    <PackageReference Update="Microsoft.Extensions.DependencyModel" Version="2.1.0" />
+    <PackageReference Update="Microsoft.DotNet.XUnitExtensions" Version="$(MicrosoftDotNetXUnitExtensionsVersion)" />
     <PackageReference Update="Microsoft.Net.Compilers.Toolset" Version="$(MicrosoftNetCompilersToolsetVersion)" />
     <PackageReference Update="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Version="15.0.15" />
     <PackageReference Update="Microsoft.VisualStudio.Setup.Configuration.Interop" Version="1.16.30" />
@@ -20,35 +22,34 @@
     <PackageReference Update="PdbGit" Version="3.0.41" />
     <PackageReference Update="Shouldly" Version="3.0.0" />
     <PackageReference Update="SourceLink.Create.CommandLine" Version="2.1.2" />
+    <PackageReference Update="StyleCop.Analyzers" Version="1.2.0-beta.164" PrivateAssets="all" />
     <PackageReference Update="System.CodeDom" Version="4.4.0" />
     <PackageReference Update="System.Collections.Immutable" Version="5.0.0" />
     <PackageReference Update="System.Configuration.ConfigurationManager" Version="4.7.0" />
+    <PackageReference Update="System.Net.Http" Version="4.3.4" />
     <PackageReference Update="System.Memory" Version="4.5.4" />
     <PackageReference Update="System.Reflection.Metadata" Version="1.6.0" />
-    <PackageReference Update="System.Resources.Extensions" Version="4.6.0" />
+    <PackageReference Update="System.Resources.Extensions" Version="$(SystemResourcesExtensionsPackageVersion)" />
     <PackageReference Update="System.Runtime.CompilerServices.Unsafe" Version="5.0.0"/>
     <PackageReference Update="System.Security.Cryptography.Pkcs" Version="4.7.0" />
     <PackageReference Update="System.Security.Cryptography.Xml" Version="4.7.0" />
     <PackageReference Update="System.Security.Permissions" Version="4.7.0" />
     <PackageReference Update="System.Security.Principal.Windows" Version="4.7.0" />
     <PackageReference Update="System.Text.Encoding.CodePages" Version="4.0.1" />
-    <PackageReference Update="System.Text.Json" Version="4.7.0" />
+    <PackageReference Update="System.Text.Json" Version="5.0.2" />
     <PackageReference Update="System.Threading.Tasks.Dataflow" Version="4.9.0" />
     <PackageReference Update="xunit.assert" Version="$(XUnitVersion)" />
     <PackageReference Update="xunit.console" Version="$(XUnitVersion)" />
     <PackageReference Update="xunit.core" Version="$(XUnitVersion)" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(MonoBuild)' == 'true' or $([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp2.1'))">
-    <PackageReference Update="Microsoft.Extensions.DependencyModel" Version="5.0.0"/>
-  </ItemGroup>
-
   <ItemGroup Condition="'$(DotNetBuildFromSource)' != 'true'">
     <GlobalPackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.0" PrivateAssets="All"/>
   </ItemGroup>
 
   <ItemGroup>
     <GlobalPackageReference Include="Microsoft.VisualStudio.SDK.EmbedInteropTypes" Version="15.0.15" PrivateAssets="All" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" />
+    <GlobalPackageReference Include="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="$(MicrosoftCodeAnalysisBannedApiAnalyzersVersion)" />
   </ItemGroup>
 
 </Project>
diff --git a/eng/Signing.props b/eng/Signing.props
index 8969d795fee..66347f3d9d1 100644
--- a/eng/Signing.props
+++ b/eng/Signing.props
@@ -1,5 +1,9 @@
 <Project>
-    <ItemGroup>
-		<ItemsToSign Include="$(VisualStudioSetupInsertionPath)Microsoft.Build.UnGAC.exe" />
-	</ItemGroup>
+  <ItemGroup>
+    <ItemsToSign Include="$(VisualStudioSetupInsertionPath)Microsoft.Build.UnGAC.exe" />
+  </ItemGroup>
+    
+  <PropertyGroup>
+    <UseDotNetCertificate>true</UseDotNetCertificate>
+  </PropertyGroup>
 </Project>
\ No newline at end of file
diff --git a/eng/SourceBuild.props b/eng/SourceBuild.props
new file mode 100644
index 00000000000..d0989ae9c8b
--- /dev/null
+++ b/eng/SourceBuild.props
@@ -0,0 +1,14 @@
+<Project>
+
+  <PropertyGroup>
+    <GitHubRepositoryName>msbuild</GitHubRepositoryName>
+    <SourceBuildManagedOnly>true</SourceBuildManagedOnly>
+  </PropertyGroup>
+
+  <Target Name="ConfigureInnerBuildArgs" BeforeTargets="GetSourceBuildCommandConfiguration">
+    <PropertyGroup>
+      <InnerBuildArgs>$(InnerBuildArgs) /p:Projects="$(InnerSourceBuildRepoRoot)\MSBuild.SourceBuild.slnf"</InnerBuildArgs>
+    </PropertyGroup>
+  </Target>
+
+</Project>
diff --git a/eng/SourceBuildPrebuiltBaseline.xml b/eng/SourceBuildPrebuiltBaseline.xml
new file mode 100644
index 00000000000..c1b6dfbf053
--- /dev/null
+++ b/eng/SourceBuildPrebuiltBaseline.xml
@@ -0,0 +1,5 @@
+<UsageData>
+  <IgnorePatterns>
+    <UsagePattern IdentityGlob="*/*" />
+  </IgnorePatterns>
+</UsageData>
diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index ebeca639894..cc3eebb1a18 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -1,17 +1,26 @@
 <?xml version="1.0" encoding="utf-8"?>
 <Dependencies>
   <ToolsetDependencies>
-    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="5.0.0-beta.21505.11">
+    <Dependency Name="Microsoft.CodeAnalysis.BannedApiAnalyzers" Version="3.3.2">
+      <Uri>https://github.com/dotnet/roslyn-analyzers</Uri>
+      <Sha />
+    </Dependency>
+    <Dependency Name="Microsoft.DotNet.Arcade.Sdk" Version="6.0.0-beta.21460.7">
       <Uri>https://github.com/dotnet/arcade</Uri>
-      <Sha>9661b5187c30b8bbd683aea20694909eebcdcb73</Sha>
+      <Sha>7324320f814152b72295946847ca72413507705a</Sha>
+      <SourceBuild RepoName="arcade" ManagedOnly="true" />
     </Dependency>
-    <Dependency Name="NuGet.Build.Tasks" Version="5.9.1-rc.8">
+    <Dependency Name="NuGet.Build.Tasks" Version="6.0.0-preview.4.243">
       <Uri>https://github.com/nuget/nuget.client</Uri>
-      <Sha>d525b0e670f3b6cbd5c73a35f04730a9f658c852</Sha>
+      <Sha>f82431ecc38a28f396d527446834c7de679a6722</Sha>
     </Dependency>
-    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="3.9.0-2.20574.26">
+    <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.0.0-5.21469.2">
       <Uri>https://github.com/dotnet/roslyn</Uri>
-      <Sha>e9fd4dc7d74932c0d4b042251bc5a88bb5b3c437</Sha>
+      <Sha>c1d8c6f043bc80425c6828455eb57f8a404759c6</Sha>
+    </Dependency>
+    <Dependency Name="Microsoft.DotNet.XUnitExtensions" Version="6.0.0-beta.21460.7">
+      <Uri>https://github.com/dotnet/arcade</Uri>
+      <Sha>7324320f814152b72295946847ca72413507705a</Sha>
     </Dependency>
   </ToolsetDependencies>
 </Dependencies>
diff --git a/eng/Versions.props b/eng/Versions.props
index ac4d55b539e..d01c3c803fc 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -2,8 +2,7 @@
 <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->
 <Project>
   <PropertyGroup>
-    <VersionPrefix>16.11.2</VersionPrefix>
-    <DotNetFinalVersionKind>release</DotNetFinalVersionKind>
+    <VersionPrefix>17.1.0</VersionPrefix>
     <AssemblyVersion>15.1.0.0</AssemblyVersion>
     <PreReleaseVersionLabel>preview</PreReleaseVersionLabel>
     <DotNetUseShippingVersions>true</DotNetUseShippingVersions>
@@ -24,13 +23,20 @@
          Can be removed after Arcade moves up. -->
     <MicrosoftVSSDKBuildToolsVersion>16.7.13</MicrosoftVSSDKBuildToolsVersion>
   </PropertyGroup>
+  <!-- Production Dependencies -->
+  <PropertyGroup>
+    <SystemResourcesExtensionsPackageVersion>4.6.0</SystemResourcesExtensionsPackageVersion>
+  </PropertyGroup>
   <!-- Toolset Dependencies -->
   <PropertyGroup>
     <!-- DotNetCliVersion MUST match the dotnet version in global.json.
          Otherwise, this version of dotnet will not be installed and the build will error out. -->
-    <DotNetCliVersion>5.0.401</DotNetCliVersion>
-    <MicrosoftNetCompilersToolsetVersion>3.9.0-2.20574.26</MicrosoftNetCompilersToolsetVersion>
-    <NuGetBuildTasksVersion>5.11.0-rc.10</NuGetBuildTasksVersion>
+    <DotNetCliVersion>$([System.Text.RegularExpressions.Regex]::Match($([System.IO.File]::ReadAllText('$(MSBuildThisFileDirectory)..\global.json')), '"dotnet": "([^"]*)"').Groups.get_Item(1))</DotNetCliVersion>
+    <MicrosoftDotNetXUnitExtensionsVersion>6.0.0-beta.21460.7</MicrosoftDotNetXUnitExtensionsVersion>
+    <MicrosoftCodeAnalysisBannedApiAnalyzersVersion>3.3.2</MicrosoftCodeAnalysisBannedApiAnalyzersVersion>
+    <MicrosoftExtensionsDependencyModelVersion>6.0.0-preview.2.21154.6</MicrosoftExtensionsDependencyModelVersion>
+    <MicrosoftNetCompilersToolsetVersion>4.0.0-5.21469.2</MicrosoftNetCompilersToolsetVersion>
+    <NuGetBuildTasksVersion>6.0.0-preview.4.243</NuGetBuildTasksVersion>
   </PropertyGroup>
   <Target Name="OverrideArcadeFileVersion" AfterTargets="_InitializeAssemblyVersion">
     <!-- See https://github.com/dotnet/arcade/issues/3386
diff --git a/eng/build.ps1 b/eng/build.ps1
index f2a094600c1..a851bf25b8e 100644
--- a/eng/build.ps1
+++ b/eng/build.ps1
@@ -40,7 +40,7 @@ function Print-Usage() {
   Write-Host "  -verbosity <value>      Msbuild verbosity: q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic] (short: -v)"
   Write-Host "  -binaryLog              Output binary log (short: -bl)"
   Write-Host ""
- 
+
   Write-Host "Actions:"
   Write-Host "  -restore                Restore dependencies (short: -r)"
   Write-Host "  -build                  Build solution (short: -b)"
@@ -55,14 +55,14 @@ function Print-Usage() {
   Write-Host "  -sign                   Sign build outputs"
   Write-Host "  -publish                Publish artifacts (e.g. symbols)"
   Write-Host ""
- 
+
   Write-Host "Advanced settings:"
   Write-Host "  -projects <value>       Semi-colon delimited list of sln/proj's to build. Globbing is supported (*.sln)"
   Write-Host "  -ci                     Set when running on CI server"
   Write-Host "  -prepareMachine         Prepare machine for CI run"
   Write-Host "  -msbuildEngine <value>  Msbuild engine to use to run build ('dotnet', 'vs', or unspecified)."
   Write-Host ""
- 
+
   Write-Host "Official build settings:"
   Write-Host "  -officialBuildId                            An official build id, e.g. 20190102.3"
   Write-Host "  -officialSkipApplyOptimizationData <bool>   Pass 'true' to not apply optimization data"
@@ -151,20 +151,43 @@ function Set-OptProfVariables() {
 function Check-EditedFiles() {
   # Log VSTS errors for changed lines
   git --no-pager diff HEAD --unified=0 --no-color --exit-code | ForEach-Object { "##vso[task.logissue type=error] $_" }
-  if($LASTEXITCODE -ne 0) {
+  if ($LASTEXITCODE -ne 0) {
     throw "##vso[task.logissue type=error] After building, there are changed files.  Please build locally and include these changes in your pull request."
   }
 }
 
+function Check-RequiredVersionBumps() {
+  # Log VSTS errors for missing required version bumps
+  $targetBranch = $env:SYSTEM_PULLREQUEST_TARGETBRANCH
+  if ($targetBranch) {
+    # Prepend remote reference if the branch is not local
+    if (!$targetBranch.StartsWith("refs/heads/")) {
+      $targetBranch = "refs/remotes/origin/" + $targetBranch
+    }
+    $versionLineChanged = $false
+    git --no-pager diff --unified --no-color --exit-code -w $targetBranch HEAD src\Framework\EngineServices.cs `
+      | Select-String -Pattern "int Version =" | ForEach-Object -process { $versionLineChanged = $true }
+    if (($LASTEXITCODE -ne 0) -and (-not $versionLineChanged)) {
+      throw "##vso[task.logissue type=error] Detected changes in Framework\EngineServices.cs without a version bump.  " +
+            "If you are making API changes, please bump the version.  " +
+            "If the changes in the file are cosmetic, please add/change a comment on the Version prop to silence the error."
+    }
+  }
+}
+
 try {
   Process-Arguments
- 
+
   # Import Arcade functions
   . (Join-Path $PSScriptRoot "common\tools.ps1")
   . (Join-Path $PSScriptRoot "configure-toolset.ps1")
 
   $VSSetupDir = Join-Path $ArtifactsDir "VSSetup\$configuration"
 
+  if ($ci -and $build) {
+    Check-RequiredVersionBumps
+  }
+
   Build-Repo
 
   if ($ci -and $build) {
diff --git a/eng/cibuild_bootstrapped_msbuild.ps1 b/eng/cibuild_bootstrapped_msbuild.ps1
index 6e22aacb0d3..7c8162be341 100644
--- a/eng/cibuild_bootstrapped_msbuild.ps1
+++ b/eng/cibuild_bootstrapped_msbuild.ps1
@@ -96,8 +96,8 @@ try {
   else
   {
     $buildToolPath = $dotnetExePath
-    $buildToolCommand = Join-Path $bootstrapRoot "net5.0\MSBuild\MSBuild.dll"
-    $buildToolFramework = "netcoreapp2.1"
+    $buildToolCommand = Join-Path $bootstrapRoot "net6.0\MSBuild\MSBuild.dll"
+    $buildToolFramework = "netcoreapp3.1"
   }
 
   # Use separate artifacts folder for stage 2
diff --git a/eng/cibuild_bootstrapped_msbuild.sh b/eng/cibuild_bootstrapped_msbuild.sh
index 26fe13a7c82..e5425507f47 100755
--- a/eng/cibuild_bootstrapped_msbuild.sh
+++ b/eng/cibuild_bootstrapped_msbuild.sh
@@ -63,8 +63,8 @@ bootstrapRoot="$Stage1Dir/bin/bootstrap"
 if [ $host_type = "core" ]
 then
   _InitializeBuildTool="$_InitializeDotNetCli/dotnet"
-  _InitializeBuildToolCommand="$bootstrapRoot/net5.0/MSBuild/MSBuild.dll"
-  _InitializeBuildToolFramework="netcoreapp2.1"
+  _InitializeBuildToolCommand="$bootstrapRoot/net6.0/MSBuild/MSBuild.dll"
+  _InitializeBuildToolFramework="netcoreapp3.1"
 elif [ $host_type = "mono" ]
 then
   export _InitializeBuildTool="mono"
diff --git a/eng/common/SetupNugetSources.ps1 b/eng/common/SetupNugetSources.ps1
index a0b5fc37f43..18823840b11 100644
--- a/eng/common/SetupNugetSources.ps1
+++ b/eng/common/SetupNugetSources.ps1
@@ -158,4 +158,10 @@ if ($dotnet5Source -ne $null) {
     AddPackageSource -Sources $sources -SourceName "dotnet5-internal-transport" -SourceEndPoint "https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet5-internal-transport/nuget/v2" -Creds $creds -Username $userName -Password $Password
 }
 
+$dotnet6Source = $sources.SelectSingleNode("add[@key='dotnet6']")
+if ($dotnet6Source -ne $null) {
+    AddPackageSource -Sources $sources -SourceName "dotnet6-internal" -SourceEndPoint "https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet6-internal/nuget/v2" -Creds $creds -Username $userName -Password $Password
+    AddPackageSource -Sources $sources -SourceName "dotnet6-internal-transport" -SourceEndPoint "https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet6-internal-transport/nuget/v2" -Creds $creds -Username $userName -Password $Password
+}
+
 $doc.Save($filename)
diff --git a/eng/common/SetupNugetSources.sh b/eng/common/SetupNugetSources.sh
index 2734601c13c..ad3fb74fd2c 100644
--- a/eng/common/SetupNugetSources.sh
+++ b/eng/common/SetupNugetSources.sh
@@ -129,6 +129,30 @@ if [ "$?" == "0" ]; then
     PackageSources+=('dotnet5-internal-transport')
 fi
 
+# Ensure dotnet6-internal and dotnet6-internal-transport are in the packageSources if the public dotnet6 feeds are present
+grep -i "<add key=\"dotnet6\"" $ConfigFile
+if [ "$?" == "0" ]; then
+    grep -i "<add key=\"dotnet6-internal\"" $ConfigFile
+    if [ "$?" != "0" ]; then
+        echo "Adding dotnet6-internal to the packageSources."
+        PackageSourcesNodeFooter="</packageSources>"
+        PackageSourceTemplate="${TB}<add key=\"dotnet6-internal\" value=\"https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet6-internal/nuget/v2\" />"
+
+        sed -i.bak "s|$PackageSourcesNodeFooter|$PackageSourceTemplate${NL}$PackageSourcesNodeFooter|" $ConfigFile
+    fi
+    PackageSources+=('dotnet6-internal')
+
+    grep -i "<add key=\"dotnet6-internal-transport\">" $ConfigFile
+    if [ "$?" != "0" ]; then
+        echo "Adding dotnet6-internal-transport to the packageSources."
+        PackageSourcesNodeFooter="</packageSources>"
+        PackageSourceTemplate="${TB}<add key=\"dotnet6-internal-transport\" value=\"https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet6-internal-transport/nuget/v2\" />"
+
+        sed -i.bak "s|$PackageSourcesNodeFooter|$PackageSourceTemplate${NL}$PackageSourcesNodeFooter|" $ConfigFile
+    fi
+    PackageSources+=('dotnet6-internal-transport')
+fi
+
 # I want things split line by line
 PrevIFS=$IFS
 IFS=$'\n'
diff --git a/eng/common/build.ps1 b/eng/common/build.ps1
index 94a91c0817e..8943da242f6 100644
--- a/eng/common/build.ps1
+++ b/eng/common/build.ps1
@@ -25,6 +25,7 @@ Param(
   [switch] $prepareMachine,
   [string] $runtimeSourceFeed = '',
   [string] $runtimeSourceFeedKey = '',
+  [switch] $excludePrereleaseVS,
   [switch] $help,
   [Parameter(ValueFromRemainingArguments=$true)][String[]]$properties
 )
@@ -65,6 +66,7 @@ function Print-Usage() {
   Write-Host "  -prepareMachine         Prepare machine for CI run, clean up processes after build"
   Write-Host "  -warnAsError <value>    Sets warnaserror msbuild parameter ('true' or 'false')"
   Write-Host "  -msbuildEngine <value>  Msbuild engine to use to run build ('dotnet', 'vs', or unspecified)."
+  Write-Host "  -excludePrereleaseVS    Set to exclude build engines in prerelease versions of Visual Studio"
   Write-Host ""
 
   Write-Host "Command line arguments not listed above are passed thru to msbuild."
diff --git a/eng/common/build.sh b/eng/common/build.sh
index 252b63604e6..bc07a1c6848 100755
--- a/eng/common/build.sh
+++ b/eng/common/build.sh
@@ -81,7 +81,7 @@ runtime_source_feed_key=''
 
 properties=''
 while [[ $# > 0 ]]; do
-  opt="$(echo "${1/#--/-}" | awk '{print tolower($0)}')"
+  opt="$(echo "${1/#--/-}" | tr "[:upper:]" "[:lower:]")"
   case "$opt" in
     -help|-h)
       usage
@@ -187,6 +187,10 @@ function InitializeCustomToolset {
 }
 
 function Build {
+
+  if [[ "$ci" == true ]]; then
+    TryLogClientIpAddress
+  fi
   InitializeToolset
   InitializeCustomToolset
 
diff --git a/eng/common/cross/arm/sources.list.trusty b/eng/common/cross/arm/sources.list.trusty
deleted file mode 100644
index 07d8f88d82e..00000000000
--- a/eng/common/cross/arm/sources.list.trusty
+++ /dev/null
@@ -1,11 +0,0 @@
-deb http://ports.ubuntu.com/ubuntu-ports/ trusty main restricted universe
-deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty main restricted universe
-
-deb http://ports.ubuntu.com/ubuntu-ports/ trusty-updates main restricted universe
-deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty-updates main restricted universe
-
-deb http://ports.ubuntu.com/ubuntu-ports/ trusty-backports main restricted
-deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty-backports main restricted
-
-deb http://ports.ubuntu.com/ubuntu-ports/ trusty-security main restricted universe multiverse
-deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty-security main restricted universe multiverse
\ No newline at end of file
diff --git a/eng/common/cross/arm/trusty-lttng-2.4.patch b/eng/common/cross/arm/trusty-lttng-2.4.patch
deleted file mode 100644
index 8e4dd7ae719..00000000000
--- a/eng/common/cross/arm/trusty-lttng-2.4.patch
+++ /dev/null
@@ -1,71 +0,0 @@
-From e72c9d7ead60e3317bd6d1fade995c07021c947b Mon Sep 17 00:00:00 2001
-From: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
-Date: Thu, 7 May 2015 13:25:04 -0400
-Subject: [PATCH] Fix: building probe providers with C++ compiler
-
-Robert Daniels wrote:
-> > I'm attempting to use lttng userspace tracing with a C++ application
-> > on an ARM platform. I'm using GCC 4.8.4 on Linux 3.14 with the 2.6
-> > release of lttng. I've compiled lttng-modules, lttng-ust, and
-> > lttng-tools and have been able to get a simple test working with C
-> > code.  When I attempt to run the hello.cxx test on my target it will
-> > segfault.
->
->
-> I spent a little time digging into this issue and finally discovered the
-> cause of my segfault with ARM C++ tracepoints.
->
-> There is a struct called 'lttng_event' in ust-events.h which contains an
-> empty union 'u'.  This was the cause of my issue.  Under C, this empty union
-> compiles to a zero byte member while under C++ it compiles to a one byte
-> member, and in my case was four-byte aligned which caused my C++ code to
-> have the 'cds_list_head node' offset incorrectly by four bytes.  This lead
-> to an incorrect linked list structure which caused my issue.
->
-> Since this union is empty, I simply removed it from the struct and everything
-> worked correctly.
->
-> I don't know the history or purpose behind this empty union so I'd like to
-> know if this is a safe fix.  If it is I can submit a patch with the union
-> removed.
-
-That's a very nice catch!
-
-We do not support building tracepoint probe provider with
-g++ yet, as stated in lttng-ust(3):
-
-"- Note for C++ support: although an application instrumented with
-   tracepoints can be compiled with g++, tracepoint probes should be
-   compiled with gcc (only tested with gcc so far)."
-
-However, if it works fine with this fix, then I'm tempted to take it,
-especially because removing the empty union does not appear to affect
-the layout of struct lttng_event as seen from liblttng-ust, which must
-be compiled with a C compiler,  and from probe providers compiled with
-a C compiler. So all we are changing is the layout of a probe provider
-compiled with a C++ compiler, which is anyway buggy at the moment,
-because it is not compatible with the layout expected by liblttng-ust
-compiled with a C compiler.
-
-Reported-by: Robert Daniels <robert.daniels@vantagecontrols.com>
-Signed-off-by: Mathieu Desnoyers <mathieu.desnoyers@efficios.com>
----
- include/lttng/ust-events.h | 2 --
- 1 file changed, 2 deletions(-)
-
-diff --git a/usr/include/lttng/ust-events.h b/usr/include/lttng/ust-events.h
-index 328a875..3d7a274 100644
---- a/usr/include/lttng/ust-events.h
-+++ b/usr/include/lttng/ust-events.h
-@@ -407,8 +407,6 @@ struct lttng_event {
- 	void *_deprecated1;
- 	struct lttng_ctx *ctx;
- 	enum lttng_ust_instrumentation instrumentation;
--	union {
--	} u;
- 	struct cds_list_head node;		/* Event list in session */
- 	struct cds_list_head _deprecated2;
- 	void *_deprecated3;
--- 
-2.7.4
-
diff --git a/eng/common/cross/arm/trusty.patch b/eng/common/cross/arm/trusty.patch
deleted file mode 100644
index 2f2972f8eb5..00000000000
--- a/eng/common/cross/arm/trusty.patch
+++ /dev/null
@@ -1,97 +0,0 @@
-diff -u -r a/usr/include/urcu/uatomic/generic.h b/usr/include/urcu/uatomic/generic.h
---- a/usr/include/urcu/uatomic/generic.h	2014-03-28 06:04:42.000000000 +0900
-+++ b/usr/include/urcu/uatomic/generic.h	2017-02-13 10:35:21.189927116 +0900
-@@ -65,17 +65,17 @@
- 	switch (len) {
- #ifdef UATOMIC_HAS_ATOMIC_BYTE
- 	case 1:
--		return __sync_val_compare_and_swap_1(addr, old, _new);
-+		return __sync_val_compare_and_swap_1((uint8_t *) addr, old, _new);
- #endif
- #ifdef UATOMIC_HAS_ATOMIC_SHORT
- 	case 2:
--		return __sync_val_compare_and_swap_2(addr, old, _new);
-+		return __sync_val_compare_and_swap_2((uint16_t *) addr, old, _new);
- #endif
- 	case 4:
--		return __sync_val_compare_and_swap_4(addr, old, _new);
-+		return __sync_val_compare_and_swap_4((uint32_t *) addr, old, _new);
- #if (CAA_BITS_PER_LONG == 64)
- 	case 8:
--		return __sync_val_compare_and_swap_8(addr, old, _new);
-+		return __sync_val_compare_and_swap_8((uint64_t *) addr, old, _new);
- #endif
- 	}
- 	_uatomic_link_error();
-@@ -100,20 +100,20 @@
- 	switch (len) {
- #ifdef UATOMIC_HAS_ATOMIC_BYTE
- 	case 1:
--		__sync_and_and_fetch_1(addr, val);
-+		__sync_and_and_fetch_1((uint8_t *) addr, val);
- 		return;
- #endif
- #ifdef UATOMIC_HAS_ATOMIC_SHORT
- 	case 2:
--		__sync_and_and_fetch_2(addr, val);
-+		__sync_and_and_fetch_2((uint16_t *) addr, val);
- 		return;
- #endif
- 	case 4:
--		__sync_and_and_fetch_4(addr, val);
-+		__sync_and_and_fetch_4((uint32_t *) addr, val);
- 		return;
- #if (CAA_BITS_PER_LONG == 64)
- 	case 8:
--		__sync_and_and_fetch_8(addr, val);
-+		__sync_and_and_fetch_8((uint64_t *) addr, val);
- 		return;
- #endif
- 	}
-@@ -139,20 +139,20 @@
- 	switch (len) {
- #ifdef UATOMIC_HAS_ATOMIC_BYTE
- 	case 1:
--		__sync_or_and_fetch_1(addr, val);
-+		__sync_or_and_fetch_1((uint8_t *) addr, val);
- 		return;
- #endif
- #ifdef UATOMIC_HAS_ATOMIC_SHORT
- 	case 2:
--		__sync_or_and_fetch_2(addr, val);
-+		__sync_or_and_fetch_2((uint16_t *) addr, val);
- 		return;
- #endif
- 	case 4:
--		__sync_or_and_fetch_4(addr, val);
-+		__sync_or_and_fetch_4((uint32_t *) addr, val);
- 		return;
- #if (CAA_BITS_PER_LONG == 64)
- 	case 8:
--		__sync_or_and_fetch_8(addr, val);
-+		__sync_or_and_fetch_8((uint64_t *) addr, val);
- 		return;
- #endif
- 	}
-@@ -180,17 +180,17 @@
- 	switch (len) {
- #ifdef UATOMIC_HAS_ATOMIC_BYTE
- 	case 1:
--		return __sync_add_and_fetch_1(addr, val);
-+		return __sync_add_and_fetch_1((uint8_t *) addr, val);
- #endif
- #ifdef UATOMIC_HAS_ATOMIC_SHORT
- 	case 2:
--		return __sync_add_and_fetch_2(addr, val);
-+		return __sync_add_and_fetch_2((uint16_t *) addr, val);
- #endif
- 	case 4:
--		return __sync_add_and_fetch_4(addr, val);
-+		return __sync_add_and_fetch_4((uint32_t *) addr, val);
- #if (CAA_BITS_PER_LONG == 64)
- 	case 8:
--		return __sync_add_and_fetch_8(addr, val);
-+		return __sync_add_and_fetch_8((uint64_t *) addr, val);
- #endif
- 	}
- 	_uatomic_link_error();
diff --git a/eng/common/cross/arm64/sources.list.trusty b/eng/common/cross/arm64/sources.list.trusty
deleted file mode 100644
index 07d8f88d82e..00000000000
--- a/eng/common/cross/arm64/sources.list.trusty
+++ /dev/null
@@ -1,11 +0,0 @@
-deb http://ports.ubuntu.com/ubuntu-ports/ trusty main restricted universe
-deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty main restricted universe
-
-deb http://ports.ubuntu.com/ubuntu-ports/ trusty-updates main restricted universe
-deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty-updates main restricted universe
-
-deb http://ports.ubuntu.com/ubuntu-ports/ trusty-backports main restricted
-deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty-backports main restricted
-
-deb http://ports.ubuntu.com/ubuntu-ports/ trusty-security main restricted universe multiverse
-deb-src http://ports.ubuntu.com/ubuntu-ports/ trusty-security main restricted universe multiverse
\ No newline at end of file
diff --git a/eng/common/cross/arm64/tizen-fetch.sh b/eng/common/cross/arm64/tizen-fetch.sh
index a48a6f51c49..16d1301f21e 100644
--- a/eng/common/cross/arm64/tizen-fetch.sh
+++ b/eng/common/cross/arm64/tizen-fetch.sh
@@ -157,7 +157,7 @@ fetch_tizen_pkgs()
 Inform "Initialize arm base"
 fetch_tizen_pkgs_init standard base
 Inform "fetch common packages"
-fetch_tizen_pkgs aarch64 gcc glibc glibc-devel libicu libicu-devel libatomic linux-glibc-devel
+fetch_tizen_pkgs aarch64 gcc glibc glibc-devel libicu libicu-devel libatomic linux-glibc-devel keyutils keyutils-devel libkeyutils
 Inform "fetch coreclr packages"
 fetch_tizen_pkgs aarch64 lldb lldb-devel libgcc libstdc++ libstdc++-devel libunwind libunwind-devel lttng-ust-devel lttng-ust userspace-rcu-devel userspace-rcu
 Inform "fetch corefx packages"
diff --git a/eng/common/cross/armel/armel.jessie.patch b/eng/common/cross/armel/armel.jessie.patch
new file mode 100644
index 00000000000..2d261561935
--- /dev/null
+++ b/eng/common/cross/armel/armel.jessie.patch
@@ -0,0 +1,43 @@
+diff -u -r a/usr/include/urcu/uatomic/generic.h b/usr/include/urcu/uatomic/generic.h
+--- a/usr/include/urcu/uatomic/generic.h	2014-10-22 15:00:58.000000000 -0700
++++ b/usr/include/urcu/uatomic/generic.h	2020-10-30 21:38:28.550000000 -0700
+@@ -69,10 +69,10 @@
+ #endif
+ #ifdef UATOMIC_HAS_ATOMIC_SHORT
+ 	case 2:
+-		return __sync_val_compare_and_swap_2(addr, old, _new);
++		return __sync_val_compare_and_swap_2((uint16_t*) addr, old, _new);
+ #endif
+ 	case 4:
+-		return __sync_val_compare_and_swap_4(addr, old, _new);
++		return __sync_val_compare_and_swap_4((uint32_t*) addr, old, _new);
+ #if (CAA_BITS_PER_LONG == 64)
+ 	case 8:
+ 		return __sync_val_compare_and_swap_8(addr, old, _new);
+@@ -109,7 +109,7 @@
+ 		return;
+ #endif
+ 	case 4:
+-		__sync_and_and_fetch_4(addr, val);
++		__sync_and_and_fetch_4((uint32_t*) addr, val);
+ 		return;
+ #if (CAA_BITS_PER_LONG == 64)
+ 	case 8:
+@@ -148,7 +148,7 @@
+ 		return;
+ #endif
+ 	case 4:
+-		__sync_or_and_fetch_4(addr, val);
++		__sync_or_and_fetch_4((uint32_t*) addr, val);
+ 		return;
+ #if (CAA_BITS_PER_LONG == 64)
+ 	case 8:
+@@ -187,7 +187,7 @@
+ 		return __sync_add_and_fetch_2(addr, val);
+ #endif
+ 	case 4:
+-		return __sync_add_and_fetch_4(addr, val);
++		return __sync_add_and_fetch_4((uint32_t*) addr, val);
+ #if (CAA_BITS_PER_LONG == 64)
+ 	case 8:
+ 		return __sync_add_and_fetch_8(addr, val);
diff --git a/eng/common/cross/armel/tizen-fetch.sh b/eng/common/cross/armel/tizen-fetch.sh
index 2776cbba4e4..64f0187e5aa 100755
--- a/eng/common/cross/armel/tizen-fetch.sh
+++ b/eng/common/cross/armel/tizen-fetch.sh
@@ -157,7 +157,7 @@ fetch_tizen_pkgs()
 Inform "Initialize arm base"
 fetch_tizen_pkgs_init standard base
 Inform "fetch common packages"
-fetch_tizen_pkgs armv7l gcc glibc glibc-devel libicu libicu-devel libatomic linux-glibc-devel
+fetch_tizen_pkgs armv7l gcc gcc-devel-static glibc glibc-devel libicu libicu-devel libatomic linux-glibc-devel keyutils keyutils-devel libkeyutils
 Inform "fetch coreclr packages"
 fetch_tizen_pkgs armv7l lldb lldb-devel libgcc libstdc++ libstdc++-devel libunwind libunwind-devel lttng-ust-devel lttng-ust userspace-rcu-devel userspace-rcu
 Inform "fetch corefx packages"
diff --git a/eng/common/cross/build-android-rootfs.sh b/eng/common/cross/build-android-rootfs.sh
index e7f12edb565..42516bbeebc 100755
--- a/eng/common/cross/build-android-rootfs.sh
+++ b/eng/common/cross/build-android-rootfs.sh
@@ -27,7 +27,7 @@ __AndroidToolchain=aarch64-linux-android
 
 for i in "$@"
     do
-        lowerI="$(echo $i | awk '{print tolower($0)}')"
+        lowerI="$(echo $i | tr "[:upper:]" "[:lower:]")"
         case $lowerI in
         -?|-h|--help)
             usage
diff --git a/eng/common/cross/build-rootfs.sh b/eng/common/cross/build-rootfs.sh
index ffdff38542e..5c05b39f101 100755
--- a/eng/common/cross/build-rootfs.sh
+++ b/eng/common/cross/build-rootfs.sh
@@ -6,10 +6,10 @@ usage()
 {
     echo "Usage: $0 [BuildArch] [CodeName] [lldbx.y] [--skipunmount] --rootfsdir <directory>]"
     echo "BuildArch can be: arm(default), armel, arm64, x86"
-    echo "CodeName - optional, Code name for Linux, can be: trusty, xenial(default), zesty, bionic, alpine. If BuildArch is armel, LinuxCodeName is jessie(default) or tizen."
-    echo "                              for FreeBSD can be: freebsd11 or freebsd12."
+    echo "CodeName - optional, Code name for Linux, can be: xenial(default), zesty, bionic, alpine, alpine3.9 or alpine3.13. If BuildArch is armel, LinuxCodeName is jessie(default) or tizen."
+    echo "                              for FreeBSD can be: freebsd11, freebsd12, freebsd13"
     echo "                              for illumos can be: illumos."
-    echo "lldbx.y - optional, LLDB version, can be: lldb3.9(default), lldb4.0, lldb5.0, lldb6.0 no-lldb. Ignored for alpine and FReeBSD"
+    echo "lldbx.y - optional, LLDB version, can be: lldb3.9(default), lldb4.0, lldb5.0, lldb6.0 no-lldb. Ignored for alpine and FreeBSD"
     echo "--skipunmount - optional, will skip the unmount of rootfs folder."
     echo "--use-mirror - optional, use mirror URL to fetch resources, when available."
     exit 1
@@ -33,7 +33,6 @@ __AlpinePackages="alpine-base"
 __AlpinePackages+=" build-base"
 __AlpinePackages+=" linux-headers"
 __AlpinePackagesEdgeCommunity=" lldb-dev"
-__AlpinePackagesEdgeMain=" llvm10-libs"
 __AlpinePackagesEdgeMain+=" python3"
 __AlpinePackagesEdgeMain+=" libedit"
 
@@ -61,19 +60,25 @@ __AlpinePackages+=" krb5-dev"
 __AlpinePackages+=" openssl-dev"
 __AlpinePackages+=" zlib-dev"
 
-__FreeBSDBase="12.1-RELEASE"
+__FreeBSDBase="12.2-RELEASE"
 __FreeBSDPkg="1.12.0"
+__FreeBSDABI="12"
 __FreeBSDPackages="libunwind"
 __FreeBSDPackages+=" icu"
 __FreeBSDPackages+=" libinotify"
 __FreeBSDPackages+=" lttng-ust"
 __FreeBSDPackages+=" krb5"
+__FreeBSDPackages+=" terminfo-db"
 
 __IllumosPackages="icu-64.2nb2"
 __IllumosPackages+=" mit-krb5-1.16.2nb4"
 __IllumosPackages+=" openssl-1.1.1e"
 __IllumosPackages+=" zlib-1.2.11"
 
+# ML.NET dependencies
+__UbuntuPackages+=" libomp5"
+__UbuntuPackages+=" libomp-dev"
+
 __UseMirror=0
 
 __UnprocessedBuildArgs=
@@ -82,7 +87,7 @@ while :; do
         break
     fi
 
-    lowerI="$(echo $1 | awk '{print tolower($0)}')"
+    lowerI="$(echo $1 | tr "[:upper:]" "[:lower:]")"
     case $lowerI in
         -?|-h|--help)
             usage
@@ -106,6 +111,15 @@ while :; do
             __UbuntuRepo="http://ftp.debian.org/debian/"
             __CodeName=jessie
             ;;
+        s390x)
+            __BuildArch=s390x
+            __UbuntuArch=s390x
+            __UbuntuRepo="http://ports.ubuntu.com/ubuntu-ports/"
+            __UbuntuPackages=$(echo ${__UbuntuPackages} | sed 's/ libunwind8-dev//')
+            __UbuntuPackages=$(echo ${__UbuntuPackages} | sed 's/ libomp-dev//')
+            __UbuntuPackages=$(echo ${__UbuntuPackages} | sed 's/ libomp5//')
+            unset __LLDB_Package
+            ;;
         x86)
             __BuildArch=x86
             __UbuntuArch=i386
@@ -132,11 +146,6 @@ while :; do
         no-lldb)
             unset __LLDB_Package
             ;;
-        trusty) # Ubuntu 14.04
-            if [ "$__CodeName" != "jessie" ]; then
-                __CodeName=trusty
-            fi
-            ;;
         xenial) # Ubuntu 16.04
             if [ "$__CodeName" != "jessie" ]; then
                 __CodeName=xenial
@@ -176,18 +185,40 @@ while :; do
             __UbuntuRepo=
             __Tizen=tizen
             ;;
-        alpine)
+        alpine|alpine3.9)
             __CodeName=alpine
             __UbuntuRepo=
+            __AlpineVersion=3.9
+            __AlpinePackagesEdgeMain+=" llvm11-libs"
+            __AlpinePackagesEdgeMain+=" clang-libs"
+            ;;
+        alpine3.13)
+            __CodeName=alpine
+            __UbuntuRepo=
+            __AlpineVersion=3.13
+            # Alpine 3.13 has all the packages we need in the 3.13 repository
+            __AlpinePackages+=$__AlpinePackagesEdgeCommunity
+            __AlpinePackagesEdgeCommunity=
+            __AlpinePackages+=$__AlpinePackagesEdgeMain
+            __AlpinePackagesEdgeMain=
+            __AlpinePackages+=" llvm10-libs"
             ;;
         freebsd11)
             __FreeBSDBase="11.3-RELEASE"
+            __FreeBSDABI="11"
             ;&
         freebsd12)
             __CodeName=freebsd
             __BuildArch=x64
             __SkipUnmount=1
             ;;
+        freebsd13)
+            __CodeName=freebsd
+            __FreeBSDBase="13.0-RELEASE"
+            __FreeBSDABI="13"
+            __BuildArch=x64
+            __SkipUnmount=1
+            ;;
         illumos)
             __CodeName=illumos
             __BuildArch=x64
@@ -236,7 +267,6 @@ __RootfsDir="$( cd "$__RootfsDir" && pwd )"
 
 if [[ "$__CodeName" == "alpine" ]]; then
     __ApkToolsVersion=2.9.1
-    __AlpineVersion=3.9
     __ApkToolsDir=$(mktemp -d)
     wget https://github.com/alpinelinux/apk-tools/releases/download/v$__ApkToolsVersion/apk-tools-$__ApkToolsVersion-x86_64-linux.tar.gz -P $__ApkToolsDir
     tar -xf $__ApkToolsDir/apk-tools-$__ApkToolsVersion-x86_64-linux.tar.gz -C $__ApkToolsDir
@@ -249,22 +279,26 @@ if [[ "$__CodeName" == "alpine" ]]; then
       -U --allow-untrusted --root $__RootfsDir --arch $__AlpineArch --initdb \
       add $__AlpinePackages
 
-    $__ApkToolsDir/apk-tools-$__ApkToolsVersion/apk \
-      -X http://dl-cdn.alpinelinux.org/alpine/edge/main \
-      -U --allow-untrusted --root $__RootfsDir --arch $__AlpineArch --initdb \
-      add $__AlpinePackagesEdgeMain
+    if [[ -n "$__AlpinePackagesEdgeMain" ]]; then
+      $__ApkToolsDir/apk-tools-$__ApkToolsVersion/apk \
+        -X http://dl-cdn.alpinelinux.org/alpine/edge/main \
+        -U --allow-untrusted --root $__RootfsDir --arch $__AlpineArch --initdb \
+        add $__AlpinePackagesEdgeMain
+    fi
 
-    $__ApkToolsDir/apk-tools-$__ApkToolsVersion/apk \
-      -X http://dl-cdn.alpinelinux.org/alpine/edge/community \
-      -U --allow-untrusted --root $__RootfsDir --arch $__AlpineArch --initdb \
-      add $__AlpinePackagesEdgeCommunity
+    if [[ -n "$__AlpinePackagesEdgeCommunity" ]]; then
+      $__ApkToolsDir/apk-tools-$__ApkToolsVersion/apk \
+        -X http://dl-cdn.alpinelinux.org/alpine/edge/community \
+        -U --allow-untrusted --root $__RootfsDir --arch $__AlpineArch --initdb \
+        add $__AlpinePackagesEdgeCommunity
+    fi
 
     rm -r $__ApkToolsDir
 elif [[ "$__CodeName" == "freebsd" ]]; then
     mkdir -p $__RootfsDir/usr/local/etc
+    JOBS="$(getconf _NPROCESSORS_ONLN)"
     wget -O - https://download.freebsd.org/ftp/releases/amd64/${__FreeBSDBase}/base.txz | tar -C $__RootfsDir -Jxf - ./lib ./usr/lib ./usr/libdata ./usr/include ./usr/share/keys ./etc ./bin/freebsd-version
-    # For now, ask for 11 ABI even on 12. This can be revisited later.
-    echo "ABI = \"FreeBSD:11:amd64\"; FINGERPRINTS = \"${__RootfsDir}/usr/share/keys\"; REPOS_DIR = [\"${__RootfsDir}/etc/pkg\"]; REPO_AUTOUPDATE = NO; RUN_SCRIPTS = NO;" > ${__RootfsDir}/usr/local/etc/pkg.conf
+    echo "ABI = \"FreeBSD:${__FreeBSDABI}:amd64\"; FINGERPRINTS = \"${__RootfsDir}/usr/share/keys\"; REPOS_DIR = [\"${__RootfsDir}/etc/pkg\"]; REPO_AUTOUPDATE = NO; RUN_SCRIPTS = NO;" > ${__RootfsDir}/usr/local/etc/pkg.conf
     echo "FreeBSD: { url: "pkg+http://pkg.FreeBSD.org/\${ABI}/quarterly", mirror_type: \"srv\", signature_type: \"fingerprints\", fingerprints: \"${__RootfsDir}/usr/share/keys/pkg\", enabled: yes }" > ${__RootfsDir}/etc/pkg/FreeBSD.conf
     mkdir -p $__RootfsDir/tmp
     # get and build package manager
@@ -272,7 +306,7 @@ elif [[ "$__CodeName" == "freebsd" ]]; then
     cd $__RootfsDir/tmp/pkg-${__FreeBSDPkg}
     # needed for install to succeed
     mkdir -p $__RootfsDir/host/etc
-    ./autogen.sh && ./configure --prefix=$__RootfsDir/host && make && make install
+    ./autogen.sh && ./configure --prefix=$__RootfsDir/host && make -j "$JOBS" && make install
     rm -rf $__RootfsDir/tmp/pkg-${__FreeBSDPkg}
     # install packages we need.
     INSTALL_AS_USER=$(whoami) $__RootfsDir/host/sbin/pkg -r $__RootfsDir -C $__RootfsDir/usr/local/etc/pkg.conf update
@@ -329,15 +363,15 @@ elif [[ -n $__CodeName ]]; then
     chroot $__RootfsDir apt-get -f -y install
     chroot $__RootfsDir apt-get -y install $__UbuntuPackages
     chroot $__RootfsDir symlinks -cr /usr
+    chroot $__RootfsDir apt-get clean
 
     if [ $__SkipUnmount == 0 ]; then
         umount $__RootfsDir/* || true
     fi
 
-    if [[ "$__BuildArch" == "arm" && "$__CodeName" == "trusty" ]]; then
+    if [[ "$__BuildArch" == "armel" && "$__CodeName" == "jessie" ]]; then
         pushd $__RootfsDir
-        patch -p1 < $__CrossDir/$__BuildArch/trusty.patch
-        patch -p1 < $__CrossDir/$__BuildArch/trusty-lttng-2.4.patch
+        patch -p1 < $__CrossDir/$__BuildArch/armel.jessie.patch
         popd
     fi
 elif [[ "$__Tizen" == "tizen" ]]; then
diff --git a/eng/common/cross/s390x/sources.list.bionic b/eng/common/cross/s390x/sources.list.bionic
new file mode 100644
index 00000000000..21095574095
--- /dev/null
+++ b/eng/common/cross/s390x/sources.list.bionic
@@ -0,0 +1,11 @@
+deb http://ports.ubuntu.com/ubuntu-ports/ bionic main restricted universe
+deb-src http://ports.ubuntu.com/ubuntu-ports/ bionic main restricted universe
+
+deb http://ports.ubuntu.com/ubuntu-ports/ bionic-updates main restricted universe
+deb-src http://ports.ubuntu.com/ubuntu-ports/ bionic-updates main restricted universe
+
+deb http://ports.ubuntu.com/ubuntu-ports/ bionic-backports main restricted
+deb-src http://ports.ubuntu.com/ubuntu-ports/ bionic-backports main restricted
+
+deb http://ports.ubuntu.com/ubuntu-ports/ bionic-security main restricted universe multiverse
+deb-src http://ports.ubuntu.com/ubuntu-ports/ bionic-security main restricted universe multiverse
diff --git a/eng/common/cross/toolchain.cmake b/eng/common/cross/toolchain.cmake
index 137736c0a27..ec8971eb019 100644
--- a/eng/common/cross/toolchain.cmake
+++ b/eng/common/cross/toolchain.cmake
@@ -36,6 +36,9 @@ elseif(TARGET_ARCH_NAME STREQUAL "arm64")
   if("$ENV{__DistroRid}" MATCHES "tizen.*")
     set(TIZEN_TOOLCHAIN "aarch64-tizen-linux-gnu/9.2.0")
   endif()
+elseif(TARGET_ARCH_NAME STREQUAL "s390x")
+  set(CMAKE_SYSTEM_PROCESSOR s390x)
+  set(TOOLCHAIN "s390x-linux-gnu")
 elseif(TARGET_ARCH_NAME STREQUAL "x86")
   set(CMAKE_SYSTEM_PROCESSOR i686)
   set(TOOLCHAIN "i686-linux-gnu")
@@ -46,7 +49,7 @@ elseif (ILLUMOS)
   set(CMAKE_SYSTEM_PROCESSOR "x86_64")
   set(TOOLCHAIN "x86_64-illumos")
 else()
-  message(FATAL_ERROR "Arch is ${TARGET_ARCH_NAME}. Only armel, arm, arm64 and x86 are supported!")
+  message(FATAL_ERROR "Arch is ${TARGET_ARCH_NAME}. Only armel, arm, arm64, s390x and x86 are supported!")
 endif()
 
 if(DEFINED ENV{TOOLCHAIN})
@@ -135,10 +138,14 @@ function(add_toolchain_linker_flag Flag)
   if (NOT Config STREQUAL "")
     set(CONFIG_SUFFIX "_${Config}")
   endif()
-  set("CMAKE_EXE_LINKER_FLAGS${CONFIG_SUFFIX}" "${CMAKE_EXE_LINKER_FLAGS${CONFIG_SUFFIX}} ${Flag}" PARENT_SCOPE)
-  set("CMAKE_SHARED_LINKER_FLAGS${CONFIG_SUFFIX}" "${CMAKE_SHARED_LINKER_FLAGS${CONFIG_SUFFIX}} ${Flag}" PARENT_SCOPE)
+  set("CMAKE_EXE_LINKER_FLAGS${CONFIG_SUFFIX}_INIT" "${CMAKE_EXE_LINKER_FLAGS${CONFIG_SUFFIX}_INIT} ${Flag}" PARENT_SCOPE)
+  set("CMAKE_SHARED_LINKER_FLAGS${CONFIG_SUFFIX}_INIT" "${CMAKE_SHARED_LINKER_FLAGS${CONFIG_SUFFIX}_INIT} ${Flag}" PARENT_SCOPE)
 endfunction()
 
+if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
+  add_toolchain_linker_flag("-Wl,--rpath-link=${CROSS_ROOTFS}/lib/${TOOLCHAIN}")
+  add_toolchain_linker_flag("-Wl,--rpath-link=${CROSS_ROOTFS}/usr/lib/${TOOLCHAIN}")
+endif()
 
 if(TARGET_ARCH_NAME STREQUAL "armel")
   if(DEFINED TIZEN_TOOLCHAIN) # For Tizen only
@@ -167,7 +174,7 @@ endif()
 
 # Specify compile options
 
-if((TARGET_ARCH_NAME MATCHES "^(arm|armel|arm64)$" AND NOT "$ENV{__DistroRid}" MATCHES "android.*") OR ILLUMOS)
+if((TARGET_ARCH_NAME MATCHES "^(arm|armel|arm64|s390x)$" AND NOT "$ENV{__DistroRid}" MATCHES "android.*") OR ILLUMOS)
   set(CMAKE_C_COMPILER_TARGET ${TOOLCHAIN})
   set(CMAKE_CXX_COMPILER_TARGET ${TOOLCHAIN})
   set(CMAKE_ASM_COMPILER_TARGET ${TOOLCHAIN})
diff --git a/eng/common/cross/x86/sources.list.trusty b/eng/common/cross/x86/sources.list.trusty
deleted file mode 100644
index 9b3085436e9..00000000000
--- a/eng/common/cross/x86/sources.list.trusty
+++ /dev/null
@@ -1,11 +0,0 @@
-deb http://archive.ubuntu.com/ubuntu/ trusty main restricted universe
-deb-src http://archive.ubuntu.com/ubuntu/ trusty main restricted universe
-
-deb http://archive.ubuntu.com/ubuntu/ trusty-updates main restricted universe
-deb-src http://archive.ubuntu.com/ubuntu/ trusty-updates main restricted universe
-
-deb http://archive.ubuntu.com/ubuntu/ trusty-backports main restricted
-deb-src http://archive.ubuntu.com/ubuntu/ trusty-backports main restricted
-
-deb http://archive.ubuntu.com/ubuntu/ trusty-security main restricted universe multiverse
-deb-src http://archive.ubuntu.com/ubuntu/ trusty-security main restricted universe multiverse
diff --git a/eng/common/darc-init.sh b/eng/common/darc-init.sh
index d981d7bbf38..39abdbecdcf 100755
--- a/eng/common/darc-init.sh
+++ b/eng/common/darc-init.sh
@@ -6,7 +6,7 @@ versionEndpoint='https://maestro-prod.westus2.cloudapp.azure.com/api/assets/darc
 verbosity='minimal'
 
 while [[ $# > 0 ]]; do
-  opt="$(echo "$1" | awk '{print tolower($0)}')"
+  opt="$(echo "$1" | tr "[:upper:]" "[:lower:]")"
   case "$opt" in
     --darcversion)
       darcVersion=$2
diff --git a/eng/common/dotnet-install.sh b/eng/common/dotnet-install.sh
index ead6a1d9a24..fdfeea66e7d 100755
--- a/eng/common/dotnet-install.sh
+++ b/eng/common/dotnet-install.sh
@@ -19,7 +19,7 @@ runtime='dotnet'
 runtimeSourceFeed=''
 runtimeSourceFeedKey=''
 while [[ $# > 0 ]]; do
-  opt="$(echo "$1" | awk '{print tolower($0)}')"
+  opt="$(echo "$1" | tr "[:upper:]" "[:lower:]")"
   case "$opt" in
     -version|-v)
       shift
@@ -49,13 +49,8 @@ while [[ $# > 0 ]]; do
   shift
 done
 
-# Use uname to determine what the CPU is.
-cpuname=$(uname -p)
-# Some Linux platforms report unknown for platform, but the arch for machine.
-if [[ "$cpuname" == "unknown" ]]; then
-  cpuname=$(uname -m)
-fi
-
+# Use uname to determine what the CPU is, see https://en.wikipedia.org/wiki/Uname#Examples
+cpuname=$(uname -m)
 case $cpuname in
   aarch64)
     buildarch=arm64
@@ -75,7 +70,7 @@ case $cpuname in
     ;;
 esac
 
-dotnetRoot="$repo_root/.dotnet"
+dotnetRoot="${repo_root}.dotnet"
 if [[ $architecture != "" ]] && [[ $architecture != $buildarch ]]; then
   dotnetRoot="$dotnetRoot/$architecture"
 fi
diff --git a/eng/common/generate-locproject.ps1 b/eng/common/generate-locproject.ps1
index de348a2e225..25e97ac0077 100644
--- a/eng/common/generate-locproject.ps1
+++ b/eng/common/generate-locproject.ps1
@@ -25,8 +25,15 @@ Push-Location "$SourcesDirectory" # push location for Resolve-Path -Relative to
 
 # Template files
 $jsonFiles = @()
-$jsonFiles += Get-ChildItem -Recurse -Path "$SourcesDirectory" | Where-Object { $_.FullName -Match "\.template\.config\\localize\\en\..+\.json" } # .NET templating pattern
-$jsonFiles += Get-ChildItem -Recurse -Path "$SourcesDirectory" | Where-Object { $_.FullName -Match "en\\strings\.json" } # current winforms pattern
+$jsonTemplateFiles = Get-ChildItem -Recurse -Path "$SourcesDirectory" | Where-Object { $_.FullName -Match "\.template\.config\\localize\\.+\.en\.json" } # .NET templating pattern
+$jsonTemplateFiles | ForEach-Object {
+    $null = $_.Name -Match "(.+)\.[\w-]+\.json" # matches '[filename].[langcode].json
+    
+    $destinationFile = "$($_.Directory.FullName)\$($Matches.1).json"
+    $jsonFiles += Copy-Item "$($_.FullName)" -Destination $destinationFile -PassThru
+}
+
+$jsonWinformsTemplateFiles = Get-ChildItem -Recurse -Path "$SourcesDirectory" | Where-Object { $_.FullName -Match "en\\strings\.json" } # current winforms pattern
 
 $xlfFiles = @()
 
@@ -44,7 +51,7 @@ $langXlfFiles | ForEach-Object {
     $xlfFiles += Copy-Item "$($_.FullName)" -Destination $destinationFile -PassThru
 }
 
-$locFiles = $jsonFiles + $xlfFiles
+$locFiles = $jsonFiles + $jsonWinformsTemplateFiles + $xlfFiles
 
 $locJson = @{
     Projects = @(
diff --git a/eng/common/init-tools-native.sh b/eng/common/init-tools-native.sh
index 29fc5db8ae0..3e6a8d6acf2 100755
--- a/eng/common/init-tools-native.sh
+++ b/eng/common/init-tools-native.sh
@@ -10,13 +10,13 @@ force=false
 download_retries=5
 retry_wait_time_seconds=30
 global_json_file="$(dirname "$(dirname "${scriptroot}")")/global.json"
-declare -A native_assets
+declare -a native_assets
 
 . $scriptroot/pipeline-logging-functions.sh
 . $scriptroot/native/common-library.sh
 
 while (($# > 0)); do
-  lowerI="$(echo $1 | awk '{print tolower($0)}')"
+  lowerI="$(echo $1 | tr "[:upper:]" "[:lower:]")"
   case $lowerI in
     --baseuri)
       base_uri=$2
@@ -76,24 +76,89 @@ while (($# > 0)); do
 done
 
 function ReadGlobalJsonNativeTools {
-  # Get the native-tools section from the global.json.
-  local native_tools_section=$(cat $global_json_file | awk '/"native-tools"/,/}/')
-  # Only extract the contents of the object.
-  local native_tools_list=$(echo $native_tools_section | awk -F"[{}]" '{print $2}')
-  native_tools_list=${native_tools_list//[\" ]/}
-  native_tools_list=$( echo "$native_tools_list" | sed 's/\s//g' | sed 's/,/\n/g' )
-
-  local old_IFS=$IFS
-  while read -r line; do
-    # Lines are of the form: 'tool:version'
-    IFS=:
-    while read -r key value; do
-     native_assets[$key]=$value
-    done <<< "$line"
-  done <<< "$native_tools_list"
-  IFS=$old_IFS
-
-  return 0;
+  # happy path: we have a proper JSON parsing tool `jq(1)` in PATH!
+  if command -v jq &> /dev/null; then
+
+    # jq: read each key/value pair under "native-tools" entry and emit:
+    #   KEY="<entry-key>" VALUE="<entry-value>"
+    # followed by a null byte.
+    #
+    # bash: read line with null byte delimeter and push to array (for later `eval`uation).
+
+    while IFS= read -rd '' line; do
+      native_assets+=("$line")
+    done < <(jq -r '. |
+        select(has("native-tools")) |
+        ."native-tools" |
+        keys[] as $k |
+        @sh "KEY=\($k) VALUE=\(.[$k])\u0000"' "$global_json_file")
+
+    return
+  fi
+
+  # Warning: falling back to manually parsing JSON, which is not recommended.
+
+  # Following routine matches the output and escaping logic of jq(1)'s @sh formatter used above.
+  # It has been tested with several weird strings with escaped characters in entries (key and value)
+  # and results were compared with the output of jq(1) in binary representation using xxd(1);
+  # just before the assignment to 'native_assets' array (above and below).
+
+  # try to capture the section under "native-tools".
+  if [[ ! "$(cat "$global_json_file")" =~ \"native-tools\"[[:space:]\:\{]*([^\}]+) ]]; then
+    return
+  fi
+
+  section="${BASH_REMATCH[1]}"
+
+  parseStarted=0
+  possibleEnd=0
+  escaping=0
+  escaped=0
+  isKey=1
+
+  for (( i=0; i<${#section}; i++ )); do
+    char="${section:$i:1}"
+    if ! ((parseStarted)) && [[ "$char" =~ [[:space:],:] ]]; then continue; fi
+
+    if ! ((escaping)) && [[ "$char" == "\\" ]]; then
+      escaping=1
+    elif ((escaping)) && ! ((escaped)); then
+      escaped=1
+    fi
+
+    if ! ((parseStarted)) && [[ "$char" == "\"" ]]; then
+      parseStarted=1
+      possibleEnd=0
+    elif [[ "$char" == "'" ]]; then
+      token="$token'\\\''"
+      possibleEnd=0
+    elif ((escaping)) || [[ "$char" != "\"" ]]; then
+      token="$token$char"
+      possibleEnd=1
+    fi
+
+    if ((possibleEnd)) && ! ((escaping)) && [[ "$char" == "\"" ]]; then
+      # Use printf to unescape token to match jq(1)'s @sh formatting rules.
+      # do not use 'token="$(printf "$token")"' syntax, as $() eats the trailing linefeed.
+      printf -v token "'$token'"
+
+      if ((isKey)); then
+        KEY="$token"
+        isKey=0
+      else
+        line="KEY=$KEY VALUE=$token"
+        native_assets+=("$line")
+        isKey=1
+      fi
+
+      # reset for next token
+      parseStarted=0
+      token=
+    elif ((escaping)) && ((escaped)); then
+      escaping=0
+      escaped=0
+    fi
+  done
 }
 
 native_base_dir=$install_directory
@@ -111,14 +176,14 @@ if [[ ${#native_assets[@]} -eq 0 ]]; then
   exit 0;
 else
   native_installer_dir="$scriptroot/native"
-  for tool in "${!native_assets[@]}"
-  do
-    tool_version=${native_assets[$tool]}
-    installer_path="$native_installer_dir/install-$tool.sh"
+  for index in "${!native_assets[@]}"; do
+    eval "${native_assets["$index"]}"
+
+    installer_path="$native_installer_dir/install-$KEY.sh"
     installer_command="$installer_path"
     installer_command+=" --baseuri $base_uri"
     installer_command+=" --installpath $install_bin"
-    installer_command+=" --version $tool_version"
+    installer_command+=" --version $VALUE"
     echo $installer_command
 
     if [[ $force = true ]]; then
diff --git a/eng/common/internal-feed-operations.ps1 b/eng/common/internal-feed-operations.ps1
index 418c09930cf..92b77347d99 100644
--- a/eng/common/internal-feed-operations.ps1
+++ b/eng/common/internal-feed-operations.ps1
@@ -45,11 +45,11 @@ function SetupCredProvider {
   # Then, we set the 'VSS_NUGET_EXTERNAL_FEED_ENDPOINTS' environment variable to restore from the stable 
   # feeds successfully
 
-  $nugetConfigPath = "$RepoRoot\NuGet.config"
+  $nugetConfigPath = Join-Path $RepoRoot "NuGet.config"
 
   if (-Not (Test-Path -Path $nugetConfigPath)) {
     Write-PipelineTelemetryError -Category 'Build' -Message 'NuGet.config file not found in repo root!'
-    ExitWithExitCode 1  
+    ExitWithExitCode 1
   }
   
   $endpoints = New-Object System.Collections.ArrayList
@@ -85,7 +85,7 @@ function SetupCredProvider {
 
 #Workaround for https://github.com/microsoft/msbuild/issues/4430
 function InstallDotNetSdkAndRestoreArcade {
-  $dotnetTempDir = "$RepoRoot\dotnet"
+  $dotnetTempDir = Join-Path $RepoRoot "dotnet"
   $dotnetSdkVersion="2.1.507" # After experimentation we know this version works when restoring the SDK (compared to 3.0.*)
   $dotnet = "$dotnetTempDir\dotnet.exe"
   $restoreProjPath = "$PSScriptRoot\restore.proj"
diff --git a/eng/common/internal-feed-operations.sh b/eng/common/internal-feed-operations.sh
index 343054b3ae9..9378223ba09 100755
--- a/eng/common/internal-feed-operations.sh
+++ b/eng/common/internal-feed-operations.sh
@@ -39,7 +39,7 @@ function SetupCredProvider {
   # Then, we set the 'VSS_NUGET_EXTERNAL_FEED_ENDPOINTS' environment variable to restore from the stable 
   # feeds successfully
 
-  local nugetConfigPath="$repo_root/NuGet.config"
+  local nugetConfigPath="{$repo_root}NuGet.config"
 
   if [ ! "$nugetConfigPath" ]; then
     Write-PipelineTelemetryError -category 'Build' "NuGet.config file not found in repo's root!"
@@ -101,7 +101,7 @@ authToken=''
 repoName=''
 
 while [[ $# > 0 ]]; do
-  opt="$(echo "$1" | awk '{print tolower($0)}')"
+  opt="$(echo "$1" | tr "[:upper:]" "[:lower:]")"
   case "$opt" in
     --operation)
       operation=$2
diff --git a/eng/common/internal/Tools.csproj b/eng/common/internal/Tools.csproj
index f46d5efe2e3..beb9c4648ea 100644
--- a/eng/common/internal/Tools.csproj
+++ b/eng/common/internal/Tools.csproj
@@ -1,5 +1,4 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
+<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
 <Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
     <TargetFramework>net472</TargetFramework>
diff --git a/eng/common/msbuild.ps1 b/eng/common/msbuild.ps1
index c6401230002..eea19cd8452 100644
--- a/eng/common/msbuild.ps1
+++ b/eng/common/msbuild.ps1
@@ -5,6 +5,7 @@ Param(
   [bool] $nodeReuse = $true,
   [switch] $ci,
   [switch] $prepareMachine,
+  [switch] $excludePrereleaseVS,
   [Parameter(ValueFromRemainingArguments=$true)][String[]]$extraArgs
 )
 
diff --git a/eng/common/msbuild.sh b/eng/common/msbuild.sh
index 8160cd5a59d..20d3dad5435 100755
--- a/eng/common/msbuild.sh
+++ b/eng/common/msbuild.sh
@@ -19,7 +19,7 @@ prepare_machine=false
 extra_args=''
 
 while (($# > 0)); do
-  lowerI="$(echo $1 | awk '{print tolower($0)}')"
+  lowerI="$(echo $1 | tr "[:upper:]" "[:lower:]")"
   case $lowerI in
     --verbosity)
       verbosity=$2
diff --git a/eng/common/native/CommonLibrary.psm1 b/eng/common/native/CommonLibrary.psm1
index d7d1a651094..adf707c8fe7 100644
--- a/eng/common/native/CommonLibrary.psm1
+++ b/eng/common/native/CommonLibrary.psm1
@@ -48,7 +48,7 @@ function DownloadAndExtract {
                                            -Verbose:$Verbose
 
   if ($DownloadStatus -Eq $False) {
-    Write-Error "Download failed"
+    Write-Error "Download failed from $Uri"
     return $False
   }
 
diff --git a/eng/common/native/common-library.sh b/eng/common/native/common-library.sh
index bf272dcf55a..080c2c283ae 100755
--- a/eng/common/native/common-library.sh
+++ b/eng/common/native/common-library.sh
@@ -148,8 +148,12 @@ function NewScriptShim {
   fi
   
   if [[ ! -f $tool_file_path ]]; then
-    Write-PipelineTelemetryError -category 'NativeToolsBootstrap' "Specified tool file path:'$tool_file_path' does not exist"
-    return 1
+    # try to see if the path is lower cased
+    tool_file_path="$(echo $tool_file_path | tr "[:upper:]" "[:lower:]")" 
+    if [[ ! -f $tool_file_path ]]; then
+      Write-PipelineTelemetryError -category 'NativeToolsBootstrap' "Specified tool file path:'$tool_file_path' does not exist"
+      return 1
+    fi
   fi
 
   local shim_contents=$'#!/usr/bin/env bash\n'
diff --git a/eng/common/native/install-cmake-test.sh b/eng/common/native/install-cmake-test.sh
index 12339a40761..8a5e7cf0db5 100755
--- a/eng/common/native/install-cmake-test.sh
+++ b/eng/common/native/install-cmake-test.sh
@@ -14,7 +14,7 @@ download_retries=5
 retry_wait_time_seconds=30
 
 while (($# > 0)); do
-  lowerI="$(echo $1 | awk '{print tolower($0)}')"
+  lowerI="$(echo $1 | tr "[:upper:]" "[:lower:]")"
   case $lowerI in
     --baseuri)
       base_uri=$2
@@ -63,7 +63,7 @@ done
 
 tool_name="cmake-test"
 tool_os=$(GetCurrentOS)
-tool_folder=$(echo $tool_os | awk '{print tolower($0)}')
+tool_folder="$(echo $tool_os | tr "[:upper:]" "[:lower:]")"
 tool_arch="x86_64"
 tool_name_moniker="$tool_name-$version-$tool_os-$tool_arch"
 tool_install_directory="$install_path/$tool_name/$version"
@@ -114,4 +114,4 @@ if [[ $? != 0 ]]; then
   exit 1
 fi
 
-exit 0
\ No newline at end of file
+exit 0
diff --git a/eng/common/native/install-cmake.sh b/eng/common/native/install-cmake.sh
index 18041be8763..de496beebc5 100755
--- a/eng/common/native/install-cmake.sh
+++ b/eng/common/native/install-cmake.sh
@@ -14,7 +14,7 @@ download_retries=5
 retry_wait_time_seconds=30
 
 while (($# > 0)); do
-  lowerI="$(echo $1 | awk '{print tolower($0)}')"
+  lowerI="$(echo $1 | tr "[:upper:]" "[:lower:]")"
   case $lowerI in
     --baseuri)
       base_uri=$2
@@ -63,7 +63,7 @@ done
 
 tool_name="cmake"
 tool_os=$(GetCurrentOS)
-tool_folder=$(echo $tool_os | awk '{print tolower($0)}')
+tool_folder="$(echo $tool_os | tr "[:upper:]" "[:lower:]")"
 tool_arch="x86_64"
 tool_name_moniker="$tool_name-$version-$tool_os-$tool_arch"
 tool_install_directory="$install_path/$tool_name/$version"
@@ -114,4 +114,4 @@ if [[ $? != 0 ]]; then
   exit 1
 fi
 
-exit 0
\ No newline at end of file
+exit 0
diff --git a/eng/common/native/install-tool.ps1 b/eng/common/native/install-tool.ps1
index f397e1c75d4..78f2d84a4e4 100644
--- a/eng/common/native/install-tool.ps1
+++ b/eng/common/native/install-tool.ps1
@@ -105,7 +105,7 @@ try {
     Write-Error "There are multiple copies of $ToolName in $($ToolInstallDirectory): `n$(@($ToolFilePath | out-string))"
     exit 1
   } elseif (@($ToolFilePath).Length -Lt 1) {
-    Write-Host "$ToolName was not found in $ToolFilePath."
+    Write-Host "$ToolName was not found in $ToolInstallDirectory."
     exit 1
   }
 
diff --git a/eng/common/performance/blazor_perf.proj b/eng/common/performance/blazor_perf.proj
deleted file mode 100644
index 3b25359c438..00000000000
--- a/eng/common/performance/blazor_perf.proj
+++ /dev/null
@@ -1,30 +0,0 @@
-<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test">
-  <PropertyGroup Condition="'$(AGENT_OS)' != 'Windows_NT'">
-    <Python>python3</Python>
-    <HelixPreCommands>$(HelixPreCommands);chmod +x $HELIX_WORKITEM_PAYLOAD/SOD/SizeOnDisk</HelixPreCommands>
-  </PropertyGroup>
-
-  <ItemGroup>
-    <HelixCorrelationPayload Include="$(CorrelationPayloadDirectory)">
-      <PayloadDirectory>%(Identity)</PayloadDirectory>
-    </HelixCorrelationPayload>
-  </ItemGroup>
-
-  <PropertyGroup Condition="'$(AGENT_OS)' == 'Windows_NT'">
-    <ScenarioDirectory>%HELIX_CORRELATION_PAYLOAD%\performance\src\scenarios\</ScenarioDirectory>
-    <BlazorDirectory>$(ScenarioDirectory)blazor\</BlazorDirectory>
-  </PropertyGroup>
-  <PropertyGroup Condition="'$(AGENT_OS)' != 'Windows_NT'">
-    <ScenarioDirectory>$HELIX_CORRELATION_PAYLOAD/performance/src/scenarios/</ScenarioDirectory>
-    <BlazorDirectory>$(ScenarioDirectory)blazor/</BlazorDirectory>
-  </PropertyGroup>
-
-  <ItemGroup>
-    <HelixWorkItem Include="SOD - New Blazor Template - Publish">
-        <PayloadDirectory>$(WorkItemDirectory)</PayloadDirectory>
-        <PreCommands>cd $(BlazorDirectory);$(Python) pre.py publish --msbuild %27/p:_TrimmerDumpDependencies=true%27 --msbuild-static AdditionalMonoLinkerOptions=%27&quot;%24(AdditionalMonoLinkerOptions) --dump-dependencies&quot;%27 --binlog %27./traces/blazor_publish.binlog%27</PreCommands>
-        <Command>$(Python) test.py sod --scenario-name &quot;%(Identity)&quot;</Command>
-        <PostCommands>$(Python) post.py</PostCommands>
-    </HelixWorkItem>
-  </ItemGroup>
-</Project>
\ No newline at end of file
diff --git a/eng/common/performance/crossgen_perf.proj b/eng/common/performance/crossgen_perf.proj
deleted file mode 100644
index 4264920382e..00000000000
--- a/eng/common/performance/crossgen_perf.proj
+++ /dev/null
@@ -1,69 +0,0 @@
-<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test">
-
-  <ItemGroup>
-    <HelixCorrelationPayload Include="$(CorrelationPayloadDirectory)">
-      <PayloadDirectory>%(Identity)</PayloadDirectory>
-    </HelixCorrelationPayload>
-  </ItemGroup>
-
-  <!-- 
-    Crossgen and Crossgen2 Scenario WorkItems 
-  -->
-  <PropertyGroup Condition="'$(AGENT_OS)' == 'Windows_NT'">
-    <Python>py -3</Python>
-    <HelixPreCommands>$(HelixPreCommands)</HelixPreCommands>
-    <CoreRoot>%HELIX_CORRELATION_PAYLOAD%\Core_Root</CoreRoot>
-    <ScenarioDirectory>%HELIX_CORRELATION_PAYLOAD%\performance\src\scenarios\</ScenarioDirectory>
-    <CrossgenDirectory>$(ScenarioDirectory)crossgen\</CrossgenDirectory>
-    <Crossgen2Directory>$(ScenarioDirectory)crossgen2\</Crossgen2Directory>
-  </PropertyGroup>
-  <PropertyGroup Condition="'$(AGENT_OS)' != 'Windows_NT'">
-    <Python>python3</Python>
-    <HelixPreCommands>$(HelixPreCommands);chmod +x $HELIX_WORKITEM_PAYLOAD/startup/Startup;chmod +x $HELIX_WORKITEM_PAYLOAD/startup/perfcollect;sudo apt update</HelixPreCommands>
-    <CoreRoot>$HELIX_CORRELATION_PAYLOAD/Core_Root</CoreRoot>
-    <ScenarioDirectory>$HELIX_CORRELATION_PAYLOAD/performance/src/scenarios/</ScenarioDirectory>
-    <CrossgenDirectory>$(ScenarioDirectory)crossgen/</CrossgenDirectory>
-    <Crossgen2Directory>$(ScenarioDirectory)crossgen2/</Crossgen2Directory>
-  </PropertyGroup>
-
-  <ItemGroup>
-    <SingleAssembly Include="System.Private.Xml.dll"/>
-    <SingleAssembly Include="System.Linq.Expressions.dll"/>
-    <SingleAssembly Include="Microsoft.CodeAnalysis.VisualBasic.dll"/>
-    <SingleAssembly Include="Microsoft.CodeAnalysis.CSharp.dll"/>
-    <SingleAssembly Include="System.Private.CoreLib.dll"/>
-  </ItemGroup>
-  <ItemGroup>
-    <Composite Include="framework-r2r.dll.rsp"/>
-  </ItemGroup>
-
-  <ItemGroup>
-    <CrossgenWorkItem Include="@(SingleAssembly)">
-      <PayloadDirectory>$(WorkItemDirectory)</PayloadDirectory>
-      <Command>$(Python) $(CrossgenDirectory)test.py crossgen --core-root $(CoreRoot) --test-name %(Identity)</Command>
-    </CrossgenWorkItem>
-  </ItemGroup>
-
-  <ItemGroup> 
-    <Crossgen2WorkItem Include="@(SingleAssembly)">
-      <PayloadDirectory>$(WorkItemDirectory)</PayloadDirectory>
-      <Command>$(Python) $(Crossgen2Directory)test.py crossgen2 --core-root $(CoreRoot) --single %(Identity)</Command>
-    </Crossgen2WorkItem>
-  </ItemGroup>
-
-  <ItemGroup>
-    <!-- Enable crossgen tests on Windows x64 and Windows x86 -->
-    <HelixWorkItem Include="@(CrossgenWorkItem -> 'Crossgen %(Identity)')" Condition="'$(AGENT_OS)' == 'Windows_NT'">
-      <Timeout>4:00</Timeout>
-    </HelixWorkItem>
-    <!-- Enable crossgen2 tests on Windows x64 and Linux x64 -->
-    <HelixWorkItem Include="@(Crossgen2WorkItem -> 'Crossgen2 %(Identity)')" Condition="'$(Architecture)' == 'x64'">
-      <Timeout>4:00</Timeout>
-    </HelixWorkItem>
-    <HelixWorkItem Include="Crossgen2 Composite Framework R2R" Condition="'$(Architecture)' == 'x64'">
-      <PayloadDirectory>$(WorkItemDirectory)</PayloadDirectory>	
-      <Command>$(Python) $(Crossgen2Directory)test.py crossgen2 --core-root $(CoreRoot) --composite $(Crossgen2Directory)framework-r2r.dll.rsp</Command>
-      <Timeout>1:00</Timeout>  
-    </HelixWorkItem>
-  </ItemGroup>
-</Project>
\ No newline at end of file
diff --git a/eng/common/performance/microbenchmarks.proj b/eng/common/performance/microbenchmarks.proj
deleted file mode 100644
index 94b6efbc929..00000000000
--- a/eng/common/performance/microbenchmarks.proj
+++ /dev/null
@@ -1,144 +0,0 @@
-<Project Sdk="Microsoft.DotNet.Helix.Sdk" DefaultTargets="Test">
-
-  <PropertyGroup Condition="'$(AGENT_OS)' == 'Windows_NT'">
-    <WorkItemCommand>%HELIX_CORRELATION_PAYLOAD%\performance\scripts\benchmarks_ci.py --csproj %HELIX_CORRELATION_PAYLOAD%\performance\$(TargetCsproj)</WorkItemCommand>
-    <CliArguments>--dotnet-versions %DOTNET_VERSION% --cli-source-info args --cli-branch %PERFLAB_BRANCH% --cli-commit-sha %PERFLAB_HASH% --cli-repository https://github.com/%PERFLAB_REPO% --cli-source-timestamp %PERFLAB_BUILDTIMESTAMP%</CliArguments>
-    <Python>py -3</Python>
-    <CoreRun>%HELIX_CORRELATION_PAYLOAD%\Core_Root\CoreRun.exe</CoreRun>
-    <BaselineCoreRun>%HELIX_CORRELATION_PAYLOAD%\Baseline_Core_Root\CoreRun.exe</BaselineCoreRun>
-    
-    <HelixPreCommands>$(HelixPreCommands);call %HELIX_CORRELATION_PAYLOAD%\performance\tools\machine-setup.cmd;set PYTHONPATH=%HELIX_WORKITEM_PAYLOAD%\scripts%3B%HELIX_WORKITEM_PAYLOAD%</HelixPreCommands>
-    <ArtifactsDirectory>%HELIX_CORRELATION_PAYLOAD%\artifacts\BenchmarkDotNet.Artifacts</ArtifactsDirectory>
-    <BaselineArtifactsDirectory>%HELIX_CORRELATION_PAYLOAD%\artifacts\BenchmarkDotNet.Artifacts_Baseline</BaselineArtifactsDirectory>
-    <ResultsComparer>%HELIX_CORRELATION_PAYLOAD%\performance\src\tools\ResultsComparer\ResultsComparer.csproj</ResultsComparer>
-    <DotnetExe>%HELIX_CORRELATION_PAYLOAD%\performance\tools\dotnet\$(Architecture)\dotnet.exe</DotnetExe>
-    <Percent>%25%25</Percent>
-    <XMLResults>%HELIX_WORKITEM_ROOT%\testResults.xml</XMLResults>
-  </PropertyGroup>
-
-  <PropertyGroup Condition="'$(AGENT_OS)' != 'Windows_NT' and '$(RunFromPerfRepo)' == 'false'">
-    <BaseDirectory>$HELIX_CORRELATION_PAYLOAD</BaseDirectory>
-    <PerformanceDirectory>$(BaseDirectory)/performance</PerformanceDirectory>
-  </PropertyGroup>
-
-  <PropertyGroup Condition="'$(AGENT_OS)' != 'Windows_NT' and '$(RunFromPerfRepo)' == 'true'">
-    <BaseDirectory>$HELIX_WORKITEM_PAYLOAD</BaseDirectory>
-    <PerformanceDirectory>$(BaseDirectory)</PerformanceDirectory>
-  </PropertyGroup>
-
-  <PropertyGroup Condition="'$(AGENT_OS)' != 'Windows_NT'">
-    <WorkItemCommand>$(PerformanceDirectory)/scripts/benchmarks_ci.py --csproj $(PerformanceDirectory)/$(TargetCsproj)</WorkItemCommand>
-    <CliArguments>--dotnet-versions $DOTNET_VERSION --cli-source-info args --cli-branch $PERFLAB_BRANCH --cli-commit-sha $PERFLAB_HASH --cli-repository https://github.com/$PERFLAB_REPO --cli-source-timestamp $PERFLAB_BUILDTIMESTAMP</CliArguments>
-    <Python>python3</Python>
-    <CoreRun>$(BaseDirectory)/Core_Root/corerun</CoreRun>
-    <BaselineCoreRun>$(BaseDirectory)/Baseline_Core_Root/corerun</BaselineCoreRun>
-    <HelixPreCommands>$(HelixPreCommands);chmod +x $(PerformanceDirectory)/tools/machine-setup.sh;. $(PerformanceDirectory)/tools/machine-setup.sh</HelixPreCommands>
-    <ArtifactsDirectory>$(BaseDirectory)/artifacts/BenchmarkDotNet.Artifacts</ArtifactsDirectory>
-    <BaselineArtifactsDirectory>$(BaseDirectory)/artifacts/BenchmarkDotNet.Artifacts_Baseline</BaselineArtifactsDirectory>
-    <ResultsComparer>$(PerformanceDirectory)/src/tools/ResultsComparer/ResultsComparer.csproj</ResultsComparer>
-    <DotnetExe>$(PerformanceDirectory)/tools/dotnet/$(Architecture)/dotnet</DotnetExe>
-    <Percent>%25</Percent>
-    <XMLResults>$HELIX_WORKITEM_ROOT/testResults.xml</XMLResults>
-  </PropertyGroup>
-
-  <PropertyGroup Condition="'$(WasmDotnet)' == 'true'">
-    <CliArguments>$(CliArguments) --wasm</CliArguments>
-  </PropertyGroup>
-
-  <PropertyGroup Condition="'$(MonoDotnet)' == 'true' and '$(AGENT_OS)' == 'Windows_NT'">
-    <CoreRunArgument>--corerun %HELIX_CORRELATION_PAYLOAD%\dotnet-mono\shared\Microsoft.NETCore.App\6.0.0\corerun.exe</CoreRunArgument>
-  </PropertyGroup>
-  <PropertyGroup Condition="'$(MonoDotnet)' == 'true' and '$(AGENT_OS)' != 'Windows_NT'">
-    <CoreRunArgument>--corerun $(BaseDirectory)/dotnet-mono/shared/Microsoft.NETCore.App/6.0.0/corerun</CoreRunArgument>
-  </PropertyGroup>
-
-  <PropertyGroup Condition="'$(UseCoreRun)' == 'true'">
-    <CoreRunArgument>--corerun $(CoreRun)</CoreRunArgument>
-  </PropertyGroup>
-
-  <PropertyGroup Condition="'$(UseBaselineCoreRun)' == 'true'">
-    <BaselineCoreRunArgument>--corerun $(BaselineCoreRun)</BaselineCoreRunArgument>
-  </PropertyGroup>
-
-  <PropertyGroup Condition="'$(WorkItemCommand)' != ''">
-    <WorkItemCommand>$(Python) $(WorkItemCommand) --incremental no --architecture $(Architecture) -f $(_Framework) $(PerfLabArguments)</WorkItemCommand>
-  </PropertyGroup>
-
-  <PropertyGroup Condition="'$(_Framework)' != 'net461'">
-    <WorkItemCommand>$(WorkItemCommand) $(CliArguments)</WorkItemCommand>
-  </PropertyGroup>
-  
-  <PropertyGroup>
-    <WorkItemTimeout>2:30</WorkItemTimeout>
-    <WorkItemTimeout Condition="'$(HelixSourcePrefix)' != 'official'">0:15</WorkItemTimeout>
-  </PropertyGroup>
-
-  <ItemGroup>
-    <HelixCorrelationPayload Include="$(CorrelationPayloadDirectory)">
-      <PayloadDirectory>%(Identity)</PayloadDirectory>
-    </HelixCorrelationPayload>
-  </ItemGroup>
-
-  <PropertyGroup>
-    <PartitionCount>30</PartitionCount>
-  </PropertyGroup>
-  <ItemGroup>
-    <Partition Include="$(BuildConfig).Partition0" Index="0" />
-    <Partition Include="$(BuildConfig).Partition1" Index="1" />
-    <Partition Include="$(BuildConfig).Partition2" Index="2" />
-    <Partition Include="$(BuildConfig).Partition3" Index="3" />
-    <Partition Include="$(BuildConfig).Partition4" Index="4" />
-    <Partition Include="$(BuildConfig).Partition5" Index="5" />
-    <Partition Include="$(BuildConfig).Partition6" Index="6" />
-    <Partition Include="$(BuildConfig).Partition7" Index="7" />
-    <Partition Include="$(BuildConfig).Partition8" Index="8" />
-    <Partition Include="$(BuildConfig).Partition9" Index="9" />
-    <Partition Include="$(BuildConfig).Partition10" Index="10" />
-    <Partition Include="$(BuildConfig).Partition11" Index="11" />
-    <Partition Include="$(BuildConfig).Partition12" Index="12" />
-    <Partition Include="$(BuildConfig).Partition13" Index="13" />
-    <Partition Include="$(BuildConfig).Partition14" Index="14" />
-    <Partition Include="$(BuildConfig).Partition15" Index="15" />
-    <Partition Include="$(BuildConfig).Partition16" Index="16" />
-    <Partition Include="$(BuildConfig).Partition17" Index="17" />
-    <Partition Include="$(BuildConfig).Partition18" Index="18" />
-    <Partition Include="$(BuildConfig).Partition19" Index="19" />
-    <Partition Include="$(BuildConfig).Partition20" Index="20" />
-    <Partition Include="$(BuildConfig).Partition21" Index="21" />
-    <Partition Include="$(BuildConfig).Partition22" Index="22" />
-    <Partition Include="$(BuildConfig).Partition23" Index="23" />
-    <Partition Include="$(BuildConfig).Partition24" Index="24" />
-    <Partition Include="$(BuildConfig).Partition25" Index="25" />
-    <Partition Include="$(BuildConfig).Partition26" Index="26" />
-    <Partition Include="$(BuildConfig).Partition27" Index="27" />
-    <Partition Include="$(BuildConfig).Partition28" Index="28" />
-    <Partition Include="$(BuildConfig).Partition29" Index="29" />
-  </ItemGroup>
-
-  <PropertyGroup Condition="'$(Compare)' == 'true'">
-    <FailOnTestFailure>false</FailOnTestFailure>
-  </PropertyGroup>
-
-  <!-- 
-    Partition the Microbenchmarks project, but nothing else
-  -->
-  <ItemGroup Condition="$(TargetCsproj.Contains('MicroBenchmarks.csproj'))">
-    <HelixWorkItem Include="@(Partition)">
-      <PayloadDirectory>$(WorkItemDirectory)</PayloadDirectory>
-      <PreCommands Condition="'$(Compare)' == 'true'">$(WorkItemCommand) --bdn-artifacts $(BaselineArtifactsDirectory) --bdn-arguments="--anyCategories $(BDNCategories) $(ExtraBenchmarkDotNetArguments) $(BaselineCoreRunArgument) --partition-count $(PartitionCount) --partition-index %(HelixWorkItem.Index)"</PreCommands>
-      <Command>$(WorkItemCommand) --bdn-artifacts $(ArtifactsDirectory) --bdn-arguments="--anyCategories $(BDNCategories) $(ExtraBenchmarkDotNetArguments) $(CoreRunArgument) --partition-count $(PartitionCount) --partition-index %(HelixWorkItem.Index)"</Command>
-      <PostCommands Condition="'$(Compare)' == 'true'">$(DotnetExe) run -f $(_Framework) -p $(ResultsComparer) --base $(BaselineArtifactsDirectory) --diff $(ArtifactsDirectory) --threshold 2$(Percent) --xml $(XMLResults);$(FinalCommand)</PostCommands>
-      <Timeout>$(WorkItemTimeout)</Timeout>
-    </HelixWorkItem>
-  </ItemGroup>
-
-  <ItemGroup Condition="!$(TargetCsproj.Contains('MicroBenchmarks.csproj'))">
-    <HelixWorkItem Include="$(BuildConfig).WorkItem">
-      <PayloadDirectory>$(WorkItemDirectory)</PayloadDirectory>
-      <PreCommands Condition="'$(Compare)' == 'true'">$(WorkItemCommand) --bdn-artifacts $(BaselineArtifactsDirectory) --bdn-arguments="--anyCategories $(BDNCategories) $(ExtraBenchmarkDotNetArguments) $(BaselineCoreRunArgument)"</PreCommands>
-      <Command>$(WorkItemCommand) --bdn-artifacts $(ArtifactsDirectory) --bdn-arguments="--anyCategories $(BDNCategories) $(ExtraBenchmarkDotNetArguments) $(CoreRunArgument)"</Command>
-      <PostCommands Condition="'$(Compare)' == 'true'">$(DotnetExe) run -f $(_Framework) -p $(ResultsComparer) --base $(BaselineArtifactsDirectory) --diff $(ArtifactsDirectory) --threshold 2$(Percent) --xml $(XMLResults)</PostCommands>
-      <Timeout>4:00</Timeout>
-    </HelixWorkItem>
-  </ItemGroup>
-</Project>
\ No newline at end of file
diff --git a/eng/common/performance/performance-setup.ps1 b/eng/common/performance/performance-setup.ps1
deleted file mode 100644
index 656c0bd9022..00000000000
--- a/eng/common/performance/performance-setup.ps1
+++ /dev/null
@@ -1,147 +0,0 @@
-Param(
-    [string] $SourceDirectory=$env:BUILD_SOURCESDIRECTORY,
-    [string] $CoreRootDirectory,
-    [string] $BaselineCoreRootDirectory,
-    [string] $Architecture="x64",
-    [string] $Framework="net5.0",
-    [string] $CompilationMode="Tiered",
-    [string] $Repository=$env:BUILD_REPOSITORY_NAME,
-    [string] $Branch=$env:BUILD_SOURCEBRANCH,
-    [string] $CommitSha=$env:BUILD_SOURCEVERSION,
-    [string] $BuildNumber=$env:BUILD_BUILDNUMBER,
-    [string] $RunCategories="Libraries Runtime",
-    [string] $Csproj="src\benchmarks\micro\MicroBenchmarks.csproj",
-    [string] $Kind="micro",
-    [switch] $LLVM,
-    [switch] $MonoInterpreter,
-    [switch] $MonoAOT, 
-    [switch] $Internal,
-    [switch] $Compare,
-    [string] $MonoDotnet="",
-    [string] $Configurations="CompilationMode=$CompilationMode RunKind=$Kind"
-)
-
-$RunFromPerformanceRepo = ($Repository -eq "dotnet/performance") -or ($Repository -eq "dotnet-performance")
-$UseCoreRun = ($CoreRootDirectory -ne [string]::Empty)
-$UseBaselineCoreRun = ($BaselineCoreRootDirectory -ne [string]::Empty)
-
-$PayloadDirectory = (Join-Path $SourceDirectory "Payload")
-$PerformanceDirectory = (Join-Path $PayloadDirectory "performance")
-$WorkItemDirectory = (Join-Path $SourceDirectory "workitem")
-$ExtraBenchmarkDotNetArguments = "--iterationCount 1 --warmupCount 0 --invocationCount 1 --unrollFactor 1 --strategy ColdStart --stopOnFirstError true"
-$Creator = $env:BUILD_DEFINITIONNAME
-$PerfLabArguments = ""
-$HelixSourcePrefix = "pr"
-
-$Queue = "Windows.10.Amd64.ClientRS4.DevEx.15.8.Open"
-
-# TODO: Implement a better logic to determine if Framework is .NET Core or >= .NET 5.
-if ($Framework.StartsWith("netcoreapp") -or ($Framework -eq "net5.0")) {
-    $Queue = "Windows.10.Amd64.ClientRS5.Open"
-}
-
-if ($Compare) {
-    $Queue = "Windows.10.Amd64.19H1.Tiger.Perf.Open"
-    $PerfLabArguments = ""
-    $ExtraBenchmarkDotNetArguments = ""
-}
-
-if ($Internal) {
-    $Queue = "Windows.10.Amd64.19H1.Tiger.Perf"
-    $PerfLabArguments = "--upload-to-perflab-container"
-    $ExtraBenchmarkDotNetArguments = ""
-    $Creator = ""
-    $HelixSourcePrefix = "official"
-}
-
-if($MonoInterpreter)
-{
-    $ExtraBenchmarkDotNetArguments = "--category-exclusion-filter NoInterpreter"
-}
-
-if($MonoDotnet -ne "")
-{
-    $Configurations += " LLVM=$LLVM MonoInterpreter=$MonoInterpreter MonoAOT=$MonoAOT"
-    if($ExtraBenchmarkDotNetArguments -eq "")
-    {
-        #FIX ME: We need to block these tests as they don't run on mono for now
-        $ExtraBenchmarkDotNetArguments = "--exclusion-filter *Perf_Image* *Perf_NamedPipeStream*"
-    }
-    else
-    {
-        #FIX ME: We need to block these tests as they don't run on mono for now
-        $ExtraBenchmarkDotNetArguments += " --exclusion-filter *Perf_Image* *Perf_NamedPipeStream*"
-    }
-}
-
-# FIX ME: This is a workaround until we get this from the actual pipeline
-$CommonSetupArguments="--channel master --queue $Queue --build-number $BuildNumber --build-configs $Configurations --architecture $Architecture"
-$SetupArguments = "--repository https://github.com/$Repository --branch $Branch --get-perf-hash --commit-sha $CommitSha $CommonSetupArguments"
-
-
-#This grabs the LKG version number of dotnet and passes it to our scripts
-$VersionJSON = Get-Content global.json | ConvertFrom-Json
-$DotNetVersion = $VersionJSON.tools.dotnet
-$SetupArguments = "--dotnet-versions $DotNetVersion $SetupArguments"
-
-
-if ($RunFromPerformanceRepo) {
-    $SetupArguments = "--perf-hash $CommitSha $CommonSetupArguments"
-    
-    robocopy $SourceDirectory $PerformanceDirectory /E /XD $PayloadDirectory $SourceDirectory\artifacts $SourceDirectory\.git
-}
-else {
-    git clone --branch master --depth 1 --quiet https://github.com/dotnet/performance $PerformanceDirectory
-}
-
-if($MonoDotnet -ne "")
-{
-    $UsingMono = "true"
-    $MonoDotnetPath = (Join-Path $PayloadDirectory "dotnet-mono")
-    Move-Item -Path $MonoDotnet -Destination $MonoDotnetPath
-}
-
-if ($UseCoreRun) {
-    $NewCoreRoot = (Join-Path $PayloadDirectory "Core_Root")
-    Move-Item -Path $CoreRootDirectory -Destination $NewCoreRoot
-}
-if ($UseBaselineCoreRun) {
-    $NewBaselineCoreRoot = (Join-Path $PayloadDirectory "Baseline_Core_Root")
-    Move-Item -Path $BaselineCoreRootDirectory -Destination $NewBaselineCoreRoot
-}
-
-$DocsDir = (Join-Path $PerformanceDirectory "docs")
-robocopy $DocsDir $WorkItemDirectory
-
-# Set variables that we will need to have in future steps
-$ci = $true
-
-. "$PSScriptRoot\..\pipeline-logging-functions.ps1"
-
-# Directories
-Write-PipelineSetVariable -Name 'PayloadDirectory' -Value "$PayloadDirectory" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'PerformanceDirectory' -Value "$PerformanceDirectory" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'WorkItemDirectory' -Value "$WorkItemDirectory" -IsMultiJobVariable $false
-
-# Script Arguments
-Write-PipelineSetVariable -Name 'Python' -Value "py -3" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'ExtraBenchmarkDotNetArguments' -Value "$ExtraBenchmarkDotNetArguments" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'SetupArguments' -Value "$SetupArguments" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'PerfLabArguments' -Value "$PerfLabArguments" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'BDNCategories' -Value "$RunCategories" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'TargetCsproj' -Value "$Csproj" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'Kind' -Value "$Kind" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'Architecture' -Value "$Architecture" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'UseCoreRun' -Value "$UseCoreRun" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'UseBaselineCoreRun' -Value "$UseBaselineCoreRun" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'RunFromPerfRepo' -Value "$RunFromPerformanceRepo" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'Compare' -Value "$Compare" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'MonoDotnet' -Value "$UsingMono" -IsMultiJobVariable $false
-
-# Helix Arguments
-Write-PipelineSetVariable -Name 'Creator' -Value "$Creator" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'Queue' -Value "$Queue" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name 'HelixSourcePrefix' -Value "$HelixSourcePrefix" -IsMultiJobVariable $false
-Write-PipelineSetVariable -Name '_BuildConfig' -Value "$Architecture.$Kind.$Framework" -IsMultiJobVariable $false
-
-exit 0
\ No newline at end of file
diff --git a/eng/common/performance/performance-setup.sh b/eng/common/performance/performance-setup.sh
deleted file mode 100755
index 99d1b7bc1fc..00000000000
--- a/eng/common/performance/performance-setup.sh
+++ /dev/null
@@ -1,289 +0,0 @@
-#!/usr/bin/env bash
-
-source_directory=$BUILD_SOURCESDIRECTORY
-core_root_directory=
-baseline_core_root_directory=
-architecture=x64
-framework=net5.0
-compilation_mode=tiered
-repository=$BUILD_REPOSITORY_NAME
-branch=$BUILD_SOURCEBRANCH
-commit_sha=$BUILD_SOURCEVERSION
-build_number=$BUILD_BUILDNUMBER
-internal=false
-compare=false
-mono_dotnet=
-kind="micro"
-llvm=false
-monointerpreter=false
-monoaot=false
-run_categories="Libraries Runtime"
-csproj="src\benchmarks\micro\MicroBenchmarks.csproj"
-configurations="CompliationMode=$compilation_mode RunKind=$kind"
-run_from_perf_repo=false
-use_core_run=true
-use_baseline_core_run=true
-using_mono=false
-wasm_runtime_loc=
-using_wasm=false
-use_latest_dotnet=false
-
-while (($# > 0)); do
-  lowerI="$(echo $1 | awk '{print tolower($0)}')"
-  case $lowerI in
-    --sourcedirectory)
-      source_directory=$2
-      shift 2
-      ;;
-    --corerootdirectory)
-      core_root_directory=$2
-      shift 2
-      ;;
-    --baselinecorerootdirectory)
-      baseline_core_root_directory=$2
-      shift 2
-      ;;
-    --architecture)
-      architecture=$2
-      shift 2
-      ;;
-    --framework)
-      framework=$2
-      shift 2
-      ;;
-    --compilationmode)
-      compilation_mode=$2
-      shift 2
-      ;;
-    --repository)
-      repository=$2
-      shift 2
-      ;;
-    --branch)
-      branch=$2
-      shift 2
-      ;;
-    --commitsha)
-      commit_sha=$2
-      shift 2
-      ;;
-    --buildnumber)
-      build_number=$2
-      shift 2
-      ;;
-    --kind)
-      kind=$2
-      configurations="CompilationMode=$compilation_mode RunKind=$kind"
-      shift 2
-      ;;
-    --runcategories)
-      run_categories=$2
-      shift 2
-      ;;
-    --csproj)
-      csproj=$2
-      shift 2
-      ;;
-    --internal)
-      internal=true
-      shift 1
-      ;;
-    --llvm)
-      llvm=true
-      shift 1
-      ;;
-    --monointerpreter)
-      monointerpreter=true
-      shift 1
-      ;;
-    --monoaot)
-      monoaot=true
-      shift 1
-      ;;
-    --monodotnet)
-      mono_dotnet=$2
-      shift 2
-      ;;
-    --wasm)
-      wasm_runtime_loc=$2
-      shift 2
-      ;;
-    --compare)
-      compare=true
-      shift 1
-      ;;
-    --configurations)
-      configurations=$2
-      shift 2
-      ;;
-    --latestdotnet)
-      use_latest_dotnet=true
-      shift 1
-      ;;
-    *)
-      echo "Common settings:"
-      echo "  --corerootdirectory <value>    Directory where Core_Root exists, if running perf testing with --corerun"
-      echo "  --architecture <value>         Architecture of the testing being run"
-      echo "  --configurations <value>       List of key=value pairs that will be passed to perf testing infrastructure."
-      echo "                                 ex: --configurations \"CompilationMode=Tiered OptimzationLevel=PGO\""
-      echo "  --help                         Print help and exit"
-      echo ""
-      echo "Advanced settings:"
-      echo "  --framework <value>            The framework to run, if not running in master"
-      echo "  --compliationmode <value>      The compilation mode if not passing --configurations"
-      echo "  --sourcedirectory <value>      The directory of the sources. Defaults to env:BUILD_SOURCESDIRECTORY"
-      echo "  --repository <value>           The name of the repository in the <owner>/<repository name> format. Defaults to env:BUILD_REPOSITORY_NAME"
-      echo "  --branch <value>               The name of the branch. Defaults to env:BUILD_SOURCEBRANCH"
-      echo "  --commitsha <value>            The commit sha1 to run against. Defaults to env:BUILD_SOURCEVERSION"
-      echo "  --buildnumber <value>          The build number currently running. Defaults to env:BUILD_BUILDNUMBER"
-      echo "  --csproj                       The relative path to the benchmark csproj whose tests should be run. Defaults to src\benchmarks\micro\MicroBenchmarks.csproj"
-      echo "  --kind <value>                 Related to csproj. The kind of benchmarks that should be run. Defaults to micro"
-      echo "  --runcategories <value>        Related to csproj. Categories of benchmarks to run. Defaults to \"coreclr corefx\""
-      echo "  --internal                     If the benchmarks are running as an official job."
-      echo "  --monodotnet                   Pass the path to the mono dotnet for mono performance testing."
-      echo "  --wasm                         Path to the unpacked wasm runtime pack."
-      echo "  --latestdotnet                 --dotnet-versions will not be specified. --dotnet-versions defaults to LKG version in global.json "
-      echo ""
-      exit 0
-      ;;
-  esac
-done
-
-if [ "$repository" == "dotnet/performance" ] || [ "$repository" == "dotnet-performance" ]; then
-    run_from_perf_repo=true
-fi
-
-if [ -z "$configurations" ]; then
-    configurations="CompilationMode=$compilation_mode"
-fi
-
-if [ -z "$core_root_directory" ]; then
-    use_core_run=false
-fi
-
-if [ -z "$baseline_core_root_directory" ]; then
-    use_baseline_core_run=false
-fi
-
-payload_directory=$source_directory/Payload
-performance_directory=$payload_directory/performance
-workitem_directory=$source_directory/workitem
-extra_benchmark_dotnet_arguments="--iterationCount 1 --warmupCount 0 --invocationCount 1 --unrollFactor 1 --strategy ColdStart --stopOnFirstError true"
-perflab_arguments=
-queue=Ubuntu.1804.Amd64.Open
-creator=$BUILD_DEFINITIONNAME
-helix_source_prefix="pr"
-
-if [[ "$compare" == true ]]; then
-  extra_benchmark_dotnet_arguments=
-  perflab_arguments=
-
-  # No open queues for arm64
-  if [[ "$architecture" = "arm64" ]]; then
-    echo "Compare not available for arm64"
-    exit 1
-  fi
-
-  queue=Ubuntu.1804.Amd64.Tiger.Perf.Open
-fi
-
-if [[ "$internal" == true ]]; then
-    perflab_arguments="--upload-to-perflab-container"
-    helix_source_prefix="official"
-    creator=
-    extra_benchmark_dotnet_arguments=
-    
-    if [[ "$architecture" = "arm64" ]]; then
-        queue=Ubuntu.1804.Arm64.Perf
-    else
-        queue=Ubuntu.1804.Amd64.Tiger.Perf
-    fi
-fi
-
-if [[ "$mono_dotnet" != "" ]] && [[ "$monointerpreter" == "false" ]]; then
-    extra_benchmark_dotnet_arguments="$extra_benchmark_dotnet_arguments --category-exclusion-filter NoMono"
-fi
-
-if [[ "$wasm_runtime_loc" != "" ]]; then
-    configurations="CompilationMode=wasm RunKind=$kind"
-    extra_benchmark_dotnet_arguments="$extra_benchmark_dotnet_arguments --category-exclusion-filter NoInterpreter NoWASM NoMono"
-fi
-
-if [[ "$mono_dotnet" != "" ]] && [[ "$monointerpreter" == "true" ]]; then
-    configurations="$configurations LLVM=$llvm MonoInterpreter=$monointerpreter MonoAOT=$monoaot"
-    extra_benchmark_dotnet_arguments="$extra_benchmark_dotnet_arguments --category-exclusion-filter NoInterpreter NoMono"
-fi
-
-common_setup_arguments="--channel master --queue $queue --build-number $build_number --build-configs $configurations --architecture $architecture"
-setup_arguments="--repository https://github.com/$repository --branch $branch --get-perf-hash --commit-sha $commit_sha $common_setup_arguments"
-
-
-if [[ "$use_latest_dotnet" = false ]]; then
-    # Get the tools section from the global.json.
-    # This grabs the LKG version number of dotnet and passes it to our scripts
-    dotnet_version=`cat global.json | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj["tools"]["dotnet"])'`
-    setup_arguments="--dotnet-versions $dotnet_version $setup_arguments"
-fi
-
-if [[ "$run_from_perf_repo" = true ]]; then
-    payload_directory=
-    workitem_directory=$source_directory
-    performance_directory=$workitem_directory
-    setup_arguments="--perf-hash $commit_sha $common_setup_arguments"
-else
-    git clone --branch master --depth 1 --quiet https://github.com/dotnet/performance $performance_directory
-    
-    docs_directory=$performance_directory/docs
-    mv $docs_directory $workitem_directory
-fi
-
-if [[ "$wasm_runtime_loc" != "" ]]; then
-    using_wasm=true
-    wasm_dotnet_path=$payload_directory/dotnet-wasm
-    mv $wasm_runtime_loc $wasm_dotnet_path
-    extra_benchmark_dotnet_arguments="$extra_benchmark_dotnet_arguments --wasmMainJS \$HELIX_CORRELATION_PAYLOAD/dotnet-wasm/runtime-test.js --wasmEngine /home/helixbot/.jsvu/v8 --customRuntimePack \$HELIX_CORRELATION_PAYLOAD/dotnet-wasm"
-fi
-
-if [[ "$mono_dotnet" != "" ]]; then
-    using_mono=true
-    mono_dotnet_path=$payload_directory/dotnet-mono
-    mv $mono_dotnet $mono_dotnet_path
-fi
-
-if [[ "$use_core_run" = true ]]; then
-    new_core_root=$payload_directory/Core_Root
-    mv $core_root_directory $new_core_root
-fi
-
-if [[ "$use_baseline_core_run" = true ]]; then
-  new_baseline_core_root=$payload_directory/Baseline_Core_Root
-  mv $baseline_core_root_directory $new_baseline_core_root
-fi
-
-ci=true
-
-_script_dir=$(pwd)/eng/common
-. "$_script_dir/pipeline-logging-functions.sh"
-
-# Make sure all of our variables are available for future steps
-Write-PipelineSetVariable -name "UseCoreRun" -value "$use_core_run" -is_multi_job_variable false
-Write-PipelineSetVariable -name "UseBaselineCoreRun" -value "$use_baseline_core_run" -is_multi_job_variable false
-Write-PipelineSetVariable -name "Architecture" -value "$architecture" -is_multi_job_variable false
-Write-PipelineSetVariable -name "PayloadDirectory" -value "$payload_directory" -is_multi_job_variable false
-Write-PipelineSetVariable -name "PerformanceDirectory" -value "$performance_directory" -is_multi_job_variable false
-Write-PipelineSetVariable -name "WorkItemDirectory" -value "$workitem_directory" -is_multi_job_variable false
-Write-PipelineSetVariable -name "Queue" -value "$queue" -is_multi_job_variable false
-Write-PipelineSetVariable -name "SetupArguments" -value "$setup_arguments" -is_multi_job_variable false
-Write-PipelineSetVariable -name "Python" -value "python3" -is_multi_job_variable false
-Write-PipelineSetVariable -name "PerfLabArguments" -value "$perflab_arguments" -is_multi_job_variable false
-Write-PipelineSetVariable -name "ExtraBenchmarkDotNetArguments" -value "$extra_benchmark_dotnet_arguments" -is_multi_job_variable false
-Write-PipelineSetVariable -name "BDNCategories" -value "$run_categories" -is_multi_job_variable false
-Write-PipelineSetVariable -name "TargetCsproj" -value "$csproj" -is_multi_job_variable false
-Write-PipelineSetVariable -name "RunFromPerfRepo" -value "$run_from_perf_repo" -is_multi_job_variable false
-Write-PipelineSetVariable -name "Creator" -value "$creator" -is_multi_job_variable false
-Write-PipelineSetVariable -name "HelixSourcePrefix" -value "$helix_source_prefix" -is_multi_job_variable false
-Write-PipelineSetVariable -name "Kind" -value "$kind" -is_multi_job_variable false
-Write-PipelineSetVariable -name "_BuildConfig" -value "$architecture.$kind.$framework" -is_multi_job_variable false
-Write-PipelineSetVariable -name "Compare" -value "$compare" -is_multi_job_variable false
-Write-PipelineSetVariable -name "MonoDotnet" -value "$using_mono" -is_multi_job_variable false
-Write-PipelineSetVariable -name "WasmDotnet" -value "$using_wasm" -is_multi_job_variable false
diff --git a/eng/common/pipeline-logging-functions.ps1 b/eng/common/pipeline-logging-functions.ps1
index 8484451f3a5..8e422c561e4 100644
--- a/eng/common/pipeline-logging-functions.ps1
+++ b/eng/common/pipeline-logging-functions.ps1
@@ -29,14 +29,14 @@ function Write-PipelineTelemetryError {
         [switch]$AsOutput,
         [switch]$Force)
 
-        $PSBoundParameters.Remove('Category') | Out-Null
+    $PSBoundParameters.Remove('Category') | Out-Null
 
-        if($Force -Or ((Test-Path variable:ci) -And $ci)) {
-            $Message = "(NETCORE_ENGINEERING_TELEMETRY=$Category) $Message"
-        }
-        $PSBoundParameters.Remove('Message') | Out-Null
-        $PSBoundParameters.Add('Message', $Message)
-        Write-PipelineTaskError @PSBoundParameters
+    if ($Force -Or ((Test-Path variable:ci) -And $ci)) {
+        $Message = "(NETCORE_ENGINEERING_TELEMETRY=$Category) $Message"
+    }
+    $PSBoundParameters.Remove('Message') | Out-Null
+    $PSBoundParameters.Add('Message', $Message)
+    Write-PipelineTaskError @PSBoundParameters
 }
 
 # Specify "-Force" to force pipeline formatted output even if "$ci" is false or not set
@@ -55,8 +55,8 @@ function Write-PipelineTaskError {
         [switch]$Force
     )
 
-    if(!$Force -And (-Not (Test-Path variable:ci) -Or !$ci)) {
-        if($Type -eq 'error') {
+    if (!$Force -And (-Not (Test-Path variable:ci) -Or !$ci)) {
+        if ($Type -eq 'error') {
             Write-Host $Message -ForegroundColor Red
             return
         }
@@ -66,47 +66,61 @@ function Write-PipelineTaskError {
         }
     }
 
-    if(($Type -ne 'error') -and ($Type -ne 'warning')) {
+    if (($Type -ne 'error') -and ($Type -ne 'warning')) {
         Write-Host $Message
         return
     }
     $PSBoundParameters.Remove('Force') | Out-Null      
-    if(-not $PSBoundParameters.ContainsKey('Type')) {
+    if (-not $PSBoundParameters.ContainsKey('Type')) {
         $PSBoundParameters.Add('Type', 'error')
     }
     Write-LogIssue @PSBoundParameters
-  }
+}
   
-  function Write-PipelineSetVariable {
+function Write-PipelineSetVariable {
     [CmdletBinding()]
     param(
-      [Parameter(Mandatory = $true)]
-      [string]$Name,
-      [string]$Value,
-      [switch]$Secret,
-      [switch]$AsOutput,
-      [bool]$IsMultiJobVariable=$true)
-
-      if((Test-Path variable:ci) -And $ci) {
+        [Parameter(Mandatory = $true)]
+        [string]$Name,
+        [string]$Value,
+        [switch]$Secret,
+        [switch]$AsOutput,
+        [bool]$IsMultiJobVariable = $true)
+
+    if ((Test-Path variable:ci) -And $ci) {
         Write-LoggingCommand -Area 'task' -Event 'setvariable' -Data $Value -Properties @{
-          'variable' = $Name
-          'isSecret' = $Secret
-          'isOutput' = $IsMultiJobVariable
+            'variable' = $Name
+            'isSecret' = $Secret
+            'isOutput' = $IsMultiJobVariable
         } -AsOutput:$AsOutput
-      }
-  }
+    }
+}
   
-  function Write-PipelinePrependPath {
+function Write-PipelinePrependPath {
     [CmdletBinding()]
     param(
-      [Parameter(Mandatory=$true)]
-      [string]$Path,
-      [switch]$AsOutput)
+        [Parameter(Mandatory = $true)]
+        [string]$Path,
+        [switch]$AsOutput)
 
-      if((Test-Path variable:ci) -And $ci) {
+    if ((Test-Path variable:ci) -And $ci) {
         Write-LoggingCommand -Area 'task' -Event 'prependpath' -Data $Path -AsOutput:$AsOutput
-      }
-  }
+    }
+}
+
+function Write-PipelineSetResult {
+    [CmdletBinding()]
+    param(
+        [ValidateSet("Succeeded", "SucceededWithIssues", "Failed", "Cancelled", "Skipped")]
+        [Parameter(Mandatory = $true)]
+        [string]$Result,
+        [string]$Message)
+    if ((Test-Path variable:ci) -And $ci) {
+        Write-LoggingCommand -Area 'task' -Event 'complete' -Data $Message -Properties @{
+            'result' = $Result
+        }
+    }
+}
 
 <########################################
 # Private functions.
@@ -123,7 +137,8 @@ function Format-LoggingCommandData {
         foreach ($mapping in $script:loggingCommandEscapeMappings) {
             $Value = $Value.Replace($mapping.Token, $mapping.Replacement)
         }
-    } else {
+    }
+    else {
         for ($i = $script:loggingCommandEscapeMappings.Length - 1 ; $i -ge 0 ; $i--) {
             $mapping = $script:loggingCommandEscapeMappings[$i]
             $Value = $Value.Replace($mapping.Replacement, $mapping.Token)
@@ -156,7 +171,8 @@ function Format-LoggingCommand {
                 if ($first) {
                     $null = $sb.Append(' ')
                     $first = $false
-                } else {
+                }
+                else {
                     $null = $sb.Append(';')
                 }
 
@@ -193,7 +209,8 @@ function Write-LoggingCommand {
     $command = Format-LoggingCommand -Area $Area -Event $Event -Data $Data -Properties $Properties
     if ($AsOutput) {
         $command
-    } else {
+    }
+    else {
         Write-Host $command
     }
 }
@@ -212,12 +229,12 @@ function Write-LogIssue {
         [switch]$AsOutput)
 
     $command = Format-LoggingCommand -Area 'task' -Event 'logissue' -Data $Message -Properties @{
-            'type' = $Type
-            'code' = $ErrCode
-            'sourcepath' = $SourcePath
-            'linenumber' = $LineNumber
-            'columnnumber' = $ColumnNumber
-        }
+        'type'         = $Type
+        'code'         = $ErrCode
+        'sourcepath'   = $SourcePath
+        'linenumber'   = $LineNumber
+        'columnnumber' = $ColumnNumber
+    }
     if ($AsOutput) {
         return $command
     }
@@ -229,7 +246,8 @@ function Write-LogIssue {
             $foregroundColor = [System.ConsoleColor]::Red
             $backgroundColor = [System.ConsoleColor]::Black
         }
-    } else {
+    }
+    else {
         $foregroundColor = $host.PrivateData.WarningForegroundColor
         $backgroundColor = $host.PrivateData.WarningBackgroundColor
         if ($foregroundColor -isnot [System.ConsoleColor] -or $backgroundColor -isnot [System.ConsoleColor]) {
diff --git a/eng/common/pipeline-logging-functions.sh b/eng/common/pipeline-logging-functions.sh
index 6cd0a3400e6..6a0b2255e91 100755
--- a/eng/common/pipeline-logging-functions.sh
+++ b/eng/common/pipeline-logging-functions.sh
@@ -6,7 +6,7 @@ function Write-PipelineTelemetryError {
   local function_args=()
   local message=''
   while [[ $# -gt 0 ]]; do
-    opt="$(echo "${1/#--/-}" | awk '{print tolower($0)}')"
+    opt="$(echo "${1/#--/-}" | tr "[:upper:]" "[:lower:]")"
     case "$opt" in
       -category|-c)
         telemetry_category=$2
@@ -48,7 +48,7 @@ function Write-PipelineTaskError {
   local force=false
 
   while [[ $# -gt 0 ]]; do
-    opt="$(echo "${1/#--/-}" | awk '{print tolower($0)}')"
+    opt="$(echo "${1/#--/-}" | tr "[:upper:]" "[:lower:]")"
     case "$opt" in
       -type|-t)
         message_type=$2
@@ -122,7 +122,7 @@ function Write-PipelineSetVariable {
   local is_multi_job_variable=true
 
   while [[ $# -gt 0 ]]; do
-    opt="$(echo "${1/#--/-}" | awk '{print tolower($0)}')"
+    opt="$(echo "${1/#--/-}" | tr "[:upper:]" "[:lower:]")"
     case "$opt" in
       -name|-n)
         name=$2
@@ -164,7 +164,7 @@ function Write-PipelinePrependPath {
   local prepend_path=''
 
   while [[ $# -gt 0 ]]; do
-    opt="$(echo "${1/#--/-}" | awk '{print tolower($0)}')"
+    opt="$(echo "${1/#--/-}" | tr "[:upper:]" "[:lower:]")"
     case "$opt" in
       -path|-p)
         prepend_path=$2
@@ -179,4 +179,28 @@ function Write-PipelinePrependPath {
   if [[ "$ci" == true ]]; then
     echo "##vso[task.prependpath]$prepend_path"
   fi
-}
\ No newline at end of file
+}
+
+function Write-PipelineSetResult {
+  local result=''
+  local message=''
+
+  while [[ $# -gt 0 ]]; do
+    opt="$(echo "${1/#--/-}" | tr "[:upper:]" "[:lower:]")"
+    case "$opt" in
+      -result|-r)
+        result=$2
+        shift
+        ;;
+      -message|-m)
+        message=$2
+        shift
+        ;;
+    esac
+    shift
+  done
+
+  if [[ "$ci" == true ]]; then
+    echo "##vso[task.complete result=$result;]$message"
+  fi
+}
diff --git a/eng/common/post-build/post-build-utils.ps1 b/eng/common/post-build/post-build-utils.ps1
index 7d49744795f..534f6988d5b 100644
--- a/eng/common/post-build/post-build-utils.ps1
+++ b/eng/common/post-build/post-build-utils.ps1
@@ -69,9 +69,9 @@ function Trigger-Subscription([string]$SubscriptionId) {
 
 function Validate-MaestroVars {
   try {
-    Get-Variable MaestroApiEndPoint -Scope Global | Out-Null
-    Get-Variable MaestroApiVersion -Scope Global | Out-Null
-    Get-Variable MaestroApiAccessToken -Scope Global | Out-Null
+    Get-Variable MaestroApiEndPoint | Out-Null
+    Get-Variable MaestroApiVersion | Out-Null
+    Get-Variable MaestroApiAccessToken | Out-Null
 
     if (!($MaestroApiEndPoint -Match '^http[s]?://maestro-(int|prod).westus2.cloudapp.azure.com$')) {
       Write-PipelineTelemetryError -Category 'MaestroVars' -Message "MaestroApiEndPoint is not a valid Maestro URL. '$MaestroApiEndPoint'"
diff --git a/eng/common/post-build/publish-using-darc.ps1 b/eng/common/post-build/publish-using-darc.ps1
index 3396cd52716..2427ca6b6ae 100644
--- a/eng/common/post-build/publish-using-darc.ps1
+++ b/eng/common/post-build/publish-using-darc.ps1
@@ -10,6 +10,7 @@ param(
   [Parameter(Mandatory=$false)][string] $EnableNugetValidation,
   [Parameter(Mandatory=$false)][string] $PublishInstallersAndChecksums,
   [Parameter(Mandatory=$false)][string] $ArtifactsPublishingAdditionalParameters,
+  [Parameter(Mandatory=$false)][string] $SymbolPublishingAdditionalParameters,
   [Parameter(Mandatory=$false)][string] $SigningValidationAdditionalParameters
 )
 
@@ -21,10 +22,15 @@ try {
   $optionalParams = [System.Collections.ArrayList]::new()
 
   if ("" -ne $ArtifactsPublishingAdditionalParameters) {
-    $optionalParams.Add("artifact-publishing-parameters") | Out-Null
+    $optionalParams.Add("--artifact-publishing-parameters") | Out-Null
     $optionalParams.Add($ArtifactsPublishingAdditionalParameters) | Out-Null
   }
 
+  if ("" -ne $SymbolPublishingAdditionalParameters) {
+    $optionalParams.Add("--symbol-publishing-parameters") | Out-Null
+    $optionalParams.Add($SymbolPublishingAdditionalParameters) | Out-Null
+  }
+
   if ("false" -eq $WaitPublishingFinish) {
     $optionalParams.Add("--no-wait") | Out-Null
   }
diff --git a/eng/common/post-build/sourcelink-validation.ps1 b/eng/common/post-build/sourcelink-validation.ps1
index c7e7ae67d81..e8ab29afeb3 100644
--- a/eng/common/post-build/sourcelink-validation.ps1
+++ b/eng/common/post-build/sourcelink-validation.ps1
@@ -14,7 +14,10 @@ param(
 $global:RepoFiles = @{}
 
 # Maximum number of jobs to run in parallel
-$MaxParallelJobs = 6
+$MaxParallelJobs = 16
+
+$MaxRetries = 5
+$RetryWaitTimeInSeconds = 30
 
 # Wait time between check for system load
 $SecondsBetweenLoadChecks = 10
@@ -29,7 +32,10 @@ $ValidatePackage = {
   # Ensure input file exist
   if (!(Test-Path $PackagePath)) {
     Write-Host "Input file does not exist: $PackagePath"
-    return 1
+    return [pscustomobject]@{
+      result = 1
+      packagePath = $PackagePath
+    }
   }
 
   # Extensions for which we'll look for SourceLink information
@@ -59,7 +65,10 @@ $ValidatePackage = {
 
           # We ignore resource DLLs
           if ($FileName.EndsWith('.resources.dll')) {
-            return
+            return [pscustomobject]@{
+              result = 0
+              packagePath = $PackagePath
+            }
           }
 
           [System.IO.Compression.ZipFileExtensions]::ExtractToFile($_, $TargetFile, $true)
@@ -91,36 +100,59 @@ $ValidatePackage = {
                     $Status = 200
                     $Cache = $using:RepoFiles
 
-                    if ( !($Cache.ContainsKey($FilePath)) ) {
-                      try {
-                        $Uri = $Link -as [System.URI]
-                      
-                        # Only GitHub links are valid
-                        if ($Uri.AbsoluteURI -ne $null -and ($Uri.Host -match 'github' -or $Uri.Host -match 'githubusercontent')) {
-                          $Status = (Invoke-WebRequest -Uri $Link -UseBasicParsing -Method HEAD -TimeoutSec 5).StatusCode
+                    $attempts = 0
+
+                    while ($attempts -lt $using:MaxRetries) {
+                      if ( !($Cache.ContainsKey($FilePath)) ) {
+                        try {
+                          $Uri = $Link -as [System.URI]
+                        
+                          if ($Link -match "submodules") {
+                            # Skip submodule links until sourcelink properly handles submodules
+                            $Status = 200
+                          }
+                          elseif ($Uri.AbsoluteURI -ne $null -and ($Uri.Host -match 'github' -or $Uri.Host -match 'githubusercontent')) {
+                            # Only GitHub links are valid
+                            $Status = (Invoke-WebRequest -Uri $Link -UseBasicParsing -Method HEAD -TimeoutSec 5).StatusCode
+                          }
+                          else {
+                            # If it's not a github link, we want to break out of the loop and not retry.
+                            $Status = 0
+                            $attempts = $using:MaxRetries
+                          }
                         }
-                        else {
+                        catch {
+                          Write-Host $_
                           $Status = 0
                         }
                       }
-                      catch {
-                        write-host $_
-                        $Status = 0
-                      }
-                    }
 
-                    if ($Status -ne 200) {
-                      if ($NumFailedLinks -eq 0) {
-                        if ($FailedFiles.Value -eq 0) {
-                          Write-Host
+                      if ($Status -ne 200) {
+                        $attempts++
+                        
+                        if  ($attempts -lt $using:MaxRetries)
+                        {
+                          $attemptsLeft = $using:MaxRetries - $attempts
+                          Write-Warning "Download failed, $attemptsLeft attempts remaining, will retry in $using:RetryWaitTimeInSeconds seconds"
+                          Start-Sleep -Seconds $using:RetryWaitTimeInSeconds
+                        }
+                        else {
+                          if ($NumFailedLinks -eq 0) {
+                            if ($FailedFiles.Value -eq 0) {
+                              Write-Host
+                            }
+  
+                            Write-Host "`tFile $RealPath has broken links:"
+                          }
+  
+                          Write-Host "`t`tFailed to retrieve $Link"
+  
+                          $NumFailedLinks++
                         }
-
-                        Write-Host "`tFile $RealPath has broken links:"
                       }
-
-                      Write-Host "`t`tFailed to retrieve $Link"
-
-                      $NumFailedLinks++
+                      else {
+                        break
+                      }
                     }
                   }
               }
@@ -136,7 +168,7 @@ $ValidatePackage = {
         }
   }
   catch {
-  
+    Write-Host $_
   }
   finally {
     $zip.Dispose() 
@@ -161,9 +193,12 @@ $ValidatePackage = {
 function CheckJobResult(
     $result, 
     $packagePath,
-    [ref]$ValidationFailures) {
-  if ($jobResult.result -ne '0') {
-    Write-PipelineTelemetryError -Category 'SourceLink' -Message "$packagePath has broken SourceLink links."
+    [ref]$ValidationFailures,
+    [switch]$logErrors) {
+  if ($result -ne '0') {
+    if ($logErrors) {
+      Write-PipelineTelemetryError -Category 'SourceLink' -Message "$packagePath has broken SourceLink links."
+    }
     $ValidationFailures.Value++
   }
 }
@@ -217,6 +252,7 @@ function ValidateSourceLinkLinks {
   # Process each NuGet package in parallel
   Get-ChildItem "$InputPath\*.symbols.nupkg" |
     ForEach-Object {
+      Write-Host "Starting $($_.FullName)"
       Start-Job -ScriptBlock $ValidatePackage -ArgumentList $_.FullName | Out-Null
       $NumJobs = @(Get-Job -State 'Running').Count
       
@@ -228,16 +264,14 @@ function ValidateSourceLinkLinks {
 
       foreach ($Job in @(Get-Job -State 'Completed')) {
         $jobResult = Wait-Job -Id $Job.Id | Receive-Job
-        CheckJobResult $jobResult.result $jobResult.packagePath ([ref]$ValidationFailures)
+        CheckJobResult $jobResult.result $jobResult.packagePath ([ref]$ValidationFailures) -LogErrors
         Remove-Job -Id $Job.Id
       }
     }
 
   foreach ($Job in @(Get-Job)) {
     $jobResult = Wait-Job -Id $Job.Id | Receive-Job
-    if ($jobResult -ne '0') {
-      $ValidationFailures++
-    }
+    CheckJobResult $jobResult.result $jobResult.packagePath ([ref]$ValidationFailures)
     Remove-Job -Id $Job.Id
   }
   if ($ValidationFailures -gt 0) {
@@ -266,6 +300,10 @@ function InstallSourcelinkCli {
 try {
   InstallSourcelinkCli
 
+  foreach ($Job in @(Get-Job)) {
+    Remove-Job -Id $Job.Id
+  }
+
   ValidateSourceLinkLinks 
 }
 catch {
diff --git a/eng/common/post-build/symbols-validation.ps1 b/eng/common/post-build/symbols-validation.ps1
index fcc6019b495..a5af041ba77 100644
--- a/eng/common/post-build/symbols-validation.ps1
+++ b/eng/common/post-build/symbols-validation.ps1
@@ -1,30 +1,49 @@
 param(
-  [Parameter(Mandatory=$true)][string] $InputPath,              # Full path to directory where NuGet packages to be checked are stored
-  [Parameter(Mandatory=$true)][string] $ExtractPath,            # Full path to directory where the packages will be extracted during validation
-  [Parameter(Mandatory=$true)][string] $DotnetSymbolVersion,    # Version of dotnet symbol to use
-  [Parameter(Mandatory=$false)][switch] $ContinueOnError,       # If we should keep checking symbols after an error
-  [Parameter(Mandatory=$false)][switch] $Clean                  # Clean extracted symbols directory after checking symbols
+  [Parameter(Mandatory = $true)][string] $InputPath, # Full path to directory where NuGet packages to be checked are stored
+  [Parameter(Mandatory = $true)][string] $ExtractPath, # Full path to directory where the packages will be extracted during validation
+  [Parameter(Mandatory = $true)][string] $DotnetSymbolVersion, # Version of dotnet symbol to use
+  [Parameter(Mandatory = $false)][switch] $CheckForWindowsPdbs, # If we should check for the existence of windows pdbs in addition to portable PDBs
+  [Parameter(Mandatory = $false)][switch] $ContinueOnError, # If we should keep checking symbols after an error
+  [Parameter(Mandatory = $false)][switch] $Clean                  # Clean extracted symbols directory after checking symbols
 )
 
 # Maximum number of jobs to run in parallel
-$MaxParallelJobs = 6
+$MaxParallelJobs = 16
+
+# Max number of retries
+$MaxRetry = 5
 
 # Wait time between check for system load
 $SecondsBetweenLoadChecks = 10
 
+# Set error codes
+Set-Variable -Name "ERROR_BADEXTRACT" -Option Constant -Value -1
+Set-Variable -Name "ERROR_FILEDOESNOTEXIST" -Option Constant -Value -2
+
+$WindowsPdbVerificationParam = ""
+if ($CheckForWindowsPdbs) {
+  $WindowsPdbVerificationParam = "--windows-pdbs"
+}
+
 $CountMissingSymbols = {
   param( 
-    [string] $PackagePath          # Path to a NuGet package
+    [string] $PackagePath, # Path to a NuGet package
+    [string] $WindowsPdbVerificationParam # If we should check for the existence of windows pdbs in addition to portable PDBs
   )
 
   . $using:PSScriptRoot\..\tools.ps1
 
   Add-Type -AssemblyName System.IO.Compression.FileSystem
 
+  Write-Host "Validating $PackagePath "
+
   # Ensure input file exist
   if (!(Test-Path $PackagePath)) {
     Write-PipelineTaskError "Input file does not exist: $PackagePath"
-    return -2
+    return [pscustomobject]@{
+      result      = $using:ERROR_FILEDOESNOTEXIST
+      packagePath = $PackagePath
+    }
   }
   
   # Extensions for which we'll look for symbols
@@ -45,24 +64,25 @@ $CountMissingSymbols = {
     Write-Host "Something went wrong extracting $PackagePath"
     Write-Host $_
     return [pscustomobject]@{
-      result = -1
+      result      = $using:ERROR_BADEXTRACT
       packagePath = $PackagePath
     }
   }
 
   Get-ChildItem -Recurse $ExtractPath |
-    Where-Object {$RelevantExtensions -contains $_.Extension} |
-    ForEach-Object {
-      $FileName = $_.FullName
-      if ($FileName -Match '\\ref\\') {
-        Write-Host "`t Ignoring reference assembly file " $FileName
-        return
-      }
+  Where-Object { $RelevantExtensions -contains $_.Extension } |
+  ForEach-Object {
+    $FileName = $_.FullName
+    if ($FileName -Match '\\ref\\') {
+      Write-Host "`t Ignoring reference assembly file " $FileName
+      return
+    }
 
-      $FirstMatchingSymbolDescriptionOrDefault = {
+    $FirstMatchingSymbolDescriptionOrDefault = {
       param( 
-        [string] $FullPath,                  # Full path to the module that has to be checked
-        [string] $TargetServerParam,         # Parameter to pass to `Symbol Tool` indicating the server to lookup for symbols
+        [string] $FullPath, # Full path to the module that has to be checked
+        [string] $TargetServerParam, # Parameter to pass to `Symbol Tool` indicating the server to lookup for symbols
+        [string] $WindowsPdbVerificationParam, # Parameter to pass to potential check for windows-pdbs.
         [string] $SymbolsPath
       )
 
@@ -87,56 +107,76 @@ $CountMissingSymbols = {
 
       # DWARF file for a .dylib
       $DylibDwarf = $SymbolPath.Replace($Extension, '.dylib.dwarf')
-    
+
       $dotnetSymbolExe = "$env:USERPROFILE\.dotnet\tools"
       $dotnetSymbolExe = Resolve-Path "$dotnetSymbolExe\dotnet-symbol.exe"
 
-      & $dotnetSymbolExe --symbols --modules --windows-pdbs $TargetServerParam $FullPath -o $SymbolsPath | Out-Null
+      $totalRetries = 0
 
-      if (Test-Path $PdbPath) {
-        return 'PDB'
-      }
-      elseif (Test-Path $NGenPdb) {
-        return 'NGen PDB'
-      }
-      elseif (Test-Path $SODbg) {
-        return 'DBG for SO'
-      }  
-      elseif (Test-Path $DylibDwarf) {
-        return 'Dwarf for Dylib'
-      }  
-      elseif (Test-Path $SymbolPath) {
-        return 'Module'
-      }
-      else {
-        return $null
+      while ($totalRetries -lt $using:MaxRetry) {
+
+        # Save the output and get diagnostic output
+        $output = & $dotnetSymbolExe --symbols --modules $WindowsPdbVerificationParam $TargetServerParam $FullPath -o $SymbolsPath --diagnostics | Out-String
+
+        if (Test-Path $PdbPath) {
+          return 'PDB'
+        }
+        elseif (Test-Path $NGenPdb) {
+          return 'NGen PDB'
+        }
+        elseif (Test-Path $SODbg) {
+          return 'DBG for SO'
+        }  
+        elseif (Test-Path $DylibDwarf) {
+          return 'Dwarf for Dylib'
+        }  
+        elseif (Test-Path $SymbolPath) {
+          return 'Module'
+        }
+        else
+        {
+          $totalRetries++
+        }
       }
+      
+      return $null
     }
 
-      $SymbolsOnMSDL = & $FirstMatchingSymbolDescriptionOrDefault $FileName '--microsoft-symbol-server' $SymbolsPath
-      $SymbolsOnSymWeb = & $FirstMatchingSymbolDescriptionOrDefault $FileName '--internal-server' $SymbolsPath
-
-      Write-Host -NoNewLine "`t Checking file " $FileName "... "
+    $FileGuid = New-Guid
+    $ExpandedSymbolsPath = Join-Path -Path $SymbolsPath -ChildPath $FileGuid
+
+    $SymbolsOnMSDL = & $FirstMatchingSymbolDescriptionOrDefault `
+        -FullPath $FileName `
+        -TargetServerParam '--microsoft-symbol-server' `
+        -SymbolsPath "$ExpandedSymbolsPath-msdl" `
+        -WindowsPdbVerificationParam $WindowsPdbVerificationParam
+    $SymbolsOnSymWeb = & $FirstMatchingSymbolDescriptionOrDefault `
+        -FullPath $FileName `
+        -TargetServerParam '--internal-server' `
+        -SymbolsPath "$ExpandedSymbolsPath-symweb" `
+        -WindowsPdbVerificationParam $WindowsPdbVerificationParam
+
+    Write-Host -NoNewLine "`t Checking file " $FileName "... "
   
-      if ($SymbolsOnMSDL -ne $null -and $SymbolsOnSymWeb -ne $null) {
-        Write-Host "Symbols found on MSDL ($SymbolsOnMSDL) and SymWeb ($SymbolsOnSymWeb)"
+    if ($SymbolsOnMSDL -ne $null -and $SymbolsOnSymWeb -ne $null) {
+      Write-Host "Symbols found on MSDL ($SymbolsOnMSDL) and SymWeb ($SymbolsOnSymWeb)"
+    }
+    else {
+      $MissingSymbols++
+
+      if ($SymbolsOnMSDL -eq $null -and $SymbolsOnSymWeb -eq $null) {
+        Write-Host 'No symbols found on MSDL or SymWeb!'
       }
       else {
-        $MissingSymbols++
-
-        if ($SymbolsOnMSDL -eq $null -and $SymbolsOnSymWeb -eq $null) {
-          Write-Host 'No symbols found on MSDL or SymWeb!'
+        if ($SymbolsOnMSDL -eq $null) {
+          Write-Host 'No symbols found on MSDL!'
         }
         else {
-          if ($SymbolsOnMSDL -eq $null) {
-            Write-Host 'No symbols found on MSDL!'
-          }
-          else {
-            Write-Host 'No symbols found on SymWeb!'
-          }
+          Write-Host 'No symbols found on SymWeb!'
         }
       }
     }
+  }
   
   if ($using:Clean) {
     Remove-Item $ExtractPath -Recurse -Force
@@ -145,24 +185,31 @@ $CountMissingSymbols = {
   Pop-Location
 
   return [pscustomobject]@{
-      result = $MissingSymbols
-      packagePath = $PackagePath
-    }
+    result      = $MissingSymbols
+    packagePath = $PackagePath
+  }
 }
 
 function CheckJobResult(
-    $result, 
-    $packagePath,
-    [ref]$DupedSymbols,
-    [ref]$TotalFailures) {
-  if ($result -eq '-1') {
+  $result, 
+  $packagePath,
+  [ref]$DupedSymbols,
+  [ref]$TotalFailures) {
+  if ($result -eq $ERROR_BADEXTRACT) {
     Write-PipelineTelemetryError -Category 'CheckSymbols' -Message "$packagePath has duplicated symbol files"
     $DupedSymbols.Value++
   } 
-  elseif ($jobResult.result -ne '0') {
+  elseif ($result -eq $ERROR_FILEDOESNOTEXIST) {
+    Write-PipelineTelemetryError -Category 'CheckSymbols' -Message "$packagePath does not exist"
+    $TotalFailures.Value++
+  }
+  elseif ($result -gt '0') {
     Write-PipelineTelemetryError -Category 'CheckSymbols' -Message "Missing symbols for $result modules in the package $packagePath"
     $TotalFailures.Value++
   }
+  else {
+    Write-Host "All symbols verified for package $packagePath"
+  }
 }
 
 function CheckSymbolsAvailable {
@@ -170,6 +217,7 @@ function CheckSymbolsAvailable {
     Remove-Item $ExtractPath -Force  -Recurse -ErrorAction SilentlyContinue
   }
 
+  $TotalPackages = 0
   $TotalFailures = 0
   $DupedSymbols = 0
 
@@ -192,9 +240,9 @@ function CheckSymbolsAvailable {
         return
       }
 
-      Write-Host "Validating $FileName "
+      $TotalPackages++
 
-      Start-Job -ScriptBlock $CountMissingSymbols -ArgumentList $FullName | Out-Null
+      Start-Job -ScriptBlock $CountMissingSymbols -ArgumentList @($FullName,$WindowsPdbVerificationParam) | Out-Null
 
       $NumJobs = @(Get-Job -State 'Running').Count
 
@@ -219,11 +267,11 @@ function CheckSymbolsAvailable {
 
   if ($TotalFailures -gt 0 -or $DupedSymbols -gt 0) {
     if ($TotalFailures -gt 0) {
-      Write-PipelineTelemetryError -Category 'CheckSymbols' -Message "Symbols missing for $TotalFailures packages"
+      Write-PipelineTelemetryError -Category 'CheckSymbols' -Message "Symbols missing for $TotalFailures/$TotalPackages packages"
     }
 
     if ($DupedSymbols -gt 0) {
-      Write-PipelineTelemetryError -Category 'CheckSymbols' -Message "$DupedSymbols packages had duplicated symbol files"
+      Write-PipelineTelemetryError -Category 'CheckSymbols' -Message "$DupedSymbols/$TotalPackages packages had duplicated symbol files and could not be extracted"
     }
     
     ExitWithExitCode 1
diff --git a/eng/common/sdk-task.ps1 b/eng/common/sdk-task.ps1
index f55c43c6f47..7ab9baac5c8 100644
--- a/eng/common/sdk-task.ps1
+++ b/eng/common/sdk-task.ps1
@@ -34,7 +34,7 @@ function Print-Usage() {
 function Build([string]$target) {
   $logSuffix = if ($target -eq 'Execute') { '' } else { ".$target" }
   $log = Join-Path $LogDir "$task$logSuffix.binlog"
-  $outputPath = Join-Path $ToolsetDir "$task\\"
+  $outputPath = Join-Path $ToolsetDir "$task\"
 
   MSBuild $taskProject `
     /bl:$log `
@@ -53,7 +53,7 @@ try {
   }
 
   if ($task -eq "") {
-    Write-PipelineTelemetryError -Category 'Build' -Message "Missing required parameter '-task <value>'" -ForegroundColor Red
+    Write-PipelineTelemetryError -Category 'Build' -Message "Missing required parameter '-task <value>'"
     Print-Usage
     ExitWithExitCode 1
   }
@@ -64,7 +64,7 @@ try {
       $GlobalJson.tools | Add-Member -Name "vs" -Value (ConvertFrom-Json "{ `"version`": `"16.5`" }") -MemberType NoteProperty
     }
     if( -not ($GlobalJson.tools.PSObject.Properties.Name -match "xcopy-msbuild" )) {
-      $GlobalJson.tools | Add-Member -Name "xcopy-msbuild" -Value "16.8.0-preview3" -MemberType NoteProperty
+      $GlobalJson.tools | Add-Member -Name "xcopy-msbuild" -Value "16.10.0-preview2" -MemberType NoteProperty
     }
     if ($GlobalJson.tools."xcopy-msbuild".Trim() -ine "none") {
         $xcopyMSBuildToolsFolder = InitializeXCopyMSBuild $GlobalJson.tools."xcopy-msbuild" -install $true
@@ -78,11 +78,14 @@ try {
 
   $taskProject = GetSdkTaskProject $task
   if (!(Test-Path $taskProject)) {
-    Write-PipelineTelemetryError -Category 'Build' -Message "Unknown task: $task" -ForegroundColor Red
+    Write-PipelineTelemetryError -Category 'Build' -Message "Unknown task: $task"
     ExitWithExitCode 1
   }
 
   if ($restore) {
+    if ($ci) {
+      Try-LogClientIpAddress
+    }
     Build 'Restore'
   }
 
diff --git a/eng/common/sdl/configure-sdl-tool.ps1 b/eng/common/sdl/configure-sdl-tool.ps1
new file mode 100644
index 00000000000..4999c307088
--- /dev/null
+++ b/eng/common/sdl/configure-sdl-tool.ps1
@@ -0,0 +1,109 @@
+Param(
+  [string] $GuardianCliLocation,
+  [string] $WorkingDirectory,
+  [string] $TargetDirectory,
+  [string] $GdnFolder,
+  # The list of Guardian tools to configure. For each object in the array:
+  # - If the item is a [hashtable], it must contain these entries:
+  #   - Name = The tool name as Guardian knows it.
+  #   - Scenario = (Optional) Scenario-specific name for this configuration entry. It must be unique
+  #     among all tool entries with the same Name.
+  #   - Args = (Optional) Array of Guardian tool configuration args, like '@("Target > C:\temp")'
+  # - If the item is a [string] $v, it is treated as '@{ Name="$v" }'
+  [object[]] $ToolsList,
+  [string] $GuardianLoggerLevel='Standard',
+  # Optional: Additional params to add to any tool using CredScan.
+  [string[]] $CrScanAdditionalRunConfigParams,
+  # Optional: Additional params to add to any tool using PoliCheck.
+  [string[]] $PoliCheckAdditionalRunConfigParams
+)
+
+$ErrorActionPreference = 'Stop'
+Set-StrictMode -Version 2.0
+$disableConfigureToolsetImport = $true
+$global:LASTEXITCODE = 0
+
+try {
+  # `tools.ps1` checks $ci to perform some actions. Since the SDL
+  # scripts don't necessarily execute in the same agent that run the
+  # build.ps1/sh script this variable isn't automatically set.
+  $ci = $true
+  . $PSScriptRoot\..\tools.ps1
+
+  # Normalize tools list: all in [hashtable] form with defined values for each key.
+  $ToolsList = $ToolsList |
+    ForEach-Object {
+      if ($_ -is [string]) {
+        $_ = @{ Name = $_ }
+      }
+
+      if (-not ($_['Scenario'])) { $_.Scenario = "" }
+      if (-not ($_['Args'])) { $_.Args = @() }
+      $_
+    }
+  
+  Write-Host "List of tools to configure:"
+  $ToolsList | ForEach-Object { $_ | Out-String | Write-Host }
+
+  # We store config files in the r directory of .gdn
+  $gdnConfigPath = Join-Path $GdnFolder 'r'
+  $ValidPath = Test-Path $GuardianCliLocation
+
+  if ($ValidPath -eq $False)
+  {
+    Write-PipelineTelemetryError -Force -Category 'Sdl' -Message "Invalid Guardian CLI Location."
+    ExitWithExitCode 1
+  }
+
+  foreach ($tool in $ToolsList) {
+    # Put together the name and scenario to make a unique key.
+    $toolConfigName = $tool.Name
+    if ($tool.Scenario) {
+      $toolConfigName += "_" + $tool.Scenario
+    }
+
+    Write-Host "=== Configuring $toolConfigName..."
+
+    $gdnConfigFile = Join-Path $gdnConfigPath "$toolConfigName-configure.gdnconfig"
+
+    # For some tools, add default and automatic args.
+    if ($tool.Name -eq 'credscan') {
+      if ($targetDirectory) {
+        $tool.Args += "TargetDirectory < $TargetDirectory"
+      }
+      $tool.Args += "OutputType < pre"
+      $tool.Args += $CrScanAdditionalRunConfigParams
+    } elseif ($tool.Name -eq 'policheck') {
+      if ($targetDirectory) {
+        $tool.Args += "Target < $TargetDirectory"
+      }
+      $tool.Args += $PoliCheckAdditionalRunConfigParams
+    }
+
+    # Create variable pointing to the args array directly so we can use splat syntax later.
+    $toolArgs = $tool.Args
+
+    # Configure the tool. If args array is provided or the current tool has some default arguments
+    # defined, add "--args" and splat each element on the end. Arg format is "{Arg id} < {Value}",
+    # one per parameter. Doc page for "guardian configure":
+    # https://dev.azure.com/securitytools/SecurityIntegration/_wiki/wikis/Guardian/1395/configure
+    Exec-BlockVerbosely {
+      & $GuardianCliLocation configure `
+        --working-directory $WorkingDirectory `
+        --tool $tool.Name `
+        --output-path $gdnConfigFile `
+        --logger-level $GuardianLoggerLevel `
+        --noninteractive `
+        --force `
+        $(if ($toolArgs) { "--args" }) @toolArgs
+      Exit-IfNZEC "Sdl"
+    }
+
+    Write-Host "Created '$toolConfigName' configuration file: $gdnConfigFile"
+  }
+}
+catch {
+  Write-Host $_.ScriptStackTrace
+  Write-PipelineTelemetryError -Force -Category 'Sdl' -Message $_
+  ExitWithExitCode 1
+}
diff --git a/eng/common/sdl/execute-all-sdl-tools.ps1 b/eng/common/sdl/execute-all-sdl-tools.ps1
index b6a7de26b47..1157151f486 100644
--- a/eng/common/sdl/execute-all-sdl-tools.ps1
+++ b/eng/common/sdl/execute-all-sdl-tools.ps1
@@ -7,8 +7,17 @@ Param(
   [string] $SourceDirectory=$env:BUILD_SOURCESDIRECTORY,                                         # Required: the directory where source files are located
   [string] $ArtifactsDirectory = (Join-Path $env:BUILD_ARTIFACTSTAGINGDIRECTORY ('artifacts')),  # Required: the directory where build artifacts are located
   [string] $AzureDevOpsAccessToken,                                                              # Required: access token for dnceng; should be provided via KeyVault
-  [string[]] $SourceToolsList,                                                                   # Optional: list of SDL tools to run on source code
-  [string[]] $ArtifactToolsList,                                                                 # Optional: list of SDL tools to run on built artifacts
+
+  # Optional: list of SDL tools to run on source code. See 'configure-sdl-tool.ps1' for tools list
+  # format.
+  [object[]] $SourceToolsList,
+  # Optional: list of SDL tools to run on built artifacts. See 'configure-sdl-tool.ps1' for tools
+  # list format.
+  [object[]] $ArtifactToolsList,
+  # Optional: list of SDL tools to run without automatically specifying a target directory. See
+  # 'configure-sdl-tool.ps1' for tools list format.
+  [object[]] $CustomToolsList,
+
   [bool] $TsaPublish=$False,                                                                     # Optional: true will publish results to TSA; only set to true after onboarding to TSA; TSA is the automated framework used to upload test results as bugs.
   [string] $TsaBranchName=$env:BUILD_SOURCEBRANCH,                                               # Optional: required for TSA publish; defaults to $(Build.SourceBranchName); TSA is the automated framework used to upload test results as bugs.
   [string] $TsaRepositoryName=$env:BUILD_REPOSITORY_NAME,                                        # Optional: TSA repository name; will be generated automatically if not submitted; TSA is the automated framework used to upload test results as bugs.
@@ -63,13 +72,16 @@ try {
     ExitWithExitCode 1
   }
 
-  & $(Join-Path $PSScriptRoot 'init-sdl.ps1') -GuardianCliLocation $guardianCliLocation -Repository $RepoName -BranchName $BranchName -WorkingDirectory $workingDirectory -AzureDevOpsAccessToken $AzureDevOpsAccessToken -GuardianLoggerLevel $GuardianLoggerLevel
+  Exec-BlockVerbosely {
+    & $(Join-Path $PSScriptRoot 'init-sdl.ps1') -GuardianCliLocation $guardianCliLocation -Repository $RepoName -BranchName $BranchName -WorkingDirectory $workingDirectory -AzureDevOpsAccessToken $AzureDevOpsAccessToken -GuardianLoggerLevel $GuardianLoggerLevel
+  }
   $gdnFolder = Join-Path $workingDirectory '.gdn'
 
   if ($TsaOnboard) {
     if ($TsaCodebaseName -and $TsaNotificationEmail -and $TsaCodebaseAdmin -and $TsaBugAreaPath) {
-      Write-Host "$guardianCliLocation tsa-onboard --codebase-name `"$TsaCodebaseName`" --notification-alias `"$TsaNotificationEmail`" --codebase-admin `"$TsaCodebaseAdmin`" --instance-url `"$TsaInstanceUrl`" --project-name `"$TsaProjectName`" --area-path `"$TsaBugAreaPath`" --iteration-path `"$TsaIterationPath`" --working-directory $workingDirectory --logger-level $GuardianLoggerLevel"
-      & $guardianCliLocation tsa-onboard --codebase-name "$TsaCodebaseName" --notification-alias "$TsaNotificationEmail" --codebase-admin "$TsaCodebaseAdmin" --instance-url "$TsaInstanceUrl" --project-name "$TsaProjectName" --area-path "$TsaBugAreaPath" --iteration-path "$TsaIterationPath" --working-directory $workingDirectory --logger-level $GuardianLoggerLevel
+      Exec-BlockVerbosely {
+        & $guardianCliLocation tsa-onboard --codebase-name "$TsaCodebaseName" --notification-alias "$TsaNotificationEmail" --codebase-admin "$TsaCodebaseAdmin" --instance-url "$TsaInstanceUrl" --project-name "$TsaProjectName" --area-path "$TsaBugAreaPath" --iteration-path "$TsaIterationPath" --working-directory $workingDirectory --logger-level $GuardianLoggerLevel
+      }
       if ($LASTEXITCODE -ne 0) {
         Write-PipelineTelemetryError -Force -Category 'Sdl' -Message "Guardian tsa-onboard failed with exit code $LASTEXITCODE."
         ExitWithExitCode $LASTEXITCODE
@@ -80,24 +92,41 @@ try {
     }
   }
 
-  if ($ArtifactToolsList -and $ArtifactToolsList.Count -gt 0) {
-    & $(Join-Path $PSScriptRoot 'run-sdl.ps1') -GuardianCliLocation $guardianCliLocation -WorkingDirectory $workingDirectory -TargetDirectory $ArtifactsDirectory -GdnFolder $gdnFolder -ToolsList $ArtifactToolsList -AzureDevOpsAccessToken $AzureDevOpsAccessToken -UpdateBaseline $UpdateBaseline -GuardianLoggerLevel $GuardianLoggerLevel -CrScanAdditionalRunConfigParams $CrScanAdditionalRunConfigParams -PoliCheckAdditionalRunConfigParams $PoliCheckAdditionalRunConfigParams
-    if ($LASTEXITCODE -ne 0) {
-      ExitWithExitCode $LASTEXITCODE
-    }
-  }
-  if ($SourceToolsList -and $SourceToolsList.Count -gt 0) {
-    & $(Join-Path $PSScriptRoot 'run-sdl.ps1') -GuardianCliLocation $guardianCliLocation -WorkingDirectory $workingDirectory -TargetDirectory $SourceDirectory -GdnFolder $gdnFolder -ToolsList $SourceToolsList -AzureDevOpsAccessToken $AzureDevOpsAccessToken -UpdateBaseline $UpdateBaseline -GuardianLoggerLevel $GuardianLoggerLevel -CrScanAdditionalRunConfigParams $CrScanAdditionalRunConfigParams -PoliCheckAdditionalRunConfigParams $PoliCheckAdditionalRunConfigParams
-    if ($LASTEXITCODE -ne 0) {
-      ExitWithExitCode $LASTEXITCODE
+  # Configure a list of tools with a default target directory. Populates the ".gdn/r" directory.
+  function Configure-ToolsList([object[]] $tools, [string] $targetDirectory) {
+    if ($tools -and $tools.Count -gt 0) {
+      Exec-BlockVerbosely {
+        & $(Join-Path $PSScriptRoot 'configure-sdl-tool.ps1') `
+          -GuardianCliLocation $guardianCliLocation `
+          -WorkingDirectory $workingDirectory `
+          -TargetDirectory $targetDirectory `
+          -GdnFolder $gdnFolder `
+          -ToolsList $tools `
+          -AzureDevOpsAccessToken $AzureDevOpsAccessToken `
+          -GuardianLoggerLevel $GuardianLoggerLevel `
+          -CrScanAdditionalRunConfigParams $CrScanAdditionalRunConfigParams `
+          -PoliCheckAdditionalRunConfigParams $PoliCheckAdditionalRunConfigParams
+        if ($BreakOnFailure) {
+          Exit-IfNZEC "Sdl"
+        }
+      }
     }
   }
 
-  if ($UpdateBaseline) {
-    & (Join-Path $PSScriptRoot 'push-gdn.ps1') -Repository $RepoName -BranchName $BranchName -GdnFolder $GdnFolder -AzureDevOpsAccessToken $AzureDevOpsAccessToken -PushReason 'Update baseline'
-    if ($LASTEXITCODE -ne 0) {
-      ExitWithExitCode $LASTEXITCODE
-    }
+  # Configure Artifact and Source tools with default Target directories.
+  Configure-ToolsList $ArtifactToolsList $ArtifactsDirectory
+  Configure-ToolsList $SourceToolsList $SourceDirectory
+  # Configure custom tools with no default Target directory.
+  Configure-ToolsList $CustomToolsList $null
+
+  # At this point, all tools are configured in the ".gdn" directory. Run them all in a single call.
+  # (If we used "run" multiple times, each run would overwrite data from earlier runs.)
+  Exec-BlockVerbosely {
+    & $(Join-Path $PSScriptRoot 'run-sdl.ps1') `
+      -GuardianCliLocation $guardianCliLocation `
+      -WorkingDirectory $workingDirectory `
+      -UpdateBaseline $UpdateBaseline `
+      -GdnFolder $gdnFolder
   }
 
   if ($TsaPublish) {
@@ -105,8 +134,9 @@ try {
       if (-not $TsaRepositoryName) {
         $TsaRepositoryName = "$($Repository)-$($BranchName)"
       }
-      Write-Host "$guardianCliLocation tsa-publish --all-tools --repository-name `"$TsaRepositoryName`" --branch-name `"$TsaBranchName`" --build-number `"$BuildNumber`" --codebase-name `"$TsaCodebaseName`" --notification-alias `"$TsaNotificationEmail`" --codebase-admin `"$TsaCodebaseAdmin`" --instance-url `"$TsaInstanceUrl`" --project-name `"$TsaProjectName`" --area-path `"$TsaBugAreaPath`" --iteration-path `"$TsaIterationPath`" --working-directory $workingDirectory --logger-level $GuardianLoggerLevel"
-      & $guardianCliLocation tsa-publish --all-tools --repository-name "$TsaRepositoryName" --branch-name "$TsaBranchName" --build-number "$BuildNumber" --onboard $True --codebase-name "$TsaCodebaseName" --notification-alias "$TsaNotificationEmail" --codebase-admin "$TsaCodebaseAdmin" --instance-url "$TsaInstanceUrl" --project-name "$TsaProjectName" --area-path "$TsaBugAreaPath" --iteration-path "$TsaIterationPath" --working-directory $workingDirectory  --logger-level $GuardianLoggerLevel
+      Exec-BlockVerbosely {
+        & $guardianCliLocation tsa-publish --all-tools --repository-name "$TsaRepositoryName" --branch-name "$TsaBranchName" --build-number "$BuildNumber" --onboard $True --codebase-name "$TsaCodebaseName" --notification-alias "$TsaNotificationEmail" --codebase-admin "$TsaCodebaseAdmin" --instance-url "$TsaInstanceUrl" --project-name "$TsaProjectName" --area-path "$TsaBugAreaPath" --iteration-path "$TsaIterationPath" --working-directory $workingDirectory  --logger-level $GuardianLoggerLevel
+      }
       if ($LASTEXITCODE -ne 0) {
         Write-PipelineTelemetryError -Force -Category 'Sdl' -Message "Guardian tsa-publish failed with exit code $LASTEXITCODE."
         ExitWithExitCode $LASTEXITCODE
@@ -119,7 +149,11 @@ try {
 
   if ($BreakOnFailure) {
     Write-Host "Failing the build in case of breaking results..."
-    & $guardianCliLocation break
+    Exec-BlockVerbosely {
+      & $guardianCliLocation break --working-directory $workingDirectory --logger-level $GuardianLoggerLevel
+    }
+  } else {
+    Write-Host "Letting the build pass even if there were breaking results..."
   }
 }
 catch {
diff --git a/eng/common/sdl/extract-artifact-archives.ps1 b/eng/common/sdl/extract-artifact-archives.ps1
new file mode 100644
index 00000000000..68da4fbf257
--- /dev/null
+++ b/eng/common/sdl/extract-artifact-archives.ps1
@@ -0,0 +1,63 @@
+# This script looks for each archive file in a directory and extracts it into the target directory.
+# For example, the file "$InputPath/bin.tar.gz" extracts to "$ExtractPath/bin.tar.gz.extracted/**".
+# Uses the "tar" utility added to Windows 10 / Windows 2019 that supports tar.gz and zip.
+param(
+  # Full path to directory where archives are stored.
+  [Parameter(Mandatory=$true)][string] $InputPath,
+  # Full path to directory to extract archives into. May be the same as $InputPath.
+  [Parameter(Mandatory=$true)][string] $ExtractPath
+)
+
+$ErrorActionPreference = 'Stop'
+Set-StrictMode -Version 2.0
+
+$disableConfigureToolsetImport = $true
+
+try {
+  # `tools.ps1` checks $ci to perform some actions. Since the SDL
+  # scripts don't necessarily execute in the same agent that run the
+  # build.ps1/sh script this variable isn't automatically set.
+  $ci = $true
+  . $PSScriptRoot\..\tools.ps1
+
+  Measure-Command {
+    $jobs = @()
+
+    # Find archive files for non-Windows and Windows builds.
+    $archiveFiles = @(
+      Get-ChildItem (Join-Path $InputPath "*.tar.gz")
+      Get-ChildItem (Join-Path $InputPath "*.zip")
+    )
+
+    foreach ($targzFile in $archiveFiles) {
+      $jobs += Start-Job -ScriptBlock {
+        $file = $using:targzFile
+        $fileName = [System.IO.Path]::GetFileName($file)
+        $extractDir = Join-Path $using:ExtractPath "$fileName.extracted"
+
+        New-Item $extractDir -ItemType Directory -Force | Out-Null
+
+        Write-Host "Extracting '$file' to '$extractDir'..."
+
+        # Pipe errors to stdout to prevent PowerShell detecting them and quitting the job early.
+        # This type of quit skips the catch, so we wouldn't be able to tell which file triggered the
+        # error. Save output so it can be stored in the exception string along with context.
+        $output = tar -xf $file -C $extractDir 2>&1
+        # Handle NZEC manually rather than using Exit-IfNZEC: we are in a background job, so we
+        # don't have access to the outer scope.
+        if ($LASTEXITCODE -ne 0) {
+          throw "Error extracting '$file': non-zero exit code ($LASTEXITCODE). Output: '$output'"
+        }
+
+        Write-Host "Extracted to $extractDir"
+      }
+    }
+
+    Receive-Job $jobs -Wait
+  }
+}
+catch {
+  Write-Host $_
+  Write-PipelineTelemetryError -Force -Category 'Sdl' -Message $_
+  ExitWithExitCode 1
+}
diff --git a/eng/common/sdl/init-sdl.ps1 b/eng/common/sdl/init-sdl.ps1
index ac1bc4b87bb..3ac1d92b370 100644
--- a/eng/common/sdl/init-sdl.ps1
+++ b/eng/common/sdl/init-sdl.ps1
@@ -46,7 +46,6 @@ try {
     Write-PipelineTelemetryError -Force -Category 'Build' -Message "Guardian baseline failed with exit code $LASTEXITCODE."
     ExitWithExitCode $LASTEXITCODE
   }
-  & $(Join-Path $PSScriptRoot 'push-gdn.ps1') -Repository $Repository -BranchName $BranchName -GdnFolder $gdnFolder -AzureDevOpsAccessToken $AzureDevOpsAccessToken -PushReason 'Initialize gdn folder'
   ExitWithExitCode 0
 }
 catch {
diff --git a/eng/common/sdl/push-gdn.ps1 b/eng/common/sdl/push-gdn.ps1
deleted file mode 100644
index c2eec7d92c9..00000000000
--- a/eng/common/sdl/push-gdn.ps1
+++ /dev/null
@@ -1,76 +0,0 @@
-Param(
-  [string] $Repository,
-  [string] $BranchName='master',
-  [string] $GdnFolder,
-  [string] $AzureDevOpsAccessToken,
-  [string] $PushReason
-)
-
-$ErrorActionPreference = 'Stop'
-Set-StrictMode -Version 2.0
-$disableConfigureToolsetImport = $true
-$global:LASTEXITCODE = 0
-
-try {
-  # `tools.ps1` checks $ci to perform some actions. Since the SDL
-  # scripts don't necessarily execute in the same agent that run the
-  # build.ps1/sh script this variable isn't automatically set.
-  $ci = $true
-  . $PSScriptRoot\..\tools.ps1
-
-  # We create the temp directory where we'll store the sdl-config repository
-  $sdlDir = Join-Path $env:TEMP 'sdl'
-  if (Test-Path $sdlDir) {
-    Remove-Item -Force -Recurse $sdlDir
-  }
-
-  Write-Host "git clone https://dnceng:`$AzureDevOpsAccessToken@dev.azure.com/dnceng/internal/_git/sdl-tool-cfg $sdlDir"
-  git clone https://dnceng:$AzureDevOpsAccessToken@dev.azure.com/dnceng/internal/_git/sdl-tool-cfg $sdlDir
-  if ($LASTEXITCODE -ne 0) {
-    Write-PipelineTelemetryError -Force -Category 'Sdl' -Message "Git clone failed with exit code $LASTEXITCODE."
-    ExitWithExitCode $LASTEXITCODE
-  }
-  # We copy the .gdn folder from our local run into the git repository so it can be committed
-  $sdlRepositoryFolder = Join-Path (Join-Path (Join-Path $sdlDir $Repository) $BranchName) '.gdn'
-  if (Get-Command Robocopy) {
-    Robocopy /S $GdnFolder $sdlRepositoryFolder
-  } else {
-    rsync -r $GdnFolder $sdlRepositoryFolder
-  }
-  # cd to the sdl-config directory so we can run git there
-  Push-Location $sdlDir
-  # git add . --> git commit --> git push
-  Write-Host 'git add .'
-  git add .
-  if ($LASTEXITCODE -ne 0) {
-    Write-PipelineTelemetryError -Force -Category 'Sdl' -Message "Git add failed with exit code $LASTEXITCODE."
-    ExitWithExitCode $LASTEXITCODE
-  }
-  # check if there are any staged changes (0 = no changes, 1 = changes)
-  # if we don't do this and there's nothing to commit `git commit` will return
-  # exit code 1 and we will fail
-  Write-Host "git diff --cached --exit-code"
-  git diff --cached --exit-code
-  Write-Host "git diff exit code: $LASTEXITCODE"
-  if ($LASTEXITCODE -ne 0) {
-    Write-Host "git -c user.email=`"dn-bot@microsoft.com`" -c user.name=`"Dotnet Bot`" commit -m `"$PushReason for $Repository/$BranchName`""
-    git -c user.email="dn-bot@microsoft.com" -c user.name="Dotnet Bot" commit -m "$PushReason for $Repository/$BranchName"
-    if ($LASTEXITCODE -ne 0) {
-      Write-PipelineTelemetryError -Force -Category 'Sdl' -Message "Git commit failed with exit code $LASTEXITCODE."
-      ExitWithExitCode $LASTEXITCODE
-    }
-    Write-Host 'git push'
-    git push
-    if ($LASTEXITCODE -ne 0) {
-      Write-PipelineTelemetryError -Force -Category 'Sdl' -Message "Git push failed with exit code $LASTEXITCODE."
-      ExitWithExitCode $LASTEXITCODE
-    }
-  }
-  # Return to the original directory
-  Pop-Location
-}
-catch {
-  Write-Host $_.ScriptStackTrace
-  Write-PipelineTelemetryError -Category 'Sdl' -Message $_
-  ExitWithExitCode 1
-}
diff --git a/eng/common/sdl/run-sdl.ps1 b/eng/common/sdl/run-sdl.ps1
index 3d9c87aba6a..2eac8c78f10 100644
--- a/eng/common/sdl/run-sdl.ps1
+++ b/eng/common/sdl/run-sdl.ps1
@@ -1,13 +1,9 @@
 Param(
   [string] $GuardianCliLocation,
   [string] $WorkingDirectory,
-  [string] $TargetDirectory,
   [string] $GdnFolder,
-  [string[]] $ToolsList,
   [string] $UpdateBaseline,
-  [string] $GuardianLoggerLevel='Standard',
-  [string[]] $CrScanAdditionalRunConfigParams,
-  [string[]] $PoliCheckAdditionalRunConfigParams
+  [string] $GuardianLoggerLevel='Standard'
 )
 
 $ErrorActionPreference = 'Stop'
@@ -23,7 +19,6 @@ try {
   . $PSScriptRoot\..\tools.ps1
 
   # We store config files in the r directory of .gdn
-  Write-Host $ToolsList
   $gdnConfigPath = Join-Path $GdnFolder 'r'
   $ValidPath = Test-Path $GuardianCliLocation
 
@@ -33,37 +28,18 @@ try {
     ExitWithExitCode 1
   }
 
-  $configParam = @('--config')
-
-  foreach ($tool in $ToolsList) {
-    $gdnConfigFile = Join-Path $gdnConfigPath "$tool-configure.gdnconfig"
-    Write-Host $tool
-    # We have to manually configure tools that run on source to look at the source directory only
-    if ($tool -eq 'credscan') {
-      Write-Host "$GuardianCliLocation configure --working-directory $WorkingDirectory --tool $tool --output-path $gdnConfigFile --logger-level $GuardianLoggerLevel --noninteractive --force --args `" TargetDirectory < $TargetDirectory `" `" OutputType < pre `" $(If ($CrScanAdditionalRunConfigParams) {$CrScanAdditionalRunConfigParams})"
-      & $GuardianCliLocation configure --working-directory $WorkingDirectory --tool $tool --output-path $gdnConfigFile --logger-level $GuardianLoggerLevel --noninteractive --force --args " TargetDirectory < $TargetDirectory " "OutputType < pre" $(If ($CrScanAdditionalRunConfigParams) {$CrScanAdditionalRunConfigParams})
-      if ($LASTEXITCODE -ne 0) {
-        Write-PipelineTelemetryError -Force -Category 'Sdl' -Message "Guardian configure for $tool failed with exit code $LASTEXITCODE."
-        ExitWithExitCode $LASTEXITCODE
-      }
-    }
-    if ($tool -eq 'policheck') {
-      Write-Host "$GuardianCliLocation configure --working-directory $WorkingDirectory --tool $tool --output-path $gdnConfigFile --logger-level $GuardianLoggerLevel --noninteractive --force --args `" Target < $TargetDirectory `" $(If ($PoliCheckAdditionalRunConfigParams) {$PoliCheckAdditionalRunConfigParams})"
-      & $GuardianCliLocation configure --working-directory $WorkingDirectory --tool $tool --output-path $gdnConfigFile --logger-level $GuardianLoggerLevel --noninteractive --force --args " Target < $TargetDirectory " $(If ($PoliCheckAdditionalRunConfigParams) {$PoliCheckAdditionalRunConfigParams})
-      if ($LASTEXITCODE -ne 0) {
-        Write-PipelineTelemetryError -Force -Category 'Sdl' -Message "Guardian configure for $tool failed with exit code $LASTEXITCODE."
-        ExitWithExitCode $LASTEXITCODE
-      }
-    }
-
-    $configParam+=$gdnConfigFile
-  }
-
-  Write-Host "$GuardianCliLocation run --working-directory $WorkingDirectory --baseline mainbaseline --update-baseline $UpdateBaseline --logger-level $GuardianLoggerLevel $configParam"
-  & $GuardianCliLocation run --working-directory $WorkingDirectory --tool $tool --baseline mainbaseline --update-baseline $UpdateBaseline --logger-level $GuardianLoggerLevel $configParam
-  if ($LASTEXITCODE -ne 0) {
-    Write-PipelineTelemetryError -Force -Category 'Sdl' -Message "Guardian run for $ToolsList using $configParam failed with exit code $LASTEXITCODE."
-    ExitWithExitCode $LASTEXITCODE
+  $gdnConfigFiles = Get-ChildItem $gdnConfigPath -Recurse -Include '*.gdnconfig'
+  Write-Host "Discovered Guardian config files:"
+  $gdnConfigFiles | Out-String | Write-Host
+
+  Exec-BlockVerbosely {
+    & $GuardianCliLocation run `
+      --working-directory $WorkingDirectory `
+      --baseline mainbaseline `
+      --update-baseline $UpdateBaseline `
+      --logger-level $GuardianLoggerLevel `
+      --config @gdnConfigFiles
+    Exit-IfNZEC "Sdl"
   }
 }
 catch {
diff --git a/eng/common/templates/job/execute-sdl.yml b/eng/common/templates/job/execute-sdl.yml
index 53c100222b2..69eb67849d7 100644
--- a/eng/common/templates/job/execute-sdl.yml
+++ b/eng/common/templates/job/execute-sdl.yml
@@ -2,17 +2,41 @@ parameters:
   enable: 'false'                                             # Whether the SDL validation job should execute or not
   overrideParameters: ''                                       # Optional: to override values for parameters.
   additionalParameters: ''                                     # Optional: parameters that need user specific values eg: '-SourceToolsList @("abc","def") -ArtifactToolsList @("ghi","jkl")'
+  # Optional: if specified, restore and use this version of Guardian instead of the default.
+  overrideGuardianVersion: ''
+  # Optional: if true, publish the '.gdn' folder as a pipeline artifact. This can help with in-depth
+  # diagnosis of problems with specific tool configurations.
+  publishGuardianDirectoryToPipeline: false
+  # The script to run to execute all SDL tools. Use this if you want to use a script to define SDL
+  # parameters rather than relying on YAML. It may be better to use a local script, because you can
+  # reproduce results locally without piecing together a command based on the YAML.
+  executeAllSdlToolsScript: 'eng/common/sdl/execute-all-sdl-tools.ps1'
   # There is some sort of bug (has been reported) in Azure DevOps where if this parameter is named
   # 'continueOnError', the parameter value is not correctly picked up.
   # This can also be remedied by the caller (post-build.yml) if it does not use a nested parameter
   sdlContinueOnError: false                                    # optional: determines whether to continue the build if the step errors;
-  downloadArtifacts: true                                      # optional: determines if the artifacts should be dowloaded
+  # optional: determines if build artifacts should be downloaded.
+  downloadArtifacts: true
+  # optional: determines if this job should search the directory of downloaded artifacts for
+  # 'tar.gz' and 'zip' archive files and extract them before running SDL validation tasks.
+  extractArchiveArtifacts: false
   dependsOn: ''                                                # Optional: dependencies of the job
   artifactNames: ''                                            # Optional: patterns supplied to DownloadBuildArtifacts
                                                                # Usage:
                                                                #  artifactNames:
                                                                #    - 'BlobArtifacts'
                                                                #    - 'Artifacts_Windows_NT_Release'
+  # Optional: download a list of pipeline artifacts. 'downloadArtifacts' controls build artifacts,
+  # not pipeline artifacts, so doesn't affect the use of this parameter.
+  pipelineArtifactNames: []
+  # Optional: location and ID of the AzDO build that the build/pipeline artifacts should be
+  # downloaded from. By default, uses runtime expressions to decide based on the variables set by
+  # the 'setupMaestroVars' dependency. Overriding this parameter is necessary if SDL tasks are
+  # running without Maestro++/BAR involved, or to download artifacts from a specific existing build
+  # to iterate quickly on SDL changes.
+  AzDOProjectName: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
+  AzDOPipelineId: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
+  AzDOBuildId: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
 
 jobs:
 - job: Run_SDL
@@ -22,16 +46,29 @@ jobs:
   variables:
     - group: DotNet-VSTS-Bot
     - name: AzDOProjectName
-      value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
+      value: ${{ parameters.AzDOProjectName }}
     - name: AzDOPipelineId
-      value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
+      value: ${{ parameters.AzDOPipelineId }}
     - name: AzDOBuildId
-      value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
+      value: ${{ parameters.AzDOBuildId }}
+    # The Guardian version specified in 'eng/common/sdl/packages.config'. This value must be kept in
+    # sync with the packages.config file.
+    - name: DefaultGuardianVersion
+      value: 0.53.3
+    - name: GuardianVersion
+      value: ${{ coalesce(parameters.overrideGuardianVersion, '$(DefaultGuardianVersion)') }}
+    - name: GuardianPackagesConfigFile
+      value: $(Build.SourcesDirectory)\eng\common\sdl\packages.config
   pool:
-    name: Hosted VS2017
+    # To extract archives (.tar.gz, .zip), we need access to "tar", added in Windows 10/2019.
+    ${{ if eq(parameters.extractArchiveArtifacts, 'false') }}:
+      name: Hosted VS2017
+    ${{ if ne(parameters.extractArchiveArtifacts, 'false') }}:
+      vmImage: windows-2019
   steps:
   - checkout: self
     clean: true
+
   - ${{ if ne(parameters.downloadArtifacts, 'false')}}:
     - ${{ if ne(parameters.artifactNames, '') }}:
       - ${{ each artifactName in parameters.artifactNames }}:
@@ -45,6 +82,7 @@ jobs:
             buildId: $(AzDOBuildId)
             artifactName: ${{ artifactName }}
             downloadPath: $(Build.ArtifactStagingDirectory)\artifacts
+            checkDownloadedFiles: true
     - ${{ if eq(parameters.artifactNames, '') }}:
       - task: DownloadBuildArtifacts@0
         displayName: Download Build Artifacts
@@ -57,16 +95,52 @@ jobs:
           downloadType: specific files
           itemPattern: "**"
           downloadPath: $(Build.ArtifactStagingDirectory)\artifacts
+          checkDownloadedFiles: true
+
+  - ${{ each artifactName in parameters.pipelineArtifactNames }}:
+    - task: DownloadPipelineArtifact@2
+      displayName: Download Pipeline Artifacts
+      inputs:
+        buildType: specific
+        buildVersionToDownload: specific
+        project: $(AzDOProjectName)
+        pipeline: $(AzDOPipelineId)
+        buildId: $(AzDOBuildId)
+        artifactName: ${{ artifactName }}
+        downloadPath: $(Build.ArtifactStagingDirectory)\artifacts
+        checkDownloadedFiles: true
+
   - powershell: eng/common/sdl/extract-artifact-packages.ps1
       -InputPath $(Build.ArtifactStagingDirectory)\artifacts\BlobArtifacts
       -ExtractPath $(Build.ArtifactStagingDirectory)\artifacts\BlobArtifacts
     displayName: Extract Blob Artifacts
     continueOnError: ${{ parameters.sdlContinueOnError }}
+
   - powershell: eng/common/sdl/extract-artifact-packages.ps1
       -InputPath $(Build.ArtifactStagingDirectory)\artifacts\PackageArtifacts
       -ExtractPath $(Build.ArtifactStagingDirectory)\artifacts\PackageArtifacts
     displayName: Extract Package Artifacts
     continueOnError: ${{ parameters.sdlContinueOnError }}
+
+  - ${{ if ne(parameters.extractArchiveArtifacts, 'false') }}:
+    - powershell: eng/common/sdl/extract-artifact-archives.ps1
+        -InputPath $(Build.ArtifactStagingDirectory)\artifacts
+        -ExtractPath $(Build.ArtifactStagingDirectory)\artifacts
+      displayName: Extract Archive Artifacts
+      continueOnError: ${{ parameters.sdlContinueOnError }}
+  
+  - ${{ if ne(parameters.overrideGuardianVersion, '') }}:
+    - powershell: |
+        $content = Get-Content $(GuardianPackagesConfigFile)
+
+        Write-Host "packages.config content was:`n$content"
+
+        $content = $content.Replace('$(DefaultGuardianVersion)', '$(GuardianVersion)')
+        $content | Set-Content $(GuardianPackagesConfigFile)
+
+        Write-Host "packages.config content updated to:`n$content"
+      displayName: Use overridden Guardian version ${{ parameters.overrideGuardianVersion }}
+
   - task: NuGetToolInstaller@1
     displayName: 'Install NuGet.exe'
   - task: NuGetCommand@2
@@ -77,15 +151,35 @@ jobs:
       nugetConfigPath: $(Build.SourcesDirectory)\eng\common\sdl\NuGet.config
       externalFeedCredentials: GuardianConnect
       restoreDirectory: $(Build.SourcesDirectory)\.packages
+
   - ${{ if ne(parameters.overrideParameters, '') }}:
-    - powershell: eng/common/sdl/execute-all-sdl-tools.ps1 ${{ parameters.overrideParameters }}
+    - powershell: ${{ parameters.executeAllSdlToolsScript }} ${{ parameters.overrideParameters }}
       displayName: Execute SDL
       continueOnError: ${{ parameters.sdlContinueOnError }}
   - ${{ if eq(parameters.overrideParameters, '') }}:
-    - powershell: eng/common/sdl/execute-all-sdl-tools.ps1
-        -GuardianPackageName Microsoft.Guardian.Cli.0.53.3
+    - powershell: ${{ parameters.executeAllSdlToolsScript }}
+        -GuardianPackageName Microsoft.Guardian.Cli.$(GuardianVersion)
         -NugetPackageDirectory $(Build.SourcesDirectory)\.packages
         -AzureDevOpsAccessToken $(dn-bot-dotnet-build-rw-code-rw)
         ${{ parameters.additionalParameters }}
       displayName: Execute SDL
       continueOnError: ${{ parameters.sdlContinueOnError }}
+
+  - ${{ if ne(parameters.publishGuardianDirectoryToPipeline, 'false') }}:
+    # We want to publish the Guardian results and configuration for easy diagnosis. However, the
+    # '.gdn' dir is a mix of configuration, results, extracted dependencies, and Guardian default
+    # tooling files. Some of these files are large and aren't useful during an investigation, so
+    # exclude them by simply deleting them before publishing. (As of writing, there is no documented
+    # way to selectively exclude a dir from the pipeline artifact publish task.)
+    - task: DeleteFiles@1
+      displayName: Delete Guardian dependencies to avoid uploading
+      inputs:
+        SourceFolder: $(Agent.BuildDirectory)/.gdn
+        Contents: |
+          c
+          i
+      condition: succeededOrFailed()
+    - publish: $(Agent.BuildDirectory)/.gdn
+      artifact: GuardianConfiguration
+      displayName: Publish GuardianConfiguration
+      condition: succeededOrFailed()
diff --git a/eng/common/templates/job/job.yml b/eng/common/templates/job/job.yml
index 2dcda1a8a61..37dceb1bab0 100644
--- a/eng/common/templates/job/job.yml
+++ b/eng/common/templates/job/job.yml
@@ -24,9 +24,9 @@ parameters:
   enablePublishBuildAssets: false
   enablePublishTestResults: false
   enablePublishUsingPipelines: false
-  useBuildManifest: false
   mergeTestResults: false
   testRunTitle: ''
+  testResultsFormat: ''
   name: ''
   preSteps: []
   runAsPublic: false
@@ -131,8 +131,8 @@ jobs:
     - task: RichCodeNavIndexer@0
       displayName: RichCodeNav Upload
       inputs:
-        languages: 'csharp'
-        environment: ${{ coalesce(parameters.richCodeNavigationEnvironment, 'prod') }}
+        languages: ${{ coalesce(parameters.richCodeNavigationLanguage, 'csharp') }}
+        environment: ${{ coalesce(parameters.richCodeNavigationEnvironment, 'production') }}
         richNavLogOutputDirectory: $(Build.SourcesDirectory)/artifacts/bin
       continueOnError: true
 
@@ -202,7 +202,7 @@ jobs:
       continueOnError: true
       condition: always()
 
-  - ${{ if eq(parameters.enablePublishTestResults, 'true') }}:
+  - ${{ if or(and(eq(parameters.enablePublishTestResults, 'true'), eq(parameters.testResultsFormat, '')), eq(parameters.testResultsFormat, 'xunit')) }}:
     - task: PublishTestResults@2
       displayName: Publish XUnit Test Results
       inputs:
@@ -213,6 +213,7 @@ jobs:
         mergeTestResults: ${{ parameters.mergeTestResults }}
       continueOnError: true
       condition: always()
+  - ${{ if or(and(eq(parameters.enablePublishTestResults, 'true'), eq(parameters.testResultsFormat, '')), eq(parameters.testResultsFormat, 'vstest')) }}:
     - task: PublishTestResults@2
       displayName: Publish TRX Test Results
       inputs:
@@ -241,12 +242,3 @@ jobs:
         ArtifactName: AssetManifests
       continueOnError: ${{ parameters.continueOnError }}
       condition: and(succeeded(), eq(variables['_DotNetPublishToBlobFeed'], 'true'))
-
-  - ${{ if eq(parameters.useBuildManifest, true) }}:
-    - task: PublishBuildArtifacts@1
-      displayName: Publish Build Manifest
-      inputs:
-        PathToPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/manifest.props'
-        PublishLocation: Container
-        ArtifactName: BuildManifests
-      continueOnError: ${{ parameters.continueOnError }}
diff --git a/eng/common/templates/job/performance.yml b/eng/common/templates/job/performance.yml
deleted file mode 100644
index f877fd7a898..00000000000
--- a/eng/common/templates/job/performance.yml
+++ /dev/null
@@ -1,95 +0,0 @@
-parameters:
-  steps: []                       # optional -- any additional steps that need to happen before pulling down the performance repo and sending the performance benchmarks to helix (ie building your repo)
-  variables: []                   # optional -- list of additional variables to send to the template
-  jobName: ''                     # required -- job name
-  displayName: ''                 # optional -- display name for the job. Will use jobName if not passed
-  pool: ''                        # required -- name of the Build pool
-  container: ''                   # required -- name of the container
-  osGroup: ''                     # required -- operating system for the job
-  extraSetupParameters: ''        # optional -- extra arguments to pass to the setup script
-  frameworks: ['netcoreapp3.0']   # optional -- list of frameworks to run against
-  continueOnError: 'false'        # optional -- determines whether to continue the build if the step errors
-  dependsOn: ''                   # optional -- dependencies of the job
-  timeoutInMinutes: 320           # optional -- timeout for the job
-  enableTelemetry: false          # optional -- enable for telemetry
-
-jobs:
-- template: ../jobs/jobs.yml
-  parameters:
-    dependsOn: ${{ parameters.dependsOn }}
-    enableTelemetry: ${{ parameters.enableTelemetry }}
-    enablePublishBuildArtifacts: true
-    continueOnError: ${{ parameters.continueOnError }}
-    
-    jobs:
-      - job: '${{ parameters.jobName }}'
-
-        ${{ if ne(parameters.displayName, '') }}:
-          displayName: '${{ parameters.displayName }}'
-        ${{ if eq(parameters.displayName, '') }}:
-          displayName: '${{ parameters.jobName }}'
-
-        timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
-
-        variables:
-
-        - ${{ each variable in parameters.variables }}:
-          - ${{ if ne(variable.name, '') }}:
-            - name: ${{ variable.name }}
-              value: ${{ variable.value }}
-          - ${{ if ne(variable.group, '') }}:
-            - group: ${{ variable.group }}
-
-        - IsInternal: ''
-        - HelixApiAccessToken: ''
-        - HelixPreCommand: ''
-
-        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
-          - ${{ if eq( parameters.osGroup, 'Windows_NT') }}:
-            - HelixPreCommand: 'set "PERFLAB_UPLOAD_TOKEN=$(PerfCommandUploadToken)"'
-            - IsInternal: -Internal
-          - ${{ if ne(parameters.osGroup, 'Windows_NT') }}:
-            - HelixPreCommand: 'export PERFLAB_UPLOAD_TOKEN="$(PerfCommandUploadTokenLinux)"'
-            - IsInternal: --internal
-            
-          - group: DotNet-HelixApi-Access
-          - group: dotnet-benchview
-
-        workspace:
-          clean: all
-        pool:
-          ${{ parameters.pool }}
-        container: ${{ parameters.container }}
-        strategy:
-          matrix:
-            ${{ each framework in parameters.frameworks }}:
-              ${{ framework }}:
-                _Framework: ${{ framework }}
-        steps:
-        - checkout: self
-          clean: true
-        # Run all of the steps to setup repo
-        - ${{ each step in parameters.steps }}:
-          - ${{ step }}
-        - powershell: $(Build.SourcesDirectory)\eng\common\performance\performance-setup.ps1 $(IsInternal) -Framework $(_Framework) ${{ parameters.extraSetupParameters }}
-          displayName: Performance Setup (Windows)
-          condition: and(succeeded(), eq(variables['Agent.Os'], 'Windows_NT'))
-          continueOnError: ${{ parameters.continueOnError }}
-        - script: $(Build.SourcesDirectory)/eng/common/performance/performance-setup.sh $(IsInternal) --framework $(_Framework) ${{ parameters.extraSetupParameters }}
-          displayName: Performance Setup (Unix)
-          condition: and(succeeded(), ne(variables['Agent.Os'], 'Windows_NT'))
-          continueOnError: ${{ parameters.continueOnError }}
-        - script: $(Python) $(PerformanceDirectory)/scripts/ci_setup.py $(SetupArguments)
-          displayName: Run ci setup script
-        # Run perf testing in helix
-        - template: /eng/common/templates/steps/perf-send-to-helix.yml
-          parameters:
-            HelixSource: '$(HelixSourcePrefix)/$(Build.Repository.Name)/$(Build.SourceBranch)' # sources must start with pr/, official/, prodcon/, or agent/
-            HelixType: 'test/performance/$(Kind)/$(_Framework)/$(Architecture)'
-            HelixAccessToken: $(HelixApiAccessToken)
-            HelixTargetQueues: $(Queue)
-            HelixPreCommands: $(HelixPreCommand)
-            Creator: $(Creator)
-            WorkItemTimeout: 4:00 # 4 hours
-            WorkItemDirectory: '$(WorkItemDirectory)' # WorkItemDirectory can not be empty, so we send it some docs to keep it happy
-            CorrelationPayloadDirectory: '$(PayloadDirectory)' # it gets checked out to a folder with shorter path than WorkItemDirectory so we can avoid file name too long exceptions
\ No newline at end of file
diff --git a/eng/common/templates/job/publish-build-assets.yml b/eng/common/templates/job/publish-build-assets.yml
index d0c3cc2b3ba..fe9dfdf720c 100644
--- a/eng/common/templates/job/publish-build-assets.yml
+++ b/eng/common/templates/job/publish-build-assets.yml
@@ -37,6 +37,7 @@ jobs:
     - name: _BuildConfig
       value: ${{ parameters.configuration }}
     - group: Publish-Build-Assets
+    - group: AzureDevOps-Artifact-Feeds-Pats
     # Skip component governance and codesign validation for SDL. These jobs
     # create no content.
     - name: skipComponentGovernanceDetection
@@ -51,12 +52,19 @@ jobs:
       inputs:
         artifactName: AssetManifests
         downloadPath: '$(Build.StagingDirectory)/Download'
+        checkDownloadedFiles: true
       condition: ${{ parameters.condition }}
       continueOnError: ${{ parameters.continueOnError }}
     
     - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
       - task: NuGetAuthenticate@0
 
+      - task: PowerShell@2 
+        displayName: Enable cross-org NuGet feed authentication 
+        inputs: 
+          filePath: $(Build.SourcesDirectory)/eng/common/enable-cross-org-publishing.ps1 
+          arguments: -token $(dn-bot-all-orgs-artifact-feeds-rw) 
+
     - task: PowerShell@2
       displayName: Publish Build Assets
       inputs:
@@ -86,7 +94,31 @@ jobs:
         PathtoPublish: '$(Build.StagingDirectory)/ReleaseConfigs.txt'
         PublishLocation: Container
         ArtifactName: ReleaseConfigs
-    
+
+    - task: powershell@2
+      displayName: Check if SymbolPublishingExclusionsFile.txt exists
+      inputs:
+        targetType: inline
+        script: |
+          $symbolExclusionfile = "$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt"
+          if(Test-Path -Path $symbolExclusionfile)
+          {
+            Write-Host "SymbolExclusionFile exists"
+            Write-Host "##vso[task.setvariable variable=SymbolExclusionFile]true"
+          }
+          else{
+           Write-Host "Symbols Exclusion file does not exists"
+           Write-Host "##vso[task.setvariable variable=SymbolExclusionFile]false"
+          }
+
+    - task: PublishBuildArtifacts@1
+      displayName: Publish SymbolPublishingExclusionsFile Artifact
+      condition: eq(variables['SymbolExclusionFile'], 'true') 
+      inputs:
+        PathtoPublish: '$(Build.SourcesDirectory)/eng/SymbolPublishingExclusionsFile.txt'
+        PublishLocation: Container
+        ArtifactName: ReleaseConfigs
+        
     - ${{ if eq(parameters.enablePublishBuildArtifacts, 'true') }}:
       - template: /eng/common/templates/steps/publish-logs.yml
         parameters:
diff --git a/eng/common/templates/job/source-build.yml b/eng/common/templates/job/source-build.yml
index 9332f5ecc38..5023d36dcb3 100644
--- a/eng/common/templates/job/source-build.yml
+++ b/eng/common/templates/job/source-build.yml
@@ -15,6 +15,9 @@ parameters:
   # nonPortable: false
   #   Enables non-portable mode. This means a more specific RID (e.g. fedora.32-x64 rather than
   #   linux-x64), and compiling against distro-provided packages rather than portable ones.
+  # skipPublishValidation: false
+  #   Disables publishing validation.  By default, a check is performed to ensure no packages are
+  #   published by source-build.
   # container: ''
   #   A container to use. Runs in docker.
   # pool: {}
@@ -28,6 +31,11 @@ parameters:
   #   container and pool.
   platform: {}
 
+  # The default VM host AzDO pool. This should be capable of running Docker containers: almost all
+  # source-build builds run in Docker, including the default managed platform.
+  defaultContainerHostPool:
+    vmImage: ubuntu-20.04
+
 jobs:
 - job: ${{ parameters.jobNamePrefix }}_${{ parameters.platform.name }}
   displayName: Source-Build (${{ parameters.platform.name }})
@@ -37,6 +45,9 @@ jobs:
 
   ${{ if ne(parameters.platform.container, '') }}:
     container: ${{ parameters.platform.container }}
+
+  ${{ if eq(parameters.platform.pool, '') }}:
+    pool: ${{ parameters.defaultContainerHostPool }}
   ${{ if ne(parameters.platform.pool, '') }}:
     pool: ${{ parameters.platform.pool }}
 
diff --git a/eng/common/templates/job/source-index-stage1.yml b/eng/common/templates/job/source-index-stage1.yml
new file mode 100644
index 00000000000..1cc0c29e4fd
--- /dev/null
+++ b/eng/common/templates/job/source-index-stage1.yml
@@ -0,0 +1,57 @@
+parameters:
+  runAsPublic: false
+  sourceIndexPackageVersion: 1.0.1-20210614.1
+  sourceIndexPackageSource: https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json
+  sourceIndexBuildCommand: powershell -NoLogo -NoProfile -ExecutionPolicy Bypass -Command "eng/common/build.ps1 -restore -build -binarylog -ci"
+  preSteps: []
+  binlogPath: artifacts/log/Debug/Build.binlog
+  pool:
+    vmImage: vs2017-win2016
+  condition: ''
+  dependsOn: ''
+
+jobs:
+- job: SourceIndexStage1
+  dependsOn: ${{ parameters.dependsOn }}
+  condition: ${{ parameters.condition }}
+  variables:
+  - name: SourceIndexPackageVersion
+    value: ${{ parameters.sourceIndexPackageVersion }}
+  - name: SourceIndexPackageSource
+    value: ${{ parameters.sourceIndexPackageSource }}
+  - name: BinlogPath
+    value: ${{ parameters.binlogPath }}
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
+    - group: source-dot-net stage1 variables
+
+  pool: ${{ parameters.pool }}
+  steps:
+  - ${{ each preStep in parameters.preSteps }}:
+    - ${{ preStep }}
+
+  - task: UseDotNet@2
+    displayName: Use .NET Core sdk 3.1
+    inputs:
+      packageType: sdk
+      version: 3.1.x
+      installationPath: $(Agent.TempDirectory)/dotnet
+      workingDirectory: $(Agent.TempDirectory)
+
+  - script: |
+      $(Agent.TempDirectory)/dotnet/dotnet tool install BinLogToSln --version $(SourceIndexPackageVersion) --add-source $(SourceIndexPackageSource) --tool-path $(Agent.TempDirectory)/.source-index/tools
+      $(Agent.TempDirectory)/dotnet/dotnet tool install UploadIndexStage1 --version $(SourceIndexPackageVersion) --add-source $(SourceIndexPackageSource) --tool-path $(Agent.TempDirectory)/.source-index/tools
+    displayName: Download Tools
+    # Set working directory to temp directory so 'dotnet' doesn't try to use global.json and use the repo's sdk.
+    workingDirectory: $(Agent.TempDirectory)
+
+  - script: ${{ parameters.sourceIndexBuildCommand }}
+    displayName: Build Repository
+
+  - script: $(Agent.TempDirectory)/.source-index/tools/BinLogToSln -i $(BinlogPath) -r $(Build.SourcesDirectory) -n $(Build.Repository.Name) -o .source-index/stage1output
+    displayName: Process Binlog into indexable sln
+
+  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
+    - script: $(Agent.TempDirectory)/.source-index/tools/UploadIndexStage1 -i .source-index/stage1output -n $(Build.Repository.Name)
+      displayName: Upload stage1 artifacts to source index
+      env:
+        BLOB_CONTAINER_URL: $(source-dot-net-stage1-blob-container-url)
diff --git a/eng/common/templates/jobs/jobs.yml b/eng/common/templates/jobs/jobs.yml
index 08845950f44..a1f8fce96ca 100644
--- a/eng/common/templates/jobs/jobs.yml
+++ b/eng/common/templates/jobs/jobs.yml
@@ -7,7 +7,14 @@ parameters:
 
   # Optional: Enable publishing using release pipelines
   enablePublishUsingPipelines: false
-  
+
+  # Optional: Enable running the source-build jobs to build repo from source
+  enableSourceBuild: false
+
+  # Optional: Parameters for source-build template.
+  #           See /eng/common/templates/jobs/source-build.yml for options
+  sourceBuildParameters: []
+
   graphFileGeneration:
     # Optional: Enable generating the graph files at the end of the build
     enabled: false
@@ -24,12 +31,8 @@ parameters:
   #           if 'true', the build won't run any of the internal only steps, even if it is running in non-public projects.
   runAsPublic: false
 
-  # Optional: Enable running the source-build jobs to build repo from source
-  runSourceBuild: false
-
-  # Optional: Parameters for source-build template.
-  #           See /eng/common/templates/jobs/source-build.yml for options
-  sourceBuildParameters: []
+  enableSourceIndex: false
+  sourceIndexParams: {}
 
 # Internal resources (telemetry, microbuild) can only be accessed from non-public projects,
 # and some (Microbuild) should only be applied to non-PR cases for internal builds.
@@ -50,14 +53,22 @@ jobs:
 
       name: ${{ job.job }}
 
-- ${{ if eq(parameters.runSourceBuild, true) }}:
+- ${{ if eq(parameters.enableSourceBuild, true) }}:
   - template: /eng/common/templates/jobs/source-build.yml
     parameters:
       allCompletedJobId: Source_Build_Complete
       ${{ each parameter in parameters.sourceBuildParameters }}:
         ${{ parameter.key }}: ${{ parameter.value }}
 
+- ${{ if eq(parameters.enableSourceIndex, 'true') }}:
+  - template: ../job/source-index-stage1.yml
+    parameters:
+      runAsPublic: ${{ parameters.runAsPublic }}
+      ${{ each parameter in parameters.sourceIndexParams }}:
+        ${{ parameter.key }}: ${{ parameter.value }}
+
 - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
+  
   - ${{ if or(eq(parameters.enablePublishBuildAssets, true), eq(parameters.artifacts.publish.manifests, 'true'), ne(parameters.artifacts.publish.manifests, '')) }}:
     - template: ../job/publish-build-assets.yml
       parameters:
@@ -69,7 +80,7 @@ jobs:
         - ${{ if eq(parameters.publishBuildAssetsDependsOn, '') }}:
           - ${{ each job in parameters.jobs }}:
             - ${{ job.job }}
-        - ${{ if eq(parameters.runSourceBuild, true) }}:
+        - ${{ if eq(parameters.enableSourceBuild, true) }}:
           - Source_Build_Complete
         pool:
           vmImage: vs2017-win2016
diff --git a/eng/common/templates/jobs/source-build.yml b/eng/common/templates/jobs/source-build.yml
index f463011e793..00aa98eb3bf 100644
--- a/eng/common/templates/jobs/source-build.yml
+++ b/eng/common/templates/jobs/source-build.yml
@@ -11,16 +11,14 @@ parameters:
   # See /eng/common/templates/job/source-build.yml
   jobNamePrefix: 'Source_Build'
 
-  # If changed to true, causes this template to include the default platform for a managed-only
-  # repo. The exact Docker image used for this build will be provided by Arcade. This has some risk,
-  # but since the repo is supposed to be managed-only, the risk should be very low.
-  includeDefaultManagedPlatform: false
+  # This is the default platform provided by Arcade, intended for use by a managed-only repo.
   defaultManagedPlatform:
     name: 'Managed'
     container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'
 
   # Defines the platforms on which to run build jobs. One job is created for each platform, and the
-  # object in this array is sent to the job template as 'platform'.
+  # object in this array is sent to the job template as 'platform'. If no platforms are specified,
+  # one job runs on 'defaultManagedPlatform'.
   platforms: []
 
 jobs:
@@ -32,7 +30,7 @@ jobs:
     dependsOn:
     - ${{ each platform in parameters.platforms }}:
       - ${{ parameters.jobNamePrefix }}_${{ platform.name }}
-    - ${{ if eq(parameters.includeDefaultManagedPlatform, true) }}:
+    - ${{ if eq(length(parameters.platforms), 0) }}:
       - ${{ parameters.jobNamePrefix }}_${{ parameters.defaultManagedPlatform.name }}
 
 - ${{ each platform in parameters.platforms }}:
@@ -41,7 +39,7 @@ jobs:
       jobNamePrefix: ${{ parameters.jobNamePrefix }}
       platform: ${{ platform }}
 
-- ${{ if eq(parameters.includeDefaultManagedPlatform, true) }}:
+- ${{ if eq(length(parameters.platforms), 0) }}:
   - template: /eng/common/templates/job/source-build.yml
     parameters:
       jobNamePrefix: ${{ parameters.jobNamePrefix }}
diff --git a/eng/common/templates/phases/base.yml b/eng/common/templates/phases/base.yml
deleted file mode 100644
index a87a0b2f687..00000000000
--- a/eng/common/templates/phases/base.yml
+++ /dev/null
@@ -1,130 +0,0 @@
-parameters:
-  # Optional: Clean sources before building
-  clean: true
-
-  # Optional: Git fetch depth
-  fetchDepth: ''
-
-  # Optional: name of the phase (not specifying phase name may cause name collisions)
-  name: ''
-  # Optional: display name of the phase
-  displayName: ''
-
-  # Optional: condition for the job to run
-  condition: ''
-
-  # Optional: dependencies of the phase
-  dependsOn: ''
-
-  # Required: A defined YAML queue
-  queue: {}
-
-  # Required: build steps
-  steps: []
-
-  # Optional: variables
-  variables: {}
-
-  # Optional: should run as a public build even in the internal project
-  #           if 'true', the build won't run any of the internal only steps, even if it is running in non-public projects.
-  runAsPublic: false
-
-  ## Telemetry variables
-
-  # Optional: enable sending telemetry
-  #           if 'true', these "variables" must be specified in the variables object or as part of the queue matrix
-  #             _HelixBuildConfig - differentiate between Debug, Release, other
-  #             _HelixSource - Example: build/product
-  #             _HelixType - Example: official/dotnet/arcade/$(Build.SourceBranch)
-  enableTelemetry: false
-
-  # Optional: Enable installing Microbuild plugin
-  #           if 'true', these "variables" must be specified in the variables object or as part of the queue matrix
-  #             _TeamName - the name of your team
-  #             _SignType - 'test' or 'real'
-  enableMicrobuild: false
-
-# Internal resources (telemetry, microbuild) can only be accessed from non-public projects,
-# and some (Microbuild) should only be applied to non-PR cases for internal builds.
-
-phases:
-- phase: ${{ parameters.name }}
-
-  ${{ if ne(parameters.displayName, '') }}:
-    displayName: ${{ parameters.displayName }}
-
-  ${{ if ne(parameters.condition, '') }}:
-    condition: ${{ parameters.condition }}
-
-  ${{ if ne(parameters.dependsOn, '') }}:
-    dependsOn: ${{ parameters.dependsOn }}
-
-  queue: ${{ parameters.queue }}
-
-  ${{ if ne(parameters.variables, '') }}:
-    variables:
-      ${{ insert }}: ${{ parameters.variables }}
-
-  steps:
-  - checkout: self
-    clean: ${{ parameters.clean }}
-    ${{ if ne(parameters.fetchDepth, '') }}:
-      fetchDepth: ${{ parameters.fetchDepth }}
-
-  - ${{ if eq(parameters.enableTelemetry, 'true') }}:
-    - template: /eng/common/templates/steps/telemetry-start.yml
-      parameters:
-        buildConfig: $(_HelixBuildConfig)
-        helixSource: $(_HelixSource)
-        helixType: $(_HelixType)
-        runAsPublic: ${{ parameters.runAsPublic }}
-
-  - ${{ if eq(parameters.enableMicrobuild, 'true') }}:
-    # Internal only resource, and Microbuild signing shouldn't be applied to PRs.
-    - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
-      - task: MicroBuildSigningPlugin@3
-        displayName: Install MicroBuild plugin
-        inputs:
-          signType: $(_SignType)
-          zipSources: false
-          feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
-          
-        env:
-          TeamName: $(_TeamName)
-        continueOnError: false
-        condition: and(succeeded(), in(variables['_SignType'], 'real', 'test'), eq(variables['Agent.Os'], 'Windows_NT'))
-
-  # Run provided build steps
-  - ${{ parameters.steps }}
-
-  - ${{ if eq(parameters.enableMicrobuild, 'true') }}:
-    # Internal only resources
-    - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
-      - task: MicroBuildCleanup@1
-        displayName: Execute Microbuild cleanup tasks  
-        condition: and(always(), in(variables['_SignType'], 'real', 'test'), eq(variables['Agent.Os'], 'Windows_NT'))
-        env:
-          TeamName: $(_TeamName)
-
-  - ${{ if eq(parameters.enableTelemetry, 'true') }}:
-    - template: /eng/common/templates/steps/telemetry-end.yml
-      parameters:
-        helixSource: $(_HelixSource)
-        helixType: $(_HelixType)
-
-  - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
-    - task: CopyFiles@2
-      displayName: Gather Asset Manifests
-      inputs:
-        SourceFolder: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/AssetManifest'
-        TargetFolder: '$(Build.StagingDirectory)/AssetManifests'
-      continueOnError: false
-      condition: and(succeeded(), eq(variables['_DotNetPublishToBlobFeed'], 'true'))
-    - task: PublishBuildArtifacts@1
-      displayName: Push Asset Manifests
-      inputs:
-        PathtoPublish: '$(Build.StagingDirectory)/AssetManifests'
-        PublishLocation: Container
-        ArtifactName: AssetManifests
-      continueOnError: false
-      condition: and(succeeded(), eq(variables['_DotNetPublishToBlobFeed'], 'true'))
diff --git a/eng/common/templates/phases/publish-build-assets.yml b/eng/common/templates/phases/publish-build-assets.yml
deleted file mode 100644
index a0a8074282a..00000000000
--- a/eng/common/templates/phases/publish-build-assets.yml
+++ /dev/null
@@ -1,51 +0,0 @@
-parameters:
-  dependsOn: ''
-  queue: {}
-  configuration: 'Debug'
-  condition: succeeded()
-  continueOnError: false
-  runAsPublic: false
-  publishUsingPipelines: false
-phases:
-  - phase: Asset_Registry_Publish
-    displayName: Publish to Build Asset Registry
-    dependsOn: ${{ parameters.dependsOn }}
-    queue: ${{ parameters.queue }}
-    variables:
-      _BuildConfig: ${{ parameters.configuration }}
-    steps:
-      - ${{ if and(eq(parameters.runAsPublic, 'false'), ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
-        - task: DownloadBuildArtifacts@0
-          displayName: Download artifact
-          inputs:
-            artifactName: AssetManifests
-            downloadPath: '$(Build.StagingDirectory)/Download'
-          condition: ${{ parameters.condition }}
-          continueOnError: ${{ parameters.continueOnError }}
-        - task: AzureKeyVault@1
-          inputs:
-            azureSubscription: 'DotNet-Engineering-Services_KeyVault'
-            KeyVaultName: EngKeyVault
-            SecretsFilter: 'MaestroAccessToken'
-          condition: ${{ parameters.condition }}
-          continueOnError: ${{ parameters.continueOnError }}
-        - task: PowerShell@2
-          displayName: Publish Build Assets
-          inputs:
-            filePath: eng\common\sdk-task.ps1
-            arguments: -task PublishBuildAssets -restore -msbuildEngine dotnet
-              /p:ManifestsPath='$(Build.StagingDirectory)/Download/AssetManifests'
-              /p:BuildAssetRegistryToken=$(MaestroAccessToken)
-              /p:MaestroApiEndpoint=https://maestro-prod.westus2.cloudapp.azure.com
-              /p:PublishUsingPipelines=${{ parameters.publishUsingPipelines }}
-              /p:Configuration=$(_BuildConfig)
-          condition: ${{ parameters.condition }}
-          continueOnError: ${{ parameters.continueOnError }}
-        - task: PublishBuildArtifacts@1
-          displayName: Publish Logs to VSTS
-          inputs:
-            PathtoPublish: '$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)'
-            PublishLocation: Container
-            ArtifactName: $(Agent.Os)_Asset_Registry_Publish
-          continueOnError: true
-          condition: always()
diff --git a/eng/common/templates/post-build/channels/generic-internal-channel.yml b/eng/common/templates/post-build/channels/generic-internal-channel.yml
index 7ae5255921a..8990dfc8c87 100644
--- a/eng/common/templates/post-build/channels/generic-internal-channel.yml
+++ b/eng/common/templates/post-build/channels/generic-internal-channel.yml
@@ -40,6 +40,9 @@ stages:
     pool:
       vmImage: 'windows-2019'
     steps:
+      - script: echo "##vso[task.logissue type=warning]Going forward, v2 Arcade publishing is no longer supported. Please read https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md for details, then contact dnceng if you have further questions."
+        displayName: Warn about v2 Arcade Publishing Usage
+
       # This is necessary whenever we want to publish/restore to an AzDO private feed
       - task: NuGetAuthenticate@0
         displayName: 'Authenticate to AzDO Feeds'
@@ -58,6 +61,7 @@ stages:
             PdbArtifacts/**
             BlobArtifacts/**
           downloadPath: '$(Build.ArtifactStagingDirectory)'
+          checkDownloadedFiles: true
 
       # This is necessary whenever we want to publish/restore to an AzDO private feed
       # Since sdk-task.ps1 tries to restore packages we need to do this authentication here
@@ -109,6 +113,9 @@ stages:
     pool:
       vmImage: 'windows-2019'
     steps:
+      - script: echo "##vso[task.logissue type=warning]Going forward, v2 Arcade publishing is no longer supported. Please read https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md for details, then contact dnceng if you have further questions."
+        displayName: Warn about v2 Arcade Publishing Usage
+
       - task: DownloadBuildArtifacts@0
         displayName: Download Build Assets
         continueOnError: true
@@ -124,6 +131,7 @@ stages:
             BlobArtifacts/**
             AssetManifests/**
           downloadPath: '$(Build.ArtifactStagingDirectory)'
+          checkDownloadedFiles: true
 
       - task: NuGetToolInstaller@1
         displayName: 'Install NuGet.exe'
diff --git a/eng/common/templates/post-build/channels/generic-public-channel.yml b/eng/common/templates/post-build/channels/generic-public-channel.yml
index 6cf39dbb290..3220c6a4f92 100644
--- a/eng/common/templates/post-build/channels/generic-public-channel.yml
+++ b/eng/common/templates/post-build/channels/generic-public-channel.yml
@@ -42,6 +42,9 @@ stages:
     pool:
       vmImage: 'windows-2019'
     steps:
+      - script: echo "##vso[task.logissue type=warning]Going forward, v2 Arcade publishing is no longer supported. Please read https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md for details, then contact dnceng if you have further questions."
+        displayName: Warn about v2 Arcade Publishing Usage
+
       - task: DownloadBuildArtifacts@0
         displayName: Download Build Assets
         continueOnError: true
@@ -56,6 +59,7 @@ stages:
             PdbArtifacts/**
             BlobArtifacts/**
           downloadPath: '$(Build.ArtifactStagingDirectory)'
+          checkDownloadedFiles: true
 
       # This is necessary whenever we want to publish/restore to an AzDO private feed
       # Since sdk-task.ps1 tries to restore packages we need to do this authentication here
@@ -108,6 +112,9 @@ stages:
     pool:
       vmImage: 'windows-2019'
     steps:
+      - script: echo "##vso[task.logissue type=warning]Going forward, v2 Arcade publishing is no longer supported. Please read https://github.com/dotnet/arcade/blob/main/Documentation/CorePackages/Publishing.md for details, then contact dnceng if you have further questions."
+        displayName: Warn about v2 Arcade Publishing Usage
+
       - task: DownloadBuildArtifacts@0
         displayName: Download Build Assets
         continueOnError: true
@@ -123,6 +130,7 @@ stages:
             BlobArtifacts/**
             AssetManifests/**
           downloadPath: '$(Build.ArtifactStagingDirectory)'
+          checkDownloadedFiles: true
 
       - task: NuGetToolInstaller@1
         displayName: 'Install NuGet.exe'
diff --git a/eng/common/templates/post-build/post-build.yml b/eng/common/templates/post-build/post-build.yml
index 1b0af40d52f..bf9f2eb4617 100644
--- a/eng/common/templates/post-build/post-build.yml
+++ b/eng/common/templates/post-build/post-build.yml
@@ -32,7 +32,6 @@ parameters:
   symbolPublishingAdditionalParameters: ''
   artifactsPublishingAdditionalParameters: ''
   signingValidationAdditionalParameters: ''
-  useBuildManifest: false
 
   # Which stages should finish execution before post-build stages start
   validateDependsOn:
@@ -54,9 +53,6 @@ parameters:
   NETCoreExperimentalChannelId: 562
   NetEngServicesIntChannelId: 678
   NetEngServicesProdChannelId: 679
-  Net5Preview8ChannelId: 1155
-  Net5RC1ChannelId: 1157
-  Net5RC2ChannelId: 1329
   NetCoreSDK313xxChannelId: 759
   NetCoreSDK313xxInternalChannelId: 760
   NetCoreSDK314xxChannelId: 921
@@ -96,7 +92,8 @@ stages:
             inputs:
               filePath: $(Build.SourcesDirectory)/eng/common/post-build/check-channel-consistency.ps1
               arguments: -PromoteToChannels "$(TargetChannels)"
-                -AvailableChannelIds ${{parameters.NetEngLatestChannelId}},${{parameters.NetEngValidationChannelId}},${{parameters.NetDev5ChannelId}},${{parameters.NetDev6ChannelId}},${{parameters.GeneralTestingChannelId}},${{parameters.NETCoreToolingDevChannelId}},${{parameters.NETCoreToolingReleaseChannelId}},${{parameters.NETInternalToolingChannelId}},${{parameters.NETCoreExperimentalChannelId}},${{parameters.NetEngServicesIntChannelId}},${{parameters.NetEngServicesProdChannelId}},${{parameters.Net5Preview8ChannelId}},${{parameters.Net5RC1ChannelId}},${{parameters.Net5RC2ChannelId}},${{parameters.NetCoreSDK313xxChannelId}},${{parameters.NetCoreSDK313xxInternalChannelId}},${{parameters.NetCoreSDK314xxChannelId}},${{parameters.NetCoreSDK314xxInternalChannelId}},${{parameters.VS166ChannelId}},${{parameters.VS167ChannelId}},${{parameters.VS168ChannelId}},${{parameters.VSMasterChannelId}},${{parameters.VS169ChannelId}},${{parameters.VS1610ChannelId}}                
+                -AvailableChannelIds ${{parameters.NetEngLatestChannelId}},${{parameters.NetEngValidationChannelId}},${{parameters.NetDev5ChannelId}},${{parameters.NetDev6ChannelId}},${{parameters.GeneralTestingChannelId}},${{parameters.NETCoreToolingDevChannelId}},${{parameters.NETCoreToolingReleaseChannelId}},${{parameters.NETInternalToolingChannelId}},${{parameters.NETCoreExperimentalChannelId}},${{parameters.NetEngServicesIntChannelId}},${{parameters.NetEngServicesProdChannelId}},${{parameters.NetCoreSDK313xxChannelId}},${{parameters.NetCoreSDK313xxInternalChannelId}},${{parameters.NetCoreSDK314xxChannelId}},${{parameters.NetCoreSDK314xxInternalChannelId}},${{parameters.VS166ChannelId}},${{parameters.VS167ChannelId}},${{parameters.VS168ChannelId}},${{parameters.VSMasterChannelId}},${{parameters.VS169ChannelId}},${{parameters.VS1610ChannelId}}
+
     - job:
       displayName: NuGet Validation
       dependsOn: setupMaestroVars
@@ -120,6 +117,7 @@ stages:
             pipeline: $(AzDOPipelineId)
             buildId: $(AzDOBuildId)
             artifactName: PackageArtifacts
+            checkDownloadedFiles: true
 
         - task: PowerShell@2
           displayName: Validate
@@ -131,7 +129,7 @@ stages:
     - job:
       displayName: Signing Validation
       dependsOn: setupMaestroVars
-      condition: eq( ${{ parameters.enableSigningValidation }}, 'true')
+      condition: and( eq( ${{ parameters.enableSigningValidation }}, 'true'), ne( variables['PostBuildSign'], 'true'))
       variables:
         - template: common-variables.yml
         - name: AzDOProjectName
@@ -143,16 +141,6 @@ stages:
       pool:
         vmImage: 'windows-2019'
       steps:
-        - ${{ if eq(parameters.useBuildManifest, true) }}:
-          - task: DownloadBuildArtifacts@0
-            displayName: Download build manifest
-            inputs:
-              buildType: specific
-              buildVersionToDownload: specific
-              project: $(AzDOProjectName)
-              pipeline: $(AzDOPipelineId)
-              buildId: $(AzDOBuildId)
-              artifactName: BuildManifests
         - task: DownloadBuildArtifacts@0
           displayName: Download Package Artifacts
           inputs:
@@ -162,6 +150,10 @@ stages:
             pipeline: $(AzDOPipelineId)
             buildId: $(AzDOBuildId)
             artifactName: PackageArtifacts
+            checkDownloadedFiles: true
+            itemPattern: |
+              **
+              !**/Microsoft.SourceBuild.Intermediate.*.nupkg
 
         # This is necessary whenever we want to publish/restore to an AzDO private feed
         # Since sdk-task.ps1 tries to restore packages we need to do this authentication here
@@ -174,6 +166,11 @@ stages:
           inputs:
             filePath: eng\common\enable-cross-org-publishing.ps1
             arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)
+        
+        - task: DeleteFiles@1
+          inputs:
+            SourceFolder: $(Build.ArtifactStagingDirectory)/PackageArtifacts
+            Contents: Microsoft.SourceBuild.Intermediate*
 
         # Signing validation will optionally work with the buildmanifest file which is downloaded from
         # Azure DevOps above.
@@ -215,6 +212,7 @@ stages:
             pipeline: $(AzDOPipelineId)
             buildId: $(AzDOBuildId)
             artifactName: BlobArtifacts
+            checkDownloadedFiles: true
 
         - task: PowerShell@2
           displayName: Validate
@@ -239,7 +237,7 @@ stages:
 - ${{ if or(ge(parameters.publishingInfraVersion, 3), eq(parameters.inline, 'false')) }}:
   - stage: publish_using_darc
     ${{ if or(eq(parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
-      dependsOn: Validate
+      dependsOn: ${{ parameters.publishDependsOn }}
     ${{ if and(ne(parameters.enableNugetValidation, 'true'), ne(parameters.enableSigningValidation, 'true'), ne(parameters.enableSourceLinkValidation, 'true'), ne(parameters.SDLValidationParameters.enable, 'true')) }}:
       dependsOn: ${{ parameters.validateDependsOn }}
     displayName: Publish using Darc
@@ -254,6 +252,7 @@ stages:
     - job:
       displayName: Publish Using Darc
       dependsOn: setupMaestroVars
+      timeoutInMinutes: 120
       variables:
         - name: BARBuildId
           value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
@@ -270,6 +269,8 @@ stages:
               -MaestroToken '$(MaestroApiAccessToken)'
               -WaitPublishingFinish ${{ parameters.waitPublishingFinish }}
               -PublishInstallersAndChecksums ${{ parameters.publishInstallersAndChecksums }}
+              -ArtifactsPublishingAdditionalParameters '${{ parameters.artifactsPublishingAdditionalParameters }}'
+              -SymbolPublishingAdditionalParameters '${{ parameters.symbolPublishingAdditionalParameters }}'
 
 - ${{ if and(le(parameters.publishingInfraVersion, 2), eq(parameters.inline, 'true')) }}:
   - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
@@ -304,54 +305,6 @@ stages:
       shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json'
       symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6-symbols/nuget/v3/index.json'
 
-  - template: \eng\common\templates\post-build\channels\generic-internal-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'Net5_Preview8_Publish'
-      channelName: '.NET 5 Preview 8'
-      akaMSChannelName: 'net5/preview8'
-      channelId: ${{ parameters.Net5Preview8ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet5-internal-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet5-internal/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/internal/_packaging/dotnet5-internal-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'Net5_RC1_Publish'
-      channelName: '.NET 5 RC 1'
-      akaMSChannelName: 'net5/rc1'
-      channelId: ${{ parameters.Net5RC1ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5-symbols/nuget/v3/index.json'
-
-  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
-    parameters:
-      BARBuildId: ${{ parameters.BARBuildId }}
-      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}
-      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
-      dependsOn: ${{ parameters.publishDependsOn }}
-      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
-      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
-      stageName: 'Net5_RC2_Publish'
-      channelName: '.NET 5 RC 2'
-      akaMSChannelName: 'net5/rc2'
-      channelId: ${{ parameters.Net5RC2ChannelId }}
-      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5-transport/nuget/v3/index.json'
-      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5/nuget/v3/index.json'
-      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet5-symbols/nuget/v3/index.json'
-
   - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
     parameters:
       BARBuildId: ${{ parameters.BARBuildId }}
diff --git a/eng/common/templates/post-build/setup-maestro-vars.yml b/eng/common/templates/post-build/setup-maestro-vars.yml
index d0cbfb6c6ff..4a22b2e6f6d 100644
--- a/eng/common/templates/post-build/setup-maestro-vars.yml
+++ b/eng/common/templates/post-build/setup-maestro-vars.yml
@@ -18,6 +18,7 @@ jobs:
         inputs:
           buildType: current
           artifactName: ReleaseConfigs
+          checkDownloadedFiles: true
 
     - task: PowerShell@2
       name: setReleaseVars
diff --git a/eng/common/templates/steps/perf-send-to-helix.yml b/eng/common/templates/steps/perf-send-to-helix.yml
deleted file mode 100644
index a468e92ce44..00000000000
--- a/eng/common/templates/steps/perf-send-to-helix.yml
+++ /dev/null
@@ -1,50 +0,0 @@
-# Please remember to update the documentation if you make changes to these parameters!
-parameters:
-  ProjectFile: ''                        # required -- project file that specifies the helix workitems
-  HelixSource: 'pr/default'              # required -- sources must start with pr/, official/, prodcon/, or agent/
-  HelixType: 'tests/default/'            # required -- Helix telemetry which identifies what type of data this is; should include "test" for clarity and must end in '/'
-  HelixBuild: $(Build.BuildNumber)       # required -- the build number Helix will use to identify this -- automatically set to the AzDO build number
-  HelixTargetQueues: ''                  # required -- semicolon delimited list of Helix queues to test on; see https://helix.dot.net/ for a list of queues
-  HelixAccessToken: ''                   # required -- access token to make Helix API requests; should be provided by the appropriate variable group
-  HelixPreCommands: ''                   # optional -- commands to run before Helix work item execution
-  HelixPostCommands: ''                  # optional -- commands to run after Helix work item execution
-  WorkItemDirectory: ''                  # optional -- a payload directory to zip up and send to Helix; requires WorkItemCommand; incompatible with XUnitProjects
-  CorrelationPayloadDirectory: ''        # optional -- a directory to zip up and send to Helix as a correlation payload
-  IncludeDotNetCli: false                # optional -- true will download a version of the .NET CLI onto the Helix machine as a correlation payload; requires DotNetCliPackageType and DotNetCliVersion
-  DotNetCliPackageType: ''               # optional -- either 'sdk', 'runtime' or 'aspnetcore-runtime'; determines whether the sdk or runtime will be sent to Helix; see https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases.json
-  DotNetCliVersion: ''                   # optional -- version of the CLI to send to Helix; based on this: https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases.json
-  EnableXUnitReporter: false             # optional -- true enables XUnit result reporting to Mission Control
-  WaitForWorkItemCompletion: true        # optional -- true will make the task wait until work items have been completed and fail the build if work items fail. False is "fire and forget."
-  Creator: ''                            # optional -- if the build is external, use this to specify who is sending the job
-  DisplayNamePrefix: 'Send job to Helix' # optional -- rename the beginning of the displayName of the steps in AzDO 
-  condition: succeeded()                 # optional -- condition for step to execute; defaults to succeeded()
-  continueOnError: false                 # optional -- determines whether to continue the build if the step errors; defaults to false
-  osGroup: ''                            # required -- operating system for the job
-            
-
-steps:
-- template: /eng/pipelines/common/templates/runtimes/send-to-helix-inner-step.yml
-  parameters:
-    osGroup: ${{ parameters.osGroup }}
-    sendParams: $(Build.SourcesDirectory)/eng/common/performance/${{ parameters.ProjectFile }} /restore /t:Test /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/SendToHelix.binlog
-    displayName: ${{ parameters.DisplayNamePrefix }}
-    condition: ${{ parameters.condition }}
-    continueOnError: ${{ parameters.continueOnError }}
-    environment:
-      BuildConfig: $(_BuildConfig)
-      HelixSource: ${{ parameters.HelixSource }}
-      HelixType: ${{ parameters.HelixType }}
-      HelixBuild: ${{ parameters.HelixBuild }}
-      HelixTargetQueues: ${{ parameters.HelixTargetQueues }}
-      HelixAccessToken: ${{ parameters.HelixAccessToken }}
-      HelixPreCommands: ${{ parameters.HelixPreCommands }}
-      HelixPostCommands: ${{ parameters.HelixPostCommands }}
-      WorkItemDirectory: ${{ parameters.WorkItemDirectory }}
-      CorrelationPayloadDirectory: ${{ parameters.CorrelationPayloadDirectory }}
-      IncludeDotNetCli: ${{ parameters.IncludeDotNetCli }}
-      DotNetCliPackageType: ${{ parameters.DotNetCliPackageType }}
-      DotNetCliVersion: ${{ parameters.DotNetCliVersion }}
-      EnableXUnitReporter: ${{ parameters.EnableXUnitReporter }}
-      WaitForWorkItemCompletion: ${{ parameters.WaitForWorkItemCompletion }}
-      Creator: ${{ parameters.Creator }}
-      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
diff --git a/eng/common/templates/steps/send-to-helix.yml b/eng/common/templates/steps/send-to-helix.yml
index bb5f1a92938..cd02ae1607f 100644
--- a/eng/common/templates/steps/send-to-helix.yml
+++ b/eng/common/templates/steps/send-to-helix.yml
@@ -18,8 +18,8 @@ parameters:
   XUnitRuntimeTargetFramework: ''        # optional -- framework to use for the xUnit console runner
   XUnitRunnerVersion: ''                 # optional -- version of the xUnit nuget package you wish to use on Helix; required for XUnitProjects
   IncludeDotNetCli: false                # optional -- true will download a version of the .NET CLI onto the Helix machine as a correlation payload; requires DotNetCliPackageType and DotNetCliVersion
-  DotNetCliPackageType: ''               # optional -- either 'sdk', 'runtime' or 'aspnetcore-runtime'; determines whether the sdk or runtime will be sent to Helix; see https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json
-  DotNetCliVersion: ''                   # optional -- version of the CLI to send to Helix; based on this: https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json
+  DotNetCliPackageType: ''               # optional -- either 'sdk', 'runtime' or 'aspnetcore-runtime'; determines whether the sdk or runtime will be sent to Helix; see https://raw.githubusercontent.com/dotnet/core/main/release-notes/releases-index.json
+  DotNetCliVersion: ''                   # optional -- version of the CLI to send to Helix; based on this: https://raw.githubusercontent.com/dotnet/core/main/release-notes/releases-index.json
   EnableXUnitReporter: false             # optional -- true enables XUnit result reporting to Mission Control
   WaitForWorkItemCompletion: true        # optional -- true will make the task wait until work items have been completed and fail the build if work items fail. False is "fire and forget."
   IsExternal: false                      # [DEPRECATED] -- doesn't do anything, jobs are external if HelixAccessToken is empty and Creator is set
diff --git a/eng/common/templates/steps/source-build.yml b/eng/common/templates/steps/source-build.yml
index 8e336b7d16b..ba40dc82f14 100644
--- a/eng/common/templates/steps/source-build.yml
+++ b/eng/common/templates/steps/source-build.yml
@@ -18,6 +18,35 @@ steps:
     set -x
     df -h
 
+    # If building on the internal project, the artifact feeds variable may be available (usually only if needed)
+    # In that case, call the feed setup script to add internal feeds corresponding to public ones.
+    # In addition, add an msbuild argument to copy the WIP from the repo to the target build location.
+    # This is because SetupNuGetSources.sh will alter the current NuGet.config file, and we need to preserve those
+    # changes.
+    $internalRestoreArgs=
+    if [ '$(dn-bot-dnceng-artifact-feeds-rw)' != '$''(dn-bot-dnceng-artifact-feeds-rw)' ]; then
+      # Temporarily work around https://github.com/dotnet/arcade/issues/7709
+      chmod +x $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
+      $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh $(Build.SourcesDirectory)/NuGet.config $(dn-bot-dnceng-artifact-feeds-rw)
+      internalRestoreArgs='/p:CopyWipIntoInnerSourceBuildRepo=true'
+
+      # The 'Copy WIP' feature of source build uses git stash to apply changes from the original repo.
+      # This only works if there is a username/email configured, which won't be the case in most CI runs.
+      git config --get user.email
+      if [ $? -ne 0 ]; then
+        git config user.email dn-bot@microsoft.com
+        git config user.name dn-bot
+      fi
+    fi
+
+    # If building on the internal project, the internal storage variable may be available (usually only if needed)
+    # In that case, add variables to allow the download of internal runtimes if the specified versions are not found
+    # in the default public locations.
+    internalRuntimeDownloadArgs=
+    if [ '$(dotnetclimsrc-read-sas-token-base64)' != '$''(dotnetclimsrc-read-sas-token-base64)' ]; then
+      internalRuntimeDownloadArgs='/p:DotNetRuntimeSourceFeed=https://dotnetclimsrc.blob.core.windows.net/dotnet /p:DotNetRuntimeSourceFeedKey=$(dotnetclimsrc-read-sas-token-base64) --runtimesourcefeed https://dotnetclimsrc.blob.core.windows.net/dotnet --runtimesourcefeedkey $(dotnetclimsrc-read-sas-token-base64)'
+    fi
+
     buildConfig=Release
     # Check if AzDO substitutes in a build config from a variable, and use it if so.
     if [ '$(_BuildConfig)' != '$''(_BuildConfig)' ]; then
@@ -34,10 +63,17 @@ steps:
       targetRidArgs='/p:TargetRid=${{ parameters.platform.targetRID }}'
     fi
 
+    publishArgs=
+    if [ '${{ parameters.platform.skipPublishValidation }}' != 'true' ]; then
+      publishArgs='--publish'
+    fi
+
     ${{ coalesce(parameters.platform.buildScript, './build.sh') }} --ci \
       --configuration $buildConfig \
-      --restore --build --pack --publish \
+      --restore --build --pack $publishArgs -bl \
       $officialBuildArgs \
+      $internalRuntimeDownloadArgs \
+      $internalRestoreArgs \
       $targetRidArgs \
       /p:SourceBuildNonPortable=${{ parameters.platform.nonPortable }} \
       /p:ArcadeBuildFromSource=true
diff --git a/eng/common/tools.ps1 b/eng/common/tools.ps1
index eba7ed49d78..02347914f5d 100644
--- a/eng/common/tools.ps1
+++ b/eng/common/tools.ps1
@@ -42,12 +42,15 @@
 [bool]$useInstalledDotNetCli = if (Test-Path variable:useInstalledDotNetCli) { $useInstalledDotNetCli } else { $true }
 
 # Enable repos to use a particular version of the on-line dotnet-install scripts.
-#    default URL: https://dot.net/v1/dotnet-install.ps1
+#    default URL: https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.ps1
 [string]$dotnetInstallScriptVersion = if (Test-Path variable:dotnetInstallScriptVersion) { $dotnetInstallScriptVersion } else { 'v1' }
 
 # True to use global NuGet cache instead of restoring packages to repository-local directory.
 [bool]$useGlobalNuGetCache = if (Test-Path variable:useGlobalNuGetCache) { $useGlobalNuGetCache } else { !$ci }
 
+# True to exclude prerelease versions Visual Studio during build
+[bool]$excludePrereleaseVS = if (Test-Path variable:excludePrereleaseVS) { $excludePrereleaseVS } else { $false }
+
 # An array of names of processes to stop on script exit if prepareMachine is true.
 $processesToStopOnExit = if (Test-Path variable:processesToStopOnExit) { $processesToStopOnExit } else { @('msbuild', 'dotnet', 'vbcscompiler') }
 
@@ -57,7 +60,7 @@ set-strictmode -version 2.0
 $ErrorActionPreference = 'Stop'
 [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
 
-# If specified, provides an alternate path for getting .NET Core SDKs and Runtimes. This script will still try public sources first.
+# If specifies, provides an alternate path for getting .NET Core SDKs and Runtimes. This script will still try public sources first.
 [string]$runtimeSourceFeed = if (Test-Path variable:runtimeSourceFeed) { $runtimeSourceFeed } else { $null }
 # Base-64 encoded SAS token that has permission to storage container described by $runtimeSourceFeed
 [string]$runtimeSourceFeedKey = if (Test-Path variable:runtimeSourceFeedKey) { $runtimeSourceFeedKey } else { $null }
@@ -103,6 +106,46 @@ function Exec-Process([string]$command, [string]$commandArgs) {
   }
 }
 
+# Take the given block, print it, print what the block probably references from the current set of
+# variables using low-effort string matching, then run the block.
+#
+# This is intended to replace the pattern of manually copy-pasting a command, wrapping it in quotes,
+# and printing it using "Write-Host". The copy-paste method is more readable in build logs, but less
+# maintainable and less reliable. It is easy to make a mistake and modify the command without
+# properly updating the "Write-Host" line, resulting in misleading build logs. The probability of
+# this mistake makes the pattern hard to trust when it shows up in build logs. Finding the bug in
+# existing source code can also be difficult, because the strings are not aligned to each other and
+# the line may be 300+ columns long.
+#
+# By removing the need to maintain two copies of the command, Exec-BlockVerbosely avoids the issues.
+#
+# In Bash (or any posix-like shell), "set -x" prints usable verbose output automatically.
+# "Set-PSDebug" appears to be similar at first glance, but unfortunately, it isn't very useful: it
+# doesn't print any info about the variables being used by the command, which is normally the
+# interesting part to diagnose.
+function Exec-BlockVerbosely([scriptblock] $block) {
+  Write-Host "--- Running script block:"
+  $blockString = $block.ToString().Trim()
+  Write-Host $blockString
+
+  Write-Host "--- List of variables that might be used:"
+  # For each variable x in the environment, check the block for a reference to x via simple "$x" or
+  # "@x" syntax. This doesn't detect other ways to reference variables ("${x}" nor "$variable:x",
+  # among others). It only catches what this function was originally written for: simple
+  # command-line commands.
+  $variableTable = Get-Variable |
+    Where-Object {
+      $blockString.Contains("`$$($_.Name)") -or $blockString.Contains("@$($_.Name)")
+    } |
+    Format-Table -AutoSize -HideTableHeaders -Wrap |
+    Out-String
+  Write-Host $variableTable.Trim()
+
+  Write-Host "--- Executing:"
+  & $block
+  Write-Host "--- Done running script block!"
+}
+
 # createSdkLocationFile parameter enables a file being generated under the toolset directory
 # which writes the sdk's location into. This is only necessary for cmd --> powershell invocations
 # as dot sourcing isn't possible.
@@ -120,6 +163,9 @@ function InitializeDotNetCli([bool]$install, [bool]$createSdkLocationFile) {
   # Disable telemetry on CI.
   if ($ci) {
     $env:DOTNET_CLI_TELEMETRY_OPTOUT=1
+ 
+    # In case of network error, try to log the current IP for reference
+    Try-LogClientIpAddress
   }
 
   # Source Build uses DotNetCoreSdkDir variable
@@ -141,7 +187,7 @@ function InitializeDotNetCli([bool]$install, [bool]$createSdkLocationFile) {
 
   # Use dotnet installation specified in DOTNET_INSTALL_DIR if it contains the required SDK version,
   # otherwise install the dotnet CLI and SDK to repo local .dotnet directory to avoid potential permission issues.
-  if ((-not $globalJsonHasRuntimes) -and ($env:DOTNET_INSTALL_DIR -ne $null) -and (Test-Path(Join-Path $env:DOTNET_INSTALL_DIR "sdk\$dotnetSdkVersion"))) {
+  if ((-not $globalJsonHasRuntimes) -and (-not [string]::IsNullOrEmpty($env:DOTNET_INSTALL_DIR)) -and (Test-Path(Join-Path $env:DOTNET_INSTALL_DIR "sdk\$dotnetSdkVersion"))) {
     $dotnetRoot = $env:DOTNET_INSTALL_DIR
   } else {
     $dotnetRoot = Join-Path $RepoRoot '.dotnet'
@@ -169,7 +215,7 @@ function InitializeDotNetCli([bool]$install, [bool]$createSdkLocationFile) {
     Set-Content -Path $sdkCacheFileTemp -Value $dotnetRoot
 
     try {
-      Rename-Item -Force -Path $sdkCacheFileTemp 'sdk.txt'
+      Move-Item -Force $sdkCacheFileTemp (Join-Path $ToolsetDir 'sdk.txt')
     } catch {
       # Somebody beat us
       Remove-Item -Path $sdkCacheFileTemp
@@ -190,38 +236,42 @@ function InitializeDotNetCli([bool]$install, [bool]$createSdkLocationFile) {
   return $global:_DotNetInstallDir = $dotnetRoot
 }
 
+function Retry($downloadBlock, $maxRetries = 5) {
+  $retries = 1
+
+  while($true) {
+    try {
+      & $downloadBlock
+      break
+    }
+    catch {
+      Write-PipelineTelemetryError -Category 'InitializeToolset' -Message $_
+    }
+
+    if (++$retries -le $maxRetries) {
+      $delayInSeconds = [math]::Pow(2, $retries) - 1 # Exponential backoff
+      Write-Host "Retrying. Waiting for $delayInSeconds seconds before next attempt ($retries of $maxRetries)."
+      Start-Sleep -Seconds $delayInSeconds
+    }
+    else {
+      Write-PipelineTelemetryError -Category 'InitializeToolset' -Message "Unable to download file in $maxRetries attempts."
+      break
+    }
+
+  }
+}
+
 function GetDotNetInstallScript([string] $dotnetRoot) {
   $installScript = Join-Path $dotnetRoot 'dotnet-install.ps1'
   if (!(Test-Path $installScript)) {
     Create-Directory $dotnetRoot
     $ProgressPreference = 'SilentlyContinue' # Don't display the console progress UI - it's a huge perf hit
+    $uri = "https://dotnet.microsoft.com/download/dotnet/scripts/$dotnetInstallScriptVersion/dotnet-install.ps1"
 
-    $maxRetries = 5
-    $retries = 1
-
-    $uri = "https://dot.net/$dotnetInstallScriptVersion/dotnet-install.ps1"
-
-    while($true) {
-      try {
-        Write-Host "GET $uri"
-        Invoke-WebRequest $uri -OutFile $installScript
-        break
-      }
-      catch {
-        Write-Host "Failed to download '$uri'"
-        Write-Error $_.Exception.Message -ErrorAction Continue
-      }
-
-      if (++$retries -le $maxRetries) {
-        $delayInSeconds = [math]::Pow(2, $retries) - 1 # Exponential backoff
-        Write-Host "Retrying. Waiting for $delayInSeconds seconds before next attempt ($retries of $maxRetries)."
-        Start-Sleep -Seconds $delayInSeconds
-      }
-      else {
-        throw "Unable to download file in $maxRetries attempts."
-      }
-
-    }
+    Retry({
+      Write-Host "GET $uri"
+      Invoke-WebRequest $uri -OutFile $installScript
+    })
   }
 
   return $installScript
@@ -305,8 +355,8 @@ function InitializeVisualStudioMSBuild([bool]$install, [object]$vsRequirements =
 
   # If the version of msbuild is going to be xcopied,
   # use this version. Version matches a package here:
-  # https://dev.azure.com/dnceng/public/_packaging?_a=package&feed=dotnet-eng&package=RoslynTools.MSBuild&protocolType=NuGet&version=16.8.0-preview3&view=overview
-  $defaultXCopyMSBuildVersion = '16.8.0-preview3'
+  # https://dev.azure.com/dnceng/public/_packaging?_a=package&feed=dotnet-eng&package=RoslynTools.MSBuild&protocolType=NuGet&version=16.10.0-preview2&view=overview
+  $defaultXCopyMSBuildVersion = '16.10.0-preview2'
 
   if (!$vsRequirements) { $vsRequirements = $GlobalJson.tools.vs }
   $vsMinVersionStr = if ($vsRequirements.version) { $vsRequirements.version } else { $vsMinVersionReqdStr }
@@ -409,9 +459,13 @@ function InitializeXCopyMSBuild([string]$packageVersion, [bool]$install) {
     }
 
     Create-Directory $packageDir
+
     Write-Host "Downloading $packageName $packageVersion"
     $ProgressPreference = 'SilentlyContinue' # Don't display the console progress UI - it's a huge perf hit
-    Invoke-WebRequest "https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/flat2/$packageName/$packageVersion/$packageName.$packageVersion.nupkg" -OutFile $packagePath
+    Retry({
+      Invoke-WebRequest "https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/flat2/$packageName/$packageVersion/$packageName.$packageVersion.nupkg" -OutFile $packagePath
+    })
+
     Unzip $packagePath $packageDir
   }
 
@@ -448,16 +502,17 @@ function LocateVisualStudio([object]$vsRequirements = $null){
   if (!(Test-Path $vsWhereExe)) {
     Create-Directory $vsWhereDir
     Write-Host 'Downloading vswhere'
-    try {
+    Retry({
       Invoke-WebRequest "https://netcorenativeassets.blob.core.windows.net/resource-packages/external/windows/vswhere/$vswhereVersion/vswhere.exe" -OutFile $vswhereExe
-    }
-    catch {
-      Write-PipelineTelemetryError -Category 'InitializeToolset' -Message $_
-    }
+    })
   }
 
   if (!$vsRequirements) { $vsRequirements = $GlobalJson.tools.vs }
-  $args = @('-latest', '-prerelease', '-format', 'json', '-requires', 'Microsoft.Component.MSBuild', '-products', '*')
+  $args = @('-latest', '-format', 'json', '-requires', 'Microsoft.Component.MSBuild', '-products', '*')
+
+  if (!$excludePrereleaseVS) {
+    $args += '-prerelease'
+  }
 
   if (Get-Member -InputObject $vsRequirements -Name 'version') {
     $args += '-version'
@@ -483,7 +538,13 @@ function LocateVisualStudio([object]$vsRequirements = $null){
 
 function InitializeBuildTool() {
   if (Test-Path variable:global:_BuildTool) {
-    return $global:_BuildTool
+    # If the requested msbuild parameters do not match, clear the cached variables.
+    if($global:_BuildTool.Contains('ExcludePrereleaseVS') -and $global:_BuildTool.ExcludePrereleaseVS -ne $excludePrereleaseVS) {
+      Remove-Item variable:global:_BuildTool
+      Remove-Item variable:global:_MSBuildExe
+    } else {
+      return $global:_BuildTool
+    }
   }
 
   if (-not $msbuildEngine) {
@@ -502,7 +563,7 @@ function InitializeBuildTool() {
       ExitWithExitCode 1
     }
     $dotnetPath = Join-Path $dotnetRoot (GetExecutableFileName 'dotnet')
-    $buildTool = @{ Path = $dotnetPath; Command = 'msbuild'; Tool = 'dotnet'; Framework = 'netcoreapp2.1' }
+    $buildTool = @{ Path = $dotnetPath; Command = 'msbuild'; Tool = 'dotnet'; Framework = 'netcoreapp3.1' }
   } elseif ($msbuildEngine -eq "vs") {
     try {
       $msbuildPath = InitializeVisualStudioMSBuild -install:$restore
@@ -511,7 +572,7 @@ function InitializeBuildTool() {
       ExitWithExitCode 1
     }
 
-    $buildTool = @{ Path = $msbuildPath; Command = ""; Tool = "vs"; Framework = "net472" }
+    $buildTool = @{ Path = $msbuildPath; Command = ""; Tool = "vs"; Framework = "net472"; ExcludePrereleaseVS = $excludePrereleaseVS }
   } else {
     Write-PipelineTelemetryError -Category 'InitializeToolset' -Message "Unexpected value of -msbuildEngine: '$msbuildEngine'."
     ExitWithExitCode 1
@@ -614,6 +675,17 @@ function ExitWithExitCode([int] $exitCode) {
   exit $exitCode
 }
 
+# Check if $LASTEXITCODE is a nonzero exit code (NZEC). If so, print a Azure Pipeline error for
+# diagnostics, then exit the script with the $LASTEXITCODE.
+function Exit-IfNZEC([string] $category = "General") {
+  Write-Host "Exit code $LASTEXITCODE"
+  if ($LASTEXITCODE -ne 0) {
+    $message = "Last command failed with exit code $LASTEXITCODE."
+    Write-PipelineTelemetryError -Force -Category $category -Message $message
+    ExitWithExitCode $LASTEXITCODE
+  }
+}
+
 function Stop-Processes() {
   Write-Host 'Killing running build processes...'
   foreach ($processName in $processesToStopOnExit) {
@@ -637,10 +709,38 @@ function MSBuild() {
       Write-PipelineSetVariable -Name 'NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS' -Value '20'
     }
 
+    if ($ci) {
+      $env:NUGET_ENABLE_EXPERIMENTAL_HTTP_RETRY = 'true'
+      $env:NUGET_EXPERIMENTAL_MAX_NETWORK_TRY_COUNT = 6
+      $env:NUGET_EXPERIMENTAL_NETWORK_RETRY_DELAY_MILLISECONDS = 1000
+      Write-PipelineSetVariable -Name 'NUGET_ENABLE_EXPERIMENTAL_HTTP_RETRY' -Value 'true'
+      Write-PipelineSetVariable -Name 'NUGET_EXPERIMENTAL_MAX_NETWORK_TRY_COUNT' -Value '6'
+      Write-PipelineSetVariable -Name 'NUGET_EXPERIMENTAL_NETWORK_RETRY_DELAY_MILLISECONDS' -Value '1000'
+    }
+
     $toolsetBuildProject = InitializeToolset
-    $path = Split-Path -parent $toolsetBuildProject
-    $path = Join-Path $path (Join-Path $buildTool.Framework 'Microsoft.DotNet.Arcade.Sdk.dll')
-    $args += "/logger:$path"
+    $basePath = Split-Path -parent $toolsetBuildProject
+    $possiblePaths = @(
+      # new scripts need to work with old packages, so we need to look for the old names/versions
+      (Join-Path $basePath (Join-Path $buildTool.Framework 'Microsoft.DotNet.ArcadeLogging.dll')),
+      (Join-Path $basePath (Join-Path $buildTool.Framework 'Microsoft.DotNet.Arcade.Sdk.dll')),
+      (Join-Path $basePath (Join-Path netcoreapp2.1 'Microsoft.DotNet.ArcadeLogging.dll')),
+      (Join-Path $basePath (Join-Path netcoreapp2.1 'Microsoft.DotNet.Arcade.Sdk.dll'))
+      (Join-Path $basePath (Join-Path netcoreapp3.1 'Microsoft.DotNet.ArcadeLogging.dll')),
+      (Join-Path $basePath (Join-Path netcoreapp3.1 'Microsoft.DotNet.Arcade.Sdk.dll'))
+    )
+    $selectedPath = $null
+    foreach ($path in $possiblePaths) {
+      if (Test-Path $path -PathType Leaf) {
+        $selectedPath = $path
+        break
+      }
+    }
+    if (-not $selectedPath) {
+      Write-PipelineTelemetryError -Category 'Build' -Message 'Unable to find arcade sdk logger assembly.'
+      ExitWithExitCode 1
+    }
+    $args += "/logger:$selectedPath"
   }
 
   MSBuild-Core @args
@@ -676,7 +776,10 @@ function MSBuild-Core() {
   }
 
   foreach ($arg in $args) {
-    if ($arg -ne $null -and $arg.Trim() -ne "") {
+    if ($null -ne $arg -and $arg.Trim() -ne "") {
+      if ($arg.EndsWith('\')) {
+        $arg = $arg + "\"
+      }
       $cmdArgs += " `"$arg`""
     }
   }
@@ -686,14 +789,23 @@ function MSBuild-Core() {
   $exitCode = Exec-Process $buildTool.Path $cmdArgs
 
   if ($exitCode -ne 0) {
-    Write-PipelineTelemetryError -Category 'Build' -Message 'Build failed.'
+    # We should not Write-PipelineTaskError here because that message shows up in the build summary
+    # The build already logged an error, that's the reason it failed. Producing an error here only adds noise.
+    Write-Host "Build failed with exit code $exitCode. Check errors above." -ForegroundColor Red
 
     $buildLog = GetMSBuildBinaryLogCommandLineArgument $args
-    if ($buildLog -ne $null) {
+    if ($null -ne $buildLog) {
       Write-Host "See log: $buildLog" -ForegroundColor DarkGray
     }
 
-    ExitWithExitCode $exitCode
+    if ($ci) {
+      Write-PipelineSetResult -Result "Failed" -Message "msbuild execution failed."
+      # Exiting with an exit code causes the azure pipelines task to log yet another "noise" error
+      # The above Write-PipelineSetResult will cause the task to be marked as failure without adding yet another error
+      ExitWithExitCode 0
+    } else {
+      ExitWithExitCode $exitCode
+    }
   }
 }
 
@@ -739,7 +851,7 @@ function Get-Darc($version) {
 
 . $PSScriptRoot\pipeline-logging-functions.ps1
 
-$RepoRoot = Resolve-Path (Join-Path $PSScriptRoot '..\..')
+$RepoRoot = Resolve-Path (Join-Path $PSScriptRoot '..\..\')
 $EngRoot = Resolve-Path (Join-Path $PSScriptRoot '..')
 $ArtifactsDir = Join-Path $RepoRoot 'artifacts'
 $ToolsetDir = Join-Path $ArtifactsDir 'toolset'
@@ -774,3 +886,21 @@ if (!$disableConfigureToolsetImport) {
     }
   }
 }
+
+function Try-LogClientIpAddress()
+{
+    Write-Host "Attempting to log this client's IP for Azure Package feed telemetry purposes"
+    try
+    {
+        $result = Invoke-WebRequest -Uri "http://co1.msedge.net/fdv2/diagnostics.aspx" -UseBasicParsing
+        $lines = $result.Content.Split([Environment]::NewLine) 
+        $socketIp = $lines | Select-String -Pattern "^Socket IP:.*"
+        Write-Host $socketIp
+        $clientIp = $lines | Select-String -Pattern "^Client IP:.*"
+        Write-Host $clientIp
+    }
+    catch
+    {
+        Write-Host "Unable to get this machine's effective IP address for logging: $_"
+    }
+}
diff --git a/eng/common/tools.sh b/eng/common/tools.sh
index 98186e78496..6a4871ef72b 100755
--- a/eng/common/tools.sh
+++ b/eng/common/tools.sh
@@ -54,7 +54,7 @@ warn_as_error=${warn_as_error:-true}
 use_installed_dotnet_cli=${use_installed_dotnet_cli:-true}
 
 # Enable repos to use a particular version of the on-line dotnet-install scripts.
-#    default URL: https://dot.net/v1/dotnet-install.sh
+#    default URL: https://dotnet.microsoft.com/download/dotnet/scripts/v1/dotnet-install.sh
 dotnetInstallScriptVersion=${dotnetInstallScriptVersion:-'v1'}
 
 # True to use global NuGet cache instead of restoring packages to repository-local directory.
@@ -89,16 +89,16 @@ function ResolvePath {
 function ReadGlobalVersion {
   local key=$1
 
-  local line=$(awk "/$key/ {print; exit}" "$global_json_file")
-  local pattern="\"$key\" *: *\"(.*)\""
+  if command -v jq &> /dev/null; then
+    _ReadGlobalVersion="$(jq -r ".[] | select(has(\"$key\")) | .\"$key\"" "$global_json_file")"
+  elif [[ "$(cat "$global_json_file")" =~ \"$key\"[[:space:]\:]*\"([^\"]+) ]]; then
+    _ReadGlobalVersion=${BASH_REMATCH[1]}
+  fi
 
-  if [[ ! $line =~ $pattern ]]; then
+  if [[ -z "$_ReadGlobalVersion" ]]; then
     Write-PipelineTelemetryError -category 'Build' "Error: Cannot find \"$key\" in $global_json_file"
     ExitWithExitCode 1
   fi
-
-  # return value
-  _ReadGlobalVersion=${BASH_REMATCH[1]}
 }
 
 function InitializeDotNetCli {
@@ -249,7 +249,7 @@ function with_retries {
       return 0
     fi
 
-    timeout=$((2**$retries-1))
+    timeout=$((3**$retries-1))
     echo "Failed to execute '$@'. Waiting $timeout seconds before next attempt ($retries out of $maxRetries)." 1>&2
     sleep $timeout
   done
@@ -262,7 +262,7 @@ function with_retries {
 function GetDotNetInstallScript {
   local root=$1
   local install_script="$root/dotnet-install.sh"
-  local install_script_url="https://dot.net/$dotnetInstallScriptVersion/dotnet-install.sh"
+  local install_script_url="https://dotnet.microsoft.com/download/dotnet/scripts/$dotnetInstallScriptVersion/dotnet-install.sh"
 
   if [[ ! -a "$install_script" ]]; then
     mkdir -p "$root"
@@ -271,10 +271,18 @@ function GetDotNetInstallScript {
 
     # Use curl if available, otherwise use wget
     if command -v curl > /dev/null; then
-      with_retries curl "$install_script_url" -sSL --retry 10 --create-dirs -o "$install_script" || {
-        local exit_code=$?
-        Write-PipelineTelemetryError -category 'InitializeToolset' "Failed to acquire dotnet install script (exit code '$exit_code')."
-        ExitWithExitCode $exit_code
+      # first, try directly, if this fails we will retry with verbose logging
+      curl "$install_script_url" -sSL --retry 10 --create-dirs -o "$install_script" || {
+        if command -v openssl &> /dev/null; then
+          echo "Curl failed; dumping some information about dotnet.microsoft.com for later investigation"
+          echo | openssl s_client -showcerts -servername dotnet.microsoft.com  -connect dotnet.microsoft.com:443
+        fi
+        echo "Will now retry the same URL with verbose logging."
+        with_retries curl "$install_script_url" -sSL --verbose --retry 10 --create-dirs -o "$install_script" || {
+          local exit_code=$?
+          Write-PipelineTelemetryError -category 'InitializeToolset' "Failed to acquire dotnet install script (exit code '$exit_code')."
+          ExitWithExitCode $exit_code
+        }
       }
     else
       with_retries wget -v -O "$install_script" "$install_script_url" || {
@@ -298,7 +306,7 @@ function InitializeBuildTool {
   # return values
   _InitializeBuildTool="$_InitializeDotNetCli/dotnet"
   _InitializeBuildToolCommand="msbuild"
-  _InitializeBuildToolFramework="netcoreapp2.1"
+  _InitializeBuildToolFramework="netcoreapp3.1"
 }
 
 # Set RestoreNoCache as a workaround for https://github.com/NuGet/Home/issues/3116
@@ -391,6 +399,13 @@ function StopProcesses {
   return 0
 }
 
+function TryLogClientIpAddress () {
+  echo 'Attempting to log this client''s IP for Azure Package feed telemetry purposes'
+  if command -v curl > /dev/null; then
+    curl -s 'http://co1.msedge.net/fdv2/diagnostics.aspx' | grep ' IP: ' || true
+  fi
+}
+
 function MSBuild {
   local args=$@
   if [[ "$pipelines_log" == true ]]; then
@@ -402,11 +417,36 @@ function MSBuild {
       export NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS=20
       Write-PipelineSetVariable -name "NUGET_PLUGIN_HANDSHAKE_TIMEOUT_IN_SECONDS" -value "20"
       Write-PipelineSetVariable -name "NUGET_PLUGIN_REQUEST_TIMEOUT_IN_SECONDS" -value "20"
+
+      export NUGET_ENABLE_EXPERIMENTAL_HTTP_RETRY=true
+      export NUGET_EXPERIMENTAL_MAX_NETWORK_TRY_COUNT=6
+      export NUGET_EXPERIMENTAL_NETWORK_RETRY_DELAY_MILLISECONDS=1000
+      Write-PipelineSetVariable -name "NUGET_ENABLE_EXPERIMENTAL_HTTP_RETRY" -value "true"
+      Write-PipelineSetVariable -name "NUGET_EXPERIMENTAL_MAX_NETWORK_TRY_COUNT" -value "6"
+      Write-PipelineSetVariable -name "NUGET_EXPERIMENTAL_NETWORK_RETRY_DELAY_MILLISECONDS" -value "1000"
     fi
 
     local toolset_dir="${_InitializeToolset%/*}"
-    local logger_path="$toolset_dir/$_InitializeBuildToolFramework/Microsoft.DotNet.Arcade.Sdk.dll"
-    args=( "${args[@]}" "-logger:$logger_path" )
+    # new scripts need to work with old packages, so we need to look for the old names/versions
+    local selectedPath=
+    local possiblePaths=()
+    possiblePaths+=( "$toolset_dir/$_InitializeBuildToolFramework/Microsoft.DotNet.ArcadeLogging.dll" )
+    possiblePaths+=( "$toolset_dir/$_InitializeBuildToolFramework/Microsoft.DotNet.Arcade.Sdk.dll" )
+    possiblePaths+=( "$toolset_dir/netcoreapp2.1/Microsoft.DotNet.ArcadeLogging.dll" )
+    possiblePaths+=( "$toolset_dir/netcoreapp2.1/Microsoft.DotNet.Arcade.Sdk.dll" )
+    possiblePaths+=( "$toolset_dir/netcoreapp3.1/Microsoft.DotNet.ArcadeLogging.dll" )
+    possiblePaths+=( "$toolset_dir/netcoreapp3.1/Microsoft.DotNet.Arcade.Sdk.dll" )
+    for path in "${possiblePaths[@]}"; do
+      if [[ -f $path ]]; then
+        selectedPath=$path
+        break
+      fi
+    done
+    if [[ -z "$selectedPath" ]]; then
+      Write-PipelineTelemetryError -category 'Build'  "Unable to find arcade sdk logger assembly."
+      ExitWithExitCode 1
+    fi
+    args+=( "-logger:$selectedPath" )
   fi
 
   MSBuild-Core ${args[@]}
@@ -437,8 +477,17 @@ function MSBuild-Core {
 
     "$_InitializeBuildTool" "$@" || {
       local exit_code=$?
-      Write-PipelineTaskError "Build failed (exit code '$exit_code')."
-      ExitWithExitCode $exit_code
+      # We should not Write-PipelineTaskError here because that message shows up in the build summary
+      # The build already logged an error, that's the reason it failed. Producing an error here only adds noise.
+      echo "Build failed with exit code $exit_code. Check errors above."
+      if [[ "$ci" == "true" ]]; then
+        Write-PipelineSetResult -result "Failed" -message "msbuild execution failed."
+        # Exiting with an exit code causes the azure pipelines task to log yet another "noise" error
+        # The above Write-PipelineSetResult will cause the task to be marked as failure without adding yet another error
+        ExitWithExitCode 0
+      else
+        ExitWithExitCode $exit_code
+      fi
     }
   }
 
@@ -452,23 +501,27 @@ _script_dir=`dirname "$_ResolvePath"`
 
 eng_root=`cd -P "$_script_dir/.." && pwd`
 repo_root=`cd -P "$_script_dir/../.." && pwd`
-artifacts_dir="$repo_root/artifacts"
+repo_root="${repo_root}/"
+artifacts_dir="${repo_root}artifacts"
 toolset_dir="$artifacts_dir/toolset"
-tools_dir="$repo_root/.tools"
+tools_dir="${repo_root}.tools"
 log_dir="$artifacts_dir/log/$configuration"
 temp_dir="$artifacts_dir/tmp/$configuration"
 
-global_json_file="$repo_root/global.json"
+global_json_file="${repo_root}global.json"
 # determine if global.json contains a "runtimes" entry
 global_json_has_runtimes=false
-dotnetlocal_key=$(awk "/runtimes/ {print; exit}" "$global_json_file") || true
-if [[ -n "$dotnetlocal_key" ]]; then
+if command -v jq &> /dev/null; then
+  if jq -er '. | select(has("runtimes"))' "$global_json_file" &> /dev/null; then
+    global_json_has_runtimes=true
+  fi
+elif [[ "$(cat "$global_json_file")" =~ \"runtimes\"[[:space:]\:]*\{ ]]; then
   global_json_has_runtimes=true
 fi
 
 # HOME may not be defined in some scenarios, but it is required by NuGet
 if [[ -z $HOME ]]; then
-  export HOME="$repo_root/artifacts/.home/"
+  export HOME="${repo_root}artifacts/.home/"
   mkdir -p "$HOME"
 fi
 
diff --git a/eng/config/OptProf.json b/eng/config/OptProf.json
index 53061450ff8..84b2c0bd27d 100644
--- a/eng/config/OptProf.json
+++ b/eng/config/OptProf.json
@@ -22,6 +22,12 @@
           "testCases": [
             "ManagedLangs.OptProfTests.DDRIT_RPS_ManagedLangs"
           ]
+        },
+        {
+          "container": "Microsoft.VisualStudio.ProjectSystem.DDRIT",
+          "testCases": [
+            "Microsoft.VisualStudio.ProjectSystem.DDRIT.OptProfOpenCloseTest.OpenAndCloseProjectTestSolution"
+          ]
         }  
       ]
     }
diff --git a/global.json b/global.json
index 33ff6dedce8..c0ab9c781c8 100644
--- a/global.json
+++ b/global.json
@@ -1,6 +1,9 @@
 {
+  "sdk": {
+    "allowPrerelease": true
+  },
   "tools": {
-    "dotnet": "5.0.401",
+    "dotnet": "6.0.100-rc.1.21458.32",
     "runtimes": {
       "dotnet/x64": [
         "2.1.7"
@@ -12,6 +15,6 @@
   },
   "msbuild-sdks": {
     "Microsoft.Build.CentralPackageVersions": "2.0.1",
-    "Microsoft.DotNet.Arcade.Sdk": "5.0.0-beta.21505.11"
+    "Microsoft.DotNet.Arcade.Sdk": "6.0.0-beta.21460.7"
   }
 }
diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index d8a78e04125..0aaa25088a2 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -70,6 +70,7 @@ public BuildEventContext(int submissionId, int nodeId, int evaluationId, int pro
         public override int GetHashCode() { throw null; }
         public static bool operator ==(Microsoft.Build.Framework.BuildEventContext left, Microsoft.Build.Framework.BuildEventContext right) { throw null; }
         public static bool operator !=(Microsoft.Build.Framework.BuildEventContext left, Microsoft.Build.Framework.BuildEventContext right) { throw null; }
+        public override string ToString() { throw null; }
     }
     public partial class BuildFinishedEventArgs : Microsoft.Build.Framework.BuildStatusEventArgs
     {
@@ -151,6 +152,14 @@ protected CustomBuildEventArgs(string message, string helpKeyword, string sender
         protected CustomBuildEventArgs(string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
     }
     public delegate void CustomBuildEventHandler(object sender, Microsoft.Build.Framework.CustomBuildEventArgs e);
+    public abstract partial class EngineServices
+    {
+        public const int Version1 = 1;
+        protected EngineServices() { }
+        public virtual bool IsTaskInputLoggingEnabled { get { throw null; } }
+        public virtual int Version { get { throw null; } }
+        public virtual bool LogsMessagesOfImportance(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
+    }
     public partial class EnvironmentVariableReadEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
         public EnvironmentVariableReadEventArgs() { }
@@ -185,6 +194,10 @@ public partial interface IBuildEngine
         void LogMessageEvent(Microsoft.Build.Framework.BuildMessageEventArgs e);
         void LogWarningEvent(Microsoft.Build.Framework.BuildWarningEventArgs e);
     }
+    public partial interface IBuildEngine10 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7, Microsoft.Build.Framework.IBuildEngine8, Microsoft.Build.Framework.IBuildEngine9
+    {
+        Microsoft.Build.Framework.EngineServices EngineServices { get; }
+    }
     public partial interface IBuildEngine2 : Microsoft.Build.Framework.IBuildEngine
     {
         bool IsRunningMultipleNodes { get; }
@@ -580,11 +593,21 @@ public TargetSkippedEventArgs(string message, params object[] messageArgs) { }
         public string Condition { get { throw null; } set { } }
         public string EvaluatedCondition { get { throw null; } set { } }
         public override string Message { get { throw null; } }
+        public Microsoft.Build.Framework.BuildEventContext OriginalBuildEventContext { get { throw null; } set { } }
         public bool OriginallySucceeded { get { throw null; } set { } }
         public string ParentTarget { get { throw null; } set { } }
+        public Microsoft.Build.Framework.TargetSkipReason SkipReason { get { throw null; } set { } }
         public string TargetFile { get { throw null; } set { } }
         public string TargetName { get { throw null; } set { } }
     }
+    public enum TargetSkipReason
+    {
+        None = 0,
+        PreviouslyBuiltSuccessfully = 1,
+        PreviouslyBuiltUnsuccessfully = 2,
+        OutputsUpToDate = 3,
+        ConditionWasFalse = 4,
+    }
     public partial class TargetStartedEventArgs : Microsoft.Build.Framework.BuildStatusEventArgs
     {
         protected TargetStartedEventArgs() { }
@@ -652,6 +675,8 @@ public partial class TaskStartedEventArgs : Microsoft.Build.Framework.BuildStatu
         protected TaskStartedEventArgs() { }
         public TaskStartedEventArgs(string message, string helpKeyword, string projectFile, string taskFile, string taskName) { }
         public TaskStartedEventArgs(string message, string helpKeyword, string projectFile, string taskFile, string taskName, System.DateTime eventTimestamp) { }
+        public int ColumnNumber { get { throw null; } }
+        public int LineNumber { get { throw null; } }
         public override string Message { get { throw null; } }
         public string ProjectFile { get { throw null; } }
         public string TaskFile { get { throw null; } }
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index 2fd1301abb1..f4dc90e663c 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -70,6 +70,7 @@ public BuildEventContext(int submissionId, int nodeId, int evaluationId, int pro
         public override int GetHashCode() { throw null; }
         public static bool operator ==(Microsoft.Build.Framework.BuildEventContext left, Microsoft.Build.Framework.BuildEventContext right) { throw null; }
         public static bool operator !=(Microsoft.Build.Framework.BuildEventContext left, Microsoft.Build.Framework.BuildEventContext right) { throw null; }
+        public override string ToString() { throw null; }
     }
     public partial class BuildFinishedEventArgs : Microsoft.Build.Framework.BuildStatusEventArgs
     {
@@ -151,6 +152,14 @@ protected CustomBuildEventArgs(string message, string helpKeyword, string sender
         protected CustomBuildEventArgs(string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
     }
     public delegate void CustomBuildEventHandler(object sender, Microsoft.Build.Framework.CustomBuildEventArgs e);
+    public abstract partial class EngineServices
+    {
+        public const int Version1 = 1;
+        protected EngineServices() { }
+        public virtual bool IsTaskInputLoggingEnabled { get { throw null; } }
+        public virtual int Version { get { throw null; } }
+        public virtual bool LogsMessagesOfImportance(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
+    }
     public partial class EnvironmentVariableReadEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
         public EnvironmentVariableReadEventArgs() { }
@@ -185,6 +194,10 @@ public partial interface IBuildEngine
         void LogMessageEvent(Microsoft.Build.Framework.BuildMessageEventArgs e);
         void LogWarningEvent(Microsoft.Build.Framework.BuildWarningEventArgs e);
     }
+    public partial interface IBuildEngine10 : Microsoft.Build.Framework.IBuildEngine, Microsoft.Build.Framework.IBuildEngine2, Microsoft.Build.Framework.IBuildEngine3, Microsoft.Build.Framework.IBuildEngine4, Microsoft.Build.Framework.IBuildEngine5, Microsoft.Build.Framework.IBuildEngine6, Microsoft.Build.Framework.IBuildEngine7, Microsoft.Build.Framework.IBuildEngine8, Microsoft.Build.Framework.IBuildEngine9
+    {
+        Microsoft.Build.Framework.EngineServices EngineServices { get; }
+    }
     public partial interface IBuildEngine2 : Microsoft.Build.Framework.IBuildEngine
     {
         bool IsRunningMultipleNodes { get; }
@@ -579,11 +592,21 @@ public TargetSkippedEventArgs(string message, params object[] messageArgs) { }
         public string Condition { get { throw null; } set { } }
         public string EvaluatedCondition { get { throw null; } set { } }
         public override string Message { get { throw null; } }
+        public Microsoft.Build.Framework.BuildEventContext OriginalBuildEventContext { get { throw null; } set { } }
         public bool OriginallySucceeded { get { throw null; } set { } }
         public string ParentTarget { get { throw null; } set { } }
+        public Microsoft.Build.Framework.TargetSkipReason SkipReason { get { throw null; } set { } }
         public string TargetFile { get { throw null; } set { } }
         public string TargetName { get { throw null; } set { } }
     }
+    public enum TargetSkipReason
+    {
+        None = 0,
+        PreviouslyBuiltSuccessfully = 1,
+        PreviouslyBuiltUnsuccessfully = 2,
+        OutputsUpToDate = 3,
+        ConditionWasFalse = 4,
+    }
     public partial class TargetStartedEventArgs : Microsoft.Build.Framework.BuildStatusEventArgs
     {
         protected TargetStartedEventArgs() { }
@@ -651,6 +674,8 @@ public partial class TaskStartedEventArgs : Microsoft.Build.Framework.BuildStatu
         protected TaskStartedEventArgs() { }
         public TaskStartedEventArgs(string message, string helpKeyword, string projectFile, string taskFile, string taskName) { }
         public TaskStartedEventArgs(string message, string helpKeyword, string projectFile, string taskFile, string taskName, System.DateTime eventTimestamp) { }
+        public int ColumnNumber { get { throw null; } }
+        public int LineNumber { get { throw null; } }
         public override string Message { get { throw null; } }
         public string ProjectFile { get { throw null; } }
         public string TaskFile { get { throw null; } }
diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index 0e39d539eba..0c71f5d7390 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -164,6 +164,7 @@ public CombineTargetFrameworkInfoProperties() { }
         [Microsoft.Build.Framework.OutputAttribute]
         public string Result { get { throw null; } set { } }
         public string RootElementName { get { throw null; } set { } }
+        public bool UseAttributeForTargetFrameworkInfoPropertyNames { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
     public partial class CombineXmlElements : Microsoft.Build.Tasks.TaskExtension
@@ -613,6 +614,18 @@ public GetAssemblyIdentity() { }
         public Microsoft.Build.Framework.ITaskItem[] AssemblyFiles { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
+    public partial class GetCompatiblePlatform : Microsoft.Build.Tasks.TaskExtension
+    {
+        public GetCompatiblePlatform() { }
+        [Microsoft.Build.Framework.RequiredAttribute]
+        public Microsoft.Build.Framework.ITaskItem[] AnnotatedProjects { get { throw null; } set { } }
+        [Microsoft.Build.Framework.OutputAttribute]
+        public Microsoft.Build.Framework.ITaskItem[] AssignedProjectsWithPlatform { get { throw null; } set { } }
+        [Microsoft.Build.Framework.RequiredAttribute]
+        public string CurrentProjectPlatform { get { throw null; } set { } }
+        public string PlatformLookupTable { get { throw null; } set { } }
+        public override bool Execute() { throw null; }
+    }
     public sealed partial class GetFileHash : Microsoft.Build.Tasks.TaskExtension
     {
         public GetFileHash() { }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 18bd0c97245..032e84fecf9 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -94,6 +94,7 @@ public CombineTargetFrameworkInfoProperties() { }
         [Microsoft.Build.Framework.OutputAttribute]
         public string Result { get { throw null; } set { } }
         public string RootElementName { get { throw null; } set { } }
+        public bool UseAttributeForTargetFrameworkInfoPropertyNames { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
     public partial class CombineXmlElements : Microsoft.Build.Tasks.TaskExtension
@@ -506,6 +507,18 @@ public GetAssemblyIdentity() { }
         public Microsoft.Build.Framework.ITaskItem[] AssemblyFiles { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
+    public partial class GetCompatiblePlatform : Microsoft.Build.Tasks.TaskExtension
+    {
+        public GetCompatiblePlatform() { }
+        [Microsoft.Build.Framework.RequiredAttribute]
+        public Microsoft.Build.Framework.ITaskItem[] AnnotatedProjects { get { throw null; } set { } }
+        [Microsoft.Build.Framework.OutputAttribute]
+        public Microsoft.Build.Framework.ITaskItem[] AssignedProjectsWithPlatform { get { throw null; } set { } }
+        [Microsoft.Build.Framework.RequiredAttribute]
+        public string CurrentProjectPlatform { get { throw null; } set { } }
+        public string PlatformLookupTable { get { throw null; } set { } }
+        public override bool Execute() { throw null; }
+    }
     public sealed partial class GetFileHash : Microsoft.Build.Tasks.TaskExtension
     {
         public GetFileHash() { }
diff --git a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
index a8564cf317b..7c0a1e077c3 100644
--- a/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/net/Microsoft.Build.Utilities.Core.cs
@@ -321,11 +321,11 @@ public enum TargetDotNetFrameworkVersion
         Version461 = 8,
         Version452 = 9,
         Version462 = 10,
-        VersionLatest = 10,
         Version47 = 11,
         Version471 = 12,
         Version472 = 13,
         Version48 = 14,
+        VersionLatest = 14,
         Latest = 9999,
     }
     public partial class TargetPlatformSDK : System.IEquatable<Microsoft.Build.Utilities.TargetPlatformSDK>
@@ -392,6 +392,7 @@ public TaskLoggingHelper(Microsoft.Build.Framework.ITask taskInstance) { }
         protected Microsoft.Build.Framework.IBuildEngine BuildEngine { get { throw null; } }
         public bool HasLoggedErrors { get { throw null; } }
         public string HelpKeywordPrefix { get { throw null; } set { } }
+        public bool IsTaskInputLoggingEnabled { get { throw null; } }
         protected string TaskName { get { throw null; } }
         public System.Resources.ResourceManager TaskResources { get { throw null; } set { } }
         public string ExtractMessageCode(string message, out string messageWithoutCodePrefix) { throw null; }
@@ -423,6 +424,7 @@ public void LogMessageFromResources(string messageResourceName, params object[]
         public bool LogMessagesFromFile(string fileName) { throw null; }
         public bool LogMessagesFromFile(string fileName, Microsoft.Build.Framework.MessageImportance messageImportance) { throw null; }
         public bool LogMessagesFromStream(System.IO.TextReader stream, Microsoft.Build.Framework.MessageImportance messageImportance) { throw null; }
+        public bool LogsMessagesOfImportance(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
         public void LogTelemetry(string eventName, System.Collections.Generic.IDictionary<string, string> properties) { }
         public void LogWarning(string message, params object[] messageArgs) { }
         public void LogWarning(string subcategory, string warningCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, params object[] messageArgs) { }
@@ -599,8 +601,8 @@ public enum VisualStudioVersion
         Version120 = 2,
         Version140 = 3,
         Version150 = 4,
-        VersionLatest = 4,
         Version160 = 5,
         Version170 = 6,
+        VersionLatest = 6,
     }
 }
diff --git a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
index 9d7111dfe72..6cc7b96d758 100644
--- a/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
+++ b/ref/Microsoft.Build.Utilities.Core/netstandard/Microsoft.Build.Utilities.Core.cs
@@ -166,11 +166,11 @@ public enum TargetDotNetFrameworkVersion
         Version461 = 8,
         Version452 = 9,
         Version462 = 10,
-        VersionLatest = 10,
         Version47 = 11,
         Version471 = 12,
         Version472 = 13,
         Version48 = 14,
+        VersionLatest = 14,
         Latest = 9999,
     }
     public partial class TargetPlatformSDK : System.IEquatable<Microsoft.Build.Utilities.TargetPlatformSDK>
@@ -235,6 +235,7 @@ public TaskLoggingHelper(Microsoft.Build.Framework.ITask taskInstance) { }
         protected Microsoft.Build.Framework.IBuildEngine BuildEngine { get { throw null; } }
         public bool HasLoggedErrors { get { throw null; } }
         public string HelpKeywordPrefix { get { throw null; } set { } }
+        public bool IsTaskInputLoggingEnabled { get { throw null; } }
         protected string TaskName { get { throw null; } }
         public System.Resources.ResourceManager TaskResources { get { throw null; } set { } }
         public string ExtractMessageCode(string message, out string messageWithoutCodePrefix) { throw null; }
@@ -265,6 +266,7 @@ public void LogMessageFromResources(string messageResourceName, params object[]
         public bool LogMessagesFromFile(string fileName) { throw null; }
         public bool LogMessagesFromFile(string fileName, Microsoft.Build.Framework.MessageImportance messageImportance) { throw null; }
         public bool LogMessagesFromStream(System.IO.TextReader stream, Microsoft.Build.Framework.MessageImportance messageImportance) { throw null; }
+        public bool LogsMessagesOfImportance(Microsoft.Build.Framework.MessageImportance importance) { throw null; }
         public void LogTelemetry(string eventName, System.Collections.Generic.IDictionary<string, string> properties) { }
         public void LogWarning(string message, params object[] messageArgs) { }
         public void LogWarning(string subcategory, string warningCode, string helpKeyword, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, params object[] messageArgs) { }
@@ -433,8 +435,8 @@ public enum VisualStudioVersion
         Version120 = 2,
         Version140 = 3,
         Version150 = 4,
-        VersionLatest = 4,
         Version160 = 5,
         Version170 = 6,
+        VersionLatest = 6,
     }
 }
diff --git a/ref/Microsoft.Build/net/Microsoft.Build.cs b/ref/Microsoft.Build/net/Microsoft.Build.cs
index d59f83ba636..fb5b4b8da5e 100644
--- a/ref/Microsoft.Build/net/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/net/Microsoft.Build.cs
@@ -1,5 +1,14 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
+namespace Microsoft.Build.BackEnd.SdkResolution
+{
+    public partial class SdkResolverException : System.Exception
+    {
+        public SdkResolverException(string resourceName, Microsoft.Build.Framework.SdkResolver resolver, Microsoft.Build.Framework.SdkReference sdk, System.Exception innerException, params string[] args) { }
+        public Microsoft.Build.Framework.SdkResolver Resolver { get { throw null; } }
+        public Microsoft.Build.Framework.SdkReference Sdk { get { throw null; } }
+    }
+}
 namespace Microsoft.Build.Construction
 {
     public abstract partial class ElementLocation
@@ -1498,18 +1507,18 @@ namespace Microsoft.Build.FileSystem
     public abstract partial class MSBuildFileSystemBase
     {
         protected MSBuildFileSystemBase() { }
-        public abstract bool DirectoryExists(string path);
-        public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly);
-        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly);
-        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly);
-        public abstract bool FileExists(string path);
-        public abstract bool FileOrDirectoryExists(string path);
-        public abstract System.IO.FileAttributes GetAttributes(string path);
-        public abstract System.IO.Stream GetFileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
-        public abstract System.DateTime GetLastWriteTimeUtc(string path);
-        public abstract System.IO.TextReader ReadFile(string path);
-        public abstract byte[] ReadFileAllBytes(string path);
-        public abstract string ReadFileAllText(string path);
+        public virtual bool DirectoryExists(string path) { throw null; }
+        public virtual System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
+        public virtual System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
+        public virtual System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
+        public virtual bool FileExists(string path) { throw null; }
+        public virtual bool FileOrDirectoryExists(string path) { throw null; }
+        public virtual System.IO.FileAttributes GetAttributes(string path) { throw null; }
+        public virtual System.IO.Stream GetFileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { throw null; }
+        public virtual System.DateTime GetLastWriteTimeUtc(string path) { throw null; }
+        public virtual System.IO.TextReader ReadFile(string path) { throw null; }
+        public virtual byte[] ReadFileAllBytes(string path) { throw null; }
+        public virtual string ReadFileAllText(string path) { throw null; }
     }
 }
 namespace Microsoft.Build.Globbing
@@ -1574,8 +1583,8 @@ protected GraphBuildOptions(Microsoft.Build.Graph.GraphBuildOptions original) {
         public virtual bool Equals(Microsoft.Build.Graph.GraphBuildOptions other) { throw null; }
         public override bool Equals(object obj) { throw null; }
         public override int GetHashCode() { throw null; }
-        public static bool operator ==(Microsoft.Build.Graph.GraphBuildOptions r1, Microsoft.Build.Graph.GraphBuildOptions r2) { throw null; }
-        public static bool operator !=(Microsoft.Build.Graph.GraphBuildOptions r1, Microsoft.Build.Graph.GraphBuildOptions r2) { throw null; }
+        public static bool operator ==(Microsoft.Build.Graph.GraphBuildOptions left, Microsoft.Build.Graph.GraphBuildOptions right) { throw null; }
+        public static bool operator !=(Microsoft.Build.Graph.GraphBuildOptions left, Microsoft.Build.Graph.GraphBuildOptions right) { throw null; }
         protected virtual bool PrintMembers(System.Text.StringBuilder builder) { throw null; }
         public override string ToString() { throw null; }
         public virtual Microsoft.Build.Graph.GraphBuildOptions <Clone>$() { throw null; }
diff --git a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
index ab3acb3d087..b387429467c 100644
--- a/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
+++ b/ref/Microsoft.Build/netstandard/Microsoft.Build.cs
@@ -1,5 +1,14 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
+namespace Microsoft.Build.BackEnd.SdkResolution
+{
+    public partial class SdkResolverException : System.Exception
+    {
+        public SdkResolverException(string resourceName, Microsoft.Build.Framework.SdkResolver resolver, Microsoft.Build.Framework.SdkReference sdk, System.Exception innerException, params string[] args) { }
+        public Microsoft.Build.Framework.SdkResolver Resolver { get { throw null; } }
+        public Microsoft.Build.Framework.SdkReference Sdk { get { throw null; } }
+    }
+}
 namespace Microsoft.Build.Construction
 {
     public abstract partial class ElementLocation
@@ -1492,18 +1501,18 @@ namespace Microsoft.Build.FileSystem
     public abstract partial class MSBuildFileSystemBase
     {
         protected MSBuildFileSystemBase() { }
-        public abstract bool DirectoryExists(string path);
-        public abstract System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly);
-        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly);
-        public abstract System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly);
-        public abstract bool FileExists(string path);
-        public abstract bool FileOrDirectoryExists(string path);
-        public abstract System.IO.FileAttributes GetAttributes(string path);
-        public abstract System.IO.Stream GetFileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);
-        public abstract System.DateTime GetLastWriteTimeUtc(string path);
-        public abstract System.IO.TextReader ReadFile(string path);
-        public abstract byte[] ReadFileAllBytes(string path);
-        public abstract string ReadFileAllText(string path);
+        public virtual bool DirectoryExists(string path) { throw null; }
+        public virtual System.Collections.Generic.IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
+        public virtual System.Collections.Generic.IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
+        public virtual System.Collections.Generic.IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", System.IO.SearchOption searchOption = System.IO.SearchOption.TopDirectoryOnly) { throw null; }
+        public virtual bool FileExists(string path) { throw null; }
+        public virtual bool FileOrDirectoryExists(string path) { throw null; }
+        public virtual System.IO.FileAttributes GetAttributes(string path) { throw null; }
+        public virtual System.IO.Stream GetFileStream(string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) { throw null; }
+        public virtual System.DateTime GetLastWriteTimeUtc(string path) { throw null; }
+        public virtual System.IO.TextReader ReadFile(string path) { throw null; }
+        public virtual byte[] ReadFileAllBytes(string path) { throw null; }
+        public virtual string ReadFileAllText(string path) { throw null; }
     }
 }
 namespace Microsoft.Build.Globbing
@@ -1568,8 +1577,8 @@ protected GraphBuildOptions(Microsoft.Build.Graph.GraphBuildOptions original) {
         public virtual bool Equals(Microsoft.Build.Graph.GraphBuildOptions other) { throw null; }
         public override bool Equals(object obj) { throw null; }
         public override int GetHashCode() { throw null; }
-        public static bool operator ==(Microsoft.Build.Graph.GraphBuildOptions r1, Microsoft.Build.Graph.GraphBuildOptions r2) { throw null; }
-        public static bool operator !=(Microsoft.Build.Graph.GraphBuildOptions r1, Microsoft.Build.Graph.GraphBuildOptions r2) { throw null; }
+        public static bool operator ==(Microsoft.Build.Graph.GraphBuildOptions left, Microsoft.Build.Graph.GraphBuildOptions right) { throw null; }
+        public static bool operator !=(Microsoft.Build.Graph.GraphBuildOptions left, Microsoft.Build.Graph.GraphBuildOptions right) { throw null; }
         protected virtual bool PrintMembers(System.Text.StringBuilder builder) { throw null; }
         public override string ToString() { throw null; }
         public virtual Microsoft.Build.Graph.GraphBuildOptions <Clone>$() { throw null; }
diff --git a/scripts/Deploy-MSBuild.ps1 b/scripts/Deploy-MSBuild.ps1
index c9bc90217fe..f27baefae70 100644
--- a/scripts/Deploy-MSBuild.ps1
+++ b/scripts/Deploy-MSBuild.ps1
@@ -11,13 +11,18 @@ Param(
 Set-StrictMode -Version "Latest"
 $ErrorActionPreference = "Stop"
 
-function Copy-WithBackup ($origin) {
-    $directoryPart = Join-Path -Path $destination $origin.IntermediaryDirectories 
+function Copy-WithBackup ($origin, $destinationSubFolder = "") {
+    $directoryPart = [IO.Path]::Combine($destination, $destinationSubFolder, $origin.IntermediaryDirectories)
     $destinationPath = Join-Path -Path $directoryPart (Split-Path $origin.SourceFile -leaf)
 
+    $backupInto = [IO.Path]::Combine($BackupFolder, $destinationSubFolder)
+
     if (Test-Path $destinationPath -PathType Leaf) {
         # Back up previous copy of the file
-        Copy-Item $destinationPath $BackupFolder -ErrorAction Stop
+        if (!(Test-Path $backupInto)) {
+            [system.io.directory]::CreateDirectory($backupInto)
+        }
+        Copy-Item $destinationPath $backupInto -ErrorAction Stop
     }
 
     if (!(Test-Path $directoryPart)) {
@@ -48,7 +53,7 @@ Write-Host "Existing MSBuild assemblies backed up to $BackupFolder"
 if ($runtime -eq "Desktop") {
     $targetFramework = "net472"
 } else {
-    $targetFramework = "net5.0"
+    $targetFramework = "net6.0"
 }
 
 $bootstrapBinDirectory = "artifacts\bin\MSBuild.Bootstrap\$configuration\$targetFramework"
@@ -60,11 +65,6 @@ $filesToCopyToBin = @(
     FileToCopy "$bootstrapBinDirectory\Microsoft.Build.Utilities.Core.dll"
     FileToCopy "$bootstrapBinDirectory\Microsoft.NET.StringTools.dll"
 
-    FileToCopy "$bootstrapBinDirectory\en\Microsoft.Build.resources.dll" "en"
-    FileToCopy "$bootstrapBinDirectory\en\Microsoft.Build.Tasks.Core.resources.dll" "en"
-    FileToCopy "$bootstrapBinDirectory\en\Microsoft.Build.Utilities.Core.resources.dll" "en"
-    FileToCopy "$bootstrapBinDirectory\en\MSBuild.resources.dll" "en"
-
     FileToCopy "$bootstrapBinDirectory\Microsoft.Common.CrossTargeting.targets"
     FileToCopy "$bootstrapBinDirectory\Microsoft.Common.CurrentVersion.targets"
     FileToCopy "$bootstrapBinDirectory\Microsoft.Common.targets"
@@ -82,17 +82,16 @@ $filesToCopyToBin = @(
     FileToCopy "$bootstrapBinDirectory\Microsoft.VisualBasic.CrossTargeting.targets"
     FileToCopy "$bootstrapBinDirectory\Microsoft.VisualBasic.CurrentVersion.targets"
     FileToCopy "$bootstrapBinDirectory\Microsoft.VisualBasic.targets"
+
+    FileToCopy "$bootstrapBinDirectory\Microsoft.Common.tasks"
 )
 
 if ($runtime -eq "Desktop") {
     $runtimeSpecificFiles = @(
-        FileToCopy "$bootstrapBinDirectory\MSBuild.exe"
         FileToCopy "artifacts\bin\Microsoft.Build.Conversion\$configuration\$targetFramework\Microsoft.Build.Conversion.Core.dll"
         FileToCopy "artifacts\bin\Microsoft.Build.Engine\$configuration\$targetFramework\Microsoft.Build.Engine.dll"
 
-        FileToCopy "artifacts\bin\MSBuildTaskHost\$configuration\net35\MSBuildTaskHost.exe"
-        FileToCopy "artifacts\bin\MSBuildTaskHost\$configuration\net35\MSBuildTaskHost.pdb"
-
+        FileToCopy "$bootstrapBinDirectory\Microsoft.Bcl.AsyncInterfaces.dll"
         FileToCopy "$bootstrapBinDirectory\Microsoft.Data.Entity.targets"
         FileToCopy "$bootstrapBinDirectory\Microsoft.ServiceModel.targets"
         FileToCopy "$bootstrapBinDirectory\Microsoft.WinFx.targets"
@@ -100,6 +99,18 @@ if ($runtime -eq "Desktop") {
         FileToCopy "$bootstrapBinDirectory\Microsoft.Xaml.targets"
         FileToCopy "$bootstrapBinDirectory\Workflow.targets"
         FileToCopy "$bootstrapBinDirectory\Workflow.VisualBasic.targets"
+
+        FileToCopy "$bootstrapBinDirectory\System.Buffers.dll"
+        FileToCopy "$bootstrapBinDirectory\System.Collections.Immutable.dll"
+        FileToCopy "$bootstrapBinDirectory\System.Memory.dll"
+        FileToCopy "$bootstrapBinDirectory\System.Numerics.Vectors.dll"
+        FileToCopy "$bootstrapBinDirectory\System.Resources.Extensions.dll"
+        FileToCopy "$bootstrapBinDirectory\System.Runtime.CompilerServices.Unsafe.dll"
+        FileToCopy "$bootstrapBinDirectory\System.Text.Encodings.Web.dll"
+        FileToCopy "$bootstrapBinDirectory\System.Text.Json.dll"
+        FileToCopy "$bootstrapBinDirectory\System.Threading.Tasks.Dataflow.dll"
+        FileToCopy "$bootstrapBinDirectory\System.Threading.Tasks.Extensions.dll"
+        FileToCopy "$bootstrapBinDirectory\System.ValueTuple.dll"
     )
 } else {
     $runtimeSpecificFiles = @(
@@ -107,11 +118,40 @@ if ($runtime -eq "Desktop") {
     )
 }
 
+if ($runtime -eq "Desktop") {
+    $x86files = @(
+        FileToCopy "$bootstrapBinDirectory\MSBuild.exe"
+        FileToCopy "$bootstrapBinDirectory\MSBuild.exe.config"
+        FileToCopy "artifacts\bin\MSBuildTaskHost\$configuration\net35\MSBuildTaskHost.exe"
+        FileToCopy "artifacts\bin\MSBuildTaskHost\$configuration\net35\MSBuildTaskHost.pdb"
+    )
+    $amd64files = @(
+        FileToCopy "artifacts\bin\MSBuild\x64\$configuration\$targetFramework\MSBuild.exe"
+        FileToCopy "artifacts\bin\MSBuild\x64\$configuration\$targetFramework\MSBuild.exe.config"
+        FileToCopy "artifacts\bin\MSBuildTaskHost\x64\$configuration\net35\MSBuildTaskHost.exe"
+        FileToCopy "artifacts\bin\MSBuildTaskHost\x64\$configuration\net35\MSBuildTaskHost.pdb"
+    )
+}
+
 $filesToCopyToBin += $runtimeSpecificFiles
 
 foreach ($file in $filesToCopyToBin) {
     Copy-WithBackup $file
 }
 
+if ($runtime -eq "Desktop") {
+    foreach ($file in $x86files) {
+        Copy-WithBackup $file
+    }
+
+    foreach ($file in $filesToCopyToBin) {
+        Copy-WithBackup $file "amd64"
+    }
+
+    foreach ($file in $amd64files) {
+        Copy-WithBackup $file "amd64"
+    }
+}
+
 Write-Host -ForegroundColor Green "Copy succeeded"
 Write-Verbose "Run $destination\MSBuild.exe"
diff --git a/scripts/EnumerateMSBuild.ps1 b/scripts/EnumerateMSBuild.ps1
index d8ac8f262e6..115cdd8f108 100644
--- a/scripts/EnumerateMSBuild.ps1
+++ b/scripts/EnumerateMSBuild.ps1
@@ -33,7 +33,7 @@ foreach ($instance in $vsInstances)
     $instancePath = $instance.installationPath
     Write-Log "********************" -LogToConsole $False
     Write-Log "Found VS Instance: $instanceName"
-    
+
     # Look at each dll/exe in the MSBuild bin folder and get their ProductVersion
     ls -File -Recurse -Include ('*.dll', '*.exe') -Path "$instancePath\MSBuild\15.0\Bin" | % VersionInfo | Format-Table -AutoSize InternalName, ProductVersion, FileName | Out-File $logFile -Width 1000 -Append unicode
     ls -File -Recurse -Include ('*.dll', '*.exe') -Path "$instancePath\MSBuild\Current\Bin" | % VersionInfo | Format-Table -AutoSize InternalName, ProductVersion, FileName | Out-File $logFile -Width 1000 -Append unicode
@@ -68,4 +68,4 @@ Write-Log "********************" -LogToConsole $False
 $logFile = Get-ChildItem -File -Path $logFile
 
 Write-Host
-Write-Host "Output saved to $logFile"
\ No newline at end of file
+Write-Host "Output saved to $logFile"
diff --git a/src/BannedSymbols.txt b/src/BannedSymbols.txt
new file mode 100644
index 00000000000..80f588d4b83
--- /dev/null
+++ b/src/BannedSymbols.txt
@@ -0,0 +1 @@
+M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char);CompareInfo.IndexOf can unexpectedly allocate strings--use string.IndexOf
diff --git a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
index 8d354afd72e..fb4e9d1afdc 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
@@ -395,7 +395,7 @@ public void ValidXmlInvalidSyntaxInChildElement()
                     <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
                         <ItemGroup>
                            <XXX YYY='ZZZ'/>
-                        </ItemGroup> 
+                        </ItemGroup>
                     </Project>
                 ";
 
@@ -416,7 +416,7 @@ public void ValidXmlInvalidSyntaxOpenFromDiskTwice()
                     <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
                         <ItemGroup>
                            <XXX YYY='ZZZ'/>
-                        </ItemGroup> 
+                        </ItemGroup>
                     </Project>
                 ";
 
@@ -1392,7 +1392,7 @@ public void ReloadCanSpecifyPreserveFormatting(bool initialPreserveFormatting, b
   <PropertyGroup>
     <P><!-- new comment -->property value<!-- new comment --></P>
   </PropertyGroup>
-  
+
   <!-- new comment -->
   <ItemGroup>
     <i Include=`a`>
@@ -1412,7 +1412,7 @@ public void ReloadCanSpecifyPreserveFormatting(bool initialPreserveFormatting, b
   <PropertyGroup>
     <P><!-- new comment -->property value<!-- new comment --></P>
   </PropertyGroup>
-  
+
   <!-- new comment -->
   <ItemGroup>
     <i Include=`a`>
@@ -1428,7 +1428,7 @@ public void ReloadCanSpecifyPreserveFormatting(bool initialPreserveFormatting, b
   <PropertyGroup>
     <P><!-- changed comment -->property value<!-- changed comment --></P>
   </PropertyGroup>
-  
+
   <!-- changed comment -->
   <ItemGroup>
     <i Include=`a`>
@@ -1448,7 +1448,7 @@ public void ReloadCanSpecifyPreserveFormatting(bool initialPreserveFormatting, b
   <PropertyGroup>
     <P><!-- new comment -->property value<!-- new comment --></P>
   </PropertyGroup>
-  
+
   <!-- new comment -->
   <ItemGroup>
     <i Include=`a`>
@@ -1463,7 +1463,7 @@ public void ReloadCanSpecifyPreserveFormatting(bool initialPreserveFormatting, b
   <PropertyGroup>
     <P>property value</P>
   </PropertyGroup>
-  
+
   <ItemGroup>
     <i Include=`a`>
       <m>metadata value</m>
@@ -1562,7 +1562,7 @@ public void ReloadedStateIsResilientToChangesAndDiskRoundtrip()
 @"
 <!-- changed comment -->
 <Project xmlns=`msbuildnamespace`>
-  
+
   <!-- changed comment -->
   <ItemGroup>
 
@@ -1580,7 +1580,7 @@ public void ReloadedStateIsResilientToChangesAndDiskRoundtrip()
 @"
 <!-- changed comment -->
 <Project xmlns=`msbuildnamespace`>
-  
+
   <!-- changed comment -->
   <PropertyGroup>
     <P>v</P>
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index ec4dd997eb7..d4322c9410f 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -20,7 +20,7 @@ namespace Microsoft.Build.UnitTests.OM.Definition
     /// <summary>
     /// Tests for ProjectItem
     /// </summary>
-    public class ProjectItem_Tests
+    public class ProjectItem_Tests : IDisposable
     {
         internal const string ItemWithIncludeAndExclude = @"
                     <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >
@@ -43,6 +43,18 @@ public class ProjectItem_Tests
                     </Project>
                 ";
 
+        protected TestEnvironment _env;
+
+        public ProjectItem_Tests()
+        {
+            _env = TestEnvironment.Create();
+        }
+
+        public void Dispose()
+        {
+            _env.Dispose();
+        }
+
         /// <summary>
         /// Project getter
         /// </summary>
@@ -2094,6 +2106,19 @@ public void Remove()
             Assert.Equal("a", items[0].EvaluatedInclude);
         }
 
+        [Fact]
+        public void RemoveAllMatchingItems()
+        {
+            IList<ProjectItem> items = ObjectModelHelpers.GetItemsFromFragment(
+                "<i Include='a;b' />" +
+                "<i Include='a;b' />" +
+                "<i Remove='b;c' />"
+                );
+
+            Assert.Equal(2, items.Count);
+            Assert.Equal(@"a;a", string.Join(";", items.Select(i => i.EvaluatedInclude)));
+        }
+
         [Fact]
         public void RemoveGlob()
         {
@@ -3529,4 +3554,13 @@ public void FileNameMetadataEvaluationShouldNotDependsFromPlatformSpecificSlashe
             }
         }
     }
+
+    public class ProjectItemWithOptimizations_Tests : ProjectItem_Tests
+    {
+        public ProjectItemWithOptimizations_Tests()
+        {
+            // Make sure we always use the dictionary-based Remove logic.
+            _env.SetEnvironmentVariable("MSBUILDDICTIONARYBASEDITEMREMOVETHRESHOLD", "0");
+        }
+    }
 }
diff --git a/src/Build.OM.UnitTests/Definition/Project_Tests.cs b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
index a7be71e809a..5323c0fd85e 100644
--- a/src/Build.OM.UnitTests/Definition/Project_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
@@ -1839,11 +1839,11 @@ public void ChooseWhenTrue()
                             <When Condition='true'>
                               <PropertyGroup>
                                 <p>v1</p>
-                              </PropertyGroup> 
+                              </PropertyGroup>
                               <ItemGroup>
                                 <i Include='i1' />
                               </ItemGroup>
-                            </When>      
+                            </When>
                         </Choose>
                     </Project>
                 ");
@@ -1866,19 +1866,19 @@ public void ChooseSecondWhenTrue()
                             <When Condition='false'>
                               <PropertyGroup>
                                 <p>v1</p>
-                              </PropertyGroup> 
+                              </PropertyGroup>
                               <ItemGroup>
                                 <i Include='i1' />
                               </ItemGroup>
-                            </When>   
+                            </When>
                             <When Condition='true'>
                               <PropertyGroup>
                                 <p>v2</p>
-                              </PropertyGroup> 
+                              </PropertyGroup>
                               <ItemGroup>
                                 <i Include='i2' />
                               </ItemGroup>
-                            </When>    
+                            </When>
                         </Choose>
                     </Project>
                 ");
@@ -1901,19 +1901,19 @@ public void ChooseOtherwise()
                             <When Condition='false'>
                               <PropertyGroup>
                                 <p>v1</p>
-                              </PropertyGroup> 
+                              </PropertyGroup>
                               <ItemGroup>
                                 <i Include='i1' />
                               </ItemGroup>
-                            </When>   
+                            </When>
                             <Otherwise>
                               <PropertyGroup>
                                 <p>v2</p>
-                              </PropertyGroup> 
+                              </PropertyGroup>
                               <ItemGroup>
                                 <i Include='i2' />
                               </ItemGroup>
-                            </Otherwise>    
+                            </Otherwise>
                         </Choose>
                     </Project>
                 ");
@@ -1940,13 +1940,13 @@ public void ChooseTwoPasses()
                               </ItemGroup>
                               <PropertyGroup>
                                 <p>@(i);v1</p>
-                              </PropertyGroup> 
-                            </When>      
+                              </PropertyGroup>
+                            </When>
                         </Choose>
 
                       <PropertyGroup>
                         <p2>v2</p2>
-                      </PropertyGroup> 
+                      </PropertyGroup>
 
                         <Choose>
                             <When Condition='false'/>
@@ -1956,13 +1956,13 @@ public void ChooseTwoPasses()
                               </ItemGroup>
                               <PropertyGroup>
                                 <q>@(j);v1</q>
-                              </PropertyGroup> 
+                              </PropertyGroup>
                             </Otherwise>
                         </Choose>
 
                       <PropertyGroup>
                         <q2>v2</q2>
-                      </PropertyGroup> 
+                      </PropertyGroup>
                     </Project>
                 ");
 
@@ -2019,14 +2019,14 @@ public void ChooseSeesItemDefinitions()
                                   <m>%(m);m1</m>
                                 </i>
                               </ItemGroup>
-                            </When>      
+                            </When>
                         </Choose>
 
                       <ItemDefinitionGroup>
                         <i>
                           <m>m0</m>
                         </i>
-                      </ItemDefinitionGroup> 
+                      </ItemDefinitionGroup>
 
                     </Project>
                 ");
@@ -3078,7 +3078,7 @@ public void GetItemProvenanceWhenExcludeHasIndirectReferences()
                   </ItemGroup>
 
                   <PropertyGroup>
-                    <P>1;2;3;@(B)</P>  
+                    <P>1;2;3;@(B)</P>
                   </PropertyGroup>
                 </Project>
                 ";
@@ -3104,7 +3104,7 @@ public void GetItemProvenanceWhenIncludeHasIndirectReferences()
                   </ItemGroup>
 
                   <PropertyGroup>
-                    <P>1;2;3;@(B)</P>  
+                    <P>1;2;3;@(B)</P>
                   </PropertyGroup>
                 </Project>
                 ";
@@ -3130,7 +3130,7 @@ public void GetItemProvenanceWhenIncludeHasIndirectItemReferencesAndOnlyGlobsExi
                   </ItemGroup>
 
                   <PropertyGroup>
-                    <P>@(B)</P>  
+                    <P>@(B)</P>
                   </PropertyGroup>
                 </Project>
                 ";
@@ -3158,7 +3158,7 @@ public void GetItemProvenanceShouldReturnInconclusiveWhenIndirectPropertyDoesNot
                   </ItemGroup>
 
                   <PropertyGroup>
-                    <P></P>  
+                    <P></P>
                   </PropertyGroup>
                 </Project>
                 ";
@@ -3918,7 +3918,7 @@ public void ProjectImportedEventFalseCondition()
                     eventArgs.LineNumber.ShouldBe(6);
                     eventArgs.ColumnNumber.ShouldBe(3);
 
-                    logger.AssertLogContains($"Project \"{import.Project}\" was not imported by \"{pre.FullPath}\" at ({eventArgs.LineNumber},{eventArgs.ColumnNumber}), due to false condition; ( \'$(Something)\' == \'nothing\' ) was evaluated as ( \'\' == \'nothing\' )."); 
+                    logger.AssertLogContains($"Project \"{import.Project}\" was not imported by \"{pre.FullPath}\" at ({eventArgs.LineNumber},{eventArgs.ColumnNumber}), due to false condition; ( \'$(Something)\' == \'nothing\' ) was evaluated as ( \'\' == \'nothing\' ).");
                 }
             }
         }
diff --git a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
index 18ad711bac4..7c478d2a782 100644
--- a/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
+++ b/src/Build.OM.UnitTests/Microsoft.Build.Engine.OM.UnitTests.csproj
@@ -1,4 +1,4 @@
-Ôªø<Project Sdk="Microsoft.NET.Sdk">
+<Project Sdk="Microsoft.NET.Sdk">
 
   <Import Project="..\Shared\FileSystemSources.proj" />
   <Import Project="..\Shared\DebuggingSources.proj" />
@@ -21,6 +21,7 @@
 
   <ItemGroup>
     <PackageReference Include="Shouldly" />
+    <PackageReference Include="System.Net.Http" />
     <PackageDownload Include="NuGet.CommandLine" Version="[$(NuGetCommandLinePackageVersion)]" />
   </ItemGroup>
 
diff --git a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
index e6ac8089ea8..32e5a1a9ce1 100644
--- a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
@@ -25,11 +25,11 @@ public class BinaryTranslator_Tests
         public void TestSerializationMode()
         {
             MemoryStream stream = new MemoryStream();
-            ITranslator translator = BinaryTranslator.GetReadTranslator(stream, null);
-            Assert.Equal(TranslationDirection.ReadFromStream, translator.Mode);
+            using ITranslator readTranslator = BinaryTranslator.GetReadTranslator(stream, null);
+            Assert.Equal(TranslationDirection.ReadFromStream, readTranslator.Mode);
 
-            translator = BinaryTranslator.GetWriteTranslator(stream);
-            Assert.Equal(TranslationDirection.WriteToStream, translator.Mode);
+            using ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(stream);
+            Assert.Equal(TranslationDirection.WriteToStream, writeTranslator.Mode);
         }
 
         /// <summary>
@@ -545,7 +545,6 @@ public void AssemblyNameWithAllFields()
                 HashAlgorithm = System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA256,
                 VersionCompatibility = AssemblyVersionCompatibility.SameMachine,
                 CodeBase = "C:\\src",
-                KeyPair = new StrongNameKeyPair(new byte[] { 4, 3, 2, 1 }),
                 ContentType = AssemblyContentType.WindowsRuntime,
                 CultureName = "zh-HK",
             };
diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
index b09519f9f71..1587123afc0 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
@@ -8,6 +8,7 @@
 using System.Globalization;
 using System.IO;
 using System.Linq;
+using System.Reflection;
 using System.Threading;
 using System.Xml;
 
@@ -277,10 +278,10 @@ public void VerifyEnvironmentSavedBetweenCalls()
 </UsingTask>
                         <Target Name='SetEnv'>
                             <SetEnvv/>
-                        </Target>        
+                        </Target>
                         <Target Name='Message1'>
                             <Exec Command='echo What does a cat say : " + (NativeMethodsShared.IsWindows ? "%MOO%" : "$MOO") + @"' />
-                        </Target>       
+                        </Target>
 </Project>
 ");
 
@@ -311,7 +312,7 @@ public void VerifyEnvironmentSavedBetweenCalls()
 
         /// <summary>
         /// Verify if idle nodes are shutdown when BuildManager.ShutdownAllNodes is evoked.
-        /// The final number of nodes has to be less or equal the number of nodes already in 
+        /// The final number of nodes has to be less or equal the number of nodes already in
         /// the system before this method was called.
         /// </summary>
 #if RUNTIME_TYPE_NETCORE
@@ -344,11 +345,11 @@ public void ShutdownNodesAfterParallelBuild(int numberOfParallelProjectsToBuild,
             // Generate a theoretically unique directory to put our dummy projects in.
             string shutdownProjectDirectory = Path.Combine(Path.GetTempPath(), String.Format(CultureInfo.InvariantCulture, "VSNodeShutdown_{0}_UnitTest", Process.GetCurrentProcess().Id));
 
-            // Create the dummy projects we'll be "building" as our excuse to connect to and shut down 
-            // all the nodes. 
+            // Create the dummy projects we'll be "building" as our excuse to connect to and shut down
+            // all the nodes.
             ProjectInstance rootProject = GenerateDummyProjects(shutdownProjectDirectory, numberOfParallelProjectsToBuild, projectCollection);
 
-            // Build the projects. 
+            // Build the projects.
             var buildParameters = new BuildParameters(projectCollection)
             {
                 OnlyLogCriticalEvents = true,
@@ -362,9 +363,9 @@ public void ShutdownNodesAfterParallelBuild(int numberOfParallelProjectsToBuild,
             // Tell the build manager to not disturb process wide state
             var requestData = new BuildRequestData(rootProject, new[] { "Build" }, null);
 
-            // Use a separate BuildManager for the node shutdown build, so that we don't have 
-            // to worry about taking dependencies on whether or not the existing ones have already 
-            // disappeared. 
+            // Use a separate BuildManager for the node shutdown build, so that we don't have
+            // to worry about taking dependencies on whether or not the existing ones have already
+            // disappeared.
             var shutdownManager = new BuildManager("IdleNodeShutdown");
             shutdownManager.Build(buildParameters, requestData);
 
@@ -551,7 +552,7 @@ public void RequestedResultsAreSatisfied()
         }
 
         /// <summary>
-        /// Make sure when we are doing an in-process build that even if the environment variable MSBUILDFORWARDPROPERTIESFROMCHILD is set that we still 
+        /// Make sure when we are doing an in-process build that even if the environment variable MSBUILDFORWARDPROPERTIESFROMCHILD is set that we still
         /// get all of the initial properties.
         /// </summary>
         [Fact]
@@ -631,7 +632,7 @@ public void InProcMsBuildForwardAllPropertiesFromChild()
         }
 
         /// <summary>
-        /// Make sure when we launch a child node and set MsBuildForwardAllPropertiesFromChild that we get all of our properties. This needs to happen 
+        /// Make sure when we launch a child node and set MsBuildForwardAllPropertiesFromChild that we get all of our properties. This needs to happen
         /// even if the msbuildforwardpropertiesfromchild is set to something.
         /// </summary>
         [Fact]
@@ -703,6 +704,11 @@ public void OutOfProcNodeForwardCertainproperties()
             _env.SetEnvironmentVariable("MsBuildForwardPropertiesFromChild", "InitialProperty3;IAMNOTREAL");
             _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", "1");
 
+            // ProjectEvaluationFinished automatically and always forwards all properties, so we'd
+            // end up with all ~136 properties. Since this test is explicitly testing forwarding specific
+            // properties on ProjectStarted, turn off the new behavior.
+            _env.SetEnvironmentVariable("MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION", "0");
+
             var project = CreateProject(contents, null, _projectCollection, false);
             var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(),
                 MSBuildDefaultToolsVersion, new string[] { }, null);
@@ -835,7 +841,7 @@ public void ForwardNoPropertiesLaunchChildNode()
         }
 
         /// <summary>
-        /// We want to pass the toolsets from the parent to the child nodes so that any custom toolsets 
+        /// We want to pass the toolsets from the parent to the child nodes so that any custom toolsets
         /// defined on the parent are also available on the child nodes for tasks which use the global project
         /// collection
         /// </summary>
@@ -858,7 +864,7 @@ public void VerifyCustomToolSetsPropagated()
                                <Reference Include='$(MSBuildToolsPath)\Microsoft.Build.dll'/>
 <Code Type='Method'>
  <![CDATA[
-                    
+
                                 public override bool Execute()
                                 {
                                     bool foundToolSet = false;
@@ -963,7 +969,7 @@ public void DeferredMessageShouldBeLogged()
               <Project>
                  <Target Name='Build'>
                      <Message Text='[Message]' Importance='high'/>
-                     <Warning Text='[Warn]'/>	
+                     <Warning Text='[Warn]'/>
                 </Target>
               </Project>
             ");
@@ -1019,7 +1025,7 @@ public void DeferredMessageShouldBeLogged()
         }
 
         /// <summary>
-        /// A build with a message, error and warning, verify that 
+        /// A build with a message, error and warning, verify that
         /// we only get errors, warnings, and project started and finished when OnlyLogCriticalEvents is true
         /// </summary>
         [Fact]
@@ -1029,7 +1035,7 @@ public void SimpleBuildWithFailureAndWarningOnlyLogCriticalEventsTrue()
               <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
                  <Target Name='test'>
                      <Message Text='[Message]' Importance='high'/>
-                     <Warning Text='[warn]'/>	
+                     <Warning Text='[warn]'/>
                      <Error Text='[errormessage]'/>
                 </Target>
               </Project>
@@ -1053,7 +1059,7 @@ public void SimpleBuildWithFailureAndWarningOnlyLogCriticalEventsTrue()
         }
 
         /// <summary>
-        /// A build with a message, error and warning, verify that 
+        /// A build with a message, error and warning, verify that
         /// we only get errors, warnings, messages, task and target messages OnlyLogCriticalEvents is false
         /// </summary>
         [Fact]
@@ -1063,7 +1069,7 @@ public void SimpleBuildWithFailureAndWarningOnlyLogCriticalEventsFalse()
               <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
                  <Target Name='test'>
                      <Message Text='[message]' Importance='high'/>
-                     <Warning Text='[warn]'/>	
+                     <Warning Text='[warn]'/>
                      <Error Text='[errormessage]'/>
                 </Target>
               </Project>
@@ -1386,9 +1392,9 @@ public void OverlappingBuildSubmissions()
         }
 
         /// <summary>
-        /// If two overlapping submissions are executed against the same project, with at least one 
-        /// target involved that skipped, make sure that the second one successfully completes 
-        /// (retrieved from the cache). 
+        /// If two overlapping submissions are executed against the same project, with at least one
+        /// target involved that skipped, make sure that the second one successfully completes
+        /// (retrieved from the cache).
         /// </summary>
         [Fact]
         public void OverlappingIdenticalBuildSubmissions()
@@ -1419,9 +1425,9 @@ public void OverlappingIdenticalBuildSubmissions()
         }
 
         /// <summary>
-        /// With two overlapping submissions, the first of which skips a target and the second 
-        /// of which should not, ensure that the second submission does not, in fact, skip 
-        /// the target.  (E.g. despite the fact that the target results are in the cache already 
+        /// With two overlapping submissions, the first of which skips a target and the second
+        /// of which should not, ensure that the second submission does not, in fact, skip
+        /// the target.  (E.g. despite the fact that the target results are in the cache already
         /// as 'skipped', ensure that we retry execution in case conditions have changed.)
         /// </summary>
         [Fact]
@@ -1516,6 +1522,7 @@ public void CancelledBuildWithUnexecutedSubmission()
         [Fact(Timeout = 20_000)]
         public void CancelledBuild()
         {
+            Console.WriteLine("Starting CancelledBuild test that is known to hang.");
             string contents = CleanupFileContents(@"
 <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
  <Target Name='test'>
@@ -1524,18 +1531,36 @@ public void CancelledBuild()
  </Target>
 </Project>
 ");
+
+            BuildParameters parameters = new ()
+            {
+                ShutdownInProcNodeOnBuildFinish = true,
+                Loggers = new ILogger[] { _logger, new MockLogger(printEventsToStdout: true) },
+                EnableNodeReuse = false
+            };
+
             BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+
+            Console.WriteLine("CancelledBuild: beginning build");
             _buildManager.BeginBuild(_parameters);
+            Console.WriteLine("CancelledBuild: build begun");
+
             BuildSubmission asyncResult = _buildManager.PendBuildRequest(data);
+            Console.WriteLine("CancelledBuild: pend build returned");
+
 
             asyncResult.ExecuteAsync(null, null);
+            Console.WriteLine("CancelledBuild: ExecuteAsync called");
             _buildManager.CancelAllSubmissions();
+            Console.WriteLine("CancelledBuild: submissions cancelled");
+
             // This test intermittently hangs. This timeout is designed to prevent that, turning a hang into a failure.
             // Todo: Investigate why this test sometimes hangs.
-            asyncResult.WaitHandle.WaitOne(TimeSpan.FromSeconds(10));
+            asyncResult.WaitHandle.WaitOne(TimeSpan.FromSeconds(10)).ShouldBeTrue();
             asyncResult.IsCompleted.ShouldBeTrue("Failing to complete by this point indicates a hang.");
             BuildResult result = asyncResult.BuildResult;
             _buildManager.EndBuild();
+            Console.WriteLine("CancelledBuild: build ended");
 
             Assert.Equal(BuildResultCode.Failure, result.OverallResult); // "Build should have failed."
             _logger.AssertLogDoesntContain("[errormessage]");
@@ -1619,7 +1644,7 @@ public void CancelledBuildInTaskHostWithDelay20()
 
         /// <summary>
         /// A canceled build which waits for the task to get started before canceling.  Because it is a 12.. task, we should
-        /// cancel the task and exit out after a short period wherein we wait for the task to exit cleanly. 
+        /// cancel the task and exit out after a short period wherein we wait for the task to exit cleanly.
         /// </summary>
         [Fact]
         public void CancelledBuildWithDelay40()
@@ -1650,7 +1675,7 @@ public void CancelledBuildWithDelay40()
 #if FEATURE_TASKHOST
         /// <summary>
         /// A canceled build which waits for the task to get started before canceling.  Because it is a 12.0 task, we should
-        /// cancel the task and exit out after a short period wherein we wait for the task to exit cleanly. 
+        /// cancel the task and exit out after a short period wherein we wait for the task to exit cleanly.
         /// </summary>
         [Fact]
         public void CancelledBuildInTaskHostWithDelay40()
@@ -2122,7 +2147,7 @@ public void Regress239661()
  </Target>
 </Project>
 ");
-            
+
             string fileName = _env.CreateFile(".proj").Path;
             File.WriteAllText(fileName, contents);
             var data = new BuildRequestData(fileName, _projectCollection.GlobalProperties, MSBuildDefaultToolsVersion, new string[0], null);
@@ -2133,10 +2158,10 @@ public void Regress239661()
         }
 
         /// <summary>
-        /// Verify that disabling the in-proc node when a project requires it will cause the build to fail, but not crash.
+        /// Verify that disabling the in-proc node when a project requires it will cause the project to build on the out of proc node.
         /// </summary>
         [Fact]
-        public void Regress239661_NodeUnavailable()
+        public void ExplicitInprocAffinityGetsOverruledByDisableInprocNode()
         {
             string contents = CleanupFileContents(@"
 <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
@@ -2151,14 +2176,15 @@ public void Regress239661_NodeUnavailable()
 </Project>
 ");
             BuildRequestData data = GetBuildRequestData(contents);
+            _env.CreateFile(data.ProjectFullPath, data.ProjectInstance.ToProjectRootElement().RawXml);
             _parameters.DisableInProcNode = true;
 
             // Require that this project build on the in-proc node, which will not be available.
             data.HostServices.SetNodeAffinity(data.ProjectFullPath, NodeAffinity.InProc);
             BuildResult result = _buildManager.Build(_parameters, data);
-            Assert.Equal(BuildResultCode.Failure, result.OverallResult);
-            _logger.AssertLogDoesntContain("[success]");
-            _logger.AssertLogContains("MSB4223");
+            Assert.Equal(BuildResultCode.Success, result.OverallResult);
+            _logger.AssertLogContains("[success]");
+            _logger.AssertLogDoesntContain("MSB4223");
         }
 
         /// <summary>
@@ -2180,9 +2206,9 @@ public void ProjectInstanceTransfersToOOPNode()
  </PropertyGroup>
 <ItemGroup>
   <Foo Include='foo'/>
-  <Foo2 Include='foo2'/>    
+  <Foo2 Include='foo2'/>
 </ItemGroup>
- <Target Name='test'>   
+ <Target Name='test'>
    <Message Text='[$(DeleteMe)]'/>
    <Message Text='[$(Unmodified)]'/>
    <Message Text='[$(VirtualProp)]'/>
@@ -2242,7 +2268,7 @@ public void ProjectInstanceLimitedTransferToOOPNode()
    <Unmodified>unmodified</Unmodified>
    <VirtualProp>original</VirtualProp>
  </PropertyGroup>
- <Target Name='test'>   
+ <Target Name='test'>
    <Message Text='[$(Unmodified)]'/>
    <Message Text='[$(VirtualProp)]'/>
  </Target>
@@ -2293,7 +2319,7 @@ public void CacheLifetime()
                 {
                     innerBuildCacheDirectory = BuildAndCheckCache(innerBuildManager, new[] { outerBuildCacheDirectory });
 
-                    // Force the cache for this build manager (and only this build manager) to be cleared.  It should leave 
+                    // Force the cache for this build manager (and only this build manager) to be cleared.  It should leave
                     // behind the results from the other one.
                     innerBuildManager.ResetCaches();
                 }
@@ -2309,9 +2335,9 @@ public void CacheLifetime()
         }
 
         /// <summary>
-        /// If there's a P2P that otherwise succeeds, but has an AfterTarget that errors out, the 
+        /// If there's a P2P that otherwise succeeds, but has an AfterTarget that errors out, the
         /// overall build result -- and thus the return value of the MSBuild task -- should reflect
-        /// that failure. 
+        /// that failure.
         /// </summary>
         [Theory]
         [InlineData(false)]
@@ -2325,9 +2351,9 @@ public void FailedAfterTargetInP2PShouldCauseOverallBuildFailure(bool disableInP
 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
   <Target Name=`Build`>
     <MSBuild Projects=`" + projB + @"` />
- 
+
     <Warning Text=`We shouldn't reach here.` />
-  </Target>    
+  </Target>
 </Project>
 ";
 
@@ -2357,10 +2383,10 @@ public void FailedAfterTargetInP2PShouldCauseOverallBuildFailure(bool disableInP
         }
 
         /// <summary>
-        /// If there's a P2P that otherwise succeeds, but has an AfterTarget that errors out, the 
+        /// If there's a P2P that otherwise succeeds, but has an AfterTarget that errors out, the
         /// overall build result -- and thus the return value of the MSBuild task -- should reflect
-        /// that failure.  Specifically tests where there are multiple entrypoint targets with 
-        /// AfterTargets, only one of which fails. 
+        /// that failure.  Specifically tests where there are multiple entrypoint targets with
+        /// AfterTargets, only one of which fails.
         /// </summary>
         [Theory]
         [InlineData(false)]
@@ -2374,9 +2400,9 @@ public void FailedAfterTargetInP2PShouldCauseOverallBuildFailure_MultipleEntrypo
 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
   <Target Name=`Build`>
     <MSBuild Projects=`" + projB + @"` Targets=`Build;Build2` />
- 
+
     <Warning Text=`We shouldn't reach here.` />
-  </Target>    
+  </Target>
 </Project>
 ";
 
@@ -2423,9 +2449,9 @@ public void FailedAfterTargetInP2PShouldCauseOverallBuildFailure_MultipleEntrypo
         }
 
         /// <summary>
-        /// If there's a P2P that otherwise succeeds, but has an AfterTarget that errors out, the 
+        /// If there's a P2P that otherwise succeeds, but has an AfterTarget that errors out, the
         /// overall build result -- and thus the return value of the MSBuild task -- should reflect
-        /// that failure. This should also be true if the AfterTarget is an AfterTarget of the 
+        /// that failure. This should also be true if the AfterTarget is an AfterTarget of the
         /// entrypoint target.
         /// </summary>
         [Theory]
@@ -2440,9 +2466,9 @@ public void FailedNestedAfterTargetInP2PShouldCauseOverallBuildFailure(bool disa
 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
   <Target Name=`Build`>
     <MSBuild Projects=`" + projB + @"` />
- 
+
     <Warning Text=`We shouldn't reach here.` />
-  </Target>    
+  </Target>
 </Project>
 ";
 
@@ -2476,9 +2502,9 @@ public void FailedNestedAfterTargetInP2PShouldCauseOverallBuildFailure(bool disa
         }
 
         /// <summary>
-        /// If a project is called into twice, with two different entrypoint targets that 
-        /// depend on non-overlapping sets of targets, and the first fails, the second 
-        /// should not inherit that failure if all the targets it calls succeed. 
+        /// If a project is called into twice, with two different entrypoint targets that
+        /// depend on non-overlapping sets of targets, and the first fails, the second
+        /// should not inherit that failure if all the targets it calls succeed.
         /// </summary>
         [Fact]
         public void NonOverlappingEnusingTrypointTargetsShouldNotInfluenceEachOthersResults()
@@ -2489,7 +2515,7 @@ public void NonOverlappingEnusingTrypointTargetsShouldNotInfluenceEachOthersResu
             string contentsA = @"
 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
   <Target Name=`Build`>
-  
+
    <Message Text=`The next MSBuild call should FAIL, but the build will continue.` />
    <MSBuild Projects=`" + projB + @"` Targets=`Build` ContinueOnError=`true` />
    <Message Text=`The next MSBuild call should SUCCEED without error.` />
@@ -2503,8 +2529,8 @@ public void NonOverlappingEnusingTrypointTargetsShouldNotInfluenceEachOthersResu
   <Target Name=`Build`>
     <Error Text=`Forced error in Build` />
   </Target>
-  
-  
+
+
   <Target Name=`GetTargetPath`>
     <Message Text=`Success` />
   </Target>
@@ -2524,9 +2550,9 @@ public void NonOverlappingEnusingTrypointTargetsShouldNotInfluenceEachOthersResu
         }
 
         /// <summary>
-        /// In a situation where we have two requests calling into the same project, with different entry point 
-        /// targets, one of which depends on "A;B", the other of which depends on "B", which has a dependency of 
-        /// its own on "A", that we still properly build.  
+        /// In a situation where we have two requests calling into the same project, with different entry point
+        /// targets, one of which depends on "A;B", the other of which depends on "B", which has a dependency of
+        /// its own on "A", that we still properly build.
         /// </summary>
 #if RUNTIME_TYPE_NETCORE
         [Fact(Skip = "https://github.com/Microsoft/msbuild/issues/933")]
@@ -2545,7 +2571,7 @@ public void Regress473114()
             string contentsA = @"<?xml version='1.0' encoding='utf-8'?>
 <Project ToolsVersion='4.0' DefaultTargets='Build' xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>
   <ItemGroup>
-    <ProjectReference Include='" + projD + @"' /> 
+    <ProjectReference Include='" + projD + @"' />
     <ProjectReference Include='" + projC + @"' />
     <ProjectReference Include='" + projB + @"' />
   </ItemGroup>
@@ -2615,19 +2641,19 @@ public void Regress473114()
         }
 
         /// <summary>
-        /// If two requests are made for the same project, and they call in with 
-        /// just the right timing such that: 
+        /// If two requests are made for the same project, and they call in with
+        /// just the right timing such that:
         /// - request 1 builds for a while, reaches a P2P, and blocks
-        /// - request 2 starts building, skips for a while, reaches the above P2P, and 
-        ///   blocks waiting for request 1's results 
+        /// - request 2 starts building, skips for a while, reaches the above P2P, and
+        ///   blocks waiting for request 1's results
         /// - request 1 resumes building, errors, and exits
         /// - request 2 resumes building
-        /// 
-        /// Then request 2 should end up exiting in the same fashion.  
-        /// 
-        /// This simple test verifies that if there are two error targets in a row, the 
-        /// second request will bail out where the first request did, as though it had 
-        /// executed the target, rather than skipping and continuing. 
+        ///
+        /// Then request 2 should end up exiting in the same fashion.
+        ///
+        /// This simple test verifies that if there are two error targets in a row, the
+        /// second request will bail out where the first request did, as though it had
+        /// executed the target, rather than skipping and continuing.
         /// </summary>
 #if MONO
         [Fact(Skip = "https://github.com/Microsoft/msbuild/issues/1240")]
@@ -2704,9 +2730,9 @@ public void VerifyMultipleRequestForSameProjectWithErrors_Simple()
         ///   blocks waiting for request 1's results
         /// - request 1 resumes building, errors, and exits
         /// - request 2 resumes building
-        /// 
+        ///
         /// Then request 2 should end up exiting in the same fashion.
-        /// 
+        ///
         /// This simple test verifies that if there are two error targets in a row, and the
         /// first has a chain of OnError targets, the OnError targets will all execute as
         /// expected in the first request, but be skipped by the second (since if it's "skipping
@@ -2824,9 +2850,9 @@ public void VerifyMultipleRequestForSameProjectWithErrors_OnErrorChain()
         ///   blocks waiting for request 1's results
         /// - request 1 resumes building, errors, and exits
         /// - request 2 resumes building
-        /// 
+        ///
         /// Then request 2 should end up exiting in the same fashion.
-        /// 
+        ///
         /// This simple test verifies that if there are two error targets in a row, AND
         /// they're marked as ContinueOnError=ErrorAndContinue, then we won't bail, but
         /// will continue executing (on the first request) or skipping (on the second)
@@ -2908,18 +2934,18 @@ public void VerifyMultipleRequestForSameProjectWithErrors_ErrorAndContinue()
         }
 
         /// <summary>
-        /// If two requests are made for the same project, and they call in with 
-        /// just the right timing such that: 
+        /// If two requests are made for the same project, and they call in with
+        /// just the right timing such that:
         /// - request 1 builds for a while, reaches a P2P, and blocks
-        /// - request 2 starts building, skips for a while, reaches the above P2P, and 
-        ///   blocks waiting for request 1's results 
+        /// - request 2 starts building, skips for a while, reaches the above P2P, and
+        ///   blocks waiting for request 1's results
         /// - request 1 resumes building, errors, and exits
         /// - request 2 resumes building
-        /// 
-        /// Then request 2 should end up exiting in the same fashion.  
-        /// 
-        /// This test verifies that if the errors are in AfterTargets, we still 
-        /// exit as though the target that those targets run after has already run. 
+        ///
+        /// Then request 2 should end up exiting in the same fashion.
+        ///
+        /// This test verifies that if the errors are in AfterTargets, we still
+        /// exit as though the target that those targets run after has already run.
         /// </summary>
 #if MONO
         [Fact(Skip = "https://github.com/Microsoft/msbuild/issues/1240")]
@@ -2989,10 +3015,10 @@ public void VerifyMultipleRequestForSameProjectWithErrors_AfterTargets()
         }
 
         /// <summary>
-        /// Related to the two tests above, if two requests are made for the same project, but 
-        /// for different entry targets, and a target fails in the first request, if the second 
-        /// request also runs that target, its skip-unsuccessful should behave in the same 
-        /// way as if the target had actually errored. 
+        /// Related to the two tests above, if two requests are made for the same project, but
+        /// for different entry targets, and a target fails in the first request, if the second
+        /// request also runs that target, its skip-unsuccessful should behave in the same
+        /// way as if the target had actually errored.
         /// </summary>
         [Fact]
         public void VerifyMultipleRequestForSameProjectWithErrors_DifferentEntrypoints()
@@ -3002,7 +3028,7 @@ public void VerifyMultipleRequestForSameProjectWithErrors_DifferentEntrypoints()
 
             string contentsA = @"
 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
-  <ItemGroup> 
+  <ItemGroup>
     <PR Include=`" + projB + @"`>
       <Targets>Build</Targets>
     </PR>
@@ -3119,7 +3145,7 @@ public void TestSimultaneousSubmissionsWithLegacyThreadingData()
         }
 
         /// <summary>
-        /// Verify that we can submit multiple simultaneous submissions with 
+        /// Verify that we can submit multiple simultaneous submissions with
         /// legacy threading mode active and successfully build, and that one of those
         /// submissions can P2P to the other.
         /// </summary>
@@ -3200,12 +3226,12 @@ public void TestSimultaneousSubmissionsWithLegacyThreadingData_P2P()
         }
 
         /// <summary>
-        /// Verify that we can submit multiple simultaneous submissions with 
+        /// Verify that we can submit multiple simultaneous submissions with
         /// legacy threading mode active and successfully build, and that one of those
         /// submissions can P2P to the other.
-        /// 
-        /// A variation of the above test, where multiple nodes are available, so the 
-        /// submissions aren't restricted to running strictly serially by the single in-proc 
+        ///
+        /// A variation of the above test, where multiple nodes are available, so the
+        /// submissions aren't restricted to running strictly serially by the single in-proc
         /// node.
         /// </summary>
 #if MONO
@@ -3308,7 +3334,7 @@ public void Regress265010()
 <ItemGroup>
   <Item Include='BaseItem'/>
 </ItemGroup>
- <Target Name='BaseTest'>   
+ <Target Name='BaseTest'>
    <Message Text='[$(Prop)]'/>
    <Message Text='[@(Item)]'/>
     <PropertyGroup>
@@ -3319,7 +3345,7 @@ public void Regress265010()
     </ItemGroup>
  </Target>
 
- <Target Name='MovedTest'>   
+ <Target Name='MovedTest'>
    <Message Text='[$(Prop)]'/>
    <Message Text='[@(Item)]'/>
  </Target>
@@ -3452,13 +3478,13 @@ private static string BuildAndCheckCache(BuildManager localBuildManager, IEnumer
         {
             string contents = CleanupFileContents(@"
 <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
- <Target Name='One' Outputs='one.txt'>   
+ <Target Name='One' Outputs='one.txt'>
  </Target>
 
- <Target Name='Two' Outputs='two.txt'>   
+ <Target Name='Two' Outputs='two.txt'>
  </Target>
 
- <Target Name='Three' Outputs='three.txt'>   
+ <Target Name='Three' Outputs='three.txt'>
  </Target>
 </Project>
 ");
@@ -3580,8 +3606,8 @@ private static ProjectInstance GenerateDummyProjects(string shutdownProjectDirec
             Directory.CreateDirectory(shutdownProjectDirectory);
 
             // Generate the project.  It will have the following format.  Setting the AdditionalProperties
-            // causes the projects to be built to be separate configs, which allows us to build the same project 
-            // a bunch of times in parallel.  
+            // causes the projects to be built to be separate configs, which allows us to build the same project
+            // a bunch of times in parallel.
             //
             // <Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'/>
             //   <ItemGroup>
@@ -3934,7 +3960,7 @@ public void OutOfProcEvaluationIdsUnique()
         /// Regression test for https://github.com/Microsoft/msbuild/issues/3047
         /// </summary>
         [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Mono, "out-of-proc nodes not working on mono yet")]
+        [SkipOnMono("out-of-proc nodes not working on mono yet")]
         public void MultiProcReentrantProjectWithCallTargetDoesNotFail()
         {
             var a =
@@ -4317,5 +4343,52 @@ public void GraphBuildShouldBeAbleToConstructGraphButSkipBuild()
             logger.FullLog.ShouldContain("Static graph loaded in");
             logger.FullLog.ShouldContain("3 nodes, 2 edges");
         }
+
+        /// <summary>
+        /// Helper task used by <see cref="TaskInputLoggingIsExposedToTasks"/> to verify <see cref="TaskLoggingHelper.IsTaskInputLoggingEnabled"/>.
+        /// </summary>
+        public class LogTaskInputsCheckingTask : Task
+        {
+            public bool ExpectedTaskInputLoggingEnabled { get; set; }
+
+            public override bool Execute()
+            {
+                return Log.IsTaskInputLoggingEnabled == ExpectedTaskInputLoggingEnabled;
+            }
+        }
+
+        [Theory]
+        [InlineData("", false)] // regular task host, input logging disabled
+        [InlineData("", true)] // regular task host, input logging enabled
+#if NETFRAMEWORK // https://github.com/microsoft/msbuild/issues/5158
+        [InlineData("TaskHostFactory", false)] // OOP task host, input logging disabled
+        [InlineData("TaskHostFactory", true)] // OOP task host, input logging enabled
+#endif
+        public void TaskInputLoggingIsExposedToTasks(string taskFactory, bool taskInputLoggingEnabled)
+        {
+            string projectContents = ObjectModelHelpers.CleanupFileContents(@"<Project>
+
+  <UsingTask
+    TaskName=""" + typeof(LogTaskInputsCheckingTask).FullName + @"""
+    AssemblyFile=""" + Assembly.GetExecutingAssembly().Location + @"""
+    TaskFactory=""" + taskFactory + @"""
+  />
+
+  <Target Name=""target1"">
+    <LogTaskInputsCheckingTask ExpectedTaskInputLoggingEnabled=""" + taskInputLoggingEnabled + @""" />
+  </Target>
+
+</Project>");
+
+            _parameters.LogTaskInputs = taskInputLoggingEnabled;
+
+            Project project = CreateProject(projectContents, MSBuildDefaultToolsVersion, _projectCollection, true);
+            ProjectInstance instance = _buildManager.GetProjectInstanceForBuild(project);
+            _buildManager.BeginBuild(_parameters);
+            BuildResult result = _buildManager.BuildRequest(new BuildRequestData(instance, new[] { "target1" }));
+            _buildManager.EndBuild();
+
+            Assert.Equal(BuildResultCode.Success, result.OverallResult);
+        }
     }
 }
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
index 085f3488877..eb37f60b029 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
@@ -259,6 +259,51 @@ public void TestTranslation()
             Assert.Equal(config, deserializedConfig);
         }
 
+        [Fact]
+        public void TestTranslationWithEntireProjectState()
+        {
+            string projectBody = ObjectModelHelpers.CleanupFileContents(@"
+<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
+<PropertyGroup>
+    <One>1</One>
+    <Two>2</Two>
+    <Three>$(ThreeIn)</Three>
+</PropertyGroup>
+<Target Name='Build'>
+    <CallTarget Targets='Foo'/>
+</Target>
+</Project>");
+
+            Dictionary<string, string> globalProperties = new (StringComparer.OrdinalIgnoreCase);
+            globalProperties["ThreeIn"] = "3";
+
+            Project project = new Project(
+                XmlReader.Create(new StringReader(projectBody)),
+                globalProperties,
+                ObjectModelHelpers.MSBuildDefaultToolsVersion,
+                new ProjectCollection());
+            project.FullPath = "foo";
+            ProjectInstance instance = project.CreateProjectInstance();
+
+            instance.TranslateEntireState = true;
+
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, new string[] { }, null), "2.0");
+            configuration.ConfigurationId = 1;
+
+            ((ITranslatable)configuration).Translate(TranslationHelpers.GetWriteTranslator());
+            INodePacket packet = BuildRequestConfiguration.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
+
+            BuildRequestConfiguration deserializedConfig = packet as BuildRequestConfiguration;
+
+            deserializedConfig.ShouldNotBeNull();
+            deserializedConfig.ShouldBe(configuration);
+            deserializedConfig.Project.ShouldNotBeNull();
+
+            // Verify that at least some data from 'entire project state' has been deserialized.
+            deserializedConfig.Project.Directory.ShouldNotBeEmpty();
+            deserializedConfig.Project.Directory.ShouldBe(configuration.Project.Directory);
+        }
+
         [Fact]
         public void TestProperties()
         {
diff --git a/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
index 75e018b7cdc..9cede0f7298 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
@@ -138,7 +138,7 @@ public void TestTranslation()
 
 #if FEATURE_COM_INTEROP
         [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Mono, "disable com tests on mono")]
+        [SkipOnMono("disable com tests on mono")]
         public void TestTranslationRemoteHostObjects()
         {
             var stateInHostObject = 3;
diff --git a/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs b/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
new file mode 100644
index 00000000000..07c9c392b41
--- /dev/null
+++ b/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
@@ -0,0 +1,38 @@
+Ôªø// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.IO;
+using System.Linq;
+using Microsoft.Build.Shared;
+using Shouldly;
+using Xunit;
+
+namespace Microsoft.Build.UnitTests
+{
+    public class DebugUtils_Tests
+    {
+        [Fact]
+        public void DumpExceptionToFileShouldWriteInTempPathByDefault()
+        {
+            Directory.GetFiles(Path.GetTempPath(), "MSBuild_*failure.txt").ShouldBeEmpty();
+
+            string[] exceptionFiles = null;
+
+            try
+            {
+                ExceptionHandling.DumpExceptionToFile(new Exception("hello world"));
+                exceptionFiles = Directory.GetFiles(Path.GetTempPath(), "MSBuild_*failure.txt");
+            }
+            finally
+            {
+                exceptionFiles.ShouldNotBeNull();
+                exceptionFiles.ShouldHaveSingleItem();
+
+                var exceptionFile = exceptionFiles.First();
+                File.ReadAllText(exceptionFile).ShouldContain("hello world");
+                File.Delete(exceptionFile);
+            }
+        }
+    }
+}
diff --git a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
index 9a485cb0d49..4d84c33b60f 100644
--- a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
@@ -665,6 +665,11 @@ public void Properties()
             Assert.Equal(1, loggingService.MaxCPUCount);
             loggingService.MaxCPUCount = 5;
             Assert.Equal(5, loggingService.MaxCPUCount);
+
+            // Test MinimumRequiredMessageImportance
+            Assert.Equal(MessageImportance.Low, loggingService.MinimumRequiredMessageImportance);
+            loggingService.RegisterLogger(new ConsoleLogger(LoggerVerbosity.Normal));
+            Assert.Equal(MessageImportance.Normal, loggingService.MinimumRequiredMessageImportance);
         }
 
         #endregion
@@ -718,6 +723,8 @@ public void LoggingPacketReceived()
 
         #endregion
 
+        #region WarningsAsErrors Tests
+
         private static readonly BuildWarningEventArgs BuildWarningEventForTreatAsErrorOrMessageTests = new BuildWarningEventArgs("subcategory", "C94A41A90FFB4EF592BF98BA59BEE8AF", "file", 1, 2, 3, 4, "message", "helpKeyword", "senderName");
 
         /// <summary>
@@ -1000,6 +1007,76 @@ private MockLogger GetLoggedEventsWithWarningsAsErrorsOrMessages(
             return logger;
         }
 
+        #endregion
+
+        #region MinimumRequiredMessageImportance Tests
+
+        [Fact]
+        public void ImportanceReflectsConsoleLoggerVerbosity()
+        {
+            _initializedService.RegisterLogger(new ConsoleLogger(LoggerVerbosity.Quiet));
+            _initializedService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.High - 1);
+            _initializedService.RegisterLogger(new ConsoleLogger(LoggerVerbosity.Minimal));
+            _initializedService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.High);
+            _initializedService.RegisterLogger(new ConsoleLogger(LoggerVerbosity.Normal));
+            _initializedService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.Normal);
+            _initializedService.RegisterLogger(new ConsoleLogger(LoggerVerbosity.Detailed));
+            _initializedService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.Low);
+            _initializedService.RegisterLogger(new ConsoleLogger(LoggerVerbosity.Diagnostic));
+            _initializedService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.Low);
+        }
+
+        [Fact]
+        public void ImportanceReflectsConfigurableForwardingLoggerVerbosity()
+        {
+            _initializedService.RegisterLogger(CreateConfigurableForwardingLogger(LoggerVerbosity.Quiet));
+            _initializedService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.High - 1);
+            _initializedService.RegisterLogger(CreateConfigurableForwardingLogger(LoggerVerbosity.Minimal));
+            _initializedService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.High);
+            _initializedService.RegisterLogger(CreateConfigurableForwardingLogger(LoggerVerbosity.Normal));
+            _initializedService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.Normal);
+            _initializedService.RegisterLogger(CreateConfigurableForwardingLogger(LoggerVerbosity.Detailed));
+            _initializedService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.Low);
+            _initializedService.RegisterLogger(CreateConfigurableForwardingLogger(LoggerVerbosity.Diagnostic));
+            _initializedService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.Low);
+        }
+
+        [Fact]
+        public void ImportanceReflectsCentralForwardingLoggerVerbosity()
+        {
+            MockHost mockHost = new MockHost();
+            ILoggingService node1LoggingService = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
+            ((IBuildComponent)node1LoggingService).InitializeComponent(mockHost);
+            ILoggingService node2LoggingService = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 2);
+            ((IBuildComponent)node2LoggingService).InitializeComponent(mockHost);
+
+            // CentralForwardingLogger is always registered in in-proc nodes and it does not affect minimum importance.
+            node1LoggingService.RegisterLogger(CreateConfigurableForwardingLogger(LoggerVerbosity.Minimal));
+            node1LoggingService.RegisterLogger(new CentralForwardingLogger());
+            node1LoggingService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.High);
+
+            // CentralForwardingLogger in out-of-proc nodes means that we are forwarding everything and the minimum importance
+            // is Low regardless of what other loggers are registered.
+            node2LoggingService.RegisterLogger(CreateConfigurableForwardingLogger(LoggerVerbosity.Minimal));
+            node2LoggingService.RegisterLogger(new CentralForwardingLogger());
+            node2LoggingService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.Low);
+            // Register another ConsoleLogger and verify that minimum importance hasn't changed.
+            node2LoggingService.RegisterLogger(CreateConfigurableForwardingLogger(LoggerVerbosity.Minimal));
+            node2LoggingService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.Low);
+        }
+
+        [Fact]
+        public void ImportanceReflectsUnknownLoggerVerbosity()
+        {
+            // Minimum message importance is Low (i.e. we're logging everything) even when all registered loggers have
+            // Normal verbosity if at least of one them is not on our whitelist.
+            _initializedService.RegisterLogger(new ConsoleLogger(LoggerVerbosity.Normal));
+            _initializedService.RegisterLogger(new MockLogger() { Verbosity = LoggerVerbosity.Normal });
+            _initializedService.RegisterLogger(CreateConfigurableForwardingLogger(LoggerVerbosity.Normal));
+            _initializedService.MinimumRequiredMessageImportance.ShouldBe(MessageImportance.Low);
+        }
+        #endregion
+
         #region PrivateMethods
 
         /// <summary>
@@ -1084,6 +1161,17 @@ private LoggerDescription CreateLoggerDescription(string loggerClassName, string
                                                                              );
             return centralLoggerDescrption;
         }
+
+        /// <summary>
+        /// Creates a new <see cref="ConfigurableForwardingLogger"/> with the given verbosity.
+        /// </summary>
+        private ConfigurableForwardingLogger CreateConfigurableForwardingLogger(LoggerVerbosity verbosity)
+        {
+            return new ConfigurableForwardingLogger()
+            {
+                Verbosity = verbosity
+            };
+        }
         #endregion
 
         #region HelperClasses
diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index d428e3fdac6..2d4ed73b93d 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -223,6 +223,11 @@ public bool IncludeTaskInputs
             set { }
         }
 
+        public MessageImportance MinimumRequiredMessageImportance
+        {
+            get => MessageImportance.Low;
+        }
+
         public void AddWarningsAsMessages(BuildEventContext buildEventContext, ISet<string> codes)
         {
             throw new NotImplementedException();
@@ -553,7 +558,7 @@ public void LogTaskStarted(BuildEventContext targetBuildEventContext, string tas
         /// <param name="projectFile">The project file</param>
         /// <param name="projectFileOfTaskNode">The project file containing the task node.</param>
         /// <returns>The task logging context</returns>
-        public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode)
+        public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, int line, int column)
         {
             return new BuildEventContext(0, 0, 0, 0);
         }
diff --git a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
index a3137f5b399..78d73604056 100644
--- a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
@@ -52,6 +52,7 @@ public void VerifyEventType()
             BuildErrorEventArgs error = new BuildErrorEventArgs("SubCategoryForSchemaValidationErrors", "MSB4000", "file", 1, 2, 3, 4, "message", "help", "sender");
             TargetStartedEventArgs targetStarted = new TargetStartedEventArgs("message", "help", "targetName", "ProjectFile", "targetFile");
             TargetFinishedEventArgs targetFinished = new TargetFinishedEventArgs("message", "help", "targetName", "ProjectFile", "targetFile", true);
+            TargetSkippedEventArgs targetSkipped = CreateTargetSkipped();
             ProjectStartedEventArgs projectStarted = new ProjectStartedEventArgs(-1, "message", "help", "ProjectFile", "targetNames", null, null, null);
             ProjectFinishedEventArgs projectFinished = new ProjectFinishedEventArgs("message", "help", "ProjectFile", true);
             ExternalProjectStartedEventArgs externalStartedEvent = new ExternalProjectStartedEventArgs("message", "help", "senderName", "projectFile", "targetNames");
@@ -69,6 +70,7 @@ public void VerifyEventType()
             VerifyLoggingPacket(error, LoggingEventType.BuildErrorEvent);
             VerifyLoggingPacket(targetStarted, LoggingEventType.TargetStartedEvent);
             VerifyLoggingPacket(targetFinished, LoggingEventType.TargetFinishedEvent);
+            VerifyLoggingPacket(targetSkipped, LoggingEventType.TargetSkipped);
             VerifyLoggingPacket(projectStarted, LoggingEventType.ProjectStartedEvent);
             VerifyLoggingPacket(projectFinished, LoggingEventType.ProjectFinishedEvent);
             VerifyLoggingPacket(evaluationStarted, LoggingEventType.ProjectEvaluationStartedEvent);
@@ -158,6 +160,8 @@ private static TaskParameterEventArgs CreateTaskParameter()
                 items,
                 logItemMetadata: true,
                 DateTime.MinValue);
+            result.LineNumber = 30000;
+            result.ColumnNumber = 50;
 
             // normalize line endings as we can't rely on the line endings of NodePackets_Tests.cs
             Assert.Equal(@"Task Parameter:
@@ -174,6 +178,26 @@ private static TaskParameterEventArgs CreateTaskParameter()
             return result;
         }
 
+        private static TargetSkippedEventArgs CreateTargetSkipped()
+        {
+            var result = new TargetSkippedEventArgs(message: null)
+            {
+                BuildReason = TargetBuiltReason.DependsOn,
+                SkipReason = TargetSkipReason.PreviouslyBuiltSuccessfully,
+                BuildEventContext = CreateBuildEventContext(),
+                OriginalBuildEventContext = CreateBuildEventContext(),
+                Condition = "$(Condition) == 'true'",
+                EvaluatedCondition = "'true' == 'true'",
+                Importance = MessageImportance.Normal,
+                OriginallySucceeded = true,
+                ProjectFile = "1.proj",
+                TargetFile = "1.proj",
+                TargetName = "Build",
+                ParentTarget = "ParentTarget"
+            };
+            return result;
+        }
+
         /// <summary>
         /// Tests serialization of LogMessagePacket with each kind of event type.
         /// </summary>
@@ -195,7 +219,11 @@ public void TestTranslation()
                     new BuildFinishedEventArgs("Message", "Keyword", true),
                     new BuildStartedEventArgs("Message", "Help"),
                     new BuildMessageEventArgs("Message", "help", "sender", MessageImportance.Low),
-                    new TaskStartedEventArgs("message", "help", "projectFile", "taskFile", "taskName"),
+                    new TaskStartedEventArgs("message", "help", "projectFile", "taskFile", "taskName")
+                    {
+                        LineNumber = 345,
+                        ColumnNumber = 123
+                    },
                     new TaskFinishedEventArgs("message", "help", "projectFile", "taskFile", "taskName", true),
                     new TaskCommandLineEventArgs("commandLine", "taskName", MessageImportance.Low),
                     CreateTaskParameter(),
@@ -207,7 +235,8 @@ public void TestTranslation()
                     new ProjectFinishedEventArgs("message", "help", "ProjectFile", true),
                     new ExternalProjectStartedEventArgs("message", "help", "senderName", "projectFile", "targetNames"),
                     CreateProjectEvaluationStarted(),
-                    CreateProjectEvaluationFinished()
+                    CreateProjectEvaluationFinished(),
+                    CreateTargetSkipped()
                 };
 
                 foreach (BuildEventArgs arg in testArgs)
@@ -412,6 +441,23 @@ private void CompareLogMessagePackets(LogMessagePacket left, LogMessagePacket ri
                     Assert.Equal(leftTargetStarted.TargetName, rightTargetStarted.TargetName);
                     break;
 
+                case LoggingEventType.TargetSkipped:
+                    TargetSkippedEventArgs leftTargetSkipped = left.NodeBuildEvent.Value.Value as TargetSkippedEventArgs;
+                    TargetSkippedEventArgs rightTargetSkipped = right.NodeBuildEvent.Value.Value as TargetSkippedEventArgs;
+                    Assert.Equal(leftTargetSkipped.BuildReason, rightTargetSkipped.BuildReason);
+                    Assert.Equal(leftTargetSkipped.SkipReason, rightTargetSkipped.SkipReason);
+                    Assert.Equal(leftTargetSkipped.BuildEventContext, rightTargetSkipped.BuildEventContext);
+                    Assert.Equal(leftTargetSkipped.OriginalBuildEventContext, rightTargetSkipped.OriginalBuildEventContext);
+                    Assert.Equal(leftTargetSkipped.Condition, rightTargetSkipped.Condition);
+                    Assert.Equal(leftTargetSkipped.EvaluatedCondition, rightTargetSkipped.EvaluatedCondition);
+                    Assert.Equal(leftTargetSkipped.Importance, rightTargetSkipped.Importance);
+                    Assert.Equal(leftTargetSkipped.OriginallySucceeded, rightTargetSkipped.OriginallySucceeded);
+                    Assert.Equal(leftTargetSkipped.ProjectFile, rightTargetSkipped.ProjectFile);
+                    Assert.Equal(leftTargetSkipped.TargetFile, rightTargetSkipped.TargetFile);
+                    Assert.Equal(leftTargetSkipped.TargetName, rightTargetSkipped.TargetName);
+                    Assert.Equal(leftTargetSkipped.ParentTarget, rightTargetSkipped.ParentTarget);
+                    break;
+
                 case LoggingEventType.TaskCommandLineEvent:
                     TaskCommandLineEventArgs leftCommand = left.NodeBuildEvent.Value.Value as TaskCommandLineEventArgs;
                     TaskCommandLineEventArgs rightCommand = right.NodeBuildEvent.Value.Value as TaskCommandLineEventArgs;
@@ -433,6 +479,8 @@ private void CompareLogMessagePackets(LogMessagePacket left, LogMessagePacket ri
                     Assert.Equal(leftTaskParameter.Message, rightTaskParameter.Message);
                     Assert.Equal(leftTaskParameter.BuildEventContext, rightTaskParameter.BuildEventContext);
                     Assert.Equal(leftTaskParameter.Timestamp, rightTaskParameter.Timestamp);
+                    Assert.Equal(leftTaskParameter.LineNumber, rightTaskParameter.LineNumber);
+                    Assert.Equal(leftTaskParameter.ColumnNumber, rightTaskParameter.ColumnNumber);
                     break;
 
                 case LoggingEventType.TaskFinishedEvent:
@@ -454,6 +502,8 @@ private void CompareLogMessagePackets(LogMessagePacket left, LogMessagePacket ri
                     Assert.Equal(leftTaskStarted.ProjectFile, rightTaskStarted.ProjectFile);
                     Assert.Equal(leftTaskStarted.TaskFile, rightTaskStarted.TaskFile);
                     Assert.Equal(leftTaskStarted.TaskName, rightTaskStarted.TaskName);
+                    Assert.Equal(leftTaskStarted.LineNumber, rightTaskStarted.LineNumber);
+                    Assert.Equal(leftTaskStarted.ColumnNumber, rightTaskStarted.ColumnNumber);
                     break;
 
                 default:
diff --git a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
index 80a98eb8112..ddb926d7d7b 100644
--- a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
@@ -498,6 +498,14 @@ public void TestMaxNodeCountNodesNotExceededWithSomeOOPRequests2()
             Assert.Equal(2, response[1].NumberOfNodesToCreate);
         }
 
+        [Fact]
+        public void SchedulerShouldHonorDisableInprocNode()
+        {
+            var s = new Scheduler();
+            s.InitializeComponent(new MockHost(new BuildParameters {DisableInProcNode = true}));
+            s.ForceAffinityOutOfProc.ShouldBeTrue();
+        }
+
         /// <summary>
         /// Make sure that traversal projects are marked with an affinity of "InProc", which means that
         /// even if multiple are available, we should still only have the single inproc node.
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index c90d6e8a60c..cbfd97c5f83 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -85,16 +85,16 @@ public void AssertResolutionWarnsIfResolvedVersionIsDifferentFromReferencedVersi
         }
 
         [Fact]
-        public void AssertErrorLoggedWhenResolverThrows()
+        public void AssertResolverThrows()
         {
             SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeErrorResolver: true));
 
             SdkReference sdk = new SdkReference("1sdkName", "version1", "minimumVersion");
 
-            var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false);
-
-            result.Path.ShouldBe("resolverpath1");
-            _logger.Warnings.Select(i => i.Message).ShouldBe(new [] { "The SDK resolver \"MockSdkResolverThrows\" failed to run. EXMESSAGE" });
+            // When an SDK resolver throws, the expander will catch it and stop the build.
+            SdkResolverException e = Should.Throw<SdkResolverException>(() => SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false));
+            e.Resolver.Name.ShouldBe("MockSdkResolverThrows");
+            e.Sdk.Name.ShouldBe("1sdkName");
         }
 
         [Fact]
diff --git a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
index 346da6846b9..67950cf5716 100644
--- a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
@@ -89,8 +89,12 @@ public void TestTranslationNoException()
         {
             TaskItem item = new TaskItem("foo", "bar.proj");
             item.SetMetadata("a", "b");
+            var buildEventContext = new Framework.BuildEventContext(1, 2, 3, 4, 5, 6, 7);
 
-            TargetResult result = new TargetResult(new TaskItem[] { item }, BuildResultUtilities.GetStopWithErrorResult());
+            TargetResult result = new TargetResult(
+                new TaskItem[] { item },
+                BuildResultUtilities.GetStopWithErrorResult(),
+                buildEventContext);
 
             ((ITranslatable)result).Translate(TranslationHelpers.GetWriteTranslator());
             TargetResult deserializedResult = TargetResult.FactoryForDeserialization(TranslationHelpers.GetReadTranslator());
@@ -98,6 +102,7 @@ public void TestTranslationNoException()
             Assert.Equal(result.ResultCode, deserializedResult.ResultCode);
             Assert.True(TranslationHelpers.CompareCollections(result.Items, deserializedResult.Items, TaskItemComparer.Instance));
             Assert.True(TranslationHelpers.CompareExceptions(result.Exception, deserializedResult.Exception));
+            Assert.Equal(result.OriginalBuildEventContext, deserializedResult.OriginalBuildEventContext);
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
index 2520bc41bb6..486352af3f2 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
@@ -589,7 +589,7 @@ public void NullMetadataOnOutputItems_InlineTask()
         /// <summary>
         /// If an item being output from a task has null metadata, we shouldn't crash.
         /// </summary>
-        [Fact]
+        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/6521")]
         [Trait("Category", "non-mono-tests")]
         public void NullMetadataOnLegacyOutputItems_InlineTask()
         {
diff --git a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
index 144f30bea1a..94c7c23f23d 100644
--- a/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHostConfiguration_Tests.cs
@@ -55,6 +55,7 @@ public void ConstructorWithNullName()
                     continueOnError: _continueOnErrorDefault,
                     taskName: null,
                     taskLocation: @"c:\my tasks\mytask.dll",
+                    isTaskInputLoggingEnabled: false,
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
@@ -89,6 +90,7 @@ public void ConstructorWithEmptyName()
                     continueOnError: _continueOnErrorDefault,
                     taskName: String.Empty,
                     taskLocation: @"c:\my tasks\mytask.dll",
+                    isTaskInputLoggingEnabled: false,
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
@@ -123,6 +125,7 @@ public void ConstructorWithNullLocation()
                     continueOnError: _continueOnErrorDefault,
                     taskName: "TaskName",
                     taskLocation: null,
+                    isTaskInputLoggingEnabled: false,
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
@@ -159,6 +162,7 @@ public void ConstructorWithEmptyLocation()
                     continueOnError: _continueOnErrorDefault,
                     taskName: "TaskName",
                     taskLocation: String.Empty,
+                    isTaskInputLoggingEnabled: false,
                     taskParameters: null,
                     globalParameters: null,
                     warningsAsErrors: null,
@@ -193,6 +197,7 @@ public void TestValidConstructors()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -217,6 +222,7 @@ public void TestValidConstructors()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -242,6 +248,7 @@ public void TestValidConstructors()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -272,6 +279,7 @@ public void TestValidConstructors()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: parameters2,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -302,6 +310,7 @@ public void TestValidConstructors()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: parameters2,
                 globalParameters: null,
                 warningsAsErrors: WarningsAsErrors,
@@ -339,6 +348,7 @@ public void TestTranslationWithNullDictionary()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: null,
                 globalParameters: expectedGlobalProperties,
                 warningsAsErrors: null,
@@ -383,6 +393,7 @@ public void TestTranslationWithEmptyDictionary()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: new Dictionary<string, object>(),
                 globalParameters: new Dictionary<string, string>(),
                 warningsAsErrors: null,
@@ -432,6 +443,7 @@ public void TestTranslationWithValueTypesInDictionary()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -479,6 +491,7 @@ public void TestTranslationWithITaskItemInDictionary()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -525,6 +538,7 @@ public void TestTranslationWithITaskItemArrayInDictionary()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: parameters,
                 globalParameters: null,
                 warningsAsErrors: null,
@@ -578,6 +592,7 @@ public void TestTranslationWithWarningsAsErrors()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: WarningsAsErrors,
@@ -627,6 +642,7 @@ public void TestTranslationWithWarningsAsMessages()
                 continueOnError: _continueOnErrorDefault,
                 taskName: "TaskName",
                 taskLocation: @"c:\MyTasks\MyTask.dll",
+                isTaskInputLoggingEnabled: false,
                 taskParameters: null,
                 globalParameters: null,
                 warningsAsErrors: null,
diff --git a/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs b/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs
index 8382f53d95d..c6f59eea74f 100644
--- a/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs
+++ b/src/Build.UnitTests/BuildEnvironmentHelper_Tests.cs
@@ -57,51 +57,14 @@ public void FindBuildEnvironmentByEnvironmentVariable()
         /// If MSBUILD_EXE_PATH is explicitly set, we should detect it as a VisualStudio instance even in older scenarios
         /// (for example when the install path is under 15.0).
         /// </summary>
-        /// <param name="is64BitMSbuild">When true, run the test pointing to amd64 msbuild.exe.</param>
-        [Theory]
-        [InlineData(true)]
-        [InlineData(false)]
+        [Fact]
         [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
         [PlatformSpecific(TestPlatforms.Windows)]
-        public void FindVisualStudioEnvironmentByEnvironmentVariable(bool is64BitMSbuild)
+        public void FindVisualStudioEnvironmentByEnvironmentVariable()
         {
             using (var env = new EmptyVSEnviroment())
             {
-                var msbuildBinDirectory = is64BitMSbuild
-                    ? Path.Combine(env.BuildDirectory, "amd64")
-                    : env.BuildDirectory;
-
-                var msBuildPath = Path.Combine(msbuildBinDirectory, MSBuildExeName);
-                var msBuildConfig = Path.Combine(msbuildBinDirectory, $"{MSBuildExeName}.config");
-                var vsMSBuildDirectory = Path.Combine(env.TempFolderRoot, "MSBuild");
-
-                env.WithEnvironment("MSBUILD_EXE_PATH", msBuildPath);
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly(ReturnNull, ReturnNull, ReturnNull, env.VsInstanceMock, env.EnvironmentMock, () => false);
-
-                BuildEnvironmentHelper.Instance.Mode.ShouldBe(BuildEnvironmentMode.VisualStudio);
-                BuildEnvironmentHelper.Instance.MSBuildExtensionsPath.ShouldBe(vsMSBuildDirectory);
-                BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory.ShouldBe(msbuildBinDirectory);
-                BuildEnvironmentHelper.Instance.CurrentMSBuildExePath.ShouldBe(msBuildPath);
-                BuildEnvironmentHelper.Instance.CurrentMSBuildConfigurationFile.ShouldBe(msBuildConfig);
-                // This code is not running inside the Visual Studio devenv.exe process
-                BuildEnvironmentHelper.Instance.RunningInVisualStudio.ShouldBeFalse();
-                BuildEnvironmentHelper.Instance.VisualStudioInstallRootDirectory.ShouldBe(env.TempFolderRoot);
-                BuildEnvironmentHelper.Instance.RunningTests.ShouldBeFalse();
-            }
-        }
-
-        [Theory]
-        [InlineData(true)]
-        [InlineData(false)]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
-        [PlatformSpecific(TestPlatforms.Windows)]
-        public void FindOlderVisualStudioEnvironmentByEnvironmentVariable(bool is64BitMSbuild)
-        {
-            using (var env = new EmptyVSEnviroment("15.0"))
-            {
-                var msbuildBinDirectory = is64BitMSbuild
-                    ? Path.Combine(env.BuildDirectory, "amd64")
-                    : env.BuildDirectory;
+                var msbuildBinDirectory = env.BuildDirectory;
 
                 var msBuildPath = Path.Combine(msbuildBinDirectory, MSBuildExeName);
                 var msBuildConfig = Path.Combine(msbuildBinDirectory, $"{MSBuildExeName}.config");
@@ -307,9 +270,9 @@ public void BuildEnvironmentDetectsVisualStudioByMSBuildProcessAmd64()
         [Theory]
         [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "No Visual Studio install for netcore")]
         [PlatformSpecific(TestPlatforms.Windows)]
-        [InlineData("16.0", true)]
-        [InlineData("16.3", true)]
-        [InlineData("15.0", false)]
+        [InlineData("17.0", true)]
+        [InlineData("17.3", true)]
+        [InlineData("16.0", false)]
         public void BuildEnvironmentDetectsVisualStudioFromSetupInstance(string visualStudioVersion, bool shouldBeValid)
         {
             using (var env = new EmptyVSEnviroment())
diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index f1b59b48e1f..1d06b86c43b 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -160,11 +160,15 @@ public void RoundtripTaskStartedEventArgs()
                 projectFile: "C:\\project.proj",
                 taskFile: "C:\\common.targets",
                 taskName: "Csc");
+            args.LineNumber = 42;
+            args.ColumnNumber = 999;
 
             Roundtrip(args,
                 e => e.ProjectFile,
                 e => e.TaskFile,
-                e => e.TaskName);
+                e => e.TaskName,
+                e => e.LineNumber.ToString(),
+                e => e.ColumnNumber.ToString());
         }
 
         [Fact]
@@ -185,8 +189,10 @@ public void RoundtripTaskFinishedEventArgs()
                 e => e.ThreadId.ToString());
         }
 
-        [Fact]
-        public void RoundtripBuildErrorEventArgs()
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void RoundtripBuildErrorEventArgs(bool useArguments)
         {
             var args = new BuildErrorEventArgs(
                 "Subcategory",
@@ -196,9 +202,11 @@ public void RoundtripBuildErrorEventArgs()
                 2,
                 3,
                 4,
-                "Message",
+                "Message with arguments: '{0}'",
                 "Help",
-                "SenderName");
+                "SenderName",
+                DateTime.Parse("9/1/2021 12:02:07 PM"),
+                useArguments ? new object[] { "argument0" } : null);
 
             Roundtrip(args,
                 e => e.Code,
@@ -209,11 +217,14 @@ public void RoundtripBuildErrorEventArgs()
                 e => e.LineNumber.ToString(),
                 e => e.Message,
                 e => e.ProjectFile,
-                e => e.Subcategory);
+                e => e.Subcategory,
+                e => string.Join(", ", e.RawArguments ?? Array.Empty<object>()));
         }
 
-        [Fact]
-        public void RoundtripBuildWarningEventArgs()
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void RoundtripBuildWarningEventArgs(bool useArguments)
         {
             var args = new BuildWarningEventArgs(
                 "Subcategory",
@@ -223,9 +234,11 @@ public void RoundtripBuildWarningEventArgs()
                 2,
                 3,
                 4,
-                "Message",
+                "Message with arguments: '{0}'",
                 "Help",
-                "SenderName");
+                "SenderName",
+                DateTime.Parse("9/1/2021 12:02:07 PM"),
+                useArguments ? new object[] { "argument0" } : null);
 
             Roundtrip(args,
                 e => e.Code,
@@ -236,11 +249,14 @@ public void RoundtripBuildWarningEventArgs()
                 e => e.LineNumber.ToString(),
                 e => e.Message,
                 e => e.ProjectFile,
-                e => e.Subcategory);
+                e => e.Subcategory,
+                e => string.Join(", ", e.RawArguments ?? Array.Empty<object>()));
         }
 
-        [Fact]
-        public void RoundtripBuildMessageEventArgs()
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void RoundtripBuildMessageEventArgs(bool useArguments)
         {
             var args = new BuildMessageEventArgs(
                 "Subcategory",
@@ -254,7 +270,8 @@ public void RoundtripBuildMessageEventArgs()
                 "Help",
                 "SenderName",
                 MessageImportance.High,
-                DateTime.Parse("12/12/2015 06:11:56 PM"));
+                DateTime.Parse("12/12/2015 06:11:56 PM"),
+                useArguments ? new object[] { "argument0" } : null);
 
             Roundtrip(args,
                 e => e.Code,
@@ -266,7 +283,8 @@ public void RoundtripBuildMessageEventArgs()
                 e => e.Message,
                 e => e.Importance.ToString(),
                 e => e.ProjectFile,
-                e => e.Subcategory);
+                e => e.Subcategory,
+                e => string.Join(", ", e.RawArguments ?? Array.Empty<object>()));
         }
 
         [Fact]
@@ -327,11 +345,15 @@ public void RoundtripTaskParameterEventArgs()
                 new TaskItemData("ItemSpec2", Enumerable.Range(1,3).ToDictionary(i => i.ToString(), i => i.ToString() + "value"))
             };
             var args = new TaskParameterEventArgs(TaskParameterMessageKind.TaskOutput, "ItemName", items, true, DateTime.MinValue);
+            args.LineNumber = 265;
+            args.ColumnNumber = 6;
 
             Roundtrip(args,
                 e => e.Kind.ToString(),
                 e => e.ItemType,
                 e => e.LogItemMetadata.ToString(),
+                e => e.LineNumber.ToString(),
+                e => e.ColumnNumber.ToString(),
                 e => TranslationHelpers.GetItemsString(e.Items));
         }
 
@@ -443,20 +465,31 @@ public void RoundtripTargetSkippedEventArgs()
                 ProjectFile = "foo.csproj",
                 TargetName = "target",
                 ParentTarget = "bar",
-                BuildReason = TargetBuiltReason.DependsOn
+                BuildReason = TargetBuiltReason.DependsOn,
+                SkipReason = TargetSkipReason.PreviouslyBuiltSuccessfully,
+                Condition = "$(condition) == true",
+                EvaluatedCondition = "true == true",
+                OriginalBuildEventContext = new BuildEventContext(1, 2, 3, 4, 5, 6, 7),
+                OriginallySucceeded = false,
+                TargetFile = "foo.csproj"
             };
 
             Roundtrip(args,
+                e => e.BuildEventContext.ToString(),
                 e => e.ParentTarget,
                 e => e.Importance.ToString(),
                 e => e.LineNumber.ToString(),
                 e => e.ColumnNumber.ToString(),
-                e => e.LineNumber.ToString(),
                 e => e.Message,
                 e => e.ProjectFile,
                 e => e.TargetFile,
                 e => e.TargetName,
-                e => e.BuildReason.ToString());
+                e => e.BuildReason.ToString(),
+                e => e.SkipReason.ToString(),
+                e => e.Condition,
+                e => e.EvaluatedCondition,
+                e => e.OriginalBuildEventContext.ToString(),
+                e => e.OriginallySucceeded.ToString());
         }
 
         [Fact]
diff --git a/src/Build.UnitTests/ConsoleLogger_Tests.cs b/src/Build.UnitTests/ConsoleLogger_Tests.cs
index 31c8209404d..023d77e74b8 100644
--- a/src/Build.UnitTests/ConsoleLogger_Tests.cs
+++ b/src/Build.UnitTests/ConsoleLogger_Tests.cs
@@ -318,9 +318,9 @@ public void ErrorMessageWithMultiplePropertiesInMessage(bool includeEvaluationPr
             output.ShouldContain("source_of_error : error : Hello from project 2 [" + project.ProjectFile + ":: Number=2 TargetFramework=netcoreapp2.1]");
         }
 
-        [Fact]
+        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/6518")]
         [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "Minimal path validation in Core allows expanding path containing quoted slashes.")]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Mono, "Minimal path validation in Mono allows expanding path containing quoted slashes.")]
+        [SkipOnMono("Minimal path validation in Mono allows expanding path containing quoted slashes.")]
         public void TestItemsWithUnexpandableMetadata()
         {
             SimulatedConsole sc = new SimulatedConsole();
@@ -338,7 +338,8 @@ public void TestItemsWithUnexpandableMetadata()
  <Target Name=""X"" />
 </Project>", logger);
 
-            sc.ToString().ShouldContain("\"a\\b\\%(Filename).c\"");
+            var text = sc.ToString();
+            text.ShouldContain("\"a\\b\\%(Filename).c\"");
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/Definition/ItemDataCollectionValue_Tests.cs b/src/Build.UnitTests/Definition/ItemDataCollectionValue_Tests.cs
new file mode 100644
index 00000000000..b0699e3ab43
--- /dev/null
+++ b/src/Build.UnitTests/Definition/ItemDataCollectionValue_Tests.cs
@@ -0,0 +1,122 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.Collections.Generic;
+using Microsoft.Build.Evaluation;
+using Shouldly;
+using Xunit;
+
+namespace Microsoft.Build.UnitTests.OM.Definition
+{
+    /// <summary>
+    /// Tests the <see cref="ItemDataCollectionValue{I}"/> data type.
+    /// </summary>
+    public class ItemDataCollectionValue_Tests
+    {
+        private int[] MakeArray(ItemDataCollectionValue<int> value)
+        {
+            List<int> result = new List<int>();
+            foreach (int i in value)
+            {
+                result.Add(i);
+            }
+            return result.ToArray();
+        }
+
+        [Fact]
+        public void RepresentsSingleItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 1 });
+        }
+
+        [Fact]
+        public void AddsSecondItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 1, 2 });
+        }
+
+        [Fact]
+        public void DeletesSingleItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Delete(1);
+            value.IsEmpty.ShouldBeTrue();
+            MakeArray(value).ShouldBe(Array.Empty<int>());
+        }
+
+        [Fact]
+        public void DeletesFirstItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.Delete(1);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 2 });
+        }
+
+        [Fact]
+        public void DeletesSecondItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.Delete(2);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 1 });
+        }
+
+        [Fact]
+        public void DeletesNonExistentItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.Delete(3);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 1, 2 });
+        }
+
+        [Fact]
+        public void ReplacesSingleItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Replace(1, 11);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 11 });
+        }
+
+        [Fact]
+        public void ReplacesFirstItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.Replace(1, 11);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 11, 2 });
+        }
+
+        [Fact]
+        public void ReplacesSecondItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.Replace(2, 22);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 1, 22 });
+        }
+
+        [Fact]
+        public void ReplacesNonExistentItem()
+        {
+            var value = new ItemDataCollectionValue<int>(1);
+            value.Add(2);
+            value.Replace(3, 33);
+            value.IsEmpty.ShouldBeFalse();
+            MakeArray(value).ShouldBe(new[] { 1, 2 });
+        }
+    }
+}
diff --git a/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs b/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
index 4208ae11b97..232d22c62dd 100644
--- a/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
+++ b/src/Build.UnitTests/Definition/ProjectEvaluationContext_Tests.cs
@@ -119,7 +119,7 @@ public void PassedInFileSystemShouldBeReusedInSharedContext()
                         {Path.Combine(_env.DefaultTestDirectory.Path, "2.file"), 1}
                     }.OrderBy(kvp => kvp.Key));
 
-            fileSystem.DirectoryEntryExistsCalls.ShouldBe(2);
+            fileSystem.FileOrDirectoryExistsCalls.ShouldBe(2);
         }
 
         [Fact]
diff --git a/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs b/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs
index e365cb9265f..41e2d74ef72 100644
--- a/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsetRegistryReader_Tests.cs
@@ -36,7 +36,7 @@ public class ToolsetRegistryReader_Tests : IDisposable
         private const string testRegistryPath = @"msbuildUnitTests";
 
         /// <summary>
-        /// Store the value of the "VisualStudioVersion" environment variable here so that 
+        /// Store the value of the "VisualStudioVersion" environment variable here so that
         /// we can unset it for the duration of the test.
         /// </summary>
         private string _oldVisualStudioVersion;
@@ -341,8 +341,8 @@ public void ReadRegistry_IgnoreSubToolsetSubKeys()
         }
 
         /// <summary>
-        /// Verifies that if a value is defined in both the base toolset and the 
-        /// selected subtoolset, the subtoolset value overrides -- even if that 
+        /// Verifies that if a value is defined in both the base toolset and the
+        /// selected subtoolset, the subtoolset value overrides -- even if that
         /// value is empty.
         /// </summary>
         [Fact]
@@ -381,8 +381,8 @@ public void ReadRegistry_SubToolsetOverridesBaseToolsetEntries()
         }
 
         /// <summary>
-        /// Verifies that if a value is defined in both the base toolset and the 
-        /// selected subtoolset, the subtoolset value overrides -- even if that 
+        /// Verifies that if a value is defined in both the base toolset and the
+        /// selected subtoolset, the subtoolset value overrides -- even if that
         /// value is empty.
         /// </summary>
         [Fact]
diff --git a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
index 91805bc0603..8ac6ba52f14 100644
--- a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
@@ -629,7 +629,7 @@ public void UsePropertyBeforeSet()
                                      <PropertyGroup>
                                          <Foo>$(baz) $(bar)</Foo>
                                          <bar>Something</bar>
-                                         <baz>Something</baz>   
+                                         <baz>Something</baz>
                                      </PropertyGroup>
 
                                   <Target Name=""Test""/>
@@ -675,7 +675,7 @@ public void UsePropertyBeforeSetDuplicates()
                                          <Foo1>$(baz) $(bar)</Foo1>
                                          <Foo>$(baz) $(bar)</Foo>
                                          <bar>Something</bar>
-                                         <baz>Something</baz>   
+                                         <baz>Something</baz>
                                      </PropertyGroup>
 
                                   <Target Name=""Test""/>
@@ -1860,12 +1860,12 @@ public void AllEvaluatedItems()
                         <Choose>
                           <When Condition='false'>
                             <ItemGroup>
-                              <i Include='i4'/>                     
+                              <i Include='i4'/>
                             </ItemGroup>
                           </When>
                           <When Condition='true'>
                             <ItemGroup>
-                              <i Include='i1'>                     
+                              <i Include='i1'>
                                 <m>m2</m>
                               </i>
                             </ItemGroup>
@@ -1876,7 +1876,7 @@ public void AllEvaluatedItems()
                           <When Condition='false'/>
                           <Otherwise>
                             <ItemGroup>
-                              <i Include='i5'/>                     
+                              <i Include='i5'/>
                             </ItemGroup>
                           </Otherwise>
                         </Choose>
@@ -4344,7 +4344,7 @@ public void ThrownInvalidProjectExceptionProperlyHandled()
         {
             string projectContents = ObjectModelHelpers.CleanupFileContents(@"
                              <Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns='msbuildnamespace'>
-                                
+
                                 <Import Project=""import.proj"" />
 
                             </Project>");
@@ -4396,9 +4396,9 @@ public void ThrownInvalidProjectExceptionProperlyHandled()
         /// <summary>
         /// Tests that an import, target, or task with a condition that contains an error but is short-circuited does not fail the build.  This can happen when you have a condition like:
         /// 'true' == 'false' AND '$([MSBuild]::GetDirectoryNameOfFileAbove($(NonExistentProperty), init.props))' != ''
-        /// 
+        ///
         /// The first condition is false so the second condition is not evaluated.  But in some cases we double evaluate the condition to log it.  The second evaluation will fail because it evaluates the whole string.
-        /// 
+        ///
         /// https://github.com/Microsoft/msbuild/issues/2259
         /// </summary>
         [Theory]
@@ -4769,6 +4769,23 @@ public void VerifyPropertyTrackingLoggingAll()
                 });
         }
 
+        [Fact]
+        public void VerifyGetTypeEvaluationBlocked()
+        {
+            string projectContents = ObjectModelHelpers.CleanupFileContents(@"
+                             <Project>
+                               <PropertyGroup>
+                                 <TestProp>$(MSBuildRuntimeType.GetType())</TestProp>
+                               </PropertyGroup>
+                             </Project>");
+
+            ProjectCollection fakeProjectCollection =
+                GetProjectCollectionWithFakeToolset(null /* no global properties */);
+
+            Should.Throw<InvalidProjectFileException>(() =>
+                new Project(XmlReader.Create(new StringReader(projectContents)), null, "Fake", fakeProjectCollection));
+        }
+
         private void VerifyPropertyTrackingLoggingScenario(string envVarValue, Action<MockLogger> loggerEvaluatorAction)
         {
             // The default is that only reassignments are logged.
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index 71d15858f3c..b58a72d0843 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -1547,76 +1547,6 @@ public void ExpandAllIntoStringTruncated()
             Assert.Equal(expected, expander.ExpandIntoStringAndUnescape(xmlattribute.Value, ExpanderOptions.ExpandAll | ExpanderOptions.Truncate, MockElementLocation.Instance));
         }
 
-        /// <summary>
-        /// Exercises ExpandIntoStringAndUnescape and ExpanderOptions.Truncate
-        /// </summary>
-        [Fact]
-        public void ExpandAllIntoStringNotTruncated()
-        {
-            using (TestEnvironment env = TestEnvironment.Create())
-            {
-                ChangeWaves.ResetStateForTests();
-                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave16_8.ToString());
-                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
-                ProjectInstance project = ProjectHelpers.CreateEmptyProjectInstance();
-                var manySpaces = "".PadLeft(2000);
-                var pg = new PropertyDictionary<ProjectPropertyInstance>();
-                pg.Set(ProjectPropertyInstance.Create("ManySpacesProperty", manySpaces));
-                var itemMetadataTable = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
-                {
-                    { "ManySpacesMetadata", manySpaces }
-                };
-                var itemMetadata = new StringMetadataTable(itemMetadataTable);
-                var projectItemGroups = new ItemDictionary<ProjectItemInstance>();
-                var itemGroup = new List<ProjectItemInstance>();
-                StringBuilder longFileName = new StringBuilder();
-                StringBuilder longMetadataName = new StringBuilder();
-                for (int i = 0; i < 50; i++)
-                {
-                    var item = new ProjectItemInstance(project, "ManyItems", $"ThisIsAFairlyLongFileName_{i}.bmp", project.FullPath);
-                    item.SetMetadata("Foo", $"ThisIsAFairlyLongMetadataValue_{i}");
-                    longFileName.Append($"ThisIsAFairlyLongFileName_{i}.bmp" + (i == 49 ? string.Empty : ";"));
-                    longMetadataName.Append($"ThisIsAFairlyLongMetadataValue_{i}" + (i == 49 ? string.Empty : ";"));
-                    itemGroup.Add(item);
-                }
-                var lookup = new Lookup(projectItemGroups, pg);
-                lookup.EnterScope("x");
-                lookup.PopulateWithItems("ManySpacesItem", new[]
-                {
-                    new ProjectItemInstance (project, "ManySpacesItem", "Foo", project.FullPath),
-                    new ProjectItemInstance (project, "ManySpacesItem", manySpaces, project.FullPath),
-                    new ProjectItemInstance (project, "ManySpacesItem", "Bar", project.FullPath),
-                });
-                lookup.PopulateWithItems("Exactly1024", new[]
-                {
-                    new ProjectItemInstance (project, "Exactly1024", "".PadLeft(1024), project.FullPath),
-                    new ProjectItemInstance (project, "Exactly1024", "Foo", project.FullPath),
-                });
-                lookup.PopulateWithItems("ManyItems", itemGroup);
-
-                Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(lookup, lookup, itemMetadata, FileSystems.Default);
-
-                XmlAttribute xmlattribute = (new XmlDocument()).CreateAttribute("dummy");
-                xmlattribute.Value = "'%(ManySpacesMetadata)' != '' and '$(ManySpacesProperty)' != '' and '@(ManySpacesItem)' != '' and '@(Exactly1024)' != '' and '@(ManyItems)' != '' and '@(ManyItems->'%(Foo)')' != '' and '@(ManyItems->'%(Nonexistent)')' != ''";
-
-                var expected =
-                    $"'{"",2000}' != '' and " +
-                    $"'{"",2000}' != '' and " +
-                    $"'Foo;{"",2000};Bar' != '' and " +
-                    $"'{"",1024};Foo' != '' and " +
-                    $"'{longFileName}' != '' and " +
-                    $"'{longMetadataName}' != '' and " +
-                    "';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;' != ''";
-                var actual = expander.ExpandIntoStringAndUnescape(xmlattribute.Value, ExpanderOptions.ExpandAll | ExpanderOptions.Truncate, MockElementLocation.Instance);
-                // NOTE: semicolons in the last part are *weird* because they don't actually mean anything and you get logging like
-                //     Target "Build" skipped, due to false condition; ( '@(I->'%(nonexistent)')' == '' ) was evaluated as ( ';' == '' ).
-                // but that goes back to MSBuild 4.something so I'm codifying it in this test. If you're here because you cleaned it up
-                // and want to fix the test my current opinion is that's fine.
-                actual.ShouldBe(expected);
-                ChangeWaves.ResetStateForTests();
-            }
-        }
-
         /// <summary>
         /// Exercises ExpandAllIntoString with a string that does not need expanding.
         /// In this case the expanded string should be reference identical to the passed in string.
@@ -1998,7 +1928,7 @@ public void PropertyFunctionNullArgument()
 
             Expander<ProjectPropertyInstance, ProjectItemInstance> expander = new Expander<ProjectPropertyInstance, ProjectItemInstance>(pg, FileSystems.Default);
 
-            string result = expander.ExpandIntoStringLeaveEscaped("$([System.Convert]::ChangeType('null',$(SomeStuff.GetType())))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
+            string result = expander.ExpandIntoStringLeaveEscaped("$([System.Convert]::ChangeType('null',$(SomeStuff.GetTypeCode())))", ExpanderOptions.ExpandProperties, MockElementLocation.Instance);
 
             Assert.Equal("null", result);
         }
diff --git a/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs b/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
index 73ba89b0e9b..2aa10111eeb 100644
--- a/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
@@ -110,7 +110,7 @@ public void RemoveShouldPreserveIntermediaryReferences(string content)
                 {"m1", "m1_contents"},
                 {"m2", "m2_contents"}
             };
-            
+
             var itemsForI = items.Where(i => i.ItemType == "i").ToList();
             ObjectModelHelpers.AssertItems(new[] { "a", "b", "c" }, itemsForI, expectedMetadata);
 
@@ -508,7 +508,7 @@ public void MultipleInterItemDependenciesOnSameItemOperation()
                 new Dictionary<string, string>
                 {
                     {"m", "i2"}
-                }, 
+                },
                 i1BaseMetadata,
                 i1BaseMetadata
             };
@@ -528,7 +528,7 @@ public void MultipleInterItemDependenciesOnSameItemOperation()
         public void LongIncludeChain()
         {
             const int INCLUDE_COUNT = 10000;
-            
+
             //  This was about the minimum count needed to repro a StackOverflowException
             //const int INCLUDE_COUNT = 4000;
 
@@ -605,7 +605,7 @@ public void LazyWildcardExpansionDoesNotEvaluateWildCardsIfNotReferenced()
                 }
 
                 Assert.Equal(expectedItems, project.GetConcatenatedItemsOfType("i2"));
-                
+
                 var fullPathItems = project.GetConcatenatedItemsOfType("FullPath");
                 Assert.Contains("a.cs", fullPathItems);
                 Assert.Contains("b.cs", fullPathItems);
diff --git a/src/Build.UnitTests/Evaluation/SimpleProjectRootElementCache_Tests.cs b/src/Build.UnitTests/Evaluation/SimpleProjectRootElementCache_Tests.cs
index 92794939793..f38192ebbb3 100644
--- a/src/Build.UnitTests/Evaluation/SimpleProjectRootElementCache_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/SimpleProjectRootElementCache_Tests.cs
@@ -60,7 +60,6 @@ public void Get_GivenOpenFuncWhichAddsRootElement_ReturnsRootElement()
             ProjectRootElement rootElementToCache = ProjectRootElement.Create(projectFileToCache);
             ProjectRootElement OpenFunc(string pathArg, ProjectRootElementCacheBase cacheArg)
             {
-                cacheArg.AddEntry(rootElementToCache);
                 return rootElementToCache;
             }
 
@@ -79,7 +78,6 @@ public void Get_GivenOpenFuncWhichAddsRootElementWithDifferentCasing_ReturnsRoot
             ProjectRootElement rootElementToCache = ProjectRootElement.Create(projectFileToCache);
             ProjectRootElement OpenFunc(string pathArg, ProjectRootElementCacheBase cacheArg)
             {
-                cacheArg.AddEntry(rootElementToCache);
                 return rootElementToCache;
             }
 
@@ -112,7 +110,6 @@ public void Get_GivenOpenFuncWhichReturnsIncorrectProject_ThrowsInternalErrorExc
             ProjectRootElement rootElementToCache = ProjectRootElement.Create(projectFileToCache);
             ProjectRootElement OpenFunc(string pathArg, ProjectRootElementCacheBase cacheArg)
             {
-                cacheArg.AddEntry(rootElementToCache);
                 return rootElementToCache;
             }
 
@@ -123,21 +120,5 @@ ProjectRootElement OpenFunc(string pathArg, ProjectRootElementCacheBase cacheArg
                 cache.Get(projectFile, OpenFunc, false, null);
             });
         }
-
-        [Fact]
-        public void Get_GivenOpenFuncWhichDoesNotAddToCache_ThrowsInternalErrorException()
-        {
-            string projectFile = NativeMethodsShared.IsUnixLike ? "/foo" : "c:\\foo";
-            string openFuncPath = NativeMethodsShared.IsUnixLike ? "/foo" : "c:\\foo";
-            ProjectRootElement openFuncElement = ProjectRootElement.Create(openFuncPath);
-            ProjectRootElement OpenFunc(string pathArg, ProjectRootElementCacheBase cacheArg) => openFuncElement;
-
-            var cache = new SimpleProjectRootElementCache();
-
-            Should.Throw<InternalErrorException>(() =>
-            {
-                cache.Get(projectFile, OpenFunc, false, null);
-            });
-        }
     }
 }
diff --git a/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs b/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs
index c4f8ab84bea..d357c472750 100644
--- a/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs
+++ b/src/Build.UnitTests/Globbing/MSBuildGlob_Tests.cs
@@ -326,20 +326,39 @@ public void GlobMatchingShouldWorkWithComplexRelativeLiterals()
         [InlineData(
             @"a/b\c",
             @"d/e\f/**\a.cs",
-            @"d\e/f\g/h\i/a.cs")]
+            @"d\e/f\g/h\i/a.cs",
+            @"d\e/f\", @"g/h\i/", @"a.cs")]
         [InlineData(
             @"a/b\c",
             @"d/e\f/*b*\*.cs",
-            @"d\e/f\abc/a.cs")]
+            @"d\e/f\abc/a.cs",
+            @"d\e/f\", @"abc/", @"a.cs")]
         [InlineData(
             @"a/b/\c",
             @"d/e\/*b*/\*.cs",
-            @"d\e\\abc/\a.cs")]
-        public void GlobMatchingIgnoresSlashOrientationAndRepetitions(string globRoot, string fileSpec, string stringToMatch)
+            @"d\e\\abc/\a.cs",
+            @"d\e\\", @"abc\\", @"a.cs")]
+        public void GlobMatchingIgnoresSlashOrientationAndRepetitions(string globRoot, string fileSpec, string stringToMatch,
+            string fixedDirectoryPart, string wildcardDirectoryPart, string filenamePart)
         {
             var glob = MSBuildGlob.Parse(globRoot, fileSpec);
 
             Assert.True(glob.IsMatch(stringToMatch));
+
+            MSBuildGlob.MatchInfoResult result = glob.MatchInfo(stringToMatch);
+            Assert.True(result.IsMatch);
+
+            string NormalizeSlashes(string path)
+            {
+                string normalizedPath = path.Replace(Path.DirectorySeparatorChar == '/' ? '\\' : '/', Path.DirectorySeparatorChar);
+                return NativeMethodsShared.IsWindows ? normalizedPath.Replace("\\\\", "\\") : normalizedPath;
+            }
+
+            var rootedFixedDirectoryPart = Path.Combine(FileUtilities.NormalizePath(globRoot), fixedDirectoryPart);
+
+            Assert.Equal(FileUtilities.GetFullPathNoThrow(rootedFixedDirectoryPart), result.FixedDirectoryPartMatchGroup);
+            Assert.Equal(NormalizeSlashes(wildcardDirectoryPart), result.WildcardDirectoryPartMatchGroup);
+            Assert.Equal(NormalizeSlashes(filenamePart), result.FilenamePartMatchGroup);
         }
     }
 }
diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 609f24fac92..28af920a861 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -1476,12 +1476,21 @@ public void DotNotationShouldRepresentGraph(Dictionary<int, int[]> edges)
             var graph = Helpers.CreateProjectGraph(
                 _env,
                 edges,
-                new Dictionary<string, string> {{"a", "b"}});
+                globalProperties: new Dictionary<string, string> {{"a", "b"}},
+                createProjectFile: (env, projectId, references, _, _, _) => Helpers.CreateProjectFile(
+                    env,
+                    projectId,
+                    references,
+                    projectReferenceTargets: new Dictionary<string, string[]>
+                    {
+                        {"Build", new[] {$"TargetFrom{projectId}", "Build"}}
+                    }));
 
+            var targetsPerNode = graph.GetTargetLists(new []{ "Build" });
 
             Func<ProjectGraphNode, string> nodeIdProvider = GetProjectFileName;
 
-            var dot = graph.ToDot(nodeIdProvider);
+            var dot = graph.ToDot(nodeIdProvider, targetsPerNode);
 
             var edgeCount = 0;
 
@@ -1489,9 +1498,12 @@ public void DotNotationShouldRepresentGraph(Dictionary<int, int[]> edges)
             {
                 var nodeId = nodeIdProvider(node);
 
+                var targets = string.Join(".*", targetsPerNode[node]);
+                targets.ShouldNotBeNullOrEmpty();
+
                 foreach (var globalProperty in node.ProjectInstance.GlobalProperties)
                 {
-                    dot.ShouldMatch($@"{nodeId}\s*\[.*{globalProperty.Key}.*{globalProperty.Value}.*\]");
+                    dot.ShouldMatch($@"{nodeId}\s*\[.*{targets}.*{globalProperty.Key}.*{globalProperty.Value}.*\]");
                 }
 
                 foreach (var reference in node.ProjectReferences)
diff --git a/src/Build.UnitTests/Instance/HostServices_Tests.cs b/src/Build.UnitTests/Instance/HostServices_Tests.cs
index 0bd541928cd..318d56ef351 100644
--- a/src/Build.UnitTests/Instance/HostServices_Tests.cs
+++ b/src/Build.UnitTests/Instance/HostServices_Tests.cs
@@ -245,7 +245,7 @@ public void TestContradictoryAffinityCausesException_Any()
         /// Test which ensures that setting an Any affinity for a project with a remote host object does not throws.
         /// </summary>
         [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Mono, "disable com tests on mono")]
+        [SkipOnMono("disable com tests on mono")]
         public void TestNoContradictoryRemoteHostObjectAffinity()
         {
             HostServices hostServices = new HostServices();
@@ -301,7 +301,7 @@ public void TestNonContraditcoryHostObjectAllowed_Any()
         /// Test which ensures the remote host object cannot affect a project which has the Any affinity specifically set.
         /// </summary>
         [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Mono, "disable com tests on mono")]
+        [SkipOnMono("disable com tests on mono")]
         public void TestRegisterRemoteHostObjectNoAffect_Any2()
         {
             HostServices hostServices = new HostServices();
@@ -341,7 +341,7 @@ public void TestNonContraditcoryHostObjectAllowed_InProc()
         /// Test which ensures the affinity for a project can be changed once the in process host object is registered
         /// </summary>
         [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Mono, "disable com tests on mono")]
+        [SkipOnMono("disable com tests on mono")]
         public void TestAffinityChangeAfterRegisterInprocessHostObject()
         {
             HostServices hostServices = new HostServices();
@@ -452,7 +452,7 @@ public void UnloadedProjectDiscardsHostServices()
         /// Tests that register overrides existing reigsted remote host object.
         /// </summary>
         [Fact]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Mono, "disable com tests on mono")]
+        [SkipOnMono("disable com tests on mono")]
         public void TestRegisterOverrideExistingRegisted()
         {
             var hostServices = new HostServices();
diff --git a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
index 52f699668fb..dc3a40ef3ce 100644
--- a/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
+++ b/src/Build.UnitTests/Microsoft.Build.Engine.UnitTests.csproj
@@ -18,6 +18,7 @@
   <ItemGroup>
     <PackageReference Include="System.Configuration.ConfigurationManager" />
     <PackageReference Include="Shouldly" />
+    <PackageReference Include="System.Net.Http" />
     <PackageReference Include="Microsoft.CodeAnalysis.Build.Tasks" />
     <PackageReference Include="NuGet.Frameworks" >
       <PrivateAssets>all</PrivateAssets>
@@ -38,12 +39,12 @@
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MonoBuild)' == 'true'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">TargetFramework=netstandard2.0</SetTargetFramework>
     </ProjectReference>
-    <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" Private="false" ReferenceOutputAssembly="false" OutputItemType="PortableTaskResolvedProjectReferencePath" SetTargetFramework="TargetFramework=netstandard1.3" />
+    <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" Private="false" ReferenceOutputAssembly="false" OutputItemType="PortableTaskResolvedProjectReferencePath" SetTargetFramework="TargetFramework=netstandard2.0" />
 
     <ProjectReference Include="..\Samples\ProjectCachePlugin\ProjectCachePlugin.csproj" Private="false" ReferenceOutputAssembly="false">
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
       <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework' and '$(MonoBuild)' == 'true'">TargetFramework=$(FullFrameworkTFM)</SetTargetFramework>
-      <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">TargetFramework=net5.0</SetTargetFramework>
+      <SetTargetFramework Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">TargetFramework=net6.0</SetTargetFramework>
     </ProjectReference>
   </ItemGroup>
 
diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index 79446a04695..c994edab0ff 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -7,9 +7,11 @@
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
+using System.Text;
 using System.Text.RegularExpressions;
 using System.Threading;
 using System.Threading.Tasks;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Experimental.ProjectCache;
 using Microsoft.Build.Framework;
@@ -235,10 +237,14 @@ public enum ErrorKind
 
         public class ConfigurableMockCache : ProjectCachePluginBase
         {
+            public Func<CacheContext, PluginLoggerBase, CancellationToken, Task>? BeginBuildImplementation { get; set; }
             public Func<BuildRequestData, PluginLoggerBase, CancellationToken, Task<CacheResult>>? GetCacheResultImplementation { get; set; }
+
             public override Task BeginBuildAsync(CacheContext context, PluginLoggerBase logger, CancellationToken cancellationToken)
             {
-                return Task.CompletedTask;
+                return BeginBuildImplementation != null
+                    ? BeginBuildImplementation(context, logger, cancellationToken)
+                    : Task.CompletedTask;
             }
 
             public override Task<CacheResult> GetCacheResultAsync(
@@ -469,16 +475,7 @@ public void ProjectCacheByBuildParametersAndGraphBuildWorks(GraphCacheResponse t
 
             var graphResult = buildSession.BuildGraph(graph);
 
-            if (buildParameters.DisableInProcNode
-                && testData.NonCacheMissResults.Any(c => c.Value.ProxyTargets is not null))
-            {
-                // TODO: remove this branch when the DisableInProcNode failure is fixed by https://github.com/dotnet/msbuild/pull/6400
-                graphResult.OverallResult.ShouldBe(BuildResultCode.Failure);
-                buildSession.Logger.Errors.First().Code.ShouldBe("MSB4223");
-                return;
-            }
-
-            graphResult.OverallResult.ShouldBe(BuildResultCode.Success);
+            graphResult.ShouldHaveSucceeded();
 
             buildSession.Dispose();
 
@@ -513,17 +510,7 @@ public void ProjectCacheByBuildParametersAndBottomUpBuildWorks(GraphCacheRespons
             {
                 var buildResult = buildSession.BuildProjectFile(node.ProjectInstance.FullPath);
 
-                if (buildParameters.DisableInProcNode &&
-                    testData.NonCacheMissResults.TryGetValue(GetProjectNumber(node), out var cacheResult) &&
-                    cacheResult.ProxyTargets is not null)
-                {
-                    // TODO: remove this branch when the DisableInProcNode failure is fixed by https://github.com/dotnet/msbuild/pull/6400
-                    buildResult.OverallResult.ShouldBe(BuildResultCode.Failure);
-                    buildSession.Logger.Errors.First().Code.ShouldBe("MSB4223");
-                    return;
-                }
-
-                buildResult.OverallResult.ShouldBe(BuildResultCode.Success);
+                buildResult.ShouldHaveSucceeded();
 
                 nodesToBuildResults[node] = buildResult;
             }
@@ -539,6 +526,84 @@ public void ProjectCacheByBuildParametersAndBottomUpBuildWorks(GraphCacheRespons
         [MemberData(nameof(SuccessfulGraphsWithBuildParameters))]
         public void ProjectCacheByVsWorkaroundWorks(GraphCacheResponse testData, BuildParameters buildParameters)
         {
+            ProjectGraph? graph = null;
+
+            var (logger, nodesToBuildResults) = BuildGraphByVsWorkaround(
+                () =>
+                {
+                    graph = testData.CreateGraph(_env);
+                    return graph;
+                },
+                buildParameters);
+
+            graph.ShouldNotBeNull();
+
+            AssertCacheBuild(graph!, testData, null, logger, nodesToBuildResults);
+        }
+
+        [Fact]
+        public void ProjectCacheByVsWorkaroundIgnoresSlnDisabledProjects()
+        {
+            var testData = new GraphCacheResponse(
+                new Dictionary<int, int[]>
+                {
+                    {1, new[] {2}}
+                },
+                extraContentPerProjectNumber: new Dictionary<int, string>()
+                {
+                    {1, "<PropertyGroup> <BuildProjectInSolution>false</BuildProjectInSolution> </PropertyGroup>"}
+                });
+
+            ProjectGraph? graph = null;
+
+            var (logger, nodesToBuildResults) = BuildGraphByVsWorkaround(
+                graphProducer: () =>
+                {
+                    graph = testData.CreateGraph(_env);
+                    return graph;
+                },
+                assertBuildResults: false
+            );
+
+            graph.ShouldNotBeNull();
+
+            logger.FullLog.ShouldNotContain($"EntryPoint: {graph!.GraphRoots.First().ProjectInstance.FullPath}");
+            logger.FullLog.ShouldContain($"EntryPoint: {graph.GraphRoots.First().ProjectReferences.First().ProjectInstance.FullPath}");
+        }
+
+        [Fact]
+        public void ProjectCacheByVsWorkaroundShouldNotSupportSolutionOnlyDependencies()
+        {
+            var testData = new GraphCacheResponse(
+                new Dictionary<int, int[]>
+                {
+                    {1, Array.Empty<int>()}
+                },
+                extraContentPerProjectNumber: new Dictionary<int, string>()
+                {
+                    {1, $"<PropertyGroup> <ProjectDependency>{Guid.NewGuid()}</ProjectDependency> </PropertyGroup>"}
+                });
+
+            var (logger, nodeResults) = BuildGraphByVsWorkaround(
+                graphProducer: () => testData.CreateGraph(_env),
+                assertBuildResults: false);
+
+            nodeResults.ShouldHaveSingleItem();
+
+            var buildResult = nodeResults.First().Value;
+            buildResult.OverallResult.ShouldBe(BuildResultCode.Failure);
+            buildResult.Exception.Message.ShouldContain("Project cache service does not support solution only dependencies when running under Visual Studio.");
+        }
+
+        private (MockLogger logger, Dictionary<ProjectGraphNode, BuildResult> nodesToBuildResults) BuildGraphByVsWorkaround(
+            Func<ProjectGraph> graphProducer,
+            BuildParameters? buildParameters = null,
+            bool assertBuildResults = true
+        )
+        {
+            var nodesToBuildResults = new Dictionary<ProjectGraphNode, BuildResult>();
+            MockLogger? logger;
+
             var currentBuildEnvironment = BuildEnvironmentHelper.Instance;
 
             try
@@ -552,39 +617,103 @@ public void ProjectCacheByVsWorkaroundWorks(GraphCacheResponse testData, BuildPa
                         visualStudioPath: currentBuildEnvironment.VisualStudioInstallRootDirectory));
 
                 // Reset the environment variables stored in the build params to take into account TestEnvironmentChanges.
-                buildParameters = new BuildParameters(buildParameters, resetEnvironment: true);
+                buildParameters = buildParameters  is null
+                    ? new BuildParameters()
+                    : new BuildParameters(buildParameters, resetEnvironment: true);
 
                 BuildManager.ProjectCacheItems.ShouldBeEmpty();
 
-                var graph = testData.CreateGraph(_env);
+                var graph = graphProducer.Invoke();
 
                 BuildManager.ProjectCacheItems.ShouldHaveSingleItem();
 
+                var projectPaths = graph.ProjectNodes.Select(n => n.ProjectInstance.FullPath).ToArray();
+
+                // VS sets this global property on every project it builds.
+                var solutionConfigurationGlobalProperty = CreateSolutionConfigurationProperty(graph.ProjectNodes);
+
                 using var buildSession = new Helpers.BuildManagerSession(_env, buildParameters);
-                var nodesToBuildResults = new Dictionary<ProjectGraphNode, BuildResult>();
 
                 foreach (var node in graph.ProjectNodesTopologicallySorted)
                 {
                     var buildResult = buildSession.BuildProjectFile(
                         node.ProjectInstance.FullPath,
                         globalProperties:
-                            new Dictionary<string, string> {{"SolutionPath", graph.GraphRoots.First().ProjectInstance.FullPath}});
+                            new Dictionary<string, string>
+                            {
+                                { SolutionProjectGenerator.SolutionPathPropertyName, graph.GraphRoots.First().ProjectInstance.FullPath },
+                                { SolutionProjectGenerator.CurrentSolutionConfigurationContents, solutionConfigurationGlobalProperty },
+                                { PropertyNames.InnerBuildProperty, "TheInnerBuildProperty"},
+                                { "TheInnerBuildProperty", "FooBar"},
+                            });
 
-                    buildResult.OverallResult.ShouldBe(BuildResultCode.Success);
+                    if (assertBuildResults)
+                    {
+                        buildResult.ShouldHaveSucceeded();
+                    }
 
                     nodesToBuildResults[node] = buildResult;
                 }
 
-                buildSession.Logger.FullLog.ShouldContain("Visual Studio Workaround based");
-                buildSession.Logger.FullLog.ShouldContain("Running project cache with Visual Studio workaround");
+                logger = buildSession.Logger;
 
-                AssertCacheBuild(graph, testData, null, buildSession.Logger, nodesToBuildResults);
+                if (assertBuildResults)
+                {
+                    logger.FullLog.ShouldContain("Visual Studio Workaround based");
+                    logger.FullLog.ShouldContain("Running project cache with Visual Studio workaround");
+
+                    foreach (var node in graph.ProjectNodes)
+                    {
+                        var projectPath = node.ProjectInstance.FullPath;
+                        var projectName = Path.GetFileNameWithoutExtension(projectPath);
+
+                        // Ensure MSBuild passes config / platform information set by VS.
+                        logger.FullLog.ShouldContain($"EntryPoint: {projectPath}");
+                        logger.FullLog.ShouldContain($"Configuration:{projectName}Debug");
+                        logger.FullLog.ShouldContain($"Platform:{projectName}x64");
+
+                        // Ensure MSBuild removes the inner build property if present.
+                        logger.FullLog.ShouldContain($"{PropertyNames.InnerBuildProperty}:TheInnerBuildProperty");
+                        logger.FullLog.ShouldNotContain("TheInnerBuildProperty:FooBar");
+                    }
+                }
             }
             finally
             {
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly(currentBuildEnvironment);
                 BuildManager.ProjectCacheItems.Clear();
             }
+
+            return (logger, nodesToBuildResults);
+        }
+
+        private static string CreateSolutionConfigurationProperty(IReadOnlyCollection<ProjectGraphNode> projectNodes)
+        {
+            var sb = new StringBuilder();
+
+            sb.AppendLine("<SolutionConfiguration>");
+
+            foreach (var node in projectNodes)
+            {
+                var projectPath = node.ProjectInstance.FullPath;
+                var projectName = Path.GetFileNameWithoutExtension(projectPath);
+
+                var buildProjectInSolutionValue = node.ProjectInstance.GetPropertyValue("BuildProjectInSolution");
+                var buildProjectInSolutionAttribute = string.IsNullOrWhiteSpace(buildProjectInSolutionValue)
+                    ? string.Empty
+                    : $"BuildProjectInSolution=\"{buildProjectInSolutionValue}\"";
+
+                var projectDependencyValue = node.ProjectInstance.GetPropertyValue("ProjectDependency");
+                var projectDependencyElement = string.IsNullOrWhiteSpace(projectDependencyValue)
+                    ? string.Empty
+                    : $"<ProjectDependency Project=\"{projectDependencyValue}\" />";
+
+                sb.AppendLine($"<ProjectConfiguration Project=\"{Guid.NewGuid()}\" AbsolutePath=\"{projectPath}\" {buildProjectInSolutionAttribute}>{projectName}Debug|{projectName}x64{projectDependencyElement}</ProjectConfiguration>");
+            }
+
+            sb.AppendLine("</SolutionConfiguration>");
+
+            return sb.ToString();
         }
 
         [Fact]
@@ -631,12 +760,12 @@ public void DesignTimeBuildsDuringVsWorkaroundShouldDisableTheCache()
                 foreach (var task in referenceBuildTasks)
                 {
                     var buildResult = task.Result;
-                    buildResult.OverallResult.ShouldBe(BuildResultCode.Success);
+                    buildResult.ShouldHaveSucceeded();
                 }
 
                 buildSession
                     .BuildProjectFile(rootNode.ProjectInstance.FullPath, globalProperties: globalProperties)
-                    .OverallResult.ShouldBe(BuildResultCode.Success);
+                    .ShouldHaveSucceeded();
 
                 buildSession.Dispose();
 
@@ -701,15 +830,7 @@ public void RunningProxyBuildsOnOutOfProcNodesShouldIssueWarning(bool disableInp
 
             var graphResult = buildSession.BuildGraph(graph);
 
-            if (!disableInprocNodeViaEnvironmentVariable)
-            {
-                // TODO: remove this branch when the DisableInProcNode failure is fixed by https://github.com/dotnet/msbuild/pull/6400
-                graphResult.OverallResult.ShouldBe(BuildResultCode.Failure);
-                buildSession.Logger.Errors.First().Code.ShouldBe("MSB4223");
-                return;
-            }
-
-            graphResult.OverallResult.ShouldBe(BuildResultCode.Success);
+            graphResult.ShouldHaveSucceeded();
 
             buildSession.Dispose();
 
@@ -854,7 +975,7 @@ public void CacheShouldNotGetQueriedForNestedBuildRequests(BuildParameters build
 
             var buildResult = buildSession.BuildProjectFile(project1.Path);
 
-            buildResult.OverallResult.ShouldBe(BuildResultCode.Success);
+            buildResult.ShouldHaveSucceeded();
 
             buildSession.Logger.ProjectStartedEvents.Count.ShouldBe(2);
 
@@ -886,7 +1007,7 @@ public void CacheViaBuildParametersCanDiscoverAndLoadPluginFromAssembly()
 
             var graphResult = buildSession.BuildGraph(graph);
 
-            graphResult.OverallResult.ShouldBe(BuildResultCode.Success);
+            graphResult.ShouldHaveSucceeded();
 
             buildSession.Logger.FullLog.ShouldContain("Explicit entry-point based");
 
@@ -909,7 +1030,7 @@ public void GraphBuildCanDiscoverAndLoadPluginFromAssembly()
 
             var graphResult = buildSession.BuildGraph(graph);
 
-            graphResult.OverallResult.ShouldBe(BuildResultCode.Success);
+            graphResult.ShouldHaveSucceeded();
 
             buildSession.Logger.FullLog.ShouldContain("Static graph based");
 
@@ -963,10 +1084,10 @@ public void BuildFailsWhenCacheBuildResultIsWrong()
 
             mockCache.Requests.Count.ShouldBe(2);
 
-            buildResult.ResultsByNode.First(r => GetProjectNumber(r.Key) == 2).Value.OverallResult.ShouldBe(BuildResultCode.Success);
-            buildResult.ResultsByNode.First(r => GetProjectNumber(r.Key) == 1).Value.OverallResult.ShouldBe(BuildResultCode.Failure);
+            buildResult.ResultsByNode.First(r => GetProjectNumber(r.Key) == 2).Value.ShouldHaveSucceeded();
+            buildResult.ResultsByNode.First(r => GetProjectNumber(r.Key) == 1).Value.ShouldHaveFailed();
 
-            buildResult.OverallResult.ShouldBe(BuildResultCode.Failure);
+            buildResult.ShouldHaveFailed();
 
             buildSession.Logger.FullLog.ShouldContain("Reference file [Invalid file] does not exist");
         }
@@ -990,9 +1111,8 @@ public void GraphBuildErrorsIfMultiplePluginsAreFound()
             using var buildSession = new Helpers.BuildManagerSession(_env);
 
             var graphResult = buildSession.BuildGraph(graph);
-
-            graphResult.OverallResult.ShouldBe(BuildResultCode.Failure);
-            graphResult.Exception.Message.ShouldContain("A single project cache plugin must be specified but multiple where found:");
+            
+            graphResult.ShouldHaveFailed("A single project cache plugin must be specified but multiple where found:");
         }
 
         [Fact]
@@ -1019,9 +1139,8 @@ public void GraphBuildErrorsIfNotAllNodeDefineAPlugin()
             using var buildSession = new Helpers.BuildManagerSession(_env);
 
             var graphResult = buildSession.BuildGraph(graph);
-
-            graphResult.OverallResult.ShouldBe(BuildResultCode.Failure);
-            graphResult.Exception.Message.ShouldContain("When any static graph node defines a project cache, all nodes must define the same project cache.");
+            
+            graphResult.ShouldHaveFailed("When any static graph node defines a project cache, all nodes must define the same project cache.");
         }
 
         public static IEnumerable<object[]> CacheExceptionLocationsTestData
@@ -1103,11 +1222,11 @@ public void EngineShouldHandleExceptionsFromCachePluginViaBuildParameters(ErrorL
                 // so the build submission should be successful.
                 if (errorLocations == ErrorLocations.EndBuildAsync)
                 {
-                    buildResult.OverallResult.ShouldBe(BuildResultCode.Success);
+                    buildResult.ShouldHaveSucceeded();
                 }
                 else
                 {
-                    buildResult.OverallResult.ShouldBe(BuildResultCode.Failure);
+                    buildResult.ShouldHaveFailed();
                 }
             }
             finally
@@ -1208,7 +1327,7 @@ public void EngineShouldHandleExceptionsFromCachePluginViaGraphBuild(ErrorLocati
                 logger.FullLog.ShouldContain("Loading the following project cache plugin:");
 
                 // Static graph build initializes and tears down the cache plugin so all cache plugin exceptions should end up in the GraphBuildResult
-                buildResult.OverallResult.ShouldBe(BuildResultCode.Failure);
+                buildResult.ShouldHaveFailed();
 
                 buildResult.Exception.ShouldBeOfType<ProjectCacheException>();
 
@@ -1279,14 +1398,14 @@ public void EndBuildShouldGetCalledOnceWhenItThrowsExceptionsFromGraphBuilds()
 
             var logger = buildSession.Logger;
 
-            GraphBuildResult? buildResult = null;
+            GraphBuildResult buildResult = null!;
             Should.NotThrow(
                 () =>
                 {
                     buildResult = buildSession.BuildGraph(new ProjectGraph(project.Path));
                 });
 
-            buildResult!.OverallResult.ShouldBe(BuildResultCode.Failure);
+            buildResult.ShouldHaveFailed();
             buildResult.Exception.InnerException!.ShouldNotBeNull();
             buildResult.Exception.InnerException!.Message.ShouldContain("Cache plugin exception from EndBuildAsync");
 
@@ -1300,12 +1419,6 @@ public void EndBuildShouldGetCalledOnceWhenItThrowsExceptionsFromGraphBuilds()
         [InlineData(true, true)]
         public void CacheShouldBeQueriedInParallelDuringGraphBuilds(bool useSynchronousLogging, bool disableInprocNode)
         {
-            if (disableInprocNode)
-            {
-                // TODO: remove this branch when the DisableInProcNode failure is fixed by https://github.com/dotnet/msbuild/pull/6400
-                return;
-            }
-
             var referenceNumbers = new []{2, 3, 4};
 
             var testData = new GraphCacheResponse(
@@ -1357,9 +1470,9 @@ public void CacheShouldBeQueriedInParallelDuringGraphBuilds(bool useSynchronousL
             var task3 = BuildProjectFileAsync(3);
             var task4 = BuildProjectFileAsync(4);
 
-            task3.Result.OverallResult.ShouldBe(BuildResultCode.Success);
+            task3.Result.ShouldHaveSucceeded();
             completedCacheRequests.ShouldContain(3);
-            task4.Result.OverallResult.ShouldBe(BuildResultCode.Success);
+            task4.Result.ShouldHaveSucceeded();
             completedCacheRequests.ShouldContain(4);
 
             // task 2 hasn't been instructed to finish yet
@@ -1368,11 +1481,11 @@ public void CacheShouldBeQueriedInParallelDuringGraphBuilds(bool useSynchronousL
 
             task2Completion.SetResult(true);
 
-            task2.Result.OverallResult.ShouldBe(BuildResultCode.Success);
+            task2.Result.ShouldHaveSucceeded();
             completedCacheRequests.ShouldContain(2);
 
             var task1 = BuildProjectFileAsync(1);
-            task1.Result.OverallResult.ShouldBe(BuildResultCode.Success);
+            task1.Result.ShouldHaveSucceeded();
             completedCacheRequests.ShouldContain(1);
 
             Task<BuildResult> BuildProjectFileAsync(int projectNumber)
@@ -1416,6 +1529,9 @@ public void ParallelStressTestForVsWorkaround(bool useSynchronousLogging, bool d
                 // Even though the assembly cache is discovered, we'll be overriding it with a descriptor based cache.
                 BuildManager.ProjectCacheItems.ShouldHaveSingleItem();
 
+                var solutionConfigurationGlobalProperty =
+                    CreateSolutionConfigurationProperty(graph.ProjectNodes);
+
                 using var buildSession = new Helpers.BuildManagerSession(_env, new BuildParameters
                 {
                     MaxNodeCount = NativeMethodsShared.GetLogicalCoreCount(),
@@ -1430,21 +1546,25 @@ public void ParallelStressTestForVsWorkaround(bool useSynchronousLogging, bool d
                     var buildResultTask = buildSession.BuildProjectFileAsync(
                         node.ProjectInstance.FullPath,
                         globalProperties:
-                        new Dictionary<string, string> { { "SolutionPath", graph.GraphRoots.First().ProjectInstance.FullPath } });
+                        new Dictionary<string, string>
+                        {
+                            { SolutionProjectGenerator.SolutionPathPropertyName, graph.GraphRoots.First().ProjectInstance.FullPath },
+                            { SolutionProjectGenerator.CurrentSolutionConfigurationContents, solutionConfigurationGlobalProperty }
+                        });
 
                     buildResultTasks.Add(buildResultTask);
                 }
 
                 foreach (var buildResultTask in buildResultTasks)
                 {
-                    buildResultTask.Result.OverallResult.ShouldBe(BuildResultCode.Success);
+                    buildResultTask.Result.ShouldHaveSucceeded();
                 }
 
                 buildSession.BuildProjectFile(
                         graph.GraphRoots.First().ProjectInstance.FullPath,
                         globalProperties:
                         new Dictionary<string, string> {{"SolutionPath", graph.GraphRoots.First().ProjectInstance.FullPath}})
-                    .OverallResult.ShouldBe(BuildResultCode.Success);
+                    .ShouldHaveSucceeded();
 
                 StringShouldContainSubstring(buildSession.Logger.FullLog, $"{AssemblyMockCache}: GetCacheResultAsync for", graph.ProjectNodes.Count);
 
@@ -1463,12 +1583,6 @@ public void ParallelStressTestForVsWorkaround(bool useSynchronousLogging, bool d
         [InlineData(true, true)]
         public void ParallelStressTest(bool useSynchronousLogging, bool disableInprocNode)
         {
-            if (disableInprocNode)
-            {
-                // TODO: remove this branch when the DisableInProcNode failure is fixed by https://github.com/dotnet/msbuild/pull/6400
-                return;
-            }
-
             var referenceNumbers = Enumerable.Range(2, NativeMethodsShared.GetLogicalCoreCount() * 2).ToArray();
 
             var testData = new GraphCacheResponse(
@@ -1495,7 +1609,7 @@ public void ParallelStressTest(bool useSynchronousLogging, bool disableInprocNod
 
             var graphResult = buildSession.BuildGraph(graph);
 
-            graphResult.OverallResult.ShouldBe(BuildResultCode.Success);
+            graphResult.ShouldHaveSucceeded();
             cache.QueryStartStops.Count.ShouldBe(graph.ProjectNodes.Count * 2);
         }
 
@@ -1581,7 +1695,7 @@ public void ProxyCacheHitsOnPreviousCacheMissesShouldWork()
             foreach (var buildResult in buildTasks.Select(buildTask => buildTask.Result))
             {
                 buildResult.Exception.ShouldBeNull();
-                buildResult.OverallResult.ShouldBe(BuildResultCode.Success);
+                buildResult.ShouldHaveSucceeded();
             }
 
             buildSession.Logger.ProjectStartedEvents.Count.ShouldBe(2 * projectPaths.Length);
diff --git a/src/Build/AssemblyInfo.cs b/src/Build/AssemblyInfo.cs
index 5717eb380fb..21e9b159651 100644
--- a/src/Build/AssemblyInfo.cs
+++ b/src/Build/AssemblyInfo.cs
@@ -26,14 +26,7 @@
 // so that we don't run into known security issues with loading libraries from unsafe locations
 [assembly: DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
 
-// Needed for the "hub-and-spoke model to locate and retrieve localized resources": https://msdn.microsoft.com/en-us/library/21a15yht(v=vs.110).aspx
-// We want "en" to require a satellite assembly for debug builds in order to flush out localization
-// issues, but we want release builds to work without it. Also, .net core does not have resource fallbacks
-#if (DEBUG && !RUNTIME_TYPE_NETCORE)
-[assembly: NeutralResourcesLanguage("en", UltimateResourceFallbackLocation.Satellite)]
-#else
 [assembly: NeutralResourcesLanguage("en")]
-#endif
 
 [assembly: ComVisible(false)]
 [assembly: CLSCompliant(true)]
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index cd3a3500209..ddabf21013b 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -30,7 +30,9 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.Debugging;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Utilities;
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 
@@ -286,7 +288,7 @@ public BuildManager(string hostName)
 
             _projectStartedEventHandler = OnProjectStarted;
             _projectFinishedEventHandler = OnProjectFinished;
-            _loggingThreadExceptionEventHandler = OnThreadException;
+            _loggingThreadExceptionEventHandler = OnLoggingThreadException;
             _legacyThreadingData = new LegacyThreadingData();
             _instantiationTimeUtc = DateTime.UtcNow;
         }
@@ -409,6 +411,8 @@ public void BeginBuild(BuildParameters parameters)
         {
             lock (_syncLock)
             {
+                AttachDebugger();
+
                 // Check for build in progress.
                 RequireState(BuildManagerState.Idle, "BuildInProgress");
 
@@ -484,7 +488,7 @@ public void BeginBuild(BuildParameters parameters)
             ILoggingService InitializeLoggingService()
             {
                 ILoggingService loggingService = CreateLoggingService(
-                    _buildParameters.Loggers,
+                    AppendDebuggingLoggers(_buildParameters.Loggers),
                     _buildParameters.ForwardingLoggers,
                     _buildParameters.WarningsAsErrors,
                     _buildParameters.WarningsAsMessages);
@@ -516,6 +520,22 @@ ILoggingService InitializeLoggingService()
                 return loggingService;
             }
 
+            // VS builds discard many msbuild events so attach a binlogger to capture them all.
+            IEnumerable<ILogger> AppendDebuggingLoggers(IEnumerable<ILogger> loggers)
+            {
+                if (DebugUtils.ShouldDebugCurrentProcess is false ||
+                    Traits.Instance.DebugEngine is false)
+                {
+                    return loggers;
+                }
+
+                var binlogPath = DebugUtils.FindNextAvailableDebugFilePath($"{DebugUtils.ProcessInfoString}_BuildManager_{_hostName}.binlog");
+
+                var logger = new BinaryLogger { Parameters = binlogPath };
+
+                return (loggers ?? Enumerable.Empty<ILogger>()).Concat(new[] { logger });
+            }
+
             void InitializeCaches()
             {
                 Debug.Assert(Monitor.IsEntered(_syncLock));
@@ -559,6 +579,34 @@ void InitializeCaches()
             }
         }
 
+        private static void AttachDebugger()
+        {
+            if (Debugger.IsAttached)
+            {
+                return;
+            }
+
+            if (!DebugUtils.ShouldDebugCurrentProcess)
+            {
+                return;
+            }
+
+            switch (Environment.GetEnvironmentVariable("MSBuildDebugBuildManagerOnStart"))
+            {
+#if FEATURE_DEBUG_LAUNCH
+                case "1":
+                    Debugger.Launch();
+                    break;
+#endif
+                case "2":
+                    // Sometimes easier to attach rather than deal with JIT prompt
+                    Process currentProcess = Process.GetCurrentProcess();
+                    Console.WriteLine($"Waiting for debugger to attach ({currentProcess.MainModule.FileName} PID {currentProcess.Id}).  Press enter to continue...");
+                    Console.ReadLine();
+                    break;
+            }
+        }
+
         private void InitializeProjectCacheService(
             ProjectCacheDescriptor pluginDescriptor,
             CancellationToken cancellationToken)
@@ -784,10 +832,15 @@ public void EndBuild()
                 ShutdownConnectedNodes(false /* normal termination */);
                 _noNodesActiveEvent.WaitOne();
 
-                // Wait for all of the actions in the work queue to drain.  Wait() could throw here if there was an unhandled exception
-                // in the work queue, but the top level exception handler there should catch everything and have forwarded it to the
+                // Wait for all of the actions in the work queue to drain.
+                // _workQueue.Completion.Wait() could throw here if there was an unhandled exception in the work queue,
+                // but the top level exception handler there should catch everything and have forwarded it to the
                 // OnThreadException method in this class already.
                 _workQueue.Complete();
+                if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))
+                {
+                    _workQueue.Completion.Wait();
+                }
 
                 // Stop the graph scheduling thread(s)
                 _graphSchedulingCancellationSource?.Cancel();
@@ -1021,36 +1074,38 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread
             ErrorUtilities.VerifyThrowArgumentNull(submission, nameof(submission));
             ErrorUtilities.VerifyThrow(!submission.IsCompleted, "Submission already complete.");
 
-            lock (_syncLock)
+            BuildRequestConfiguration resolvedConfiguration = null;
+            bool shuttingDown = false;
+
+            try
             {
-                ProjectInstance projectInstance = submission.BuildRequestData.ProjectInstance;
-                if (projectInstance != null)
+                lock (_syncLock)
                 {
-                    if (_acquiredProjectRootElementCacheFromProjectInstance)
+                    ProjectInstance projectInstance = submission.BuildRequestData.ProjectInstance;
+                    if (projectInstance != null)
                     {
-                        ErrorUtilities.VerifyThrowArgument(
-                            _buildParameters.ProjectRootElementCache == projectInstance.ProjectRootElementCache,
-                            "OM_BuildSubmissionsMultipleProjectCollections");
+                        if (_acquiredProjectRootElementCacheFromProjectInstance)
+                        {
+                            ErrorUtilities.VerifyThrowArgument(
+                                _buildParameters.ProjectRootElementCache == projectInstance.ProjectRootElementCache,
+                                "OM_BuildSubmissionsMultipleProjectCollections");
+                        }
+                        else
+                        {
+                            _buildParameters.ProjectRootElementCache = projectInstance.ProjectRootElementCache;
+                            _acquiredProjectRootElementCacheFromProjectInstance = true;
+                        }
                     }
-                    else
+                    else if (_buildParameters.ProjectRootElementCache == null)
                     {
-                        _buildParameters.ProjectRootElementCache = projectInstance.ProjectRootElementCache;
-                        _acquiredProjectRootElementCacheFromProjectInstance = true;
+                        // Create our own cache; if we subsequently get a build submission with a project instance attached,
+                        // we'll dump our cache and use that one.
+                        _buildParameters.ProjectRootElementCache =
+                            new ProjectRootElementCache(false /* do not automatically reload from disk */);
                     }
-                }
-                else if (_buildParameters.ProjectRootElementCache == null)
-                {
-                    // Create our own cache; if we subsequently get a build submission with a project instance attached,
-                    // we'll dump our cache and use that one.
-                    _buildParameters.ProjectRootElementCache =
-                        new ProjectRootElementCache(false /* do not automatically reload from disk */);
-                }
 
-                VerifyStateInternal(BuildManagerState.Building);
+                    VerifyStateInternal(BuildManagerState.Building);
 
-                BuildRequestConfiguration resolvedConfiguration = null;
-                try
-                {
                     // If we have an unnamed project, assign it a temporary name.
                     if (string.IsNullOrEmpty(submission.BuildRequestData.ProjectFullPath))
                     {
@@ -1081,45 +1136,48 @@ internal void ExecuteSubmission(BuildSubmission submission, bool allowMainThread
 
                     resolvedConfiguration.ExplicitlyLoaded = true;
 
-                    if (_shuttingDown)
-                    {
-                        // We were already canceled!
-                        AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);
-                        BuildResult result = new BuildResult(submission.BuildRequest, new BuildAbortedException());
-                        submission.CompleteResults(result);
-                        submission.CompleteLogging(true);
-                        CheckSubmissionCompletenessAndRemove(submission);
-                        return;
-                    }
-
-                    if (ProjectCacheIsPresent())
-                    {
-                        IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));
-                    }
-                    else
+                    // assign shutting down to local variable to avoid race condition: "setting _shuttingDown after this point during this method execution"
+                    shuttingDown = _shuttingDown;
+                    if (!shuttingDown)
                     {
-                        AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);
-                        IssueBuildRequestForBuildSubmission(submission, allowMainThreadBuild);
+                        if (ProjectCacheIsPresent())
+                        {
+                            IssueCacheRequestForBuildSubmission(new CacheRequest(submission, resolvedConfiguration));
+                        }
+                        else
+                        {
+                            AddBuildRequestToSubmission(submission, resolvedConfiguration.ConfigurationId);
+                            IssueBuildRequestForBuildSubmission(submission, resolvedConfiguration, allowMainThreadBuild);
+                        }
                     }
                 }
-                catch (ProjectCacheException ex)
+            }
+            catch (ProjectCacheException ex)
+            {
+                ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, "Cannot call project cache without having BuildRequestConfiguration");
+                CompleteSubmissionWithException(submission, resolvedConfiguration, ex);
+            }
+            catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
+            {
+                if (resolvedConfiguration is not null)
                 {
-                    ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, "Cannot call project cache without having ");
                     CompleteSubmissionWithException(submission, resolvedConfiguration, ex);
                 }
-                catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
+                else
                 {
-                    if (resolvedConfiguration is not null)
-                    {
-                        CompleteSubmissionWithException(submission, resolvedConfiguration, ex);
-                    }
-                    else
-                    {
-                        HandleSubmissionException(submission, ex);
-                        throw;
-                    }
+                    HandleSubmissionException(submission, ex);
+                    throw;
                 }
             }
+
+            // We are shutting down so submission has to be completed with BuildAbortedException
+            Debug.Assert(!Monitor.IsEntered(_syncLock));
+            if (shuttingDown)
+            {
+                ErrorUtilities.VerifyThrow(resolvedConfiguration is not null, "Cannot call project cache without having BuildRequestConfiguration");
+                // We were already canceled!
+                CompleteSubmissionWithException(submission, resolvedConfiguration, new BuildAbortedException());
+            }
         }
 
         bool ProjectCacheIsPresent()
@@ -1468,24 +1526,34 @@ private void ProcessPacket(int node, INodePacket packet)
             }
         }
 
+        /// <remarks>
+        /// To avoid deadlock possibility, this method MUST NOT be called inside of 'lock (_syncLock)'
+        /// </remarks>
         private void CompleteSubmissionWithException(BuildSubmission submission, BuildRequestConfiguration configuration, Exception exception)
         {
+            Debug.Assert(!Monitor.IsEntered(_syncLock));
+
             lock (_syncLock)
             {
                 if (submission.BuildRequest is null)
                 {
                     AddBuildRequestToSubmission(submission, configuration.ConfigurationId);
                 }
-
-                HandleSubmissionException(submission, exception);
             }
+
+            HandleSubmissionException(submission, exception);
         }
 
         /// <summary>
         /// Deals with exceptions that may be thrown when handling a submission.
         /// </summary>
+        /// <remarks>
+        /// To avoid deadlock possibility, this method MUST NOT be called inside of 'lock (_syncLock)'
+        /// </remarks>
         private void HandleSubmissionException(BuildSubmission submission, Exception ex)
         {
+            Debug.Assert(!Monitor.IsEntered(_syncLock));
+
             if (ex is AggregateException ae && ae.InnerExceptions.Count == 1)
             {
                 ex = ae.InnerExceptions.First();
@@ -1500,14 +1568,28 @@ private void HandleSubmissionException(BuildSubmission submission, Exception ex)
                 }
             }
 
-            lock(_syncLock)
+            bool submissionNeedsCompletion;
+            lock (_syncLock)
             {
                 // BuildRequest may be null if the submission fails early on.
-                if (submission.BuildRequest != null)
+                submissionNeedsCompletion = submission.BuildRequest != null;
+                if (submissionNeedsCompletion)
                 {
                     var result = new BuildResult(submission.BuildRequest, ex);
                     submission.CompleteResults(result);
-                    submission.CompleteLogging(true);
+                }
+            }
+
+            if (submissionNeedsCompletion)
+            {
+                WaitForAllLoggingServiceEventsToBeProcessed();
+            }
+
+            lock (_syncLock)
+            {
+                if (submissionNeedsCompletion)
+                {
+                    submission.CompleteLogging();
                 }
 
                 _overallBuildSuccess = false;
@@ -1515,6 +1597,21 @@ private void HandleSubmissionException(BuildSubmission submission, Exception ex)
             }
         }
 
+        /// <summary>
+        /// Waits to drain all events of logging service.
+        /// This method shall be used carefully because during draining, LoggingService will block all incoming events.
+        /// </summary>
+        /// <remarks>
+        /// To avoid deadlock possibility, this method MUST NOT be called inside of 'lock (_syncLock)'
+        /// </remarks>
+        private void WaitForAllLoggingServiceEventsToBeProcessed()
+        {
+            // this has to be called out of the lock (_syncLock)
+            // because processing events can callback to 'this' instance and cause deadlock
+            Debug.Assert(!Monitor.IsEntered(_syncLock));
+            ((LoggingService) ((IBuildComponentHost) this).LoggingService).WaitForThreadToProcessEvents();
+        }
+
         /// <summary>
         /// Deals with exceptions that may be thrown as a result of ExecuteSubmission.
         /// </summary>
@@ -1576,7 +1673,7 @@ private static void AddProxyBuildRequestToSubmission(BuildSubmission submission,
         /// The submission is a top level build request entering the BuildManager.
         /// Sends the request to the scheduler with optional legacy threading semantics behavior.
         /// </summary>
-        private void IssueBuildRequestForBuildSubmission(BuildSubmission submission, bool allowMainThreadBuild = false)
+        private void IssueBuildRequestForBuildSubmission(BuildSubmission submission, BuildRequestConfiguration configuration, bool allowMainThreadBuild = false)
         {
             _workQueue.Post(
                 () =>
@@ -1587,11 +1684,7 @@ private void IssueBuildRequestForBuildSubmission(BuildSubmission submission, boo
                     }
                     catch (BuildAbortedException bae)
                     {
-                        // We were canceled before we got issued by the work queue.
-                        var result = new BuildResult(submission.BuildRequest, bae);
-                        submission.CompleteResults(result);
-                        submission.CompleteLogging(true);
-                        CheckSubmissionCompletenessAndRemove(submission);
+                        CompleteSubmissionWithException(submission, configuration, bae);
                     }
                     catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
                     {
@@ -1655,11 +1748,17 @@ void IssueBuildSubmissionToSchedulerImpl(BuildSubmission submission, bool allowM
                             var buildEventContext = new BuildEventContext(submission.SubmissionId, 1, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
                             ((IBuildComponentHost)this).LoggingService.LogFatalBuildError(buildEventContext, ex, new BuildEventFileInfo(submission.BuildRequestData.ProjectFullPath));
                         }
+                    }
+
+                    WaitForAllLoggingServiceEventsToBeProcessed();
 
-                        submission.CompleteLogging(true);
+                    lock (_syncLock)
+                    {
+                        submission.CompleteLogging();
                         ReportResultsToSubmission(new BuildResult(submission.BuildRequest, ex));
                         _overallBuildSuccess = false;
                     }
+
                 }
             }
         }
@@ -1724,11 +1823,17 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
                 if (submission.BuildRequestData.GraphBuildOptions.Build)
                 {
                     var cacheServiceTask = Task.Run(() => SearchAndInitializeProjectCachePluginFromGraph(projectGraph));
-                    var targetListTask = Task.Run(() => projectGraph.GetTargetLists(submission.BuildRequestData.TargetNames));
+                    var targetListTask = projectGraph.GetTargetLists(submission.BuildRequestData.TargetNames);
+
+                    DumpGraph(projectGraph, targetListTask);
 
                     using DisposablePluginService cacheService = cacheServiceTask.Result;
 
-                    resultsPerNode = BuildGraph(projectGraph, targetListTask.Result, submission.BuildRequestData);
+                    resultsPerNode = BuildGraph(projectGraph, targetListTask, submission.BuildRequestData);
+                }
+                else
+                {
+                    DumpGraph(projectGraph);
                 }
 
                 ErrorUtilities.VerifyThrow(
@@ -1792,6 +1897,18 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
                     _overallBuildSuccess = false;
                 }
             }
+
+            static void DumpGraph(ProjectGraph graph, IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetList = null)
+            {
+                if (Traits.Instance.DebugEngine is false)
+                {
+                    return;
+                }
+
+                var logPath = DebugUtils.FindNextAvailableDebugFilePath($"{DebugUtils.ProcessInfoString}_ProjectGraph.dot");
+
+                File.WriteAllText(logPath, graph.ToDot(targetList));
+            }
         }
 
         private Dictionary<ProjectGraphNode, BuildResult> BuildGraph(
@@ -2193,14 +2310,14 @@ void HandleCacheResult()
                         {
                             // Issue the real build request.
                             AddBuildRequestToSubmission(submission, configuration.ConfigurationId);
-                            IssueBuildRequestForBuildSubmission(submission, allowMainThreadBuild: false);
+                            IssueBuildRequestForBuildSubmission(submission, configuration, allowMainThreadBuild: false);
                         }
                         else if (cacheResult.ResultType == CacheResultType.CacheHit && cacheResult.ProxyTargets != null)
                         {
                             // Setup submission.BuildRequest with proxy targets. The proxy request is built on the inproc node (to avoid
                             // ProjectInstance serialization). The proxy target results are used as results for the real targets.
                             AddProxyBuildRequestToSubmission(submission, configuration.ConfigurationId, cacheResult.ProxyTargets);
-                            IssueBuildRequestForBuildSubmission(submission, allowMainThreadBuild: false);
+                            IssueBuildRequestForBuildSubmission(submission, configuration, allowMainThreadBuild: false);
                         }
                         else if (cacheResult.ResultType == CacheResultType.CacheHit && cacheResult.BuildResult != null)
                         {
@@ -2216,7 +2333,7 @@ void HandleCacheResult()
                             }
 
                             _resultsCache.AddResult(result);
-                            submission.CompleteLogging(false);
+                            submission.CompleteLogging();
                             ReportResultsToSubmission(result);
                         }
                     }
@@ -2430,7 +2547,7 @@ private void CheckForActiveNodesAndCleanUpSubmissions()
 
                     // If we never received a project started event, consider logging complete anyhow, since the nodes have
                     // shut down.
-                    submission.CompleteLogging(waitForLoggingThread: false);
+                    submission.CompleteLogging();
 
                     _overallBuildSuccess = _overallBuildSuccess && (submission.BuildResult.OverallResult == BuildResultCode.Success);
                     CheckSubmissionCompletenessAndRemove(submission);
@@ -2559,7 +2676,7 @@ private void ReportResultsToSubmission(BuildResult result)
                     */
                     if (!submission.LoggingCompleted && result.Exception != null)
                     {
-                        submission.CompleteLogging(waitForLoggingThread: false);
+                        submission.CompleteLogging();
                     }
 
                     submission.CompleteResults(result);
@@ -2686,7 +2803,7 @@ private NodeConfiguration GetNodeConfiguration()
         }
 
         /// <summary>
-        /// Handler for thread exceptions (logging thread, communications thread).  This handler will only get called if the exception did not previously
+        /// Handler for thread exceptions. This handler will only get called if the exception did not previously
         /// get handled by a node exception handlers (for instance because the build is complete for the node.)  In this case we
         /// get the exception and will put it into the OverallBuildResult so that the host can see what happened.
         /// </summary>
@@ -2716,7 +2833,7 @@ private void OnThreadException(Exception e)
                         {
                             submission.BuildResult.Exception = e;
                         }
-                        submission.CompleteLogging(waitForLoggingThread: false);
+                        submission.CompleteLogging();
                         submission.CompleteResults(new BuildResult(submission.BuildRequest, e));
 
                         CheckSubmissionCompletenessAndRemove(submission);
@@ -2743,22 +2860,49 @@ private void OnThreadException(Exception e)
             }
         }
 
+        /// <summary>
+        /// Handler for LoggingService thread exceptions.
+        /// </summary>
+        private void OnLoggingThreadException(Exception e)
+        {
+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))
+            {
+                _workQueue.Post(() => OnThreadException(e));
+            }
+            else
+            {
+                OnThreadException(e);
+            }
+        }
+
         /// <summary>
         /// Raised when a project finished logging message has been processed.
         /// </summary>
         private void OnProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
-            lock (_syncLock)
+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))
+            {
+                _workQueue.Post(() => OnProjectFinishedBody(e));
+            }
+            else
+            {
+                OnProjectFinishedBody(e);
+            }
+
+            void OnProjectFinishedBody(ProjectFinishedEventArgs e)
             {
-                if (_projectStartedEvents.TryGetValue(e.BuildEventContext.SubmissionId, out var originalArgs))
+                lock (_syncLock)
                 {
-                    if (originalArgs.BuildEventContext.Equals(e.BuildEventContext))
+                    if (_projectStartedEvents.TryGetValue(e.BuildEventContext.SubmissionId, out var originalArgs))
                     {
-                        _projectStartedEvents.Remove(e.BuildEventContext.SubmissionId);
-                        if (_buildSubmissions.TryGetValue(e.BuildEventContext.SubmissionId, out var submission))
+                        if (originalArgs.BuildEventContext.Equals(e.BuildEventContext))
                         {
-                            submission.CompleteLogging(false);
-                            CheckSubmissionCompletenessAndRemove(submission);
+                            _projectStartedEvents.Remove(e.BuildEventContext.SubmissionId);
+                            if (_buildSubmissions.TryGetValue(e.BuildEventContext.SubmissionId, out var submission))
+                            {
+                                submission.CompleteLogging();
+                                CheckSubmissionCompletenessAndRemove(submission);
+                            }
                         }
                     }
                 }
@@ -2770,11 +2914,23 @@ private void OnProjectFinished(object sender, ProjectFinishedEventArgs e)
         /// </summary>
         private void OnProjectStarted(object sender, ProjectStartedEventArgs e)
         {
-            lock (_syncLock)
+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))
             {
-                if (!_projectStartedEvents.ContainsKey(e.BuildEventContext.SubmissionId))
+                _workQueue.Post(() => OnProjectStartedBody(e));
+            }
+            else
+            {
+                OnProjectStartedBody(e);
+            }
+
+            void OnProjectStartedBody(ProjectStartedEventArgs e)
+            {
+                lock (_syncLock)
                 {
-                    _projectStartedEvents[e.BuildEventContext.SubmissionId] = e;
+                    if (!_projectStartedEvents.ContainsKey(e.BuildEventContext.SubmissionId))
+                    {
+                        _projectStartedEvents[e.BuildEventContext.SubmissionId] = e;
+                    }
                 }
             }
         }
@@ -3047,7 +3203,7 @@ private void CancelAndMarkAsFailure()
         /// <summary>
         /// The logger registered to the logging service when no other one is.
         /// </summary>
-        private class NullLogger : ILogger
+        internal class NullLogger : ILogger
         {
             #region ILogger Members
 
diff --git a/src/Build/BackEnd/BuildManager/BuildSubmission.cs b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
index 91356f814c6..5b574b82b20 100644
--- a/src/Build/BackEnd/BuildManager/BuildSubmission.cs
+++ b/src/Build/BackEnd/BuildManager/BuildSubmission.cs
@@ -165,13 +165,8 @@ internal void CompleteResults(BuildResult result)
         /// <summary>
         /// Indicates that all logging events for this submission are complete.
         /// </summary>
-        internal void CompleteLogging(bool waitForLoggingThread)
+        internal void CompleteLogging()
         {
-            if (waitForLoggingThread)
-            {
-                ((BackEnd.Logging.LoggingService)((IBuildComponentHost)BuildManager).LoggingService).WaitForThreadToProcessEvents();
-            }
-
             LoggingCompleted = true;
             CheckForCompletion();
         }
diff --git a/src/Build/BackEnd/BuildManager/CacheSerialization.cs b/src/Build/BackEnd/BuildManager/CacheSerialization.cs
index 4ac2ae28805..8bce00b3a26 100644
--- a/src/Build/BackEnd/BuildManager/CacheSerialization.cs
+++ b/src/Build/BackEnd/BuildManager/CacheSerialization.cs
@@ -79,7 +79,7 @@ public static (IConfigCache ConfigCache, IResultsCache ResultsCache, Exception e
 
                 using (var fileStream = File.OpenRead(inputCacheFile))
                 {
-                    var translator = BinaryTranslator.GetReadTranslator(fileStream, null);
+                    using var translator = BinaryTranslator.GetReadTranslator(fileStream, null);
 
                     translator.Translate(ref configCache);
                     translator.Translate(ref resultsCache);
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 1038643d11f..2dbcd31ea0e 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -12,6 +12,8 @@
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.Debugging;
+using Microsoft.Build.Utilities;
 using BuildAbortedException = Microsoft.Build.Exceptions.BuildAbortedException;
 
 namespace Microsoft.Build.BackEnd
@@ -115,8 +117,10 @@ internal class BuildRequestEngine : IBuildRequestEngine, IBuildComponent
         /// </summary>
         internal BuildRequestEngine()
         {
-            _debugDumpState = Environment.GetEnvironmentVariable("MSBUILDDEBUGSCHEDULER") == "1";
-            _debugDumpPath = Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+            _debugDumpState = Traits.Instance.DebugScheduler;
+            _debugDumpPath = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
+                ? DebugUtils.DebugPath
+                : Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
             _debugForceCaching = Environment.GetEnvironmentVariable("MSBUILDDEBUGFORCECACHING") == "1";
 
             if (String.IsNullOrEmpty(_debugDumpPath))
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index b45dab48cbd..ef21df23454 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -27,7 +27,6 @@
 
 using BackendNativeMethods = Microsoft.Build.BackEnd.NativeMethods;
 using Task = System.Threading.Tasks.Task;
-using DotNetFrameworkArchitecture = Microsoft.Build.Shared.DotNetFrameworkArchitecture;
 using Microsoft.Build.Framework;
 using Microsoft.Build.BackEnd.Logging;
 
@@ -434,9 +433,9 @@ private Process LaunchNode(string msbuildLocation, string commandLineArgs)
 
             // Repeat the executable name as the first token of the command line because the command line
             // parser logic expects it and will otherwise skip the first argument
-            commandLineArgs = msbuildLocation + " " + commandLineArgs;
+            commandLineArgs = $"\"{msbuildLocation}\" {commandLineArgs}";
 
-            BackendNativeMethods.STARTUP_INFO startInfo = new BackendNativeMethods.STARTUP_INFO();
+            BackendNativeMethods.STARTUP_INFO startInfo = new();
             startInfo.cb = Marshal.SizeOf<BackendNativeMethods.STARTUP_INFO>();
 
             // Null out the process handles so that the parent process does not wait for the child process
@@ -466,11 +465,6 @@ private Process LaunchNode(string msbuildLocation, string commandLineArgs)
                 creationFlags |= BackendNativeMethods.CREATE_NEW_CONSOLE;
             }
 
-            BackendNativeMethods.SECURITY_ATTRIBUTES processSecurityAttributes = new BackendNativeMethods.SECURITY_ATTRIBUTES();
-            BackendNativeMethods.SECURITY_ATTRIBUTES threadSecurityAttributes = new BackendNativeMethods.SECURITY_ATTRIBUTES();
-            processSecurityAttributes.nLength = Marshal.SizeOf<BackendNativeMethods.SECURITY_ATTRIBUTES>();
-            threadSecurityAttributes.nLength = Marshal.SizeOf<BackendNativeMethods.SECURITY_ATTRIBUTES>();
-
             CommunicationsUtilities.Trace("Launching node from {0}", msbuildLocation);
 
             string exeName = msbuildLocation;
@@ -481,7 +475,6 @@ private Process LaunchNode(string msbuildLocation, string commandLineArgs)
             {
                 // Run the child process with the same host as the currently-running process.
                 exeName = GetCurrentHost();
-                commandLineArgs = "\"" + msbuildLocation + "\" " + commandLineArgs;
             }
 #endif
 
@@ -526,14 +519,15 @@ private Process LaunchNode(string msbuildLocation, string commandLineArgs)
             else
             {
 #if RUNTIME_TYPE_NETCORE
-                if (NativeMethodsShared.IsWindows)
-                {
-                    // Repeat the executable name in the args to suit CreateProcess
-                    commandLineArgs = "\"" + exeName + "\" " + commandLineArgs;
-                }
+                // Repeat the executable name in the args to suit CreateProcess
+                commandLineArgs = $"\"{exeName}\" {commandLineArgs}";
 #endif
 
-                BackendNativeMethods.PROCESS_INFORMATION processInfo = new BackendNativeMethods.PROCESS_INFORMATION();
+                BackendNativeMethods.PROCESS_INFORMATION processInfo = new();
+                BackendNativeMethods.SECURITY_ATTRIBUTES processSecurityAttributes = new();
+                BackendNativeMethods.SECURITY_ATTRIBUTES threadSecurityAttributes = new();
+                processSecurityAttributes.nLength = Marshal.SizeOf<BackendNativeMethods.SECURITY_ATTRIBUTES>();
+                threadSecurityAttributes.nLength = Marshal.SizeOf<BackendNativeMethods.SECURITY_ATTRIBUTES>();
 
                 bool result = BackendNativeMethods.CreateProcess
                     (
@@ -596,9 +590,18 @@ private static string GetCurrentHost()
 #if RUNTIME_TYPE_NETCORE || MONO
             if (CurrentHost == null)
             {
-                using (Process currentProcess = Process.GetCurrentProcess())
+                string dotnetExe = Path.Combine(FileUtilities.GetFolderAbove(BuildEnvironmentHelper.Instance.CurrentMSBuildExePath, 2),
+                    NativeMethodsShared.IsWindows ? "dotnet.exe" : "dotnet");
+                if (File.Exists(dotnetExe))
+                {
+                    CurrentHost = dotnetExe;
+                }
+                else
                 {
-                    CurrentHost = currentProcess.MainModule.FileName;
+                    using (Process currentProcess = Process.GetCurrentProcess())
+                    {
+                        CurrentHost = currentProcess.MainModule.FileName;
+                    }
                 }
             }
 
diff --git a/src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs b/src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs
index 4116039458a..f10fbf8dc50 100644
--- a/src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs
+++ b/src/Build/BackEnd/Components/Communications/TranslatorExtensions.cs
@@ -4,10 +4,11 @@
 using System;
 using System.Collections.Concurrent;
 using System.Linq;
+using System.Reflection;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Execution;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using System.Reflection;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -103,5 +104,17 @@ public static T FactoryForDeserializingTypeWithName<T>(this ITranslator translat
 
             return (T) targetInstanceChild;
         }
+
+        public static void TranslateOptionalBuildEventContext(this ITranslator translator, ref BuildEventContext buildEventContext)
+        {
+            if (translator.Mode == TranslationDirection.ReadFromStream)
+            {
+                buildEventContext = translator.Reader.ReadOptionalBuildEventContext();
+            }
+            else
+            {
+                translator.Writer.WriteOptionalBuildEventContext(buildEventContext);
+            }
+        }
     }
 }
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 7d489ca8b21..096fb99283f 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -207,6 +207,15 @@ bool IncludeTaskInputs
             set;
         }
 
+        /// <summary>
+        /// Returns the minimum logging importance that must be logged because there is a possibility that
+        /// at least one registered logger consumes it.
+        /// </summary>
+        MessageImportance MinimumRequiredMessageImportance
+        {
+            get;
+        }
+
         #endregion
 
         /// <summary>
@@ -525,8 +534,10 @@ void LogProjectEvaluationFinished(
         /// <param name="taskName">The name of the task</param>
         /// <param name="projectFile">The project file which is being built</param>
         /// <param name="projectFileOfTaskNode">The file in which the task is defined - typically a .targets file</param>
+        /// <param name="line">The line number in the file where the task invocation is located.</param>
+        /// <param name="column">The column number in the file where the task invocation is located.</param>
         /// <returns>The task build event context</returns>
-        BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode);
+        BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, int line, int column);
 
         /// <summary>
         /// Log that a task has just completed
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index eb11739f920..19ed313b922 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
+using System.Diagnostics;
 using System.Globalization;
 using System.Linq;
 using System.Reflection;
@@ -222,6 +223,12 @@ internal partial class LoggingService : ILoggingService, INodePacketHandler, IBu
         /// </summary>
         private IDictionary<int, ISet<string>> _warningsAsMessagesByProject;
 
+        /// <summary>
+        /// The minimum message importance that must be logged because there is a possibility that a logger consumes it.
+        /// Null means that the optimization is disabled or no relevant logger has been registered.
+        /// </summary>
+        private MessageImportance? _minimumRequiredMessageImportance;
+
         #region LoggingThread Data
 
         /// <summary>
@@ -702,6 +709,19 @@ public ICollection<string> RegisteredSinkNames
             }
         }
 
+        /// <summary>
+        /// Returns the minimum logging importance that must be logged because there is a possibility that
+        /// at least one registered logger consumes it.
+        /// </summary>
+        public MessageImportance MinimumRequiredMessageImportance
+        {
+            get
+            {
+                // If we haven't set the field return the default of "all messages must be logged".
+                return _minimumRequiredMessageImportance ?? MessageImportance.Low;
+            }
+        }
+
         #endregion
 
         #region Members
@@ -1120,7 +1140,7 @@ public void LogBuildEvent(BuildEventArgs buildEvent)
         #endregion
 
         /// <summary>
-        /// This method will becalled from multiple threads in asynchronous mode.
+        /// This method will be called from multiple threads in asynchronous mode.
         ///
         /// Determine where to send the buildevent either to the filters or to a specific sink.
         /// When in Asynchronous mode the event should to into the logging queue (as long as we are initialized).
@@ -1163,8 +1183,29 @@ internal void WaitForThreadToProcessEvents()
             // shutdown and nulled out the events we were going to wait on.
             if (_logMode == LoggerMode.Asynchronous && _loggingQueue != null)
             {
-                TerminateLoggingEventQueue();
-                CreateLoggingEventQueue();
+                BufferBlock<object> loggingQueue = null;
+                ActionBlock<object> loggingQueueProcessor = null;
+
+                lock (_lockObject)
+                {
+                    loggingQueue = _loggingQueue;
+                    loggingQueueProcessor = _loggingQueueProcessor;
+
+                    // Replaces _loggingQueue and _loggingQueueProcessor with new one, this will assure that
+                    // no further messages could possibly be trying to be added into queue we are about to drain
+                    CreateLoggingEventQueue();
+                }
+
+                // Drain queue.
+                // This shall not be locked to avoid possible deadlock caused by
+                // event handlers to reenter 'this' instance while trying to log something.
+                if (loggingQueue != null)
+                {
+                    Debug.Assert(!Monitor.IsEntered(_lockObject));
+
+                    loggingQueue.Complete();
+                    loggingQueueProcessor.Completion.Wait();
+                }
             }
         }
 
@@ -1225,21 +1266,27 @@ private void CreateLoggingEventQueue()
                 BoundedCapacity = Convert.ToInt32(_queueCapacity)
             };
 
-            _loggingQueue = new BufferBlock<object>(dataBlockOptions);
+            var loggingQueue = new BufferBlock<object>(dataBlockOptions);
 
             var executionDataBlockOptions = new ExecutionDataflowBlockOptions
             {
                 BoundedCapacity = 1
             };
 
-            _loggingQueueProcessor = new ActionBlock<object>(loggingEvent => LoggingEventProcessor(loggingEvent), executionDataBlockOptions);
+            var loggingQueueProcessor = new ActionBlock<object>(loggingEvent => LoggingEventProcessor(loggingEvent), executionDataBlockOptions);
 
             var dataLinkOptions = new DataflowLinkOptions
             {
                 PropagateCompletion = true
             };
 
-            _loggingQueue.LinkTo(_loggingQueueProcessor, dataLinkOptions);
+            loggingQueue.LinkTo(loggingQueueProcessor, dataLinkOptions);
+
+            lock (_lockObject)
+            {
+                _loggingQueue = loggingQueue;
+                _loggingQueueProcessor = loggingQueueProcessor;
+            }
         }
 
         /// <summary>
@@ -1553,10 +1600,57 @@ private void InitializeLogger(ILogger logger, IEventSource sourceForLogger)
                 InternalLoggerException.Throw(e, null, "FatalErrorWhileInitializingLogger", true, logger.GetType().Name);
             }
 
+            // Update the minimum guaranteed message importance based on the newly added logger.
+            UpdateMinimumMessageImportance(logger);
+
             // Keep track of the loggers so they can be unregistered later on
             _loggers.Add(logger);
         }
 
+        /// <summary>
+        /// Updates <see cref="_minimumRequiredMessageImportance"/> based on the given <paramref name="logger"/>.
+        /// </summary>
+        /// <param name="logger">The newly registered logger.</param>
+        /// <remarks>
+        /// This method contains knowledge about several logger classes used by MSBuild. The goal is to optimize common scenarios,
+        /// such as building on the command line with normal or minimum verbosity. If the user registers an external custom logger,
+        /// we will fall back to "minimum importance" == Low because we don't know how the logger processes messages, therefore we
+        /// must feed it everything.
+        /// </remarks>
+        private void UpdateMinimumMessageImportance(ILogger logger)
+        {
+            var innerLogger = (logger is Evaluation.ProjectCollection.ReusableLogger reusableLogger) ? reusableLogger.OriginalLogger : logger;
+
+            MessageImportance? minimumImportance = innerLogger switch
+            {
+                Build.Logging.ConsoleLogger consoleLogger => consoleLogger.GetMinimumMessageImportance(),
+                Build.Logging.ConfigurableForwardingLogger forwardingLogger => forwardingLogger.GetMinimumMessageImportance(),
+
+                // Central forwarding loggers are used in worker nodes if logging verbosity could not be optimized, i.e. in cases
+                // where we must log everything. They can be ignored in inproc nodes.
+                CentralForwardingLogger => (_nodeId > 1 ? MessageImportance.Low : null),
+
+                // The null logger has no effect on minimum verbosity.
+                Execution.BuildManager.NullLogger => null,
+
+                // If the logger is not on our whitelist, there are no importance guarantees. Fall back to "any importance".
+                _ => MessageImportance.Low
+            };
+
+            if (minimumImportance != null)
+            {
+                if (_minimumRequiredMessageImportance == null)
+                {
+                    _minimumRequiredMessageImportance = minimumImportance;
+                }
+                else
+                {
+                    int newMinImportance = Math.Max((int)_minimumRequiredMessageImportance, (int)minimumImportance);
+                    _minimumRequiredMessageImportance = (MessageImportance)newMinImportance;
+                }
+            }
+        }
+
         /// <summary>
         /// When an exception is raised in the logging thread, we do not want the application to terminate right away.
         /// Whidbey and orcas msbuild have the logger exceptions occurring on the engine thread so that the host can
@@ -1609,8 +1703,7 @@ private void TryRaiseProjectFinishedEvent(BuildEventArgs args)
         /// </summary>
         private string GetAndVerifyProjectFileFromContext(BuildEventContext context)
         {
-            string projectFile;
-            _projectFileMap.TryGetValue(context.ProjectContextId, out projectFile);
+            _projectFileMap.TryGetValue(context.ProjectContextId, out string projectFile);
 
             // PERF: Not using VerifyThrow to avoid boxing an int in the non-error case.
             if (projectFile == null)
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index 77de428ef63..c5c3555f201 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -450,13 +450,10 @@ public void LogBuildStarted()
 
                 // Raise the event with the filters
                 ProcessLoggingEvent(buildEvent);
-
-                // Make sure we process this event before going any further
-                if (_logMode == LoggerMode.Asynchronous)
-                {
-                    WaitForThreadToProcessEvents();
-                }
             }
+
+            // Make sure we process this event before going any further
+            WaitForThreadToProcessEvents();
         }
 
         /// <summary>
@@ -478,12 +475,10 @@ public void LogBuildFinished(bool success)
                 BuildFinishedEventArgs buildEvent = new BuildFinishedEventArgs(message, null /* no help keyword */, success);
 
                 ProcessLoggingEvent(buildEvent);
-
-                if (_logMode == LoggerMode.Asynchronous)
-                {
-                    WaitForThreadToProcessEvents();
-                }
             }
+
+            // Make sure we process this event before going any further
+            WaitForThreadToProcessEvents();
         }
 
         /// <inheritdoc />
@@ -754,9 +749,11 @@ public void LogTaskStarted(BuildEventContext taskBuildEventContext, string taskN
         /// <param name="taskName">Task Name</param>
         /// <param name="projectFile">Project file being built</param>
         /// <param name="projectFileOfTaskNode">Project file which contains the task</param>
+        /// <param name="line">The line number in the file where the task invocation is located.</param>
+        /// <param name="column">The column number in the file where the task invocation is located.</param>
         /// <returns>The build event context for the task.</returns>
         /// <exception cref="InternalErrorException">BuildEventContext is null</exception>
-        public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode)
+        public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, int line, int column)
         {
             lock (_lockObject)
             {
@@ -782,6 +779,8 @@ public BuildEventContext LogTaskStarted2(BuildEventContext targetBuildEventConte
                             taskName
                         );
                     buildEvent.BuildEventContext = taskBuildEventContext;
+                    buildEvent.LineNumber = line;
+                    buildEvent.ColumnNumber = column;
                     ProcessLoggingEvent(buildEvent);
                 }
 
diff --git a/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs b/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs
index 0b55b80359a..6852343e9be 100644
--- a/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/NodeLoggingContext.cs
@@ -86,18 +86,26 @@ internal void LogRequestHandledFromCache(BuildRequest request, BuildRequestConfi
         {
             ProjectLoggingContext projectLoggingContext = LogProjectStarted(request, configuration);
 
-            // When pulling a request from the cache, we want to make sure we log a task skipped message for any targets which 
-            // were used to build the request including default and inital targets.
+            // When pulling a request from the cache, we want to make sure we log a target skipped event for any targets which
+            // were used to build the request including default and initial targets.
             foreach (string target in configuration.GetTargetsUsedToBuildRequest(request))
             {
-                projectLoggingContext.LogComment
-                    (
-                        MessageImportance.Low,
-                        result[target].ResultCode == TargetResultCode.Failure ? "TargetAlreadyCompleteFailure" : "TargetAlreadyCompleteSuccess",
-                        target
-                    );
-
-                if (result[target].ResultCode == TargetResultCode.Failure)
+                var targetResult = result[target];
+                bool isFailure = targetResult.ResultCode == TargetResultCode.Failure;
+
+                var skippedTargetEventArgs = new TargetSkippedEventArgs(message: null)
+                {
+                    BuildEventContext = projectLoggingContext.BuildEventContext,
+                    TargetName = target,
+                    BuildReason = TargetBuiltReason.None,
+                    SkipReason = isFailure ? TargetSkipReason.PreviouslyBuiltUnsuccessfully : TargetSkipReason.PreviouslyBuiltSuccessfully,
+                    OriginallySucceeded = !isFailure,
+                    OriginalBuildEventContext = (targetResult as TargetResult)?.OriginalBuildEventContext
+                };
+
+                projectLoggingContext.LogBuildEvent(skippedTargetEventArgs);
+
+                if (targetResult.ResultCode == TargetResultCode.Failure)
                 {
                     break;
                 }
diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index 846c0b3a643..4c5e5934c83 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -135,7 +135,12 @@ private ProjectLoggingContext(NodeLoggingContext nodeLoggingContext, int submiss
                 properties,
                 items,
                 evaluationId);
-            LoggingService.LogComment(this.BuildEventContext, MessageImportance.Low, "ToolsVersionInEffectForBuild", toolsVersion);
+
+            // No need to log a redundant message in the common case
+            if (toolsVersion != "Current")
+            {
+                LoggingService.LogComment(this.BuildEventContext, MessageImportance.Low, "ToolsVersionInEffectForBuild", toolsVersion);
+            }
 
             this.IsValid = true;
         }
diff --git a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
index 6dc62c389ce..51c266e6485 100644
--- a/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/TaskLoggingContext.cs
@@ -69,7 +69,9 @@ internal TaskLoggingContext(TargetLoggingContext targetLoggingContext, string pr
                 targetLoggingContext.BuildEventContext,
                 _taskName,
                 projectFullPath,
-                task.Location.File
+                task.Location.File,
+                task.Location.Line,
+                task.Location.Column
                 );
             this.IsValid = true;
         }
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 7d7c0dc5759..42e912b95ae 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -4,11 +4,13 @@
 #nullable enable
 using System;
 using System.Collections.Generic;
+using System.Collections.Immutable;
 using System.Diagnostics;
 using System.Linq;
 using System.Reflection;
 using System.Threading;
 using System.Threading.Tasks;
+using System.Xml;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Construction;
@@ -16,6 +18,7 @@
 using Microsoft.Build.FileSystem;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Graph;
+using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 
@@ -46,6 +49,12 @@ internal class ProjectCacheService
         private readonly ProjectCachePluginBase _projectCachePlugin;
         private ProjectCacheServiceState _serviceState = ProjectCacheServiceState.NotInitialized;
 
+        /// <summary>
+        /// An instanatiable version of MSBuildFileSystemBase not overriding any methods,
+        /// i.e. falling back to FileSystem.Default.
+        /// </summary>
+        private sealed class DefaultMSBuildFileSystem : MSBuildFileSystemBase { }
+
         // Use NullableBool to make it work with Interlock.CompareExchange (doesn't accept bool?).
         // Assume that if one request is a design time build, all of them are.
         // Volatile because it is read by the BuildManager thread and written by one project cache service thread pool thread.
@@ -115,7 +124,7 @@ private async Task BeginBuildAsync(ProjectCacheDescriptor? vsWorkaroundOverrideD
                 await _projectCachePlugin.BeginBuildAsync(
                     new CacheContext(
                         projectDescriptor.PluginSettings,
-                        new IFileSystemAdapter(FileSystems.Default),
+                        new DefaultMSBuildFileSystem(),
                         projectDescriptor.ProjectGraph,
                         projectDescriptor.EntryPoints),
                     // TODO: Detect verbosity from logging service.
@@ -186,7 +195,7 @@ Assembly LoadAssembly(string resolverPath)
 #if !FEATURE_ASSEMBLYLOADCONTEXT
                 return Assembly.LoadFrom(resolverPath);
 #else
-                return _loader.LoadFromPath(resolverPath);
+                return s_loader.LoadFromPath(resolverPath);
 #endif
             }
 
@@ -204,7 +213,7 @@ IEnumerable<Type> GetTypes<T>(Assembly assembly)
         }
 
 #if FEATURE_ASSEMBLYLOADCONTEXT
-        private static readonly CoreClrAssemblyLoader _loader = new CoreClrAssemblyLoader();
+        private static readonly CoreClrAssemblyLoader s_loader = new CoreClrAssemblyLoader();
 #endif
 
         public void PostCacheRequest(CacheRequest cacheRequest)
@@ -322,6 +331,7 @@ async Task LateInitializePluginForVsWorkaround(CacheRequest request)
             {
                 var (_, configuration) = request;
                 var solutionPath = configuration.Project.GetPropertyValue(SolutionProjectGenerator.SolutionPathPropertyName);
+                var solutionConfigurationXml = configuration.Project.GetPropertyValue(SolutionProjectGenerator.CurrentSolutionConfigurationContents);
 
                 ErrorUtilities.VerifyThrow(
                     solutionPath != null && !string.IsNullOrWhiteSpace(solutionPath) && solutionPath != "*Undefined*",
@@ -331,19 +341,112 @@ async Task LateInitializePluginForVsWorkaround(CacheRequest request)
                     FileSystems.Default.FileExists(solutionPath),
                     $"Solution file does not exist: {solutionPath}");
 
+                ErrorUtilities.VerifyThrow(
+                    string.IsNullOrWhiteSpace(solutionConfigurationXml) is false,
+                    "Expected VS to set a xml with all the solution projects' configurations for the currently building solution configuration.");
+
+                // A solution supports multiple solution configurations (different values for Configuration and Platform).
+                // Each solution configuration generates a different static graph.
+                // Therefore, plugin implementations that rely on creating static graphs in their BeginBuild methods need access to the
+                // currently solution configuration used by VS.
+                //
+                // In this VS workaround, however, we do not have access to VS' solution configuration. The only information we have is a global property
+                // named "CurrentSolutionConfigurationContents" that VS sets on each built project. It does not contain the solution configuration itself, but
+                // instead it contains information on how the solution configuration maps to each project's configuration.
+                //
+                // So instead of using the solution file as the entry point, we parse this VS property and extract graph entry points from it, for every project
+                // mentioned in the "CurrentSolutionConfigurationContents" global property.
+                //
+                // Ideally, when the VS workaround is removed from MSBuild and moved into VS, VS should create ProjectGraphDescriptors with the solution path as
+                // the graph entrypoint file, and the VS solution configuration as the entry point's global properties.
+                var graphEntryPointsFromSolutionConfig = GenerateGraphEntryPointsFromSolutionConfigurationXml(
+                    solutionConfigurationXml,
+                    configuration.Project);
+
                 await BeginBuildAsync(
                     ProjectCacheDescriptor.FromAssemblyPath(
                         _projectCacheDescriptor.PluginAssemblyPath!,
-                        new[]
-                        {
-                            new ProjectGraphEntryPoint(
-                                solutionPath,
-                                configuration.Project.GlobalProperties)
-                        },
+                        graphEntryPointsFromSolutionConfig,
                         projectGraph: null,
                         _projectCacheDescriptor.PluginSettings));
             }
 
+            static IReadOnlyCollection<ProjectGraphEntryPoint> GenerateGraphEntryPointsFromSolutionConfigurationXml(
+                string solutionConfigurationXml,
+                ProjectInstance project
+            )
+            {
+                // TODO: fix code clone for parsing CurrentSolutionConfiguration xml: https://github.com/dotnet/msbuild/issues/6751
+                var doc = new XmlDocument();
+                doc.LoadXml(solutionConfigurationXml);
+
+                var root = doc.DocumentElement!;
+                var projectConfigurationNodes = root.GetElementsByTagName("ProjectConfiguration");
+
+                ErrorUtilities.VerifyThrow(projectConfigurationNodes.Count > 0, "Expected at least one project in solution");
+
+                var definingProjectPath = project.FullPath;
+                var graphEntryPoints = new List<ProjectGraphEntryPoint>(projectConfigurationNodes.Count);
+
+                var templateGlobalProperties = new Dictionary<string, string>(project.GlobalProperties, StringComparer.OrdinalIgnoreCase);
+                RemoveProjectSpecificGlobalProperties(templateGlobalProperties, project);
+
+                foreach (XmlNode node in projectConfigurationNodes)
+                {
+                    ErrorUtilities.VerifyThrowInternalNull(node.Attributes, nameof(node.Attributes));
+
+                    var buildProjectInSolution = node.Attributes!["BuildProjectInSolution"];
+                    if (buildProjectInSolution is not null &&
+                        string.IsNullOrWhiteSpace(buildProjectInSolution.Value) is false &&
+                        bool.TryParse(buildProjectInSolution.Value, out var buildProject) &&
+                        buildProject is false)
+                    {
+                        continue;
+                    }
+
+                    ErrorUtilities.VerifyThrow(
+                        node.ChildNodes.OfType<XmlElement>().FirstOrDefault(e => e.Name == "ProjectDependency") is null,
+                        "Project cache service does not support solution only dependencies when running under Visual Studio.");
+
+                    var projectPathAttribute = node.Attributes!["AbsolutePath"];
+                    ErrorUtilities.VerifyThrow(projectPathAttribute is not null, "Expected VS to set the project path on each ProjectConfiguration element.");
+
+                    var projectPath = projectPathAttribute!.Value;
+
+                    var (configuration, platform) = SolutionFile.ParseConfigurationName(node.InnerText, definingProjectPath, 0, solutionConfigurationXml);
+
+                    // Take the defining project global properties and override the configuration and platform.
+                    // It's sufficient to only set Configuration and Platform.
+                    // But we send everything to maximize the plugins' potential to quickly workaround potential MSBuild issues while the MSBuild fixes flow into VS.
+                    var globalProperties = new Dictionary<string, string>(templateGlobalProperties, StringComparer.OrdinalIgnoreCase)
+                    {
+                        ["Configuration"] = configuration,
+                        ["Platform"] = platform
+                    };
+
+                    graphEntryPoints.Add(new ProjectGraphEntryPoint(projectPath, globalProperties));
+                }
+
+                return graphEntryPoints;
+
+                // If any project specific property is set, it will propagate down the project graph and force all nodes to that property's specific side effects, which is incorrect.
+                void RemoveProjectSpecificGlobalProperties(Dictionary<string, string> globalProperties, ProjectInstance project)
+                {
+                    // InnerBuildPropertyName is TargetFramework for the managed sdk.
+                    var innerBuildPropertyName = ProjectInterpretation.GetInnerBuildPropertyName(project);
+
+                    IEnumerable<string> projectSpecificPropertyNames = new []{innerBuildPropertyName, "Configuration", "Platform", "TargetPlatform", "OutputType"};
+
+                    foreach (var propertyName in projectSpecificPropertyNames)
+                    {
+                        if (!string.IsNullOrWhiteSpace(propertyName) && globalProperties.ContainsKey(propertyName))
+                        {
+                            globalProperties.Remove(propertyName);
+                        }
+                    }
+                }
+            }
+
             static bool MSBuildStringIsTrue(string msbuildString) =>
                 ConversionUtilities.ConvertStringToBool(msbuildString, nullOrWhitespaceIsFalse: true);
         }
@@ -360,7 +463,7 @@ private async Task<CacheResult> GetCacheResultAsync(BuildRequestData buildReques
                     return CacheResult.IndicateNonCacheHit(CacheResultType.CacheNotApplicable);
                 }
             }
-			
+
             ErrorUtilities.VerifyThrowInternalNull(buildRequest.ProjectInstance, nameof(buildRequest.ProjectInstance));
 
             var queryDescription = $"{buildRequest.ProjectFullPath}" +
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
index 66195775b22..109cb49b9bf 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs
@@ -218,7 +218,8 @@ private void ExecuteAdd(ProjectItemGroupTaskItemInstance child, ItemBucket bucke
                     TaskParameterMessageKind.AddItem,
                     child.ItemType,
                     itemsToAdd,
-                    logItemMetadata: true);
+                    logItemMetadata: true,
+                    child.Location);
             }
 
             // Now add the items we created to the lookup.
@@ -261,7 +262,8 @@ private void ExecuteRemove(ProjectItemGroupTaskItemInstance child, ItemBucket bu
                         TaskParameterMessageKind.RemoveItem,
                         child.ItemType,
                         itemsToRemove,
-                        logItemMetadata: true);
+                        logItemMetadata: true,
+                        child.Location);
                 }
 
                 bucket.Lookup.RemoveItems(itemsToRemove);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
index 4f7440b61e3..b672732ee39 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs
@@ -252,7 +252,8 @@ internal static void LogTaskParameter(
             TaskParameterMessageKind messageKind,
             string itemType,
             IList items,
-            bool logItemMetadata)
+            bool logItemMetadata,
+            IElementLocation location = null)
         {
             var args = CreateTaskParameterEventArgs(
                 loggingContext.BuildEventContext,
@@ -260,7 +261,10 @@ internal static void LogTaskParameter(
                 itemType,
                 items,
                 logItemMetadata,
-                DateTime.UtcNow);
+                DateTime.UtcNow,
+                location?.Line ?? 0,
+                location?.Column ?? 0);
+
             loggingContext.LogBuildEvent(args);
         }
 
@@ -270,7 +274,9 @@ internal static TaskParameterEventArgs CreateTaskParameterEventArgs(
             string itemType,
             IList items,
             bool logItemMetadata,
-            DateTime timestamp)
+            DateTime timestamp,
+            int line = 0,
+            int column = 0)
         {
             // Only create a snapshot of items if we use AppDomains
 #if FEATURE_APPDOMAIN
@@ -284,6 +290,8 @@ internal static TaskParameterEventArgs CreateTaskParameterEventArgs(
                 logItemMetadata,
                 timestamp);
             args.BuildEventContext = buildEventContext;
+            args.LineNumber = line;
+            args.ColumnNumber = column;
             return args;
         }
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index 21bdf35cb01..6b4b24dfa81 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -555,6 +555,7 @@ private bool CheckSkipTarget(ref bool stopProcessingStack, TargetEntry currentTa
                 {
                     // If we've already dealt with this target and it didn't skip, let's log appropriately
                     // Otherwise we don't want anything more to do with it.
+                    bool success = targetResult.ResultCode == TargetResultCode.Success;
                     var skippedTargetEventArgs = new TargetSkippedEventArgs(message: null)
                     {
                         BuildEventContext = _projectLoggingContext.BuildEventContext,
@@ -562,7 +563,9 @@ private bool CheckSkipTarget(ref bool stopProcessingStack, TargetEntry currentTa
                         TargetFile = currentTargetEntry.Target.Location.File,
                         ParentTarget = currentTargetEntry.ParentEntry?.Target.Name,
                         BuildReason = currentTargetEntry.BuildReason,
-                        OriginallySucceeded = targetResult.ResultCode == TargetResultCode.Success
+                        OriginallySucceeded = success,
+                        SkipReason = success ? TargetSkipReason.PreviouslyBuiltSuccessfully : TargetSkipReason.PreviouslyBuiltUnsuccessfully,
+                        OriginalBuildEventContext = targetResult.OriginalBuildEventContext
                     };
 
                     _projectLoggingContext.LogBuildEvent(skippedTargetEventArgs);
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
index f7543d5d91d..d3a925b34a8 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs
@@ -8,6 +8,7 @@
 using System.Threading.Tasks;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Eventing;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
@@ -354,7 +355,10 @@ internal List<TargetSpecification> GetDependencies(ProjectLoggingContext project
 
             if (!condition)
             {
-                _targetResult = new TargetResult(Array.Empty<TaskItem>(), new WorkUnitResult(WorkUnitResultCode.Skipped, WorkUnitActionCode.Continue, null));
+                _targetResult = new TargetResult(
+                    Array.Empty<TaskItem>(),
+                    new WorkUnitResult(WorkUnitResultCode.Skipped, WorkUnitActionCode.Continue, null),
+                    projectLoggingContext.BuildEventContext);
                 _state = TargetEntryState.Completed;
 
                 if (!projectLoggingContext.LoggingService.OnlyLogCriticalEvents)
@@ -375,6 +379,7 @@ internal List<TargetSpecification> GetDependencies(ProjectLoggingContext project
                         TargetFile = _target.Location.File,
                         ParentTarget = ParentEntry?.Target?.Name,
                         BuildReason = BuildReason,
+                        SkipReason = TargetSkipReason.ConditionWasFalse,
                         Condition = _target.Condition,
                         EvaluatedCondition = expanded
                     };
@@ -460,8 +465,10 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re
                         Lookup lookupForExecution;
 
                         // UNDONE: (Refactor) Refactor TargetUpToDateChecker to take a logging context, not a logging service.
+                        MSBuildEventSource.Log.TargetUpToDateStart();
                         TargetUpToDateChecker dependencyAnalyzer = new TargetUpToDateChecker(requestEntry.RequestConfiguration.Project, _target, targetLoggingContext.LoggingService, targetLoggingContext.BuildEventContext);
                         DependencyAnalysisResult dependencyResult = dependencyAnalyzer.PerformDependencyAnalysis(bucket, out changedTargetInputs, out upToDateTargetInputs);
+                        MSBuildEventSource.Log.TargetUpToDateStop((int)dependencyResult);
 
                         switch (dependencyResult)
                         {
@@ -640,14 +647,11 @@ internal async Task ExecuteTarget(ITaskBuilder taskBuilder, BuildRequestEntry re
                 }
                 finally
                 {
-                       
-                    
-                        // log the last target finished since we now have the target outputs. 
-                        targetLoggingContext?.LogTargetBatchFinished(projectFullPath, targetSuccess, targetOutputItems?.Count > 0 ? targetOutputItems : null);
-                    
+                    // log the last target finished since we now have the target outputs. 
+                    targetLoggingContext?.LogTargetBatchFinished(projectFullPath, targetSuccess, targetOutputItems?.Count > 0 ? targetOutputItems : null);
                 }
 
-                _targetResult = new TargetResult(targetOutputItems.ToArray(), aggregateResult);
+                _targetResult = new TargetResult(targetOutputItems.ToArray(), aggregateResult, targetLoggingContext?.BuildEventContext);
 
                 if (aggregateResult.ResultCode == WorkUnitResultCode.Failed && aggregateResult.ActionCode == WorkUnitActionCode.Stop)
                 {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
index 335dcf77097..9013bc11272 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
@@ -233,9 +233,17 @@ out ItemDictionary<ProjectItemInstance> upToDateTargetInputs
 
                 if (result == DependencyAnalysisResult.SkipUpToDate)
                 {
-                    _loggingService.LogComment(_buildEventContext, MessageImportance.Normal,
-                        "SkipTargetBecauseOutputsUpToDate",
-                        TargetToAnalyze.Name);
+                    var skippedTargetEventArgs = new TargetSkippedEventArgs(message: null)
+                    {
+                        BuildEventContext = _buildEventContext,
+                        TargetName = TargetToAnalyze.Name,
+                        BuildReason = TargetBuiltReason.None,
+                        SkipReason = TargetSkipReason.OutputsUpToDate,
+                        OriginallySucceeded = true,
+                        Importance = MessageImportance.Normal
+                    };
+
+                    _loggingService.LogBuildEvent(skippedTargetEventArgs);
 
                     // Log the target inputs & outputs
                     if (!_loggingService.OnlyLogCriticalEvents)
@@ -337,7 +345,7 @@ private static string GetIncrementalBuildReason(DependencyAnalysisLogDetail logD
 
         /// <summary>
         /// Extract only the unique inputs and outputs from all the inputs and outputs gathered
-        /// during depedency analysis
+        /// during dependency analysis
         /// </summary>
         private void LogUniqueInputsAndOutputs()
         {
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 5390d169443..5fdd1a3e145 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -847,7 +847,9 @@ private async Task<WorkUnitResult> ExecuteInstantiatedTask(ITaskExecutionHost ta
                     }
                     else if (type == typeof(ThreadAbortException))
                     {
+#if !NET6_0_OR_GREATER && !NET6_0 // This is redundant but works around https://github.com/dotnet/sdk/issues/20700
                         Thread.ResetAbort();
+#endif
                         _continueOnError = ContinueOnError.ErrorAndStop;
 
                         // Cannot rethrow wrapped as ThreadAbortException is sealed and has no appropriate constructor
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
index 9222e6e9baf..154ace42f96 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs
@@ -22,6 +22,7 @@
 using Microsoft.Build.BackEnd.Components.Caching;
 using System.Reflection;
 using Microsoft.Build.Eventing;
+using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -33,12 +34,12 @@ internal class TaskHost :
 #if FEATURE_APPDOMAIN
         MarshalByRefObject,
 #endif
-        IBuildEngine9
+        IBuildEngine10
     {
         /// <summary>
         /// True if the "secret" environment variable MSBUILDNOINPROCNODE is set.
         /// </summary>
-        private static bool s_onlyUseOutOfProcNodes = Environment.GetEnvironmentVariable("MSBUILDNOINPROCNODE") == "1";
+        private static bool s_disableInprocNodeByEnvironmentVariable = Environment.GetEnvironmentVariable("MSBUILDNOINPROCNODE") == "1";
 
         /// <summary>
         /// Help diagnose tasks that log after they return.
@@ -104,6 +105,8 @@ internal class TaskHost :
         /// </summary>
         private int _yieldThreadId = -1;
 
+        private bool _disableInprocNode;
+
         /// <summary>
         /// Constructor
         /// </summary>
@@ -123,7 +126,11 @@ public TaskHost(IBuildComponentHost host, BuildRequestEntry requestEntry, Elemen
             _targetBuilderCallback = targetBuilderCallback;
             _continueOnError = false;
             _activeProxy = true;
-            _callbackMonitor = new Object();
+            _callbackMonitor = new object();
+            _disableInprocNode = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
+                ? s_disableInprocNodeByEnvironmentVariable || host.BuildParameters.DisableInProcNode
+                : s_disableInprocNodeByEnvironmentVariable;
+            EngineServices = new EngineServicesImpl(this);
         }
 
         /// <summary>
@@ -137,7 +144,7 @@ public bool IsRunningMultipleNodes
             get
             {
                 VerifyActiveProxy();
-                return _host.BuildParameters.MaxNodeCount > 1 || s_onlyUseOutOfProcNodes;
+                return _host.BuildParameters.MaxNodeCount > 1 || _disableInprocNode;
             }
         }
 
@@ -868,6 +875,42 @@ internal void ReleaseAllCores()
 
         #endregion
 
+        #region IBuildEngine10 Members
+
+        [Serializable]
+        private sealed class EngineServicesImpl : EngineServices
+        {
+            private readonly TaskHost _taskHost;
+
+            internal EngineServicesImpl(TaskHost taskHost)
+            {
+                _taskHost = taskHost;
+            }
+
+            /// <inheritdoc/>
+            public override bool LogsMessagesOfImportance(MessageImportance importance)
+            {
+#if FEATURE_APPDOMAIN
+                if (RemotingServices.IsTransparentProxy(_taskHost))
+                {
+                    // If the check would be a cross-domain call, chances are that it wouldn't be worth it.
+                    // Simply disable the optimization in such a case.
+                    return true;
+                }
+#endif
+                MessageImportance minimumImportance = _taskHost._taskLoggingContext?.LoggingService.MinimumRequiredMessageImportance ?? MessageImportance.Low;
+                return importance <= minimumImportance;
+
+            }
+
+            /// <inheritdoc/>
+            public override bool IsTaskInputLoggingEnabled => _taskHost._host.BuildParameters.LogTaskInputs;
+        }
+
+        public EngineServices EngineServices { get; }
+
+        #endregion
+
         /// <summary>
         /// Called by the internal MSBuild task.
         /// Does not take the lock because it is called by another request builder thread.
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index e95847208e8..65af9d8c8a7 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -14,7 +14,8 @@
 using Microsoft.Build.Experimental.ProjectCache;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-
+using Microsoft.Build.Shared.Debugging;
+using Microsoft.Build.Utilities;
 using BuildAbortedException = Microsoft.Build.Exceptions.BuildAbortedException;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using NodeLoggingContext = Microsoft.Build.BackEnd.Logging.NodeLoggingContext;
@@ -141,7 +142,7 @@ internal class Scheduler : IScheduler
         /// <summary>
         /// Flag used for debugging by forcing all scheduling to go out-of-proc.
         /// </summary>
-        private bool _forceAffinityOutOfProc;
+        internal bool ForceAffinityOutOfProc { get; private set; }
 
         /// <summary>
         /// The path into which debug files will be written.
@@ -176,9 +177,11 @@ internal class Scheduler : IScheduler
         /// </summary>
         public Scheduler()
         {
-            _debugDumpState = Environment.GetEnvironmentVariable("MSBUILDDEBUGSCHEDULER") == "1";
-            _forceAffinityOutOfProc = Environment.GetEnvironmentVariable("MSBUILDNOINPROCNODE") == "1";
-            _debugDumpPath = Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+            // Be careful moving these to Traits, changing the timing of reading environment variables has a breaking potential.
+            _debugDumpState = Traits.Instance.DebugScheduler;
+            _debugDumpPath = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
+                ? DebugUtils.DebugPath
+                : Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
             _schedulingUnlimitedVariable = Environment.GetEnvironmentVariable("MSBUILDSCHEDULINGUNLIMITED");
             _nodeLimitOffset = 0;
 
@@ -616,6 +619,10 @@ public void InitializeComponent(IBuildComponentHost host)
             _resultsCache = (IResultsCache)_componentHost.GetComponent(BuildComponentType.ResultsCache);
             _configCache = (IConfigCache)_componentHost.GetComponent(BuildComponentType.ConfigCache);
             _inprocNodeContext =  new NodeLoggingContext(_componentHost.LoggingService, InProcNodeId, true);
+            var inprocNodeDisabledViaEnvironmentVariable = Environment.GetEnvironmentVariable("MSBUILDNOINPROCNODE") == "1";
+            ForceAffinityOutOfProc = ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
+                ? inprocNodeDisabledViaEnvironmentVariable || _componentHost.BuildParameters.DisableInProcNode
+                : inprocNodeDisabledViaEnvironmentVariable;
         }
 
         /// <summary>
@@ -1355,12 +1362,6 @@ private void AssignUnscheduledRequestToNode(SchedulableRequest request, int node
             ErrorUtilities.VerifyThrowArgumentNull(responses, nameof(responses));
             ErrorUtilities.VerifyThrow(nodeId != InvalidNodeId, "Invalid node id specified.");
 
-            // Currently we cannot move certain kinds of traversals (notably solution metaprojects) to other nodes because 
-            // they only have a ProjectInstance representation, and besides these kinds of projects build very quickly 
-            // and produce more references (more work to do.)  This just verifies we do not attempt to send a traversal to
-            // an out-of-proc node because doing so is inefficient and presently will cause the engine to fail on the remote
-            // node because these projects cannot be found.
-            ErrorUtilities.VerifyThrow(nodeId == InProcNodeId || _forceAffinityOutOfProc || !IsTraversalRequest(request.BuildRequest), "Can't assign traversal request to out-of-proc node!");
             request.VerifyState(SchedulableRequestState.Unscheduled);
 
             // Determine if this node has seen our configuration before.  If not, we must send it along with this request.
@@ -1388,7 +1389,7 @@ void WarnWhenProxyBuildsGetScheduledOnOutOfProcNode()
                 if (request.IsProxyBuildRequest() && nodeId != InProcNodeId && _schedulingData.CanScheduleRequestToNode(request, InProcNodeId))
                 {
                     ErrorUtilities.VerifyThrow(
-                        _componentHost.BuildParameters.DisableInProcNode || _forceAffinityOutOfProc,
+                        _componentHost.BuildParameters.DisableInProcNode || ForceAffinityOutOfProc,
                         "Proxy requests should only get scheduled to out of proc nodes when the inproc node is disabled");
 
                     var loggedWarnings = Interlocked.CompareExchange(ref _loggedWarningsForProxyBuildsOnOutOfProcNodes, 1, 0);
@@ -1763,7 +1764,25 @@ private void HandleRequestBlockedByNewRequests(SchedulableRequest parentRequest,
 
                         if (affinityMismatch)
                         {
-                            BuildResult result = new BuildResult(request, new InvalidOperationException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("AffinityConflict", requestAffinity, existingRequestAffinity)));
+                            ErrorUtilities.VerifyThrowInternalError(
+                                _configCache.HasConfiguration(request.ConfigurationId),
+                                "A request should have a configuration if it makes it this far in the build process.");
+
+                            var config = _configCache[request.ConfigurationId];
+                            var globalProperties = string.Join(
+                                ";",
+                                config.GlobalProperties.ToDictionary().Select(kvp => $"{kvp.Key}={kvp.Value}"));
+
+                            var result = new BuildResult(
+                                request,
+                                new InvalidOperationException(
+                                    ResourceUtilities.FormatResourceStringStripCodeAndKeyword(
+                                        "AffinityConflict",
+                                        requestAffinity,
+                                        existingRequestAffinity,
+                                        config.ProjectFullPath,
+                                        globalProperties
+                                        )));
                             response = GetResponseForResult(nodeForResults, request, result);
                             responses.Add(response);
                             continue;
@@ -2097,7 +2116,7 @@ private int ComputeClosureOfWaitingRequests(SchedulableRequest request)
         /// </summary>
         private NodeAffinity GetNodeAffinityForRequest(BuildRequest request)
         {
-            if (_forceAffinityOutOfProc)
+            if (ForceAffinityOutOfProc)
             {
                 return NodeAffinity.OutOfProc;
             }
diff --git a/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs b/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs
index c719a51d2df..b8546bbe1b6 100644
--- a/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs
+++ b/src/Build/BackEnd/Components/Scheduler/SchedulingPlan.cs
@@ -10,6 +10,7 @@
 using Microsoft.Build.Shared;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -316,7 +317,7 @@ private int GetConfigWithComparison(IEnumerable<int> realConfigsToSchedule, Comp
         private void AnalyzeData()
         {
             DoRecursiveAnalysis();
-            if (!String.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDDEBUGSCHEDULER")))
+            if (Traits.Instance.DebugScheduler)
             {
                 DetermineExpensiveConfigs();
                 DetermineConfigsByNumberOfOccurrences();
diff --git a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
index 3f541b05568..e5c4095acb9 100644
--- a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
@@ -6,6 +6,7 @@
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
+using Microsoft.Build.Eventing;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
@@ -35,6 +36,8 @@ public override void ClearCaches()
 
         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
+            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);
+
             SdkResult result;
 
             if (Traits.Instance.EscapeHatches.DisableSdkResolutionCache)
@@ -66,6 +69,8 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                 loggingContext.LogWarning(null, new BuildEventFileInfo(sdkReferenceLocation), "ReferencingMultipleVersionsOfTheSameSdk", sdk.Name, result.Version, result.ElementLocation, sdk.Version);
             }
 
+            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success);
+
             return result;
         }
     }
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverException.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverException.cs
new file mode 100644
index 00000000000..d4f5b35a3d7
--- /dev/null
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverException.cs
@@ -0,0 +1,27 @@
+Ôªø// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+//
+
+using System;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.BackEnd.SdkResolution
+{
+    /// <summary>
+    /// Represents an exception that occurs when an SdkResolver throws an unhandled exception.
+    /// </summary>
+    public class SdkResolverException : Exception
+    {
+        public SdkResolver Resolver { get; private set; }
+
+        public SdkReference Sdk { get; private set; }
+
+        public SdkResolverException(string resourceName, SdkResolver resolver, SdkReference sdk, Exception innerException, params string[] args)
+            : base(string.Format(ResourceUtilities.GetResourceString(resourceName), args), innerException)
+        {
+            Resolver = resolver;
+            Sdk = sdk;
+        }
+    }
+}
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index 97b4e83a02c..9c2fca19031 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -17,7 +17,7 @@ namespace Microsoft.Build.BackEnd.SdkResolution
     internal class SdkResolverLoader
     {
 #if FEATURE_ASSEMBLYLOADCONTEXT
-        private readonly CoreClrAssemblyLoader _loader = new CoreClrAssemblyLoader();
+        private static readonly CoreClrAssemblyLoader s_loader = new CoreClrAssemblyLoader();
 #endif
 
         private readonly string IncludeDefaultResolver = Environment.GetEnvironmentVariable("MSBUILDINCLUDEDEFAULTSDKRESOLVER");
@@ -35,7 +35,7 @@ internal class SdkResolverLoader
         internal virtual IList<SdkResolver> LoadResolvers(LoggingContext loggingContext,
             ElementLocation location)
         {
-            var resolvers = !String.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ? 
+            var resolvers = !String.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
                 new List<SdkResolver> {new DefaultSdkResolver()}
                 : new List<SdkResolver>();
 
@@ -192,7 +192,7 @@ protected virtual Assembly LoadResolverAssembly(string resolverPath, LoggingCont
 #if !FEATURE_ASSEMBLYLOADCONTEXT
             return Assembly.LoadFrom(resolverPath);
 #else
-            return _loader.LoadFromPath(resolverPath);
+            return s_loader.LoadFromPath(resolverPath);
 #endif
         }
 
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 237ea72d01e..fba2c4925b1 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -11,6 +11,7 @@
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Reflection;
+using Microsoft.Build.Eventing;
 
 namespace Microsoft.Build.BackEnd.SdkResolution
 {
@@ -115,23 +116,23 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC
 
                 try
                 {
+                    MSBuildEventSource.Log.SdkResolverResolveSdkStart();
                     result = (SdkResult)sdkResolver.Resolve(sdk, context, resultFactory);
+                    MSBuildEventSource.Log.SdkResolverResolveSdkStop(sdkResolver.Name, sdk.Name, solutionPath, projectPath, result?.Path, result?.Success ?? false);
                 }
-                catch (Exception e) when (e is FileNotFoundException || (e is FileLoadException && sdkResolver.GetType().GetTypeInfo().Name.Equals("NuGetSdkResolver", StringComparison.Ordinal)))
+                catch (Exception e) when ((e is FileNotFoundException || e is FileLoadException) && sdkResolver.GetType().GetTypeInfo().Name.Equals("NuGetSdkResolver", StringComparison.Ordinal))
                 {
                     // Since we explicitly add the NuGetSdkResolver, we special case this.  The NuGetSdkResolver has special logic
                     // to load NuGet assemblies at runtime which could fail if the user is not running installed MSBuild.  Rather
                     // than give them a generic error, we want to give a more specific message.  This exception cannot be caught by
                     // the resolver itself because it is usually thrown before the class is loaded
-                    // MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}
-                    loggingContext.LogWarning(null, new BuildEventFileInfo(sdkReferenceLocation), "CouldNotRunNuGetSdkResolver", MSBuildConstants.NuGetAssemblyPathEnvironmentVariableName, e.Message);
-                    continue;
+                    // The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}
+                    throw new SdkResolverException("CouldNotRunNuGetSdkResolver", sdkResolver, sdk, e, MSBuildConstants.NuGetAssemblyPathEnvironmentVariableName, e.ToString());
                 }
                 catch (Exception e)
                 {
-                    // MSB4242: The SDK resolver "{0}" failed to run. {1}
-                    loggingContext.LogWarning(null, new BuildEventFileInfo(sdkReferenceLocation), "CouldNotRunSdkResolver", sdkResolver.Name, e.Message);
-                    continue;
+                    // The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}": {2}
+                    throw new SdkResolverException("SDKResolverFailed", sdkResolver, sdk, e, sdkResolver.Name, sdk.ToString(), e.ToString());
                 }
 
                 SetResolverState(submissionId, sdkResolver, context.State);
@@ -234,8 +235,11 @@ private void Initialize(LoggingContext loggingContext, ElementLocation location)
                     return;
                 }
 
+                MSBuildEventSource.Log.SdkResolverServiceInitializeStart();
                 _resolvers = _sdkResolverLoader.LoadResolvers(loggingContext, location);
+                MSBuildEventSource.Log.SdkResolverServiceInitializeStop(_resolvers.Count);
             }
+
         }
 
         private void SetResolverState(int submissionId, SdkResolver resolver, object state)
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index 80e36648f23..9e500181510 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -118,11 +118,6 @@ public class OutOfProcNode : INode, IBuildComponentHost, INodePacketFactory, INo
         /// </summary>
         private Exception _shutdownException;
 
-        /// <summary>
-        /// Flag indicating if we should debug communications or not.
-        /// </summary>
-        private readonly bool _debugCommunications;
-
         /// <summary>
         /// Data for the use of LegacyThreading semantics.
         /// </summary>
@@ -140,8 +135,6 @@ public OutOfProcNode()
         {
             s_isOutOfProcNode = true;
 
-            _debugCommunications = (Environment.GetEnvironmentVariable("MSBUILDDEBUGCOMM") == "1");
-
             _receivedPackets = new ConcurrentQueue<INodePacket>();
             _packetReceivedEvent = new AutoResetEvent(false);
             _shutdownEvent = new ManualResetEvent(false);
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index a72435698c9..2cc6ab1f7b4 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -131,8 +131,6 @@ internal class BuildRequestConfiguration : IEquatable<BuildRequestConfiguration>
         /// </summary>
         private string _savedCurrentDirectory;
 
-        private bool _translateEntireProjectInstanceState;
-
         #endregion
 
         /// <summary>
@@ -178,7 +176,6 @@ internal BuildRequestConfiguration(int configId, BuildRequestData data, string d
                 _project = data.ProjectInstance;
                 _projectInitialTargets = data.ProjectInstance.InitialTargets;
                 _projectDefaultTargets = data.ProjectInstance.DefaultTargets;
-                _translateEntireProjectInstanceState = data.ProjectInstance.TranslateEntireState;
 
                 if (data.PropertiesToTransfer != null)
                 {
@@ -216,7 +213,6 @@ internal BuildRequestConfiguration(int configId, ProjectInstance instance)
             _project = instance;
             _projectInitialTargets = instance.InitialTargets;
             _projectDefaultTargets = instance.DefaultTargets;
-            _translateEntireProjectInstanceState = instance.TranslateEntireState;
             IsCacheable = false;
         }
 
@@ -230,7 +226,6 @@ private BuildRequestConfiguration(int configId, BuildRequestConfiguration other)
             ErrorUtilities.VerifyThrow(other._transferredState == null, "Unexpected transferred state still set on other configuration.");
 
             _project = other._project;
-            _translateEntireProjectInstanceState = other._translateEntireProjectInstanceState;
             _transferredProperties = other._transferredProperties;
             _projectDefaultTargets = other._projectDefaultTargets;
             _projectInitialTargets = other._projectInitialTargets;
@@ -410,7 +405,6 @@ private void SetProjectBasedState(ProjectInstance project)
 
             ProjectDefaultTargets = _project.DefaultTargets;
             ProjectInitialTargets = _project.InitialTargets;
-            _translateEntireProjectInstanceState = _project.TranslateEntireState;
 
             if (IsCached)
             {
@@ -498,7 +492,7 @@ private void InitializeProject(BuildParameters buildParameters, Func<ProjectInst
             {
                 Project = loadProjectFromFile.Invoke();
             }
-            else if (_translateEntireProjectInstanceState)
+            else if (_project.TranslateEntireState)
             {
                 // projectInstance was serialized over. Finish initialization with node specific state
 
@@ -677,19 +671,12 @@ public void CacheIfPossible()
                 {
                     if (IsCacheable)
                     {
-                        ITranslator translator = GetConfigurationTranslator(TranslationDirection.WriteToStream);
-
-                        try
-                        {
-                            _project.Cache(translator);
-                            _baseLookup = null;
-
-                            IsCached = true;
-                        }
-                        finally
-                        {
-                            translator.Writer.BaseStream.Dispose();
-                        }
+                        using ITranslator translator = GetConfigurationTranslator(TranslationDirection.WriteToStream);
+
+                        _project.Cache(translator);
+                        _baseLookup = null;
+
+                        IsCached = true;
                     }
                 }
             }
@@ -712,17 +699,11 @@ public void RetrieveFromCache()
                     return;
                 }
 
-                ITranslator translator = GetConfigurationTranslator(TranslationDirection.ReadFromStream);
-                try
-                {
-                    _project.RetrieveFromCache(translator);
+                using ITranslator translator = GetConfigurationTranslator(TranslationDirection.ReadFromStream);
 
-                    IsCached = false;
-                }
-                finally
-                {
-                    translator.Reader.BaseStream.Dispose();
-                }
+                _project.RetrieveFromCache(translator);
+
+                IsCached = false;
             }
         }
 
@@ -876,17 +857,14 @@ public void Translate(ITranslator translator)
             translator.Translate(ref _toolsVersion);
             translator.Translate(ref _explicitToolsVersionSpecified);
             translator.TranslateDictionary(ref _globalProperties, ProjectPropertyInstance.FactoryForDeserialization);
-            translator.Translate(ref _translateEntireProjectInstanceState);
             translator.Translate(ref _transferredState, ProjectInstance.FactoryForDeserialization);
             translator.Translate(ref _transferredProperties, ProjectPropertyInstance.FactoryForDeserialization);
             translator.Translate(ref _resultsNodeId);
             translator.Translate(ref _savedCurrentDirectory);
             translator.TranslateDictionary(ref _savedEnvironmentVariables, StringComparer.OrdinalIgnoreCase);
 
-            // if the entire state is translated, then the transferred state, if exists, represents the full evaluation data
-            if (_translateEntireProjectInstanceState &&
-                translator.Mode == TranslationDirection.ReadFromStream &&
-                _transferredState != null)
+            // if the  entire state is translated, then the transferred state represents the full evaluation data
+            if (translator.Mode == TranslationDirection.ReadFromStream && _transferredState?.TranslateEntireState == true)
             {
                 SetProjectBasedState(_transferredState);
             }
diff --git a/src/Build/BackEnd/Shared/TargetResult.cs b/src/Build/BackEnd/Shared/TargetResult.cs
index 3eb907062e7..d94d59beda8 100644
--- a/src/Build/BackEnd/Shared/TargetResult.cs
+++ b/src/Build/BackEnd/Shared/TargetResult.cs
@@ -44,17 +44,30 @@ public class TargetResult : ITargetResult, ITranslatable
         /// </summary>
         private CacheInfo _cacheInfo;
 
+        /// <summary>
+        /// The (possibly null) <see cref="BuildEventContext"/> from the original target build
+        /// </summary>
+        private BuildEventContext _originalBuildEventContext;
+
         /// <summary>
         /// Initializes the results with specified items and result.
         /// </summary>
         /// <param name="items">The items produced by the target.</param>
         /// <param name="result">The overall result for the target.</param>
-        internal TargetResult(TaskItem[] items, WorkUnitResult result)
+        /// <param name="originalBuildEventContext">The original build event context from when the target was first built, if available.
+        /// Non-null when creating a <see cref="TargetResult"/> after building the target initially (or skipping due to false condition).
+        /// Null when the <see cref="TargetResult"/> is being created in other scenarios:
+        ///  * Target that never ran because a dependency had an error
+        ///  * in <see cref="ITargetBuilderCallback.LegacyCallTarget"/> when Cancellation was requested
+        ///  * in ProjectCache.CacheResult.ConstructBuildResult
+        /// </param>
+        internal TargetResult(TaskItem[] items, WorkUnitResult result, BuildEventContext originalBuildEventContext = null)
         {
             ErrorUtilities.VerifyThrowArgumentNull(items, nameof(items));
             ErrorUtilities.VerifyThrowArgumentNull(result, nameof(result));
             _items = items;
             _result = result;
+            _originalBuildEventContext = originalBuildEventContext;
         }
 
         /// <summary>
@@ -130,6 +143,11 @@ internal WorkUnitResult WorkUnitResult
             get => _result;
         }
 
+        /// <summary>
+        /// The (possibly null) <see cref="BuildEventContext"/> from the original target build
+        /// </summary>
+        internal BuildEventContext OriginalBuildEventContext => _originalBuildEventContext;
+
         /// <summary>
         /// Sets or gets a flag indicating whether or not a failure results should cause the build to fail.
         /// </summary>
@@ -225,22 +243,15 @@ internal void CacheItems(int configId, string targetName)
                     return;
                 }
 
-                ITranslator translator = GetResultsCacheTranslator(configId, targetName, TranslationDirection.WriteToStream);
+                using ITranslator translator = GetResultsCacheTranslator(configId, targetName, TranslationDirection.WriteToStream);
 
                 // If the translator is null, it means these results were cached once before.  Since target results are immutable once they
                 // have been created, there is no point in writing them again.
                 if (translator != null)
                 {
-                    try
-                    {
-                        TranslateItems(translator);
-                        _items = null;
-                        _cacheInfo = new CacheInfo(configId, targetName);
-                    }
-                    finally
-                    {
-                        translator.Writer.BaseStream.Dispose();
-                    }
+                    TranslateItems(translator);
+                    _items = null;
+                    _cacheInfo = new CacheInfo(configId, targetName);
                 }
             }
         }
@@ -253,6 +264,7 @@ private void InternalTranslate(ITranslator translator)
             translator.Translate(ref _result, WorkUnitResult.FactoryForDeserialization);
             translator.Translate(ref _targetFailureDoesntCauseBuildFailure);
             translator.Translate(ref _afterTargetsHaveFailed);
+            translator.TranslateOptionalBuildEventContext(ref _originalBuildEventContext);
             TranslateItems(translator);
         }
 
@@ -265,17 +277,10 @@ private void RetrieveItemsFromCache()
             {
                 if (_items == null)
                 {
-                    ITranslator translator = GetResultsCacheTranslator(_cacheInfo.ConfigId, _cacheInfo.TargetName, TranslationDirection.ReadFromStream);
-
-                    try
-                    {
-                        TranslateItems(translator);
-                        _cacheInfo = new CacheInfo();
-                    }
-                    finally
-                    {
-                        translator.Reader.BaseStream.Dispose();
-                    }
+                    using ITranslator translator = GetResultsCacheTranslator(_cacheInfo.ConfigId, _cacheInfo.TargetName, TranslationDirection.ReadFromStream);
+
+                    TranslateItems(translator);
+                    _cacheInfo = new CacheInfo();
                 }
             }
         }
@@ -320,7 +325,7 @@ private void TranslateItems(ITranslator translator)
                 ErrorUtilities.VerifyThrow(buffer != null, "Unexpected null items buffer during translation.");
 
                 using MemoryStream itemsStream = new MemoryStream(buffer, 0, buffer.Length, writable: false, publiclyVisible: true);
-                var itemTranslator = BinaryTranslator.GetReadTranslator(itemsStream, null);
+                using var itemTranslator = BinaryTranslator.GetReadTranslator(itemsStream, null);
                 _items = new TaskItem[itemsCount];
                 for (int i = 0; i < _items.Length; i++)
                 {
diff --git a/src/Build/Construction/ProjectElement.cs b/src/Build/Construction/ProjectElement.cs
index 129e9ae3f35..8327feda09e 100644
--- a/src/Build/Construction/ProjectElement.cs
+++ b/src/Build/Construction/ProjectElement.cs
@@ -415,7 +415,7 @@ public virtual void CopyFrom(ProjectElement element)
         }
 
         /// <summary>
-        /// Hook for subclasses to specify whether the given <param name="attribute"></param> should be cloned or not
+        /// Hook for subclasses to specify whether the given <paramref name="attribute"></paramref> should be cloned or not
         /// </summary>
         protected virtual bool ShouldCloneXmlAttribute(XmlAttribute attribute) => true;
 
diff --git a/src/Build/Construction/ProjectElementContainer.cs b/src/Build/Construction/ProjectElementContainer.cs
index b55ba655ff4..3c4c0d6f269 100644
--- a/src/Build/Construction/ProjectElementContainer.cs
+++ b/src/Build/Construction/ProjectElementContainer.cs
@@ -316,7 +316,7 @@ public void RemoveChild(ProjectElement child)
         /// </summary>
         /// <remarks>
         /// It is safe to modify the children in this way
-        /// during enumeration. See <cref see="RemoveChild">RemoveChild</cref>.
+        /// during enumeration. See <see cref="M:Microsoft.Build.Construction.ProjectElementContainer.RemoveChild(Microsoft.Build.Construction.ProjectElement)" />.
         /// </remarks>
         public void RemoveAllChildren()
         {
diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index cd19bb38ebc..389f1f3cf6e 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -207,8 +207,12 @@ private ProjectRootElement(ProjectRootElementCacheBase projectRootElementCache,
         /// Assumes path is already normalized.
         /// May throw InvalidProjectFileException.
         /// </summary>
-        private ProjectRootElement(string path, ProjectRootElementCacheBase projectRootElementCache,
-            bool preserveFormatting)
+        private ProjectRootElement
+            (
+                string path,
+                ProjectRootElementCacheBase projectRootElementCache,
+                bool preserveFormatting
+            )
         {
             ErrorUtilities.VerifyThrowArgumentLength(path, nameof(path));
             ErrorUtilities.VerifyThrowInternalRooted(path);
@@ -222,8 +226,6 @@ private ProjectRootElement(string path, ProjectRootElementCacheBase projectRootE
             XmlDocumentWithLocation document = LoadDocument(path, preserveFormatting, projectRootElementCache.LoadProjectsReadOnly);
 
             ProjectParser.Parse(document, this);
-
-            projectRootElementCache.AddEntry(this);
         }
 
         /// <summary>
diff --git a/src/Build/Construction/Solution/SolutionConfigurationInSolution.cs b/src/Build/Construction/Solution/SolutionConfigurationInSolution.cs
index d5e869cb5eb..e35d36a9330 100644
--- a/src/Build/Construction/Solution/SolutionConfigurationInSolution.cs
+++ b/src/Build/Construction/Solution/SolutionConfigurationInSolution.cs
@@ -14,7 +14,7 @@ public sealed class SolutionConfigurationInSolution
         /// </summary>
         internal const char ConfigurationPlatformSeparator = '|';
 
-        internal static readonly char[] ConfigurationPlatformSeparatorArray = new char[] { '|' };
+        internal static readonly char[] ConfigurationPlatformSeparatorArray = { '|' };
 
         /// <summary>
         /// Constructor
diff --git a/src/Build/Construction/Solution/SolutionFile.cs b/src/Build/Construction/Solution/SolutionFile.cs
index 364e449dcbe..f3e2c331c50 100644
--- a/src/Build/Construction/Solution/SolutionFile.cs
+++ b/src/Build/Construction/Solution/SolutionFile.cs
@@ -1384,7 +1384,6 @@ internal void ParseNestedProjects()
         internal void ParseSolutionConfigurations()
         {
             var nameValueSeparators = '=';
-            var configPlatformSeparators = new[] { SolutionConfigurationInSolution.ConfigurationPlatformSeparator };
 
             do
             {
@@ -1419,15 +1418,26 @@ internal void ParseSolutionConfigurations()
                 ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(fullConfigurationName == configurationNames[1].Trim(), "SubCategoryForSolutionParsingErrors",
                     new BuildEventFileInfo(FullPath, _currentLineNumber, 0), "SolutionParseInvalidSolutionConfigurationEntry", str);
 
-                string[] configurationPlatformParts = fullConfigurationName.Split(configPlatformSeparators);
+                var (configuration, platform) = ParseConfigurationName(fullConfigurationName, FullPath, _currentLineNumber, str);
 
-                ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(configurationPlatformParts.Length == 2, "SubCategoryForSolutionParsingErrors",
-                    new BuildEventFileInfo(FullPath, _currentLineNumber, 0), "SolutionParseInvalidSolutionConfigurationEntry", str);
-
-                _solutionConfigurations.Add(new SolutionConfigurationInSolution(configurationPlatformParts[0], configurationPlatformParts[1]));
+                _solutionConfigurations.Add(new SolutionConfigurationInSolution(configuration, platform));
             } while (true);
         }
 
+        internal static (string Configuration, string Platform) ParseConfigurationName(string fullConfigurationName, string projectPath, int lineNumber, string containingString)
+        {
+            string[] configurationPlatformParts = fullConfigurationName.Split(SolutionConfigurationInSolution.ConfigurationPlatformSeparatorArray);
+
+            ProjectFileErrorUtilities.VerifyThrowInvalidProjectFile(
+                configurationPlatformParts.Length == 2,
+                "SubCategoryForSolutionParsingErrors",
+                new BuildEventFileInfo(projectPath, lineNumber, 0),
+                "SolutionParseInvalidSolutionConfigurationEntry",
+                containingString);
+
+            return (configurationPlatformParts[0], configurationPlatformParts[1]);
+        }
+
         /// <summary>
         /// Read project configurations in solution configurations section.
         /// </summary>
diff --git a/src/Build/Construction/Solution/SolutionProjectGenerator.cs b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
index 4b1edd904a4..625352ba374 100644
--- a/src/Build/Construction/Solution/SolutionProjectGenerator.cs
+++ b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
@@ -49,6 +49,11 @@ internal class SolutionProjectGenerator
         private const string WebProjectOverrideFolder = "_PublishedWebsites";
 #endif // FEATURE_ASPNET_COMPILER
 
+        /// <summary>
+        /// Property set by VS when building projects. It's an XML containing the project configurations for ALL projects in the solution for the currently selected solution configuration.
+        /// </summary>
+        internal const string CurrentSolutionConfigurationContents = nameof(CurrentSolutionConfigurationContents);
+
         /// <summary>
         /// The set of properties all projects in the solution should be built with
         /// </summary>
@@ -66,7 +71,11 @@ internal class SolutionProjectGenerator
             "Build",
             "Clean",
             "Rebuild",
-            "Publish"
+            "Publish",
+            "ValidateSolutionConfiguration",
+            "ValidateToolsVersions",
+            "ValidateProjects",
+            "GetSolutionConfigurationContents"
             );
 
 #if FEATURE_ASPNET_COMPILER
@@ -226,6 +235,7 @@ internal static void AddPropertyGroupForSolutionConfiguration(ProjectRootElement
             };
             using (XmlWriter xw = XmlWriter.Create(solutionConfigurationContents, settings))
             {
+                // TODO: fix code clone for parsing CurrentSolutionConfiguration xml: https://github.com/dotnet/msbuild/issues/6751
                 xw.WriteStartElement("SolutionConfiguration");
 
                 // add a project configuration entry for each project in the solution
@@ -975,6 +985,10 @@ private ProjectInstance CreateTraversalInstance(string wrapperProjectToolsVersio
                 _submissionId
                 );
 
+            // Traversal meta project entire state has to be serialized as it was generated and hence
+            // does not have disk representation to load project from.
+            traversalInstance.TranslateEntireState = true;
+
             // Make way for the real ones
             foreach (string targetName in dummyTargetsForEvaluationTime)
             {
@@ -1182,6 +1196,10 @@ private ProjectInstance CreateMetaproject(ProjectInstance traversalProject, Proj
             // Create a new project instance with global properties and tools version from the existing project
             ProjectInstance metaprojectInstance = new ProjectInstance(EscapingUtilities.UnescapeAll(GetMetaprojectName(project)), traversalProject, GetMetaprojectGlobalProperties(traversalProject));
 
+            // Traversal meta project entire state has to be serialized as it was generated and hence
+            // does not have disk representation to load project from.
+            metaprojectInstance.TranslateEntireState = true;
+
             // Add the project references which must build before this one.
             AddMetaprojectReferenceItems(traversalProject, metaprojectInstance, project);
 
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index f158ca5a2bb..d842373c86c 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -43,7 +43,7 @@ namespace Microsoft.Build.Evaluation
     /// Edits to this project always update the backing XML.
     /// </summary>
     // UNDONE: (Multiple configurations.) Protect against problems when attempting to edit, after edits were made to the same ProjectRootElement either directly or through other projects evaluated from that ProjectRootElement.
-    [DebuggerDisplay("{FullPath} EffectiveToolsVersion={ToolsVersion} #GlobalProperties={_data.GlobalPropertiesDictionary.Count} #Properties={_data.Properties.Count} #ItemTypes={_data.ItemTypes.Count} #ItemDefinitions={_data.ItemDefinitions.Count} #Items={_data.Items.Count} #Targets={_data.Targets.Count}")]
+    [DebuggerDisplay("{FullPath} EffectiveToolsVersion={ToolsVersion} #GlobalProperties={implementation._data.GlobalPropertiesDictionary.Count} #Properties={implementation._data.Properties.Count} #ItemTypes={implementation._data.ItemTypes.Count} #ItemDefinitions={implementation._data.ItemDefinitions.Count} #Items={implementation._data.Items.Count} #Targets={implementation._data.Targets.Count}")]
     public class Project : ILinkableObject
     {
         /// <summary>
@@ -88,7 +88,7 @@ public class Project : ILinkableObject
         /// - <see cref="ProjectItem.SetMetadataValue(string,string)"/>
         /// - <see cref="ProjectItem.SetMetadataValue(string,string, bool)"/>
         ///
-        /// When this property is set to true, the previous item operations throw an <exception cref="InvalidOperationException"></exception>
+        /// When this property is set to true, the previous item operations throw an <see cref="InvalidOperationException" />
         /// instead of expanding the item element.
         /// </summary>
         public bool ThrowInsteadOfSplittingItemElement
@@ -461,7 +461,7 @@ private Project(string projectFile, IDictionary<string, string> globalProperties
             {
                 // If possible, clear out the XML we just loaded into the XML cache:
                 // if we had loaded the XML from disk into the cache within this constructor,
-                // and then are are bailing out because there is a typo in the XML such that 
+                // and then are are bailing out because there is a typo in the XML such that
                 // evaluation failed, we don't want to leave the bad XML in the cache;
                 // the user wouldn't be able to fix the XML file and try again.
                 if (!ExceptionHandling.IsCriticalException(ex))
@@ -2406,7 +2406,7 @@ public override bool IsBuildEnabled
             /// their previously stored value to find out, and if so perhaps decide to update their own state.
             /// Note that the number may not increase monotonically.
             ///
-            /// This number corresponds to the <seealso cref="BuildEventContext.EvaluationId"/> and can be used to connect
+            /// This number corresponds to the <see cref="BuildEventContext.EvaluationId"/> and can be used to connect
             /// evaluation logging events back to the Project instance.
             /// </summary>
             public override int LastEvaluationId => _data.EvaluationId;
@@ -2503,7 +2503,7 @@ private List<GlobResult> GetAllGlobs(List<ProjectItemElement> projectItemElement
                 // 5. <I Include="C"/>
                 // 6. <I Remove="..."/> // this remove applies to the includes at 1, 3, 5
                 // So A's applicable removes are composed of:
-                // 
+                //
                 // The applicable removes for the element at position 1 (xml element A) are composed of:
                 // - all the removes seen by the next include statement of I's type (xml element B, position 3, which appears after A in file order). In this example that's Removes at positions 4 and 6.
                 // - new removes between A and B. In this example that's Remove 2.
@@ -2634,7 +2634,7 @@ public override List<ProvenanceResult> GetItemProvenance(string itemToMatch, str
             /// <summary>
             /// See <see cref="ProjectLink.GetItemProvenance(ProjectItem, EvaluationContext)"/>.
             /// </summary>
-            /// /// <param name="item"> 
+            /// /// <param name="item">
             /// The ProjectItem object that indicates: the itemspec to match and the item type to constrain the search in.
             /// The search is also constrained on item elements appearing before the item element that produced this <paramref name="item"/>.
             /// The element that produced this <paramref name="item"/> is included in the results.
@@ -3163,7 +3163,7 @@ public override void RemoveItems(IEnumerable<ProjectItem> items)
                 ErrorUtilities.VerifyThrowArgumentNull(items, nameof(items));
 
                 // Copying to a list makes it possible to remove
-                // all items of a particular type with 
+                // all items of a particular type with
                 //   RemoveItems(p.GetItems("mytype"))
                 // without modifying the collection during enumeration.
                 var itemsList = new List<ProjectItem>(items);
@@ -3586,7 +3586,7 @@ private void ReevaluateIfNecessary(
                 EvaluationContext evaluationContext = null)
             {
                 // We will skip the evaluation if the flag is set. This will give us better performance on scenarios
-                // that we know we don't have to reevaluate. One example is project conversion bulk addfiles and set attributes. 
+                // that we know we don't have to reevaluate. One example is project conversion bulk addfiles and set attributes.
                 if (!SkipEvaluation && !ProjectCollection.SkipEvaluation && IsDirty)
                 {
                     try
@@ -3684,9 +3684,9 @@ internal void Initialize(IDictionary<string, string> globalProperties, string to
                     {
                         if (String.Equals(pair.Key, Constants.SubToolsetVersionPropertyName, StringComparison.OrdinalIgnoreCase) && subToolsetVersion != null)
                         {
-                            // if we have a sub-toolset version explicitly provided by the ProjectInstance constructor, AND a sub-toolset version provided as a global property, 
-                            // make sure that the one passed in with the constructor wins.  If there isn't a matching global property, the sub-toolset version will be set at 
-                            // a later point. 
+                            // if we have a sub-toolset version explicitly provided by the ProjectInstance constructor, AND a sub-toolset version provided as a global property,
+                            // make sure that the one passed in with the constructor wins.  If there isn't a matching global property, the sub-toolset version will be set at
+                            // a later point.
                             globalPropertiesCollection.Set(ProjectPropertyInstance.Create(pair.Key, subToolsetVersion));
                         }
                         else
@@ -4185,7 +4185,7 @@ public void InitializeForEvaluation(IToolsetProvider toolsetProvider, IFileSyste
 
                 _globalPropertiesToTreatAsLocal?.Clear();
 
-                // Include the main project in the list of imports, as this list is 
+                // Include the main project in the list of imports, as this list is
                 // used to figure out if any of them have changed.
                 RecordImport(null, Project.Xml, Project.Xml.Version, null);
 
@@ -4225,7 +4225,7 @@ out var usingDifferentToolsVersionFromProjectFile
                     SubToolsetVersion = Toolset.GenerateSubToolsetVersion(GlobalPropertiesDictionary);
                 }
 
-                // Create a task registry which will fall back on the toolset task registry if necessary.          
+                // Create a task registry which will fall back on the toolset task registry if necessary.
                 TaskRegistry = new TaskRegistry(Toolset, Project.ProjectCollection.ProjectRootElementCache);
             }
 
@@ -4235,7 +4235,7 @@ out var usingDifferentToolsVersionFromProjectFile
             /// </summary>
             public void FinishEvaluation()
             {
-                // We assume there will be no further changes to the targets collection 
+                // We assume there will be no further changes to the targets collection
                 // This also makes sure that we are thread safe
                 Targets.MakeReadOnly();
 
@@ -4254,7 +4254,7 @@ public void FinishEvaluation()
                     }
                     else
                     {
-                        // Else we'll guess that this latest one is a potential match for the next, 
+                        // Else we'll guess that this latest one is a potential match for the next,
                         // if it actually has any elements (eg., it's not a .user or .filters file)
                         if (Targets.Count > 0)
                         {
@@ -4489,7 +4489,7 @@ internal bool RemoveItem(ProjectItem item)
 
                 // This remove will not succeed if the item include was changed.
                 // If many items are modified and then removed, this will leak them
-                // until the next reevaluation.                
+                // until the next reevaluation.
                 ItemsByEvaluatedIncludeCache.Remove(item.EvaluatedInclude, item);
 
                 ItemsIgnoringCondition.Remove(item);
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 07519d583ba..8629bd94317 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -1801,6 +1801,11 @@ internal class ReusableLogger : INodeLogger, IEventSource4
             /// </summary>
             private readonly ILogger _originalLogger;
 
+            /// <summary>
+            /// Returns the logger we are wrapping.
+            /// </summary>
+            internal ILogger OriginalLogger => _originalLogger;
+
             /// <summary>
             /// The design-time event source
             /// </summary>
diff --git a/src/Build/Definition/ProjectImportPathMatch.cs b/src/Build/Definition/ProjectImportPathMatch.cs
index f31d63fb957..1c670eb06a4 100644
--- a/src/Build/Definition/ProjectImportPathMatch.cs
+++ b/src/Build/Definition/ProjectImportPathMatch.cs
@@ -62,4 +62,4 @@ internal static ProjectImportPathMatch FactoryForDeserialization(ITranslator tra
             return new ProjectImportPathMatch(translator);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Definition/Toolset.cs b/src/Build/Definition/Toolset.cs
index a4e4d21565b..77d32963bf6 100644
--- a/src/Build/Definition/Toolset.cs
+++ b/src/Build/Definition/Toolset.cs
@@ -485,7 +485,7 @@ public string DefaultSubToolsetVersion
                         return Constants.Dev10SubToolsetValue;
                     }
 
-                    // 2) Otherwise, just pick the highest available. 
+                    // 2) Otherwise, just pick the highest available.
                     SortedDictionary<Version, string> subToolsetsWithVersion = new SortedDictionary<Version, string>();
                     List<string> additionalSubToolsetNames = new List<string>();
 
@@ -499,7 +499,7 @@ public string DefaultSubToolsetVersion
                         }
                         else
                         {
-                            // if it doesn't parse to an actual version number, shrug and just add it to the end. 
+                            // if it doesn't parse to an actual version number, shrug and just add it to the end.
                             additionalSubToolsetNames.Add(subToolsetName);
                         }
                     }
@@ -538,11 +538,11 @@ internal static bool Dev10IsInstalled
                 {
                     try
                     {
-                        // Figure out whether Dev10 is currently installed using the following heuristic: 
-                        // - Check whether the overall key (installed if any version of Dev10 is installed) is there. 
-                        //   - If it's not, no version of Dev10 exists or has ever existed on this machine, so return 'false'. 
-                        //   - If it is, we know that some version of Dev10 has been installed at some point, but we don't know 
-                        //     for sure whether it's still there or not.  Check the inndividual keys for {Pro, Premium, Ultimate, 
+                        // Figure out whether Dev10 is currently installed using the following heuristic:
+                        // - Check whether the overall key (installed if any version of Dev10 is installed) is there.
+                        //   - If it's not, no version of Dev10 exists or has ever existed on this machine, so return 'false'.
+                        //   - If it is, we know that some version of Dev10 has been installed at some point, but we don't know
+                        //     for sure whether it's still there or not.  Check the inndividual keys for {Pro, Premium, Ultimate,
                         //     C# Express, VB Express, C++ Express, VWD Express, LightSwitch} 2010
                         //     - If even one of them exists, return 'true'.
                         //     - Otherwise, return 'false.
@@ -804,7 +804,7 @@ internal string GenerateSubToolsetVersion(int visualStudioVersionFromSolution)
                 }
             }
 
-            // Next, try the toolset environment properties 
+            // Next, try the toolset environment properties
             if (_environmentProperties != null)
             {
                 ProjectPropertyInstance visualStudioVersionProperty = _environmentProperties[Constants.SubToolsetVersionPropertyName];
@@ -823,8 +823,8 @@ internal string GenerateSubToolsetVersion(int visualStudioVersionFromSolution)
                 subToolsetVersion = SubToolsets.Keys.FirstOrDefault(version => visualStudioVersionFromSolutionAsVersion.Equals(VersionUtilities.ConvertToVersion(version)));
             }
 
-            // Solution version also didn't work out, so fall back to default. 
-            // If subToolsetVersion is null, there simply wasn't a matching solution version. 
+            // Solution version also didn't work out, so fall back to default.
+            // If subToolsetVersion is null, there simply wasn't a matching solution version.
             return subToolsetVersion ?? (DefaultSubToolsetVersion);
         }
 
@@ -920,12 +920,12 @@ private void InitializeProperties(ILoggingService loggingServices, BuildEventCon
                     reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.assemblyVersion, Constants.AssemblyVersion, mayBeReserved: true));
                     reservedProperties.Add(ProjectPropertyInstance.Create(ReservedPropertyNames.version, MSBuildAssemblyFileVersion.Instance.MajorMinorBuild, mayBeReserved: true));
 
-                    // Add one for the subtoolset version property -- it may or may not be set depending on whether it has already been set by the 
-                    // environment or global properties, but it's better to create a dictionary that's one too big than one that's one too small.  
+                    // Add one for the subtoolset version property -- it may or may not be set depending on whether it has already been set by the
+                    // environment or global properties, but it's better to create a dictionary that's one too big than one that's one too small.
                     int count = _environmentProperties.Count + reservedProperties.Count + Properties.Values.Count + _globalProperties.Count + 1;
 
-                    // GenerateSubToolsetVersion checks the environment and global properties, so it's safe to go ahead and gather the 
-                    // subtoolset properties here without fearing that we'll have somehow come up with the wrong subtoolset version. 
+                    // GenerateSubToolsetVersion checks the environment and global properties, so it's safe to go ahead and gather the
+                    // subtoolset properties here without fearing that we'll have somehow come up with the wrong subtoolset version.
                     string subToolsetVersion = this.GenerateSubToolsetVersion();
                     SubToolset subToolset;
                     ICollection<ProjectPropertyInstance> subToolsetProperties = null;
@@ -941,10 +941,10 @@ private void InitializeProperties(ILoggingService loggingServices, BuildEventCon
 
                     _propertyBag = new PropertyDictionary<ProjectPropertyInstance>(count);
 
-                    // Should be imported in the same order as in the evaluator:  
+                    // Should be imported in the same order as in the evaluator:
                     // - Environment
                     // - Toolset
-                    // - Subtoolset (if any) 
+                    // - Subtoolset (if any)
                     // - Global
                     _propertyBag.ImportProperties(_environmentProperties);
 
diff --git a/src/Build/Definition/ToolsetConfigurationReader.cs b/src/Build/Definition/ToolsetConfigurationReader.cs
index 5665b1aaf09..990a8b686cb 100644
--- a/src/Build/Definition/ToolsetConfigurationReader.cs
+++ b/src/Build/Definition/ToolsetConfigurationReader.cs
@@ -10,6 +10,7 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Utilities;
 using ErrorUtilities = Microsoft.Build.Shared.ErrorUtilities;
 using InvalidToolsetDefinitionException = Microsoft.Build.Exceptions.InvalidToolsetDefinitionException;
 
@@ -41,6 +42,13 @@ internal class ToolsetConfigurationReader : ToolsetReader
         /// </summary>
         private static readonly char[] s_separatorForExtensionsPathSearchPaths = MSBuildConstants.SemicolonChar;
 
+        /// <summary>
+        /// Caching MSBuild exe configuration.
+        /// Used only by ReadApplicationConfiguration factory function (default) as oppose to unit tests config factory functions
+        /// which must not cache configs.
+        /// </summary>
+        private static readonly Lazy<Configuration> s_configurationCache = new Lazy<Configuration>(ReadOpenMappedExeConfiguration);
+
         /// <summary>
         /// Cached values of tools version -> project import search paths table
         /// </summary>
@@ -250,6 +258,18 @@ private Dictionary<string, ProjectImportPathMatch> ComputeDistinctListOfSearchPa
         /// Unit tests wish to avoid reading (nunit.exe) application configuration file.
         /// </summary>
         private static Configuration ReadApplicationConfiguration()
+        {
+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))
+            {
+                return s_configurationCache.Value;
+            }
+            else
+            {
+                return ReadOpenMappedExeConfiguration();
+            }
+        }
+
+        private static Configuration ReadOpenMappedExeConfiguration()
         {
             // When running from the command-line or from VS, use the msbuild.exe.config file.
             if (BuildEnvironmentHelper.Instance.Mode != BuildEnvironmentMode.None &&
diff --git a/src/Build/Definition/ToolsetRegistryReader.cs b/src/Build/Definition/ToolsetRegistryReader.cs
index e2081dc5ad7..d49b10b1cf2 100644
--- a/src/Build/Definition/ToolsetRegistryReader.cs
+++ b/src/Build/Definition/ToolsetRegistryReader.cs
@@ -323,7 +323,7 @@ private static string GetValue(RegistryKeyWrapper wrapper, string valueName)
                 object result = wrapper.GetValue(valueName);
 
                 // RegistryKey.GetValue returns null if the value is not present
-                // and String.Empty if the value is present and no data is defined. 
+                // and String.Empty if the value is present and no data is defined.
                 // We preserve this distinction, because a string property in the registry with
                 // no value really has an empty string for a value (which is a valid property value)
                 // rather than null for a value (which is an invalid property value)
diff --git a/src/Build/Evaluation/Context/EvaluationContext.cs b/src/Build/Evaluation/Context/EvaluationContext.cs
index 470b4f0cb1e..827d9465d75 100644
--- a/src/Build/Evaluation/Context/EvaluationContext.cs
+++ b/src/Build/Evaluation/Context/EvaluationContext.cs
@@ -91,7 +91,7 @@ public static EvaluationContext Create(SharingPolicy policy, MSBuildFileSystemBa
         {
             var context = new EvaluationContext(
                 policy,
-                fileSystem == null ? null : new MSBuildFileSystemAdapter(fileSystem));
+                fileSystem);
 
             TestOnlyHookOnCreate?.Invoke(context);
 
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 521a3ed2ac8..712307191f4 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -627,7 +627,7 @@ private void Evaluate()
                 }
 
                 _data.InitialTargets = initialTargets;
-                MSBuildEventSource.Log.EvaluatePass1Stop(projectFile, _projectRootElement.Properties.Count, _projectRootElement.Imports.Count);
+                MSBuildEventSource.Log.EvaluatePass1Stop(projectFile);
                 // Pass2: evaluate item definitions
                 // Don't box via IEnumerator and foreach; cache count so not to evaluate via interface each iteration
                 MSBuildEventSource.Log.EvaluatePass2Start(projectFile);
@@ -641,7 +641,7 @@ private void Evaluate()
                         }
                     }
                 }
-                MSBuildEventSource.Log.EvaluatePass2Stop(projectFile, _itemDefinitionGroupElements.Count);
+                MSBuildEventSource.Log.EvaluatePass2Stop(projectFile);
                 LazyItemEvaluator<P, I, M, D> lazyEvaluator = null;
                 using (_evaluationProfiler.TrackPass(EvaluationPass.Items))
                 {
@@ -684,7 +684,7 @@ private void Evaluate()
                     lazyEvaluator = null;
                 }
 
-                MSBuildEventSource.Log.EvaluatePass3Stop(projectFile, _itemGroupElements.Count);
+                MSBuildEventSource.Log.EvaluatePass3Stop(projectFile);
 
                 // Pass4: evaluate using-tasks
                 MSBuildEventSource.Log.EvaluatePass4Start(projectFile);
@@ -696,7 +696,7 @@ private void Evaluate()
                     }
                 }
 
-                // If there was no DefaultTargets attribute found in the depth first pass, 
+                // If there was no DefaultTargets attribute found in the depth first pass,
                 // use the name of the first target. If there isn't any target, don't error until build time.
 
                 if (_data.DefaultTargets == null)
@@ -714,7 +714,7 @@ private void Evaluate()
                 Dictionary<string, List<TargetSpecification>> targetsWhichRunAfterByTarget = new Dictionary<string, List<TargetSpecification>>(StringComparer.OrdinalIgnoreCase);
                 LinkedList<ProjectTargetElement> activeTargetsByEvaluationOrder = new LinkedList<ProjectTargetElement>();
                 Dictionary<string, LinkedListNode<ProjectTargetElement>> activeTargets = new Dictionary<string, LinkedListNode<ProjectTargetElement>>(StringComparer.OrdinalIgnoreCase);
-                MSBuildEventSource.Log.EvaluatePass4Stop(projectFile, _usingTaskElements.Count);
+                MSBuildEventSource.Log.EvaluatePass4Stop(projectFile);
 
                 using (_evaluationProfiler.TrackPass(EvaluationPass.Targets))
                 {
@@ -748,7 +748,7 @@ private void Evaluate()
 
                     if (Traits.Instance.EscapeHatches.DebugEvaluation)
                     {
-                        // This is so important for VS performance it's worth always tracing; accidentally having 
+                        // This is so important for VS performance it's worth always tracing; accidentally having
                         // inconsistent sets of global properties will cause reevaluations, which are wasteful and incorrect
                         if (_projectRootElement.Count > 0) // VB/C# will new up empty projects; they aren't worth recording
                         {
@@ -773,7 +773,7 @@ private void Evaluate()
                     }
 
                     _data.FinishEvaluation();
-                    MSBuildEventSource.Log.EvaluatePass5Stop(projectFile, targetElementsCount);
+                    MSBuildEventSource.Log.EvaluatePass5Stop(projectFile);
                 }
             }
 
@@ -1002,7 +1002,7 @@ private void EvaluateUsingTaskElement(string directoryOfImportingFile, ProjectUs
         /// </summary>
         private void ReadTargetElement(ProjectTargetElement targetElement, LinkedList<ProjectTargetElement> activeTargetsByEvaluationOrder, Dictionary<string, LinkedListNode<ProjectTargetElement>> activeTargets)
         {
-            // If we already have read a target instance for this element, use that. 
+            // If we already have read a target instance for this element, use that.
             ProjectTargetInstance targetInstance = targetElement.TargetInstance ?? ReadNewTargetElement(targetElement, _projectSupportsReturnsAttribute[(ProjectRootElement)targetElement.Parent], _evaluationProfiler);
 
             string targetName = targetElement.Name;
@@ -1196,9 +1196,9 @@ private void AddToolsetProperties()
             }
             else
             {
-                // Make the subtoolset version itself available as a property -- but only if it's not already set. 
+                // Make the subtoolset version itself available as a property -- but only if it's not already set.
                 // Because some people may be depending on this value even if there isn't a matching sub-toolset,
-                // set the property even if there is no matching sub-toolset.  
+                // set the property even if there is no matching sub-toolset.
                 if (!_data.Properties.Contains(Constants.SubToolsetVersionPropertyName))
                 {
                     _data.SetProperty(Constants.SubToolsetVersionPropertyName, _data.SubToolsetVersion, false /* NOT global property */, false /* may NOT be a reserved name */);
@@ -1253,8 +1253,8 @@ private void EvaluatePropertyElement(ProjectPropertyElement propertyElement)
             using (_evaluationProfiler.TrackElement(propertyElement))
             {
                 // Global properties cannot be overridden.  We silently ignore them if we try.  Legacy behavior.
-                // That is, unless this global property has been explicitly labeled as one that we want to treat as overridable for the duration 
-                // of this project (or import). 
+                // That is, unless this global property has been explicitly labeled as one that we want to treat as overridable for the duration
+                // of this project (or import).
                 if (
                         ((IDictionary<string, ProjectPropertyInstance>)_data.GlobalPropertiesDictionary).ContainsKey(propertyElement.Name) &&
                         !_data.GlobalPropertiesToTreatAsLocal.Contains(propertyElement.Name)
@@ -1785,7 +1785,16 @@ static string EvaluateProperty(string value, IElementLocation location,
                 }
 
                 // Combine SDK path with the "project" relative path
-                sdkResult = _sdkResolverService.ResolveSdk(_submissionId, sdkReference, _evaluationLoggingContext, importElement.Location, solutionPath, projectPath, _interactive, _isRunningInVisualStudio);
+                try
+                {
+                    sdkResult = _sdkResolverService.ResolveSdk(_submissionId, sdkReference, _evaluationLoggingContext, importElement.Location, solutionPath, projectPath, _interactive, _isRunningInVisualStudio);
+                }
+                catch (SdkResolverException e)
+                {
+                    // We throw using e.Message because e.Message already contains the stack trace
+                    // https://github.com/dotnet/msbuild/pull/6763
+                    ProjectErrorUtilities.ThrowInvalidProject(importElement.SdkLocation, "SDKResolverCriticalFailure", e.Message);
+                }
 
                 if (!sdkResult.Success)
                 {
@@ -1930,8 +1939,6 @@ ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)
                     }
                 }
 
-                _projectRootElementCache.AddEntry(project);
-
                 return project;
             }
 
@@ -2282,8 +2289,8 @@ private LoadImportsResult ExpandAndLoadImportsFromUnescapedImportExpression(stri
                         }
                     }
 
-                    // Because these expressions will never be expanded again, we 
-                    // can store the unescaped value. The only purpose of escaping is to 
+                    // Because these expressions will never be expanded again, we
+                    // can store the unescaped value. The only purpose of escaping is to
                     // avoid undesired splitting or expansion.
                     _importsSeen.Add(importFileUnescaped, importElement);
                 }
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 80ddea0b0c2..fe397e4469a 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -610,7 +610,7 @@ private static bool IsValidPropertyName(string propertyName)
         /// </summary>
         private static bool IsTruncationEnabled(ExpanderOptions options)
         {
-            return (options & ExpanderOptions.Truncate) != 0 && !Traits.Instance.EscapeHatches.DoNotTruncateConditions && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_8);
+            return (options & ExpanderOptions.Truncate) != 0 && !Traits.Instance.EscapeHatches.DoNotTruncateConditions;
         }
 
         /// <summary>
@@ -1759,7 +1759,7 @@ internal static ExpressionShredder.ItemExpressionCapture ExpandSingleItemVectorE
                 }
 
                 List<ExpressionShredder.ItemExpressionCapture> matches;
-                if (s_invariantCompareInfo.IndexOf(expression, '@') == -1)
+                if (expression.IndexOf('@') == -1)
                 {
                     return null;
                 }
@@ -2539,7 +2539,7 @@ internal static IEnumerable<Pair<string, S>> Metadata(Expander<P, I> expander, I
                             {
                                 // It may be that the itemspec has unescaped ';'s in it so we need to split here to handle
                                 // that case.
-                                if (s_invariantCompareInfo.IndexOf(metadataValue, ';') >= 0)
+                                if (metadataValue.IndexOf(';') >= 0)
                                 {
                                     var splits = ExpressionShredder.SplitSemiColonSeparatedList(metadataValue);
 
@@ -3352,6 +3352,12 @@ internal object Execute(object objectInstance, IPropertyProvider<T> properties,
                     }
                     else
                     {
+                        // Check that the function that we're going to call is valid to call
+                        if (!IsInstanceMethodAvailable(_methodMethodName))
+                        {
+                            ProjectErrorUtilities.ThrowInvalidProject(elementLocation, "InvalidFunctionMethodUnavailable", _methodMethodName, _receiverType.FullName);
+                        }
+
                         _bindingFlags |= BindingFlags.Instance;
 
                         // The object that we're about to call methods on may have escaped characters
@@ -5017,6 +5023,19 @@ private static bool IsStaticMethodAvailable(Type receiverType, string methodName
                 return AvailableStaticMethods.GetTypeInformationFromTypeCache(receiverType.FullName, methodName) != null;
             }
 
+            [MethodImpl(MethodImplOptions.AggressiveInlining)]
+            private static bool IsInstanceMethodAvailable(string methodName)
+            {
+                if (Traits.Instance.EnableAllPropertyFunctions)
+                {
+                    // anything goes
+                    return true;
+                }
+
+                // This could be expanded to an allow / deny list.
+                return methodName != "GetType";
+            }
+
             /// <summary>
             /// Construct and instance of objectType based on the constructor or method arguments provided.
             /// Arguments must never be null.
diff --git a/src/Build/Evaluation/ExpressionShredder.cs b/src/Build/Evaluation/ExpressionShredder.cs
index aa5f8b40442..ffa04158d9d 100644
--- a/src/Build/Evaluation/ExpressionShredder.cs
+++ b/src/Build/Evaluation/ExpressionShredder.cs
@@ -65,7 +65,7 @@ internal static SemiColonTokenizer SplitSemiColonSeparatedList(string expression
         /// where metadata key is like "itemname.metadataname" or "metadataname".
         /// PERF: Tables are null if there are no entries, because this is quite a common case.
         /// </summary>
-        internal static ItemsAndMetadataPair GetReferencedItemNamesAndMetadata(List<string> expressions)
+        internal static ItemsAndMetadataPair GetReferencedItemNamesAndMetadata(IEnumerable<string> expressions)
         {
             ItemsAndMetadataPair pair = new ItemsAndMetadataPair(null, null);
 
diff --git a/src/Build/Evaluation/ItemDataCollectionValue.cs b/src/Build/Evaluation/ItemDataCollectionValue.cs
new file mode 100644
index 00000000000..15807cc996d
--- /dev/null
+++ b/src/Build/Evaluation/ItemDataCollectionValue.cs
@@ -0,0 +1,116 @@
+Ôªø// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Evaluation
+{
+    /// <summary>
+    /// An efficient multi-value wrapper holding one or more items.
+    /// </summary>
+    internal struct ItemDataCollectionValue<I>
+    {
+        /// <summary>
+        /// A non-allocating enumerator for the multi-value.
+        /// </summary>
+        public struct Enumerator : IEnumerator<I>
+        {
+            private object _value;
+            private int _index;
+
+            public Enumerator(object value)
+            {
+                _value = value;
+                _index = -1;
+            }
+
+            public I Current => (_value is IList<I> list) ? list[_index] : (I)_value;
+            object System.Collections.IEnumerator.Current => Current;
+
+            public void Dispose()
+            { }
+
+            public bool MoveNext()
+            {
+                // If value is not a list, it is either null or a single item.
+                int count = (_value is IList<I> list) ? list.Count : (_value is null ? 0 : 1);
+                if (_index + 1 < count)
+                {
+                    _index++;
+                    return true;
+                }
+                return false;
+            }
+
+            public void Reset()
+            {
+                _index = -1;
+            }
+        }
+
+        /// <summary>
+        /// Holds one value or a list of values.
+        /// </summary>
+        private object _value;
+
+        public bool IsEmpty => _value == null || (_value is List<I> list && list.Count == 0);
+
+        public ItemDataCollectionValue(I item)
+        {
+            _value = item;
+        }
+
+        public void Add(I item)
+        {
+            if (_value is null)
+            {
+                _value = item;
+            }
+            else
+            {
+                if (_value is not List<I> list)
+                {
+                    list = new List<I>()
+                    {
+                        (I)_value
+                    };
+                    _value = list;
+                }
+                list.Add(item);
+            }
+        }
+
+        public void Delete(I item)
+        {
+            if (_value is List<I> list)
+            {
+                list.Remove(item);
+            }
+            else if (object.Equals(_value, item))
+            {
+                _value = null;
+            }
+        }
+
+        public void Replace(I oldItem, I newItem)
+        {
+            if (_value is List<I> list)
+            {
+                int index = list.IndexOf(oldItem);
+                if (index >= 0)
+                {
+                    list[index] = newItem;
+                }
+            }
+            else if (object.Equals(_value, oldItem))
+            {
+                _value = newItem;
+            }
+        }
+
+        public Enumerator GetEnumerator()
+        {
+            return new Enumerator(_value);
+        }
+    }
+}
diff --git a/src/Build/Evaluation/ItemSpec.cs b/src/Build/Evaluation/ItemSpec.cs
index 7a1cb4db89b..fbc0b6f6b1a 100644
--- a/src/Build/Evaluation/ItemSpec.cs
+++ b/src/Build/Evaluation/ItemSpec.cs
@@ -85,6 +85,11 @@ public override bool IsMatch(string itemToMatch)
                 return ReferencedItems.Any(v => v.ItemAsValueFragment.IsMatch(itemToMatch));
             }
 
+            public override IEnumerable<string> GetReferencedItems()
+            {
+                return ReferencedItems.Select(v => EscapingUtilities.UnescapeAll(v.ItemAsValueFragment.TextFragment));
+            }
+
             public override IMSBuildGlob ToMSBuildGlob()
             {
                 return MsBuildGlob;
@@ -316,6 +321,48 @@ public IEnumerable<ItemSpecFragment> FragmentsMatchingItem(string itemToMatch, o
             return result;
         }
 
+        /// <summary>
+        /// Returns a list of normalized paths that are common between this itemspec and keys of the given dictionary.
+        /// </summary>
+        /// <param name="itemsByNormalizedValue">The dictionary to match this itemspec against.</param>
+        /// <returns>The keys of <paramref name="itemsByNormalizedValue"/> that are also referenced by this itemspec.</returns>
+        public IList<string> IntersectsWith(IReadOnlyDictionary<string, ItemDataCollectionValue<I>> itemsByNormalizedValue)
+        {
+            IList<string> matches = null;
+
+            foreach (var fragment in Fragments)
+            {
+                IEnumerable<string> referencedItems = fragment.GetReferencedItems();
+                if (referencedItems != null)
+                {
+                    // The fragment can enumerate its referenced items, we can do dictionary lookups.
+                    foreach (var spec in referencedItems)
+                    {
+                        string key = FileUtilities.NormalizePathForComparisonNoThrow(spec, fragment.ProjectDirectory);
+                        if (itemsByNormalizedValue.TryGetValue(key, out var multiValue))
+                        {
+                            matches ??= new List<string>();
+                            matches.Add(key);
+                        }
+                    }
+                }
+                else
+                {
+                    // The fragment cannot enumerate its referenced items. Iterate over the dictionary and test each item.
+                    foreach (var kvp in itemsByNormalizedValue)
+                    {
+                        if (fragment.IsMatchNormalized(kvp.Key))
+                        {
+                            matches ??= new List<string>();
+                            matches.Add(kvp.Key);
+                        }
+                    }
+                }
+            }
+
+            return matches ?? Array.Empty<string>();
+        }
+
         /// <summary>
         ///     Return an MSBuildGlob that represents this ItemSpec.
         /// </summary>
@@ -415,6 +462,16 @@ public virtual bool IsMatch(string itemToMatch)
             return FileMatcher.IsMatch(itemToMatch);
         }
 
+        public virtual bool IsMatchNormalized(string normalizedItemToMatch)
+        {
+            return FileMatcher.IsMatchNormalized(normalizedItemToMatch);
+        }
+
+        public virtual IEnumerable<string> GetReferencedItems()
+        {
+            return Enumerable.Repeat(EscapingUtilities.UnescapeAll(TextFragment), 1);
+        }
+
         public virtual IMSBuildGlob ToMSBuildGlob()
         {
             return MsBuildGlob;
@@ -446,6 +503,12 @@ public GlobFragment(string textFragment, string projectDirectory)
         {
         }
 
+        public override IEnumerable<string> GetReferencedItems()
+        {
+            // This fragment cannot efficiently enumerate its referenced items.
+            return null;
+        }
+
         /// <summary>
         /// True if TextFragment starts with /**/ or a variation thereof with backslashes.
         /// </summary>
@@ -462,7 +525,7 @@ public GlobFragment(string textFragment, string projectDirectory)
     /// on multiple metadata. If one item specifies NotTargetFramework to be net46 and TargetFramework to
     /// be netcoreapp3.1, we wouldn't want to match that to an item with TargetFramework 46 and
     /// NotTargetFramework netcoreapp3.1.
-    /// 
+    ///
     /// Implementing this as a list of sets where each metadatum key has its own set also would not work
     /// because different items could match on different metadata, and we want to check to see if any
     /// single item matches on all the metadata. As an example, consider this scenario:
@@ -474,10 +537,10 @@ public GlobFragment(string textFragment, string projectDirectory)
     /// should match none of them because Forgind doesn't match all three metadata of any of the items.
     /// With a list of sets, Forgind would match Baby on BadAt, Child on GoodAt, and Adolescent on OkAt,
     /// and Forgind would be erroneously removed.
-    /// 
+    ///
     /// With a Trie as below, Items specify paths in the tree, so going to any child node eliminates all
     /// items that don't share that metadatum. This ensures the match is proper.
-    /// 
+    ///
     /// Todo: Tries naturally can have different shapes depending on in what order the metadata are considered.
     /// Specifically, if all the items share a single metadata value for the one metadatum and have different
     /// values for a second metadatum, it will have only one node more than the number of items if the first
diff --git a/src/Build/Evaluation/LazyItemEvaluator.IItemOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IItemOperation.cs
index 66f927b4025..40ee16b1d88 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IItemOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IItemOperation.cs
@@ -9,7 +9,7 @@ internal partial class LazyItemEvaluator<P, I, M, D>
     {
         internal interface IItemOperation
         {
-            void Apply(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore);
+            void Apply(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
index 233156392bd..da5f61449b6 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs
@@ -6,6 +6,7 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
+using Microsoft.CodeAnalysis.Collections;
 using System;
 using System.Collections.Generic;
 using System.Collections.Immutable;
@@ -21,7 +22,7 @@ class IncludeOperation : LazyItemOperation
             
             readonly string _rootDirectory;
 
-            readonly ImmutableList<string> _excludes;
+            readonly ImmutableSegmentedList<string> _excludes;
 
             readonly ImmutableList<ProjectMetadataElement> _metadata;
 
@@ -35,7 +36,7 @@ public IncludeOperation(IncludeOperationBuilder builder, LazyItemEvaluator<P, I,
                 _metadata = builder.Metadata.ToImmutable();
             }
 
-            protected override ImmutableList<I> SelectItems(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            protected override ImmutableList<I> SelectItems(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
                 var itemsToAdd = ImmutableList.CreateBuilder<I>();
 
@@ -92,7 +93,7 @@ protected override ImmutableList<I> SelectItems(ImmutableList<ItemData>.Builder
                     {
                         // If this item is behind a false condition and represents a full drive/filesystem scan, expanding it is
                         // almost certainly undesired. It should be skipped to avoid evaluation taking an excessive amount of time.
-                        bool skipGlob = !_conditionResult && globFragment.IsFullFileSystemScan && !Traits.Instance.EscapeHatches.AlwaysEvaluateDangerousGlobs && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_8);
+                        bool skipGlob = !_conditionResult && globFragment.IsFullFileSystemScan && !Traits.Instance.EscapeHatches.AlwaysEvaluateDangerousGlobs;
                         if (!skipGlob)
                         {
                             string glob = globFragment.TextFragment;
@@ -153,7 +154,7 @@ protected override void MutateItems(ImmutableList<I> items)
                 DecorateItemsWithMetadata(items.Select(i => new ItemBatchingContext(i)), _metadata);
             }
 
-            protected override void SaveItems(ImmutableList<I> items, ImmutableList<ItemData>.Builder listBuilder)
+            protected override void SaveItems(ImmutableList<I> items, OrderedItemDataCollection.Builder listBuilder)
             {
                 foreach (var item in items)
                 {
@@ -167,7 +168,7 @@ class IncludeOperationBuilder : OperationBuilderWithMetadata
             public int ElementOrder { get; set; }
             public string RootDirectory { get; set; }
 
-            public ImmutableList<string>.Builder Excludes { get; } = ImmutableList.CreateBuilder<string>();
+            public ImmutableSegmentedList<string>.Builder Excludes { get; } = ImmutableSegmentedList.CreateBuilder<string>();
 
             public IncludeOperationBuilder(ProjectItemElement itemElement, bool conditionResult) : base(itemElement, conditionResult)
             {
diff --git a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
index b072a36f854..288d11ce9b9 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs
@@ -51,7 +51,7 @@ protected LazyItemOperation(OperationBuilder builder, LazyItemEvaluator<P, I, M,
 
             protected EngineFileUtilities EngineFileUtilities => _lazyEvaluator.EngineFileUtilities;
 
-            public void Apply(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            public void Apply(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
                 MSBuildEventSource.Log.ApplyLazyItemOperationsStart(_itemElement.ItemType);
                 using (_lazyEvaluator._evaluationProfiler.TrackElement(_itemElement))
@@ -61,7 +61,7 @@ public void Apply(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<
                 MSBuildEventSource.Log.ApplyLazyItemOperationsStop(_itemElement.ItemType);
             }
 
-            protected virtual void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            protected virtual void ApplyImpl(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
                 var items = SelectItems(listBuilder, globsToIgnore);
                 MutateItems(items);
@@ -71,7 +71,7 @@ protected virtual void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, Im
             /// <summary>
             /// Produce the items to operate on. For example, create new ones or select existing ones
             /// </summary>
-            protected virtual ImmutableList<I> SelectItems(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            protected virtual ImmutableList<I> SelectItems(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
                 return listBuilder.Select(itemData => itemData.Item)
                                   .ToImmutableList();
@@ -80,7 +80,7 @@ protected virtual ImmutableList<I> SelectItems(ImmutableList<ItemData>.Builder l
             // todo Refactoring: MutateItems should clone each item before mutation. See https://github.com/Microsoft/msbuild/issues/2328
             protected virtual void MutateItems(ImmutableList<I> items) { }
 
-            protected virtual void SaveItems(ImmutableList<I> items, ImmutableList<ItemData>.Builder listBuilder) { }
+            protected virtual void SaveItems(ImmutableList<I> items, OrderedItemDataCollection.Builder listBuilder) { }
 
             private IList<I> GetReferencedItems(string itemType, ImmutableHashSet<string> globsToIgnore)
             {
@@ -230,7 +230,6 @@ protected void DecorateItemsWithMetadata(IEnumerable<ItemBatchingContext> itemBa
                         // End of legal area for metadata expressions.
                         _expander.Metadata = null;
                     }
-
                     // End of pseudo batching
                     ////////////////////////////////////////////////////
                     // Start of old code
@@ -283,17 +282,18 @@ protected void DecorateItemsWithMetadata(IEnumerable<ItemBatchingContext> itemBa
                 }
             }
 
-            protected bool NeedToExpandMetadataForEachItem(ImmutableList<ProjectMetadataElement> metadata, out ItemsAndMetadataPair itemsAndMetadataFound)
+            private static IEnumerable<string> GetMetadataValuesAndConditions(ImmutableList<ProjectMetadataElement> metadata)
             {
-                List<string> values = new List<string>(metadata.Count * 2);
-
                 foreach (var metadataElement in metadata)
                 {
-                    values.Add(metadataElement.Value);
-                    values.Add(metadataElement.Condition);
+                    yield return metadataElement.Value;
+                    yield return metadataElement.Condition;
                 }
+            }
 
-                itemsAndMetadataFound = ExpressionShredder.GetReferencedItemNamesAndMetadata(values);
+            protected bool NeedToExpandMetadataForEachItem(ImmutableList<ProjectMetadataElement> metadata, out ItemsAndMetadataPair itemsAndMetadataFound)
+            {
+                itemsAndMetadataFound = ExpressionShredder.GetReferencedItemNamesAndMetadata(GetMetadataValuesAndConditions(metadata));
 
                 bool needToExpandMetadataForEachItem = false;
 
diff --git a/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs b/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
new file mode 100644
index 00000000000..e56334b81a7
--- /dev/null
+++ b/src/Build/Evaluation/LazyItemEvaluator.OrderedItemDataCollection.cs
@@ -0,0 +1,218 @@
+Ôªø// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+using System.Collections.Generic;
+using System.Collections.Immutable;
+
+namespace Microsoft.Build.Evaluation
+{
+    internal partial class LazyItemEvaluator<P, I, M, D>
+    {
+        /// <summary>
+        /// A collection of ItemData that maintains insertion order and internally optimizes some access patterns, e.g. bulk removal
+        /// based on normalized item values.
+        /// </summary>
+        internal sealed class OrderedItemDataCollection
+        {
+            #region Inner types
+
+            /// <summary>
+            /// A mutable and enumerable version of <see cref="OrderedItemDataCollection"/>.
+            /// </summary>
+            internal sealed class Builder : IEnumerable<ItemData>
+            {
+                /// <summary>
+                /// The list of items in the collection. Defines the enumeration order.
+                /// </summary>
+                private ImmutableList<ItemData>.Builder _listBuilder;
+
+                /// <summary>
+                /// A dictionary of items keyed by their normalized value.
+                /// </summary>
+                private Dictionary<string, ItemDataCollectionValue<I>> _dictionaryBuilder;
+
+                internal Builder(ImmutableList<ItemData>.Builder listBuilder)
+                {
+                    _listBuilder = listBuilder;
+                }
+
+                #region IEnumerable implementation
+
+                ImmutableList<ItemData>.Enumerator GetEnumerator() => _listBuilder.GetEnumerator();
+                IEnumerator<ItemData> IEnumerable<ItemData>.GetEnumerator() => _listBuilder.GetEnumerator();
+
+                System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => _listBuilder.GetEnumerator();
+
+                #endregion
+
+                public int Count => _listBuilder.Count;
+
+                public ItemData this[int index]
+                {
+                    get { return _listBuilder[index]; }
+                    set
+                    {
+                        // Update the dictionary if it exists.
+                        if (_dictionaryBuilder is not null)
+                        {
+                            ItemData oldItemData = _listBuilder[index];
+                            string oldNormalizedValue = oldItemData.NormalizedItemValue;
+                            string newNormalizedValue = value.NormalizedItemValue;
+                            if (!string.Equals(oldNormalizedValue, newNormalizedValue, StringComparison.OrdinalIgnoreCase))
+                            {
+                                // Normalized values are different - delete from the old entry and add to the new entry.
+                                ItemDataCollectionValue<I> oldDictionaryEntry = _dictionaryBuilder[oldNormalizedValue];
+                                oldDictionaryEntry.Delete(oldItemData.Item);
+                                if (oldDictionaryEntry.IsEmpty)
+                                {
+                                    _dictionaryBuilder.Remove(oldNormalizedValue);
+                                }
+                                else
+                                {
+                                    _dictionaryBuilder[oldNormalizedValue] = oldDictionaryEntry;
+                                }
+
+                                ItemDataCollectionValue<I> newDictionaryEntry = _dictionaryBuilder[newNormalizedValue];
+                                newDictionaryEntry.Add(value.Item);
+                                _dictionaryBuilder[newNormalizedValue] = newDictionaryEntry;
+
+                            }
+                            else
+                            {
+                                // Normalized values are the same - replace the item in the entry.
+                                ItemDataCollectionValue<I> dictionaryEntry = _dictionaryBuilder[newNormalizedValue];
+                                dictionaryEntry.Replace(oldItemData.Item, value.Item);
+                                _dictionaryBuilder[newNormalizedValue] = dictionaryEntry;
+                            }
+                        }
+                        _listBuilder[index] = value;
+                    }
+                }
+
+                /// <summary>
+                /// Gets or creates a dictionary keyed by normalized values.
+                /// </summary>
+                public Dictionary<string, ItemDataCollectionValue<I>> Dictionary
+                {
+                    get
+                    {
+                        if (_dictionaryBuilder == null)
+                        {
+                            _dictionaryBuilder = new Dictionary<string, ItemDataCollectionValue<I>>(StringComparer.OrdinalIgnoreCase);
+                            for (int i = 0; i < _listBuilder.Count; i++)
+                            {
+                                ItemData itemData = _listBuilder[i];
+                                AddToDictionary(ref itemData);
+                                _listBuilder[i] = itemData;
+                            }
+                        }
+                        return _dictionaryBuilder;
+                    }
+                }
+
+                public void Add(ItemData data)
+                {
+                    if (_dictionaryBuilder is not null)
+                    {
+                        AddToDictionary(ref data);
+                    }
+                    _listBuilder.Add(data);
+                }
+
+                public void Clear()
+                {
+                    _listBuilder.Clear();
+                    _dictionaryBuilder?.Clear();
+                }
+
+                /// <summary>
+                /// Removes all items passed in a collection.
+                /// </summary>
+                public void RemoveAll(ICollection<I> itemsToRemove)
+                {
+                    _listBuilder.RemoveAll(item => itemsToRemove.Contains(item.Item));
+                    // This is a rare operation, don't bother updating the dictionary for now. It will be recreated as needed.
+                    _dictionaryBuilder = null;
+                }
+
+                /// <summary>
+                /// Removes all items whose normalized path is passed in a collection.
+                /// </summary>
+                public void RemoveAll(ICollection<string> itemPathsToRemove)
+                {
+                    var dictionary = Dictionary;
+                    HashSet<I> itemsToRemove = null;
+                    foreach (string itemValue in itemPathsToRemove)
+                    {
+                        if (dictionary.TryGetValue(itemValue, out var multiItem))
+                        {
+                            foreach (I item in multiItem)
+                            {
+                                itemsToRemove ??= new HashSet<I>();
+                                itemsToRemove.Add(item);
+                            }
+                            _dictionaryBuilder.Remove(itemValue);
+                        }
+                    }
+
+                    if (itemsToRemove is not null)
+                    {
+                        _listBuilder.RemoveAll(item => itemsToRemove.Contains(item.Item));
+                    }
+                }
+
+                /// <summary>
+                /// Creates an immutable view of this collection.
+                /// </summary>
+                public OrderedItemDataCollection ToImmutable()
+                {
+                    return new OrderedItemDataCollection(_listBuilder.ToImmutable());
+                }
+
+                private void AddToDictionary(ref ItemData itemData)
+                {
+                    string key = itemData.NormalizedItemValue;
+
+                    if (!_dictionaryBuilder.TryGetValue(key, out var dictionaryValue))
+                    {
+                        dictionaryValue = new ItemDataCollectionValue<I>(itemData.Item);
+                    }
+                    else
+                    {
+                        dictionaryValue.Add(itemData.Item);
+                    }
+                    _dictionaryBuilder[key] = dictionaryValue;
+                }
+            }
+
+            #endregion
+
+            /// <summary>
+            /// The list of items in the collection. Defines the enumeration order.
+            /// </summary>
+            private ImmutableList<ItemData> _list;
+
+            private OrderedItemDataCollection(ImmutableList<ItemData> list)
+            {
+                _list = list;
+            }
+
+            /// <summary>
+            /// Creates a new mutable collection.
+            /// </summary>
+            public static Builder CreateBuilder()
+            {
+                return new Builder(ImmutableList.CreateBuilder<ItemData>());
+            }
+
+            /// <summary>
+            /// Creates a mutable view of this collection. Changes made to the returned builder are not reflected in this collection.
+            /// </summary>
+            public Builder ToBuilder()
+            {
+                return new Builder(_list.ToBuilder());
+            }
+        }
+    }
+}
diff --git a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
index 5a2d19ad7b2..1db3ddfd3ce 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs
@@ -3,6 +3,8 @@
 
 using Microsoft.Build.Construction;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
+using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Linq;
 
@@ -35,33 +37,52 @@ public RemoveOperation(RemoveOperationBuilder builder, LazyItemEvaluator<P, I, M
             /// Apply the Remove operation.
             /// </summary>
             /// <remarks>
-            /// This operation is mostly implemented in terms of the default <see cref="LazyItemOperation.ApplyImpl(ImmutableList{ItemData}.Builder, ImmutableHashSet{string})"/>.
-            /// This override exists to apply the removing-everything short-circuit.
+            /// This override exists to apply the removing-everything short-circuit and to avoid creating a redundant list of items to remove.
             /// </remarks>
-            protected override void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            protected override void ApplyImpl(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
-                if (_matchOnMetadata.IsEmpty && ItemspecContainsASingleBareItemReference(_itemSpec, _itemElement.ItemType) && _conditionResult)
+                if (!_conditionResult)
                 {
-                    // Perf optimization: If the Remove operation references itself (e.g. <I Remove="@(I)"/>)
-                    // then all items are removed and matching is not necessary
-                    listBuilder.Clear();
                     return;
                 }
 
-                base.ApplyImpl(listBuilder, globsToIgnore);
-            }
+                bool matchingOnMetadata = !_matchOnMetadata.IsEmpty;
+                if (!matchingOnMetadata)
+                {
+                    if (ItemspecContainsASingleBareItemReference(_itemSpec, _itemElement.ItemType))
+                    {
+                        // Perf optimization: If the Remove operation references itself (e.g. <I Remove="@(I)"/>)
+                        // then all items are removed and matching is not necessary
+                        listBuilder.Clear();
+                        return;
+                    }
+
+                    if (listBuilder.Count >= Traits.Instance.DictionaryBasedItemRemoveThreshold)
+                    {
+                        // Perf optimization: If the number of items in the running list is large, construct a dictionary,
+                        // enumerate all items referenced by the item spec, and perform dictionary look-ups to find items
+                        // to remove.
+                        IList<string> matches = _itemSpec.IntersectsWith(listBuilder.Dictionary);
+                        listBuilder.RemoveAll(matches);
+                        return;
+                    }
+                }
 
-            // todo Perf: do not match against the globs: https://github.com/Microsoft/msbuild/issues/2329
-            protected override ImmutableList<I> SelectItems(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
-            {
-                var items = ImmutableHashSet.CreateBuilder<I>();
+                // todo Perf: do not match against the globs: https://github.com/Microsoft/msbuild/issues/2329
+                HashSet<I> items = null;
                 foreach (ItemData item in listBuilder)
                 {
-                    if (_matchOnMetadata.IsEmpty ? _itemSpec.MatchesItem(item.Item) : MatchesItemOnMetadata(item.Item))
+                    bool isMatch = matchingOnMetadata ? MatchesItemOnMetadata(item.Item) : _itemSpec.MatchesItem(item.Item);
+                    if (isMatch)
+                    {
+                        items ??= new HashSet<I>();
                         items.Add(item.Item);
+                    }
+                }
+                if (items is not null)
+                {
+                    listBuilder.RemoveAll(items);
                 }
-
-                return items.ToImmutableList();
             }
 
             private bool MatchesItemOnMetadata(I item)
@@ -69,16 +90,6 @@ private bool MatchesItemOnMetadata(I item)
                 return _metadataSet.Contains(_matchOnMetadata.Select(m => item.GetMetadataValue(m)));
             }
 
-            protected override void SaveItems(ImmutableList<I> items, ImmutableList<ItemData>.Builder listBuilder)
-            {
-                if (!_conditionResult)
-                {
-                    return;
-                }
-
-                listBuilder.RemoveAll(itemData => items.Contains(itemData.Item));
-            }
-
             public ImmutableHashSet<string>.Builder GetRemovedGlobs()
             {
                 var builder = ImmutableHashSet.CreateBuilder<string>();
diff --git a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
index 5423bcf0286..35b2ffa899f 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs
@@ -39,7 +39,7 @@ public MatchResult(bool isMatch, Dictionary<string, I> capturedItemsFromReferenc
 
             delegate MatchResult ItemSpecMatchesItem(ItemSpec<P, I> itemSpec, I itemToMatch);
 
-            protected override void ApplyImpl(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            protected override void ApplyImpl(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
                 if (!_conditionResult)
                 {
diff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs
index e5f2a72f61a..9fd3eec87e7 100644
--- a/src/Build/Evaluation/LazyItemEvaluator.cs
+++ b/src/Build/Evaluation/LazyItemEvaluator.cs
@@ -16,6 +16,7 @@
 using System.Collections.Immutable;
 using System.Diagnostics;
 using System.Linq;
+using System.Threading;
 
 namespace Microsoft.Build.Evaluation
 {
@@ -124,12 +125,13 @@ private static string GetCurrentDirectoryForConditionEvaluation(ProjectElement e
 
         public struct ItemData
         {
-            public ItemData(I item, ProjectItemElement originatingItemElement, int elementOrder, bool conditionResult)
+            public ItemData(I item, ProjectItemElement originatingItemElement, int elementOrder, bool conditionResult, string normalizedItemValue = null)
             {
                 Item = item;
                 OriginatingItemElement = originatingItemElement;
                 ElementOrder = elementOrder;
                 ConditionResult = conditionResult;
+                _normalizedItemValue = normalizedItemValue;
             }
 
             public ItemData Clone(IItemFactory<I, I> itemFactory, ProjectItemElement initialItemElementForFactory)
@@ -140,19 +142,37 @@ public ItemData Clone(IItemFactory<I, I> itemFactory, ProjectItemElement initial
                 var clonedItem = itemFactory.CreateItem(Item, OriginatingItemElement.ContainingProject.FullPath);
                 itemFactory.ItemElement = initialItemElementForFactory;
 
-                return new ItemData(clonedItem, OriginatingItemElement, ElementOrder, ConditionResult);
+                return new ItemData(clonedItem, OriginatingItemElement, ElementOrder, ConditionResult, _normalizedItemValue);
             }
 
             public I Item { get; }
             public ProjectItemElement OriginatingItemElement { get; }
             public int ElementOrder { get; }
             public bool ConditionResult { get; }
+
+            /// <summary>
+            /// Lazily created normalized item value.
+            /// </summary>
+            private string _normalizedItemValue;
+            public string NormalizedItemValue
+            {
+                get
+                {
+                    var normalizedItemValue = Volatile.Read(ref _normalizedItemValue);
+                    if (normalizedItemValue == null)
+                    {
+                        normalizedItemValue = FileUtilities.NormalizePathForComparisonNoThrow(Item.EvaluatedInclude, Item.ProjectDirectory);
+                        Volatile.Write(ref _normalizedItemValue, normalizedItemValue);
+                    }
+                    return normalizedItemValue;
+                }
+            }
         }
 
         private class MemoizedOperation : IItemOperation
         {
             public LazyItemOperation Operation { get; }
-            private Dictionary<ISet<string>, ImmutableList<ItemData>> _cache;
+            private Dictionary<ISet<string>, OrderedItemDataCollection> _cache;
 
             private bool _isReferenced;
 #if DEBUG
@@ -164,7 +184,7 @@ public MemoizedOperation(LazyItemOperation operation)
                 Operation = operation;
             }
 
-            public void Apply(ImmutableList<ItemData>.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
+            public void Apply(OrderedItemDataCollection.Builder listBuilder, ImmutableHashSet<string> globsToIgnore)
             {
 #if DEBUG
                 CheckInvariant();
@@ -200,7 +220,7 @@ private void CheckInvariant()
             }
 #endif
 
-            public bool TryGetFromCache(ISet<string> globsToIgnore, out ImmutableList<ItemData> items)
+            public bool TryGetFromCache(ISet<string> globsToIgnore, out OrderedItemDataCollection items)
             {
                 if (_cache != null)
                 {
@@ -219,11 +239,11 @@ public void MarkAsReferenced()
                 _isReferenced = true;
             }
 
-            private void AddItemsToCache(ImmutableHashSet<string> globsToIgnore, ImmutableList<ItemData> items)
+            private void AddItemsToCache(ImmutableHashSet<string> globsToIgnore, OrderedItemDataCollection items)
             {
                 if (_cache == null)
                 {
-                    _cache = new Dictionary<ISet<string>, ImmutableList<ItemData>>();
+                    _cache = new Dictionary<ISet<string>, OrderedItemDataCollection>();
                 }
 
                 _cache[globsToIgnore] = items;
@@ -253,7 +273,7 @@ public ImmutableList<I> GetMatchedItems(ImmutableHashSet<string> globsToIgnore)
                 return items.ToImmutable();
             }
 
-            public ImmutableList<ItemData>.Builder GetItemData(ImmutableHashSet<string> globsToIgnore)
+            public OrderedItemDataCollection.Builder GetItemData(ImmutableHashSet<string> globsToIgnore)
             {
                 // Cache results only on the LazyItemOperations whose results are required by an external caller (via GetItems). This means:
                 //   - Callers of GetItems who have announced ahead of time that they would reference an operation (via MarkAsReferenced())
@@ -275,7 +295,7 @@ public ImmutableList<ItemData>.Builder GetItemData(ImmutableHashSet<string> glob
                 // does not mutate: one can add operations on top, but the base never changes, and (ii) the globsToIgnore passed to the tail is the concatenation between
                 // the globsToIgnore received as an arg, and the globsToIgnore produced by the head (if the head is a Remove operation)
 
-                ImmutableList<ItemData> items;
+                OrderedItemDataCollection items;
                 if (_memoizedOperation.TryGetFromCache(globsToIgnore, out items))
                 {
                     return items.ToBuilder();
@@ -299,12 +319,12 @@ public ImmutableList<ItemData>.Builder GetItemData(ImmutableHashSet<string> glob
             /// is to optimize the case in which as series of UpdateOperations, each of which affects a single ItemSpec, are applied to all
             /// items in the list, leading to a quadratic-time operation.
             /// </summary>
-            private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyItemList, ImmutableHashSet<string> globsToIgnore)
+            private static OrderedItemDataCollection.Builder ComputeItems(LazyItemList lazyItemList, ImmutableHashSet<string> globsToIgnore)
             {
                 // Stack of operations up to the first one that's cached (exclusive)
                 Stack<LazyItemList> itemListStack = new Stack<LazyItemList>();
 
-                ImmutableList<ItemData>.Builder items = null;
+                OrderedItemDataCollection.Builder items = null;
 
                 // Keep a separate stack of lists of globs to ignore that only gets modified for Remove operations
                 Stack<ImmutableHashSet<string>> globsToIgnoreStack = null;
@@ -313,7 +333,7 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
                 {
                     var globsToIgnoreFromFutureOperations = globsToIgnoreStack?.Peek() ?? globsToIgnore;
 
-                    ImmutableList<ItemData> itemsFromCache;
+                    OrderedItemDataCollection itemsFromCache;
                     if (currentList._memoizedOperation.TryGetFromCache(globsToIgnoreFromFutureOperations, out itemsFromCache))
                     {
                         // the base items on top of which to apply the uncached operations are the items of the first operation that is cached
@@ -341,7 +361,7 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
 
                 if (items == null)
                 {
-                    items = ImmutableList.CreateBuilder<ItemData>();
+                    items = OrderedItemDataCollection.CreateBuilder();
                 }
 
                 ImmutableHashSet<string> currentGlobsToIgnore = globsToIgnoreStack == null ? globsToIgnore : globsToIgnoreStack.Peek();
@@ -419,7 +439,7 @@ private static ImmutableList<ItemData>.Builder ComputeItems(LazyItemList lazyIte
                 return items;
             }
 
-            private static void ProcessNonWildCardItemUpdates(Dictionary<string, UpdateOperation> itemsWithNoWildcards, ImmutableList<ItemData>.Builder items)
+            private static void ProcessNonWildCardItemUpdates(Dictionary<string, UpdateOperation> itemsWithNoWildcards, OrderedItemDataCollection.Builder items)
             {
 #if DEBUG
                 ErrorUtilities.VerifyThrow(itemsWithNoWildcards.All(fragment => !MSBuildConstants.CharactersForExpansion.Any(fragment.Key.Contains)), $"{nameof(itemsWithNoWildcards)} should not contain any text fragments with wildcards.");
@@ -612,38 +632,36 @@ private void ProcessItemSpec(string rootDirectory, string itemSpec, IElementLoca
             }
         }
 
+        private static IEnumerable<string> GetExpandedMetadataValuesAndConditions(ICollection<ProjectMetadataElement> metadata, Expander<P, I> expander)
+        {
+            // Since we're just attempting to expand properties in order to find referenced items and not expanding metadata,
+            // unexpected errors may occur when evaluating property functions on unexpanded metadata. Just ignore them if that happens.
+            // See: https://github.com/Microsoft/msbuild/issues/3460
+            const ExpanderOptions expanderOptions = ExpanderOptions.ExpandProperties | ExpanderOptions.LeavePropertiesUnexpandedOnError;
+
+            // Expand properties here, because a property may have a value which is an item reference (ie "@(Bar)"), and
+            // if so we need to add the right item reference.
+            foreach (var metadatumElement in metadata)
+            {
+                yield return expander.ExpandIntoStringLeaveEscaped(
+                    metadatumElement.Value,
+                    expanderOptions,
+                    metadatumElement.Location);
+
+                yield return expander.ExpandIntoStringLeaveEscaped(
+                    metadatumElement.Condition,
+                    expanderOptions,
+                    metadatumElement.ConditionLocation);
+            }
+        }
+
         private void ProcessMetadataElements(ProjectItemElement itemElement, OperationBuilderWithMetadata operationBuilder)
         {
             if (itemElement.HasMetadata)
             {
                 operationBuilder.Metadata.AddRange(itemElement.Metadata);
 
-                var values = new List<string>(itemElement.Metadata.Count * 2);
-
-                // Expand properties here, because a property may have a value which is an item reference (ie "@(Bar)"), and
-                // if so we need to add the right item reference.
-                foreach (var metadatumElement in itemElement.Metadata)
-                {
-                    // Since we're just attempting to expand properties in order to find referenced items and not expanding metadata,
-                    // unexpected errors may occur when evaluating property functions on unexpanded metadata. Just ignore them if that happens.
-                    // See: https://github.com/Microsoft/msbuild/issues/3460
-                    const ExpanderOptions expanderOptions = ExpanderOptions.ExpandProperties | ExpanderOptions.LeavePropertiesUnexpandedOnError;
-
-                    var valueWithPropertiesExpanded = _expander.ExpandIntoStringLeaveEscaped(
-                        metadatumElement.Value,
-                        expanderOptions,
-                        metadatumElement.Location);
-
-                    var conditionWithPropertiesExpanded = _expander.ExpandIntoStringLeaveEscaped(
-                        metadatumElement.Condition,
-                        expanderOptions,
-                        metadatumElement.ConditionLocation);
-
-                    values.Add(valueWithPropertiesExpanded);
-                    values.Add(conditionWithPropertiesExpanded);
-                }
-
-                var itemsAndMetadataFound = ExpressionShredder.GetReferencedItemNamesAndMetadata(values);
+                var itemsAndMetadataFound = ExpressionShredder.GetReferencedItemNamesAndMetadata(GetExpandedMetadataValuesAndConditions(itemElement.Metadata, _expander));
                 if (itemsAndMetadataFound.Items != null)
                 {
                     foreach (var itemType in itemsAndMetadataFound.Items)
diff --git a/src/Build/Evaluation/ProjectRootElementCache.cs b/src/Build/Evaluation/ProjectRootElementCache.cs
index b75de665c00..a526ce4540b 100644
--- a/src/Build/Evaluation/ProjectRootElementCache.cs
+++ b/src/Build/Evaluation/ProjectRootElementCache.cs
@@ -21,37 +21,37 @@ namespace Microsoft.Build.Evaluation
     /// Maintains a cache of all loaded ProjectRootElement's for design time purposes.
     /// Weak references are held to add added ProjectRootElement's.
     /// Strong references are held to a limited number of added ProjectRootElement's.
-    /// 
+    ///
     /// 1. Loads of a ProjectRootElement will share any existing loaded ProjectRootElement, rather
     /// than loading and parsing a new one. This is the case whether the ProjectRootElement
     /// is loaded directly or imported.
-    /// 
+    ///
     /// 2. For design time, only a weak reference needs to be held, because all users have a strong reference.
-    /// 
+    ///
     /// 3. Because all loads of a ProjectRootElement consult this cache, they can be assured that any
     /// entries in this cache are up to date. For example, if a ProjectRootElement is modified and saved,
     /// the cached ProjectRootElement will be the loaded one that was saved, so it will be up to date.
-    /// 
+    ///
     /// 4. If, after a project has been loaded, an external app changes the project file content on disk, it is
     /// important that a subsequent load of that project does not return stale ProjectRootElement. To avoid this, the
     /// timestamp of the file on disk is compared to the timestamp of the file at the time that the ProjectRootElement loaded it.
-    /// 
+    ///
     /// 5. For build time, some strong references need to be held, as otherwise the ProjectRootElement's for reuseable
     /// imports will be collected, and time will be wasted reparsing them. However we do not want to hold strong references
     /// to all ProjectRootElement's, consuming memory without end. So a simple priority queue is used. All Adds and Gets boost their
     /// entry to the top. As the queue gets too big, low priority entries are dropped.
-    /// 
+    ///
     /// No guesses are made at which files are more interesting to cache, beyond the most-recently-used list. For example, ".targets" files
     /// or imported files are not treated specially, as this is a potentially unreliable heuristic. Besides, caching a project file itself could
     /// be useful, if for example you want to build it twice with different sets of properties.
-    /// 
+    ///
     /// Because of the strongly typed list, some ProjectRootElement's will be held onto indefinitely. This is an acceptable price to pay for
     /// being able to provide a commonly used ProjectRootElement immediately it's needed. It is mitigated by the list being finite and small, and
     /// because we allow ProjectCollection.UnloadAllProjects to hint to us to clear the list.
-    /// 
+    ///
     /// Implicit references are those which were loaded as a result of a build, and not explicitly loaded through, for instance, the project
     /// collection.
-    /// 
+    ///
     /// </summary>
     internal class ProjectRootElementCache : ProjectRootElementCacheBase
     {
@@ -59,22 +59,31 @@ internal class ProjectRootElementCache : ProjectRootElementCacheBase
         /// The maximum number of entries to keep strong references to.
         /// This has to be strong enough to make sure that key .targets files aren't pushed
         /// off by transient loads of non-reusable files like .user files.
-        /// 
-        /// Made this as large as 50 because VC has a large number of
-        /// regularly used property sheets and other imports.
-        /// If you change this, update the unit tests.
         /// </summary>
         /// <remarks>
+        /// Made this as large as 200 because ASP.NET Core (6.0) projects have
+        /// something like 80-90 imports. This was observed to give a noticeable
+        /// performance improvement compared to a mid-17.0 MSBuild with the old
+        /// value of 50.
+        ///
         /// If this number is increased much higher, the datastructure may
         /// need to be changed from a linked list, since it's currently O(n).
         /// </remarks>
-        private static readonly int s_maximumStrongCacheSize = 50;
+        private static readonly int s_maximumStrongCacheSize = 200;
 
         /// <summary>
         /// Whether the cache should log activity to the Debug.Out stream
         /// </summary>
         private static bool s_debugLogCacheActivity;
 
+        /// <summary>
+        /// Whether the cache should check file content for cache entry invalidation.
+        /// </summary>
+        /// <remarks>
+        /// Value shall be true only in case of testing. Outside QA tests it shall be false.
+        /// </remarks>
+        private static bool s_—ÅheckFileContent;
+
         /// <summary>
         /// The map of weakly-held ProjectRootElement's
         /// </summary>
@@ -116,6 +125,7 @@ static ProjectRootElementCache()
             }
 
             s_debugLogCacheActivity = Environment.GetEnvironmentVariable("MSBUILDDEBUGXMLCACHE") == "1";
+            s_—ÅheckFileContent = !String.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDCACHECHECKFILECONTENT"));
         }
 
         /// <summary>
@@ -131,15 +141,66 @@ internal ProjectRootElementCache(bool autoReloadFromDisk, bool loadProjectsReadO
             LoadProjectsReadOnly = loadProjectsReadOnly;
         }
 
+
+        /// <summary>
+        /// Returns true if given cache entry exists and is outdated.
+        /// </summary>
+        private bool IsInvalidEntry(string projectFile, ProjectRootElement projectRootElement)
+        {
+            if (projectRootElement != null && _autoReloadFromDisk)
+            {
+                FileInfo fileInfo = FileUtilities.GetFileInfoNoThrow(projectFile);
+
+                // If the file doesn't exist on disk, go ahead and use the cached version.
+                // It's an in-memory project that hasn't been saved yet.
+                if (fileInfo != null)
+                {
+                    if (fileInfo.LastWriteTime != projectRootElement.LastWriteTimeWhenRead)
+                    {
+                        // File was changed on disk by external means. Cached version is no longer valid.
+                        // We could throw here or ignore the problem, but it is a common and reasonable pattern to change a file
+                        // externally and load a new project over it to see the new content. So we dump it from the cache
+                        // to force a load from disk. There might then exist more than one ProjectRootElement with the same path,
+                        // but clients ought not get themselves into such a state - and unless they save them to disk,
+                        // it may not be a problem.
+                        return true;
+                    }
+                    else if (s_—ÅheckFileContent)
+                    {
+                        // QA tests run too fast for the timestamp check to work. This environment variable is for their
+                        // use: it checks the file content as well as the timestamp. That's better than completely disabling
+                        // the cache as we get test coverage of the rest of the cache code.
+                        XmlDocument document = new XmlDocument();
+                        document.PreserveWhitespace = projectRootElement.XmlDocument.PreserveWhitespace;
+
+                        using (var xtr = XmlReaderExtension.Create(projectRootElement.FullPath, projectRootElement.ProjectRootElementCache.LoadProjectsReadOnly))
+                        {
+                            document.Load(xtr.Reader);
+                        }
+
+                        string diskContent = document.OuterXml;
+                        string cacheContent = projectRootElement.XmlDocument.OuterXml;
+
+                        if (diskContent != cacheContent)
+                        {
+                            return true;
+                        }
+                    }
+                }
+            }
+
+            return false;
+        }
+
         /// <summary>
         /// Returns an existing ProjectRootElement for the specified file path, if any.
         /// If none exists, calls the provided delegate to load one, and adds that to the cache.
         /// The reason that it calls back to do this is so that the cache is locked between determining
         /// that the entry does not exist and adding the entry.
-        /// 
+        ///
         /// If <see cref="_autoReloadFromDisk"/> was set to true, and the file on disk has changed since it was cached,
         /// it will be reloaded before being returned.
-        /// 
+        ///
         /// Thread safe.
         /// </summary>
         /// <remarks>
@@ -148,7 +209,7 @@ internal ProjectRootElementCache(bool autoReloadFromDisk, bool loadProjectsReadO
         /// If item is found, boosts it to the top of the strong cache.
         /// </remarks>
         /// <param name="projectFile">The project file which contains the ProjectRootElement.  Must be a full path.</param>
-        /// <param name="openProjectRootElement">The delegate to use to load if necessary. May be null.</param>
+        /// <param name="openProjectRootElement">The delegate to use to load if necessary. May be null. Must not update the cache.</param>
         /// <param name="isExplicitlyLoaded"><code>true</code> if the project is explicitly loaded, otherwise <code>false</code>.</param>
         /// <param name="preserveFormatting"><code>true</code> to the project was loaded with the formated preserved, otherwise <code>false</code>.</param>
         /// <returns>The ProjectRootElement instance if one exists.  Null otherwise.</returns>
@@ -158,91 +219,82 @@ internal override ProjectRootElement Get(string projectFile, OpenProjectRootElem
             // Should already have been canonicalized
             ErrorUtilities.VerifyThrowInternalRooted(projectFile);
 
+            ProjectRootElement projectRootElement;
             lock (_locker)
             {
-                ProjectRootElement projectRootElement;
                 _weakCache.TryGetValue(projectFile, out projectRootElement);
 
-                if (preserveFormatting != null && projectRootElement != null && projectRootElement.XmlDocument.PreserveWhitespace != preserveFormatting)
+                if (projectRootElement != null)
                 {
-                    //  Cached project doesn't match preserveFormatting setting, so reload it
-                    projectRootElement.Reload(true, preserveFormatting);
-                }
-
-                if (projectRootElement != null && _autoReloadFromDisk)
-                {
-                    FileInfo fileInfo = FileUtilities.GetFileInfoNoThrow(projectFile);
+                    BoostEntryInStrongCache(projectRootElement);
 
-                    // If the file doesn't exist on disk, go ahead and use the cached version.
-                    // It's an in-memory project that hasn't been saved yet.
-                    if (fileInfo != null)
+                    // An implicit load will never reset the explicit flag.
+                    if (isExplicitlyLoaded)
                     {
-                        bool forgetEntry = false;
-
-                        if (fileInfo.LastWriteTime != projectRootElement.LastWriteTimeWhenRead)
-                        {
-                            // File was changed on disk by external means. Cached version is no longer reliable. 
-                            // We could throw here or ignore the problem, but it is a common and reasonable pattern to change a file 
-                            // externally and load a new project over it to see the new content. So we dump it from the cache
-                            // to force a load from disk. There might then exist more than one ProjectRootElement with the same path,
-                            // but clients ought not get themselves into such a state - and unless they save them to disk,
-                            // it may not be a problem.  
-                            forgetEntry = true;
-                        }
-                        else if (!String.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDCACHECHECKFILECONTENT")))
-                        {
-                            // QA tests run too fast for the timestamp check to work. This environment variable is for their
-                            // use: it checks the file content as well as the timestamp. That's better than completely disabling
-                            // the cache as we get test coverage of the rest of the cache code.
-                            XmlDocument document = new XmlDocument();
-                            document.PreserveWhitespace = projectRootElement.XmlDocument.PreserveWhitespace;
-
-                            using (var xtr = XmlReaderExtension.Create(projectRootElement.FullPath, projectRootElement.ProjectRootElementCache.LoadProjectsReadOnly))
-                            {
-                                document.Load(xtr.Reader);
-                            }
-
-                            string diskContent = document.OuterXml;
-                            string cacheContent = projectRootElement.XmlDocument.OuterXml;
-
-                            if (diskContent != cacheContent)
-                            {
-                                forgetEntry = true;
-                            }
-                        }
-
-                        if (forgetEntry)
-                        {
-                            ForgetEntry(projectRootElement);
-
-                            DebugTraceCache("Out of date dropped from XML cache: ", projectFile);
-                            projectRootElement = null;
-                        }
+                        projectRootElement.MarkAsExplicitlyLoaded();
                     }
                 }
+                else
+                {
+                    DebugTraceCache("Not found in cache: ", projectFile);
+                }
 
-                if (projectRootElement == null && openProjectRootElement != null)
+                if (preserveFormatting != null && projectRootElement != null && projectRootElement.XmlDocument.PreserveWhitespace != preserveFormatting)
                 {
-                    projectRootElement = openProjectRootElement(projectFile, this);
+                    //  Cached project doesn't match preserveFormatting setting, so reload it
+                    projectRootElement.Reload(true, preserveFormatting);
+                }
+            }
 
-                    ErrorUtilities.VerifyThrowInternalNull(projectRootElement, "projectRootElement");
-                    ErrorUtilities.VerifyThrow(projectRootElement.FullPath == projectFile, "Got project back with incorrect path");
-                    ErrorUtilities.VerifyThrow(_weakCache.Contains(projectFile), "Open should have renamed into cache and boosted");
+            bool projectRootElementIsInvalid = IsInvalidEntry(projectFile, projectRootElement);
+            if (projectRootElementIsInvalid)
+            {
+                DebugTraceCache("Not satisfied from cache: ", projectFile);
+                ForgetEntryIfExists(projectRootElement);
+            }
+
+            if (openProjectRootElement == null)
+            {
+                if (projectRootElement == null || projectRootElementIsInvalid)
+                {
+                    return null;
                 }
-                else if (projectRootElement != null)
+                else
                 {
                     DebugTraceCache("Satisfied from XML cache: ", projectFile);
-                    BoostEntryInStrongCache(projectRootElement);
+                    return projectRootElement;
                 }
+            }
+
+            // Use openProjectRootElement to reload the element if the cache element does not exist or need to be reloaded.
+            if (projectRootElement == null || projectRootElementIsInvalid)
+            {
+                // We do not lock loading with common _locker of the cache, to avoid lock contention.
+                // Decided also not to lock this section with the key specific locker to avoid the overhead and code overcomplication, as
+                // it is not likely that two threads would use Get function for the same project simulteniously and it is not a big deal if in some cases we load the same project twice.
+
+                projectRootElement = openProjectRootElement(projectFile, this);
+                ErrorUtilities.VerifyThrowInternalNull(projectRootElement, "projectRootElement");
+                ErrorUtilities.VerifyThrow(projectRootElement.FullPath == projectFile, "Got project back with incorrect path");
 
                 // An implicit load will never reset the explicit flag.
-                if (projectRootElement != null && isExplicitlyLoaded)
+                if (isExplicitlyLoaded)
                 {
                     projectRootElement.MarkAsExplicitlyLoaded();
                 }
 
-                return projectRootElement;
+                // Update cache element.
+                // It is unlikely, but it might be that while without the lock, the projectRootElement in cache was updated by another thread.
+                // And here its entry will be replaced with the loaded projectRootElement. This is fine:
+                // if loaded projectRootElement is out of date (so, it changed since the time we loaded it), it will be updated the next time some thread calls Get function.
+                AddEntry(projectRootElement);
             }
+            else
+            {
+                DebugTraceCache("Satisfied from XML cache: ", projectFile);
+            }
+
+            return projectRootElement;
         }
 
         /// <summary>
@@ -317,7 +369,7 @@ internal override void DiscardStrongReferences()
                     RaiseProjectRootElementRemovedFromStrongCache(projectRootElement);
                 }
 
-                // A scavenge of the weak cache is probably not worth it as 
+                // A scavenge of the weak cache is probably not worth it as
                 // the GC would have had to run immediately after the line above.
             }
         }
@@ -348,7 +400,7 @@ internal override void DiscardImplicitReferences()
         {
             lock (_locker)
             {
-                // Make a new Weak cache only with items that have been explicitly loaded, this will be a small number, there will most likely 
+                // Make a new Weak cache only with items that have been explicitly loaded, this will be a small number, there will most likely
                 // be many items which were not explicitly loaded (ie p2p references).
                 WeakValueDictionary<string, ProjectRootElement> oldWeakCache = _weakCache;
                 _weakCache = new WeakValueDictionary<string, ProjectRootElement>(StringComparer.OrdinalIgnoreCase);
@@ -429,7 +481,7 @@ private void RenameEntryInternal(string oldFullPathIfAny, ProjectRootElement pro
             // (and thus gone from the client's point of view) that merely remains
             // in the cache because we still have a reference to it from our strong cache.
             // Another possibility is that there are two, unrelated, un-saved, in-memory projects that were given the same path.
-            // Replacing the cache entry does not in itself cause a problem -- if there are any actual users of the old 
+            // Replacing the cache entry does not in itself cause a problem -- if there are any actual users of the old
             // entry they will not be affected. There would then exist more than one ProjectRootElement with the same path,
             // but clients ought not get themselves into such a state - and unless they save them to disk,
             // it may not be a problem. Replacing also doesn't cause a problem for the strong cache,
@@ -508,6 +560,22 @@ private void ForgetEntry(ProjectRootElement projectRootElement)
                 _strongCache.Remove(strongCacheEntry);
                 RaiseProjectRootElementRemovedFromStrongCache(strongCacheEntry.Value);
             }
+
+            DebugTraceCache("Out of date dropped from XML cache: ", projectRootElement.FullPath);
+        }
+
+        /// <summary>
+        /// Completely remove an entry from this cache if it exists.
+        /// </summary>
+        private void ForgetEntryIfExists(ProjectRootElement projectRootElement)
+        {
+            lock (_locker)
+            {
+                if (_weakCache.TryGetValue(projectRootElement.FullPath, out var cached) && cached == projectRootElement)
+                {
+                    ForgetEntry(projectRootElement);
+                }
+            }
         }
 
         /// <summary>
diff --git a/src/Build/Evaluation/SimpleProjectRootElementCache.cs b/src/Build/Evaluation/SimpleProjectRootElementCache.cs
index 6890d8bd75b..7e7700d1467 100644
--- a/src/Build/Evaluation/SimpleProjectRootElementCache.cs
+++ b/src/Build/Evaluation/SimpleProjectRootElementCache.cs
@@ -63,8 +63,11 @@ private ProjectRootElement GetFromOrAddToCache(string projectFile, OpenProjectRo
                 ErrorUtilities.VerifyThrowInternalNull(rootElement, "projectRootElement");
                 ErrorUtilities.VerifyThrow(rootElement.FullPath.Equals(key, StringComparison.OrdinalIgnoreCase),
                     "Got project back with incorrect path");
+
+                AddEntry(rootElement);
+
                 ErrorUtilities.VerifyThrow(_cache.TryGetValue(key, out _),
-                    "Open should have renamed into cache and boosted");
+                    "Project should have been added into cache and boosted");
 
                 return rootElement;
             });
diff --git a/src/Build/FileSystem/IFileSystemAdapter.cs b/src/Build/FileSystem/IFileSystemAdapter.cs
deleted file mode 100644
index dce1574702c..00000000000
--- a/src/Build/FileSystem/IFileSystemAdapter.cs
+++ /dev/null
@@ -1,97 +0,0 @@
-Ôªø// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-using System;
-using System.Collections.Generic;
-using System.IO;
-using Microsoft.Build.Shared.FileSystem;
-
-namespace Microsoft.Build.FileSystem
-{
-    internal class IFileSystemAdapter : MSBuildFileSystemBase
-    {
-        private readonly IFileSystem _wrappedFileSystem;
-
-        public IFileSystemAdapter(IFileSystem wrappedFileSystem)
-        {
-            _wrappedFileSystem = wrappedFileSystem;
-        }
-
-        public override TextReader ReadFile(string path)
-        {
-            return _wrappedFileSystem.ReadFile(path);
-        }
-
-        public override Stream GetFileStream(
-            string path,
-            FileMode mode,
-            FileAccess access,
-            FileShare share)
-        {
-            return _wrappedFileSystem.GetFileStream(
-                path,
-                mode,
-                access,
-                share);
-        }
-
-        public override string ReadFileAllText(string path)
-        {
-            return _wrappedFileSystem.ReadFileAllText(path);
-        }
-
-        public override byte[] ReadFileAllBytes(string path)
-        {
-            return _wrappedFileSystem.ReadFileAllBytes(path);
-        }
-
-        public override IEnumerable<string> EnumerateFiles(
-            string path,
-            string searchPattern = "*",
-            SearchOption searchOption = SearchOption.TopDirectoryOnly)
-        {
-            return _wrappedFileSystem.EnumerateFiles(path, searchPattern, searchOption);
-        }
-
-        public override IEnumerable<string> EnumerateDirectories(
-            string path,
-            string searchPattern = "*",
-            SearchOption searchOption = SearchOption.TopDirectoryOnly)
-        {
-            return _wrappedFileSystem.EnumerateDirectories(path, searchPattern, searchOption);
-        }
-
-        public override IEnumerable<string> EnumerateFileSystemEntries(
-            string path,
-            string searchPattern = "*",
-            SearchOption searchOption = SearchOption.TopDirectoryOnly)
-        {
-            return _wrappedFileSystem.EnumerateFileSystemEntries(path, searchPattern, searchOption);
-        }
-
-        public override FileAttributes GetAttributes(string path)
-        {
-            return _wrappedFileSystem.GetAttributes(path);
-        }
-
-        public override DateTime GetLastWriteTimeUtc(string path)
-        {
-            return _wrappedFileSystem.GetLastWriteTimeUtc(path);
-        }
-
-        public override bool DirectoryExists(string path)
-        {
-            return _wrappedFileSystem.DirectoryExists(path);
-        }
-
-        public override bool FileExists(string path)
-        {
-            return _wrappedFileSystem.FileExists(path);
-        }
-
-        public override bool FileOrDirectoryExists(string path)
-        {
-            return _wrappedFileSystem.DirectoryEntryExists(path);
-        }
-    }
-}
diff --git a/src/Build/FileSystem/MSBuildFileSystemAdapter.cs b/src/Build/FileSystem/MSBuildFileSystemAdapter.cs
deleted file mode 100644
index 4c69284d955..00000000000
--- a/src/Build/FileSystem/MSBuildFileSystemAdapter.cs
+++ /dev/null
@@ -1,54 +0,0 @@
-Ôªø// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-using System;
-using System.Collections.Generic;
-using System.IO;
-using Microsoft.Build.Shared.FileSystem;
-
-namespace Microsoft.Build.FileSystem
-{
-     internal class MSBuildFileSystemAdapter : IFileSystem
-    {
-        private readonly MSBuildFileSystemBase _msbuildFileSystem;
-        public MSBuildFileSystemAdapter(MSBuildFileSystemBase msbuildFileSystem)
-        {
-            _msbuildFileSystem = msbuildFileSystem;
-        }
-        public TextReader ReadFile(string path) => _msbuildFileSystem.ReadFile(path);
-
-        public Stream GetFileStream(string path, FileMode mode, FileAccess access, FileShare share) => _msbuildFileSystem.GetFileStream(path, mode, access, share);
-
-        public string ReadFileAllText(string path) => _msbuildFileSystem.ReadFileAllText(path);
-
-        public byte[] ReadFileAllBytes(string path) => _msbuildFileSystem.ReadFileAllBytes(path);
-
-        public IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
-        {
-            return _msbuildFileSystem.EnumerateFiles(path, searchPattern, searchOption);
-        }
-
-        public IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
-        {
-            return _msbuildFileSystem.EnumerateDirectories(path, searchPattern, searchOption);
-        }
-
-        public IEnumerable<string> EnumerateFileSystemEntries(
-            string path,
-            string searchPattern = "*",
-            SearchOption searchOption = SearchOption.TopDirectoryOnly)
-        {
-            return _msbuildFileSystem.EnumerateFileSystemEntries(path, searchPattern, searchOption);
-        }
-
-        public FileAttributes GetAttributes(string path) => _msbuildFileSystem.GetAttributes(path);
-
-        public DateTime GetLastWriteTimeUtc(string path) => _msbuildFileSystem.GetLastWriteTimeUtc(path);
-
-        public bool DirectoryExists(string path) => _msbuildFileSystem.DirectoryExists(path);
-
-        public bool FileExists(string path) => _msbuildFileSystem.FileExists(path);
-
-        public bool DirectoryEntryExists(string path) => _msbuildFileSystem.FileOrDirectoryExists(path);
-    }
-}
diff --git a/src/Build/FileSystem/MSBuildFileSystemBase.cs b/src/Build/FileSystem/MSBuildFileSystemBase.cs
index 5383e717a9b..8855cd50da4 100644
--- a/src/Build/FileSystem/MSBuildFileSystemBase.cs
+++ b/src/Build/FileSystem/MSBuildFileSystemBase.cs
@@ -1,6 +1,7 @@
 Ôªø// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using Microsoft.Build.Shared.FileSystem;
 using System;
 using System.Collections.Generic;
 using System.IO;
@@ -14,66 +15,73 @@ namespace Microsoft.Build.FileSystem
     /// - must be thread safe
     /// - may cache some or all the calls.
     /// </summary>
-    public abstract class MSBuildFileSystemBase
+    public abstract class MSBuildFileSystemBase : IFileSystem
     {
+        #region IFileSystem implementation
+
         /// <summary>
         /// Use this for var sr = new StreamReader(path)
         /// </summary>
-        public abstract TextReader ReadFile(string path);
+        public virtual TextReader ReadFile(string path) => FileSystems.Default.ReadFile(path);
 
         /// <summary>
         /// Use this for new FileStream(path, mode, access, share)
         /// </summary>
-        public abstract Stream GetFileStream(string path, FileMode mode, FileAccess access, FileShare share);
+        public virtual Stream GetFileStream(string path, FileMode mode, FileAccess access, FileShare share) => FileSystems.Default.GetFileStream(path, mode, access, share);
 
         /// <summary>
         /// Use this for File.ReadAllText(path)
         /// </summary>
-        public abstract string ReadFileAllText(string path);
+        public virtual string ReadFileAllText(string path) => FileSystems.Default.ReadFileAllText(path);
 
         /// <summary>
         /// Use this for File.ReadAllBytes(path)
         /// </summary>
-        public abstract byte[] ReadFileAllBytes(string path);
+        public virtual byte[] ReadFileAllBytes(string path) => FileSystems.Default.ReadFileAllBytes(path);
 
         /// <summary>
         /// Use this for Directory.EnumerateFiles(path, pattern, option)
         /// </summary>
-        public abstract IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly);
+        public virtual IEnumerable<string> EnumerateFiles(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
+            => FileSystems.Default.EnumerateFiles(path, searchPattern, searchOption);
 
         /// <summary>
         /// Use this for Directory.EnumerateFolders(path, pattern, option)
         /// </summary>
-        public abstract IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly);
+        public virtual IEnumerable<string> EnumerateDirectories(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
+            => FileSystems.Default.EnumerateDirectories(path, searchPattern, searchOption);
 
         /// <summary>
         /// Use this for Directory.EnumerateFileSystemEntries(path, pattern, option)
         /// </summary>
-        public abstract IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly);
+        public virtual IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern = "*", SearchOption searchOption = SearchOption.TopDirectoryOnly)
+            => FileSystems.Default.EnumerateFileSystemEntries(path, searchPattern, searchOption);
 
         /// <summary>
         /// Use this for File.GetAttributes()
         /// </summary>
-        public abstract FileAttributes GetAttributes(string path);
+        public virtual FileAttributes GetAttributes(string path) => FileSystems.Default.GetAttributes(path);
 
         /// <summary>
         /// Use this for File.GetLastWriteTimeUtc(path)
         /// </summary>
-        public abstract DateTime GetLastWriteTimeUtc(string path);
+        public virtual DateTime GetLastWriteTimeUtc(string path) => FileSystems.Default.GetLastWriteTimeUtc(path);
 
         /// <summary>
         /// Use this for Directory.Exists(path)
         /// </summary>
-        public abstract bool DirectoryExists(string path);
+        public virtual bool DirectoryExists(string path) => FileSystems.Default.DirectoryExists(path);
 
         /// <summary>
         /// Use this for File.Exists(path)
         /// </summary>
-        public abstract bool FileExists(string path);
+        public virtual bool FileExists(string path) => FileSystems.Default.FileExists(path);
 
         /// <summary>
         /// Use this for File.Exists(path) || Directory.Exists(path)
         /// </summary>
-        public abstract bool FileOrDirectoryExists(string path);
+        public virtual bool FileOrDirectoryExists(string path) => FileSystems.Default.FileOrDirectoryExists(path);
+
+        #endregion
     }
 }
diff --git a/src/Build/Globbing/MSBuildGlob.cs b/src/Build/Globbing/MSBuildGlob.cs
index 0420aa9edd3..9460958a40f 100644
--- a/src/Build/Globbing/MSBuildGlob.cs
+++ b/src/Build/Globbing/MSBuildGlob.cs
@@ -7,6 +7,7 @@
 using System.Text.RegularExpressions;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
 using Microsoft.NET.StringTools;
 
 namespace Microsoft.Build.Globbing
@@ -126,10 +127,13 @@ public MatchInfoResult MatchInfo(string stringToMatch)
                 normalizedInput,
                 _state.Value.Regex,
                 out bool isMatch,
-                out string fixedDirectoryPart,
                 out string wildcardDirectoryPart,
                 out string filenamePart);
 
+            // We don't capture the fixed directory part in the regex but we can infer it from the other two.
+            int fixedDirectoryPartLength = normalizedInput.Length - wildcardDirectoryPart.Length - filenamePart.Length;
+            string fixedDirectoryPart = normalizedInput.Substring(0, fixedDirectoryPartLength);
+
             return new MatchInfoResult(isMatch, fixedDirectoryPart, wildcardDirectoryPart, filenamePart);
         }
 
@@ -202,8 +206,20 @@ public static MSBuildGlob Parse(string globRoot, string fileSpec)
 
                     if (regex == null)
                     {
+                        RegexOptions regexOptions = FileMatcher.DefaultRegexOptions;
                         // compile the regex since it's expected to be used multiple times
-                        Regex newRegex = new Regex(matchFileExpression, FileMatcher.DefaultRegexOptions | RegexOptions.Compiled);
+                        // For the kind of regexes used here, compilation on .NET Framework tends to be expensive and not worth the small
+                        // run-time boost so it's enabled only on .NET Core by default.
+#if RUNTIME_TYPE_NETCORE
+                        bool compileRegex = true;
+#else
+                        bool compileRegex = !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0);
+#endif
+                        if (compileRegex)
+                        {
+                            regexOptions |= RegexOptions.Compiled;
+                        }
+                        Regex newRegex = new Regex(matchFileExpression, regexOptions);
                         lock (s_regexCache)
                         {
                             if (!s_regexCache.TryGetValue(matchFileExpression, out regex))
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index b445f72d83d..40cf6aee0ed 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -10,19 +10,20 @@
 using System.Linq;
 using System.Text;
 using System.Threading;
-using Microsoft.Build.BackEnd;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Eventing;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.Debugging;
+using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.Graph
 {
     /// <summary>
     ///     Represents a graph of evaluated projects.
     /// </summary>
-    [DebuggerDisplay(@"#roots={GraphRoots.Count}, #nodes={ProjectNodes.Count}, #entryPoints={EntryPointNodes.Count}")]
+    [DebuggerDisplay(@"{DebuggerDisplayString()}")]
     public sealed class ProjectGraph
     {
         /// <summary>
@@ -475,13 +476,16 @@ GraphConstructionMetrics EndMeasurement()
             }
         }
 
-        internal string ToDot()
+        internal string ToDot(IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetsPerNode = null)
         {
             var nodeCount = 0;
-            return ToDot(node => nodeCount++.ToString());
+            return ToDot(node => nodeCount++.ToString(), targetsPerNode);
         }
 
-        internal string ToDot(Func<ProjectGraphNode, string> nodeIdProvider)
+        internal string ToDot(
+            Func<ProjectGraphNode, string> nodeIdProvider,
+            IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetsPerNode = null
+        )
         {
             ErrorUtilities.VerifyThrowArgumentNull(nodeIdProvider, nameof(nodeIdProvider));
 
@@ -489,31 +493,56 @@ internal string ToDot(Func<ProjectGraphNode, string> nodeIdProvider)
 
             var sb = new StringBuilder();
 
-            sb.Append("digraph g\n{\n\tnode [shape=box]\n");
+            sb.AppendLine($"/* {DebuggerDisplayString()} */");
+
+            sb.AppendLine("digraph g")
+                .AppendLine("{")
+                .AppendLine("\tnode [shape=box]");
 
             foreach (var node in ProjectNodes)
             {
-                var nodeId = nodeIds.GetOrAdd(node, (n, idProvider) => idProvider(n), nodeIdProvider);
+                var nodeId = GetNodeId(node);
 
                 var nodeName = Path.GetFileNameWithoutExtension(node.ProjectInstance.FullPath);
+
                 var globalPropertiesString = string.Join(
                     "<br/>",
                     node.ProjectInstance.GlobalProperties.OrderBy(kvp => kvp.Key)
                         .Select(kvp => $"{kvp.Key}={kvp.Value}"));
 
-                sb.Append('\t').Append(nodeId).Append(" [label=<").Append(nodeName).Append("<br/>").Append(globalPropertiesString).AppendLine(">]");
+                var targetListString = GetTargetListString(node);
+
+                sb.AppendLine($"\t{nodeId} [label=<{nodeName}<br/>({targetListString})<br/>{globalPropertiesString}>]");
 
                 foreach (var reference in node.ProjectReferences)
                 {
-                    var referenceId = nodeIds.GetOrAdd(reference, (n, idProvider) => idProvider(n), nodeIdProvider);
+                    var referenceId = GetNodeId(reference);
 
-                    sb.Append('\t').Append(nodeId).Append(" -> ").AppendLine(referenceId);
+                    sb.AppendLine($"\t{nodeId} -> {referenceId}");
                 }
             }
 
             sb.Append("}");
 
             return sb.ToString();
+
+            string GetNodeId(ProjectGraphNode node)
+            {
+                return nodeIds.GetOrAdd(node, (n, idProvider) => idProvider(n), nodeIdProvider);
+            }
+
+            string GetTargetListString(ProjectGraphNode node)
+            {
+                var targetListString = targetsPerNode is null
+                    ? string.Empty
+                    : string.Join(", ", targetsPerNode[node]);
+                return targetListString;
+            }
+        }
+
+        private string DebuggerDisplayString()
+        {
+            return $"#roots={GraphRoots.Count}, #nodes={ProjectNodes.Count}, #entryPoints={EntryPointNodes.Count}";
         }
 
         private static IReadOnlyCollection<ProjectGraphNode> TopologicalSort(
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index ae88e1064b0..99362abab30 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -100,17 +100,17 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc
             }
         }
 
-        private static string GetInnerBuildPropertyValue(ProjectInstance project)
+        internal static string GetInnerBuildPropertyValue(ProjectInstance project)
         {
             return project.GetPropertyValue(GetInnerBuildPropertyName(project));
         }
 
-        private static string GetInnerBuildPropertyName(ProjectInstance project)
+        internal static string GetInnerBuildPropertyName(ProjectInstance project)
         {
             return project.GetPropertyValue(PropertyNames.InnerBuildProperty);
         }
 
-        private static string GetInnerBuildPropertyValues(ProjectInstance project)
+        internal static string GetInnerBuildPropertyValues(ProjectInstance project)
         {
             return project.GetPropertyValue(project.GetPropertyValue(PropertyNames.InnerBuildPropertyValues));
         }
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index e29d3346621..b67aba3de21 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -564,8 +564,7 @@ private ProjectInstance(ProjectInstance that, bool isImmutable, RequestedProject
             _hostServices = that._hostServices;
             _isImmutable = isImmutable;
             _evaluationId = that.EvaluationId;
-
-            TranslateEntireState = that.TranslateEntireState;
+            _translateEntireState = that._translateEntireState;
 
             if (filter == null)
             {
@@ -849,23 +848,8 @@ public List<ProjectItemElement> EvaluatedItemElements
         /// </summary>
         public bool TranslateEntireState
         {
-            get
-            {
-                return Traits.Instance.EscapeHatches.ProjectInstanceTranslation switch
-                {
-                    EscapeHatches.ProjectInstanceTranslationMode.Full => true,
-                    EscapeHatches.ProjectInstanceTranslationMode.Partial => false,
-                    _ => _translateEntireState,
-                };
-            }
-
-            set
-            {
-                if (Traits.Instance.EscapeHatches.ProjectInstanceTranslation == null)
-                {
-                    _translateEntireState = value;
-                }
-            }
+            get => _translateEntireState;
+            set => _translateEntireState = value;
         }
 
         /// <summary>
@@ -899,8 +883,7 @@ public string Directory
         public string FullPath
         {
             [DebuggerStepThrough]
-            get
-            { return _projectFileLocation.File; }
+            get => _projectFileLocation?.File ?? string.Empty;
         }
 
         /// <summary>
@@ -2019,9 +2002,15 @@ internal void LateInitialize(ProjectRootElementCacheBase projectRootElementCache
         /// </summary>
         void ITranslatable.Translate(ITranslator translator)
         {
+            if (translator.Mode == TranslationDirection.WriteToStream)
+            {
+                // When serializing into stream apply Traits.Instance.EscapeHatches.ProjectInstanceTranslation if defined.
+                MaybeForceTranslateEntireStateMode();
+            }
+
             translator.Translate(ref _translateEntireState);
 
-            if (TranslateEntireState)
+            if (_translateEntireState)
             {
                 TranslateAllState(translator);
             }
@@ -2031,6 +2020,27 @@ void ITranslatable.Translate(ITranslator translator)
             }
         }
 
+        private void MaybeForceTranslateEntireStateMode()
+        {
+            var forcedProjectInstanceTranslationMode = Traits.Instance.EscapeHatches.ProjectInstanceTranslation;
+            if (forcedProjectInstanceTranslationMode != null)
+            {
+                switch (forcedProjectInstanceTranslationMode)
+                {
+                    case EscapeHatches.ProjectInstanceTranslationMode.Full:
+                        _translateEntireState = true;
+                        break;
+                    case EscapeHatches.ProjectInstanceTranslationMode.Partial:
+                        _translateEntireState = false;
+                        break;
+                    default:
+                        // if EscapeHatches.ProjectInstanceTranslation has an unexpected value, do not force TranslateEntireStateMode.
+                        // Just leave it as is.
+                        break;
+                }
+            }
+        }
+
         internal void TranslateMinimalState(ITranslator translator)
         {
             translator.TranslateDictionary(ref _globalProperties, ProjectPropertyInstance.FactoryForDeserialization);
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index c080e9338e3..99bc7663895 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -268,6 +268,7 @@ public bool Execute()
                         BuildEngine.ContinueOnError,
                         _taskType.Type.FullName,
                         AssemblyUtilities.GetAssemblyLocation(_taskType.Type.GetTypeInfo().Assembly),
+                        _buildComponentHost.BuildParameters.LogTaskInputs,
                         _setParameters,
                         new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties),
                         _taskLoggingContext.GetWarningsAsErrors(),
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 70d0477ad3a..167a67e396e 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -2,19 +2,21 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Collections;
 using System.Collections.Generic;
+using System.Globalization;
+using System.IO;
+using System.Linq;
 using System.Text;
+
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
-using System.Collections;
-using System.Globalization;
-using System.IO;
 
 using ColorSetter = Microsoft.Build.Logging.ColorSetter;
 using ColorResetter = Microsoft.Build.Logging.ColorResetter;
 using WriteHandler = Microsoft.Build.Logging.WriteHandler;
-using Microsoft.Build.Exceptions;
 
 namespace Microsoft.Build.BackEnd.Logging
 {
@@ -329,6 +331,33 @@ internal void IsRunningWithCharacterFileType()
         /// </summary>
         internal bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity) => Verbosity >= checkVerbosity;
 
+        /// <summary>
+        /// Returns the minimum logger verbosity required to log a message with the given importance.
+        /// </summary>
+        /// <param name="importance">The message importance.</param>
+        /// <param name="lightenText">True if the message should be rendered using lighter colored text.</param>
+        /// <returns>The logger verbosity required to log a message of the given <paramref name="importance"/>.</returns>
+        internal static LoggerVerbosity ImportanceToMinimumVerbosity(MessageImportance importance, out bool lightenText)
+        {
+            switch (importance)
+            {
+                case MessageImportance.High:
+                    lightenText = false;
+                    return LoggerVerbosity.Minimal;
+                case MessageImportance.Normal:
+                    lightenText = true;
+                    return LoggerVerbosity.Normal;
+                case MessageImportance.Low:
+                    lightenText = true;
+                    return LoggerVerbosity.Detailed;
+
+                default:
+                    ErrorUtilities.VerifyThrow(false, "Impossible");
+                    lightenText = false;
+                    return LoggerVerbosity.Detailed;
+            }
+        }
+
         /// <summary>
         /// Sets foreground color to color specified
         /// </summary>
@@ -642,42 +671,56 @@ internal SortedList ExtractItemList(IEnumerable items)
         /// </summary>
         internal virtual void OutputItems(string itemType, ArrayList itemTypeList)
         {
-            // Write each item, one per line
-            bool haveWrittenItemType = false;
-            setColor(ConsoleColor.DarkGray);
-            foreach (ITaskItem item in itemTypeList)
+            WriteItemType(itemType);
+
+            foreach (var item in itemTypeList)
             {
-                if (!haveWrittenItemType)
+                string itemSpec = item switch
                 {
-                    setColor(ConsoleColor.Gray);
-                    WriteLinePretty(itemType);
-                    haveWrittenItemType = true;
-                    setColor(ConsoleColor.DarkGray);
-                }
-                WriteLinePretty("    "  /* indent slightly*/ + item.ItemSpec);
+                    ITaskItem taskItem => taskItem.ItemSpec,
+                    IItem iitem => iitem.EvaluatedInclude,
+                    { } misc => Convert.ToString(misc),
+                    null => "null"
+                };
 
-                IDictionary metadata = item.CloneCustomMetadata();
+                WriteItemSpec(itemSpec);
 
-                foreach (DictionaryEntry metadatum in metadata)
+                var metadata = item switch
                 {
-                    string valueOrError;
-                    try
-                    {
-                        valueOrError = item.GetMetadata(metadatum.Key as string);
-                    }
-                    catch (InvalidProjectFileException e)
+                    IMetadataContainer metadataContainer => metadataContainer.EnumerateMetadata(),
+                    IItem<ProjectMetadata> iitem => iitem.Metadata?.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue)),
+                    _ => null
+                };
+
+                if (metadata != null)
+                {
+                    foreach (var metadatum in metadata)
                     {
-                        valueOrError = e.Message;
+                        WriteMetadata(metadatum.Key, metadatum.Value);
                     }
-
-                    // A metadatum's "value" is its escaped value, since that's how we represent them internally.
-                    // So unescape before returning to the world at large.
-                    WriteLinePretty("        " + metadatum.Key + " = " + valueOrError);
                 }
             }
+
             resetColor();
         }
 
+        protected virtual void WriteItemType(string itemType)
+        {
+            setColor(ConsoleColor.Gray);
+            WriteLinePretty(itemType);
+            setColor(ConsoleColor.DarkGray);
+        }
+
+        protected virtual void WriteItemSpec(string itemSpec)
+        {
+            WriteLinePretty("    " + itemSpec);
+        }
+
+        protected virtual void WriteMetadata(string name, string value)
+        {
+            WriteLinePretty("        " + name + " = " + value);
+        }
+
         /// <summary>
         /// Returns a performance counter for a given scope (either task name or target name)
         /// from the given table.
@@ -959,6 +1002,12 @@ public virtual void Initialize(IEventSource eventSource)
                 eventSource.MessageRaised += MessageHandler;
                 eventSource.CustomEventRaised += CustomEventHandler;
                 eventSource.StatusEventRaised += StatusEventHandler;
+
+                bool logPropertiesAndItemsAfterEvaluation = Utilities.Traits.Instance.EscapeHatches.LogPropertiesAndItemsAfterEvaluation ?? true;
+                if (logPropertiesAndItemsAfterEvaluation && eventSource is IEventSource4 eventSource4)
+                {
+                    eventSource4.IncludeEvaluationPropertiesAndItems();
+                }
             }
         }
 
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 6bcd2951e2d..dac426db8b4 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -48,7 +48,10 @@ public sealed class BinaryLogger : ILogger
         // version 13:
         //   - don't log Message where it can be recovered
         //   - log arguments for LazyFormattedBuildEventArgs
-        internal const int FileFormatVersion = 13;
+        //   - TargetSkippedEventArgs: added OriginallySucceeded, Condition, EvaluatedCondition
+        // version 14:
+        //   - TargetSkippedEventArgs: added SkipReason, OriginalBuildEventContext
+        internal const int FileFormatVersion = 14;
 
         private Stream stream;
         private BinaryWriter binaryWriter;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 47c1f6d8306..c6be1d59db3 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -51,8 +51,6 @@ public class BuildEventArgsReader : IDisposable
             typeof(BuildEventArgs).GetField("threadId", BindingFlags.Instance | BindingFlags.NonPublic);
         private static FieldInfo buildEventArgsFieldSenderName =
             typeof(BuildEventArgs).GetField("senderName", BindingFlags.Instance | BindingFlags.NonPublic);
-        private static FieldInfo buildEventArgsFieldTimestamp =
-            typeof(BuildEventArgs).GetField("timestamp", BindingFlags.Instance | BindingFlags.NonPublic);
 
         /// <summary>
         /// Initializes a new instance of BuildEventArgsReader using a BinaryReader instance
@@ -297,15 +295,30 @@ private BuildEventArgs ReadTargetSkippedEventArgs()
             string condition = null;
             string evaluatedCondition = null;
             bool originallySucceeded = false;
+            TargetSkipReason skipReason = TargetSkipReason.None;
+            BuildEventContext originalBuildEventContext = null;
             if (fileFormatVersion >= 13)
             {
                 condition = ReadOptionalString();
                 evaluatedCondition = ReadOptionalString();
                 originallySucceeded = ReadBoolean();
+
+                // Attempt to infer skip reason from the data we have
+                skipReason = condition != null ?
+                    TargetSkipReason.ConditionWasFalse // condition expression only stored when false
+                    : originallySucceeded ?
+                        TargetSkipReason.PreviouslyBuiltSuccessfully
+                        : TargetSkipReason.PreviouslyBuiltUnsuccessfully;
             }
 
             var buildReason = (TargetBuiltReason)ReadInt32();
 
+            if (fileFormatVersion >= 14)
+            {
+                skipReason = (TargetSkipReason)ReadInt32();
+                originalBuildEventContext = binaryReader.ReadOptionalBuildEventContext();
+            }
+
             var e = new TargetSkippedEventArgs(
                 fields.Message,
                 fields.Arguments);
@@ -320,6 +333,8 @@ private BuildEventArgs ReadTargetSkippedEventArgs()
             e.Condition = condition;
             e.EvaluatedCondition = evaluatedCondition;
             e.OriginallySucceeded = originallySucceeded;
+            e.SkipReason = skipReason;
+            e.OriginalBuildEventContext = originalBuildEventContext;
 
             return e;
         }
@@ -535,6 +550,8 @@ private BuildEventArgs ReadTaskStartedEventArgs()
                 taskFile,
                 taskName,
                 fields.Timestamp);
+            e.LineNumber = fields.LineNumber;
+            e.ColumnNumber = fields.ColumnNumber;
             SetCommonFields(e, fields);
             return e;
         }
@@ -658,7 +675,9 @@ private BuildEventArgs ReadTaskParameterEventArgs()
                 itemType,
                 items,
                 logItemMetadata: true,
-                fields.Timestamp);
+                fields.Timestamp,
+                fields.LineNumber,
+                fields.ColumnNumber);
             e.ProjectFile = fields.ProjectFile;
             return e;
         }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 20cd4232cb2..20583b991b0 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -370,7 +370,9 @@ private void Write(TargetFinishedEventArgs e)
         private void Write(TaskStartedEventArgs e)
         {
             Write(BinaryLogRecordKind.TaskStarted);
-            WriteBuildEventArgsFields(e, writeMessage: false);
+            WriteBuildEventArgsFields(e, writeMessage: false, writeLineAndColumn: true);
+            Write(e.LineNumber);
+            Write(e.ColumnNumber);
             WriteDeduplicatedString(e.TaskName);
             WriteDeduplicatedString(e.ProjectFile);
             WriteDeduplicatedString(e.TaskFile);
@@ -390,6 +392,7 @@ private void Write(BuildErrorEventArgs e)
         {
             Write(BinaryLogRecordKind.Error);
             WriteBuildEventArgsFields(e);
+            WriteArguments(e.RawArguments);
             WriteDeduplicatedString(e.Subcategory);
             WriteDeduplicatedString(e.Code);
             WriteDeduplicatedString(e.File);
@@ -404,6 +407,7 @@ private void Write(BuildWarningEventArgs e)
         {
             Write(BinaryLogRecordKind.Warning);
             WriteBuildEventArgsFields(e);
+            WriteArguments(e.RawArguments);
             WriteDeduplicatedString(e.Subcategory);
             WriteDeduplicatedString(e.Code);
             WriteDeduplicatedString(e.File);
@@ -454,6 +458,8 @@ private void Write(TargetSkippedEventArgs e)
             WriteDeduplicatedString(e.EvaluatedCondition);
             Write(e.OriginallySucceeded);
             Write((int)e.BuildReason);
+            Write((int)e.SkipReason);
+            binaryWriter.WriteOptionalBuildEventContext(e.OriginalBuildEventContext);
         }
 
         private void Write(CriticalBuildMessageEventArgs e)
@@ -512,9 +518,14 @@ private void Write(TaskParameterEventArgs e)
             WriteTaskItemList(e.Items, e.LogItemMetadata);
         }
 
-        private void WriteBuildEventArgsFields(BuildEventArgs e, bool writeMessage = true)
+        private void WriteBuildEventArgsFields(BuildEventArgs e, bool writeMessage = true, bool writeLineAndColumn = false)
         {
             var flags = GetBuildEventArgsFieldFlags(e, writeMessage);
+            if (writeLineAndColumn)
+            {
+                flags |= BuildEventArgsFieldFlags.LineNumber | BuildEventArgsFieldFlags.ColumnNumber;
+            }
+
             Write((int)flags);
             WriteBaseFields(e, flags);
         }
@@ -555,7 +566,7 @@ private void WriteBaseFields(BuildEventArgs e, BuildEventArgsFieldFlags flags)
         private void WriteMessageFields(BuildMessageEventArgs e, bool writeMessage = true, bool writeImportance = false)
         {
             var flags = GetBuildEventArgsFieldFlags(e, writeMessage);
-            flags = GetMessageFlags(e, flags, writeMessage, writeImportance);
+            flags = GetMessageFlags(e, flags, writeImportance);
 
             Write((int)flags);
 
@@ -603,12 +614,7 @@ private void WriteMessageFields(BuildMessageEventArgs e, bool writeMessage = tru
 
             if ((flags & BuildEventArgsFieldFlags.Arguments) != 0)
             {
-                Write(e.RawArguments.Length);
-                for (int i = 0; i < e.RawArguments.Length; i++)
-                {
-                    string argument = Convert.ToString(e.RawArguments[i], CultureInfo.CurrentCulture);
-                    WriteDeduplicatedString(argument);
-                }
+                WriteArguments(e.RawArguments);
             }
 
             if ((flags & BuildEventArgsFieldFlags.Importance) != 0)
@@ -617,7 +623,23 @@ private void WriteMessageFields(BuildMessageEventArgs e, bool writeMessage = tru
             }
         }
 
-        private static BuildEventArgsFieldFlags GetMessageFlags(BuildMessageEventArgs e, BuildEventArgsFieldFlags flags, bool writeMessage = true, bool writeImportance = false)
+        private void WriteArguments(object[] arguments)
+        {
+            if (arguments == null || arguments.Length == 0)
+            {
+                return;
+            }
+
+            int count = arguments.Length;
+            Write(count);
+            for (int i = 0; i < count; i++)
+            {
+                string argument = Convert.ToString(arguments[i], CultureInfo.CurrentCulture);
+                WriteDeduplicatedString(argument);
+            }
+        }
+
+        private static BuildEventArgsFieldFlags GetMessageFlags(BuildMessageEventArgs e, BuildEventArgsFieldFlags flags, bool writeImportance = false)
         {
             if (e.Subcategory != null)
             {
@@ -659,11 +681,6 @@ private static BuildEventArgsFieldFlags GetMessageFlags(BuildMessageEventArgs e,
                 flags |= BuildEventArgsFieldFlags.EndColumnNumber;
             }
 
-            if (writeMessage && e.RawArguments != null && e.RawArguments.Length > 0)
-            {
-                flags |= BuildEventArgsFieldFlags.Arguments;
-            }
-
             if (writeImportance && e.Importance != MessageImportance.Low)
             {
                 flags |= BuildEventArgsFieldFlags.Importance;
@@ -688,6 +705,14 @@ private static BuildEventArgsFieldFlags GetBuildEventArgsFieldFlags(BuildEventAr
             if (writeMessage)
             {
                 flags |= BuildEventArgsFieldFlags.Message;
+
+                // We're only going to write the arguments for messages,
+                // warnings and errors. Only set the flag for these.
+                if (e is LazyFormattedBuildEventArgs { RawArguments: { Length: > 0 } } and
+                    (BuildMessageEventArgs or BuildWarningEventArgs or BuildErrorEventArgs))
+                {
+                    flags |= BuildEventArgsFieldFlags.Arguments;
+                }
             }
 
             // no need to waste space for the default sender name
@@ -696,12 +721,6 @@ private static BuildEventArgsFieldFlags GetBuildEventArgsFieldFlags(BuildEventAr
                 flags |= BuildEventArgsFieldFlags.SenderName;
             }
 
-            // ThreadId never seems to be used or useful for anything.
-            //if (e.ThreadId > 0)
-            //{
-            //    flags |= BuildEventArgsFieldFlags.ThreadId;
-            //}
-
             if (e.Timestamp != default(DateTime))
             {
                 flags |= BuildEventArgsFieldFlags.Timestamp;
diff --git a/src/Build/Logging/ConsoleLogger.cs b/src/Build/Logging/ConsoleLogger.cs
index 3af25e3ce19..c6358a9badb 100644
--- a/src/Build/Logging/ConsoleLogger.cs
+++ b/src/Build/Logging/ConsoleLogger.cs
@@ -164,8 +164,6 @@ private void InitializeBaseConsoleLogger()
                 _parameters = null;
             }
 
-            
-
             _consoleLogger.SkipProjectStartedText = _skipProjectStartedText;
         }
 
@@ -477,6 +475,31 @@ public void CustomEventHandler(object sender, CustomBuildEventArgs e)
             _consoleLogger.CustomEventHandler(sender, e);
         }
 
+        /// <summary>
+        /// Returns the minimum importance of messages logged by this logger.
+        /// </summary>
+        /// <returns>
+        /// The minimum message importance corresponding to this logger's verbosity or (MessageImportance.High - 1)
+        /// if this logger does not log messages of any importance.
+        /// </returns>
+        internal MessageImportance GetMinimumMessageImportance()
+        {
+            if (Verbosity >= BaseConsoleLogger.ImportanceToMinimumVerbosity(MessageImportance.Low, out _))
+            {
+                return MessageImportance.Low;
+            }
+            else if (Verbosity >= BaseConsoleLogger.ImportanceToMinimumVerbosity(MessageImportance.Normal, out _))
+            {
+                return MessageImportance.Normal;
+            }
+            else if (Verbosity >= BaseConsoleLogger.ImportanceToMinimumVerbosity(MessageImportance.High, out _))
+            {
+                return MessageImportance.High;
+            }
+            // The logger does not log messages of any importance.
+            return MessageImportance.High - 1;
+        }
+
         #endregion
     }
 }
diff --git a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
index d530bd07264..83c2499aefa 100644
--- a/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
+++ b/src/Build/Logging/DistributedLoggers/ConfigurableForwardingLogger.cs
@@ -75,7 +75,7 @@ public int NodeId
         /// </summary>
         private void InitializeForwardingTable()
         {
-            _forwardingTable = new Dictionary<string, int>(15, StringComparer.OrdinalIgnoreCase);
+            _forwardingTable = new Dictionary<string, int>(17, StringComparer.OrdinalIgnoreCase);
             _forwardingTable[BuildStartedEventDescription] = 0;
             _forwardingTable[BuildFinishedEventDescription] = 0;
             _forwardingTable[ProjectStartedEventDescription] = 0;
@@ -258,6 +258,31 @@ private void SetForwardingBasedOnVerbosity()
             }
         }
 
+        /// <summary>
+        /// Returns the minimum importance of messages logged by this logger.
+        /// </summary>
+        /// <returns>
+        /// The minimum message importance corresponding to this logger's verbosity or (MessageImportance.High - 1)
+        /// if this logger does not log messages of any importance.
+        /// </returns>
+        internal MessageImportance GetMinimumMessageImportance()
+        {
+            if (_forwardingTable[LowMessageEventDescription] == 1)
+            {
+                return MessageImportance.Low;
+            }
+            if (_forwardingTable[NormalMessageEventDescription] == 1)
+            {
+                return MessageImportance.Normal;
+            }
+            if (_forwardingTable[HighMessageEventDescription] == 1)
+            {
+                return MessageImportance.High;
+            }
+            // The logger does not log messages of any importance.
+            return MessageImportance.High - 1;
+        }
+
         /// <summary>
         /// Reset the states of per-build member variables.
         /// Used when a build is finished, but the logger might be needed for the next build.
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index edcbe439efe..26ed295bc8b 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -540,20 +540,38 @@ public override void ProjectStartedHandler(object sender, ProjectStartedEventArg
                 }
             }
 
-            ReadProjectConfigurationDescription(e.BuildEventContext, e.Items);
+            var projectKey = (e.BuildEventContext.NodeId, e.BuildEventContext.ProjectContextId);
+
+            // If the value is available at all, it will be either in the items
+            // from ProjectStarted (old behavior), or the items from ProjectEvaluationFinished (new behavior).
+            // First try the old behavior, and fallback to the new behavior.
+            var result = ReadProjectConfigurationDescription(e.Items);
+            if (result != null)
+            {
+                // Found the items directly on ProjectStarted
+                propertyOutputMap[projectKey] = result;
+            }
+            else
+            {
+                // Try to see if we saw the items on the corresponding ProjectEvaluationFinished
+                var evaluationKey = GetEvaluationKey(e.BuildEventContext);
+
+                // if the value was set from ProjectEvaluationFinished, copy it into the entry
+                // for this project
+                if (propertyOutputMap.TryGetValue(evaluationKey, out string value))
+                {
+                    propertyOutputMap[projectKey] = value;
+                }
+            }
         }
 
-        private void ReadProjectConfigurationDescription(BuildEventContext buildEventContext, IEnumerable items)
+        private string ReadProjectConfigurationDescription(IEnumerable items)
         {
-            if (buildEventContext == null || items == null)
+            if (items == null)
             {
-                return;
+                return null;
             }
 
-            // node and project context ids for the propertyOutputMap key.
-            int nodeID = buildEventContext.NodeId;
-            int projectContextId = buildEventContext.ProjectContextId;
-
             ReuseableStringBuilder projectConfigurationDescription = null;
 
             Internal.Utilities.EnumerateItems(items, item =>
@@ -578,14 +596,27 @@ private void ReadProjectConfigurationDescription(BuildEventContext buildEventCon
                 }
             });
 
-            // Add the finished dictionary to propertyOutputMap.
             if (projectConfigurationDescription != null)
             {
-                propertyOutputMap.Add((nodeID, projectContextId), projectConfigurationDescription.ToString());
+                var result = projectConfigurationDescription.ToString();
                 (projectConfigurationDescription as IDisposable)?.Dispose();
+                return result;
             }
+
+            return null;
         }
 
+        /// <summary>
+        /// In case the items are stored on ProjectEvaluationFinishedEventArgs
+        /// (new behavior), we first store the value per evaluation, and then
+        /// in ProjectStarted, find the value from the project's evaluation
+        /// and use that.
+        /// </summary>
+        private (int, int) GetEvaluationKey(BuildEventContext buildEventContext)
+            // note that we use a negative number for evaluations so that we don't conflict
+            // with project context ids.
+            => (buildEventContext.NodeId, -buildEventContext.EvaluationId);
+
         /// <summary>
         /// Handler for project finished events
         /// </summary>
@@ -751,44 +782,23 @@ internal void WriteItems(BuildEventArgs e, IEnumerable items)
             ShownBuildEventContext(e.BuildEventContext);
         }
 
-        internal override void OutputItems(string itemType, ArrayList itemTypeList)
+        protected override void WriteItemType(string itemType)
         {
-            // Write each item, one per line
-            bool haveWrittenItemType = false;
-            foreach (ITaskItem item in itemTypeList)
-            {
-                if (!haveWrittenItemType)
-                {
-                    setColor(ConsoleColor.DarkGray);
-                    WriteMessageAligned(itemType, false);
-                    haveWrittenItemType = true;
-                }
-                setColor(ConsoleColor.Gray);
-
-                // Indent the text by two tab lengths
-                StringBuilder result = new StringBuilder((2 * tabWidth) + item.ItemSpec.Length);
-                result.Append(' ', 2 * tabWidth).Append(item.ItemSpec);
-                WriteMessageAligned(result.ToString(), false);
-
-                IDictionary metadata = item.CloneCustomMetadata();
+            setColor(ConsoleColor.DarkGray);
+            WriteMessageAligned(itemType, prefixAlreadyWritten: false);
+            setColor(ConsoleColor.Gray);
+        }
 
-                foreach (DictionaryEntry metadatum in metadata)
-                {
-                    string valueOrError;
-                    try
-                    {
-                        valueOrError = item.GetMetadata(metadatum.Key as string);
-                    }
-                    catch (InvalidProjectFileException e)
-                    {
-                        valueOrError = e.Message;
-                    }
+        protected override void WriteItemSpec(string itemSpec)
+        {
+            WriteMessageAligned(new string(' ', 2 * tabWidth) + itemSpec, prefixAlreadyWritten: false);
+        }
 
-                    WriteMessageAligned($"{new string(' ', 4 * tabWidth)}{metadatum.Key} = {valueOrError}", false);
-                }
-            }
-            resetColor();
+        protected override void WriteMetadata(string name, string value)
+        {
+            WriteMessageAligned($"{new string(' ', 4 * tabWidth)}{name} = {value}", prefixAlreadyWritten: false);
         }
+
         /// <summary>
         /// Handler for target started events
         /// </summary>
@@ -962,16 +972,16 @@ public override void TaskFinishedHandler(object sender, TaskFinishedEventArgs e)
         /// <summary>
         /// Finds the LogOutProperty string to be printed in messages.
         /// </summary>
-        /// <param name="e"> Build event to extract context information from.</param>
+        /// <param name="e">Build event to extract context information from.</param>
         internal string FindLogOutputProperties(BuildEventArgs e)
         {
             string projectConfigurationDescription = String.Empty;
             if (e.BuildEventContext != null)
             {
-                int nodeId = e.BuildEventContext.NodeId;
-                int projectContextId = e.BuildEventContext.ProjectContextId;
-                propertyOutputMap.TryGetValue((nodeId, projectContextId), out projectConfigurationDescription);
+                var key = (e.BuildEventContext.NodeId, e.BuildEventContext.ProjectContextId);
+                propertyOutputMap.TryGetValue(key, out projectConfigurationDescription);
             }
+
             return projectConfigurationDescription;
         }
 
@@ -1090,23 +1100,8 @@ public override void MessageHandler(object sender, BuildMessageEventArgs e)
             }
             else
             {
-                switch (e.Importance)
-                {
-                    case MessageImportance.High:
-                        print = IsVerbosityAtLeast(LoggerVerbosity.Minimal);
-                        break;
-                    case MessageImportance.Normal:
-                        print = IsVerbosityAtLeast(LoggerVerbosity.Normal);
-                        lightenText = true;
-                        break;
-                    case MessageImportance.Low:
-                        print = IsVerbosityAtLeast(LoggerVerbosity.Detailed);
-                        lightenText = true;
-                        break;
-                    default:
-                        ErrorUtilities.VerifyThrow(false, "Impossible");
-                        break;
-                }
+                LoggerVerbosity minimumVerbosity = ImportanceToMinimumVerbosity(e.Importance, out lightenText);
+                print = IsVerbosityAtLeast(minimumVerbosity);
             }
 
             if (print)
@@ -1168,7 +1163,12 @@ public override void StatusEventHandler(object sender, BuildStatusEventArgs e)
                     }
                 }
 
-                ReadProjectConfigurationDescription(projectEvaluationFinished.BuildEventContext, projectEvaluationFinished.Items);
+                var value = ReadProjectConfigurationDescription(projectEvaluationFinished.Items);
+                if (value != null)
+                {
+                    var evaluationKey = GetEvaluationKey(e.BuildEventContext);
+                    propertyOutputMap[evaluationKey] = value;
+                }
             }
         }
 
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index c47c5ed976d..9deedd88b0e 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -497,28 +497,8 @@ public override void WarningHandler(object sender, BuildWarningEventArgs e)
         /// </summary>
         public override void MessageHandler(object sender, BuildMessageEventArgs e)
         {
-            bool print = false;
-            bool lightenText = false;
-            switch (e.Importance)
-            {
-                case MessageImportance.High:
-                    print = IsVerbosityAtLeast(LoggerVerbosity.Minimal);
-                    break;
-
-                case MessageImportance.Normal:
-                    print = IsVerbosityAtLeast(LoggerVerbosity.Normal);
-                    lightenText = true;
-                    break;
-
-                case MessageImportance.Low:
-                    print = IsVerbosityAtLeast(LoggerVerbosity.Detailed);
-                    lightenText = true;
-                    break;
-
-                default:
-                    ErrorUtilities.VerifyThrow(false, "Impossible");
-                    break;
-            }
+            LoggerVerbosity minimumVerbosity = ImportanceToMinimumVerbosity(e.Importance, out bool lightenText);
+            bool print = IsVerbosityAtLeast(minimumVerbosity);
 
             if (print)
             {
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 43d9b794046..d08e337c5da 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -4,8 +4,8 @@
   <Import Project="..\Shared\DebuggingSources.proj" />
 
   <PropertyGroup>
-    <TargetFrameworks>net5.0</TargetFrameworks>
-    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(FullFrameworkTFM);net5.0</TargetFrameworks>
+    <TargetFrameworks>net6.0</TargetFrameworks>
+    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(FullFrameworkTFM);net6.0</TargetFrameworks>
     <TargetFrameworks Condition="'$(MonoBuild)'=='true'">$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
     <RootNamespace>Microsoft.Build</RootNamespace>
     <AssemblyName>Microsoft.Build</AssemblyName>
@@ -20,7 +20,7 @@
     <IsPackable>true</IsPackable>
     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which is used to create, edit, and evaluate MSBuild projects.</PackageDescription>
     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>
-    <ApplyNgenOptimization Condition="'$(TargetFramework)' == '$(FullFrameworkTFM)'">partial</ApplyNgenOptimization>
+    <ApplyNgenOptimization Condition="'$(TargetFramework)' == '$(FullFrameworkTFM)'">full</ApplyNgenOptimization>
 
     <!-- Do not generate a warning that our 'stable' package should not have a prerelease dependency. -->
     <NoWarn>$(NoWarn);NU5104</NoWarn>
@@ -157,6 +157,7 @@
     <Compile Include="BackEnd\Components\Caching\ConfigCacheWithOverride.cs" />
     <Compile Include="BackEnd\Components\Caching\ResultsCacheWithOverride.cs" />
     <Compile Include="BackEnd\Components\ProjectCache\*.cs" />
+    <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
     <Compile Include="Utilities\NuGetFrameworkWrapper.cs" />
@@ -264,6 +265,8 @@
     <Compile Include="Evaluation\LazyItemEvaluator.IncludeOperation.cs" />
     <Compile Include="Evaluation\LazyItemEvaluator.ItemFactoryWrapper.cs" />
     <Compile Include="Evaluation\LazyItemEvaluator.RemoveOperation.cs" />
+    <Compile Include="Evaluation\LazyItemEvaluator.OrderedItemDataCollection.cs" />
+    <Compile Include="Evaluation\ItemDataCollectionValue.cs" />
     <Compile Include="Evaluation\MetadataReference.cs" />
     <Compile Include="Graph\ProjectGraphEntryPoint.cs" />
     <Compile Include="Graph\ProjectGraph.cs" />
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 2441874fb8f..db27d0712c8 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -1285,13 +1285,15 @@
     <value>MSB4244: The SDK resolver assembly "{0}" could not be loaded. {1}</value>
     <comment>{StrBegin="MSB4244: "}</comment>
   </data>
-  <data name="CouldNotRunSdkResolver" xml:space="preserve">
-    <value>MSB4242: The SDK resolver "{0}" failed to run. {1}</value>
+  <data name="SDKResolverCriticalFailure" xml:space="preserve">
+    <value>MSB4242: SDK Resolver Failure: "{0}"</value>
     <comment>{StrBegin="MSB4242: "}</comment>
   </data>
+  <data name="SDKResolverFailed" xml:space="preserve">
+    <value>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</value>
+  </data>
   <data name="CouldNotRunNuGetSdkResolver" xml:space="preserve">
-    <value>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</value>
-    <comment>{StrBegin="MSB4243: "}</comment>
+    <value>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</value>
   </data>
   <data name="SdkResolverManifestInvalid" xml:space="preserve">
     <value>MSB4245: SDK Resolver manifest file is invalid. This may indicate a corrupt or invalid installation of MSBuild. Manifest file path '{0}'. Message: {1}</value>
@@ -1353,7 +1355,7 @@
     <comment>{StrBegin="MSB4209: "}</comment>
   </data>
   <data name="AffinityConflict" xml:space="preserve">
-    <value>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</value>
+    <value>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</value>
     <comment>{StrBegin="MSB4213: "}</comment>
   </data>
   <data name="UnableToCreateNode" xml:space="preserve">
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index fd04936e305..bdf7ebe0340 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: Zak√°z√°n√≠ uzlu inproc zp≈Øsob√≠ sn√≠≈æen√≠ v√Ωkonu p≈ôi pou≈æ√≠v√°n√≠ modul≈Ø plug-in mezipamƒõti projektu, kter√© vys√≠laj√≠ ≈æ√°dosti o sestaven√≠ proxy serveru.</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: Selh√°n√≠ p≈ôekladaƒçe sady SDK: {0}</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">P≈ôekladaƒç sady SDK {0} selhal p≈ôi pokusu o p≈ôeklad sady SDK {1}. V√Ωjimka: {2}</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: Projekt {0} p≈ôeskoƒçil omezen√≠ izolace grafu v odkazovan√©m projektu {1}.</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: Urƒçen√© sp≈ôa≈æen√≠ po≈æadavku {0} je v konfliktu s p≈ôedchoz√≠m sp≈ôa≈æen√≠m {1} urƒçen√Ωm pro tento projekt.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: Urƒçen√© sp≈ôa≈æen√≠ po≈æadavku {0} je v konfliktu s p≈ôedchoz√≠m sp≈ôa≈æen√≠m {1} urƒçen√Ωm pro projekt {2} s glob√°ln√≠mi vlastnostmi {3}.</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Vyu≈æit√≠:          Pr≈Ømƒõrn√© vyu≈æit√≠ {0}: {1:###.0}</target>
         <target state="translated">MSB4244: Sestaven√≠ p≈ôekladaƒçe sady SDK {0} nebylo mo≈æn√© naƒç√≠st. {1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: P≈ôekladaƒç sady SDK {0} se nepoda≈ôilo spustit. {1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: P≈ôekladaƒç sady SDK zalo≈æen√Ω na NuGet se nepoda≈ôilo spustit, proto≈æe sestaven√≠ NuGet se nena≈°la. Zkontrolujte instalaci n√°stroje MSBuild nebo nastavte promƒõnnou prost≈ôed√≠ {0} na slo≈æku, kter√° obsahuje po≈æadovan√° sestaven√≠ NuGet. {1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">P≈ôekladaƒç sady SDK zalo≈æen√Ω na NuGet se nepoda≈ôilo spustit, proto≈æe sestaven√≠ NuGet se nena≈°la. Zkontrolujte instalaci n√°stroje MSBuild nebo nastavte promƒõnnou prost≈ôed√≠ {0} na slo≈æku, kter√° obsahuje po≈æadovan√° sestaven√≠ NuGet. {1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index d3c84a65998..189016ff8b6 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: Das Deaktivieren des In-Process-Knotens f√ºhrt zu Leistungseinbu√üen bei der Verwendung von Projektcache-Plug-Ins, die Proxybuildanforderungen ausgeben.</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: Fehler bei SDK-Resolver: "{0}"</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">Ausfall beim Versuch des SDK-Resolver "{0}", das SDK "{1}" aufzul√∂sen. Ausnahme: "{2}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: Das Projekt "{0}" hat Graphisolationseinschr√§nkungen f√ºr das referenzierte Projekt "{1}" √ºbersprungen.</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: Die angegebene Anforderungsaffinit√§t {0} steht mit einer fr√ºheren Affinit√§t {1} in Konflikt, die f√ºr dieses Projekt angegeben wurde.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: Die angegebene Anforderungsaffinit√§t {0} verursacht einen Konflikt mit einer vorherigen Affinit√§t {1} speziell f√ºr das Projekt {2} mit globalen Eigenschaften {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Auslastung:          {0} Durchschnittliche Auslastung: {1:###.0}</target>
         <target state="translated">MSB4244: Die SDK-Resolverassembly "{0}" konnte nicht geladen werden. {1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: Der SDK-Resolver "{0}" konnte nicht ausgef√ºhrt werden. {1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: Fehler beim NuGet-basierten SDK-Resolver, weil die NuGet-Assemblys nicht gefunden wurden. √úberpr√ºfen Sie Ihre Installation von MSBuild, oder legen Sie die Umgebungsvariable "{0}" auf den Ordner fest, der die erforderlichen NuGet-Assemblys enth√§lt. {1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">Fehler beim NuGet-basierten SDK-Resolver, weil die NuGet-Assemblies nicht gefunden wurden. √úberpr√ºfen Sie Ihre Installation von MSBuild, oder legen Sie die Umgebungsvariable "{0}" auf den Ordner fest, der die erforderlichen NuGet-Assemblies enth√§lt. {1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/Resources/xlf/Strings.en.xlf b/src/Build/Resources/xlf/Strings.en.xlf
index 2e20e50527d..cff665d540f 100644
--- a/src/Build/Resources/xlf/Strings.en.xlf
+++ b/src/Build/Resources/xlf/Strings.en.xlf
@@ -262,6 +262,16 @@
         <target state="new">MSB4274: Disabling the inproc node leads to performance degradation when using project cache plugins that emit proxy build requests.</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="new">MSB4242: SDK Resolver Failure: "{0}"</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="new">The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="new">MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</target>
@@ -1870,8 +1880,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="new">MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2399,15 +2409,10 @@ Utilization:          {0} Average Utilization: {1:###.0}</target>
         <target state="new">Done writing report.</target>
         <note />
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="new">MSB4242: The SDK resolver "{0}" failed to run. {1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="new">MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="new">The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ReferencingMultipleVersionsOfTheSameSdk">
         <source>MSB4240: Multiple versions of the same SDK "{0}" cannot be specified. The previously resolved SDK version "{1}" from location "{2}" will be used and the version "{3}" will be ignored.</source>
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index f580cb75fab..01daa41d62b 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: Al deshabilitar el nodo InProc, se degrada el rendimiento cuando use los complementos de cach√© de proyectos que emiten solicitudes de compilaci√≥n de proxy.</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: Error del solucionador del SDK: "{0}"</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">Error en el solucionador del SDK "{0}" al intentar resolver el SDK "{1}". Excepci√≥n: "{2}".</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: El proyecto "{0}" ha omitido las restricciones de aislamiento de gr√°ficos en el proyecto "{1}" al que se hace referencia.</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: La afinidad de solicitud {0} especificada est√° en conflicto con una afinidad {1} anterior especificada para este proyecto.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: La afinidad de solicitud {0} especificada est√° en conflicto con una afinidad {1} anterior especificada para el proyecto {2} con las propiedades globales {3}.</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Utilizaci√≥n:          Utilizaci√≥n media de {0}: {1:###.0}</target>
         <target state="translated">MSB4244: El ensamblado de la resoluci√≥n del SDK "{0}" no se pudo cargar. {1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: La resoluci√≥n del SDK "{0}" no se pudo ejecutar. {1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: La resoluci√≥n del SDK basado en NuGet no se pudo ejecutar porque no se encontraron los ensamblados de NuGet. Compruebe su instalaci√≥n de MSBuild o configure la variable del entorno "{0}" en la carpeta que contiene los ensamblados de NuGet requeridos. {1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">No se pudo ejecutar la resoluci√≥n del SDK basado en NuGet porque no se encontraron los ensamblados de NuGet. Compruebe su instalaci√≥n de MSBuild o configure la variable del entorno "{0}" en la carpeta que contiene los ensamblados de NuGet requeridos. {1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index 7949e02cabc..84593fc74d6 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: la d√©sactivation du n≈ìud inproc entra√Æne une d√©t√©rioration des performances lors de l‚Äôutilisation de plug-ins de cache de projet qui √©mettent des requ√™tes de build proxy.</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: √âchec du Programme de R√©solution SDK : ¬´{0}¬ª</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">√âchec du programme de r√©solution SDK ¬´{0}¬ª lors de la tentative de r√©solution du kit de d√©veloppement logiciel (SDK) ¬´{1}¬ª. Exception : "{2}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: le projet "{0}" a ignor√© les contraintes d'isolement de graphe dans le projet r√©f√©renc√© "{1}"</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: L'affinit√© de requ√™te sp√©cifi√©e {0} est en conflit avec une affinit√© pr√©c√©dente {1} sp√©cifi√©e pour ce projet.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: L'affinit√© de requ√™te sp√©cifi√©e {0} est en conflit avec une affinit√© pr√©c√©dente {1} sp√©cifi√©e pour ce projet {2} avec des propri√©t√©s globales {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Utilisation¬†:          {0} Utilisation moyenne¬†: {1:###.0}</target>
         <target state="translated">MSB4244: Impossible de charger l'assembly de r√©solution de SDK "{0}". {1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: Impossible d'ex√©cuter la r√©solution de SDK "{0}". {1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: Impossible d'ex√©cuter la r√©solution de SDK NuGet parce que les assemblys NuGet n'ont pas pu √™tre localis√©s. V√©rifiez votre installation de MSBuild ou d√©finissez la variable d'environnement "{0}" dans le dossier qui contient les assemblys NuGet obligatoires. {1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">Le r√©solveur SDK bas√© sur NuGet n'a pas pu s'ex√©cuter car les assemblys NuGet n'ont pas pu √™tre localis√©s. V√©rifiez votre installation de MSBuild ou d√©finissez la variable d'environnement "{0}" dans le dossier qui contient les assemblys NuGet obligatoires. {1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index 52645cf5e12..a3c2a92531e 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: la disabilitazione del nodo InProc porta a una riduzione del livello delle prestazioni quando si usano plug-in della cache del progetto che emettono richieste di compilazione proxy.</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: errore sistema di risoluzione SDK: "{0}"</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">Il sistema di risoluzione SDK "{0}" non √® riuscito durante il tentativo di risolvere l'SDK "{1}". Eccezione: "{2}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: il progetto "{0}" ha ignorato i vincoli di isolamento del grafico nel progetto di riferimento "{1}"</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: l'affinit√† della richiesta specificata {0} √® in conflitto con l'affinit√† {1} precedentemente specificata per il progetto.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: l'affinit√† della richiesta specificata {0} √® in conflitto con l'affinit√† {1} precedentemente specificata per il progetto {2} con le propriet√† globali {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Utilizzo:          {0} Utilizzo medio: {1:###.0}</target>
         <target state="translated">MSB4244: non √® stato possibile caricare l'assembly "{0}" del resolver SDK. {1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: non √® stato possibile eseguire il resolver SDK "{0}". {1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: non √® stato possibile eseguire il resolver SDK basato su NuGet perch√© non sono stati trovati assembly NuGet. Controllare l'installazione di MSBuild oppure impostare la variabile di ambiente "{0}" sulla cartella che contiene gli assembly NuGet richiesti. {1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">Non √® stato possibile eseguire il resolver SDK basato su NuGet perch√© non sono stati trovati assembly NuGet. Controllare l'installazione di MSBuild oppure impostare la variabile di ambiente "{0}" sulla cartella che contiene gli assembly NuGet richiesti. {1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index 56ac6773c8a..66e3a864ded 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: „Éó„É≠„Ç≠„Ç∑„Éª„Éì„É´„ÉâË¶ÅÊ±Ç„ÇíÂá∫„Åô„Éó„É≠„Ç∏„Çß„ÇØ„Éà „Ç≠„É£„ÉÉ„Ç∑„É• „Éó„É©„Ç∞„Ç§„É≥„Çí‰ΩøÁî®„Åô„ÇãÂ†¥Âêà„ÄÅInProc „Éé„Éº„Éâ„ÇíÁÑ°Âäπ„Å´„Åô„Çã„Å®„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Åå‰Ωé‰∏ã„Åó„Åæ„Åô„ÄÇ</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: SDK „É™„Çæ„É´„Éê„Éº „Ç®„É©„Éº: "{0}"</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">SDK "{1}" „ÇíËß£Ê±∫„Åó„Çà„ÅÜ„Å®„Åó„Å¶„ÅÑ„Çã„Å®„Åç„Å´„ÄÅSDK „É™„Çæ„É´„Éê„Éº "{0}" „Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ‰æãÂ§ñ: "{2}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: „Éó„É≠„Ç∏„Çß„ÇØ„Éà "{0}" „ÅØ„ÄÅÂèÇÁÖßÂÖà„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà "{1}" „Åß„ÄÅ„Ç∞„É©„Éï„ÅÆÂàÜÈõ¢Âà∂Á¥Ñ„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: ÊåáÂÆö„Åï„Çå„ÅüË¶ÅÊ±Ç„ÅÆÈñ¢‰øÇ {0} „ÅØ„ÄÅ„Åì„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å´ÂØæ„Åó„Å¶‰ª•Ââç„Å´ÊåáÂÆö„Åï„Çå„ÅüÈñ¢‰øÇ {1} „Å®Á´∂Âêà„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: ÊåáÂÆö„Åï„Çå„ÅüË¶ÅÊ±Ç„ÅÆÈñ¢‰øÇ {0} „ÅØ„ÄÅ„Ç∞„É≠„Éº„Éê„É´ „Éó„É≠„Éë„ÉÜ„Ç£ {3} „ÇíÊåÅ„Å§„Éó„É≠„Ç∏„Çß„ÇØ„Éà {2} „Å´ÂØæ„Åó„Å¶‰ª•Ââç„Å´ÊåáÂÆö„Åï„Çå„ÅüÈñ¢‰øÇ {1} „Å®Á´∂Âêà„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
         <target state="translated">MSB4244: SDK Á´∂ÂêàÂõûÈÅø„É¢„Ç∏„É•„Éº„É´„ÅÆ„Ç¢„Çª„É≥„Éñ„É™ "{0}" „ÇíË™≠„ÅøËæº„ÇÅ„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ{1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: SDK Á´∂ÂêàÂõûÈÅø„É¢„Ç∏„É•„Éº„É´ "{0}" „ÇíÂÆüË°å„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ{1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: NuGet „Ç¢„Çª„É≥„Éñ„É™„ÇíË¶ã„Å§„Åë„Çã„Åì„Å®„Åå„Åß„Åç„Å™„Åã„Å£„Åü„Åü„ÇÅ„ÄÅNuGet „Éô„Éº„Çπ„ÅÆ SDK Á´∂ÂêàÂõûÈÅø„É¢„Ç∏„É•„Éº„É´„ÇíÂÆüË°å„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇMSBuild „ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíÁ¢∫Ë™ç„Åô„Çã„Åã„ÄÅÁí∞Â¢ÉÂ§âÊï∞ "{0}" „Çí„ÄÅÂøÖË¶Å„Å™ NuGet „Ç¢„Çª„É≥„Éñ„É™„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Éï„Ç©„É´„ÉÄ„Éº„Å´Ë®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ{1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">NuGet „Ç¢„Çª„É≥„Éñ„É™„ÇíË¶ã„Å§„Åë„Çã„Åì„Å®„Åå„Åß„Åç„Å™„Åã„Å£„Åü„Åü„ÇÅ„ÄÅNuGet „Éô„Éº„Çπ„ÅÆ SDK Á´∂ÂêàÂõûÈÅø„É¢„Ç∏„É•„Éº„É´„ÇíÂÆüË°å„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇMSBuild „ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíÁ¢∫Ë™ç„Åô„Çã„Åã„ÄÅÁí∞Â¢ÉÂ§âÊï∞ "{0}" „Çí„ÄÅÂøÖË¶Å„Å™ NuGet „Ç¢„Çª„É≥„Éñ„É™„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Çã„Éï„Ç©„É´„ÉÄ„Éº„Å´Ë®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ{1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index e682e068149..a7d18597b51 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: ÌîÑÎ°ùÏãú ÎπåÎìú ÏöîÏ≤≠ÏùÑ ÎÇ¥Î≥¥ÎÇ¥Îäî ÌîÑÎ°úÏ†ùÌä∏ Ï∫êÏãú ÌîåÎü¨Í∑∏ Ïù∏ÏùÑ ÏÇ¨Ïö©Ìï† Îïå inproc ÎÖ∏ÎìúÎ•º ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎèÑÎ°ù ÏÑ§Ï†ïÌïòÎ©¥ ÏÑ±Îä•Ïù¥ Ï†ÄÌïòÎê©ÎãàÎã§.</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: SDK Ìï¥Í≤∞ ÌîÑÎ°úÍ∑∏Îû® Ïò§Î•ò: "{0}"</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">SDK "{1}"ÏùÑ(Î•º) ÌôïÏù∏ÌïòÎäî ÎèôÏïà SDK ÌôïÏù∏Ïûê "{0}"Ïù¥(Í∞Ä) Ïã§Ìå®ÌñàÏäµÎãàÎã§. ÏòàÏô∏: "{2}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: ÌîÑÎ°úÏ†ùÌä∏ "{0}"ÏóêÏÑú Ï∞∏Ï°∞Îêú ÌîÑÎ°úÏ†ùÌä∏ "{1}"Ïùò Í∑∏ÎûòÌîÑ Í≤©Î¶¨ Ï†úÏïΩ Ï°∞Í±¥ÏùÑ Í±¥ÎÑàÎõ∞ÏóàÏäµÎãàÎã§.</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: ÏßÄÏ†ïÌïú ÏöîÏ≤≠ ÏÑ†Ìò∏ÎèÑ {0}Ïù¥(Í∞Ä) Ïù¥ ÌîÑÎ°úÏ†ùÌä∏Ïóê ÎåÄÌï¥ Ïù¥Ï†ÑÏóê ÏßÄÏ†ïÌïú ÏÑ†Ìò∏ÎèÑ {1}Í≥º(ÏôÄ) Ï∂©ÎèåÌï©ÎãàÎã§.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: ÏßÄÏ†ïÎêú ÏöîÏ≤≠ ÏÑ†Ìò∏ÎèÑ {0}Ïù¥(Í∞Ä) Ï†ÑÏó≠ ÏÜçÏÑ±Ïù¥ {3}Ïù∏ ÌîÑÎ°úÏ†ùÌä∏ {2}Ïóê ÎåÄÌï¥ ÏßÄÏ†ïÎêú Ïù¥Ï†Ñ ÏÑ†Ìò∏ÎèÑ {1}ÏôÄ(Í≥º) Ï∂©ÎèåÌï©ÎãàÎã§.</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
         <target state="translated">MSB4244: SDK ÌôïÏù∏Ïûê Ïñ¥ÏÖàÎ∏îÎ¶¨ "{0}"ÏùÑ(Î•º) Î°úÎìúÌï† Ïàò ÏóÜÏäµÎãàÎã§. {1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: SDK ÌôïÏù∏Ïûê "{0}"ÏùÑ(Î•º) Ïã§ÌñâÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§. {1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: NuGet Ïñ¥ÏÖàÎ∏îÎ¶¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏñ¥ NuGet Í∏∞Î∞ò SDK ÌôïÏù∏ÏûêÎ•º Ïã§ÌñâÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§. MSBuild ÏÑ§ÏπòÎ•º ÌôïÏù∏ÌïòÍ±∞ÎÇò ÌôòÍ≤Ω Î≥ÄÏàò "{0}"ÏùÑ(Î•º) ÌïÑÏöîÌïú NuGet Ïñ¥ÏÖàÎ∏îÎ¶¨Í∞Ä Ìè¨Ìï®Îêú Ìè¥ÎçîÎ°ú ÏÑ§Ï†ïÌïòÏÑ∏Ïöî. {1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">NuGet Ïñ¥ÏÖàÎ∏îÎ¶¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏñ¥ NuGet Í∏∞Î∞ò SDK ÌôïÏù∏ÏûêÎ•º Ïã§ÌñâÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§. MSBuild ÏÑ§ÏπòÎ•º ÌôïÏù∏ÌïòÍ±∞ÎÇò ÌôòÍ≤Ω Î≥ÄÏàò "{0}"ÏùÑ(Î•º) ÌïÑÏöîÌïú NuGet Ïñ¥ÏÖàÎ∏îÎ¶¨Í∞Ä Ìè¨Ìï®Îêú Ìè¥ÎçîÎ°ú ÏÑ§Ï†ïÌïòÏÑ∏Ïöî. {1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index bf49e4af42e..7430b42c9b1 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: wy≈ÇƒÖczenie wƒôz≈Ça InProc prowadzi do obni≈ºenia wydajno≈õci, gdy u≈ºywane sƒÖ wtyczki pamiƒôci podrƒôcznej projektu, kt√≥re emitujƒÖ ≈ºƒÖdania kompilowania serwera proxy.</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: niepowodzenia programu do rozpoznawania zestawu SDK: ‚Äû{0}‚Äù</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">WystƒÖpi≈Ç b≈ÇƒÖd programu do rozpoznawania zestawu SDK ‚Äû{0}‚Äù podczas pr√≥by rozpoznania zestawu SDK ‚Äû{1}‚Äù. WyjƒÖtek: ‚Äû{2}‚Äù</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: W przypadku projektu ‚Äû{0}‚Äù pominiƒôto ograniczenia izolacji grafu dla przywo≈Çywanego projektu ‚Äû{1}‚Äù</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: Podana koligacja ≈ºƒÖdania {0} jest w konflikcie z poprzedniƒÖ koligacjƒÖ {1} okre≈õlonƒÖ dla tego projektu.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: podana koligacja ≈ºƒÖdania {0} jest w¬†konflikcie z poprzedniƒÖ koligacjƒÖ {1} okre≈õlonƒÖ dla projektu {2} za pomocƒÖ w≈Ça≈õciwo≈õci globalnych {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Wykorzystanie:          ≈örednie wykorzystanie {0}: {1:###.0}</target>
         <target state="translated">MSB4244: Nie mo≈ºna za≈Çadowaƒá zestawu programu rozpoznawania zestawu SDK ‚Äû{0}‚Äù. {1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: Nie mo≈ºna uruchomiƒá programu rozpoznawania zestawu SDK ‚Äû{0}‚Äù. {1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: Nie mo≈ºna uruchomiƒá programu rozpoznawania zestawu SDK opartego na narzƒôdziu NuGet, poniewa≈º nie mo≈ºna zlokalizowaƒá zestaw√≥w NuGet. Sprawd≈∫ instalacjƒô programu MSBuild lub ustaw zmiennƒÖ ≈õrodowiskowƒÖ ‚Äû{0}‚Äù na folder zawierajƒÖcy wymagane zestawy NuGet. {1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">Nie mo≈ºna uruchomiƒá programu do rozpoznawania zestawu SDK opartego na narzƒôdziu NuGet, poniewa≈º nie mo≈ºna zlokalizowaƒá zestaw√≥w NuGet. Sprawd≈∫ instalacjƒô programu MSBuild lub ustaw zmiennƒÖ ≈õrodowiskowƒÖ ‚Äû{0}‚Äù na folder zawierajƒÖcy wymagane zestawy NuGet. {1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index 05415ba0bfa..511d8aa41d5 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: desativar o n√≥ inproc leva √† degrada√ß√£o do desempenho ao usar plug-ins de cache de projeto que emitem solicita√ß√µes de constru√ß√£o de proxy.</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: Falha no Resolvedor do SDK: "{0}"</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">O resolvedor do SDK "{0}" falhou ao tentar resolver o¬†SDK "{1}". Exce√ß√£o: "{2}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: o projeto "{0}" ignorou as restri√ß√µes de isolamento do gr√°fico no projeto referenciado "{1}"</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: A afinidade de solicita√ß√£o especificada {0} est√° em conflito com uma afinidade anterior {1} especificada para este projeto.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: A afinidade de solicita√ß√£o especificada {0} est√° em conflito com uma afinidade anterior {1} especificada para o projeto {2} com propriedades globais {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Utiliza√ß√£o:          {0} Utiliza√ß√£o M√©dia: {1:###.0}</target>
         <target state="translated">MSB4244: n√£o foi poss√≠vel carregar o assembly do resolvedor "{0}" do SDK. {1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: falha ao executar o resolvedor "{0}" do SDK. {1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: falha ao executar o resolvedor do SDK baseado em NuGet porque n√£o foi poss√≠vel localizar os assemblies do NuGet. Verifique a instala√ß√£o do MSBuild ou defina a vari√°vel de ambiente "{0}" para a pasta que cont√©m os assemblies necess√°rios do NuGet. {1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">O resolvedor do SDK baseado em NuGet falhou ao executar porque os assemblies do NuGet n√£o puderam ser localizados. Verifique sua instala√ß√£o do MSBuild ou defina a vari√°vel de ambiente "{0}" para a pasta que cont√©m os assemblies do NuGet necess√°rios. {1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index 096b82fd9b8..f19945c2240 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏–ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–≥–æ —É–∑–ª–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –∑–∞–º–µ–¥–ª–µ–Ω–∏—é –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–ª–∞–≥–∏–Ω–æ–≤ –∫—ç—à–∞ –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞—é—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–±–æ—Ä–∫—É –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞.</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: —Å–±–æ–π —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç–µ–ª—è SDK: "{0}"</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">–°–±–æ–π —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç–µ–ª—è SDK "{0}" –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç SDK "{1}". –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: "{2}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: –ø—Ä–æ–µ–∫—Ç "{0}" –ø—Ä–æ–ø—É—Å—Ç–∏–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–∑–æ–ª—è—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ "{1}", –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Å—ã–ª–∫–∞.</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–∞ {0} –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å—Ö–æ–¥—Å—Ç–≤–æ–º {1}, –∑–∞–¥–∞–Ω–Ω—ã–º –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–∞ {0} –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å—Ö–æ–¥—Å—Ç–≤–æ–º {1}, –∑–∞–¥–∞–Ω–Ω—ã–º –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {2} —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ {3}</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
         <target state="translated">MSB4244: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–±–æ—Ä–∫—É —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç–µ–ª—è SDK —Ç–∏–ø–∞ "{0}". {1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç–µ–ª—å SDK "{0}". {1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç–µ–ª—å SDK –Ω–∞ –±–∞–∑–µ NuGet, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–±–æ—Ä–∫–∏ NuGet. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é —É—Å—Ç–∞–Ω–æ–≤–∫—É MSBuild –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç—Ä–µ–±—É–µ–º—ã–µ —Å–±–æ—Ä–∫–∏ NuGet, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã "{0}". {1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç–µ–ª—å SDK –Ω–∞ –±–∞–∑–µ NuGet, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–±–æ—Ä–∫–∏ NuGet. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é —É—Å—Ç–∞–Ω–æ–≤–∫—É MSBuild –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç—Ä–µ–±—É–µ–º—ã–µ —Å–±–æ—Ä–∫–∏ NuGet, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã "{0}". {1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 07e20b02e39..6ba8540f344 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: InProc d√ºƒü√ºm√ºn√ºn devre dƒ±≈üƒ± bƒ±rakƒ±lmasƒ±, ara sunucu olu≈üturma istekleri g√∂nderen proje √∂nbelleƒüi eklentileri kullanƒ±lƒ±rken performans d√º≈ü√º≈ü√ºne yol a√ßar.</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: SDK √á√∂z√ºmleyici Hatasƒ±: "{0}"</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">"{0}" SDK √ß√∂z√ºmleyicisi, "{1}" SDK'sƒ±nƒ± √ß√∂z√ºmlemeye √ßalƒ±≈üƒ±rken ba≈üarƒ±sƒ±z oldu. ƒ∞stisna: "{2}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: "{0}" projesi, ba≈üvurulan "{1}" projesindeki graf yalƒ±tƒ±mƒ± kƒ±sƒ±tlamalarƒ±nƒ± atladƒ±</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: Belirtilen istek benze≈üimi {0} bu proje i√ßin daha √∂nce belirtilen {1} benze≈üimi ile √ßakƒ±≈üƒ±yor.</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: Belirtilen istek benze≈üimi {0}, {3} genel √∂zelliklerine sahip {2} projesi i√ßin belirtilen √∂nceki bir {1} benze≈üimiyle √ßakƒ±≈üƒ±yor</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Kullanƒ±m:             {0} Ortalama Kullanƒ±m: {1:###.0}</target>
         <target state="translated">MSB4244: "{0}" SDK √ß√∂z√ºmleyicisi b√ºt√ºnle≈ütirilmi≈ü kodu y√ºklenemedi. {1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: "{0}" SDK √ß√∂z√ºmleyicisi √ßalƒ±≈ütƒ±rƒ±lamadƒ±. {1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: NuGet b√ºt√ºnle≈ütirilmi≈ü kodlarƒ± bulunamadƒ±ƒüƒ±ndan NuGet tabanlƒ± SDK √ß√∂z√ºmleyicisi √ßalƒ±≈ütƒ±rƒ±lamadƒ±. MSBuild y√ºklemenizi denetleyin veya "{0}" ortam deƒüi≈ükenini gerekli NuGet b√ºt√ºnle≈ütirilmi≈ü kodlarƒ±nƒ± i√ßeren klas√∂r olarak ayarlayƒ±n. {1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">NuGet derlemeleri bulunamadƒ±ƒüƒ±ndan NuGet tabanlƒ± SDK √ß√∂z√ºmleyicisi √ßalƒ±≈ütƒ±rƒ±lamadƒ±. MSBuild y√ºklemenizi kontrol edin veya "{0}" ortam deƒüi≈ükenini gerekli NuGet derlemelerini i√ßeren klas√∂re ayarlayƒ±n. {1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index 5f687d7838f..bed465c1a19 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: ‰ΩøÁî®ÂèëÂá∫‰ª£ÁêÜÊûÑÂª∫ËØ∑Ê±ÇÁöÑÈ°πÁõÆÁºìÂ≠òÊèí‰ª∂Êó∂ÔºåÁ¶ÅÁî® inproc ËäÇÁÇπ‰ºöÂØºËá¥ÊÄßËÉΩ‰∏ãÈôç„ÄÇ</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: SDK Ëß£ÊûêÁ®ãÂ∫èÂ§±Ë¥•: "{0}"</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">Â∞ùËØïËß£Êûê SDK "{1}" Êó∂ÔºåSDK Ëß£ÊûêÁ®ãÂ∫è "{0}" Â§±Ë¥•„ÄÇÂºÇÂ∏∏: "{2}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: È°πÁõÆ‚Äú{0}‚ÄùÂ∑≤Ë∑≥ËøáÊâÄÂºïÁî®ÁöÑÈ°πÁõÆ‚Äú{1}‚Äù‰∏äÁöÑÂõæÂΩ¢ÈöîÁ¶ªÁ∫¶Êùü</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: ÊåáÂÆöÁöÑËØ∑Ê±ÇÂÖ≥ËÅî {0} ‰∏éÂÖàÂâç‰∏∫Ê≠§È°πÁõÆÊåáÂÆöÁöÑÂÖ≥ËÅî {1} ÂÜ≤Á™Å„ÄÇ</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: ÊåáÂÆöÁöÑËØ∑Ê±ÇÂÖ≥ËÅî {0} ‰∏éÂÖàÂâç‰∏∫ÂÖ∑ÊúâÂÖ®Â±ÄÂ±ûÊÄß {3} ÁöÑÈ°πÁõÆ {2} ÊåáÂÆöÁöÑÂÖ≥ËÅî {1} ÂÜ≤Á™Å„ÄÇ</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
         <target state="translated">MSB4244: Êó†Ê≥ïÂä†ËΩΩ SDK Ëß£ÊûêÁ®ãÂ∫èÁ®ãÂ∫èÈõÜ‚Äú{0}‚Äù„ÄÇ{1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: SDK Ëß£ÊûêÁ®ãÂ∫è‚Äú{0}‚ÄùËøêË°åÂ§±Ë¥•„ÄÇ{1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: Âü∫‰∫é NuGet ÁöÑ SDK Ëß£ÊûêÁ®ãÂ∫èËøêË°åÂ§±Ë¥•ÔºåÂõ†‰∏∫Êó†Ê≥ïÊâæÂà∞ NuGet Á®ãÂ∫èÈõÜ„ÄÇËØ∑Ê£ÄÊü•‰Ω†ÂÆâË£ÖÁöÑ MSBuild ÊàñÂ∞ÜÁéØÂ¢ÉÂèòÈáè‚Äú{0}‚ÄùËÆæÁΩÆ‰∏∫ÂåÖÂê´ÊâÄÈúÄ NuGet Á®ãÂ∫èÈõÜÁöÑÊñá‰ª∂Â§π„ÄÇ{1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">Âü∫‰∫é NuGet ÁöÑ SDK Ëß£ÊûêÁ®ãÂ∫èËøêË°åÂ§±Ë¥•ÔºåÂõ†‰∏∫Êó†Ê≥ïÊâæÂà∞ NuGet Á®ãÂ∫èÈõÜ„ÄÇËØ∑Ê£ÄÊü•‰Ω†ÂÆâË£ÖÁöÑ MSBuild ÊàñÂ∞ÜÁéØÂ¢ÉÂèòÈáè‚Äú{0}‚ÄùËÆæÁΩÆ‰∏∫ÂåÖÂê´ÊâÄÈúÄ NuGet Á®ãÂ∫èÈõÜÁöÑÊñá‰ª∂Â§π„ÄÇ{1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index ef4f8832a45..fa8a07b3ae3 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -262,6 +262,16 @@
         <target state="translated">MSB4274: ÂÅúÁî® inproc ÁØÄÈªûÊúÉÂú®‰ΩøÁî®ÂèØÁôºÂá∫ proxy ÁµÑÂª∫Ë¶ÅÊ±ÇÁöÑÂ∞àÊ°àÂø´ÂèñÂ§ñÊéõÁ®ãÂºèÊôÇÔºåÂ∞éËá¥ÊïàËÉΩÈôç‰Ωé„ÄÇ</target>
         <note />
       </trans-unit>
+      <trans-unit id="SDKResolverCriticalFailure">
+        <source>MSB4242: SDK Resolver Failure: "{0}"</source>
+        <target state="translated">MSB4242: SDK Ëß£ÊûêÁ®ãÂºèÂ§±Êïó: "{0}"</target>
+        <note>{StrBegin="MSB4242: "}</note>
+      </trans-unit>
+      <trans-unit id="SDKResolverFailed">
+        <source>The SDK resolver "{0}" failed while attempting to resolve the SDK "{1}". Exception: "{2}"</source>
+        <target state="translated">SDK Ëß£ÊûêÁ®ãÂºè "{0}" Âú®ÂòóË©¶Ëß£Êûê SDK "{1}" ÊôÇÂ§±Êïó„ÄÇ‰æãÂ§ñÁãÄÊ≥Å: "{2}"</target>
+        <note />
+      </trans-unit>
       <trans-unit id="SkippedConstraintsOnRequest">
         <source>MSB4260: Project "{0}" skipped graph isolation constraints on referenced project "{1}"</source>
         <target state="translated">MSB4260: Â∞àÊ°à "{0}" Â∑≤Ë∑≥ÈÅéÂèÉËÄÉÂ∞àÊ°à "{1}" ‰∏äÁöÑÂúñÂΩ¢ÈöîÈõ¢Ê¢ù‰ª∂Á¥ÑÊùü</target>
@@ -1790,8 +1800,8 @@
         <note>{StrBegin="MSB4209: "}</note>
       </trans-unit>
       <trans-unit id="AffinityConflict">
-        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for this project.</source>
-        <target state="translated">MSB4213: ÊåáÂÆöÁöÑË¶ÅÊ±ÇË¶™ÂíåÊÄß {0} ËàáÂÖàÂâçÁÇ∫ÈÄôÂÄãÂ∞àÊ°àÊåáÂÆöÁöÑË¶™ÂíåÊÄß {1} Ë°ùÁ™Å„ÄÇ</target>
+        <source>MSB4213: The specified request affinity {0} conflicts with a previous affinity {1} specified for project {2} with global properties {3}</source>
+        <target state="translated">MSB4213: ÊåáÂÆöÁöÑË¶ÅÊ±ÇË¶™ÂíåÊÄß {0} ËàáÂÖàÂâçÁÇ∫Â∞àÊ°à {2} ÊåáÂÆö„ÄÅÂÖ∑ÊúâÂÖ®ÂüüÂ±¨ÊÄß {3} ÁöÑË¶™ÂíåÊÄß {1} Ë°ùÁ™Å„ÄÇ</target>
         <note>{StrBegin="MSB4213: "}</note>
       </trans-unit>
       <trans-unit id="UnableToCreateNode">
@@ -2379,15 +2389,10 @@ Utilization:          {0} Average Utilization: {1:###.0}</source>
         <target state="translated">MSB4244: ÁÑ°Ê≥ïËºâÂÖ• SDK Ëß£ÊûêÁ®ãÂºèÁµÑ‰ª∂ "{0}"„ÄÇ{1}</target>
         <note>{StrBegin="MSB4244: "}</note>
       </trans-unit>
-      <trans-unit id="CouldNotRunSdkResolver">
-        <source>MSB4242: The SDK resolver "{0}" failed to run. {1}</source>
-        <target state="translated">MSB4242: SDK Ëß£ÊûêÁ®ãÂºè "{0}" ÁÑ°Ê≥ïÂü∑Ë°å„ÄÇ{1}</target>
-        <note>{StrBegin="MSB4242: "}</note>
-      </trans-unit>
       <trans-unit id="CouldNotRunNuGetSdkResolver">
-        <source>MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
-        <target state="translated">MSB4243: Âõ†ÁÇ∫Êâæ‰∏çÂà∞ NuGet ÁµÑ‰ª∂ÔºåÊâÄ‰ª• NuGet Âûã SDK Ëß£ÊûêÁ®ãÂºèÁÑ°Ê≥ïÂü∑Ë°å„ÄÇË´ãÊ™¢Êü•ÊÇ®ÁöÑ MSBuild ÂÆâË£ùÔºåÊàñÂ∞áÁí∞Â¢ÉËÆäÊï∏ "{0}" Ë®≠ÂÆöÁÇ∫ÂåÖÂê´ÂøÖË¶Å NuGet ÁµÑ‰ª∂ÁöÑË≥áÊñôÂ§æ„ÄÇ{1}</target>
-        <note>{StrBegin="MSB4243: "}</note>
+        <source>The NuGet-based SDK resolver failed to run because NuGet assemblies could not be located.  Check your installation of MSBuild or set the environment variable "{0}" to the folder that contains the required NuGet assemblies. {1}</source>
+        <target state="translated">Âõ†ÁÇ∫Êâæ‰∏çÂà∞ NuGet ÁµÑ‰ª∂ÔºåNuGet Âûã SDK Ëß£ÊûêÁ®ãÂºèÁÑ°Ê≥ïÂü∑Ë°å„ÄÇË´ãÊ™¢Êü•ÊÇ®ÁöÑ MSBuild ÂÆâË£ùÔºåÊàñÂ∞áÁí∞Â¢ÉËÆäÊï∏ "{0}" Ë®≠ÂÆöÁÇ∫ÂåÖÂê´ÂøÖË¶Å NuGet ÁµÑ‰ª∂ÁöÑË≥áÊñôÂ§æ„ÄÇ{1}</target>
+        <note />
       </trans-unit>
       <trans-unit id="ProjectImportSkippedInvalidFile">
         <source>Project "{0}" was not imported by "{1}" at ({2},{3}), due to the file being invalid.</source>
diff --git a/src/Build/System.Text.Encodings.Web.pkgdef b/src/Build/System.Text.Encodings.Web.pkgdef
deleted file mode 100644
index bee4d6921fe..00000000000
--- a/src/Build/System.Text.Encodings.Web.pkgdef
+++ /dev/null
@@ -1,7 +0,0 @@
-[$RootKey$\RuntimeConfiguration\dependentAssembly\bindingRedirection\{1A1A9DA4-9F25-4AC8-89BF-BCEF74875CA8}]
-"name"="System.Text.Encodings.Web"
-"codeBase"="$BaseInstallDir$\MSBuild\Current\Bin\System.Text.Encodings.Web.dll"
-"publicKeyToken"="cc7b13ffcd2ddd51"
-"culture"="neutral"
-"oldVersion"="0.0.0.0-4.0.5.0"
-"newVersion"="4.0.5.0"
diff --git a/src/Build/System.Text.Json.pkgdef b/src/Build/System.Text.Json.pkgdef
deleted file mode 100644
index f20fee293fd..00000000000
--- a/src/Build/System.Text.Json.pkgdef
+++ /dev/null
@@ -1,7 +0,0 @@
-[$RootKey$\RuntimeConfiguration\dependentAssembly\bindingRedirection\{1F1A9DA4-9F25-4AB8-89BF-BCEF73875178}]
-"name"="System.Text.Json"
-"codeBase"="$BaseInstallDir$\MSBuild\Current\Bin\System.Text.Json.dll"
-"publicKeyToken"="cc7b13ffcd2ddd51"
-"culture"="neutral"
-"oldVersion"="0.0.0.0-4.0.1.0"
-"newVersion"="4.0.1.0"
diff --git a/src/Build/Utilities/EngineFileUtilities.cs b/src/Build/Utilities/EngineFileUtilities.cs
index 02b46c31efa..da8165d3369 100644
--- a/src/Build/Utilities/EngineFileUtilities.cs
+++ b/src/Build/Utilities/EngineFileUtilities.cs
@@ -168,7 +168,7 @@ private string[] GetFileList
 
                 if (returnEscaped)
                 {
-                    // We must now go back and make sure all special characters are escaped because we always 
+                    // We must now go back and make sure all special characters are escaped because we always
                     // store data in the engine in escaped form so it doesn't interfere with our parsing.
                     // Note that this means that characters that were not escaped in the original filespec
                     // may now be escaped, but that's not easy to avoid.
diff --git a/src/Build/Utilities/FileSpecMatchTester.cs b/src/Build/Utilities/FileSpecMatchTester.cs
index 41aaea15e97..281b0278888 100644
--- a/src/Build/Utilities/FileSpecMatchTester.cs
+++ b/src/Build/Utilities/FileSpecMatchTester.cs
@@ -15,7 +15,7 @@ internal readonly struct FileSpecMatcherTester
         private readonly string _unescapedFileSpec;
         private readonly string _filenamePattern;
         private readonly Regex _regex;
-        
+
         private FileSpecMatcherTester(string currentDirectory, string unescapedFileSpec, string filenamePattern, Regex regex)
         {
             Debug.Assert(!string.IsNullOrEmpty(unescapedFileSpec));
@@ -25,6 +25,13 @@ private FileSpecMatcherTester(string currentDirectory, string unescapedFileSpec,
             _unescapedFileSpec = unescapedFileSpec;
             _filenamePattern = filenamePattern;
             _regex = regex;
+
+            if (_regex == null && _filenamePattern == null)
+            {
+                // We'll be testing files by comparing their normalized paths. Normalize our file spec right away
+                // to avoid doing this work on each IsMatch call.
+                _unescapedFileSpec = FileUtilities.NormalizePathForComparisonNoThrow(_unescapedFileSpec, _currentDirectory);
+            }
         }
 
         public static FileSpecMatcherTester Parse(string currentDirectory, string fileSpec)
@@ -41,31 +48,52 @@ public static FileSpecMatcherTester Parse(string currentDirectory, string fileSp
             return new FileSpecMatcherTester(currentDirectory, unescapedFileSpec, filenamePattern, regex);
         }
 
+        /// <summary>
+        /// Returns true if the given file matches this file spec.
+        /// </summary>
         public bool IsMatch(string fileToMatch)
         {
             Debug.Assert(!string.IsNullOrEmpty(fileToMatch));
 
+            // Historically we've used slightly different normalization logic depending on the type of matching
+            // performed in IsMatchNormalized. We have to keep doing it for compat.
+            if (_regex == null && _filenamePattern == null)
+            {
+                fileToMatch = FileUtilities.NormalizePathForComparisonNoThrow(fileToMatch, _currentDirectory);
+            }
+            else
+            {
+                fileToMatch = FileUtilities.GetFullPathNoThrow(Path.Combine(_currentDirectory, fileToMatch));
+            }
+            return IsMatchNormalized(fileToMatch);
+        }
+
+        /// <summary>
+        /// Same as <see cref="IsMatch" /> but the argument is expected to be a normalized path.
+        /// </summary>
+        public bool IsMatchNormalized(string normalizedFileToMatch)
+        {
+            Debug.Assert(!string.IsNullOrEmpty(normalizedFileToMatch));
+
             // We do the matching using one of three code paths, depending on the value of _filenamePattern and _regex.
             if (_regex != null)
             {
-                string normalizedFileToMatch = FileUtilities.GetFullPathNoThrow(Path.Combine(_currentDirectory, fileToMatch));
                 return _regex.IsMatch(normalizedFileToMatch);
             }
 
             if (_filenamePattern != null)
             {
                 // Check file name first as it's more likely to not match.
-                string filename = Path.GetFileName(fileToMatch);
+                string filename = Path.GetFileName(normalizedFileToMatch);
                 if (!FileMatcher.IsMatch(filename, _filenamePattern))
                 {
                     return false;
                 }
 
-                var normalizedFileToMatch = FileUtilities.GetFullPathNoThrow(Path.Combine(_currentDirectory, fileToMatch));
                 return normalizedFileToMatch.StartsWith(_currentDirectory, StringComparison.OrdinalIgnoreCase);
             }
 
-            return FileUtilities.ComparePathsNoThrow(_unescapedFileSpec, fileToMatch, _currentDirectory, alwaysIgnoreCase: true);
+            return string.Equals(_unescapedFileSpec, normalizedFileToMatch, StringComparison.OrdinalIgnoreCase);
         }
 
         // this method parses the glob and extracts the fixed directory part in order to normalize it and make it absolute
diff --git a/src/Build/Xml/XmlReaderExtension.cs b/src/Build/Xml/XmlReaderExtension.cs
index 424e7dea8a9..4bf4944e94c 100644
--- a/src/Build/Xml/XmlReaderExtension.cs
+++ b/src/Build/Xml/XmlReaderExtension.cs
@@ -1,11 +1,8 @@
 Ôªøusing System;
-using System.Diagnostics;
 using System.IO;
-using System.Reflection;
 using System.Text;
 using System.Xml;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.Internal
 {
@@ -29,16 +26,6 @@ internal static XmlReaderExtension Create(string filePath, bool loadAsReadOnly)
         private readonly Stream _stream;
         private readonly StreamReader _streamReader;
 
-        /// <summary>
-        /// Caches a <see cref="PropertyInfo"/> representing the "Normalization" internal property on the <see cref="XmlReader"/>-derived
-        /// type returned from <see cref="XmlReader.Create(TextReader, XmlReaderSettings, string)"/>. The cache is process/AppDomain-wide
-        /// and lock-free, so we use volatile access for thread safety, i.e. to ensure that when the field is updated the PropertyInfo
-        /// it's pointing to is seen as fully initialized by all CPUs.
-        /// </summary>
-        private static volatile PropertyInfo _normalizationPropertyInfo;
-
-        private static bool _disableReadOnlyLoad;
-
         private XmlReaderExtension(string file, bool loadAsReadOnly)
         {
             try
@@ -84,61 +71,15 @@ public void Dispose()
             _stream?.Dispose();
         }
 
-        /// <summary>
-        /// Returns <see cref="PropertyInfo"/> of the "Normalization" internal property on the given <see cref="XmlReader"/>-derived type.
-        /// </summary>
-        private static PropertyInfo GetNormalizationPropertyInfo(Type xmlReaderType)
-        {
-            PropertyInfo propertyInfo = _normalizationPropertyInfo;
-            if (propertyInfo == null)
-            {
-                BindingFlags bindingFlags = BindingFlags.NonPublic | BindingFlags.SetProperty | BindingFlags.Instance;
-                propertyInfo = xmlReaderType.GetProperty("Normalization", bindingFlags);
-                _normalizationPropertyInfo = propertyInfo;
-            }
-
-            return propertyInfo;
-        }
-
         private static XmlReader GetXmlReader(string file, StreamReader input, bool loadAsReadOnly, out Encoding encoding)
         {
             string uri = new UriBuilder(Uri.UriSchemeFile, string.Empty) { Path = file }.ToString();
 
-            XmlReader reader = null;
-            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_10) && loadAsReadOnly && !_disableReadOnlyLoad)
-            {
-                // Create an XML reader with IgnoreComments and IgnoreWhitespace set if we know that we won't be asked
-                // to write the DOM back to a file. This is a performance optimization.
-                XmlReaderSettings settings = new XmlReaderSettings
-                {
-                    DtdProcessing = DtdProcessing.Ignore,
-                    IgnoreComments = true,
-                    IgnoreWhitespace = true,
-                };
-                reader = XmlReader.Create(input, settings, uri);
-
-                // Try to set Normalization to false. We do this to remain compatible with earlier versions of MSBuild
-                // where we constructed the reader with 'new XmlTextReader()' which has normalization enabled by default.
-                PropertyInfo normalizationPropertyInfo = GetNormalizationPropertyInfo(reader.GetType());
-                if (normalizationPropertyInfo != null)
-                {
-                    normalizationPropertyInfo.SetValue(reader, false);
-                }
-                else
-                {
-                    // Fall back to using XmlTextReader if the prop could not be bound.
-                    Debug.Fail("Could not set Normalization to false on the result of XmlReader.Create");
-                    _disableReadOnlyLoad = true;
-
-                    reader.Dispose();
-                    reader = null;
-                }
-            }
-
-            if (reader == null)
-            {
-                reader = new XmlTextReader(uri, input) { DtdProcessing = DtdProcessing.Ignore };
-            }
+            
+            // Ignore loadAsReadOnly for now; using XmlReader.Create results in whitespace changes
+            // of attribute text, specifically newline removal.
+            // https://github.com/Microsoft/msbuild/issues/4210
+            XmlReader reader = new XmlTextReader(uri, input) { DtdProcessing = DtdProcessing.Ignore };
 
             reader.Read();
             encoding = input.CurrentEncoding;
diff --git a/src/Deprecated/Conversion/AssemblyInfo.cs b/src/Deprecated/Conversion/AssemblyInfo.cs
index e9b874dd1c5..fd4bc5df27b 100644
--- a/src/Deprecated/Conversion/AssemblyInfo.cs
+++ b/src/Deprecated/Conversion/AssemblyInfo.cs
@@ -23,11 +23,4 @@
 
 [assembly: CLSCompliant(true)]
 
-// Needed for the "hub-and-spoke model to locate and retrieve localized resources": https://msdn.microsoft.com/en-us/library/21a15yht(v=vs.110).aspx
-// We want "en" to require a satellite assembly for debug builds in order to flush out localization
-// issues, but we want release builds to work without it. Also, .net core does not have resource fallbacks
-#if (DEBUG && !RUNTIME_TYPE_NETCORE)
-[assembly: NeutralResourcesLanguage("en", UltimateResourceFallbackLocation.Satellite)]
-#else
 [assembly: NeutralResourcesLanguage("en")]
-#endif
diff --git a/src/Deprecated/Conversion/Resources/xlf/Strings.en.xlf b/src/Deprecated/Conversion/Resources/xlf/Strings.en.xlf
deleted file mode 100644
index 73f4ab526f7..00000000000
--- a/src/Deprecated/Conversion/Resources/xlf/Strings.en.xlf
+++ /dev/null
@@ -1,87 +0,0 @@
-Ôªø<?xml version="1.0" encoding="utf-8"?>
-<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
-  <file datatype="xml" source-language="en" target-language="en" original="../Strings.resx">
-    <body>
-      <trans-unit id="CouldNotFindCompleteSolutionFile">
-        <source>MSB2013: The project-to-project reference with GUID {0} could not be converted because a valid .SLN file containing all projects could not be found.</source>
-        <target state="new">MSB2013: The project-to-project reference with GUID {0} could not be converted because a valid .SLN file containing all projects could not be found.</target>
-        <note>{StrBegin="MSB2013: "}</note>
-      </trans-unit>
-      <trans-unit id="EmptyResxRemoved">
-        <source>MSB2016: Found an empty .RESX file in the project ({0}).  Removing it from the converted project.</source>
-        <target state="new">MSB2016: Found an empty .RESX file in the project ({0}).  Removing it from the converted project.</target>
-        <note>{StrBegin="MSB2016: "}</note>
-      </trans-unit>
-      <trans-unit id="ExcludeFoundInProject">
-        <source>MSB2015: Found an &lt;Exclude&gt; element in the original project file.  This cannot be converted to Visual Studio .NET and is being ignored.</source>
-        <target state="new">MSB2015: Found an &lt;Exclude&gt; element in the original project file.  This cannot be converted to Visual Studio .NET and is being ignored.</target>
-        <note>{StrBegin="MSB2015: "}</note>
-      </trans-unit>
-      <trans-unit id="MissingAttribute">
-        <source>MSB2001: Element &lt;{0}&gt; does not contain the required attribute "{1}".</source>
-        <target state="new">MSB2001: Element &lt;{0}&gt; does not contain the required attribute "{1}".</target>
-        <note>{StrBegin="MSB2001: "}It appears we've been asked to convert a project that either wasn't created by Visual Studio, or that has been hand-modified or corrupted.</note>
-      </trans-unit>
-      <trans-unit id="MissingNewProjectFile">
-        <source>MSB2002: The file name of the new project must be specified.</source>
-        <target state="new">MSB2002: The file name of the new project must be specified.</target>
-        <note>{StrBegin="MSB2002: "}This error shouldn't be possible when converting through Visual Studio, but we have it just in case.</note>
-      </trans-unit>
-      <trans-unit id="MissingOldProjectFile">
-        <source>MSB2003: The file name of the old project must be specified.</source>
-        <target state="new">MSB2003: The file name of the old project must be specified.</target>
-        <note>{StrBegin="MSB2003: "}This error shouldn't be possible when converting through Visual Studio, but we have it just in case.</note>
-      </trans-unit>
-      <trans-unit id="MultipleLanguageNodesNotAllowed">
-        <source>MSB2004: Element &lt;{0}&gt; cannot contain more than one language node.</source>
-        <target state="new">MSB2004: Element &lt;{0}&gt; cannot contain more than one language node.</target>
-        <note>{StrBegin="MSB2004: "}It appears we've been asked to convert a project that either wasn't created by Visual Studio, or that has been hand-modified or corrupted.  The {0} in this case is going to be "VisualStudioProject".</note>
-      </trans-unit>
-      <trans-unit id="NoAttributesExpected">
-        <source>MSB2005: Element &lt;{0}&gt; cannot contain attributes.</source>
-        <target state="new">MSB2005: Element &lt;{0}&gt; cannot contain attributes.</target>
-        <note>{StrBegin="MSB2005: "}It appears we've been asked to convert a project that either wasn't created by Visual Studio, or that has been hand-modified or corrupted.</note>
-      </trans-unit>
-      <trans-unit id="NoRootProjectElement">
-        <source>MSB2006: The project file does not contain the root element &lt;{0}&gt;.</source>
-        <target state="new">MSB2006: The project file does not contain the root element &lt;{0}&gt;.</target>
-        <note>{StrBegin="MSB2006: "}It appears we've been asked to convert a project that either wasn't created by Visual Studio, or that has been hand-modified or corrupted.</note>
-      </trans-unit>
-      <trans-unit id="ProjectFileNotFound">
-        <source>MSB2007: Visual Studio cannot find the project file "{0}".</source>
-        <target state="new">MSB2007: Visual Studio cannot find the project file "{0}".</target>
-        <note>{StrBegin="MSB2007: "}This error shouldn't be possible when converting through Visual Studio, but we have it just in case.</note>
-      </trans-unit>
-      <trans-unit id="ProjectNotListingInSolutionFile">
-        <source>MSB2014: The project-to-project reference with GUID {0} cannot be converted because it is not listed in the file '{1}'.</source>
-        <target state="new">MSB2014: The project-to-project reference with GUID {0} cannot be converted because it is not listed in the file '{1}'.</target>
-        <note>{StrBegin="MSB2014: "}</note>
-      </trans-unit>
-      <trans-unit id="ProjectTypeCannotBeConverted">
-        <source>MSB2008: This Visual Studio project system cannot convert "{0}" projects.  It can only be used to convert C#, VB, and VJ# client projects.</source>
-        <target state="new">MSB2008: This Visual Studio project system cannot convert "{0}" projects.  It can only be used to convert C#, VB, and VJ# client projects.</target>
-        <note>{StrBegin="MSB2008: "}It appears we've been asked to convert a project that either wasn't created by the Visual Studio managed client project system (C#, VB, J#), or that has been hand-modified or corrupted.  You would get this error if this conversion utility was invoked on a VC++ project (.VCPROJ) for example.  In this case, the {0} would be replaced with "Visual C++".</note>
-      </trans-unit>
-      <trans-unit id="UnrecognizedAttribute">
-        <source>MSB2009: Attribute "{0}" of element &lt;{1}&gt; is not valid.</source>
-        <target state="new">MSB2009: Attribute "{0}" of element &lt;{1}&gt; is not valid.</target>
-        <note>{StrBegin="MSB2009: "}It appears we've been asked to convert a project that either wasn't created by Visual Studio, or that has been hand-modified or corrupted.</note>
-      </trans-unit>
-      <trans-unit id="UnrecognizedChildElement">
-        <source>MSB2010: Child element &lt;{0}&gt; of element &lt;{1}&gt; is not valid.</source>
-        <target state="new">MSB2010: Child element &lt;{0}&gt; of element &lt;{1}&gt; is not valid.</target>
-        <note>{StrBegin="MSB2010: "}It appears we've been asked to convert a project that either wasn't created by Visual Studio, or that has been hand-modified or corrupted.</note>
-      </trans-unit>
-      <trans-unit id="UnrecognizedElement">
-        <source>MSB2011: Element &lt;{0}&gt; is not valid.</source>
-        <target state="new">MSB2011: Element &lt;{0}&gt; is not valid.</target>
-        <note>{StrBegin="MSB2011: "}It appears we've been asked to convert a project that either wasn't created by Visual Studio, or that has been hand-modified or corrupted.</note>
-      </trans-unit>
-      <trans-unit id="UnsupportedProjectToProjectWebReference">
-        <source>MSB2012: Project-to-project references to web projects are no longer supported and therefore cannot be converted.  Please remove the reference to project {0} and add it again.</source>
-        <target state="new">MSB2012: Project-to-project references to web projects are no longer supported and therefore cannot be converted.  Please remove the reference to project {0} and add it again.</target>
-        <note>{StrBegin="MSB2012: "}</note>
-      </trans-unit>
-    </body>
-  </file>
-</xliff>
\ No newline at end of file
diff --git a/src/Deprecated/Engine.UnitTests/Project_Tests.cs b/src/Deprecated/Engine.UnitTests/Project_Tests.cs
index 38f2844b922..1144ce87b6f 100644
--- a/src/Deprecated/Engine.UnitTests/Project_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Project_Tests.cs
@@ -26,8 +26,8 @@ public class AddItem
     {
         /// <summary>
         /// This loads an existing project, and uses the MSBuild object model to
-        /// add a new item (Type="Compile" Include="c.cs") to the project.  Then 
-        /// it compares the final project XML to make sure the item was added in 
+        /// add a new item (Type="Compile" Include="c.cs") to the project.  Then
+        /// it compares the final project XML to make sure the item was added in
         /// the correct place.
         /// </summary>
         /// <param name="originalProjectContents"></param>
@@ -49,7 +49,7 @@ string newItemInclude
             // The project shouldn't be marked dirty yet.
             Assertion.Assert("Project shouldn't be dirty", !project.IsDirtyNeedToReevaluate);
 
-            // Add a new item (Type="Compile", Include="c.cs") to the project using 
+            // Add a new item (Type="Compile", Include="c.cs") to the project using
             // the object model.
             BuildItem newItem = project.AddNewItem(newItemType, newItemInclude);
 
@@ -143,7 +143,7 @@ public void AddNewItemToNewItemGroup()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -151,7 +151,7 @@ public void AddNewItemToNewItemGroup()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -170,7 +170,7 @@ public void AddNewItemToNewItemGroup()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -179,7 +179,7 @@ public void AddNewItemToNewItemGroup()
         }
 
         /// <summary>
-        /// This loads an existing project that did not contain any items previously. 
+        /// This loads an existing project that did not contain any items previously.
         /// It then uses the MSBuild object model to
         /// add a new item to the project.  Then it compares the final project
         /// XML to make sure the item was added in the correct place.
@@ -267,9 +267,9 @@ public void AddNewItemAndQueryForNonExistentMetadata()
         }
 
         /// <summary>
-        /// Add a new item of the same name and include path of an item that already 
+        /// Add a new item of the same name and include path of an item that already
         /// exists in the project.  Current behavior is that we add the duplicated item,
-        /// although there's no great reason for this.  If we wanted, we could have 
+        /// although there's no great reason for this.  If we wanted, we could have
         /// made it so that adding a dup results in a no-op to the project file.
         /// </summary>
         /// <owner>RGoel</owner>
@@ -701,7 +701,7 @@ public void AddNewItemThatMatchesWildcardWithMetadata()
 
         /// <summary>
         /// There's a wildcard in the project already, but it's part of a semicolon-separated
-        /// list of items.  Now the user tries to add an item that matches that wildcard.  
+        /// list of items.  Now the user tries to add an item that matches that wildcard.
         /// In this case, we don't touch the project at all.
         /// </summary>
         /// <owner>RGoel</owner>
@@ -741,7 +741,7 @@ public void AddNewItemThatMatchesWildcardInSemicolonList()
 
         /// <summary>
         /// There's a wildcard in the project already, but it's part of a semicolon-separated
-        /// list of items, and it uses a property reference.  Now the user tries to add a new 
+        /// list of items, and it uses a property reference.  Now the user tries to add a new
         /// item that matches that wildcard.  In this case, we don't touch the project at all.
         /// We're so smart.
         /// </summary>
@@ -803,7 +803,7 @@ public void AddNewItemGroup()
             // ************************************
             //               BEFORE
             // ************************************
-            string projectOriginalContents = @" 
+            string projectOriginalContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -818,7 +818,7 @@ public void AddNewItemGroup()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -826,7 +826,7 @@ public void AddNewItemGroup()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -843,7 +843,7 @@ public void AddNewItemGroup()
                     <ItemGroup />
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -865,17 +865,17 @@ public class RemoveItem
         /// <summary>
         /// This loads an existing project, and uses the MSBuild object model to
         /// remove an item of a particular item spec (e.g., "b.cs").  It then
-        /// compares the final project XML to make sure the item was added in 
+        /// compares the final project XML to make sure the item was added in
         /// the correct place.
         /// </summary>
         /// <param name="originalProjectContents"></param>
         /// <param name="newExpectedProjectContents"></param>
         /// <param name="itemSpecToRemove"></param>
         /// <owner>RGoel</owner>
-        private void RemoveItemHelper 
+        private void RemoveItemHelper
             (
-            string originalProjectContents, 
-            string newExpectedProjectContents, 
+            string originalProjectContents,
+            string newExpectedProjectContents,
             string itemSpecToRemove
             )
         {
@@ -889,7 +889,7 @@ string itemSpecToRemove
 
             // The VS IDE does a few re-evaluations with different sets of global properties
             // (i.e., Configuration=Debug, Configuration=Release, etc.).  This is to simulate
-            // that.  If there's a bug in the Project object, then re-evaluation can 
+            // that.  If there's a bug in the Project object, then re-evaluation can
             // potentially mess up the number of items hanging around.
             project.MarkProjectAsDirty ();
             BuildItemGroup evaluatedItems2 = project.EvaluatedItemsIgnoringCondition;
@@ -936,9 +936,9 @@ public void RemoveItemBySpec()
                     <ItemGroup>
                         <Reference Include=`System` />
                     </ItemGroup>
-                
+
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -957,12 +957,12 @@ public void RemoveItemBySpec()
                     <ItemGroup>
                         <Reference Include=`System` />
                     </ItemGroup>
-                
+
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
-            
+
             this.RemoveItemHelper (projectOriginalContents, projectNewExpectedContents, "b.cs");
         }
 
@@ -978,7 +978,7 @@ public void RemoveItemBySpecFromMultiItemSpec()
             // ************************************
             //               BEFORE
             // ************************************
-            string projectOriginalContents = @" 
+            string projectOriginalContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -993,9 +993,9 @@ public void RemoveItemBySpecFromMultiItemSpec()
                     <ItemGroup>
                         <Reference Include=`System` />
                     </ItemGroup>
-                
+
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1003,7 +1003,7 @@ public void RemoveItemBySpecFromMultiItemSpec()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -1019,12 +1019,12 @@ public void RemoveItemBySpecFromMultiItemSpec()
                     <ItemGroup>
                         <Reference Include=`System` />
                     </ItemGroup>
-                
+
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
-            
+
             this.RemoveItemHelper (projectOriginalContents, projectNewExpectedContents, "b.cs");
         }
 
@@ -1042,7 +1042,7 @@ public void RemoveItemBySpecFromMultiItemSpecWithMetadata()
             // ************************************
             //               BEFORE
             // ************************************
-            string projectOriginalContents = @" 
+            string projectOriginalContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <ItemGroup>
@@ -1052,7 +1052,7 @@ public void RemoveItemBySpecFromMultiItemSpecWithMetadata()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1060,7 +1060,7 @@ public void RemoveItemBySpecFromMultiItemSpecWithMetadata()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <ItemGroup>
@@ -1073,10 +1073,10 @@ public void RemoveItemBySpecFromMultiItemSpecWithMetadata()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
-            
+
             this.RemoveItemHelper (projectOriginalContents, projectNewExpectedContents, "b.cs");
         }
 
@@ -1101,7 +1101,7 @@ public void RemoveItemBySpecWhenMultiItemSpecExists()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1119,10 +1119,10 @@ public void RemoveItemBySpecWhenMultiItemSpecExists()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
-            
+
             this.RemoveItemHelper (projectOriginalContents, projectNewExpectedContents, "d.cs");
         }
 
@@ -1153,7 +1153,7 @@ public void RemoveSpecificItem()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1174,7 +1174,7 @@ public void RemoveSpecificItem()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1226,7 +1226,7 @@ public void RemoveItemsByName()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1246,7 +1246,7 @@ public void RemoveItemsByName()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1287,7 +1287,7 @@ public void RemoveItemGroup()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1303,7 +1303,7 @@ public void RemoveItemGroup()
                     </PropertyGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1667,8 +1667,8 @@ public class ModifyItem
     {
         /// <summary>
         /// This loads an existing project, and uses the MSBuild object model to
-        /// modify the "Include" attribute of an item of a particular item spec (e.g., 
-        /// "b.cs").  It then compares the final project XML to make sure the item was 
+        /// modify the "Include" attribute of an item of a particular item spec (e.g.,
+        /// "b.cs").  It then compares the final project XML to make sure the item was
         /// modified correctly.
         /// </summary>
         /// <param name="originalProjectContents"></param>
@@ -1676,10 +1676,10 @@ public class ModifyItem
         /// <param name="oldItemSpec"></param>
         /// <param name="newIncludePath"></param>
         /// <owner>RGoel</owner>
-        internal static void ModifyItemIncludeHelper 
+        internal static void ModifyItemIncludeHelper
             (
-            string originalProjectContents, 
-            string newExpectedProjectContents, 
+            string originalProjectContents,
+            string newExpectedProjectContents,
             string oldItemSpec,
             string newIncludePath
             )
@@ -1694,7 +1694,7 @@ string newIncludePath
 
             // The VS IDE does a few re-evaluations with different sets of global properties
             // (i.e., Configuration=Debug, Configuration=Release, etc.).  This is to simulate
-            // that.  If there's a bug in the Project object, then re-evaluation can 
+            // that.  If there's a bug in the Project object, then re-evaluation can
             // potentially mess up the number of items hanging around.
             project.MarkProjectAsDirty ();
             BuildItemGroup evaluatedItems2 = project.EvaluatedItemsIgnoringCondition;
@@ -1729,7 +1729,7 @@ public void ModifyItemIncludeWithEmbeddedProperty()
             // ************************************
             //               BEFORE
             // ************************************
-            string projectOriginalContents = @" 
+            string projectOriginalContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -1749,7 +1749,7 @@ public void ModifyItemIncludeWithEmbeddedProperty()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1757,7 +1757,7 @@ public void ModifyItemIncludeWithEmbeddedProperty()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -1777,7 +1777,7 @@ public void ModifyItemIncludeWithEmbeddedProperty()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1796,7 +1796,7 @@ public void ModifyItemIncludeWithinMultiItemSpec()
             // ************************************
             //               BEFORE
             // ************************************
-            string projectOriginalContents = @" 
+            string projectOriginalContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <ItemGroup>
@@ -1809,7 +1809,7 @@ public void ModifyItemIncludeWithinMultiItemSpec()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1817,7 +1817,7 @@ public void ModifyItemIncludeWithinMultiItemSpec()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <ItemGroup>
@@ -1836,7 +1836,7 @@ public void ModifyItemIncludeWithinMultiItemSpec()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -1888,17 +1888,17 @@ public void ModifyItemIncludeWithinNonMatchingWildcard()
         {
             // Populate the project directory with three physical files on disk -- a.weirdo, b.weirdo, c.weirdo.
             CreateThreeWeirdoFilesHelper();
-            
+
             // ************************************
             //               BEFORE
             // ************************************
-            string projectOriginalContents = @" 
+            string projectOriginalContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <ItemGroup>
                         <MyWildcard Include=`*.weirdo` />
                     </ItemGroup>
-                
+
                 </Project>
                 ";
 
@@ -1906,7 +1906,7 @@ public void ModifyItemIncludeWithinNonMatchingWildcard()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <ItemGroup>
@@ -1914,7 +1914,7 @@ public void ModifyItemIncludeWithinNonMatchingWildcard()
                         <MyWildcard Include=`banana.cs` />
                         <MyWildcard Include=`c.weirdo` />
                     </ItemGroup>
-                
+
                 </Project>
                 ";
 
@@ -1940,13 +1940,13 @@ public void ModifyItemIncludeWithinMatchingWildcard()
             // ************************************
             //               BEFORE
             // ************************************
-            string projectOriginalContents = @" 
+            string projectOriginalContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <ItemGroup>
                         <MyWildcard Include=`*.weirdo` />
                     </ItemGroup>
-                
+
                 </Project>
                 ";
 
@@ -1954,13 +1954,13 @@ public void ModifyItemIncludeWithinMatchingWildcard()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <ItemGroup>
                         <MyWildcard Include=`*.weirdo` />
                     </ItemGroup>
-                
+
                 </Project>
                 ";
 
@@ -1988,13 +1988,13 @@ public void ModifyRawItemIncludeWithinMatchingWildcard()
             // ************************************
             //               BEFORE
             // ************************************
-            string projectOriginalContents = @" 
+            string projectOriginalContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <ItemGroup>
                         <MyWildcard Include=`*.weirdo` />
                     </ItemGroup>
-                
+
                 </Project>
                 ";
 
@@ -2002,13 +2002,13 @@ public void ModifyRawItemIncludeWithinMatchingWildcard()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <ItemGroup>
                         <MyWildcard Include=`banana.weirdo` />
                     </ItemGroup>
-                
+
                 </Project>
                 ";
 
@@ -2073,8 +2073,8 @@ string itemSpec
 
         /// <summary>
         /// This loads an existing project, and uses the MSBuild object model to
-        /// modify the Name of an item of a particular item spec (e.g., 
-        /// "b.cs").  It then compares the final project XML to make sure the item was 
+        /// modify the Name of an item of a particular item spec (e.g.,
+        /// "b.cs").  It then compares the final project XML to make sure the item was
         /// modified correctly.
         /// </summary>
         /// <param name="originalProjectContents"></param>
@@ -2100,7 +2100,7 @@ string newItemType
 
             // The VS IDE does a few re-evaluations with different sets of global properties
             // (i.e., Configuration=Debug, Configuration=Release, etc.).  This is to simulate
-            // that.  If there's a bug in the Project object, then re-evaluation can 
+            // that.  If there's a bug in the Project object, then re-evaluation can
             // potentially mess up the number of items hanging around.
             project.MarkProjectAsDirty();
             BuildItemGroup evaluatedItems2 = project.EvaluatedItemsIgnoringCondition;
@@ -2270,7 +2270,7 @@ public void ModifyItemMetadata()
             // ************************************
             //               BEFORE
             // ************************************
-            string projectOriginalContents = @" 
+            string projectOriginalContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -2285,7 +2285,7 @@ public void ModifyItemMetadata()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -2293,7 +2293,7 @@ public void ModifyItemMetadata()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -2311,7 +2311,7 @@ public void ModifyItemMetadata()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -2338,7 +2338,7 @@ public void ModifyItemMetadata()
     public class AddProperty
     {
         /// <summary>
-        /// Tests that the object model correctly adds a new property to the correct 
+        /// Tests that the object model correctly adds a new property to the correct
         /// existing PropertyGroup.
         /// </summary>
         /// <owner>RGoel</owner>
@@ -2348,23 +2348,23 @@ public void SetPropertyOnNewPropertyInExistingPropertyGroup()
             // ************************************
             //               BEFORE
             // ************************************
-            string projectOriginalContents = @" 
+            string projectOriginalContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup Condition=` '$(A)' == 'B' `>
                         <OutputPath>c:\blah</OutputPath>
                     </PropertyGroup>
-                
+
                     <PropertyGroup>
                         <WarningLevel>1</WarningLevel>
                     </PropertyGroup>
-                
+
                     <PropertyGroup>
                         <Optimize>true</Optimize>
                     </PropertyGroup>
-                
+
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -2372,24 +2372,24 @@ public void SetPropertyOnNewPropertyInExistingPropertyGroup()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup Condition=` '$(A)' == 'B' `>
                         <OutputPath>c:\blah</OutputPath>
                     </PropertyGroup>
-                
+
                     <PropertyGroup>
                         <WarningLevel>1</WarningLevel>
                         <MyNewProperty>woohoo</MyNewProperty>
                     </PropertyGroup>
-                
+
                     <PropertyGroup>
                         <Optimize>true</Optimize>
                     </PropertyGroup>
-                
+
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -2398,7 +2398,7 @@ public void SetPropertyOnNewPropertyInExistingPropertyGroup()
             // The project shouldn't be marked dirty yet.
             Assertion.Assert("Project shouldn't be dirty", !project.IsDirtyNeedToReevaluate);
 
-            // Set the given new property in the project file using 
+            // Set the given new property in the project file using
             // the object model.
             project.SetProperty("MyNewProperty", "woohoo", "");
 
@@ -2419,7 +2419,7 @@ public void AddNewPropertyThroughPropertyGroup()
             // ************************************
             //               BEFORE
             // ************************************
-            string projectOriginalContents = @" 
+            string projectOriginalContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -2434,7 +2434,7 @@ public void AddNewPropertyThroughPropertyGroup()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -2442,7 +2442,7 @@ public void AddNewPropertyThroughPropertyGroup()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -2458,7 +2458,7 @@ public void AddNewPropertyThroughPropertyGroup()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -2484,7 +2484,7 @@ public void AddNewPropertyGroup()
             // ************************************
             //               BEFORE
             // ************************************
-            string projectOriginalContents = @" 
+            string projectOriginalContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -2499,7 +2499,7 @@ public void AddNewPropertyGroup()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -2507,7 +2507,7 @@ public void AddNewPropertyGroup()
             // ************************************
             //               AFTER
             // ************************************
-            string projectNewExpectedContents = @" 
+            string projectNewExpectedContents = @"
                 <Project ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 
                     <PropertyGroup>
@@ -2524,7 +2524,7 @@ public void AddNewPropertyGroup()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -2640,7 +2640,7 @@ public void RemovePropertyByName()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -2663,7 +2663,7 @@ public void RemovePropertyByName()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -2914,7 +2914,7 @@ public void RemoveAllPropertyGroupsByConditionWithChoose()
                             <PropertyGroup Condition=`'$(x)'=='y'`>
                                   <ReferencePath>c:\foobar</ReferencePath>
                             </PropertyGroup>
-  
+
                             <PropertyGroup Condition=`'$(x)'=='z'`>
                                   <ReferencePath>c:\foobar</ReferencePath>
                             </PropertyGroup>
@@ -2923,7 +2923,7 @@ public void RemoveAllPropertyGroupsByConditionWithChoose()
                             <PropertyGroup Condition=`'$(x)'=='y'`>
                                   <ReferencePath>c:\foobar</ReferencePath>
                             </PropertyGroup>
-  
+
                             <PropertyGroup Condition=`'$(x)'=='z'`>
                                   <ReferencePath>c:\foobar</ReferencePath>
                             </PropertyGroup>
@@ -3112,7 +3112,7 @@ public void SetPropertyOnExistingProperty()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -3135,7 +3135,7 @@ public void SetPropertyOnExistingProperty()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -3446,7 +3446,7 @@ public void VerifyMsbuildProgramFiles32ReservedProperty()
                                 <PropertyGroup>
                                     <abcdef>$(MsBuildProgramFiles32)</abcdef>
                                 </PropertyGroup>
-                                
+
                                 <Target Name='t'>
                                     <Message Text='[$(abcdef)]' />
                                 </Target>
@@ -3513,7 +3513,7 @@ public void ModifyPropertyInImportedProjectFileAfterRename()
             Assertion.AssertEquals(@"c:\boobah", importedProj.EvaluatedProperties["ReferencePath"].FinalValueEscaped);
 
             importedProj.Save(Path.Combine(ObjectModelHelpers.TempProjectDir, "newimported.proj"));
-                
+
             // Now we add a new imported property to the main file, into an existing imported
             // property group.
             mainProj.SetImportedProperty("ReferencePath", @"c:\hoohah", null, importedProj);
@@ -3785,7 +3785,7 @@ public void RegistryProperties()
 
             Project p = ObjectModelHelpers.CreateInMemoryProject(@"
 
-                   <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`> 
+                   <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
                       <PropertyGroup>
                         <P>$(Registry:HKEY_CURRENT_USER\" + testRegistryPath + @"@Foo)</P>
                         <Q Condition=""'$(Registry:HKEY_CURRENT_USER\" + testRegistryPath + @"@Foo)' == 'FooValue'"">QValue</Q>
@@ -3812,7 +3812,7 @@ public void RegistryPropertiesWithEscapedCharactersInValue()
 
             Project p = ObjectModelHelpers.CreateInMemoryProject(@"
 
-                   <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`> 
+                   <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
                       <PropertyGroup>
                         <P>$(Registry:HKEY_CURRENT_USER\" + testRegistryPath + @"@Foo)</P>
                         <Q Condition=""'$(Registry:HKEY_CURRENT_USER\" + testRegistryPath + @"@Bar)' == '%24(Foo)'"">QValue</Q>
@@ -3834,7 +3834,7 @@ public class QueryProjectState
     {
         /// <summary>
         /// This tests the Project.EvaluatedItemsIgnoringCondition property.  This
-        /// property should return the list of evaluated items in the project, 
+        /// property should return the list of evaluated items in the project,
         /// pretending that all "Condition"s evaluated to true.
         /// </summary>
         /// <owner>RGoel</owner>
@@ -3856,7 +3856,7 @@ public void GetEvaluatedItemsIgnoringCondition()
                     </ItemGroup>
 
                     <Target Name=`Build` />
-                
+
                 </Project>
                 ";
 
@@ -4098,7 +4098,7 @@ public void ReplaceImport()
     public class Evaluation
     {
         /// <summary>
-        /// Relative paths in 'exists' on conditions should be evalauted relative to the 
+        /// Relative paths in 'exists' on conditions should be evalauted relative to the
         /// project directory.
         /// </summary>
         [Test]
@@ -4142,7 +4142,7 @@ public void ImportConditionsEvaluatedUsingProjectsDirectory()
         }
 
         /// <summary>
-        /// Relative paths in 'exists' on conditions should be evalauted relative to the 
+        /// Relative paths in 'exists' on conditions should be evalauted relative to the
         /// project directory.
         /// </summary>
         [Test]
@@ -4181,7 +4181,7 @@ public void PropertyConditionsEvaluatedUsingProjectsDirectory()
         }
 
         /// <summary>
-        /// Relative paths in 'exists' on conditions should be evalauted relative to the 
+        /// Relative paths in 'exists' on conditions should be evalauted relative to the
         /// project directory.
         /// </summary>
         [Test]
@@ -4387,7 +4387,7 @@ public void InvalidMetadataName()
                         <a Include=`x`>
                             <meta.data>foo</meta.data>
                         </a>
-                    </ItemGroup>        
+                    </ItemGroup>
                     <Target Name=`t` />
                 </Project>
                 ";
@@ -4432,7 +4432,7 @@ public void IllegalCharactersInUsingTaskAssemblyFile()
 
             Project project = ObjectModelHelpers.CreateInMemoryProject(original);
         }
-        
+
         /// <summary>
         /// Unknown attribute on UsingTask should throw
         /// </summary>
@@ -4449,7 +4449,7 @@ public void UnknownAttributeInUsingTask()
 
             // Should throw
             Project project = ObjectModelHelpers.CreateInMemoryProject(original);
-        }                  
+        }
 
         /// <summary>
         /// RequiredRuntime attribute on UsingTask should be ignored
@@ -4467,10 +4467,10 @@ public void RequiredRuntimeAttributeInUsingTask()
 
             // Should not throw
             Project project = ObjectModelHelpers.CreateInMemoryProject(original);
-        }        
+        }
 
         /// <summary>
-        /// Tests that putting invalid characters in the <Import> path results in a 
+        /// Tests that putting invalid characters in the <Import> path results in a
         /// InvalidProjectFileException.
         /// </summary>
         /// <owner>RGoel</owner>
@@ -4589,7 +4589,7 @@ public void SetNewGlobalProperty()
         }
 
         /// <summary>
-        /// This tests that the project is NOT marked as dirty when we set a 
+        /// This tests that the project is NOT marked as dirty when we set a
         /// global property to the exact same value it had before.
         /// </summary>
         /// <owner>RGoel</owner>
@@ -4649,7 +4649,7 @@ public void MSBuildExtensionsPathDefault()
             {
                 expectedValue = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
             }
-     
+
             Assertion.AssertEquals(expectedValue + @"\MSBuild",
                 (string)myProject.EvaluatedProperties[specialPropertyName]);
 
@@ -4664,7 +4664,7 @@ public void MSBuildExtensionsPathDefault()
         public void MSBuildExtensionsPathDefault_Legacy()
         {
             string specialPropertyName = "MSBuildExtensionsPath";
-            
+
             // Save the old copy of the MSBuildExtensionsPath, so we can restore it when the unit test is done.
             string backupMSBuildExtensionsPath = Environment.GetEnvironmentVariable(specialPropertyName);
             string backupMagicSwitch = Environment.GetEnvironmentVariable("MSBUILDLEGACYEXTENSIONSPATH");
@@ -4753,7 +4753,7 @@ public void MSBuildExtensionsPathWithGlobalOverride()
         }
 
         /// <summary>
-        /// The default value for $(MSBuildExtensionsPath32) should point to "c:\program files (x86)\msbuild" on a 64 bit machine. 
+        /// The default value for $(MSBuildExtensionsPath32) should point to "c:\program files (x86)\msbuild" on a 64 bit machine.
         /// We can't test that directly since tests generally don't run on 64 bit boxes. However we can set the "ProgramFiles(x86)"
         /// environment variable and make sure that that's the value used.
         /// </summary>
@@ -5006,7 +5006,7 @@ public void MSBuildStartupDirectory()
     public class LoadAndSave
     {
         /// <summary>
-        /// Just load an MSBuild project by passing in a TextReader, and get back the contents to 
+        /// Just load an MSBuild project by passing in a TextReader, and get back the contents to
         /// make sure the project was read in correctly.
         /// </summary>
         /// <owner>RGoel</owner>
@@ -5206,7 +5206,7 @@ public void RemoveMissingImportAndLoadNormally()
             // Save the modified project
             StringWriter writer = new StringWriter();
             project.Save(writer);
-            
+
             // Load the modified project into a new project object
             xmldoc = new XmlDocument();
             xmldoc.LoadXml(writer.ToString());
@@ -5258,7 +5258,7 @@ public void FailingTargetsDoNotHaveOutputs()
         }
 
         /// <summary>
-        /// Checks to make sure that passing in the DoNotResetPreviouslyBuiltTargets flag 
+        /// Checks to make sure that passing in the DoNotResetPreviouslyBuiltTargets flag
         /// works as expected.
         /// </summary>
         /// <owner>JomoF</owner>
@@ -5287,7 +5287,7 @@ public void CheckDoNotResetPreviouslyBuiltTargets()
             // At this point, the property $(FileExists) should be 'true'
             Assertion.AssertEquals("true", p.GetEvaluatedProperty("FileExists"));
 
-            // Delete the file 
+            // Delete the file
             File.Delete(tempFile);
 
             // Build again. The result should still be 'true' because the target won't be reevaluated.
@@ -5353,7 +5353,7 @@ public void RunInitialTargetsInMainProject()
 
             // Build the target.
             p.Build(null, null);
-        
+
             Assertion.Assert("Build target should have been run.", myLogger.FullLog.Contains("BuildTargetExecuted"));
             Assertion.Assert("CheckForErrors target should have been run.", myLogger.FullLog.Contains("CheckForErrorsTargetExecuted"));
         }
@@ -5457,14 +5457,14 @@ public void RunInitialTargetsInMainAndImportedProjects()
 
                     ", importedProject1, importedProject2));
 
-                Assertion.AssertEquals("Check all InitialTargets", "CheckForBadUser; CheckForBadProperties; CheckForBadConfigurations", 
+                Assertion.AssertEquals("Check all InitialTargets", "CheckForBadUser; CheckForBadProperties; CheckForBadConfigurations",
                     p.InitialTargets);
 
                 // Build the default target.
                 p.Build(null, null);
 
                 DumpBuildItemGroup(p.GetEvaluatedItemsByName("TargetOrder"));
-            
+
                 // The following method will ensure that the targets were executed in the correct order.
                 EngineHelpers.AssertItemsMatch(@"
                     CheckForBadUser_Executed
@@ -5479,14 +5479,14 @@ public void RunInitialTargetsInMainAndImportedProjects()
                 // Change the InitialTargets on the main project to be "NewChecks", but do it via an environment variable.
                 p.InitialTargets = "$(MyNewChecks)";
 
-                Assertion.AssertEquals("Check all InitialTargets", "NewChecks; CheckForBadProperties; CheckForBadConfigurations", 
+                Assertion.AssertEquals("Check all InitialTargets", "NewChecks; CheckForBadProperties; CheckForBadConfigurations",
                     p.InitialTargets);
 
                 // Build the default target.
                 p.Build(null, null);
 
                 DumpBuildItemGroup(p.GetEvaluatedItemsByName("TargetOrder"));
-            
+
                 // The following method will ensure that the targets were executed in the correct order.
                 EngineHelpers.AssertItemsMatch(@"
                     NewChecks_Executed
@@ -5555,7 +5555,7 @@ public void ModifyInitialTargetsInMainProject()
 
             // Build the default target.
             p.Build(null, null);
-        
+
             Assertion.Assert("Build target should have been run.", myLogger.FullLog.Contains("BuildTargetExecuted"));
             Assertion.Assert("CheckForErrors target should have been run.", myLogger.FullLog.Contains("CheckForErrorsTargetExecuted"));
         }
@@ -5680,7 +5680,7 @@ public void SetGetProjectExtensions()
         }
 
         /// <summary>
-        /// There is a certain error that the MSBuild engine fires when you try to do a build on 
+        /// There is a certain error that the MSBuild engine fires when you try to do a build on
         /// a project that has had its targets disabled because of security.  However, the project
         /// system doesn't want to show this error to the user because it's not actionable for
         /// the user.  So it looks for code MSB4112 to throw away this error.  Here we're just
@@ -5693,10 +5693,10 @@ public void VerifySecurityErrorHasCodeMSB4112()
         {
             ResourceManager resourceManager = new ResourceManager("Microsoft.Build.Engine.Resources.Strings", typeof(Project).Assembly);
             string securityMessage = resourceManager.GetString("SecurityProjectBuildDisabled", CultureInfo.CurrentUICulture);
-            
-            Assertion.Assert( 
+
+            Assertion.Assert(
                 "Security message about disabled targets need to have code MSB4112, because code in the VS Core project system depends on this.  See DesignTimeBuildFeedback.cpp.",
-                securityMessage.Contains("MSB4112") 
+                securityMessage.Contains("MSB4112")
             );
         }
 
@@ -5790,12 +5790,12 @@ public void RegressVsWhidbey579075()
                     </Target>
                 </Project>
                 ", logger);
-            
+
             // Set a property and force project evaluation
             project.SetProperty("Configuration", "Release");
             BuildPropertyGroup evaluatedProperties = project.EvaluatedProperties;
 
-            // Set a different value of the property and build without forced reevaluation, 
+            // Set a different value of the property and build without forced reevaluation,
             // check if the new value is passed to the logger
             project.SetProperty("Configuration", "Debug");
             project.Build();
@@ -5815,7 +5815,7 @@ public void VersionBasedMSBuildBinPathDefault()
                     <Target Name=`Build`/>
                 </Project>", null);
 
-            Assertion.AssertEquals("Nonexistent ToolsVersion should evaluate to the default version", 
+            Assertion.AssertEquals("Nonexistent ToolsVersion should evaluate to the default version",
                 Constants.defaultToolsVersion, project.ToolsVersion);
 
             Assertion.AssertEquals("Nonexistent ToolsVersion should mean ToolsVersionAttribute is the default version",
@@ -5823,7 +5823,7 @@ public void VersionBasedMSBuildBinPathDefault()
 
             Assertion.AssertEquals("BinPath is the MSBuildBinPath for the default version",
                 "www.msbuild.org", project.EvaluatedProperties[ReservedPropertyNames.binPath].FinalValue);
-            
+
             Assertion.AssertEquals("BinPath is the MSBuildToolsPath for the default version",
                 "www.msbuild.org", project.EvaluatedProperties[ReservedPropertyNames.toolsPath].FinalValue);
         }
@@ -5839,7 +5839,7 @@ public void VersionBasedMSBuildBinPathExplicit()
                     <Target Name=`Build`/>
                 </Project>", null);
 
-            Assertion.AssertEquals("ToolsVersion should have been picked up from the project attribute", 
+            Assertion.AssertEquals("ToolsVersion should have been picked up from the project attribute",
                 "myValidToolsVersion", project.ToolsVersion);
 
             Assertion.AssertEquals("ToolsVersionAttribute should have been picked up from the project attribute",
@@ -6010,7 +6010,7 @@ public void MSBuildToolsVersionProperty()
 
             Project project = ObjectModelHelpers.CreateInMemoryProject(e, ObjectModelHelpers.CleanupFileContents(@"
                 <Project DefaultTargets=`Build` xmlns=`msbuildnamespace`>
-                    <UsingTask TaskName='Message' AssemblyName='Microsoft.Build.Tasks.Core, Version=msbuildassemblyversion, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'/>    
+                    <UsingTask TaskName='Message' AssemblyName='Microsoft.Build.Tasks.Core, Version=msbuildassemblyversion, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'/>
                     <Target Name=`Build`>
                         <Message Text=`##$(MSBuildToolsVersion)##`/>
                     </Target>
@@ -6031,7 +6031,7 @@ public void MSBuildToolsVersionProperty2()
 
             Project project = ObjectModelHelpers.CreateInMemoryProject(e, ObjectModelHelpers.CleanupFileContents(@"
                 <Project DefaultTargets=`Build` xmlns=`msbuildnamespace`>
-                    <UsingTask TaskName='Message' AssemblyName='Microsoft.Build.Tasks.Core, Version=msbuildassemblyversion, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'/>    
+                    <UsingTask TaskName='Message' AssemblyName='Microsoft.Build.Tasks.Core, Version=msbuildassemblyversion, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'/>
                     <Target Name=`Build`>
                         <Message Text=`##$(MSBuildToolsVersion)##`/>
                     </Target>
@@ -6054,7 +6054,7 @@ public void SetEffectiveToolsVersionAttribute()
 
             Project project = ObjectModelHelpers.CreateInMemoryProject(e, ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion=`myValidToolsVersion` DefaultTargets=`Build` xmlns=`msbuildnamespace`>
-                    <UsingTask TaskName='Message' AssemblyName='Microsoft.Build.Tasks.Core, Version=msbuildassemblyversion, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'/>    
+                    <UsingTask TaskName='Message' AssemblyName='Microsoft.Build.Tasks.Core, Version=msbuildassemblyversion, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'/>
                     <PropertyGroup>
                        <TheToolsVersion>$(MSBuildToolsVersion)</TheToolsVersion>
                     </PropertyGroup>
@@ -6130,4 +6130,3 @@ public void PropertiesFromToolsetAppliedToProjectWhenToolsVersionOverridden()
         }
     }
 }
-
diff --git a/src/Deprecated/Engine/AssemblyInfo.cs b/src/Deprecated/Engine/AssemblyInfo.cs
index f01f747da28..bf94342c24e 100644
--- a/src/Deprecated/Engine/AssemblyInfo.cs
+++ b/src/Deprecated/Engine/AssemblyInfo.cs
@@ -17,11 +17,4 @@
 
 [assembly: CLSCompliant(true)]
 
-// Needed for the "hub-and-spoke model to locate and retrieve localized resources": https://msdn.microsoft.com/en-us/library/21a15yht(v=vs.110).aspx
-// We want "en" to require a satellite assembly for debug builds in order to flush out localization
-// issues, but we want release builds to work without it. Also, .net core does not have resource fallbacks
-#if (DEBUG && !RUNTIME_TYPE_NETCORE)
-[assembly: NeutralResourcesLanguage("en", UltimateResourceFallbackLocation.Satellite)]
-#else
 [assembly: NeutralResourcesLanguage("en")]
-#endif
diff --git a/src/Deprecated/Engine/Engine/Node.cs b/src/Deprecated/Engine/Engine/Node.cs
index 5a5ff319324..da393b51c0c 100644
--- a/src/Deprecated/Engine/Engine/Node.cs
+++ b/src/Deprecated/Engine/Engine/Node.cs
@@ -435,7 +435,7 @@ internal void ReportUnhandledError(Exception originalException)
                 }
                 catch (Exception ex)
                 {
-                    // If an error occurred while trying to send the original exception to the parent 
+                    // If an error occurred while trying to send the original exception to the parent
                     // rethrow the original exception
                     string message = ResourceUtilities.FormatResourceString("FatalErrorOnChildNode", nodeId, ex.Message);
 
@@ -630,7 +630,7 @@ private void NodeLocalEngineLoop()
         private ManualResetEvent exitNodeEvent;
         // The engine being used to process build requests
         private Engine localEngine;
-        // The queue of build requests arriving from the parent. The queue is needed to buffer the requests while the local engine is 
+        // The queue of build requests arriving from the parent. The queue is needed to buffer the requests while the local engine is
         // being created and initialized
         private Queue<BuildRequest> buildRequests;
         // This flag is true if the thread that will be running the Engine.BuildLoop has been launched
diff --git a/src/Deprecated/Engine/Introspector/Introspector.cs b/src/Deprecated/Engine/Introspector/Introspector.cs
index a4c0f0cfc87..203896320f5 100644
--- a/src/Deprecated/Engine/Introspector/Introspector.cs
+++ b/src/Deprecated/Engine/Introspector/Introspector.cs
@@ -26,7 +26,7 @@ internal Introspector(Engine parentEngine, ProjectManager projectManager, NodeMa
         /// <summary>
         /// This method is called when the parent engine doesn't see activity for a preset time period to
         /// determine if the whole system is making forward progress. In order to that, status is collected
-        /// from every node in the system. If no node is making forward progress then the graph of all the 
+        /// from every node in the system. If no node is making forward progress then the graph of all the
         /// inprogress targets is analyzed for cycles. If a cycle is found the appropriate node is instructed
         /// to break it. If no cause for deadlock can be determined the system is shutdown.
         /// </summary>
@@ -90,7 +90,7 @@ internal int DetectDeadlock( int queueCounts, long lastLoopActivity, int current
                 }
                 else if (nodeStatus[i].HasExited)
                 {
-                    // A node has exited prematurely. The only option is to shutdown 
+                    // A node has exited prematurely. The only option is to shutdown
                     LogOrDumpError("ChildExitedPrematurely", i + 1);
 
                     SystemShutdown();
@@ -142,7 +142,7 @@ internal int DetectDeadlock( int queueCounts, long lastLoopActivity, int current
                                                   cycleDetector.CycleEdgeParent);
                 // Use the amount of time it took us to receive the NodeStatus and buffer it a little because node status is sent via a faster code path
                 ignoreTimeout = DateTime.Now.Ticks + requestDurationTime + (cycleBreakTimeout * TimeSpan.TicksPerMillisecond);
-                return currentTimeout; 
+                return currentTimeout;
             }
 
             // The system doesn't appear to be making progress. Switch to a largest sampling interval.
@@ -208,7 +208,7 @@ private void LogOrDumpError(string resourceName, params object[] args)
         }
 
         /// <summary>
-        /// Adds a set of nodeStatus's to the cycle graph 
+        /// Adds a set of nodeStatus's to the cycle graph
         /// </summary>
         private void AddTargetStatesToCycleDetector(NodeStatus[] nodeStatus, TargetCycleDetector cycleDetector)
         {
@@ -229,7 +229,7 @@ private void GatherNodeInformationForShutdown(NodeStatus[] nodeStatus, NodeStatu
             {
                 TimeSpan timeSinceLastNodeTaskActivity = new TimeSpan(nodeStatus[i].TimeSinceLastTaskActivity);
                 TimeSpan timeSinceLastNodeLoopActivity = new TimeSpan(nodeStatus[i].TimeSinceLastLoopActivity);
- 
+
                 Console.WriteLine("Status: " + i + " Task Activity " + timeSinceLastNodeTaskActivity.TotalMilliseconds +
                                   " Loop Activity " + timeSinceLastNodeLoopActivity.TotalMilliseconds + " Queue depth " +
                                   nodeStatus[i].QueueDepth);
@@ -262,11 +262,11 @@ internal void SystemShutdown()
 
 
         /// <summary>
-        /// This function is called to break the link between two targets that creates a cycle. The link could be 
+        /// This function is called to break the link between two targets that creates a cycle. The link could be
         /// due to depends/onerror relationship between parent and child. In that case both parent and child are
-        /// on the same node and within the same project. Or the link could be formed by an IBuildEngine callback 
-        /// (made such by tasks such as MSBuild or CallTarget) in which case there maybe multiple requests forming 
-        /// same link between parent and child. Also in that case parent and child maybe on different nodes and/or in 
+        /// on the same node and within the same project. Or the link could be formed by an IBuildEngine callback
+        /// (made such by tasks such as MSBuild or CallTarget) in which case there maybe multiple requests forming
+        /// same link between parent and child. Also in that case parent and child maybe on different nodes and/or in
         /// different projects. In either case the break is forced by finding the correct builds states and causing
         /// them to fail.
         /// </summary>
@@ -291,7 +291,7 @@ internal void BreakCycle(TargetInProgessState child, TargetInProgessState parent
             {
                 parentStates[i].CurrentBuildContextState = ProjectBuildState.BuildContextState.CycleDetected;
                 TaskExecutionContext taskExecutionContext =
-                    new TaskExecutionContext(parentProject, childTarget, null, parentStates[i], EngineCallback.invalidEngineHandle, 
+                    new TaskExecutionContext(parentProject, childTarget, null, parentStates[i], EngineCallback.invalidEngineHandle,
                                              EngineCallback.inProcNode, null);
 
                 parentEngine.PostTaskOutputUpdates(taskExecutionContext);
@@ -305,7 +305,7 @@ internal void BreakCycle(TargetInProgessState child, TargetInProgessState parent
         /// </summary>
         internal List<ProjectBuildState> FindConnectingContexts
         (
-            TargetInProgessState child, 
+            TargetInProgessState child,
             TargetInProgessState parent,
             Target childTarget,
             List<ProjectBuildState> waitingStates,
diff --git a/src/Deprecated/Engine/LocalProvider/LocalNodeProvider.cs b/src/Deprecated/Engine/LocalProvider/LocalNodeProvider.cs
index 07cc648695e..eb73adeb434 100644
--- a/src/Deprecated/Engine/LocalProvider/LocalNodeProvider.cs
+++ b/src/Deprecated/Engine/LocalProvider/LocalNodeProvider.cs
@@ -59,7 +59,7 @@ string startupDirectory
             }
 
             /* If we dont get a path passed in as a parameter, we can only assume that our path
-             is in the current appdomain basedirectory, this is the base directory 
+             is in the current appdomain basedirectory, this is the base directory
               that the assembly resolver uses to probe for assemblies
            */
             if (string.IsNullOrEmpty(this.locationOfMSBuildExe))
@@ -90,7 +90,7 @@ string startupDirectory
                 lastUsedNodeNumber = nodeData[i].NodeNumber + 1;
             }
 
-            // Set up the callback 
+            // Set up the callback
             this.engineCallback = parentEngineCallback;
             this.parentGlobalProperties = parentGlobalPropertyGroup;
             this.toolsetSearchLocations = toolSetSearchLocations;
@@ -228,7 +228,7 @@ public void PostBuildRequestToNode(int nodeIndex, BuildRequest buildRequest)
             if (nodeData[nodeIndex].NodeState != NodeState.Launched)
             {
                 // Note that we have to check the node status again inside the mutex. This
-                // ensures that that after flipping the status to launched inside the mutex 
+                // ensures that that after flipping the status to launched inside the mutex
                 // there will be no more writes to the queue of targets waiting to be sent
                 lock (nodeStateLock)
                 {
@@ -319,7 +319,7 @@ public void ShutdownNodes(Node.NodeShutdownLevel nodeShutdownLevel)
                 }
             }
 
-            // Reset the shutdown response received properties incase the nodes are going 
+            // Reset the shutdown response received properties incase the nodes are going
             // to be used for another build on the same engine.
             foreach (LocalNodeInfo nodeInfo in nodeData)
             {
@@ -459,7 +459,7 @@ private void TerminateChildNode(int processId)
             }
             catch (System.ComponentModel.Win32Exception)
             {
-                // The exception indicates that the child process is no longer running or 
+                // The exception indicates that the child process is no longer running or
                 // the parent cannot access the child process information due to insufficent security permissions
             }
         }
@@ -697,7 +697,7 @@ private void InitializeNode(int nodeIndex)
                         nodeInUseEvent.Close();
 
                         // If the node is still active and has not replied to the initialization message it must
-                        // be in bad state - try to get that node to exit 
+                        // be in bad state - try to get that node to exit
                         if (!nodeConnected && checkIfNodeActive(nodeData[nodeIndex].NodeNumber))
                         {
                             EventWaitHandle nodeShutdownEvent = new EventWaitHandle(false, EventResetMode.ManualReset, LocalNodeProviderGlobalNames.NodeErrorShutdownEventName(nodeData[nodeIndex].NodeNumber));
@@ -738,7 +738,7 @@ private static  bool checkIfNodeActive(int nodeNumber)
             }
             catch (WaitHandleCannotBeOpenedException)
             {
-                // Assume that the node is not running 
+                // Assume that the node is not running
             }
             finally
             {
diff --git a/src/Deprecated/Engine/Resources/xlf/Strings.en.xlf b/src/Deprecated/Engine/Resources/xlf/Strings.en.xlf
deleted file mode 100644
index 5fdd9a1a8ef..00000000000
--- a/src/Deprecated/Engine/Resources/xlf/Strings.en.xlf
+++ /dev/null
@@ -1,1516 +0,0 @@
-Ôªø<?xml version="1.0" encoding="utf-8"?>
-<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
-  <file datatype="xml" source-language="en" target-language="en" original="../Strings.resx">
-    <body>
-      <trans-unit id="AmbiguousTaskParameterError">
-        <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
-        <target state="new">MSB4001: The "{0}" task has more than one parameter called "{1}".</target>
-        <note>{StrBegin="MSB4001: "}UE: This message is shown when a task has more than one .NET property with the same name -- it's unclear which of
-    those properties the task wants to use as a parameter in project files.</note>
-      </trans-unit>
-      <trans-unit id="AtSignInTaskOutputItemName">
-        <source>MSB4081: The value "{0}" of the "ItemName" attribute in element &lt;Output&gt; contains an "@" character. If you intended to use an item name then remove the @( ) around the item name.</source>
-        <target state="new">MSB4081: The value "{0}" of the "ItemName" attribute in element &lt;Output&gt; contains an "@" character. If you intended to use an item name then remove the @( ) around the item name.</target>
-        <note>{StrBegin="MSB4081: "}UE: This message is shown when an output tag has an itemname that contains an @. They probably typed @(foo) instead of foo in the ItemName.LOCALIZATION: Output and ItemName should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="AttributeTypeLoadError">
-        <source>MSB4002: There was a failure retrieving the attributes for parameters in the "{0}" task. {1}</source>
-        <target state="new">MSB4002: There was a failure retrieving the attributes for parameters in the "{0}" task. {1}</target>
-        <note>{StrBegin="MSB4002: "}UE: This message is shown when the .NET attributes that a task's .NET properties are decorated with, cannot be
-    retrieved -- this is typically because the .NET classes that define the .NET attributes cannot be loaded because the assembly
-    they are defined in cannot be found, or the classes themselves cannot be found.</note>
-      </trans-unit>
-      <trans-unit id="BadlyCasedSpecialTaskAttribute">
-        <source>MSB4003: "{0}" is a reserved attribute of the &lt;{1}&gt; element, and must be spelled with the correct casing. This attribute cannot be used as a parameter to the "{2}" task.</source>
-        <target state="new">MSB4003: "{0}" is a reserved attribute of the &lt;{1}&gt; element, and must be spelled with the correct casing. This attribute cannot be used as a parameter to the "{2}" task.</target>
-        <note>{StrBegin="MSB4003: "}UE: Tasks are not allowed to use incorrect case for reserved attributes on the task nodes e.g. "continueonerror"
-    instead of the "ContinueOnError".</note>
-      </trans-unit>
-      <trans-unit id="BatchRequestSizeOutOfRange">
-        <source>The "REQUESTBATCHSIZE" must be a number greater than 1. "{0}" is an invalid value. The value 10 will be used instead.</source>
-        <target state="new">The "REQUESTBATCHSIZE" must be a number greater than 1. "{0}" is an invalid value. The value 10 will be used instead.</target>
-        <note>The name "REQUESTBATCHSIZE" is an environment variable</note>
-      </trans-unit>
-      <trans-unit id="BuildCompletedTime">
-        <source>Build completed in {0}.</source>
-        <target state="new">Build completed in {0}.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="BuildFinishedFailure">
-        <source>Build FAILED.</source>
-        <target state="new">Build FAILED.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="BuildFinishedSuccess">
-        <source>Build succeeded.</source>
-        <target state="new">Build succeeded.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="BuildStarted">
-        <source>Build started.</source>
-        <target state="new">Build started.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="BuildStartedWithTime">
-        <source>Build started {0}.</source>
-        <target state="new">Build started {0}.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="BuildTargetCompletely">
-        <source>Building target "{0}" completely.</source>
-        <target state="new">Building target "{0}" completely.</target>
-        <note>{0} is the name of the target.</note>
-      </trans-unit>
-      <trans-unit id="BuildTargetCompletelyNoInputsSpecified">
-        <source>No input files were specified.</source>
-        <target state="new">No input files were specified.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="BuildTargetCompletelyInputNewer">
-        <source>Input file "{0}" is newer than output file "{1}".</source>
-        <target state="new">Input file "{0}" is newer than output file "{1}".</target>
-        <note>{0} and {1} are filenames on disk.</note>
-      </trans-unit>
-      <trans-unit id="BuildTargetCompletelyOutputDoesntExist">
-        <source>Output file "{0}" does not exist.</source>
-        <target state="new">Output file "{0}" does not exist.</target>
-        <note>{0} is a filename on disk.</note>
-      </trans-unit>
-      <trans-unit id="BuildTargetCompletelyInputDoesntExist">
-        <source>Input file "{0}" does not exist.</source>
-        <target state="new">Input file "{0}" does not exist.</target>
-        <note>{0} is a filename on disk.</note>
-      </trans-unit>
-      <trans-unit id="BuildTargetPartially">
-        <source>Building target "{0}" partially, because some output files are out of date with respect to their input files.</source>
-        <target state="new">Building target "{0}" partially, because some output files are out of date with respect to their input files.</target>
-        <note>{0} is the name of the target.</note>
-      </trans-unit>
-      <trans-unit id="BuildTargetPartiallyInputNewer">
-        <source>[{0}: Input={1}, Output={2}] Input file is newer than output file.</source>
-        <target state="new">[{0}: Input={1}, Output={2}] Input file is newer than output file.</target>
-        <note>{0} is the name of an MSBuild item.  {1} and {2} are filenames on disk.</note>
-      </trans-unit>
-      <trans-unit id="BuildTargetPartiallyOutputDoesntExist">
-        <source>[{0}: Input={1}, Output={2}] Output file does not exist.</source>
-        <target state="new">[{0}: Input={1}, Output={2}] Output file does not exist.</target>
-        <note>{0} is the name of an MSBuild item.  {1} and {2} are filenames on disk.</note>
-      </trans-unit>
-      <trans-unit id="BuildTargetPartiallyInputDoesntExist">
-        <source>[{0}: Input={1}, Output={2}] Input file does not exist.</source>
-        <target state="new">[{0}: Input={1}, Output={2}] Input file does not exist.</target>
-        <note>{0} is the name of an MSBuild item.  {1} and {2} are filenames on disk.</note>
-      </trans-unit>
-      <trans-unit id="CannotAccessKnownAttributes">
-        <source>The attribute "{0}" is a known MSBuild attribute, and cannot be accessed using this method.</source>
-        <target state="new">The attribute "{0}" is a known MSBuild attribute, and cannot be accessed using this method.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotAccessPropertyByName">
-        <source>Properties in persisted property groups cannot be accessed by name.</source>
-        <target state="new">Properties in persisted property groups cannot be accessed by name.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotEvaluateItemMetadata">
-        <source>MSB4023: Cannot evaluate the item metadata "%({0})". {1}</source>
-        <target state="new">MSB4023: Cannot evaluate the item metadata "%({0})". {1}</target>
-        <note>{StrBegin="MSB4023: "}UE: This message is shown when the value of an item metadata cannot be computed for some reason e.g. trying to apply
-    %(RootDir) to an item-spec that's not a valid path, would result in this error.
-    LOCALIZATION: "{1}" is a localized message explaining the problem.</note>
-      </trans-unit>
-      <trans-unit id="CannotExecuteUnassociatedTask">
-        <source>Cannot execute a task not associated with a project object.</source>
-        <target state="new">Cannot execute a task not associated with a project object.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotModifyCacheEntryValues">
-        <source>The cache entry has already been set to a different value and cannot be modified.</source>
-        <target state="new">The cache entry has already been set to a different value and cannot be modified.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotModifyEnvironmentProperty">
-        <source>The "{0}" property comes from an environment variable, and cannot be modified.</source>
-        <target state="new">The "{0}" property comes from an environment variable, and cannot be modified.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotModifyGlobalProperty">
-        <source>The "{0}" property is a global property, and cannot be modified through an evaluated property group. Use "{1}" instead.</source>
-        <target state="new">The "{0}" property is a global property, and cannot be modified through an evaluated property group. Use "{1}" instead.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotModifyImportedProjects">
-        <source>Modifying the XML of an imported project file is not allowed. Open that project file directly.</source>
-        <target state="new">Modifying the XML of an imported project file is not allowed. Open that project file directly.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotModifyReservedItem">
-        <source>MSB4117: The "{0}" item name is reserved, and cannot be used.</source>
-        <target state="new">MSB4117: The "{0}" item name is reserved, and cannot be used.</target>
-        <note>{StrBegin="MSB4117: "}UE: This message is shown when the user tries to redefine one of the reserved MSBuild items e.g. @(Choose)</note>
-      </trans-unit>
-      <trans-unit id="CannotModifyReservedItemMetadata">
-        <source>MSB4118: The "{0}" item metadata name is reserved, and cannot be used.</source>
-        <target state="new">MSB4118: The "{0}" item metadata name is reserved, and cannot be used.</target>
-        <note>{StrBegin="MSB4118: "}UE: This message is shown when the user tries to redefine one of the reserved MSBuild items e.g. @(Choose)</note>
-      </trans-unit>
-      <trans-unit id="CannotModifyReservedProperty">
-        <source>MSB4004: The "{0}" property is reserved, and cannot be modified.</source>
-        <target state="new">MSB4004: The "{0}" property is reserved, and cannot be modified.</target>
-        <note>{StrBegin="MSB4004: "}UE: This message is shown when the user tries to redefine one of the reserved MSBuild properties e.g. $(MSBuildProjectFile)</note>
-      </trans-unit>
-      <trans-unit id="CannotPassMultipleItemsIntoScalarParameter">
-        <source>MSB4094: "{0}" is an invalid value for the "{1}" parameter of the "{3}" task. Multiple items cannot be passed into a parameter of type "{2}".</source>
-        <target state="new">MSB4094: "{0}" is an invalid value for the "{1}" parameter of the "{3}" task. Multiple items cannot be passed into a parameter of type "{2}".</target>
-        <note>{StrBegin="MSB4094: "}
-            UE: This error is shown when a project tries to pass multiple items into a task parameter of type ITaskItem (singular).
-    </note>
-      </trans-unit>
-      <trans-unit id="CannotPassMultipleItemsIntoScalarFunction">
-        <source>MSB4115: The "{0}" function only accepts a scalar value, but its argument "{1}" evaluates to "{2}" which is not a scalar value.</source>
-        <target state="new">MSB4115: The "{0}" function only accepts a scalar value, but its argument "{1}" evaluates to "{2}" which is not a scalar value.</target>
-        <note>{StrBegin="MSB4115: "}
-        UE: This error is shown when a project tries to pass multiple items into a function in a conditional expression, that can only accept a scalar value (such as the "exists()" function).
-    </note>
-      </trans-unit>
-      <trans-unit id="CannotReassociateTask">
-        <source>The task is currently associated with a project object, and should not be added to a different one.</source>
-        <target state="new">The task is currently associated with a project object, and should not be added to a different one.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotReferenceItemMetadataWithoutItemName">
-        <source>MSB4095: The item metadata %({0}) is being referenced without an item name.  Specify the item name by using %(itemname.{0}).</source>
-        <target state="new">MSB4095: The item metadata %({0}) is being referenced without an item name.  Specify the item name by using %(itemname.{0}).</target>
-        <note>{StrBegin="MSB4095: "}</note>
-      </trans-unit>
-      <trans-unit id="CannotRemoveTask">
-        <source>The task is not associated with the specified target element collection, and should not be removed from it.</source>
-        <target state="new">The task is not associated with the specified target element collection, and should not be removed from it.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotRestoreWorkingDirectoryWarning">
-        <source>MSB4005: The current working directory could not be restored to {0}. {1}</source>
-        <target state="new">MSB4005: The current working directory could not be restored to {0}. {1}</target>
-        <note>{StrBegin="MSB4005: "}UE: This message is shown when the current working directory cannot be reset after a build. "{1}" contains a message explaining why.
-    LOCALIZATION: "{1}" is a message from an CLR/FX exception and is already localized.</note>
-      </trans-unit>
-      <trans-unit id="CannotSetCondition">
-        <source>Cannot set a condition on an object not represented by an XML element in the project file.</source>
-        <target state="new">Cannot set a condition on an object not represented by an XML element in the project file.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotSetContinueOnError">
-        <source>Cannot set ContinueOnError on an object not represented by an XML element in the project file.</source>
-        <target state="new">Cannot set ContinueOnError on an object not represented by an XML element in the project file.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotSetDefaultToolsVersionAfterLoadingProjects">
-        <source>MSB4134: DefaultToolsVersion cannot be set after a project has been loaded into the Engine.</source>
-        <target state="new">MSB4134: DefaultToolsVersion cannot be set after a project has been loaded into the Engine.</target>
-        <note>{StrBegin="MSB4134: "}</note>
-      </trans-unit>
-      <trans-unit id="CannotSetExcludeOnEvaluatedItem">
-        <source>Assigning the "{0}" attribute on an item that has been evaluated is not allowed. This operation is only allowed on the original persisted item that came directly from the project file.</source>
-        <target state="new">Assigning the "{0}" attribute on an item that has been evaluated is not allowed. This operation is only allowed on the original persisted item that came directly from the project file.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotSetExcludeOnVirtualItem">
-        <source>Assigning the "{0}" attribute of a virtual item is not allowed.</source>
-        <target state="new">Assigning the "{0}" attribute of a virtual item is not allowed.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotSetPropertyDuringBuild">
-        <source>A property cannot be set while building.</source>
-        <target state="new">A property cannot be set while building.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotSetPropertyToNull">
-        <source>A property cannot be set to null.</source>
-        <target state="new">A property cannot be set to null.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CannotUseParameters">
-        <source>Cannot get or set parameters on a task not associated with a project object.</source>
-        <target state="new">Cannot get or set parameters on a task not associated with a project object.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ChildElementsBelowRemoveNotAllowed">
-        <source>MSB4162: &lt;{0}&gt; is not valid. Child elements are not allowed below a item remove element.</source>
-        <target state="new">MSB4162: &lt;{0}&gt; is not valid. Child elements are not allowed below a item remove element.</target>
-        <note>{StrBegin="MSB4162: "}</note>
-      </trans-unit>
-      <trans-unit id="ChildExitedPrematurely">
-        <source>MSB4166: Child node "{0}" exited prematurely. Shutting down.</source>
-        <target state="new">MSB4166: Child node "{0}" exited prematurely. Shutting down.</target>
-        <note>{StrBegin="MSB4166: "}</note>
-      </trans-unit>
-      <trans-unit id="ChooseMustContainWhen">
-        <source>MSB4085: A &lt;Choose&gt; must contain at least one &lt;When&gt;.</source>
-        <target state="new">MSB4085: A &lt;Choose&gt; must contain at least one &lt;When&gt;.</target>
-        <note>{StrBegin="MSB4085: "}</note>
-      </trans-unit>
-      <trans-unit id="ChooseOverflow">
-        <source>MSB4114: &lt;Choose&gt; elements cannot be nested more than {0} levels deep.</source>
-        <target state="new">MSB4114: &lt;Choose&gt; elements cannot be nested more than {0} levels deep.</target>
-        <note>{StrBegin="MSB4114: "}UE: This message appears if the project file contains unreasonably nested Choose elements.
-    LOCALIZATION: Do not localize "Choose" as it is an XML element name.</note>
-      </trans-unit>
-      <trans-unit id="CircularDependency">
-        <source>MSB4006: There is a circular dependency in the target dependency graph involving target "{0}".</source>
-        <target state="new">MSB4006: There is a circular dependency in the target dependency graph involving target "{0}".</target>
-        <note>{StrBegin="MSB4006: "}UE: This message is shown when the build engine detects a target referenced in a circular manner -- a project cannot
-    request a target to build itself (perhaps via a chain of other targets).</note>
-      </trans-unit>
-      <trans-unit id="ComparisonOnNonNumericExpression">
-        <source>MSB4086: A numeric comparison was attempted on "{1}" that evaluates to "{2}" instead of a number, in condition "{0}".</source>
-        <target state="new">MSB4086: A numeric comparison was attempted on "{1}" that evaluates to "{2}" instead of a number, in condition "{0}".</target>
-        <note>{StrBegin="MSB4086: "}</note>
-      </trans-unit>
-      <trans-unit id="ConditionAttributeInvalidError">
-        <source>MSB4007: The clause "{0}", specified in the "{1}" attribute is invalid.</source>
-        <target state="new">MSB4007: The clause "{0}", specified in the "{1}" attribute is invalid.</target>
-        <note>{StrBegin="MSB4007: "}UE: This message is shown when the Condition on an element is invalid in some way -- e.g. syntax error, unrecognized operator.</note>
-      </trans-unit>
-      <trans-unit id="ConditionMaybeEvaluatedIncorrectly">
-        <source>MSB4130: The condition "{0}" may have been evaluated incorrectly in an earlier version of MSBuild. Please verify that the order of the AND and OR clauses is written as intended. To avoid this warning, add parentheses to make the evaluation order explicit.</source>
-        <target state="new">MSB4130: The condition "{0}" may have been evaluated incorrectly in an earlier version of MSBuild. Please verify that the order of the AND and OR clauses is written as intended. To avoid this warning, add parentheses to make the evaluation order explicit.</target>
-        <note>{StrBegin="MSB4130: "}</note>
-      </trans-unit>
-      <trans-unit id="ConditionNotBoolean">
-        <source>MSB4087: Specified condition "{0}" does not evaluate to a boolean.</source>
-        <target state="new">MSB4087: Specified condition "{0}" does not evaluate to a boolean.</target>
-        <note>{StrBegin="MSB4087: "}</note>
-      </trans-unit>
-      <trans-unit id="ConditionNotBooleanDetail">
-        <source>MSB4113: Specified condition "{0}" evaluates to "{1}" instead of a boolean.</source>
-        <target state="new">MSB4113: Specified condition "{0}" evaluates to "{1}" instead of a boolean.</target>
-        <note>{StrBegin="MSB4113: "}</note>
-      </trans-unit>
-      <trans-unit id="ConfigFileLocation">
-        <source>{0}, line {1}</source>
-        <target state="new">{0}, line {1}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ConfigFileReadError">
-        <source>MSB4136: Error reading the toolset information from the configuration file "{0}". {1}</source>
-        <target state="new">MSB4136: Error reading the toolset information from the configuration file "{0}". {1}</target>
-        <note>{StrBegin="MSB4136: "}</note>
-      </trans-unit>
-      <trans-unit id="ConflictingTaskAssembly">
-        <source>MSB4008: A conflicting assembly for the task assembly "{0}" has been found at "{1}".</source>
-        <target state="new">MSB4008: A conflicting assembly for the task assembly "{0}" has been found at "{1}".</target>
-        <note>{StrBegin="MSB4008: "}UE: This message is shown when the type/class of a task cannot be resolved uniquely from a single assembly.</note>
-      </trans-unit>
-      <trans-unit id="ConflictingValuesOfMSBuildToolsPath">
-        <source>MSB4142: MSBuildToolsPath is not the same as MSBuildBinPath for the ToolsVersion "{0}" defined at "{1}". If both are present they must have the same value.</source>
-        <target state="new">MSB4142: MSBuildToolsPath is not the same as MSBuildBinPath for the ToolsVersion "{0}" defined at "{1}". If both are present they must have the same value.</target>
-        <note>{StrBegin="MSB4142: "}</note>
-      </trans-unit>
-      <trans-unit id="CustomNamespaceNotAllowedOnThisChildElement">
-        <source>MSB4097: The element &lt;{0}&gt; beneath element &lt;{1}&gt; may not have a custom XML namespace.</source>
-        <target state="new">MSB4097: The element &lt;{0}&gt; beneath element &lt;{1}&gt; may not have a custom XML namespace.</target>
-        <note>{StrBegin="MSB4097: "}</note>
-      </trans-unit>
-      <trans-unit id="DefaultTasksFileFailure">
-        <source>MSB4009: The default tasks file could not be successfully loaded. {0}</source>
-        <target state="new">MSB4009: The default tasks file could not be successfully loaded. {0}</target>
-        <note>{StrBegin="MSB4009: "}UE: This message is shown when one of the default tasks file (*.tasks) located alongside the MSBuild binaries cannot
-    be opened/parsed. "{0}" contains a message explaining why. The filename itself is not part of the message but is provided
-    separately to loggers.
-    LOCALIZATION: "{0}" is a message from some FX method and is already localized.</note>
-      </trans-unit>
-      <trans-unit id="DefaultTasksFileLoadFailureWarning">
-        <source>MSB4010: The "{0}" files could not be successfully loaded from their expected location "{1}". Default tasks will not be available. {2}</source>
-        <target state="new">MSB4010: The "{0}" files could not be successfully loaded from their expected location "{1}". Default tasks will not be available. {2}</target>
-        <note>{StrBegin="MSB4010: "}UE: This message is shown when the default tasks files that are located alongside the MSBuild binaries cannot be
-    found, either because they don't exist, or because of lack of permissions. "{2}" contains a message explaining why.
-    LOCALIZATION: "{2}" is a message from some FX method and is already localized.</note>
-      </trans-unit>
-      <trans-unit id="DefaultToolsVersionIsNotSpecified">
-        <source>MSB4140: Default tools version is specified in neither the registry nor the configuration file.</source>
-        <target state="new">MSB4140: Default tools version is specified in neither the registry nor the configuration file.</target>
-        <note>{StrBegin="MSB4140: "}</note>
-      </trans-unit>
-      <trans-unit id="DefaultToolsVersionNotFound">
-        <source>MSB4133: A default tools version "{0}" was specified, but its definition could not be found.</source>
-        <target state="new">MSB4133: A default tools version "{0}" was specified, but its definition could not be found.</target>
-        <note>{StrBegin="MSB4133: "}</note>
-      </trans-unit>
-      <trans-unit id="DollarSignInTaskOutputPropertyName">
-        <source>MSB4080: The value "{0}" of the "PropertyName" attribute in element &lt;Output&gt; contains a "$" character. If you intended to use a property name then remove the $( ) around the property name.</source>
-        <target state="new">MSB4080: The value "{0}" of the "PropertyName" attribute in element &lt;Output&gt; contains a "$" character. If you intended to use a property name then remove the $( ) around the property name.</target>
-        <note>{StrBegin="MSB4080: "}UE: This message is shown when an output tag has an property name that contains an $. They probably typed $(foo) instead of foo in the PropertyName. LOCALIZATION: Output and PropertyName should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="DuplicateImport">
-        <source>MSB4011: There is a circular reference involving the import of file "{0}". This file may have been imported more than once, or you may have attempted to import the main project file. All except the first instance of this file will be ignored.</source>
-        <target state="new">MSB4011: There is a circular reference involving the import of file "{0}". This file may have been imported more than once, or you may have attempted to import the main project file. All except the first instance of this file will be ignored.</target>
-        <note>{StrBegin="MSB4011: "}</note>
-      </trans-unit>
-      <trans-unit id="DuplicateProjectExtensions">
-        <source>MSB4079: The &lt;ProjectExtensions&gt; element occurs more than once.</source>
-        <target state="new">MSB4079: The &lt;ProjectExtensions&gt; element occurs more than once.</target>
-        <note>{StrBegin="MSB4079: "}</note>
-      </trans-unit>
-      <trans-unit id="EmbeddedItemVectorCannotBeItemized">
-        <source>MSB4012: The expression "{0}" cannot be used in this context. Item lists cannot be concatenated with other strings where an item list is expected. Use a semicolon to separate multiple item lists.</source>
-        <target state="new">MSB4012: The expression "{0}" cannot be used in this context. Item lists cannot be concatenated with other strings where an item list is expected. Use a semicolon to separate multiple item lists.</target>
-        <note>{StrBegin="MSB4012: "}UE: This message is shown when the user does not properly specify an item list when an item list is expected
-    e.g. "badprefix@(foo)badsuffix" instead of "prefix; @(foo); suffix"</note>
-      </trans-unit>
-      <trans-unit id="EmptyProjectFileName">
-        <source>Need to specify the project file name.</source>
-        <target state="new">Need to specify the project file name.</target>
-        <note>UE: This message is shown when the user calls into the engine to build a project without specifying a filename.</note>
-      </trans-unit>
-      <trans-unit id="EndOfInputTokenName">
-        <source>end of input</source>
-        <target state="new">end of input</target>
-        <note>This is the name of the "EndOfInput" token. It is displayed in quotes as the
-    unexpected char or token when the end of a conditional was unexpectedly reached.</note>
-      </trans-unit>
-      <trans-unit id="ErrorConvertedIntoWarning">
-        <source>The previous error was converted to a warning because the task was called with ContinueOnError=true.</source>
-        <target state="new">The previous error was converted to a warning because the task was called with ContinueOnError=true.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ErrorCount">
-        <source>{0} Error(s)</source>
-        <target state="new">{0} Error(s)</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ErrorCreatingToolset">
-        <source>MSB4159: Error creating the toolset "{0}". {1}</source>
-        <target state="new">MSB4159: Error creating the toolset "{0}". {1}</target>
-        <note>{StrBegin="MSB4159: "}</note>
-      </trans-unit>
-      <trans-unit id="ErrorEvaluatingToolsetPropertyExpression">
-        <source>MSB4146: Cannot evaluate the property expression "{0}" found at "{1}". {2}</source>
-        <target state="new">MSB4146: Cannot evaluate the property expression "{0}" found at "{1}". {2}</target>
-        <note>{StrBegin="MSB4146: "}</note>
-      </trans-unit>
-      <trans-unit id="ErrorWarningMessageNotSupported">
-        <source>The &lt;{0}&gt; tag is no longer supported as a child of the &lt;Project&gt; element. Place this tag within a target, and add the name of the target to the "InitialTargets" attribute of the &lt;Project&gt; element.</source>
-        <target state="new">The &lt;{0}&gt; tag is no longer supported as a child of the &lt;Project&gt; element. Place this tag within a target, and add the name of the target to the "InitialTargets" attribute of the &lt;Project&gt; element.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ExpressionDoesNotEvaluateToBoolean">
-        <source>MSB4100: Expected "{0}" to evaluate to a boolean instead of "{1}", in condition "{2}".</source>
-        <target state="new">MSB4100: Expected "{0}" to evaluate to a boolean instead of "{1}", in condition "{2}".</target>
-        <note>{StrBegin="MSB4100: "}</note>
-      </trans-unit>
-      <trans-unit id="FailedToRetrieveTaskOutputs">
-        <source>MSB4028: The "{0}" task's outputs could not be retrieved from the "{1}" parameter. {2}</source>
-        <target state="new">MSB4028: The "{0}" task's outputs could not be retrieved from the "{1}" parameter. {2}</target>
-        <note>{StrBegin="MSB4028: "}</note>
-      </trans-unit>
-      <trans-unit id="FatalBuildError">
-        <source>MSB4014: The build was aborted because of an internal failure.</source>
-        <target state="new">MSB4014: The build was aborted because of an internal failure.</target>
-        <note>{StrBegin="MSB4014: "}UE: This message is shown when an unhandled exception terminates the build. The cause is most likely a programming
-    error in the build engine.</note>
-      </trans-unit>
-      <trans-unit id="FatalErrorDuringLoggerShutdown">
-        <source>MSB4015: The build was aborted because the "{0}" logger failed unexpectedly during shutdown.</source>
-        <target state="new">MSB4015: The build was aborted because the "{0}" logger failed unexpectedly during shutdown.</target>
-        <note>{StrBegin="MSB4015: "}UE: This message is used for a special exception that is thrown when a logger fails while shutting down (most likely
-    because of a programming error in the logger). When a logger dies, we cannot proceed with the build, and we throw a special
-    exception to abort the build.</note>
-      </trans-unit>
-      <trans-unit id="FatalErrorWhileInitializingLogger">
-        <source>MSB4016: The build was aborted because the "{0}" logger failed unexpectedly during initialization.</source>
-        <target state="new">MSB4016: The build was aborted because the "{0}" logger failed unexpectedly during initialization.</target>
-        <note>{StrBegin="MSB4016: "}UE: This message is used for a special exception that is thrown when a logger fails while initializing itself (most
-    likely because of a programming error in the logger). When a logger dies, we cannot proceed with the build, and we throw a
-    special exception to abort the build.</note>
-      </trans-unit>
-      <trans-unit id="FatalErrorWhileLogging">
-        <source>MSB4017: The build was aborted because of an unexpected logger failure.</source>
-        <target state="new">MSB4017: The build was aborted because of an unexpected logger failure.</target>
-        <note>{StrBegin="MSB4017: "}UE: This message is used for a special exception that is thrown when a logger fails while logging an event (most
-    likely because of a programming error in the logger). When a logger dies, we cannot proceed with the build, and we throw a
-    special exception to abort the build.</note>
-      </trans-unit>
-      <trans-unit id="FatalTaskError">
-        <source>MSB4018: The "{0}" task failed unexpectedly.</source>
-        <target state="new">MSB4018: The "{0}" task failed unexpectedly.</target>
-        <note>{StrBegin="MSB4018: "}UE: This message is shown when a task terminates because of an unhandled exception. The cause is most likely a
-    programming error in the task; however, it is also possible that the unhandled exception originated in the engine, and was
-    surfaced through the task when the task called into the engine.</note>
-      </trans-unit>
-      <trans-unit id="FailedToReceiveChildStatus">
-        <source>MSB4165: Failed to receive a response from the child node "{0}" in the timeout period "{1}" ms. Shutting down.</source>
-        <target state="new">MSB4165: Failed to receive a response from the child node "{0}" in the timeout period "{1}" ms. Shutting down.</target>
-        <note>{StrBegin="MSB4165: "}</note>
-      </trans-unit>
-      <trans-unit id="IllFormedCondition">
-        <source>MSB4088: Condition "{0}" is improperly constructed.</source>
-        <target state="new">MSB4088: Condition "{0}" is improperly constructed.</target>
-        <note>{StrBegin="MSB4088: "}</note>
-      </trans-unit>
-      <trans-unit id="IllFormedEqualsInCondition">
-        <source>MSB4105: Found an unexpected character '{2}' at position {1} in condition "{0}". Did you intend to use "=="?</source>
-        <target state="new">MSB4105: Found an unexpected character '{2}' at position {1} in condition "{0}". Did you intend to use "=="?</target>
-        <note>{StrBegin="MSB4105: "}</note>
-      </trans-unit>
-      <trans-unit id="IllFormedItemListCloseParenthesisInCondition">
-        <source>MSB4106: Expected an item list at position {1} in condition "{0}". Did you forget the closing parenthesis?</source>
-        <target state="new">MSB4106: Expected an item list at position {1} in condition "{0}". Did you forget the closing parenthesis?</target>
-        <note>{StrBegin="MSB4106: "}</note>
-      </trans-unit>
-      <trans-unit id="IllFormedItemListOpenParenthesisInCondition">
-        <source>MSB4107: Expected an item list at position {1} in condition "{0}". Did you forget the opening parenthesis after the '@'? To use a literal '@', use '%40' instead.</source>
-        <target state="new">MSB4107: Expected an item list at position {1} in condition "{0}". Did you forget the opening parenthesis after the '@'? To use a literal '@', use '%40' instead.</target>
-        <note>{StrBegin="MSB4107: "}</note>
-      </trans-unit>
-      <trans-unit id="IllFormedItemListQuoteInCondition">
-        <source>MSB4108: Expected an item list at position {1} in condition "{0}". Did you forget to close a quote inside the item list expression?</source>
-        <target state="new">MSB4108: Expected an item list at position {1} in condition "{0}". Did you forget to close a quote inside the item list expression?</target>
-        <note>{StrBegin="MSB4108: "}</note>
-      </trans-unit>
-      <trans-unit id="IllFormedPropertyCloseParenthesisInCondition">
-        <source>MSB4109: Expected a property at position {1} in condition "{0}". Did you forget the closing parenthesis?</source>
-        <target state="new">MSB4109: Expected a property at position {1} in condition "{0}". Did you forget the closing parenthesis?</target>
-        <note>{StrBegin="MSB4109: "}</note>
-      </trans-unit>
-      <trans-unit id="IllFormedPropertyOpenParenthesisInCondition">
-        <source>MSB4110: Expected a property at position {1} in condition "{0}". Did you forget the opening parenthesis after the '$'? To use a literal '$', use '%24' instead.</source>
-        <target state="new">MSB4110: Expected a property at position {1} in condition "{0}". Did you forget the opening parenthesis after the '$'? To use a literal '$', use '%24' instead.</target>
-        <note>{StrBegin="MSB4110: "}</note>
-      </trans-unit>
-      <trans-unit id="IllFormedQuotedStringInCondition">
-        <source>MSB4101: Expected a closing quote after position {1} in condition "{0}".</source>
-        <target state="new">MSB4101: Expected a closing quote after position {1} in condition "{0}".</target>
-        <note>{StrBegin="MSB4101: "}</note>
-      </trans-unit>
-      <trans-unit id="ImportedProjectNotFound">
-        <source>MSB4019: The imported project "{0}" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.</source>
-        <target state="new">MSB4019: The imported project "{0}" was not found. Confirm that the path in the &lt;Import&gt; declaration is correct, and that the file exists on disk.</target>
-        <note>{StrBegin="MSB4019: "}LOCALIZATION: &lt;Import&gt; should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="IncorrectNumberOfFunctionArguments">
-        <source>MSB4089: Incorrect number of arguments to function in condition "{0}". Found {1} argument(s) when expecting {2}.</source>
-        <target state="new">MSB4089: Incorrect number of arguments to function in condition "{0}". Found {1} argument(s) when expecting {2}.</target>
-        <note>{StrBegin="MSB4089: "}</note>
-      </trans-unit>
-      <trans-unit id="IncorrectObjectAssociation">
-        <source>The "{0}" object specified does not belong to the correct "{1}" object.</source>
-        <target state="new">The "{0}" object specified does not belong to the correct "{1}" object.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="InvalidAttributeValue">
-        <source>MSB4020: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is invalid.</source>
-        <target state="new">MSB4020: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is invalid.</target>
-        <note>{StrBegin="MSB4020: "}UE: This is a generic message that is displayed when we find a project element with an incorrect value for one of its
-    attributes e.g. &lt;Import Project=""&gt; -- the value of Project should not be an empty string.</note>
-      </trans-unit>
-      <trans-unit id="InvalidAttributeValueWithException">
-        <source>MSB4102: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is invalid. {3}</source>
-        <target state="new">MSB4102: The value "{0}" of the "{1}" attribute in element &lt;{2}&gt; is invalid. {3}</target>
-        <note>{StrBegin="MSB4102: "}UE: This is a generic message that is displayed when we find a project element with an incorrect value for one of its
-        attributes. At the end of the message we show the exception text we got trying to use the value.</note>
-      </trans-unit>
-      <trans-unit id="InvalidContinueOnErrorAttribute">
-        <source>MSB4021: The "ContinueOnError" attribute of the "{0}" task is not valid. {1}</source>
-        <target state="new">MSB4021: The "ContinueOnError" attribute of the "{0}" task is not valid. {1}</target>
-        <note>{StrBegin="MSB4021: "}LOCALIZATION: "ContinueOnError" should not be localized. "{1}" is a message from another exception explaining the problem.</note>
-      </trans-unit>
-      <trans-unit id="InvalidDefaultToolsVersionInRegistry">
-        <source>MSB4139: Invalid value for default ToolsVersion is specified in registry key "{0}".</source>
-        <target state="new">MSB4139: Invalid value for default ToolsVersion is specified in registry key "{0}".</target>
-        <note>{StrBegin="MSB4139: "}</note>
-      </trans-unit>
-      <trans-unit id="InvalidEvaluatedAttributeValue">
-        <source>MSB4022: The result "{0}" of evaluating the value "{1}" of the "{2}" attribute in element &lt;{3}&gt; is not valid.</source>
-        <target state="new">MSB4022: The result "{0}" of evaluating the value "{1}" of the "{2}" attribute in element &lt;{3}&gt; is not valid.</target>
-        <note>{StrBegin="MSB4022: "}UE: This message is shown when the engine is checking the correctness of the value (after evaluating embedded
-    properties/items) assigned to an XML attribute of an XML element in the project file.</note>
-      </trans-unit>
-      <trans-unit id="InvalidEventCategory">
-        <source>"{0}" is not a valid event category. To raise a custom event, use the "{1}" category.</source>
-        <target state="new">"{0}" is not a valid event category. To raise a custom event, use the "{1}" category.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="InvalidEventImportance">
-        <source>"{0}" is not a valid importance level for events.</source>
-        <target state="new">"{0}" is not a valid importance level for events.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="InvalidFileLoggerFile">
-        <source>MSB4104: Failed to write to log file "{0}". {1}</source>
-        <target state="new">MSB4104: Failed to write to log file "{0}". {1}</target>
-        <note>{StrBegin="MSB4104: "}UE: This is shown when the File Logger can't create or write to the file it was instructed to log to.</note>
-      </trans-unit>
-      <trans-unit id="InvalidImportedProjectFile">
-        <source>MSB4024: The imported project file could not be loaded. {0}</source>
-        <target state="new">MSB4024: The imported project file could not be loaded. {0}</target>
-        <note>{StrBegin="MSB4024: "}UE: This message is shown when an imported project file cannot be loaded because of incorrect XML. The project
-    filename is not part of the message because it is provided separately to loggers.
-    LOCALIZATION: {0} is a localized message from the CLR/FX explaining why the project is invalid.</note>
-      </trans-unit>
-      <trans-unit id="InvalidInPersistedItemGroup">
-        <source>Operation invalid for a persisted item group.</source>
-        <target state="new">Operation invalid for a persisted item group.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="InvalidInVirtualItemGroup">
-        <source>Operation invalid for a virtual item group.</source>
-        <target state="new">Operation invalid for a virtual item group.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="InvalidMessageImportance">
-        <source>MSB4071: The value Importance="{0}" in the &lt;Message&gt; element is invalid. Valid values are: High, Normal and Low.</source>
-        <target state="new">MSB4071: The value Importance="{0}" in the &lt;Message&gt; element is invalid. Valid values are: High, Normal and Low.</target>
-        <note>{StrBegin="MSB4071: "}UE: This message is shown when a user specifies a value for the importance attribute of Message which is not valid.
-    The importance enumeration is: High, Normal and Low.  Specifying any other importance will result in this message being shown
-    LOCALIZATION: "Importance" should not be localized.
-                  "Message" should not be localized.
-                  High should not be localized.
-                  Normal should not be localized.
-                  Low should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="InvalidProjectFile">
-        <source>MSB4025: The project file could not be loaded. {0}</source>
-        <target state="new">MSB4025: The project file could not be loaded. {0}</target>
-        <note>{StrBegin="MSB4025: "}UE: This message is shown when the project file given to the engine cannot be loaded because the filename/path is
-    invalid, or due to lack of permissions, or incorrect XML. The project filename is not part of the message because it is
-    provided separately to loggers.
-    LOCALIZATION: {0} is a localized message from the CLR/FX explaining why the project is invalid.</note>
-      </trans-unit>
-      <trans-unit id="InvalidPropertyNameInToolset">
-        <source>MSB4147: The property "{0}" at "{1}" is invalid. {2}</source>
-        <target state="new">MSB4147: The property "{0}" at "{1}" is invalid. {2}</target>
-        <note>{StrBegin="MSB4147: "}</note>
-      </trans-unit>
-      <trans-unit id="InvalidProjectFileEncodingValue">
-        <source>"{0}" is an invalid "ProjectFileEncoding" value.</source>
-        <target state="new">"{0}" is an invalid "ProjectFileEncoding" value.</target>
-        <note>LOCALIZATION: "ProjectFileEncoding" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="InvalidRegistryPropertyExpression">
-        <source>MSB4143: The expression "{0}" cannot be evaluated. {1}</source>
-        <target state="new">MSB4143: The expression "{0}" cannot be evaluated. {1}</target>
-        <note>{StrBegin="MSB4143: "}
-      UE: This message is shown when the user attempts to provide an expression like "$(Registry:HKEY_LOCAL_MACHINE\Software\Vendor\Tools@TaskLocation)"
-      LOCALIZATION: "{0}" is the expression that was bad. "{1}" is a message from an FX exception that describes why the expression is bad.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidFunctionPropertyExpression">
-        <source>MSB4184: The expression "{0}" cannot be evaluated. {1}</source>
-        <target state="new">MSB4184: The expression "{0}" cannot be evaluated. {1}</target>
-        <note>{StrBegin="MSB4184: "}
-      Single quotes as the expression will typically have double quotes in it.
-      UE: This message is shown when the user attempts to provide an expression like "$(SomeProperty.ToLower())"
-      LOCALIZATION: "{0}" is the expression that was bad. "{1}" is a message from an FX exception that describes why the expression is bad.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidFunctionMethodUnavailable">
-        <source>MSB4185: The function "{0}" on type "{1}" has not been enabled for execution.</source>
-        <target state="new">MSB4185: The function "{0}" on type "{1}" has not been enabled for execution.</target>
-        <note>{StrBegin="MSB4185: "}
-      UE: This message is shown when the user attempts to provide an expression like "$([System.DateTime]::Now)", but the expression has not been enabled
-      LOCALIZATION: "{0}" is the static function name, "{1}" is the .NET Framework type name
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidFunctionStaticMethodSyntax">
-        <source>MSB4186: Invalid static method invocation syntax: "{0}". Static method invocation should be of the form: $([FullTypeName]::Method()), e.g. $([System.IO.Path]::Combine(`a`, `b`))</source>
-        <target state="new">MSB4186: Invalid static method invocation syntax: "{0}". Static method invocation should be of the form: $([FullTypeName]::Method()), e.g. $([System.IO.Path]::Combine(`a`, `b`))</target>
-        <note>{StrBegin="MSB4186: "}
-      UE: This message is shown when the user attempts to call a static method on a type, but has used the incorrect syntax
-      LOCALIZATION: "{0}" is the function expression which is in error
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidSchemaFile">
-        <source>MSB4070: The schema "{0}" is not valid. {1}</source>
-        <target state="new">MSB4070: The schema "{0}" is not valid. {1}</target>
-        <note>{StrBegin="MSB4070: "}UE: This message is shown when the schema file provided for the validation of a project is itself not valid.
-    LOCALIZATION: "{0}" is the schema file path. "{1}" is a message from an FX exception that describes why the schema file is bad.</note>
-      </trans-unit>
-      <trans-unit id="InvalidTaskAttributeError">
-        <source>MSB4026: The "{0}={1}" parameter for the "{2}" task is invalid.</source>
-        <target state="new">MSB4026: The "{0}={1}" parameter for the "{2}" task is invalid.</target>
-        <note>{StrBegin="MSB4026: "}UE: This message is displayed when a task has an invalid parameter that cannot be initialized.</note>
-      </trans-unit>
-      <trans-unit id="InvalidTaskItemsInTaskOutputs">
-        <source>MSB4027: The "{0}" task generated invalid items from the "{1}" output parameter. {2}</source>
-        <target state="new">MSB4027: The "{0}" task generated invalid items from the "{1}" output parameter. {2}</target>
-        <note>{StrBegin="MSB4027: "}</note>
-      </trans-unit>
-      <trans-unit id="InvalidTaskOutputSpecification">
-        <source>MSB4029: The "{0}" task has an invalid output specification. The "TaskParameter" attribute is required, and either the "ItemName" or "PropertyName" attribute must be specified (but not both).</source>
-        <target state="new">MSB4029: The "{0}" task has an invalid output specification. The "TaskParameter" attribute is required, and either the "ItemName" or "PropertyName" attribute must be specified (but not both).</target>
-        <note>{StrBegin="MSB4029: "}LOCALIZATION: "TaskParameter", "ItemName" and "PropertyName" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="InvalidTaskParameterValueError">
-        <source>MSB4030: "{0}" is an invalid value for the "{1}" parameter of the "{3}" task. The "{1}" parameter is of type "{2}".</source>
-        <target state="new">MSB4030: "{0}" is an invalid value for the "{1}" parameter of the "{3}" task. The "{1}" parameter is of type "{2}".</target>
-        <note>{StrBegin="MSB4030: "}UE: This error is shown when a type mis-match occurs between the value assigned to task parameter in the project file
-    and the type of the .NET property that corresponds to the task parameter. For example, if an int task parameter called "Count"
-    is assigned the value "x", this error would be displayed: &lt;MyTask Count="x" /&gt;</note>
-      </trans-unit>
-      <trans-unit id="InvalidToolsetValueInConfigFileValue">
-        <source>MSB4137: Invalid value specified in the configuration file at "{0}". Property name or tools version name is an empty string.</source>
-        <target state="new">MSB4137: Invalid value specified in the configuration file at "{0}". Property name or tools version name is an empty string.</target>
-        <note>{StrBegin="MSB4137: "}</note>
-      </trans-unit>
-      <trans-unit id="InvalidVerbosity">
-        <source>MSB4103: "{0}" is not a valid logger verbosity level.</source>
-        <target state="new">MSB4103: "{0}" is not a valid logger verbosity level.</target>
-        <note>{StrBegin="MSB4103: "}</note>
-      </trans-unit>
-      <trans-unit id="ItemDefinitionGroupNotLegalInsideTarget">
-        <source>MSB4163: &lt;ItemDefinitionGroup&gt; is not allowed inside a target.</source>
-        <target state="new">MSB4163: &lt;ItemDefinitionGroup&gt; is not allowed inside a target.</target>
-        <note>{StrBegin="MSB4163: "}</note>
-      </trans-unit>
-      <trans-unit id="ItemDoesNotBelongToItemGroup">
-        <source>The specified item does not belong to the current item group.</source>
-        <target state="new">The specified item does not belong to the current item group.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ItemDoesNotContainValueForUnqualifiedMetadata">
-        <source>MSB4096: The item "{0}" in item list "{1}" does not define a value for metadata "{2}".  In order to use this metadata, either qualify it by specifying %({1}.{2}), or ensure that all items in this list define a value for this metadata.</source>
-        <target state="new">MSB4096: The item "{0}" in item list "{1}" does not define a value for metadata "{2}".  In order to use this metadata, either qualify it by specifying %({1}.{2}), or ensure that all items in this list define a value for this metadata.</target>
-        <note>{StrBegin="MSB4096: "}</note>
-      </trans-unit>
-      <trans-unit id="ItemListNotAllowedInThisConditional">
-        <source>MSB4099: A reference to an item list at position {1} is not allowed in this condition "{0}".</source>
-        <target state="new">MSB4099: A reference to an item list at position {1} is not allowed in this condition "{0}".</target>
-        <note>{StrBegin="MSB4099: "}</note>
-      </trans-unit>
-      <trans-unit id="ItemSpecModifierCannotBeCustomMetadata">
-        <source>MSB4033: "{0}" is a reserved item metadata, and cannot be redefined as a custom metadata on the item.</source>
-        <target state="new">MSB4033: "{0}" is a reserved item metadata, and cannot be redefined as a custom metadata on the item.</target>
-        <note>{StrBegin="MSB4033: "}</note>
-      </trans-unit>
-      <trans-unit id="InternalLoggerExceptionOnlyThrownByEngine">
-        <source>An InternalLoggerException can only be thrown by the MSBuild engine. The public constructors of this class cannot be used to create an instance of the exception.</source>
-        <target state="new">An InternalLoggerException can only be thrown by the MSBuild engine. The public constructors of this class cannot be used to create an instance of the exception.</target>
-        <note>UE: This message is shown when a user tries to instantiate a special exception called InternalLoggerException through the OM --
-    only the engine is allowed to create and throw this exception.
-    LOCALIZATION: "InternalLoggerException" and "MSBuild" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="ItemListHeader">
-        <source>Initial Items:</source>
-        <target state="new">Initial Items:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="MissingCondition">
-        <source>MSB4083: Expected a Condition attribute on element "{0}".</source>
-        <target state="new">MSB4083: Expected a Condition attribute on element "{0}".</target>
-        <note>{StrBegin="MSB4083: "}</note>
-      </trans-unit>
-      <trans-unit id="MetadataDefinitionCannotContainItemVectorExpression">
-        <source>MSB4164: The value "{0}" of metadata "{1}" contains an item list expression. Item list expressions are not allowed on default metadata values.</source>
-        <target state="new">MSB4164: The value "{0}" of metadata "{1}" contains an item list expression. Item list expressions are not allowed on default metadata values.</target>
-        <note>{StrBegin="MSB4164: "}</note>
-      </trans-unit>
-      <trans-unit id="MissingProject">
-        <source>MSBuild is expecting a valid "{0}" object.</source>
-        <target state="new">MSBuild is expecting a valid "{0}" object.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="MissingRequiredAttribute">
-        <source>MSB4035: The required attribute "{0}" is missing from element &lt;{1}&gt;.</source>
-        <target state="new">MSB4035: The required attribute "{0}" is missing from element &lt;{1}&gt;.</target>
-        <note>{StrBegin="MSB4035: "}UE: This message is shown when a user leaves off a required attribute from a project element
-    e.g. &lt;UsingTask AssemblyName="foo"&gt; -- this is missing the "TaskName" attribute.</note>
-      </trans-unit>
-      <trans-unit id="MissingTaskError">
-        <source>MSB4036: The "{0}" task was not found. Check the following: 1.) The name of the task in the project file is the same as the name of the task class. 2.) The task class is "public" and implements the Microsoft.Build.Framework.ITask interface. 3.) The task is correctly declared with &lt;UsingTask&gt; in the project file, or in the *.tasks files located in the "{1}" directory.</source>
-        <target state="new">MSB4036: The "{0}" task was not found. Check the following: 1.) The name of the task in the project file is the same as the name of the task class. 2.) The task class is "public" and implements the Microsoft.Build.Framework.ITask interface. 3.) The task is correctly declared with &lt;UsingTask&gt; in the project file, or in the *.tasks files located in the "{1}" directory.</target>
-        <note>{StrBegin="MSB4036: "}LOCALIZATION: &lt;UsingTask&gt; and "*.tasks" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="MSBuildToolsPathIsNotSpecified">
-        <source>MSB4141: MSBuildToolsPath is not specified for the ToolsVersion "{0}" defined at "{1}", or the value specified evaluates to the empty string.</source>
-        <target state="new">MSB4141: MSBuildToolsPath is not specified for the ToolsVersion "{0}" defined at "{1}", or the value specified evaluates to the empty string.</target>
-        <note>{StrBegin="MSB4141: "}</note>
-      </trans-unit>
-      <trans-unit id="MSBuildVersionAttributeDeprecated">
-        <source>MSB4031: The "MSBuildVersion" attribute is deprecated. If the project is authored in the MSBuild 2003 format, please remove the attribute from the &lt;Project&gt; tag. If the project has been authored in the old 1.0 or 1.2 format, please convert it to MSBuild 2003 format.</source>
-        <target state="new">MSB4031: The "MSBuildVersion" attribute is deprecated. If the project is authored in the MSBuild 2003 format, please remove the attribute from the &lt;Project&gt; tag. If the project has been authored in the old 1.0 or 1.2 format, please convert it to MSBuild 2003 format.</target>
-        <note>{StrBegin="MSB4031: "}UE: This message is shown for projects that still contain the "MSBuildVersion" attribute in their &lt;Project&gt;
-    tag. We no longer need this attribute because the project's XML namespace (i.e. the "xmlns" attribute) gives us all the
-    version information we need.
-    LOCALIZATION: "MSBuild", "MSBuildVersion" and &lt;Project&gt; should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="MultipleDefinitionsForSameToolset">
-        <source>MSB4144: Multiple definitions were found for the toolset "{0}". </source>
-        <target state="new">MSB4144: Multiple definitions were found for the toolset "{0}". </target>
-        <note>{StrBegin="MSB4144: "}</note>
-      </trans-unit>
-      <trans-unit id="MultipleDefinitionsForSameProperty">
-        <source>MSB4145: Multiple definitions were found for the property "{0}".</source>
-        <target state="new">MSB4145: Multiple definitions were found for the property "{0}".</target>
-        <note>{StrBegin="MSB4145: "}</note>
-      </trans-unit>
-      <trans-unit id="MultipleOtherwise">
-        <source>MSB4082: Choose has more than one &lt;Otherwise&gt; element.</source>
-        <target state="new">MSB4082: Choose has more than one &lt;Otherwise&gt; element.</target>
-        <note>{StrBegin="MSB4082: "}</note>
-      </trans-unit>
-      <trans-unit id="NeedPersistedPropertyGroup">
-        <source>This method is only valid for persisted &lt;{0}&gt; elements.</source>
-        <target state="new">This method is only valid for persisted &lt;{0}&gt; elements.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="NeedVirtualPropertyGroup">
-        <source>This method is only valid for virtual property groups, not &lt;{0}&gt; elements.</source>
-        <target state="new">This method is only valid for virtual property groups, not &lt;{0}&gt; elements.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="NodeMustBeLastUnderElement">
-        <source>MSB4038: The element &lt;{0}&gt; must be last under element &lt;{1}&gt;. Found element &lt;{2}&gt; instead.</source>
-        <target state="new">MSB4038: The element &lt;{0}&gt; must be last under element &lt;{1}&gt;. Found element &lt;{2}&gt; instead.</target>
-        <note>{StrBegin="MSB4038: "}</note>
-      </trans-unit>
-      <trans-unit id="NonStringDataInRegistry">
-        <source>MSB4138: Non-string data was specified at the registry location "{0}".</source>
-        <target state="new">MSB4138: Non-string data was specified at the registry location "{0}".</target>
-        <note>{StrBegin="MSB4138: "}</note>
-      </trans-unit>
-      <trans-unit id="NoRootProjectElement">
-        <source>MSB4039: No "{0}" element was found in the project file.</source>
-        <target state="new">MSB4039: No "{0}" element was found in the project file.</target>
-        <note>{StrBegin="MSB4039: "}</note>
-      </trans-unit>
-      <trans-unit id="NoTargetSpecified">
-        <source>MSB4040: There is no target in the project.</source>
-        <target state="new">MSB4040: There is no target in the project.</target>
-        <note>{StrBegin="MSB4040: "}</note>
-      </trans-unit>
-      <trans-unit id="NullIncludeNotAllowed">
-        <source>Removing the "{0}" attribute of an item is not allowed.</source>
-        <target state="new">Removing the "{0}" attribute of an item is not allowed.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ObjectIsNotInProject">
-        <source>The object passed in is not part of the project.</source>
-        <target state="new">The object passed in is not part of the project.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="OverridingTarget">
-        <source>Overriding target "{0}" in project "{1}" with target "{2}" from project "{3}".</source>
-        <target state="new">Overriding target "{0}" in project "{1}" with target "{2}" from project "{3}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ParentProcessUnexpectedlyDied">
-        <source>MSB4167: The parent process unexpectedly exited. Shutting down child node "{0}".</source>
-        <target state="new">MSB4167: The parent process unexpectedly exited. Shutting down child node "{0}".</target>
-        <note>{StrBegin="MSB4167: "}</note>
-      </trans-unit>
-      <trans-unit id="PerformanceLine">
-        <source>{0} ms  {1} {2} calls</source>
-        <target state="new">{0} ms  {1} {2} calls</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="PerformanceReentrancyNote">
-        <source>(* = timing was not recorded because of reentrancy)</source>
-        <target state="new">(* = timing was not recorded because of reentrancy)</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectInvalidUnloaded">
-        <source>This project object has been unloaded from the MSBuild engine and is no longer valid.</source>
-        <target state="new">This project object has been unloaded from the MSBuild engine and is no longer valid.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectFileNotFound">
-        <source>The project file "{0}" was not found.</source>
-        <target state="new">The project file "{0}" was not found.</target>
-        <note>UE: This message is shown when the user calls into the OM to build a project that doesn't exist on disk.</note>
-      </trans-unit>
-      <trans-unit id="ProjectFinishedFailure">
-        <source>Done building project "{0}" -- FAILED.</source>
-        <target state="new">Done building project "{0}" -- FAILED.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectFinishedSuccess">
-        <source>Done building project "{0}".</source>
-        <target state="new">Done building project "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectMustBeInMSBuildXmlNamespace">
-        <source>MSB4041: The default XML namespace of the project must be the MSBuild XML namespace. If the project is authored in the MSBuild 2003 format, please add xmlns="{0}" to the &lt;Project&gt; element. If the project has been authored in the old 1.0 or 1.2 format, please convert it to MSBuild 2003 format.</source>
-        <target state="new">MSB4041: The default XML namespace of the project must be the MSBuild XML namespace. If the project is authored in the MSBuild 2003 format, please add xmlns="{0}" to the &lt;Project&gt; element. If the project has been authored in the old 1.0 or 1.2 format, please convert it to MSBuild 2003 format.</target>
-        <note>{StrBegin="MSB4041: "}UE: This is a Beta 1 message only.
-    LOCALIZATION: &lt;Project&gt;, "MSBuild" and "xmlns" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="ProjectPerformanceSummary">
-        <source>Project Performance Summary:</source>
-        <target state="new">Project Performance Summary:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectSchemaErrorHalt">
-        <source>MSB4042: Stopping because of syntax errors in project file.</source>
-        <target state="new">MSB4042: Stopping because of syntax errors in project file.</target>
-        <note>{StrBegin="MSB4042: "}</note>
-      </trans-unit>
-      <trans-unit id="ProjectStartedPrefixForNestedProjectWithTargetNames">
-        <source>Project "{0}" is building "{1}" ({2} target(s)):</source>
-        <target state="new">Project "{0}" is building "{1}" ({2} target(s)):</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectStartedPrefixForNestedProjectWithDefaultTargets">
-        <source>Project "{0}" is building "{1}" (default targets):</source>
-        <target state="new">Project "{0}" is building "{1}" (default targets):</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectStartedPrefixForTopLevelProjectWithTargetNames">
-        <source>Project "{0}" ({1} target(s)):</source>
-        <target state="new">Project "{0}" ({1} target(s)):</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectStartedPrefixForTopLevelProjectWithDefaultTargets">
-        <source>Project "{0}" (default targets):</source>
-        <target state="new">Project "{0}" (default targets):</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectFinishedPrefixWithTargetNamesMultiProc">
-        <source>Done Building Project "{0}" ({1} target(s)).</source>
-        <target state="new">Done Building Project "{0}" ({1} target(s)).</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectFinishedPrefixWithDefaultTargetsMultiProc">
-        <source>Done Building Project "{0}" (default targets).</source>
-        <target state="new">Done Building Project "{0}" (default targets).</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectFinishedPrefixWithTargetNamesMultiProcFailed">
-        <source>Done Building Project "{0}" ({1} target(s)) -- FAILED.</source>
-        <target state="new">Done Building Project "{0}" ({1} target(s)) -- FAILED.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectFinishedPrefixWithDefaultTargetsMultiProcFailed">
-        <source>Done Building Project "{0}" (default targets) -- FAILED.</source>
-        <target state="new">Done Building Project "{0}" (default targets) -- FAILED.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectUpgradeNeeded">
-        <source>MSB4075: The project file must be opened in the Visual Studio IDE and converted to the latest version before it can be built by MSBuild.</source>
-        <target state="new">MSB4075: The project file must be opened in the Visual Studio IDE and converted to the latest version before it can be built by MSBuild.</target>
-        <note>{StrBegin="MSB4075: "}</note>
-      </trans-unit>
-      <trans-unit id="ProjectUpgradeNeededToVcxProj">
-        <source>MSB4192: The project file "{0}" is in the ".vcproj" file format, which MSBuild no longer supports. Please convert the project by opening it in the Visual Studio IDE or running the conversion tool, or use MSBuild 3.5 or earlier to build it.</source>
-        <target state="new">MSB4192: The project file "{0}" is in the ".vcproj" file format, which MSBuild no longer supports. Please convert the project by opening it in the Visual Studio IDE or running the conversion tool, or use MSBuild 3.5 or earlier to build it.</target>
-        <note>{StrBegin="MSB4192: "} LOC: ".vcproj" should not be localized</note>
-      </trans-unit>
-      <trans-unit id="PropertyDoesNotBelongToPropertyGroup">
-        <source>The specified property does not belong to the current property group.</source>
-        <target state="new">The specified property does not belong to the current property group.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="PropertyListHeader">
-        <source>Initial Properties:</source>
-        <target state="new">Initial Properties:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="PropertyNameInRegistryHasZeroLength">
-        <source>MSB4148: The name of a property stored under the registry key "{0}" has zero length.</source>
-        <target state="new">MSB4148: The name of a property stored under the registry key "{0}" has zero length.</target>
-        <note>{StrBegin="MSB4148: "}</note>
-      </trans-unit>
-      <trans-unit id="PropertyNamesDoNotMatch">
-        <source>The property names in the indexer and the "{0}" object do not match.</source>
-        <target state="new">The property names in the indexer and the "{0}" object do not match.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="QualifiedMetadataInTransformNotAllowed">
-        <source>MSB4043: The item metadata reference "{0}" is invalid because it is qualified with an item name. Item metadata referenced in transforms do not need to be qualified, because the item name is automatically deduced from the items being transformed. Change "{0}" to "%({1})".</source>
-        <target state="new">MSB4043: The item metadata reference "{0}" is invalid because it is qualified with an item name. Item metadata referenced in transforms do not need to be qualified, because the item name is automatically deduced from the items being transformed. Change "{0}" to "%({1})".</target>
-        <note>{StrBegin="MSB4043: "}UE: This message is shown when the user does something like this: @(foo-&gt;'%(foo.metadata)'). There is no need to specify
-    "foo.metadata", because "foo" is automatically deduced. In corollary, "bar.metadata" is not allowed either, where "bar" is a different
-    item list type.</note>
-      </trans-unit>
-      <trans-unit id="RegistryReadError">
-        <source>MSB4135: Error reading the toolset information from the registry location "{0}". {1}</source>
-        <target state="new">MSB4135: Error reading the toolset information from the registry location "{0}". {1}</target>
-        <note>{StrBegin="MSB4135: "}</note>
-      </trans-unit>
-      <trans-unit id="RequiredPropertyNotSetError">
-        <source>MSB4044: The "{0}" task was not given a value for the required parameter "{1}".</source>
-        <target state="new">MSB4044: The "{0}" task was not given a value for the required parameter "{1}".</target>
-        <note>{StrBegin="MSB4044: "}UE: This message is shown when a task parameter designated as "required" is not set in the project file.</note>
-      </trans-unit>
-      <trans-unit id="SchemaFileLocation">
-        <source>Validating project using schema file "{0}".</source>
-        <target state="new">Validating project using schema file "{0}".</target>
-        <note>LOCALIZATION: "{0}" is the location of the schema file.</note>
-      </trans-unit>
-      <trans-unit id="SchemaValidationError">
-        <source>MSB4045: Project is not valid. {0}</source>
-        <target state="new">MSB4045: Project is not valid. {0}</target>
-        <note>{StrBegin="MSB4045: "}UE: This error is shown when the user asks his project to be validated against a schema (/val switch for
-    MSBuild.exe), and the project has errors. "{0}" contains a message explaining the problem.
-    LOCALIZATION: "{0}" is a message from the System.XML schema validator and is already localized.</note>
-      </trans-unit>
-      <trans-unit id="SecurityProjectBuildDisabled">
-        <source>MSB4112: The targets in this project have been disabled by the host and therefore cannot be built at this time. This may have been done for security reasons. To enable the targets, the host must set Project.BuildEnabled to "true".</source>
-        <target state="new">MSB4112: The targets in this project have been disabled by the host and therefore cannot be built at this time. This may have been done for security reasons. To enable the targets, the host must set Project.BuildEnabled to "true".</target>
-        <note>{StrBegin="MSB4112: "}</note>
-      </trans-unit>
-      <trans-unit id="SetAccessorNotAvailableOnTaskParameter">
-        <source>MSB4093: The "{0}" parameter of the "{1}" task cannot be written to because it does not have a "set" accessor.</source>
-        <target state="new">MSB4093: The "{0}" parameter of the "{1}" task cannot be written to because it does not have a "set" accessor.</target>
-        <note>{StrBegin="MSB4093: "}UE: This error is shown when a project tries to assign a value to a task parameter that does not have a "set"
-    accessor on the corresponding .NET property on the task class.</note>
-      </trans-unit>
-      <trans-unit id="ShallowCloneNotAllowed">
-        <source>A shallow clone of this object cannot be created.</source>
-        <target state="new">A shallow clone of this object cannot be created.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SkipTargetBecauseNoInputs">
-        <source>Skipping target "{0}" because it has no inputs.</source>
-        <target state="new">Skipping target "{0}" because it has no inputs.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SkipTargetBecauseNoInputsDetail">
-        <source>Though the target has declared its inputs, the input specification only references empty properties and/or empty item lists.</source>
-        <target state="new">Though the target has declared its inputs, the input specification only references empty properties and/or empty item lists.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SkipTargetBecauseNoOutputs">
-        <source>Skipping target "{0}" because it has no outputs.</source>
-        <target state="new">Skipping target "{0}" because it has no outputs.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SkipTargetBecauseNoOutputsDetail">
-        <source>Though the target has declared its outputs, the output specification only references empty properties and/or empty item lists.</source>
-        <target state="new">Though the target has declared its outputs, the output specification only references empty properties and/or empty item lists.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SkipTargetBecauseOutputsUpToDate">
-        <source>Skipping target "{0}" because all output files are up-to-date with respect to the input files.</source>
-        <target state="new">Skipping target "{0}" because all output files are up-to-date with respect to the input files.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SkipTargetUpToDateInputs">
-        <source>Input files: {0}</source>
-        <target state="new">Input files: {0}</target>
-        <note>{0} is a semicolon-separated list of filenames.</note>
-      </trans-unit>
-      <trans-unit id="SkipTargetUpToDateOutputs">
-        <source>Output files: {0}</source>
-        <target state="new">Output files: {0}</target>
-        <note>{0} is a semicolon-separated list of filenames.</note>
-      </trans-unit>
-      <trans-unit id="SolutionBuildingSolutionConfiguration">
-        <source>Building solution configuration "{0}".</source>
-        <target state="new">Building solution configuration "{0}".</target>
-        <note>UE: This is not an error, so doesn't need an error code.</note>
-      </trans-unit>
-      <trans-unit id="SolutionCacheBeingUsed">
-        <source>Using solution cache file "{0}" for configuration "{1}" and tools version "{2}".</source>
-        <target state="new">Using solution cache file "{0}" for configuration "{1}" and tools version "{2}".</target>
-        <note>UE: This is not an error, so doesn't need an error code.</note>
-      </trans-unit>
-      <trans-unit id="SolutionCacheReadError">
-        <source>Failed to read solution cache file "{0}". {1} Using solution file directly.</source>
-        <target state="new">Failed to read solution cache file "{0}". {1} Using solution file directly.</target>
-        <note>UE: This is not a true error, so doesn't need an error code.</note>
-      </trans-unit>
-      <trans-unit id="SolutionCacheWriteError">
-        <source>Failed to write solution cache file "{0}". {1}</source>
-        <target state="new">Failed to write solution cache file "{0}". {1}</target>
-        <note>UE: This is not a true error, so doesn't need an error code.</note>
-      </trans-unit>
-      <trans-unit id="SolutionCacheNotApplicable">
-        <source>Solution cache file was created for a "{0}" value of "{1}" but the current value is "{2}". Refreshing cache file.</source>
-        <target state="new">Solution cache file was created for a "{0}" value of "{1}" but the current value is "{2}". Refreshing cache file.</target>
-        <note>UE: This is not an error, so doesn't need an error code.</note>
-      </trans-unit>
-      <trans-unit id="SolutionCacheNotApplicableDueToCacheVersion">
-        <source>Solution cache file has an internal version number "{0}" but the current value is "{1}". Refreshing cache file.</source>
-        <target state="new">Solution cache file has an internal version number "{0}" but the current value is "{1}". Refreshing cache file.</target>
-        <note>UE: This is not an error, so doesn't need an error code.</note>
-      </trans-unit>
-      <trans-unit id="SolutionCacheOutOfDate">
-        <source>Solution cache file is out of date. Refreshing cache file. {0}</source>
-        <target state="new">Solution cache file is out of date. Refreshing cache file. {0}</target>
-        <note>UE: This is not an error, so doesn't need an error code.</note>
-      </trans-unit>
-      <trans-unit id="SolutionCircularDependencyError">
-        <source>MSB4160: A circular dependency involving project "{0}" has been detected.</source>
-        <target state="new">MSB4160: A circular dependency involving project "{0}" has been detected.</target>
-        <note>{StrBegin="MSB4160: "}</note>
-      </trans-unit>
-      <trans-unit id="SolutionInvalidSolutionConfiguration">
-        <source>MSB4126: The specified solution configuration "{0}" is invalid. Please specify a valid solution configuration using the Configuration and Platform properties (e.g. MSBuild.exe Solution.sln /p:Configuration=Debug /p:Platform="Any CPU") or leave those properties blank to use the default solution configuration.</source>
-        <target state="new">MSB4126: The specified solution configuration "{0}" is invalid. Please specify a valid solution configuration using the Configuration and Platform properties (e.g. MSBuild.exe Solution.sln /p:Configuration=Debug /p:Platform="Any CPU") or leave those properties blank to use the default solution configuration.</target>
-        <note>{StrBegin="MSB4126: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseErrorReadingProject">
-        <source>MSB4046: Error reading project file "{0}": {1}</source>
-        <target state="new">MSB4046: Error reading project file "{0}": {1}</target>
-        <note>{StrBegin="MSB4046: "}</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseInvalidProjectFileName">
-        <source>MSB4125: The project file name "{0}" is invalid. {1}</source>
-        <target state="new">MSB4125: The project file name "{0}" is invalid. {1}</target>
-        <note>{StrBegin="MSB4125: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseProjectDepNotFoundError">
-        <source>MSB4051: Project {0} is referencing a project with GUID {1}, but a project with this GUID was not found in the .SLN file.</source>
-        <target state="new">MSB4051: Project {0} is referencing a project with GUID {1}, but a project with this GUID was not found in the .SLN file.</target>
-        <note>{StrBegin="MSB4051: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseUnknownProjectType">
-        <source>MSB4078: The project file "{0}" is not supported by MSBuild and cannot be built.</source>
-        <target state="new">MSB4078: The project file "{0}" is not supported by MSBuild and cannot be built.</target>
-        <note>{StrBegin="MSB4078: "}</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseUpgradeNeeded">
-        <source>MSB4054: The solution file must be opened in the Visual Studio IDE and converted to the latest version before it can be built by MSBuild.</source>
-        <target state="new">MSB4054: The solution file must be opened in the Visual Studio IDE and converted to the latest version before it can be built by MSBuild.</target>
-        <note>{StrBegin="MSB4054: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionProjectConfigurationMissing">
-        <source>MSB4121: The project configuration for project "{0}" was not specified in the solution file for the solution configuration "{1}".</source>
-        <target state="new">MSB4121: The project configuration for project "{0}" was not specified in the solution file for the solution configuration "{1}".</target>
-        <note>{StrBegin="MSB4121: "}</note>
-      </trans-unit>
-      <trans-unit id="SolutionProjectSkippedForBuilding">
-        <source>The project "{0}" is not selected for building in solution configuration "{1}".</source>
-        <target state="new">The project "{0}" is not selected for building in solution configuration "{1}".</target>
-        <note>
-      UE: This is not an error, so doesn't need an error code.
-    </note>
-      </trans-unit>
-      <trans-unit id="SolutionScanProjectDependenciesFailed">
-        <source>MSB4122: Scanning project dependencies for project "{0}" failed. {1}</source>
-        <target state="new">MSB4122: Scanning project dependencies for project "{0}" failed. {1}</target>
-        <note>{StrBegin="MSB4122: "}</note>
-      </trans-unit>
-      <trans-unit id="SolutionToolsVersionDoesNotSupportProjectToolsVersion">
-        <source>MSB4149: The tools version "{0}" of the solution does not support building projects with a different tools version.</source>
-        <target state="new">MSB4149: The tools version "{0}" of the solution does not support building projects with a different tools version.</target>
-        <note>{StrBegin="MSB4149: "}</note>
-      </trans-unit>
-      <trans-unit id="SolutionVenusProjectNoClean">
-        <source>Web projects do not support the "Clean" target.  Continuing with remaining projects ...</source>
-        <target state="new">Web projects do not support the "Clean" target.  Continuing with remaining projects ...</target>
-        <note>UE: This is not an error, so doesn't need an error code.
-    LOCALIZATION: Do not localize "Clean".</note>
-      </trans-unit>
-      <trans-unit id="SolutionVenusProjectNoPublish">
-        <source>Web projects do not support the "Publish" target.  Continuing with remaining projects ...</source>
-        <target state="new">Web projects do not support the "Publish" target.  Continuing with remaining projects ...</target>
-        <note>UE: This is not an error, so doesn't need an error code.
-    LOCALIZATION: Do not localize "Publish".</note>
-      </trans-unit>
-      <trans-unit id="SolutionVenusProjectSkipped">
-        <source>Skipping because the "$(AspNetConfiguration)" configuration is not supported for this web project.  You can use the AspNetConfiguration property to override the configuration used for building web projects, by adding /p:AspNetConfiguration=&lt;value&gt; to the command line. Currently web projects only support Debug and Release configurations.</source>
-        <target state="new">Skipping because the "$(AspNetConfiguration)" configuration is not supported for this web project.  You can use the AspNetConfiguration property to override the configuration used for building web projects, by adding /p:AspNetConfiguration=&lt;value&gt; to the command line. Currently web projects only support Debug and Release configurations.</target>
-        <note>
-    UE: This is not an error, so doesn't need an error code.
-    LOCALIZATION: Do NOT localize "AspNetConfiguration", "Debug", "Release".
-    </note>
-      </trans-unit>
-      <trans-unit id="SolutionVCProjectNoPublish">
-        <source>MSB4076: VC projects do not support the "Publish" target.</source>
-        <target state="new">MSB4076: VC projects do not support the "Publish" target.</target>
-        <note>{StrBegin="MSB4076: "}LOCALIZATION: Do not localize "Publish".</note>
-      </trans-unit>
-      <trans-unit id="StandaloneVCProjectP2PRefsBroken">
-        <source>MSB4098: MSBuild is invoking VCBuild to build this project. Project-to-project references between VC++ projects (.VCPROJ) and C#/VB/VJ# projects (.CSPROJ, .VBPROJ, .VJSPROJ) are not supported by the command-line build systems when building stand-alone VC++ projects. Projects that contain such project-to-project references will fail to build. Please build the solution file containing this project instead.</source>
-        <target state="new">MSB4098: MSBuild is invoking VCBuild to build this project. Project-to-project references between VC++ projects (.VCPROJ) and C#/VB/VJ# projects (.CSPROJ, .VBPROJ, .VJSPROJ) are not supported by the command-line build systems when building stand-alone VC++ projects. Projects that contain such project-to-project references will fail to build. Please build the solution file containing this project instead.</target>
-        <note>{StrBegin="MSB4098: "}</note>
-      </trans-unit>
-      <trans-unit id="STARequired">
-        <source>MSB4056: The MSBuild engine must be called on a single-threaded-apartment. Current threading model is "{0}". Proceeding, but some tasks may not function correctly.</source>
-        <target state="new">MSB4056: The MSBuild engine must be called on a single-threaded-apartment. Current threading model is "{0}". Proceeding, but some tasks may not function correctly.</target>
-        <note>{StrBegin="MSB4056: "}</note>
-      </trans-unit>
-      <trans-unit id="SubCategoryForSchemaValidationErrors">
-        <source>Schema validation</source>
-        <target state="new">Schema validation</target>
-        <note>UE: this fragment is used to describe errors that are caused by schema validation. For example, if a normal error is
-    displayed like this: "MSBUILD : error MSB0000: This is an error.", then an error from schema validation would look like this:
-    "MSBUILD : Schema validation error MSB0000: This is an error."
-    LOCALIZATION: This fragment needs to be localized.</note>
-      </trans-unit>
-      <trans-unit id="TargetAlreadyCompleteFailure">
-        <source>Target "{0}" skipped. Previously built unsuccessfully.</source>
-        <target state="new">Target "{0}" skipped. Previously built unsuccessfully.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TargetAlreadyCompleteSuccess">
-        <source>Target "{0}" skipped. Previously built successfully.</source>
-        <target state="new">Target "{0}" skipped. Previously built successfully.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TargetConditionHasInvalidMetadataReference">
-        <source>MSB4116: The condition "{1}" on the "{0}" target has a reference to item metadata. References to item metadata are not allowed in target conditions unless they are part of an item transform.</source>
-        <target state="new">MSB4116: The condition "{1}" on the "{0}" target has a reference to item metadata. References to item metadata are not allowed in target conditions unless they are part of an item transform.</target>
-        <note>{StrBegin="MSB4116: "}</note>
-      </trans-unit>
-      <trans-unit id="TargetDoesNotExist">
-        <source>MSB4057: The target "{0}" does not exist in the project.</source>
-        <target state="new">MSB4057: The target "{0}" does not exist in the project.</target>
-        <note>{StrBegin="MSB4057: "}</note>
-      </trans-unit>
-      <trans-unit id="TargetFinishedFailure">
-        <source>Done building target "{0}" in project "{1}" -- FAILED.</source>
-        <target state="new">Done building target "{0}" in project "{1}" -- FAILED.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TargetFinishedSuccess">
-        <source>Done building target "{0}" in project "{1}".</source>
-        <target state="new">Done building target "{0}" in project "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TargetMessageWithId">
-        <source>{0}: (TargetId:{1})</source>
-        <target state="new">{0}: (TargetId:{1})</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TargetInputsSpecifiedWithoutOutputs">
-        <source>MSB4058: The "{0}" target is missing its output specification. If a target declares inputs, it must also declare outputs.</source>
-        <target state="new">MSB4058: The "{0}" target is missing its output specification. If a target declares inputs, it must also declare outputs.</target>
-        <note>{StrBegin="MSB4058: "}</note>
-      </trans-unit>
-      <trans-unit id="TargetOutputsSpecifiedAreMissing">
-        <source>MSB4168: The item "{0}" of type "{1}" does not define a value for the metadata in the expression "{2}". This expression is used in the target output for target "{3}". If a target declares outputs that are transforms, all items in the transform must have a value for the metadata in the transform.</source>
-        <target state="new">MSB4168: The item "{0}" of type "{1}" does not define a value for the metadata in the expression "{2}". This expression is used in the target output for target "{3}". If a target declares outputs that are transforms, all items in the transform must have a value for the metadata in the transform.</target>
-        <note>{StrBegin="MSB4168: "}</note>
-      </trans-unit>
-      <trans-unit id="TargetPerformanceSummary">
-        <source>Target Performance Summary:</source>
-        <target state="new">Target Performance Summary:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TargetSkippedFalseCondition">
-        <source>Target "{0}" skipped, due to false condition; ({1}) was evaluated as ({2}).</source>
-        <target state="new">Target "{0}" skipped, due to false condition; ({1}) was evaluated as ({2}).</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TargetStarted">
-        <source>Target "{0}" in project "{1}"</source>
-        <target state="new">Target "{0}" in project "{1}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TargetStartedPrefix">
-        <source>Target {0}:</source>
-        <target state="new">Target {0}:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TargetStartedFromFile">
-        <source>Target "{0}" in file "{1}":</source>
-        <target state="new">Target "{0}" in file "{1}":</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TaskContinuedDueToContinueOnError">
-        <source>Build continuing because "{0}" on the task "{1}" is set to "{2}".</source>
-        <target state="new">Build continuing because "{0}" on the task "{1}" is set to "{2}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TargetStartedPrefixInProject">
-        <source>Target {0} from project "{1}":</source>
-        <target state="new">Target {0} from project "{1}":</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TargetStartedFromFileInProject">
-        <source>Target "{0}" in file "{1}" from project "{2}":</source>
-        <target state="new">Target "{0}" in file "{1}" from project "{2}":</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TaskDeclarationOrUsageError">
-        <source>MSB4060: The "{0}" task has been declared or used incorrectly, or failed during construction. Check the spelling of the task name and the assembly name.</source>
-        <target state="new">MSB4060: The "{0}" task has been declared or used incorrectly, or failed during construction. Check the spelling of the task name and the assembly name.</target>
-        <note>{StrBegin="MSB4060: "}</note>
-      </trans-unit>
-      <trans-unit id="TaskNotMarshalByRef">
-        <source>MSB4077: The "{0}" task has been marked with the attribute LoadInSeparateAppDomain, but does not derive from MarshalByRefObject. Check that the task derives from MarshalByRefObject or AppDomainIsolatedTask.</source>
-        <target state="new">MSB4077: The "{0}" task has been marked with the attribute LoadInSeparateAppDomain, but does not derive from MarshalByRefObject. Check that the task derives from MarshalByRefObject or AppDomainIsolatedTask.</target>
-        <note>{StrBegin="MSB4077: "}LOCALIZATION: &lt;LoadInSeparateAppDomain&gt;, &lt;MarshalByRefObject&gt;, &lt;AppDomainIsolatedTask&gt; should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="TaskFinishedFailure">
-        <source>Done executing task "{0}" -- FAILED.</source>
-        <target state="new">Done executing task "{0}" -- FAILED.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TaskFinishedSuccess">
-        <source>Done executing task "{0}".</source>
-        <target state="new">Done executing task "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TaskMessageWithId">
-        <source>{0} (TaskId:{1})</source>
-        <target state="new">{0} (TaskId:{1})</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TaskFound">
-        <source>Using "{0}" task from assembly "{1}".</source>
-        <target state="new">Using "{0}" task from assembly "{1}".</target>
-        <note>UE: This informational message helps users determine which assemblies their tasks were loaded from.</note>
-      </trans-unit>
-      <trans-unit id="TaskInstantiationFailureError">
-        <source>MSB4061: The "{0}" task could not be instantiated from the assembly "{1}". {2}</source>
-        <target state="new">MSB4061: The "{0}" task could not be instantiated from the assembly "{1}". {2}</target>
-        <note>{StrBegin="MSB4061: "}LOCALIZATION: "{2}" is a localized message from a CLR/FX exception.</note>
-      </trans-unit>
-      <trans-unit id="TaskInstantiationFailureErrorInvalidCast">
-        <source>MSB4127: The "{0}" task could not be instantiated from the assembly "{1}". Please verify the task assembly has been built using the same version of the Microsoft.Build.Framework assembly as the one installed on your computer and that your host application is not missing a binding redirect for Microsoft.Build.Framework. {2}</source>
-        <target state="new">MSB4127: The "{0}" task could not be instantiated from the assembly "{1}". Please verify the task assembly has been built using the same version of the Microsoft.Build.Framework assembly as the one installed on your computer and that your host application is not missing a binding redirect for Microsoft.Build.Framework. {2}</target>
-        <note>{StrBegin="MSB4127: "}UE: This message is a specialized version of the TaskInstantiationFailureError message and can probably reuse some of its docs.
-      LOCALIZATION: "{2}" is a localized message from a CLR/FX exception. Also, Microsoft.Build.Framework should not be localized</note>
-      </trans-unit>
-      <trans-unit id="TaskLoadFailure">
-        <source>MSB4062: The "{0}" task could not be loaded from the assembly {1}. {2} Confirm that the &lt;UsingTask&gt; declaration is correct, and that the assembly and all its dependencies are available.</source>
-        <target state="new">MSB4062: The "{0}" task could not be loaded from the assembly {1}. {2} Confirm that the &lt;UsingTask&gt; declaration is correct, and that the assembly and all its dependencies are available.</target>
-        <note>{StrBegin="MSB4062: "}UE: This message is shown when a task cannot be loaded from its assembly for various reasons e.g. corrupt assembly,
-    invalid task declaration, disk error, etc. "{2}" contains a message explaining what happened.
-    LOCALIZATION: "{2}" is a message from the CLR loader and is already localized. Also, &lt;UsingTask&gt; should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="TaskParametersError">
-        <source>MSB4063: The "{0}" task could not be initialized with its input parameters. {1}</source>
-        <target state="new">MSB4063: The "{0}" task could not be initialized with its input parameters. {1}</target>
-        <note>{StrBegin="MSB4063: "}</note>
-      </trans-unit>
-      <trans-unit id="TaskPerformanceSummary">
-        <source>Task Performance Summary:</source>
-        <target state="new">Task Performance Summary:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TaskSkippedFalseCondition">
-        <source>Task "{0}" skipped, due to false condition; ({1}) was evaluated as ({2}).</source>
-        <target state="new">Task "{0}" skipped, due to false condition; ({1}) was evaluated as ({2}).</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TaskStarted">
-        <source>Task "{0}"</source>
-        <target state="new">Task "{0}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TimeElapsed">
-        <source>Time Elapsed {0}</source>
-        <target state="new">Time Elapsed {0}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ToolsVersionInEffectForBuild">
-        <source>Building with tools version "{0}".</source>
-        <target state="new">Building with tools version "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TreatingHigherToolsVersionAs40">
-        <source>Project file contains ToolsVersion="{0}". This toolset is unknown or missing. You may be able to resolve this by installing the appropriate .NET Framework for this toolset. Treating the project as if it had ToolsVersion="4.0".</source>
-        <target state="new">Project file contains ToolsVersion="{0}". This toolset is unknown or missing. You may be able to resolve this by installing the appropriate .NET Framework for this toolset. Treating the project as if it had ToolsVersion="4.0".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="DeferredMessages">
-        <source>Deferred Messages</source>
-        <target state="new">Deferred Messages</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="DeferredMessagesAvailiable">
-        <source>Some messages did not display because they were not associated with any ProjectStarted events. Use diagnostic verbosity to view these messages.</source>
-        <target state="new">Some messages did not display because they were not associated with any ProjectStarted events. Use diagnostic verbosity to view these messages.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="UnexpectedCharacterInCondition">
-        <source>MSB4090: Found an unexpected character '{2}' at position {1} in condition "{0}".</source>
-        <target state="new">MSB4090: Found an unexpected character '{2}' at position {1} in condition "{0}".</target>
-        <note>{StrBegin="MSB4090: "}</note>
-      </trans-unit>
-      <trans-unit id="UndefinedFunctionCall">
-        <source>MSB4091: Found a call to an undefined function "{1}" in condition "{0}".</source>
-        <target state="new">MSB4091: Found a call to an undefined function "{1}" in condition "{0}".</target>
-        <note>{StrBegin="MSB4091: "}</note>
-      </trans-unit>
-      <trans-unit id="UnexpectedTaskAttribute">
-        <source>MSB4064: The "{0}" parameter is not supported by the "{1}" task. Verify the parameter exists on the task, and it is a settable public instance property.</source>
-        <target state="new">MSB4064: The "{0}" parameter is not supported by the "{1}" task. Verify the parameter exists on the task, and it is a settable public instance property.</target>
-        <note>{StrBegin="MSB4064: "}</note>
-      </trans-unit>
-      <trans-unit id="UnexpectedTaskOutputAttribute">
-        <source>MSB4131: The "{0}" parameter is not supported by the "{1}" task. Verify the parameter exists on the task, and it is a gettable public instance property.</source>
-        <target state="new">MSB4131: The "{0}" parameter is not supported by the "{1}" task. Verify the parameter exists on the task, and it is a gettable public instance property.</target>
-        <note>{StrBegin="MSB4131: "}</note>
-      </trans-unit>
-      <trans-unit id="UnexpectedTokenInCondition">
-        <source>MSB4092: An unexpected token "{1}" was found at character position {2} in condition "{0}".</source>
-        <target state="new">MSB4092: An unexpected token "{1}" was found at character position {2} in condition "{0}".</target>
-        <note>{StrBegin="MSB4092: "}</note>
-      </trans-unit>
-      <trans-unit id="UnmarkedOutputTaskParameter">
-        <source>MSB4065: The "{0}" parameter is not marked for output by the "{1}" task.</source>
-        <target state="new">MSB4065: The "{0}" parameter is not marked for output by the "{1}" task.</target>
-        <note>{StrBegin="MSB4065: "}</note>
-      </trans-unit>
-      <trans-unit id="UnrecognizedAttribute">
-        <source>MSB4066: The attribute "{0}" in element &lt;{1}&gt; is unrecognized.</source>
-        <target state="new">MSB4066: The attribute "{0}" in element &lt;{1}&gt; is unrecognized.</target>
-        <note>{StrBegin="MSB4066: "}</note>
-      </trans-unit>
-      <trans-unit id="UnrecognizedChildElement">
-        <source>MSB4067: The element &lt;{0}&gt; beneath element &lt;{1}&gt; is unrecognized.</source>
-        <target state="new">MSB4067: The element &lt;{0}&gt; beneath element &lt;{1}&gt; is unrecognized.</target>
-        <note>{StrBegin="MSB4067: "}</note>
-      </trans-unit>
-      <trans-unit id="UnrecognizedElement">
-        <source>MSB4068: The element &lt;{0}&gt; is unrecognized, or not supported in this context.</source>
-        <target state="new">MSB4068: The element &lt;{0}&gt; is unrecognized, or not supported in this context.</target>
-        <note>{StrBegin="MSB4068: "}</note>
-      </trans-unit>
-      <trans-unit id="UnrecognizedToolsVersion">
-        <source>MSB4132: The tools version "{0}" is unrecognized.</source>
-        <target state="new">MSB4132: The tools version "{0}" is unrecognized.</target>
-        <note>{StrBegin="MSB4132: "}</note>
-      </trans-unit>
-      <trans-unit id="UnsupportedTaskParameterTypeError">
-        <source>MSB4069: The "{0}" type of the "{1}" parameter of the "{2}" task is not supported by MSBuild.</source>
-        <target state="new">MSB4069: The "{0}" type of the "{1}" parameter of the "{2}" task is not supported by MSBuild.</target>
-        <note>{StrBegin="MSB4069: "}LOCALIZATION: "MSBuild" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="UsingTaskAssemblySpecification">
-        <source>MSB4072: A &lt;{0}&gt; element must contain either the "{1}" attribute or the "{2}" attribute (but not both).</source>
-        <target state="new">MSB4072: A &lt;{0}&gt; element must contain either the "{1}" attribute or the "{2}" attribute (but not both).</target>
-        <note>{StrBegin="MSB4072: "}</note>
-      </trans-unit>
-      <trans-unit id="WarningCount">
-        <source>{0} Warning(s)</source>
-        <target state="new">{0} Warning(s)</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="WhenNotAllowedAfterOtherwise">
-        <source>MSB4084: A &lt;When&gt; element may not follow an &lt;Otherwise&gt; element in a &lt;Choose&gt;.</source>
-        <target state="new">MSB4084: A &lt;When&gt; element may not follow an &lt;Otherwise&gt; element in a &lt;Choose&gt;.</target>
-        <note>{StrBegin="MSB4084: "}</note>
-      </trans-unit>
-      <trans-unit id="cycleTraceLine">
-        <source>Target Name: "{0}" Project Name: "{1}"</source>
-        <target state="new">Target Name: "{0}" Project Name: "{1}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="cycleTraceTitle">
-        <source>Cycle trace:</source>
-        <target state="new">Cycle trace:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="MustCallInitializeBeforeApplyParameter">
-        <source>MSB4150: Must initialize the console logger using the initialize method before using ApplyParameter</source>
-        <target state="new">MSB4150: Must initialize the console logger using the initialize method before using ApplyParameter</target>
-        <note>{StrBegin="MSB4150: "}</note>
-      </trans-unit>
-      <trans-unit id="RemoteErrorDuringTaskExecution">
-        <source>MSB4151: An error occurred while building project "{0}", target "{1}". Please see innerException for detailed information.</source>
-        <target state="new">MSB4151: An error occurred while building project "{0}", target "{1}". Please see innerException for detailed information.</target>
-        <note>{StrBegin="MSB4151: "}</note>
-      </trans-unit>
-      <trans-unit id="FatalErrorOnChildNode">
-        <source>MSB4152: An error occurred on the child node "{0}" and could not be passed to the parent node. {1}</source>
-        <target state="new">MSB4152: An error occurred on the child node "{0}" and could not be passed to the parent node. {1}</target>
-        <note>{StrBegin="MSB4152: "}</note>
-      </trans-unit>
-      <trans-unit id="AttemptingToLogFromInactiveTask">
-        <source>MSB4153: A call is made on an inactive IBuildEngine interface corresponding to a task that already finished execution.</source>
-        <target state="new">MSB4153: A call is made on an inactive IBuildEngine interface corresponding to a task that already finished execution.</target>
-        <note>{StrBegin="MSB4153: "}</note>
-      </trans-unit>
-      <trans-unit id="DontForwardBuildFinished">
-        <source>MSB4154: A forwarding logger is attempting to forward BuildFinished event</source>
-        <target state="new">MSB4154: A forwarding logger is attempting to forward BuildFinished event</target>
-        <note>{StrBegin="MSB4154: "}</note>
-      </trans-unit>
-      <trans-unit id="NodeProviderFailure">
-        <source>MSB4155: There was an error while communicating with a node.</source>
-        <target state="new">MSB4155: There was an error while communicating with a node.</target>
-        <note>{StrBegin="MSB4155: "}</note>
-      </trans-unit>
-      <trans-unit id="LoggerCreationError">
-        <source>MSB1021: Cannot create an instance of the logger - {0}.</source>
-        <target state="new">MSB1021: Cannot create an instance of the logger - {0}.</target>
-        <note>{StrBegin="MSB1021: "}The error code for this message is duplicated from MSBuild.exe. </note>
-      </trans-unit>
-      <trans-unit id="LoggerNotFoundError">
-        <source>MSB1020: The logger {0} was not found. Check the following: 1.) The logger name specified is the same as the name of the logger class. 2.) The logger class is "public" and implements the Microsoft.Build.Framework.ILogger interface. 3.) The path to the logger assembly is correct, or the logger can be loaded using only the assembly name provided.</source>
-        <target state="new">MSB1020: The logger {0} was not found. Check the following: 1.) The logger name specified is the same as the name of the logger class. 2.) The logger class is "public" and implements the Microsoft.Build.Framework.ILogger interface. 3.) The path to the logger assembly is correct, or the logger can be loaded using only the assembly name provided.</target>
-        <note>{StrBegin="MSB1020: "}The error code for this message is duplicated from MSBuild.exe.</note>
-      </trans-unit>
-      <trans-unit id="DontForwardBuildStarted">
-        <source>MSB4156: A forwarding logger is attempting to forward BuildStarted event</source>
-        <target state="new">MSB4156: A forwarding logger is attempting to forward BuildStarted event</target>
-        <note>{StrBegin="MSB4156: "}</note>
-      </trans-unit>
-      <trans-unit id="ProjectStackWithTargetNames">
-        <source>"{0}" ({1} target) ({2}) -&gt;</source>
-        <target state="new">"{0}" ({1} target) ({2}) -&gt;</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectStackWithDefaultTargets">
-        <source>"{0}" (default target) ({1}) -&gt;</source>
-        <target state="new">"{0}" (default target) ({1}) -&gt;</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="BuildEventContext">
-        <source>{0} {1,5}</source>
-        <target state="new">{0} {1,5}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectStartedTopLevelProjectWithTargetNames">
-        <source>Project "{0}" on node {1} ({2} target(s)).</source>
-        <target state="new">Project "{0}" on node {1} ({2} target(s)).</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectStartedTopLevelProjectWithDefaultTargets">
-        <source>Project "{0}" on node {1} (default targets).</source>
-        <target state="new">Project "{0}" on node {1} (default targets).</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectStartedWithTargetsMultiProc">
-        <source>Project "{0}" ({1}) is building "{2}" ({3}) on node {4} ({5} target(s)).</source>
-        <target state="new">Project "{0}" ({1}) is building "{2}" ({3}) on node {4} ({5} target(s)).</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectStartedWithDefaultTargetsMultiProc">
-        <source>Project "{0}" ({1}) is building "{2}" ({3}) on node {4} (default targets).</source>
-        <target state="new">Project "{0}" ({1}) is building "{2}" ({3}) on node {4} (default targets).</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ErrorWarningInTarget">
-        <source>({0} target) -&gt; </source>
-        <target state="new">({0} target) -&gt; </target>
-        <note />
-      </trans-unit>
-      <trans-unit id="projectFilesEmpty">
-        <source>MSB4157: The array of project files needs to contain at least one value. </source>
-        <target state="new">MSB4157: The array of project files needs to contain at least one value. </target>
-        <note>{StrBegin="MSB4157: "}</note>
-      </trans-unit>
-      <trans-unit id="projectFilesEmptyElement">
-        <source>MSB4158: The project file name at element {0} is empty.</source>
-        <target state="new">MSB4158: The project file name at element {0} is empty.</target>
-        <note>{StrBegin="MSB4158: "}</note>
-      </trans-unit>
-      <trans-unit id="PropertyOutputOverridden">
-        <source>The property "{0}" with value "{1}" is being overridden by another batch. The property is now: "{2}"</source>
-        <target state="new">The property "{0}" with value "{1}" is being overridden by another batch. The property is now: "{2}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="RethrownEngineException">
-        <source>Please see inner exception for error information.</source>
-        <target state="new">Please see inner exception for error information.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ExpectedEventToBeSerializable">
-        <source>Event type "{0}" was expected to be serializable. The event was not serializable and has been ignored.</source>
-        <target state="new">Event type "{0}" was expected to be serializable. The event was not serializable and has been ignored.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="logfilePathNullOrEmpty">
-        <source>The log file path cannot be null or empty.</source>
-        <target state="new">The log file path cannot be null or empty.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ReloadingPreviouslyUnloadedProject">
-        <source>MSB4161: Project "{0}" was loaded and unloaded during the current build. Reloading a project during the build can result in errors or an inconsistent build state. Either avoid unloading project "{0}" or cache the evaluation results of target(s) "{1}" before unloading the project.</source>
-        <target state="new">MSB4161: Project "{0}" was loaded and unloaded during the current build. Reloading a project during the build can result in errors or an inconsistent build state. Either avoid unloading project "{0}" or cache the evaluation results of target(s) "{1}" before unloading the project.</target>
-        <note>{StrBegin="MSB4161: "}</note>
-      </trans-unit>
-      <trans-unit id="DefaultTargets">
-        <source>[default]</source>
-        <target state="new">[default]</target>
-        <note />
-      </trans-unit>
-    </body>
-  </file>
-</xliff>
\ No newline at end of file
diff --git a/src/Deprecated/Engine/Shared/ErrorUtilities.cs b/src/Deprecated/Engine/Shared/ErrorUtilities.cs
index 213310ce25e..1af0f4ceb05 100644
--- a/src/Deprecated/Engine/Shared/ErrorUtilities.cs
+++ b/src/Deprecated/Engine/Shared/ErrorUtilities.cs
@@ -32,7 +32,7 @@ internal static void LaunchMsBuildDebuggerOnFatalError()
         /// Puts up an assertion dialog in debug builds, and throws an exception in
         /// both debug and release builds. Since this is not a no-op in release builds,
         /// it should not be called repeatedly in performance-critical scenarios.
-        /// 
+        ///
         /// PERF WARNING: calling a method that takes a variable number of arguments
         /// is expensive, because memory is allocated for the array of arguments -- do
         /// not call this method repeatedly in performance-critical scenarios
@@ -48,7 +48,7 @@ private static void ThrowInternalError
             params object[] args
         )
         {
-            // We ignore showAssert:  we don't want to show the assert dialog no matter what. 
+            // We ignore showAssert:  we don't want to show the assert dialog no matter what.
             throw new InternalErrorException(ResourceUtilities.FormatString(unformattedMessage, args));
         }
 
@@ -243,7 +243,7 @@ object arg3
 
         /// <summary>
         /// Throws an InvalidOperationException.
-        /// 
+        ///
         /// PERF WARNING: calling a method that takes a variable number of arguments
         /// is expensive, because memory is allocated for the array of arguments -- do
         /// not call this method repeatedly in performance-critical scenarios
@@ -597,7 +597,7 @@ internal static void VerifyThrowArgumentNull(object parameter, string parameterN
         {
             if (parameter == null)
             {
-                // Most ArgumentNullException overloads append its own rather clunky multi-line message. 
+                // Most ArgumentNullException overloads append its own rather clunky multi-line message.
                 // So use the one overload that doesn't.
                 throw new ArgumentNullException(
                     ResourceUtilities.FormatResourceString(resourceName, parameterName),
diff --git a/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs b/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
index fd30818c312..bf0b4845cec 100644
--- a/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
+++ b/src/Deprecated/Engine/Shared/FrameworkLocationHelper.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.BuildEngine.Shared
     internal static class FrameworkLocationHelper
     {
         #region Private and internal members
-        
+
         /// <summary>
         /// By default when a root path is not specified we would like to use the program files directory \ reference assemblies\framework as the root location
         /// to generate the reference assembly paths from.
@@ -48,9 +48,9 @@ internal static class FrameworkLocationHelper
         internal const string fullDotNetFrameworkSdkRegistryKeyV35 = "HKEY_LOCAL_MACHINE\\" + dotNetFrameworkSdkRegistryPathV35;
         private const string dotNetFrameworkRegistryKeyV35 = dotNetFrameworkSetupRegistryPath + "\\" + dotNetFrameworkVersionFolderPrefixV35;
         internal const string dotNetFrameworkSdkInstallKeyValueV35 = "InstallationFolder";
-       
+
         internal const string dotNetFrameworkVersionFolderPrefixV35 = "v3.5"; // v3.5 is for Orcas.
-        
+
         private const string dotNetFrameworkAssemblyFoldersRegistryKeyV35 = dotNetFrameworkAssemblyFoldersRegistryPath + "\\" + dotNetFrameworkVersionFolderPrefixV35;
         private const string secondaryDotNetFrameworkSdkRegistryPathV35 = "SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows";
         internal const string secondaryDotNetFrameworkSdkInstallKeyValueV35 = "CurrentInstallFolder";
@@ -66,8 +66,7 @@ internal static class FrameworkLocationHelper
         internal const string secondaryDotNetFrameworkSdkInstallKeyValueV40 = "CurrentInstallFolder";
         private const string dotNetFrameworkRegistryKeyV40 = dotNetFrameworkSetupRegistryPath + "\\v4\\Full";
         private static readonly GetDirectories getDirectories = new GetDirectories(Directory.GetDirectories);
-        
-        
+
         private static string pathToDotNetFrameworkV11;
         internal static string PathToDotNetFrameworkV11
         {
@@ -249,13 +248,13 @@ internal static string PathToDotNetFrameworkSdkV35
                         dotNetFrameworkSdkInstallKeyValueV35);
 
                     // Because there is no longer a strong 1:1 mapping between FX versions and SDK
-                    // versions, if we're unable to locate the desired SDK version, we will try to 
+                    // versions, if we're unable to locate the desired SDK version, we will try to
                     // use whichever SDK version is installed by looking at the key pointing to the
                     // "latest" version.
                     //
-                    // This isn't ideal, but it will allow our tasks to function on any of several 
+                    // This isn't ideal, but it will allow our tasks to function on any of several
                     // related SDKs even if they don't have exactly the same versions.
-                    
+
                     if (String.IsNullOrEmpty(FrameworkLocationHelper.pathToDotNetFrameworkSdkV35))
                     {
                         FrameworkLocationHelper.pathToDotNetFrameworkSdkV35 = FindRegistryValueUnderKey(
@@ -281,11 +280,11 @@ internal static string PathToDotNetFrameworkSdkV40
                         dotNetFrameworkSdkInstallKeyValueV40);
 
                     // Because there is no longer a strong 1:1 mapping between FX versions and SDK
-                    // versions, if we're unable to locate the desired SDK version, we will try to 
+                    // versions, if we're unable to locate the desired SDK version, we will try to
                     // use whichever SDK version is installed by looking at the key pointing to the
                     // "latest" version. For example, instead of 6.0A, we might fall back to 6.0B.
                     //
-                    // This isn't ideal, but it will allow our tasks to function on any of several 
+                    // This isn't ideal, but it will allow our tasks to function on any of several
                     // related SDKs even if they don't have exactly the same versions.
 
                     if (String.IsNullOrEmpty(FrameworkLocationHelper.pathToDotNetFrameworkSdkV40))
@@ -506,7 +505,7 @@ GetDirectories getDirectories
             // The intention here is to choose the alphabetical maximum.
             string max = directories[0];
 
-            // the max.EndsWith condition: pre beta 2 versions of v3.5 have build number like v3.5.20111.  
+            // the max.EndsWith condition: pre beta 2 versions of v3.5 have build number like v3.5.20111.
             // This was removed in beta2
             // We should favor \v3.5 over \v3.5.xxxxx
             // versions previous to 2.0 have .xxxx version numbers.  3.0 and 3.5 do not.
@@ -530,7 +529,7 @@ GetDirectories getDirectories
         }
 
         #endregion
- 
+
         /// <summary>
         /// Determine the 32 bit program files directory, this is used for finding where the reference assemblies live.
         /// </summary>
@@ -549,7 +548,7 @@ internal static string GenerateProgramFiles32()
         }
 
         /// <summary>
-        /// Generate the path to the program files reference assembly location by taking in the program files special folder and then 
+        /// Generate the path to the program files reference assembly location by taking in the program files special folder and then
         /// using that path to generate the path to the reference assemblies location.
         /// </summary>
         internal static string GenerateProgramFilesReferenceAssemblyRoot()
diff --git a/src/Directory.BeforeCommon.targets b/src/Directory.BeforeCommon.targets
index 178c1e506e8..913c97b1281 100644
--- a/src/Directory.BeforeCommon.targets
+++ b/src/Directory.BeforeCommon.targets
@@ -110,7 +110,7 @@
     <DefineConstants Condition="$([MSBuild]::IsOSPlatform('windows'))">$(DefineConstants);TEST_ISWINDOWS</DefineConstants>
   </PropertyGroup>
 
-  <PropertyGroup Condition="'$(MonoBuild)' != 'true' and ($([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp1.0')) or $(TargetFramework.StartsWith('netstandard')))">
+  <PropertyGroup Condition="'$(MonoBuild)' != 'true' and ($([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETCoreApp' or $([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETStandard')">
     <NetCoreBuild>true</NetCoreBuild>
     <DefineConstants>$(DefineConstants);RUNTIME_TYPE_NETCORE</DefineConstants>
   </PropertyGroup>
@@ -124,7 +124,7 @@
     <DefineConstants>$(DefineConstants);WORKAROUND_COREFX_19110</DefineConstants>
   </PropertyGroup>
 
-  <PropertyGroup Condition="'$(TargetFramework)' == 'netcoreapp2.1' or '$(TargetFramework)' == 'net5.0'">
+  <PropertyGroup Condition="'$(TargetFramework)' == 'netcoreapp2.1' or '$(TargetFramework)' == 'net6.0'">
     <DefineConstants>$(DefineConstants);FEATURE_PIPEOPTIONS_CURRENTUSERONLY</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_NODE_REUSE</DefineConstants>
   </PropertyGroup>
diff --git a/src/Directory.Build.props b/src/Directory.Build.props
index d91dd8521f6..b0e23319446 100644
--- a/src/Directory.Build.props
+++ b/src/Directory.Build.props
@@ -32,16 +32,13 @@
     <PlatformTarget>AnyCPU</PlatformTarget>
 
     <!-- Target frameworks for Exe and unit test projects (ie projects with runtime output) -->
-    <RuntimeOutputTargetFrameworks>net5.0</RuntimeOutputTargetFrameworks>
+    <RuntimeOutputTargetFrameworks>net6.0</RuntimeOutputTargetFrameworks>
     <RuntimeOutputTargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows')) and '$(DotNetBuildFromSource)' != 'true'">$(FullFrameworkTFM);$(RuntimeOutputTargetFrameworks)</RuntimeOutputTargetFrameworks>
     <RuntimeOutputTargetFrameworks Condition="'$(MonoBuild)' == 'true'">$(FullFrameworkTFM)</RuntimeOutputTargetFrameworks>
 
     <!-- Don't automatically append target framework to output path, since we want to put the Platform Target beforehand, if it's not AnyCPU -->
     <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
 
-    <!-- Create English satellite assemblies (which shouldn't be required, but preserves previous build behavior) -->
-    <XlfLanguages>en;cs;de;es;fr;it;ja;ko;pl;pt-BR;ru;tr;zh-Hans;zh-Hant</XlfLanguages>
-
     <ErrorOnOutOfDateXlf>true</ErrorOnOutOfDateXlf>
 
     <!-- Workaround that can be removed when we update machines to 15.6.
diff --git a/src/Directory.Build.targets b/src/Directory.Build.targets
index 45bbe9dc150..be0e8112f2e 100644
--- a/src/Directory.Build.targets
+++ b/src/Directory.Build.targets
@@ -55,6 +55,8 @@
     <PackageReference Include="xunit.core" />
     <PackageReference Include="xunit.assert" />
 
+    <PackageReference Include="Microsoft.DotNet.XUnitExtensions" />
+
     <!-- Don't localize unit test projects -->
     <PackageReference Remove="XliffTasks" />
 
@@ -67,6 +69,9 @@
          PrivateAssets to keep this reference (auto-added when targeting netcoreapp*)
          from making it into our NuGet packages. -->
     <PackageReference Update="Microsoft.NETCore.App" PrivateAssets="All" />
+
+    <!-- Configure analyzer to forbid certain API calls -->
+    <AdditionalFiles Include="$(MSBuildThisFileDirectory)BannedSymbols.txt" />
   </ItemGroup>
 
   <!-- GenAPI settings -->
@@ -78,10 +83,9 @@
   <PropertyGroup Condition="'$(GenerateReferenceAssemblySource)' == 'true' and $([MSBuild]::IsOSPlatform('windows'))">
     <GenAPIAssemblyName>$(AssemblyName)</GenAPIAssemblyName>
     <GenAPIAssemblyName Condition="'$(GenAPIAssemblyName)' == ''">$(MSBuildProjectName)</GenAPIAssemblyName>
-    <GenAPIShortFrameworkIdentifier Condition="$(TargetFramework.StartsWith('net4'))">net</GenAPIShortFrameworkIdentifier>
-    <GenAPIShortFrameworkIdentifier Condition="$(TargetFramework.StartsWith('netstandard'))">netstandard</GenAPIShortFrameworkIdentifier>
-    <GenAPIShortFrameworkIdentifier Condition="$(TargetFramework.StartsWith('netcoreapp'))">netstandard</GenAPIShortFrameworkIdentifier>
-    <GenAPIShortFrameworkIdentifier Condition="$(TargetFramework.StartsWith('net5'))">netstandard</GenAPIShortFrameworkIdentifier>
+    <GenAPIShortFrameworkIdentifier Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETFramework'">net</GenAPIShortFrameworkIdentifier>
+    <GenAPIShortFrameworkIdentifier Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETStandard'">netstandard</GenAPIShortFrameworkIdentifier>
+    <GenAPIShortFrameworkIdentifier Condition="$([MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')) == '.NETCoreApp'">netstandard</GenAPIShortFrameworkIdentifier>
     <GenAPITargetPath>$(RepoRoot)ref\$(GenAPIAssemblyName)\$(GenAPIShortFrameworkIdentifier)\$(GenAPIAssemblyName).cs</GenAPITargetPath>
   </PropertyGroup>
 
@@ -100,6 +104,16 @@
              Visible="false" Pack="false"/>
   </ItemGroup>
 
+  <Target Name="SetResourceProperties" BeforeTargets="_GetEmbeddedResourcesWithSourceGeneration">
+    <ItemGroup>
+      <EmbeddedResource Update="@(EmbeddedResource)" Condition="'%(EmbeddedResource.NuGetPackageId)' == 'Microsoft.CodeAnalysis.Collections' AND '%(FileName)' == 'Strings'">
+        <GenerateSource>true</GenerateSource>
+        <Generator>MSBuild:_GenerateResxSource</Generator>
+        <ClassName>Microsoft.CodeAnalysis.Collections.SR</ClassName>
+      </EmbeddedResource>
+    </ItemGroup>
+  </Target>
+
   <!-- Override in-box GenerateSatelliteAssemblies, as we are using CoreGenerateSatelliteAssemblies instead.
        With https://github.com/Microsoft/msbuild/pull/2726 this is no longer necessary, but that change is not
        in VS 15.5 (which is what we use for Jenkins right now). -->
diff --git a/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj b/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
index b73c360d59d..2043a496e46 100644
--- a/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
+++ b/src/Framework.UnitTests/Microsoft.Build.Framework.UnitTests.csproj
@@ -1,4 +1,4 @@
-Ôªø<Project Sdk="Microsoft.NET.Sdk">
+<Project Sdk="Microsoft.NET.Sdk">
 
   <Import Project="..\Shared\FileSystemSources.proj" />
   <Import Project="..\Shared\DebuggingSources.proj" />
@@ -13,6 +13,7 @@
   <ItemGroup>
     <PackageReference Include="Microsoft.VisualStudio.Setup.Configuration.Interop" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" />
     <PackageReference Include="Shouldly" />
+    <PackageReference Include="System.Net.Http" />
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/Framework/BuildEventContext.cs b/src/Framework/BuildEventContext.cs
index edde77d5fbb..0cda93d76c6 100644
--- a/src/Framework/BuildEventContext.cs
+++ b/src/Framework/BuildEventContext.cs
@@ -306,5 +306,9 @@ private bool InternalEquals(BuildEventContext buildEventContext)
         }
         #endregion
 
+        public override string ToString()
+        {
+            return $"Node={NodeId} Submission={SubmissionId} ProjectContext={ProjectContextId} ProjectInstance={ProjectInstanceId} Eval={EvaluationId} Target={TargetId} Task={TaskId}";
+        }
     }
 }
diff --git a/src/Framework/BuildMessageEventArgs.cs b/src/Framework/BuildMessageEventArgs.cs
index 23282a1db87..e84c9ed6c02 100644
--- a/src/Framework/BuildMessageEventArgs.cs
+++ b/src/Framework/BuildMessageEventArgs.cs
@@ -302,7 +302,11 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         /// <summary>
         /// Importance of the message
         /// </summary>
-        public MessageImportance Importance => importance;
+        public MessageImportance Importance
+        {
+            get => importance;
+            internal set => importance = value;
+        }
 
         /// <summary>
         /// The custom sub-type of the event.
@@ -322,12 +326,20 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         /// <summary>
         /// Line number of interest in associated file. 
         /// </summary>
-        public int LineNumber => lineNumber;
+        public int LineNumber
+        {
+            get => lineNumber;
+            internal set => lineNumber = value;
+        }
 
         /// <summary>
         /// Column number of interest in associated file. 
         /// </summary>
-        public int ColumnNumber => columnNumber;
+        public int ColumnNumber
+        {
+            get => columnNumber;
+            internal set => columnNumber = value;
+        }
 
         /// <summary>
         /// Ending line number of interest in associated file. 
diff --git a/src/Framework/ChangeWaves.cs b/src/Framework/ChangeWaves.cs
index 7761c468d44..d97becfa1d0 100644
--- a/src/Framework/ChangeWaves.cs
+++ b/src/Framework/ChangeWaves.cs
@@ -22,10 +22,9 @@ internal enum ChangeWaveConversionState
     /// For dev docs: https://github.com/dotnet/msbuild/blob/master/documentation/wiki/ChangeWaves-Dev.md
     internal class ChangeWaves
     {
-        internal static readonly Version Wave16_8 = new Version(16, 8);
         internal static readonly Version Wave16_10 = new Version(16, 10);
         internal static readonly Version Wave17_0 = new Version(17, 0);
-        internal static readonly Version[] AllWaves = { Wave16_8, Wave16_10, Wave17_0 };
+        internal static readonly Version[] AllWaves = { Wave16_10, Wave17_0 };
 
         /// <summary>
         /// Special value indicating that all features behind all Change Waves should be enabled.
diff --git a/src/Framework/EngineServices.cs b/src/Framework/EngineServices.cs
new file mode 100644
index 00000000000..43b8d10f7c6
--- /dev/null
+++ b/src/Framework/EngineServices.cs
@@ -0,0 +1,49 @@
+Ôªø// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System;
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// Exposes build engine functionality that was made available in newer versions of MSBuild.
+    /// </summary>
+    /// <remarks>
+    /// Make all members virtual but not abstract, ensuring that implementations can override them and external implementations
+    /// won't break when the class is extended with new members. This base implementation should be throwing <see cref="NotImplementedException"/>.
+    /// </remarks>
+    [Serializable]
+    public abstract class EngineServices
+    {
+        /// <summary>
+        /// Initial version with LogsMessagesOfImportance() and IsTaskInputLoggingEnabled as the only exposed members.
+        /// </summary>
+        public const int Version1 = 1;
+
+        /// <summary>
+        /// An explicit version of this class. Must be incremented whenever new members are added. Derived classes should override
+        /// the property to return the version actually being implemented.
+        /// </summary>
+        public virtual int Version => Version1; // Not updated since we have not shipped 17.0 yet
+
+        /// <summary>
+        /// Returns <see langword="true"/> if the given message importance is not guaranteed to be ignored by registered loggers.
+        /// </summary>
+        /// <param name="importance">The importance to check.</param>
+        /// <returns>True if messages of the given importance should be logged, false if it's guaranteed that such messages would be ignored.</returns>
+        /// <remarks>
+        /// Example: If we know that no logger is interested in <see cref="MessageImportance.Low"/>, this method returns <see langword="true"/>
+        /// for <see cref="MessageImportance.Normal"/> and <see cref="MessageImportance.High"/>, and returns <see langword="false"/>
+        /// for <see cref="MessageImportance.Low"/>.
+        /// </remarks>
+        public virtual bool LogsMessagesOfImportance(MessageImportance importance) => throw new NotImplementedException();
+
+        /// <summary>
+        /// Returns <see langword="true"/> if the build is configured to log all task inputs.
+        /// </summary>
+        /// <remarks>
+        /// This is a performance optimization allowing tasks to skip expensive double-logging.
+        /// </remarks>
+        public virtual bool IsTaskInputLoggingEnabled => throw new NotImplementedException();
+    }
+}
diff --git a/src/Framework/Event args classes.cd b/src/Framework/Event args classes.cd
deleted file mode 100644
index 705d0aa3b6f..00000000000
--- a/src/Framework/Event args classes.cd	
+++ /dev/null
@@ -1,102 +0,0 @@
-Ôªø<?xml version="1.0" encoding="utf-8"?>
-<ClassDiagram MajorVersion="1" MinorVersion="1">
-  <Font Name="Tahoma" Size="8.25" />
-  <Class Name="Microsoft.Build.Framework.BuildErrorEventArgs" Collapsed="true">
-    <Position X="6" Y="1.75" Width="1.75" />
-    <TypeIdentifier>
-      <FileName>BuildErrorEventArgs.cs</FileName>
-      <HashCode>AAAAAAAAgAAAAAAAAAAoAAAArAAEAAgAFAAAABAABAA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.BuildEventArgs" Collapsed="true">
-    <Position X="4.75" Y="0.5" Width="1.5" />
-    <TypeIdentifier>
-      <FileName>BuildEventArgs.cs</FileName>
-      <HashCode>AAAAAAAAAAAgAAAAAAAGAAAABgAAAAAAACAAICAgACA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.BuildFinishedEventArgs" Collapsed="true">
-    <Position X="1" Y="4" Width="2" />
-    <TypeIdentifier>
-      <FileName>BuildFinishedEventArgs.cs</FileName>
-      <HashCode>AAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.BuildMessageEventArgs" Collapsed="true">
-    <Position X="10.25" Y="1.75" Width="2" />
-    <TypeIdentifier>
-      <FileName>BuildMessageEventArgs.cs</FileName>
-      <HashCode>AAAAAAAAAAAAAAAAAAAAAAAIAAAACAAAAAAAAAAAAAA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.BuildStartedEventArgs" Collapsed="true">
-    <Position X="1" Y="3.25" Width="1.75" />
-    <TypeIdentifier>
-      <FileName>BuildStartedEventArgs.cs</FileName>
-      <HashCode>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.BuildStatusEventArgs" Collapsed="true">
-    <Position X="2.5" Y="2" Width="1.75" />
-    <TypeIdentifier>
-      <FileName>BuildStatusEventArgs.cs</FileName>
-      <HashCode>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.BuildWarningEventArgs" Collapsed="true">
-    <Position X="8" Y="1.75" Width="2" />
-    <TypeIdentifier>
-      <FileName>BuildWarningEventArgs.cs</FileName>
-      <HashCode>AAAAAAAAgAAAAAAAAAAoAAAArAAEAAgAFAAAABAABAA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.CustomBuildEventArgs" Collapsed="true">
-    <Position X="6.25" Y="2.75" Width="1.75" />
-    <TypeIdentifier>
-      <FileName>CustomBuildEventArgs.cs</FileName>
-      <HashCode>AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.ProjectFinishedEventArgs" Collapsed="true">
-    <Position X="1" Y="5.5" Width="2" />
-    <TypeIdentifier>
-      <FileName>ProjectFinishedEventArgs.cs</FileName>
-      <HashCode>AAAAgAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAIA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.ProjectStartedEventArgs" Collapsed="true">
-    <Position X="1" Y="4.75" Width="2" />
-    <TypeIdentifier>
-      <FileName>ProjectStartedEventArgs.cs</FileName>
-      <HashCode>AAAAABAAABAAAAAQAAAAAAAAAAAAAAAAEAAAAAAAAAA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.TargetFinishedEventArgs" Collapsed="true">
-    <Position X="3.75" Y="4" Width="2" />
-    <TypeIdentifier>
-      <FileName>TargetFinishedEventArgs.cs</FileName>
-      <HashCode>AAAAoAAAADAAAAAQAAAAAAAAAAAAAAAgAAAAIAAAAIA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.TargetStartedEventArgs" Collapsed="true">
-    <Position X="3.75" Y="3.25" Width="2" />
-    <TypeIdentifier>
-      <FileName>TargetStartedEventArgs.cs</FileName>
-      <HashCode>AAAAIAAAADAAAAAQAAAAAAAAAAAAAAAgAAAAIAAAAAA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.TaskFinishedEventArgs" Collapsed="true">
-    <Position X="3.75" Y="5.5" Width="1.75" />
-    <TypeIdentifier>
-      <FileName>TaskFinishedEventArgs.cs</FileName>
-      <HashCode>AAAAggAAABIEAAAQBAAAAAAAAAAAAAAAAAAAAAAAAIA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-  <Class Name="Microsoft.Build.Framework.TaskStartedEventArgs" Collapsed="true">
-    <Position X="3.75" Y="4.75" Width="1.75" />
-    <TypeIdentifier>
-      <FileName>TaskStartedEventArgs.cs</FileName>
-      <HashCode>AAAAAgAAABIEAAAQBAAAAAAAAAAAAAAAAAAAAAAAAAA=</HashCode>
-    </TypeIdentifier>
-  </Class>
-</ClassDiagram>
\ No newline at end of file
diff --git a/src/Framework/IBuildEngine10.cs b/src/Framework/IBuildEngine10.cs
new file mode 100644
index 00000000000..7a7805d9791
--- /dev/null
+++ b/src/Framework/IBuildEngine10.cs
@@ -0,0 +1,17 @@
+Ôªø// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// This interface extends <see cref="IBuildEngine9" /> to provide a reference to the <see cref="EngineServices" /> class.
+    /// Future engine API should be added to the class as opposed to introducing yet another version of the IBuildEngine interface.
+    /// </summary>
+    public interface IBuildEngine10 : IBuildEngine9
+    {
+        /// <summary>
+        /// Returns the new build engine interface.
+        /// </summary>
+        EngineServices EngineServices { get; }
+    }
+}
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index 66bddcdeed3..e32cb633fbc 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -103,106 +103,100 @@ public void EvaluateConditionStop(string condition, bool result)
         /// <summary>
         /// Call this method to notify listeners of how the project data was evaluated.
         /// </summary>
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
-        [Event(11, Keywords = Keywords.All)]
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
+        [Event(11, Keywords = Keywords.All | Keywords.PerformanceLog)]
         public void EvaluateStart(string projectFile)
         {
             WriteEvent(11, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
-        [Event(12, Keywords = Keywords.All)]
-        public void EvaluatePass0Start(string projectFile)
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
+        [Event(12, Keywords = Keywords.All | Keywords.PerformanceLog)]
+        public void EvaluateStop(string projectFile)
         {
             WriteEvent(12, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
         [Event(13, Keywords = Keywords.All)]
-        public void EvaluatePass0Stop(string projectFile)
+        public void EvaluatePass0Start(string projectFile)
         {
             WriteEvent(13, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
         [Event(14, Keywords = Keywords.All)]
-        public void EvaluatePass1Start(string projectFile)
+        public void EvaluatePass0Stop(string projectFile)
         {
             WriteEvent(14, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
-        /// <param name="numberOfProperties">Number of Properties getting evaluated.</param>
-        /// <param name="numberOfImports">Number of Imports getting evaluated.</param>
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
         [Event(15, Keywords = Keywords.All)]
-        public void EvaluatePass1Stop(string projectFile, int numberOfProperties, int numberOfImports)
+        public void EvaluatePass1Start(string projectFile)
         {
-            WriteEvent(15, projectFile, numberOfProperties, numberOfImports);
+            WriteEvent(15, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
         [Event(16, Keywords = Keywords.All)]
-        public void EvaluatePass2Start(string projectFile)
+        public void EvaluatePass1Stop(string projectFile)
         {
             WriteEvent(16, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
-        /// <param name="numberOfItemDefinitionGroupElements">Number of ItemDefinitionGroupElements getting evaluated.</param>
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
         [Event(17, Keywords = Keywords.All)]
-        public void EvaluatePass2Stop(string projectFile, int numberOfItemDefinitionGroupElements)
+        public void EvaluatePass2Start(string projectFile)
         {
-            WriteEvent(17, projectFile, numberOfItemDefinitionGroupElements);
+            WriteEvent(17, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
         [Event(18, Keywords = Keywords.All)]
-        public void EvaluatePass3Start(string projectFile)
+        public void EvaluatePass2Stop(string projectFile)
         {
             WriteEvent(18, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
-        /// <param name="numberOfItemGroupElements">Number of project items evaluated.</param>
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
         [Event(19, Keywords = Keywords.All)]
-        public void EvaluatePass3Stop(string projectFile, int numberOfItemGroupElements)
+        public void EvaluatePass3Start(string projectFile)
         {
-            WriteEvent(19, projectFile, numberOfItemGroupElements);
+            WriteEvent(19, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
         [Event(20, Keywords = Keywords.All)]
-        public void EvaluatePass4Start(string projectFile)
+        public void EvaluatePass3Stop(string projectFile)
         {
             WriteEvent(20, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
-        /// <param name="numberOfUsingTaskElements">Number of using tasks elements evaluated.</param>
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
         [Event(21, Keywords = Keywords.All)]
-        public void EvaluatePass4Stop(string projectFile, int numberOfUsingTaskElements)
+        public void EvaluatePass4Start(string projectFile)
         {
-            WriteEvent(21, projectFile, numberOfUsingTaskElements);
+            WriteEvent(21, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
         [Event(22, Keywords = Keywords.All)]
-        public void EvaluatePass5Start(string projectFile)
+        public void EvaluatePass4Stop(string projectFile)
         {
             WriteEvent(22, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
-        /// <param name="targetElementsCount">Number of targets read.</param>
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
         [Event(23, Keywords = Keywords.All)]
-        public void EvaluatePass5Stop(string projectFile, int targetElementsCount)
+        public void EvaluatePass5Start(string projectFile)
         {
-            WriteEvent(23, projectFile, targetElementsCount);
+            WriteEvent(23, projectFile);
         }
 
-        /// <param name="projectFile">Relevant information about where in the run of the progam it is.</param>
+        /// <param name="projectFile">Filename of the project being evaluated.</param>
         [Event(24, Keywords = Keywords.All)]
-        public void EvaluateStop(string projectFile)
+        public void EvaluatePass5Stop(string projectFile)
         {
             WriteEvent(24, projectFile);
         }
@@ -284,15 +278,15 @@ public void RarLogResultsStop()
         /// <summary>
         /// Call this method to notify listeners of profiling for the function that parses an XML document into a ProjectRootElement.
         /// </summary>
-        /// <param name="projectFileName">Relevant information about where in the run of the progam it is.</param>
-        [Event(33, Keywords = Keywords.All | Keywords.PerformanceLog)]
+        /// <param name="projectFileName">Filename of the project being evaluated.</param>
+        [Event(33, Keywords = Keywords.All)]
         public void ParseStart(string projectFileName)
         {
             WriteEvent(33, projectFileName);
         }
 
-        /// <param name="projectFileName">Relevant information about where in the run of the progam it is.</param>
-        [Event(34, Keywords = Keywords.All | Keywords.PerformanceLog)]
+        /// <param name="projectFileName">Filename of the project being evaluated.</param>
+        [Event(34, Keywords = Keywords.All)]
         public void ParseStop(string projectFileName)
         {
             WriteEvent(34, projectFileName);
@@ -423,6 +417,79 @@ public void PacketReadSize(int size)
         {
             WriteEvent(55, size);
         }
+
+        [Event(56, Keywords = Keywords.All)]
+        public void TargetUpToDateStart()
+        {
+            WriteEvent(56);
+        }
+
+        [Event(57, Keywords = Keywords.All)]
+        public void TargetUpToDateStop(int result)
+        {
+            WriteEvent(57, result);
+        }
+
+        [Event(58, Keywords = Keywords.All)]
+        public void CopyUpToDateStart(string path)
+        {
+            WriteEvent(58, path);
+        }
+
+        [Event(59, Keywords = Keywords.All)]
+        public void CopyUpToDateStop(string path, bool wasUpToDate)
+        {
+            WriteEvent(59, path, wasUpToDate);
+        }
+
+        [Event(60, Keywords = Keywords.All)]
+        public void WriteLinesToFileUpToDateStart()
+        {
+            WriteEvent(60);
+        }
+
+        [Event(61, Keywords = Keywords.All)]
+        public void WriteLinesToFileUpToDateStop(string fileItemSpec, bool wasUpToDate)
+        {
+            WriteEvent(61, fileItemSpec, wasUpToDate);
+        }
+
+        [Event(62, Keywords = Keywords.All)]
+        public void SdkResolverServiceInitializeStart()
+        {
+            WriteEvent(62);
+        }
+
+        [Event(63, Keywords = Keywords.All)]
+        public void SdkResolverServiceInitializeStop(int resolverCount)
+        {
+            WriteEvent(63, resolverCount);
+        }
+
+        [Event(64, Keywords = Keywords.All)]
+        public void SdkResolverResolveSdkStart()
+        {
+            WriteEvent(64);
+        }
+
+        [Event(65, Keywords = Keywords.All)]
+        public void SdkResolverResolveSdkStop(string resolverName, string sdkName, string solutionPath, string projectPath, string sdkPath, bool success)
+        {
+            WriteEvent(65, resolverName, sdkName, solutionPath, projectPath, sdkPath, success);
+        }
+
+        [Event(66, Keywords = Keywords.All)]
+        public void CachedSdkResolverServiceResolveSdkStart(string sdkName, string solutionPath, string projectPath)
+        {
+            WriteEvent(66, sdkName, solutionPath, projectPath);
+        }
+
+        [Event(67, Keywords = Keywords.All)]
+        public void CachedSdkResolverServiceResolveSdkStop(string sdkName, string solutionPath, string projectPath, bool success)
+        {
+            WriteEvent(67, sdkName, solutionPath, projectPath, success);
+        }
+
         #endregion
     }
 }
diff --git a/src/Framework/Microsoft.Build.Framework.csproj b/src/Framework/Microsoft.Build.Framework.csproj
index 939d7db72f7..d2b221eb376 100644
--- a/src/Framework/Microsoft.Build.Framework.csproj
+++ b/src/Framework/Microsoft.Build.Framework.csproj
@@ -1,14 +1,27 @@
 Ôªø<Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
     <TargetFrameworks>$(LibraryTargetFrameworks)</TargetFrameworks>
+    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
     <GenerateReferenceAssemblySource>true</GenerateReferenceAssemblySource>
     <CreateTlb>true</CreateTlb>
     <IsPackable>true</IsPackable>
     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which is a common assembly used by other MSBuild assemblies.</PackageDescription>
     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>
-    <ApplyNgenOptimization Condition="'$(TargetFramework)' == '$(FullFrameworkTFM)'">partial</ApplyNgenOptimization>
+    <ApplyNgenOptimization Condition="'$(TargetFramework)' == '$(FullFrameworkTFM)'">full</ApplyNgenOptimization>
+
+    <!--
+      Ignore warnings for nullable annotations in code that doesn't use '#nullable'. Microsoft.CodeAnalysis.Collections
+      source assumes nullable reference types is enabled, so this warning is reported but cannot be fixed in code from
+      an imported package. This suppression should be removed if/when the project is migrated to enable nullable
+      reference types.
+    -->
+    <NoWarn>$(NoWarn),CS8632</NoWarn>
   </PropertyGroup>
 
+  <ItemGroup>
+    <PackageReference Include="Microsoft.CodeAnalysis.Collections" PrivateAssets="all" />
+  </ItemGroup>
+
   <ItemGroup>
     <PackageReference Include="System.Security.Permissions" Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'" />
     <Reference Include="System.Xaml" Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'" />
diff --git a/src/Framework/NullableAttributes.cs b/src/Framework/NullableAttributes.cs
new file mode 100644
index 00000000000..826ecacee10
--- /dev/null
+++ b/src/Framework/NullableAttributes.cs
@@ -0,0 +1,150 @@
+Ôªø// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+// This was copied from https://github.com/dotnet/runtime/blob/39b9607807f29e48cae4652cd74735182b31182e/src/libraries/System.Private.CoreLib/src/System/Diagnostics/CodeAnalysis/NullableAttributes.cs
+// and updated to have the scope of the attributes be internal.
+
+namespace System.Diagnostics.CodeAnalysis
+{
+#if !NETCOREAPP
+
+    /// <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
+    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property, Inherited = false)]
+    internal sealed class AllowNullAttribute : Attribute { }
+
+    /// <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
+    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property, Inherited = false)]
+    internal sealed class DisallowNullAttribute : Attribute { }
+
+    /// <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
+    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, Inherited = false)]
+    internal sealed class MaybeNullAttribute : Attribute { }
+
+    /// <summary>Specifies that an output will not be null even if the corresponding type allows it.</summary>
+    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, Inherited = false)]
+    internal sealed class NotNullAttribute : Attribute { }
+
+    /// <summary>Specifies that when a method returns <see cref="ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
+    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
+    internal sealed class MaybeNullWhenAttribute : Attribute
+    {
+        /// <summary>Initializes the attribute with the specified return value condition.</summary>
+        /// <param name="returnValue">
+        /// The return value condition. If the method returns this value, the associated parameter may be null.
+        /// </param>
+        public MaybeNullWhenAttribute(bool returnValue) => ReturnValue = returnValue;
+
+        /// <summary>Gets the return value condition.</summary>
+        public bool ReturnValue { get; }
+    }
+
+    /// <summary>Specifies that when a method returns <see cref="ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
+    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
+    internal sealed class NotNullWhenAttribute : Attribute
+    {
+        /// <summary>Initializes the attribute with the specified return value condition.</summary>
+        /// <param name="returnValue">
+        /// The return value condition. If the method returns this value, the associated parameter will not be null.
+        /// </param>
+        public NotNullWhenAttribute(bool returnValue) => ReturnValue = returnValue;
+
+        /// <summary>Gets the return value condition.</summary>
+        public bool ReturnValue { get; }
+    }
+
+    /// <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
+    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]
+    internal sealed class NotNullIfNotNullAttribute : Attribute
+    {
+        /// <summary>Initializes the attribute with the associated parameter name.</summary>
+        /// <param name="parameterName">
+        /// The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
+        /// </param>
+        public NotNullIfNotNullAttribute(string parameterName) => ParameterName = parameterName;
+
+        /// <summary>Gets the associated parameter name.</summary>
+        public string ParameterName { get; }
+    }
+
+    /// <summary>Applied to a method that will never return under any circumstance.</summary>
+    [AttributeUsage(AttributeTargets.Method, Inherited = false)]
+    internal sealed class DoesNotReturnAttribute : Attribute { }
+
+    /// <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
+    [AttributeUsage(AttributeTargets.Parameter, Inherited = false)]
+    internal sealed class DoesNotReturnIfAttribute : Attribute
+    {
+        /// <summary>Initializes the attribute with the specified parameter value.</summary>
+        /// <param name="parameterValue">
+        /// The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
+        /// the associated parameter matches this value.
+        /// </param>
+        public DoesNotReturnIfAttribute(bool parameterValue) => ParameterValue = parameterValue;
+
+        /// <summary>Gets the condition parameter value.</summary>
+        public bool ParameterValue { get; }
+    }
+
+#endif
+
+#if !NETCOREAPP || NETCOREAPP3_1
+
+    /// <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
+    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, Inherited = false, AllowMultiple = true)]
+    internal sealed class MemberNotNullAttribute : Attribute
+    {
+        /// <summary>Initializes the attribute with a field or property member.</summary>
+        /// <param name="member">
+        /// The field or property member that is promised to be not-null.
+        /// </param>
+        public MemberNotNullAttribute(string member) => Members = new[] { member };
+
+        /// <summary>Initializes the attribute with the list of field and property members.</summary>
+        /// <param name="members">
+        /// The list of field and property members that are promised to be not-null.
+        /// </param>
+        public MemberNotNullAttribute(params string[] members) => Members = members;
+
+        /// <summary>Gets field or property member names.</summary>
+        public string[] Members { get; }
+    }
+
+    /// <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
+    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, Inherited = false, AllowMultiple = true)]
+    internal sealed class MemberNotNullWhenAttribute : Attribute
+    {
+        /// <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
+        /// <param name="returnValue">
+        /// The return value condition. If the method returns this value, the associated parameter will not be null.
+        /// </param>
+        /// <param name="member">
+        /// The field or property member that is promised to be not-null.
+        /// </param>
+        public MemberNotNullWhenAttribute(bool returnValue, string member)
+        {
+            ReturnValue = returnValue;
+            Members = new[] { member };
+        }
+
+        /// <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
+        /// <param name="returnValue">
+        /// The return value condition. If the method returns this value, the associated parameter will not be null.
+        /// </param>
+        /// <param name="members">
+        /// The list of field and property members that are promised to be not-null.
+        /// </param>
+        public MemberNotNullWhenAttribute(bool returnValue, params string[] members)
+        {
+            ReturnValue = returnValue;
+            Members = members;
+        }
+
+        /// <summary>Gets the return value condition.</summary>
+        public bool ReturnValue { get; }
+
+        /// <summary>Gets field or property member names.</summary>
+        public string[] Members { get; }
+    }
+
+#endif
+}
diff --git a/src/Framework/Properties/AssemblyInfo.cs b/src/Framework/Properties/AssemblyInfo.cs
index cb201c360de..5ab3c12ac9a 100644
--- a/src/Framework/Properties/AssemblyInfo.cs
+++ b/src/Framework/Properties/AssemblyInfo.cs
@@ -61,14 +61,7 @@
 // so that we don't run into known security issues with loading libraries from unsafe locations 
 [assembly: DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
 
-// Needed for the "hub-and-spoke model to locate and retrieve localized resources": https://msdn.microsoft.com/en-us/library/21a15yht(v=vs.110).aspx
-// We want "en" to require a satellite assembly for debug builds in order to flush out localization
-// issues, but we want release builds to work without it. Also, .net core does not have resource fallbacks
-#if (DEBUG && !RUNTIME_TYPE_NETCORE)
-[assembly: NeutralResourcesLanguage("en", UltimateResourceFallbackLocation.Satellite)]
-#else
 [assembly: NeutralResourcesLanguage("en")]
-#endif
 
 [assembly: ComVisible(false)]
 [assembly: CLSCompliant(true)]
diff --git a/src/Framework/Sdk/SdkResolver.cs b/src/Framework/Sdk/SdkResolver.cs
index 9aafb5a84ff..9280c30af24 100644
--- a/src/Framework/Sdk/SdkResolver.cs
+++ b/src/Framework/Sdk/SdkResolver.cs
@@ -29,10 +29,11 @@ public abstract class SdkResolver
         ///     An <see cref="SdkResult" /> containing the resolved SDKs or associated error / reason
         ///     the SDK could not be resolved.  Return <code>null</code> if the resolver is not
         ///     applicable for a particular <see cref="SdkReference"/>.
-        ///     <remarks>
-        ///         Note: You must use the <see cref="SdkResultFactory" /> to return a result.
-        ///     </remarks>
-        /// </returns>
+        ///  </returns>   
+        ///  <remarks>
+        ///    Note: You must use <see cref="Microsoft.Build.Framework.SdkResultFactory"/> to return a result.
+        ///  </remarks>
+        /// 
         public abstract SdkResult Resolve(SdkReference sdkReference, SdkResolverContext resolverContext,
             SdkResultFactory factory);
     }
diff --git a/src/Framework/Sdk/SdkResolverContext.cs b/src/Framework/Sdk/SdkResolverContext.cs
index df8c5f3f148..63e2f48482d 100644
--- a/src/Framework/Sdk/SdkResolverContext.cs
+++ b/src/Framework/Sdk/SdkResolverContext.cs
@@ -37,11 +37,11 @@ public abstract class SdkResolverContext
 
         /// <summary>
         ///     Version of MSBuild currently running.
+        /// </summary>
         /// <remarks>
         ///     File version based on commit height from our public git repository. This is informational
         ///     and not equal to the assembly version.
         /// </remarks>
-        /// </summary>
         public virtual Version MSBuildVersion { get; protected set; }
 
         /// <summary>
diff --git a/src/Framework/Sdk/SdkResult.cs b/src/Framework/Sdk/SdkResult.cs
index 12cf5db0eac..29c201f24b8 100644
--- a/src/Framework/Sdk/SdkResult.cs
+++ b/src/Framework/Sdk/SdkResult.cs
@@ -7,11 +7,10 @@ namespace Microsoft.Build.Framework
 {
     /// <summary>
     ///     An abstract interface class to indicate SDK resolver success or failure.
-    ///     <remarks>
-    ///         Note: Use <see cref="SdkResultFactory" /> to create instances of this class. Do not
-    ///         inherit from this class.
-    ///     </remarks>
     /// </summary>
+    /// <remarks>
+    ///   Note: Use <see cref="Microsoft.Build.Framework.SdkResultFactory"/> to create instances of this class. Do not inherit from this class.
+    /// </remarks>
     public abstract class SdkResult
     {
         //  Explicit backing fields so that implementation in Microsoft.Build.dll can use them for translation
diff --git a/src/Framework/TargetSkippedEventArgs.cs b/src/Framework/TargetSkippedEventArgs.cs
index 5bad19a7251..d34e468ff32 100644
--- a/src/Framework/TargetSkippedEventArgs.cs
+++ b/src/Framework/TargetSkippedEventArgs.cs
@@ -7,6 +7,37 @@
 
 namespace Microsoft.Build.Framework
 {
+    /// <summary>
+    /// A reason why a target was skipped.
+    /// </summary>
+    public enum TargetSkipReason
+    {
+        /// <summary>
+        /// The target was not skipped or the skip reason was unknown.
+        /// </summary>
+        None,
+
+        /// <summary>
+        /// The target previously built successfully.
+        /// </summary>
+        PreviouslyBuiltSuccessfully,
+
+        /// <summary>
+        /// The target previously built unsuccessfully.
+        /// </summary>
+        PreviouslyBuiltUnsuccessfully,
+
+        /// <summary>
+        /// All the target outputs were up-to-date with respect to their inputs.
+        /// </summary>
+        OutputsUpToDate,
+
+        /// <summary>
+        /// The condition on the target was evaluated as false.
+        /// </summary>
+        ConditionWasFalse
+    }
+
     /// <summary>
     /// Arguments for the target skipped event.
     /// </summary>
@@ -45,6 +76,11 @@ params object[] messageArgs
         {
         }
 
+        /// <summary>
+        /// The reason why the target was skipped.
+        /// </summary>
+        public TargetSkipReason SkipReason { get; set; }
+
         /// <summary>
         /// Gets or sets the name of the target being skipped.
         /// </summary>
@@ -65,10 +101,24 @@ params object[] messageArgs
         /// </summary>
         public TargetBuiltReason BuildReason { get; set; }
 
+        /// <summary>
+        /// Whether the target succeeded originally.
+        /// </summary>
         public bool OriginallySucceeded { get; set; }
 
+        /// <summary>
+        /// <see cref="BuildEventContext"/> describing the original build of the target, or null if not available.
+        /// </summary>
+        public BuildEventContext OriginalBuildEventContext { get; set; }
+
+        /// <summary>
+        /// The condition expression on the target declaration.
+        /// </summary>
         public string Condition { get; set; }
 
+        /// <summary>
+        /// The value of the condition expression as it was evaluated.
+        /// </summary>
         public string EvaluatedCondition { get; set; }
 
         internal override void WriteToStream(BinaryWriter writer)
@@ -81,7 +131,9 @@ internal override void WriteToStream(BinaryWriter writer)
             writer.WriteOptionalString(Condition);
             writer.WriteOptionalString(EvaluatedCondition);
             writer.Write7BitEncodedInt((int)BuildReason);
+            writer.Write7BitEncodedInt((int)SkipReason);
             writer.Write(OriginallySucceeded);
+            writer.WriteOptionalBuildEventContext(OriginalBuildEventContext);
         }
 
         internal override void CreateFromStream(BinaryReader reader, int version)
@@ -94,7 +146,9 @@ internal override void CreateFromStream(BinaryReader reader, int version)
             Condition = reader.ReadOptionalString();
             EvaluatedCondition = reader.ReadOptionalString();
             BuildReason = (TargetBuiltReason)reader.Read7BitEncodedInt();
+            SkipReason = (TargetSkipReason)reader.Read7BitEncodedInt();
             OriginallySucceeded = reader.ReadBoolean();
+            OriginalBuildEventContext = reader.ReadOptionalBuildEventContext();
         }
 
         public override string Message
@@ -107,22 +161,29 @@ public override string Message
                     {
                         if (RawMessage == null)
                         {
-                            if (Condition != null)
-                            {
-                                RawMessage = FormatResourceStringIgnoreCodeAndKeyword(
-                                    "TargetSkippedFalseCondition",
-                                    TargetName,
-                                    Condition,
-                                    EvaluatedCondition);
-                            }
-                            else
+                            RawMessage = SkipReason switch
                             {
-                                RawMessage = FormatResourceStringIgnoreCodeAndKeyword(
-                                    OriginallySucceeded
-                                    ? "TargetAlreadyCompleteSuccess"
-                                    : "TargetAlreadyCompleteFailure",
-                                    TargetName);
-                            }
+                                TargetSkipReason.PreviouslyBuiltSuccessfully or TargetSkipReason.PreviouslyBuiltUnsuccessfully =>
+                                    FormatResourceStringIgnoreCodeAndKeyword(
+                                        OriginallySucceeded
+                                        ? "TargetAlreadyCompleteSuccess"
+                                        : "TargetAlreadyCompleteFailure",
+                                        TargetName),
+
+                                TargetSkipReason.ConditionWasFalse =>
+                                    FormatResourceStringIgnoreCodeAndKeyword(
+                                        "TargetSkippedFalseCondition",
+                                        TargetName,
+                                        Condition,
+                                        EvaluatedCondition),
+
+                                TargetSkipReason.OutputsUpToDate =>
+                                    FormatResourceStringIgnoreCodeAndKeyword(
+                                        "SkipTargetBecauseOutputsUpToDate",
+                                        TargetName),
+
+                                _ => SkipReason.ToString()
+                            };
                         }
                     }
                 }
diff --git a/src/Framework/TaskParameterEventArgs.cs b/src/Framework/TaskParameterEventArgs.cs
index b4efc953e84..1ca1a55f7ad 100644
--- a/src/Framework/TaskParameterEventArgs.cs
+++ b/src/Framework/TaskParameterEventArgs.cs
@@ -87,6 +87,8 @@ internal override void CreateFromStream(BinaryReader reader, int version)
             BuildEventContext = reader.ReadOptionalBuildEventContext();
             Kind = (TaskParameterMessageKind)reader.Read7BitEncodedInt();
             ItemType = reader.ReadOptionalString();
+            LineNumber = reader.Read7BitEncodedInt();
+            ColumnNumber = reader.Read7BitEncodedInt();
             Items = ReadItems(reader);
         }
 
@@ -134,6 +136,8 @@ internal override void WriteToStream(BinaryWriter writer)
             writer.WriteOptionalBuildEventContext(BuildEventContext);
             writer.Write7BitEncodedInt((int)Kind);
             writer.WriteOptionalString(ItemType);
+            writer.Write7BitEncodedInt(LineNumber);
+            writer.Write7BitEncodedInt(ColumnNumber);
             WriteItems(writer, Items);
         }
 
diff --git a/src/Framework/TaskStartedEventArgs.cs b/src/Framework/TaskStartedEventArgs.cs
index ce50a3b7723..207d20472d2 100644
--- a/src/Framework/TaskStartedEventArgs.cs
+++ b/src/Framework/TaskStartedEventArgs.cs
@@ -91,6 +91,8 @@ internal override void WriteToStream(BinaryWriter writer)
             writer.WriteOptionalString(taskName);
             writer.WriteOptionalString(projectFile);
             writer.WriteOptionalString(taskFile);
+            writer.Write7BitEncodedInt(LineNumber);
+            writer.Write7BitEncodedInt(ColumnNumber);
         }
 
         /// <summary>
@@ -105,6 +107,8 @@ internal override void CreateFromStream(BinaryReader reader, int version)
             taskName = reader.ReadByte() == 0 ? null : reader.ReadString();
             projectFile = reader.ReadByte() == 0 ? null : reader.ReadString();
             taskFile = reader.ReadByte() == 0 ? null : reader.ReadString();
+            LineNumber = reader.Read7BitEncodedInt();
+            ColumnNumber = reader.Read7BitEncodedInt();
         }
         #endregion
 
@@ -123,6 +127,16 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         /// </summary>
         public string TaskFile => taskFile;
 
+        /// <summary>
+        /// Line number of the task invocation in the project file
+        /// </summary>
+        public int LineNumber { get; internal set; }
+
+        /// <summary>
+        /// Column number of the task invocation in the project file
+        /// </summary>
+        public int ColumnNumber { get; internal set; }
+
         public override string Message
         {
             get
diff --git a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
index dd786dfbed2..8220910cf74 100644
--- a/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
+++ b/src/MSBuild.Bootstrap/MSBuild.Bootstrap.csproj
@@ -11,7 +11,7 @@
 
   <ItemGroup>
     <ProjectReference Include="..\MSBuild\MSBuild.csproj" />
-    
+
     <!-- Direct project references needed here to avoid NuGet version conflict errors -->
     <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
     <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
@@ -39,16 +39,11 @@
     <Content Include="$(RepoRoot).dotnet\sdk\$(DotNetCliVersion)\RuntimeIdentifierGraph.json" CopyToOutputDirectory="PreserveNewest" />
   </ItemGroup>
 
-  <ItemGroup Condition="'$(MonoBuild)' != 'true'">
-    <!-- Include DependencyModel libraries. -->
-    <PackageReference Include="Microsoft.Extensions.DependencyModel" />
-  </ItemGroup>
-
   <!-- Use deps file from this project with additional dependencies listed instead of the one generated in the MSBuild project -->
   <Target Name="UpdateMSBuildDepsFile" AfterTargets="Build" Condition="'$(MonoBuild)' != 'true' and ($([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'netcoreapp2.1')) or '$(TargetFramework)' == 'netstandard2.0')">
     <Copy SourceFiles="$(OutputPath)$(AssemblyName).deps.json" DestinationFiles="$(OutputPath)MSBuild.deps.json" />
   </Target>
-  <Target Name="UpdatePublishedMSBuildDepsFile" AfterTargets="Publish" Condition="'$(TargetFramework)' == 'net5.0'">
+  <Target Name="UpdatePublishedMSBuildDepsFile" AfterTargets="Publish" Condition="'$(TargetFramework)' == 'net6.0'">
     <Copy SourceFiles="$(PublishDir)$(AssemblyName).deps.json" DestinationFiles="$(PublishDir)MSBuild.deps.json" />
   </Target>
 
diff --git a/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj b/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
index be9203b581a..701d0c1e3fc 100644
--- a/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
+++ b/src/MSBuild.UnitTests/Microsoft.Build.CommandLine.UnitTests.csproj
@@ -8,6 +8,7 @@
 
   <ItemGroup>
     <PackageReference Include="Shouldly" />
+    <PackageReference Include="System.Net.Http" />
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index c5809755219..c9dbd905e72 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -19,10 +19,11 @@
 using Shouldly;
 using System.IO.Compression;
 using System.Reflection;
+using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.UnitTests
 {
-    public class XMakeAppTests
+    public class XMakeAppTests : IDisposable
     {
 #if USE_MSBUILD_DLL_EXTN
         private const string MSBuildExeName = "MSBuild.dll";
@@ -31,10 +32,12 @@ public class XMakeAppTests
 #endif
 
         private readonly ITestOutputHelper _output;
+        private readonly TestEnvironment _env;
 
         public XMakeAppTests(ITestOutputHelper output)
         {
             _output = output;
+            _env = UnitTests.TestEnvironment.Create(_output);
         }
 
         private const string AutoResponseFileName = "MSBuild.rsp";
@@ -45,7 +48,7 @@ public void GatherCommandLineSwitchesTwoProperties()
             CommandLineSwitches switches = new CommandLineSwitches();
 
             var arguments = new List<string>();
-            arguments.AddRange(new string[] { "/p:a=b", "/p:c=d" });
+            arguments.AddRange(new[] { "/p:a=b", "/p:c=d" });
 
             MSBuildApp.GatherCommandLineSwitches(arguments, switches);
 
@@ -60,7 +63,7 @@ public void GatherCommandLineSwitchesMaxCpuCountWithArgument()
             CommandLineSwitches switches = new CommandLineSwitches();
 
             var arguments = new List<string>();
-            arguments.AddRange(new string[] { "/m:2" });
+            arguments.AddRange(new[] { "/m:2" });
 
             MSBuildApp.GatherCommandLineSwitches(arguments, switches);
 
@@ -77,7 +80,7 @@ public void GatherCommandLineSwitchesMaxCpuCountWithoutArgument()
             CommandLineSwitches switches = new CommandLineSwitches();
 
             var arguments = new List<string>();
-            arguments.AddRange(new string[] { "/m:3", "/m" });
+            arguments.AddRange(new[] { "/m:3", "/m" });
 
             MSBuildApp.GatherCommandLineSwitches(arguments, switches);
 
@@ -97,7 +100,7 @@ public void GatherCommandLineSwitchesMaxCpuCountWithoutArgumentButWithColon()
             CommandLineSwitches switches = new CommandLineSwitches();
 
             var arguments = new List<string>();
-            arguments.AddRange(new string[] { "/m:" });
+            arguments.AddRange(new[] { "/m:" });
 
             MSBuildApp.GatherCommandLineSwitches(arguments, switches);
 
@@ -137,11 +140,8 @@ public void GatherCommandLineSwitchesMaxCpuCountWithoutArgumentButWithColon()
         [Fact]
         public void SplitUnquotedTest()
         {
-            List<string> sa;
-            int emptySplits;
-
             // nothing quoted
-            sa = QuotingUtilities.SplitUnquoted("abcdxyz");
+            var sa = QuotingUtilities.SplitUnquoted("abcdxyz");
             sa.Count.ShouldBe(1);
             sa[0].ShouldBe("abcdxyz");
 
@@ -165,7 +165,7 @@ public void SplitUnquotedTest()
             sa[2].ShouldBe("dxyz");
 
             // nothing quoted
-            sa = QuotingUtilities.SplitUnquoted("abc,c;dxyz", 2, false, false, out emptySplits, ';', ',');
+            sa = QuotingUtilities.SplitUnquoted("abc,c;dxyz", 2, false, false, out var emptySplits, ';', ',');
             emptySplits.ShouldBe(0);
             sa.Count.ShouldBe(2);
             sa[0].ShouldBe("abc");
@@ -183,8 +183,8 @@ public void SplitUnquotedTest()
             emptySplits.ShouldBe(0);
             sa.Count.ShouldBe(4);
             sa[0].ShouldBe("abc");
-            sa[1].ShouldBe(String.Empty);
-            sa[2].ShouldBe(String.Empty);
+            sa[1].ShouldBe(string.Empty);
+            sa[2].ShouldBe(string.Empty);
             sa[3].ShouldBe("dxyz");
 
             // "c d" is quoted
@@ -330,10 +330,8 @@ public void SplitUnquotedTest()
         [Fact]
         public void UnquoteTest()
         {
-            int doubleQuotesRemoved;
-
             // "cde" is quoted
-            QuotingUtilities.Unquote("abc\"cde\"xyz", out doubleQuotesRemoved).ShouldBe("abccdexyz");
+            QuotingUtilities.Unquote("abc\"cde\"xyz", out var doubleQuotesRemoved).ShouldBe("abccdexyz");
             doubleQuotesRemoved.ShouldBe(2);
 
             // "xyz" is quoted (the terminal double-quote is assumed)
@@ -393,8 +391,7 @@ public void UnquoteTest()
         public void ExtractSwitchParametersTest()
         {
             string commandLineArg = "\"/p:foo=\"bar";
-            int doubleQuotesRemovedFromArg;
-            string unquotedCommandLineArg = QuotingUtilities.Unquote(commandLineArg, out doubleQuotesRemovedFromArg);
+            string unquotedCommandLineArg = QuotingUtilities.Unquote(commandLineArg, out var doubleQuotesRemovedFromArg);
             MSBuildApp.ExtractSwitchParameters(commandLineArg, unquotedCommandLineArg, doubleQuotesRemovedFromArg, "p", unquotedCommandLineArg.IndexOf(':')).ShouldBe(":\"foo=\"bar");
             doubleQuotesRemovedFromArg.ShouldBe(2);
 
@@ -513,15 +510,15 @@ public void InvalidVerbosity()
         [Fact]
         public void ValidMaxCPUCountSwitch()
         {
-            MSBuildApp.ProcessMaxCPUCountSwitch(new string[] { "1" }).ShouldBe(1);
-            MSBuildApp.ProcessMaxCPUCountSwitch(new string[] { "2" }).ShouldBe(2);
-            MSBuildApp.ProcessMaxCPUCountSwitch(new string[] { "3" }).ShouldBe(3);
-            MSBuildApp.ProcessMaxCPUCountSwitch(new string[] { "4" }).ShouldBe(4);
-            MSBuildApp.ProcessMaxCPUCountSwitch(new string[] { "8" }).ShouldBe(8);
-            MSBuildApp.ProcessMaxCPUCountSwitch(new string[] { "63" }).ShouldBe(63);
+            MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "1" }).ShouldBe(1);
+            MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "2" }).ShouldBe(2);
+            MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "3" }).ShouldBe(3);
+            MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "4" }).ShouldBe(4);
+            MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "8" }).ShouldBe(8);
+            MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "63" }).ShouldBe(63);
 
             // Should pick last value
-            MSBuildApp.ProcessMaxCPUCountSwitch(new string[] { "8", "4" }).ShouldBe(4);
+            MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "8", "4" }).ShouldBe(4);
         }
 
         [Fact]
@@ -529,7 +526,7 @@ public void InvalidMaxCPUCountSwitch1()
         {
             Should.Throw<CommandLineSwitchException>(() =>
             {
-                MSBuildApp.ProcessMaxCPUCountSwitch(new string[] { "-1" });
+                MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "-1" });
             }
            );
         }
@@ -539,7 +536,7 @@ public void InvalidMaxCPUCountSwitch2()
         {
             Should.Throw<CommandLineSwitchException>(() =>
             {
-                MSBuildApp.ProcessMaxCPUCountSwitch(new string[] { "0" });
+                MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "0" });
             }
            );
         }
@@ -550,7 +547,7 @@ public void InvalidMaxCPUCountSwitch3()
             Should.Throw<CommandLineSwitchException>(() =>
             {
                 // Too big
-                MSBuildApp.ProcessMaxCPUCountSwitch(new string[] { "foo" });
+                MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "foo" });
             }
            );
         }
@@ -560,7 +557,7 @@ public void InvalidMaxCPUCountSwitch4()
         {
             Should.Throw<CommandLineSwitchException>(() =>
             {
-                MSBuildApp.ProcessMaxCPUCountSwitch(new string[] { "1025" });
+                MSBuildApp.ProcessMaxCPUCountSwitch(new[] { "1025" });
             }
            );
         }
@@ -586,7 +583,7 @@ public void SetConsoleUICulture()
             MSBuildApp.SetConsoleUI();
 
             // Make sure this doesn't throw an exception.
-            string bar = String.Format(CultureInfo.CurrentUICulture, "{0}", 1);
+            string bar = string.Format(CultureInfo.CurrentUICulture, "{0}", 1);
 
             // Restore the current UI culture back to the way it was at the beginning of this unit test.
             thisThread.CurrentUICulture = originalUICulture;
@@ -647,20 +644,19 @@ public void ConfigurationInvalid()
 
                 var msbuildParameters = "\"" + pathToProjectFile + "\"";
 
-                bool successfulExit;
-                output = RunnerUtilities.ExecMSBuild(newPathToMSBuildExe, msbuildParameters, out successfulExit);
+                output = RunnerUtilities.ExecMSBuild(newPathToMSBuildExe, msbuildParameters, out var successfulExit);
                 successfulExit.ShouldBeFalse();
             }
             catch (Exception ex)
             {
-                Console.WriteLine(ex.ToString());
+                _output.WriteLine(ex.ToString());
                 throw;
             }
             finally
             {
                 if (output != null)
                 {
-                    Console.WriteLine(output);
+                    _output.WriteLine(output);
                 }
 
                 try
@@ -800,7 +796,7 @@ public void MSBuildEngineLogger()
             }
         }
 
-        private string _pathToArbitraryBogusFile = NativeMethodsShared.IsWindows // OK on 64 bit as well
+        private readonly string _pathToArbitraryBogusFile = NativeMethodsShared.IsWindows // OK on 64 bit as well
                                                         ? Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), "notepad.exe")
                                                         : "/bin/cat";
 
@@ -813,8 +809,7 @@ public void GetCommandLine()
             var msbuildParameters = "\"" + _pathToArbitraryBogusFile + "\"" + (NativeMethodsShared.IsWindows ? " /v:diag" : " -v:diag");
             File.Exists(_pathToArbitraryBogusFile).ShouldBeTrue();
 
-            bool successfulExit;
-            string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out successfulExit);
+            string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
             successfulExit.ShouldBeFalse();
 
             output.ShouldContain(RunnerUtilities.PathToCurrentlyRunningMsBuildExe + (NativeMethodsShared.IsWindows ? " /v:diag " : " -v:diag ") + _pathToArbitraryBogusFile, Case.Insensitive);
@@ -829,7 +824,6 @@ public void GetCommandLineQuotedExe()
             var msbuildParameters = "\"" + _pathToArbitraryBogusFile + "\"" + (NativeMethodsShared.IsWindows ? " /v:diag" : " -v:diag");
             File.Exists(_pathToArbitraryBogusFile).ShouldBeTrue();
 
-            bool successfulExit;
             string pathToMSBuildExe = RunnerUtilities.PathToCurrentlyRunningMsBuildExe;
             // This @pathToMSBuildExe is used directly with Process, so don't quote it on
             // Unix
@@ -838,7 +832,7 @@ public void GetCommandLineQuotedExe()
                 pathToMSBuildExe = "\"" + pathToMSBuildExe + "\"";
             }
 
-            string output = RunnerUtilities.ExecMSBuild(pathToMSBuildExe, msbuildParameters, out successfulExit);
+            string output = RunnerUtilities.ExecMSBuild(pathToMSBuildExe, msbuildParameters, out var successfulExit);
             successfulExit.ShouldBeFalse();
 
             output.ShouldContain(RunnerUtilities.PathToCurrentlyRunningMsBuildExe + (NativeMethodsShared.IsWindows ? " /v:diag " : " -v:diag ") + _pathToArbitraryBogusFile, Case.Insensitive);
@@ -850,7 +844,7 @@ public void GetCommandLineQuotedExe()
         [Fact]
         public void GetCommandLineQuotedExeOnPath()
         {
-            string output = null;
+            string output;
             string current = Directory.GetCurrentDirectory();
 
             try
@@ -859,8 +853,7 @@ public void GetCommandLineQuotedExeOnPath()
 
                 var msbuildParameters = "\"" + _pathToArbitraryBogusFile + "\"" + (NativeMethodsShared.IsWindows ? " /v:diag" : " -v:diag");
 
-                bool successfulExit;
-                output = RunnerUtilities.ExecMSBuild(msbuildParameters, out successfulExit);
+                output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
                 successfulExit.ShouldBeFalse();
             }
             finally
@@ -878,38 +871,23 @@ public void GetCommandLineQuotedExeOnPath()
         [Fact]
         public void ResponseFileInProjectDirectoryFoundImplicitly()
         {
-            string directory = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString("N"));
+            string directory = _env.DefaultTestDirectory.Path;
             string projectPath = Path.Combine(directory, "my.proj");
             string rspPath = Path.Combine(directory, AutoResponseFileName);
 
-            string currentDirectory = Directory.GetCurrentDirectory();
+            string content = ObjectModelHelpers.CleanupFileContents("<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'><Target Name='t'><Warning Text='[A=$(A)]'/></Target></Project>");
+            File.WriteAllText(projectPath, content);
 
-            try
-            {
-                Directory.CreateDirectory(directory);
-
-                string content = ObjectModelHelpers.CleanupFileContents("<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'><Target Name='t'><Warning Text='[A=$(A)]'/></Target></Project>");
-                File.WriteAllText(projectPath, content);
-
-                string rspContent = "/p:A=1";
-                File.WriteAllText(rspPath, rspContent);
+            string rspContent = "/p:A=1";
+            File.WriteAllText(rspPath, rspContent);
 
-                // Find the project in the current directory
-                Directory.SetCurrentDirectory(directory);
+            // Find the project in the current directory
+            _env.SetCurrentDirectory(directory);
 
-                bool successfulExit;
-                string output = RunnerUtilities.ExecMSBuild(String.Empty, out successfulExit);
-                successfulExit.ShouldBeTrue();
+            string output = RunnerUtilities.ExecMSBuild(string.Empty, out var successfulExit);
+            successfulExit.ShouldBeTrue();
 
-                output.ShouldContain("[A=1]");
-            }
-            finally
-            {
-                Directory.SetCurrentDirectory(currentDirectory);
-                File.Delete(projectPath);
-                File.Delete(rspPath);
-                FileUtilities.DeleteWithoutTrailingBackslash(directory);
-            }
+            output.ShouldContain("[A=1]");
         }
 
         /// <summary>
@@ -935,8 +913,7 @@ public void ResponseFileInProjectDirectoryExplicit()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                bool successfulExit;
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=1]");
@@ -971,8 +948,7 @@ public void ResponseFileInProjectDirectoryRandomName()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                bool successfulExit;
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=]");
@@ -1008,8 +984,7 @@ public void ResponseFileInProjectDirectoryCommandLineWins()
 
                 var msbuildParameters = "\"" + projectPath + "\"" + " /p:A=2";
 
-                bool successfulExit;
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=2]");
@@ -1054,8 +1029,7 @@ public void ResponseFileInProjectDirectoryWinsOverMainMSBuildRsp()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                bool successfulExit;
-                string output = RunnerUtilities.ExecMSBuild(exePath, msbuildParameters, out successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(exePath, msbuildParameters, out var successfulExit);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=1]");
@@ -1090,8 +1064,7 @@ public void ProjectDirectoryIsMSBuildExeDirectory()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                bool successfulExit;
-                string output = RunnerUtilities.ExecMSBuild(exePath, msbuildParameters, out successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(exePath, msbuildParameters, out var successfulExit);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=1]");
@@ -1124,8 +1097,7 @@ public void ResponseFileInProjectDirectoryItselfWithNoAutoResponseSwitch()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                bool successfulExit;
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
                 successfulExit.ShouldBeFalse();
 
                 output.ShouldContain("MSB1027"); // msbuild.rsp cannot have /noautoresponse in it
@@ -1160,8 +1132,7 @@ public void ResponseFileInProjectDirectoryButCommandLineNoAutoResponseSwitch()
 
                 var msbuildParameters = "\"" + projectPath + "\" /noautoresponse";
 
-                bool successfulExit;
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=]");
@@ -1193,8 +1164,7 @@ public void ResponseFileInProjectDirectoryNullCase()
 
                 var msbuildParameters = "\"" + projectPath + "\"";
 
-                bool successfulExit;
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out successfulExit);
+                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
                 successfulExit.ShouldBeTrue();
 
                 output.ShouldContain("[A=]");
@@ -1213,22 +1183,19 @@ public void ResponseFileInProjectDirectoryNullCase()
         [Fact]
         public void ResponseFileSupportsThisFileDirectory()
         {
-            using (var env = UnitTests.TestEnvironment.Create())
-            {
-                var content = ObjectModelHelpers.CleanupFileContents(
-                    "<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'><Target Name='t'><Warning Text='[A=$(A)]'/></Target></Project>");
+            var content = ObjectModelHelpers.CleanupFileContents(
+                "<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'><Target Name='t'><Warning Text='[A=$(A)]'/></Target></Project>");
 
-                var directory = env.CreateFolder();
-                directory.CreateFile("Directory.Build.rsp", "/p:A=%MSBuildThisFileDirectory%");
-                var projectPath = directory.CreateFile("my.proj", content).Path;
+            var directory = _env.CreateFolder();
+            directory.CreateFile("Directory.Build.rsp", "/p:A=%MSBuildThisFileDirectory%");
+            var projectPath = directory.CreateFile("my.proj", content).Path;
 
-                var msbuildParameters = "\"" + projectPath + "\"";
+            var msbuildParameters = "\"" + projectPath + "\"";
 
-                string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
-                successfulExit.ShouldBeTrue();
+            string output = RunnerUtilities.ExecMSBuild(msbuildParameters, out var successfulExit);
+            successfulExit.ShouldBeTrue();
 
-                output.ShouldContain($"[A={directory.Path}{Path.DirectorySeparatorChar}]");
-            }
+            output.ShouldContain($"[A={directory.Path}{Path.DirectorySeparatorChar}]");
         }
 
         /// <summary>
@@ -1254,7 +1221,7 @@ public void NormalPriorityBuild()
 
         private void RunPriorityBuildTest(ProcessPriorityClass expectedPrority, params string[] arguments)
         {
-            string[] aggregateArguments = arguments.Union(new string[] { " /nr:false /v:diag "}).ToArray();
+            string[] aggregateArguments = arguments.Union(new[] { " /nr:false /v:diag "}).ToArray();
 
             string contents = ObjectModelHelpers.CleanupFileContents(@"
 <Project DefaultTargets=""Build"" xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
@@ -1275,7 +1242,7 @@ private void RunPriorityBuildTest(ProcessPriorityClass expectedPrority, params s
 
             string logContents = ExecuteMSBuildExeExpectSuccess(contents, envsToCreate: environmentVars, arguments: aggregateArguments);
 
-            string expected = string.Format(@"Task priority is '{0}'", expectedPrority);
+            string expected = $@"Task priority is '{expectedPrority}'";
             logContents.ShouldContain(expected, () => logContents);
         }
 
@@ -1283,11 +1250,11 @@ private void RunPriorityBuildTest(ProcessPriorityClass expectedPrority, params s
         /// Test the default file to build in cases involving at least one solution filter file.
         /// </summary>
         [Theory]
-        [InlineData(new string[] { "my.proj", "my.sln", "my.slnf" }, "my.sln")]
-        [InlineData(new string[] { "abc.proj", "bcd.csproj", "slnf.slnf", "other.slnf" }, "abc.proj")]
-        [InlineData(new string[] { "abc.sln", "slnf.slnf", "abc.slnf" }, "abc.sln")]
-        [InlineData(new string[] { "abc.csproj", "abc.slnf", "not.slnf" }, "abc.csproj")]
-        [InlineData(new string[] { "abc.slnf" }, "abc.slnf")]
+        [InlineData(new[] { "my.proj", "my.sln", "my.slnf" }, "my.sln")]
+        [InlineData(new[] { "abc.proj", "bcd.csproj", "slnf.slnf", "other.slnf" }, "abc.proj")]
+        [InlineData(new[] { "abc.sln", "slnf.slnf", "abc.slnf" }, "abc.sln")]
+        [InlineData(new[] { "abc.csproj", "abc.slnf", "not.slnf" }, "abc.csproj")]
+        [InlineData(new[] { "abc.slnf" }, "abc.slnf")]
         public void TestDefaultBuildWithSolutionFilter(string[] projects, string answer)
         {
             string[] extensionsToIgnore = Array.Empty<string>();
@@ -1304,10 +1271,10 @@ public void TestDefaultBuildWithSolutionFilter(string[] projects, string answer)
         [Fact]
         public void TestProcessProjectSwitchOneProjNotFoundExtension()
         {
-            string[] projects = new string[] { "my.proj" };
-            string[] extensionsToIgnore = new string[] { ".phantomextension" };
+            string[] projects = { "my.proj" };
+            string[] extensionsToIgnore = { ".phantomextension" };
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
         }
 
         /// <summary>
@@ -1316,10 +1283,10 @@ public void TestProcessProjectSwitchOneProjNotFoundExtension()
         [Fact]
         public void TestTwoIdenticalExtensionsToIgnore()
         {
-            string[] projects = new string[] { "my.proj" };
-            string[] extensionsToIgnore = new string[] { ".phantomextension", ".phantomextension" };
+            string[] projects = { "my.proj" };
+            string[] extensionsToIgnore = { ".phantomextension", ".phantomextension" };
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
         }
 
         /// <summary>
@@ -1328,13 +1295,13 @@ public void TestTwoIdenticalExtensionsToIgnore()
         [Fact]
         public void TestProcessProjectSwitchNullandEmptyProjectsToIgnore()
         {
-            string[] projects = new string[] { "my.proj" };
+            string[] projects = { "my.proj" };
             string[] extensionsToIgnore = null;
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
 
             extensionsToIgnore = new string[] { };
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
         }
 
         /// <summary>
@@ -1345,10 +1312,10 @@ public void TestProcessProjectSwitchNullInList()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = new string[] { "my.proj" };
-                string[] extensionsToIgnore = new string[] { ".phantomextension", null };
+                string[] projects = { "my.proj" };
+                string[] extensionsToIgnore = { ".phantomextension", null };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
             }
            );
         }
@@ -1361,10 +1328,10 @@ public void TestProcessProjectSwitchEmptyInList()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = new string[] { "my.proj" };
-                string[] extensionsToIgnore = new string[] { ".phantomextension", string.Empty };
+                string[] projects = { "my.proj" };
+                string[] extensionsToIgnore = { ".phantomextension", string.Empty };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
             }
            );
         }
@@ -1376,10 +1343,10 @@ public void TestProcessProjectSwitchExtensionWithoutDot()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = new string[] { "my.proj" };
-                string[] extensionsToIgnore = new string[] { "phantomextension" };
+                string[] projects = { "my.proj" };
+                string[] extensionsToIgnore = { "phantomextension" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase);
+                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase);
             }
            );
         }
@@ -1391,10 +1358,10 @@ public void TestProcessProjectSwitchMalformed()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = new string[] { "my.proj" };
-                string[] extensionsToIgnore = new string[] { ".C:\\boocatmoo.a" };
+                string[] projects = { "my.proj" };
+                string[] extensionsToIgnore = { ".C:\\boocatmoo.a" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
             }
            );
         }
@@ -1406,65 +1373,65 @@ public void TestProcessProjectSwitchWildcards()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = new string[] { "my.proj" };
-                string[] extensionsToIgnore = new string[] { ".proj*", ".nativeproj?" };
+                string[] projects = { "my.proj" };
+                string[] extensionsToIgnore = { ".proj*", ".nativeproj?" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
         [Fact]
         public void TestProcessProjectSwitch()
         {
-            string[] projects = new string[] { "test.nativeproj", "test.vcproj" };
-            string[] extensionsToIgnore = new string[] { ".phantomextension", ".vcproj" };
+            string[] projects = { "test.nativeproj", "test.vcproj" };
+            string[] extensionsToIgnore = { ".phantomextension", ".vcproj" };
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.nativeproj", StringCompareShould.IgnoreCase); // "Expected test.nativeproj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.nativeproj", StringCompareShould.IgnoreCase); // "Expected test.nativeproj to be only project found"
 
-            projects = new string[] { "test.nativeproj", "test.vcproj", "test.proj" };
-            extensionsToIgnore = new string[] { ".phantomextension", ".vcproj" };
+            projects = new[] { "test.nativeproj", "test.vcproj", "test.proj" };
+            extensionsToIgnore = new[] { ".phantomextension", ".vcproj" };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
 
-            projects = new string[] { "test.nativeproj", "test.vcproj" };
-            extensionsToIgnore = new string[] { ".vcproj" };
+            projects = new[] { "test.nativeproj", "test.vcproj" };
+            extensionsToIgnore = new[] { ".vcproj" };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.nativeproj", StringCompareShould.IgnoreCase); // "Expected test.nativeproj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.nativeproj", StringCompareShould.IgnoreCase); // "Expected test.nativeproj to be only project found"
 
-            projects = new string[] { "test.proj", "test.sln" };
-            extensionsToIgnore = new string[] { ".vcproj" };
+            projects = new[] { "test.proj", "test.sln" };
+            extensionsToIgnore = new[] { ".vcproj" };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
 
-            projects = new string[] { "test.proj", "test.sln", "test.proj~", "test.sln~" };
+            projects = new[] { "test.proj", "test.sln", "test.proj~", "test.sln~" };
             extensionsToIgnore = new string[] { };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
 
-            projects = new string[] { "test.proj" };
+            projects = new[] { "test.proj" };
             extensionsToIgnore = new string[] { };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
 
-            projects = new string[] { "test.proj", "test.proj~" };
+            projects = new[] { "test.proj", "test.proj~" };
             extensionsToIgnore = new string[] { };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
 
-            projects = new string[] { "test.sln" };
+            projects = new[] { "test.sln" };
             extensionsToIgnore = new string[] { };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
 
-            projects = new string[] { "test.sln", "test.sln~" };
+            projects = new[] { "test.sln", "test.sln~" };
             extensionsToIgnore = new string[] { };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
 
-            projects = new string[] { "test.sln~", "test.sln" };
+            projects = new[] { "test.sln~", "test.sln" };
             extensionsToIgnore = new string[] { };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
         }
 
         /// <summary>
@@ -1473,10 +1440,10 @@ public void TestProcessProjectSwitch()
         [Fact]
         public void TestProcessProjectSwitchReplicateBuildingDFLKG()
         {
-            string[] projects = new string[] { "test.proj", "test.sln", "Foo.vcproj" };
+            string[] projects = { "test.proj", "test.sln", "Foo.vcproj" };
             string[] extensionsToIgnore = { ".sln", ".vcproj" };
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj"); // "Expected test.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj"); // "Expected test.proj to be only project found"
         }
 
         /// <summary>
@@ -1487,12 +1454,10 @@ public void TestProcessProjectSwitchRemovedAllprojects()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects;
-                string[] extensionsToIgnore = null;
-                projects = new string[] { "test.nativeproj", "test.vcproj" };
-                extensionsToIgnore = new string[] { ".nativeproj", ".vcproj" };
+                var projects = new[] { "test.nativeproj", "test.vcproj" };
+                var extensionsToIgnore = new[] { ".nativeproj", ".vcproj" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1504,10 +1469,10 @@ public void TestProcessProjectSwitchSlnProjDifferentNames()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = new string[] { "test.proj", "Different.sln" };
+                string[] projects = { "test.proj", "Different.sln" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1519,10 +1484,10 @@ public void TestProcessProjectSwitchTwoProj()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = new string[] { "test.proj", "Different.proj" };
+                string[] projects = { "test.proj", "Different.proj" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1534,10 +1499,10 @@ public void TestProcessProjectSwitchTwoNative()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = new string[] { "test.nativeproj", "Different.nativeproj" };
+                string[] projects = { "test.nativeproj", "Different.nativeproj" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1549,10 +1514,10 @@ public void TestProcessProjectSwitchTwoSolutions()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = new string[] { "test.sln", "Different.sln" };
+                string[] projects = { "test.sln", "Different.sln" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1564,10 +1529,10 @@ public void TestProcessProjectSwitchMoreThenTwoProj()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = new string[] { "test.nativeproj", "Different.csproj", "Another.proj" };
+                string[] projects = { "test.nativeproj", "Different.csproj", "Another.proj" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1579,10 +1544,10 @@ public void TestProcessProjectSwitchNoProjectOrSolution()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = new string[] { };
+                string[] projects = { };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[0] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1591,7 +1556,7 @@ public void TestProcessProjectSwitchNoProjectOrSolution()
         /// </summary>
         internal class IgnoreProjectExtensionsHelper
         {
-            private List<string> _directoryFileNameList;
+            private readonly List<string> _directoryFileNameList;
 
             /// <summary>
             /// Takes in a list of file names to simulate as being in a directory
@@ -1618,14 +1583,14 @@ internal string[] GetFiles(string path, string searchPattern)
                 List<string> fileNamesToReturn = new List<string>();
                 foreach (string file in _directoryFileNameList)
                 {
-                    if (String.Equals(searchPattern, "*.sln", StringComparison.OrdinalIgnoreCase))
+                    if (string.Equals(searchPattern, "*.sln", StringComparison.OrdinalIgnoreCase))
                     {
                         if (FileUtilities.IsSolutionFilename(file))
                         {
                             fileNamesToReturn.Add(file);
                         }
                     }
-                    else if (String.Equals(searchPattern, "*.*proj", StringComparison.OrdinalIgnoreCase))
+                    else if (string.Equals(searchPattern, "*.*proj", StringComparison.OrdinalIgnoreCase))
                     {
                         if (Path.GetExtension(file).Contains("proj"))
                         {
@@ -1759,7 +1724,7 @@ public void TestProcessFileLoggerSwitch3()
             distributedLoggerRecords = new List<DistributedLoggerRecord>();
 
             loggers = new List<ILogger>();
-            fileLoggerParameters = new string[1] { "Parameter" };
+            fileLoggerParameters = new[] { "Parameter" };
             MSBuildApp.ProcessDistributedFileLogger
                        (
                            distributedFileLogger,
@@ -1774,7 +1739,7 @@ public void TestProcessFileLoggerSwitch3()
             distributedLoggerRecords = new List<DistributedLoggerRecord>();
 
             loggers = new List<ILogger>();
-            fileLoggerParameters = new string[2] { "Parameter1", "Parameter" };
+            fileLoggerParameters = new[] { "Parameter1", "Parameter" };
             MSBuildApp.ProcessDistributedFileLogger
                        (
                            distributedFileLogger,
@@ -1814,7 +1779,7 @@ public void TestProcessFileLoggerSwitch4()
             distributedLoggerRecords = new List<DistributedLoggerRecord>();
 
             loggers = new List<ILogger>();
-            fileLoggerParameters = new string[1] { "verbosity=Normal;" };
+            fileLoggerParameters = new[] { "verbosity=Normal;" };
             MSBuildApp.ProcessDistributedFileLogger
                        (
                            distributedFileLogger,
@@ -1831,7 +1796,7 @@ public void TestProcessFileLoggerSwitch4()
             distributedLoggerRecords = new List<DistributedLoggerRecord>();
 
             loggers = new List<ILogger>();
-            fileLoggerParameters = new string[2] { "verbosity=Normal", "" };
+            fileLoggerParameters = new[] { "verbosity=Normal", "" };
             MSBuildApp.ProcessDistributedFileLogger
                        (
                            distributedFileLogger,
@@ -1848,7 +1813,7 @@ public void TestProcessFileLoggerSwitch4()
             distributedLoggerRecords = new List<DistributedLoggerRecord>();
 
             loggers = new List<ILogger>();
-            fileLoggerParameters = new string[2] { "", "Parameter1" };
+            fileLoggerParameters = new[] { "", "Parameter1" };
             MSBuildApp.ProcessDistributedFileLogger
                        (
                            distributedFileLogger,
@@ -1865,7 +1830,7 @@ public void TestProcessFileLoggerSwitch4()
             distributedLoggerRecords = new List<DistributedLoggerRecord>();
 
             loggers = new List<ILogger>();
-            fileLoggerParameters = new string[2] { "Parameter1", "verbosity=Normal;logfile=" + (NativeMethodsShared.IsWindows ? "c:\\temp\\cat.log" : "/tmp/cat.log") };
+            fileLoggerParameters = new[] { "Parameter1", "verbosity=Normal;logfile=" + (NativeMethodsShared.IsWindows ? "c:\\temp\\cat.log" : "/tmp/cat.log") };
             MSBuildApp.ProcessDistributedFileLogger
                        (
                            distributedFileLogger,
@@ -1880,7 +1845,7 @@ public void TestProcessFileLoggerSwitch4()
 
             distributedLoggerRecords = new List<DistributedLoggerRecord>();
             loggers = new List<ILogger>();
-            fileLoggerParameters = new string[2] { "Parameter1", "verbosity=Normal;logfile=" + Path.Combine("..", "cat.log") + ";Parameter1" };
+            fileLoggerParameters = new[] { "Parameter1", "verbosity=Normal;logfile=" + Path.Combine("..", "cat.log") + ";Parameter1" };
             MSBuildApp.ProcessDistributedFileLogger
                        (
                            distributedFileLogger,
@@ -1895,7 +1860,7 @@ public void TestProcessFileLoggerSwitch4()
 
             loggers = new List<ILogger>();
             distributedLoggerRecords = new List<DistributedLoggerRecord>();
-            fileLoggerParameters = new string[6] { "Parameter1", ";Parameter;", "", ";", ";Parameter", "Parameter;" };
+            fileLoggerParameters = new[] { "Parameter1", ";Parameter;", "", ";", ";Parameter", "Parameter;" };
             MSBuildApp.ProcessDistributedFileLogger
                        (
                            distributedFileLogger,
@@ -1937,8 +1902,8 @@ public void ProcessConsoleLoggerSwitches()
         {
             var loggers = new List<ILogger>();
             LoggerVerbosity verbosity = LoggerVerbosity.Normal;
-            List<DistributedLoggerRecord> distributedLoggerRecords = new List<DistributedLoggerRecord>(); 
-            string[] consoleLoggerParameters = new string[6] { "Parameter1", ";Parameter;", "", ";", ";Parameter", "Parameter;" };
+            List<DistributedLoggerRecord> distributedLoggerRecords = new List<DistributedLoggerRecord>();
+            string[] consoleLoggerParameters = { "Parameter1", ";Parameter;", "", ";", ";Parameter", "Parameter;" };
 
             MSBuildApp.ProcessConsoleLoggerSwitch
                        (
@@ -1991,7 +1956,7 @@ public void RestoreFirstReevaluatesImportGraph()
   <PropertyGroup>
     <RestoreFirstProps>{Guid.NewGuid():N}.props</RestoreFirstProps>
   </PropertyGroup>
-  
+
   <Import Project=""$(RestoreFirstProps)"" Condition=""Exists($(RestoreFirstProps))""/>
 
   <Target Name=""Build"">
@@ -2003,10 +1968,10 @@ public void RestoreFirstReevaluatesImportGraph()
     <ItemGroup>
       <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
     </ItemGroup>
-    
+
     <WriteLinesToFile File=""$(RestoreFirstProps)"" Lines=""@(Lines)"" Overwrite=""true"" />
   </Target>
-  
+
 </Project>");
 
             string logContents = ExecuteMSBuildExeExpectSuccess(projectContents, arguments: "/restore");
@@ -2026,7 +1991,7 @@ public void RestoreFirstClearsProjectRootElementCache()
   <PropertyGroup>
     <RestoreFirstProps>{restoreFirstProps}</RestoreFirstProps>
   </PropertyGroup>
-  
+
   <Import Project=""$(RestoreFirstProps)"" Condition=""Exists($(RestoreFirstProps))""/>
 
   <Target Name=""Build"">
@@ -2039,10 +2004,10 @@ public void RestoreFirstClearsProjectRootElementCache()
     <ItemGroup>
       <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid2}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
     </ItemGroup>
-    
+
     <WriteLinesToFile File=""$(RestoreFirstProps)"" Lines=""@(Lines)"" Overwrite=""true"" />
   </Target>
-  
+
 </Project>");
 
             IDictionary<string, string> preExistingProps = new Dictionary<string, string>
@@ -2073,7 +2038,7 @@ public void RestoreIgnoresMissingImports()
   <PropertyGroup>
     <RestoreFirstProps>{restoreFirstProps}</RestoreFirstProps>
   </PropertyGroup>
-  
+
   <Import Project=""$(RestoreFirstProps)"" />
 
   <Target Name=""Build"">
@@ -2086,10 +2051,10 @@ public void RestoreIgnoresMissingImports()
     <ItemGroup>
       <Lines Include=""&lt;Project ToolsVersion=&quot;Current&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;&lt;PropertyGroup&gt;&lt;PropertyA&gt;{guid2}&lt;/PropertyA&gt;&lt;/PropertyGroup&gt;&lt;/Project&gt;"" />
     </ItemGroup>
-    
+
     <WriteLinesToFile File=""$(RestoreFirstProps)"" Lines=""@(Lines)"" Overwrite=""true"" />
   </Target>
-  
+
 </Project>");
 
             IDictionary<string, string> preExistingProps = new Dictionary<string, string>
@@ -2186,18 +2151,15 @@ public void MissingOptionalLoggersAreIgnored(string logger)
                 "<Project>" +
                 "<Target Name=\"t\"><Message Text=\"Hello\"/></Target>" +
                 "</Project>";
-            using (var env = UnitTests.TestEnvironment.Create())
-            {
-                var tempDir = env.CreateFolder();
-                var projectFile = tempDir.CreateFile("missingloggertest.proj", projectString);
+            var tempDir = _env.CreateFolder();
+            var projectFile = tempDir.CreateFile("missingloggertest.proj", projectString);
 
-                var parametersLoggerOptional = $"{logger} -verbosity:diagnostic \"{projectFile.Path}\"";
+            var parametersLoggerOptional = $"{logger} -verbosity:diagnostic \"{projectFile.Path}\"";
 
-                var output = RunnerUtilities.ExecMSBuild(parametersLoggerOptional, out bool successfulExit, _output);
-                successfulExit.ShouldBe(true);
-                output.ShouldContain("Hello", output);
-                output.ShouldContain("The specified logger could not be created and will not be used.", output);
-            }
+            var output = RunnerUtilities.ExecMSBuild(parametersLoggerOptional, out bool successfulExit, _output);
+            successfulExit.ShouldBe(true);
+            output.ShouldContain("Hello", output);
+            output.ShouldContain("The specified logger could not be created and will not be used.", output);
         }
 
         [Theory]
@@ -2211,7 +2173,7 @@ public void InteractiveSetsBuiltInProperty(string arguments)
   <Target Name=""Build"">
     <Message Text=""MSBuildInteractive = [$(MSBuildInteractive)]"" />
   </Target>
-  
+
 </Project>");
 
             string logContents = ExecuteMSBuildExeExpectSuccess(projectContents, arguments: arguments);
@@ -2225,60 +2187,155 @@ public void InteractiveSetsBuiltInProperty(string arguments)
         [Fact]
         public void BinaryLogContainsImportedFiles()
         {
-            using (TestEnvironment testEnvironment = UnitTests.TestEnvironment.Create())
-            {
-                var testProject = testEnvironment.CreateFile("Importer.proj", ObjectModelHelpers.CleanupFileContents(@"
-                <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
-                    <Import Project=""TestProject.proj"" />
+            var testProject = _env.CreateFile("Importer.proj", ObjectModelHelpers.CleanupFileContents(@"
+            <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+                <Import Project=""TestProject.proj"" />
 
-                    <Target Name=""Build"">
-                    </Target>
-  
-                </Project>"));
+                <Target Name=""Build"">
+                </Target>
 
-                testEnvironment.CreateFile("TestProject.proj", @"
-                <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
-                  <Target Name=""Build"">
-                    <Message Text=""Hello from TestProject!"" />
-                  </Target>
-                </Project>
-                ");
+            </Project>"));
 
-                string binLogLocation = testEnvironment.DefaultTestDirectory.Path;
+            _env.CreateFile("TestProject.proj", @"
+            <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+              <Target Name=""Build"">
+                <Message Text=""Hello from TestProject!"" />
+              </Target>
+            </Project>
+            ");
 
-                string output = RunnerUtilities.ExecMSBuild($"\"{testProject.Path}\" \"/bl:{binLogLocation}/output.binlog\"", out var success, _output);
+            string binLogLocation = _env.DefaultTestDirectory.Path;
 
-                success.ShouldBeTrue(output);
+            string output = RunnerUtilities.ExecMSBuild($"\"{testProject.Path}\" \"/bl:{binLogLocation}/output.binlog\"", out var success, _output);
 
-                RunnerUtilities.ExecMSBuild($"\"{binLogLocation}/output.binlog\" \"/bl:{binLogLocation}/replay.binlog;ProjectImports=ZipFile\"", out success, _output);
+            success.ShouldBeTrue(output);
 
-                using (ZipArchive archive = ZipFile.OpenRead($"{binLogLocation}/replay.ProjectImports.zip"))
-                {
-                     archive.Entries.ShouldContain(e => e.FullName.EndsWith(".proj", StringComparison.OrdinalIgnoreCase), 2);
-                }
-            }
+            RunnerUtilities.ExecMSBuild($"\"{binLogLocation}/output.binlog\" \"/bl:{binLogLocation}/replay.binlog;ProjectImports=ZipFile\"", out success, _output);
+
+            using ZipArchive archive = ZipFile.OpenRead($"{binLogLocation}/replay.ProjectImports.zip");
+            archive.Entries.ShouldContain(e => e.FullName.EndsWith(".proj", StringComparison.OrdinalIgnoreCase), 2);
         }
 
         [Fact]
         public void EndToEndWarnAsErrors()
         {
-            using TestEnvironment testEnvironment = UnitTests.TestEnvironment.Create();
-
             string projectContents = ObjectModelHelpers.CleanupFileContents(@"<Project>
 
   <Target Name=""IssueWarning"">
     <Warning Text=""Warning!"" />
   </Target>
-  
+
 </Project>");
 
-            TransientTestProjectWithFiles testProject = testEnvironment.CreateTestProjectWithFiles(projectContents);
+            TransientTestProjectWithFiles testProject = _env.CreateTestProjectWithFiles(projectContents);
 
             RunnerUtilities.ExecMSBuild($"\"{testProject.ProjectFile}\" -warnaserror", out bool success, _output);
 
             success.ShouldBeFalse();
         }
 
+        [Trait("Category", "netcore-osx-failing")]
+        [Trait("Category", "netcore-linux-failing")]
+        [Fact]
+        public void BuildSlnOutOfProc()
+        {
+            string solutionFileContents =
+@"Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio Version 16
+Project('{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}') = 'TestProject', 'TestProject.proj', '{6185CC21-BE89-448A-B3C0-D1C27112E595}'
+EndProject
+Global
+GlobalSection(SolutionConfigurationPlatforms) = preSolution
+    Debug|Mixed Platforms = Debug|Mixed Platforms
+    Release|Any CPU = Release|Any CPU
+EndGlobalSection
+GlobalSection(ProjectConfigurationPlatforms) = postSolution
+    {6185CC21-BE89-448A-B3C0-D1C27112E595}.Debug|Mixed Platforms.ActiveCfg = CSConfig1|Any CPU
+    {6185CC21-BE89-448A-B3C0-D1C27112E595}.Debug|Mixed Platforms.Build.0 = CSConfig1|Any CPU
+EndGlobalSection
+EndGlobal
+                ".Replace("'", "\"");
+
+            var testSolution = _env.CreateFile("TestSolution.sln", ObjectModelHelpers.CleanupFileContents(solutionFileContents));
+
+            string testMessage = "Hello from TestProject!";
+            _env.CreateFile("TestProject.proj", @$"
+            <Project xmlns=""http://schemas.microsoft.com/developer/msbuild/2003"">
+              <Target Name=""Build"">
+                <Message Text=""{testMessage}"" />
+              </Target>
+            </Project>
+            ");
+
+            _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", "1");
+
+            string output = RunnerUtilities.ExecMSBuild($"\"{testSolution.Path}\" /p:Configuration=Debug", out var success, _output);
+
+            success.ShouldBeTrue(output);
+            output.ShouldContain(testMessage);
+        }
+
+        /// <summary>
+        /// Helper task used by <see cref="EndToEndMinimumMessageImportance"/> to verify <see cref="TaskLoggingHelper.LogsMessagesOfImportance"/>.
+        /// </summary>
+        public class MessageImportanceCheckingTask : Task
+        {
+            public int ExpectedMinimumMessageImportance { get; set; }
+
+            public override bool Execute()
+            {
+                bool shouldLogHigh = Log.LogsMessagesOfImportance(MessageImportance.High);
+                bool shouldLogNormal = Log.LogsMessagesOfImportance(MessageImportance.Normal);
+                bool shouldLogLow = Log.LogsMessagesOfImportance(MessageImportance.Low);
+                return (MessageImportance)ExpectedMinimumMessageImportance switch
+                {
+                    MessageImportance.High - 1 => !shouldLogHigh && !shouldLogNormal && !shouldLogLow,
+                    MessageImportance.High => shouldLogHigh && !shouldLogNormal && !shouldLogLow,
+                    MessageImportance.Normal => shouldLogHigh && shouldLogNormal && !shouldLogLow,
+                    MessageImportance.Low => shouldLogHigh && shouldLogNormal && shouldLogLow,
+                    _ => false
+                };
+            }
+        }
+
+        [Theory]
+        [InlineData("/v:diagnostic", MessageImportance.Low)]
+        [InlineData("/v:detailed", MessageImportance.Low)]
+        [InlineData("/v:normal", MessageImportance.Normal)]
+        [InlineData("/v:minimal", MessageImportance.High)]
+        [InlineData("/v:quiet", MessageImportance.High - 1)]
+        [InlineData("/v:diagnostic /bl", MessageImportance.Low)]
+        [InlineData("/v:detailed /bl", MessageImportance.Low)]
+        [InlineData("/v:normal /bl", MessageImportance.Low)] // v:normal but with binary logger so everything must be logged
+        [InlineData("/v:minimal /bl", MessageImportance.Low)] // v:minimal but with binary logger so everything must be logged
+        [InlineData("/v:quiet /bl", MessageImportance.Low)] // v:quiet but with binary logger so everything must be logged
+        public void EndToEndMinimumMessageImportance(string arguments, MessageImportance expectedMinimumMessageImportance)
+        {
+            using TestEnvironment testEnvironment = UnitTests.TestEnvironment.Create();
+
+            string projectContents = ObjectModelHelpers.CleanupFileContents(@"<Project>
+
+  <UsingTask TaskName=""" + typeof(MessageImportanceCheckingTask).FullName + @""" AssemblyFile=""" + Assembly.GetExecutingAssembly().Location + @"""/>
+
+  <Target Name=""CheckMessageImportance"">
+    <MessageImportanceCheckingTask ExpectedMinimumMessageImportance=""" + (int)expectedMinimumMessageImportance + @""" />
+  </Target>
+
+</Project>");
+
+            TransientTestProjectWithFiles testProject = testEnvironment.CreateTestProjectWithFiles(projectContents);
+
+            // Build in-proc.
+            RunnerUtilities.ExecMSBuild($"{arguments} \"{testProject.ProjectFile}\"", out bool success, _output);
+            success.ShouldBeTrue();
+
+            // Build out-of-proc to exercise both logging code paths.
+            testEnvironment.SetEnvironmentVariable("MSBUILDNOINPROCNODE", "1");
+            testEnvironment.SetEnvironmentVariable("MSBUILDDISABLENODEREUSE", "1");
+            RunnerUtilities.ExecMSBuild($"{arguments} \"{testProject.ProjectFile}\"", out success, _output);
+            success.ShouldBeTrue();
+        }
+
 #if FEATURE_ASSEMBLYLOADCONTEXT
         /// <summary>
         /// Ensure that tasks get loaded into their own <see cref="System.Runtime.Loader.AssemblyLoadContext"/>.
@@ -2372,32 +2429,32 @@ private string ExecuteMSBuildExeExpectFailure(string projectContents, IDictionar
 
         private (bool result, string output) ExecuteMSBuildExe(string projectContents, IDictionary<string, string> filesToCreate = null, IDictionary<string, string> envsToCreate = null, params string[] arguments)
         {
-            using (TestEnvironment testEnvironment = UnitTests.TestEnvironment.Create())
-            {
-                TransientTestProjectWithFiles testProject = testEnvironment.CreateTestProjectWithFiles(projectContents, new string[0]);
+            TransientTestProjectWithFiles testProject = _env.CreateTestProjectWithFiles(projectContents, new string[0]);
 
-                if (filesToCreate != null)
+            if (filesToCreate != null)
+            {
+                foreach (var item in filesToCreate)
                 {
-                    foreach (var item in filesToCreate)
-                    {
-                        File.WriteAllText(Path.Combine(testProject.TestRoot, item.Key), item.Value);
-                    }
+                    File.WriteAllText(Path.Combine(testProject.TestRoot, item.Key), item.Value);
                 }
+            }
 
-                if (envsToCreate != null)
+            if (envsToCreate != null)
+            {
+                foreach (var env in envsToCreate)
                 {
-                    foreach (var env in envsToCreate)
-                    {
-                        testEnvironment.SetEnvironmentVariable(env.Key, env.Value);
-                    }
+                    _env.SetEnvironmentVariable(env.Key, env.Value);
                 }
+            }
 
-                bool success;
+            string output = RunnerUtilities.ExecMSBuild($"\"{testProject.ProjectFile}\" {string.Join(" ", arguments)}", out var success, _output);
 
-                string output = RunnerUtilities.ExecMSBuild($"\"{testProject.ProjectFile}\" {String.Join(" ", arguments)}", out success, _output);
+            return (success, output);
+        }
 
-                return (success, output);
-            }
+        public void Dispose()
+        {
+            _env.Dispose();
         }
     }
 }
diff --git a/src/MSBuild/AssemblyInfo.cs b/src/MSBuild/AssemblyInfo.cs
index 63428b4c74e..67d13ed587e 100644
--- a/src/MSBuild/AssemblyInfo.cs
+++ b/src/MSBuild/AssemblyInfo.cs
@@ -13,14 +13,7 @@
 // so that we don't run into known security issues with loading libraries from unsafe locations 
 [assembly: DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
 
-// Needed for the "hub-and-spoke model to locate and retrieve localized resources": https://msdn.microsoft.com/en-us/library/21a15yht(v=vs.110).aspx
-// We want "en" to require a satellite assembly for debug builds in order to flush out localization
-// issues, but we want release builds to work without it. Also, .net core does not have resource fallbacks
-#if (DEBUG && !RUNTIME_TYPE_NETCORE)
-[assembly: NeutralResourcesLanguage("en", UltimateResourceFallbackLocation.Satellite)]
-#else
 [assembly: NeutralResourcesLanguage("en")]
-#endif
 
 [assembly: ComVisible(false)]
 [assembly: CLSCompliant(true)]
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 912ca4f12ef..93185ce820a 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -14,7 +14,7 @@
     <!-- Set RuntimeIdentifiers so that NuGet will restore for both AnyCPU as well as x86 and x64.
          This is important for the MSBuild.VSSetup project, which "references" both the x86 and x64
          versions of this project -->
-    <RuntimeIdentifiers>win7-x86;win7-x64</RuntimeIdentifiers>
+    <RuntimeIdentifiers Condition="'$(DotNetBuildFromSource)' != 'true'">win7-x86;win7-x64</RuntimeIdentifiers>
 
     <EnableDefaultItems>false</EnableDefaultItems>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
@@ -25,11 +25,17 @@
 
     <UseVSHostingProcess>false</UseVSHostingProcess>
     <ApplicationManifest>MSBuild.exe.manifest</ApplicationManifest>
+
     <AppConfig>app.config</AppConfig>
     <!-- Temporary solution for
          https://github.com/Microsoft/msbuild/issues/834 Long term
          two files should be generated from a single source. -->
     <AppConfig Condition="'$(Platform)' == 'x64'">app.amd64.config</AppConfig>
+    <!-- Disable binding redirect generation: we want to be deliberate
+         about the redirects we expose plugins to, and we explicitly
+         redirect ValueTuple _down_ to match VS. -->
+    <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>
+
     <IsPackable>true</IsPackable>
     <ContentTargetFolders>contentFiles</ContentTargetFolders>
     <BuildOutputTargetFolder>contentFiles\any\</BuildOutputTargetFolder>
diff --git a/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd b/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
index 6f5c50b7343..c032f6978c2 100644
--- a/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
+++ b/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd
@@ -1171,6 +1171,25 @@ elementFormDefault="qualified">
       </xs:simpleType>
     </xs:element>
     <xs:element name="AppConfigForCompiler" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
+    <xs:element name="ApplicationDefaultFont" type="msb:StringPropertyType" substitutionGroup="msb:Property">
+        <xs:annotation>
+            <xs:documentation><!-- _locID_text="ApplicationDefaultFont" _locComment="" -->Customizes the application default font. The format equivalent to the output of FontConverter.ConvertToInvariantString(). Applies only to Windows Forms projects.</xs:documentation>
+        </xs:annotation>
+    </xs:element>
+    <xs:element name="ApplicationHighDpiMode" substitutionGroup="msb:Property">
+      <xs:annotation>
+        <xs:documentation><!-- _locID_text="ApplicationHighDpiMode" _locComment="" -->Customizes the application DPI awareness mode. Applies only to Windows Forms projects.</xs:documentation>
+      </xs:annotation>
+      <xs:simpleType>
+        <xs:restriction base="xs:string">
+          <xs:enumeration value="SystemAware" />
+          <xs:enumeration value="PerMonitorV2" />
+          <xs:enumeration value="PerMonitor" />
+          <xs:enumeration value="DpiUnaware" />
+          <xs:enumeration value="DpiUnawareGdiScaled" />
+        </xs:restriction>
+      </xs:simpleType>
+    </xs:element>
     <xs:element name="ApplicationIcon" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
     <xs:element name="ApplicationRevision" type="msb:StringPropertyType" substitutionGroup="msb:Property">
         <xs:annotation>
@@ -1182,6 +1201,16 @@ elementFormDefault="qualified">
             <xs:documentation><!-- _locID_text="ApplicationVersion" _locComment="" -->Matches the expression "\d\.\d\.\d\.(\d|\*)"</xs:documentation>
         </xs:annotation>
     </xs:element>
+    <xs:element name="ApplicationUseCompatibleTextRendering" type="msb:boolean" substitutionGroup="msb:Property">
+        <xs:annotation>
+            <xs:documentation><!-- _locID_text="ApplicationUseCompatibleTextRendering" _locComment="" -->Indicates whether to set UseCompatibleTextRendering property defined on certain controls (boolean). Applies only to Windows Forms projects.</xs:documentation>
+        </xs:annotation>
+    </xs:element>
+    <xs:element name="ApplicationVisualStyles" type="msb:boolean" substitutionGroup="msb:Property">
+        <xs:annotation>
+            <xs:documentation><!-- _locID_text="ApplicationVisualStyles" _locComment="" -->Indicates whether to enable or disable visual styles (boolean). Applies only to Windows Forms projects.</xs:documentation>
+        </xs:annotation>
+    </xs:element>
     <xs:element name="AppDesignerFolder" type="msb:StringPropertyType" substitutionGroup="msb:Property">
         <xs:annotation>
             <xs:documentation><!-- _locID_text="AppDesignerFolder" _locComment="" -->Name of folder for Application Designer</xs:documentation>
@@ -1252,10 +1281,19 @@ elementFormDefault="qualified">
             <xs:documentation><!-- _locID_text="DebugSymbols" _locComment="" -->Whether to emit symbols (boolean)</xs:documentation>
         </xs:annotation>
     </xs:element>
-    <xs:element name="DebugType" type="msb:StringPropertyType" substitutionGroup="msb:Property">
+    <xs:element name="DebugType" substitutionGroup="msb:Property">
         <xs:annotation>
-            <xs:documentation><!-- _locID_text="DebugType" _locComment="" -->none, pdbonly, or full</xs:documentation>
+            <xs:documentation><!-- _locID_text="DebugType" _locComment="" -->none, pdbonly, embedded, portable, or full. From C# 6 onwards, pdbonly is the same as full.</xs:documentation>
         </xs:annotation>
+        <xs:simpleType>
+            <xs:restriction base="xs:string">
+              <xs:enumeration value="none" />
+              <xs:enumeration value="pdbonly" />
+              <xs:enumeration value="embedded" />
+              <xs:enumeration value="portable" />
+              <xs:enumeration value="full" />
+            </xs:restriction>
+        </xs:simpleType>
     </xs:element>
     <xs:element name="DefaultClientScript" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
     <xs:element name="DefaultHTMLPageLayout" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
@@ -1552,6 +1590,18 @@ elementFormDefault="qualified">
     <xs:element name="GenerateSerializationAssemblies" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
     <xs:element name="HostInBrowser" type="msb:boolean" substitutionGroup="msb:Property"/>
     <xs:element name="IgnoreImportLibrary" type="msb:boolean" substitutionGroup="msb:Property"/>
+    <xs:element name="ImplicitUsings" substitutionGroup="msb:Property">
+      <xs:annotation>
+        <xs:documentation><!-- _locID_text="ImplicitUsings" _locComment="" -->Enable implicit global usings for the C# project. Possible values are enable, true, and disable.</xs:documentation>
+      </xs:annotation>
+      <xs:simpleType>
+        <xs:restriction base="xs:string">
+          <xs:enumeration value="enable" />
+          <xs:enumeration value="true" />
+          <xs:enumeration value="disable" />
+        </xs:restriction>
+      </xs:simpleType>
+    </xs:element>
     <xs:element name="Install" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
     <xs:element name="InstallFrom" type="msb:StringPropertyType" substitutionGroup="msb:Property">
         <xs:annotation>
@@ -1799,6 +1849,11 @@ elementFormDefault="qualified">
         </xs:annotation>
     </xs:element>
     <xs:element name="RunPostBuildEvent" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
+    <xs:element name="SatelliteResourceLanguages" type="msb:StringPropertyType" substitutionGroup="msb:Property">
+        <xs:annotation>
+            <xs:documentation><!-- _locID_text="SatelliteResourceLanguages" _locComment="" -->Semi-colon separated list of culture names to preserve satellite resource assemblies during build and publish. Names must be a valid culture name (like en-US;it; or fr). If left empty, all satellite resource assemblies will be preserved. Defaults to empty.</xs:documentation>
+        </xs:annotation>
+    </xs:element>
     <xs:element name="SchemaVersion" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
     <xs:element name="SecureScoping" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
     <xs:element name="SignAssembly" type="msb:StringPropertyType" substitutionGroup="msb:Property"/>
@@ -5761,4 +5816,67 @@ elementFormDefault="qualified">
         </xs:complexType>
     </xs:element>
 
+    <xs:element name="Using" substitutionGroup="msb:Item">
+    <xs:annotation>
+      <xs:documentation>
+        <!-- _locID_text="Using" _locComment="" -->A C# global using to add to the project.
+      </xs:documentation>
+    </xs:annotation>
+    <xs:complexType>
+      <xs:complexContent>
+        <xs:extension base="msb:SimpleItemType">
+          <xs:attribute name="Include" type="xs:string">
+            <xs:annotation>
+              <xs:documentation>
+                <!-- _locID_text="Using_Include" _locComment="" -->The namespace or type identifier to add, e.g. Microsoft.AspNetCore
+              </xs:documentation>
+            </xs:annotation>
+          </xs:attribute>
+          <xs:attribute name="Alias" type="xs:string" use="optional">
+            <xs:annotation>
+              <xs:documentation>
+                <!-- _locID_text="Using_Alias" _locComment="" -->Optional alias for the namespace or type.
+              </xs:documentation>
+            </xs:annotation>
+          </xs:attribute>
+          <xs:attribute name="Static" type="msb:boolean" use="optional">
+            <xs:annotation>
+              <xs:documentation>
+                <!-- _locID_text="Using_Static" _locComment="" -->Determines whether the identifier should be registered as a static import.
+              </xs:documentation>
+            </xs:annotation>
+          </xs:attribute>
+        </xs:extension>
+      </xs:complexContent>
+    </xs:complexType>
+  </xs:element>
+
+  <xs:element name="InternalsVisibleTo" substitutionGroup="msb:Item">
+  <xs:annotation>
+    <xs:documentation>
+      <!-- _locID_text="InternalsVisibleTo" _locComment="" -->Specifies that internal types and members are visible to the specified friend assemblies.
+    </xs:documentation>
+  </xs:annotation>
+  <xs:complexType>
+      <xs:complexContent>
+        <xs:extension base="msb:SimpleItemType">
+          <xs:attribute name="Include" type="xs:string">
+            <xs:annotation>
+              <xs:documentation>
+                <!-- _locID_text="InternalsVisibleTo_Include" _locComment="" -->The name of the friend assembly to make internal types and members visible to.
+              </xs:documentation>
+            </xs:annotation>
+          </xs:attribute>
+          <xs:attribute name="PublicKey" type="xs:string" use="optional">
+            <xs:annotation>
+              <xs:documentation>
+                <!-- _locID_text="InternalsVisibleTo_PublicKey" _locComment="" -->Optional public key associated with the strong name signature of the friend assembly.
+              </xs:documentation>
+            </xs:annotation>
+          </xs:attribute>
+        </xs:extension>
+      </xs:complexContent>
+    </xs:complexType>
+  </xs:element>
+
 </xs:schema>
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 34adcd7cb25..6dc795d6762 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -33,7 +33,7 @@ internal class OutOfProcTaskHostNode :
 #if CLR2COMPATIBILITY
         IBuildEngine3
 #else
-        IBuildEngine9
+        IBuildEngine10
 #endif
     {
         /// <summary>
@@ -172,7 +172,7 @@ public OutOfProcTaskHostNode()
             // We don't know what the current build thinks this variable should be until RunTask(), but as a fallback in case there are
             // communications before we get the configuration set up, just go with what was already in the environment from when this node
             // was initially launched.
-            _debugCommunications = (Environment.GetEnvironmentVariable("MSBUILDDEBUGCOMM") == "1");
+            _debugCommunications = Traits.Instance.DebugNodeCommunication;
 
             _receivedPackets = new Queue<INodePacket>();
 
@@ -189,6 +189,10 @@ public OutOfProcTaskHostNode()
             thisINodePacketFactory.RegisterPacketHandler(NodePacketType.TaskHostConfiguration, TaskHostConfiguration.FactoryForDeserialization, this);
             thisINodePacketFactory.RegisterPacketHandler(NodePacketType.TaskHostTaskCancelled, TaskHostTaskCancelled.FactoryForDeserialization, this);
             thisINodePacketFactory.RegisterPacketHandler(NodePacketType.NodeBuildComplete, NodeBuildComplete.FactoryForDeserialization, this);
+
+#if !CLR2COMPATIBILITY
+            EngineServices = new EngineServicesImpl(this);
+#endif
         }
 
         #region IBuildEngine Implementation (Properties)
@@ -492,6 +496,39 @@ public void ReleaseCores(int coresToRelease)
         }
 
         #endregion
+
+        #region IBuildEngine10 Members
+
+        [Serializable]
+        private sealed class EngineServicesImpl : EngineServices
+        {
+            private readonly OutOfProcTaskHostNode _taskHost;
+
+            internal EngineServicesImpl(OutOfProcTaskHostNode taskHost)
+            {
+                _taskHost = taskHost;
+            }
+
+            /// <summary>
+            /// No logging verbosity optimization in OOP nodes.
+            /// </summary>
+            public override bool LogsMessagesOfImportance(MessageImportance importance) => true;
+
+            /// <inheritdoc />
+            public override bool IsTaskInputLoggingEnabled
+            {
+                get
+                {
+                    ErrorUtilities.VerifyThrow(_taskHost._currentConfiguration != null, "We should never have a null configuration during a BuildEngine callback!");
+                    return _taskHost._currentConfiguration.IsTaskInputLoggingEnabled;
+                }
+            }
+        }
+
+        public EngineServices EngineServices { get; }
+
+        #endregion
+
 #endif
 
         #region INodePacketFactory Members
diff --git a/src/MSBuild/Resources/Strings.resx b/src/MSBuild/Resources/Strings.resx
index 0d8f59307c4..61b9471ba63 100644
--- a/src/MSBuild/Resources/Strings.resx
+++ b/src/MSBuild/Resources/Strings.resx
@@ -1092,7 +1092,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
   <data name="UnsupportedOS" UESanitized="true" Visibility="Public">
-    <value>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</value>
+    <value>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</value>
     <comment>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</comment>
   </data>
   <data name="Using35Engine" UESanitized="true" Visibility="Public">
diff --git a/src/MSBuild/Resources/xlf/Strings.cs.xlf b/src/MSBuild/Resources/xlf/Strings.cs.xlf
index 5769d82fa59..683606d4fa8 100644
--- a/src/MSBuild/Resources/xlf/Strings.cs.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.cs.xlf
@@ -1330,8 +1330,8 @@ Copyright (C) Microsoft Corporation. V≈°echna pr√°va vyhrazena.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: MSBuild nejde spustit v t√©to verzi operaƒçn√≠ho syst√©mu. Podporuje se jenom v syst√©mech Windows 2000, Windows XP a novƒõj≈°√≠ch verz√≠ch.</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: MSBuild nejde spustit v t√©to verzi operaƒçn√≠ho syst√©mu. Podporuje se jenom v syst√©mech Windows 2000, Windows XP a novƒõj≈°√≠ch verz√≠ch.</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/Resources/xlf/Strings.de.xlf b/src/MSBuild/Resources/xlf/Strings.de.xlf
index 9ccad6d1801..a6d4afe3c64 100644
--- a/src/MSBuild/Resources/xlf/Strings.de.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.de.xlf
@@ -1322,8 +1322,8 @@ Copyright (C) Microsoft Corporation. Alle Rechte vorbehalten.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: MSBuild kann unter dieser Version des Betriebssystems nicht ausgef√ºhrt werden. Nur Windows 2000, Windows XP und Folgeversionen werden unterst√ºtzt.</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: MSBuild kann unter dieser Version des Betriebssystems nicht ausgef√ºhrt werden. Nur Windows 2000, Windows XP und Folgeversionen werden unterst√ºtzt.</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/Resources/xlf/Strings.en.xlf b/src/MSBuild/Resources/xlf/Strings.en.xlf
deleted file mode 100644
index c376c7e4b9d..00000000000
--- a/src/MSBuild/Resources/xlf/Strings.en.xlf
+++ /dev/null
@@ -1,1712 +0,0 @@
-Ôªø<?xml version="1.0" encoding="utf-8"?>
-<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
-  <file datatype="xml" source-language="en" target-language="en" original="../Strings.resx">
-    <body>
-      <trans-unit id="AmbiguousProjectError">
-        <source>MSBUILD : error MSB1011: Specify which project or solution file to use because this folder contains more than one project or solution file.</source>
-        <target state="new">MSBUILD : error MSB1011: Specify which project or solution file to use because this folder contains more than one project or solution file.</target>
-        <note>{StrBegin="MSBUILD : error MSB1011: "}UE: If no project or solution file is explicitly specified on the MSBuild.exe command-line, then the engine searches for a
-      project or solution file in the current directory by looking for *.*PROJ and *.SLN. If more than one file is found that matches this wildcard, we
-      fire this error.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="AmbiguousProjectDirectoryError">
-        <source>MSBUILD : error MSB1050: Specify which project or solution file to use because the folder "{0}" contains more than one project or solution file.</source>
-        <target state="new">MSBUILD : error MSB1050: Specify which project or solution file to use because the folder "{0}" contains more than one project or solution file.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1050: "}UE: If no project or solution file is explicitly specified on the MSBuild.exe command-line, then the engine searches for a
-      project or solution file in the current directory by looking for *.*PROJ and *.SLN. If more than one file is found that matches this wildcard, we
-      fire this error.
-      LOCALIZATION: The prefix "MSB1050 : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="CommandLine">
-        <source>Command line arguments = "{0}"</source>
-        <target state="new">Command line arguments = "{0}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ConfigurationFailurePrefixNoErrorCode">
-        <source>MSBUILD : Configuration error {0}: {1}</source>
-        <target state="new">MSBUILD : Configuration error {0}: {1}</target>
-        <note>{SubString="Configuration"}UE: This prefixes any error from reading the toolset definitions in msbuild.exe.config or the registry.
-      There's no error code because one was included in the error message.
-      LOCALIZATION: The word "Configuration" should be localized, the words "MSBuild" and "error" should NOT be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="CannotAutoDisableAutoResponseFile">
-        <source>MSBUILD : error MSB1027: The -noAutoResponse switch cannot be specified in the MSBuild.rsp auto-response file, nor in any response file that is referenced by the auto-response file.</source>
-        <target state="new">MSBUILD : error MSB1027: The -noAutoResponse switch cannot be specified in the MSBuild.rsp auto-response file, nor in any response file that is referenced by the auto-response file.</target>
-        <note>{StrBegin="MSBUILD : error MSB1027: "}LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:", "-noAutoResponse" and "MSBuild.rsp" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="CopyrightMessage">
-        <source>Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</source>
-        <target state="new">Microsoft (R) Build Engine version {0} for {1}
-Copyright (C) Microsoft Corporation. All rights reserved.
-</target>
-        <note>LOCALIZATION: {0} contains the DLL version number. {1} contains the name of a runtime, like ".NET Framework", ".NET Core", or "Mono"</note>
-      </trans-unit>
-      <trans-unit id="CurrentDirectory">
-        <source>Current directory = "{0}"</source>
-        <target state="new">Current directory = "{0}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="DuplicateOutputResultsCache">
-        <source>MSBUILD : error MSB1058: Only one output results cache can be specified.</source>
-        <target state="new">MSBUILD : error MSB1058: Only one output results cache can be specified.</target>
-        <note>{StrBegin="MSBUILD : error MSB1058: "}</note>
-      </trans-unit>
-      <trans-unit id="DuplicateProjectSwitchError">
-        <source>MSBUILD : error MSB1008: Only one project can be specified.</source>
-        <target state="new">MSBUILD : error MSB1008: Only one project can be specified.</target>
-        <note>{StrBegin="MSBUILD : error MSB1008: "}UE: This happens if the user does something like "msbuild.exe myapp.proj myapp2.proj". This is not allowed.
-    MSBuild.exe will only build a single project. The help topic may link to an article about how to author an MSBuild project
-    that itself launches MSBuild on a number of other projects.
-    LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="FatalError">
-        <source>MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</source>
-        <target state="new">MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.</target>
-        <note>{StrBegin="MSBUILD : error MSB1025: "}UE: This message is shown when the application has to terminate either because of a bug in the code, or because some
-      FX/CLR method threw an unexpected exception.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" and "MSBuild" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_1_Syntax">
-        <source>Syntax:              MSBuild.exe [options] [project file | directory]
-</source>
-        <target state="new">Syntax:              MSBuild.exe [options] [project file | directory]
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_2_Description">
-        <source>Description:         Builds the specified targets in the project file. If
-                     a project file is not specified, MSBuild searches the
-                     current working directory for a file that has a file
-                     extension that ends in "proj" and uses that file.  If
-                     a directory is specified, MSBuild searches that
-                     directory for a project file.
-</source>
-        <target state="new">Description:         Builds the specified targets in the project file. If
-                     a project file is not specified, MSBuild searches the
-                     current working directory for a file that has a file
-                     extension that ends in "proj" and uses that file.  If
-                     a directory is specified, MSBuild searches that
-                     directory for a project file.
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_34_InteractiveSwitch">
-        <source>  -interactive[:True|False]
-                     Indicates that actions in the build are allowed to
-                     interact with the user.  Do not use this argument
-                     in an automated scenario where interactivity is
-                     not expected.
-                     Specifying -interactive is the same as specifying
-                     -interactive:true.  Use the parameter to override a
-                     value that comes from a response file.
-    </source>
-        <target state="new">  -interactive[:True|False]
-                     Indicates that actions in the build are allowed to
-                     interact with the user.  Do not use this argument
-                     in an automated scenario where interactivity is
-                     not expected.
-                     Specifying -interactive is the same as specifying
-                     -interactive:true.  Use the parameter to override a
-                     value that comes from a response file.
-    </target>
-        <note>
-      LOCALIZATION: "-interactive" should not be localized.
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_35_IsolateProjectsSwitch">
-        <source>  -isolateProjects[:True|False]
-                     Causes MSBuild to build each project in isolation.
-
-                     This is a more restrictive mode of MSBuild as it requires
-                     that the project graph be statically discoverable at
-                     evaluation time, but can improve scheduling and reduce
-                     memory overhead when building a large set of projects.
-                     (Short form: -isolate)
-
-                     This flag is experimental and may not work as intended.
-    </source>
-        <target state="new">  -isolateProjects[:True|False]
-                     Causes MSBuild to build each project in isolation.
-
-                     This is a more restrictive mode of MSBuild as it requires
-                     that the project graph be statically discoverable at
-                     evaluation time, but can improve scheduling and reduce
-                     memory overhead when building a large set of projects.
-                     (Short form: -isolate)
-
-                     This flag is experimental and may not work as intended.
-    </target>
-        <note>
-      LOCALIZATION: "MSBuild" should not be localized.
-      LOCALIZATION: "-isolateProjects" should not be localized.
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.</note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_36_GraphBuildSwitch">
-        <source>  -graphBuild[:True|False]
-                     Causes MSBuild to construct and build a project graph.
-
-                     Constructing a graph involves identifying project
-                     references to form dependencies. Building that graph
-                     involves attempting to build project references prior
-                     to the projects that reference them, differing from
-                     traditional MSBuild scheduling.
-                     (Short form: -graph)
-
-                     This flag is experimental and may not work as intended.
-    </source>
-        <target state="new">  -graphBuild[:True|False]
-                     Causes MSBuild to construct and build a project graph.
-
-                     Constructing a graph involves identifying project
-                     references to form dependencies. Building that graph
-                     involves attempting to build project references prior
-                     to the projects that reference them, differing from
-                     traditional MSBuild scheduling.
-                     (Short form: -graph)
-
-                     This flag is experimental and may not work as intended.
-    </target>
-        <note>
-      LOCALIZATION: "MSBuild" should not be localized.
-      LOCALIZATION: "-graphBuild" and "-graph" should not be localized.
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_37_DocsLink">
-        <source>For more detailed information, see https://aka.ms/msbuild/docs</source>
-        <target state="new">For more detailed information, see https://aka.ms/msbuild/docs</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="HelpMessage_38_TargetsSwitch">
-        <source>  -targets[:file]
-                     Prints a list of available targets without executing the
-                     actual build process. By default the output is written to
-                     the console window. If the path to an output file
-                     is provided that will be used instead.
-                     (Short form: -ts)
-                     Example:
-                       -ts:out.txt
-    </source>
-        <target state="new">  -targets[:file]
-                     Prints a list of available targets without executing the
-                     actual build process. By default the output is written to
-                     the console window. If the path to an output file
-                     is provided that will be used instead.
-                     (Short form: -ts)
-                     Example:
-                       -ts:out.txt
-    </target>
-        <note>
-      LOCALIZATION: "MSBuild" should not be localized.
-      LOCALIZATION: "-targets" and "-ts" should not be localized.
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_39_LowPrioritySwitch">
-        <source>  -lowPriority[:True|False]
-                     Causes MSBuild to run at low process priority.
-
-                     Specifying -lowPriority is the same as specifying
-                     -lowPriority:True.
-                     (Short form: -low)
-    </source>
-        <target state="new">  -lowPriority[:True|False]
-                     Causes MSBuild to run at low process priority.
-
-                     Specifying -lowPriority is the same as specifying
-                     -lowPriority:True.
-                     (Short form: -low)
-    </target>
-        <note>
-      LOCALIZATION: "MSBuild" should not be localized.
-      LOCALIZATION: "-lowPriority" and "-low" should not be localized.
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_3_SwitchesHeader">
-        <source>Switches:            Note that you can specify switches using
-                     "-switch", "/switch" and "--switch".
-</source>
-        <target state="new">Switches:            Note that you can specify switches using
-                     "-switch", "/switch" and "--switch".
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_4_HelpSwitch">
-        <source>  -help              Display this usage message. (Short form: -? or -h)
-</source>
-        <target state="new">  -help              Display this usage message. (Short form: -? or -h)
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_5_NoLogoSwitch">
-        <source>  -noLogo            Do not display the startup banner and copyright message.
-</source>
-        <target state="new">  -noLogo            Do not display the startup banner and copyright message.
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_6_VersionSwitch">
-        <source>  -version           Display version information only. (Short form: -ver)
-</source>
-        <target state="new">  -version           Display version information only. (Short form: -ver)
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_7_ResponseFile">
-        <source>  @&lt;file&gt;            Insert command-line settings from a text file. To specify
-                     multiple response files, specify each response file
-                     separately.
-
-                     Any response files named "msbuild.rsp" are automatically
-                     consumed from the following locations:
-                     (1) the directory of msbuild.exe
-                     (2) the directory of the first project or solution built
-</source>
-        <target state="new">  @&lt;file&gt;            Insert command-line settings from a text file. To specify
-                     multiple response files, specify each response file
-                     separately.
-
-                     Any response files named "msbuild.rsp" are automatically
-                     consumed from the following locations:
-                     (1) the directory of msbuild.exe
-                     (2) the directory of the first project or solution built
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_8_NoAutoResponseSwitch">
-        <source>  -noAutoResponse    Do not auto-include any MSBuild.rsp files. (Short form:
-                     -noAutoRsp)
-</source>
-        <target state="new">  -noAutoResponse    Do not auto-include any MSBuild.rsp files. (Short form:
-                     -noAutoRsp)
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_9_TargetSwitch">
-        <source>  -target:&lt;targets&gt;  Build these targets in this project. Use a semicolon or a
-                     comma to separate multiple targets, or specify each
-                     target separately. (Short form: -t)
-                     Example:
-                       -target:Resources;Compile
-</source>
-        <target state="new">  -target:&lt;targets&gt;  Build these targets in this project. Use a semicolon or a
-                     comma to separate multiple targets, or specify each
-                     target separately. (Short form: -t)
-                     Example:
-                       -target:Resources;Compile
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_10_PropertySwitch">
-        <source>  -property:&lt;n&gt;=&lt;v&gt;  Set or override these project-level properties. &lt;n&gt; is
-                     the property name, and &lt;v&gt; is the property value. Use a
-                     semicolon or a comma to separate multiple properties, or
-                     specify each property separately. (Short form: -p)
-                     Example:
-                       -property:WarningLevel=2;OutDir=bin\Debug\
-</source>
-        <target state="new">  -property:&lt;n&gt;=&lt;v&gt;  Set or override these project-level properties. &lt;n&gt; is
-                     the property name, and &lt;v&gt; is the property value. Use a
-                     semicolon or a comma to separate multiple properties, or
-                     specify each property separately. (Short form: -p)
-                     Example:
-                       -property:WarningLevel=2;OutDir=bin\Debug\
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_11_LoggerSwitch">
-        <source>  -logger:&lt;logger&gt;   Use this logger to log events from MSBuild. To specify
-                     multiple loggers, specify each logger separately.
-                     The &lt;logger&gt; syntax is:
-                       [&lt;class&gt;,]&lt;assembly&gt;[,&lt;options&gt;][;&lt;parameters&gt;]
-                     The &lt;logger class&gt; syntax is:
-                       [&lt;partial or full namespace&gt;.]&lt;logger class name&gt;
-                     The &lt;logger assembly&gt; syntax is:
-                       {&lt;assembly name&gt;[,&lt;strong name&gt;] | &lt;assembly file&gt;}
-                     Logger options specify how MSBuild creates the logger.
-                     The &lt;logger parameters&gt; are optional, and are passed
-                     to the logger exactly as you typed them. (Short form: -l)
-                     Examples:
-                       -logger:XMLLogger,MyLogger,Version=1.0.2,Culture=neutral
-                       -logger:XMLLogger,C:\Loggers\MyLogger.dll;OutputAsHTML
-</source>
-        <target state="new">  -logger:&lt;logger&gt;   Use this logger to log events from MSBuild. To specify
-                     multiple loggers, specify each logger separately.
-                     The &lt;logger&gt; syntax is:
-                       [&lt;class&gt;,]&lt;assembly&gt;[,&lt;options&gt;][;&lt;parameters&gt;]
-                     The &lt;logger class&gt; syntax is:
-                       [&lt;partial or full namespace&gt;.]&lt;logger class name&gt;
-                     The &lt;logger assembly&gt; syntax is:
-                       {&lt;assembly name&gt;[,&lt;strong name&gt;] | &lt;assembly file&gt;}
-                     Logger options specify how MSBuild creates the logger.
-                     The &lt;logger parameters&gt; are optional, and are passed
-                     to the logger exactly as you typed them. (Short form: -l)
-                     Examples:
-                       -logger:XMLLogger,MyLogger,Version=1.0.2,Culture=neutral
-                       -logger:XMLLogger,C:\Loggers\MyLogger.dll;OutputAsHTML
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_12_VerbositySwitch">
-        <source>  -verbosity:&lt;level&gt; Display this amount of information in the event log.
-                     The available verbosity levels are: q[uiet], m[inimal],
-                     n[ormal], d[etailed], and diag[nostic]. (Short form: -v)
-                     Example:
-                       -verbosity:quiet
-</source>
-        <target state="new">  -verbosity:&lt;level&gt; Display this amount of information in the event log.
-                     The available verbosity levels are: q[uiet], m[inimal],
-                     n[ormal], d[etailed], and diag[nostic]. (Short form: -v)
-                     Example:
-                       -verbosity:quiet
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_13_ConsoleLoggerParametersSwitch">
-        <source>  -consoleLoggerParameters:&lt;parameters&gt;
-                     Parameters to console logger. (Short form: -clp)
-                     The available parameters are:
-                        PerformanceSummary--Show time spent in tasks, targets
-                            and projects.
-                        Summary--Show error and warning summary at the end.
-                        NoSummary--Don't show error and warning summary at the
-                            end.
-                        ErrorsOnly--Show only errors.
-                        WarningsOnly--Show only warnings.
-                        NoItemAndPropertyList--Don't show list of items and
-                            properties at the start of each project build.
-                        ShowCommandLine--Show TaskCommandLineEvent messages
-                        ShowTimestamp--Display the Timestamp as a prefix to any
-                            message.
-                        ShowEventId--Show eventId for started events, finished
-                            events, and messages
-                        ForceNoAlign--Does not align the text to the size of
-                            the console buffer
-                        DisableConsoleColor--Use the default console colors
-                            for all logging messages.
-                        DisableMPLogging-- Disable the multiprocessor
-                            logging style of output when running in
-                            non-multiprocessor mode.
-                        EnableMPLogging--Enable the multiprocessor logging
-                            style even when running in non-multiprocessor
-                            mode. This logging style is on by default.
-                        ForceConsoleColor--Use ANSI console colors even if
-                            console does not support it
-                        Verbosity--overrides the -verbosity setting for this
-                            logger.
-                     Example:
-                        -consoleLoggerParameters:PerformanceSummary;NoSummary;
-                                                 Verbosity=minimal
-</source>
-        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
-                     Parameters to console logger. (Short form: -clp)
-                     The available parameters are:
-                        PerformanceSummary--Show time spent in tasks, targets
-                            and projects.
-                        Summary--Show error and warning summary at the end.
-                        NoSummary--Don't show error and warning summary at the
-                            end.
-                        ErrorsOnly--Show only errors.
-                        WarningsOnly--Show only warnings.
-                        NoItemAndPropertyList--Don't show list of items and
-                            properties at the start of each project build.
-                        ShowCommandLine--Show TaskCommandLineEvent messages
-                        ShowTimestamp--Display the Timestamp as a prefix to any
-                            message.
-                        ShowEventId--Show eventId for started events, finished
-                            events, and messages
-                        ForceNoAlign--Does not align the text to the size of
-                            the console buffer
-                        DisableConsoleColor--Use the default console colors
-                            for all logging messages.
-                        DisableMPLogging-- Disable the multiprocessor
-                            logging style of output when running in
-                            non-multiprocessor mode.
-                        EnableMPLogging--Enable the multiprocessor logging
-                            style even when running in non-multiprocessor
-                            mode. This logging style is on by default.
-                        ForceConsoleColor--Use ANSI console colors even if
-                            console does not support it
-                        Verbosity--overrides the -verbosity setting for this
-                            logger.
-                     Example:
-                        -consoleLoggerParameters:PerformanceSummary;NoSummary;
-                                                 Verbosity=minimal
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_14_NoConsoleLoggerSwitch">
-        <source>  -noConsoleLogger   Disable the default console logger and do not log events
-                     to the console. (Short form: -noConLog)
-</source>
-        <target state="new">  -noConsoleLogger   Disable the default console logger and do not log events
-                     to the console. (Short form: -noConLog)
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_15_ValidateSwitch">
-        <source>  -validate          Validate the project against the default schema. (Short
-                     form: -val)
-
-  -validate:&lt;schema&gt; Validate the project against the specified schema. (Short
-                     form: -val)
-                     Example:
-                       -validate:MyExtendedBuildSchema.xsd
-</source>
-        <target state="new">  -validate          Validate the project against the default schema. (Short
-                     form: -val)
-
-  -validate:&lt;schema&gt; Validate the project against the specified schema. (Short
-                     form: -val)
-                     Example:
-                       -validate:MyExtendedBuildSchema.xsd
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_17_MaximumCPUSwitch">
-        <source>  -maxCpuCount[:n]   Specifies the maximum number of concurrent processes to
-                     build with. If the switch is not used, the default
-                     value used is 1. If the switch is used without a value
-                     MSBuild will use up to the number of processors on the
-                     computer. (Short form: -m[:n])
-      </source>
-        <target state="new">  -maxCpuCount[:n]   Specifies the maximum number of concurrent processes to
-                     build with. If the switch is not used, the default
-                     value used is 1. If the switch is used without a value
-                     MSBuild will use up to the number of processors on the
-                     computer. (Short form: -m[:n])
-      </target>
-        <note>
-          LOCALIZATION: "maxCpuCount" should not be localized.
-          LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-      </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_16_Examples">
-        <source>Examples:
-
-        MSBuild MyApp.sln -t:Rebuild -p:Configuration=Release
-        MSBuild MyApp.csproj -t:Clean
-                             -p:Configuration=Debug;TargetFrameworkVersion=v3.5
-    </source>
-        <target state="new">Examples:
-
-        MSBuild MyApp.sln -t:Rebuild -p:Configuration=Release
-        MSBuild MyApp.csproj -t:Clean
-                             -p:Configuration=Debug;TargetFrameworkVersion=v3.5
-    </target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_InputCachesFiles">
-        <source>  -inputResultsCaches:&lt;cacheFile&gt;...
-                     Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
-   </source>
-        <target state="new">  -inputResultsCaches:&lt;cacheFile&gt;...
-                     Semicolon separated list of input cache files that MSBuild
-                     will read build results from.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -irc)
-   </target>
-        <note>
-      LOCALIZATION: The following should not be localized: MSBuild, -isolate
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_OutputCacheFile">
-        <source>  -outputResultsCache:[cacheFile]
-                     Output cache file where MSBuild will write the contents of
-                     its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -orc)
-   </source>
-        <target state="new">  -outputResultsCache:[cacheFile]
-                     Output cache file where MSBuild will write the contents of
-                     its build result caches at the end of the build.
-                     Setting this also turns on isolated builds (-isolate).
-                     (short form: -orc)
-   </target>
-        <note>
-      LOCALIZATION: The following should not be localized: MSBuild, -isolate
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpPrompt">
-        <source>For switch syntax, type "MSBuild -help"</source>
-        <target state="new">For switch syntax, type "MSBuild -help"</target>
-        <note>UE: this message is shown when the user makes a syntax error on the command-line for a switch.
-    LOCALIZATION: "MSBuild -help" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_18_DistributedLoggerSwitch">
-        <source>  -distributedLogger:&lt;central logger&gt;*&lt;forwarding logger&gt;
-                     Use this logger to log events from MSBuild, attaching a
-                     different logger instance to each node. To specify
-                     multiple loggers, specify each logger separately.
-                     (Short form -dl)
-                     The &lt;logger&gt; syntax is:
-                       [&lt;class&gt;,]&lt;assembly&gt;[,&lt;options&gt;][;&lt;parameters&gt;]
-                     The &lt;logger class&gt; syntax is:
-                       [&lt;partial or full namespace&gt;.]&lt;logger class name&gt;
-                     The &lt;logger assembly&gt; syntax is:
-                       {&lt;assembly name&gt;[,&lt;strong name&gt;] | &lt;assembly file&gt;}
-                     Logger options specify how MSBuild creates the logger.
-                     The &lt;logger parameters&gt; are optional, and are passed
-                     to the logger exactly as you typed them. (Short form: -l)
-                     Examples:
-                       -dl:XMLLogger,MyLogger,Version=1.0.2,Culture=neutral
-                       -dl:MyLogger,C:\My.dll*ForwardingLogger,C:\Logger.dll
-</source>
-        <target state="new">  -distributedLogger:&lt;central logger&gt;*&lt;forwarding logger&gt;
-                     Use this logger to log events from MSBuild, attaching a
-                     different logger instance to each node. To specify
-                     multiple loggers, specify each logger separately.
-                     (Short form -dl)
-                     The &lt;logger&gt; syntax is:
-                       [&lt;class&gt;,]&lt;assembly&gt;[,&lt;options&gt;][;&lt;parameters&gt;]
-                     The &lt;logger class&gt; syntax is:
-                       [&lt;partial or full namespace&gt;.]&lt;logger class name&gt;
-                     The &lt;logger assembly&gt; syntax is:
-                       {&lt;assembly name&gt;[,&lt;strong name&gt;] | &lt;assembly file&gt;}
-                     Logger options specify how MSBuild creates the logger.
-                     The &lt;logger parameters&gt; are optional, and are passed
-                     to the logger exactly as you typed them. (Short form: -l)
-                     Examples:
-                       -dl:XMLLogger,MyLogger,Version=1.0.2,Culture=neutral
-                       -dl:MyLogger,C:\My.dll*ForwardingLogger,C:\Logger.dll
-</target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_19_IgnoreProjectExtensionsSwitch">
-        <source>  -ignoreProjectExtensions:&lt;extensions&gt;
-                     List of extensions to ignore when determining which
-                     project file to build. Use a semicolon or a comma
-                     to separate multiple extensions.
-                     (Short form: -ignore)
-                     Example:
-                       -ignoreProjectExtensions:.sln
-    </source>
-        <target state="new">  -ignoreProjectExtensions:&lt;extensions&gt;
-                     List of extensions to ignore when determining which
-                     project file to build. Use a semicolon or a comma
-                     to separate multiple extensions.
-                     (Short form: -ignore)
-                     Example:
-                       -ignoreProjectExtensions:.sln
-    </target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_23_ToolsVersionSwitch">
-        <source>  -toolsVersion:&lt;version&gt;
-                     The version of the MSBuild Toolset (tasks, targets, etc.)
-                     to use during build. This version will override the
-                     versions specified by individual projects. (Short form:
-                     -tv)
-                     Example:
-                       -toolsVersion:3.5
-   </source>
-        <target state="new">  -toolsVersion:&lt;version&gt;
-                     The version of the MSBuild Toolset (tasks, targets, etc.)
-                     to use during build. This version will override the
-                     versions specified by individual projects. (Short form:
-                     -tv)
-                     Example:
-                       -toolsVersion:3.5
-   </target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_20_FileLoggerSwitch">
-        <source>  -fileLogger[n]     Logs the build output to a file. By default
-                     the file is in the current directory and named
-                     "msbuild[n].log". Events from all nodes are combined into
-                     a single log. The location of the file and other
-                     parameters for the fileLogger can be specified through
-                     the addition of the "-fileLoggerParameters[n]" switch.
-                     "n" if present can be a digit from 1-9, allowing up to
-                     10 file loggers to be attached. (Short form: -fl[n])
-    </source>
-        <target state="new">  -fileLogger[n]     Logs the build output to a file. By default
-                     the file is in the current directory and named
-                     "msbuild[n].log". Events from all nodes are combined into
-                     a single log. The location of the file and other
-                     parameters for the fileLogger can be specified through
-                     the addition of the "-fileLoggerParameters[n]" switch.
-                     "n" if present can be a digit from 1-9, allowing up to
-                     10 file loggers to be attached. (Short form: -fl[n])
-    </target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_21_DistributedFileLoggerSwitch">
-        <source>  -distributedFileLogger
-                     Logs the build output to multiple log files, one log file
-                     per MSBuild node. The initial location for these files is
-                     the current directory. By default the files are called
-                     "MSBuild&lt;nodeid&gt;.log". The location of the files and
-                     other parameters for the fileLogger can be specified
-                     with the addition of the "-fileLoggerParameters" switch.
-
-                     If a log file name is set through the fileLoggerParameters
-                     switch the distributed logger will use the fileName as a
-                     template and append the node id to this fileName to
-                     create a log file for each node.
-    </source>
-        <target state="new">  -distributedFileLogger
-                     Logs the build output to multiple log files, one log file
-                     per MSBuild node. The initial location for these files is
-                     the current directory. By default the files are called
-                     "MSBuild&lt;nodeid&gt;.log". The location of the files and
-                     other parameters for the fileLogger can be specified
-                     with the addition of the "-fileLoggerParameters" switch.
-
-                     If a log file name is set through the fileLoggerParameters
-                     switch the distributed logger will use the fileName as a
-                     template and append the node id to this fileName to
-                     create a log file for each node.
-    </target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_22_FileLoggerParametersSwitch">
-        <source>  -fileLoggerParameters[n]:&lt;parameters&gt;
-                     Provides any extra parameters for file loggers.
-                     The presence of this switch implies the
-                     corresponding -fileLogger[n] switch.
-                     "n" if present can be a digit from 1-9.
-                     -fileLoggerParameters is also used by any distributed
-                     file logger, see description of -distributedFileLogger.
-                     (Short form: -flp[n])
-                     The same parameters listed for the console logger are
-                     available. Some additional available parameters are:
-                        LogFile--path to the log file into which the
-                            build log will be written.
-                        Append--determines if the build log will be appended
-                            to or overwrite the log file. Setting the
-                            switch appends the build log to the log file;
-                            Not setting the switch overwrites the
-                            contents of an existing log file.
-                            The default is not to append to the log file.
-                        Encoding--specifies the encoding for the file,
-                            for example, UTF-8, Unicode, or ASCII
-                     Default verbosity is Detailed.
-                     Examples:
-                       -fileLoggerParameters:LogFile=MyLog.log;Append;
-                                           Verbosity=diagnostic;Encoding=UTF-8
-
-                       -flp:Summary;Verbosity=minimal;LogFile=msbuild.sum
-                       -flp1:warningsonly;logfile=msbuild.wrn
-                       -flp2:errorsonly;logfile=msbuild.err
-    </source>
-        <target state="new">  -fileLoggerParameters[n]:&lt;parameters&gt;
-                     Provides any extra parameters for file loggers.
-                     The presence of this switch implies the
-                     corresponding -fileLogger[n] switch.
-                     "n" if present can be a digit from 1-9.
-                     -fileLoggerParameters is also used by any distributed
-                     file logger, see description of -distributedFileLogger.
-                     (Short form: -flp[n])
-                     The same parameters listed for the console logger are
-                     available. Some additional available parameters are:
-                        LogFile--path to the log file into which the
-                            build log will be written.
-                        Append--determines if the build log will be appended
-                            to or overwrite the log file. Setting the
-                            switch appends the build log to the log file;
-                            Not setting the switch overwrites the
-                            contents of an existing log file.
-                            The default is not to append to the log file.
-                        Encoding--specifies the encoding for the file,
-                            for example, UTF-8, Unicode, or ASCII
-                     Default verbosity is Detailed.
-                     Examples:
-                       -fileLoggerParameters:LogFile=MyLog.log;Append;
-                                           Verbosity=diagnostic;Encoding=UTF-8
-
-                       -flp:Summary;Verbosity=minimal;LogFile=msbuild.sum
-                       -flp1:warningsonly;logfile=msbuild.wrn
-                       -flp2:errorsonly;logfile=msbuild.err
-    </target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "MSBuild", "MSBuild.exe" and "MSBuild.rsp"
-      2) the string "proj" that describes the extension we look for
-      3) all switch names and their short forms e.g. -property, or -p
-      4) all verbosity levels and their short forms e.g. quiet, or q
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_24_NodeReuse">
-        <source>  -nodeReuse:&lt;parameters&gt;
-                     Enables or Disables the reuse of MSBuild nodes.
-                     The parameters are:
-                     True --Nodes will remain after the build completes
-                            and will be reused by subsequent builds (default)
-                     False--Nodes will not remain after the build completes
-                     (Short form: -nr)
-                     Example:
-                       -nr:true
-    </source>
-        <target state="new">  -nodeReuse:&lt;parameters&gt;
-                     Enables or Disables the reuse of MSBuild nodes.
-                     The parameters are:
-                     True --Nodes will remain after the build completes
-                            and will be reused by subsequent builds (default)
-                     False--Nodes will not remain after the build completes
-                     (Short form: -nr)
-                     Example:
-                       -nr:true
-    </target>
-        <note />
-      </trans-unit>
-      <trans-unit id="HelpMessage_25_PreprocessSwitch">
-        <source>  -preprocess[:file]
-                     Creates a single, aggregated project file by
-                     inlining all the files that would be imported during a
-                     build, with their boundaries marked. This can be
-                     useful for figuring out what files are being imported
-                     and from where, and what they will contribute to
-                     the build. By default the output is written to
-                     the console window. If the path to an output file
-                     is provided that will be used instead.
-                     (Short form: -pp)
-                     Example:
-                       -pp:out.txt
-    </source>
-        <target state="new">  -preprocess[:file]
-                     Creates a single, aggregated project file by
-                     inlining all the files that would be imported during a
-                     build, with their boundaries marked. This can be
-                     useful for figuring out what files are being imported
-                     and from where, and what they will contribute to
-                     the build. By default the output is written to
-                     the console window. If the path to an output file
-                     is provided that will be used instead.
-                     (Short form: -pp)
-                     Example:
-                       -pp:out.txt
-    </target>
-        <note />
-      </trans-unit>
-      <trans-unit id="HelpMessage_26_DetailedSummarySwitch">
-        <source>  -detailedSummary[:True|False]
-                     Shows detailed information at the end of the build
-                     about the configurations built and how they were
-                     scheduled to nodes.
-                     (Short form: -ds)
-    </source>
-        <target state="new">  -detailedSummary[:True|False]
-                     Shows detailed information at the end of the build
-                     about the configurations built and how they were
-                     scheduled to nodes.
-                     (Short form: -ds)
-    </target>
-        <note>
-      LOCALIZATION: "detailedSummary", "True" and "False" should not be localized.
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_28_WarnAsErrorSwitch">
-        <source>  -warnAsError[:code[;code2]]
-                     List of warning codes to treats as errors.  Use a semicolon
-                     or a comma to separate multiple warning codes. To treat all
-                     warnings as errors use the switch with no values.
-                     (Short form: -err[:c;[c2]])
-
-                     Example:
-                       -warnAsError:MSB4130
-
-                     When a warning is treated as an error the target will
-                     continue to execute as if it was a warning but the overall
-                     build will fail.
-    </source>
-        <target state="new">  -warnAsError[:code[;code2]]
-                     List of warning codes to treats as errors.  Use a semicolon
-                     or a comma to separate multiple warning codes. To treat all
-                     warnings as errors use the switch with no values.
-                     (Short form: -err[:c;[c2]])
-
-                     Example:
-                       -warnAsError:MSB4130
-
-                     When a warning is treated as an error the target will
-                     continue to execute as if it was a warning but the overall
-                     build will fail.
-    </target>
-        <note>
-      LOCALIZATION: "-warnAsError" and "-err" should not be localized.
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_29_WarnAsMessageSwitch">
-        <source>  -warnAsMessage[:code[;code2]]
-                     List of warning codes to treats as low importance
-                     messages.  Use a semicolon or a comma to separate
-                     multiple warning codes.
-                     (Short form: -noWarn[:c;[c2]])
-
-                     Example:
-                       -warnAsMessage:MSB3026
-    </source>
-        <target state="new">  -warnAsMessage[:code[;code2]]
-                     List of warning codes to treats as low importance
-                     messages.  Use a semicolon or a comma to separate
-                     multiple warning codes.
-                     (Short form: -noWarn[:c;[c2]])
-
-                     Example:
-                       -warnAsMessage:MSB3026
-    </target>
-        <note>
-      LOCALIZATION: "-warnAsMessage" and "-noWarn" should not be localized.
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_30_BinaryLoggerSwitch">
-        <source>  -binaryLogger[:[LogFile=]output.binlog[;ProjectImports={None,Embed,ZipFile}]]
-                     Serializes all build events to a compressed binary file.
-                     By default the file is in the current directory and named
-                     "msbuild.binlog". The binary log is a detailed description
-                     of the build process that can later be used to reconstruct
-                     text logs and used by other analysis tools. A binary log
-                     is usually 10-20x smaller than the most detailed text
-                     diagnostic-level log, but it contains more information.
-                     (Short form: -bl)
-
-                     The binary logger by default collects the source text of
-                     project files, including all imported projects and target
-                     files encountered during the build. The optional
-                     ProjectImports switch controls this behavior:
-
-                      ProjectImports=None     - Don't collect the project
-                                                imports.
-                      ProjectImports=Embed    - Embed project imports in the
-                                                log file.
-                      ProjectImports=ZipFile  - Save project files to
-                                                output.projectimports.zip
-                                                where output is the same name
-                                                as the binary log file name.
-
-                     The default setting for ProjectImports is Embed.
-                     Note: the logger does not collect non-MSBuild source files
-                     such as .cs, .cpp etc.
-
-                     A .binlog file can be "played back" by passing it to
-                     msbuild.exe as an argument instead of a project/solution.
-                     Other loggers will receive the information contained
-                     in the log file as if the original build was happening.
-                     You can read more about the binary log and its usages at:
-                     https://aka.ms/msbuild/binlog
-
-                     Examples:
-                       -bl
-                       -bl:output.binlog
-                       -bl:output.binlog;ProjectImports=None
-                       -bl:output.binlog;ProjectImports=ZipFile
-                       -bl:..\..\custom.binlog
-                       -binaryLogger
-    </source>
-        <target state="new">  -binaryLogger[:[LogFile=]output.binlog[;ProjectImports={None,Embed,ZipFile}]]
-                     Serializes all build events to a compressed binary file.
-                     By default the file is in the current directory and named
-                     "msbuild.binlog". The binary log is a detailed description
-                     of the build process that can later be used to reconstruct
-                     text logs and used by other analysis tools. A binary log
-                     is usually 10-20x smaller than the most detailed text
-                     diagnostic-level log, but it contains more information.
-                     (Short form: -bl)
-
-                     The binary logger by default collects the source text of
-                     project files, including all imported projects and target
-                     files encountered during the build. The optional
-                     ProjectImports switch controls this behavior:
-
-                      ProjectImports=None     - Don't collect the project
-                                                imports.
-                      ProjectImports=Embed    - Embed project imports in the
-                                                log file.
-                      ProjectImports=ZipFile  - Save project files to
-                                                output.projectimports.zip
-                                                where output is the same name
-                                                as the binary log file name.
-
-                     The default setting for ProjectImports is Embed.
-                     Note: the logger does not collect non-MSBuild source files
-                     such as .cs, .cpp etc.
-
-                     A .binlog file can be "played back" by passing it to
-                     msbuild.exe as an argument instead of a project/solution.
-                     Other loggers will receive the information contained
-                     in the log file as if the original build was happening.
-                     You can read more about the binary log and its usages at:
-                     https://aka.ms/msbuild/binlog
-
-                     Examples:
-                       -bl
-                       -bl:output.binlog
-                       -bl:output.binlog;ProjectImports=None
-                       -bl:output.binlog;ProjectImports=ZipFile
-                       -bl:..\..\custom.binlog
-                       -binaryLogger
-    </target>
-        <note>
-      LOCALIZATION: The following should not be localized:
-      1) "msbuild"
-      2) the string "binlog" that describes the file extension
-      3) all switch names and their short forms e.g. -bl and -binaryLogger
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_31_RestoreSwitch">
-        <source>  -restore[:True|False]
-                     Runs a target named Restore prior to building
-                     other targets and ensures the build for these
-                     targets uses the latest restored build logic.
-                     This is useful when your project tree requires
-                     packages to be restored before it can be built.
-                     Specifying -restore is the same as specifying
-                     -restore:True. Use the parameter to override
-                     a value that comes from a response file.
-                     (Short form: -r)
-    </source>
-        <target state="new">  -restore[:True|False]
-                     Runs a target named Restore prior to building
-                     other targets and ensures the build for these
-                     targets uses the latest restored build logic.
-                     This is useful when your project tree requires
-                     packages to be restored before it can be built.
-                     Specifying -restore is the same as specifying
-                     -restore:True. Use the parameter to override
-                     a value that comes from a response file.
-                     (Short form: -r)
-    </target>
-        <note>
-      LOCALIZATION: "-restore" and "-r" should not be localized.
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidConfigurationFile">
-        <source>MSBUILD : Configuration error MSB1043: The application could not start. {0}</source>
-        <target state="new">MSBUILD : Configuration error MSB1043: The application could not start. {0}</target>
-        <note>
-      {StrBegin="MSBUILD : Configuration error MSB1043: "}
-      UE: This error is shown when the msbuild.exe.config file had invalid content.
-      LOCALIZATION: The prefix "MSBUILD : Configuration error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidDetailedSummaryValue">
-        <source>MSBUILD : error MSB1061: Detailed summary value is not valid. {0}</source>
-        <target state="new">MSBUILD : error MSB1061: Detailed summary value is not valid. {0}</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1061: "}
-      UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -detailedSummary parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidGraphBuildValue">
-        <source>MSBUILD : error MSB1057: Graph build value is not valid.</source>
-        <target state="new">MSBUILD : error MSB1057: Graph build value is not valid.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1057: "}
-      UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -graphBuild parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidInteractiveValue">
-        <source>MSBUILD : error MSB1055: Interactive value is not valid. {0}</source>
-        <target state="new">MSBUILD : error MSB1055: Interactive value is not valid. {0}</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1055: "}
-      UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the interactive parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidIsolateProjectsValue">
-        <source>MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</source>
-        <target state="new">MSBUILD : error MSB1056: Isolate projects value is not valid. {0}</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1056: "}
-      UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a value for the -isolateProjects parameter that is not equivalent to Boolean.TrueString or Boolean.FalseString.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidLoggerError">
-        <source>MSBUILD : error MSB1019: Logger switch was not correctly formed.</source>
-        <target state="new">MSBUILD : error MSB1019: Logger switch was not correctly formed.</target>
-        <note>{StrBegin="MSBUILD : error MSB1019: "}UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user does any of the following:
-      msbuild.exe -logger:;"logger parameters"                    (missing logger class and assembly)
-      msbuild.exe -logger:loggerclass,                            (missing logger assembly)
-      msbuild.exe -logger:loggerclass,;"logger parameters"        (missing logger assembly)
-      The correct way to specify a logger is to give both the logger class and logger assembly, or just the logger assembly (logger
-      parameters are optional).
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="InvalidMaxCPUCountValue">
-        <source>MSBUILD : error MSB1030: Maximum CPU count is not valid. {0}</source>
-        <target state="new">MSBUILD : error MSB1030: Maximum CPU count is not valid. {0}</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1030: "}
-      UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies an invalid CPU value. For example, -m:foo instead of -m:2.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidMaxCPUCountValueOutsideRange">
-        <source>MSBUILD : error MSB1032: Maximum CPU count is not valid. Value must be an integer greater than zero and no more than 1024.</source>
-        <target state="new">MSBUILD : error MSB1032: Maximum CPU count is not valid. Value must be an integer greater than zero and no more than 1024.</target>
-        <note>{StrBegin="MSBUILD : error MSB1032: "}
-      UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a CPU value that is zero or less. For example, -m:0 instead of -m:2.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidNodeNumberValue">
-        <source>MSBUILD : error MSB1033: Node number is not valid. {0}.</source>
-        <target state="new">MSBUILD : error MSB1033: Node number is not valid. {0}.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1033: "}
-      UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a CPU value that is zero or less. For example, -nodeMode:foo instead of -nodeMode:2.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidNodeNumberValueIsNegative">
-        <source>MSBUILD : error MSB1034: Node number is not valid. Value must be an integer greater than zero.</source>
-        <target state="new">MSBUILD : error MSB1034: Node number is not valid. Value must be an integer greater than zero.</target>
-        <note>{StrBegin="MSBUILD : error MSB1034: "}
-        UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-        This error is shown when a user specifies a CPU value that is zero or less. For example, -nodeMode:0 instead of -nodeMode:2.
-        LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-      </note>
-      </trans-unit>
-      <trans-unit id="InvalidPropertyError">
-        <source>MSBUILD : error MSB1006: Property is not valid.</source>
-        <target state="new">MSBUILD : error MSB1006: Property is not valid.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1006: "}UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown if the user does any of the following:
-      msbuild.exe -property:foo              (missing property value)
-      msbuild.exe -property:=4               (missing property name)
-      The user must pass in an actual property name and value following the switch, as in "msbuild.exe -property:Configuration=Debug".
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidSchemaFile">
-        <source>MSBUILD : MSB1046: The schema "{0}" is not valid. {1}</source>
-        <target state="new">MSBUILD : MSB1046: The schema "{0}" is not valid. {1}</target>
-        <note>{StrBegin="MSBUILD : MSB1046: "}UE: This message is shown when the schema file provided for the validation of a project is itself not valid.
-    LOCALIZATION: "{0}" is the schema file path. "{1}" is a message from an FX exception that describes why the schema file is bad.</note>
-      </trans-unit>
-      <trans-unit id="InvalidSwitchIndicator">
-        <source>Switch: {0}</source>
-        <target state="new">Switch: {0}</target>
-        <note>
-      UE: This is attached to error messages caused by an invalid switch. This message indicates what the invalid arg was.
-      For example, if an unknown switch is passed to MSBuild.exe, the error message will look like this:
-      MSBUILD : error MSB1001: Unknown switch.
-      Switch: -bogus
-      LOCALIZATION: {0} contains the invalid switch text.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidToolsVersionError">
-        <source>MSBUILD : error MSB1040: ToolsVersion is not valid. {0}</source>
-        <target state="new">MSBUILD : error MSB1040: ToolsVersion is not valid. {0}</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1040: "}
-      UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies an unknown toolversion, eg -toolsVersion:99
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidVerbosityError">
-        <source>MSBUILD : error MSB1018: Verbosity level is not valid.</source>
-        <target state="new">MSBUILD : error MSB1018: Verbosity level is not valid.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1018: "}UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies an unknown verbosity level e.g. "msbuild -verbosity:foo". The only valid verbosities
-      (and their short forms) are: q[uiet], m[inimal], n[ormal], d[etailed], diag[nostic].
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="LoggerFatalError">
-        <source>MSBUILD : error MSB1028: The logger failed unexpectedly.</source>
-        <target state="new">MSBUILD : error MSB1028: The logger failed unexpectedly.</target>
-        <note>{StrBegin="MSBUILD : error MSB1028: "}
-      UE: This error is shown when a logger specified with the -logger switch throws an exception while being
-      initialized. This message is followed by the exception text including the stack trace.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="LoggerFailurePrefixNoErrorCode">
-        <source>MSBUILD : Logger error {0}: {1}</source>
-        <target state="new">MSBUILD : Logger error {0}: {1}</target>
-        <note>UE: This prefixes the error message emitted by a logger, when a logger fails in a controlled way using a LoggerException.
-      For example, the logger is indicating that it could not create its output file.
-      There's no error code because one was supplied by the logger.
-      LOCALIZATION: The word "Logger" should be localized, the words "MSBuild" and "error" should NOT be localized.
-      </note>
-      </trans-unit>
-      <trans-unit id="LoggerFailurePrefixWithErrorCode">
-        <source>MSBUILD : Logger error MSB1029: {0}</source>
-        <target state="new">MSBUILD : Logger error MSB1029: {0}</target>
-        <note>{SubString="Logger", "{0}"}{StrBegin="MSBUILD : "}
-        UE: This prefixes the error message emitted by a logger, when a logger fails in a controlled way using a LoggerException.
-        For example, the logger is indicating that it could not create its output file.
-        This is like LoggerFailurePrefixNoErrorCode, but the logger didn't supply its own error code, so we have to provide one.
-        LOCALIZATION: The word "Logger" should be localized, the words "MSBuild" and "error" should NOT be localized.
-      </note>
-      </trans-unit>
-      <trans-unit id="MSBExePath">
-        <source>MSBuild executable path = "{0}"</source>
-        <target state="new">MSBuild executable path = "{0}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="MSBVersion">
-        <source>MSBuild version = "{0}"</source>
-        <target state="new">MSBuild version = "{0}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="MissingLoggerError">
-        <source>MSBUILD : error MSB1007: Specify a logger.</source>
-        <target state="new">MSBUILD : error MSB1007: Specify a logger.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1007: "}UE: This happens if the user does something like "msbuild.exe -logger". The user must pass in an actual logger class
-      following the switch, as in "msbuild.exe -logger:XMLLogger,MyLogger,Version=1.0.2,Culture=neutral".
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="MissingMaxCPUCountError">
-        <source>MSBUILD : error MSB1031: Specify the maximum number of CPUs.</source>
-        <target state="new">MSBUILD : error MSB1031: Specify the maximum number of CPUs.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1031: "}UE: This happens if the user does something like "msbuild.exe -m". The user must pass in an actual number like -m:4.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="MissingProjectError">
-        <source>MSBUILD : error MSB1003: Specify a project or solution file. The current working directory does not contain a project or solution file.</source>
-        <target state="new">MSBUILD : error MSB1003: Specify a project or solution file. The current working directory does not contain a project or solution file.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1003: "}UE: The user must either specify a project or solution file to build, or there must be a project file in the current directory
-      with a file extension ending in "proj" (e.g., foo.csproj), or a solution file ending in "sln".
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="MissingPropertyError">
-        <source>MSBUILD : error MSB1005: Specify a property and its value.</source>
-        <target state="new">MSBUILD : error MSB1005: Specify a property and its value.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1005: "}UE: This happens if the user does something like "msbuild.exe -property". The user must pass in an actual property
-      name and value following the switch, as in "msbuild.exe -property:Configuration=Debug".
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="MissingResponseFileError">
-        <source>MSBUILD : error MSB1012: Specify a response file.</source>
-        <target state="new">MSBUILD : error MSB1012: Specify a response file.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1012: "}UE: This error would occur if the user did something like "msbuild.exe @ foo.proj". The at-sign must be followed by a
-      response file.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="MissingTargetError">
-        <source>MSBUILD : error MSB1004: Specify the name of the target.</source>
-        <target state="new">MSBUILD : error MSB1004: Specify the name of the target.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1004: "}UE: This happens if the user does something like "msbuild.exe -target". The user must pass in an actual target name
-      following the switch, as in "msbuild.exe -target:blah".
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="MissingToolsVersionError">
-        <source>MSBUILD : error MSB1039: Specify the version of the toolset.</source>
-        <target state="new">MSBUILD : error MSB1039: Specify the version of the toolset.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1039: "}
-      UE: This happens if the user does something like "msbuild.exe -toolsVersion". The user must pass in an actual toolsversion
-      name following the switch, as in "msbuild.exe -toolsVersion:3.5".
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="MissingVerbosityError">
-        <source>MSBUILD : error MSB1016: Specify the verbosity level.</source>
-        <target state="new">MSBUILD : error MSB1016: Specify the verbosity level.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1016: "}UE: This happens if the user does something like "msbuild.exe -verbosity". The user must pass in a verbosity level
-      after the switch e.g. "msbuild.exe -verbosity:detailed".
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="MultipleSchemasError">
-        <source>MSBUILD : error MSB1024: Only one schema can be specified for validation of the project.</source>
-        <target state="new">MSBUILD : error MSB1024: Only one schema can be specified for validation of the project.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1024: "}UE: The user did something like msbuild -validate:foo.xsd -validate:bar.xsd. We only allow one schema to be specified.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="OptionalLoggerCreationMessage">
-        <source>The specified logger could not be created and will not be used. {0}</source>
-        <target state="new">The specified logger could not be created and will not be used. {0}</target>
-        <note>
-      UE: This error is shown when a logger cannot be loaded and instantiated from its assembly.
-      LOCALIZATION: {0} contains the exception message explaining why the
-      logger could not be created -- this message comes from the CLR/FX and is localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="PickedUpSwitchesFromAutoResponse">
-        <source>Some command line switches were read from the auto-response file "{0}". To disable this file, use the "-noAutoResponse" switch.</source>
-        <target state="new">Some command line switches were read from the auto-response file "{0}". To disable this file, use the "-noAutoResponse" switch.</target>
-        <note>
-      UE: This message appears in high verbosity modes when we used some
-      switches from the auto-response file msbuild.rsp: otherwise the user may be unaware
-      where the switches are coming from.
-    </note>
-      </trans-unit>
-      <trans-unit id="Process">
-        <source>Process = "{0}"</source>
-        <target state="new">Process = "{0}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectNotFoundError">
-        <source>MSBUILD : error MSB1009: Project file does not exist.</source>
-        <target state="new">MSBUILD : error MSB1009: Project file does not exist.</target>
-        <note>{StrBegin="MSBUILD : error MSB1009: "}UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="PossiblyOmittedMaxCPUSwitch">
-        <source>Building the projects in this solution one at a time. To enable parallel build, please add the "-m" switch.</source>
-        <target state="new">Building the projects in this solution one at a time. To enable parallel build, please add the "-m" switch.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ProjectSchemaErrorHalt">
-        <source>MSBUILD : MSB1045: Stopping because of syntax errors in project file.</source>
-        <target state="new">MSBUILD : MSB1045: Stopping because of syntax errors in project file.</target>
-        <note>{StrBegin="MSBUILD : MSB1045: "}</note>
-      </trans-unit>
-      <trans-unit id="ReadResponseFileError">
-        <source>MSBUILD : error MSB1023: Cannot read the response file. {0}</source>
-        <target state="new">MSBUILD : error MSB1023: Cannot read the response file. {0}</target>
-        <note>{StrBegin="MSBUILD : error MSB1023: "}UE: This error is shown when the response file cannot be read off disk.
-    LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized. {0} contains a localized message explaining
-    why the response file could not be read -- this message comes from the CLR/FX.</note>
-      </trans-unit>
-      <trans-unit id="RepeatedResponseFileError">
-        <source>MSBUILD : error MSB1013: The response file was specified twice. A response file can be specified only once. Any files named "msbuild.rsp" in the directory of MSBuild.exe or in the directory of the first project or solution built (which if no project or solution is specified is the current working directory) were automatically used as response files.</source>
-        <target state="new">MSBUILD : error MSB1013: The response file was specified twice. A response file can be specified only once. Any files named "msbuild.rsp" in the directory of MSBuild.exe or in the directory of the first project or solution built (which if no project or solution is specified is the current working directory) were automatically used as response files.</target>
-        <note>{StrBegin="MSBUILD : error MSB1013: "}UE: Response files are just text files that contain a bunch of command-line switches to be passed to MSBuild.exe. The
-    purpose is so you don't have to type the same switches over and over again ... you can just pass in the response file instead.
-    Response files can include the @ switch in order to further include other response files. In order to prevent a circular
-    reference here, we disallow the same response file from being included twice. This error message would be followed by the
-    exact @ switch that resulted in the duplicate response file.
-    LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="ResponseFileNotFoundError">
-        <source>MSBUILD : error MSB1022: Response file does not exist.</source>
-        <target state="new">MSBUILD : error MSB1022: Response file does not exist.</target>
-        <note>{StrBegin="MSBUILD : error MSB1022: "}UE: This message would show if the user did something like "msbuild @bogus.rsp" where bogus.rsp doesn't exist. This
-    message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-    LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="SchemaFileLocation">
-        <source>Validating project using schema file "{0}".</source>
-        <target state="new">Validating project using schema file "{0}".</target>
-        <note>LOCALIZATION: "{0}" is the location of the schema file.</note>
-      </trans-unit>
-      <trans-unit id="SchemaValidationError">
-        <source>MSBUILD : MSB1044: Project is not valid. {0}</source>
-        <target state="new">MSBUILD : MSB1044: Project is not valid. {0}</target>
-        <note>{StrBegin="MSBUILD : MSB1044: "}UE: This error is shown when the user asks his project to be validated against a schema (-val switch for
-    MSBuild.exe), and the project has errors. "{0}" contains a message explaining the problem.
-    LOCALIZATION: "{0}" is a message from the System.XML schema validator and is already localized.</note>
-      </trans-unit>
-      <trans-unit id="SchemaNotFoundError">
-        <source>MSBUILD : error MSB1026: Schema file does not exist.</source>
-        <target state="new">MSBUILD : error MSB1026: Schema file does not exist.</target>
-        <note>{StrBegin="MSBUILD : error MSB1026: "}UE: This error is shown when the user specifies a schema file using the -validate:&lt;schema&gt; switch, and the file
-    does not exist on disk. This message does not need in-line parameters because the exception takes care of displaying the
-    invalid arg.
-    LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="SchemaNotFoundErrorWithFile">
-        <source>MSBUILD : error MSB1026: Schema file '{0}' does not exist.</source>
-        <target state="new">MSBUILD : error MSB1026: Schema file '{0}' does not exist.</target>
-        <note>{StrBegin="MSBUILD : error MSB1026: "}UE: This error is printed if the default schema does not exist or in the extremely unlikely event
-    that an explicit schema file was passed and existed when the command line parameters were checked but was deleted from disk before this check was made.
-    LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="TargetsCouldNotBePrinted">
-        <source>MSBUILD : error MSB1059: Targets could not be printed. {0}</source>
-        <target state="new">MSBUILD : error MSB1059: Targets could not be printed. {0}</target>
-        <note>{StrBegin="MSBUILD : error MSB1059: "}</note>
-      </trans-unit>
-      <trans-unit id="UnexpectedParametersError">
-        <source>MSBUILD : error MSB1002: This switch does not take any parameters.</source>
-        <target state="new">MSBUILD : error MSB1002: This switch does not take any parameters.</target>
-        <note>{StrBegin="MSBUILD : error MSB1002: "}UE: For example, if somebody types "msbuild.exe -noLogo:1", they would get this error because the -noLogo switch
-    should not be followed by any parameters ... it stands alone.
-    LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="UnknownSwitchError">
-        <source>MSBUILD : error MSB1001: Unknown switch.</source>
-        <target state="new">MSBUILD : error MSB1001: Unknown switch.</target>
-        <note>{StrBegin="MSBUILD : error MSB1001: "}UE: This occurs when the user passes in an unrecognized switch on the MSBuild.exe command-line.
-    LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="new">MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</target>
-        <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="Using35Engine">
-        <source>Forcing load of Microsoft.Build.Engine because MSBUILDOLDOM=1...</source>
-        <target state="new">Forcing load of Microsoft.Build.Engine because MSBUILDOLDOM=1...</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="MissingIgnoreProjectExtensionsError">
-        <source>MSBUILD : error MSB1035: Specify the project extensions to ignore.</source>
-        <target state="new">MSBUILD : error MSB1035: Specify the project extensions to ignore.</target>
-        <note>{StrBegin="MSBUILD : error MSB1035: "}
-      UE: This happens if the user does something like "msbuild.exe -ignoreProjectExtensions". The user must pass in one or more
-      project extensions to ignore e.g. "msbuild.exe -ignoreProjectExtensions:.sln".
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidExtensionToIgnore">
-        <source>MSBUILD : error MSB1036: There is an invalid extension in the -ignoreProjectExtensions list. Extensions must start with a period ".", have one or more characters after the period and not contain any invalid path characters or wildcards.</source>
-        <target state="new">MSBUILD : error MSB1036: There is an invalid extension in the -ignoreProjectExtensions list. Extensions must start with a period ".", have one or more characters after the period and not contain any invalid path characters or wildcards.</target>
-        <note>{StrBegin="MSBUILD : error MSB1036: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="MissingConsoleLoggerParameterError">
-        <source>MSBUILD : error MSB1037: Specify one or more parameters for the console logger if using the -consoleLoggerParameters switch</source>
-        <target state="new">MSBUILD : error MSB1037: Specify one or more parameters for the console logger if using the -consoleLoggerParameters switch</target>
-        <note>{StrBegin="MSBUILD : error MSB1037: "}
-      UE: This happens if the user does something like "msbuild.exe -consoleLoggerParameters:". The user must pass in one or more parameters
-      after the switch e.g. "msbuild.exe -consoleLoggerParameters:ErrorSummary".
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="MissingFileLoggerParameterError">
-        <source>MSBUILD : error MSB1038: Specify one or more parameters for the file logger if using the -fileLoggerParameters switch</source>
-        <target state="new">MSBUILD : error MSB1038: Specify one or more parameters for the file logger if using the -fileLoggerParameters switch</target>
-        <note>{StrBegin="MSBUILD : error MSB1038: "}
-      UE: This happens if the user does something like "msbuild.exe -fileLoggerParameters:". The user must pass in one or more parameters
-      after the switch e.g. "msbuild.exe -fileLoggerParameters:logfile=c:\temp\logfile".
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="MissingNodeReuseParameterError">
-        <source>MSBUILD : error MSB1041: Specify one or more parameters for node reuse if using the -nodeReuse switch</source>
-        <target state="new">MSBUILD : error MSB1041: Specify one or more parameters for node reuse if using the -nodeReuse switch</target>
-        <note>{StrBegin="MSBUILD : error MSB1041: "}
-      UE: This happens if the user does something like "msbuild.exe -nodeReuse:" without a true or false
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-     </note>
-      </trans-unit>
-      <trans-unit id="InvalidNodeReuseValue">
-        <source>MSBUILD : error MSB1042: Node reuse value is not valid. {0}.</source>
-        <target state="new">MSBUILD : error MSB1042: Node reuse value is not valid. {0}.</target>
-        <note>{StrBegin="MSBUILD : error MSB1042: "}
-     UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-     This error is shown when a user specifies a node reuse value that is not equivilant to Boolean.TrueString or Boolean.FalseString.
-     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-  </note>
-      </trans-unit>
-      <trans-unit id="InvalidNodeReuseTrueValue">
-        <source>MSBUILD : error MSB1042: Node reuse value is not valid. This version of MSBuild does not support node reuse. If specified, the node reuse switch value must be false.</source>
-        <target state="new">MSBUILD : error MSB1042: Node reuse value is not valid. This version of MSBuild does not support node reuse. If specified, the node reuse switch value must be false.</target>
-        <note>{StrBegin="MSBUILD : error MSB1042: "}
-     UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-     This error is shown when a user specifies a node reuse value that is not equivalent to Boolean.TrueString or Boolean.FalseString.
-     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-  </note>
-      </trans-unit>
-      <trans-unit id="InvalidRestoreValue">
-        <source>MSBUILD : error MSB1052: Restore value is not valid. {0}</source>
-        <target state="new">MSBUILD : error MSB1052: Restore value is not valid. {0}</target>
-        <note>{StrBegin="MSBUILD : error MSB1052: "}
-      UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies a restore value that is not equivalent to Boolean.TrueString or Boolean.FalseString.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="new">Attempting to cancel the build...</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="InvalidPreprocessPath">
-        <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
-        <target state="new">MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</target>
-        <note>{StrBegin="MSBUILD : error MSB1047: "}</note>
-      </trans-unit>
-      <trans-unit id="LoggerCreationError">
-        <source>MSBUILD : error MSB1021: Cannot create an instance of the logger. {0}</source>
-        <target state="new">MSBUILD : error MSB1021: Cannot create an instance of the logger. {0}</target>
-        <note>{StrBegin="MSBUILD : error MSB1021: "}
-      UE: This error is shown when a logger cannot be loaded and instantiated from its assembly.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized. {0} contains a message explaining why the
-      logger could not be created -- this message comes from the CLR/FX and is localized.</note>
-      </trans-unit>
-      <trans-unit id="LoggerNotFoundError">
-        <source>MSBUILD : error MSB1020: The logger was not found. Check the following: 1.) The logger name specified is the same as the name of the logger class. 2.) The logger class is "public" and implements the Microsoft.Build.Framework.ILogger interface. 3.) The path to the logger assembly is correct, or the logger can be loaded using only the assembly name provided.</source>
-        <target state="new">MSBUILD : error MSB1020: The logger was not found. Check the following: 1.) The logger name specified is the same as the name of the logger class. 2.) The logger class is "public" and implements the Microsoft.Build.Framework.ILogger interface. 3.) The path to the logger assembly is correct, or the logger can be loaded using only the assembly name provided.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1020: "}UE: This message does not need in-line parameters because the exception takes care of displaying the invalid arg.
-      This error is shown when a user specifies an logger that does not exist e.g. "msbuild -logger:FooLoggerClass,FooAssembly". The
-      logger class must exist in the given assembly.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="ProjectUpgradeNeededToVcxProj">
-        <source>MSBUILD : error MSB4192: The project file "{0}" is in the ".vcproj" or ".dsp" file format, which MSBuild cannot build directly. Please convert the project by opening it in the Visual Studio IDE or running the conversion tool, or, for ".vcproj", use MSBuild to build the solution file containing the project instead.</source>
-        <target state="new">MSBUILD : error MSB4192: The project file "{0}" is in the ".vcproj" or ".dsp" file format, which MSBuild cannot build directly. Please convert the project by opening it in the Visual Studio IDE or running the conversion tool, or, for ".vcproj", use MSBuild to build the solution file containing the project instead.</target>
-        <note>{StrBegin="MSBUILD : error MSB4192: "} LOC: ".vcproj" and ".dsp" should not be localized</note>
-      </trans-unit>
-      <trans-unit id="NeedJustMyCode">
-        <source>If MSBuild debugging does not work correctly, please verify that the "Just My Code" feature is enabled in Visual Studio, and that you have selected the managed debugger.</source>
-        <target state="new">If MSBuild debugging does not work correctly, please verify that the "Just My Code" feature is enabled in Visual Studio, and that you have selected the managed debugger.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="DebuggingSolutionFiles">
-        <source>MSBUILD : error MSB1048: Solution files cannot be debugged directly. Run MSBuild first with an environment variable MSBUILDEMITSOLUTION=1 to create a corresponding ".sln.metaproj" file. Then debug that.</source>
-        <target state="new">MSBUILD : error MSB1048: Solution files cannot be debugged directly. Run MSBuild first with an environment variable MSBUILDEMITSOLUTION=1 to create a corresponding ".sln.metaproj" file. Then debug that.</target>
-        <note>{StrBegin="MSBUILD : error MSB1048: "} LOC: ".SLN" should not be localized</note>
-      </trans-unit>
-      <trans-unit id="ParameterRequiredError">
-        <source>MSBUILD : error MSB1049: The {0} parameter must be specified</source>
-        <target state="new">MSBUILD : error MSB1049: The {0} parameter must be specified</target>
-        <note>{StrBegin="MSBUILD : error MSB1049: "}</note>
-      </trans-unit>
-      <trans-unit id="BuildStarted">
-        <source>Build started.</source>
-        <target state="new">Build started.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="FileLocation">
-        <source>{0} ({1},{2})</source>
-        <target state="new">{0} ({1},{2})</target>
-        <note>A file location to be embedded in a string.</note>
-      </trans-unit>
-      <trans-unit id="MissingWarnAsMessageParameterError">
-        <source>MSBUILD : error MSB1051: Specify one or more warning codes to treat as low importance messages when using the -warnAsMessage switch.</source>
-        <target state="new">MSBUILD : error MSB1051: Specify one or more warning codes to treat as low importance messages when using the -warnAsMessage switch.</target>
-        <note>
-      {StrBegin="MSBUILD : error MSB1051: "}
-      UE: This happens if the user does something like "msbuild.exe -warnAsMessage:" without any codes.
-      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="HelpMessage_32_ProfilerSwitch">
-        <source>  -profileEvaluation:&lt;file&gt;
-                     Profiles MSBuild evaluation and writes the result
-                     to the specified file. If the extension of the specified
-                     file is '.md', the result is generated in markdown
-                     format. Otherwise, a tab separated file is produced.
-    </source>
-        <target state="new">  -profileEvaluation:&lt;file&gt;
-                     Profiles MSBuild evaluation and writes the result
-                     to the specified file. If the extension of the specified
-                     file is '.md', the result is generated in markdown
-                     format. Otherwise, a tab separated file is produced.
-    </target>
-        <note />
-      </trans-unit>
-      <trans-unit id="HelpMessage_33_RestorePropertySwitch">
-        <source>  -restoreProperty:&lt;n&gt;=&lt;v&gt;
-                     Set or override these project-level properties only
-                     during restore and do not use properties specified
-                     with the -property argument. &lt;n&gt; is the property
-                     name, and &lt;v&gt; is the property value. Use a
-                     semicolon or a comma to separate multiple properties,
-                     or specify each property separately.
-                     (Short form: -rp)
-                     Example:
-                       -restoreProperty:IsRestore=true;MyProperty=value
-    </source>
-        <target state="new">  -restoreProperty:&lt;n&gt;=&lt;v&gt;
-                     Set or override these project-level properties only
-                     during restore and do not use properties specified
-                     with the -property argument. &lt;n&gt; is the property
-                     name, and &lt;v&gt; is the property value. Use a
-                     semicolon or a comma to separate multiple properties,
-                     or specify each property separately.
-                     (Short form: -rp)
-                     Example:
-                       -restoreProperty:IsRestore=true;MyProperty=value
-    </target>
-        <note>
-      LOCALIZATION: "-restoreProperty" and "-rp" should not be localized.
-      LOCALIZATION: None of the lines should be longer than a standard width console window, eg 80 chars.
-    </note>
-      </trans-unit>
-      <trans-unit id="InvalidProfilerValue">
-        <source>MSBUILD : error MSB1053: Provided filename is not valid. {0}</source>
-        <target state="new">MSBUILD : error MSB1053: Provided filename is not valid. {0}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="MissingProfileParameterError">
-        <source>MSBUILD :error MSB1054: A filename must be specified to generate the profiler result.</source>
-        <target state="new">MSBUILD :error MSB1054: A filename must be specified to generate the profiler result.</target>
-        <note />
-      </trans-unit>
-    </body>
-  </file>
-</xliff>
\ No newline at end of file
diff --git a/src/MSBuild/Resources/xlf/Strings.es.xlf b/src/MSBuild/Resources/xlf/Strings.es.xlf
index e36eec845fb..e284447ae5d 100644
--- a/src/MSBuild/Resources/xlf/Strings.es.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.es.xlf
@@ -1331,8 +1331,8 @@ Copyright (C) Microsoft Corporation. Todos los derechos reservados.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: MSBuild no se puede ejecutar en esta versi√≥n del sistema operativo. Solo es compatible con Windows 2000, Windows XP y versiones posteriores.</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: MSBuild no se puede ejecutar en esta versi√≥n del sistema operativo. Solo es compatible con Windows 2000, Windows XP y versiones posteriores.</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/Resources/xlf/Strings.fr.xlf b/src/MSBuild/Resources/xlf/Strings.fr.xlf
index ecd04ae29ab..1f465b9f5fa 100644
--- a/src/MSBuild/Resources/xlf/Strings.fr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.fr.xlf
@@ -1322,8 +1322,8 @@ Copyright (C) Microsoft Corporation. Tous droits r√©serv√©s.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: MSBuild ne s'ex√©cute pas sur cette version du syst√®me d'exploitation. Il est pris en charge uniquement sur Windows¬†2000, Windows¬†XP et les versions ult√©rieures.</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: MSBuild ne s'ex√©cute pas sur cette version du syst√®me d'exploitation. Il est pris en charge uniquement sur Windows¬†2000, Windows¬†XP et les versions ult√©rieures.</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/Resources/xlf/Strings.it.xlf b/src/MSBuild/Resources/xlf/Strings.it.xlf
index c37e60c4dc4..17f8ef60d33 100644
--- a/src/MSBuild/Resources/xlf/Strings.it.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.it.xlf
@@ -1344,8 +1344,8 @@ Copyright (C) Microsoft Corporation. Tutti i diritti sono riservati.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: MSBuild non pu√≤ essere eseguito su questa versione del sistema operativo. √à supportato solo in Windows 2000, Windows XP e versioni successive.</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: MSBuild non pu√≤ essere eseguito su questa versione del sistema operativo. √à supportato solo in Windows 2000, Windows XP e versioni successive.</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/Resources/xlf/Strings.ja.xlf b/src/MSBuild/Resources/xlf/Strings.ja.xlf
index 58adc2124db..6c17289c3c1 100644
--- a/src/MSBuild/Resources/xlf/Strings.ja.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ja.xlf
@@ -1322,8 +1322,8 @@ Copyright (C) Microsoft Corporation.All rights reserved.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: MSBuild „ÅØ„Åì„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÅÆ„Ç™„Éö„É¨„Éº„ÉÜ„Ç£„É≥„Ç∞ „Ç∑„Çπ„ÉÜ„É†„Åß„ÅØÂÆüË°å„Åß„Åç„Åæ„Åõ„Çì„ÄÇWindows 2000„ÄÅWindows XP „Åä„Çà„Å≥„Åù„Çå‰ª•Èôç„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„Åß„ÅÆ„Åø„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: MSBuild „ÅØ„Åì„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÅÆ„Ç™„Éö„É¨„Éº„ÉÜ„Ç£„É≥„Ç∞ „Ç∑„Çπ„ÉÜ„É†„Åß„ÅØÂÆüË°å„Åß„Åç„Åæ„Åõ„Çì„ÄÇWindows 2000„ÄÅWindows XP „Åä„Çà„Å≥„Åù„Çå‰ª•Èôç„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„Åß„ÅÆ„Åø„Çµ„Éù„Éº„Éà„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/Resources/xlf/Strings.ko.xlf b/src/MSBuild/Resources/xlf/Strings.ko.xlf
index 4e641e8d1e0..aaa3d3ec15c 100644
--- a/src/MSBuild/Resources/xlf/Strings.ko.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ko.xlf
@@ -1322,8 +1322,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: Ïù¥ Ïö¥ÏòÅ Ï≤¥Ï†ú Î≤ÑÏ†ÑÏóêÏÑúÎäî MSBuildÎ•º Ïã§ÌñâÌï† Ïàò ÏóÜÏäµÎãàÎã§. MSBuildÎäî Windows 2000 Î∞è Windows XP Ïù¥ÏÉÅ Î≤ÑÏ†ÑÏóêÏÑúÎßå ÏßÄÏõêÎê©ÎãàÎã§.</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: Ïù¥ Ïö¥ÏòÅ Ï≤¥Ï†ú Î≤ÑÏ†ÑÏóêÏÑúÎäî MSBuildÎ•º Ïã§ÌñâÌï† Ïàò ÏóÜÏäµÎãàÎã§. MSBuildÎäî Windows 2000 Î∞è Windows XP Ïù¥ÏÉÅ Î≤ÑÏ†ÑÏóêÏÑúÎßå ÏßÄÏõêÎê©ÎãàÎã§.</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/Resources/xlf/Strings.pl.xlf b/src/MSBuild/Resources/xlf/Strings.pl.xlf
index 548f0673c44..bf6053ea021 100644
--- a/src/MSBuild/Resources/xlf/Strings.pl.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pl.xlf
@@ -1336,8 +1336,8 @@ Copyright (C) Microsoft Corporation. Wszelkie prawa zastrze≈ºone.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: Program MSBuild nie dzia≈Ça w tej wersji systemu operacyjnego. Jest obs≈Çugiwany tylko w systemie Windows 2000, Windows XP oraz nowszych wersjach.</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: Program MSBuild nie dzia≈Ça w tej wersji systemu operacyjnego. Jest obs≈Çugiwany tylko w systemie Windows 2000, Windows XP oraz nowszych wersjach.</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
index e41b484c1a6..ed957260598 100644
--- a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
@@ -1323,8 +1323,8 @@ isoladamente.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: O MSBuild n√£o √© executado nesta vers√£o de sistema operacional. H√° suporte para ele somente nas vers√µes Windows 2000, Windows XP e vers√µes posteriores.</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: O MSBuild n√£o √© executado nesta vers√£o de sistema operacional. H√° suporte para ele somente nas vers√µes Windows 2000, Windows XP e vers√µes posteriores.</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/Resources/xlf/Strings.ru.xlf b/src/MSBuild/Resources/xlf/Strings.ru.xlf
index 4ef8b52a05a..a16f15e95bc 100644
--- a/src/MSBuild/Resources/xlf/Strings.ru.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ru.xlf
@@ -1321,8 +1321,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: MSBuild –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –û–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Windows 2000, Windows XP –∏ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: MSBuild –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –û–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Windows 2000, Windows XP –∏ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/Resources/xlf/Strings.tr.xlf b/src/MSBuild/Resources/xlf/Strings.tr.xlf
index 8bed4f53eff..6de7f438111 100644
--- a/src/MSBuild/Resources/xlf/Strings.tr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.tr.xlf
@@ -1326,8 +1326,8 @@ Telif Hakkƒ± (C) Microsoft Corporation. T√ºm haklarƒ± saklƒ±dƒ±r.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: MSBuild i≈ületim sisteminin bu s√ºr√ºm√ºnde √ßalƒ±≈ümaz. Yalnƒ±zca Windows 2000, Windows XP ve sonraki s√ºr√ºmlerde desteklenir.</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: MSBuild i≈ületim sisteminin bu s√ºr√ºm√ºnde √ßalƒ±≈ümaz. Yalnƒ±zca Windows 2000, Windows XP ve sonraki s√ºr√ºmlerde desteklenir.</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
index 011389fa1a6..d29ed7c8e4b 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
@@ -1322,8 +1322,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: MSBuild ‰∏çËÉΩÂú®Ê≠§ÁâàÊú¨ÁöÑÊìç‰ΩúÁ≥ªÁªü‰∏äËøêË°å„ÄÇÂÆÉ‰ªÖÂú® Windows 2000„ÄÅWindows XP ÂèäÊõ¥È´òÁâàÊú¨ÁöÑÊìç‰ΩúÁ≥ªÁªü‰∏äÂèóÊîØÊåÅ„ÄÇ</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: MSBuild ‰∏çËÉΩÂú®Ê≠§ÁâàÊú¨ÁöÑÊìç‰ΩúÁ≥ªÁªü‰∏äËøêË°å„ÄÇÂÆÉ‰ªÖÂú® Windows 2000„ÄÅWindows XP ÂèäÊõ¥È´òÁâàÊú¨ÁöÑÊìç‰ΩúÁ≥ªÁªü‰∏äÂèóÊîØÊåÅ„ÄÇ</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
index a3b1e39cf03..95fe02eeca4 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
@@ -1322,8 +1322,8 @@ Copyright (C) Microsoft Corporation. Ëëó‰ΩúÊ¨äÊâÄÊúâÔºå‰∏¶‰øùÁïô‰∏ÄÂàáÊ¨äÂà©„ÄÇ
     LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="UnsupportedOS">
-        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 2000, Windows XP, and later versions.</source>
-        <target state="translated">MSBUILD : error MSB1015: MSBuild Âú®Ê≠§ÁâàÊú¨ÁöÑ‰ΩúÊ•≠Á≥ªÁµ±‰∏ä‰∏çÊúÉÂü∑Ë°å„ÄÇÂè™ÊúâÂú® Windows 2000„ÄÅWindows XP ÂèäÊõ¥Êñ∞ÁâàÊú¨ÊâçÂèóÊîØÊè¥„ÄÇ</target>
+        <source>MSBUILD : error MSB1015: MSBuild does not run on this version of the operating system. It is only supported on Windows 7 and later versions.</source>
+        <target state="needs-review-translation">MSBUILD : error MSB1015: MSBuild Âú®Ê≠§ÁâàÊú¨ÁöÑ‰ΩúÊ•≠Á≥ªÁµ±‰∏ä‰∏çÊúÉÂü∑Ë°å„ÄÇÂè™ÊúâÂú® Windows 2000„ÄÅWindows XP ÂèäÊõ¥Êñ∞ÁâàÊú¨ÊâçÂèóÊîØÊè¥„ÄÇ</target>
         <note>{StrBegin="MSBUILD : error MSB1015: "}LOCALIZATION: The error prefix "MSBUILD : error MSBxxxx:" should not be localized.</note>
       </trans-unit>
       <trans-unit id="Using35Engine">
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 09a0f38eaf3..b3cf4561a15 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1545,11 +1545,9 @@ private static bool BuildProjectWithOldOM(string projectFile, string[] targets,
         private static void VerifyThrowSupportedOS()
         {
 #if FEATURE_OSVERSION
-            if ((Environment.OSVersion.Platform == PlatformID.Win32S) ||        // Win32S
-                (Environment.OSVersion.Platform == PlatformID.Win32Windows) ||  // Windows 95, Windows 98, Windows ME
-                (Environment.OSVersion.Platform == PlatformID.WinCE) ||         // Windows CE
-                ((Environment.OSVersion.Platform == PlatformID.Win32NT) &&      // Windows NT 4.0 and earlier
-                (Environment.OSVersion.Version.Major <= 4)))
+            if (Environment.OSVersion.Platform != PlatformID.Win32NT ||
+                Environment.OSVersion.Version.Major < 6 ||
+                (Environment.OSVersion.Version.Major == 6 && Environment.OSVersion.Version.Minor < 1)) // Windows 7 is minimum
             {
                 // If we're running on any of the unsupported OS's, fail immediately.  This way,
                 // we don't run into some obscure error down the line, totally confusing the user.
@@ -3133,7 +3131,9 @@ private static void ProcessFileLoggers(string[][] groupedFileLoggerParameters, L
                 LoggerVerbosity defaultFileLoggerVerbosity = LoggerVerbosity.Detailed;
                 fileLogger.Verbosity = defaultFileLoggerVerbosity;
 
-                if (cpuCount == 1)
+                // Check to see if there is a possibility we will be logging from an out-of-proc node.
+                // If so (we're multi-proc or the in-proc node is disabled), we register a distributed logger.
+                if (cpuCount == 1 && Environment.GetEnvironmentVariable("MSBUILDNOINPROCNODE") != "1")
                 {
                     // We've decided to use the MP logger even in single proc mode.
                     // Switch it on here, rather than in the logger, so that other hosts that use
@@ -3197,7 +3197,9 @@ List<ILogger> loggers
                     consoleParameters = AggregateParameters(consoleParameters, consoleLoggerParameters);
                 }
 
-                if (cpuCount == 1)
+                // Check to see if there is a possibility we will be logging from an out-of-proc node.
+                // If so (we're multi-proc or the in-proc node is disabled), we register a distributed logger.
+                if (cpuCount == 1 && Environment.GetEnvironmentVariable("MSBUILDNOINPROCNODE") != "1")
                 {
                     // We've decided to use the MP logger even in single proc mode.
                     // Switch it on here, rather than in the logger, so that other hosts that use
diff --git a/src/MSBuild/app.amd64.config b/src/MSBuild/app.amd64.config
index f0fbf0cfccd..93697e88064 100644
--- a/src/MSBuild/app.amd64.config
+++ b/src/MSBuild/app.amd64.config
@@ -10,6 +10,7 @@
       <DisableFXClosureWalk enabled="true" />
       <DeferFXClosureWalk enabled="true" />
       <generatePublisherEvidence enabled="false" />
+      <ThreadPool_UnfairSemaphoreSpinLimit enabled="0" />
       <!-- Manually expanded list of quirks applied to a .NET 4.7.2 application, to work around CLR bug that doesn't apply them correctly
            https://referencesource.microsoft.com/#mscorlib/system/AppContext/AppContextDefaultValues.Defaults.cs,37
            Framework bug: https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1148752 -->
@@ -49,11 +50,6 @@
           <bindingRedirect oldVersion="0.0.0.0-99.9.9.9" newVersion="15.1.0.0" />
           <codeBase version="15.1.0.0" href="..\Microsoft.Build.Conversion.Core.dll"/>
         </dependentAssembly>
-        <dependentAssembly>
-          <assemblyIdentity name="Microsoft.Build.CPPTasks.Common" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
-          <bindingRedirect oldVersion="16.0.0.0-16.11.0.0" newVersion="16.11.0.0" />
-          <codeBase version="16.11.0.0" href="..\..\..\Microsoft\VC\v160\Microsoft.Build.CPPTasks.Common.dll" />
-        </dependentAssembly>
 
         <!-- Redirects for assemblies redistributed by MSBuild (in the .vsix). -->
         <dependentAssembly>
@@ -72,6 +68,7 @@
           <assemblyIdentity name="System.Buffers" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />
         </dependentAssembly>
+
         <!-- Pull plugins that reference SCI up to our version in case they depended on our copy of the older version -->
         <dependentAssembly>
           <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
@@ -95,11 +92,11 @@
       </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Text.Encodings.Web" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-4.0.5.0" newVersion="4.0.5.0" />
+          <bindingRedirect oldVersion="0.0.0.0-5.0.0.1" newVersion="5.0.0.1" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Text.Json" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
+          <bindingRedirect oldVersion="0.0.0.0-5.0.0.2" newVersion="5.0.0.2" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Threading.Tasks.Dataflow" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
@@ -107,21 +104,24 @@
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Threading.Tasks.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-4.2.0.0" newVersion="4.2.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-4.2.0.1" newVersion="4.2.0.1" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.ValueTuple" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />
+          <!-- It is unusual to redirect down, but in this case it's ok: 4.0.3.0 forwards
+               to 4.0.0.0 in the GAC, so this just removes the need to redistribute a file
+               and makes that resolution faster. -->
+          <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.0.0" />
         </dependentAssembly>
 
         <!-- Redirects for components dropped by Visual Studio -->
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Activities.Build" culture="neutral" publicKeyToken="31bf3856ad364e35" />
-          <bindingRedirect oldVersion="4.0.0.0" newVersion="16.0.0.0" />
+          <bindingRedirect oldVersion="4.0.0.0" newVersion="17.0.0.0" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="XamlBuildTask" culture="neutral" publicKeyToken="31bf3856ad364e35" />
-          <bindingRedirect oldVersion="4.0.0.0-16.0.0.0" newVersion="16.0.0.0" />
+          <bindingRedirect oldVersion="4.0.0.0-17.0.0.0" newVersion="17.0.0.0" />
         </dependentAssembly>
 
         <!-- Workaround for crash in C++ CodeAnalysis scenarios due to https://github.com/Microsoft/msbuild/issues/1675 -->
@@ -163,7 +163,7 @@
         <property name="RoslynTargetsPath" value="$([MSBuild]::GetToolsDirectory32())\Roslyn" />
 
         <!-- VC Specific Paths -->
-        <property name="VCTargetsPath" value="$([MSBuild]::ValueOrDefault('$(VCTargetsPath)','$(MSBuildExtensionsPath32)\Microsoft\VC\v160\'))" />
+        <property name="VCTargetsPath" value="$([MSBuild]::ValueOrDefault('$(VCTargetsPath)','$(MSBuildExtensionsPath32)\Microsoft\VC\v170\'))" />
         <property name="VCTargetsPath14" value="$([MSBuild]::ValueOrDefault('$(VCTargetsPath14)','$([MSBuild]::GetProgramFiles32())\MSBuild\Microsoft.Cpp\v4.0\V140\'))" />
         <property name="VCTargetsPath12" value="$([MSBuild]::ValueOrDefault('$(VCTargetsPath12)','$([MSBuild]::GetProgramFiles32())\MSBuild\Microsoft.Cpp\v4.0\V120\'))" />
         <property name="VCTargetsPath11" value="$([MSBuild]::ValueOrDefault('$(VCTargetsPath11)','$([MSBuild]::GetProgramFiles32())\MSBuild\Microsoft.Cpp\v4.0\V110\'))" />
diff --git a/src/MSBuild/app.config b/src/MSBuild/app.config
index 6e674042c57..047b20fb44c 100644
--- a/src/MSBuild/app.config
+++ b/src/MSBuild/app.config
@@ -10,6 +10,7 @@
       <DisableFXClosureWalk enabled="true" />
       <DeferFXClosureWalk enabled="true" />
       <generatePublisherEvidence enabled="false" />
+      <ThreadPool_UnfairSemaphoreSpinLimit enabled="0" />
       <AppContextSwitchOverrides value="Switch.System.Security.Cryptography.UseLegacyFipsThrow=false" />
       <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
         <dependentAssembly>
@@ -81,11 +82,11 @@
       </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Text.Encodings.Web" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-4.0.5.0" newVersion="4.0.5.0" />
+          <bindingRedirect oldVersion="0.0.0.0-5.0.0.1" newVersion="5.0.0.1" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Text.Json" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
+          <bindingRedirect oldVersion="0.0.0.0-5.0.0.2" newVersion="5.0.0.2" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="Threading.Tasks.Dataflow" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
@@ -93,28 +94,26 @@
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Threading.Tasks.Extensions" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-4.2.0.0" newVersion="4.2.0.0" />
+          <bindingRedirect oldVersion="0.0.0.0-4.2.0.1" newVersion="4.2.0.1" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.ValueTuple" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
-          <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />
+          <!-- It is unusual to redirect down, but in this case it's ok: 4.0.3.0 forwards
+               to 4.0.0.0 in the GAC, so this just removes the need to redistribute a file
+               and makes that resolution faster. -->
+          <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.0.0" />
         </dependentAssembly>
 
         <!-- Redirects for components dropped by Visual Studio -->
         <dependentAssembly>
           <assemblyIdentity name="Microsoft.Activities.Build" culture="neutral" publicKeyToken="31bf3856ad364e35" />
-          <bindingRedirect oldVersion="4.0.0.0" newVersion="16.0.0.0" />
-          <codeBase version="16.0.0.0" href=".\amd64\Microsoft.Activities.Build.dll" />
+          <bindingRedirect oldVersion="4.0.0.0" newVersion="17.0.0.0" />
+          <codeBase version="17.0.0.0" href=".\amd64\Microsoft.Activities.Build.dll" />
         </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="XamlBuildTask" culture="neutral" publicKeyToken="31bf3856ad364e35" />
-          <bindingRedirect oldVersion="4.0.0.0-16.0.0.0" newVersion="16.0.0.0" />
-          <codeBase version="16.0.0.0" href=".\amd64\XamlBuildTask.dll" />
-        </dependentAssembly>
-        <dependentAssembly>
-          <assemblyIdentity name="Microsoft.Build.CPPTasks.Common" culture="neutral" publicKeyToken="b03f5f7f11d50a3a" />
-          <bindingRedirect oldVersion="16.0.0.0-16.11.0.0" newVersion="16.11.0.0" />
-          <codeBase version="16.11.0.0" href="..\..\Microsoft\VC\v160\Microsoft.Build.CPPTasks.Common.dll" />
+          <bindingRedirect oldVersion="4.0.0.0-17.0.0.0" newVersion="17.0.0.0" />
+          <codeBase version="17.0.0.0" href=".\amd64\XamlBuildTask.dll" />
         </dependentAssembly>
 
         <!-- Workaround for crash in C++ CodeAnalysis scenarios due to https://github.com/Microsoft/msbuild/issues/1675 -->
@@ -156,7 +155,7 @@
         <property name="RoslynTargetsPath" value="$([MSBuild]::GetToolsDirectory32())\Roslyn" />
 
         <!-- VC Specific Paths -->
-        <property name="VCTargetsPath" value="$([MSBuild]::ValueOrDefault('$(VCTargetsPath)','$(MSBuildExtensionsPath32)\Microsoft\VC\v160\'))" />
+        <property name="VCTargetsPath" value="$([MSBuild]::ValueOrDefault('$(VCTargetsPath)','$(MSBuildExtensionsPath32)\Microsoft\VC\v170\'))" />
         <property name="VCTargetsPath14" value="$([MSBuild]::ValueOrDefault('$(VCTargetsPath14)','$([MSBuild]::GetProgramFiles32())\MSBuild\Microsoft.Cpp\v4.0\V140\'))" />
         <property name="VCTargetsPath12" value="$([MSBuild]::ValueOrDefault('$(VCTargetsPath12)','$([MSBuild]::GetProgramFiles32())\MSBuild\Microsoft.Cpp\v4.0\V120\'))" />
         <property name="VCTargetsPath11" value="$([MSBuild]::ValueOrDefault('$(VCTargetsPath11)','$([MSBuild]::GetProgramFiles32())\MSBuild\Microsoft.Cpp\v4.0\V110\'))" />
diff --git a/src/MSBuildTaskHost/FileSystem/MSBuildTaskHostFileSystem.cs b/src/MSBuildTaskHost/FileSystem/MSBuildTaskHostFileSystem.cs
index 103061df36c..14949660eac 100644
--- a/src/MSBuildTaskHost/FileSystem/MSBuildTaskHostFileSystem.cs
+++ b/src/MSBuildTaskHost/FileSystem/MSBuildTaskHostFileSystem.cs
@@ -16,7 +16,7 @@ internal class MSBuildTaskHostFileSystem : IFileSystem
 
         public static MSBuildTaskHostFileSystem Singleton() => Instance;
 
-        public bool DirectoryEntryExists(string path)
+        public bool FileOrDirectoryExists(string path)
         {
             return NativeMethodsShared.FileOrDirectoryExists(path);
         }
diff --git a/src/MSBuildTaskHost/MSBuildTaskHost.csproj b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
index 79ed14e22b1..66f5bc78f00 100644
--- a/src/MSBuildTaskHost/MSBuildTaskHost.csproj
+++ b/src/MSBuildTaskHost/MSBuildTaskHost.csproj
@@ -13,7 +13,7 @@
     <!-- Set RuntimeIdentifiers so that NuGet will restore for both AnyCPU as well as x86 and x64.
          This is important for the MSBuild.VSSetup project, which "references" both the x86 and x64
          versions of this project -->
-    <RuntimeIdentifiers>win7-x86;win7-x64</RuntimeIdentifiers>
+    <RuntimeIdentifiers Condition="'$(DotNetBuildFromSource)' != 'true'">win7-x86;win7-x64</RuntimeIdentifiers>
 
     <EnableDefaultItems>false</EnableDefaultItems>
     <DefineConstants>$(DefineConstants);CLR2COMPATIBILITY;TASKHOST</DefineConstants>
diff --git a/src/Package/Localization/Localization.csproj b/src/Package/Localization/Localization.csproj
index 0326009105b..e15af6ed02a 100644
--- a/src/Package/Localization/Localization.csproj
+++ b/src/Package/Localization/Localization.csproj
@@ -1,6 +1,6 @@
 Ôªø<Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
-    <TargetFramework Condition="$(MonoBuild) != 'true'">net5.0</TargetFramework>
+    <TargetFramework Condition="$(MonoBuild) != 'true'">net6.0</TargetFramework>
     <TargetFramework Condition="$(MonoBuild) == 'true'">net472</TargetFramework>
     <NuspecFile>Microsoft.Build.Localization.nuspec</NuspecFile>
     <IsShipping>false</IsShipping>
diff --git a/src/Package/Localization/Microsoft.Build.Localization.nuspec b/src/Package/Localization/Microsoft.Build.Localization.nuspec
index aa36ab55a94..f2c99374064 100644
--- a/src/Package/Localization/Microsoft.Build.Localization.nuspec
+++ b/src/Package/Localization/Microsoft.Build.Localization.nuspec
@@ -22,7 +22,6 @@
     <!-- MSBuild.dll -->
     <file src="cs\MSBuild.resources.dll" target="lib\netstandard1.3\cs\MSBuild.resources.dll"/>
     <file src="de\MSBuild.resources.dll" target="lib\netstandard1.3\de\MSBuild.resources.dll"/>
-    <file src="en\MSBuild.resources.dll" target="lib\netstandard1.3\en\MSBuild.resources.dll"/>
     <file src="es\MSBuild.resources.dll" target="lib\netstandard1.3\es\MSBuild.resources.dll"/>
     <file src="fr\MSBuild.resources.dll" target="lib\netstandard1.3\fr\MSBuild.resources.dll"/>
     <file src="it\MSBuild.resources.dll" target="lib\netstandard1.3\it\MSBuild.resources.dll"/>
@@ -38,7 +37,6 @@
     <!-- Microsoft.Build.dll-->
     <file src="cs\Microsoft.Build.resources.dll" target="lib\netstandard1.3\cs\Microsoft.Build.resources.dll" />
     <file src="de\Microsoft.Build.resources.dll" target="lib\netstandard1.3\de\Microsoft.Build.resources.dll" />
-    <file src="en\Microsoft.Build.resources.dll" target="lib\netstandard1.3\en\Microsoft.Build.resources.dll" />
     <file src="es\Microsoft.Build.resources.dll" target="lib\netstandard1.3\es\Microsoft.Build.resources.dll" />
     <file src="fr\Microsoft.Build.resources.dll" target="lib\netstandard1.3\fr\Microsoft.Build.resources.dll" />
     <file src="it\Microsoft.Build.resources.dll" target="lib\netstandard1.3\it\Microsoft.Build.resources.dll" />
@@ -54,7 +52,6 @@
     <!-- Microsoft.Build.Tasks.Core.dll-->
     <file src="cs\Microsoft.Build.Tasks.Core.resources.dll" target="lib\netstandard1.3\cs\Microsoft.Build.Tasks.Core.resources.dll" />
     <file src="de\Microsoft.Build.Tasks.Core.resources.dll" target="lib\netstandard1.3\de\Microsoft.Build.Tasks.Core.resources.dll" />
-    <file src="en\Microsoft.Build.Tasks.Core.resources.dll" target="lib\netstandard1.3\en\Microsoft.Build.Tasks.Core.resources.dll" />
     <file src="es\Microsoft.Build.Tasks.Core.resources.dll" target="lib\netstandard1.3\es\Microsoft.Build.Tasks.Core.resources.dll" />
     <file src="fr\Microsoft.Build.Tasks.Core.resources.dll" target="lib\netstandard1.3\fr\Microsoft.Build.Tasks.Core.resources.dll" />
     <file src="it\Microsoft.Build.Tasks.Core.resources.dll" target="lib\netstandard1.3\it\Microsoft.Build.Tasks.Core.resources.dll" />
@@ -70,7 +67,6 @@
     <!-- Microsoft.Build.Utilities.Core.dll-->
     <file src="cs\Microsoft.Build.Utilities.Core.resources.dll" target="lib\netstandard1.3\cs\Microsoft.Build.Utilities.Core.resources.dll" />
     <file src="de\Microsoft.Build.Utilities.Core.resources.dll" target="lib\netstandard1.3\de\Microsoft.Build.Utilities.Core.resources.dll" />
-    <file src="en\Microsoft.Build.Utilities.Core.resources.dll" target="lib\netstandard1.3\en\Microsoft.Build.Utilities.Core.resources.dll" />
     <file src="es\Microsoft.Build.Utilities.Core.resources.dll" target="lib\netstandard1.3\es\Microsoft.Build.Utilities.Core.resources.dll" />
     <file src="fr\Microsoft.Build.Utilities.Core.resources.dll" target="lib\netstandard1.3\fr\Microsoft.Build.Utilities.Core.resources.dll" />
     <file src="it\Microsoft.Build.Utilities.Core.resources.dll" target="lib\netstandard1.3\it\Microsoft.Build.Utilities.Core.resources.dll" />
diff --git a/src/Package/MSBuild.VSSetup/files.swr b/src/Package/MSBuild.VSSetup/files.swr
index 9e82ee87cae..67e5764974d 100644
--- a/src/Package/MSBuild.VSSetup/files.swr
+++ b/src/Package/MSBuild.VSSetup/files.swr
@@ -21,7 +21,7 @@ vs.relatedProcessFiles
 
 folder InstallDir:\MSBuild\Current
   file source=$(X86BinPath)Microsoft.Common.props
-  file source=$(X86BinPath)Microsoft.VisualStudioVersion.v16.Common.props
+  file source=$(X86BinPath)Microsoft.VisualStudioVersion.v17.Common.props
   file source=$(ThirdPartyNotice)
 
 folder InstallDir:\MSBuild\Current\Bin
@@ -36,20 +36,19 @@ folder InstallDir:\MSBuild\Current\Bin
   file source=$(X86BinPath)MSBuild.exe.config
   file source=$(TaskHostBinPath)MSBuildTaskHost.exe vs.file.ngenArchitecture=x86
   file source=$(TaskHostBinPath)MSBuildTaskHost.exe.config
-  file source=$(X86BinPath)System.Buffers.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)System.Memory.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)System.Text.Json.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)Microsoft.Bcl.AsyncInterfaces.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)System.Text.Encodings.Web.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)System.Threading.Tasks.Extensions.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)System.ValueTuple.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)System.Numerics.Vectors.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)System.Resources.Extensions.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)System.Runtime.CompilerServices.Unsafe.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)System.Threading.Tasks.Dataflow.dll vs.file.ngenArchitecture=all vs.file.ngenPriority=1
+  file source=$(X86BinPath)System.Buffers.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
+  file source=$(X86BinPath)System.Memory.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
+  file source=$(X86BinPath)System.Text.Json.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
+  file source=$(X86BinPath)Microsoft.Bcl.AsyncInterfaces.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
+  file source=$(X86BinPath)System.Text.Encodings.Web.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
+  file source=$(X86BinPath)System.Threading.Tasks.Extensions.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
+  file source=$(X86BinPath)System.Numerics.Vectors.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
+  file source=$(X86BinPath)System.Resources.Extensions.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
+  file source=$(X86BinPath)System.Runtime.CompilerServices.Unsafe.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
+  file source=$(X86BinPath)System.Threading.Tasks.Dataflow.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
+  file source=$(X86BinPath)System.Collections.Immutable.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
   file source=$(X86BinPath)Microsoft.NET.StringTools.dll vs.file.ngenArchitecture=all
   file source=$(TaskHostBinPath)Microsoft.NET.StringTools.net35.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)System.Collections.Immutable.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
   file source=$(X86BinPath)Microsoft.Common.CurrentVersion.targets
   file source=$(X86BinPath)Microsoft.Common.CrossTargeting.targets
   file source=$(X86BinPath)Microsoft.Common.overridetasks
@@ -101,12 +100,6 @@ folder InstallDir:\MSBuild\Current\Bin\de
   file source=$(X86BinPath)de\Microsoft.Build.Utilities.Core.resources.dll vs.file.ngenArchitecture=all
   file source=$(X86BinPath)de\MSBuild.resources.dll vs.file.ngenArchitecture=all
   file source=$(TaskHostBinPath)de\MSBuildTaskHost.resources.dll vs.file.ngenArchitecture=all
-folder InstallDir:\MSBuild\Current\Bin\en
-  file source=$(X86BinPath)en\Microsoft.Build.resources.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)en\Microsoft.Build.Tasks.Core.resources.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)en\Microsoft.Build.Utilities.Core.resources.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)en\MSBuild.resources.dll vs.file.ngenArchitecture=all
-  file source=$(TaskHostBinPath)en\MSBuildTaskHost.resources.dll vs.file.ngenArchitecture=all
 folder InstallDir:\MSBuild\Current\Bin\es
   file source=$(X86BinPath)es\Microsoft.Build.resources.dll vs.file.ngenArchitecture=all
   file source=$(X86BinPath)es\Microsoft.Build.Tasks.Core.resources.dll vs.file.ngenArchitecture=all
@@ -193,7 +186,6 @@ folder InstallDir:\MSBuild\Current\Bin\amd64
   file source=$(X86BinPath)Microsoft.Bcl.AsyncInterfaces.dll vs.file.ngenArchitecture=all
   file source=$(X86BinPath)System.Text.Encodings.Web.dll vs.file.ngenArchitecture=all
   file source=$(X86BinPath)System.Threading.Tasks.Extensions.dll vs.file.ngenArchitecture=all
-  file source=$(X86BinPath)System.ValueTuple.dll vs.file.ngenArchitecture=all
   file source=$(X86BinPath)System.Numerics.Vectors.dll vs.file.ngenArchitecture=all
   file source=$(X86BinPath)System.Resources.Extensions.dll vs.file.ngenArchitecture=all
   file source=$(X86BinPath)System.Runtime.CompilerServices.Unsafe.dll vs.file.ngenArchitecture=all
@@ -245,12 +237,6 @@ folder InstallDir:\MSBuild\Current\Bin\amd64\de
   file source=$(X64BinPath)de\Microsoft.Build.Utilities.Core.resources.dll vs.file.ngenArchitecture=all
   file source=$(X64BinPath)de\MSBuild.resources.dll vs.file.ngenArchitecture=all
   file source=$(TaskHostX64BinPath)de\MSBuildTaskHost.resources.dll vs.file.ngenArchitecture=all
-folder InstallDir:\MSBuild\Current\Bin\amd64\en
-  file source=$(X64BinPath)en\Microsoft.Build.resources.dll vs.file.ngenArchitecture=all
-  file source=$(X64BinPath)en\Microsoft.Build.Tasks.Core.resources.dll vs.file.ngenArchitecture=all
-  file source=$(X64BinPath)en\Microsoft.Build.Utilities.Core.resources.dll vs.file.ngenArchitecture=all
-  file source=$(X64BinPath)en\MSBuild.resources.dll vs.file.ngenArchitecture=all
-  file source=$(TaskHostX64BinPath)en\MSBuildTaskHost.resources.dll vs.file.ngenArchitecture=all
 folder InstallDir:\MSBuild\Current\Bin\amd64\es
   file source=$(X64BinPath)es\Microsoft.Build.resources.dll vs.file.ngenArchitecture=all
   file source=$(X64BinPath)es\Microsoft.Build.Tasks.Core.resources.dll vs.file.ngenArchitecture=all
@@ -322,8 +308,6 @@ folder InstallDir:\Common7\IDE\CommonExtensions\MSBuild
   file source=$(SourceDir)Package\MSBuild.VSSetup\MSBuild.clientenabledpkg
   file source=$(SourceDir)Framework\Microsoft.Build.Framework.pkgdef
   file source=$(SourceDir)Build\Microsoft.Build.pkgdef
-  file source=$(SourceDir)Build\System.Text.Encodings.Web.pkgdef
-  file source=$(SourceDir)Build\System.Text.Json.pkgdef
   file source=$(SourceDir)StringTools\StringTools.pkgdef
   file source=$(SourceDir)Tasks\Microsoft.Build.Tasks.Core.pkgdef
   file source=$(SourceDir)Tasks\System.Resources.Extensions.pkgdef
diff --git a/src/Samples/NetCoreCompileTest/App.config b/src/Samples/NetCoreCompileTest/App.config
deleted file mode 100644
index 88fa4027bda..00000000000
--- a/src/Samples/NetCoreCompileTest/App.config
+++ /dev/null
@@ -1,6 +0,0 @@
-Ôªø<?xml version="1.0" encoding="utf-8" ?>
-<configuration>
-    <startup> 
-        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.2" />
-    </startup>
-</configuration>
\ No newline at end of file
diff --git a/src/Samples/NetCoreCompileTest/NetCoreCompileTest.csproj b/src/Samples/NetCoreCompileTest/NetCoreCompileTest.csproj
deleted file mode 100644
index 56e7ebc0301..00000000000
--- a/src/Samples/NetCoreCompileTest/NetCoreCompileTest.csproj
+++ /dev/null
@@ -1,68 +0,0 @@
-Ôªø<?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  <!--<Import Project="$(MSBuildToolsPath)\Microsoft.Common.tasks" />-->
-  <!--<Target Name="Build">
-    <Message Text="Hello World!"/>
-    --><!-- UseSharedCompilation="true" - requires System.Security.Cryptography.Hashing.Algorithms, and updates to BuildClient.CheckPipeConnectionOwnership in Roslyn tasks --><!--
-    <Csc
-      Sources="@(Compile)"
-      />
-  </Target>-->
-  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
-  <PropertyGroup>
-    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
-    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <ProjectGuid>{11B5D53E-90E4-4BD5-9883-B5921F7DE854}</ProjectGuid>
-    <OutputType>Exe</OutputType>
-    <AppDesignerFolder>Properties</AppDesignerFolder>
-    <RootNamespace>NetCoreCompileTest</RootNamespace>
-    <AssemblyName>NetCoreCompileTest</AssemblyName>
-    <TargetFrameworkVersion>v4.5.2</TargetFrameworkVersion>
-    <FileAlignment>512</FileAlignment>
-    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
-    <PlatformTarget>AnyCPU</PlatformTarget>
-    <DebugSymbols>true</DebugSymbols>
-    <DebugType>full</DebugType>
-    <Optimize>false</Optimize>
-    <OutputPath>bin\Debug\</OutputPath>
-    <DefineConstants>DEBUG;TRACE</DefineConstants>
-    <ErrorReport>prompt</ErrorReport>
-    <WarningLevel>4</WarningLevel>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
-    <PlatformTarget>AnyCPU</PlatformTarget>
-    <DebugType>pdbonly</DebugType>
-    <Optimize>true</Optimize>
-    <OutputPath>bin\Release\</OutputPath>
-    <DefineConstants>TRACE</DefineConstants>
-    <ErrorReport>prompt</ErrorReport>
-    <WarningLevel>4</WarningLevel>
-  </PropertyGroup>
-  <ItemGroup>
-    <Reference Include="System" />
-    <Reference Include="System.Core" />
-    <Reference Include="System.Xml.Linq" />
-    <Reference Include="System.Data.DataSetExtensions" />
-    <Reference Include="Microsoft.CSharp" />
-    <Reference Include="System.Data" />
-    <Reference Include="System.Net.Http" />
-    <Reference Include="System.Xml" />
-  </ItemGroup>
-  <ItemGroup>
-    <Compile Include="Program.cs" />
-    <!--<Compile Include="Properties\AssemblyInfo.cs" />-->
-  </ItemGroup>
-  <ItemGroup>
-    <None Include="App.config" />
-  </ItemGroup>
-  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
-  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
-       Other similar extension points exist, see Microsoft.Common.targets.
-  <Target Name="BeforeBuild">
-  </Target>
-  <Target Name="AfterBuild">
-  </Target>
-  -->
-</Project>
\ No newline at end of file
diff --git a/src/Samples/NetCoreCompileTest/Program.cs b/src/Samples/NetCoreCompileTest/Program.cs
deleted file mode 100644
index 4b6727a4db1..00000000000
--- a/src/Samples/NetCoreCompileTest/Program.cs
+++ /dev/null
@@ -1,19 +0,0 @@
-Ôªø// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-using System;
-using System.Collections.Generic;
-//using System.Linq;
-//using System.Text;
-//using System.Threading.Tasks;
-
-namespace NetCoreCompileTest
-{
-    internal class Program
-    {
-        private static void Main(string[] args)
-        {
-            Console.WriteLine("Hello, World");
-        }
-    }
-}
diff --git a/src/Samples/NetCoreCompileTest/Properties/AssemblyInfo.cs b/src/Samples/NetCoreCompileTest/Properties/AssemblyInfo.cs
deleted file mode 100644
index 2767b66e115..00000000000
--- a/src/Samples/NetCoreCompileTest/Properties/AssemblyInfo.cs
+++ /dev/null
@@ -1,36 +0,0 @@
-Ôªøusing System.Reflection;
-using System.Runtime.CompilerServices;
-using System.Runtime.InteropServices;
-
-// General Information about an assembly is controlled through the following 
-// set of attributes. Change these attribute values to modify the information
-// associated with an assembly.
-[assembly: AssemblyTitle("NetCoreCompileTest")]
-[assembly: AssemblyDescription("")]
-[assembly: AssemblyConfiguration("")]
-[assembly: AssemblyCompany("")]
-[assembly: AssemblyProduct("NetCoreCompileTest")]
-[assembly: AssemblyCopyright("Copyright ¬©  2015")]
-[assembly: AssemblyTrademark("")]
-[assembly: AssemblyCulture("")]
-
-// Setting ComVisible to false makes the types in this assembly not visible 
-// to COM components.  If you need to access a type in this assembly from 
-// COM, set the ComVisible attribute to true on that type.
-[assembly: ComVisible(false)]
-
-// The following GUID is for the ID of the typelib if this project is exposed to COM
-[assembly: Guid("11b5d53e-90e4-4bd5-9883-b5921f7de854")]
-
-// Version information for an assembly consists of the following four values:
-//
-//      Major Version
-//      Minor Version 
-//      Build Number
-//      Revision
-//
-// You can specify all the values or you can default the Build and Revision Numbers 
-// by using the '*' as shown below:
-// [assembly: AssemblyVersion("1.0.*")]
-[assembly: AssemblyVersion("1.0.0.0")]
-[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/src/Samples/PortableTask/PortableTask.csproj b/src/Samples/PortableTask/PortableTask.csproj
index 4f5461e1f22..6a4541787a1 100644
--- a/src/Samples/PortableTask/PortableTask.csproj
+++ b/src/Samples/PortableTask/PortableTask.csproj
@@ -1,9 +1,9 @@
-Ôªø<Project Sdk="Microsoft.NET.Sdk">
+<Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
     <UseProductOutputPath>true</UseProductOutputPath>
     <CopyNuGetImplementations>false</CopyNuGetImplementations>
     <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
-    <TargetFrameworks>netstandard1.3</TargetFrameworks>
+    <TargetFrameworks>netstandard2.0</TargetFrameworks>
   </PropertyGroup>
   <ItemGroup>
     <Content Include="portableTaskTest.proj">
diff --git a/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
index 7f049a6c699..4277bdad314 100644
--- a/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
+++ b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
@@ -2,12 +2,13 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Diagnostics;
+using System.Linq;
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Experimental.ProjectCache;
 using Microsoft.Build.Framework;
+using Microsoft.Build.Graph;
 using Shouldly;
 
 namespace MockCacheFromAssembly
@@ -23,6 +24,15 @@ public override Task BeginBuildAsync(CacheContext context, PluginLoggerBase logg
         {
             logger.LogMessage($"{nameof(AssemblyMockCache)}: BeginBuildAsync", MessageImportance.High);
 
+            foreach (var ep in context.GraphEntryPoints ?? Enumerable.Empty<ProjectGraphEntryPoint>())
+            {
+                var globalPropertyString = ep.GlobalProperties is not null
+                    ? string.Join("\n\t", ep.GlobalProperties.Select(gp => $"{gp.Key}:{gp.Value}"))
+                    : string.Empty;
+
+                logger.LogMessage($"EntryPoint: {ep.ProjectFile} \n(\n\t{globalPropertyString}\n)");
+            }
+
             ErrorFrom(nameof(BeginBuildAsync), logger);
 
             return Task.CompletedTask;
diff --git a/src/Samples/ProjectCachePlugin/ProjectCachePlugin.csproj b/src/Samples/ProjectCachePlugin/ProjectCachePlugin.csproj
index 3e08803f1c5..6972b5e9ab0 100644
--- a/src/Samples/ProjectCachePlugin/ProjectCachePlugin.csproj
+++ b/src/Samples/ProjectCachePlugin/ProjectCachePlugin.csproj
@@ -1,11 +1,11 @@
-Ôªø<Project Sdk="Microsoft.NET.Sdk">
+<Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
     <UseProductOutputPath>true</UseProductOutputPath>
     <CopyNuGetImplementations>false</CopyNuGetImplementations>
     <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
 
-    <TargetFrameworks>net5.0</TargetFrameworks>
-    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(FullFrameworkTFM);net5.0</TargetFrameworks>
+    <TargetFrameworks>net6.0</TargetFrameworks>
+    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(FullFrameworkTFM);net6.0</TargetFrameworks>
     <TargetFrameworks Condition="'$(MonoBuild)'=='true'">$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
   </PropertyGroup>
   <ItemGroup>
@@ -14,5 +14,6 @@
   </ItemGroup>
   <ItemGroup>
     <PackageReference Include="Shouldly" Version="3.0.0" />
+    <PackageReference Include="System.Net.Http" Version="4.3.4" />
   </ItemGroup>
 </Project>
diff --git a/src/Shared/AssemblyNameExtension.cs b/src/Shared/AssemblyNameExtension.cs
index 8c62a178e05..99db41274e3 100644
--- a/src/Shared/AssemblyNameExtension.cs
+++ b/src/Shared/AssemblyNameExtension.cs
@@ -148,7 +148,6 @@ private AssemblyNameExtension(SerializationInfo info, StreamingContext context)
                 var hashAlgorithm = (System.Configuration.Assemblies.AssemblyHashAlgorithm) info.GetInt32("hashAlg");
                 var versionCompatibility = (AssemblyVersionCompatibility) info.GetInt32("verCompat");
                 var codeBase = info.GetString("codebase");
-                var keyPair = (StrongNameKeyPair) info.GetValue("keypair", typeof(StrongNameKeyPair));
 
                 asAssemblyName = new AssemblyName
                 {
@@ -160,7 +159,6 @@ private AssemblyNameExtension(SerializationInfo info, StreamingContext context)
                     HashAlgorithm = hashAlgorithm,
                     VersionCompatibility = versionCompatibility,
                     CodeBase = codeBase,
-                    KeyPair = keyPair
                 };
 
                 asAssemblyName.SetPublicKey(publicKey);
@@ -635,7 +633,7 @@ private static int CompareBaseNamesStringWise(string asString1, string asString2
         /// </summary>
         internal AssemblyNameExtension Clone()
         {
-            AssemblyNameExtension newExtension = new AssemblyNameExtension();
+            AssemblyNameExtension newExtension = new();
 
             if (asAssemblyName != null)
             {
@@ -1001,7 +999,6 @@ public void GetObjectData(SerializationInfo info, StreamingContext context)
                 info.AddValue("hashAlg", asAssemblyName.HashAlgorithm);
                 info.AddValue("verCompat", asAssemblyName.VersionCompatibility);
                 info.AddValue("codebase", asAssemblyName.CodeBase);
-                info.AddValue("keypair", asAssemblyName.KeyPair);
             }
 
             info.AddValue("asStr", asString);
diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index 6c2b6337393..56a1b1f3803 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -64,6 +64,14 @@ public BinaryReadTranslator(Stream packetStream, SharedReadBuffer buffer)
                 _reader = InterningBinaryReader.Create(packetStream, buffer);
             }
 
+            /// <summary>
+            /// Delegates the Dispose call the to the underlying BinaryReader.
+            /// </summary>
+            public void Dispose()
+            {
+                _reader.Close();
+            }
+
             /// <summary>
             /// Gets the reader, if any.
             /// </summary>
@@ -660,12 +668,31 @@ public void TranslateDictionary<D, T>(ref D dictionary, ObjectTranslator<T> obje
                 }
             }
 
-            /// <summary>
-            /// Reads in the boolean which says if this object is null or not.
-            /// </summary>
-            /// <typeparam name="T">The type of object to test.</typeparam>
-            /// <returns>True if the object should be read, false otherwise.</returns>
-            public bool TranslateNullable<T>(T value)
+            public void TranslateDictionary(ref Dictionary<string, DateTime> dictionary, StringComparer comparer)
+            {
+                if (!TranslateNullable(dictionary))
+                {
+                    return;
+                }
+
+                int count = _reader.ReadInt32();
+                dictionary = new(count, comparer);
+                string key = string.Empty;
+                DateTime val = DateTime.MinValue;
+                for (int i = 0; i < count; i++)
+                {
+                    Translate(ref key);
+                    Translate(ref val);
+                    dictionary.Add(key, val);
+                }
+            }
+
+        /// <summary>
+        /// Reads in the boolean which says if this object is null or not.
+        /// </summary>
+        /// <typeparam name="T">The type of object to test.</typeparam>
+        /// <returns>True if the object should be read, false otherwise.</returns>
+        public bool TranslateNullable<T>(T value)
             {
                 bool haveRef = _reader.ReadBoolean();
                 return haveRef;
@@ -697,6 +724,14 @@ public BinaryWriteTranslator(Stream packetStream)
                 _writer = new BinaryWriter(packetStream);
             }
 
+            /// <summary>
+            /// Delegates the Dispose call the to the underlying BinaryWriter.
+            /// </summary>
+            public void Dispose()
+            {
+                _writer.Close();
+            }
+
             /// <summary>
             /// Gets the reader, if any.
             /// </summary>
@@ -1254,6 +1289,29 @@ public void TranslateDictionary<D, T>(ref D dictionary, ObjectTranslator<T> obje
                 }
             }
 
+            /// <summary>
+            /// Translates a dictionary of { string, DateTime }.
+            /// </summary>
+            /// <param name="dictionary">The dictionary to be translated.</param>
+            /// <param name="comparer">Key comparer</param>
+            public void TranslateDictionary(ref Dictionary<string, DateTime> dictionary, StringComparer comparer)
+            {
+                if (!TranslateNullable(dictionary))
+                {
+                    return;
+                }
+
+                int count = dictionary.Count;
+                _writer.Write(count);
+                foreach (KeyValuePair<string, DateTime> kvp in dictionary)
+                {
+                    string key = kvp.Key;
+                    DateTime val = kvp.Value;
+                    Translate(ref key);
+                    Translate(ref val);
+                }
+            }
+
             /// <summary>
             /// Writes out the boolean which says if this object is null or not.
             /// </summary>
diff --git a/src/Shared/BuildEnvironmentHelper.cs b/src/Shared/BuildEnvironmentHelper.cs
index 3785175e7fd..f35dc2f8a6e 100644
--- a/src/Shared/BuildEnvironmentHelper.cs
+++ b/src/Shared/BuildEnvironmentHelper.cs
@@ -15,7 +15,7 @@ internal class BuildEnvironmentHelper
     {
         // Since this class is added as 'link' to shared source in multiple projects,
         // MSBuildConstants.CurrentVisualStudioVersion is not available in all of them.
-        private const string CurrentVisualStudioVersion = "16.0";
+        private const string CurrentVisualStudioVersion = "17.0";
 
         // MSBuildConstants.CurrentToolsVersion
         private const string CurrentToolsVersion = "Current";
@@ -125,7 +125,7 @@ private static BuildEnvironment TryFromEnvironmentVariable()
 
             return msBuildExePath == null
                 ? null
-                : TryFromMSBuildAssemblyUnderVisualStudio(msBuildExePath, msBuildExePath, true) ?? TryFromStandaloneMSBuildExe(msBuildExePath);
+                : TryFromMSBuildExeUnderVisualStudio(msBuildExePath, allowLegacyToolsVersion: true) ?? TryFromStandaloneMSBuildExe(msBuildExePath);
         }
 
         private static BuildEnvironment TryFromVisualStudioProcess()
@@ -183,7 +183,7 @@ private static BuildEnvironment TryFromMSBuildAssembly()
             var msBuildDll = Path.Combine(FileUtilities.GetFolderAbove(buildAssembly), "MSBuild.dll");
 
             // First check if we're in a VS installation
-            var environment = TryFromMSBuildAssemblyUnderVisualStudio(buildAssembly, msBuildExe);
+            var environment = TryFromMSBuildExeUnderVisualStudio(msBuildExe);
             if (environment != null)
             {
                 return environment;
@@ -208,25 +208,22 @@ private static BuildEnvironment TryFromMSBuildAssembly()
             return null;
         }
 
-        private static BuildEnvironment TryFromMSBuildAssemblyUnderVisualStudio(string msbuildAssembly, string msbuildExe, bool allowLegacyToolsVersion = false)
+        private static BuildEnvironment TryFromMSBuildExeUnderVisualStudio(string msbuildExe, bool allowLegacyToolsVersion = false)
         {
             string msBuildPathPattern = allowLegacyToolsVersion
                 ? $@".*\\MSBuild\\({CurrentToolsVersion}|\d+\.0)\\Bin\\.*"
                 : $@".*\\MSBuild\\{CurrentToolsVersion}\\Bin\\.*";
 
             if (NativeMethodsShared.IsWindows &&
-                Regex.IsMatch(msbuildAssembly, msBuildPathPattern, RegexOptions.IgnoreCase))
+                Regex.IsMatch(msbuildExe, msBuildPathPattern, RegexOptions.IgnoreCase))
             {
-                // In a Visual Studio path we must have MSBuild.exe
-                if (FileSystems.Default.FileExists(msbuildExe))
-                {
-                    return new BuildEnvironment(
+                string visualStudioRoot = GetVsRootFromMSBuildAssembly(msbuildExe);
+                return new BuildEnvironment(
                         BuildEnvironmentMode.VisualStudio,
-                        msbuildExe,
+                        GetMSBuildExeFromVsRoot(visualStudioRoot),
                         runningTests: s_runningTests(),
                         runningInVisualStudio: false,
-                        visualStudioPath: GetVsRootFromMSBuildAssembly(msbuildExe));
-                }
+                        visualStudioPath: visualStudioRoot);
             }
 
             return null;
@@ -320,7 +317,8 @@ private static BuildEnvironment TryFromStandaloneMSBuildExe(string msBuildExePat
         private static string GetVsRootFromMSBuildAssembly(string msBuildAssembly)
         {
             return FileUtilities.GetFolderAbove(msBuildAssembly,
-                Regex.IsMatch(msBuildAssembly, $@"\\Bin\\Amd64\\MSBuild\.exe", RegexOptions.IgnoreCase)
+                Path.GetDirectoryName(msBuildAssembly)
+                  .EndsWith(@"\amd64", StringComparison.OrdinalIgnoreCase)
                     ? 5
                     : 4);
         }
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index f8337625465..4b118f31594 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -13,7 +13,11 @@
 
 using Microsoft.Build.Shared;
 using System.Reflection;
+using Microsoft.Build.Utilities;
 
+#if !CLR2COMPATIBILITY
+using Microsoft.Build.Shared.Debugging;
+#endif
 #if !FEATURE_APM
 using System.Threading.Tasks;
 #endif
@@ -131,7 +135,7 @@ static internal class CommunicationsUtilities
         /// <summary>
         /// Whether to trace communications
         /// </summary>
-        private static bool s_trace = String.Equals(Environment.GetEnvironmentVariable("MSBUILDDEBUGCOMM"), "1", StringComparison.Ordinal);
+        private static bool s_trace = Traits.Instance.DebugNodeCommunication;
 
         /// <summary>
         /// Place to dump trace
@@ -175,6 +179,13 @@ static internal int NodeConnectionTimeout
         /// </summary>
         internal static Dictionary<string, string> GetEnvironmentVariables()
         {
+#if !CLR2COMPATIBILITY
+            // The DebugUtils static constructor can set the MSBUILDDEBUGPATH environment variable to propagate the debug path to out of proc nodes.
+            // Need to ensure that constructor is called before this method returns in order to capture its env var write.
+            // Otherwise the env var is not captured and thus gets deleted when RequiestBuilder resets the environment based on the cached results of this method.
+            ErrorUtilities.VerifyThrowInternalNull(DebugUtils.ProcessInfoString, nameof(DebugUtils.DebugPath));
+#endif
+
             Dictionary<string, string> table = new Dictionary<string, string>(200, StringComparer.OrdinalIgnoreCase); // Razzle has 150 environment variables
 
             if (NativeMethodsShared.IsWindows)
@@ -552,7 +563,14 @@ internal static void Trace(int nodeId, string format, params object[] args)
             {
                 if (s_debugDumpPath == null)
                 {
-                    s_debugDumpPath = Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+                    s_debugDumpPath =
+#if CLR2COMPATIBILITY
+                        Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+#else
+                        ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
+                            ? DebugUtils.DebugPath
+                            : Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+#endif
 
                     if (String.IsNullOrEmpty(s_debugDumpPath))
                     {
diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index e0c4da0540e..6289ef54bef 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -53,7 +53,7 @@ internal static class MSBuildConstants
         /// <summary>
         /// The most current Visual Studio Version known to this version of MSBuild.
         /// </summary>
-        internal const string CurrentVisualStudioVersion = "16.0";
+        internal const string CurrentVisualStudioVersion = "17.0";
 
         /// <summary>
         /// The most current ToolsVersion known to this version of MSBuild.
@@ -70,7 +70,7 @@ internal static class MSBuildConstants
         /// <summary>
         /// Current version of this MSBuild Engine assembly in the form, e.g, "12.0"
         /// </summary>
-        internal const string CurrentProductVersion = "16.0";
+        internal const string CurrentProductVersion = "17.0";
         
         /// <summary>
         /// Symbol used in ProjectReferenceTarget items to represent default targets
diff --git a/src/Shared/CoreCLRAssemblyLoader.cs b/src/Shared/CoreCLRAssemblyLoader.cs
index 14cd04a244d..19b6d03f5d0 100644
--- a/src/Shared/CoreCLRAssemblyLoader.cs
+++ b/src/Shared/CoreCLRAssemblyLoader.cs
@@ -153,26 +153,23 @@ private Assembly TryResolveAssemblyFromPaths(AssemblyLoadContext context, Assemb
             {
                 foreach (var searchPath in searchPaths)
                 {
-                    foreach (var extension in MSBuildLoadContext.Extensions)
+                    var candidatePath = Path.Combine(searchPath,
+                        cultureSubfolder,
+                        $"{assemblyName.Name}.dll");
+
+                    if (IsAssemblyAlreadyLoaded(candidatePath) ||
+                        !FileSystems.Default.FileExists(candidatePath))
                     {
-                        var candidatePath = Path.Combine(searchPath,
-                            cultureSubfolder,
-                            $"{assemblyName.Name}.{extension}");
-
-                        if (IsAssemblyAlreadyLoaded(candidatePath) ||
-                            !FileSystems.Default.FileExists(candidatePath))
-                        {
-                            continue;
-                        }
-
-                        AssemblyName candidateAssemblyName = AssemblyLoadContext.GetAssemblyName(candidatePath);
-                        if (candidateAssemblyName.Version != assemblyName.Version)
-                        {
-                            continue;
-                        }
-
-                        return LoadAndCache(context, candidatePath);
+                        continue;
                     }
+
+                    AssemblyName candidateAssemblyName = AssemblyLoadContext.GetAssemblyName(candidatePath);
+                    if (candidateAssemblyName.Version != assemblyName.Version)
+                    {
+                        continue;
+                    }
+
+                    return LoadAndCache(context, candidatePath);
                 }
             }
 
diff --git a/src/Shared/Debugging/DebugUtils.cs b/src/Shared/Debugging/DebugUtils.cs
new file mode 100644
index 00000000000..aa83426e5af
--- /dev/null
+++ b/src/Shared/Debugging/DebugUtils.cs
@@ -0,0 +1,104 @@
+Ôªø// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Utilities;
+using System;
+using System.Diagnostics;
+using System.IO;
+using System.Text.RegularExpressions;
+
+namespace Microsoft.Build.Shared.Debugging
+{
+    internal static class DebugUtils
+    {
+        private enum NodeMode
+        {
+            CentralNode,
+            OutOfProcNode,
+            OutOfProcTaskHostNode
+        }
+
+        static DebugUtils()
+        {
+            string environmentDebugPath = Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+            var debugDirectory = environmentDebugPath;
+
+            if (Traits.Instance.DebugEngine)
+            {
+                debugDirectory ??= Path.Combine(Directory.GetCurrentDirectory(), "MSBuild_Logs");
+
+                // Out of proc nodes do not know the startup directory so set the environment variable for them.
+                if (string.IsNullOrWhiteSpace(environmentDebugPath))
+                {
+                    Environment.SetEnvironmentVariable("MSBUILDDEBUGPATH", debugDirectory);
+                }
+            }
+
+            if (debugDirectory is not null)
+            {
+                FileUtilities.EnsureDirectoryExists(debugDirectory);
+            }
+
+            DebugPath = debugDirectory;
+        }
+
+        private static readonly Lazy<NodeMode> ProcessNodeMode = new(
+        () =>
+        {
+            return ScanNodeMode(Environment.CommandLine);
+
+            NodeMode ScanNodeMode(string input)
+            {
+                var match = Regex.Match(input, @"/nodemode:(?<nodemode>[12\s])(\s|$)", RegexOptions.IgnoreCase);
+
+                if (!match.Success)
+                {
+                    return NodeMode.CentralNode;
+                }
+                var nodeMode = match.Groups["nodemode"].Value;
+
+                Trace.Assert(!string.IsNullOrEmpty(nodeMode));
+
+                return nodeMode switch
+                {
+                    "1" => NodeMode.OutOfProcNode,
+                    "2" => NodeMode.OutOfProcTaskHostNode,
+                    _ => throw new NotImplementedException(),
+                };
+            }
+        });
+
+        private static bool CurrentProcessMatchesDebugName()
+        {
+            var processNameToBreakInto = Environment.GetEnvironmentVariable("MSBuildDebugProcessName");
+            var thisProcessMatchesName = string.IsNullOrWhiteSpace(processNameToBreakInto) ||
+                                         Process.GetCurrentProcess().ProcessName.Contains(processNameToBreakInto);
+
+            return thisProcessMatchesName;
+        }
+
+        public static readonly string ProcessInfoString =
+            $"{ProcessNodeMode.Value}_{Process.GetCurrentProcess().ProcessName}_PID={Process.GetCurrentProcess().Id}_x{(Environment.Is64BitProcess ? "64" : "86")}";
+
+        public static readonly bool ShouldDebugCurrentProcess = CurrentProcessMatchesDebugName();
+
+        public static string DebugPath { get; }
+
+        public static string FindNextAvailableDebugFilePath(string fileName)
+        {
+            var extension = Path.GetExtension(fileName);
+            var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(fileName);
+
+            var fullPath = Path.Combine(DebugPath, fileName);
+
+            var counter = 0;
+            while (File.Exists(fullPath))
+            {
+                fileName = $"{fileNameWithoutExtension}_{counter++}{extension}";
+                fullPath = Path.Combine(DebugPath, fileName);
+            }
+
+            return fullPath;
+        }
+    }
+}
diff --git a/src/Shared/Debugging/PrintLineDebugger.cs b/src/Shared/Debugging/PrintLineDebugger.cs
index bfcdbfd57c4..28fe6c8587a 100644
--- a/src/Shared/Debugging/PrintLineDebugger.cs
+++ b/src/Shared/Debugging/PrintLineDebugger.cs
@@ -20,13 +20,6 @@ namespace Microsoft.Build.Shared.Debugging
     /// </summary>
     internal class PrintLineDebugger : IDisposable
     {
-        internal enum NodeMode
-        {
-            CentralNode,
-            OutOfProcNode,
-            OutOfProcTaskHostNode
-        }
-
         private static readonly Lazy<PropertyInfo> CommonWriterProperty = new Lazy<PropertyInfo>(
             () =>
             {
@@ -45,41 +38,10 @@ internal enum NodeMode
         public static Lazy<PrintLineDebugger> DefaultWithProcessInfo =
             new Lazy<PrintLineDebugger>(() => Create(null, null, true));
 
-        private static readonly Lazy<NodeMode> ProcessNodeMode = new Lazy<NodeMode>(
-            () =>
-            {
-                return ScanNodeMode(Environment.CommandLine);
-
-                NodeMode ScanNodeMode(string input)
-                {
-                    var match = Regex.Match(input, @"/nodemode:(?<nodemode>[12\s])(\s|$)", RegexOptions.IgnoreCase);
-
-                    if (!match.Success)
-                    {
-                        return NodeMode.CentralNode;
-                    }
-                    var nodeMode = match.Groups["nodemode"].Value;
-
-                    Trace.Assert(!string.IsNullOrEmpty(nodeMode));
-
-                    return nodeMode switch
-                    {
-                        "1" => NodeMode.OutOfProcNode,
-                        "2" => NodeMode.OutOfProcTaskHostNode,
-                        _ => throw new NotImplementedException(),
-                    };
-                }
-            });
-
         private readonly string _id;
 
         private readonly CommonWriterType _writerSetByThisInstance;
 
-        public static string ProcessInfo
-            =>
-                $"{ProcessNodeMode.Value}_PID={Process.GetCurrentProcess() .Id}({Process.GetCurrentProcess() .ProcessName})x{(Environment.Is64BitProcess ? "64" : "86")}"
-            ;
-
         public PrintLineDebugger(string id, CommonWriterType writer)
         {
             _id = id ?? string.Empty;
@@ -147,7 +109,7 @@ public static PrintLineDebugger Create(
         {
             return new PrintLineDebugger(
                 prependProcessInfo
-                    ? $"{ProcessInfo}_{id}"
+                    ? $"{DebugUtils.ProcessInfoString}_{id}"
                     : id,
                 writer);
         }
diff --git a/src/Shared/EncodingUtilities.cs b/src/Shared/EncodingUtilities.cs
index 1a74d635c1c..c492d063165 100644
--- a/src/Shared/EncodingUtilities.cs
+++ b/src/Shared/EncodingUtilities.cs
@@ -219,16 +219,6 @@ internal static Encoding BatchFileEncoding(string contents, string encodingSpeci
 
             string useUtf8 = string.IsNullOrEmpty(encodingSpecification) ? EncodingUtilities.UseUtf8Detect : encodingSpecification;
 
-#if FEATURE_OSVERSION
-            // UTF8 is only supported in Windows 7 (6.1) or greater.
-            var windows7 = new Version(6, 1);
-
-            if (Environment.OSVersion.Version < windows7)
-            {
-                useUtf8 = EncodingUtilities.UseUtf8Never;
-            }
-#endif
-
             switch (useUtf8.ToUpperInvariant())
             {
                 case EncodingUtilities.UseUtf8Always:
diff --git a/src/Shared/ExceptionHandling.cs b/src/Shared/ExceptionHandling.cs
index ae0dac9bfe3..8ba3e225520 100644
--- a/src/Shared/ExceptionHandling.cs
+++ b/src/Shared/ExceptionHandling.cs
@@ -19,6 +19,10 @@ namespace Microsoft.Build.AppxPackage.Shared
 using Microsoft.Build.Shared.FileSystem;
 using System.Xml.Schema;
 using System.Runtime.Serialization;
+#if !CLR2COMPATIBILITY
+using Microsoft.Build.Shared.Debugging;
+#endif
+using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.Shared
 #endif
@@ -41,7 +45,16 @@ static ExceptionHandling()
         /// <returns></returns>
         private static string GetDebugDumpPath()
         {
-            string debugPath = Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+            string debugPath =
+// Cannot access change wave logic from these assemblies (https://github.com/dotnet/msbuild/issues/6707)
+#if CLR2COMPATIBILITY || MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
+                        Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+#else
+                ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0)
+                    ? DebugUtils.DebugPath
+                    : Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
+#endif
+
             return !string.IsNullOrEmpty(debugPath)
                     ? debugPath
                     : Path.GetTempPath();
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index ebc622953da..9af0619bab7 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -54,7 +54,7 @@ internal class FileMatcher
 
         private static class FileSpecRegexParts
         {
-            internal const string FixedDirGroupStart = "^(?<FIXEDDIR>";
+            internal const string BeginningOfLine = "^";
             internal const string WildcardGroupStart = "(?<WILDCARDDIR>";
             internal const string FilenameGroupStart = "(?<FILENAME>";
             internal const string GroupEnd = ")";
@@ -71,10 +71,10 @@ private static class FileSpecRegexParts
         }
 
         /*
-         * MAX_PATH + FileSpecRegexParts.BeginningOfLine.Length + FileSpecRegexParts.FixedDirWildcardDirSeparator.Length
-            + FileSpecRegexParts.WildcardDirFilenameSeparator.Length + FileSpecRegexParts.EndOfLine.Length;
+         * FileSpecRegexParts.BeginningOfLine.Length + FileSpecRegexParts.WildcardGroupStart.Length + FileSpecRegexParts.GroupEnd.Length
+            + FileSpecRegexParts.FilenameGroupStart.Length + FileSpecRegexParts.GroupEnd.Length + FileSpecRegexParts.EndOfLine.Length;
          */
-        private const int FileSpecRegexMinLength = 44;
+        private const int FileSpecRegexMinLength = 31;
 
         /// <summary>
         /// The Default FileMatcher does not cache directory enumeration.
@@ -501,7 +501,7 @@ GetFileSystemEntries getFileSystemEntries
                 else
                 {
                     // Relative
-                    pathRoot = String.Empty;
+                    pathRoot = string.Empty;
                     startingElement = 0;
                 }
             }
@@ -516,7 +516,7 @@ GetFileSystemEntries getFileSystemEntries
                 // If there is a zero-length part, then that means there was an extra slash.
                 if (parts[i].Length == 0)
                 {
-                    longParts[i - startingElement] = String.Empty;
+                    longParts[i - startingElement] = string.Empty;
                 }
                 else
                 {
@@ -556,7 +556,7 @@ GetFileSystemEntries getFileSystemEntries
                 }
             }
 
-            return pathRoot + String.Join(s_directorySeparator, longParts);
+            return pathRoot + string.Join(s_directorySeparator, longParts);
         }
 
         /// <summary>
@@ -630,8 +630,8 @@ out string filenamePart
                  * 
                  *     **
                  */
-                fixedDirectoryPart = String.Empty;
-                wildcardDirectoryPart = String.Empty;
+                fixedDirectoryPart = string.Empty;
+                wildcardDirectoryPart = string.Empty;
                 filenamePart = filespec;
                 return;
             }
@@ -661,7 +661,7 @@ out string filenamePart
 
                 // We know the fixed director part now.
                 fixedDirectoryPart = filespec.Substring(0, indexOfLastDirectorySeparator + 1);
-                wildcardDirectoryPart = String.Empty;
+                wildcardDirectoryPart = string.Empty;
                 filenamePart = filespec.Substring(indexOfLastDirectorySeparator + 1);
                 return;
             }
@@ -682,7 +682,7 @@ out string filenamePart
                  * 
                  *      dir?\**
                  */
-                fixedDirectoryPart = String.Empty;
+                fixedDirectoryPart = string.Empty;
                 wildcardDirectoryPart = filespec.Substring(0, indexOfLastDirectorySeparator + 1);
                 filenamePart = filespec.Substring(indexOfLastDirectorySeparator + 1);
                 return;
@@ -1207,10 +1207,10 @@ string filenamePart
         {
 #if DEBUG
             ErrorUtilities.VerifyThrow(
-                FileSpecRegexMinLength == FileSpecRegexParts.FixedDirGroupStart.Length
+                FileSpecRegexMinLength == FileSpecRegexParts.BeginningOfLine.Length
                 + FileSpecRegexParts.WildcardGroupStart.Length
                 + FileSpecRegexParts.FilenameGroupStart.Length
-                + (FileSpecRegexParts.GroupEnd.Length * 3)
+                + (FileSpecRegexParts.GroupEnd.Length * 2)
                 + FileSpecRegexParts.EndOfLine.Length,
                 "Checked-in length of known regex components differs from computed length. Update checked-in constant."
             );
@@ -1278,7 +1278,7 @@ private static bool HasMisplacedRecursiveOperator(string str)
         /// </summary>
         private static void AppendRegularExpressionFromFixedDirectory(ReuseableStringBuilder regex, string fixedDir)
         {
-            regex.Append(FileSpecRegexParts.FixedDirGroupStart);
+            regex.Append(FileSpecRegexParts.BeginningOfLine);
 
             bool isUncPath = NativeMethodsShared.IsWindows && fixedDir.Length > 1
                              && fixedDir[0] == '\\' && fixedDir[1] == '\\';
@@ -1292,8 +1292,6 @@ private static void AppendRegularExpressionFromFixedDirectory(ReuseableStringBui
             {
                 AppendRegularExpressionFromChar(regex, fixedDir[i]);
             }
-
-            regex.Append(FileSpecRegexParts.GroupEnd);
         }
 
         /// <summary>
@@ -1569,9 +1567,9 @@ internal void GetFileSpecInfo(
             FixupParts fixupParts = null)
         {
             needsRecursion = false;
-            fixedDirectoryPart = String.Empty;
-            wildcardDirectoryPart = String.Empty;
-            filenamePart = String.Empty;
+            fixedDirectoryPart = string.Empty;
+            wildcardDirectoryPart = string.Empty;
+            filenamePart = string.Empty;
 
             if (!RawFileSpecIsValid(filespec))
             {
@@ -1663,9 +1661,7 @@ internal Result()
             internal bool isLegalFileSpec; // initially false
             internal bool isMatch; // initially false
             internal bool isFileSpecRecursive; // initially false
-            internal string fixedDirectoryPart = String.Empty;
-            internal string wildcardDirectoryPart = String.Empty;
-            internal string filenamePart = String.Empty;
+            internal string wildcardDirectoryPart = string.Empty;
         }
 
         /// <summary>
@@ -1857,9 +1853,8 @@ out matchResult.isLegalFileSpec
                     fileToMatch,
                     regexFileMatch,
                     out matchResult.isMatch,
-                    out matchResult.fixedDirectoryPart,
                     out matchResult.wildcardDirectoryPart,
-                    out matchResult.filenamePart);
+                    out _);
             }
 
             return matchResult;
@@ -1869,20 +1864,17 @@ internal static void GetRegexMatchInfo(
             string fileToMatch,
             Regex fileSpecRegex,
             out bool isMatch,
-            out string fixedDirectoryPart,
             out string wildcardDirectoryPart,
             out string filenamePart)
         {
             Match match = fileSpecRegex.Match(fileToMatch);
 
             isMatch = match.Success;
-            fixedDirectoryPart = string.Empty;
-            wildcardDirectoryPart = String.Empty;
+            wildcardDirectoryPart = string.Empty;
             filenamePart = string.Empty;
 
             if (isMatch)
             {
-                fixedDirectoryPart = match.Groups["FIXEDDIR"].Value;
                 wildcardDirectoryPart = match.Groups["WILDCARDDIR"].Value;
                 filenamePart = match.Groups["FILENAME"].Value;
             }
@@ -2093,7 +2085,7 @@ out bool isLegalFileSpec
                         return SearchAction.ReturnEmptyList;
                     }
 
-                    stripProjectDirectory = !String.Equals(fixedDirectoryPart, oldFixedDirectoryPart, StringComparison.OrdinalIgnoreCase);
+                    stripProjectDirectory = !string.Equals(fixedDirectoryPart, oldFixedDirectoryPart, StringComparison.OrdinalIgnoreCase);
                 }
                 else
                 {
diff --git a/src/Shared/FileSystem/CachingFileSystemWrapper.cs b/src/Shared/FileSystem/CachingFileSystemWrapper.cs
index c3b3b141f20..b541f1b44f7 100644
--- a/src/Shared/FileSystem/CachingFileSystemWrapper.cs
+++ b/src/Shared/FileSystem/CachingFileSystemWrapper.cs
@@ -19,9 +19,9 @@ public CachingFileSystemWrapper(IFileSystem fileSystem)
             _fileSystem = fileSystem;
         }
 
-        public bool DirectoryEntryExists(string path)
+        public bool FileOrDirectoryExists(string path)
         {
-            return CachedExistenceCheck(path, p => _fileSystem.DirectoryEntryExists(p));
+            return CachedExistenceCheck(path, p => _fileSystem.FileOrDirectoryExists(p));
         }
 
         public FileAttributes GetAttributes(string path)
diff --git a/src/Shared/FileSystem/IFileSystem.cs b/src/Shared/FileSystem/IFileSystem.cs
index 0ef03e74c65..c5e32373eec 100644
--- a/src/Shared/FileSystem/IFileSystem.cs
+++ b/src/Shared/FileSystem/IFileSystem.cs
@@ -42,6 +42,6 @@ internal interface IFileSystem
 
         bool FileExists(string path);
 
-        bool DirectoryEntryExists(string path);
+        bool FileOrDirectoryExists(string path);
     }
 }
diff --git a/src/Shared/FileSystem/MSBuildOnWindowsFileSystem.cs b/src/Shared/FileSystem/MSBuildOnWindowsFileSystem.cs
index 188efaf27fa..e0be3971d7a 100644
--- a/src/Shared/FileSystem/MSBuildOnWindowsFileSystem.cs
+++ b/src/Shared/FileSystem/MSBuildOnWindowsFileSystem.cs
@@ -74,9 +74,9 @@ public bool FileExists(string path)
             return WindowsFileSystem.Singleton().FileExists(path);
         }
 
-        public bool DirectoryEntryExists(string path)
+        public bool FileOrDirectoryExists(string path)
         {
-            return WindowsFileSystem.Singleton().DirectoryEntryExists(path);
+            return WindowsFileSystem.Singleton().FileOrDirectoryExists(path);
         }
     }
 }
diff --git a/src/Shared/FileSystem/ManagedFileSystem.cs b/src/Shared/FileSystem/ManagedFileSystem.cs
index 201a62e7436..6d8bd32fb4e 100644
--- a/src/Shared/FileSystem/ManagedFileSystem.cs
+++ b/src/Shared/FileSystem/ManagedFileSystem.cs
@@ -73,7 +73,7 @@ public virtual bool FileExists(string path)
             return File.Exists(path);
         }
 
-        public virtual bool DirectoryEntryExists(string path)
+        public virtual bool FileOrDirectoryExists(string path)
         {
             return FileExists(path) || DirectoryExists(path);
         }
diff --git a/src/Shared/FileSystem/WindowsFileSystem.cs b/src/Shared/FileSystem/WindowsFileSystem.cs
index 9f4e3bf1dda..60b7d8ececa 100644
--- a/src/Shared/FileSystem/WindowsFileSystem.cs
+++ b/src/Shared/FileSystem/WindowsFileSystem.cs
@@ -59,7 +59,7 @@ public override bool FileExists(string path)
             return NativeMethodsShared.FileExistsWindows(path);
         }
 
-        public override bool DirectoryEntryExists(string path)
+        public override bool FileOrDirectoryExists(string path)
         {
             return NativeMethodsShared.FileOrDirectoryExistsWindows(path);
         }
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 1c50ccd6106..76155b33800 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -586,7 +586,7 @@ internal static bool LooksLikeUnixFilePath(ReadOnlySpan<char> value, string base
             ReadOnlySpan<char> directory = value.Slice(0, directoryLength);
 
             return (shouldCheckDirectory && DefaultFileSystem.DirectoryExists(Path.Combine(baseDirectory, directory.ToString())))
-                || (shouldCheckFileOrDirectory && DefaultFileSystem.DirectoryEntryExists(value.ToString()));
+                || (shouldCheckFileOrDirectory && DefaultFileSystem.FileOrDirectoryExists(value.ToString()));
         }
 #endif
 
@@ -951,8 +951,8 @@ internal static bool FileOrDirectoryExistsNoThrow(string fullPath, IFileSystem f
                 fileSystem ??= DefaultFileSystem;
 
                 return Traits.Instance.CacheFileExistence
-                    ? FileExistenceCache.GetOrAdd(fullPath, fileSystem.DirectoryEntryExists)
-                    : fileSystem.DirectoryEntryExists(fullPath);
+                    ? FileExistenceCache.GetOrAdd(fullPath, fileSystem.FileOrDirectoryExists)
+                    : fileSystem.FileOrDirectoryExists(fullPath);
             }
             catch
             {
diff --git a/src/Shared/FrameworkLocationHelper.cs b/src/Shared/FrameworkLocationHelper.cs
index e567fc1f64c..afdbc7fefec 100644
--- a/src/Shared/FrameworkLocationHelper.cs
+++ b/src/Shared/FrameworkLocationHelper.cs
@@ -307,6 +307,25 @@ internal static class FrameworkLocationHelper
                 dotNetFrameworkVersion472,
                 dotNetFrameworkVersion48,
             }),
+
+            // VS17
+            new VisualStudioSpec(visualStudioVersion170, "NETFXSDK\\{0}", "v10.0", "InstallationFolder", new []
+            {
+                dotNetFrameworkVersion11,
+                dotNetFrameworkVersion20,
+                dotNetFrameworkVersion35,
+                dotNetFrameworkVersion40,
+                dotNetFrameworkVersion45,
+                dotNetFrameworkVersion451,
+                dotNetFrameworkVersion452,
+                dotNetFrameworkVersion46,
+                dotNetFrameworkVersion461,
+                dotNetFrameworkVersion462,
+                dotNetFrameworkVersion47,
+                dotNetFrameworkVersion471,
+                dotNetFrameworkVersion472,
+                dotNetFrameworkVersion48,
+            }),
         };
 
 #if FEATURE_WIN32_REGISTRY
@@ -480,8 +499,8 @@ private static string FallbackDotNetFrameworkSdkInstallPath
 
                         if (EnvironmentUtilities.Is64BitProcess && s_fallbackDotNetFrameworkSdkInstallPath == null)
                         {
-                            // Since we're 64-bit, what we just checked was the 64-bit fallback key -- so now let's 
-                            // check the 32-bit one too, just in case. 
+                            // Since we're 64-bit, what we just checked was the 64-bit fallback key -- so now let's
+                            // check the 32-bit one too, just in case.
                             s_fallbackDotNetFrameworkSdkInstallPath =
                                 FindRegistryValueUnderKey(
                                     fallbackDotNetFrameworkSdkRegistryInstallPath,
@@ -751,7 +770,7 @@ DotNetFrameworkArchitecture architecture
                 return directoryExists(frameworkPath) ? frameworkPath : null;
             }
 
-            // If the COMPLUS variables are set, they override everything -- that's the directory we want.  
+            // If the COMPLUS variables are set, they override everything -- that's the directory we want.
             string complusInstallRoot = Environment.GetEnvironmentVariable("COMPLUS_INSTALLROOT");
             string complusVersion = Environment.GetEnvironmentVariable("COMPLUS_VERSION");
 
@@ -761,7 +780,7 @@ DotNetFrameworkArchitecture architecture
             }
 
             // If the current runtime starts with correct prefix, then this is the runtime we want to use.
-            // However, only if we're requesting current architecture -- otherwise, the base path may be different, so we'll need to look it up. 
+            // However, only if we're requesting current architecture -- otherwise, the base path may be different, so we'll need to look it up.
             string leaf = Path.GetFileName(currentRuntimePath);
             if (leaf.StartsWith(prefix, StringComparison.Ordinal) && architecture == DotNetFrameworkArchitecture.Current)
             {
@@ -777,19 +796,19 @@ DotNetFrameworkArchitecture architecture
 
             if (indexOfFramework64 != -1 && architecture == DotNetFrameworkArchitecture.Bitness32)
             {
-                // need to get rid of just the 64, but want to look up 'Framework64' rather than '64' to avoid the case where 
-                // the path is something like 'C:\MyPath\64\Framework64'.  9 = length of 'Framework', to make the index match 
-                // the location of the '64'. 
+                // need to get rid of just the 64, but want to look up 'Framework64' rather than '64' to avoid the case where
+                // the path is something like 'C:\MyPath\64\Framework64'.  9 = length of 'Framework', to make the index match
+                // the location of the '64'.
                 int indexOf64 = indexOfFramework64 + 9;
                 string tempLocation = baseLocation;
                 baseLocation = tempLocation.Substring(0, indexOf64) + tempLocation.Substring(indexOf64 + 2, tempLocation.Length - indexOf64 - 2);
             }
             else if (indexOfFramework64 == -1 && architecture == DotNetFrameworkArchitecture.Bitness64)
             {
-                // need to add 64 -- since this is a heuristic, we assume that we just need to append.  
+                // need to add 64 -- since this is a heuristic, we assume that we just need to append.
                 baseLocation += "64";
             }
-            // we don't need to do anything if it's DotNetFrameworkArchitecture.Current.  
+            // we don't need to do anything if it's DotNetFrameworkArchitecture.Current.
 
             string[] directories;
 
@@ -799,7 +818,7 @@ DotNetFrameworkArchitecture architecture
             }
             else
             {
-                // If we can't even find the base path, might as well give up now. 
+                // If we can't even find the base path, might as well give up now.
                 return null;
             }
 
@@ -813,7 +832,7 @@ DotNetFrameworkArchitecture architecture
             // The intention here is to choose the alphabetical maximum.
             string max = directories[0];
 
-            // the max.EndsWith condition: pre beta 2 versions of v3.5 have build number like v3.5.20111.  
+            // the max.EndsWith condition: pre beta 2 versions of v3.5 have build number like v3.5.20111.
             // This was removed in beta2
             // We should favor \v3.5 over \v3.5.xxxxx
             // versions previous to 2.0 have .xxxx version numbers.  3.0 and 3.5 do not.
@@ -874,15 +893,15 @@ internal static string GenerateProgramFiles64()
             string programFilesX64;
             if (string.Equals(programFiles, programFiles32))
             {
-                // either we're in a 32-bit window, or we're on a 32-bit machine.  
+                // either we're in a 32-bit window, or we're on a 32-bit machine.
                 // if we're on a 32-bit machine, ProgramW6432 won't exist
-                // if we're on a 64-bit machine, ProgramW6432 will point to the correct Program Files. 
+                // if we're on a 64-bit machine, ProgramW6432 will point to the correct Program Files.
                 programFilesX64 = Environment.GetEnvironmentVariable("ProgramW6432");
             }
             else
             {
-                // 64-bit window on a 64-bit machine; %ProgramFiles% points to the 64-bit 
-                // Program Files already. 
+                // 64-bit window on a 64-bit machine; %ProgramFiles% points to the 64-bit
+                // Program Files already.
                 programFilesX64 = programFiles;
             }
 
@@ -1141,8 +1160,8 @@ private static void RedirectVersionsIfNecessary(ref Version dotNetFrameworkVersi
 
             if (dotNetFrameworkVersion == dotNetFrameworkVersion35 && visualStudioVersion > visualStudioVersion110)
             {
-                // Fall back to Dev11 location -- 3.5 tools MSI was reshipped unchanged, so there 
-                // essentially are no 12-specific 3.5 tools. 
+                // Fall back to Dev11 location -- 3.5 tools MSI was reshipped unchanged, so there
+                // essentially are no 12-specific 3.5 tools.
                 visualStudioVersion = visualStudioVersion110;
                 return;
             }
@@ -1348,8 +1367,8 @@ public virtual string GetPathToDotNetFramework(DotNetFrameworkArchitecture archi
                 }
 
 #if FEATURE_WIN32_REGISTRY
-                // Otherwise, check to see if we're even installed.  If not, return null -- no point in setting the static 
-                // variables to null when that's what they are already.  
+                // Otherwise, check to see if we're even installed.  If not, return null -- no point in setting the static
+                // variables to null when that's what they are already.
                 if (NativeMethodsShared.IsWindows && !CheckForFrameworkInstallation(
                     this._dotNetFrameworkRegistryKey,
                     this._dotNetFrameworkSetupRegistryInstalledName
@@ -1422,7 +1441,7 @@ public virtual string GetPathToDotNetFrameworkSdkTools(VisualStudioSpec visualSt
 
                     // For the Dev10 SDK, we check the registry that corresponds to the current process' bitness, rather than
                     // always the 32-bit one the way we do for Dev11 and onward, since that's what we did in Dev10 as well.
-                    // As of Dev11, the SDK reg keys are installed in the 32-bit registry. 
+                    // As of Dev11, the SDK reg keys are installed in the 32-bit registry.
                     RegistryView registryView = visualStudioSpec.Version == visualStudioVersion100 ? RegistryView.Default : RegistryView.Registry32;
 
                     generatedPathToDotNetFrameworkSdkTools = FindRegistryValueUnderKey(
@@ -1537,7 +1556,7 @@ public virtual string GetPathToWindowsSdk()
 
                     string registryPath = string.Join(@"\", MicrosoftSDKsRegistryKey, "Windows", visualStudioSpec.WindowsSdkRegistryKey);
 
-                    // As of Dev11, the SDK reg keys are installed in the 32-bit registry. 
+                    // As of Dev11, the SDK reg keys are installed in the 32-bit registry.
                     this._pathToWindowsSdk = FindRegistryValueUnderKey(
                         registryPath,
                         visualStudioSpec.WindowsSdkRegistryInstallationFolderName,
diff --git a/src/Shared/ITranslator.cs b/src/Shared/ITranslator.cs
index b1acb85ec2f..c3360d19224 100644
--- a/src/Shared/ITranslator.cs
+++ b/src/Shared/ITranslator.cs
@@ -62,7 +62,7 @@ internal enum TranslationDirection
     ///    that by ensuring a single Translate method on a given object can handle both reads and
     ///    writes without referencing any field more than once.
     /// </remarks>
-    internal interface ITranslator
+    internal interface ITranslator : IDisposable
     {
         /// <summary>
         /// Returns the current serialization mode.
@@ -301,6 +301,8 @@ void TranslateArray<T>(ref T[] array)
 
         void TranslateDictionary(ref IDictionary<string, string> dictionary, NodePacketCollectionCreator<IDictionary<string, string>> collectionCreator);
 
+        void TranslateDictionary(ref Dictionary<string, DateTime> dictionary, StringComparer comparer);
+
         void TranslateDictionary<K, V>(ref IDictionary<K, V> dictionary, ObjectTranslator<K> keyTranslator, ObjectTranslator<V> valueTranslator, NodePacketCollectionCreator<IDictionary<K, V>> dictionaryCreator);
 
         /// <summary>
diff --git a/src/Shared/InterningBinaryReader.cs b/src/Shared/InterningBinaryReader.cs
index 40589a0becb..389450a2242 100644
--- a/src/Shared/InterningBinaryReader.cs
+++ b/src/Shared/InterningBinaryReader.cs
@@ -5,6 +5,11 @@
 using System.Text;
 using System.IO;
 using System.Diagnostics;
+using System.Threading;
+
+#if !CLR2COMPATIBILITY
+using System.Buffers;
+#endif
 
 using ErrorUtilities = Microsoft.Build.Shared.ErrorUtilities;
 
@@ -26,11 +31,23 @@ internal class InterningBinaryReader : BinaryReader
         private const int MaxCharsBuffer = 20000;
 #endif
 
+        /// <summary>
+        /// A cache of recently used buffers. This is a pool of size 1 to avoid allocating moderately sized
+        /// <see cref="Buffer"/> objects repeatedly. Used in scenarios that don't have a good context to attach
+        /// a shared buffer to.
+        /// </summary>
+        private static Buffer s_bufferPool;
+
         /// <summary>
         /// Shared buffer saves allocating these arrays many times.
         /// </summary>
         private Buffer _buffer;
 
+        /// <summary>
+        /// True if <see cref="_buffer"/> is owned by this instance, false if it was passed by the caller.
+        /// </summary>
+        private bool _isPrivateBuffer;
+
         /// <summary>
         /// The decoder used to translate from UTF8 (or whatever).
         /// </summary>
@@ -39,7 +56,7 @@ internal class InterningBinaryReader : BinaryReader
         /// <summary>
         /// Comment about constructing.
         /// </summary>
-        private InterningBinaryReader(Stream input, Buffer buffer)
+        private InterningBinaryReader(Stream input, Buffer buffer, bool isPrivateBuffer)
             : base(input, Encoding.UTF8)
         {
             if (input == null)
@@ -48,6 +65,7 @@ private InterningBinaryReader(Stream input, Buffer buffer)
             }
 
             _buffer = buffer;
+            _isPrivateBuffer = isPrivateBuffer;
             _decoder = Encoding.UTF8.GetDecoder();
         }
 
@@ -57,6 +75,7 @@ private InterningBinaryReader(Stream input, Buffer buffer)
         /// </summary>
         override public String ReadString()
         {
+            char[] resultBuffer = null;
             try
             {
                 MemoryStream memoryStream = this.BaseStream as MemoryStream;
@@ -80,7 +99,6 @@ override public String ReadString()
                 }
 
                 char[] charBuffer = _buffer.CharBuffer;
-                char[] resultBuffer = null;
                 do
                 {
                     readLength = ((stringLength - currPos) > MaxCharsBuffer) ? MaxCharsBuffer : (stringLength - currPos);
@@ -132,31 +150,82 @@ override public String ReadString()
                         charsRead = _decoder.GetChars(rawBuffer, rawPosition, n, charBuffer, 0);
                         return Strings.WeakIntern(charBuffer.AsSpan(0, charsRead));
                     }
-
+#if !CLR2COMPATIBILITY
+                    resultBuffer ??= ArrayPool<char>.Shared.Rent(stringLength); // Actual string length in chars may be smaller.
+#else
+                    // Since NET35 is only used in rare TaskHost processes, we decided to leave it as-is.
                     resultBuffer ??= new char[stringLength]; // Actual string length in chars may be smaller.
+#endif
                     charsRead += _decoder.GetChars(rawBuffer, rawPosition, n, resultBuffer, charsRead);
 
                     currPos += n;
                 }
                 while (currPos < stringLength);
 
-                return Strings.WeakIntern(resultBuffer.AsSpan(0, charsRead));
+                var retval = Strings.WeakIntern(resultBuffer.AsSpan(0, charsRead));
+
+                return retval;
             }
             catch (Exception e)
             {
                 Debug.Assert(false, e.ToString());
                 throw;
             }
+#if !CLR2COMPATIBILITY
+            finally
+            {
+                // resultBuffer shall always be either Rented or null
+                if (resultBuffer != null)
+                {
+                    ArrayPool<char>.Shared.Return(resultBuffer);
+                }
+            }
+#endif
         }
 
         /// <summary>
         /// A shared buffer to avoid extra allocations in InterningBinaryReader.
         /// </summary>
+        /// <remarks>
+        /// The caller is responsible for managing the lifetime of the returned buffer and for passing it to <see cref="Create"/>.
+        /// </remarks>
         internal static SharedReadBuffer CreateSharedBuffer()
         {
             return new Buffer();
         }
 
+        /// <summary>
+        /// Gets a buffer from the pool or creates a new one.
+        /// </summary>
+        /// <returns>The <see cref="Buffer"/>. Should be returned to the pool after we're done with it.</returns>
+        private static Buffer GetPooledBuffer()
+        {
+            Buffer buffer = Interlocked.Exchange(ref s_bufferPool, null);
+            if (buffer != null)
+            {
+                return buffer;
+            }
+            return new Buffer();
+        }
+
+#region IDisposable pattern
+
+        /// <summary>
+        /// Returns our buffer to the pool if we were not passed one by the caller.
+        /// </summary>
+        protected override void Dispose(bool disposing)
+        {
+            if (_isPrivateBuffer)
+            {
+                // If we created this buffer then try to return it to the pool. If s_bufferPool is non-null we leave it alone,
+                // the idea being that it's more likely to have lived longer than our buffer.
+                Interlocked.CompareExchange(ref s_bufferPool, _buffer, null);
+            }
+            base.Dispose(disposing);
+        }
+
+#endregion
+
         /// <summary>
         /// Create a BinaryReader. It will either be an interning reader or standard binary reader
         /// depending on whether the interning reader is possible given the buffer and stream.
@@ -164,13 +233,11 @@ internal static SharedReadBuffer CreateSharedBuffer()
         internal static BinaryReader Create(Stream stream, SharedReadBuffer sharedBuffer)
         {
             Buffer buffer = (Buffer)sharedBuffer;
-
-            if (buffer == null)
+            if (buffer != null)
             {
-                buffer = new Buffer();
+                return new InterningBinaryReader(stream, buffer, false);
             }
-
-            return new InterningBinaryReader(stream, buffer);
+            return new InterningBinaryReader(stream, GetPooledBuffer(), true);
         }
 
         /// <summary>
@@ -178,13 +245,14 @@ internal static BinaryReader Create(Stream stream, SharedReadBuffer sharedBuffer
         /// </summary>
         private class Buffer : SharedReadBuffer
         {
+            private char[] _charBuffer;
+            private byte[] _byteBuffer;
+
             /// <summary>
             /// Yes, we are constructing.
             /// </summary>
             internal Buffer()
             {
-                this.CharBuffer = new char[MaxCharsBuffer];
-                this.ByteBuffer = new byte[Encoding.UTF8.GetMaxByteCount(MaxCharsBuffer)];
             }
 
             /// <summary>
@@ -192,8 +260,11 @@ internal Buffer()
             /// </summary>
             internal char[] CharBuffer
             {
-                get;
-                private set;
+                get
+                {
+                    _charBuffer ??= new char[MaxCharsBuffer];
+                    return _charBuffer;
+                }
             }
 
             /// <summary>
@@ -201,8 +272,11 @@ internal char[] CharBuffer
             /// </summary>
             internal byte[] ByteBuffer
             {
-                get;
-                private set;
+                get
+                {
+                    _byteBuffer ??= new byte[Encoding.UTF8.GetMaxByteCount(MaxCharsBuffer)];
+                    return _byteBuffer;
+                }
             }
         }
     }
diff --git a/src/Shared/MSBuildLoadContext.cs b/src/Shared/MSBuildLoadContext.cs
index f080c2e05a9..1de3e06bced 100644
--- a/src/Shared/MSBuildLoadContext.cs
+++ b/src/Shared/MSBuildLoadContext.cs
@@ -29,9 +29,6 @@ internal class MSBuildLoadContext : AssemblyLoadContext
                 "Microsoft.Build.Utilities.Core",
             }.ToImmutableHashSet();
 
-        internal static readonly string[] Extensions = new[] { "ni.dll", "ni.exe", "dll", "exe" };
-
-
         public MSBuildLoadContext(string assemblyPath)
             : base($"MSBuild plugin {assemblyPath}")
         {
@@ -56,11 +53,9 @@ public MSBuildLoadContext(string assemblyPath)
                 // bare search directory if that fails.
                 : new[] { assemblyName.CultureName, string.Empty })
             {
-                foreach (var extension in Extensions)
-                {
                     var candidatePath = Path.Combine(_directory,
                         cultureSubfolder,
-                        $"{assemblyName.Name}.{extension}");
+                        $"{assemblyName.Name}.dll");
 
                     if (!FileSystems.Default.FileExists(candidatePath))
                     {
@@ -74,7 +69,6 @@ public MSBuildLoadContext(string assemblyPath)
                     }
 
                     return LoadFromAssemblyPath(candidatePath);
-                }
             }
 
             // If the Assembly is provided via a file path, the following rules are used to load the assembly:
@@ -83,7 +77,7 @@ public MSBuildLoadContext(string assemblyPath)
             //   into the default ALC (so it's shared with other uses).
 
             var assemblyNameInExecutableDirectory = Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory,
-                assemblyName.Name!);
+                $"{assemblyName.Name}.dll");
 
             if (FileSystems.Default.FileExists(assemblyNameInExecutableDirectory))
             {
diff --git a/src/Shared/NativeMethodsShared.cs b/src/Shared/NativeMethodsShared.cs
index 42e8a3ead07..810125d90ac 100644
--- a/src/Shared/NativeMethodsShared.cs
+++ b/src/Shared/NativeMethodsShared.cs
@@ -514,9 +514,6 @@ public static int GetLogicalCoreCount()
             //     https://github.com/dotnet/runtime/issues/29686
             // so always double-check it.
             if (IsWindows
-#if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
-                && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave16_8)
-#endif
 #if NETFRAMEWORK
                 // .NET Framework calls Windows APIs that have a core count limit (32/64 depending on process bitness).
                 // So if we get a high core count on full framework, double-check it.
@@ -635,6 +632,9 @@ internal static bool IsMaxPathLegacyWindows()
             }
         }
 
+        // CA1416 warns about code that can only run on Windows, but we verified we're running on Windows before this.
+        // This is the most reasonable way to resolve this part because other ways would require ifdef'ing on NET472.
+#pragma warning disable CA1416
         private static bool IsLongPathsEnabledRegistry()
         {
             using (RegistryKey fileSystemKey = Registry.LocalMachine.OpenSubKey(WINDOWS_FILE_SYSTEM_REGISTRY_KEY))
@@ -643,6 +643,7 @@ private static bool IsLongPathsEnabledRegistry()
                 return fileSystemKey != null && Convert.ToInt32(longPathsEnabledValue) == 1;
             }
         }
+#pragma warning restore CA1416
 
         /// <summary>
         /// Cached value for IsUnixLike (this method is called frequently during evaluation).
@@ -875,33 +876,6 @@ private static SystemInformationData SystemInformation
 
 #endregion
 
-#region Set Error Mode (copied from BCL)
-
-        private static readonly Version s_threadErrorModeMinOsVersion = new Version(6, 1, 0x1db0);
-
-        internal static int SetErrorMode(int newMode)
-        {
-#if FEATURE_OSVERSION
-            if (Environment.OSVersion.Version < s_threadErrorModeMinOsVersion)
-            {
-                return SetErrorMode_VistaAndOlder(newMode);
-            }
-#endif
-            int num;
-            SetErrorMode_Win7AndNewer(newMode, out num);
-            return num;
-        }
-
-        [SuppressMessage("Microsoft.Design", "CA1060:MovePInvokesToNativeMethodsClass", Justification = "Class name is NativeMethodsShared for increased clarity")]
-        [DllImport("kernel32.dll", EntryPoint = "SetThreadErrorMode", SetLastError = true)]
-        private static extern bool SetErrorMode_Win7AndNewer(int newMode, out int oldMode);
-
-        [SuppressMessage("Microsoft.Design", "CA1060:MovePInvokesToNativeMethodsClass", Justification = "Class name is NativeMethodsShared for increased clarity")]
-        [DllImport("kernel32.dll", EntryPoint = "SetErrorMode", ExactSpelling = true)]
-        private static extern int SetErrorMode_VistaAndOlder(int newMode);
-
-#endregion
-
 #region Wrapper methods
 
         /// <summary>
@@ -1635,9 +1609,11 @@ out FILETIME lpLastWriteTime
 
         [DllImport("kernel32.dll", SetLastError = true)]
         [return: MarshalAs(UnmanagedType.Bool)]
-
         internal static extern bool CloseHandle(IntPtr hObject);
 
+        [DllImport("kernel32.dll", SetLastError = true)]
+        internal static extern bool SetThreadErrorMode(int newMode, out int oldMode);
+
 #endregion
 
 #region Extensions
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 99f43c83280..3d468e23e95 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -43,11 +43,6 @@ internal abstract class NodeEndpointOutOfProcBase : INodeEndpoint
         /// </summary>
         private const int PipeBufferSize = 131072;
 
-        /// <summary>
-        /// Flag indicating if we should debug communications or not.
-        /// </summary>
-        private bool _debugCommunications = false;
-
         /// <summary>
         /// The current communication status of the node.
         /// </summary>
@@ -193,8 +188,6 @@ internal void InternalConstruct(string pipeName)
         {
             ErrorUtilities.VerifyThrowArgumentLength(pipeName, nameof(pipeName));
 
-            _debugCommunications = (Environment.GetEnvironmentVariable("MSBUILDDEBUGCOMM") == "1");
-
             _status = LinkStatus.Inactive;
             _asyncDataMonitor = new object();
             _sharedReadBuffer = InterningBinaryReader.CreateSharedBuffer();
diff --git a/src/Shared/ResourceUtilities.cs b/src/Shared/ResourceUtilities.cs
index 545d6241d18..1cd325959fc 100644
--- a/src/Shared/ResourceUtilities.cs
+++ b/src/Shared/ResourceUtilities.cs
@@ -231,12 +231,14 @@ internal static string FormatString(string unformatted, params object[] args)
                 // FormatResourceString calls ToString() which returns the full name of the type!
                 foreach (object param in args)
                 {
-                    // Check it has a real implementation of ToString()
+                    // Check it has a real implementation of ToString() and the type is not actually System.String
                     if (param != null)
                     {
-                        if (String.Equals(param.GetType().ToString(), param.ToString(), StringComparison.Ordinal))
+                        if (string.Equals(param.GetType().ToString(), param.ToString(), StringComparison.Ordinal) &&
+                            param.GetType() != typeof(string))
                         {
-                            ErrorUtilities.ThrowInternalError("Invalid resource parameter type, was {0}", param.GetType().FullName);
+                            ErrorUtilities.ThrowInternalError("Invalid resource parameter type, was {0}",
+                                param.GetType().FullName);
                         }
                     }
                 }
diff --git a/src/Shared/Resources/xlf/Strings.shared.en.xlf b/src/Shared/Resources/xlf/Strings.shared.en.xlf
deleted file mode 100644
index 62bf77f50b8..00000000000
--- a/src/Shared/Resources/xlf/Strings.shared.en.xlf
+++ /dev/null
@@ -1,313 +0,0 @@
-Ôªø<?xml version="1.0" encoding="utf-8"?>
-<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
-  <file datatype="xml" source-language="en" target-language="en" original="../Strings.shared.resx">
-    <body>
-      <trans-unit id="BuildAborted">
-        <source>MSB4188: Build was canceled.</source>
-        <target state="new">MSB4188: Build was canceled.</target>
-        <note>{StrBegin="MSB4188: "} Error when the build stops suddenly for some reason. For example, because a child node died.</note>
-      </trans-unit>
-      <trans-unit id="BuildEngineCallbacksInTaskHostUnsupported">
-        <source>MSB5022: The MSBuild task host does not support running tasks that perform IBuildEngine callbacks. If you wish to perform these operations, please run your task in the core MSBuild process instead.  A task will automatically execute in the task host if the UsingTask has been attributed with a "Runtime" or "Architecture" value, or the task invocation has been attributed with an "MSBuildRuntime" or "MSBuildArchitecture" value, that does not match the current runtime or architecture of MSBuild.</source>
-        <target state="new">MSB5022: The MSBuild task host does not support running tasks that perform IBuildEngine callbacks. If you wish to perform these operations, please run your task in the core MSBuild process instead.  A task will automatically execute in the task host if the UsingTask has been attributed with a "Runtime" or "Architecture" value, or the task invocation has been attributed with an "MSBuildRuntime" or "MSBuildArchitecture" value, that does not match the current runtime or architecture of MSBuild.</target>
-        <note>{StrBegin="MSB5022: "} "Runtime", "Architecture", "MSBuildRuntime", and "MSBuildArchitecture" are all attributes in the project file, and thus should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="BuildStarted">
-        <source>Build started.</source>
-        <target state="new">Build started.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ConflictingTaskAssembly">
-        <source>MSB4008: A conflicting assembly for the task assembly "{0}" has been found at "{1}".</source>
-        <target state="new">MSB4008: A conflicting assembly for the task assembly "{0}" has been found at "{1}".</target>
-        <note>{StrBegin="MSB4008: "}UE: This message is shown when the type/class of a task cannot be resolved uniquely from a single assembly.</note>
-      </trans-unit>
-      <trans-unit id="ExpectedEventToBeSerializable">
-        <source>Event type "{0}" was expected to be serializable using the .NET serializer. The event was not serializable and has been ignored.</source>
-        <target state="new">Event type "{0}" was expected to be serializable using the .NET serializer. The event was not serializable and has been ignored.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="FileLocation">
-        <source>{0} ({1},{2})</source>
-        <target state="new">{0} ({1},{2})</target>
-        <note>A file location to be embedded in a string.</note>
-      </trans-unit>
-      <trans-unit id="ModifyingTaskHostEnvironmentHeader">
-        <source>Making the following modifications to the environment received from the parent node before applying it to the task host:</source>
-        <target state="new">Making the following modifications to the environment received from the parent node before applying it to the task host:</target>
-        <note>Only ever used when MSBuild is run under a "secret" environment variable switch, MSBuildTaskHostUpdateEnvironmentAndLog=1</note>
-      </trans-unit>
-      <trans-unit id="ModifyingTaskHostEnvironmentVariable">
-        <source>  Setting '{0}' to '{1}' rather than the parent environment's value, '{2}'.</source>
-        <target state="new">  Setting '{0}' to '{1}' rather than the parent environment's value, '{2}'.</target>
-        <note>Only ever used when MSBuild is run under a "secret" environment variable switch, MSBuildTaskHostUpdateEnvironmentAndLog=1</note>
-      </trans-unit>
-      <trans-unit id="InvalidProjectFile">
-        <source>MSB4025: The project file could not be loaded. {0}</source>
-        <target state="new">MSB4025: The project file could not be loaded. {0}</target>
-        <note>{StrBegin="MSB4025: "}UE: This message is shown when the project file given to the engine cannot be loaded because the filename/path is
-    invalid, or due to lack of permissions, or incorrect XML. The project filename is not part of the message because it is
-    provided separately to loggers.
-    LOCALIZATION: {0} is a localized message from the CLR/FX explaining why the project is invalid.</note>
-      </trans-unit>
-      <trans-unit id="InvalidVerbosity">
-        <source>MSB4103: "{0}" is not a valid logger verbosity level.</source>
-        <target state="new">MSB4103: "{0}" is not a valid logger verbosity level.</target>
-        <note>{StrBegin="MSB4103: "}</note>
-      </trans-unit>
-      <trans-unit id="InvalidLogFileFormat">
-        <source>MSB4233: There was an exception while reading the log file: {0}</source>
-        <target state="new">MSB4233: There was an exception while reading the log file: {0}</target>
-        <note>{StrBegin="MSB4233: "}This is shown when the Binary Logger can't read the log file.</note>
-      </trans-unit>
-      <trans-unit id="MissingProject">
-        <source>MSBuild is expecting a valid "{0}" object.</source>
-        <target state="new">MSBuild is expecting a valid "{0}" object.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Shared.PathTooLong">
-        <source>Path: {0} exceeds the OS max path limit. The fully qualified file name must be less than {1} characters.</source>
-        <target state="new">Path: {0} exceeds the OS max path limit. The fully qualified file name must be less than {1} characters.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SolutionFilterFilterContainsProjectNotInSolution">
-        <source>MSB5028: Solution filter file at "{0}" includes project "{1}" that is not in the solution file at "{2}".</source>
-        <target state="new">MSB5028: Solution filter file at "{0}" includes project "{1}" that is not in the solution file at "{2}".</target>
-        <note>{StrBegin="MSB5028: "}UE: The project filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionFilterJsonParsingError">
-        <source>MSB5025: Json in solution filter file "{0}" is incorrectly formatted.</source>
-        <target state="new">MSB5025: Json in solution filter file "{0}" is incorrectly formatted.</target>
-        <note>{StrBegin="MSB5025: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionFilterMissingSolutionError">
-        <source>MSB5026: The solution filter file at "{0}" specifies there will be a solution file at "{1}", but that file does not exist.</source>
-        <target state="new">MSB5026: The solution filter file at "{0}" specifies there will be a solution file at "{1}", but that file does not exist.</target>
-        <note>{StrBegin="MSB5026: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseNestedProjectErrorWithNameAndGuid">
-        <source>MSB5009: Error parsing the project "{0}" section with GUID: "{1}". It is nested under "{2}" but that project is not found in the solution.</source>
-        <target state="new">MSB5009: Error parsing the project "{0}" section with GUID: "{1}". It is nested under "{2}" but that project is not found in the solution.</target>
-        <note>{StrBegin="MSB5009: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="UnrecognizedToolsVersion">
-        <source>MSB4132: The tools version "{0}" is unrecognized. Available tools versions are {1}.</source>
-        <target state="new">MSB4132: The tools version "{0}" is unrecognized. Available tools versions are {1}.</target>
-        <note>{StrBegin="MSB4132: "}LOCALIZATION: {1} contains a comma separated list.</note>
-      </trans-unit>
-      <trans-unit id="NameInvalid">
-        <source>MSB5016: The name "{0}" contains an invalid character "{1}".</source>
-        <target state="new">MSB5016: The name "{0}" contains an invalid character "{1}".</target>
-        <note>{StrBegin="MSB5016: "}</note>
-      </trans-unit>
-      <trans-unit id="Shared.CannotChangeItemSpecModifiers">
-        <source>"{0}" is a reserved item metadata, and cannot be modified or deleted.</source>
-        <target state="new">"{0}" is a reserved item metadata, and cannot be modified or deleted.</target>
-        <note>UE: Tasks and OM users are not allowed to remove or change the value of the built-in metadata on items e.g. the meta-data "FullPath", "RelativeDir", etc. are reserved.</note>
-      </trans-unit>
-      <trans-unit id="Shared.CannotConvertStringToBool">
-        <source>The string "{0}" cannot be converted to a boolean (true/false) value.</source>
-        <target state="new">The string "{0}" cannot be converted to a boolean (true/false) value.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Shared.FailedCreatingTempFile">
-        <source>MSB5003: Failed to create a temporary file. Temporary files folder is full or its path is incorrect. {0}</source>
-        <target state="new">MSB5003: Failed to create a temporary file. Temporary files folder is full or its path is incorrect. {0}</target>
-        <note>{StrBegin="MSB5003: "}</note>
-      </trans-unit>
-      <trans-unit id="Shared.FailedDeletingTempFile">
-        <source>MSB5018: Failed to delete the temporary file "{0}". {1}</source>
-        <target state="new">MSB5018: Failed to delete the temporary file "{0}". {1}</target>
-        <note>{StrBegin="MSB5018: "}</note>
-      </trans-unit>
-      <trans-unit id="Shared.InvalidFilespecForTransform">
-        <source>The item metadata "%({0})" cannot be applied to the path "{1}". {2}</source>
-        <target state="new">The item metadata "%({0})" cannot be applied to the path "{1}". {2}</target>
-        <note>UE: This message is shown when the user tries to perform path manipulations using one of the built-in item metadata e.g. %(RootDir), on an item-spec that's not a valid path. LOCALIZATION: "{2}" is a localized message from a CLR/FX exception.</note>
-      </trans-unit>
-      <trans-unit id="TaskNotMarshalByRef">
-        <source>MSB4077: The "{0}" task has been marked with the attribute LoadInSeparateAppDomain, but does not derive from MarshalByRefObject. Check that the task derives from MarshalByRefObject or AppDomainIsolatedTask.</source>
-        <target state="new">MSB4077: The "{0}" task has been marked with the attribute LoadInSeparateAppDomain, but does not derive from MarshalByRefObject. Check that the task derives from MarshalByRefObject or AppDomainIsolatedTask.</target>
-        <note>{StrBegin="MSB4077: "}LOCALIZATION: &lt;LoadInSeparateAppDomain&gt;, &lt;MarshalByRefObject&gt;, &lt;AppDomainIsolatedTask&gt; should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="FrameworkLocationHelper.UnsupportedFrameworkVersion">
-        <source>.NET Framework version "{0}" is not supported. Please specify a value from the enumeration Microsoft.Build.Utilities.TargetDotNetFrameworkVersion.</source>
-        <target state="new">.NET Framework version "{0}" is not supported. Please specify a value from the enumeration Microsoft.Build.Utilities.TargetDotNetFrameworkVersion.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="FrameworkLocationHelper.UnsupportedFrameworkVersionForWindowsSdk">
-        <source>.NET Framework version "{0}" is not supported when explicitly targeting the Windows SDK, which is only supported on .NET 4.5 and later.  Please specify a value from the enumeration Microsoft.Build.Utilities.TargetDotNetFrameworkVersion that is Version45 or above.</source>
-        <target state="new">.NET Framework version "{0}" is not supported when explicitly targeting the Windows SDK, which is only supported on .NET 4.5 and later.  Please specify a value from the enumeration Microsoft.Build.Utilities.TargetDotNetFrameworkVersion that is Version45 or above.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="FrameworkLocationHelper.UnsupportedVisualStudioVersion">
-        <source>Visual Studio version "{0}" is not supported.  Please specify a value from the enumeration Microsoft.Build.Utilities.VisualStudioVersion.</source>
-        <target state="new">Visual Studio version "{0}" is not supported.  Please specify a value from the enumeration Microsoft.Build.Utilities.VisualStudioVersion.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="FrameworkLocationHelper.CouldNotGenerateReferenceAssemblyDirectory">
-        <source>When attempting to generate a reference assembly path from the path "{0}" and the framework moniker "{1}" there was an error. {2}</source>
-        <target state="new">When attempting to generate a reference assembly path from the path "{0}" and the framework moniker "{1}" there was an error. {2}</target>
-        <note>No Error code because this resource will be used in an exception. The error code is discarded if it is included</note>
-      </trans-unit>
-      <trans-unit id="DirectoryNotFound">
-        <source>Could not find directory path: {0}</source>
-        <target state="new">Could not find directory path: {0}</target>
-        <note>Directory must exist</note>
-      </trans-unit>
-      <trans-unit id="UnauthorizedAccess">
-        <source>You do not have access to: {0}</source>
-        <target state="new">You do not have access to: {0}</target>
-        <note>Directory must have access</note>
-      </trans-unit>
-      <trans-unit id="SubCategoryForSchemaValidationErrors">
-        <source>Schema validation</source>
-        <target state="new">Schema validation</target>
-        <note>
-      UE: this fragment is used to describe errors that are caused by schema validation. For example, if a normal error is
-      displayed like this: "MSBUILD : error MSB0000: This is an error.", then an error from schema validation would look like this:
-      "MSBUILD : Schema validation error MSB0000: This is an error."
-      LOCALIZATION: This fragment needs to be localized.
-    </note>
-      </trans-unit>
-      <trans-unit id="Shared.KillingProcess">
-        <source>MSB5002: Terminating the task executable "{0}" because it did not finish within the specified limit of {1} milliseconds.</source>
-        <target state="new">MSB5002: Terminating the task executable "{0}" because it did not finish within the specified limit of {1} milliseconds.</target>
-        <note>{StrBegin="MSB5002: "}</note>
-      </trans-unit>
-      <trans-unit id="Shared.ParameterCannotBeNull">
-        <source>Parameter "{0}" cannot be null.</source>
-        <target state="new">Parameter "{0}" cannot be null.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Shared.ParameterCannotHaveInvalidPathChars">
-        <source>Parameter "{0}" with assigned value "{1}" cannot have invalid path or invalid file characters.</source>
-        <target state="new">Parameter "{0}" with assigned value "{1}" cannot have invalid path or invalid file characters.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Shared.ParameterCannotHaveZeroLength">
-        <source>Parameter "{0}" cannot have zero length.</source>
-        <target state="new">Parameter "{0}" cannot have zero length.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Shared.ParametersMustHaveTheSameLength">
-        <source>Parameters "{0}" and "{1}" must have the same number of elements.</source>
-        <target state="new">Parameters "{0}" and "{1}" must have the same number of elements.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Shared.TaskResourceNotFound">
-        <source>The resource string "{0}" for the "{1}" task cannot be found. Confirm that the resource name "{0}" is correctly spelled, and the resource exists in the task's assembly.</source>
-        <target state="new">The resource string "{0}" for the "{1}" task cannot be found. Confirm that the resource name "{0}" is correctly spelled, and the resource exists in the task's assembly.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Shared.TaskResourcesNotRegistered">
-        <source>The "{0}" task has not registered its resources. In order to use the "TaskLoggingHelper.FormatResourceString()" method this task needs to register its resources either during construction, or via the "TaskResources" property.</source>
-        <target state="new">The "{0}" task has not registered its resources. In order to use the "TaskLoggingHelper.FormatResourceString()" method this task needs to register its resources either during construction, or via the "TaskResources" property.</target>
-        <note>LOCALIZATION: "TaskLoggingHelper.FormatResourceString()" and "TaskResources" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseDuplicateProject">
-        <source>MSB5004: The solution file has two projects named "{0}".</source>
-        <target state="new">MSB5004: The solution file has two projects named "{0}".</target>
-        <note>{StrBegin="MSB5004: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseInvalidProjectFileNameCharacters">
-        <source>MSB5005: Error parsing project section for project "{0}". The project file name "{1}" contains invalid characters.</source>
-        <target state="new">MSB5005: Error parsing project section for project "{0}". The project file name "{1}" contains invalid characters.</target>
-        <note>{StrBegin="MSB5005: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseInvalidProjectFileNameEmpty">
-        <source>MSB5006: Error parsing project section for project "{0}". The project file name is empty.</source>
-        <target state="new">MSB5006: Error parsing project section for project "{0}". The project file name is empty.</target>
-        <note>{StrBegin="MSB5006: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseInvalidProjectSolutionConfigurationEntry">
-        <source>MSB5007: Error parsing the project configuration section in solution file. The entry "{0}" is invalid.</source>
-        <target state="new">MSB5007: Error parsing the project configuration section in solution file. The entry "{0}" is invalid.</target>
-        <note>{StrBegin="MSB5007: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseInvalidSolutionConfigurationEntry">
-        <source>MSB5008: Error parsing the solution configuration section in solution file. The entry "{0}" is invalid.</source>
-        <target state="new">MSB5008: Error parsing the solution configuration section in solution file. The entry "{0}" is invalid.</target>
-        <note>{StrBegin="MSB5008: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseNestedProjectError">
-        <source>MSB5009: Error parsing the nested project section in solution file.</source>
-        <target state="new">MSB5009: Error parsing the nested project section in solution file.</target>
-        <note>{StrBegin="MSB5009: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseNestedProjectUndefinedError">
-        <source>MSB5023: Error parsing the nested project section in solution file. A project with the GUID "{0}" is listed as being nested under project "{1}", but does not exist in the solution.</source>
-        <target state="new">MSB5023: Error parsing the nested project section in solution file. A project with the GUID "{0}" is listed as being nested under project "{1}", but does not exist in the solution.</target>
-        <note>{StrBegin="MSB5023: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseNoHeaderError">
-        <source>MSB5010: No file format header found.</source>
-        <target state="new">MSB5010: No file format header found.</target>
-        <note>{StrBegin="MSB5010: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseProjectDepGuidError">
-        <source>MSB5011: Parent project GUID not found in "{0}" project dependency section.</source>
-        <target state="new">MSB5011: Parent project GUID not found in "{0}" project dependency section.</target>
-        <note>{StrBegin="MSB5011: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseProjectEofError">
-        <source>MSB5012: Unexpected end-of-file reached inside "{0}" project section.</source>
-        <target state="new">MSB5012: Unexpected end-of-file reached inside "{0}" project section.</target>
-        <note>{StrBegin="MSB5012: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseProjectError">
-        <source>MSB5013: Error parsing a project section.</source>
-        <target state="new">MSB5013: Error parsing a project section.</target>
-        <note>{StrBegin="MSB5013: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseVersionMismatchError">
-        <source>MSB5014: File format version is not recognized.  MSBuild can only read solution files between versions {0}.0 and {1}.0, inclusive.</source>
-        <target state="new">MSB5014: File format version is not recognized.  MSBuild can only read solution files between versions {0}.0 and {1}.0, inclusive.</target>
-        <note>{StrBegin="MSB5014: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="SolutionParseWebProjectPropertiesError">
-        <source>MSB5015: The properties could not be read from the WebsiteProperties section of the "{0}" project.</source>
-        <target state="new">MSB5015: The properties could not be read from the WebsiteProperties section of the "{0}" project.</target>
-        <note>{StrBegin="MSB5015: "}UE: The solution filename is provided separately to loggers.</note>
-      </trans-unit>
-      <trans-unit id="UnrecognizedSolutionComment">
-        <source>Unrecognized solution version "{0}", attempting to continue.</source>
-        <target state="new">Unrecognized solution version "{0}", attempting to continue.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SubCategoryForSolutionParsingErrors">
-        <source>Solution file</source>
-        <target state="new">Solution file</target>
-        <note>UE: this fragment is used to describe errors found while parsing solution files. For example, if a normal error is
-      displayed like this: "MSBUILD : error MSB0000: This is an error.", then an error from solution parsing would look like this:
-      "MSBUILD : Solution file error MSB0000: This is an error."
-      LOCALIZATION: This fragment needs to be localized.</note>
-      </trans-unit>
-      <trans-unit id="Shared.InvalidProjectFile">
-        <source>MSB5019: The project file is malformed: "{0}". {1}</source>
-        <target state="new">MSB5019: The project file is malformed: "{0}". {1}</target>
-        <note>{StrBegin="MSB5019: "}</note>
-      </trans-unit>
-      <trans-unit id="Shared.ProjectFileCouldNotBeLoaded">
-        <source>MSB5020: Could not load the project file: "{0}". {1}</source>
-        <target state="new">MSB5020: Could not load the project file: "{0}". {1}</target>
-        <note>{StrBegin="MSB5020: "}</note>
-      </trans-unit>
-      <trans-unit id="Shared.KillingProcessByCancellation">
-        <source>MSB5021: Terminating the task executable "{0}" and its child processes because the build was canceled.</source>
-        <target state="new">MSB5021: Terminating the task executable "{0}" and its child processes because the build was canceled.</target>
-        <note>{StrBegin="MSB5021: "}</note>
-      </trans-unit>
-      <trans-unit id="Shared.CanNotFindValidMSBuildLocation">
-        <source>MSB5024: Could not determine a valid location to MSBuild. Try running this process from the Developer Command Prompt for Visual Studio.</source>
-        <target state="new">MSB5024: Could not determine a valid location to MSBuild. Try running this process from the Developer Command Prompt for Visual Studio.</target>
-        <note>{StrBegin="MSB5024: "}</note>
-      </trans-unit>
-      <trans-unit id="OM_NotSupportedReadOnlyCollection">
-        <source>This collection is read-only.</source>
-        <target state="new">This collection is read-only.</target>
-        <note />
-      </trans-unit>
-    </body>
-  </file>
-</xliff>
\ No newline at end of file
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index 1bcae1d7574..815eda222b3 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -78,6 +78,11 @@ internal class TaskHostConfiguration : INodePacket
         /// </summary>
         private string _taskLocation;
 
+        /// <summary>
+        /// Whether task inputs are logged.
+        /// </summary>
+        private bool _isTaskInputLoggingEnabled;
+
         /// <summary>
         /// The set of parameters to apply to the task prior to execution.  
         /// </summary>
@@ -105,6 +110,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="continueOnError">Flag to continue with the build after a the task failed</param>
         /// <param name="taskName">Name of the task.</param>
         /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
+        /// <param name="isTaskInputLoggingEnabled">Whether task inputs are logged.</param>
         /// <param name="taskParameters">Parameters to apply to the task.</param>
         /// <param name="globalParameters">global properties for the current project.</param>
         /// <param name="warningsAsErrors">Warning codes to be treated as errors for the current project.</param>
@@ -124,6 +130,7 @@ internal class TaskHostConfiguration : INodePacket
         /// <param name="continueOnError">Flag to continue with the build after a the task failed</param>
         /// <param name="taskName">Name of the task.</param>
         /// <param name="taskLocation">Location of the assembly the task is to be loaded from.</param>
+        /// <param name="isTaskInputLoggingEnabled">Whether task inputs are logged.</param>
         /// <param name="taskParameters">Parameters to apply to the task.</param>
         /// <param name="globalParameters">global properties for the current project.</param>
         /// <param name="warningsAsErrors">Warning codes to be logged as errors for the current project.</param>
@@ -145,6 +152,7 @@ public TaskHostConfiguration
                 bool continueOnError,
                 string taskName,
                 string taskLocation,
+                bool isTaskInputLoggingEnabled,
                 IDictionary<string, object> taskParameters,
                 Dictionary<string, string> globalParameters,
                 ICollection<string> warningsAsErrors,
@@ -178,6 +186,7 @@ ICollection<string> warningsAsMessages
             _continueOnError = continueOnError;
             _taskName = taskName;
             _taskLocation = taskLocation;
+            _isTaskInputLoggingEnabled = isTaskInputLoggingEnabled;
             _warningsAsErrors = warningsAsErrors;
             _warningsAsMessages = warningsAsMessages;
 
@@ -324,6 +333,16 @@ public string TaskLocation
             { return _taskLocation; }
         }
 
+        /// <summary>
+        /// Returns <see langword="true"/> if the build is configured to log all task inputs.
+        /// </summary>
+        public bool IsTaskInputLoggingEnabled
+        {
+            [DebuggerStepThrough]
+            get
+            { return _isTaskInputLoggingEnabled; }
+        }
+
         /// <summary>
         /// Parameters to set on the instantiated task prior to execution. 
         /// </summary>
@@ -391,6 +410,7 @@ public void Translate(ITranslator translator)
             translator.Translate(ref _projectFileOfTask);
             translator.Translate(ref _taskName);
             translator.Translate(ref _taskLocation);
+            translator.Translate(ref _isTaskInputLoggingEnabled);
             translator.TranslateDictionary(ref _taskParameters, StringComparer.OrdinalIgnoreCase, TaskParameter.FactoryForDeserialization);
             translator.Translate(ref _continueOnError);
             translator.TranslateDictionary(ref _globalParameters, StringComparer.OrdinalIgnoreCase);
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 9d9fdc1c1b4..4ee21110651 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -156,9 +156,9 @@ protected IBuildEngine BuildEngine
         /// </summary>
         public bool HasLoggedErrors { get; private set; }
 
-#endregion
+        #endregion
 
-#region Utility methods
+        #region Utility methods
 
         /// <summary>
         /// Extracts the message code (if any) prefixed to the given message string. Message code prefixes must match the
@@ -235,9 +235,26 @@ public virtual string GetResourceMessage(string resourceName)
             string resourceString = FormatResourceString(resourceName, null);
             return resourceString;
         }
-#endregion
+        #endregion
+
+        #region Message logging methods
+
+        /// <summary>
+        /// Returns <see langword="true"/> if the build is configured to log all task inputs.
+        /// </summary>
+        public bool IsTaskInputLoggingEnabled =>
+            BuildEngine is IBuildEngine10 buildEngine10 && buildEngine10.EngineServices.IsTaskInputLoggingEnabled;
 
-#region Message logging methods
+        /// <summary>
+        /// Returns true if a message of given importance should be logged because it is possible that a logger consuming it exists.
+        /// </summary>
+        /// <param name="importance">The importance to check.</param>
+        /// <returns>True if messages of the given importance should be logged, false if it's guaranteed that such messages would be ignored.</returns>
+        public bool LogsMessagesOfImportance(MessageImportance importance)
+        {
+            return BuildEngine is not IBuildEngine10 buildEngine10
+                || buildEngine10.EngineServices.LogsMessagesOfImportance(importance);
+        }
 
         /// <summary>
         /// Logs a message using the specified string.
@@ -279,6 +296,10 @@ public void LogMessage(MessageImportance importance, string message, params obje
                 ResourceUtilities.FormatString(message, messageArgs);
             }
 #endif
+            if (!LogsMessagesOfImportance(importance))
+            {
+                return;
+            }
 
             BuildMessageEventArgs e = new BuildMessageEventArgs
                 (
@@ -343,6 +364,11 @@ params object[] messageArgs
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             ErrorUtilities.VerifyThrowArgumentNull(message, nameof(message));
 
+            if (!LogsMessagesOfImportance(importance))
+            {
+                return;
+            }
+
             // If BuildEngine is null, task attempted to log before it was set on it,
             // presumably in its constructor. This is not allowed, and all
             // we can do is throw.
@@ -470,6 +496,11 @@ public void LogMessageFromResources(MessageImportance importance, string message
             // global state.
             ErrorUtilities.VerifyThrowArgumentNull(messageResourceName, nameof(messageResourceName));
 
+            if (!LogsMessagesOfImportance(importance))
+            {
+                return;
+            }
+
             LogMessage(importance, GetResourceMessage(messageResourceName), messageArgs);
 #if DEBUG
             // Assert that the message does not contain an error code.  Only errors and warnings
@@ -552,6 +583,11 @@ public void LogCommandLine(MessageImportance importance, string commandLine)
             // No lock needed, as BuildEngine methods from v4.5 onwards are thread safe.
             ErrorUtilities.VerifyThrowArgumentNull(commandLine, nameof(commandLine));
 
+            if (!LogsMessagesOfImportance(importance))
+            {
+                return;
+            }
+
             var e = new TaskCommandLineEventArgs(commandLine, TaskName, importance);
 
             // If BuildEngine is null, the task attempted to log before it was set on it,
diff --git a/src/Shared/ToolsetElement.cs b/src/Shared/ToolsetElement.cs
index feb3acb6a5c..9902fd49a06 100644
--- a/src/Shared/ToolsetElement.cs
+++ b/src/Shared/ToolsetElement.cs
@@ -7,6 +7,7 @@
 using System.IO;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
 
 namespace Microsoft.Build.Evaluation
 {
@@ -15,11 +16,53 @@ namespace Microsoft.Build.Evaluation
     /// </summary>
     internal static class ToolsetConfigurationReaderHelpers
     {
+        /// <summary>
+        /// Lock for process wide ToolsetConfigurationSection section cache
+        /// </summary>
+        private static readonly object s_syncLock = new();
+
+        /// <summary>
+        /// Process wide ToolsetConfigurationSection section cache
+        /// </summary>
+        private static ToolsetConfigurationSection s_toolsetConfigurationSectionCache;
+        private static Configuration s_configurationOfCachedSection;
+
         internal static ToolsetConfigurationSection ReadToolsetConfigurationSection(Configuration configuration)
+        {
+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))
+            {
+                if (configuration == null)
+                {
+                    return null;
+                }
+
+                lock (s_syncLock)
+                {
+                    // Cache 1st requested configuration section. In unit tests, different Configuration is provided for particular test cases.
+                    // During runtime, however, only MSBuild exe configuration file is provided to read toolset configuration from,
+                    //   and modifying MSBuild exe configuration during lifetime of msbuild nodes is neither expected nor supported.
+                    if (s_toolsetConfigurationSectionCache == null)
+                    {
+                        s_toolsetConfigurationSectionCache = GetToolsetConfigurationSection(configuration);
+                        s_configurationOfCachedSection = configuration;
+                    }
+
+                    return s_configurationOfCachedSection == configuration ?
+                        s_toolsetConfigurationSectionCache :
+                        GetToolsetConfigurationSection(configuration);
+                }
+            }
+            else
+            {
+                return GetToolsetConfigurationSection(configuration);
+            }
+        }
+
+        private static ToolsetConfigurationSection GetToolsetConfigurationSection(Configuration configuration)
         {
             ToolsetConfigurationSection configurationSection = null;
 
-            // This will be null if the application config file does not have the following section 
+            // This will be null if the application config file does not have the following section
             // definition for the msbuildToolsets section as the first child element.
             //   <configSections>
             //     <section name=""msbuildToolsets"" type=""Microsoft.Build.Evaluation.ToolsetConfigurationSection, Microsoft.Build"" />
diff --git a/src/Shared/Traits.cs b/src/Shared/Traits.cs
index 09cca604107..d1fc45ffe12 100644
--- a/src/Shared/Traits.cs
+++ b/src/Shared/Traits.cs
@@ -27,11 +27,14 @@ public static Traits Instance
         public Traits()
         {
             EscapeHatches = new EscapeHatches();
+
+            DebugScheduler = DebugEngine || !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDDEBUGSCHEDULER"));
+            DebugNodeCommunication = DebugEngine || !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBUILDDEBUGCOMM"));
         }
 
         public EscapeHatches EscapeHatches { get; }
 
-        internal readonly string MSBuildDisableFeaturesFromVersion = Environment.GetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION"); 
+        internal readonly string MSBuildDisableFeaturesFromVersion = Environment.GetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION");
 
         /// <summary>
         /// Do not expand wildcards that match a certain pattern
@@ -86,6 +89,15 @@ public Traits()
         /// </summary>
         public readonly int LogPropertyTracking = ParseIntFromEnvironmentVariableOrDefault("MsBuildLogPropertyTracking", 0); // Default to logging nothing via the property tracker.
 
+        /// <summary>
+        /// When evaluating items, this is the minimum number of items on the running list to use a dictionary-based remove optimization.
+        /// </summary>
+        public readonly int DictionaryBasedItemRemoveThreshold = ParseIntFromEnvironmentVariableOrDefault("MSBUILDDICTIONARYBASEDITEMREMOVETHRESHOLD", 100);
+
+        public readonly bool DebugEngine = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable("MSBuildDebugEngine"));
+        public readonly bool DebugScheduler;
+        public readonly bool DebugNodeCommunication;
+
         private static int ParseIntFromEnvironmentVariableOrDefault(string environmentVariable, int defaultValue)
         {
             return int.TryParse(Environment.GetEnvironmentVariable(environmentVariable), out int result)
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index f8d902e2b5e..d8cf2eeed4c 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -74,7 +74,7 @@ public void GetFilesComplexGlobbingMatching(GetFilesComplexGlobbingMatchingInfo
             foreach (string fullPath in GetFilesComplexGlobbingMatchingInfo.FilesToCreate.Select(i => Path.Combine(testFolder.Path, i.ToPlatformSlash())))
             {
                 Directory.CreateDirectory(Path.GetDirectoryName(fullPath));
-                
+
                 File.WriteAllBytes(fullPath, new byte[1]);
             }
 
@@ -293,7 +293,7 @@ public static IEnumerable<object[]> GetTestData()
                         ExpectNoMatches = NativeMethodsShared.IsLinux,
                     }
                 };
-                
+
 #if !MONO // https://github.com/mono/mono/issues/8441
                 yield return new object[]
                 {
@@ -1653,7 +1653,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "",
             "",
             "",
-            "^(?<FIXEDDIR>)(?<WILDCARDDIR>)(?<FILENAME>)$",
+            "^(?<WILDCARDDIR>)(?<FILENAME>)$",
             false,
             true
         )]
@@ -1723,7 +1723,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "",
             @"*fo?ba?\",
             "*fo?ba?",
-            @"^(?<FIXEDDIR>)(?<WILDCARDDIR>[^/\\]*fo.ba.[/\\]+)(?<FILENAME>[^/\\]*fo.ba.)$",
+            @"^(?<WILDCARDDIR>[^/\\]*fo.ba.[/\\]+)(?<FILENAME>[^/\\]*fo.ba.)$",
             true,
             true
         )]
@@ -1733,7 +1733,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "",
             "",
             "?oo*.",
-            @"^(?<FIXEDDIR>)(?<WILDCARDDIR>)(?<FILENAME>[^\.].oo[^\.]*)$",
+            @"^(?<WILDCARDDIR>)(?<FILENAME>[^\.].oo[^\.]*)$",
             false,
             true
         )]
@@ -1743,7 +1743,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             "",
             "",
             "*.*foo*.*",
-            @"^(?<FIXEDDIR>)(?<WILDCARDDIR>)(?<FILENAME>[^/\\]*foo[^/\\]*)$",
+            @"^(?<WILDCARDDIR>)(?<FILENAME>[^/\\]*foo[^/\\]*)$",
             false,
             true
         )]
@@ -1753,7 +1753,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             @"\foo///bar\\\",
             @"?foo///bar\\\",
             "foo",
-            @"^(?<FIXEDDIR>[/\\]+foo[/\\]+bar[/\\]+)(?<WILDCARDDIR>.foo[/\\]+bar[/\\]+)(?<FILENAME>foo)$",
+            @"^[/\\]+foo[/\\]+bar[/\\]+(?<WILDCARDDIR>.foo[/\\]+bar[/\\]+)(?<FILENAME>foo)$",
             true,
             true
         )]
@@ -1763,7 +1763,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             @"\./.\foo/.\./bar\./.\",
             @"?foo/.\./bar\./.\",
             "foo",
-            @"^(?<FIXEDDIR>[/\\]+foo[/\\]+bar[/\\]+)(?<WILDCARDDIR>.foo[/\\]+bar[/\\]+)(?<FILENAME>foo)$",
+            @"^[/\\]+foo[/\\]+bar[/\\]+(?<WILDCARDDIR>.foo[/\\]+bar[/\\]+)(?<FILENAME>foo)$",
             true,
             true
         )]
@@ -1773,7 +1773,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             @"foo\",
             @"**/**\bar/**\**/foo\**/**\",
             "bar",
-            @"^(?<FIXEDDIR>foo[/\\]+)(?<WILDCARDDIR>((.*/)|(.*\\)|())bar((/)|(\\)|(/.*/)|(/.*\\)|(\\.*\\)|(\\.*/))foo((/)|(\\)|(/.*/)|(/.*\\)|(\\.*\\)|(\\.*/)))(?<FILENAME>bar)$",
+            @"^foo[/\\]+(?<WILDCARDDIR>((.*/)|(.*\\)|())bar((/)|(\\)|(/.*/)|(/.*\\)|(\\.*\\)|(\\.*/))foo((/)|(\\)|(/.*/)|(/.*\\)|(\\.*\\)|(\\.*/)))(?<FILENAME>bar)$",
             true,
             true
         )]
@@ -1783,7 +1783,7 @@ public void ExcludeComplexPattern(string include, string[] exclude, string[] mat
             @"foo\\\.///",
             @"**\\\.///**\\\.///bar\\\.///**\\\.///**\\\.///foo\\\.///**\\\.///**\\\.///",
             "bar",
-            @"^(?<FIXEDDIR>foo[/\\]+)(?<WILDCARDDIR>((.*/)|(.*\\)|())bar((/)|(\\)|(/.*/)|(/.*\\)|(\\.*\\)|(\\.*/))foo((/)|(\\)|(/.*/)|(/.*\\)|(\\.*\\)|(\\.*/)))(?<FILENAME>bar)$",
+            @"^foo[/\\]+(?<WILDCARDDIR>((.*/)|(.*\\)|())bar((/)|(\\)|(/.*/)|(/.*\\)|(\\.*\\)|(\\.*/))foo((/)|(\\)|(/.*/)|(/.*\\)|(\\.*\\)|(\\.*/)))(?<FILENAME>bar)$",
             true,
             true
         )]
@@ -1821,7 +1821,7 @@ bool expectedIsLegalFileSpec
             @"$()+.[^{\",
             @"?$()+.[^{\",
             "$()+.[^{",
-            @"^(?<FIXEDDIR>\$\(\)\+\.\[\^\{[/\\]+)(?<WILDCARDDIR>.\$\(\)\+\.\[\^\{[/\\]+)(?<FILENAME>\$\(\)\+\.\[\^\{)$",
+            @"^\$\(\)\+\.\[\^\{[/\\]+(?<WILDCARDDIR>.\$\(\)\+\.\[\^\{[/\\]+)(?<FILENAME>\$\(\)\+\.\[\^\{)$",
             true,
             true
         )]
@@ -1831,7 +1831,7 @@ bool expectedIsLegalFileSpec
             @"\\\.\foo/",
             "",
             "bar",
-            @"^(?<FIXEDDIR>\\\\foo[/\\]+)(?<WILDCARDDIR>)(?<FILENAME>bar)$",
+            @"^\\\\foo[/\\]+(?<WILDCARDDIR>)(?<FILENAME>bar)$",
             false,
             true
         )]
@@ -1864,7 +1864,7 @@ bool expectedIsLegalFileSpec
             @"$()+.[^{|/",
             @"?$()+.[^{|/",
             "$()+.[^{|",
-            @"^(?<FIXEDDIR>\$\(\)\+\.\[\^\{\|[/\\]+)(?<WILDCARDDIR>.\$\(\)\+\.\[\^\{\|[/\\]+)(?<FILENAME>\$\(\)\+\.\[\^\{\|)$",
+            @"^\$\(\)\+\.\[\^\{\|[/\\]+(?<WILDCARDDIR>.\$\(\)\+\.\[\^\{\|[/\\]+)(?<FILENAME>\$\(\)\+\.\[\^\{\|)$",
             true,
             true
         )]
@@ -1874,7 +1874,7 @@ bool expectedIsLegalFileSpec
             @"///./foo/",
             "",
             "bar",
-            @"^(?<FIXEDDIR>[/\\]+foo[/\\]+)(?<WILDCARDDIR>)(?<FILENAME>bar)$",
+            @"^[/\\]+foo[/\\]+(?<WILDCARDDIR>)(?<FILENAME>bar)$",
             false,
             true
         )]
@@ -2112,8 +2112,7 @@ private void GetMatchingDirectories(string[] candidates, string path, string pat
                             int nextSlash = normalizedCandidate.IndexOfAny(FileMatcher.directorySeparatorCharacters, path.Length + 1);
                             if (nextSlash != -1)
                             {
-                                
-                                //UNC paths start with a \\ fragment. Match against \\ when path is empty (i.e., inside the current working directory)
+                                // UNC paths start with a \\ fragment. Match against \\ when path is empty (i.e., inside the current working directory)
                                 string match = normalizedCandidate.StartsWith(@"\\") && string.IsNullOrEmpty(path)
                                     ? @"\\"
                                     : normalizedCandidate.Substring(0, nextSlash);
@@ -2129,7 +2128,7 @@ private void GetMatchingDirectories(string[] candidates, string path, string pat
                                     directories.Add(FileMatcher.Normalize(match));
                                 }
                                 else if    // Match patterns like ?emp
-                                    (
+                                (
                                     pattern.Substring(0, 1) == "?"
                                     && pattern.Length == baseMatch.Length
                                 )
@@ -2659,15 +2658,10 @@ public bool FileExists(string path)
                 return FileSystems.Default.FileExists(path);
             }
 
-            public bool DirectoryEntryExists(string path)
+            public bool FileOrDirectoryExists(string path)
             {
-                return FileSystems.Default.DirectoryEntryExists(path);
+                return FileSystems.Default.FileOrDirectoryExists(path);
             }
         }
     }
 }
-
-
-
-
-
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index 4a45409e00d..9261b45785c 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -155,6 +155,40 @@ internal static void AssertItemEvaluationFromGenericItemEvaluator(Func<string, P
             }
         }
 
+        internal static void ShouldHaveSucceeded(this BuildResult result)
+        {
+            result.OverallResult.ShouldBe(
+                BuildResultCode.Success,
+                customMessage: result.Exception is not null ? result.Exception.ToString() : string.Empty);
+        }
+
+        internal static void ShouldHaveSucceeded(this GraphBuildResult result)
+        {
+            result.OverallResult.ShouldBe(
+                BuildResultCode.Success,
+                customMessage: result.Exception is not null ? result.Exception.ToString() : string.Empty);
+        }
+
+        internal static void ShouldHaveFailed(this BuildResult result, string exceptionMessageSubstring = null)
+        {
+            result.OverallResult.ShouldBe(BuildResultCode.Failure);
+
+            if (exceptionMessageSubstring != null)
+            {
+                result.Exception.Message.ShouldContain(exceptionMessageSubstring);
+            }
+        }
+
+        internal static void ShouldHaveFailed(this GraphBuildResult result, string exceptionMessageSubstring = null)
+        {
+            result.OverallResult.ShouldBe(BuildResultCode.Failure);
+
+            if (exceptionMessageSubstring != null)
+            {
+                result.Exception.Message.ShouldContain(exceptionMessageSubstring);
+            }
+        }
+
         internal static string NormalizeSlashes(string path)
         {
             return path.Replace('/', Path.DirectorySeparatorChar).Replace('\\', Path.DirectorySeparatorChar);
@@ -1987,44 +2021,38 @@ public void Dispose()
 
         internal class LoggingFileSystem : MSBuildFileSystemBase
         {
-            private readonly IFileSystem _wrappingFileSystem;
             private int _fileSystemCalls;
 
             public int FileSystemCalls => _fileSystemCalls;
 
             public ConcurrentDictionary<string, int> ExistenceChecks { get; } = new ConcurrentDictionary<string, int>();
 
-            public LoggingFileSystem(IFileSystem wrappingFileSystem = null)
-            {
-                _wrappingFileSystem = wrappingFileSystem ?? FileSystems.Default;
-            }
-
             public override TextReader ReadFile(string path)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.ReadFile(path);
+                return base.ReadFile(path);
             }
 
             public override Stream GetFileStream(string path, FileMode mode, FileAccess access, FileShare share)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.GetFileStream(path, mode, access, share);
+                return base.GetFileStream(path, mode, access, share);
             }
 
             public override string ReadFileAllText(string path)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.ReadFileAllText(path);
+                return base.ReadFileAllText(path);
             }
 
             public override byte[] ReadFileAllBytes(string path)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.ReadFileAllBytes(path);
+                return base.ReadFileAllBytes(path);
             }
 
             public override IEnumerable<string> EnumerateFiles(
@@ -2035,7 +2063,7 @@ public override IEnumerable<string> EnumerateFiles(
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.EnumerateFiles(path, searchPattern, searchOption);
+                return base.EnumerateFiles(path, searchPattern, searchOption);
             }
 
             public override IEnumerable<string> EnumerateDirectories(
@@ -2046,7 +2074,7 @@ public override IEnumerable<string> EnumerateDirectories(
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.EnumerateDirectories(path, searchPattern, searchOption);
+                return base.EnumerateDirectories(path, searchPattern, searchOption);
             }
 
             public override IEnumerable<string> EnumerateFileSystemEntries(
@@ -2057,21 +2085,21 @@ public override IEnumerable<string> EnumerateFileSystemEntries(
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.EnumerateFileSystemEntries(path, searchPattern, searchOption);
+                return base.EnumerateFileSystemEntries(path, searchPattern, searchOption);
             }
 
             public override FileAttributes GetAttributes(string path)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.GetAttributes(path);
+                return base.GetAttributes(path);
             }
 
             public override DateTime GetLastWriteTimeUtc(string path)
             {
                 IncrementCalls(ref _fileSystemCalls);
 
-                return _wrappingFileSystem.GetLastWriteTimeUtc(path);
+                return base.GetLastWriteTimeUtc(path);
             }
 
             public override bool DirectoryExists(string path)
@@ -2079,7 +2107,7 @@ public override bool DirectoryExists(string path)
                 IncrementCalls(ref _fileSystemCalls);
                 IncrementExistenceChecks(path);
 
-                return _wrappingFileSystem.DirectoryExists(path);
+                return base.DirectoryExists(path);
             }
 
             public override bool FileExists(string path)
@@ -2087,19 +2115,19 @@ public override bool FileExists(string path)
                 IncrementCalls(ref _fileSystemCalls);
                 IncrementExistenceChecks(path);
 
-                return _wrappingFileSystem.FileExists(path);
+                return base.FileExists(path);
             }
 
-            private int _directoryEntryExistsCalls;
-            public int DirectoryEntryExistsCalls => _directoryEntryExistsCalls;
+            private int _fileOrDirectoryExistsCalls;
+            public int FileOrDirectoryExistsCalls => _fileOrDirectoryExistsCalls;
 
             public override bool FileOrDirectoryExists(string path)
             {
                 IncrementCalls(ref _fileSystemCalls);
-                IncrementCalls(ref _directoryEntryExistsCalls);
+                IncrementCalls(ref _fileOrDirectoryExistsCalls);
                 IncrementExistenceChecks(path);
 
-                return _wrappingFileSystem.DirectoryEntryExists(path);
+                return base.FileOrDirectoryExists(path);
             }
 
             private void IncrementCalls(ref int incremented)
diff --git a/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs b/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs
index 9be63b4b714..086d684231b 100644
--- a/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs
+++ b/src/StringTools.UnitTests/SpanBasedStringBuilder_Tests.cs
@@ -96,6 +96,28 @@ public void ReferenceEqualsReturnsExpectedValue()
             internableString.ReferenceEquals(str).ShouldBeFalse();
         }
 
+        [Theory]
+        [InlineData("012345678")] // odd number of characters
+        [InlineData("0123456789")] // even number of characters
+        public void GetHashCodeIsStableRegardlessOfSpanLength(string testString)
+        {
+            int hashCode = new InternableString(testString).GetHashCode();
+
+            // Chop the string into 2-3 parts and verify that the hash code is unchanged.
+            for (int i = 0; i < testString.Length - 1; i++)
+            {
+                for (int j = i + 1; j < testString.Length; j++)
+                {
+                    SpanBasedStringBuilder stringBuilder = new SpanBasedStringBuilder();
+                    stringBuilder.Append(testString.Substring(0, i));
+                    stringBuilder.Append(testString.Substring(i, j - i));
+                    stringBuilder.Append(testString.Substring(j));
+                    InternableString internableString = new InternableString(stringBuilder);
+                    internableString.GetHashCode().ShouldBe(hashCode);
+                }
+            }
+        }
+
         [Theory]
         [MemberData(nameof(TestData))]
         public void AppendAppendsString(InterningTestData.TestDatum datum)
diff --git a/src/StringTools.UnitTests/StringTools.UnitTests.csproj b/src/StringTools.UnitTests/StringTools.UnitTests.csproj
index e11fc1d60ce..b48cd46cb93 100644
--- a/src/StringTools.UnitTests/StringTools.UnitTests.csproj
+++ b/src/StringTools.UnitTests/StringTools.UnitTests.csproj
@@ -1,4 +1,4 @@
-Ôªø<Project Sdk="Microsoft.NET.Sdk">
+<Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
     <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>
     <PlatformTarget>$(RuntimeOutputPlatformTarget)</PlatformTarget>
@@ -12,6 +12,7 @@
 
   <ItemGroup>
     <PackageReference Include="Shouldly" />
+    <PackageReference Include="System.Net.Http" />
   </ItemGroup>
 
   <ItemGroup>
diff --git a/src/StringTools.UnitTests/WeakStringCache_Tests.cs b/src/StringTools.UnitTests/WeakStringCache_Tests.cs
index bddfc60917b..41d4d931c95 100644
--- a/src/StringTools.UnitTests/WeakStringCache_Tests.cs
+++ b/src/StringTools.UnitTests/WeakStringCache_Tests.cs
@@ -84,8 +84,8 @@ private void AddStringsWithSameHashCode(int numberOfStrings)
 
             for (int i = 0; i < numberOfStrings; i++)
             {
-                string strPart2 = "1" + String.Concat(Enumerable.Repeat("4428939786", i));
-                hashCodes[i] = AddString("Random string ", strPart2, (string cachedString) =>
+                string strPart2 = string.Concat(Enumerable.Repeat("100570862200", i + 2));
+                hashCodes[i] = AddString(string.Empty, strPart2, (string cachedString) =>
                 {
                     _cache.GetDebugInfo().ShouldBe(new WeakStringCache.DebugInfo()
                     {
diff --git a/src/StringTools/InternableString.cs b/src/StringTools/InternableString.cs
index ca8fa75ef48..15508eb6fea 100644
--- a/src/StringTools/InternableString.cs
+++ b/src/StringTools/InternableString.cs
@@ -265,6 +265,15 @@ public unsafe string ExpensiveConvertToString()
                         }
                     }
                 }
+
+                // The invariant that Length is the sum of span lengths is critical in this unsafe method.
+                // Violating it may lead to memory corruption and, since this code tends to run under a lock,
+                // to hangs caused by the lock getting orphaned. Attempt to detect that and throw now, 
+                // before the corruption causes further problems.
+                if (destPtr != resultPtr + Length)
+                {
+                    throw new InvalidOperationException($"Length of {Length} does not match the sum of span lengths of {destPtr - resultPtr}.");
+                }
             }
             return result;
         }
@@ -299,18 +308,23 @@ public override string ToString()
         }
 
         /// <summary>
-        /// Implements the simple yet very decently performing djb2 hash function (xor version).
+        /// Implements the simple yet very decently performing djb2-like hash function (xor version) as inspired by
+        /// https://github.com/dotnet/runtime/blob/6262ae8e6a33abac569ab6086cdccc470c810ea4/src/libraries/System.Private.CoreLib/src/System/String.Comparison.cs#L810-L840
         /// </summary>
         /// <returns>A stable hashcode of the string represented by this instance.</returns>
+        /// <remarks>
+        /// Unlike the BCL method, this implementation works only on two characters at a time to cut on the complexity with
+        /// characters that feed into the same operation but straddle multiple spans. Note that it must return the same value for
+        /// a given string regardless of how it's split into spans (e.g. { "AB" } and { "A", "B" } have the same hash code).
+        /// </remarks>
         public override unsafe int GetHashCode()
         {
-            int hashCode = 5381;
+            uint hash = (5381 << 16) + 5381;
+            bool hashedOddNumberOfCharacters = false;
+
             fixed (char* charPtr = _inlineSpan)
             {
-                for (int i = 0; i < _inlineSpan.Length; i++)
-                {
-                    hashCode = unchecked(hashCode * 33 ^ charPtr[i]);
-                }
+                hash = GetHashCodeHelper(charPtr, _inlineSpan.Length, hash, ref hashedOddNumberOfCharacters);
             }
             if (_spans != null)
             {
@@ -318,14 +332,68 @@ public override unsafe int GetHashCode()
                 {
                     fixed (char* charPtr = span.Span)
                     {
-                        for (int i = 0; i < span.Length; i++)
-                        {
-                            hashCode = unchecked(hashCode * 33 ^ charPtr[i]);
-                        }
+                        hash = GetHashCodeHelper(charPtr, span.Length, hash, ref hashedOddNumberOfCharacters);
                     }
                 }
             }
-            return hashCode;
+            return (int)(hash);
+        }
+
+        /// <summary>
+        /// Hashes a memory block specified by a pointer and length.
+        /// </summary>
+        /// <param name="charPtr">Pointer to the first character.</param>
+        /// <param name="length">Number of characters at <paramref name="charPtr"/>.</param>
+        /// <param name="hash">The running hash code.</param>
+        /// <param name="hashedOddNumberOfCharacters">True if the incoming <paramref name="hash"/> was calculated from an odd number of characters.</param>
+        /// <returns>The updated running hash code (not passed as a ref parameter to play nicely with JIT optimizations).</returns>
+        [MethodImpl(MethodImplOptions.AggressiveInlining)]
+        private static unsafe uint GetHashCodeHelper(char* charPtr, int length, uint hash, ref bool hashedOddNumberOfCharacters)
+        {
+            if (hashedOddNumberOfCharacters && length > 0)
+            {
+                // If the number of characters hashed so far is odd, the first character of the current block completes
+                // the calculation done with the last character of the previous block.
+                hash ^= BitConverter.IsLittleEndian ? ((uint)*charPtr << 16) : *charPtr;
+                length--;
+                charPtr++;
+                hashedOddNumberOfCharacters = false;
+            }
+
+            // The loop hashes two characters at a time.
+            uint* ptr = (uint*)charPtr;
+            while (length >= 2)
+            {
+                length -= 2;
+                hash = (RotateLeft(hash, 5) + hash) ^ *ptr;
+                ptr += 1;
+            }
+
+            if (length > 0)
+            {
+                hash = (RotateLeft(hash, 5) + hash) ^ (BitConverter.IsLittleEndian ? *((char*)ptr) : ((uint)*((char*)ptr) << 16));
+                hashedOddNumberOfCharacters = true;
+            }
+
+            return hash;
+        }
+
+        /// <summary>
+        /// Rotates an integer by the specified number of bits.
+        /// </summary>
+        /// <param name="value">The value to rotate.</param>
+        /// <param name="offset">The number of bits.</param>
+        /// <returns>The rotated value.</returns>
+        [MethodImpl(MethodImplOptions.AggressiveInlining)]
+        private static uint RotateLeft(uint value, int offset)
+        {
+#if NETCOREAPP
+            return System.Numerics.BitOperations.RotateLeft(value, offset);
+#else
+            // Copied from System\Numerics\BitOperations.cs in dotnet/runtime as the routine is not available on .NET Framework.
+            // The JIT recognized the pattern and generates efficient code, e.g. the rol instruction on x86/x64.
+            return (value << offset) | (value >> (32 - offset));
+#endif
         }
     }
 }
diff --git a/src/StringTools/StringTools.csproj b/src/StringTools/StringTools.csproj
index e7713cb359a..fef9909ce6f 100644
--- a/src/StringTools/StringTools.csproj
+++ b/src/StringTools/StringTools.csproj
@@ -15,6 +15,7 @@
     <SemanticVersioningV1>true</SemanticVersioningV1>
 
     <AssemblyName>Microsoft.NET.StringTools</AssemblyName>
+    <PackageDescription>This package contains the $(AssemblyName) assembly which implements common string-related functionality such as weak interning.</PackageDescription>
   </PropertyGroup>
 
   <PropertyGroup Condition="'$(TargetFramework)' == 'net35'">
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
index 77a9bf0452a..7f55c5bcbd1 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
@@ -1,6 +1,9 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
 using System;
+using System.Collections.Generic;
 using System.IO;
-using System.Reflection;
 using System.Runtime.Versioning;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks;
@@ -12,10 +15,6 @@ namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     public class ResolveAssemblyReferenceCacheSerialization : IDisposable
     {
-        // Maintain this two in sync with the constant in SystemState
-        private static readonly byte[] TranslateContractSignature = { (byte)'M', (byte)'B', (byte)'R', (byte)'S', (byte)'C' }; // Microsoft Build RAR State Cache
-        private static readonly byte TranslateContractVersion = 0x01;
-
         private readonly string _rarCacheFile;
         private readonly TaskLoggingHelper _taskLoggingHelper;
 
@@ -42,178 +41,81 @@ public void RoundTripEmptyState()
         {
             SystemState systemState = new();
 
-            systemState.SerializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+            systemState.SerializeCache(_rarCacheFile, _taskLoggingHelper);
 
-            var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+            var deserialized = SystemState.DeserializeCache(_rarCacheFile, _taskLoggingHelper, typeof(SystemState));
 
             deserialized.ShouldNotBeNull();
         }
 
         [Fact]
-        public void WrongFileSignature()
-        {
-            SystemState systemState = new();
-
-            for (int i = 0; i < TranslateContractSignature.Length; i++)
-            {
-                systemState.SerializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
-                using (var cacheStream = new FileStream(_rarCacheFile, FileMode.Open, FileAccess.ReadWrite))
-                {
-                    cacheStream.Seek(i, SeekOrigin.Begin);
-                    cacheStream.WriteByte(0);
-                    cacheStream.Close();
-                }
-
-                var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
-
-                deserialized.ShouldBeNull();
-            }
-        }
-
-        [Fact]
-        public void WrongFileVersion()
+        public void CorrectFileVersion()
         {
             SystemState systemState = new();
 
-            systemState.SerializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+            systemState.SerializeCache(_rarCacheFile, _taskLoggingHelper);
             using (var cacheStream = new FileStream(_rarCacheFile, FileMode.Open, FileAccess.ReadWrite))
             {
-                cacheStream.Seek(TranslateContractSignature.Length, SeekOrigin.Begin);
-                cacheStream.WriteByte((byte) (TranslateContractVersion + 1));
+                cacheStream.Seek(0, SeekOrigin.Begin);
+                cacheStream.WriteByte(StateFileBase.CurrentSerializationVersion);
                 cacheStream.Close();
             }
 
-            var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
-
-            deserialized.ShouldBeNull();
-        }
-
-        [Fact]
-        public void CorrectFileSignature()
-        {
-            SystemState systemState = new();
-
-            for (int i = 0; i < TranslateContractSignature.Length; i++)
-            {
-                systemState.SerializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
-                using (var cacheStream = new FileStream(_rarCacheFile, FileMode.Open, FileAccess.ReadWrite))
-                {
-                    cacheStream.Seek(i, SeekOrigin.Begin);
-                    cacheStream.WriteByte(TranslateContractSignature[i]);
-                    cacheStream.Close();
-                }
-
-                var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+            var deserialized = SystemState.DeserializeCache(_rarCacheFile, _taskLoggingHelper, typeof(SystemState));
 
-                deserialized.ShouldNotBeNull();
-            }
+            deserialized.ShouldNotBeNull();
         }
 
         [Fact]
-        public void CorrectFileVersion()
+        public void WrongFileVersion()
         {
             SystemState systemState = new();
 
-            systemState.SerializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+            systemState.SerializeCache(_rarCacheFile, _taskLoggingHelper);
             using (var cacheStream = new FileStream(_rarCacheFile, FileMode.Open, FileAccess.ReadWrite))
             {
-                cacheStream.Seek(TranslateContractSignature.Length, SeekOrigin.Begin);
-                cacheStream.WriteByte(TranslateContractVersion);
+                cacheStream.Seek(0, SeekOrigin.Begin);
+                cacheStream.WriteByte(StateFileBase.CurrentSerializationVersion - 1);
                 cacheStream.Close();
             }
 
-            var deserialized = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
+            var deserialized = SystemState.DeserializeCache(_rarCacheFile, _taskLoggingHelper, typeof(SystemState));
 
-            deserialized.ShouldNotBeNull();
+            deserialized.ShouldBeNull();
         }
 
         [Fact]
-        public void VerifySampleStateDeserialization()
+        public void ValidateSerializationAndDeserialization()
         {
-            // This test might also fail when binary format is modified.
-            // Any change in SystemState and child class ITranslatable implementation will most probably make this fail.
-            // To fix it, file referred by 'sampleName' needs to be recaptured and constant bellow modified to reflect
-            // the content of that cache.
-            // This sample was captured by compiling https://github.com/dotnet/roslyn/commit/f8107de2a94a01e96ac3d7c1f225acbb61e18830
-            const string sampleName = "Microsoft.VisualStudio.LanguageServices.Implementation.csprojAssemblyReference.cache";
-            const string expectedAssemblyPath = @"C:\Users\rokon\.nuget\packages\microsoft.visualstudio.codeanalysis.sdk.ui\15.8.27812-alpha\lib\net46\Microsoft.VisualStudio.CodeAnalysis.Sdk.UI.dll";
-            const long expectedAssemblyLastWriteTimeTicks = 636644382480000000;
-            const string expectedAssemblyName = "Microsoft.VisualStudio.CodeAnalysis.Sdk.UI, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a";
-            const string expectedFrameworkName = ".NETFramework,Version=v4.5";
-            var expectedDependencies = new[]
+            Dictionary<string, SystemState.FileState> cache = new() {
+                    { "path1", new SystemState.FileState(DateTime.Now) },
+                    { "path2", new SystemState.FileState(DateTime.Now) { Assembly = new AssemblyNameExtension("hi") } },
+                    { "dllName", new SystemState.FileState(DateTime.Now.AddSeconds(-10)) {
+                        Assembly = null,
+                        RuntimeVersion = "v4.0.30319",
+                        FrameworkNameAttribute = new FrameworkName(".NETFramework", Version.Parse("4.7.2"), "Profile"),
+                        scatterFiles = new string[] { "first", "second" } } } };
+            SystemState sysState = new();
+            sysState.instanceLocalFileStateCache = cache;
+            SystemState sysState2 = null;
+            using (TestEnvironment env = TestEnvironment.Create())
             {
-                "mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
-                "System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
-                "System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.CodeAnalysis, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.DeveloperTools, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
-                "Microsoft.VisualStudio.Shell.Interop, Version=7.1.40304.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "EnvDTE, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.CodeAnalysis.Sdk, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.Build.Framework, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.Text.Logic, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.Text.UI, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.Text.Data, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.Text.UI.Wpf, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.ComponentModelHost, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.VSHelp, Version=7.0.3300.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.Shell.Interop.11.0, Version=11.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.VCProjectEngine, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.Shell.15.0, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.OLE.Interop, Version=7.1.40304.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
-                "Microsoft.VisualStudio.TextManager.Interop, Version=7.1.40304.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "EnvDTE80, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
-                "Microsoft.VisualStudio.VirtualTreeGrid, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.Shell.Interop.8.0, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-                "Microsoft.VisualStudio.Editor, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a",
-            };
-
-
-            CopyResourceSampleFileIntoRarCacheFile($@"AssemblyDependency\CacheFileSamples\{sampleName}");
-
-            var deserializedByTranslator = SystemState.DeserializeCacheByTranslator(_rarCacheFile, _taskLoggingHelper);
-            deserializedByTranslator.ShouldNotBeNull();
-
-            deserializedByTranslator.SetGetLastWriteTime(path =>
-            {
-                if (path != expectedAssemblyPath)
-                    throw new InvalidOperationException("Unexpected file name for this test case");
-
-                return new DateTime(expectedAssemblyLastWriteTimeTicks, DateTimeKind.Utc);
-            });
-
-            GetAssemblyName getAssemblyName = deserializedByTranslator.CacheDelegate((GetAssemblyName)null);
-            GetAssemblyMetadata getAssemblyMetadata = deserializedByTranslator.CacheDelegate((GetAssemblyMetadata)null);
-
-            var assemblyName = getAssemblyName(expectedAssemblyPath);
-            getAssemblyMetadata(expectedAssemblyPath, null,
-                out AssemblyNameExtension[] dependencies,
-                out string[] scatterFiles,
-                out FrameworkName frameworkNameAttribute);
-
-
-            assemblyName.ShouldNotBeNull();
-            assemblyName.ShouldBe(new AssemblyNameExtension(expectedAssemblyName, false));
-            scatterFiles.ShouldBeEmpty();
-            frameworkNameAttribute.ShouldBe(new FrameworkName(expectedFrameworkName));
-            dependencies.ShouldNotBeNull();
-            expectedDependencies.ShouldBe(expectedDependencies, ignoreOrder: true);
-        }
-
-        private void CopyResourceSampleFileIntoRarCacheFile(string name)
-        {
-            Assembly asm = this.GetType().Assembly;
-            var resource = string.Format($"{asm.GetName().Name}.{name.Replace("\\", ".")}");
-            using Stream resourceStream = asm.GetManifestResourceStream(resource);
-            if (resourceStream == null)
-                throw new InvalidOperationException($"Resource '{resource}' has not been found.");
-
-            using FileStream rarCacheFile = new FileStream(_rarCacheFile, FileMode.CreateNew);
+                TransientTestFile file = env.CreateFile();
+                sysState.SerializeCache(file.Path, null);
+                sysState2 = SystemState.DeserializeCache(file.Path, null, typeof(SystemState)) as SystemState;
+            }
 
-            resourceStream.CopyTo(rarCacheFile);
+            Dictionary<string, SystemState.FileState> cache2 = sysState2.instanceLocalFileStateCache;
+            cache2.Count.ShouldBe(cache.Count);
+            cache2["path2"].Assembly.Name.ShouldBe(cache["path2"].Assembly.Name);
+            SystemState.FileState dll = cache["dllName"];
+            SystemState.FileState dll2 = cache2["dllName"];
+            dll2.Assembly.ShouldBe(dll.Assembly);
+            dll2.FrameworkNameAttribute.FullName.ShouldBe(dll.FrameworkNameAttribute.FullName);
+            dll2.LastModified.ShouldBe(dll.LastModified);
+            dll2.RuntimeVersion.ShouldBe(dll.RuntimeVersion);
+            dll2.scatterFiles.Length.ShouldBe(dll.scatterFiles.Length);
+            dll2.scatterFiles[1].ShouldBe(dll.scatterFiles[1]);
         }
     }
 }
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index 373805aa30f..e932aba587b 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -2493,6 +2493,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
             };
         }
 
+#pragma warning disable CA1416
         /// <summary>
         /// Registry access delegate. Given a hive and a view, return the registry base key.
         /// </summary>
@@ -2901,6 +2902,7 @@ private static string GetRegistrySubKeyDefaultValue(RegistryKey baseKey, string
             Assert.True(false, $"New GetRegistrySubKeyDefaultValue parameters encountered, need to add unittesting support for subKey={subKey}");
             return null;
         }
+#pragma warning restore CA1416
 
         /// <summary>
         /// Delegate for System.IO.File.GetLastWriteTime
diff --git a/src/Tasks.UnitTests/AssemblyRegistrationCache_Tests.cs b/src/Tasks.UnitTests/AssemblyRegistrationCache_Tests.cs
index d496e33ecf1..fc94fbb510c 100644
--- a/src/Tasks.UnitTests/AssemblyRegistrationCache_Tests.cs
+++ b/src/Tasks.UnitTests/AssemblyRegistrationCache_Tests.cs
@@ -2,6 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using Microsoft.Build.Tasks;
+using Shouldly;
 using Xunit;
 
 namespace Microsoft.Build.UnitTests
@@ -26,5 +27,24 @@ public void ExerciseCache()
             Assert.Equal("foo", assembly);
             Assert.Equal("bar", tlb);
         }
+
+        [Fact]
+        public void ExerciseCacheSerialization()
+        {
+            AssemblyRegistrationCache arc = new();
+            arc.AddEntry("foo", "bar");
+            AssemblyRegistrationCache arc2 = null;
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                TransientTestFile file = env.CreateFile();
+                arc.SerializeCache(file.Path, null);
+                arc2 = StateFileBase.DeserializeCache(file.Path, null, typeof(AssemblyRegistrationCache)) as AssemblyRegistrationCache;
+            }
+
+            arc2._assemblies.Count.ShouldBe(arc._assemblies.Count);
+            arc2._assemblies[0].ShouldBe(arc._assemblies[0]);
+            arc2._typeLibraries.Count.ShouldBe(arc._typeLibraries.Count);
+            arc2._typeLibraries[0].ShouldBe(arc._typeLibraries[0]);
+        }
     }
 }
diff --git a/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs b/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs
index 8d438b418fc..7dbd018acc2 100644
--- a/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs
+++ b/src/Tasks.UnitTests/CSharpParserUtilitites_Tests.cs
@@ -17,22 +17,28 @@ public void EmptyFile()
 
         // Simplest case of getting a fully-qualified class name from
         // a c# file.
-        [Fact]
-        public void Simple()
+        [Theory]
+        [InlineData("namespace MyNamespace { class MyClass {} }")]
+        [InlineData("namespace MyNamespace ; class MyClass {} ")] // file-scoped namespaces
+        public void Simple(string fileContents)
         {
-            AssertParse("namespace MyNamespace { class MyClass {} }", "MyNamespace.MyClass");
+            AssertParse(fileContents, "MyNamespace.MyClass");
         }
 
-        [Fact]
-        public void EmbeddedComment()
+        [Theory]
+        [InlineData("namespace /**/ MyNamespace /**/ { /**/ class /**/ MyClass/**/{}} //")]
+        [InlineData("namespace /**/ MyNamespace /**/ ; /**/ class /**/ MyClass/**/{} //")] // file-scoped namespaces
+        public void EmbeddedComment(string fileContents)
         {
-            AssertParse("namespace /**/ MyNamespace /**/ { /**/ class /**/ MyClass/**/{}} //", "MyNamespace.MyClass");
+            AssertParse(fileContents, "MyNamespace.MyClass");
         }
 
-        [Fact]
-        public void MinSpace()
+        [Theory]
+        [InlineData("namespace MyNamespace{class MyClass{}}")]
+        [InlineData("namespace MyNamespace;class MyClass{}")] // file-scoped namespaces
+        public void MinSpace(string fileContents)
         {
-            AssertParse("namespace MyNamespace{class MyClass{}}", "MyNamespace.MyClass");
+            AssertParse(fileContents, "MyNamespace.MyClass");
         }
 
         [Fact]
@@ -41,16 +47,20 @@ public void NoNamespace()
             AssertParse("class MyClass{}", "MyClass");
         }
 
-        [Fact]
-        public void SneakyComment()
+        [Theory]
+        [InlineData("/*namespace MyNamespace { */ class MyClass {} /* } */")]
+        [InlineData("/*namespace MyNamespace ; */ class MyClass {}")] // file-scoped namespaces
+        public void SneakyComment(string fileContents)
         {
-            AssertParse("/*namespace MyNamespace { */ class MyClass {} /* } */", "MyClass");
+            AssertParse(fileContents, "MyClass");
         }
 
-        [Fact]
-        public void CompoundNamespace()
+        [Theory]
+        [InlineData("namespace MyNamespace.Feline { class MyClass {} }")]
+        [InlineData("namespace MyNamespace.Feline ; class MyClass {} ")] // file-scoped namespaces
+        public void CompoundNamespace(string fileContents)
         {
-            AssertParse("namespace MyNamespace.Feline { class MyClass {} }", "MyNamespace.Feline.MyClass");
+            AssertParse(fileContents, "MyNamespace.Feline.MyClass");
         }
 
         [Fact]
@@ -71,16 +81,20 @@ public void NestedCompoundNamespace()
             AssertParse("namespace MyNamespace/**/.A{ namespace Feline . B {namespace Bovine.C {sealed class MyClass {} }} }", "MyNamespace.A.Feline.B.Bovine.C.MyClass");
         }
 
-        [Fact]
-        public void DoubleClass()
+        [Theory]
+        [InlineData("namespace MyNamespace{class Feline{}class Bovine}")]
+        [InlineData("namespace MyNamespace;class Feline{}class Bovine")] // file-scoped namespaces
+        public void DoubleClass(string fileContents)
         {
-            AssertParse("namespace MyNamespace{class Feline{}class Bovine}", "MyNamespace.Feline");
+            AssertParse(fileContents, "MyNamespace.Feline");
         }
 
-        [Fact]
-        public void EscapedKeywordClass()
+        [Theory]
+        [InlineData("namespace MyNamespace{class @class{}}")]
+        [InlineData("namespace MyNamespace;class @class{}")] // file-scoped namespaces
+        public void EscapedKeywordClass(string fileContents)
         {
-            AssertParse("namespace MyNamespace{class @class{}}", "MyNamespace.class");
+            AssertParse(fileContents, "MyNamespace.class");
         }
 
         [Fact]
@@ -90,7 +104,7 @@ public void LeadingUnderscore()
         }
 
         [Fact]
-        public void SkipInterveningNamespaces()
+        public void InterveningNamespaces()
         {
             AssertParse("namespace MyNamespace { namespace XXX {} class MyClass {} }", "MyNamespace.MyClass");
         }
@@ -174,10 +188,12 @@ public void AssemblyAttributeBool()
             AssertParse("[assembly :AssemblyDelaySign(false)] namespace i { class a { } }", "i.a");
         }
 
-        [Fact]
-        public void AssemblyAttributeString()
+        [Theory]
+        [InlineData("[assembly :MyString(\"namespace\")] namespace i { class a { } }")]
+        [InlineData("[assembly :MyString(\"namespace\")] namespace i; class a { }")]
+        public void AssemblyAttributeString(string fileContents)
         {
-            AssertParse("[assembly :MyString(\"namespace\")] namespace i { class a { } }", "i.a");
+            AssertParse(fileContents, "i.a");
         }
 
         [Fact]
@@ -253,19 +269,20 @@ public void ClassAttributeStringIsCloseScope()
             AssertParse("namespace i { [MyString(\"}\")] class a { } }", "i.a");
         }
 
-        [Fact]
-        public void NameSpaceStructEnum()
+        [Theory]
+        [InlineData("namespace n { public struct s {  enum e {} } class c {} }")]
+        [InlineData("namespace n; public struct s {  enum e {} } class c {}")] // file-scoped namespace
+        public void NameSpaceStructEnum(string fileContents)
         {
-            AssertParse("namespace n { public struct s {  enum e {} } class c {} }", "n.c");
+            AssertParse(fileContents, "n.c");
         }
 
         [Fact]
         public void PreprocessorControllingTwoNamespaces()
         {
             // This works by coincidence since preprocessor directives are currently ignored.
-            AssertParse
-            (
-                @"
+            // Note: If the condition were #if (true), the result would still be n1.c
+            AssertParse(@"
 #if (false)
 namespace n1
 #else
@@ -275,29 +292,57 @@ namespace n2
                 ", "n2.c");
         }
 
-        [Fact]
-        public void PreprocessorControllingTwoNamespacesWithInterveningKeyword()
+        /// <summary>
+        /// The test "PreprocessorControllingTwoNamespaces" reveals that preprocessor directives are ignored.
+        /// This means that in the case of many namespaces before curly braces (despite that being invalid C#)
+        /// the last namespace would win. This test explicitly tests that.
+        /// </summary>
+        [Theory]
+        [InlineData(@"
+namespace n1
+    namespace n2
+    namespace n3
+    namespace n4
+    { class c { } }", "n4.c")]
+        [InlineData(@"
+namespace n1;
+namespace n2;
+namespace n3;
+namespace n4;
+class c {} ", "n1.n2.n3.n4.c")]
+        public void MultipleNamespaces_InvalidCSharp(string fileContents, string expected)
         {
             // This works by coincidence since preprocessor directives are currently ignored.
-            AssertParse
-            (
-                @"
+            AssertParse(fileContents, expected);
+        }
+
+        /// <summary>
+        /// Note: Preprocessor conditions are not implemented
+        /// </summary>
+        [Theory]
+        [InlineData(@"
 #if (false)
 namespace n1
 #else
 using a=b;
 namespace n2
 #endif    
-{ class c {} }
-                ", "n2.c");
+{ class c {} }", "n2.c")]
+        [InlineData(@"
+#if (false)
+namespace n1;
+#else
+using a=b;
+namespace n2;
+#endif    
+{ class c {} }", "n1.n2.c")]
+        public void PreprocessorControllingTwoNamespacesWithInterveningKeyword(string fileContents, string expected)
+        {
+            AssertParse(fileContents, expected);
         }
 
-        [Fact]
-        public void Preprocessor()
-        {
-            AssertParse
-            (
-                @"
+        [Theory]
+        [InlineData(@"
 #if MY_CONSTANT                
 namespace i 
 {
@@ -307,8 +352,19 @@ class a
     }     
     #endregion
 }
-#endif // MY_CONSTANT
-                ", "i.a");
+#endif // MY_CONSTANT ")]
+        [InlineData(@"
+#if MY_CONSTANT                
+namespace i;
+    #region Put the class in a region
+    class a 
+    {
+    }     
+    #endregion
+#endif // MY_CONSTANT")]
+        public void Preprocessor(string fileContents)
+        {
+            AssertParse(fileContents, "i.a");
         }
 
         [Fact(Skip = "Preprocessor is not yet implemented.")]
@@ -333,16 +389,18 @@ namespace i
 
 
 
-        [Fact]
-        public void Regress_Mutation_SingleLineCommentsShouldBeIgnored()
-        {
-            AssertParse
-            (
-                @"
+        [Theory]
+        [InlineData(@"
 namespace n2
 // namespace n1
-{ class c {} }
-                ", "n2.c");
+{ class c {} }")]
+        [InlineData(@"
+namespace n2;
+// namespace n1
+class c {}")]
+        public void Regress_Mutation_SingleLineCommentsShouldBeIgnored(string fileContents)
+        {
+            AssertParse(fileContents, "n2.c");
         }
 
         /*
diff --git a/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
new file mode 100644
index 00000000000..91bbc2269b3
--- /dev/null
+++ b/src/Tasks.UnitTests/GetCompatiblePlatform_Tests.cs
@@ -0,0 +1,203 @@
+Ôªø// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.UnitTests;
+using Microsoft.Build.Utilities;
+using Shouldly;
+using Xunit;
+using Xunit.Abstractions;
+
+namespace Microsoft.Build.Tasks.UnitTests
+{
+    sealed public class GetCompatiblePlatform_Tests
+    {
+        private readonly ITestOutputHelper _output;
+
+        public GetCompatiblePlatform_Tests(ITestOutputHelper output)
+        {
+            _output = output;
+        }
+
+        [Fact]
+        public void ResolvesViaPlatformLookupTable()
+        {
+            // PlatformLookupTable always takes priority. It is typically user-defined.
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("Platforms", "x64;x86;AnyCPU");
+
+            GetCompatiblePlatform task = new GetCompatiblePlatform()
+            {
+                BuildEngine = new MockEngine(_output),
+                CurrentProjectPlatform = "win32",
+                PlatformLookupTable = "win32=x64",
+                AnnotatedProjects = new TaskItem[] { projectReference }
+            };
+
+            task.Execute().ShouldBeTrue();
+
+            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("x64");
+        }
+
+        [Fact]
+        public void ResolvesViaProjectReferencesPlatformLookupTable()
+        {
+            // A ProjectReference's PlatformLookupTable takes priority over the current project's table.
+            // This allows overrides on a per-ProjectItem basis.
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("Platforms", "x64;x86;AnyCPU");
+
+            // ProjectReference will be assigned x86 because its table takes priority
+            projectReference.SetMetadata("PlatformLookupTable", "win32=x86");
+
+            GetCompatiblePlatform task = new GetCompatiblePlatform()
+            {
+                BuildEngine = new MockEngine(_output),
+                CurrentProjectPlatform = "win32",
+                PlatformLookupTable = "win32=x64",
+                AnnotatedProjects = new TaskItem[] { projectReference }
+            };
+
+            task.Execute().ShouldBeTrue();
+
+            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("x86");
+        }
+
+        [Fact]
+        public void ResolvesViaAnyCPUDefault()
+        {
+            // No valid mapping via the lookup table, should default to AnyCPU when the current project
+            // and ProjectReference platforms don't match.
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("Platforms", "x64;AnyCPU");
+
+            GetCompatiblePlatform task = new GetCompatiblePlatform()
+            {
+                BuildEngine = new MockEngine(_output),
+                CurrentProjectPlatform = "x86",
+                PlatformLookupTable = "AnyCPU=x64", 
+                AnnotatedProjects = new TaskItem[] { projectReference }
+            };
+
+            task.Execute().ShouldBeTrue();
+
+            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("AnyCPU");
+        }
+
+        [Fact]
+        public void ResolvesViaSamePlatform()
+        {
+            // No valid mapping via the lookup table. If the ProjectReference's platform
+            // matches the current project's platform, it takes priority over AnyCPU default.
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("Platforms", "x86;x64;AnyCPU");
+            projectReference.SetMetadata("PlatformLookupTable", "x86=AnyCPU"); // matching platform takes priority over lookup tables
+
+            GetCompatiblePlatform task = new GetCompatiblePlatform()
+            {
+                BuildEngine = new MockEngine(_output),
+                CurrentProjectPlatform = "x86",
+                PlatformLookupTable = "x86=AnyCPU",
+                AnnotatedProjects = new TaskItem[] { projectReference }
+            };
+
+            task.Execute().ShouldBeTrue();
+
+            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("x86");
+        }
+
+        [Fact]
+        public void FailsToResolve()
+        {
+            // No valid mapping via the lookup table, ProjectReference can't default to AnyCPU,
+            // it also can't match with current project, log a warning.
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("Platforms", "x64");
+
+            GetCompatiblePlatform task = new GetCompatiblePlatform()
+            {
+                BuildEngine = new MockEngine(_output),
+                CurrentProjectPlatform = "x86",
+                PlatformLookupTable = "AnyCPU=x64",
+                AnnotatedProjects = new TaskItem[] { projectReference },
+            };
+
+            task.Execute().ShouldBeTrue();
+            // When the task logs a warning, it does not set NearestPlatform
+            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe(string.Empty);
+            ((MockEngine)task.BuildEngine).AssertLogContains("MSB3981");
+        }
+
+        [Fact]
+        public void WarnsWhenProjectReferenceHasNoPlatformOptions()
+        {
+            // Task should log a warning when a ProjectReference has no options to build as.
+            // It will continue and have no NearestPlatform metadata.
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("Platforms", string.Empty);
+
+            GetCompatiblePlatform task = new GetCompatiblePlatform()
+            {
+                BuildEngine = new MockEngine(_output),
+                CurrentProjectPlatform = "x86",
+                PlatformLookupTable = "AnyCPU=x64",
+                AnnotatedProjects = new TaskItem[] { projectReference },
+            };
+
+            task.Execute().ShouldBeTrue();
+            // When the task logs a warning, it does not set NearestPlatform
+            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe(string.Empty);
+            ((MockEngine)task.BuildEngine).AssertLogContains("MSB3982");
+        }
+
+        /// <summary>
+        /// Invalid format on PlatformLookupTable results in an exception being thrown.
+        /// </summary>
+        [Fact]
+        public void WarnsOnInvalidFormatLookupTable()
+        {
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("Platforms", "x64");
+
+            GetCompatiblePlatform task = new GetCompatiblePlatform()
+            {
+                BuildEngine = new MockEngine(_output),
+                CurrentProjectPlatform = "AnyCPU",
+                PlatformLookupTable = "AnyCPU=;A=B", // invalid format
+                AnnotatedProjects = new TaskItem[] { projectReference },
+            };
+
+            task.Execute().ShouldBeTrue();
+            // When the platformlookuptable is in an invalid format, it is discarded.
+            // There shouldn't have been a translation found from AnyCPU to anything.
+            // Meaning the projectreference would not have NearestPlatform set.
+            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe(string.Empty);
+            ((MockEngine)task.BuildEngine).AssertLogContains("MSB3983");
+        }
+
+        /// <summary>
+        /// Invalid format on PlatformLookupTable from the projectreference results in an exception being thrown.
+        /// </summary>
+        [Fact]
+        public void WarnsOnInvalidFormatProjectReferenceLookupTable()
+        {
+            TaskItem projectReference = new TaskItem("foo.bar");
+            projectReference.SetMetadata("Platforms", "x64;x86");
+            projectReference.SetMetadata("PlatformLookupTable", "x86=;b=d");
+
+            GetCompatiblePlatform task = new GetCompatiblePlatform()
+            {
+                BuildEngine = new MockEngine(_output),
+                CurrentProjectPlatform = "AnyCPU",
+                PlatformLookupTable = "AnyCPU=x86;A=B", // invalid format
+                AnnotatedProjects = new TaskItem[] { projectReference },
+            };
+
+            task.Execute().ShouldBeTrue();
+
+            // A ProjectReference PlatformLookupTable should take priority, but is thrown away when
+            // it has an invalid format. The current project's PLT should be the next priority.
+            task.AssignedProjectsWithPlatform[0].GetMetadata("NearestPlatform").ShouldBe("x86");
+            ((MockEngine)task.BuildEngine).AssertLogContains("MSB3983");
+        }
+    }
+}
diff --git a/src/Tasks.UnitTests/GetSDKReference_Tests.cs b/src/Tasks.UnitTests/GetSDKReference_Tests.cs
index 7af8f468716..6437663437c 100644
--- a/src/Tasks.UnitTests/GetSDKReference_Tests.cs
+++ b/src/Tasks.UnitTests/GetSDKReference_Tests.cs
@@ -2,6 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
@@ -259,6 +260,38 @@ public void GetSDKReferenceFolders()
             VerifySDKFolders(getReferenceFolders, getReferenceFolders2, "References", _sdkDirectory);
         }
 
+        [Fact]
+        public void VerifyGetSdkReferenceTranslator()
+        {
+            Dictionary<string, GetSDKReferenceFiles.SdkReferenceInfo> pathToReferenceMetadata = new();
+            pathToReferenceMetadata.Add("first", new("dat", "dat2", true, false));
+            pathToReferenceMetadata.Add("second", new("inf", "inf2", false, false));
+            Dictionary<string, List<string>> directoryToFileList = new();
+            directoryToFileList.Add("third", new List<string>() { "a", "b", "c" });
+            directoryToFileList.Add("fourth", new List<string>() { "1", "2", "3" });
+            GetSDKReferenceFiles.SDKInfo writeInfo = new(pathToReferenceMetadata, directoryToFileList, 47);
+            GetSDKReferenceFiles.SaveContext contextWriter = new("d", "n", writeInfo);
+            GetSDKReferenceFiles.SDKInfo readInfo = null;
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = env.CreateFolder();
+                GetSDKReferenceFiles.SDKFilesCache cache = new(null, folder.Path, null, null, null);
+                cache.SaveAssemblyListToCacheFile(contextWriter);
+                GetSDKReferenceFiles.SDKFilesCache cache2 = new(null, folder.Path, null, null, null);
+                readInfo = cache2.LoadAssemblyListFromCacheFile("d", "n");
+            }
+            readInfo.DirectoryToFileList.Count.ShouldBe(2);
+            readInfo.DirectoryToFileList["fourth"].Count.ShouldBe(3);
+            readInfo.DirectoryToFileList["fourth"][1].ShouldBe("2");
+            readInfo.DirectoryToFileList["third"][0].ShouldBe("a");
+            readInfo.Hash.ShouldBe(47);
+            readInfo.PathToReferenceMetadata.Count.ShouldBe(2);
+            readInfo.PathToReferenceMetadata["first"].FusionName.ShouldBe("dat");
+            readInfo.PathToReferenceMetadata["first"].IsManagedWinmd.ShouldBeFalse();
+            readInfo.PathToReferenceMetadata["first"].IsWinMD.ShouldBeTrue();
+            readInfo.PathToReferenceMetadata["second"].ImageRuntime.ShouldBe("inf2");
+        }
+
         private static void VerifySDKFolders(GetSDKFolders singleParamDelegate, GetSDKFolders2 multiParamDelegate, string folderName, string sdkDirectory)
         {
             IList<string> sdkFolders = singleParamDelegate(sdkDirectory);
diff --git a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
index b782457b344..98ae00b9da8 100644
--- a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
+++ b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
@@ -18,6 +18,7 @@
   <ItemGroup>
     <PackageReference Include="System.Security.Principal.Windows" />
     <PackageReference Include="Shouldly" />
+    <PackageReference Include="System.Net.Http" />
 
     <ProjectReference Include="..\Build\Microsoft.Build.csproj" />
     <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
@@ -25,14 +26,13 @@
     <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
     <ProjectReference Include="..\Xunit.NetCore.Extensions\Xunit.NetCore.Extensions.csproj" />
-    <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" ReferenceOutputAssembly="false" Private="false" SetTargetFramework="TargetFramework=netstandard1.3" />
+    <ProjectReference Include="..\Samples\PortableTask\PortableTask.csproj" ReferenceOutputAssembly="false" Private="false" SetTargetFramework="TargetFramework=netstandard2.0" />
   </ItemGroup>
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
     <Reference Include="System" />
     <Reference Include="System.Core" />
     <Reference Include="System.IO.Compression" />
-    <Reference Include="System.Net.Http" />
     <Reference Include="System.Xaml" />
     <Reference Include="System.Xml" />
     <Reference Include="PresentationFramework" Condition="$([MSBuild]::IsOSPlatform('windows'))" />
diff --git a/src/Tasks.UnitTests/ResolveComReference_Tests.cs b/src/Tasks.UnitTests/ResolveComReference_Tests.cs
index f8c1c4855f7..4e695b86a73 100644
--- a/src/Tasks.UnitTests/ResolveComReference_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveComReference_Tests.cs
@@ -14,6 +14,9 @@
 using Microsoft.Build.Tasks;
 using Xunit;
 using Microsoft.Build.Shared;
+using System.IO;
+using Microsoft.Build.BackEnd;
+using Shouldly;
 
 namespace Microsoft.Build.UnitTests
 {
@@ -57,6 +60,29 @@ public void GetResolvedASsemblyReferenceSpecNotNull()
             Assert.NotNull(task.GetResolvedAssemblyReferenceItemSpecs());
         }
 
+        [Fact]
+        public void TestSerializationAndDeserialization()
+        {
+            ResolveComReferenceCache cache = new("path1", "path2");
+            cache.componentTimestamps = new()
+            {
+                { "first", DateTime.Now },
+                { "second", DateTime.FromBinary(10000) },
+            };
+            ResolveComReferenceCache cache2 = null;
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                TransientTestFile file = env.CreateFile();
+                cache.SerializeCache(file.Path, null);
+                cache2 = StateFileBase.DeserializeCache(file.Path, null, typeof(ResolveComReferenceCache)) as ResolveComReferenceCache;
+            }
+
+            cache2.tlbImpLocation.ShouldBe(cache.tlbImpLocation);
+            cache2.axImpLocation.ShouldBe(cache.axImpLocation);
+            cache2.componentTimestamps.Count.ShouldBe(cache.componentTimestamps.Count);
+            cache2.componentTimestamps["second"].ShouldBe(cache.componentTimestamps["second"]);
+        }
+
         /*
          * Method:  CheckComReferenceAttributeVerificationForNameItems
          * 
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
index 558b16bf131..99e3d7066b0 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
@@ -2716,7 +2716,7 @@ public References(ITestOutputHelper output)
 
         [Fact]
         [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "Linked resources not supported on Core: https://github.com/microsoft/msbuild/issues/4094")]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Mono, "https://github.com/Microsoft/msbuild/issues/677")]
+        [SkipOnMono("https://github.com/Microsoft/msbuild/issues/677")]
         public void DontLockP2PReferenceWhenResolvingSystemTypes()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
@@ -2894,7 +2894,7 @@ public class Class1
         /// </summary>
         [Fact]
         [SkipOnTargetFramework(TargetFrameworkMonikers.Netcoreapp, "Linked resources not supported on Core: https://github.com/microsoft/msbuild/issues/4094")]
-        [SkipOnTargetFramework(TargetFrameworkMonikers.Mono, "https://github.com/Microsoft/msbuild/issues/677")]
+        [SkipOnMono("https://github.com/Microsoft/msbuild/issues/677")]
         public void ReferencedAssemblySpecifiedUsingRelativePath()
         {
             // This WriteLine is a hack.  On a slow machine, the Tasks unittest fails because remoting
diff --git a/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
index a48675078f4..fa4c5af5675 100644
--- a/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/ResGenDependencies_Tests.cs
@@ -6,6 +6,8 @@
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Shared;
 using Xunit;
+using Shouldly;
+using System;
 
 namespace Microsoft.Build.UnitTests
 {
@@ -16,35 +18,64 @@ sealed public class ResGenDependencies_Tests
 
         public void DirtyCleanScenario(bool useMSBuildResXReader)
         {
-            ResGenDependencies cache = new ResGenDependencies();
-
+            ResGenDependencies cache = new();
             string resx = CreateSampleResx();
             string stateFile = FileUtilities.GetTemporaryFile();
 
             try
             {
                 // A newly created cache is not dirty.
-                Assert.False(cache.IsDirty);
+                cache.IsDirty.ShouldBeFalse();
+
+                ResGenDependencies.PortableLibraryFile libFile = new("otherFileName");
+                libFile.outputFiles = new string[] { "first", "second" };
+                libFile.assemblySimpleName = "simpleName";
+                libFile.lastModified = DateTime.Now.Subtract(TimeSpan.FromSeconds(10));
+                cache.portableLibraries.Add("fileName", libFile);
+
+                // Writing the file to disk should make the cache clean.
+                cache.SerializeCache(stateFile, /* Log */ null);
+                cache.IsDirty.ShouldBeFalse();
 
                 // Getting a file that wasn't in the cache is a write operation.
                 cache.GetResXFileInfo(resx, useMSBuildResXReader);
-                Assert.True(cache.IsDirty);
+                cache.IsDirty.ShouldBeTrue();
 
-                // Writing the file to disk should make the cache clean.
+                // Add linkedFiles to further test serialization and deserialization.
+                cache.resXFiles.TryGetValue(resx, out ResGenDependencies.ResXFile file).ShouldBeTrue();
+                file.linkedFiles = new string[] { "third", "fourth" };
+
+                // Writing the file to disk should make the cache clean again.
                 cache.SerializeCache(stateFile, /* Log */ null);
-                Assert.False(cache.IsDirty);
+                cache.IsDirty.ShouldBeFalse();
 
                 // Deserialize from disk. Result should not be dirty.
-                cache = ResGenDependencies.DeserializeCache(stateFile, true, /* Log */ null);
-                Assert.False(cache.IsDirty);
+                ResGenDependencies cache2 = ResGenDependencies.DeserializeCache(stateFile, true, /* Log */ null);
+                cache2.IsDirty.ShouldBeFalse();
+
+                // Validate that serialization worked
+                cache.portableLibraries.TryGetValue("fileName", out ResGenDependencies.PortableLibraryFile portableLibrary);
+                cache2.portableLibraries.TryGetValue("fileName", out ResGenDependencies.PortableLibraryFile portableLibrary2);
+                portableLibrary2.filename.ShouldBe(portableLibrary.filename);
+                portableLibrary2.exists.ShouldBe(portableLibrary.exists);
+                portableLibrary2.assemblySimpleName.ShouldBe(portableLibrary.assemblySimpleName);
+                portableLibrary2.lastModified.ShouldBe(portableLibrary.lastModified);
+                portableLibrary2.outputFiles.Length.ShouldBe(portableLibrary.outputFiles.Length);
+                portableLibrary2.outputFiles[1].ShouldBe(portableLibrary.outputFiles[1]);
+                cache.resXFiles.TryGetValue(resx, out ResGenDependencies.ResXFile resX);
+                cache2.resXFiles.TryGetValue(resx, out ResGenDependencies.ResXFile resX2);
+                resX2.filename.ShouldBe(resX.filename);
+                resX2.lastModified.ShouldBe(resX.lastModified);
+                resX2.linkedFiles.Length.ShouldBe(resX.linkedFiles.Length);
+                resX2.linkedFiles[1].ShouldBe(resX.linkedFiles[1]);
 
                 // Asking for a file that's in the cache should not dirty the cache.
-                cache.GetResXFileInfo(resx, useMSBuildResXReader);
-                Assert.False(cache.IsDirty);
+                cache2.GetResXFileInfo(resx, useMSBuildResXReader);
+                cache2.IsDirty.ShouldBeFalse();
 
                 // Changing UseSourcePath to false should dirty the cache.
-                cache.UseSourcePath = false;
-                Assert.True(cache.IsDirty);
+                cache2.UseSourcePath = false;
+                cache2.IsDirty.ShouldBeTrue();
             }
             finally
             {
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 4af1396f59e..9a6e36c008e 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -405,6 +405,11 @@ private void CorePopulateMetadata()
                         }
 
                         var container = metadataReader.GetMemberReference((MemberReferenceHandle) ctorHandle).Parent;
+                        if (container.Kind != HandleKind.TypeReference)
+                        {
+                            continue;
+                        }
+
                         var name = metadataReader.GetTypeReference((TypeReferenceHandle) container).Name;
                         if (!string.Equals(metadataReader.GetString(name), "TargetFrameworkAttribute"))
                         {
diff --git a/src/Tasks/AssemblyDependency/Reference.cs b/src/Tasks/AssemblyDependency/Reference.cs
index e5b3b361455..c6b179e69ad 100644
--- a/src/Tasks/AssemblyDependency/Reference.cs
+++ b/src/Tasks/AssemblyDependency/Reference.cs
@@ -513,6 +513,13 @@ internal string FullPath
             }
         }
 
+        internal void NormalizeFullPath()
+        {
+            _fullPath = FileUtilities.NormalizePath(_fullPath);
+            _fullPathWithoutExtension = null;
+            _directoryName = null;
+        }
+
         /// <summary>
         /// The directory that this assembly lives in.
         /// </summary>
diff --git a/src/Tasks/AssemblyDependency/ReferenceTable.cs b/src/Tasks/AssemblyDependency/ReferenceTable.cs
index 5967f4c1cdf..3b214c55a9f 100644
--- a/src/Tasks/AssemblyDependency/ReferenceTable.cs
+++ b/src/Tasks/AssemblyDependency/ReferenceTable.cs
@@ -407,6 +407,12 @@ internal void AddReference(AssemblyNameExtension assemblyName, Reference referen
                 }
             }
 
+            if (reference.FullPath.Length > 0 && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))
+            {
+                // Saves effort and makes deduplication possible downstream
+                reference.NormalizeFullPath();
+            }
+
             References[assemblyName] = reference;
         }
 
@@ -735,13 +741,8 @@ out string redistName
         /// </summary>
         private static void TryConvertToAssemblyName(string itemSpec, string fusionName, ref AssemblyNameExtension assemblyName)
         {
-            // FusionName is used if available.
-            string finalName = fusionName;
-            if (string.IsNullOrEmpty(finalName))
-            {
-                // Otherwise, its itemSpec.
-                finalName = itemSpec;
-            }
+            // FusionName is used if available; otherwise use itemspec.
+            string finalName = string.IsNullOrEmpty(fusionName) ? itemSpec : fusionName;
 
             bool pathRooted = false;
             try
@@ -1337,7 +1338,11 @@ out userRequestedSpecificFile
             // If the path was resolved, then specify the full path on the reference.
             if (resolvedPath != null)
             {
-                if (!Path.IsPathRooted(resolvedPath))
+                if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))
+                {
+                    resolvedPath = FileUtilities.NormalizePath(resolvedPath);
+                }
+                else if (!Path.IsPathRooted(resolvedPath))
                 {
                     resolvedPath = Path.GetFullPath(resolvedPath);
                 }
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index acc0f8ad008..2cea34c71bb 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1247,7 +1247,8 @@ quiet at the engine level.
             }
 
 #if FEATURE_WIN32_REGISTRY
-            if (dependencyTable.Resolvers != null)
+            MessageImportance messageImportance = MessageImportance.Low;
+            if (dependencyTable.Resolvers != null && Log.LogsMessagesOfImportance(messageImportance))
             {
                 foreach (Resolver r in dependencyTable.Resolvers)
                 {
@@ -1255,7 +1256,6 @@ quiet at the engine level.
                     {
                         AssemblyFoldersEx assemblyFoldersEx = ((AssemblyFoldersExResolver)r).AssemblyFoldersExLocations;
 
-                        MessageImportance messageImportance = MessageImportance.Low;
                         if (assemblyFoldersEx != null && _showAssemblyFoldersExLocations.TryGetValue(r.SearchPath, out messageImportance))
                         {
                             Log.LogMessageFromResources(messageImportance, "ResolveAssemblyReference.AssemblyFoldersExSearchLocations", r.SearchPath);
@@ -1347,6 +1347,10 @@ private void LogReference(Reference reference, string fusionName)
         {
             // Set an importance level to be used for secondary messages.
             MessageImportance importance = ChooseReferenceLoggingImportance(reference);
+            if (!Log.LogsMessagesOfImportance(importance))
+            {
+                return;
+            }
 
             // Log the fusion name and whether this is a primary or a dependency.
             LogPrimaryOrDependency(reference, fusionName, importance);
@@ -1413,7 +1417,8 @@ private MessageImportance ChooseReferenceLoggingImportance(Reference reference)
         /// </summary>
         private void LogInputs()
         {
-            if (Traits.Instance.EscapeHatches.LogTaskInputs || Silent)
+            MessageImportance importance = MessageImportance.Low;
+            if (Silent || Log.IsTaskInputLoggingEnabled || !Log.LogsMessagesOfImportance(importance))
             {
                 // the inputs will be logged automatically anyway, avoid duplication in the logs
                 return;
@@ -1421,7 +1426,6 @@ private void LogInputs()
 
             string indent = Strings.FourSpaces;
             string property = Strings.LogTaskPropertyFormat;
-            MessageImportance importance = MessageImportance.Low;
 
             Log.LogMessage(importance, property, "TargetFrameworkMoniker");
             Log.LogMessage(importance, indent + _targetedFrameworkMoniker);
@@ -2003,12 +2007,12 @@ private void LogConflict(Reference reference, string fusionName, StringBuilder l
         /// </summary>
         internal void ReadStateFile(FileExists fileExists)
         {
-            _cache = SystemState.DeserializeCacheByTranslator(_stateFile, Log);
+            _cache = SystemState.DeserializeCache(_stateFile, Log, typeof(SystemState)) as SystemState;
 
             // Construct the cache only if we can't find any caches.
             if (_cache == null && AssemblyInformationCachePaths != null && AssemblyInformationCachePaths.Length > 0)
             {
-                _cache = SystemState.DeserializePrecomputedCachesByTranslator(AssemblyInformationCachePaths, Log, fileExists);
+                _cache = SystemState.DeserializePrecomputedCaches(AssemblyInformationCachePaths, Log, fileExists);
             }
 
             if (_cache == null)
@@ -2024,11 +2028,11 @@ internal void WriteStateFile()
         {
             if (!String.IsNullOrEmpty(AssemblyInformationCacheOutputPath))
             {
-                _cache.SerializePrecomputedCacheByTranslator(AssemblyInformationCacheOutputPath, Log);
+                _cache.SerializePrecomputedCache(AssemblyInformationCacheOutputPath, Log);
             }
             else if (!String.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
             {
-                _cache.SerializeCacheByTranslator(_stateFile, Log);
+                _cache.SerializeCache(_stateFile, Log);
             }
         }
         #endregion
@@ -2265,7 +2269,7 @@ ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader
                     // Cache delegates.
                     getAssemblyName = _cache.CacheDelegate(getAssemblyName);
                     getAssemblyMetadata = _cache.CacheDelegate(getAssemblyMetadata);
-                    fileExists = _cache.CacheDelegate(fileExists);
+                    fileExists = _cache.CacheDelegate();
                     directoryExists = _cache.CacheDelegate(directoryExists);
                     getDirectories = _cache.CacheDelegate(getDirectories);
                     getRuntimeVersion = _cache.CacheDelegate(getRuntimeVersion);
diff --git a/src/Tasks/AssemblyInfo.cs b/src/Tasks/AssemblyInfo.cs
index 6a11208e44d..df3964f3cd5 100644
--- a/src/Tasks/AssemblyInfo.cs
+++ b/src/Tasks/AssemblyInfo.cs
@@ -17,14 +17,7 @@
 // so that we don't run into known security issues with loading libraries from unsafe locations 
 [assembly: DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
 
-// Needed for the "hub-and-spoke model to locate and retrieve localized resources": https://msdn.microsoft.com/en-us/library/21a15yht(v=vs.110).aspx
-// We want "en" to require a satellite assembly for debug builds in order to flush out localization
-// issues, but we want release builds to work without it. Also, .net core does not have resource fallbacks
-#if (DEBUG && !RUNTIME_TYPE_NETCORE)
-[assembly: NeutralResourcesLanguage("en", UltimateResourceFallbackLocation.Satellite)]
-#else
 [assembly: NeutralResourcesLanguage("en")]
-#endif
 
 [assembly: ComVisible(false)]
 
diff --git a/src/Tasks/AssemblyRegistrationCache.cs b/src/Tasks/AssemblyRegistrationCache.cs
index 63ae6fdd833..3877f422450 100644
--- a/src/Tasks/AssemblyRegistrationCache.cs
+++ b/src/Tasks/AssemblyRegistrationCache.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Tasks
@@ -10,18 +11,19 @@ namespace Microsoft.Build.Tasks
     /// <remarks>
     /// This class is a caching mechanism for the Register/UnregisterAssembly task to keep track of registered assemblies to clean up
     /// </remarks>
-    [Serializable()]
-    internal sealed class AssemblyRegistrationCache : StateFileBase
+    /// Serializable should be included in all state files. It permits BinaryFormatter-based calls, including from GenerateResource, which we cannot move off BinaryFormatter.
+    [Serializable]
+    internal sealed class AssemblyRegistrationCache : StateFileBase, ITranslatable
     {
         /// <summary>
         /// The list of registered assembly files.
         /// </summary>
-        private readonly List<string> _assemblies = new List<string>();
+        internal List<string> _assemblies = new List<string>();
 
         /// <summary>
         /// The list of registered type library files.
         /// </summary>
-        private readonly List<string> _typeLibraries = new List<string>();
+        internal List<string> _typeLibraries = new List<string>();
 
         /// <summary>
         /// The number of entries in the state file
@@ -53,5 +55,19 @@ internal void GetEntry(int index, out string assemblyPath, out string typeLibrar
             assemblyPath = _assemblies[index];
             typeLibraryPath = _typeLibraries[index];
         }
+
+        public AssemblyRegistrationCache(ITranslator translator)
+        {
+            Translate(translator);
+        }
+
+        public AssemblyRegistrationCache() { }
+
+        public override void Translate(ITranslator translator)
+        {
+            ErrorUtilities.VerifyThrowArgumentNull(translator, nameof(translator));
+            translator.Translate(ref _assemblies);
+            translator.Translate(ref _typeLibraries);
+        }
     }
 }
diff --git a/src/Tasks/CSharpParserUtilities.cs b/src/Tasks/CSharpParserUtilities.cs
index b0f343dd06f..facac7734c6 100644
--- a/src/Tasks/CSharpParserUtilities.cs
+++ b/src/Tasks/CSharpParserUtilities.cs
@@ -79,7 +79,16 @@ private static ExtractedClassName Extract(CSharpTokenizer tokens)
                 {
                     if (state.ResolvingNamespace)
                     {
-                        if (t.InnerText == ".")
+                        // If we see a ';' while resolving a namespace, we assume it's a file-scoped namespace
+                        // namespace foo.bar; <- At this point in code, we're at the semicolon.
+                        // class test { ... }
+                        // https://github.com/dotnet/csharplang/blob/088f20b6f9b714a7b68f6d792d54def0f3b3057e/proposals/csharp-10.0/file-scoped-namespaces.md
+                        if (t.InnerText == ";")
+                        {
+                            state.PushNamespacePart(state.Namespace);
+                            state.Reset();
+                        }
+                        else if (t.InnerText == ".")
                         {
                             state.Namespace += ".";
                         }
diff --git a/src/Tasks/CombineTargetFrameworkInfoProperties.cs b/src/Tasks/CombineTargetFrameworkInfoProperties.cs
index 612f27d3b88..bfd7caae236 100644
--- a/src/Tasks/CombineTargetFrameworkInfoProperties.cs
+++ b/src/Tasks/CombineTargetFrameworkInfoProperties.cs
@@ -2,11 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using Microsoft.Build.Framework;
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
+using Microsoft.Build.Shared;
 using System.Xml.Linq;
 
 namespace Microsoft.Build.Tasks
@@ -26,6 +22,11 @@ public class CombineTargetFrameworkInfoProperties : TaskExtension
         /// </summary>
         public ITaskItem[] PropertiesAndValues { get; set; }
 
+        /// <summary>
+        /// Opts into or out of using the new schema with Property Name=... rather than just specifying the RootElementName.
+        /// </summary>
+        public bool UseAttributeForTargetFrameworkInfoPropertyNames { get; set; } = false;
+
         /// <summary>
         /// The generated XML representation of the properties and values.
         /// </summary>
@@ -36,9 +37,11 @@ public override bool Execute()
         {
             if (PropertiesAndValues != null)
             {
-                XElement root = new XElement(RootElementName);
+                XElement root = UseAttributeForTargetFrameworkInfoPropertyNames ?
+                    new("TargetFramework", new XAttribute("Name", EscapingUtilities.Escape(RootElementName))) :
+                    new(RootElementName);
 
-                foreach (var item in PropertiesAndValues)
+                foreach (ITaskItem item in PropertiesAndValues)
                 {
                     root.Add(new XElement(item.ItemSpec, item.GetMetadata("Value")));
                 }
diff --git a/src/Tasks/CombineXmlElements.cs b/src/Tasks/CombineXmlElements.cs
index c42aed7f1bd..214207b1b6e 100644
--- a/src/Tasks/CombineXmlElements.cs
+++ b/src/Tasks/CombineXmlElements.cs
@@ -2,11 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using Microsoft.Build.Framework;
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using System.Xml.Linq;
 
 namespace Microsoft.Build.Tasks
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index e22b7cc2372..6c91abeaab3 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -12,6 +12,7 @@
 using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Eventing;
 
 namespace Microsoft.Build.Tasks
 {
@@ -437,6 +438,7 @@ private bool CopySingleThreaded(
             {
                 bool copyComplete = false;
                 string destPath = DestinationFiles[i].ItemSpec;
+                MSBuildEventSource.Log.CopyUpToDateStart(destPath);
                 if (filesActuallyCopied.TryGetValue(destPath, out string originalSource))
                 {
                     if (String.Equals(originalSource, SourceFiles[i].ItemSpec, StringComparison.OrdinalIgnoreCase))
@@ -458,6 +460,10 @@ private bool CopySingleThreaded(
                         success = false;
                     }
                 }
+                else
+                {
+                    MSBuildEventSource.Log.CopyUpToDateStop(destPath, true);
+                }
 
                 if (copyComplete)
                 {
@@ -540,6 +546,7 @@ private bool CopyParallel(
                         string sourcePath = sourceItem.ItemSpec;
 
                         // Check if we just copied from this location to the destination, don't copy again.
+                        MSBuildEventSource.Log.CopyUpToDateStart(destItem.ItemSpec);
                         bool copyComplete = partitionIndex > 0 &&
                                             String.Equals(
                                                 sourcePath,
@@ -561,6 +568,10 @@ private bool CopyParallel(
                                 success = false;
                             }
                         }
+                        else
+                        {
+                            MSBuildEventSource.Log.CopyUpToDateStop(destItem.ItemSpec, true);
+                        }
 
                         if (copyComplete)
                         {
@@ -716,6 +727,7 @@ private bool DoCopyIfNecessary(FileState sourceFileState, FileState destinationF
                         "SkipUnchangedFiles",
                         "true"
                     );
+                    MSBuildEventSource.Log.CopyUpToDateStop(destinationFileState.Name, true);
                 }
                 // We only do the cheap check for identicalness here, we try the more expensive check
                 // of comparing the fullpaths of source and destination to see if they are identical,
@@ -725,8 +737,13 @@ private bool DoCopyIfNecessary(FileState sourceFileState, FileState destinationF
                              destinationFileState.Name,
                              StringComparison.OrdinalIgnoreCase))
                 {
+                    MSBuildEventSource.Log.CopyUpToDateStop(destinationFileState.Name, false);
                     success = DoCopyWithRetries(sourceFileState, destinationFileState, copyFile);
                 }
+                else
+                {
+                    MSBuildEventSource.Log.CopyUpToDateStop(destinationFileState.Name, true);
+                }
             }
             catch (OperationCanceledException)
             {
diff --git a/src/Tasks/CreateItem.cs b/src/Tasks/CreateItem.cs
index cb7bd833620..7b4bfa75764 100644
--- a/src/Tasks/CreateItem.cs
+++ b/src/Tasks/CreateItem.cs
@@ -31,14 +31,16 @@ public class CreateItem : TaskExtension
         /// A typical input: "metadataname1=metadatavalue1", "metadataname2=metadatavalue2", ...
         /// </summary>
         /// <remarks>
-        /// The fact that this is a string[] makes the following illegal:
-        ///     <CreateItem
-        ///         AdditionalMetadata="TargetPath=@(OutputPathItem)" />
-        /// The engine fails on this because it doesn't like item lists being concatenated with string
-        /// constants when the data is being passed into an array parameter.  So the workaround is to 
-        /// write this in the project file:
-        ///     <CreateItem
-        ///         AdditionalMetadata="@(OutputPathItem->'TargetPath=%(Identity)')" />
+        ///   <format type="text/markdown"><![CDATA[
+        ///     ## Remarks
+        ///     The fact that this is a `string[]` makes the following illegal:
+        ///         `<CreateItem AdditionalMetadata="TargetPath=@(OutputPathItem)" />`
+        ///     The engine fails on this because it doesn't like item lists being concatenated with string
+        ///     constants when the data is being passed into an array parameter.  So the workaround is to 
+        ///     write this in the project file:
+        ///         `<CreateItem AdditionalMetadata="@(OutputPathItem-&gt;'TargetPath=%(Identity)')" />`
+        ///     ]]>
+        ///   </format>
         /// </remarks>
         public string[] AdditionalMetadata { get; set; }
 
diff --git a/src/Tasks/CreateProperty.cs b/src/Tasks/CreateProperty.cs
index 2d97dc4b6d0..9631f5cb80e 100644
--- a/src/Tasks/CreateProperty.cs
+++ b/src/Tasks/CreateProperty.cs
@@ -22,8 +22,8 @@ public class CreateProperty : TaskExtension
         ///             Output TaskParameter="Value" PropertyName="MyTargetsToBuild"
         ///         /CreateProperty
         /// 
-        /// We need to respect the semicolon that he put in the value, and need to treat
-        /// this exactly as if he had done:
+        /// We need to respect the semicolon that they put in the value, and need to treat
+        /// this exactly as if they had done:
         /// 
         ///         PropertyGroup
         ///             MyTargetsToBuild="Clean;Build"
diff --git a/src/Tasks/Dependencies.cs b/src/Tasks/Dependencies.cs
deleted file mode 100644
index 80761d7464f..00000000000
--- a/src/Tasks/Dependencies.cs
+++ /dev/null
@@ -1,56 +0,0 @@
-Ôªø// Copyright (c) Microsoft. All rights reserved.
-// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-
-using System;
-using System.Collections;
-
-namespace Microsoft.Build.Tasks
-{
-    /// <summary>
-    /// Represents a cache of inputs to a compilation-style task.
-    /// </summary>
-    /// <remarks>On-disk serialization format, don't change field names or types or use readonly.</remarks>
-    [Serializable]
-    internal class Dependencies
-    {
-        /// <summary>
-        /// Hashtable of other dependency files.
-        /// Key is filename and value is DependencyFile.
-        /// </summary>
-        private Hashtable dependencies = new Hashtable();
-
-        /// <summary>
-        /// Look up a dependency file. Return null if its not there.
-        /// </summary>
-        /// <param name="filename"></param>
-        /// <returns></returns>
-        internal DependencyFile GetDependencyFile(string filename)
-        {
-            return (DependencyFile)dependencies[filename];
-        }
-
-        /// <summary>
-        /// Add a new dependency file.
-        /// </summary>
-        internal void AddDependencyFile(string filename, DependencyFile file)
-        {
-            dependencies[filename] = file;
-        }
-
-        /// <summary>
-        /// Remove new dependency file.
-        /// </summary>
-        internal void RemoveDependencyFile(string filename)
-        {
-            dependencies.Remove(filename);
-        }
-
-        /// <summary>
-        /// Remove all entries from the dependency table.
-        /// </summary>
-        internal void Clear()
-        {
-            dependencies.Clear();
-        }
-    }
-}
diff --git a/src/Tasks/DependencyFile.cs b/src/Tasks/DependencyFile.cs
index f8306894c3b..d517f39a296 100644
--- a/src/Tasks/DependencyFile.cs
+++ b/src/Tasks/DependencyFile.cs
@@ -12,20 +12,19 @@ namespace Microsoft.Build.Tasks
     /// <remarks>
     /// Represents a single input to a compilation-style task.
     /// Keeps track of timestamp for later comparison.
-    /// 
-    /// On-disk serialization format, don't change field names or types or use readonly.
     /// </remarks>
+    /// Serializable should be included in all state files. It permits BinaryFormatter-based calls, including from GenerateResource, which we cannot move off BinaryFormatter.
     [Serializable]
     internal class DependencyFile
     {
         // Filename
-        private string filename;
+        internal string filename;
 
         // Date and time the file was last modified           
-        private DateTime lastModified;
+        internal DateTime lastModified;
 
         // Whether the file exists or not.
-        private bool exists = false;
+        internal bool exists = false;
 
         /// <summary>
         /// The name of the file.
@@ -70,6 +69,10 @@ internal DependencyFile(string filename)
             }
         }
 
+        internal DependencyFile()
+        {
+        }
+
         /// <summary>
         /// Checks whether the file has changed since the last time a timestamp was recorded.
         /// </summary>
diff --git a/src/Tasks/FileIO/WriteLinesToFile.cs b/src/Tasks/FileIO/WriteLinesToFile.cs
index c4fdfbb1a50..776e48bbddb 100644
--- a/src/Tasks/FileIO/WriteLinesToFile.cs
+++ b/src/Tasks/FileIO/WriteLinesToFile.cs
@@ -1,6 +1,7 @@
 Ôªø// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using Microsoft.Build.Eventing;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using System;
@@ -87,27 +88,33 @@ public override bool Execute()
                     {
                         Directory.CreateDirectory(directoryPath);
                         string contentsAsString = buffer.ToString();
-                        try
+
+                        // When WriteOnlyWhenDifferent is set, read the file and if they're the same return.
+                        if (WriteOnlyWhenDifferent)
                         {
-                            // When WriteOnlyWhenDifferent is set, read the file and if they're the same return.
-                            if (WriteOnlyWhenDifferent && FileUtilities.FileExistsNoThrow(File.ItemSpec))
+                            MSBuildEventSource.Log.WriteLinesToFileUpToDateStart();
+                            try
                             {
-                                string existingContents = System.IO.File.ReadAllText(File.ItemSpec);
-                                if (existingContents.Length == buffer.Length)
+                                if (FileUtilities.FileExistsNoThrow(File.ItemSpec))
                                 {
-                                    if (existingContents.Equals(contentsAsString))
+                                    string existingContents = System.IO.File.ReadAllText(File.ItemSpec);
+                                    if (existingContents.Length == buffer.Length)
                                     {
-                                        Log.LogMessageFromResources(MessageImportance.Low, "WriteLinesToFile.SkippingUnchangedFile", File.ItemSpec);
-                                        return true;
+                                        if (existingContents.Equals(contentsAsString))
+                                        {
+                                            Log.LogMessageFromResources(MessageImportance.Low, "WriteLinesToFile.SkippingUnchangedFile", File.ItemSpec);
+                                            MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, true);
+                                            return true;
+                                        }
                                     }
                                 }
                             }
+                            catch (IOException)
+                            {
+                                Log.LogMessageFromResources(MessageImportance.Low, "WriteLinesToFile.ErrorReadingFile", File.ItemSpec);
+                            }
+                            MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, false);
                         }
-                        catch (IOException)
-                        {
-                            Log.LogMessageFromResources(MessageImportance.Low, "WriteLinesToFile.ErrorReadingFile", File.ItemSpec);
-                        }
-
 
                         System.IO.File.WriteAllText(File.ItemSpec, contentsAsString, encoding);
                     }
diff --git a/src/Tasks/FileState.cs b/src/Tasks/FileState.cs
index 6545558ff30..af2e2f29897 100644
--- a/src/Tasks/FileState.cs
+++ b/src/Tasks/FileState.cs
@@ -93,7 +93,7 @@ public FileDirInfo(string filename)
                     // there is no disk in drive A:, please insert one.  We don't want that. 
                     // SetErrorMode will let us disable this, but we should set the error
                     // mode back, since this may have wide-ranging effects.
-                    oldMode = NativeMethodsShared.SetErrorMode(1 /* ErrorModes.SEM_FAILCRITICALERRORS */);
+                    NativeMethodsShared.SetThreadErrorMode(1 /* ErrorModes.SEM_FAILCRITICALERRORS */, out oldMode);
                 }
 
                 try
@@ -174,7 +174,7 @@ public FileDirInfo(string filename)
                     // Reset the error mode on Windows
                     if (NativeMethodsShared.IsWindows)
                     {
-                        NativeMethodsShared.SetErrorMode(oldMode);
+                        NativeMethodsShared.SetThreadErrorMode(oldMode, out _);
                     }
                 }
             }
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index bc15a0328a1..26967ca64e7 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -3151,10 +3151,13 @@ internal void ReadAssemblyResources(String name, String outFileOrDir)
                 // We can't easily filter those.  We can simply skip them.
                 return;
             }
-            catch (Exception e)
+            catch (ArgumentException e) when (e.InnerException is BadImageFormatException)
+            {
+                // BadImageFormatExceptions can be wrapped in ArgumentExceptions, so catch those, too. See https://referencesource.microsoft.com/#mscorlib/system/reflection/module.cs,857
+                return;
+            }
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                    throw;
                 _logger.LogErrorWithCodeFromResources("GenerateResource.CannotLoadAssemblyLoadFromFailed", name, e);
             }
 
diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
new file mode 100644
index 00000000000..c86c88199d7
--- /dev/null
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -0,0 +1,154 @@
+Ôªø// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+#nullable enable
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
+using System;
+using System.Collections.Generic;
+
+namespace Microsoft.Build.Tasks
+{
+    /// <summary>
+    /// Performs SetPlatform negotiation for all project references when opted
+    /// in via the EnableDynamicPlatformResolution property.
+    /// 
+    /// See ProjectReference-Protocol.md for details.
+    /// </summary>
+    public class GetCompatiblePlatform : TaskExtension
+    {
+        /// <summary>
+        /// All ProjectReference items.
+        /// </summary>
+        [Required]
+        public ITaskItem[] AnnotatedProjects { get; set; }
+
+        /// <summary>
+        /// The platform the current project is building as. 
+        /// </summary>
+        [Required]
+        public string CurrentProjectPlatform { get; set; }
+
+        /// <summary>
+        /// Optional parameter that defines mappings from current project platforms
+        /// to what the ProjectReference should build as.
+        /// Win32=x86, for example.
+        /// </summary>
+        public string PlatformLookupTable { get; set; }
+
+        /// <summary>
+        /// The resulting items with NearestPlatform metadata set.
+        /// </summary>
+        [Output]
+        public ITaskItem[]? AssignedProjectsWithPlatform { get; set; }
+
+        public GetCompatiblePlatform()
+        {
+            AnnotatedProjects = new ITaskItem[0];
+            CurrentProjectPlatform = string.Empty;
+            PlatformLookupTable = string.Empty;
+        }
+
+        public override bool Execute()
+        {
+            Dictionary<string, string>? currentProjectLookupTable = ExtractLookupTable(PlatformLookupTable);
+
+            AssignedProjectsWithPlatform = new ITaskItem[AnnotatedProjects.Length];
+            for (int i = 0; i < AnnotatedProjects.Length; i++)
+            {
+                AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);
+
+                string projectReferencePlatformMetadata = AssignedProjectsWithPlatform[i].GetMetadata("Platforms");
+
+                if (string.IsNullOrEmpty(projectReferencePlatformMetadata))
+                {
+                    Log.LogWarningWithCodeFromResources("GetCompatiblePlatform.NoPlatformsListed", AssignedProjectsWithPlatform[i].ItemSpec);
+                    continue;
+                }
+
+                string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata("PlatformLookupTable");
+                // Pull platformlookuptable metadata from the referenced project. This allows custom
+                // mappings on a per-ProjectReference basis.
+                Dictionary<string, string>? projectReferenceLookupTable = ExtractLookupTable(projectReferenceLookupTableMetadata);
+
+                HashSet<string> projectReferencePlatforms = new HashSet<string>();
+                foreach (string s in projectReferencePlatformMetadata.Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
+                {
+                    projectReferencePlatforms.Add(s);
+                }
+
+                string buildProjectReferenceAs = string.Empty;
+
+                // Prefer matching platforms
+                if (projectReferencePlatforms.Contains(CurrentProjectPlatform))
+                {
+                    buildProjectReferenceAs = CurrentProjectPlatform;
+                    Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.SamePlatform");
+                }
+                // Prioritize PlatformLookupTable **metadata** attached to the ProjectReference item
+                // before the current project's table. We do this to allow per-ProjectReference fine tuning.
+                else if (projectReferenceLookupTable != null &&
+                        projectReferenceLookupTable.ContainsKey(CurrentProjectPlatform) &&
+                        projectReferencePlatforms.Contains(projectReferenceLookupTable[CurrentProjectPlatform]))
+                {
+                    buildProjectReferenceAs = projectReferenceLookupTable[CurrentProjectPlatform];
+                    Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.FoundMappingInTable", CurrentProjectPlatform, buildProjectReferenceAs, projectReferenceLookupTableMetadata);
+                }
+                // Current project's translation table follows
+                else if (currentProjectLookupTable != null &&
+                        currentProjectLookupTable.ContainsKey(CurrentProjectPlatform) &&
+                        projectReferencePlatforms.Contains(currentProjectLookupTable[CurrentProjectPlatform]))
+                {
+                    buildProjectReferenceAs = currentProjectLookupTable[CurrentProjectPlatform];
+                    Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.FoundMappingInTable", CurrentProjectPlatform, buildProjectReferenceAs, PlatformLookupTable);
+                }
+                // AnyCPU if possible
+                else if (projectReferencePlatforms.Contains("AnyCPU"))
+                {
+                    buildProjectReferenceAs = "AnyCPU";
+                    Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.AnyCPUDefault");
+                }
+                else
+                {
+                    // Keep NearestPlatform empty, log a warning. Common.CurrentVersion.targets will undefine 
+                    // Platform/PlatformTarget when this is the case.
+                    Log.LogWarningWithCodeFromResources("GetCompatiblePlatform.NoCompatiblePlatformFound", AssignedProjectsWithPlatform[i].ItemSpec);
+                }
+
+                AssignedProjectsWithPlatform[i].SetMetadata("NearestPlatform", buildProjectReferenceAs);
+                Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.DisplayChosenPlatform", AssignedProjectsWithPlatform[i].ItemSpec, buildProjectReferenceAs);
+            }
+
+            return !Log.HasLoggedErrors;
+        }
+
+        private Dictionary<string, string>? ExtractLookupTable(string stringTable)
+        {
+            if (string.IsNullOrEmpty(stringTable))
+            {
+                return null;
+            }
+
+            Dictionary<string, string> table = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+
+            foreach (string s in stringTable.Trim().Split(MSBuildConstants.SemicolonChar, StringSplitOptions.RemoveEmptyEntries))
+            {
+                string[] keyVal = s.Trim().Split(MSBuildConstants.EqualsChar);
+
+                // Invalid table, don't use it.
+                if (keyVal.Length != 2 || string.IsNullOrEmpty(keyVal[0]) || string.IsNullOrEmpty(keyVal[1]))
+                {
+                    Log.LogWarningWithCodeFromResources("GetCompatiblePlatform.InvalidLookupTableFormat", stringTable);
+                    return null;
+                }
+
+                table[keyVal[0]] = keyVal[1];
+            }
+
+            Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.LookupTableParsed", stringTable);
+
+            return table;
+        }
+    }
+}
diff --git a/src/Tasks/GetSDKReferenceFiles.cs b/src/Tasks/GetSDKReferenceFiles.cs
index 43b7d8ffcd9..dfc8d0050ac 100644
--- a/src/Tasks/GetSDKReferenceFiles.cs
+++ b/src/Tasks/GetSDKReferenceFiles.cs
@@ -9,9 +9,9 @@
 using System.IO;
 using System.Linq;
 using System.Reflection;
-using System.Runtime.Serialization.Formatters.Binary;
 using System.Threading;
 using System.Threading.Tasks;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
@@ -877,7 +877,7 @@ public bool Equals(ResolvedRedistFile other)
         /// <summary>
         /// Methods which are used to save and read the cache files per sdk from and to disk.
         /// </summary>
-        private class SDKFilesCache
+        internal class SDKFilesCache
         {
             /// <summary>
             ///  Thread-safe queue which contains exceptions throws during cache file reading and writing.
@@ -927,16 +927,15 @@ internal SDKInfo LoadAssemblyListFromCacheFile(string sdkIdentity, string sdkRoo
                 {
                     if (!string.IsNullOrEmpty(cacheFile))
                     {
-                        return SDKInfo.Deserialize(cacheFile);
+                        using FileStream fs = new FileStream(cacheFile, FileMode.Open);
+                        using var translator = BinaryTranslator.GetReadTranslator(fs, buffer: null);
+                        SDKInfo sdkInfo = new SDKInfo();
+                        sdkInfo.Translate(translator);
+                        return sdkInfo;
                     }
                 }
-                catch (Exception e)
+                catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                 {
-                    if (ExceptionHandling.IsCriticalException(e))
-                    {
-                        throw;
-                    }
-
                     // Queue up for later logging, does not matter if the file is deleted or not
                     _exceptionMessages.Enqueue(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("GetSDKReferenceFiles.ProblemReadingCacheFile", cacheFile, e.ToString()));
                 }
@@ -965,31 +964,21 @@ internal void SaveAssemblyListToCacheFile(object data)
                         {
                             File.Delete(existingCacheFile);
                         }
-                        catch (Exception e)
+                        catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                         {
-                            if (ExceptionHandling.IsCriticalException(e))
-                            {
-                                throw;
-                            }
-
                             // Queue up for later logging, does not matter if the file is deleted or not
                             _exceptionMessages.Enqueue(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("GetSDKReferenceFiles.ProblemDeletingCacheFile", existingCacheFile, e.Message));
                         }
                     }
 
-                    var formatter = new BinaryFormatter();
                     using (var fs = new FileStream(referencesCacheFile, FileMode.Create))
                     {
-                        formatter.Serialize(fs, cacheFileInfo);
+                        var translator = BinaryTranslator.GetWriteTranslator(fs);
+                        cacheFileInfo.Translate(translator);
                     }
                 }
-                catch (Exception e)
+                catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
                 {
-                    if (ExceptionHandling.IsCriticalException(e))
-                    {
-                        throw;
-                    }
-
                     // Queue up for later logging, does not matter if the cache got written
                     _exceptionMessages.Enqueue(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("GetSDKReferenceFiles.ProblemWritingCacheFile", referencesCacheFile, e.Message));
                 }
@@ -1205,11 +1194,8 @@ private static IEnumerable<string> GetAllReferenceDirectories(string sdkRoot)
         /// </summary>
         /// <remarks>This is a serialization format. Do not change member naming.</remarks>
         [Serializable]
-        private class SdkReferenceInfo
+        internal class SdkReferenceInfo
         {
-            /// <summary>
-            /// Constructor
-            /// </summary>
             public SdkReferenceInfo(string fusionName, string imageRuntime, bool isWinMD, bool isManagedWinmd)
             {
                 FusionName = fusionName;
@@ -1219,25 +1205,11 @@ public SdkReferenceInfo(string fusionName, string imageRuntime, bool isWinMD, bo
             }
 
             #region Properties
-            /// <summary>
-            /// The fusionName
-            /// </summary>
-            public string FusionName { get; }
 
-            /// <summary>
-            /// Is the file a winmd or not
-            /// </summary>
-            public bool IsWinMD { get; }
-
-            /// <summary>
-            /// Is the file a managed winmd or not
-            /// </summary>
-            public bool IsManagedWinmd { get; }
-
-            /// <summary>
-            /// What is the imageruntime information on it.
-            /// </summary>
-            public string ImageRuntime { get; }
+            public string FusionName { get; internal set; }
+            public bool IsWinMD { get; internal set; }
+            public bool IsManagedWinmd { get; internal set; }
+            public string ImageRuntime { get; internal set; }
 
             #endregion
         }
@@ -1245,64 +1217,75 @@ public SdkReferenceInfo(string fusionName, string imageRuntime, bool isWinMD, bo
         /// <summary>
         /// Structure that contains the on disk representation of the SDK in memory.
         /// </summary>
-        /// <remarks>This is a serialization format. Do not change member naming.</remarks>
-        [Serializable]
-        private class SDKInfo
+        internal class SDKInfo : ITranslatable
         {
-            // Current version for serialization. This should be changed when breaking changes
-            // are made to this class.
-            private const byte CurrentSerializationVersion = 1;
+            private IDictionary<string, SdkReferenceInfo> _pathToReferenceMetadata;
+            private IDictionary<string, List<string>> _directoryToFileList;
+            private int _hash;
 
-            // Version this instance is serialized with.
-            private byte _serializedVersion = CurrentSerializationVersion;
+            internal SDKInfo()
+            {
+                _pathToReferenceMetadata = new Dictionary<string, SdkReferenceInfo>(StringComparer.OrdinalIgnoreCase);
+                _directoryToFileList = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase);
+                _hash = 0;
+            }
 
-            /// <summary>
-            /// Constructor
-            /// </summary>
-            public SDKInfo(ConcurrentDictionary<string, SdkReferenceInfo> pathToReferenceMetadata, ConcurrentDictionary<string, List<string>> directoryToFileList, int cacheHash)
+            public SDKInfo(ITranslator translator) : this()
+            {
+                Translate(translator);
+            }
+
+            public SDKInfo(IDictionary<string, SdkReferenceInfo> pathToReferenceMetadata, IDictionary<string, List<string>> directoryToFileList, int cacheHash)
             {
-                PathToReferenceMetadata = pathToReferenceMetadata;
-                DirectoryToFileList = directoryToFileList;
-                Hash = cacheHash;
+                this._pathToReferenceMetadata = pathToReferenceMetadata;
+                this._directoryToFileList = directoryToFileList;
+                this._hash = cacheHash;
             }
 
             /// <summary>
             /// A dictionary which maps a file path to a structure that contain some metadata information about that file.
             /// </summary>
-            public ConcurrentDictionary<string, SdkReferenceInfo> PathToReferenceMetadata { get; }
+            public IDictionary<string, SdkReferenceInfo> PathToReferenceMetadata { get { return _pathToReferenceMetadata; } }
 
-            /// <summary>
-            /// Dictionary which maps a directory to a list of file names within that directory. This is used to shortcut hitting the disk for the list of files inside of it.
-            /// </summary>
-            public ConcurrentDictionary<string, List<string>> DirectoryToFileList { get; }
+            public IDictionary<string, List<string>> DirectoryToFileList { get { return _directoryToFileList; } }
 
             /// <summary>
             /// Hashset
             /// </summary>
-            public int Hash { get; }
+            public int Hash { get { return _hash; } }
 
-            public static SDKInfo Deserialize(string cacheFile)
+            public void Translate(ITranslator translator)
             {
-                using (var fs = new FileStream(cacheFile, FileMode.Open))
+                translator.TranslateDictionary(ref _pathToReferenceMetadata, (ITranslator t, ref string s) => t.Translate(ref s), (ITranslator t, ref SdkReferenceInfo info) =>
                 {
-                    var formatter = new BinaryFormatter();
-                    var info = (SDKInfo)formatter.Deserialize(fs);
-
-                    // If the serialization versions don't match, don't use the cache
-                    if (info != null && info._serializedVersion != CurrentSerializationVersion)
-                    {
-                        return null;
-                    }
+                    info ??= new SdkReferenceInfo(null, null, false, false);
+                    string fusionName = info.FusionName;
+                    string imageRuntime = info.ImageRuntime;
+                    bool isManagedWinmd = info.IsManagedWinmd;
+                    bool isWinmd = info.IsWinMD;
+                    t.Translate(ref fusionName);
+                    t.Translate(ref imageRuntime);
+                    t.Translate(ref isManagedWinmd);
+                    t.Translate(ref isWinmd);
+                    info.FusionName = fusionName;
+                    info.ImageRuntime = imageRuntime;
+                    info.IsManagedWinmd = isManagedWinmd;
+                    info.IsWinMD = isWinmd;
+                }, count => new Dictionary<string, SdkReferenceInfo>(count, StringComparer.OrdinalIgnoreCase));
+
+                translator.TranslateDictionary(ref _directoryToFileList, (ITranslator t, ref string s) => t.Translate(ref s), (ITranslator t, ref List<string> fileList) =>
+                {
+                    t.Translate(ref fileList, (ITranslator t, ref string str) => { t.Translate(ref str); });
+                }, count => new Dictionary<string, List<string>>(count, StringComparer.OrdinalIgnoreCase));
 
-                    return info;
-                }
+                translator.Translate(ref _hash);
             }
         }
 
         /// <summary>
         /// This class represents the context information used by the background cache serialization thread.
         /// </summary>
-        private class SaveContext
+        internal class SaveContext
         {
             /// <summary>
             /// Constructor
diff --git a/src/Tasks/Hash.cs b/src/Tasks/Hash.cs
index c822fa90f90..81699764e51 100644
--- a/src/Tasks/Hash.cs
+++ b/src/Tasks/Hash.cs
@@ -11,11 +11,11 @@ namespace Microsoft.Build.Tasks
 {
     /// <summary>
     /// Generates a hash of a given ItemGroup items. Metadata is not considered in the hash.
+    /// </summary>
     /// <remarks>
     /// Currently uses SHA1. Implementation subject to change between MSBuild versions. Not
     /// intended as a cryptographic security measure, only uniqueness between build executions.
     /// </remarks>
-    /// </summary>
     public class Hash : TaskExtension
     {
         private const char ItemSeparatorCharacter = '\u2028';
diff --git a/src/Tasks/MSBuild.cs b/src/Tasks/MSBuild.cs
index 0d5fe24e603..6bbc68964b3 100644
--- a/src/Tasks/MSBuild.cs
+++ b/src/Tasks/MSBuild.cs
@@ -55,14 +55,16 @@ private enum SkipNonexistentProjectsBehavior
         /// A typical input: "propname1=propvalue1", "propname2=propvalue2", "propname3=propvalue3".
         /// </summary>
         /// <remarks>
-        /// The fact that this is a string[] makes the following illegal:
-        ///     <MSBuild
-        ///         Properties="TargetPath=@(OutputPathItem)" />
-        /// The engine fails on this because it doesn't like item lists being concatenated with string
-        /// constants when the data is being passed into an array parameter.  So the workaround is to 
-        /// write this in the project file:
-        ///     <MSBuild
-        ///         Properties="@(OutputPathItem->'TargetPath=%(Identity)')" />
+        ///   <format type="text/markdown"><![CDATA[
+        ///     ## Remarks
+        ///     The fact that this is a `string[]` makes the following illegal:
+        ///         `<MSBuild Properties="TargetPath=@(OutputPathItem)" />`
+        ///     The engine fails on this because it doesn't like item lists being concatenated with string
+        ///     constants when the data is being passed into an array parameter.  So the workaround is to 
+        ///     write this in the project file:
+        ///         `<MSBuild Properties="@(OutputPathItem-&gt;'TargetPath=%(Identity)')" />`
+        ///     ]]>
+        ///   </format>
         /// </remarks>
         public string[] Properties { get; set; }
 
diff --git a/src/Tasks/ManifestUtil/Resources/xlf/Strings.ManifestUtilities.en.xlf b/src/Tasks/ManifestUtil/Resources/xlf/Strings.ManifestUtilities.en.xlf
deleted file mode 100644
index 5949f78fc3a..00000000000
--- a/src/Tasks/ManifestUtil/Resources/xlf/Strings.ManifestUtilities.en.xlf
+++ /dev/null
@@ -1,99 +0,0 @@
-Ôªø<?xml version="1.0" encoding="utf-8"?>
-<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
-  <file datatype="xml" source-language="en" target-language="en" original="../Strings.ManifestUtilities.resx">
-    <body>
-      <trans-unit id="ComImporter.LocalServerNotSupported">
-        <source>Out of process servers are not supported</source>
-        <target state="new">Out of process servers are not supported</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ComImporter.MissingValue">
-        <source>Registry key '{0}' is missing value '{1}'.</source>
-        <target state="new">Registry key '{0}' is missing value '{1}'.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ComImporter.NoRegisteredClasses">
-        <source>No registered classes were detected for this component.</source>
-        <target state="new">No registered classes were detected for this component.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ComImporter.ProtectedFile">
-        <source>Components under system file protection should not be isolated.</source>
-        <target state="new">Components under system file protection should not be isolated.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ComImporter.TypeLibraryLoadFailure">
-        <source>Could not load type library.</source>
-        <target state="new">Could not load type library.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ComImporter.SubKeyNotImported">
-        <source>Registry key '{0}' was not imported.</source>
-        <target state="new">Registry key '{0}' was not imported.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ComImporter.ValueNotImported">
-        <source>Registry value '{0}' was not imported.</source>
-        <target state="new">Registry value '{0}' was not imported.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SecurityUtil.SignTargetNotFound">
-        <source>The file to be signed {0} could not be found.</source>
-        <target state="new">The file to be signed {0} could not be found.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SecurityUtil.SigntoolFail">
-        <source>Failed to sign {0}. {1}</source>
-        <target state="new">Failed to sign {0}. {1}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SecurityUtil.SigntoolWarning">
-        <source>Warning while signing {0}. {1}</source>
-        <target state="new">Warning while signing {0}. {1}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SecurityUtil.SigntoolNotFound">
-        <source>SignTool.exe was not found at path {0}.</source>
-        <target state="new">SignTool.exe was not found at path {0}.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SecurityUtil.TimestampUrlNotFound">
-        <source>Timestamp URL server name or address could not be resolved.</source>
-        <target state="new">Timestamp URL server name or address could not be resolved.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SecurityUtil.OnlyRSACertsAreAllowed">
-        <source>Only certificates using RSA encryption are valid for signing ClickOnce manifests.</source>
-        <target state="new">Only certificates using RSA encryption are valid for signing ClickOnce manifests.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TrustInfo.RequestedExecutionLevelComment">
-        <source>
-          UAC Manifest Options
-          If you want to change the Windows User Account Control level replace the
-          requestedExecutionLevel node with one of the following.
-
-        &lt;requestedExecutionLevel  level="asInvoker" uiAccess="false" /&gt;
-        &lt;requestedExecutionLevel  level="requireAdministrator" uiAccess="false" /&gt;
-        &lt;requestedExecutionLevel  level="highestAvailable" uiAccess="false" /&gt;
-
-         If you want to utilize File and Registry Virtualization for backward
-         compatibility then delete the requestedExecutionLevel node.
-    </source>
-        <target state="new">
-          UAC Manifest Options
-          If you want to change the Windows User Account Control level replace the
-          requestedExecutionLevel node with one of the following.
-
-        &lt;requestedExecutionLevel  level="asInvoker" uiAccess="false" /&gt;
-        &lt;requestedExecutionLevel  level="requireAdministrator" uiAccess="false" /&gt;
-        &lt;requestedExecutionLevel  level="highestAvailable" uiAccess="false" /&gt;
-
-         If you want to utilize File and Registry Virtualization for backward
-         compatibility then delete the requestedExecutionLevel node.
-    </target>
-        <note />
-      </trans-unit>
-    </body>
-  </file>
-</xliff>
diff --git a/src/Tasks/ManifestUtil/SecurityUtil.cs b/src/Tasks/ManifestUtil/SecurityUtil.cs
index d4fe3572301..d74182f6ec8 100644
--- a/src/Tasks/ManifestUtil/SecurityUtil.cs
+++ b/src/Tasks/ManifestUtil/SecurityUtil.cs
@@ -572,7 +572,11 @@ public static void SignFile(string certPath, SecureString certPassword, Uri time
         private static bool UseSha256Algorithm(X509Certificate2 cert)
         {
             Oid oid = cert.SignatureAlgorithm;
-            return string.Equals(oid.FriendlyName, "sha256RSA", StringComparison.OrdinalIgnoreCase);
+            // Issue 6732: Clickonce does not support sha384/sha512 file hash so we default to sha256 
+            // for certs with that signature algorithm.
+            return string.Equals(oid.FriendlyName, "sha256RSA", StringComparison.OrdinalIgnoreCase) ||
+                   string.Equals(oid.FriendlyName, "sha384RSA", StringComparison.OrdinalIgnoreCase) ||
+                   string.Equals(oid.FriendlyName, "sha512RSA", StringComparison.OrdinalIgnoreCase);
         }
 
         /// <summary>
@@ -854,19 +858,20 @@ private static bool IsCertInStore(X509Certificate2 cert)
 
         private static string GetVersionIndependentToolPath(string toolName)
         {
-            RegistryKey localMachineKey = Registry.LocalMachine;
             const string versionIndependentToolKeyName = @"Software\Microsoft\ClickOnce\SignTool";
-
-            using (RegistryKey versionIndependentToolKey = localMachineKey.OpenSubKey(versionIndependentToolKeyName, writable: false))
+            using (RegistryKey localMachineKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32))
             {
-                string versionIndependentToolPath = null;
-
-                if (versionIndependentToolKey != null)
+                using (RegistryKey versionIndependentToolKey = localMachineKey.OpenSubKey(versionIndependentToolKeyName, writable: false))
                 {
-                    versionIndependentToolPath = versionIndependentToolKey.GetValue("Path") as string;
-                }
+                    string versionIndependentToolPath = null;
 
-                return versionIndependentToolPath != null ? Path.Combine(versionIndependentToolPath, toolName) : null;
+                    if (versionIndependentToolKey != null)
+                    {
+                        versionIndependentToolPath = versionIndependentToolKey.GetValue("Path") as string;
+                    }
+
+                    return versionIndependentToolPath != null ? Path.Combine(versionIndependentToolPath, toolName) : null;
+                }
             }
         }
     }
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index af7fb443e13..d8f81bf9926 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -15,7 +15,7 @@
     <IsPackable>true</IsPackable>
     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which implements the commonly used tasks of MSBuild.</PackageDescription>
     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>
-    <ApplyNgenOptimization Condition="'$(TargetFramework)' == '$(FullFrameworkTFM)'">partial</ApplyNgenOptimization>
+    <ApplyNgenOptimization Condition="'$(TargetFramework)' == '$(FullFrameworkTFM)'">full</ApplyNgenOptimization>
   </PropertyGroup>
 
   <ItemGroup>
@@ -91,7 +91,7 @@
     <Compile Include="..\Shared\NGen.cs">
       <Link>NGen.cs</Link>
     </Compile>
-    <Compile Include="..\Shared\IConstrainedEqualityComparer.cs"/>
+    <Compile Include="..\Shared\IConstrainedEqualityComparer.cs" />
     <Compile Include="..\Shared\PropertyParser.cs">
       <Link>PropertyParser.cs</Link>
       <ExcludeFromStyleCop>True</ExcludeFromStyleCop>
@@ -342,6 +342,7 @@
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
     <Compile Include="ResourceHandling\*.cs" />
+    <Compile Include="GetCompatiblePlatform.cs" />
     <Compile Include="ResolveComReference.cs" />
     <Compile Include="BuildCacheDisposeWrapper.cs" />
     <Compile Include="DownloadFile.cs" />
@@ -554,7 +555,6 @@
     <Compile Include="CodeTaskFactory.cs" />
     <Compile Include="XamlTaskFactory\XamlTaskFactory.cs" />
     <Compile Include="StateFileBase.cs" />
-    <Compile Include="Dependencies.cs" />
     <Compile Include="SystemState.cs" />
     <Compile Include="DependencyFile.cs" />
     <Compile Include="ZipDirectory.cs" />
@@ -794,6 +794,9 @@
     <Content Include="Microsoft.VisualStudioVersion.v16.Common.props">
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </Content>
+    <Content Include="Microsoft.VisualStudioVersion.v17.Common.props">
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+    </Content>
     <!-- Resource Files -->
     <EmbeddedResource Include="Resources\Strings.resx">
       <LogicalName>$(AssemblyName).Strings.resources</LogicalName>
@@ -965,10 +968,11 @@
   <!-- For perf, do not add more references (that will be loaded in common scenarios) without good reason -->
   <!-- ==========================================================================================-->
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
+    <PackageReference Include="System.Net.Http" />
+    
     <Reference Include="System" />
     <Reference Include="System.Core" />
     <Reference Include="System.IO.Compression" />
-    <Reference Include="System.Net.Http" />
     <Reference Include="System.Reflection" />
     <Reference Include="System.Runtime.Serialization" />
     <!-- Needed by GenerateResource's ResXResourceReader: UNDONE: When CLR has moved this type to improve layering, remove this reference -->
diff --git a/src/Tasks/Microsoft.CSharp.CurrentVersion.targets b/src/Tasks/Microsoft.CSharp.CurrentVersion.targets
index 0246dd8beda..d7bd7923aa7 100644
--- a/src/Tasks/Microsoft.CSharp.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.CSharp.CurrentVersion.targets
@@ -234,70 +234,71 @@ Copyright (C) Microsoft Corporation. All rights reserved.
        </PropertyGroup>
 
        <!-- Condition is to filter out the _CoreCompileResourceInputs so that it doesn't pass in culture resources to the compiler -->
-        <Csc  Condition=" '%(_CoreCompileResourceInputs.WithCulture)' != 'true' "
-              AdditionalLibPaths="$(AdditionalLibPaths)"
-              AddModules="@(AddModules)"
-              AdditionalFiles="@(AdditionalFiles)"
-              AllowUnsafeBlocks="$(AllowUnsafeBlocks)"
-              AnalyzerConfigFiles="@(EditorConfigFiles)"
-              Analyzers="@(Analyzer)"
-              ApplicationConfiguration="$(AppConfigForCompiler)"
-              BaseAddress="$(BaseAddress)"
-              CheckForOverflowUnderflow="$(CheckForOverflowUnderflow)"
-              CodeAnalysisRuleSet="$(ResolvedCodeAnalysisRuleSet)"
-              CodePage="$(CodePage)"
-              DebugType="$(DebugType)"
-              DefineConstants="$(DefineConstants)"
-              DelaySign="$(DelaySign)"
-              DisabledWarnings="$(NoWarn)"
-              DocumentationFile="@(DocFileItem)"
-              EmitDebugInformation="$(DebugSymbols)"
-              EnvironmentVariables="$(CscEnvironment)"
-              ErrorEndLocation="$(ErrorEndLocation)"
-              ErrorLog="$(ErrorLog)"
-              ErrorReport="$(ErrorReport)"
-              FileAlignment="$(FileAlignment)"
-              GenerateFullPaths="$(GenerateFullPaths)"
-              HighEntropyVA="$(HighEntropyVA)"
-              KeyContainer="$(KeyContainerName)"
-              KeyFile="$(KeyOriginatorFile)"
-              LangVersion="$(LangVersion)"
-              LinkResources="@(LinkResource)"
-              MainEntryPoint="$(StartupObject)"
-              ModuleAssemblyName="$(ModuleAssemblyName)"
-              NoConfig="true"
-              NoLogo="$(NoLogo)"
-              NoStandardLib="$(NoCompilerStandardLib)"
-              NoWin32Manifest="$(NoWin32Manifest)"
-              Nullable="$(Nullable)"
-              Optimize="$(Optimize)"
-              OutputAssembly="@(XamlIntermediateAssembly)"
-              PdbFile="$(PdbFile)"
-              Platform="$(PlatformTarget)"
-              Prefer32Bit="$(Prefer32Bit)"
-              PreferredUILang="$(PreferredUILang)"
-              References="@(ReferencePath)"
-              ReportAnalyzer="$(ReportAnalyzer)"
-              Resources="@(_CoreCompileResourceInputs);@(CompiledLicenseFile)"
-              ResponseFiles="$(CompilerResponseFile)"
-              SkipAnalyzers="$(_SkipAnalyzers)"
-              Sources="@(Compile)"
-              SubsystemVersion="$(SubsystemVersion)"
-              TargetType="$(OutputType)"
-              ToolExe="$(CscToolExe)"
-              ToolPath="$(CscToolPath)"
-              TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
-              UseHostCompilerIfAvailable="$(UseHostCompilerIfAvailable)"
-              UseSharedCompilation="$(UseSharedCompilation)"
-              Utf8Output="$(Utf8Output)"
-              VsSessionGuid="$(VsSessionGuid)"
-              WarningLevel="$(WarningLevel)"
-              WarningsAsErrors="$(WarningsAsErrors)"
-              WarningsNotAsErrors="$(WarningsNotAsErrors)"
-              Win32Icon="$(ApplicationIcon)"
-              Win32Manifest="$(Win32Manifest)"
-              Win32Resource="$(Win32Resource)"
-              />
+       <!-- Don't run analyzers for Csc task on XamlPrecompile pass, we only want to run them on core compile. -->
+       <Csc Condition=" '%(_CoreCompileResourceInputs.WithCulture)' != 'true' "
+            AdditionalLibPaths="$(AdditionalLibPaths)"
+            AddModules="@(AddModules)"
+            AdditionalFiles="@(AdditionalFiles)"
+            AllowUnsafeBlocks="$(AllowUnsafeBlocks)"
+            AnalyzerConfigFiles="@(EditorConfigFiles)"
+            Analyzers="@(Analyzer)"
+            ApplicationConfiguration="$(AppConfigForCompiler)"
+            BaseAddress="$(BaseAddress)"
+            CheckForOverflowUnderflow="$(CheckForOverflowUnderflow)"
+            CodeAnalysisRuleSet="$(ResolvedCodeAnalysisRuleSet)"
+            CodePage="$(CodePage)"
+            DebugType="$(DebugType)"
+            DefineConstants="$(DefineConstants)"
+            DelaySign="$(DelaySign)"
+            DisabledWarnings="$(NoWarn)"
+            DocumentationFile="@(DocFileItem)"
+            EmitDebugInformation="$(DebugSymbols)"
+            EnvironmentVariables="$(CscEnvironment)"
+            ErrorEndLocation="$(ErrorEndLocation)"
+            ErrorLog="$(ErrorLog)"
+            ErrorReport="$(ErrorReport)"
+            FileAlignment="$(FileAlignment)"
+            GenerateFullPaths="$(GenerateFullPaths)"
+            HighEntropyVA="$(HighEntropyVA)"
+            KeyContainer="$(KeyContainerName)"
+            KeyFile="$(KeyOriginatorFile)"
+            LangVersion="$(LangVersion)"
+            LinkResources="@(LinkResource)"
+            MainEntryPoint="$(StartupObject)"
+            ModuleAssemblyName="$(ModuleAssemblyName)"
+            NoConfig="true"
+            NoLogo="$(NoLogo)"
+            NoStandardLib="$(NoCompilerStandardLib)"
+            NoWin32Manifest="$(NoWin32Manifest)"
+            Nullable="$(Nullable)"
+            Optimize="$(Optimize)"
+            OutputAssembly="@(XamlIntermediateAssembly)"
+            PdbFile="$(PdbFile)"
+            Platform="$(PlatformTarget)"
+            Prefer32Bit="$(Prefer32Bit)"
+            PreferredUILang="$(PreferredUILang)"
+            References="@(ReferencePath)"
+            ReportAnalyzer="$(ReportAnalyzer)"
+            Resources="@(_CoreCompileResourceInputs);@(CompiledLicenseFile)"
+            ResponseFiles="$(CompilerResponseFile)"
+            SkipAnalyzers="true"
+            Sources="@(Compile)"
+            SubsystemVersion="$(SubsystemVersion)"
+            TargetType="$(OutputType)"
+            ToolExe="$(CscToolExe)"
+            ToolPath="$(CscToolPath)"
+            TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
+            UseHostCompilerIfAvailable="$(UseHostCompilerIfAvailable)"
+            UseSharedCompilation="$(UseSharedCompilation)"
+            Utf8Output="$(Utf8Output)"
+            VsSessionGuid="$(VsSessionGuid)"
+            WarningLevel="$(WarningLevel)"
+            WarningsAsErrors="$(WarningsAsErrors)"
+            WarningsNotAsErrors="$(WarningsNotAsErrors)"
+            Win32Icon="$(ApplicationIcon)"
+            Win32Manifest="$(Win32Manifest)"
+            Win32Resource="$(Win32Resource)"
+            />
 
 <!-- Only Applicable to the regular CoreCompile:
               <ItemGroup>
diff --git a/src/Tasks/Microsoft.Common.CrossTargeting.targets b/src/Tasks/Microsoft.Common.CrossTargeting.targets
index f59b407d959..c7d553aecd3 100644
--- a/src/Tasks/Microsoft.Common.CrossTargeting.targets
+++ b/src/Tasks/Microsoft.Common.CrossTargeting.targets
@@ -46,6 +46,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <!-- indicate to caller that project is RID agnostic so that a global property RuntimeIdentifier value can be removed -->
         <IsRidAgnostic>false</IsRidAgnostic>
         <IsRidAgnostic Condition=" '$(RuntimeIdentifier)' == '' and '$(RuntimeIdentifiers)' == '' ">true</IsRidAgnostic>
+        <!-- Extract necessary information for SetPlatform negotiation -->
+        <!-- This target does not run for cpp projects. -->
+        <IsVcxOrNativeProj>false</IsVcxOrNativeProj>
+        <Platforms>$(Platforms)</Platforms>
       </_ThisProjectBuildMetadata>
     </ItemGroup>
 
@@ -165,7 +169,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   -->
   <PropertyGroup>
     <MSBuildUseVisualStudioDirectoryLayout Condition="'$(MSBuildUseVisualStudioDirectoryLayout)'==''">$([MSBuild]::IsRunningFromVisualStudio())</MSBuildUseVisualStudioDirectoryLayout>
-    <NuGetRestoreTargets Condition="'$(NuGetRestoreTargets)'=='' and '$(MSBuildUseVisualStudioDirectoryLayout)'=='true'">$(MSBuildToolsPath32)\..\..\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets</NuGetRestoreTargets>
+    <NuGetRestoreTargets Condition="'$(NuGetRestoreTargets)'=='' and '$(MSBuildUseVisualStudioDirectoryLayout)'=='true'">$([MSBuild]::GetToolsDirectory32())\..\..\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets</NuGetRestoreTargets>
     <NuGetRestoreTargets Condition="'$(NuGetRestoreTargets)'==''">$(MSBuildToolsPath)\NuGet.targets</NuGetRestoreTargets>
   </PropertyGroup>
 
@@ -216,8 +220,4 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   <Import Project="$(DirectoryBuildTargetsPath)" Condition="'$(ImportDirectoryBuildTargets)' == 'true' and exists('$(DirectoryBuildTargetsPath)')"/>
 
-  <!-- TODO: https://github.com/Microsoft/msbuild/issues/1062: Remove this temporary hook when possible. -->
-  <Import Project="$(CoreCrossTargetingTargetsPath)"
-          Condition="'$(CoreCrossTargetingTargetsPath)' != '' and Exists('$(CoreCrossTargetingTargetsPath)')" />
-
 </Project>
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 277494006d1..fd0fb220580 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -573,7 +573,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <AssemblyFoldersSuffix Condition=" '$(AssemblyFoldersSuffix)' == '' ">AssemblyFoldersEx</AssemblyFoldersSuffix>
     <FrameworkRegistryBase Condition=" '$(FrameworkRegistryBase)' == '' ">Software\Microsoft\$(TargetFrameworkIdentifier)</FrameworkRegistryBase>
     <TargetPlatformRegistryBase Condition="'$(TargetPlatformRegistryBase)' == ''">Software\Microsoft\Microsoft SDKs\$(TargetPlatformIdentifier)</TargetPlatformRegistryBase>
-    <AssemblyFoldersConfigFile Condition="'$(AssemblyFoldersConfigFile)' == ''">$(MSBuildToolsPath32)\AssemblyFolders.config</AssemblyFoldersConfigFile>
+    <AssemblyFoldersConfigFile Condition="'$(AssemblyFoldersConfigFile)' == ''">$([MSBuild]::GetToolsDirectory32())\AssemblyFolders.config</AssemblyFoldersConfigFile>
     <AssemblyFoldersConfigFileSearchPath Condition="Exists('$(AssemblyFoldersConfigFile)')">{AssemblyFoldersFromConfig:$(AssemblyFoldersConfigFile),$(TargetFrameworkVersion)};</AssemblyFoldersConfigFileSearchPath>
     <!--
         The SearchPaths property is set to find assemblies in the following order:
@@ -642,7 +642,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   </PropertyGroup>
 
   <!-- Users familiar with how some other repos work try to use NoWarn with MSBuild in place of MSBuildWarningsAsMessages. -->
-  <PropertyGroup Condition="$([MSBuild]::AreFeaturesEnabled('16.8'))">
+  <PropertyGroup>
     <MSBuildWarningsAsMessages Condition="'$(MSBuildWarningsAsMessages)'==''">$(NoWarn)</MSBuildWarningsAsMessages>
     <MSBuildWarningsAsErrors Condition="'$(MSBuildWarningsAsErrors)'==''">$(WarningsAsErrors)</MSBuildWarningsAsErrors>
   </PropertyGroup>
@@ -1603,6 +1603,82 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   </Target>
 
+  <!--
+    ====================================================================================
+                                        _GetProjectReferencePlatformProperties
+
+    If a project is opted in via $(EnableDynamicPlatformResolution), this target calls the 
+    GetCompatiblePlatform task on all ProjectReference items to determine the most compatible 
+    platform for each project. It then sets SetPlatform metadata on each ProjectReference.
+    This prevents overbuilding a project when 'AnyCPU' is available.
+
+    ======================================================================================
+  -->
+
+  <PropertyGroup>
+    <UseDefaultPlatformLookupTables Condition="'$(UseDefaultPlatformLookupTables)' == ''">true</UseDefaultPlatformLookupTables>
+  </PropertyGroup>
+
+  <!-- This target skips VS builds because they already supply Platform and
+       Configuration information. -->
+  <Target Name="_GetProjectReferencePlatformProperties"
+          Condition="'$(EnableDynamicPlatformResolution)' == 'true'
+                     and '$(BuildingInsideVisualStudio)' != 'true'
+                     and '@(_MSBuildProjectReferenceExistent)' != ''">
+
+    <!-- Allow preset SetPlatform to override this operation -->
+    <ItemGroup>
+      <_MSBuildProjectReferenceExistent Condition="'%(_MSBuildProjectReferenceExistent.SetPlatform)' != ''">
+        <SkipGetPlatformProperties>true</SkipGetPlatformProperties>
+      </_MSBuildProjectReferenceExistent>
+    </ItemGroup>
+
+    <ItemGroup>
+      <_ProjectReferencePlatformPossibilities Include="@(_MSBuildProjectReferenceExistent)" 
+                                              Condition="'%(_MSBuildProjectReferenceExistent.SkipGetPlatformProperties)' != 'true'"/>
+    </ItemGroup>
+
+    <!-- Assign default PlatformLookupTables when doing Managed <-> Unmanaged hops -->
+    <ItemGroup>
+      <!-- If we're looking at a c++ project from a managed project, map managed platforms to native platforms. -->
+      <_ProjectReferencePlatformPossibilities Condition="'$(MSBuildProjectExtension)' != '.vcxproj' and '$(MSBuildProjectExtension)' != '.nativeproj' and '%(_ProjectReferencePlatformPossibilities.IsVcxOrNativeProj)' == 'true'">
+        <!-- Taken from https://docs.microsoft.com/visualstudio/msbuild/assignprojectconfiguration-task -->
+        <PlatformLookupTable Condition="'$(UseDefaultPlatformLookupTables)' == 'true' and '$(PlatformLookupTable)' == ''">x86=Win32</PlatformLookupTable>
+      </_ProjectReferencePlatformPossibilities>
+
+      <!-- If we're looking at a managed project from a cpp project, map native to managed platforms. -->
+      <_ProjectReferencePlatformPossibilities Condition="('$(MSBuildProjectExtension)' == '.vcxproj' or '$(MSBuildProjectExtension)' == '.nativeproj') and '%(_ProjectReferencePlatformPossibilities.IsVcxOrNativeProj)' != 'true'">
+        <PlatformLookupTable Condition="'$(UseDefaultPlatformLookupTables)' == 'true' and '$(PlatformLookupTable)' == ''">Win32=x86</PlatformLookupTable>
+      </_ProjectReferencePlatformPossibilities>
+    </ItemGroup>
+
+    <GetCompatiblePlatform AnnotatedProjects="@(_ProjectReferencePlatformPossibilities)"
+                           CurrentProjectPlatform="$(Platform)"
+                           PlatformLookupTable="$(PlatformLookupTable)"
+                           Condition="'@(_ProjectReferencePlatformPossibilities)' != ''">
+      <Output ItemName="_ProjectsWithPlatformAssignment" TaskParameter="AssignedProjectsWithPlatform" />
+    </GetCompatiblePlatform>
+
+    <!-- If GetCompatiblePlatform didn't run, @(ProjectsWithPlatformAssignment) will be empty.
+         Don't do anything in this case. Ex: A project references many projects
+         that can't multiplatform.  -->
+    <ItemGroup Condition="'@(_ProjectsWithPlatformAssignment)' != ''">
+      <ProjectsWithNearestPlatform Include="@(_ProjectsWithPlatformAssignment)"/>
+      <ProjectsWithNearestPlatform Condition="'@(ProjectsWithNearestPlatform)' == '%(Identity)' and '%(ProjectsWithNearestPlatform.NearestPlatform)' != ''">
+        <SetPlatform>Platform=%(ProjectsWithNearestPlatform.NearestPlatform)</SetPlatform>
+      </ProjectsWithNearestPlatform>
+
+      <!-- When GetCompatiblePlatform fails to assign NearestPlatform, undefine Platform and let that project build "on its own" -->
+      <ProjectsWithNearestPlatform Condition="'@(ProjectsWithNearestPlatform)' == '%(Identity)' and '%(ProjectsWithNearestPlatform.NearestPlatform)' == ''">
+        <UndefineProperties>%(ProjectsWithNearestPlatform.UndefineProperties);Platform</UndefineProperties>
+      </ProjectsWithNearestPlatform>
+
+      <_MSBuildProjectReferenceExistent Remove="@(_MSBuildProjectReferenceExistent)" Condition="'%(_MSBuildProjectReferenceExistent.SkipGetPlatformProperties)' != 'true'"/>
+      <_MSBuildProjectReferenceExistent Include="@(ProjectsWithNearestPlatform)"/>
+    </ItemGroup>
+
+  </Target>
+
   <!--
     ====================================================================================
                                         _GetProjectReferenceTargetFrameworkProperties
@@ -1658,7 +1734,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
    -->
    <ItemGroup>
       <_MSBuildProjectReferenceExistent Condition="'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' == '' and ('%(Extension)' == '.vcxproj' or '%(Extension)' == '.nativeproj')">
-        <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
+        <!-- 
+          Platform negotiation requires the MSBuild task call to GetTargetFrameworks.
+          Don't skip when opted into the feature.
+        -->
+        <SkipGetTargetFrameworkProperties Condition="'$(EnableDynamicPlatformResolution)' != 'true'">true</SkipGetTargetFrameworkProperties>
         <UndefineProperties>%(_MSBuildProjectReferenceExistent.UndefineProperties);TargetFramework</UndefineProperties>
       </_MSBuildProjectReferenceExistent>
    </ItemGroup>
@@ -1676,7 +1756,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     -->
     <ItemGroup>
       <_MSBuildProjectReferenceExistent Condition="'%(_MSBuildProjectReferenceExistent.SetTargetFramework)' != ''">
-        <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>
+        <!-- 
+          Platform negotiation requires the MSBuild task call to GetTargetFrameworks.
+          Don't skip when opted into the feature.
+        -->
+        <SkipGetTargetFrameworkProperties Condition="'$(EnableDynamicPlatformResolution)' != 'true'">true</SkipGetTargetFrameworkProperties>
       </_MSBuildProjectReferenceExistent>
     </ItemGroup>
 
@@ -1720,8 +1804,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
                                             CurrentProjectTargetPlatform="$(TargetPlatformMoniker)"
                                             CurrentProjectName="$(MSBuildProjectName)"
                                             FallbackTargetFrameworks="$(AssetTargetFallback)"
-                                            Condition="'@(_ProjectReferenceTargetFrameworkPossibilities->Count())' != '0' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
-                                                        And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' == 'true'">
+                                            Condition="'@(_ProjectReferenceTargetFrameworkPossibilities)' != '' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
+                                                        And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' == 'true' and '%(_ProjectReferenceTargetFrameworkPossibilities.IsVcxOrNativeProj)' != 'true'">
       <Output ItemName="AnnotatedProjects" TaskParameter="AssignedProjects" />
     </GetReferenceNearestTargetFrameworkTask>
 
@@ -1729,8 +1813,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
                                             CurrentProjectTargetFramework="$(ReferringTargetFrameworkForProjectReferences)"
                                             CurrentProjectName="$(MSBuildProjectName)"
                                             FallbackTargetFrameworks="$(AssetTargetFallback)"
-                                            Condition="'@(_ProjectReferenceTargetFrameworkPossibilities->Count())' != '0' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
-                                                        And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' != 'true'">
+                                            Condition="'@(_ProjectReferenceTargetFrameworkPossibilities)' != '' and '$(ReferringTargetFrameworkForProjectReferences)' != ''
+                                                        And '$(GetReferenceNearestTargetFrameworkTaskSupportsTargetPlatformParameter)' != 'true' and '%(_ProjectReferenceTargetFrameworkPossibilities.IsVcxOrNativeProj)' != 'true'">
       <Output ItemName="AnnotatedProjects" TaskParameter="AssignedProjects" />
     </GetReferenceNearestTargetFrameworkTask>
 
@@ -1739,9 +1823,14 @@ Copyright (C) Microsoft Corporation. All rights reserved.
          If the task was skipped or the current TargetFramework is empty, AnnotatedProjects will be empty.
          In this case, copy _ProjectReferenceTargetFrameworkPossibilities as is. See:
             https://github.com/dotnet/sdk/issues/416
+
+        Furthermore, if we're referencing a .vcxproj or .nativeproj, those items won't be populated into `AnnotatedProjects`
+        by `GetReferenceNearestTargetFrameworkTask`, so let them flow when `EnableDynamicPlatformResolution` is set. 
       -->
       <AnnotatedProjects Include="@(_ProjectReferenceTargetFrameworkPossibilities)"
-                         Condition="'$(ReferringTargetFrameworkForProjectReferences)' == ''" />
+                         Condition="'$(ReferringTargetFrameworkForProjectReferences)' == '' or
+                                    ('$(EnableDynamicPlatformResolution)' == 'true' and '%(_ProjectReferenceTargetFrameworkPossibilities.IsVcxOrNativeProj)' == 'true')" />
+
       <!-- If the NearestTargetFramework property was set and the project multi-targets, SetTargetFramework must be set. -->
       <AnnotatedProjects Condition="'@(AnnotatedProjects)' == '%(Identity)' and '%(AnnotatedProjects.NearestTargetFramework)' != '' and '%(AnnotatedProjects.HasSingleTargetFramework)' != 'true'">
         <SetTargetFramework>TargetFramework=%(AnnotatedProjects.NearestTargetFramework)</SetTargetFramework>
@@ -1793,6 +1882,12 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <!-- indicate to caller that project is RID agnostic so that a global property RuntimeIdentifier value can be removed -->
         <IsRidAgnostic>false</IsRidAgnostic>
         <IsRidAgnostic Condition=" '$(RuntimeIdentifier)' == '' and '$(RuntimeIdentifiers)' == '' ">true</IsRidAgnostic>
+        <!-- Extract necessary information for SetPlatform negotiation -->
+        <IsVcxOrNativeProj Condition="'$(MSBuildProjectExtension)' == '.vcxproj' or '$(MSBuildProjectExtension)' == '.nativeproj'">true</IsVcxOrNativeProj>
+        <Platforms>$(Platforms)</Platforms>
+        <!-- .vcxproj and .nativeproj contain a `ProjectConfiguration` item that have `Platform` metadata within.
+             Build the `Platforms` property from that. -->
+        <Platforms Condition="'@(ProjectConfiguration)' != '' and ('$(MSBuildProjectExtension)' == '.vcxproj' or '$(MSBuildProjectExtension)' == '.nativeproj')">@(ProjectConfiguration->'%(Platform)'->Distinct())</Platforms>
       </_ThisProjectBuildMetadata>
     </ItemGroup>
 
@@ -1807,9 +1902,14 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       </_AdditionalTargetFrameworkInfoPropertyWithValue>
     </ItemGroup>
 
+    <PropertyGroup>
+      <_UseAttributeForTargetFrameworkInfoPropertyNames Condition="'$(_UseAttributeForTargetFrameworkInfoPropertyNames)' == ''">false</_UseAttributeForTargetFrameworkInfoPropertyNames>
+    </PropertyGroup>
+
     <CombineTargetFrameworkInfoProperties
         RootElementName="$(TargetFramework)"
-        PropertiesAndValues="@(_AdditionalTargetFrameworkInfoPropertyWithValue)">
+        PropertiesAndValues="@(_AdditionalTargetFrameworkInfoPropertyWithValue)"
+        UseAttributeForTargetFrameworkInfoPropertyNames="$(_UseAttributeForTargetFrameworkInfoPropertyNames)">
       <Output TaskParameter="Result"
               PropertyName="_AdditionalTargetFrameworkInfoProperties"/>
     </CombineTargetFrameworkInfoProperties>
@@ -1830,13 +1930,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     ============================================================
                                     GetTargetFrameworkProperties
 
-    Overrridden by cross-targeting projects to return the set of
-    properties (in the form "key1=value1;...keyN=valueN") needed
-    to build it with the best target for the referring project's
-    target framework.
-
-    The referring project's $(TargetFrameworkMoniker) is passed
-    in as $(ReferringTargetFramework)
+    OBSOLETE: present only for theoretical backward compatibility.
   -->
   <Target Name="GetTargetFrameworkProperties" />
 
@@ -1860,7 +1954,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <PrepareProjectReferencesDependsOn>
       AssignProjectConfiguration;
       _SplitProjectReferencesByFileExistence;
-      _GetProjectReferenceTargetFrameworkProperties
+      _GetProjectReferenceTargetFrameworkProperties;
+      _GetProjectReferencePlatformProperties
     </PrepareProjectReferencesDependsOn>
   </PropertyGroup>
 
@@ -2315,9 +2410,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     ====================================================================================================
   -->
   <Target Name="GenerateBindingRedirects"
-    Inputs="$(MSBuildAllProjects);@(AppConfigFile);$(ResolveAssemblyReferencesStateFile);$(IntermediateOutputPath);@(SuggestedBindingRedirects)"
+    Inputs="$(MSBuildAllProjects);@(AppConfigFile);$(ResolveAssemblyReferencesStateFile);$(SuggestedBindingRedirectsCacheFile)"
     Outputs="$(_GenerateBindingRedirectsIntermediateAppConfig)"
-    Condition="'$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true'">
+    Condition="'$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true'"
+    DependsOnTargets="_GenerateSuggestedBindingRedirectsCache">
 
     <GenerateBindingRedirects
       AppConfigFile="@(AppConfigWithTargetPath)"
@@ -3517,6 +3613,33 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
   </Target>
 
+  <!--
+    ============================================================
+                                        _GenerateSuggestedBindingRedirectsCache
+    Generate a file used to track whether suggested binding redirects changed between builds.
+    @(SuggestedBindingRedirects) never contains a file on disk, so create a file
+    that contains a hash of the items to prevent `GenerateBindingRedirects`
+    from running every build.
+
+    See https://github.com/dotnet/msbuild/issues/5943 for details.
+    ============================================================
+    -->
+  <Target Name="_GenerateSuggestedBindingRedirectsCache" Condition="'$(DesignTimeBuild)' != 'true' and '$(BuildingProject)' == 'true'" DependsOnTargets="ResolveAssemblyReferences">
+    <PropertyGroup>
+      <SuggestedBindingRedirectsCacheFile>$(IntermediateOutputPath)$(MSBuildProjectFile).SuggestedBindingRedirects.cache</SuggestedBindingRedirectsCacheFile>
+    </PropertyGroup>
+
+      <Hash ItemsToHash="@(SuggestedBindingRedirects)">
+        <Output TaskParameter="HashResult" PropertyName="SuggestedBindingRedirectsHash"/>
+      </Hash>
+
+      <WriteLinesToFile Lines="$(SuggestedBindingRedirectsHash)" File="$(SuggestedBindingRedirectsCacheFile)" Overwrite="true" WriteOnlyWhenDifferent="true"/>
+
+      <ItemGroup>
+        <FileWrites Include="$(SuggestedBindingRedirectsCacheFile)"/>
+      </ItemGroup>
+  </Target>
+
   <!--
     ============================================================
                                         _GenerateCompileDependencyCache
@@ -3738,7 +3861,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
     <PropertyGroup>
       <_ALExeToolPath>$(TargetFrameworkSDKToolsDirectory)</_ALExeToolPath>
-      <_ALExeToolPath Condition="'$(PlatformTarget)' == 'x64'">$(TargetFrameworkSDKToolsDirectory)$(PlatformTarget)\</_ALExeToolPath>
+      <_ALExeToolPath Condition="'$(PlatformTarget)' == 'x64' and !$(_ALExeToolPath.EndsWith('x64\'))">$(TargetFrameworkSDKToolsDirectory)x64\</_ALExeToolPath>
     </PropertyGroup>
 
     <MakeDir
@@ -4233,6 +4356,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     <ItemGroup Condition="'$(PublishSingleFile)' == 'true'">
       <_ClickOnceFiles Include="$(PublishedSingleFilePath)"/>
       <_ClickOnceFiles Include="@(_FilesExcludedFromBundle)"/>
+
+      <!-- Include file association icons from Content as loose files -->
+      <_FileAssociationIcons Include="%(FileAssociation.DefaultIcon)"/>
+      <_ClickOnceFiles Include="@(ContentWithTargetPath)" Condition="'%(Identity)'=='@(_FileAssociationIcons)'"/>
     </ItemGroup>
 
     <!-- For single file publish in .net core app, sign the SF EXE if signing is enabled -->
@@ -4724,13 +4851,11 @@ Copyright (C) Microsoft Corporation. All rights reserved.
                                         GetCopyToOutputDirectoryItems
 
     Get all project items that may need to be transferred to the output directory.
-    This includes baggage items from transitively referenced projects. It would appear
-    that this target computes full transitive closure of content items for all referenced
-    projects; however that is not the case. It only collects the content items from its
-    immediate children and not children of children. The reason this happens is that
-    the ProjectReferenceWithConfiguration list that is consumed by _SplitProjectReferencesByFileExistence
-    is only populated in the current project and is empty in the children. The empty list
-    causes _MSBuildProjectReferenceExistent to be empty and terminates the recursion.
+    This includes baggage items from transitively referenced projects.
+
+    As of 17.0, content items are copied transitively by default.
+    Set `MSBuildCopyContentTransitively` to false to opt out.
+    See https://github.com/dotnet/msbuild/pull/6622 for more info.
     ============================================================
     -->
   <PropertyGroup>
@@ -4739,9 +4864,10 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       GetCopyToOutputDirectoryItems depends on an unspecified dependency _SplitProjectReferencesByFileExistence -> AssignProjectConfiguration (https://github.com/microsoft/msbuild/issues/4677).
       When the unspecified dependency does not happen by accident, content copying is only 1 level deep instead of transitive.
       This target enforces the dependency.
-
-      TODO: make transitive content copying the default when the breaking change is acceptable.
     -->
+
+    <MSBuildCopyContentTransitively Condition=" '$(MSBuildCopyContentTransitively)' == '' and $([MSBuild]::AreFeaturesEnabled('17.0'))">true</MSBuildCopyContentTransitively>
+
     <_TargetsThatPrepareProjectReferences Condition=" '$(MSBuildCopyContentTransitively)' == 'true' ">
       AssignProjectConfiguration;
       _SplitProjectReferencesByFileExistence
@@ -6528,7 +6654,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
   <!-- Import NuGet.targets (required for GetReferenceNearestTargetFrameworkTask and used for Restore functionality) -->
   <PropertyGroup>
     <MSBuildUseVisualStudioDirectoryLayout Condition="'$(MSBuildUseVisualStudioDirectoryLayout)'==''">$([MSBuild]::IsRunningFromVisualStudio())</MSBuildUseVisualStudioDirectoryLayout>
-    <NuGetRestoreTargets Condition="'$(NuGetRestoreTargets)'=='' and '$(MSBuildUseVisualStudioDirectoryLayout)'=='true'">$(MSBuildToolsPath32)\..\..\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets</NuGetRestoreTargets>
+    <NuGetRestoreTargets Condition="'$(NuGetRestoreTargets)'=='' and '$(MSBuildUseVisualStudioDirectoryLayout)'=='true'">$([MSBuild]::GetToolsDirectory32())\..\..\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.targets</NuGetRestoreTargets>
     <NuGetRestoreTargets Condition="'$(NuGetRestoreTargets)'==''">$(MSBuildToolsPath)\NuGet.targets</NuGetRestoreTargets>
   </PropertyGroup>
 
diff --git a/src/Tasks/Microsoft.Common.props b/src/Tasks/Microsoft.Common.props
index 32f5f05ab9f..b08b6558352 100644
--- a/src/Tasks/Microsoft.Common.props
+++ b/src/Tasks/Microsoft.Common.props
@@ -171,7 +171,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
     -->
   <PropertyGroup>
     <MSBuildUseVisualStudioDirectoryLayout Condition="'$(MSBuildUseVisualStudioDirectoryLayout)'==''">$([MSBuild]::IsRunningFromVisualStudio())</MSBuildUseVisualStudioDirectoryLayout>
-    <NuGetPropsFile Condition="'$(NuGetPropsFile)'=='' and '$(MSBuildUseVisualStudioDirectoryLayout)'=='true'">$(MSBuildToolsPath32)\..\..\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.props</NuGetPropsFile>
+    <NuGetPropsFile Condition="'$(NuGetPropsFile)'=='' and '$(MSBuildUseVisualStudioDirectoryLayout)'=='true'">$([MSBuild]::GetToolsDirectory32())\..\..\..\Common7\IDE\CommonExtensions\Microsoft\NuGet\NuGet.props</NuGetPropsFile>
     <NuGetPropsFile Condition="'$(NuGetPropsFile)'==''">$(MSBuildToolsPath)\NuGet.props</NuGetPropsFile>
   </PropertyGroup>
 
diff --git a/src/Tasks/Microsoft.Common.tasks b/src/Tasks/Microsoft.Common.tasks
index 6cef8ef8661..f6b98da83af 100644
--- a/src/Tasks/Microsoft.Common.tasks
+++ b/src/Tasks/Microsoft.Common.tasks
@@ -127,6 +127,7 @@
 
     <UsingTask TaskName="Microsoft.Build.Tasks.GenerateTrustInfo"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.GetAssemblyIdentity"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
+    <UsingTask TaskName="Microsoft.Build.Tasks.GetCompatiblePlatform"                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.GetFileHash"                           AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.GetFrameworkPath"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.GetFrameworkSdkPath"                   AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
diff --git a/src/Tasks/Microsoft.VisualStudioVersion.v17.Common.props b/src/Tasks/Microsoft.VisualStudioVersion.v17.Common.props
new file mode 100644
index 00000000000..452a3fe9cd4
--- /dev/null
+++ b/src/Tasks/Microsoft.VisualStudioVersion.v17.Common.props
@@ -0,0 +1,20 @@
+Ôªø<!--
+***********************************************************************************************
+Microsoft.VisualStudio.v17.Common.props
+
+WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
+          created a backup copy.  Incorrect changes to this file will make it
+          impossible to load or build your projects from the command-line or the IDE.
+
+Copyright (C) Microsoft Corporation. All rights reserved.
+***********************************************************************************************
+-->
+
+<Project>
+
+  <PropertyGroup>
+    <VisualStudioVersion>17.0</VisualStudioVersion>
+    <VSToolsPath>$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
+  </PropertyGroup>
+
+</Project>
diff --git a/src/Tasks/ResGenDependencies.cs b/src/Tasks/ResGenDependencies.cs
index 3632a916d83..35b26a5e72f 100644
--- a/src/Tasks/ResGenDependencies.cs
+++ b/src/Tasks/ResGenDependencies.cs
@@ -8,7 +8,7 @@
 using System.IO;
 using System.Resources;
 using System.Xml;
-
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Tasks.ResourceHandling;
@@ -22,18 +22,19 @@ namespace Microsoft.Build.Tasks
     /// 
     /// This is an on-disk serialization format, don't change field names or types or use readonly.
     /// </remarks>
+    /// Serializable should be included in all state files. It permits BinaryFormatter-based calls, including from GenerateResource, which we cannot move off BinaryFormatter.
     [Serializable]
-    internal sealed class ResGenDependencies : StateFileBase
+    internal sealed class ResGenDependencies : StateFileBase, ITranslatable
     {
         /// <summary>
         /// The list of resx files.
         /// </summary>
-        private Dependencies resXFiles = new Dependencies();
+        internal IDictionary<string, ResXFile> resXFiles = new Dictionary<string, ResXFile>();
 
         /// <summary>
         /// A list of portable libraries and the ResW files they can produce.
         /// </summary>
-        private Dependencies portableLibraries = new Dependencies();
+        internal IDictionary<string, PortableLibraryFile> portableLibraries = new Dictionary<string, PortableLibraryFile>();
 
         /// <summary>
         /// A newly-created ResGenDependencies is not dirty.
@@ -47,7 +48,7 @@ internal sealed class ResGenDependencies : StateFileBase
         ///  If this is NULL then we use the directory in which the .resx is in (that should always
         ///  be the default!)
         /// </summary>
-        private string baseLinkedFileDirectory;
+        internal string baseLinkedFileDirectory;
 
         internal string BaseLinkedFileDirectory
         {
@@ -90,11 +91,38 @@ internal bool UseSourcePath
             }
         }
 
+        public ResGenDependencies() { }
+
+        public ResGenDependencies(ITranslator translator)
+        {
+            Translate(translator);
+        }
+
+        public override void Translate(ITranslator translator)
+        {
+            translator.TranslateDictionary(ref resXFiles,
+                (ITranslator translator, ref string s) => translator.Translate(ref s),
+                (ITranslator translator, ref ResXFile resx) => {
+                    ResXFile temp = resx ?? new();
+                    temp.Translate(translator);
+                    resx = temp;
+                },
+                count => new Dictionary<string, ResXFile>(count));
+            translator.TranslateDictionary(ref portableLibraries,
+                (ITranslator translator, ref string s) => translator.Translate(ref s),
+                (ITranslator translator, ref PortableLibraryFile portableLibrary) => {
+                    PortableLibraryFile temp = portableLibrary ?? new();
+                    temp.Translate(translator);
+                    portableLibrary = temp;
+                },
+                count => new Dictionary<string, PortableLibraryFile>(count));
+            translator.Translate(ref baseLinkedFileDirectory);
+        }
+
         internal ResXFile GetResXFileInfo(string resxFile, bool useMSBuildResXReader)
         {
             // First, try to retrieve the resx information from our hashtable.
-            var retVal = (ResXFile)resXFiles.GetDependencyFile(resxFile);
-            if (retVal == null)
+            if (!resXFiles.TryGetValue(resxFile, out ResXFile retVal))
             {
                 // Ok, the file wasn't there.  Add it to our cache and return it to the caller.  
                 retVal = AddResxFile(resxFile, useMSBuildResXReader);
@@ -105,7 +133,7 @@ internal ResXFile GetResXFileInfo(string resxFile, bool useMSBuildResXReader)
                 // by removing it from the hashtable and readding it.
                 if (retVal.HasFileChanged())
                 {
-                    resXFiles.RemoveDependencyFile(resxFile);
+                    resXFiles.Remove(resxFile);
                     _isDirty = true;
                     retVal = AddResxFile(resxFile, useMSBuildResXReader);
                 }
@@ -120,7 +148,7 @@ private ResXFile AddResxFile(string file, bool useMSBuildResXReader)
             // to be cracked for contained files.
 
             var resxFile = new ResXFile(file, BaseLinkedFileDirectory, useMSBuildResXReader);
-            resXFiles.AddDependencyFile(file, resxFile);
+            resXFiles.Add(file, resxFile);
             _isDirty = true;
             return resxFile;
         }
@@ -128,13 +156,13 @@ private ResXFile AddResxFile(string file, bool useMSBuildResXReader)
         internal PortableLibraryFile TryGetPortableLibraryInfo(string libraryPath)
         {
             // First, try to retrieve the portable library information from our hashtable.  
-            var retVal = (PortableLibraryFile)portableLibraries.GetDependencyFile(libraryPath);
+            portableLibraries.TryGetValue(libraryPath, out PortableLibraryFile retVal);
 
             // The file is in our cache.  Make sure it's up to date.  If not, discard
             // this entry from the cache and rebuild all the state at a later point.
             if (retVal?.HasFileChanged() == true)
             {
-                portableLibraries.RemoveDependencyFile(libraryPath);
+                portableLibraries.Remove(libraryPath);
                 _isDirty = true;
                 retVal = null;
             }
@@ -144,11 +172,10 @@ internal PortableLibraryFile TryGetPortableLibraryInfo(string libraryPath)
 
         internal void UpdatePortableLibrary(PortableLibraryFile library)
         {
-            var cached = (PortableLibraryFile)portableLibraries.GetDependencyFile(library.FileName);
-            if (cached == null || !library.Equals(cached))
+            if (!portableLibraries.TryGetValue(library.FileName, out PortableLibraryFile cached) || !library.Equals(cached))
             {
                 // Add a new entry or replace the existing one.
-                portableLibraries.AddDependencyFile(library.FileName, library);
+                portableLibraries.Add(library.FileName, library);
                 _isDirty = true;
             }
         }
@@ -188,11 +215,12 @@ internal static ResGenDependencies DeserializeCache(string stateFile, bool useSo
         /// 
         /// This is an on-disk serialization format, don't change field names or types or use readonly.
         /// </remarks>
+        /// Serializable should be included in all state files. It permits BinaryFormatter-based calls, including from GenerateResource, which we cannot move off BinaryFormatter.
         [Serializable]
-        internal sealed class ResXFile : DependencyFile
+        internal sealed class ResXFile : DependencyFile, ITranslatable
         {
             // Files contained within this resx file.
-            private string[] linkedFiles;
+            internal string[] linkedFiles;
 
             internal string[] LinkedFiles => linkedFiles;
 
@@ -209,6 +237,18 @@ internal ResXFile(string filename, string baseLinkedFileDirectory, bool useMSBui
                 }
             }
 
+            internal ResXFile()
+            {
+            }
+
+            public void Translate(ITranslator translator)
+            {
+                translator.Translate(ref linkedFiles);
+                translator.Translate(ref filename);
+                translator.Translate(ref lastModified);
+                translator.Translate(ref exists);
+            }
+
             /// <summary>
             /// Given a .RESX file, returns all the linked files that are referenced within that .RESX.
             /// </summary>
@@ -281,12 +321,27 @@ private static string[] GetLinkedFiles(string filename, string baseLinkedFileDir
         /// 
         /// This is an on-disk serialization format, don't change field names or types or use readonly.
         /// </remarks>
+        /// Serializable should be included in all state files. It permits BinaryFormatter-based calls, including from GenerateResource, which we cannot move off BinaryFormatter.
         [Serializable]
-        internal sealed class PortableLibraryFile : DependencyFile
+        internal sealed class PortableLibraryFile : DependencyFile, ITranslatable
         {
-            private string[] outputFiles;
-            private string neutralResourceLanguage;
-            private string assemblySimpleName;
+            internal string[] outputFiles;
+            internal string neutralResourceLanguage;
+            internal string assemblySimpleName;
+
+            internal PortableLibraryFile()
+            {
+            }
+
+            public void Translate(ITranslator translator)
+            {
+                translator.Translate(ref assemblySimpleName);
+                translator.Translate(ref outputFiles);
+                translator.Translate(ref neutralResourceLanguage);
+                translator.Translate(ref filename);
+                translator.Translate(ref lastModified);
+                translator.Translate(ref exists);
+            }
 
             internal PortableLibraryFile(string filename)
                 : base(filename)
diff --git a/src/Tasks/ResolveComReferenceCache.cs b/src/Tasks/ResolveComReferenceCache.cs
index d0f80dca18f..133acb02f6f 100644
--- a/src/Tasks/ResolveComReferenceCache.cs
+++ b/src/Tasks/ResolveComReferenceCache.cs
@@ -2,7 +2,8 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections;
+using System.Collections.Generic;
+using Microsoft.Build.BackEnd;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Tasks
@@ -16,17 +17,18 @@ namespace Microsoft.Build.Tasks
     /// 
     /// This is an on-disk serialization format, don't change field names or types or use readonly.
     /// </remarks>
+    /// Serializable should be included in all state files. It permits BinaryFormatter-based calls, including from GenerateResource, which we cannot move off BinaryFormatter.
     [Serializable]
-    internal sealed class ResolveComReferenceCache : StateFileBase
+    internal sealed class ResolveComReferenceCache : StateFileBase, ITranslatable
     {
         /// <summary>
         /// Component timestamps. 
         /// Key: Component path on disk
         /// Value: DateTime struct
         /// </summary>
-        private Hashtable componentTimestamps;
-        private string tlbImpLocation;
-        private string axImpLocation;
+        internal Dictionary<string, DateTime> componentTimestamps;
+        internal string tlbImpLocation;
+        internal string axImpLocation;
 
         /// <summary>
         /// indicates whether the cache contents have changed since it's been created
@@ -46,7 +48,7 @@ internal ResolveComReferenceCache(string tlbImpPath, string axImpPath)
 
             tlbImpLocation = tlbImpPath;
             axImpLocation = axImpPath;
-            componentTimestamps = new Hashtable();
+            componentTimestamps = new();
         }
 
         /// <summary>
@@ -69,9 +71,9 @@ internal DateTime this[string componentPath]
         {
             get
             {
-                if (componentTimestamps.ContainsKey(componentPath))
+                if (componentTimestamps.TryGetValue(componentPath, out DateTime time))
                 {
-                    return (DateTime)componentTimestamps[componentPath];
+                    return time;
                 }
 
                 // If the entry is not present in the cache, return the current time. Since no component should be timestamped
@@ -81,12 +83,24 @@ internal DateTime this[string componentPath]
             set
             {
                 // only set the value and dirty the cache if the timestamp doesn't exist yet or is different than the current one
-                if (DateTime.Compare(this[componentPath], value) != 0)
+                if (!DateTime.Equals(this[componentPath], value))
                 {
                     componentTimestamps[componentPath] = value;
                     _dirty = true;
                 }
             }
         }
+
+        public ResolveComReferenceCache(ITranslator translator)
+        {
+            Translate(translator);
+        }
+
+        public override void Translate(ITranslator translator)
+        {
+            translator.Translate(ref axImpLocation);
+            translator.Translate(ref tlbImpLocation);
+            translator.TranslateDictionary(ref componentTimestamps, StringComparer.Ordinal);
+        }
     }
 }
diff --git a/src/Tasks/ResolveManifestFiles.cs b/src/Tasks/ResolveManifestFiles.cs
index ee59ffb9b5e..48877a31c2f 100644
--- a/src/Tasks/ResolveManifestFiles.cs
+++ b/src/Tasks/ResolveManifestFiles.cs
@@ -52,6 +52,8 @@ public sealed class ResolveManifestFiles : TaskExtension
         // if signing manifests is on and not all app files are included, then the project can't be published.
         private bool _canPublish;
         private Dictionary<string, ITaskItem> _runtimePackAssets;
+        // map of satellite assemblies that are included in References
+        private SatelliteRefAssemblyMap _satelliteAssembliesPassedAsReferences = new SatelliteRefAssemblyMap();
         #endregion
 
         #region Properties
@@ -380,6 +382,28 @@ private void GetOutputAssemblies(List<PublishInfo> publishInfos, List<ITaskItem>
                 {
                     if (!IsFiltered(item))
                     {
+                        // ClickOnce for .NET 4.X should not publish duplicate satellite assemblies.
+                        // This will cause ClickOnce install to fail. This can happen if some package
+                        // decides to publish the en-us resource assemblies for other locales also.
+                        if (!LauncherBasedDeployment && _satelliteAssembliesPassedAsReferences.ContainsItem(item))
+                        {
+                            continue;
+                        }
+
+                        // Apply the culture publishing rules to include or exclude satellite assemblies
+                        AssemblyIdentity identity = AssemblyIdentity.FromManagedAssembly(item.ItemSpec);
+                        if (identity != null && !String.Equals(identity.Culture, "neutral", StringComparison.Ordinal))
+                        {
+                            CultureInfo satelliteCulture = GetItemCulture(item);
+                            if (PublishFlags.IsSatelliteIncludedByDefault(satelliteCulture, _targetCulture, _includeAllSatellites))
+                            {
+                                _satelliteAssembliesPassedAsReferences.Add(item);
+                            }
+                            else
+                            {
+                                continue;
+                            }
+                        }
                         item.SetMetadata("AssemblyType", "Managed");
                         assemblyMap.Add(item);
                     }
@@ -574,6 +598,10 @@ private void GetOutputSatellites(List<PublishInfo> publishInfos, List<ITaskItem>
                 foreach (ITaskItem item in _satelliteAssemblies)
                 {
                     item.SetMetadata("AssemblyType", "Satellite");
+                    if (_satelliteAssembliesPassedAsReferences.ContainsItem(item))
+                    {
+                        continue;
+                    }
                     satelliteMap.Add(item, true);
                 }
             }
@@ -855,6 +883,54 @@ IEnumerator IEnumerable.GetEnumerator()
         }
         #endregion
 
+        #region SatelliteRefAssemblyMap
+        private class SatelliteRefAssemblyMap : IEnumerable
+        {
+            private readonly Dictionary<string, MapEntry> _dictionary = new Dictionary<string, MapEntry>(StringComparer.InvariantCultureIgnoreCase);
+
+            public MapEntry this[string fusionName]
+            {
+                get
+                {
+                    _dictionary.TryGetValue(fusionName, out MapEntry entry);
+                    return entry;
+                }
+            }
+
+            public bool ContainsItem(ITaskItem item)
+            {
+                AssemblyIdentity identity = AssemblyIdentity.FromManagedAssembly(item.ItemSpec);
+                if (identity != null)
+                {
+                    return _dictionary.ContainsKey(identity.ToString());
+                }
+                return false;
+            }
+
+            public void Add(ITaskItem item)
+            {
+                var entry = new MapEntry(item, true);
+                AssemblyIdentity identity = AssemblyIdentity.FromManagedAssembly(item.ItemSpec);
+                if (identity != null && !String.Equals(identity.Culture, "neutral", StringComparison.Ordinal))
+                {
+                    // Use satellite assembly strong name signature as key
+                    string key = identity.ToString();
+                    Debug.Assert(!_dictionary.ContainsKey(key), String.Format(CultureInfo.CurrentCulture, "Two or more items with same key '{0}' detected", key));
+                    if (!_dictionary.ContainsKey(key))
+                    {
+                        _dictionary.Add(key, entry);
+                    }
+                }
+            }
+
+            IEnumerator IEnumerable.GetEnumerator()
+            {
+                return _dictionary.Values.GetEnumerator();
+            }
+        }
+        #endregion
+
+
         #region FileMap
         private class FileMap : IEnumerable
         {
@@ -1036,7 +1112,7 @@ public static PublishFlags GetSatelliteFlags(PublishState state, CultureInfo sat
 
             public bool IsPublished { get; }
 
-            private static bool IsSatelliteIncludedByDefault(CultureInfo satelliteCulture, CultureInfo targetCulture, bool includeAllSatellites)
+            public static bool IsSatelliteIncludedByDefault(CultureInfo satelliteCulture, CultureInfo targetCulture, bool includeAllSatellites)
             {
                 // If target culture not specified then satellite is not included by default...
                 if (targetCulture == null)
diff --git a/src/Tasks/ResolveProjectBase.cs b/src/Tasks/ResolveProjectBase.cs
index 334b17f17d9..e3c7c7770be 100644
--- a/src/Tasks/ResolveProjectBase.cs
+++ b/src/Tasks/ResolveProjectBase.cs
@@ -121,6 +121,7 @@ internal bool VerifyProjectReferenceItems(ITaskItem[] references, bool treatAsEr
         /// </summary>
         internal void CacheProjectElementsFromXml(string xmlString)
         {
+            // TODO: fix code clone for parsing CurrentSolutionConfiguration xml: https://github.com/dotnet/msbuild/issues/6751
             XmlDocument doc = null;
 
             if (!string.IsNullOrEmpty(xmlString))
diff --git a/src/Tasks/Resources/Strings.resx b/src/Tasks/Resources/Strings.resx
index 48b0bfb05a3..45b52e509f0 100644
--- a/src/Tasks/Resources/Strings.resx
+++ b/src/Tasks/Resources/Strings.resx
@@ -2893,6 +2893,37 @@
     <value>MSB3965: No output path specified in build settings.</value>
     <comment>{StrBegin="MSB3965: "}</comment>
   </data>
+
+  <!--
+        MSB3981 - MSB3990   Task: GetCompatiblePlatform
+  -->
+  <data name="GetCompatiblePlatform.NoCompatiblePlatformFound">
+    <value>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</value>
+    <comment>{StrBegin="MSB3981: "}</comment>
+  </data>
+  <data name="GetCompatiblePlatform.NoPlatformsListed">
+    <value>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</value>
+    <comment>{StrBegin="MSB3982: "}</comment>
+  </data>
+  <data name="GetCompatiblePlatform.InvalidLookupTableFormat">
+    <value>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</value>
+    <comment>{StrBegin="MSB3983: "}</comment>
+  </data>
+  <data name="GetCompatiblePlatform.LookupTableParsed">
+    <value>Parsed lookup table:'{0}'.</value>
+  </data>
+    <data name="GetCompatiblePlatform.FoundMappingInTable">
+    <value>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</value>
+  </data>
+  <data name="GetCompatiblePlatform.DisplayChosenPlatform">
+    <value>Project '{0}' will build with platform: '{1}'.</value>
+  </data>
+  <data name="GetCompatiblePlatform.SamePlatform">
+    <value>ProjectReference and current project have the same platform.</value>
+  </data>
+  <data name="GetCompatiblePlatform.AnyCPUDefault">
+    <value>Choosing AnyCPU by default.</value>
+  </data>
   <!--
         The tasks message bucket is: MSB3001 - MSB3999
 
@@ -2978,6 +3009,7 @@
             MSB3951 - MSB3960   Task: VerifyFileHash
             MSB3961 - MSB3970   Task: GenerateLauncher
             MSB3971 - MSB3980   Task: GetReferenceAssemblyPaths overflow
+            MSB3981 - MSB3990   Task: GetCompatiblePlatform
 
             MSB4000 - MSB4200   Portable targets & tasks (vsproject\flavors\portable\msbuild)
             MSB9000 - MSB9900   MSBuild targets files (C++)
diff --git a/src/Tasks/Resources/xlf/Strings.cs.xlf b/src/Tasks/Resources/xlf/Strings.cs.xlf
index d3b826e07fa..fc9e3d05a39 100644
--- a/src/Tasks/Resources/xlf/Strings.cs.xlf
+++ b/src/Tasks/Resources/xlf/Strings.cs.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: Nelze z√≠skat n√°zev sestaven√≠ pro {0}. {1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">Zvol√≠ se mo≈ænost AnyCPU jako v√Ωchoz√≠.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">Projekt {0} se sestav√≠ s platformou: {1}.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">Bylo nalezeno mapov√°n√≠ {0}={1} v dan√© vyhled√°vac√≠ tabulce: {2}.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: PlatformLookupTable {0} nem√° platn√Ω form√°t a ned√° se pou≈æ√≠t. Form√°t by mƒõl b√Ωt A=B;C=D.</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">Analyzovan√° vyhled√°vac√≠ tabulka: {0}</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: Ne≈°lo urƒçit, jak by se mƒõlo sestavit {0}. Projekt se sestav√≠ bez sady vlastnost√≠ platformy.</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: EnableDynamicPlatformResolution je true, ale odkazovan√Ω projekt {0} nem√° nastaven√° metadata pro platformy. Sestav√≠ se bez zadan√© platformy.</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">ProjectReference a aktu√°ln√≠ projekt maj√≠ stejnou platformu.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">Oƒçek√°van√° verze sady Microsoft Windows SDK nebyla nalezena. P≈ôi hled√°n√≠ bylo pou≈æito um√≠stƒõn√≠ urƒçen√© hodnotou {0} kl√≠ƒçe registru {1}. Pokud dan√Ω proces sestaven√≠ sadu SDK nepot≈ôebuje, lze tuto chybu ignorovat. V opaƒçn√©m p≈ô√≠padƒõ m≈Ø≈æete pot√≠≈æe odstranit proveden√≠m jedn√© z n√°sleduj√≠c√≠ch akc√≠: 1) instalac√≠ sady Microsoft Windows SDK,  2) Instalac√≠ sady Visual Studio 2010. 3) Ruƒçn√≠m nastaven√≠m uveden√©ho kl√≠ƒçe registru na spr√°vn√© um√≠stƒõn√≠.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.de.xlf b/src/Tasks/Resources/xlf/Strings.de.xlf
index 55412a39a12..f8323176201 100644
--- a/src/Tasks/Resources/xlf/Strings.de.xlf
+++ b/src/Tasks/Resources/xlf/Strings.de.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: Der Assemblyname f√ºr "{0}" kann nicht abgerufen werden. {1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">Standardm√§√üig wird AnyCPU ausgew√§hlt.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">Das Projekt "{0}" wird mit der Plattform "{1}" erstellt.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">Die Zuordnung "{0}" ="{1}" wurde in der angegebenen Nachschlagetabelle gefunden: "{2}".</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: Das PlatformLookupTable "{0}" weist ein ung√ºltiges Format auf und wird nicht verwendet. Das Format muss ‚ÄûA=B;C=D‚Äú sein.</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">Nachschlagetabelle analysiert:"{0}".</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: Es konnte nicht ermittelt werden, als was "{0}" erstellt werden soll. Das Projekt wird erstellt ohne eine festgelegte Plattformeigenschaft.</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: EnableDynamicPlatformResolution ist "true". Das referenzierte Projekt "{0}" enth√§lt jedoch keine Metadaten f√ºr "Platforms". Es wird ohne eine angegebene Plattform erstellt.</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">ProjectReference und das aktuelle Projekt haben die gleiche Plattform.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">Die erwartete Version des Microsoft Windows SDK wurde nicht gefunden. Es wurde nach einem im Wert "{0}" des Registrierungsschl√ºssels "{1}" angegebenen Speicherort gesucht. Wenn das SDK f√ºr den Buildprozess nicht erforderlich ist, kann diese Meldung ignoriert werden. Andernfalls k√∂nnen Sie das Problem mit einem der folgenden Verfahren beheben:  1) Installieren Sie das Microsoft Windows SDK.  2) Installieren Sie Visual Studio 2010.  3) Legen Sie den obigen Registrierungsschl√ºssel manuell auf den korrekten Speicherort fest.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.en.xlf b/src/Tasks/Resources/xlf/Strings.en.xlf
deleted file mode 100644
index 14b9fb2399b..00000000000
--- a/src/Tasks/Resources/xlf/Strings.en.xlf
+++ /dev/null
@@ -1,3315 +0,0 @@
-Ôªø<?xml version="1.0" encoding="utf-8"?>
-<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
-  <file datatype="xml" source-language="en" target-language="en" original="../Strings.resx">
-    <body>
-      <trans-unit id="AppConfig.BindingRedirectMissingOldVersion">
-        <source>BindingRedirect is missing required field 'oldVersion'.</source>
-        <target state="new">BindingRedirect is missing required field 'oldVersion'.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="AppConfig.BindingRedirectMissingNewVersion">
-        <source>BindingRedirect is missing required field 'newVersion'.</source>
-        <target state="new">BindingRedirect is missing required field 'newVersion'.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="AppConfig.InvalidAssemblyIdentityFields">
-        <source>Some attributes of the assemblyIdentity element are incorrect.</source>
-        <target state="new">Some attributes of the assemblyIdentity element are incorrect.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="AppConfig.InvalidOldVersionAttribute">
-        <source>There was a problem parsing the oldVersion attribute. {0}</source>
-        <target state="new">There was a problem parsing the oldVersion attribute. {0}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="AppConfig.InvalidNewVersionAttribute">
-        <source>There was a problem parsing the newVersion attribute. {0}</source>
-        <target state="new">There was a problem parsing the newVersion attribute. {0}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="AssignProjectConfiguration.IllegalMappingString">
-        <source>The platform mapping "{0}" in the platform mapping list "{1}" is malformed.  Please only pass in a semicolon-delimited list of constant string values separated by "=", e.g., "foo=bar;foo2=bar2".</source>
-        <target state="new">The platform mapping "{0}" in the platform mapping list "{1}" is malformed.  Please only pass in a semicolon-delimited list of constant string values separated by "=", e.g., "foo=bar;foo2=bar2".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="AssignProjectConfiguration.ProjectConfigurationUnresolved">
-        <source>Project reference "{0}" has not been resolved.</source>
-        <target state="new">Project reference "{0}" has not been resolved.</target>
-        <note>
-      UE and LOCALIZATION:
-      This is not an error - we pass unresolved references to UnresolvedProjectReferences for further
-      processing in the .targets file.
-    </note>
-      </trans-unit>
-      <trans-unit id="AssignProjectConfiguration.ProjectConfigurationResolutionSuccess">
-        <source>Project reference "{0}" has been assigned the "{1}" configuration.</source>
-        <target state="new">Project reference "{0}" has been assigned the "{1}" configuration.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="AspNetCompiler.CannotCombineMetabaseAndVirtualPathOrPhysicalPath">
-        <source>MSB3461: The MetabasePath parameter cannot be combined with VirtualPath or PhysicalPath.</source>
-        <target state="new">MSB3461: The MetabasePath parameter cannot be combined with VirtualPath or PhysicalPath.</target>
-        <note>{StrBegin="MSB3461: "}</note>
-      </trans-unit>
-      <trans-unit id="AspNetCompiler.MissingMetabasePathAndVirtualPath">
-        <source>MSB3462: Either MetabasePath or VirtualPath must be specified.</source>
-        <target state="new">MSB3462: Either MetabasePath or VirtualPath must be specified.</target>
-        <note>{StrBegin="MSB3462: "}</note>
-      </trans-unit>
-      <trans-unit id="AspNetCompiler.MissingTargetPathForUpdatableApplication">
-        <source>MSB3463: The TargetPath parameter must be specified if the application is updatable.</source>
-        <target state="new">MSB3463: The TargetPath parameter must be specified if the application is updatable.</target>
-        <note>{StrBegin="MSB3463: "}</note>
-      </trans-unit>
-      <trans-unit id="AspNetCompiler.MissingTargetPathForOverwrittenApplication">
-        <source>MSB3464: The TargetPath parameter must be specified if the target directory needs to be overwritten.</source>
-        <target state="new">MSB3464: The TargetPath parameter must be specified if the target directory needs to be overwritten.</target>
-        <note>{StrBegin="MSB3464: "}</note>
-      </trans-unit>
-      <trans-unit id="AssignCulture.CannotExtractCulture">
-        <source>MSB3001: Cannot extract culture information from file name "{0}". {1}</source>
-        <target state="new">MSB3001: Cannot extract culture information from file name "{0}". {1}</target>
-        <note>{StrBegin="MSB3001: "}</note>
-      </trans-unit>
-      <trans-unit id="AssignCulture.Comment">
-        <source>Culture of "{0}" was assigned to file "{1}".</source>
-        <target state="new">Culture of "{0}" was assigned to file "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="AxImp.NoInputFileSpecified">
-        <source>MSB3656: No input file has been passed to the task, exiting.</source>
-        <target state="new">MSB3656: No input file has been passed to the task, exiting.</target>
-        <note>{StrBegin="MSB3656: "}</note>
-      </trans-unit>
-      <trans-unit id="AxTlbBaseTask.CannotSpecifyBothKeyFileAndKeyContainer">
-        <source>MSB3646: Cannot specify values for both KeyFile and KeyContainer.</source>
-        <target state="new">MSB3646: Cannot specify values for both KeyFile and KeyContainer.</target>
-        <note>{StrBegin="MSB3646: "}</note>
-      </trans-unit>
-      <trans-unit id="AxTlbBaseTask.CannotSpecifyDelaySignWithoutEitherKeyFileOrKeyContainer">
-        <source>MSB3647: DelaySign parameter is true, but no KeyFile or KeyContainer was specified.</source>
-        <target state="new">MSB3647: DelaySign parameter is true, but no KeyFile or KeyContainer was specified.</target>
-        <note>{StrBegin="MSB3647: "}</note>
-      </trans-unit>
-      <trans-unit id="AxTlbBaseTask.InvalidKeyFileSpecified">
-        <source>MSB3649: The KeyFile path '{0}' is invalid. KeyFile must point to an existing file.</source>
-        <target state="new">MSB3649: The KeyFile path '{0}' is invalid. KeyFile must point to an existing file.</target>
-        <note>{StrBegin="MSB3649: "}</note>
-      </trans-unit>
-      <trans-unit id="AxTlbBaseTask.SdkOrToolPathNotSpecifiedOrInvalid">
-        <source>MSB3650: Neither SDKToolsPath '{0}' nor ToolPath '{1}' is a valid directory.  One of these must be set.</source>
-        <target state="new">MSB3650: Neither SDKToolsPath '{0}' nor ToolPath '{1}' is a valid directory.  One of these must be set.</target>
-        <note>{StrBegin="MSB3650: "}</note>
-      </trans-unit>
-      <trans-unit id="AxTlbBaseTask.StrongNameUtils.NoKeyPairInContainer">
-        <source>MSB3651: The key container '{0}' does not contain a public/private key pair.</source>
-        <target state="new">MSB3651: The key container '{0}' does not contain a public/private key pair.</target>
-        <note>{StrBegin="MSB3651: "}</note>
-      </trans-unit>
-      <trans-unit id="AxTlbBaseTask.StrongNameUtils.NoKeyPairInFile">
-        <source>MSB3652: The key file '{0}' does not contain a public/private key pair.</source>
-        <target state="new">MSB3652: The key file '{0}' does not contain a public/private key pair.</target>
-        <note>{StrBegin="MSB3652: "}</note>
-      </trans-unit>
-      <trans-unit id="AxTlbBaseTask.ToolNameMustBeSet">
-        <source>MSB3653: AxTlbBaseTask is not an executable task. If deriving from it, please ensure the ToolName property was set.</source>
-        <target state="new">MSB3653: AxTlbBaseTask is not an executable task. If deriving from it, please ensure the ToolName property was set.</target>
-        <note>{StrBegin="MSB3653: "}</note>
-      </trans-unit>
-      <trans-unit id="AxTlbBaseTask.StrongNameUtils.NoPublicKeySpecified">
-        <source>MSB3654: Delay signing requires that at least a public key be specified.  Please either supply a public key using the KeyFile or KeyContainer properties, or disable delay signing.</source>
-        <target state="new">MSB3654: Delay signing requires that at least a public key be specified.  Please either supply a public key using the KeyFile or KeyContainer properties, or disable delay signing.</target>
-        <note>{StrBegin="MSB3654: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.AttributeEmptyWithElement">
-        <source>MSB3752: The "{0}" attribute of the &lt;{1}&gt; element has been set but is empty. If the "{0}" attribute is set it must not be empty.</source>
-        <target state="new">MSB3752: The "{0}" attribute of the &lt;{1}&gt; element has been set but is empty. If the "{0}" attribute is set it must not be empty.</target>
-        <note>{StrBegin="MSB3752: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.CompilingAssembly">
-        <source>Compiling task source code</source>
-        <target state="new">Compiling task source code</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.InvalidCodeElementAttribute">
-        <source>MSB3756: The attribute "{0}" is not valid for the &lt;Code&gt; element.  Valid attributes are "Language", "Source", and "Type".</source>
-        <target state="new">MSB3756: The attribute "{0}" is not valid for the &lt;Code&gt; element.  Valid attributes are "Language", "Source", and "Type".</target>
-        <note>{StrBegin="MSB3756: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.InvalidCodeLanguage">
-        <source>MSB3759: The specified code language "{0}" is invalid.  The supported code languages are "{1}".</source>
-        <target state="new">MSB3759: The specified code language "{0}" is invalid.  The supported code languages are "{1}".</target>
-        <note>{StrBegin="MSB3759: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.InvalidCodeType">
-        <source>MSB3759: The specified code type "{0}" is invalid.  The supported code types are "{1}".</source>
-        <target state="new">MSB3759: The specified code type "{0}" is invalid.  The supported code types are "{1}".</target>
-        <note>{StrBegin="MSB3759: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.InvalidTaskXml">
-        <source>MSB3761: The specified task XML is invalid.  {0}</source>
-        <target state="new">MSB3761: The specified task XML is invalid.  {0}</target>
-        <note>{StrBegin="MSB3761: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.NoSourceCode">
-        <source>MSB3760: You must specify source code within the Code element or a path to a file containing source code.</source>
-        <target state="new">MSB3760: You must specify source code within the Code element or a path to a file containing source code.</target>
-        <note>{StrBegin="MSB3760: "}</note>
-      </trans-unit>
-      <trans-unit id="Compiler.FatalArguments">
-        <source>MSB3881: Fatal Error: more than {0} command line arguments.</source>
-        <target state="new">MSB3881: Fatal Error: more than {0} command line arguments.</target>
-        <note>{StrBegin="MSB3881: "}</note>
-      </trans-unit>
-      <trans-unit id="Compiler.FatalNoResponse">
-        <source>MSB3882: Fatal Error: No response from server.</source>
-        <target state="new">MSB3882: Fatal Error: No response from server.</target>
-        <note>{StrBegin="MSB3882: "}</note>
-      </trans-unit>
-      <trans-unit id="Compiler.UnexpectedException">
-        <source>MSB3883: Unexpected exception: </source>
-        <target state="new">MSB3883: Unexpected exception: </target>
-        <note>{StrBegin="MSB3883: "}</note>
-      </trans-unit>
-      <trans-unit id="Compiler.UnableToFindRuleSet">
-        <source>MSB3884: Could not find rule set file "{0}".</source>
-        <target state="new">MSB3884: Could not find rule set file "{0}".</target>
-        <note>{StrBegin="MSB3884: "}</note>
-      </trans-unit>
-      <trans-unit id="Copy.CreatesDirectory">
-        <source>Creating directory "{0}".</source>
-        <target state="new">Creating directory "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Copy.DestinationIsDirectory">
-        <source>MSB3024: Could not copy the file "{0}" to the destination file "{1}", because the destination is a folder instead of a file. To copy the source file into a folder, consider using the DestinationFolder parameter instead of DestinationFiles.</source>
-        <target state="new">MSB3024: Could not copy the file "{0}" to the destination file "{1}", because the destination is a folder instead of a file. To copy the source file into a folder, consider using the DestinationFolder parameter instead of DestinationFiles.</target>
-        <note>{StrBegin="MSB3024: "}</note>
-      </trans-unit>
-      <trans-unit id="Copy.DidNotCopyBecauseOfFileMatch">
-        <source>Did not copy from file "{0}" to file "{1}" because the "{2}" parameter was set to "{3}" in the project and the files' sizes and timestamps match.</source>
-        <target state="new">Did not copy from file "{0}" to file "{1}" because the "{2}" parameter was set to "{3}" in the project and the files' sizes and timestamps match.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Copy.Error">
-        <source>MSB3021: Unable to copy file "{0}" to "{1}". {2}</source>
-        <target state="new">MSB3021: Unable to copy file "{0}" to "{1}". {2}</target>
-        <note>{StrBegin="MSB3021: "}</note>
-      </trans-unit>
-      <trans-unit id="Copy.ErrorIfLinkFailsSetWithoutLinkOption">
-        <source>MSB3892: ErrorIfLinkFails requires UseHardlinksIfPossible or UseSymbolicLinksIfPossible to be set.</source>
-        <target state="new">MSB3892: ErrorIfLinkFails requires UseHardlinksIfPossible or UseSymbolicLinksIfPossible to be set.</target>
-        <note>{StrBegin="MSB3892: "} LOCALIZATION: Do not localize "ErrorIfLinkFails", "UseHardLinksIfPossible", or "UseSymbolicLinksIfPossible".</note>
-      </trans-unit>
-      <trans-unit id="Copy.ExactlyOneTypeOfDestination">
-        <source>MSB3022: Both "{0}" and "{1}" were specified as input parameters in the project file. Please choose one or the other.</source>
-        <target state="new">MSB3022: Both "{0}" and "{1}" were specified as input parameters in the project file. Please choose one or the other.</target>
-        <note>{StrBegin="MSB3022: "}</note>
-      </trans-unit>
-      <trans-unit id="Copy.FileComment">
-        <source>Copying file from "{0}" to "{1}".</source>
-        <target state="new">Copying file from "{0}" to "{1}".</target>
-        <note>LOCALIZATION: {0} and {1} are paths.</note>
-      </trans-unit>
-      <trans-unit id="Copy.HardLinkComment">
-        <source>Creating hard link to copy "{0}" to "{1}".</source>
-        <target state="new">Creating hard link to copy "{0}" to "{1}".</target>
-        <note>LOCALIZATION: {0} and {1} are paths.</note>
-      </trans-unit>
-      <trans-unit id="Copy.LinkFailed">
-        <source>MSB3893: Could not use a link to copy "{0}" to "{1}".</source>
-        <target state="new">MSB3893: Could not use a link to copy "{0}" to "{1}".</target>
-        <note>{StrBegin="MSB3893: "} LOCALIZATION: {0} and {1} are paths.</note>
-      </trans-unit>
-      <trans-unit id="Copy.RetryingAsFileCopy">
-        <source>Could not use a link to copy "{0}" to "{1}". Copying the file instead. {2}</source>
-        <target state="new">Could not use a link to copy "{0}" to "{1}". Copying the file instead. {2}</target>
-        <note>LOCALIZATION: {0} and {1} are paths. {2} is an optional localized message.</note>
-      </trans-unit>
-      <trans-unit id="Copy.NeedsDestination">
-        <source>MSB3023: No destination specified for Copy. Please supply either "{0}" or "{1}".</source>
-        <target state="new">MSB3023: No destination specified for Copy. Please supply either "{0}" or "{1}".</target>
-        <note>{StrBegin="MSB3023: "}</note>
-      </trans-unit>
-      <trans-unit id="Copy.RemovingReadOnlyAttribute">
-        <source>Removing read-only attribute from "{0}".</source>
-        <target state="new">Removing read-only attribute from "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Copy.SourceIsDirectory">
-        <source>MSB3025: The source file "{0}" is actually a directory.  The "Copy" task does not support copying directories.</source>
-        <target state="new">MSB3025: The source file "{0}" is actually a directory.  The "Copy" task does not support copying directories.</target>
-        <note>{StrBegin="MSB3025: "}</note>
-      </trans-unit>
-      <trans-unit id="Copy.SymbolicLinkComment">
-        <source>Creating symbolic link to copy "{0}" to "{1}".</source>
-        <target state="new">Creating symbolic link to copy "{0}" to "{1}".</target>
-        <note>LOCALIZATION: {0} and {1} are paths.</note>
-      </trans-unit>
-      <trans-unit id="Copy.Retrying">
-        <source>MSB3026: Could not copy "{0}" to "{1}". Beginning retry {2} in {3}ms. {4} {5}</source>
-        <target state="new">MSB3026: Could not copy "{0}" to "{1}". Beginning retry {2} in {3}ms. {4} {5}</target>
-        <note>{StrBegin="MSB3026: "} LOCALIZATION: {0} and {1} are paths. {2} and {3} are numbers. {4} is an optional localized message. {5} is either empty or a string from Copy.FileLocked ("The file is locked by: "{0}"")</note>
-      </trans-unit>
-      <trans-unit id="Copy.ExceededRetries">
-        <source>MSB3027: Could not copy "{0}" to "{1}". Exceeded retry count of {2}. Failed. {3}</source>
-        <target state="new">MSB3027: Could not copy "{0}" to "{1}". Exceeded retry count of {2}. Failed. {3}</target>
-        <note>{StrBegin="MSB3027: "} LOCALIZATION: {0} and {1} are paths. {2} is a number. {3} is either empty or a string from Copy.FileLocked ("The file is locked by: "{0}"")</note>
-      </trans-unit>
-      <trans-unit id="Copy.InvalidRetryCount">
-        <source>MSB3028: {0} is an invalid retry count. Value must not be negative.</source>
-        <target state="new">MSB3028: {0} is an invalid retry count. Value must not be negative.</target>
-        <note>{StrBegin="MSB3028: "} LOCALIZATION: {0} is a number.</note>
-      </trans-unit>
-      <trans-unit id="Copy.InvalidRetryDelay">
-        <source>MSB3029: {0} is an invalid retry delay. Value must not be negative.</source>
-        <target state="new">MSB3029: {0} is an invalid retry delay. Value must not be negative.</target>
-        <note>{StrBegin="MSB3029: "} LOCALIZATION: {0} is a number.</note>
-      </trans-unit>
-      <trans-unit id="Copy.SourceFileNotFound">
-        <source>MSB3030: Could not copy the file "{0}" because it was not found.</source>
-        <target state="new">MSB3030: Could not copy the file "{0}" because it was not found.</target>
-        <note>{StrBegin="MSB3030: "} LOCALIZATION: {0} is a number.</note>
-      </trans-unit>
-      <trans-unit id="Copy.FileLocked">
-        <source>The file is locked by: "{0}"</source>
-        <target state="new">The file is locked by: "{0}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CreateItem.AdditionalMetadataError">
-        <source>MSB3031: Could not set additional metadata. "{0}" is a reserved metadata name and cannot be modified.</source>
-        <target state="new">MSB3031: Could not set additional metadata. "{0}" is a reserved metadata name and cannot be modified.</target>
-        <note>{StrBegin="MSB3031: "} UE: Tasks and OM users are not allowed to remove or change the value of the built-in meta-data on items e.g. the meta-data "FullPath", "RelativeDir", etc. are reserved.</note>
-      </trans-unit>
-      <trans-unit id="CreateManifestResourceName.AssignedName">
-        <source>Resource file '{0}' gets manifest resource name '{1}'.</source>
-        <target state="new">Resource file '{0}' gets manifest resource name '{1}'.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CreateManifestResourceName.DefinitionFoundWithinConditionalDirective">
-        <source>MSB3042: A namespace or class definition was found within a conditional compilation directive in the file "{0}".  This may lead to an incorrect choice for the manifest resource name for resource "{1}".</source>
-        <target state="new">MSB3042: A namespace or class definition was found within a conditional compilation directive in the file "{0}".  This may lead to an incorrect choice for the manifest resource name for resource "{1}".</target>
-        <note>{StrBegin="MSB3042: "}</note>
-      </trans-unit>
-      <trans-unit id="CreateManifestResourceName.DependsUpon">
-        <source>Resource file '{0}' depends on '{1}'.</source>
-        <target state="new">Resource file '{0}' depends on '{1}'.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CreateManifestResourceName.DependsUponNothing">
-        <source>Resource file '{0}' doesn't depend on any other file.</source>
-        <target state="new">Resource file '{0}' doesn't depend on any other file.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CreateManifestResourceName.Error">
-        <source>MSB3041: Unable to create a manifest resource name for "{0}". {1}</source>
-        <target state="new">MSB3041: Unable to create a manifest resource name for "{0}". {1}</target>
-        <note>{StrBegin="MSB3041: "}</note>
-      </trans-unit>
-      <trans-unit id="CreateManifestResourceName.NoRootNamespace">
-        <source>Root namespace is empty.</source>
-        <target state="new">Root namespace is empty.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CreateManifestResourceName.RootNamespace">
-        <source>Root namespace is '{0}'.</source>
-        <target state="new">Root namespace is '{0}'.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Csc.AssemblyAliasContainsIllegalCharacters">
-        <source>MSB3053: The assembly alias "{1}" on reference "{0}" contains illegal characters.</source>
-        <target state="new">MSB3053: The assembly alias "{1}" on reference "{0}" contains illegal characters.</target>
-        <note>{StrBegin="MSB3053: "}</note>
-      </trans-unit>
-      <trans-unit id="Csc.InvalidParameter">
-        <source>MSB3051: The parameter to the compiler is invalid.  {0}</source>
-        <target state="new">MSB3051: The parameter to the compiler is invalid.  {0}</target>
-        <note>{StrBegin="MSB3051: "}</note>
-      </trans-unit>
-      <trans-unit id="Csc.InvalidParameterWarning">
-        <source>MSB3052: The parameter to the compiler is invalid, '{0}{1}' will be ignored.</source>
-        <target state="new">MSB3052: The parameter to the compiler is invalid, '{0}{1}' will be ignored.</target>
-        <note>{StrBegin="MSB3052: "}</note>
-      </trans-unit>
-      <trans-unit id="Delete.DeletingFile">
-        <source>Deleting file "{0}".</source>
-        <target state="new">Deleting file "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Delete.Error">
-        <source>MSB3061: Unable to delete file "{0}". {1}</source>
-        <target state="new">MSB3061: Unable to delete file "{0}". {1}</target>
-        <note>{StrBegin="MSB3061: "}</note>
-      </trans-unit>
-      <trans-unit id="Delete.SkippingNonexistentFile">
-        <source>File "{0}" doesn't exist. Skipping.</source>
-        <target state="new">File "{0}" doesn't exist. Skipping.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="DownloadFile.DidNotDownloadBecauseOfFileMatch">
-        <source>Did not download file from "{0}" to "{1}" because the "{2}" parameter was set to "{3}" in the project and the files' sizes match.</source>
-        <target state="new">Did not download file from "{0}" to "{1}" because the "{2}" parameter was set to "{3}" in the project and the files' sizes match.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="DownloadFile.Downloading">
-        <source>Downloading from "{0}" to "{1}" ({2:N0} bytes).</source>
-        <target state="new">Downloading from "{0}" to "{1}" ({2:N0} bytes).</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="DownloadFile.ErrorDownloading">
-        <source>MSB3923: Failed to download file "{0}".  {1}</source>
-        <target state="new">MSB3923: Failed to download file "{0}".  {1}</target>
-        <note>{StrBegin="MSB3923: "}</note>
-      </trans-unit>
-      <trans-unit id="DownloadFile.ErrorInvalidUrl">
-        <source>MSB3921: The specified URL "{0}" is not valid.</source>
-        <target state="new">MSB3921: The specified URL "{0}" is not valid.</target>
-        <note>{StrBegin="MSB3921: "}</note>
-      </trans-unit>
-      <trans-unit id="DownloadFile.ErrorUnknownFileName">
-        <source>MSB3922: Failed to determine a file name from the URL "{0}".  Please specify a file name with the "{1}" parameter.</source>
-        <target state="new">MSB3922: Failed to determine a file name from the URL "{0}".  Please specify a file name with the "{1}" parameter.</target>
-        <note>{StrBegin="MSB3922: "}</note>
-      </trans-unit>
-      <trans-unit id="DownloadFile.Retrying">
-        <source>MSB3924: Failed to download file "{0}". Beginning retry {1} in {2}ms. {3}</source>
-        <target state="new">MSB3924: Failed to download file "{0}". Beginning retry {1} in {2}ms. {3}</target>
-        <note>{StrBegin="MSB3924: "}</note>
-      </trans-unit>
-      <trans-unit id="Exec.AllDriveLettersMappedError">
-        <source>MSB3071: All drive letters from A: through Z: are currently in use. Since the working directory "{0}" is a UNC path, the "Exec" task needs a free drive letter to map the UNC path to. Disconnect from one or more shared resources to free up drive letters, or specify a local working directory before attempting this command again.</source>
-        <target state="new">MSB3071: All drive letters from A: through Z: are currently in use. Since the working directory "{0}" is a UNC path, the "Exec" task needs a free drive letter to map the UNC path to. Disconnect from one or more shared resources to free up drive letters, or specify a local working directory before attempting this command again.</target>
-        <note>{StrBegin="MSB3071: "}LOCALIZATION: "Exec", "A:", and "Z:" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="Exec.CommandFailed">
-        <source>MSB3073: The command "{0}" exited with code {1}.</source>
-        <target state="new">MSB3073: The command "{0}" exited with code {1}.</target>
-        <note>{StrBegin="MSB3073: "}</note>
-      </trans-unit>
-      <trans-unit id="Exec.CommandFailedAccessDenied">
-        <source>MSB3075: The command "{0}" exited with code {1}. Please verify that you have sufficient rights to run this command.</source>
-        <target state="new">MSB3075: The command "{0}" exited with code {1}. Please verify that you have sufficient rights to run this command.</target>
-        <note>{StrBegin="MSB3075: "}</note>
-      </trans-unit>
-      <trans-unit id="Exec.CommandFailedNoErrorCode">
-        <source>The command "{0}" exited with code {1}.</source>
-        <target state="new">The command "{0}" exited with code {1}.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Exec.InvalidRegex">
-        <source>MSB3076: The regular expression "{0}" that was supplied is invalid. {1}</source>
-        <target state="new">MSB3076: The regular expression "{0}" that was supplied is invalid. {1}</target>
-        <note>{StrBegin="MSB3076: "}</note>
-      </trans-unit>
-      <trans-unit id="Exec.MissingCommandError">
-        <source>MSB3072: The "Exec" task needs a command to execute.</source>
-        <target state="new">MSB3072: The "Exec" task needs a command to execute.</target>
-        <note>{StrBegin="MSB3072: "}LOCALIZATION: "Exec" should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="Exec.InvalidWorkingDirectory">
-        <source>The working directory "{0}" does not exist.</source>
-        <target state="new">The working directory "{0}" does not exist.</target>
-        <note>No error code because an error will be prefixed.</note>
-      </trans-unit>
-      <trans-unit id="FileHash.FileNotFound">
-        <source>MSB3954: Failed to compute hash for file '{0}' because it does not exist or is inaccessible.</source>
-        <target state="new">MSB3954: Failed to compute hash for file '{0}' because it does not exist or is inaccessible.</target>
-        <note>{StrBegin="MSB3954: "}</note>
-      </trans-unit>
-      <trans-unit id="FileHash.UnrecognizedHashAlgorithm">
-        <source>MSB3953: Unrecognized hash algorithm name '{0}'. Allowed algorithms are 'SHA256', 'SHA384', and 'SHA512'.</source>
-        <target state="new">MSB3953: Unrecognized hash algorithm name '{0}'. Allowed algorithms are 'SHA256', 'SHA384', and 'SHA512'.</target>
-        <note>{StrBegin="MSB3953: "}</note>
-      </trans-unit>
-      <trans-unit id="FileHash.UnrecognizedHashEncoding">
-        <source>MSB3951: Unrecognized hash encoding '{0}'. Allowed encodings are 'hex' and 'base64'.</source>
-        <target state="new">MSB3951: Unrecognized hash encoding '{0}'. Allowed encodings are 'hex' and 'base64'.</target>
-        <note>{StrBegin="MSB3951: "}</note>
-      </trans-unit>
-      <trans-unit id="FindInList.Found">
-        <source>Found "{0}".</source>
-        <target state="new">Found "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="FindInList.InvalidPath">
-        <source>"{0}" is not a valid file name. {1}</source>
-        <target state="new">"{0}" is not a valid file name. {1}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="FindUnderPath.ComparisonPath">
-        <source>Comparison path is "{0}".</source>
-        <target state="new">Comparison path is "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="FindUnderPath.InvalidParameter">
-        <source>MSB3541: {0} has invalid value "{1}". {2}</source>
-        <target state="new">MSB3541: {0} has invalid value "{1}". {2}</target>
-        <note>{StrBegin="MSB3541: "}</note>
-      </trans-unit>
-      <trans-unit id="General.CouldNotDeleteStateFile">
-        <source>MSB3102: Could not delete state file "{0}". {1}</source>
-        <target state="new">MSB3102: Could not delete state file "{0}". {1}</target>
-        <note>{StrBegin="MSB3102: "}</note>
-      </trans-unit>
-      <trans-unit id="General.CouldNotLocateAssembly">
-        <source>Could not locate the assembly "{0}". Check to make sure the assembly exists on disk.</source>
-        <target state="new">Could not locate the assembly "{0}". Check to make sure the assembly exists on disk.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.CouldNotReadStateFile">
-        <source>MSB3088: Could not read state file "{0}". {1}</source>
-        <target state="new">MSB3088: Could not read state file "{0}". {1}</target>
-        <note>{StrBegin="MSB3088: "}</note>
-      </trans-unit>
-      <trans-unit id="General.CouldNotReadStateFileMessage">
-        <source>Could not read state file "{0}". {1}</source>
-        <target state="new">Could not read state file "{0}". {1}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.CouldNotSetHostObjectParameter">
-        <source>MSB3081: A problem occurred while trying to set the "{0}" parameter for the IDE's in-process compiler. {1}</source>
-        <target state="new">MSB3081: A problem occurred while trying to set the "{0}" parameter for the IDE's in-process compiler. {1}</target>
-        <note>{StrBegin="MSB3081: "}</note>
-      </trans-unit>
-      <trans-unit id="General.CouldNotWriteStateFile">
-        <source>MSB3101: Could not write state file "{0}". {1}</source>
-        <target state="new">MSB3101: Could not write state file "{0}". {1}</target>
-        <note>{StrBegin="MSB3101: "}</note>
-      </trans-unit>
-      <trans-unit id="General.DuplicateItemsNotSupported">
-        <source>MSB3105: The item "{0}" was specified more than once in the "{1}" parameter.  Duplicate items are not supported by the "{1}" parameter.</source>
-        <target state="new">MSB3105: The item "{0}" was specified more than once in the "{1}" parameter.  Duplicate items are not supported by the "{1}" parameter.</target>
-        <note>{StrBegin="MSB3105: "}</note>
-      </trans-unit>
-      <trans-unit id="General.DuplicateItemsNotSupportedWithMetadata">
-        <source>MSB3083: The item "{0}" was specified more than once in the "{1}" parameter and both items had the same value "{2}" for the "{3}" metadata.  Duplicate items are not supported by the "{1}" parameter unless they have different values for the "{3}" metadata.</source>
-        <target state="new">MSB3083: The item "{0}" was specified more than once in the "{1}" parameter and both items had the same value "{2}" for the "{3}" metadata.  Duplicate items are not supported by the "{1}" parameter unless they have different values for the "{3}" metadata.</target>
-        <note>{StrBegin="MSB3083: "}</note>
-      </trans-unit>
-      <trans-unit id="General.ErrorExecutingTask">
-        <source>MSB3108: Error executing the {0} task. {1}</source>
-        <target state="new">MSB3108: Error executing the {0} task. {1}</target>
-        <note>{StrBegin="MSB3108: "}</note>
-      </trans-unit>
-      <trans-unit id="General.ExpectedFileGotDirectory">
-        <source>Expected a file but got directory "{0}".</source>
-        <target state="new">Expected a file but got directory "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.ExpectedFileMissing">
-        <source>Expected file "{0}" does not exist.</source>
-        <target state="new">Expected file "{0}" does not exist.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.FrameworksFileNotFound">
-        <source>MSB3082: Task failed because "{0}" was not found, or the .NET Framework {1} is not installed.  Please install the .NET Framework {1}.</source>
-        <target state="new">MSB3082: Task failed because "{0}" was not found, or the .NET Framework {1} is not installed.  Please install the .NET Framework {1}.</target>
-        <note>{StrBegin="MSB3082: "}</note>
-      </trans-unit>
-      <trans-unit id="General.IncorrectHostObject">
-        <source>MSB3087: An incompatible host object was passed into the "{0}" task.  The host object for this task must implement the "{1}" interface.</source>
-        <target state="new">MSB3087: An incompatible host object was passed into the "{0}" task.  The host object for this task must implement the "{1}" interface.</target>
-        <note>{StrBegin="MSB3087: "}</note>
-      </trans-unit>
-      <trans-unit id="General.IncompatibleStateFileType">
-        <source>The format of this state file is not valid.</source>
-        <target state="new">The format of this state file is not valid.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.InvalidAttributeMetadata">
-        <source>Item "{0}" has attribute "{1}" with value "{2}" that could not be converted to "{3}".</source>
-        <target state="new">Item "{0}" has attribute "{1}" with value "{2}" that could not be converted to "{3}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.InvalidArgument">
-        <source>MSB3095: Invalid argument. {0}</source>
-        <target state="new">MSB3095: Invalid argument. {0}</target>
-        <note>{StrBegin="MSB3095: "}</note>
-      </trans-unit>
-      <trans-unit id="General.InvalidAssembly">
-        <source>MSB3097: File "{0}" is not a valid assembly.</source>
-        <target state="new">MSB3097: File "{0}" is not a valid assembly.</target>
-        <note>{StrBegin="MSB3097: "}</note>
-      </trans-unit>
-      <trans-unit id="General.InvalidValue">
-        <source>MSB3098: "{1}" task received an invalid value for the "{0}" parameter.</source>
-        <target state="new">MSB3098: "{1}" task received an invalid value for the "{0}" parameter.</target>
-        <note>{StrBegin="MSB3098: "}</note>
-      </trans-unit>
-      <trans-unit id="General.InvalidAssemblyName">
-        <source>MSB3099: Invalid assembly name "{0}". {1}</source>
-        <target state="new">MSB3099: Invalid assembly name "{0}". {1}</target>
-        <note>{StrBegin="MSB3099: "}UE: This message is shown when RegisterAssembly or UnregisterAssembly is passed an assembly with an invalid filename. "{0}" is the name of the file, and "{1}" is a message explaining the problem. LOCALIZATION: "{1}" is a localized message.</note>
-      </trans-unit>
-      <trans-unit id="General.InvalidPropertyError">
-        <source>MSB3100: Syntax for "{0}" parameter is not valid ({1}). Correct syntax is {0}="&lt;name&gt;=&lt;value&gt;".</source>
-        <target state="new">MSB3100: Syntax for "{0}" parameter is not valid ({1}). Correct syntax is {0}="&lt;name&gt;=&lt;value&gt;".</target>
-        <note>{StrBegin="MSB3100: "}This error is shown if the user does any of the following:
-    Properties="foo"              (missing property value)
-    Properties="=4"               (missing property name)
-    The user must pass in an actual property name and value, as in Properties="Configuration=Debug".</note>
-      </trans-unit>
-      <trans-unit id="General.GlobalProperties">
-        <source>Global Properties:</source>
-        <target state="new">Global Properties:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.StateFileAlreadyPresent">
-        <source>MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running the ResolveAssemblyReference task normally, do not set the "AssemblyInformationCacheOutputPath" parameter of the ResolveAssemblyReference task.</source>
-        <target state="new">MSB3667: There is already a file at "{0}". If you are trying to create a precomputed cache, ensure that you are building a single project that depends on your assemblies rather than building your assemblies themselves. If you are running the ResolveAssemblyReference task normally, do not set the "AssemblyInformationCacheOutputPath" parameter of the ResolveAssemblyReference task.</target>
-        <note>{StrBegin="MSB3667: "}</note>
-      </trans-unit>
-      <trans-unit id="General.UndefineProperties">
-        <source>Removing Properties:</source>
-        <target state="new">Removing Properties:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.OverridingProperties">
-        <source>Overriding Global Properties for project "{0}" with:</source>
-        <target state="new">Overriding Global Properties for project "{0}" with:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.AdditionalProperties">
-        <source>Additional Properties for project "{0}":</source>
-        <target state="new">Additional Properties for project "{0}":</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.ProjectUndefineProperties">
-        <source>Removing Properties for project "{0}":</source>
-        <target state="new">Removing Properties for project "{0}":</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.InvalidResxFile">
-        <source>MSB3103: Invalid Resx file. {0}</source>
-        <target state="new">MSB3103: Invalid Resx file. {0}</target>
-        <note>{StrBegin="MSB3103: "}</note>
-      </trans-unit>
-      <trans-unit id="General.MalformedAssemblyName">
-        <source>MSB3106: Assembly strong name "{0}" is either a path which could not be found or it is a full assembly name which is badly formed. If it is a full assembly name it may contain characters that need to be escaped with backslash(\). Those characters are Equals(=), Comma(,), Quote("), Apostrophe('), Backslash(\).</source>
-        <target state="new">MSB3106: Assembly strong name "{0}" is either a path which could not be found or it is a full assembly name which is badly formed. If it is a full assembly name it may contain characters that need to be escaped with backslash(\). Those characters are Equals(=), Comma(,), Quote("), Apostrophe('), Backslash(\).</target>
-        <note>{StrBegin="MSB3106: "}</note>
-      </trans-unit>
-      <trans-unit id="General.MissingOrUnknownProjectReferenceAttribute">
-        <source>MSB3107: The specified project reference metadata for the reference "{0}" is missing or has an invalid value: {1}</source>
-        <target state="new">MSB3107: The specified project reference metadata for the reference "{0}" is missing or has an invalid value: {1}</target>
-        <note>{StrBegin="MSB3107: "}</note>
-      </trans-unit>
-      <trans-unit id="General.ParameterUnsupportedOnHostCompiler">
-        <source>The IDE's in-process compiler does not support the specified values for the "{0}" parameter.  Therefore, this task will fallback to using the command-line compiler.</source>
-        <target state="new">The IDE's in-process compiler does not support the specified values for the "{0}" parameter.  Therefore, this task will fallback to using the command-line compiler.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.PlatformSDKFileNotFound">
-        <source>MSB3091: Task failed because "{0}" was not found, or the correct Microsoft Windows SDK is not installed. The task is looking for "{0}" in the "bin" subdirectory beneath the location specified in the {1} value of the registry key {2}. You may be able to solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.  4) Pass the correct location into the "ToolPath" parameter of the task.</source>
-        <target state="new">MSB3091: Task failed because "{0}" was not found, or the correct Microsoft Windows SDK is not installed. The task is looking for "{0}" in the "bin" subdirectory beneath the location specified in the {1} value of the registry key {2}. You may be able to solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.  4) Pass the correct location into the "ToolPath" parameter of the task.</target>
-        <note>{StrBegin="MSB3091: "}</note>
-      </trans-unit>
-      <trans-unit id="General.PlatformSDKFileNotFoundSdkToolsPath">
-        <source>MSB3084: Task attempted to find "{0}" in two locations. 1) Under the "{1}" processor specific directory which is generated based on SdkToolsPath 2) The x86 specific directory under "{2}" which is specified by the SDKToolsPath property. You may be able to solve the problem by doing one of the following:  1) Set the "SDKToolsPath" property to the location of the Microsoft Windows SDK.</source>
-        <target state="new">MSB3084: Task attempted to find "{0}" in two locations. 1) Under the "{1}" processor specific directory which is generated based on SdkToolsPath 2) The x86 specific directory under "{2}" which is specified by the SDKToolsPath property. You may be able to solve the problem by doing one of the following:  1) Set the "SDKToolsPath" property to the location of the Microsoft Windows SDK.</target>
-        <note>{StrBegin="MSB3084: "}</note>
-      </trans-unit>
-      <trans-unit id="General.SdkToolsPathNotSpecifiedOrToolDoesNotExist">
-        <source>Task attempted to find "{0}" using the SdkToolsPath value "{1}". Make sure the SdkToolsPath is set to the correct value and the tool exists in the correct processor specific location below it.</source>
-        <target state="new">Task attempted to find "{0}" using the SdkToolsPath value "{1}". Make sure the SdkToolsPath is set to the correct value and the tool exists in the correct processor specific location below it.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.SdkToolsPathToolDoesNotExist">
-        <source>MSB3086: Task could not find "{0}" using the SdkToolsPath "{1}" or the registry key "{2}". Make sure the SdkToolsPath is set and the tool exists in the correct processor specific location under the SdkToolsPath and that the Microsoft Windows SDK is installed</source>
-        <target state="new">MSB3086: Task could not find "{0}" using the SdkToolsPath "{1}" or the registry key "{2}". Make sure the SdkToolsPath is set and the tool exists in the correct processor specific location under the SdkToolsPath and that the Microsoft Windows SDK is installed</target>
-        <note>{StrBegin="MSB3086: "}</note>
-      </trans-unit>
-      <trans-unit id="General.SdkToolsPathError">
-        <source>MSB3666: The SDK tool "{0}" could not be found. {1}</source>
-        <target state="new">MSB3666: The SDK tool "{0}" could not be found. {1}</target>
-        <note>{StrBegin="MSB3666: "} The {1} will be the exception message</note>
-      </trans-unit>
-      <trans-unit id="General.ReferenceDoesNotExist">
-        <source>MSB3104: The referenced assembly "{0}" was not found. If this assembly is produced by another one of your projects, please make sure to build that project before building this one.</source>
-        <target state="new">MSB3104: The referenced assembly "{0}" was not found. If this assembly is produced by another one of your projects, please make sure to build that project before building this one.</target>
-        <note>{StrBegin="MSB3104: "}</note>
-      </trans-unit>
-      <trans-unit id="General.ToolCommandFailed">
-        <source>MSB3093: The command exited with code {0}.</source>
-        <target state="new">MSB3093: The command exited with code {0}.</target>
-        <note>{StrBegin="MSB3093: "}</note>
-      </trans-unit>
-      <trans-unit id="General.TwoVectorsMustHaveSameLength">
-        <source>MSB3094: "{2}" refers to {0} item(s), and "{3}" refers to {1} item(s). They must have the same number of items.</source>
-        <target state="new">MSB3094: "{2}" refers to {0} item(s), and "{3}" refers to {1} item(s). They must have the same number of items.</target>
-        <note>{StrBegin="MSB3094: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBindingRedirects.MissingConfigurationNode">
-        <source>MSB3831: The application configuration file must have root configuration element.</source>
-        <target state="new">MSB3831: The application configuration file must have root configuration element.</target>
-        <note>{StrBegin="MSB3831: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBindingRedirects.MalformedVersionNumber">
-        <source>MSB3832: The version number "{0}" is invalid.</source>
-        <target state="new">MSB3832: The version number "{0}" is invalid.</target>
-        <note>{StrBegin="MSB3832: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBindingRedirects.MalformedAssemblyName">
-        <source>MSB3833: The assembly name "{0}" contained in the suggested binding redirect is invalid.</source>
-        <target state="new">MSB3833: The assembly name "{0}" contained in the suggested binding redirect is invalid.</target>
-        <note>{StrBegin="MSB3833: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBindingRedirects.NoSuggestedRedirects">
-        <source>No suggested binding redirects from ResolveAssemblyReferences.</source>
-        <target state="new">No suggested binding redirects from ResolveAssemblyReferences.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateBindingRedirects.MissingNode">
-        <source>MSB3835: The "{0}" node is missing from the "{1}" node. Skipping.</source>
-        <target state="new">MSB3835: The "{0}" node is missing from the "{1}" node. Skipping.</target>
-        <note>{StrBegin="MSB3835: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBindingRedirects.OverlappingBindingRedirect">
-        <source>MSB3836: The explicit binding redirect on "{0}" conflicts with an autogenerated binding redirect. Consider removing it from the application configuration file or disabling autogenerated binding redirects. The build will replace it with: "{1}".</source>
-        <target state="new">MSB3836: The explicit binding redirect on "{0}" conflicts with an autogenerated binding redirect. Consider removing it from the application configuration file or disabling autogenerated binding redirects. The build will replace it with: "{1}".</target>
-        <note>{StrBegin="MSB3836: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBindingRedirects.ProcessingSuggestedRedirect">
-        <source>Processing suggested binding redirect on "{0}" with MaxVersion "{1}".</source>
-        <target state="new">Processing suggested binding redirect on "{0}" with MaxVersion "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.CircularDependency">
-        <source>MSB3161: A circular dependency was detected between the following built packages: {0}.</source>
-        <target state="new">MSB3161: A circular dependency was detected between the following built packages: {0}.</target>
-        <note>{StrBegin="MSB3161: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.CopyError">
-        <source>MSB3142: An error occurred trying to copy '{0}' to '{1}': {2}</source>
-        <target state="new">MSB3142: An error occurred trying to copy '{0}' to '{1}': {2}</target>
-        <note>{StrBegin="MSB3142: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.CopyPackageError">
-        <source>MSB3143: An error occurred trying to copy '{0}' for item '{1}': {2}</source>
-        <target state="new">MSB3143: An error occurred trying to copy '{0}' for item '{1}': {2}</target>
-        <note>{StrBegin="MSB3143: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.DependencyNotFound">
-        <source>MSB3162: The '{0}' item selected requires '{1}'. Select the missing prerequisite in the Prerequisites Dialog Box or create a bootstrapper package for the missing prerequisite.</source>
-        <target state="new">MSB3162: The '{0}' item selected requires '{1}'. Select the missing prerequisite in the Prerequisites Dialog Box or create a bootstrapper package for the missing prerequisite.</target>
-        <note>{StrBegin="MSB3162: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.DifferingPublicKeys">
-        <source>MSB3165: The value of the '{0}' attribute in '{1}' does not match that of file '{2}'.</source>
-        <target state="new">MSB3165: The value of the '{0}' attribute in '{1}' does not match that of file '{2}'.</target>
-        <note>{StrBegin="MSB3165: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.DuplicateItems">
-        <source>MSB3168: Duplicate item '{0}' will be ignored.</source>
-        <target state="new">MSB3168: Duplicate item '{0}' will be ignored.</target>
-        <note>{StrBegin="MSB3168: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.General">
-        <source>MSB3169: An error occurred generating a bootstrapper: {0}</source>
-        <target state="new">MSB3169: An error occurred generating a bootstrapper: {0}</target>
-        <note>{StrBegin="MSB3169: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.IncludedProductIncluded">
-        <source>MSB3151: Item '{0}' already includes '{1}'.</source>
-        <target state="new">MSB3151: Item '{0}' already includes '{1}'.</target>
-        <note>{StrBegin="MSB3151: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.InvalidComponentsLocation">
-        <source>MSB3163: Build input parameter 'ComponentsLocation={0}' is not valid. The value must be one of 'HomeSite', 'Relative', or 'Absolute'. Defaulting to 'HomeSite'.</source>
-        <target state="new">MSB3163: Build input parameter 'ComponentsLocation={0}' is not valid. The value must be one of 'HomeSite', 'Relative', or 'Absolute'. Defaulting to 'HomeSite'.</target>
-        <note>{StrBegin="MSB3163: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.InvalidInput">
-        <source>MSB3144: Not enough data was provided to generate a bootstrapper. Please provide a value for at least one of the parameters: 'ApplicationFile' or 'BootstrapperItems'.</source>
-        <target state="new">MSB3144: Not enough data was provided to generate a bootstrapper. Please provide a value for at least one of the parameters: 'ApplicationFile' or 'BootstrapperItems'.</target>
-        <note>{StrBegin="MSB3144: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.InvalidUrl">
-        <source>MSB3145: Build input parameter '{0}={1}' is not a web url or UNC share.</source>
-        <target state="new">MSB3145: Build input parameter '{0}={1}' is not a web url or UNC share.</target>
-        <note>{StrBegin="MSB3145: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.MissingDependency">
-        <source>MSB3146: Item '{0}' is required by '{1}', but was not included.</source>
-        <target state="new">MSB3146: Item '{0}' is required by '{1}', but was not included.</target>
-        <note>{StrBegin="MSB3146: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.MissingDependencyMultiple">
-        <source>MSB3696: One of the following items '{0}' is required by '{1}', but none were included.</source>
-        <target state="new">MSB3696: One of the following items '{0}' is required by '{1}', but none were included.</target>
-        <note>{StrBegin="MSB3696: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.MissingSetupBin">
-        <source>MSB3147: Could not find required file '{0}' in '{1}'.</source>
-        <target state="new">MSB3147: Could not find required file '{0}' in '{1}'.</target>
-        <note>{StrBegin="MSB3147: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.MissingVerificationInformation">
-        <source>MSB3141: No 'PublicKey' or 'Hash' attribute specified for file '{0}' in item '{1}'.</source>
-        <target state="new">MSB3141: No 'PublicKey' or 'Hash' attribute specified for file '{0}' in item '{1}'.</target>
-        <note>{StrBegin="MSB3141: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.MultipleDependeciesNotFound">
-        <source>MSB3170: Item '{0}' could not find any of dependent items '{1}'.</source>
-        <target state="new">MSB3170: Item '{0}' could not find any of dependent items '{1}'.</target>
-        <note>{StrBegin="MSB3170: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.NoOutputPath">
-        <source>MSB3148: No output path specified in build settings.</source>
-        <target state="new">MSB3148: No output path specified in build settings.</target>
-        <note>{StrBegin="MSB3148: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.NoResources">
-        <source>MSB3149: No resources available for building a bootstrapper.</source>
-        <target state="new">MSB3149: No resources available for building a bootstrapper.</target>
-        <note>{StrBegin="MSB3149: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.NoStringsForCulture">
-        <source>MSB3150: No string resources available for building a bootstrapper with culture '{0}'.</source>
-        <target state="new">MSB3150: No string resources available for building a bootstrapper with culture '{0}'.</target>
-        <note>{StrBegin="MSB3150: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.PackageFileNotFound">
-        <source>MSB3152: To enable 'Download prerequisites from the same location as my application' in the Prerequisites dialog box, you must download file '{0}' for item '{1}' to your local machine. For more information, see http://go.microsoft.com/fwlink/?LinkId=616018.</source>
-        <target state="new">MSB3152: To enable 'Download prerequisites from the same location as my application' in the Prerequisites dialog box, you must download file '{0}' for item '{1}' to your local machine. For more information, see http://go.microsoft.com/fwlink/?LinkId=616018.</target>
-        <note>{StrBegin="MSB3152: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.PackageResourceFileNotFound">
-        <source>MSB3166: Could not find required file '{0}' for item '{1}'.</source>
-        <target state="new">MSB3166: Could not find required file '{0}' for item '{1}'.</target>
-        <note>{StrBegin="MSB3166: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.PackageHomeSiteMissing">
-        <source>MSB3164: No 'HomeSite' attribute has been provided for '{0}', so the package will be published to the same location as the bootstrapper.</source>
-        <target state="new">MSB3164: No 'HomeSite' attribute has been provided for '{0}', so the package will be published to the same location as the bootstrapper.</target>
-        <note>{StrBegin="MSB3164: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.PackageValidation">
-        <source>MSB3153: Xml validation did not pass for item '{0}' located at '{1}'.</source>
-        <target state="new">MSB3153: Xml validation did not pass for item '{0}' located at '{1}'.</target>
-        <note>{StrBegin="MSB3153: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.ProductCultureNotFound">
-        <source>MSB3154: Could not find string resources for item '{0}'.</source>
-        <target state="new">MSB3154: Could not find string resources for item '{0}'.</target>
-        <note>{StrBegin="MSB3154: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.ProductNotFound">
-        <source>MSB3155: Item '{0}' could not be located in '{1}'.</source>
-        <target state="new">MSB3155: Item '{0}' could not be located in '{1}'.</target>
-        <note>{StrBegin="MSB3155: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.ProductValidation">
-        <source>MSB3156: Xml validation did not pass for item '{0}' located at '{1}'.</source>
-        <target state="new">MSB3156: Xml validation did not pass for item '{0}' located at '{1}'.</target>
-        <note>{StrBegin="MSB3156: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.UsingProductCulture">
-        <source>MSB3157: Could not match culture '{0}' for item '{1}'. Using culture '{2}' instead.</source>
-        <target state="new">MSB3157: Could not match culture '{0}' for item '{1}'. Using culture '{2}' instead.</target>
-        <note>{StrBegin="MSB3157: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.UsingResourcesCulture">
-        <source>MSB3158: Could not find resources for culture '{0}'. Using culture '{1}' instead.</source>
-        <target state="new">MSB3158: Could not find resources for culture '{0}'. Using culture '{1}' instead.</target>
-        <note>{StrBegin="MSB3158: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.ValidationError">
-        <source>MSB3159: Xml Validation error in file '{0}': {1}</source>
-        <target state="new">MSB3159: Xml Validation error in file '{0}': {1}</target>
-        <note>{StrBegin="MSB3159: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateBootstrapper.ValidationWarning">
-        <source>MSB3160: Xml Validation warning in file '{0}': {1}</source>
-        <target state="new">MSB3160: Xml Validation warning in file '{0}': {1}</target>
-        <note>{StrBegin="MSB3160: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateLauncher.CopyError">
-        <source>MSB3961: An error occurred trying to copy '{0}' to '{1}': {2}</source>
-        <target state="new">MSB3961: An error occurred trying to copy '{0}' to '{1}': {2}</target>
-        <note>{StrBegin="MSB3961: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateLauncher.General">
-        <source>MSB3962: An error occurred generating a launcher: {0}</source>
-        <target state="new">MSB3962: An error occurred generating a launcher: {0}</target>
-        <note>{StrBegin="MSB3962: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateLauncher.InvalidInput">
-        <source>MSB3963: Not enough data was provided to generate a launcher. Please provide a value for: 'EntryPoint'.</source>
-        <target state="new">MSB3963: Not enough data was provided to generate a launcher. Please provide a value for: 'EntryPoint'.</target>
-        <note>{StrBegin="MSB3963: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateLauncher.MissingLauncherExe">
-        <source>MSB3964: Could not find required file '{0}'.</source>
-        <target state="new">MSB3964: Could not find required file '{0}'.</target>
-        <note>{StrBegin="MSB3964: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateLauncher.NoOutputPath">
-        <source>MSB3965: No output path specified in build settings.</source>
-        <target state="new">MSB3965: No output path specified in build settings.</target>
-        <note>{StrBegin="MSB3965: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.AllowPartiallyTrustedCallers">
-        <source>MSB3177: Reference '{0}' does not allow partially trusted callers.</source>
-        <target state="new">MSB3177: Reference '{0}' does not allow partially trusted callers.</target>
-        <note>{StrBegin="MSB3177: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.AssemblyAsFile">
-        <source>MSB3178: Assembly '{0}' is incorrectly specified as a file.</source>
-        <target state="new">MSB3178: Assembly '{0}' is incorrectly specified as a file.</target>
-        <note>{StrBegin="MSB3178: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.ComImport">
-        <source>MSB3179: Problem isolating COM reference '{0}': {1}</source>
-        <target state="new">MSB3179: Problem isolating COM reference '{0}': {1}</target>
-        <note>{StrBegin="MSB3179: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.ConfigBindingRedirectsWithPartialTrust">
-        <source>MSB3111: Use of app.config binding redirects requires full trust.</source>
-        <target state="new">MSB3111: Use of app.config binding redirects requires full trust.</target>
-        <note>{StrBegin="MSB3111: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.DuplicateAssemblyIdentity">
-        <source>MSB3112: Two or more assemblies have the same identity '{0}'.</source>
-        <target state="new">MSB3112: Two or more assemblies have the same identity '{0}'.</target>
-        <note>{StrBegin="MSB3112: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.DuplicateComDefinition">
-        <source>MSB3180: COM component '{1}' is defined in both '{3}' and '{4}', {0}="{2}".</source>
-        <target state="new">MSB3180: COM component '{1}' is defined in both '{3}' and '{4}', {0}="{2}".</target>
-        <note>{StrBegin="MSB3180: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.DuplicateTargetPath">
-        <source>MSB3181: Two or more files have the same target path '{0}'.</source>
-        <target state="new">MSB3181: Two or more files have the same target path '{0}'.</target>
-        <note>{StrBegin="MSB3181: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.FileAssociationDefaultIconNotInstalled">
-        <source>MSB3127: The default icon {0} could not be found in the current file references or is not part of the required download group. The default icon file name is case sensitive so the file name referenced in the application manifest must exactly match the icon's file name.</source>
-        <target state="new">MSB3127: The default icon {0} could not be found in the current file references or is not part of the required download group. The default icon file name is case sensitive so the file name referenced in the application manifest must exactly match the icon's file name.</target>
-        <note>{StrBegin="MSB3127: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.FileAssociationExtensionMissingLeadDot">
-        <source>MSB3119: File association extensions must start with a period character (.).</source>
-        <target state="new">MSB3119: File association extensions must start with a period character (.).</target>
-        <note>{StrBegin="MSB3119: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.FileAssociationExtensionTooLong">
-        <source>MSB3120: File association extension '{0}' exceeds the maximum allowed length of {1}.</source>
-        <target state="new">MSB3120: File association extension '{0}' exceeds the maximum allowed length of {1}.</target>
-        <note>{StrBegin="MSB3120: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.FileAssociationMissingAttribute">
-        <source>MSB3121: The file association element in the application manifest is missing one or more of the following required attributes: extension, description, progid, or default icon.</source>
-        <target state="new">MSB3121: The file association element in the application manifest is missing one or more of the following required attributes: extension, description, progid, or default icon.</target>
-        <note>{StrBegin="MSB3121: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.FileAssociationsApplicationNotFullTrust">
-        <source>MSB3122: Use of file associations requires full trust.</source>
-        <target state="new">MSB3122: Use of file associations requires full trust.</target>
-        <note>{StrBegin="MSB3122: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.FileAssociationsCountExceedsMaximum">
-        <source>MSB3123: The number of file associations exceeds the limit of {0}.</source>
-        <target state="new">MSB3123: The number of file associations exceeds the limit of {0}.</target>
-        <note>{StrBegin="MSB3123: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.FileAssociationsDuplicateExtensions">
-        <source>MSB3124: A file association has already been created for extension '{0}'.</source>
-        <target state="new">MSB3124: A file association has already been created for extension '{0}'.</target>
-        <note>{StrBegin="MSB3124: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.FileAssociationsNoEntryPoint">
-        <source>MSB3125: The application is using file associations but has no EntryPoint build parameter.</source>
-        <target state="new">MSB3125: The application is using file associations but has no EntryPoint build parameter.</target>
-        <note>{StrBegin="MSB3125: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.FileAssociationsNotInstalled">
-        <source>MSB3126: The application is using file associations but is not marked for installation. File associations cannot be used for applications that are not installed such as applications hosted in a web browser.</source>
-        <target state="new">MSB3126: The application is using file associations but is not marked for installation. File associations cannot be used for applications that are not installed such as applications hosted in a web browser.</target>
-        <note>{StrBegin="MSB3126: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.General">
-        <source>MSB3171: Problem generating manifest. {0}</source>
-        <target state="new">MSB3171: Problem generating manifest. {0}</target>
-        <note>{StrBegin="MSB3171: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.GreaterMinimumRequiredVersion">
-        <source>MSB3176: Specified minimum required version is greater than the current publish version. Please specify a version less than or equal to the current publish version.</source>
-        <target state="new">MSB3176: Specified minimum required version is greater than the current publish version. Please specify a version less than or equal to the current publish version.</target>
-        <note>{StrBegin="MSB3176: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.HostInBrowserInvalidFrameworkVersion">
-        <source>MSB3117: Application is set to host in browser but the TargetFrameworkVersion is set to v2.0.</source>
-        <target state="new">MSB3117: Application is set to host in browser but the TargetFrameworkVersion is set to v2.0.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateManifest.HostInBrowserNotOnlineOnly">
-        <source>MSB3116: Application is marked to host in browser but is also marked for online and offline use. Please change your application to online only.</source>
-        <target state="new">MSB3116: Application is marked to host in browser but is also marked for online and offline use. Please change your application to online only.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateManifest.IdentityFileNameMismatch">
-        <source>MSB3110: Assembly '{0}' has mismatched identity '{1}', expected file name: '{2}'.</source>
-        <target state="new">MSB3110: Assembly '{0}' has mismatched identity '{1}', expected file name: '{2}'.</target>
-        <note>{StrBegin="MSB3110: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.InvalidEntryPoint">
-        <source>MSB3115: File '{0}' is not a valid entry point.</source>
-        <target state="new">MSB3115: File '{0}' is not a valid entry point.</target>
-        <note>{StrBegin="MSB3115: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.InvalidInputManifest">
-        <source>MSB3184: Input manifest is invalid.</source>
-        <target state="new">MSB3184: Input manifest is invalid.</target>
-        <note>{StrBegin="MSB3184: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.ExcludedPermissionsNotSupported">
-        <source>MSB3133: The ExcludePermissions property is deprecated. The permission set requested by the application has been set to the permissions defined in Internet or Local Intranet zone. To continue using a custom Permission Set, define your custom permission set in the Security Page of the Project Designer.</source>
-        <target state="new">MSB3133: The ExcludePermissions property is deprecated. The permission set requested by the application has been set to the permissions defined in Internet or Local Intranet zone. To continue using a custom Permission Set, define your custom permission set in the Security Page of the Project Designer.</target>
-        <note>{StrBegin="MSB3133: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.KnownTargetZoneCannotHaveAdditionalPermissionType">
-        <source>MSB3134: The permission set requested by the application exceeded the permissions allowed by the Internet or Intranet zones. Select Full Trust or to continue using partial trust, define your custom permission set in the Security Page of the Project Designer.</source>
-        <target state="new">MSB3134: The permission set requested by the application exceeded the permissions allowed by the Internet or Intranet zones. Select Full Trust or to continue using partial trust, define your custom permission set in the Security Page of the Project Designer.</target>
-        <note>{StrBegin="MSB3134: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.NoPermissionSetForTargetZone">
-        <source>MSB3135: The PermissionSet for the target zone has not been defined for the following version of the .NET Framework: {0}.</source>
-        <target state="new">MSB3135: The PermissionSet for the target zone has not been defined for the following version of the .NET Framework: {0}.</target>
-        <note>{StrBegin="MSB3135: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.InvalidItemValue">
-        <source>MSB3175: Invalid value for '{0}' of item '{1}'.</source>
-        <target state="new">MSB3175: Invalid value for '{0}' of item '{1}'.</target>
-        <note>{StrBegin="MSB3175: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.InvalidValue">
-        <source>MSB3174: Invalid value for '{0}'.</source>
-        <target state="new">MSB3174: Invalid value for '{0}'.</target>
-        <note>{StrBegin="MSB3174: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.InvalidDeploymentProvider">
-        <source>MSB3189: The update location for this application is a local path.</source>
-        <target state="new">MSB3189: The update location for this application is a local path.</target>
-        <note>{StrBegin="MSB3189: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.NoEntryPoint">
-        <source>MSB3185: EntryPoint not specified for manifest.</source>
-        <target state="new">MSB3185: EntryPoint not specified for manifest.</target>
-        <note>{StrBegin="MSB3185: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.NoIdentity">
-        <source>MSB3186: Unable to infer an assembly identity for generated manifest from task input parameters.</source>
-        <target state="new">MSB3186: Unable to infer an assembly identity for generated manifest from task input parameters.</target>
-        <note>{StrBegin="MSB3186: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.PlatformMismatch">
-        <source>MSB3187: Referenced assembly '{0}' targets a different processor than the application.</source>
-        <target state="new">MSB3187: Referenced assembly '{0}' targets a different processor than the application.</target>
-        <note>{StrBegin="MSB3187: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.PrerequisiteNotSigned">
-        <source>MSB3188: Assembly '{0}' must be strong signed in order to be marked as a prerequisite.</source>
-        <target state="new">MSB3188: Assembly '{0}' must be strong signed in order to be marked as a prerequisite.</target>
-        <note>{StrBegin="MSB3188: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.ReadInputManifestFailed">
-        <source>MSB3172: Unable to read manifest '{0}'. {1}</source>
-        <target state="new">MSB3172: Unable to read manifest '{0}'. {1}</target>
-        <note>{StrBegin="MSB3172: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.ResolveFailedInReadOnlyMode">
-        <source>MSB3114: Could not find file '{0}' referenced by assembly '{1}'.</source>
-        <target state="new">MSB3114: Could not find file '{0}' referenced by assembly '{1}'.</target>
-        <note>{StrBegin="MSB3114: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.ResolveFailedInReadWriteMode">
-        <source>MSB3113: Could not find file '{0}'.</source>
-        <target state="new">MSB3113: Could not find file '{0}'.</target>
-        <note>{StrBegin="MSB3113: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.ManifestsSignedHashExcluded">
-        <source>MSB3128: The ClickOnce manifests cannot be signed because they contain one or more references that are not hashed.</source>
-        <target state="new">MSB3128: The ClickOnce manifests cannot be signed because they contain one or more references that are not hashed.</target>
-        <note>{StrBegin="MSB3128: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.TargetPathTooLong">
-        <source>MSB3182: File name '{0}' exceeds {1} characters.</source>
-        <target state="new">MSB3182: File name '{0}' exceeds {1} characters.</target>
-        <note>{StrBegin="MSB3182: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.UnmanagedCodePermission">
-        <source>MSB3183: Reference '{0}' is an interop assembly requiring full trust.</source>
-        <target state="new">MSB3183: Reference '{0}' is an interop assembly requiring full trust.</target>
-        <note>{StrBegin="MSB3183: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.WriteOutputManifestFailed">
-        <source>MSB3173: Unable to write manifest '{0}'. {1}</source>
-        <target state="new">MSB3173: Unable to write manifest '{0}'. {1}</target>
-        <note>{StrBegin="MSB3173: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateManifest.InvalidRequestedExecutionLevel">
-        <source>MSB3190: ClickOnce does not support the request execution level '{0}'.</source>
-        <target state="new">MSB3190: ClickOnce does not support the request execution level '{0}'.</target>
-        <note>{StrBegin="MSB3190: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.CoreSupportsLimitedScenarios">
-        <source>MSB3824: In order to build with .NET Core, resource inputs must be in .txt or .resx format.</source>
-        <target state="new">MSB3824: In order to build with .NET Core, resource inputs must be in .txt or .resx format.</target>
-        <note>{StrBegin="MSB3824: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.InputDoesntExist">
-        <source>Input file "{0}" does not exist.</source>
-        <target state="new">Input file "{0}" does not exist.</target>
-        <note>{0} is a filename on disk.</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.InputNewer">
-        <source>Input file "{0}" is newer than output file "{1}".</source>
-        <target state="new">Input file "{0}" is newer than output file "{1}".</target>
-        <note>{0} and {1} are filenames on disk.</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.LinkedInputDoesntExist">
-        <source>Linked input file "{0}" does not exist.</source>
-        <target state="new">Linked input file "{0}" does not exist.</target>
-        <note>{0} is a filename on disk.</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.LinkedInputNewer">
-        <source>Linked input file "{0}" is newer than output file "{1}".</source>
-        <target state="new">Linked input file "{0}" is newer than output file "{1}".</target>
-        <note>{0} and {1} are filenames on disk.</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.MOTW">
-        <source>MSB3821: Couldn't process file {0} due to its being in the Internet or Restricted zone or having the mark of the web on the file. Remove the mark of the web if you want to process these files.</source>
-        <target state="new">MSB3821: Couldn't process file {0} due to its being in the Internet or Restricted zone or having the mark of the web on the file. Remove the mark of the web if you want to process these files.</target>
-        <note>{StrBegin="MSB3821: "} "Internet zone", "Restricted zone", and "mark of the web" are Windows concepts that may have a specific translation.</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.OutputDoesntExist">
-        <source>Output file "{0}" does not exist.</source>
-        <target state="new">Output file "{0}" does not exist.</target>
-        <note>{0} is a filename on disk.</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.PreserializedResourcesRequiresExtensions">
-        <source>MSB3822: Non-string resources require the System.Resources.Extensions assembly at runtime, but it was not found in this project's references.</source>
-        <target state="new">MSB3822: Non-string resources require the System.Resources.Extensions assembly at runtime, but it was not found in this project's references.</target>
-        <note>{StrBegin="MSB3822: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.PreserializedResourcesRequiresProperty">
-        <source>MSB3823: Non-string resources require the property GenerateResourceUsePreserializedResources to be set to true.</source>
-        <target state="new">MSB3823: Non-string resources require the property GenerateResourceUsePreserializedResources to be set to true.</target>
-        <note>{StrBegin="MSB3823: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.ResourceNotFound">
-        <source>MSB3552: Resource file "{0}" cannot be found.</source>
-        <target state="new">MSB3552: Resource file "{0}" cannot be found.</target>
-        <note>{StrBegin="MSB3552: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.InvalidFilename">
-        <source>MSB3553: Resource file "{0}" has an invalid name. {1}</source>
-        <target state="new">MSB3553: Resource file "{0}" has an invalid name. {1}</target>
-        <note>{StrBegin="MSB3553: "}Appears if the input file name is so invalid we can't change the file extension on it.</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.CannotWriteOutput">
-        <source>MSB3554: Cannot write to the output file "{0}". {1}</source>
-        <target state="new">MSB3554: Cannot write to the output file "{0}". {1}</target>
-        <note>{StrBegin="MSB3554: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.CorruptOutput">
-        <source>Output file "{0}" is possibly corrupt and will be deleted and recreated.</source>
-        <target state="new">Output file "{0}" is possibly corrupt and will be deleted and recreated.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.OnlyStringsSupported">
-        <source>MSB3556: Only strings can be written to a .txt file, resource "{0}" is type {1}.</source>
-        <target state="new">MSB3556: Only strings can be written to a .txt file, resource "{0}" is type {1}.</target>
-        <note>{StrBegin="MSB3556: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.ErrorFromCodeDom">
-        <source>MSB3557: Error(s) generating strongly typed resources for file "{0}".</source>
-        <target state="new">MSB3557: Error(s) generating strongly typed resources for file "{0}".</target>
-        <note>{StrBegin="MSB3557: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.UnknownFileExtension">
-        <source>MSB3558: Unsupported file extension "{0}" on file "{1}".</source>
-        <target state="new">MSB3558: Unsupported file extension "{0}" on file "{1}".</target>
-        <note>{StrBegin="MSB3558: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.STRCodeDomProviderFailed">
-        <source>MSB3559: The code DOM provider for the "{0}" language failed. {1}</source>
-        <target state="new">MSB3559: The code DOM provider for the "{0}" language failed. {1}</target>
-        <note>{StrBegin="MSB3559: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.DeleteCorruptOutputFailed">
-        <source>MSB3560: Could not delete the possibly corrupt output file "{0}". {1}</source>
-        <target state="new">MSB3560: Could not delete the possibly corrupt output file "{0}". {1}</target>
-        <note>{StrBegin="MSB3560: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.ObsoleteStringsTag">
-        <source>MSB3562: The "[strings]" tag is no longer necessary in text resources; please remove it.</source>
-        <target state="new">MSB3562: The "[strings]" tag is no longer necessary in text resources; please remove it.</target>
-        <note>{StrBegin="MSB3562: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.UnexpectedInfBracket">
-        <source>MSB3563: Unsupported square bracket keyword, "{0}".</source>
-        <target state="new">MSB3563: Unsupported square bracket keyword, "{0}".</target>
-        <note>{StrBegin="MSB3563: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.NoEqualsInLine">
-        <source>MSB3564: Resource line without an equals sign, "{0}".</source>
-        <target state="new">MSB3564: Resource line without an equals sign, "{0}".</target>
-        <note>{StrBegin="MSB3564: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.NoNameInLine">
-        <source>MSB3565: Resource line without a name.</source>
-        <target state="new">MSB3565: Resource line without a name.</target>
-        <note>{StrBegin="MSB3565: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.InvalidEscape">
-        <source>MSB3566: Unsupported or invalid escape character in resource "{0}", char '{1}'.</source>
-        <target state="new">MSB3566: Unsupported or invalid escape character in resource "{0}", char '{1}'.</target>
-        <note>{StrBegin="MSB3566: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.CodeDomError">
-        <source>MSB3567: Could not generate property on class "{0}".</source>
-        <target state="new">MSB3567: Could not generate property on class "{0}".</target>
-        <note>{StrBegin="MSB3567: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.CouldNotLoadType">
-        <source>Could not load type {0} which is used in the .RESX file.  Ensure that the necessary references have been added to your project.</source>
-        <target state="new">Could not load type {0} which is used in the .RESX file.  Ensure that the necessary references have been added to your project.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.DuplicateResourceName">
-        <source>MSB3568: Duplicate resource name "{0}" is not allowed, ignored.</source>
-        <target state="new">MSB3568: Duplicate resource name "{0}" is not allowed, ignored.</target>
-        <note>{StrBegin="MSB3568: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.InvalidHexEscapeValue">
-        <source>MSB3569: Invalid hex value after '\u' in resource "{0}", value '{1}'.</source>
-        <target state="new">MSB3569: Invalid hex value after '\u' in resource "{0}", value '{1}'.</target>
-        <note>{StrBegin="MSB3569: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.CannotWriteSTRFile">
-        <source>MSB3570: Cannot write to the Strongly Typed Resource class file "{0}". {1}</source>
-        <target state="new">MSB3570: Cannot write to the Strongly Typed Resource class file "{0}". {1}</target>
-        <note>{StrBegin="MSB3570: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.STRClassNamespaceOrFilenameWithoutLanguage">
-        <source>MSB3572: StronglyTypedClassName, StronglyTypedNamespace, and/or StronglyTypedFileName parameters were passed in, but no StronglyTypedLanguage. If you want to create a strongly typed resource class, please specify a language. Otherwise remove all class, file name, and namespace parameters.</source>
-        <target state="new">MSB3572: StronglyTypedClassName, StronglyTypedNamespace, and/or StronglyTypedFileName parameters were passed in, but no StronglyTypedLanguage. If you want to create a strongly typed resource class, please specify a language. Otherwise remove all class, file name, and namespace parameters.</target>
-        <note>{StrBegin="MSB3572: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.STRLanguageButNotExactlyOneSourceFile">
-        <source>MSB3573: The language for a strongly typed resource class was specified, but more than one source file was passed in. Please pass in only one source file at a time if you want to generate strongly typed resource classes.</source>
-        <target state="new">MSB3573: The language for a strongly typed resource class was specified, but more than one source file was passed in. Please pass in only one source file at a time if you want to generate strongly typed resource classes.</target>
-        <note>{StrBegin="MSB3573: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.MessageTunnel">
-        <source>{0}</source>
-        <target state="new">{0}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.ProcessingFile">
-        <source>Processing resource file "{0}" into "{1}".</source>
-        <target state="new">Processing resource file "{0}" into "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.ExtractingResWFiles">
-        <source>Extracting .ResW files from assembly "{0}" into "{1}".</source>
-        <target state="new">Extracting .ResW files from assembly "{0}" into "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.SkippingExtractingFromNonSupportedFramework">
-        <source>Skipping extracting .ResW files from assembly "{0}" because it declares non-supported framework "{1}".</source>
-        <target state="new">Skipping extracting .ResW files from assembly "{0}" because it declares non-supported framework "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.ReadResourceMessage">
-        <source>Processing {0} resources from file "{1}".</source>
-        <target state="new">Processing {0} resources from file "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.CreatingSTR">
-        <source>Creating strongly typed resources class "{0}".</source>
-        <target state="new">Creating strongly typed resources class "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.NoSources">
-        <source>No resources specified in "Sources". Skipping resource generation.</source>
-        <target state="new">No resources specified in "Sources". Skipping resource generation.</target>
-        <note>
-            LOCALIZATION: Please don't localize "Sources" this is an item meta-data name.
-    </note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.NothingOutOfDate">
-        <source>No resources are out of date with respect to their source files. Skipping resource generation.</source>
-        <target state="new">No resources are out of date with respect to their source files. Skipping resource generation.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.AdditionalInputNewerThanTLog">
-        <source>Additional input "{0}" has been updated since the last build.  Forcing regeneration of all resources.</source>
-        <target state="new">Additional input "{0}" has been updated since the last build.  Forcing regeneration of all resources.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.SeparateAppDomainBecauseNeverLockTypeAssembliesTrue">
-        <source>Creating a separate AppDomain because "NeverLockTypeAssemblies" evaluated to 'true'.</source>
-        <target state="new">Creating a separate AppDomain because "NeverLockTypeAssemblies" evaluated to 'true'.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.SeparateAppDomainBecauseOfErrorDeserializingLineNumber">
-        <source>Creating a separate AppDomain because while parsing "{0}" the serialized type "{1}" on line {2} could not be loaded. {3}</source>
-        <target state="new">Creating a separate AppDomain because while parsing "{0}" the serialized type "{1}" on line {2} could not be loaded. {3}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.SeparateAppDomainBecauseOfException">
-        <source>Creating a separate AppDomain because of error parsing "{0}". {1}</source>
-        <target state="new">Creating a separate AppDomain because of error parsing "{0}". {1}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.SeparateAppDomainBecauseOfExceptionLineNumber">
-        <source>Creating a separate AppDomain because of error parsing "{0}" on line {1}. {2}</source>
-        <target state="new">Creating a separate AppDomain because of error parsing "{0}" on line {1}. {2}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.SeparateAppDomainBecauseOfMimeType">
-        <source>Creating a separate AppDomain because of resource "{0}" representing a serialized type "{1}" in "{2}" on line {3}.</source>
-        <target state="new">Creating a separate AppDomain because of resource "{0}" representing a serialized type "{1}" in "{2}" on line {3}.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.SeparateAppDomainBecauseOfType">
-        <source>Creating a separate AppDomain because of resource "{0}" of type "{1}" in "{2}" on line {3}.</source>
-        <target state="new">Creating a separate AppDomain because of resource "{0}" of type "{1}" in "{2}" on line {3}.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GenerateResource.BadImageFormat">
-        <source>MSB3574: Did not recognize "{0}" as a managed assembly.</source>
-        <target state="new">MSB3574: Did not recognize "{0}" as a managed assembly.</target>
-        <note>{StrBegin="MSB3574: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.CannotWriteAssembly">
-        <source>MSB3575: GenerateResource cannot write assemblies, only read from them. Cannot create assembly "{0}".</source>
-        <target state="new">MSB3575: GenerateResource cannot write assemblies, only read from them. Cannot create assembly "{0}".</target>
-        <note>{StrBegin="MSB3575: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.CreatingCultureInfoFailed">
-        <source>MSB3576: Creating the CultureInfo failed for assembly "{2}". Note the set of cultures supported is Operating System-dependent, and the Operating System has removed some cultures from time to time (ie, some Serbian cultures are split up in Windows 7).  The culture may be a user-defined custom culture that we can't currently load on this machine.  Exception info: {0}: {1}</source>
-        <target state="new">MSB3576: Creating the CultureInfo failed for assembly "{2}". Note the set of cultures supported is Operating System-dependent, and the Operating System has removed some cultures from time to time (ie, some Serbian cultures are split up in Windows 7).  The culture may be a user-defined custom culture that we can't currently load on this machine.  Exception info: {0}: {1}</target>
-        <note>{StrBegin="MSB3576: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.DuplicateOutputFilenames">
-        <source>MSB3577: Two output file names resolved to the same output path: "{0}"</source>
-        <target state="new">MSB3577: Two output file names resolved to the same output path: "{0}"</target>
-        <note>{StrBegin="MSB3577: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.NeutralityOfCultureNotPreserved">
-        <source>MSB3578: This assembly contains neutral resources corresponding to the culture "{0}". These resources will not be considered neutral in the output format as we are unable to preserve this information. The resources will continue to correspond to "{0}" in the output format.</source>
-        <target state="new">MSB3578: This assembly contains neutral resources corresponding to the culture "{0}". These resources will not be considered neutral in the output format as we are unable to preserve this information. The resources will continue to correspond to "{0}" in the output format.</target>
-        <note>{StrBegin="MSB3578: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.NoResourcesFileInAssembly">
-        <source>MSB3579: Couldn't find the linked resources file "{0}" listed in the assembly manifest.</source>
-        <target state="new">MSB3579: Couldn't find the linked resources file "{0}" listed in the assembly manifest.</target>
-        <note>{StrBegin="MSB3579: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.SatelliteOrMalformedAssembly">
-        <source>MSB3580: The assembly in file "{0}" has an assembly culture, indicating it is a satellite assembly for culture "{1}".  But satellite assembly simple names must end in ".resources", while this one's simple name is "{2}".  This is either a main assembly with the culture incorrectly set, or a satellite assembly with an incorrect simple name.</source>
-        <target state="new">MSB3580: The assembly in file "{0}" has an assembly culture, indicating it is a satellite assembly for culture "{1}".  But satellite assembly simple names must end in ".resources", while this one's simple name is "{2}".  This is either a main assembly with the culture incorrectly set, or a satellite assembly with an incorrect simple name.</target>
-        <note>{StrBegin="MSB3580: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.SatelliteAssemblyContainsCode">
-        <source>MSB3811: The assembly "{0}" says it is a satellite assembly, but it contains code. Main assemblies shouldn't specify the assembly culture in their manifest, and satellites should not contain code.  This is almost certainly an error in your build process.</source>
-        <target state="new">MSB3811: The assembly "{0}" says it is a satellite assembly, but it contains code. Main assemblies shouldn't specify the assembly culture in their manifest, and satellites should not contain code.  This is almost certainly an error in your build process.</target>
-        <note>{StrBegin="MSB3811: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.SatelliteAssemblyContainsNoResourcesFile">
-        <source>MSB3812: This assembly claims to be a satellite assembly, but doesn't contain any properly named .resources files as manifest resources. The name of the files should end in {0}.resources.  There is probably a build-related problem with this assembly.</source>
-        <target state="new">MSB3812: This assembly claims to be a satellite assembly, but doesn't contain any properly named .resources files as manifest resources. The name of the files should end in {0}.resources.  There is probably a build-related problem with this assembly.</target>
-        <note>{StrBegin="MSB3812: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.UnrecognizedUltimateResourceFallbackLocation">
-        <source>MSB3813: Invalid or unrecognized UltimateResourceFallbackLocation value in the NeutralResourcesLanguageAttribute for assembly "{1}". Location: "{0}"</source>
-        <target state="new">MSB3813: Invalid or unrecognized UltimateResourceFallbackLocation value in the NeutralResourcesLanguageAttribute for assembly "{1}". Location: "{0}"</target>
-        <note>{StrBegin="MSB3813: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.ImproperlyBuiltMainAssembly">
-        <source>MSB3814: Main assembly "{1}" was built improperly. The manifest resource "{0}" ends in .en-US.resources, when it should end in .resources. Either rename it to something like foo.resources (and consider using the NeutralResourcesLanguageAttribute on the main assembly), or move it to a US English satellite assembly.</source>
-        <target state="new">MSB3814: Main assembly "{1}" was built improperly. The manifest resource "{0}" ends in .en-US.resources, when it should end in .resources. Either rename it to something like foo.resources (and consider using the NeutralResourcesLanguageAttribute on the main assembly), or move it to a US English satellite assembly.</target>
-        <note>{StrBegin="MSB3814: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.ImproperlyBuiltSatelliteAssembly">
-        <source>MSB3815: Satellite assembly "{2}" was built improperly. The manifest resource "{0}" will not be found by the ResourceManager.  It must end in "{1}".</source>
-        <target state="new">MSB3815: Satellite assembly "{2}" was built improperly. The manifest resource "{0}" will not be found by the ResourceManager.  It must end in "{1}".</target>
-        <note>{StrBegin="MSB3815: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.CannotLoadAssemblyLoadFromFailed">
-        <source>MSB3816: Loading assembly "{0}" failed. {1}</source>
-        <target state="new">MSB3816: Loading assembly "{0}" failed. {1}</target>
-        <note>{StrBegin="MSB3816: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.MainAssemblyMissingNeutralResourcesLanguage">
-        <source>MSB3817: The assembly "{0}" does not have a NeutralResourcesLanguageAttribute on it. To be used in an app package, portable libraries must define a NeutralResourcesLanguageAttribute on their main assembly (ie, the one containing code, not a satellite assembly).</source>
-        <target state="new">MSB3817: The assembly "{0}" does not have a NeutralResourcesLanguageAttribute on it. To be used in an app package, portable libraries must define a NeutralResourcesLanguageAttribute on their main assembly (ie, the one containing code, not a satellite assembly).</target>
-        <note>{StrBegin="MSB3817: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.ExecuteAsToolAndExtractResWNotSupported">
-        <source>MSB3818: The GenerateResource task doesn't currently support simultaneously running as an external tool and extracting ResW files from assemblies.</source>
-        <target state="new">MSB3818: The GenerateResource task doesn't currently support simultaneously running as an external tool and extracting ResW files from assemblies.</target>
-        <note>{StrBegin="MSB3818: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.MissingFile">
-        <source>MSB3819: Cannot find assembly "{0}", which may contain managed resources that need to be included in this app package.  Please ensure that this assembly exists.</source>
-        <target state="new">MSB3819: Cannot find assembly "{0}", which may contain managed resources that need to be included in this app package.  Please ensure that this assembly exists.</target>
-        <note>{StrBegin="MSB3819: "}</note>
-      </trans-unit>
-      <trans-unit id="GenerateResource.PathTooLong">
-        <source>MSB3820: The path needed to store build-related temporary files is too long.  Try your project in a shorter directory, or rename some of your resources.  The full path was "{0}".</source>
-        <target state="new">MSB3820: The path needed to store build-related temporary files is too long.  Try your project in a shorter directory, or rename some of your resources.  The full path was "{0}".</target>
-        <note>{StrBegin="MSB3820: "}</note>
-      </trans-unit>
-      <trans-unit id="GetAssemblyIdentity.CouldNotGetAssemblyName">
-        <source>MSB3441: Cannot get assembly name for "{0}". {1}</source>
-        <target state="new">MSB3441: Cannot get assembly name for "{0}". {1}</target>
-        <note>{StrBegin="MSB3441: "}</note>
-      </trans-unit>
-      <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
-        <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
-        <target state="new">Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetFrameworkSdkPath.FoundSDK">
-        <source>Found the Microsoft Windows SDK installed at "{0}".</source>
-        <target state="new">Found the Microsoft Windows SDK installed at "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetReferenceAssemblyPaths.OutOfDateSDK">
-        <source>MSB3971: The reference assemblies for "{0}" were not found. You might be using an older .NET SDK to target .NET 5.0 or higher. Update Visual Studio and/or your .NET SDK.</source>
-        <target state="new">MSB3971: The reference assemblies for "{0}" were not found. You might be using an older .NET SDK to target .NET 5.0 or higher. Update Visual Studio and/or your .NET SDK.</target>
-        <note>{StrBegin="MSB3971: "}</note>
-      </trans-unit>
-      <trans-unit id="MakeDir.Comment">
-        <source>Creating directory "{0}".</source>
-        <target state="new">Creating directory "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="MakeDir.Error">
-        <source>MSB3191: Unable to create directory "{0}". {1}</source>
-        <target state="new">MSB3191: Unable to create directory "{0}". {1}</target>
-        <note>{StrBegin="MSB3191: "}</note>
-      </trans-unit>
-      <trans-unit id="Message.InvalidImportance">
-        <source>MSB3511: "{0}" is an invalid value for the "Importance" parameter. Valid values are: High, Normal and Low.</source>
-        <target state="new">MSB3511: "{0}" is an invalid value for the "Importance" parameter. Valid values are: High, Normal and Low.</target>
-        <note>{StrBegin="MSB3511: "}UE: This message is shown when a user specifies a value for the importance attribute of Message which is not valid.
-            The importance enumeration is: High, Normal and Low.  Specifying any other importance will result in this message being shown
-            LOCALIZATION: "Importance" should not be localized.
-            High should not be localized.
-            Normal should not be localized.
-            Low should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="Move.CreatesDirectory">
-        <source>Creating directory "{0}".</source>
-        <target state="new">Creating directory "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Move.DestinationIsDirectory">
-        <source>MSB3676: Could not move the file "{0}" to the destination file "{1}", because the destination is a folder instead of a file. To move the source file into a folder, consider using the DestinationFolder parameter instead of DestinationFiles.</source>
-        <target state="new">MSB3676: Could not move the file "{0}" to the destination file "{1}", because the destination is a folder instead of a file. To move the source file into a folder, consider using the DestinationFolder parameter instead of DestinationFiles.</target>
-        <note>{StrBegin="MSB3676: "}</note>
-      </trans-unit>
-      <trans-unit id="Move.Error">
-        <source>MSB3677: Unable to move file "{0}" to "{1}". {2}</source>
-        <target state="new">MSB3677: Unable to move file "{0}" to "{1}". {2}</target>
-        <note>{StrBegin="MSB3677: "}</note>
-      </trans-unit>
-      <trans-unit id="Move.ExactlyOneTypeOfDestination">
-        <source>MSB3678: Both "{0}" and "{1}" were specified as input parameters in the project file. Only one must be provided.</source>
-        <target state="new">MSB3678: Both "{0}" and "{1}" were specified as input parameters in the project file. Only one must be provided.</target>
-        <note>{StrBegin="MSB3678: "}</note>
-      </trans-unit>
-      <trans-unit id="Move.FileComment">
-        <source>Moving file from "{0}" to "{1}".</source>
-        <target state="new">Moving file from "{0}" to "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Move.NeedsDestination">
-        <source>MSB3679: No destination specified for Move. Please supply either "{0}" or "{1}".</source>
-        <target state="new">MSB3679: No destination specified for Move. Please supply either "{0}" or "{1}".</target>
-        <note>{StrBegin="MSB3679: "}</note>
-      </trans-unit>
-      <trans-unit id="Move.SourceDoesNotExist">
-        <source>MSB3680: The source file "{0}" does not exist.</source>
-        <target state="new">MSB3680: The source file "{0}" does not exist.</target>
-        <note>{StrBegin="MSB3680: "}</note>
-      </trans-unit>
-      <trans-unit id="Move.SourceIsDirectory">
-        <source>MSB3681: The source file "{0}" is a directory. The "Move" task does not support moving directories.</source>
-        <target state="new">MSB3681: The source file "{0}" is a directory. The "Move" task does not support moving directories.</target>
-        <note>{StrBegin="MSB3681: "}</note>
-      </trans-unit>
-      <trans-unit id="MSBuild.CannotRebaseOutputItemPath">
-        <source>MSB3203: The output path "{0}" cannot be rebased. {1}</source>
-        <target state="new">MSB3203: The output path "{0}" cannot be rebased. {1}</target>
-        <note>{StrBegin="MSB3203: "}UE: This message is shown when the user asks the "MSBuild" task to rebase the paths of its output items relative to the project from where the "MSBuild" task is called (as opposed to the project(s) on which the "MSBuild" task is called), and one of the output item paths is invalid. LOCALIZATION: "{1}" is a localized message from a CLR/FX exception explaining the problem.</note>
-      </trans-unit>
-      <trans-unit id="MSBuild.ProjectFileNotFound">
-        <source>MSB3202: The project file "{0}" was not found.</source>
-        <target state="new">MSB3202: The project file "{0}" was not found.</target>
-        <note>{StrBegin="MSB3202: "}UE: This message is shown when the user passes a non-existent project file to the MSBuild task, in the "Projects" parameter.
-             and they have not specified the SkipNonexistentProjects parameter, or it is set to false.</note>
-      </trans-unit>
-      <trans-unit id="MSBuild.ProjectFileNotFoundMessage">
-        <source>Skipping project "{0}" because it was not found.</source>
-        <target state="new">Skipping project "{0}" because it was not found.</target>
-        <note>UE: This message is shown when the user passes a non-existent project file to the MSBuild task, in the "Projects" parameter, and they have specified the SkipNonexistentProjects parameter.</note>
-      </trans-unit>
-      <trans-unit id="MSBuild.ProjectUpgradeNeededToVcxProj">
-        <source>MSB3204: The project file "{0}" is in the ".vcproj" file format, which MSBuild no longer supports. Please convert the project by opening it in the Visual Studio IDE or running the conversion tool, or use MSBuild 3.5 or earlier to build it.</source>
-        <target state="new">MSB3204: The project file "{0}" is in the ".vcproj" file format, which MSBuild no longer supports. Please convert the project by opening it in the Visual Studio IDE or running the conversion tool, or use MSBuild 3.5 or earlier to build it.</target>
-        <note>{StrBegin="MSB3204: "} LOC: ".vcproj" should not be localized</note>
-      </trans-unit>
-      <trans-unit id="MSBuild.InvalidSkipNonexistentProjectValue">
-        <source>MSB3205: SkipNonexistentProject can only accept values of "True", "False" and "Build".</source>
-        <target state="new">MSB3205: SkipNonexistentProject can only accept values of "True", "False" and "Build".</target>
-        <note>{StrBegin="MSB3205: "} LOC: "SkipNonexistentProject", "True", "False" and "Build" should not be localized</note>
-      </trans-unit>
-      <trans-unit id="MSBuild.SkippingRemainingProjects">
-        <source>The MSBuild task is skipping the remaining projects because the StopOnFirstFailure parameter was set to true.</source>
-        <target state="new">The MSBuild task is skipping the remaining projects because the StopOnFirstFailure parameter was set to true.</target>
-        <note>LOCALIZATION:  Do not localize the words "MSBuild" or "StopOnFirstFailure".</note>
-      </trans-unit>
-      <trans-unit id="MSBuild.SkippingRemainingTargets">
-        <source>The MSBuild task is skipping the remaining targets because the StopOnFirstFailure parameter was set to true.</source>
-        <target state="new">The MSBuild task is skipping the remaining targets because the StopOnFirstFailure parameter was set to true.</target>
-        <note>LOCALIZATION:  Do not localize the words "MSBuild" or "StopOnFirstFailure".</note>
-      </trans-unit>
-      <trans-unit id="MSBuild.NotBuildingInParallel">
-        <source>Overriding the BuildingInParallel property by setting it to false. This is due to the system being run in single process mode with StopOnFirstFailure set to true.</source>
-        <target state="new">Overriding the BuildingInParallel property by setting it to false. This is due to the system being run in single process mode with StopOnFirstFailure set to true.</target>
-        <note>LOCALIZATION:  Do not localize the words "MSBuild", "BuildingInParallel", or "StopOnFirstFailure".</note>
-      </trans-unit>
-      <trans-unit id="MSBuild.NoStopOnFirstFailure">
-        <source>StopOnFirstFailure will have no effect when the following conditions are all present: 1) The system is running in multiple process mode 2) The BuildInParallel property is true. 3) The RunEachTargetSeparately property is false.</source>
-        <target state="new">StopOnFirstFailure will have no effect when the following conditions are all present: 1) The system is running in multiple process mode 2) The BuildInParallel property is true. 3) The RunEachTargetSeparately property is false.</target>
-        <note>LOCALIZATION:  Do not localize the words "RunEachTargetSeparately", "BuildingInParallel", or "StopOnFirstFailure".</note>
-      </trans-unit>
-      <trans-unit id="ReadLinesFromFile.ErrorOrWarning">
-        <source>MSB3501: Could not read lines from file "{0}". {1}</source>
-        <target state="new">MSB3501: Could not read lines from file "{0}". {1}</target>
-        <note>{StrBegin="MSB3501: "}</note>
-      </trans-unit>
-      <trans-unit id="RegisterAssembly.AssemblyNotRegisteredForComInterop">
-        <source>MSB3211: The assembly '{0}' is not registered for COM Interop. Please register it with regasm.exe /tlb.</source>
-        <target state="new">MSB3211: The assembly '{0}' is not registered for COM Interop. Please register it with regasm.exe /tlb.</target>
-        <note>{StrBegin="MSB3211: "}</note>
-      </trans-unit>
-      <trans-unit id="RegisterAssembly.CantExportTypeLib">
-        <source>MSB3212: The assembly "{0}" could not be converted to a type library. {1}</source>
-        <target state="new">MSB3212: The assembly "{0}" could not be converted to a type library. {1}</target>
-        <note>{StrBegin="MSB3212: "}</note>
-      </trans-unit>
-      <trans-unit id="RegisterAssembly.CantRegisterAssembly">
-        <source>MSB3217: Cannot register assembly "{0}". {1}</source>
-        <target state="new">MSB3217: Cannot register assembly "{0}". {1}</target>
-        <note>{StrBegin="MSB3217: "}</note>
-      </trans-unit>
-      <trans-unit id="RegisterAssembly.CantRegisterTypeLib">
-        <source>MSB3213: Cannot register type library "{0}". {1}</source>
-        <target state="new">MSB3213: Cannot register type library "{0}". {1}</target>
-        <note>{StrBegin="MSB3213: "}</note>
-      </trans-unit>
-      <trans-unit id="RegisterAssembly.NoValidTypes">
-        <source>MSB3214: "{0}" does not contain any types that can be registered for COM Interop.</source>
-        <target state="new">MSB3214: "{0}" does not contain any types that can be registered for COM Interop.</target>
-        <note>{StrBegin="MSB3214: "}</note>
-      </trans-unit>
-      <trans-unit id="RegisterAssembly.RegisterAsmFileDoesNotExist">
-        <source>MSB3215: Cannot register assembly "{0}" - file doesn't exist.</source>
-        <target state="new">MSB3215: Cannot register assembly "{0}" - file doesn't exist.</target>
-        <note>{StrBegin="MSB3215: "}</note>
-      </trans-unit>
-      <trans-unit id="RegisterAssembly.RegisteringAssembly">
-        <source>Registering assembly "{0}" for COM Interop.</source>
-        <target state="new">Registering assembly "{0}" for COM Interop.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="RegisterAssembly.RegisteringTypeLib">
-        <source>Exporting and registering type library "{0}".</source>
-        <target state="new">Exporting and registering type library "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="RegisterAssembly.TypeLibUpToDate">
-        <source>Type library "{0}" is up to date, skipping regeneration.</source>
-        <target state="new">Type library "{0}" is up to date, skipping regeneration.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="RegisterAssembly.UnauthorizedAccess">
-        <source>MSB3216: Cannot register assembly "{0}" - access denied. Please make sure you're running the application as administrator. {1}</source>
-        <target state="new">MSB3216: Cannot register assembly "{0}" - access denied. Please make sure you're running the application as administrator. {1}</target>
-        <note>{StrBegin="MSB3216: "}</note>
-      </trans-unit>
-      <trans-unit id="RemoveDir.Error">
-        <source>MSB3231: Unable to remove directory "{0}". {1}</source>
-        <target state="new">MSB3231: Unable to remove directory "{0}". {1}</target>
-        <note>{StrBegin="MSB3231: "}</note>
-      </trans-unit>
-      <trans-unit id="RemoveDir.Removing">
-        <source>Removing directory "{0}".</source>
-        <target state="new">Removing directory "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="RemoveDir.SkippingNonexistentDirectory">
-        <source>Directory "{0}" doesn't exist. Skipping.</source>
-        <target state="new">Directory "{0}" doesn't exist. Skipping.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResGen.NoInputFiles">
-        <source>No resources specified in "InputFiles". Skipping resource generation.</source>
-        <target state="new">No resources specified in "InputFiles". Skipping resource generation.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResGen.SdkOrToolPathNotSpecifiedOrInvalid">
-        <source>MSB3451: Neither SDKToolsPath '{0}' nor ToolPath '{1}' is a valid directory.  One of these must be set.</source>
-        <target state="new">MSB3451: Neither SDKToolsPath '{0}' nor ToolPath '{1}' is a valid directory.  One of these must be set.</target>
-        <note>{StrBegin="MSB3451: "}</note>
-      </trans-unit>
-      <trans-unit id="ResGen.STRClassNamespaceOrFilenameWithoutLanguage">
-        <source>MSB3452: StronglyTypedClassName, StronglyTypedNamespace, and/or StronglyTypedFileName parameters were passed in, but no StronglyTypedLanguage. If you want to create a strongly typed resource class, please specify a language. Otherwise remove all class, file name, and namespace parameters.</source>
-        <target state="new">MSB3452: StronglyTypedClassName, StronglyTypedNamespace, and/or StronglyTypedFileName parameters were passed in, but no StronglyTypedLanguage. If you want to create a strongly typed resource class, please specify a language. Otherwise remove all class, file name, and namespace parameters.</target>
-        <note>{StrBegin="MSB3452: "}</note>
-      </trans-unit>
-      <trans-unit id="ResGen.STRLanguageButNotExactlyOneSourceFile">
-        <source>MSB3453: The language for a strongly typed resource class was specified, but more than one source file was passed in. Please pass in only one source file at a time if you want to generate strongly typed resource classes.</source>
-        <target state="new">MSB3453: The language for a strongly typed resource class was specified, but more than one source file was passed in. Please pass in only one source file at a time if you want to generate strongly typed resource classes.</target>
-        <note>{StrBegin="MSB3453: "}</note>
-      </trans-unit>
-      <trans-unit id="ResGen.TrackerNotFound">
-        <source>MSB3454: Tracker.exe is required to correctly incrementally generate resources in some circumstances, such as when building on a 64-bit OS using 32-bit MSBuild. This build requires Tracker.exe, but it could not be found.  The task is looking for Tracker.exe beneath the {0} value of the registry key {1}.  To solve the problem, either: 1) Install the Microsoft Windows SDK v7.0A or later. 2) Install Microsoft Visual Studio 2010. 3) Manually set the above registry key to the correct location. Alternatively, you can turn off incremental resource generation by setting the "TrackFileAccess" property to "false".</source>
-        <target state="new">MSB3454: Tracker.exe is required to correctly incrementally generate resources in some circumstances, such as when building on a 64-bit OS using 32-bit MSBuild. This build requires Tracker.exe, but it could not be found.  The task is looking for Tracker.exe beneath the {0} value of the registry key {1}.  To solve the problem, either: 1) Install the Microsoft Windows SDK v7.0A or later. 2) Install Microsoft Visual Studio 2010. 3) Manually set the above registry key to the correct location. Alternatively, you can turn off incremental resource generation by setting the "TrackFileAccess" property to "false".</target>
-        <note>{StrBegin="MSB3454: "}</note>
-      </trans-unit>
-      <trans-unit id="ResGen.CommandTooLong">
-        <source>MSB3455: ResGen.exe may not run because the command line is {0} characters long, which exceeds the maximum length of the command. To fix this problem, please either (1) remove unnecessary assembly references, or (2) make the paths to those references shorter.</source>
-        <target state="new">MSB3455: ResGen.exe may not run because the command line is {0} characters long, which exceeds the maximum length of the command. To fix this problem, please either (1) remove unnecessary assembly references, or (2) make the paths to those references shorter.</target>
-        <note>{StrBegin="MSB3455: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.AssemblyDoesNotContainPEMetadata">
-        <source>Assembly file '{0}' could not be opened -- PE image doesn't contain managed metadata.</source>
-        <target state="new">Assembly file '{0}' could not be opened -- PE image doesn't contain managed metadata.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.AssemblyFoldersExSearchLocations">
-        <source>AssemblyFoldersEx location: "{0}"</source>
-        <target state="new">AssemblyFoldersEx location: "{0}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.SearchedAssemblyFoldersEx">
-        <source>Considered AssemblyFoldersEx locations.</source>
-        <target state="new">Considered AssemblyFoldersEx locations.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ConflictFound">
-        <source>There was a conflict between "{0}" and "{1}".</source>
-        <target state="new">There was a conflict between "{0}" and "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ConflictHigherVersionChosen">
-        <source>"{0}" was chosen because it had a higher version.</source>
-        <target state="new">"{0}" was chosen because it had a higher version.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ConflictPrimaryChosen">
-        <source>"{0}" was chosen because it was primary and "{1}" was not.</source>
-        <target state="new">"{0}" was chosen because it was primary and "{1}" was not.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ConflictRedirectSuggestion">
-        <source>Consider app.config remapping of assembly "{0}" from Version "{1}" [{2}] to Version "{3}" [{4}] to solve conflict and get rid of warning.</source>
-        <target state="new">Consider app.config remapping of assembly "{0}" from Version "{1}" [{2}] to Version "{3}" [{4}] to solve conflict and get rid of warning.</target>
-        <note>
-            UE and LOCALIZATION:
-        {1} and {3} are version numbers like 1.0.0.0
-                {2} and {4} are file names correspending to {1} and {3} respectively
-                {0} is an assembly name with no version number like 'D, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa'
-    </note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ConsideredAndRejectedBecauseFusionNamesDidntMatch">
-        <source>Considered "{0}",
-			but its name "{1}"
-			didn't match the expected name "{2}".</source>
-        <target state="new">Considered "{0}",
-			but its name "{1}"
-			didn't match the expected name "{2}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ConsideredAndRejectedBecauseNoFile">
-        <source>Considered "{0}", but it didn't exist.</source>
-        <target state="new">Considered "{0}", but it didn't exist.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ConsideredAndRejectedBecauseNotAFileNameOnDisk">
-        <source>Considered treating "{0}" as a file name, but it didn't exist.</source>
-        <target state="new">Considered treating "{0}" as a file name, but it didn't exist.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ConsideredAndRejectedBecauseNotInGac">
-        <source>Considered "{0}", which was not found in the GAC.</source>
-        <target state="new">Considered "{0}", which was not found in the GAC.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ConsideredAndRejectedBecauseTargetDidntHaveFusionName">
-        <source>Considered "{0}", which existed but didn't have a valid identity. This may not be an assembly.</source>
-        <target state="new">Considered "{0}", which existed but didn't have a valid identity. This may not be an assembly.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.TargetedProcessorArchitectureDoesNotMatch">
-        <source>Considered "{0}", which existed but had a processor architecture "{1}" which does not match the targeted processor architecture "{2}".</source>
-        <target state="new">Considered "{0}", which existed but had a processor architecture "{1}" which does not match the targeted processor architecture "{2}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.Dependency">
-        <source>Dependency "{0}".</source>
-        <target state="new">Dependency "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.EightSpaceIndent">
-        <source>        {0}</source>
-        <target state="new">        {0}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.TenSpaceIndent">
-        <source>          {0}</source>
-        <target state="new">          {0}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.TwelveSpaceIndent">
-        <source>            {0}</source>
-        <target state="new">            {0}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FoundRelatedFile">
-        <source>Found related file "{0}".</source>
-        <target state="new">Found related file "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FoundSatelliteFile">
-        <source>Found satellite file "{0}".</source>
-        <target state="new">Found satellite file "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FoundScatterFile">
-        <source>Found embedded scatter file "{0}".</source>
-        <target state="new">Found embedded scatter file "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FourSpaceIndent">
-        <source>    {0}</source>
-        <target state="new">    {0}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.IgnoringBecauseNonEmptySubtype">
-        <source>Ignoring "{0}" because it has a non-empty subtype "{1}".</source>
-        <target state="new">Ignoring "{0}" because it has a non-empty subtype "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.BadTargetFrameworkFormat">
-        <source>Ignoring invalid Target Framework value "{0}".</source>
-        <target state="new">Ignoring invalid Target Framework value "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ConflictBetweenAppConfigAndAutoUnify">
-        <source>MSB3242: Conflict between mutually exclusive parameters. AutoUnify was 'true' and AppConfigFile was set.</source>
-        <target state="new">MSB3242: Conflict between mutually exclusive parameters. AutoUnify was 'true' and AppConfigFile was set.</target>
-        <note>{StrBegin="MSB3242: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ConflictUnsolvable">
-        <source>MSB3243: No way to resolve conflict between "{0}" and "{1}". Choosing "{0}" arbitrarily.</source>
-        <target state="new">MSB3243: No way to resolve conflict between "{0}" and "{1}". Choosing "{0}" arbitrarily.</target>
-        <note>{StrBegin="MSB3243: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FailedToFindDependentFiles">
-        <source>MSB3244: Could not find dependent files. {0}</source>
-        <target state="new">MSB3244: Could not find dependent files. {0}</target>
-        <note>{StrBegin="MSB3244: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FailedToResolveReference">
-        <source>MSB3245: Could not resolve this reference. {0} If this reference is required by your code, you may get compilation errors.</source>
-        <target state="new">MSB3245: Could not resolve this reference. {0} If this reference is required by your code, you may get compilation errors.</target>
-        <note>{StrBegin="MSB3245: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FailedWithException">
-        <source>MSB3246: Resolved file has a bad image, no metadata, or is otherwise inaccessible. {0}</source>
-        <target state="new">MSB3246: Resolved file has a bad image, no metadata, or is otherwise inaccessible. {0}</target>
-        <note>{StrBegin="MSB3246: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.SuggestedRedirects">
-        <source>MSB3247: Found conflicts between different versions of the same dependent assembly. In Visual Studio, double-click this warning (or select it and press Enter) to fix the conflicts; otherwise, add the following binding redirects to the "runtime" node in the application configuration file: {0}</source>
-        <target state="new">MSB3247: Found conflicts between different versions of the same dependent assembly. In Visual Studio, double-click this warning (or select it and press Enter) to fix the conflicts; otherwise, add the following binding redirects to the "runtime" node in the application configuration file: {0}</target>
-        <note>{StrBegin="MSB3247: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.InvalidParameter">
-        <source>MSB3248: Parameter "{0}" has invalid value "{1}". {2}</source>
-        <target state="new">MSB3248: Parameter "{0}" has invalid value "{1}". {2}</target>
-        <note>{StrBegin="MSB3248: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.InvalidAppConfig">
-        <source>MSB3249: Application Configuration file "{0}" is invalid. {1}</source>
-        <target state="new">MSB3249: Application Configuration file "{0}" is invalid. {1}</target>
-        <note>{StrBegin="MSB3249: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.InvalidInstalledAssemblyTablesFile">
-        <source>MSB3250: The file "{0}" will be ignored because it cannot be read. This file was either passed in to InstalledAssemblyTables or was found by searching the {1} folder in the TargetFrameworkDirectories. {2}</source>
-        <target state="new">MSB3250: The file "{0}" will be ignored because it cannot be read. This file was either passed in to InstalledAssemblyTables or was found by searching the {1} folder in the TargetFrameworkDirectories. {2}</target>
-        <note>{StrBegin="MSB3250: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FailedToResolveReferenceBecauseHigherTargetFramework">
-        <source>MSB3251: Could not resolve assembly {0}. The target framework required by this assembly ({1}) is higher than the project target framework. If this reference is required by your code, you may get compilation errors.</source>
-        <target state="new">MSB3251: Could not resolve assembly {0}. The target framework required by this assembly ({1}) is higher than the project target framework. If this reference is required by your code, you may get compilation errors.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FailedToResolveReferenceBecausePrimaryAssemblyInExclusionList">
-        <source>MSB3252: The currently targeted framework "{1}" does not include the referenced assembly "{0}". To fix this, either (1) change the targeted framework for this project or (2) remove the referenced assembly from the project.</source>
-        <target state="new">MSB3252: The currently targeted framework "{1}" does not include the referenced assembly "{0}". To fix this, either (1) change the targeted framework for this project or (2) remove the referenced assembly from the project.</target>
-        <note>{StrBegin="MSB3252: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FailBecauseDependentAssemblyInExclusionList">
-        <source>MSB3253: The currently targeted framework "{2}" does not include "{1}" which the referenced assembly "{0}" depends on. This caused the referenced assembly to not resolve. To fix this, either (1) change the targeted framework for this project, or (2) remove the referenced assembly from the project.</source>
-        <target state="new">MSB3253: The currently targeted framework "{2}" does not include "{1}" which the referenced assembly "{0}" depends on. This caused the referenced assembly to not resolve. To fix this, either (1) change the targeted framework for this project, or (2) remove the referenced assembly from the project.</target>
-        <note>{StrBegin="MSB3253: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.InvalidInstalledAssemblySubsetTablesFile">
-        <source>MSB3254: The file "{0}" will be ignored because it cannot be read. This file was either passed in to InstalledAssemblySubsetTables or was found by searching the {1} folder in the TargetFrameworkDirectories. {2}</source>
-        <target state="new">MSB3254: The file "{0}" will be ignored because it cannot be read. This file was either passed in to InstalledAssemblySubsetTables or was found by searching the {1} folder in the TargetFrameworkDirectories. {2}</target>
-        <note>{StrBegin="MSB3254: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NoSubsetsFound">
-        <source>MSB3255: Could not find any Target Framework Subset files in the Target Framework Directories or at the locations specified in the InstalledAssemblySubsetTables.</source>
-        <target state="new">MSB3255: Could not find any Target Framework Subset files in the Target Framework Directories or at the locations specified in the InstalledAssemblySubsetTables.</target>
-        <note>{StrBegin="MSB3255: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NoRedistAssembliesToGenerateExclusionList">
-        <source>MSB3256: No assemblies were read in from the redist lists. A TargetFramework profile exclusion list could not be generated. </source>
-        <target state="new">MSB3256: No assemblies were read in from the redist lists. A TargetFramework profile exclusion list could not be generated. </target>
-        <note>{StrBegin="MSB3256: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.PrimaryReferenceOutsideOfFramework">
-        <source>MSB3257: The primary reference "{0}" could not be resolved because it has a higher version "{1}" than exists in the current target framework. The version found in the current target framework is "{2}".</source>
-        <target state="new">MSB3257: The primary reference "{0}" could not be resolved because it has a higher version "{1}" than exists in the current target framework. The version found in the current target framework is "{2}".</target>
-        <note>{StrBegin="MSB3257: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.DependencyReferenceOutsideOfFramework">
-        <source>MSB3258: The primary reference "{0}" could not be resolved because it has an indirect dependency on the .NET Framework assembly "{1}" which has a higher version "{2}" than the version "{3}" in the current target framework.</source>
-        <target state="new">MSB3258: The primary reference "{0}" could not be resolved because it has an indirect dependency on the .NET Framework assembly "{1}" which has a higher version "{2}" than the version "{3}" in the current target framework.</target>
-        <note>{StrBegin="MSB3258: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.CannotSetProfileAndSubSet">
-        <source>MSB3259: Invalid parameter combination. Can only set either subset or profile parameters. Cannot set one or more subset parameters ("TargetFrameworkSubsets", "InstalledAssemblySubsetTables") and one or more profile parameters ("ProfileName", "FullFrameworkFolders", "FullFrameworkAssemblyTables") at the same time. </source>
-        <target state="new">MSB3259: Invalid parameter combination. Can only set either subset or profile parameters. Cannot set one or more subset parameters ("TargetFrameworkSubsets", "InstalledAssemblySubsetTables") and one or more profile parameters ("ProfileName", "FullFrameworkFolders", "FullFrameworkAssemblyTables") at the same time. </target>
-        <note>{StrBegin="MSB3259: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NoProfilesFound">
-        <source>MSB3260: Could not find any target framework profile redist files in the FullFrameworkFolders locations.</source>
-        <target state="new">MSB3260: Could not find any target framework profile redist files in the FullFrameworkFolders locations.</target>
-        <note>{StrBegin="MSB3260: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FrameworkDirectoryOnProfiles">
-        <source>MSB3261: The FrameworkDirectory metadata must be set on all items passed to the FullFrameworkAssemblyTables parameter. The item "{0}" did not have the metadata set.</source>
-        <target state="new">MSB3261: The FrameworkDirectory metadata must be set on all items passed to the FullFrameworkAssemblyTables parameter. The item "{0}" did not have the metadata set.</target>
-        <note>{StrBegin="MSB3261: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.MustSetProfileNameAndFolderLocations">
-        <source>MSB3262: When targeting a profile the ProfileName parameter and one of FullFrameworkFolders or FullFrameworkAssemblyTables must be set.</source>
-        <target state="new">MSB3262: When targeting a profile the ProfileName parameter and one of FullFrameworkFolders or FullFrameworkAssemblyTables must be set.</target>
-        <note>{StrBegin="MSB3262: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.InvalidProfileRedistLocation">
-        <source>MSB3263: The file "{0}" will be ignored because it cannot be read. This file was either passed in to FullFrameworkAssemblyTables or was found by searching the "{1}" folder in the FullFrameworkFolders. {2}</source>
-        <target state="new">MSB3263: The file "{0}" will be ignored because it cannot be read. This file was either passed in to FullFrameworkAssemblyTables or was found by searching the "{1}" folder in the FullFrameworkFolders. {2}</target>
-        <note>{StrBegin="MSB3263: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.PrimaryReferenceInAnotherFramework">
-        <source>MSB3267: The primary reference "{0}", which is a framework assembly, could not be resolved in the currently targeted framework. "{1}". To resolve this problem, either remove the reference "{0}" or retarget your application to a framework version which contains "{0}".</source>
-        <target state="new">MSB3267: The primary reference "{0}", which is a framework assembly, could not be resolved in the currently targeted framework. "{1}". To resolve this problem, either remove the reference "{0}" or retarget your application to a framework version which contains "{0}".</target>
-        <note>{StrBegin="MSB3267: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.DependencyReferenceInAnotherFramework">
-        <source>MSB3268: The primary reference "{0}" could not be resolved because it has an indirect dependency on the framework assembly "{1}" which could not be resolved in the currently targeted framework. "{2}". To resolve this problem, either remove the reference "{0}" or retarget your application to a framework version which contains "{1}".</source>
-        <target state="new">MSB3268: The primary reference "{0}" could not be resolved because it has an indirect dependency on the framework assembly "{1}" which could not be resolved in the currently targeted framework. "{2}". To resolve this problem, either remove the reference "{0}" or retarget your application to a framework version which contains "{1}".</target>
-        <note>{StrBegin="MSB3268: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ProblemDeterminingFrameworkMembership">
-        <source>MSB3269: Could not determine if resolved references are part of the targeted framework because of an error. "{0}"</source>
-        <target state="new">MSB3269: Could not determine if resolved references are part of the targeted framework because of an error. "{0}"</target>
-        <note>{StrBegin="MSB3269: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.MismatchBetweenTargetedAndReferencedArch">
-        <source>MSB3270: There was a mismatch between the processor architecture of the project being built "{0}" and the processor architecture of the reference "{1}", "{2}". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and references, or take a dependency on references with a processor architecture that matches the targeted processor architecture of your project.</source>
-        <target state="new">MSB3270: There was a mismatch between the processor architecture of the project being built "{0}" and the processor architecture of the reference "{1}", "{2}". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and references, or take a dependency on references with a processor architecture that matches the targeted processor architecture of your project.</target>
-        <note>{StrBegin="MSB3270: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.MismatchBetweenTargetedAndReferencedArchOfImplementation">
-        <source>MSB3271: There was a mismatch between the processor architecture of the project being built "{0}" and the processor architecture, "{1}", of the implementation file "{2}" for "{3}". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and implementation file, or choose a winmd file with an implementation file that has a processor architecture which matches the targeted processor architecture of your project.</source>
-        <target state="new">MSB3271: There was a mismatch between the processor architecture of the project being built "{0}" and the processor architecture, "{1}", of the implementation file "{2}" for "{3}". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and implementation file, or choose a winmd file with an implementation file that has a processor architecture which matches the targeted processor architecture of your project.</target>
-        <note>{StrBegin="MSB3271: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ProblemReadingImplementationDll">
-        <source>MSB3272: There was a problem reading the implementation file "{0}". "{1}"</source>
-        <target state="new">MSB3272: There was a problem reading the implementation file "{0}". "{1}"</target>
-        <note>{StrBegin="MSB3272: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ImplementationDllHasInvalidPEHeader">
-        <source>Invalid PE header found. The implementation file will not used.</source>
-        <target state="new">Invalid PE header found. The implementation file will not used.</target>
-        <note>This message can be used as the {1} in MSB3272</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.UnknownProcessorArchitecture">
-        <source>MSB3273: Unknown processor architecture. The implementation file "{0}" for "{1}" had an ImageFileMachine value of "0x{2}". If you wish to use this implementation file make sure the "ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch" property in your project is set to "Warning" or "None".</source>
-        <target state="new">MSB3273: Unknown processor architecture. The implementation file "{0}" for "{1}" had an ImageFileMachine value of "0x{2}". If you wish to use this implementation file make sure the "ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch" property in your project is set to "Warning" or "None".</target>
-        <note>{StrBegin="MSB3273: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.PrimaryReferenceOutsideOfFrameworkUsingAttribute">
-        <source>MSB3274: The primary reference "{0}" could not be resolved because it was built against the "{1}" framework. This is a higher version than the currently targeted framework "{2}".</source>
-        <target state="new">MSB3274: The primary reference "{0}" could not be resolved because it was built against the "{1}" framework. This is a higher version than the currently targeted framework "{2}".</target>
-        <note>{StrBegin="MSB3274: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.DependencyReferenceOutsideOfFrameworkUsingAttribute">
-        <source>MSB3275: The primary reference "{0}" could not be resolved because it has an indirect dependency on the assembly "{1}" which was built against the "{2}" framework. This is a higher version than the currently targeted framework "{3}".</source>
-        <target state="new">MSB3275: The primary reference "{0}" could not be resolved because it has an indirect dependency on the assembly "{1}" which was built against the "{2}" framework. This is a higher version than the currently targeted framework "{3}".</target>
-        <note>{StrBegin="MSB3275: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.TurnOnAutoGenerateBindingRedirects">
-        <source>MSB3276: Found conflicts between different versions of the same dependent assembly. Please set the "AutoGenerateBindingRedirects" property to true in the project file. For more information, see http://go.microsoft.com/fwlink/?LinkId=294190.</source>
-        <target state="new">MSB3276: Found conflicts between different versions of the same dependent assembly. Please set the "AutoGenerateBindingRedirects" property to true in the project file. For more information, see http://go.microsoft.com/fwlink/?LinkId=294190.</target>
-        <note>{StrBegin="MSB3276: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FoundConflicts">
-        <source>MSB3277: Found conflicts between different versions of "{0}" that could not be resolved.
-{1}</source>
-        <target state="new">MSB3277: Found conflicts between different versions of "{0}" that could not be resolved.
-{1}</target>
-        <note>{StrBegin="MSB3277: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.LogAttributeFormat">
-        <source>{0} = '{1}'</source>
-        <target state="new">{0} = '{1}'</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.LogTaskPropertyFormat">
-        <source>{0}:</source>
-        <target state="new">{0}:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NotCopyLocalBecauseConflictVictim">
-        <source>This reference is not "CopyLocal" because it conflicted with another reference with the same name and lost the conflict.</source>
-        <target state="new">This reference is not "CopyLocal" because it conflicted with another reference with the same name and lost the conflict.</target>
-        <note>
-        LOCALIZATION: Please don't localize "CopyLocal" this is an item meta-data name.
-   </note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ImageRuntimeVersion">
-        <source>The ImageRuntimeVersion for this reference is "{0}".</source>
-        <target state="new">The ImageRuntimeVersion for this reference is "{0}".</target>
-        <note>
-      LOCALIZATION: Please don't localize "ImageRuntimeVersion" this is an item meta-data name.
-    </note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.IsAWinMdFile">
-        <source>This reference is a WinMDFile.</source>
-        <target state="new">This reference is a WinMDFile.</target>
-        <note>
-      LOCALIZATION: Please don't localize "WinMDFile" this is an item meta-data name.
-    </note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NoBecauseParentReferencesFoundInGac">
-        <source>This reference is not "CopyLocal" because the CopyLocalDependenciesWhenParentReferenceInGac property is set to false and all the parent references for this reference are found in the GAC.</source>
-        <target state="new">This reference is not "CopyLocal" because the CopyLocalDependenciesWhenParentReferenceInGac property is set to false and all the parent references for this reference are found in the GAC.</target>
-        <note>
-        LOCALIZATION: Please don't localize "CopyLocal" this is an item meta-data name. "CopyLocalDependenciesWhenParentReferenceInGac" is a property name.
-   </note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NotCopyLocalBecauseEmbedded">
-        <source>This reference is not "CopyLocal" because its types will be embedded into the target assembly.</source>
-        <target state="new">This reference is not "CopyLocal" because its types will be embedded into the target assembly.</target>
-        <note>
-        LOCALIZATION: Please don't localize "CopyLocal" this is an item meta-data name.
-   </note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NotCopyLocalBecauseFrameworksFiles">
-        <source>This reference is not "CopyLocal" because it's in a Frameworks directory.</source>
-        <target state="new">This reference is not "CopyLocal" because it's in a Frameworks directory.</target>
-        <note>
-            LOCALIZATION: Please don't localize "CopyLocal" this is an item meta-data name.
-   </note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NotCopyLocalBecauseIncomingItemAttributeOverrode">
-        <source>This reference is not "CopyLocal" because at least one source item had "Private" set to "false" and no source items had "Private" set to "true".</source>
-        <target state="new">This reference is not "CopyLocal" because at least one source item had "Private" set to "false" and no source items had "Private" set to "true".</target>
-        <note>
-            LOCALIZATION: Please don't localize "CopyLocal", "Private", "false", "true".
-        </note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NotCopyLocalBecausePrerequisite">
-        <source>This reference is not "CopyLocal" because it's a prerequisite file.</source>
-        <target state="new">This reference is not "CopyLocal" because it's a prerequisite file.</target>
-        <note>
-            LOCALIZATION: Please don't localize "CopyLocal" this is an item meta-data name.
-        </note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NotCopyLocalBecauseReferenceFoundInGAC">
-        <source>This reference is not "CopyLocal" because it's registered in the GAC.</source>
-        <target state="new">This reference is not "CopyLocal" because it's registered in the GAC.</target>
-        <note>
-            LOCALIZATION: Please don't localize "CopyLocal" this is an item meta-data name.
-        </note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.PrimaryReference">
-        <source>Primary reference "{0}".</source>
-        <target state="new">Primary reference "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.RequiredBy">
-        <source>Required by "{0}".</source>
-        <target state="new">Required by "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ReferenceDependsOn">
-        <source>References which depend on "{0}" [{1}].</source>
-        <target state="new">References which depend on "{0}" [{1}].</target>
-        <note> This will look like references which depend on "A, Version=2.0.0.0 PublicKey=4a4fded9gisujf" [a.dll].</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.UnResolvedPrimaryItemSpec">
-        <source>Unresolved primary reference with an item include of "{0}".</source>
-        <target state="new">Unresolved primary reference with an item include of "{0}".</target>
-        <note> This messages is for a reference which could not be resolved, however we have its item spec and will display that. {0} will be somethign like  System or A, Version=xxx</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.PrimarySourceItemsForReference">
-        <source>Project file item includes which caused reference "{0}".</source>
-        <target state="new">Project file item includes which caused reference "{0}".</target>
-        <note> This will look like, Project file item includes which caused reference "a.dll".</note>
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.Resolved">
-        <source>Resolved file path is "{0}".</source>
-        <target state="new">Resolved file path is "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ResolvedFrom">
-        <source>Reference found at search path location "{0}".</source>
-        <target state="new">Reference found at search path location "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.SearchPath">
-        <source>For SearchPath "{0}".</source>
-        <target state="new">For SearchPath "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.UnificationByAppConfig">
-        <source>Using this version instead of original version "{0}" in "{2}" because of a binding redirect entry in the file "{1}".</source>
-        <target state="new">Using this version instead of original version "{0}" in "{2}" because of a binding redirect entry in the file "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.UnificationByAutoUnify">
-        <source>Using this version instead of original version "{0}" in "{1}" because AutoUnify is 'true'.</source>
-        <target state="new">Using this version instead of original version "{0}" in "{1}" because AutoUnify is 'true'.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.RemappedReference">
-        <source>Due to a remapping entry in the currently targeted framework redist list, reference "{0}" was remapped to "{1}".</source>
-        <target state="new">Due to a remapping entry in the currently targeted framework redist list, reference "{0}" was remapped to "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.UnificationByFrameworkRetarget">
-        <source>Using this version instead of original version "{0}" in "{1}" because there is a more recent version of this framework file.</source>
-        <target state="new">Using this version instead of original version "{0}" in "{1}" because there is a more recent version of this framework file.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.UnifiedDependency">
-        <source>Unified Dependency "{0}".</source>
-        <target state="new">Unified Dependency "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.UnifiedPrimaryReference">
-        <source>Unified primary reference "{0}".</source>
-        <target state="new">Unified primary reference "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ProblemFindingSatelliteAssemblies">
-        <source>Could not find satellite assemblies for reference "{0}". {1}</source>
-        <target state="new">Could not find satellite assemblies for reference "{0}". {1}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.UsingExclusionList">
-        <source>A TargetFramework profile exclusion list will be generated. The exclusion list is a list of assemblies not in the profile.</source>
-        <target state="new">A TargetFramework profile exclusion list will be generated. The exclusion list is a list of assemblies not in the profile.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NoExclusionListBecauseofFullClientName">
-        <source>A TargetFramework profile exclusion list will not be generated. A full client name "{0}" was found in the TargetFrameworkSubsetNames list.</source>
-        <target state="new">A TargetFramework profile exclusion list will not be generated. A full client name "{0}" was found in the TargetFrameworkSubsetNames list.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NoExclusionListBecauseIgnoreSubsetsAndNoAdditionalOnesProvided">
-        <source>No TargetFramework subset exclusion list will be generated. IgnoreDefaultInstalledAssemblySubsetTables is true and no additional profile files were passed in to InstalledAssemblySubsetTables.</source>
-        <target state="new">No TargetFramework subset exclusion list will be generated. IgnoreDefaultInstalledAssemblySubsetTables is true and no additional profile files were passed in to InstalledAssemblySubsetTables.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.ProfileExclusionListWillBeGenerated">
-        <source>A TargetFramework profile exclusion list will be generated.</source>
-        <target state="new">A TargetFramework profile exclusion list will be generated.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NoExclusionListBecauseNoSubsetsPassedIn">
-        <source>No TargetFramework profile exclusion list will be generated. No TargetFrameworkSubsets were provided and no additional profile files were passed in to InstalledAssemblySubsetTables.</source>
-        <target state="new">No TargetFramework profile exclusion list will be generated. No TargetFrameworkSubsets were provided and no additional profile files were passed in to InstalledAssemblySubsetTables.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.TargetFrameworkSubsetLogHeader">
-        <source>TargetFramework Profile List Information:</source>
-        <target state="new">TargetFramework Profile List Information:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.TargetFrameworkWhiteListLogHeader">
-        <source>TargetFramework Profile List Paths:</source>
-        <target state="new">TargetFramework Profile List Paths:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.TargetFrameworkRedistLogHeader">
-        <source>Redist List File Paths:</source>
-        <target state="new">Redist List File Paths:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.TargetFrameworkExclusionListLogHeader">
-        <source>Computed TargetFramework profile exclusion list assembly full names:</source>
-        <target state="new">Computed TargetFramework profile exclusion list assembly full names:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.FormattedAssemblyInfo">
-        <source>Path: "{0}"</source>
-        <target state="new">Path: "{0}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.NoSubSetRedistListName">
-        <source>The redist list file "{0}" has a null or empty Redist name in the FileList element. Make sure the Redist Name is not null or empty.</source>
-        <target state="new">The redist list file "{0}" has a null or empty Redist name in the FileList element. Make sure the Redist Name is not null or empty.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveAssemblyReference.AssemblyFoldersConfigFileMalformed">
-        <source>The AssemblyFolder config file ('{0}') specified in Microsoft.Common.CurrentVersion.targets was invalid. The error was: {1}</source>
-        <target state="new">The AssemblyFolder config file ('{0}') specified in Microsoft.Common.CurrentVersion.targets was invalid. The error was: {1}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.TreatingTlbOfActiveXAsNonEmbedded">
-        <source>COM Reference '{0}' is the interop assembly for ActiveX control '{1}' but was marked to be linked by the compiler with the /link flag. This COM reference will be treated as a reference and will not be linked.</source>
-        <target state="new">COM Reference '{0}' is the interop assembly for ActiveX control '{1}' but was marked to be linked by the compiler with the /link flag. This COM reference will be treated as a reference and will not be linked.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.AddingMissingTlbReference">
-        <source>Adding a matching tlbimp reference for the aximp reference "{0}".</source>
-        <target state="new">Adding a matching tlbimp reference for the aximp reference "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.UsingCacheFile">
-        <source>Using cache file at "{0}".</source>
-        <target state="new">Using cache file at "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.NotUsingCacheFile">
-        <source>Creating new cache file at "{0}".</source>
-        <target state="new">Creating new cache file at "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.BadAssemblyImage">
-        <source>MSB3281: The assembly "{0}" is not a valid assembly file.</source>
-        <target state="new">MSB3281: The assembly "{0}" is not a valid assembly file.</target>
-        <note>{StrBegin="MSB3281: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.CannotAccessTypeLibName">
-        <source>MSB3282: Cannot access type library name for library "{0}". {1}</source>
-        <target state="new">MSB3282: Cannot access type library name for library "{0}". {1}</target>
-        <note>{StrBegin="MSB3282: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.CannotFindWrapperForTypeLib">
-        <source>MSB3283: Cannot find wrapper assembly for type library "{0}". Verify that (1) the COM component is registered correctly and (2) your target platform is the same as the bitness of the COM component. For example, if the COM component is 32-bit, your target platform must not be 64-bit.</source>
-        <target state="new">MSB3283: Cannot find wrapper assembly for type library "{0}". Verify that (1) the COM component is registered correctly and (2) your target platform is the same as the bitness of the COM component. For example, if the COM component is 32-bit, your target platform must not be 64-bit.</target>
-        <note>{StrBegin="MSB3283: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.CannotGetPathForTypeLib">
-        <source>MSB3284: Cannot get the file path for type library "{0}" version {1}.{2}. {3}</source>
-        <target state="new">MSB3284: Cannot get the file path for type library "{0}" version {1}.{2}. {3}</target>
-        <note>{StrBegin="MSB3284: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.CannotGetTypeLibAttrForTypeLib">
-        <source>MSB3285: Cannot get type library attributes for a dependent type library!</source>
-        <target state="new">MSB3285: Cannot get type library attributes for a dependent type library!</target>
-        <note>{StrBegin="MSB3285: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.CannotLoadTypeLib">
-        <source>MSB3286: Cannot load type library "{0}" version {1}.{2}. {3}</source>
-        <target state="new">MSB3286: Cannot load type library "{0}" version {1}.{2}. {3}</target>
-        <note>{StrBegin="MSB3286: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.CannotLoadTypeLibItemSpec">
-        <source>MSB3287: Cannot load type library for reference "{0}". {1}</source>
-        <target state="new">MSB3287: Cannot load type library for reference "{0}". {1}</target>
-        <note>{StrBegin="MSB3287: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.CannotRetrieveTypeInformation">
-        <source>MSB3302: Cannot retrieve information about a dependent type.</source>
-        <target state="new">MSB3302: Cannot retrieve information about a dependent type.</target>
-        <note>{StrBegin="MSB3302: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.CannotSpecifyBothKeyFileAndKeyContainer">
-        <source>MSB3300: Cannot specify values for both KeyFile and KeyContainer.</source>
-        <target state="new">MSB3300: Cannot specify values for both KeyFile and KeyContainer.</target>
-        <note>{StrBegin="MSB3300: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.CannotSpecifyDelaySignWithoutEitherKeyFileOrKeyContainer">
-        <source>MSB3301: DelaySign parameter is true, but no KeyFile or KeyContainer was specified.</source>
-        <target state="new">MSB3301: DelaySign parameter is true, but no KeyFile or KeyContainer was specified.</target>
-        <note>{StrBegin="MSB3301: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.ConflictingReferences">
-        <source>MSB3288: COM reference "{0}" conflicts with reference "{1}" - the project references different type libraries with the same type library names. Ignoring reference "{0}".</source>
-        <target state="new">MSB3288: COM reference "{0}" conflicts with reference "{1}" - the project references different type libraries with the same type library names. Ignoring reference "{0}".</target>
-        <note>{StrBegin="MSB3288: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.ErrorCreatingWrapperAssembly">
-        <source>MSB3290: Failed to create the wrapper assembly for type library "{0}". {1}</source>
-        <target state="new">MSB3290: Failed to create the wrapper assembly for type library "{0}". {1}</target>
-        <note>{StrBegin="MSB3290: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.FailedToFindDependentNetAssembly">
-        <source>MSB3291: Could not resolve dependent .NET assembly "{0}". Please make sure this assembly is included in the references section of the project file.</source>
-        <target state="new">MSB3291: Could not resolve dependent .NET assembly "{0}". Please make sure this assembly is included in the references section of the project file.</target>
-        <note>{StrBegin="MSB3291: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.FailedToRemapAdoTypeLib">
-        <source>MSB3292: Failed to remap ADO reference version {0}.{1} to version 2.7 - "{2}".</source>
-        <target state="new">MSB3292: Failed to remap ADO reference version {0}.{1} to version 2.7 - "{2}".</target>
-        <note>{StrBegin="MSB3292: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.FailedToResolveComReference">
-        <source>MSB3303: Could not resolve COM reference "{0}" version {1}.{2}. {3}</source>
-        <target state="new">MSB3303: Could not resolve COM reference "{0}" version {1}.{2}. {3}</target>
-        <note>{StrBegin="MSB3303: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.FailedToResolveDependentComReference">
-        <source>MSB3293: Could not resolve dependent COM reference "{0}" version {1}.{2}.</source>
-        <target state="new">MSB3293: Could not resolve dependent COM reference "{0}" version {1}.{2}.</target>
-        <note>{StrBegin="MSB3293: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.FailedToResolveDependentComReferenceByAssemblyName">
-        <source>MSB3294: Could not resolve dependent COM reference "{0}".</source>
-        <target state="new">MSB3294: Could not resolve dependent COM reference "{0}".</target>
-        <note>{StrBegin="MSB3294: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.FailedToScanDependencies">
-        <source>MSB3304: Could not determine the dependencies of the COM reference "{0}". {1}</source>
-        <target state="new">MSB3304: Could not determine the dependencies of the COM reference "{0}". {1}</target>
-        <note>{StrBegin="MSB3304: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.ResolutionWarning">
-        <source>MSB3305: Processing COM reference "{0}" from path "{1}". {2}</source>
-        <target state="new">MSB3305: Processing COM reference "{0}" from path "{1}". {2}</target>
-        <note>{StrBegin="MSB3305: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.ResolutionMessage">
-        <source>Processing COM reference "{0}" from path "{1}". {2}</source>
-        <target state="new">Processing COM reference "{0}" from path "{1}". {2}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.LoadingDelaySignedAssemblyWithStrongNameVerificationEnabled">
-        <source>MSB3295: Failed to load an assembly. Please make sure you have disabled strong name verification for your public key if you want to generate delay signed wrappers. {0}</source>
-        <target state="new">MSB3295: Failed to load an assembly. Please make sure you have disabled strong name verification for your public key if you want to generate delay signed wrappers. {0}</target>
-        <note>{StrBegin="MSB3295: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.MissingOrUnknownComReferenceAttribute">
-        <source>MSB3296: The specified COM reference meta-data for the reference "{1}" is missing or has an invalid value: "{0}".</source>
-        <target state="new">MSB3296: The specified COM reference meta-data for the reference "{1}" is missing or has an invalid value: "{0}".</target>
-        <note>{StrBegin="MSB3296: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.NoComReferencesSpecified">
-        <source>MSB3297: No COM references have been passed into the task, exiting.</source>
-        <target state="new">MSB3297: No COM references have been passed into the task, exiting.</target>
-        <note>{StrBegin="MSB3297: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.RemappingAdoTypeLib">
-        <source>Remapping ADO reference version {0}.{1} to version 2.7.</source>
-        <target state="new">Remapping ADO reference version {0}.{1} to version 2.7.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.ResolvedDependentComReference">
-        <source>Resolved COM reference dependency "{0}" version {1}.{2}: "{3}"</source>
-        <target state="new">Resolved COM reference dependency "{0}" version {1}.{2}: "{3}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.ResolvedDependentComReferenceByAssemblyName">
-        <source>Resolved COM reference dependency "{0}": "{1}"</source>
-        <target state="new">Resolved COM reference dependency "{0}": "{1}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.ResolvedReference">
-        <source>Resolved COM reference for item "{0}": "{1}".</source>
-        <target state="new">Resolved COM reference for item "{0}": "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.Resolving">
-        <source>Resolving COM reference for item "{0}" with a wrapper "{1}".</source>
-        <target state="new">Resolving COM reference for item "{0}" with a wrapper "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.ResolvingDependency">
-        <source>Resolving COM reference dependency "{0}" version {1}.{2}.</source>
-        <target state="new">Resolving COM reference dependency "{0}" version {1}.{2}.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.ScanningDependencies">
-        <source>Determining dependencies of the COM reference "{0}".</source>
-        <target state="new">Determining dependencies of the COM reference "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveComReference.StrongNameUtils.NoKeyPairInContainer">
-        <source>MSB3298: The key container '{0}' does not contain a public/private key pair.</source>
-        <target state="new">MSB3298: The key container '{0}' does not contain a public/private key pair.</target>
-        <note>{StrBegin="MSB3298: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.StrongNameUtils.NoKeyPairInFile">
-        <source>MSB3299: The key file '{0}' does not contain a public/private key pair.</source>
-        <target state="new">MSB3299: The key file '{0}' does not contain a public/private key pair.</target>
-        <note>{StrBegin="MSB3299: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveComReference.TypeLibAttrId">
-        <source>{0} {1}.{2}</source>
-        <target state="new">{0} {1}.{2}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveKeySource.KeyImportError">
-        <source>MSB3321: Importing key file "{0}" was canceled.</source>
-        <target state="new">MSB3321: Importing key file "{0}" was canceled.</target>
-        <note>{StrBegin="MSB3321: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveKeySource.KeyMD5SumError">
-        <source>MSB3322: Unable to get MD5 checksum for the key file "{0}". {1}</source>
-        <target state="new">MSB3322: Unable to get MD5 checksum for the key file "{0}". {1}</target>
-        <note>{StrBegin="MSB3322: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveKeySource.MsgBoxTitleImportKeyError">
-        <source>Error importing key</source>
-        <target state="new">Error importing key</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveKeySource.CertificateNotInStore">
-        <source>MSB3323: Unable to find manifest signing certificate in the certificate store.</source>
-        <target state="new">MSB3323: Unable to find manifest signing certificate in the certificate store.</target>
-        <note>{StrBegin="MSB3323: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveKeySource.InvalidKeyName">
-        <source>MSB3324: Invalid key file name "{0}". {1}</source>
-        <target state="new">MSB3324: Invalid key file name "{0}". {1}</target>
-        <note>{StrBegin="MSB3324: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveKeySource.KeyFileForSignAssemblyNotImported">
-        <source>MSB3325: Cannot import the following key file: {0}. The key file may be password protected. To correct this, try to import the certificate again or manually install the certificate to the Strong Name CSP with the following key container name: {1}</source>
-        <target state="new">MSB3325: Cannot import the following key file: {0}. The key file may be password protected. To correct this, try to import the certificate again or manually install the certificate to the Strong Name CSP with the following key container name: {1}</target>
-        <note>{StrBegin="MSB3325: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveKeySource.KeyFileForManifestNotImported">
-        <source>MSB3326: Cannot import the following key file: {0}. The key file may be password protected. To correct this, try to import the certificate again or import the certificate manually into the current user‚Äôs personal certificate store.</source>
-        <target state="new">MSB3326: Cannot import the following key file: {0}. The key file may be password protected. To correct this, try to import the certificate again or import the certificate manually into the current user‚Äôs personal certificate store.</target>
-        <note>{StrBegin="MSB3326: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveKeySource.ResolvedThumbprintEmpty">
-        <source>MSB3327: Unable to find code signing certificate in the current user‚Äôs Windows certificate store. To correct this, either disable signing of the ClickOnce manifest or install the certificate into the certificate store.</source>
-        <target state="new">MSB3327: Unable to find code signing certificate in the current user‚Äôs Windows certificate store. To correct this, either disable signing of the ClickOnce manifest or install the certificate into the certificate store.</target>
-        <note>{StrBegin="MSB3327: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveManifestFiles.PublishFileNotFound">
-        <source>MSB3331: Unable to apply publish properties for item "{0}".</source>
-        <target state="new">MSB3331: Unable to apply publish properties for item "{0}".</target>
-        <note>{StrBegin="MSB3331: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveNativeReference.Comment">
-        <source>Processing manifest file "{0}".</source>
-        <target state="new">Processing manifest file "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveNativeReference.ResolveReference">
-        <source>Attempting to resolve reference "{0}" on path(s):</source>
-        <target state="new">Attempting to resolve reference "{0}" on path(s):</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveNativeReference.FailedToResolveReference">
-        <source>MSB3341: Could not resolve reference "{0}". If this reference is required by your code, you may get compilation errors.</source>
-        <target state="new">MSB3341: Could not resolve reference "{0}". If this reference is required by your code, you may get compilation errors.</target>
-        <note>{StrBegin="MSB3341: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveNonMSBuildProjectOutput.ProjectReferenceResolutionFailure">
-        <source>MSB3582: Could not resolve project reference "{0}".</source>
-        <target state="new">MSB3582: Could not resolve project reference "{0}".</target>
-        <note>{StrBegin="MSB3582: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveNonMSBuildProjectOutput.ProjectReferenceUnresolved">
-        <source>Project reference "{0}" has not been resolved.</source>
-        <target state="new">Project reference "{0}" has not been resolved.</target>
-        <note>
-      UE and LOCALIZATION:
-      This is not an error - we pass unresolved references to UnresolvedProjectReferences for further
-      processing in the .targets file.
-    </note>
-      </trans-unit>
-      <trans-unit id="ResolveNonMSBuildProjectOutput.ProjectReferenceResolutionStarting">
-        <source>Resolving project reference "{0}".</source>
-        <target state="new">Resolving project reference "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveNonMSBuildProjectOutput.ProjectReferenceResolutionSuccess">
-        <source>Project reference "{0}" resolved as "{1}".</source>
-        <target state="new">Project reference "{0}" resolved as "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="SGen.ResourceNotFound">
-        <source>MSB3471: Non-existent reference "{0}" passed to the SGen task.</source>
-        <target state="new">MSB3471: Non-existent reference "{0}" passed to the SGen task.</target>
-        <note>{StrBegin="MSB3471: "}</note>
-      </trans-unit>
-      <trans-unit id="SGen.CouldNotDeleteSerializer">
-        <source>MSB3472: We were unable to delete the existing serializer "{0}" before creating a new one: {1}  </source>
-        <target state="new">MSB3472: We were unable to delete the existing serializer "{0}" before creating a new one: {1}  </target>
-        <note>{StrBegin="MSB3472: "}</note>
-      </trans-unit>
-      <trans-unit id="SGen.InvalidPath">
-        <source>MSB3473: Path for "{0}" is invalid. {1}</source>
-        <target state="new">MSB3473: Path for "{0}" is invalid. {1}</target>
-        <note>{StrBegin="MSB3473: "}</note>
-      </trans-unit>
-      <trans-unit id="SGen.TaskNotSupported">
-        <source>MSB3474: The task "{0}" is not supported on the .NET Core version of MSBuild. Use the Microsoft XML Serializer Generator package instead. See https://go.microsoft.com/fwlink/?linkid=858594 for more information.</source>
-        <target state="new">MSB3474: The task "{0}" is not supported on the .NET Core version of MSBuild. Use the Microsoft XML Serializer Generator package instead. See https://go.microsoft.com/fwlink/?linkid=858594 for more information.</target>
-        <note>{StrBegin="MSB3474: "}</note>
-      </trans-unit>
-      <trans-unit id="SignFile.CertNotInStore">
-        <source>MSB3481: The signing certificate could not be located. Ensure that it is in the current user's personal store.</source>
-        <target state="new">MSB3481: The signing certificate could not be located. Ensure that it is in the current user's personal store.</target>
-        <note>{StrBegin="MSB3481: "}</note>
-      </trans-unit>
-      <trans-unit id="SignFile.SignToolError">
-        <source>MSB3482: An error occurred while signing: {0}</source>
-        <target state="new">MSB3482: An error occurred while signing: {0}</target>
-        <note>{StrBegin="MSB3482: "}</note>
-      </trans-unit>
-      <trans-unit id="SignFile.SignToolWarning">
-        <source>MSB3483: A warning occurred while signing: {0}</source>
-        <target state="new">MSB3483: A warning occurred while signing: {0}</target>
-        <note>{StrBegin="MSB3483: "}</note>
-      </trans-unit>
-      <trans-unit id="SignFile.TargetFileNotFound">
-        <source>MSB3484: Signing target '{0}' could not be found.</source>
-        <target state="new">MSB3484: Signing target '{0}' could not be found.</target>
-        <note>{StrBegin="MSB3484: "}</note>
-      </trans-unit>
-      <trans-unit id="SignFile.CertMissingPrivateKey">
-        <source>MSB3487: The signing certificate does not include private key information.</source>
-        <target state="new">MSB3487: The signing certificate does not include private key information.</target>
-        <note>{StrBegin="MSB3487: "}</note>
-      </trans-unit>
-      <trans-unit id="StrongNameUtils.BadKeyContainer">
-        <source>MSB3351: Unable to create a strong name key pair from key container '{0}'.</source>
-        <target state="new">MSB3351: Unable to create a strong name key pair from key container '{0}'.</target>
-        <note>{StrBegin="MSB3351: "}</note>
-      </trans-unit>
-      <trans-unit id="StrongNameUtils.KeyFileReadFailure">
-        <source>MSB3352: The specified key file '{0}' could not be read.</source>
-        <target state="new">MSB3352: The specified key file '{0}' could not be read.</target>
-        <note>{StrBegin="MSB3352: "}</note>
-      </trans-unit>
-      <trans-unit id="StrongNameUtils.NoPublicKeySpecified">
-        <source>MSB3353: Public key necessary for delay signing was not specified.</source>
-        <target state="new">MSB3353: Public key necessary for delay signing was not specified.</target>
-        <note>{StrBegin="MSB3353: "}</note>
-      </trans-unit>
-      <trans-unit id="TaskRequiresFrameworkFailure">
-        <source>MSB4803: The task "{0}" is not supported on the .NET Core version of MSBuild. Please use the .NET Framework version of MSBuild. See https://aka.ms/msbuild/MSB4803 for further details.</source>
-        <target state="new">MSB4803: The task "{0}" is not supported on the .NET Core version of MSBuild. Please use the .NET Framework version of MSBuild. See https://aka.ms/msbuild/MSB4803 for further details.</target>
-        <note>{StrBegin="MSB4803: "}</note>
-      </trans-unit>
-      <trans-unit id="TlbImp.InvalidTransformParameter">
-        <source>MSB3661: Invalid value '{0}' passed to the Transform property.</source>
-        <target state="new">MSB3661: Invalid value '{0}' passed to the Transform property.</target>
-        <note>{StrBegin="MSB3661: "}</note>
-      </trans-unit>
-      <trans-unit id="TlbImp.NoInputFileSpecified">
-        <source>MSB3662: No input file has been passed to the task, exiting.</source>
-        <target state="new">MSB3662: No input file has been passed to the task, exiting.</target>
-        <note>{StrBegin="MSB3662: "}</note>
-      </trans-unit>
-      <trans-unit id="Touch.CannotCreateFile">
-        <source>MSB3371: The file "{0}" cannot be created. {1}</source>
-        <target state="new">MSB3371: The file "{0}" cannot be created. {1}</target>
-        <note>{StrBegin="MSB3371: "}</note>
-      </trans-unit>
-      <trans-unit id="Touch.CannotMakeFileWritable">
-        <source>MSB3372: The file "{0}" cannot be made writable. {1}</source>
-        <target state="new">MSB3372: The file "{0}" cannot be made writable. {1}</target>
-        <note>{StrBegin="MSB3372: "}</note>
-      </trans-unit>
-      <trans-unit id="Touch.CannotRestoreAttributes">
-        <source>MSB3373: The attributes on file "{0}" cannot be restored to their original value. {1}</source>
-        <target state="new">MSB3373: The attributes on file "{0}" cannot be restored to their original value. {1}</target>
-        <note>{StrBegin="MSB3373: "}</note>
-      </trans-unit>
-      <trans-unit id="Touch.CannotTouch">
-        <source>MSB3374: The last access/last write time on file "{0}" cannot be set. {1}</source>
-        <target state="new">MSB3374: The last access/last write time on file "{0}" cannot be set. {1}</target>
-        <note>{StrBegin="MSB3374: "}</note>
-      </trans-unit>
-      <trans-unit id="Touch.CreatingFile">
-        <source>Creating "{0}" because "{1}" was specified.</source>
-        <target state="new">Creating "{0}" because "{1}" was specified.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Touch.FileDoesNotExist">
-        <source>MSB3375: The file "{0}" does not exist.</source>
-        <target state="new">MSB3375: The file "{0}" does not exist.</target>
-        <note>{StrBegin="MSB3375: "}</note>
-      </trans-unit>
-      <trans-unit id="Touch.TimeSyntaxIncorrect">
-        <source>MSB3376: The syntax of the Time parameter is incorrect. {0}</source>
-        <target state="new">MSB3376: The syntax of the Time parameter is incorrect. {0}</target>
-        <note>{StrBegin="MSB3376: "}</note>
-      </trans-unit>
-      <trans-unit id="Touch.Touching">
-        <source>Touching "{0}".</source>
-        <target state="new">Touching "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="UnregisterAssembly.AssemblyPathOrStateFileIsRequired">
-        <source>MSB3396: The "{0}" task needs either an assembly path or state file path.</source>
-        <target state="new">MSB3396: The "{0}" task needs either an assembly path or state file path.</target>
-        <note>{StrBegin="MSB3396: "}</note>
-      </trans-unit>
-      <trans-unit id="UnregisterAssembly.CantUnregisterAssembly">
-        <source>MSB3395: Cannot unregister assembly "{0}". {1}</source>
-        <target state="new">MSB3395: Cannot unregister assembly "{0}". {1}</target>
-        <note>{StrBegin="MSB3395: "}</note>
-      </trans-unit>
-      <trans-unit id="UnregisterAssembly.NoValidTypes">
-        <source>MSB3391: "{0}" does not contain any types that can be unregistered for COM Interop.</source>
-        <target state="new">MSB3391: "{0}" does not contain any types that can be unregistered for COM Interop.</target>
-        <note>{StrBegin="MSB3391: "}</note>
-      </trans-unit>
-      <trans-unit id="UnregisterAssembly.UnauthorizedAccess">
-        <source>MSB3392: Cannot unregister assembly "{0}" - access denied. Please make sure you're running the application as administrator. {1}</source>
-        <target state="new">MSB3392: Cannot unregister assembly "{0}" - access denied. Please make sure you're running the application as administrator. {1}</target>
-        <note>{StrBegin="MSB3392: "}</note>
-      </trans-unit>
-      <trans-unit id="UnregisterAssembly.UnregisterAsmFileDoesNotExist">
-        <source>MSB3393: Cannot unregister assembly "{0}" - file doesn't exist.</source>
-        <target state="new">MSB3393: Cannot unregister assembly "{0}" - file doesn't exist.</target>
-        <note>{StrBegin="MSB3393: "}</note>
-      </trans-unit>
-      <trans-unit id="UnregisterAssembly.UnregisteringAssembly">
-        <source>Unregistering assembly "{0}" for COM Interop.</source>
-        <target state="new">Unregistering assembly "{0}" for COM Interop.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="UnregisterAssembly.UnregisteringTypeLib">
-        <source>Unregistering type library "{0}".</source>
-        <target state="new">Unregistering type library "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="UnregisterAssembly.UnregisterTlbCantLoadFile">
-        <source>MSB3397: Cannot unregister type library "{0}" - cannot load file, check to make sure it's a valid type library.</source>
-        <target state="new">MSB3397: Cannot unregister type library "{0}" - cannot load file, check to make sure it's a valid type library.</target>
-        <note>{StrBegin="MSB3397: "}</note>
-      </trans-unit>
-      <trans-unit id="UnregisterAssembly.UnregisterTlbFileDoesNotExist">
-        <source>Cannot unregister type library "{0}" - file doesn't exist.</source>
-        <target state="new">Cannot unregister type library "{0}" - file doesn't exist.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="UnregisterAssembly.UnregisterTlbFileNotRegistered">
-        <source>MSB3394: Type library "{0}" is not registered, cannot unregister.</source>
-        <target state="new">MSB3394: Type library "{0}" is not registered, cannot unregister.</target>
-        <note>{StrBegin="MSB3394: "}</note>
-      </trans-unit>
-      <trans-unit id="Unzip.DidNotUnzipBecauseOfFileMatch">
-        <source>Did not unzip from file "{0}" to file "{1}" because the "{2}" parameter was set to "{3}" in the project and the files' sizes and timestamps match.</source>
-        <target state="new">Did not unzip from file "{0}" to file "{1}" because the "{2}" parameter was set to "{3}" in the project and the files' sizes and timestamps match.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Unzip.DidNotUnzipBecauseOfFilter">
-        <source>Did not unzip file "{0}" because it didn't match the include filter or because it matched the exclude filter.</source>
-        <target state="new">Did not unzip file "{0}" because it didn't match the include filter or because it matched the exclude filter.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Unzip.ErrorCouldNotCreateDestinationDirectory">
-        <source>MSB3931: Failed to unzip to directory "{0}" because it could not be created.  {1}</source>
-        <target state="new">MSB3931: Failed to unzip to directory "{0}" because it could not be created.  {1}</target>
-        <note>{StrBegin="MSB3931: "}</note>
-      </trans-unit>
-      <trans-unit id="Unzip.ErrorCouldNotExtractFile">
-        <source>MSB3936: Failed to open unzip file "{0}" to "{1}".  {2}</source>
-        <target state="new">MSB3936: Failed to open unzip file "{0}" to "{1}".  {2}</target>
-        <note>{StrBegin="MSB3936: "}</note>
-      </trans-unit>
-      <trans-unit id="Unzip.ErrorCouldNotMakeFileWriteable">
-        <source>MSB3935: Failed to unzip file "{0}" because destination file "{1}" is read-only and could not be made writable.  {2}</source>
-        <target state="new">MSB3935: Failed to unzip file "{0}" because destination file "{1}" is read-only and could not be made writable.  {2}</target>
-        <note>{StrBegin="MSB3935: "}</note>
-      </trans-unit>
-      <trans-unit id="Unzip.ErrorCouldNotOpenFile">
-        <source>MSB3933: Failed to open zip file "{0}".  {1}</source>
-        <target state="new">MSB3933: Failed to open zip file "{0}".  {1}</target>
-        <note>{StrBegin="MSB3933: "}</note>
-      </trans-unit>
-      <trans-unit id="Unzip.ErrorExtractingResultsInFilesOutsideDestination">
-        <source>MSB3934: Failed to open unzip file "{0}" to "{1}" because it is outside the destination directory.</source>
-        <target state="new">MSB3934: Failed to open unzip file "{0}" to "{1}" because it is outside the destination directory.</target>
-        <note>{StrBegin="MSB3934: "}</note>
-      </trans-unit>
-      <trans-unit id="Unzip.ErrorFileDoesNotExist">
-        <source>MSB3932: Failed to unzip file "{0}" because the file does not exist or is inaccessible.</source>
-        <target state="new">MSB3932: Failed to unzip file "{0}" because the file does not exist or is inaccessible.</target>
-        <note>{StrBegin="MSB3932: "}</note>
-      </trans-unit>
-      <trans-unit id="Unzip.ErrorParsingPatternInvalidPath">
-        <source>MSB3937: Failed to parse pattern "{0}" because it contains an invalid path character.</source>
-        <target state="new">MSB3937: Failed to parse pattern "{0}" because it contains an invalid path character.</target>
-        <note>{StrBegin="MSB3937: "}</note>
-      </trans-unit>
-      <trans-unit id="Unzip.ErrorParsingPatternPropertyReferences">
-        <source>MSB3938: Failed to parse pattern "{0}" because it contains a property reference which isn't supported.</source>
-        <target state="new">MSB3938: Failed to parse pattern "{0}" because it contains a property reference which isn't supported.</target>
-        <note>{StrBegin="MSB3938: "}</note>
-      </trans-unit>
-      <trans-unit id="Unzip.FileComment">
-        <source>Unzipping file "{0}" to "{1}".</source>
-        <target state="new">Unzipping file "{0}" to "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Vbc.EnumParameterHasInvalidValue">
-        <source>MSB3401: "{1}" is an invalid value for the "{0}" parameter.  The valid values are: {2}</source>
-        <target state="new">MSB3401: "{1}" is an invalid value for the "{0}" parameter.  The valid values are: {2}</target>
-        <note>{StrBegin="MSB3401: "}</note>
-      </trans-unit>
-      <trans-unit id="VBC.RenamePDB">
-        <source>MSB3402: There was an error creating the pdb file "{0}". {1}</source>
-        <target state="new">MSB3402: There was an error creating the pdb file "{0}". {1}</target>
-        <note>{StrBegin="MSB3402: "}</note>
-      </trans-unit>
-      <trans-unit id="Vbc.ParameterHasInvalidValue">
-        <source>"{1}" is an invalid value for the "{0}" parameter.</source>
-        <target state="new">"{1}" is an invalid value for the "{0}" parameter.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="VerifyFileHash.HashMismatch">
-        <source>MSB3952: File hash mismatch. Expected {0} to have a {1} file hash of {2}, but it was {3}.</source>
-        <target state="new">MSB3952: File hash mismatch. Expected {0} to have a {1} file hash of {2}, but it was {3}.</target>
-        <note>{StrBegin="MSB3952: "}</note>
-      </trans-unit>
-      <trans-unit id="WriteCodeFragment.CouldNotConvertToInferredType">
-        <source>Could not convert the value for parameter "{0}" to the inferred type "{1}". The value will be treated as a string. {2}</source>
-        <target state="new">Could not convert the value for parameter "{0}" to the inferred type "{1}". The value will be treated as a string. {2}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="WriteCodeFragment.CouldNotConvertValue">
-        <source>MSB3716: The parameter value "{0}" could not be converted to "{1}". {2}</source>
-        <target state="new">MSB3716: The parameter value "{0}" could not be converted to "{1}". {2}</target>
-        <note>{StrBegin="MSB3716: "}</note>
-      </trans-unit>
-      <trans-unit id="WriteCodeFragment.CouldNotInferParameterType">
-        <source>Could not infer the type of parameter "{0}" because the attribute type is unknown. The value will be treated as a string.</source>
-        <target state="new">Could not infer the type of parameter "{0}" because the attribute type is unknown. The value will be treated as a string.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="WriteCodeFragment.MultipleConstructorsFound">
-        <source>Multiple attribute constructors were found for type inferencing.</source>
-        <target state="new">Multiple attribute constructors were found for type inferencing.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="WriteCodeFragment.ParameterTypeNotFound">
-        <source>MSB3715: The type "{0}" was not found.</source>
-        <target state="new">MSB3715: The type "{0}" was not found.</target>
-        <note>{StrBegin="MSB3715: "}</note>
-      </trans-unit>
-      <trans-unit id="WriteLinesToFile.ErrorOrWarning">
-        <source>MSB3491: Could not write lines to file "{0}". {1}</source>
-        <target state="new">MSB3491: Could not write lines to file "{0}". {1}</target>
-        <note>{StrBegin="MSB3491: "}</note>
-      </trans-unit>
-      <trans-unit id="WriteLinesToFile.ErrorReadingFile">
-        <source>MSB3492: Could not read existing file "{0}" to determine whether its contents are up to date. Overwriting it.</source>
-        <target state="new">MSB3492: Could not read existing file "{0}" to determine whether its contents are up to date. Overwriting it.</target>
-        <note>{StrBegin="MSB3492: "}</note>
-      </trans-unit>
-      <trans-unit id="WriteLinesToFile.SkippingUnchangedFile">
-        <source>Skipping write to file "{0}" because content would not change.</source>
-        <target state="new">Skipping write to file "{0}" because content would not change.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetReferenceAssemblyPaths.InvalidTargetFrameworkMoniker">
-        <source>MSB3642: The Target Framework Moniker "{0}" is invalid. "{1}"</source>
-        <target state="new">MSB3642: The Target Framework Moniker "{0}" is invalid. "{1}"</target>
-        <note>{StrBegin="MSB3642: "}</note>
-      </trans-unit>
-      <trans-unit id="GetReferenceAssemblyPaths.ProblemGeneratingReferencePaths">
-        <source>MSB3643: There was an error generating reference assembly paths based on the TargetFrameworkMoniker "{0}". {1}</source>
-        <target state="new">MSB3643: There was an error generating reference assembly paths based on the TargetFrameworkMoniker "{0}". {1}</target>
-        <note>{StrBegin="MSB3643: "}</note>
-      </trans-unit>
-      <trans-unit id="GetReferenceAssemblyPaths.NoReferenceAssemblyDirectoryFound">
-        <source>MSB3644: The reference assemblies for {0} were not found. To resolve this, install the Developer Pack (SDK/Targeting Pack) for this framework version or retarget your application. You can download .NET Framework Developer Packs at https://aka.ms/msbuild/developerpacks</source>
-        <target state="new">MSB3644: The reference assemblies for {0} were not found. To resolve this, install the Developer Pack (SDK/Targeting Pack) for this framework version or retarget your application. You can download .NET Framework Developer Packs at https://aka.ms/msbuild/developerpacks</target>
-        <note>{StrBegin="MSB3644: "}</note>
-      </trans-unit>
-      <trans-unit id="GetReferenceAssemblyPaths.NETFX35SP1NotIntstalled">
-        <source>MSB3645: .NET Framework v3.5 Service Pack 1 was not found. In order to target "{0}", .NET Framework v3.5 Service Pack 1 or later must be installed.</source>
-        <target state="new">MSB3645: .NET Framework v3.5 Service Pack 1 was not found. In order to target "{0}", .NET Framework v3.5 Service Pack 1 or later must be installed.</target>
-        <note>{StrBegin="MSB3645: "}</note>
-      </trans-unit>
-      <trans-unit id="WinMDExp.MustPassReferences">
-        <source>MSB3762: No references were passed to the task. References to at least mscorlib and Windows.Foundation are required.</source>
-        <target state="new">MSB3762: No references were passed to the task. References to at least mscorlib and Windows.Foundation are required.</target>
-        <note>{StrBegin="MSB3762: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.DuplicatePropertyName">
-        <source>MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</source>
-        <target state="new">MSB3724: Unable to create Xaml task.  Duplicate property name '{0}'.</target>
-        <note>{StrBegin="MSB3724: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.TaskCreationFailed">
-        <source>MSB3686: Unable to create Xaml task.  Compilation failed.  {0}</source>
-        <target state="new">MSB3686: Unable to create Xaml task.  Compilation failed.  {0}</target>
-        <note>{StrBegin="MSB3686: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.RuleParseFailed">
-        <source>MSB3687: Unable to parse Xaml rule.  {0}</source>
-        <target state="new">MSB3687: Unable to parse Xaml rule.  {0}</target>
-        <note>{StrBegin="MSB3687: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.RuleFileNotFound">
-        <source>MSB3688: Unable to create Xaml task.  File not found: {0}.</source>
-        <target state="new">MSB3688: Unable to create Xaml task.  File not found: {0}.</target>
-        <note>{StrBegin="MSB3688: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.RuleMissingToolName">
-        <source>MSB3689: Unable to execute Xaml task.  If the CommandLineTemplate task parameter is not specified, then the ToolName attribute must be specified in the Rule or the ToolExe task parameter must be set.</source>
-        <target state="new">MSB3689: Unable to execute Xaml task.  If the CommandLineTemplate task parameter is not specified, then the ToolName attribute must be specified in the Rule or the ToolExe task parameter must be set.</target>
-        <note>{StrBegin="MSB3689: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.RuleNotFound">
-        <source>MSB3690: Unable to create Xaml task.  The Rule "{0}" was not found.</source>
-        <target state="new">MSB3690: Unable to create Xaml task.  The Rule "{0}" was not found.</target>
-        <note>{StrBegin="MSB3690: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.InvalidRootObject">
-        <source>MSB3691: Unable to create Xaml task.  The root object was not of type ProjectSchemaDefinitions.</source>
-        <target state="new">MSB3691: Unable to create Xaml task.  The root object was not of type ProjectSchemaDefinitions.</target>
-        <note>{StrBegin="MSB3691: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.MissingTaskBody">
-        <source>MSB3692: Unable to create Xaml task.  The &lt;UsingTask&gt; does not contain a &lt;Task&gt; definition.</source>
-        <target state="new">MSB3692: Unable to create Xaml task.  The &lt;UsingTask&gt; does not contain a &lt;Task&gt; definition.</target>
-        <note>{StrBegin="MSB3692: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.ArgumentOutOfRange">
-        <source>MSB3693: Unable to execute Xaml task.  The value "{1}" specified for task parameter "{0}" is not valid.</source>
-        <target state="new">MSB3693: Unable to execute Xaml task.  The value "{1}" specified for task parameter "{0}" is not valid.</target>
-        <note>{StrBegin="MSB3693: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.MissingSwitchValue">
-        <source>MSB3694: Unable to create Xaml task.  The EnumValue "{1}" on EnumProperty "{0}" is missing the SwitchValue attribute.</source>
-        <target state="new">MSB3694: Unable to create Xaml task.  The EnumValue "{1}" on EnumProperty "{0}" is missing the SwitchValue attribute.</target>
-        <note>{StrBegin="MSB3694: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.CommandFailed">
-        <source>MSB3721: The command "{0}" exited with code {1}.</source>
-        <target state="new">MSB3721: The command "{0}" exited with code {1}.</target>
-        <note>{StrBegin="MSB3721: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.CommandFailedAccessDenied">
-        <source>MSB3722: The command "{0}" exited with code {1}. Please verify that you have sufficient rights to run this command.</source>
-        <target state="new">MSB3722: The command "{0}" exited with code {1}. Please verify that you have sufficient rights to run this command.</target>
-        <note>{StrBegin="MSB3722: "}</note>
-      </trans-unit>
-      <trans-unit id="Xaml.MissingRequiredArgument">
-        <source>MSB3723: The parameter "{0}" requires missing parameter "{1}" to be set.</source>
-        <target state="new">MSB3723: The parameter "{0}" requires missing parameter "{1}" to be set.</target>
-        <note>{StrBegin="MSB3723: "}</note>
-      </trans-unit>
-      <trans-unit id="XslTransform.ArgumentError">
-        <source>MSB3701: Unable to load arguments for the XslTransformation task. {0}</source>
-        <target state="new">MSB3701: Unable to load arguments for the XslTransformation task. {0}</target>
-        <note>{StrBegin="MSB3701: "}</note>
-      </trans-unit>
-      <trans-unit id="XslTransform.PrecompiledXsltError">
-        <source>MSB3705: XslCompiledDllPath is not supported when building with .NET Core.</source>
-        <target state="new">MSB3705: XslCompiledDllPath is not supported when building with .NET Core.</target>
-        <note>{StrBegin="MSB3705: "}</note>
-      </trans-unit>
-      <trans-unit id="XslTransform.XsltArgumentsError">
-        <source>MSB3702: Unable to process the XsltParameters argument for the XslTransformation task. {0}</source>
-        <target state="new">MSB3702: Unable to process the XsltParameters argument for the XslTransformation task. {0}</target>
-        <note>{StrBegin="MSB3702: "}</note>
-      </trans-unit>
-      <trans-unit id="XslTransform.TransformError">
-        <source>MSB3703: Unable to execute transformation. {0}</source>
-        <target state="new">MSB3703: Unable to execute transformation. {0}</target>
-        <note>{StrBegin="MSB3703: "}</note>
-      </trans-unit>
-      <trans-unit id="XslTransform.XmlInput.TooMany">
-        <source>Only one of XmlContent or XmlInputPaths arguments can be set.</source>
-        <target state="new">Only one of XmlContent or XmlInputPaths arguments can be set.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XslTransform.XmlInput.TooFew">
-        <source>One of XmlContent or XmlInputPaths arguments must be set.</source>
-        <target state="new">One of XmlContent or XmlInputPaths arguments must be set.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XslTransform.XsltInput.TooMany">
-        <source>Only one of XslContent, XslInputPath or XslCompiledDllPath arguments can be set.</source>
-        <target state="new">Only one of XslContent, XslInputPath or XslCompiledDllPath arguments can be set.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XslTransform.XsltInput.TooFew">
-        <source>One of XslContent, XslInputPath and XslCompiledDllPath arguments must be set.</source>
-        <target state="new">One of XslContent, XslInputPath and XslCompiledDllPath arguments must be set.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XslTransform.XsltLoadError">
-        <source>MSB3704: Unable to load the specified Xslt. {0}</source>
-        <target state="new">MSB3704: Unable to load the specified Xslt. {0}</target>
-        <note>{StrBegin="MSB3704: "}</note>
-      </trans-unit>
-      <trans-unit id="XslTransform.MustSpecifyType">
-        <source>When specifying assembly "{0}", you must specify the type as well.</source>
-        <target state="new">When specifying assembly "{0}", you must specify the type as well.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XslTransform.XsltParameterNoAttribute">
-        <source>The specified Xslt Parameter doesn't have attribute "{0}".</source>
-        <target state="new">The specified Xslt Parameter doesn't have attribute "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XslTransform.XsltParameterNotWellFormed">
-        <source>The specified Xslt Parameter attribute is not a well-formed XML fragment.</source>
-        <target state="new">The specified Xslt Parameter attribute is not a well-formed XML fragment.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XslTransform.UseTrustedSettings">
-        <source>The usage of the document() method and embedded scripts is prohibited by default, due to risks of foreign code execution.  If "{0}" is a trusted source that requires those constructs, please set the "UseTrustedSettings" parameter to "true" to allow their execution.</source>
-        <target state="new">The usage of the document() method and embedded scripts is prohibited by default, due to risks of foreign code execution.  If "{0}" is a trusted source that requires those constructs, please set the "UseTrustedSettings" parameter to "true" to allow their execution.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XmlPoke.NamespacesError">
-        <source>MSB3731: Unable to process the Namespaces argument for the XmlPoke task. {0}</source>
-        <target state="new">MSB3731: Unable to process the Namespaces argument for the XmlPoke task. {0}</target>
-        <note>{StrBegin="MSB3731: "}</note>
-      </trans-unit>
-      <trans-unit id="XmlPoke.NamespacesParameterNoAttribute">
-        <source>The specified Namespaces attribute doesn't have attribute "{0}".</source>
-        <target state="new">The specified Namespaces attribute doesn't have attribute "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XmlPoke.NamespacesParameterNotWellFormed">
-        <source>The specified Namespaces attribute is not a well-formed XML fragment.</source>
-        <target state="new">The specified Namespaces attribute is not a well-formed XML fragment.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XmlPoke.Replaced">
-        <source>Replaced "{0}" with "{1}".</source>
-        <target state="new">Replaced "{0}" with "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XmlPoke.Count">
-        <source>Made {0} replacement(s).</source>
-        <target state="new">Made {0} replacement(s).</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XmlPoke.XPathContextError">
-        <source>MSB3732: Unable to set XPath expression's Context. {0}</source>
-        <target state="new">MSB3732: Unable to set XPath expression's Context. {0}</target>
-        <note>{StrBegin="MSB3732: "}</note>
-      </trans-unit>
-      <trans-unit id="XmlPeekPoke.InputFileError">
-        <source>MSB3733: Input file "{0}" cannot be opened. {1}</source>
-        <target state="new">MSB3733: Input file "{0}" cannot be opened. {1}</target>
-        <note>{StrBegin="MSB3733: "}</note>
-      </trans-unit>
-      <trans-unit id="XmlPeekPoke.XPathError">
-        <source>MSB3734: XPath Query "{0}" cannot be loaded. {1}</source>
-        <target state="new">MSB3734: XPath Query "{0}" cannot be loaded. {1}</target>
-        <note>{StrBegin="MSB3734: "}</note>
-      </trans-unit>
-      <trans-unit id="XmlPoke.PokeError">
-        <source>MSB3735: Error while executing poke operation with the Value parameter "{0}". {1}</source>
-        <target state="new">MSB3735: Error while executing poke operation with the Value parameter "{0}". {1}</target>
-        <note>{StrBegin="MSB3735: "}</note>
-      </trans-unit>
-      <trans-unit id="XmlPeek.ArgumentError">
-        <source>MSB3741: Unable to load arguments for the XmlPeek task. {0}</source>
-        <target state="new">MSB3741: Unable to load arguments for the XmlPeek task. {0}</target>
-        <note>{StrBegin="MSB3741: "}</note>
-      </trans-unit>
-      <trans-unit id="XmlPeek.NamespacesError">
-        <source>MSB3742: Unable to process the Namespaces argument for the XmlPeek task. {0}</source>
-        <target state="new">MSB3742: Unable to process the Namespaces argument for the XmlPeek task. {0}</target>
-        <note>{StrBegin="MSB3742: "}</note>
-      </trans-unit>
-      <trans-unit id="XmlPeek.XPathContextError">
-        <source>MSB3743: Unable to set XPath expression's Context. {0}</source>
-        <target state="new">MSB3743: Unable to set XPath expression's Context. {0}</target>
-        <note>{StrBegin="MSB3743: "}</note>
-      </trans-unit>
-      <trans-unit id="XmlPeek.XmlInput.TooMany">
-        <source>Only one of XmlContent or XmlInputPath arguments can be set.</source>
-        <target state="new">Only one of XmlContent or XmlInputPath arguments can be set.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XmlPeek.XmlInput.TooFew">
-        <source>One of XmlContent or XmlInputPath arguments must be set.</source>
-        <target state="new">One of XmlContent or XmlInputPath arguments must be set.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XmlPeek.NamespacesParameterNoAttribute">
-        <source>The specified Namespaces attribute does not have attribute "{0}".</source>
-        <target state="new">The specified Namespaces attribute does not have attribute "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XmlPeek.NamespacesParameterNotWellFormed">
-        <source>The specified Namespaces attribute is not a well-formed XML fragment.</source>
-        <target state="new">The specified Namespaces attribute is not a well-formed XML fragment.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XmlPeek.Found">
-        <source>Found "{0}".</source>
-        <target state="new">Found "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="XmlPeek.NotFound">
-        <source>The specified XPath query did not capture any nodes.</source>
-        <target state="new">The specified XPath query did not capture any nodes.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="WriteCodeFragment.MustSpecifyLocation">
-        <source>MSB3711: At least one of OutputFile or OutputDirectory must be provided.</source>
-        <target state="new">MSB3711: At least one of OutputFile or OutputDirectory must be provided.</target>
-        <note>{StrBegin="MSB3711: "}</note>
-      </trans-unit>
-      <trans-unit id="WriteCodeFragment.CouldNotCreateProvider">
-        <source>MSB3712: Code for the language "{0}" could not be generated. {1}</source>
-        <target state="new">MSB3712: Code for the language "{0}" could not be generated. {1}</target>
-        <note>{StrBegin="MSB3712: "}</note>
-      </trans-unit>
-      <trans-unit id="WriteCodeFragment.CouldNotWriteOutput">
-        <source>MSB3713: The file "{0}" could not be created. {1}</source>
-        <target state="new">MSB3713: The file "{0}" could not be created. {1}</target>
-        <note>{StrBegin="MSB3713: "}</note>
-      </trans-unit>
-      <trans-unit id="WriteCodeFragment.SkippedNumberedParameter">
-        <source>MSB3714: The parameter "{0}" was supplied, but not all previously numbered parameters.</source>
-        <target state="new">MSB3714: The parameter "{0}" was supplied, but not all previously numbered parameters.</target>
-        <note>{StrBegin="MSB3714: "}</note>
-      </trans-unit>
-      <trans-unit id="WriteCodeFragment.NoWorkToDo">
-        <source>No output file was written because no code was specified to create.</source>
-        <target state="new">No output file was written because no code was specified to create.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="WriteCodeFragment.GeneratedFile">
-        <source>Emitted specified code into "{0}".</source>
-        <target state="new">Emitted specified code into "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="WriteCodeFragment.Comment">
-        <source>Generated by the MSBuild WriteCodeFragment class.</source>
-        <target state="new">Generated by the MSBuild WriteCodeFragment class.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.CodeElementIsMissing">
-        <source>MSB3751: The &lt;Code&gt; element is missing for the "{0}" task. This element is required.</source>
-        <target state="new">MSB3751: The &lt;Code&gt; element is missing for the "{0}" task. This element is required.</target>
-        <note>{StrBegin="MSB3751: "} &lt;Code&gt; should not be localized it is the name of an xml element</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.AttributeEmpty">
-        <source>MSB3752: The "{0}" attribute has been set but is empty. If the "{0}" attribute is set it must not be empty.</source>
-        <target state="new">MSB3752: The "{0}" attribute has been set but is empty. If the "{0}" attribute is set it must not be empty.</target>
-        <note>{StrBegin="MSB3752: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.NeedsITaskInterface">
-        <source>MSB3753: The task could not be instantiated because it does not implement the ITask interface. Make sure the task implements the Microsoft.Build.Framework.ITask interface.</source>
-        <target state="new">MSB3753: The task could not be instantiated because it does not implement the ITask interface. Make sure the task implements the Microsoft.Build.Framework.ITask interface.</target>
-        <note>{StrBegin="MSB3753: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.ReferenceAssemblyIsInvalid">
-        <source>MSB3754: The reference assembly "{0}" is invalid. "{1}"</source>
-        <target state="new">MSB3754: The reference assembly "{0}" is invalid. "{1}"</target>
-        <note>{StrBegin="MSB3754: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.CouldNotFindReferenceAssembly">
-        <source>MSB3755: Could not find reference "{0}". If this reference is required by your code, you may get compilation errors.</source>
-        <target state="new">MSB3755: Could not find reference "{0}". If this reference is required by your code, you may get compilation errors.</target>
-        <note>{StrBegin="MSB3755: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.InvalidElementLocation">
-        <source>MSB3756: The element &lt;{0}&gt; is not a valid child of the &lt;{1}&gt; element.  Valid child elements are &lt;Code&gt;, &lt;Reference&gt;, and &lt;Using&gt;.</source>
-        <target state="new">MSB3756: The element &lt;{0}&gt; is not a valid child of the &lt;{1}&gt; element.  Valid child elements are &lt;Code&gt;, &lt;Reference&gt;, and &lt;Using&gt;.</target>
-        <note>{StrBegin="MSB3756: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.MultipleCodeNodes">
-        <source>MSB3757: Only one &lt;Code&gt; element can be specified.</source>
-        <target state="new">MSB3757: Only one &lt;Code&gt; element can be specified.</target>
-        <note>{StrBegin="MSB3757: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.CompilerError">
-        <source>MSB3758: An error has occurred during compilation. {0}</source>
-        <target state="new">MSB3758: An error has occurred during compilation. {0}</target>
-        <note>{StrBegin="MSB3758: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.CouldNotFindTaskInAssembly">
-        <source>The task name "{0}" could not be found.</source>
-        <target state="new">The task name "{0}" could not be found.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.FindSourceFileAt">
-        <source>The source file for this compilation can be found at: "{0}"</source>
-        <target state="new">The source file for this compilation can be found at: "{0}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="CodeTaskFactory.HaveReflectionOnlyAssembly">
-        <source>The reference assembly "{0}" is a metadata only assembly.</source>
-        <target state="new">The reference assembly "{0}" is a metadata only assembly.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.SearchingForSDK">
-        <source>Searching for SDK "{0}": </source>
-        <target state="new">Searching for SDK "{0}": </target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.FoundSDK">
-        <source>Found at search location "{0}".</source>
-        <target state="new">Found at search location "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.ErrorReadingManifest">
-        <source>There was a problem reading the SDK manifest file "{0}". {1}</source>
-        <target state="new">There was a problem reading the SDK manifest file "{0}". {1}</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.ReadingSDKManifestFile">
-        <source>Reading SDK manifest file "{0}".</source>
-        <target state="new">Reading SDK manifest file "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.TargetedConfigAndArchitecture">
-        <source>Targeted configuration and architecture "{0}|{1}"</source>
-        <target state="new">Targeted configuration and architecture "{0}|{1}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.PlatformSDK">
-        <source>Has a platform identity of "{0}".</source>
-        <target state="new">Has a platform identity of "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.CouldNotFindFrameworkIdentity">
-        <source>Could not find "FrameworkIdentity" attribute "{0}" in the SDK manifest. </source>
-        <target state="new">Could not find "FrameworkIdentity" attribute "{0}" in the SDK manifest. </target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.NoFrameworkIdentitiesFound">
-        <source>No FrameworkIdentity attributes were found in the SDK manifest, treating this SDK as a non-framework SDK.</source>
-        <target state="new">No FrameworkIdentity attributes were found in the SDK manifest, treating this SDK as a non-framework SDK.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.NoAppxLocationsFound">
-        <source>No "APPX" attributes indicating app package locations were found in the SDK manifest. If an app package is required at runtime the project may not run.</source>
-        <target state="new">No "APPX" attributes indicating app package locations were found in the SDK manifest. If an app package is required at runtime the project may not run.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.FoundFrameworkIdentity">
-        <source>Found "FrameworkIdentity" attribute "{0}" in the SDK manifest.</source>
-        <target state="new">Found "FrameworkIdentity" attribute "{0}" in the SDK manifest.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.FoundAppxLocation">
-        <source>Found "APPX" location attribute "{0}" in the SDK manifest.</source>
-        <target state="new">Found "APPX" location attribute "{0}" in the SDK manifest.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.ReplaceAppxLocation">
-        <source>Updating the "{0}" architecture "APPX" location from "{1}" to "{2}". </source>
-        <target state="new">Updating the "{0}" architecture "APPX" location from "{1}" to "{2}". </target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.NoSDKLocationsSpecified">
-        <source>Cannot resolve "SDKReference" items because no installed SDK locations were passed into the property "InstalledSdks".</source>
-        <target state="new">Cannot resolve "SDKReference" items because no installed SDK locations were passed into the property "InstalledSdks".</target>
-        <note>"SDKReference" and "InstalledSDKs" are property names on the task and should not be localized</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.CannotReferenceTwoSDKsSameFamily">
-        <source>MSB3773: The SDK "{0}" cannot be referenced alongside SDK(s) {1}, as they all belong to the same SDK product Family "{2}". Please consider removing references to other SDKs of the same product family.</source>
-        <target state="new">MSB3773: The SDK "{0}" cannot be referenced alongside SDK(s) {1}, as they all belong to the same SDK product Family "{2}". Please consider removing references to other SDKs of the same product family.</target>
-        <note>{StrBegin="MSB3773: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.CouldNotResolveSDK">
-        <source>MSB3774: Could not find SDK "{0}".</source>
-        <target state="new">MSB3774: Could not find SDK "{0}".</target>
-        <note>{StrBegin="MSB3774: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.ErrorResolvingSDK">
-        <source>MSB3775: There was an error resolving the SDK "{0}". {1}</source>
-        <target state="new">MSB3775: There was an error resolving the SDK "{0}". {1}</target>
-        <note>{StrBegin="MSB3775: "} "{0}" will be the root location which could not be searched. Ie (c:\program files\sdks\..) </note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.SDKReferenceIncorrectFormat">
-        <source>MSB3776: The SDK Reference "{0}" is incorrectly formatted. It must be in the following format "&lt;SDKName&gt;, Version=&lt;SDKVersion&gt;. For example: "MySDK, Version=2.0"</source>
-        <target state="new">MSB3776: The SDK Reference "{0}" is incorrectly formatted. It must be in the following format "&lt;SDKName&gt;, Version=&lt;SDKVersion&gt;. For example: "MySDK, Version=2.0"</target>
-        <note>{StrBegin="MSB3776: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.NoMatchingFrameworkIdentity">
-        <source>MSB3777: "FrameworkIdentity" attributes were found in the SDK manifest file "{0}", however none of the attributes matched the targeted configuration and architecture "{1} | {2}" and no "FrameworkIdentity" attribute without configuration and architecture could be found. If this project is to be packaged, packaging will fail.</source>
-        <target state="new">MSB3777: "FrameworkIdentity" attributes were found in the SDK manifest file "{0}", however none of the attributes matched the targeted configuration and architecture "{1} | {2}" and no "FrameworkIdentity" attribute without configuration and architecture could be found. If this project is to be packaged, packaging will fail.</target>
-        <note>{StrBegin="MSB3777: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.NoMatchingAppxLocation">
-        <source>MSB3778: "APPX" attributes were found in the SDK manifest file "{0}" however none of the attributes matched the targeted configuration and architecture "{1} | {2}" and no "APPX" attribute without configuration and architecture could be found. If an app package is required then the project will fail at runtime.</source>
-        <target state="new">MSB3778: "APPX" attributes were found in the SDK manifest file "{0}" however none of the attributes matched the targeted configuration and architecture "{1} | {2}" and no "APPX" attribute without configuration and architecture could be found. If an app package is required then the project will fail at runtime.</target>
-        <note>{StrBegin="MSB3778: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.TargetArchitectureNotSupported">
-        <source>MSB3779: The processor architecture of the project being built "{0}" is not supported by the referenced SDK "{1}". Please consider changing the targeted processor architecture of your project (in Visual Studio this can be done through the Configuration Manager) to one of the architectures supported by the SDK: "{2}".</source>
-        <target state="new">MSB3779: The processor architecture of the project being built "{0}" is not supported by the referenced SDK "{1}". Please consider changing the targeted processor architecture of your project (in Visual Studio this can be done through the Configuration Manager) to one of the architectures supported by the SDK: "{2}".</target>
-        <note>{StrBegin="MSB3779: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.CannotReferenceTwoSDKsSameName">
-        <source>MSB3780: The SDK "{0}" cannot be referenced alongside SDK(s) {1}, because only one version of the SDK can be referenced from a project. Please consider removing references to the other SDKs.</source>
-        <target state="new">MSB3780: The SDK "{0}" cannot be referenced alongside SDK(s) {1}, because only one version of the SDK can be referenced from a project. Please consider removing references to the other SDKs.</target>
-        <note>{StrBegin="MSB3780: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.SDKMissingDependency">
-        <source>MSB3781: The SDK "{0}" depends on the following SDK(s) {1}, which have not been added to the project or were not found. Please ensure that you add these dependencies to your project or you may experience runtime issues. You can add dependencies to your project through the Reference Manager.</source>
-        <target state="new">MSB3781: The SDK "{0}" depends on the following SDK(s) {1}, which have not been added to the project or were not found. Please ensure that you add these dependencies to your project or you may experience runtime issues. You can add dependencies to your project through the Reference Manager.</target>
-        <note>{StrBegin="MSB3781: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.Prefer32BitNotSupportedWithNeutralProject">
-        <source>MSB3782: The "{0}" SDK does not support targeting a neutral architecture with "Prefer 32-Bit" enabled for the project. Please go to the project properties (Build tab for C# and Compile tab for VB) and disable the "Prefer 32-bit" option, or change your project to target a non-neutral architecture.</source>
-        <target state="new">MSB3782: The "{0}" SDK does not support targeting a neutral architecture with "Prefer 32-Bit" enabled for the project. Please go to the project properties (Build tab for C# and Compile tab for VB) and disable the "Prefer 32-bit" option, or change your project to target a non-neutral architecture.</target>
-        <note>{StrBegin="MSB3782: "} Also, please localize "Prefer 32-Bit" in the same way that it is localized in wizard\vbdesigner\designer\proppages\buildproppage.resx</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.MaxPlatformVersionLessThanTargetPlatformVersion">
-        <source>MSB3783: Project "{0}" depends upon SDK "{1} v{2}" which was released originally for apps targeting "{3} {4}". To verify whether "{1} v{2}" is compatible with "{5} {6}", contact the SDK author or see http://go.microsoft.com/fwlink/?LinkID=309181.</source>
-        <target state="new">MSB3783: Project "{0}" depends upon SDK "{1} v{2}" which was released originally for apps targeting "{3} {4}". To verify whether "{1} v{2}" is compatible with "{5} {6}", contact the SDK author or see http://go.microsoft.com/fwlink/?LinkID=309181.</target>
-        <note>{StrBegin="MSB3783: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.InvalidDependencyInPlatform">
-        <source>MSB3841: The SDK "{0}" depends on the SDK "{1}", which is not compatible with "{2} {3}". Please reference a version of SDK "{0}" which supports "{2} {3}".</source>
-        <target state="new">MSB3841: The SDK "{0}" depends on the SDK "{1}", which is not compatible with "{2} {3}". Please reference a version of SDK "{0}" which supports "{2} {3}".</target>
-        <note>{StrBegin="MSB3841: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.MaxPlatformVersionNotSpecified">
-        <source>MSB3842: Project "{0}" depends upon SDK "{1} v{2}" which supports apps targeting "{3} {4}". To verify whether "{1} v{2}" is compatible with "{5} {6}", contact the SDK author or see http://go.microsoft.com/fwlink/?LinkID=309181.</source>
-        <target state="new">MSB3842: Project "{0}" depends upon SDK "{1} v{2}" which supports apps targeting "{3} {4}". To verify whether "{1} v{2}" is compatible with "{5} {6}", contact the SDK author or see http://go.microsoft.com/fwlink/?LinkID=309181.</target>
-        <note>{StrBegin="MSB3842: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.TargetPlatformIdentifierDoesNotMatch">
-        <source>MSB3843: Project "{0}" targets platform "{3}", but references SDK "{1} v{2}" which targets platform "{4}".</source>
-        <target state="new">MSB3843: Project "{0}" targets platform "{3}", but references SDK "{1} v{2}" which targets platform "{4}".</target>
-        <note>{StrBegin="MSB3843: "}</note>
-      </trans-unit>
-      <trans-unit id="ResolveSDKReference.PlatformVersionIsLessThanMinVersion">
-        <source>MSB3844: Project "{0}" targets platform version "{3}", but references SDK "{1} v{2}" which requires platform version "{4}" or higher.</source>
-        <target state="new">MSB3844: Project "{0}" targets platform version "{3}", but references SDK "{1} v{2}" which requires platform version "{4}" or higher.</target>
-        <note>{StrBegin="MSB3844: "}</note>
-      </trans-unit>
-      <trans-unit id="GetInstalledSDKs.ListInstalledSDKs">
-        <source>Installed SDKs:</source>
-        <target state="new">Installed SDKs:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetInstalledSDKs.SDKNameAndLocation">
-        <source>SDK "{0}" is installed at "{1}"</source>
-        <target state="new">SDK "{0}" is installed at "{1}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetInstalledSDKs.FoundSDKs">
-        <source>Found "{0}" SDKs.</source>
-        <target state="new">Found "{0}" SDKs.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetInstalledSDKs.SearchingForSDKs">
-        <source>Searching for SDKs targeting "{0}, {1}".</source>
-        <target state="new">Searching for SDKs targeting "{0}, {1}".</target>
-        <note>{0} will be the platform identifier, "Windows" and {1} will be a version number</note>
-      </trans-unit>
-      <trans-unit id="GetInstalledSDKs.TargetPlatformInformationMissing">
-        <source>MSB3784: "TargetPlatformVersion" and "TargetPlatformIdentifier" cannot be empty.</source>
-        <target state="new">MSB3784: "TargetPlatformVersion" and "TargetPlatformIdentifier" cannot be empty.</target>
-        <note>{StrBegin="MSB3784: "} TargetPlatformVersion and TargetPlatformIdentifier root are property names and should not be localized</note>
-      </trans-unit>
-      <trans-unit id="GetInstalledSDKs.NoSDksFound">
-        <source>MSB3785: No SDKs were found for TargetPlatform = {0} v{1}. SDKReference items will not be resolved. If your application requires these references there may be compilation errors.</source>
-        <target state="new">MSB3785: No SDKs were found for TargetPlatform = {0} v{1}. SDKReference items will not be resolved. If your application requires these references there may be compilation errors.</target>
-        <note>{StrBegin="MSB3785: "} "SDKReference" refers to SDKReference items in the project file and should not be localized.</note>
-      </trans-unit>
-      <trans-unit id="GetInstalledSDKs.CouldNotGetSDKList">
-        <source>MSB3786: There was a problem retrieving the installed SDKs on the machine. {0}</source>
-        <target state="new">MSB3786: There was a problem retrieving the installed SDKs on the machine. {0}</target>
-        <note>{StrBegin="MSB3786: "}</note>
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.GetSDKReferences">
-        <source>Enumerating SDK Reference "{0}" from "{1}".</source>
-        <target state="new">Enumerating SDK Reference "{0}" from "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.ExpandReferencesFrom">
-        <source>Looking for references under "{0}".</source>
-        <target state="new">Looking for references under "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.ExpandRedistFrom">
-        <source>Looking for redist files under "{0}".</source>
-        <target state="new">Looking for redist files under "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.NotExpanding">
-        <source>Not enumerating SDK Reference "{0}" because the "ExpandReferences" metadata is not true on the reference.</source>
-        <target state="new">Not enumerating SDK Reference "{0}" because the "ExpandReferences" metadata is not true on the reference.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.AddingReference">
-        <source>Adding reference "{0}".</source>
-        <target state="new">Adding reference "{0}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.AddingRedistFile">
-        <source>Adding file "{0}" from redist folder with target path "{1}".</source>
-        <target state="new">Adding file "{0}" from redist folder with target path "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.ConflictRedistSameSDK">
-        <source>There was a conflict between two redist files going to the same target path "{0}" within the "{1}" SDK. Choosing "{2}" over "{3}" because it was resolved first.</source>
-        <target state="new">There was a conflict between two redist files going to the same target path "{0}" within the "{1}" SDK. Choosing "{2}" over "{3}" because it was resolved first.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.ConflictRedistDifferentSDK">
-        <source>There was a conflict between two files from the redist folder files going to the same target path "{0}" between the "{1}" and "{2}" SDKs. Choosing "{3}" over "{4}" because it was resolved first.</source>
-        <target state="new">There was a conflict between two files from the redist folder files going to the same target path "{0}" between the "{1}" and "{2}" SDKs. Choosing "{3}" over "{4}" because it was resolved first.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.ConflictReferenceSameSDK">
-        <source>There was a conflict between two references with the same file name resolved within the "{0}" SDK. Choosing "{1}" over "{2}" because it was resolved first.</source>
-        <target state="new">There was a conflict between two references with the same file name resolved within the "{0}" SDK. Choosing "{1}" over "{2}" because it was resolved first.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.ConflictReferenceDifferentSDK">
-        <source>There was a conflict between two references with the same file name between the "{0}" and "{1}" SDKs. Choosing "{2}" over "{3}" because it was resolved first.</source>
-        <target state="new">There was a conflict between two references with the same file name between the "{0}" and "{1}" SDKs. Choosing "{2}" over "{3}" because it was resolved first.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.ProblemReadingCacheFile">
-        <source>There was a problem reading the cache file "{0}". "{1}"</source>
-        <target state="new">There was a problem reading the cache file "{0}". "{1}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.ProblemDeletingCacheFile">
-        <source>There was a problem deleting the cache file "{0}". "{1}"</source>
-        <target state="new">There was a problem deleting the cache file "{0}". "{1}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.ProblemGeneratingHash">
-        <source>There was a problem getting the time stamp of the current assembly "{0}". "{1}"</source>
-        <target state="new">There was a problem getting the time stamp of the current assembly "{0}". "{1}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.ProblemGettingAssemblyMetadata">
-        <source>There was a problem getting the assembly metadata for "{0}". "{1}"</source>
-        <target state="new">There was a problem getting the assembly metadata for "{0}". "{1}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.ProblemWritingCacheFile">
-        <source>There was a problem writing the cache file "{0}". "{1}"</source>
-        <target state="new">There was a problem writing the cache file "{0}". "{1}"</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.NoOriginalItemSpec">
-        <source>The "OriginalItemSpec" metadata for the resolved SDK with path "{0}" was empty. The "OriginalItemSpec" metadata must be set."</source>
-        <target state="new">The "OriginalItemSpec" metadata for the resolved SDK with path "{0}" was empty. The "OriginalItemSpec" metadata must be set."</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.CouldNotGetSDKReferenceFiles">
-        <source>MSB3795: There was a problem in the GetSDKReferenceFiles task. {0}</source>
-        <target state="new">MSB3795: There was a problem in the GetSDKReferenceFiles task. {0}</target>
-        <note>{StrBegin="MSB3795: "}</note>
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.ConflictBetweenFiles">
-        <source>MSB3796: There was a conflict between two files. {0}</source>
-        <target state="new">MSB3796: There was a conflict between two files. {0}</target>
-        <note>{StrBegin="MSB3796: "}</note>
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.CannotHaveEmptyTargetConfiguration">
-        <source>MSB3797: The targeted configuration for the resolved sdk reference "{0}" was empty. Cannot find reference or redist files without a targeted configuration.</source>
-        <target state="new">MSB3797: The targeted configuration for the resolved sdk reference "{0}" was empty. Cannot find reference or redist files without a targeted configuration.</target>
-        <note>{StrBegin="MSB3797: "}</note>
-      </trans-unit>
-      <trans-unit id="GetSDKReferenceFiles.CannotHaveEmptyTargetArchitecture">
-        <source>MSB3798: The targeted architecture for the resolved sdk reference "{0}" was empty. Cannot find reference or redist files without a targeted architecture.</source>
-        <target state="new">MSB3798: The targeted architecture for the resolved sdk reference "{0}" was empty. Cannot find reference or redist files without a targeted architecture.</target>
-        <note>{StrBegin="MSB3798: "}</note>
-      </trans-unit>
-      <trans-unit id="FindInvalidProjectReferences.WarnWhenVersionIsIncompatible">
-        <source>MSB3851: This project targets "{0}, Version={1}", but it is attempting to reference "{2}" targeting "{3}", which is invalid.</source>
-        <target state="new">MSB3851: This project targets "{0}, Version={1}", but it is attempting to reference "{2}" targeting "{3}", which is invalid.</target>
-        <note>{StrBegin="MSB3851: "}</note>
-      </trans-unit>
-      <trans-unit id="ErrorFromResources.LogErrorFailure">
-        <source>MSB3861: Failed to log an error using resource string "{0}".  {1}</source>
-        <target state="new">MSB3861: Failed to log an error using resource string "{0}".  {1}</target>
-        <note>{StrBegin="MSB3861: "}</note>
-      </trans-unit>
-      <trans-unit id="CodeSharing.CannotBuildSharedProject">
-        <source>MSB3871: Shared projects cannot be built on their own.  Please either build a project that references this project, or build the entire solution.</source>
-        <target state="new">MSB3871: Shared projects cannot be built on their own.  Please either build a project that references this project, or build the entire solution.</target>
-        <note>{StrBegin="MSB3871: "}</note>
-      </trans-unit>
-      <trans-unit id="Copy.ExactlyOneTypeOfLink">
-        <source>MSB3891: Both "{0}" and "{1}" were specified in the project file. Please choose one or the other.</source>
-        <target state="new">MSB3891: Both "{0}" and "{1}" were specified in the project file. Please choose one or the other.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Telemetry.IllegalEventDataString">
-        <source>The property "{0}" in the telemetry event data property list "{1}" is malformed.  Please only pass in a semicolon-delimited list of constant string values separated by "=", e.g., "Property1=Value1;Property2=Value2".</source>
-        <target state="new">The property "{0}" in the telemetry event data property list "{1}" is malformed.  Please only pass in a semicolon-delimited list of constant string values separated by "=", e.g., "Property1=Value1;Property2=Value2".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ErrorAndWarning.EmptyMessage">
-        <source>(No message specified)</source>
-        <target state="new">(No message specified)</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="TaskFactoryNotSupportedFailure">
-        <source>MSB4801: The task factory "{0}" is not supported on the .NET Core version of MSBuild.</source>
-        <target state="new">MSB4801: The task factory "{0}" is not supported on the .NET Core version of MSBuild.</target>
-        <note>{StrBegin="MSB4801: "}</note>
-      </trans-unit>
-      <trans-unit id="ZipDirectory.Comment">
-        <source>Zipping directory "{0}" to "{1}".</source>
-        <target state="new">Zipping directory "{0}" to "{1}".</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ZipDirectory.ErrorDirectoryDoesNotExist">
-        <source>MSB3941: Failed to zip directory "{0}" because it does not exist or is inaccessible.</source>
-        <target state="new">MSB3941: Failed to zip directory "{0}" because it does not exist or is inaccessible.</target>
-        <note>{StrBegin="MSB3941: "}</note>
-      </trans-unit>
-      <trans-unit id="ZipDirectory.ErrorFailed">
-        <source>MSB3943: Failed to zip directory "{0}" to file "{1}".  {2}</source>
-        <target state="new">MSB3943: Failed to zip directory "{0}" to file "{1}".  {2}</target>
-        <note>{StrBegin="MSB3943: "}</note>
-      </trans-unit>
-      <trans-unit id="ZipDirectory.ErrorFileExists">
-        <source>MSB3942: Failed to create zip file "{0}" because it already exists.  Please delete or rename the file and try again.</source>
-        <target state="new">MSB3942: Failed to create zip file "{0}" because it already exists.  Please delete or rename the file and try again.</target>
-        <note>{StrBegin="MSB3942: "}</note>
-      </trans-unit>
-    </body>
-  </file>
-</xliff>
\ No newline at end of file
diff --git a/src/Tasks/Resources/xlf/Strings.es.xlf b/src/Tasks/Resources/xlf/Strings.es.xlf
index 9055e7583fb..b8c5ecc2222 100644
--- a/src/Tasks/Resources/xlf/Strings.es.xlf
+++ b/src/Tasks/Resources/xlf/Strings.es.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: No se puede obtener el nombre del ensamblado para "{0}". {1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">Se elige AnyCPU de manera predeterminada.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">El proyecto "{0}" se compilar√° con la plataforma "{1}".</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">Se ha encontrado la asignaci√≥n "{0}"¬†=¬†"{1}" en la tabla de b√∫squeda especificada "{2}".</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: El valor PlatformLookupTable "{0}" tiene un formato no v√°lido y no se usar√°. El formato debe ser "A"¬†=¬†"B"; C¬†=¬†D".</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">Tabla de b√∫squeda analizada: "{0}".</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: No se pudo determinar c√≥mo se debe compilar "{0}". El proyecto se compilar√° sin el conjunto de propiedades Platform.</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: EnableDynamicPlatformResolution es true, pero el proyecto al que se hace referencia, "{0}", no tiene establecido ning√∫n conjunto de metadatos "Platforms". Se compilar√° sin una plataforma especificada.</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">ProjectReference y el proyecto actual tienen la misma plataforma.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">No se encuentra la versi√≥n esperada de Microsoft Windows SDK. Se busc√≥ una ubicaci√≥n especificada en el valor "{0}" de la clave del Registro "{1}". Si el proceso de compilaci√≥n no necesita el SDK, se puede omitir. De lo contrario, puede solucionar el problema realizando alguna de las siguientes acciones:  1) Instale Microsoft Windows SDK.  2) Instale Visual Studio 2010.  3) Establezca manualmente la clave del Registro indicada en la ubicaci√≥n correcta.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.fr.xlf b/src/Tasks/Resources/xlf/Strings.fr.xlf
index f3e5a1bb004..13ea194a499 100644
--- a/src/Tasks/Resources/xlf/Strings.fr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.fr.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: Impossible d'obtenir le nom d'assembly de "{0}". {1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">Choisissez AnyCPU par d√©faut.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">Le projet ¬´{0}¬ª sera g√©n√©r√© avec la plateforme : ¬´{1}¬ª.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">Mappage trouv√© '{0}' = '{1}‚Äô dans la table de correspondances sp√©cifi√©e : '{2}'.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: Le format de PlatformLookupTable ¬´{0}¬ª n‚Äôest pas valide et ne sera pas utilis√©. Le format doit √™tre 'A=B;C=D'.</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">Table de recherche connexes : '{0}'.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: Impossible de d√©terminer le type de ¬´{0}¬ª devrait √™tre g√©n√©r√©. Le projet sera g√©n√©r√© sans la propri√©t√© Platform d√©finie.</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: EnableDynamicPlatformResolution a la valeur true, mais le projet r√©f√©renc√© '{0}' n‚Äôa pas de m√©tadonn√©es ‚ÄôPlatforms‚Äô d√©finies. Il sera g√©n√©r√© sans une plateforme sp√©cifi√©e.</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">ProjectReference et le projet actuel ont la m√™me plateforme.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">Impossible de trouver la version attendue du SDK Microsoft Windows. Recherche d'un emplacement indiqu√© dans la valeur "{0}" de la cl√© de Registre "{1}". Si votre processus de g√©n√©ration n'a pas besoin du SDK, cette erreur peut √™tre ignor√©e. Sinon, essayez de r√©soudre le probl√®me de l'une des mani√®res suivantes¬†: 1) Installez le SDK Microsoft Windows.  2) Installez Visual Studio¬†2010. 3) Indiquez l'emplacement appropri√© dans la cl√© de Registre ci-dessus.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.it.xlf b/src/Tasks/Resources/xlf/Strings.it.xlf
index 04cdbd3ac62..a88e7c3eb65 100644
--- a/src/Tasks/Resources/xlf/Strings.it.xlf
+++ b/src/Tasks/Resources/xlf/Strings.it.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: non √® possibile ottenere il nome dell'assembly per "{0}". {1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">Scegliere AnyCPU per impostazione predefinita.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">Il progetto '{0}' verr√† compilato con la piattaforma: '{1}'.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">√à stato trovato il mapping '{0}'='{1}' nella tabella di ricerca specificata: '{2}'.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: il formato di PlatformLookupTable '{0}' non √® valido e non verr√† utilizzato. Il formato deve essere 'A=B;C=D'.</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">Tabella di ricerca analizzata: '{0}'.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: impossibile determinare come deve essere compilato '{0}'. Il progetto verr√† compilato senza l‚Äôinsieme di propriet√† Platform.</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: EnableDynamicPlatformResolution √® true ma il progetto di riferimento '{0}' non ha un set di metadati 'Platforms'. Verr√† compilato senza una piattaforma specificata.</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">ProjectReference e il progetto corrente hanno la stessa piattaforma.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">Non √® stato possibile trovare la versione prevista di Microsoft Windows SDK. √à stato cercato il percorso specificato nel valore "{0}" della chiave del Registro di sistema "{1}". Se il processo di compilazione non richiede l'SDK, √® possibile ignorare il problema. In caso contrario, per risolvere il problema eseguire una di queste operazioni: 1) Installare Microsoft Windows SDK.  2) Installare Visual Studio 2010. 3) Impostare manualmente la chiave del Registro di sistema specificata in precedenza sul percorso corretto.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ja.xlf b/src/Tasks/Resources/xlf/Strings.ja.xlf
index 632c22f62e2..72cf4592826 100644
--- a/src/Tasks/Resources/xlf/Strings.ja.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ja.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: "{0}" „ÅÆ„Ç¢„Çª„É≥„Éñ„É™Âêç„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„ÄÇ{1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">Êó¢ÂÆö„Åß AnyCPU „ÇíÈÅ∏Êäû„Åó„Åæ„Åô„ÄÇ</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">„Éó„É≠„Ç∏„Çß„ÇØ„Éà '{0}' „ÅØ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„Çí‰ΩøÁî®„Åó„Å¶„Éì„É´„Éâ„Åï„Çå„Åæ„Åô: '{1}'„ÄÇ</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">ÊåáÂÆö„Åï„Çå„Åü„É´„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó „ÉÜ„Éº„Éñ„É´„Åß„Éû„ÉÉ„Éî„É≥„Ç∞ '{0}'='{1}' „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü: '{2}'„ÄÇ</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: PlatformLookupTable '{0}' „ÅØÁÑ°Âäπ„Å™ÂΩ¢Âºè„Åß„ÅÇ„Çã„Åü„ÇÅ‰ΩøÁî®„Åï„Çå„Åæ„Åõ„Çì„ÄÇ„Åì„ÅÆÂΩ¢Âºè„ÅØ 'A=B;C=D' „Åß„ÅÇ„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇC = D '„ÄÇ</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">Ëß£ÊûêÊ∏à„ÅøÂèÇÁÖß„ÉÜ„Éº„Éñ„É´:'{0}'„ÄÇ</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: „Å©„ÅÆ '{0}' „Çí„Éì„É´„Éâ„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã„ÅãÁâπÂÆö„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅØ„ÄÅ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É† „Éó„É≠„Éë„ÉÜ„Ç£„ÅÆË®≠ÂÆö„Å™„Åó„Åß„Éì„É´„Éâ„Åï„Çå„Åæ„Åô„ÄÇ</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: EnableDynamicPlatformResolution „ÅØ true „Åß„Åô„Åå„ÄÅÂèÇÁÖßÂØæË±°„Éó„É≠„Ç∏„Çß„ÇØ„Éà '{0}' „Å´ '„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†' „É°„Çø„Éá„Éº„Çø„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ„Åì„Çå„ÅØ„ÄÅÊåáÂÆö„Åï„Çå„Åü„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„Å™„Åó„Åß„Éì„É´„Éâ„Åï„Çå„Åæ„Åô„ÄÇ</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">ProjectReference „Å®ÁèæÂú®„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Å´Âêå„Åò„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">ÂøÖË¶Å„Å™„Éê„Éº„Ç∏„Éß„É≥„ÅÆ Microsoft Windows SDK „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ„É¨„Ç∏„Çπ„Éà„É™ „Ç≠„Éº "{1}" „ÅÆÂÄ§ "{0}" „ÅßÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥ÊâÄ„ÇíÊé¢„Åó„Åæ„Åó„Åü„ÄÇ„Åì„ÅÆ„Ç®„É©„Éº„ÅØ„ÄÅ„Éì„É´„ÉâÂá¶ÁêÜ„Åß SDK „Åå‰∏çË¶Å„Å™Â†¥Âêà„ÅØÁÑ°Ë¶ñ„Åß„Åç„Åæ„Åô„ÄÇSDK „ÅåÂøÖË¶Å„Å™Â†¥Âêà„ÅØ„ÄÅÊ¨°„ÅÆ„ÅÑ„Åö„Çå„Åã„ÇíË°å„ÅÜ„Åì„Å®„Å´„Çà„Å£„Å¶ÂïèÈ°å„ÇíËß£Ê±∫„Åß„Åç„Åæ„Åô„ÄÇ1) Microsoft Windows SDK „Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åô„Çã„ÄÇ2) Visual Studio 2010 „Çí„Ç§„É≥„Çπ„Éà„Éº„É´„Åô„Çã„ÄÇ3) ‰∏äË®ò„ÅÆ„É¨„Ç∏„Çπ„Éà„É™ „Ç≠„Éº„ÇíÊ≠£„Åó„ÅÑÂ†¥ÊâÄ„Å´ÊâãÂãï„ÅßË®≠ÂÆö„Åô„Çã„ÄÇ</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ko.xlf b/src/Tasks/Resources/xlf/Strings.ko.xlf
index 89a5cbab6d3..f856969c0a1 100644
--- a/src/Tasks/Resources/xlf/Strings.ko.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ko.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: "{0}"Ïùò Ïñ¥ÏÖàÎ∏îÎ¶¨ Ïù¥Î¶ÑÏùÑ Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§. {1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">Í∏∞Î≥∏Ï†ÅÏúºÎ°ú AnyCPUÎ•º ÏÑ†ÌÉùÌï©ÎãàÎã§.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">'{0}' ÌîÑÎ°úÏ†ùÌä∏Îäî '{1}' ÌîåÎû´ÌèºÏúºÎ°ú ÎπåÎìúÎê©ÎãàÎã§.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">ÏßÄÏ†ïÎêú Ï°∞Ìöå ÌÖåÏù¥Î∏î '{2}'ÏóêÏÑú Îß§Ìïë '{0}'='{1}'ÏùÑ(Î•º) Ï∞æÏïòÏäµÎãàÎã§.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: PlatformLookupTable '{0}'Ïùò ÌòïÏãùÏù¥ ÏûòÎ™ªÎêòÏñ¥ ÏÇ¨Ïö©ÎêòÏßÄ ÏïäÏäµÎãàÎã§. ÌòïÏãùÏùÄ 'A=B;C=D'Ïó¨Ïïº Ìï©ÎãàÎã§.</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">Íµ¨Î¨∏ Î∂ÑÏÑùÎêú Ï°∞Ìöå ÌÖåÏù¥Î∏î: '{0}'.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: ÎπåÎìúÌï¥Ïïº ÌïòÎäî '{0}'ÏùÑ(Î•º) Í≤∞Ï†ïÌï† Ïàò ÏóÜÏäµÎãàÎã§. ÌîÑÎ°úÏ†ùÌä∏Îäî Platform ÏÜçÏÑ±ÏùÑ ÏÑ§Ï†ïÌïòÏßÄ ÏïäÍ≥† ÎπåÎìúÎê©ÎãàÎã§.</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: EnableDynamicPlatformResolutionÏù¥ trueÏù¥ÏßÄÎßå Ï∞∏Ï°∞Îêú ÌîÑÎ°úÏ†ùÌä∏ '{0}'Ïóê 'ÌîåÎû´Ìèº' Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏÑ∏Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§. ÏßÄÏ†ïÎêú ÌîåÎû´Ìèº ÏóÜÏù¥ Íµ¨Ï∂ïÎê©ÎãàÎã§.</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">ProjectReferenceÏôÄ ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏Îäî ÎèôÏùºÌïú ÌîåÎû´ÌèºÏùÑ Í∞ÄÏßÄÍ≥† ÏûàÏäµÎãàÎã§.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">ÏõêÌïòÎäî Microsoft Windows SDK Î≤ÑÏ†ÑÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. "{1}" Î†àÏßÄÏä§Ìä∏Î¶¨ ÌÇ§Ïùò "{0}" Í∞íÏóê ÏßÄÏ†ïÎêú ÏúÑÏπòÎ•º Í≤ÄÏÉâÌñàÏäµÎãàÎã§. ÎπåÎìú ÌîÑÎ°úÏÑ∏Ïä§ÏóêÏÑú SDKÍ∞Ä ÌïÑÏöîÌïòÏßÄ ÏïäÏúºÎ©¥ Ïù¥ Î©îÏãúÏßÄÎ•º Î¨¥ÏãúÌï¥ÎèÑ Îê©ÎãàÎã§. Í∑∏Î†áÏßÄ ÏïäÏúºÎ©¥ Îã§Ïùå Ï§ë ÌïòÎÇòÎ•º ÏàòÌñâÌïòÏó¨ Î¨∏Ï†úÎ•º Ìï¥Í≤∞Ìï† Ïàò ÏûàÏäµÎãàÎã§. 1) Microsoft Windows SDKÎ•º ÏÑ§ÏπòÌï©ÎãàÎã§.  2) Visual Studio 2010ÏùÑ ÏÑ§ÏπòÌï©ÎãàÎã§. 3) ÏúÑÏùò Î†àÏßÄÏä§Ìä∏Î¶¨ ÌÇ§Î•º Ïò¨Î∞îÎ•∏ ÏúÑÏπòÎ°ú ÏßÅÏ†ë ÏÑ§Ï†ïÌï©ÎãàÎã§.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.pl.xlf b/src/Tasks/Resources/xlf/Strings.pl.xlf
index 44502232a54..e11f796daf7 100644
--- a/src/Tasks/Resources/xlf/Strings.pl.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pl.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: Nie mo≈ºna pobraƒá nazwy zestawu dla ‚Äû{0}‚Äù. {1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">Wybieranie opcji AnyCPU w¬†spos√≥b domy≈õlny.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">Projekt "{0}" zostanie skompilowany przy u≈ºyciu platformy: "{1}".</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">Znaleziono mapowanie "{0}" = "{1}" w¬†danej tabeli wyszukiwania: "{2}".</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: element PlatformLookupTable "{0}" ma nieprawid≈Çowy format i¬†nie zostanie u≈ºyty. Formatem powinno byƒá "A = B; C = D '.</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">Przeanalizowana tabela wyszukiwania: "{0}".</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: nie mo≈ºna by≈Ço okre≈õliƒá, jako co ma zostaƒá skompilowany projekt "{0}". Zostanie on skompilowany bez ustawionej w≈Ça≈õciwo≈õci platformy.</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: element EnableDynamicPlatformResolution ma warto≈õƒá true, ale projekt "{0}", do kt√≥rego siƒô odnosi, nie ma ustawionych metadanych "Platformy". Zostanie on skompilowany bez okre≈õlonej platformy.</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">Element ProjectReference i bie≈ºƒÖcy projekt majƒÖ tƒô samƒÖ platformƒô.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">Nie mo≈ºna zlokalizowaƒá oczekiwanej wersji zestawu Microsoft Windows SDK. Poszukiwano lokalizacji okre≈õlonej w warto≈õci ‚Äû{0}‚Äù klucza rejestru ‚Äû{1}‚Äù. Je≈ºeli proces kompilacji nie wymaga zestawu SDK, mo≈ºna zignorowaƒá ten element. W przeciwnym przypadku problem mo≈ºna rozwiƒÖzaƒá, wykonujƒÖc jednƒÖ z nastƒôpujƒÖcych czynno≈õci: 1) zainstalowanie zestawu Microsoft Windows SDK,  2) zainstalowanie programu Visual Studio 2010, 3) rƒôczne ustawienie poprawnej lokalizacji w powy≈ºszym kluczu rejestru.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
index 5dcf3a0da1f..68f71465eba 100644
--- a/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Tasks/Resources/xlf/Strings.pt-BR.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: N√£o foi poss√≠vel obter o nome de assembly para "{0}". {1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">Escolhendo Qualquer CPU por padr√£o.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">O projeto '{0}' ser√° constru√≠do com a plataforma: '{1}'.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">Mapeamento '{0}'='{1}' encontrado na tabela de pesquisa fornecida: '{2}'.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: A PlatformLookupTable '{0}' est√° em um formato inv√°lido e n√£o ser√° usada. O formato deve ser 'A=B;C=D'.</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">Tabela de pesquisa analisada: '{0}'.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: N√£o foi poss√≠vel determinar como '{0}' deve ser criado. O projeto ser√° criado sem a propriedade Platform definida.</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: EnableDynamicPlatformResolution √© verdadeiro, mas o projeto referenciado '{0}' n√£o tem nenhum conjunto de metadados de 'Plataformas'. Ele ser√° criado sem uma plataforma especificada.</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">O ProjectReference e o projeto atual t√™m a mesma plataforma.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">N√£o foi poss√≠vel localizar a vers√£o esperada do SDK do Microsoft Windows. Ela foi procurada em uma localiza√ß√£o especificada no valor "{0}" da chave do Registro "{1}". Se o seu processo de build n√£o precisar do SDK, isso poder√° ser ignorado. Caso contr√°rio, voc√™ poder√° resolver o problema executando um destes procedimentos: 1) Instalar o SDK do Microsoft Windows.  2) Instalar o Visual Studio 2010. 3) Definir manualmente a chave do Registro acima para a localiza√ß√£o correta.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.ru.xlf b/src/Tasks/Resources/xlf/Strings.ru.xlf
index baf169c57cc..1b6cb3afb2d 100644
--- a/src/Tasks/Resources/xlf/Strings.ru.xlf
+++ b/src/Tasks/Resources/xlf/Strings.ru.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Å–±–æ—Ä–∫–∏ –¥–ª—è "{0}". {1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">–í—ã–±–æ—Ä AnyCPU –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">–ü—Ä–æ–µ–∫—Ç "{0}" —Å–æ–∑–¥–∞—Å—Ç —Å–±–æ—Ä–∫—É —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π: "{1}".</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">–ù–∞–π–¥–µ–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ "{0}"="{1}" –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏: "{2}".</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: PlatformLookupTable "{0}" –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç "A=B;C=D".</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏: "{0}".</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±–æ—Ä–∫—É "{0}". –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–≤–æ–π—Å—Ç–≤–∞ Platform.</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: EnableDynamicPlatformResolution –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ true, –Ω–æ —É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ "{0}" –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö "Platforms". –°–±–æ—Ä–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">ProjectReference –∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —Ç—Ä–µ–±—É–µ–º—É—é –≤–µ—Ä—Å–∏—é Microsoft Windows SDK. –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏, –∑–∞–¥–∞–Ω–Ω–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ–º "{0}" —Ä–∞–∑–¥–µ–ª–∞ —Ä–µ–µ—Å—Ç—Ä–∞ "{1}". –ï—Å–ª–∏ –¥–∞–Ω–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É —Å–±–æ—Ä–∫–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞–∫–µ—Ç SDK, –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –Ω–µ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏—è. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–µ–ø–æ–ª–∞–¥–∫—É, –≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞—Å—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–∏–≤ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π: (1) —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Microsoft Windows SDK;  (2) —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Visual Studio 2010; (3) –≤—Ä—É—á–Ω—É—é –∑–∞–¥–∞–π—Ç–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤—ã—à–µ —Ä–∞–∑–¥–µ–ª–µ —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.tr.xlf b/src/Tasks/Resources/xlf/Strings.tr.xlf
index 63653985939..7eedc3d6c70 100644
--- a/src/Tasks/Resources/xlf/Strings.tr.xlf
+++ b/src/Tasks/Resources/xlf/Strings.tr.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: "{0}" i√ßin derleme adƒ± alƒ±namƒ±yor. {1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">Varsayƒ±lan olarak AnyCPU se√ßiliyor.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">'{0}' projesi, '{1}' platformuyla derlenecek.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">Verilen arama tablosunda '{0} '=' {1}' e≈ülemesi bulundu: '{2}'.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: PlatformLookupTable '{0}' ge√ßersiz bir bi√ßimde ve kullanƒ±lamaz. Bi√ßim 'A=B;C=D' olmalƒ±dƒ±r.</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">Ayrƒ±≈ütƒ±rƒ±lmƒ±≈ü arama tablosu:'{0}'.</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: '{0}'in ne olarak olu≈üturulmasƒ± gerektiƒüi belirlenemedi. Proje, Platform √∂zellik seti olmadan olu≈üturulacak.</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: EnableDynamicPlatformResolution doƒüru ancak ba≈üvurulan proje '{0}', 'Platforms' meta veri k√ºmesine sahip deƒüil. Belirli bir platform olmadan olu≈üturulacak.</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">ProjectReference ve ge√ßerli proje aynƒ± platforma sahip.</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">Beklenen Microsoft Windows SDK s√ºr√ºm√º bulunamadƒ±. "{1}" kayƒ±t defteri anahtarƒ±nƒ±n "{0}" deƒüerinde belirtilen konum arandƒ±. Derleme i≈üleminiz SDK‚Äôya ihtiya√ß duymuyorsa bu yoksayƒ±labilir. Aksi halde, ≈üu i≈ülemlerden birini yaparak sorunu √ß√∂zebilirsiniz: 1) Microsoft Windows SDK‚Äôyƒ± y√ºkleyin.  2) Visual Studio 2010‚Äôu y√ºkleyin. 3) Yukarƒ±daki kayƒ±t defteri anahtarƒ±nƒ± el ile doƒüru konuma ayarlayƒ±n.</target>
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
index ca72839e962..dff102f40f0 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hans.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: Êó†Ê≥ïËé∑Âèñ‚Äú{0}‚ÄùÁöÑÁ®ãÂ∫èÈõÜÂêçÁß∞„ÄÇ{1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">ÈªòËÆ§ÈÄâÊã© AnyCPU„ÄÇ</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">È°πÁõÆ "{0}" Â∞Ü‰ΩøÁî®Âπ≥Âè∞ "{1}" ÁîüÊàê„ÄÇ</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">Âú®ÁªôÂÆöÊü•ÊâæË°® "{2}" ‰∏≠ÊâæÂà∞Êò†Â∞Ñ "{0}"="{1}"„ÄÇ</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: PlatformLookupTable "{0}" ÁöÑÊ†ºÂºèÊó†ÊïàÔºå‰∏ç‰ºö‰ΩøÁî®„ÄÇÊ†ºÂºèÂ∫î‰∏∫ "A=B;C=D"„ÄÇ</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">ÂàÜÊûêÁöÑÊü•ÈòÖË°®: "{0}"„ÄÇ</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: Êó†Ê≥ïÁ°ÆÂÆöÂ∫îÂ∞Ü "{0}" ÊûÑÂª∫‰∏∫‰ªÄ‰πà„ÄÇÂ∞ÜÂú®‰∏çËÆæÁΩÆ Platform Â±ûÊÄßÁöÑÊÉÖÂÜµ‰∏ãÁîüÊàêÈ°πÁõÆ„ÄÇ</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: EnableDynamicPlatformResolution ‰∏∫ trueÔºå‰ΩÜÂºïÁî®ÁöÑÈ°πÁõÆ "{0}" Ê≤°ÊúâËÆæÁΩÆ "Platforms" ÂÖÉÊï∞ÊçÆ„ÄÇÂÆÉÂ∞ÜÂú®Ê≤°ÊúâÊåáÂÆöÂπ≥Âè∞ÁöÑÊÉÖÂÜµ‰∏ãÁîüÊàê„ÄÇ</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">ProjectReference ÂíåÂΩìÂâçÈ°πÁõÆÂÖ∑ÊúâÁõ∏ÂêåÁöÑÂπ≥Âè∞„ÄÇ</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">Êú™ËÉΩÊâæÂà∞ Microsoft Windows SDK ÁöÑÈ¢ÑÊúüÁâàÊú¨„ÄÇÂ∑≤Êü•ÊâæËøáÊ≥®ÂÜåË°®È°π‚Äú{1}‚ÄùÁöÑ‚Äú{0}‚ÄùÂÄº‰∏≠ÊåáÂÆöÁöÑ‰ΩçÁΩÆ„ÄÇÂ¶ÇÊûúÁîüÊàêËøáÁ®ã‰∏çÈúÄË¶ÅËØ• SDKÔºåÂàôÂèØ‰ª•ÂøΩÁï•Ê≠§ÈóÆÈ¢ò„ÄÇÂê¶ÂàôÔºåÈÄöËøáÊâßË°å‰∏ãÂàóÊìç‰Ωú‰πã‰∏ÄÂèØ‰ª•Ëß£ÂÜ≥Ê≠§ÈóÆÈ¢ò: 1) ÂÆâË£Ö Microsoft Windows SDK„ÄÇ2) ÂÆâË£Ö Visual Studio 2010„ÄÇ 3) ÊâãÂä®ÂêëÊ≠£Á°ÆÁöÑ‰ΩçÁΩÆËÆæÁΩÆ‰∏äÈù¢ÁöÑÊ≥®ÂÜåË°®È°π„ÄÇ</target>
diff --git a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
index 288e6c5423c..21b825d4ad0 100644
--- a/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Tasks/Resources/xlf/Strings.zh-Hant.xlf
@@ -1326,6 +1326,46 @@
         <target state="translated">MSB3441: ÁÑ°Ê≥ïÂèñÂæó "{0}" ÁöÑÁµÑ‰ª∂ÂêçÁ®±„ÄÇ{1}</target>
         <note>{StrBegin="MSB3441: "}</note>
       </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.AnyCPUDefault">
+        <source>Choosing AnyCPU by default.</source>
+        <target state="translated">È†êË®≠ÊúÉÈÅ∏Êìá AnyCPU„ÄÇ</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.DisplayChosenPlatform">
+        <source>Project '{0}' will build with platform: '{1}'.</source>
+        <target state="translated">Â∞àÊ°à '{0}' Â∞á‰ΩøÁî®Âπ≥Âè∞: '{1}' Âª∫ÁΩÆ„ÄÇ</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.FoundMappingInTable">
+        <source>Found mapping '{0}'='{1}' in given lookup table: '{2}'.</source>
+        <target state="translated">Âú®ÊåáÂÆöÁöÑÊü•Èñ±Ë≥áÊñôË°®: '{2}' ‰∏≠ÊâæÂà∞Â∞çÊáâ '{0}'='{1}'„ÄÇ</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.InvalidLookupTableFormat">
+        <source>MSB3983: The PlatformLookupTable '{0}' is in an invalid format and won't be used. The format should be 'A=B;C=D'.</source>
+        <target state="translated">MSB3983: PlatformLookupTable '{0}' ÁöÑÊ†ºÂºèÁÑ°ÊïàÔºåÂõ†Ê≠§‰∏çÊúÉ‰ΩøÁî®„ÄÇÊ†ºÂºèÊáâÁÇ∫ 'A=B;C=D'„ÄÇ</target>
+        <note>{StrBegin="MSB3983: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.LookupTableParsed">
+        <source>Parsed lookup table:'{0}'.</source>
+        <target state="translated">ÂâñÊûêÁöÑÊü•Èñ±Ë≥áÊñôË°®: '{0}'„ÄÇ</target>
+        <note />
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoCompatiblePlatformFound">
+        <source>MSB3981: Could not determine what '{0}' should be built as. The project will be built without the Platform property set.</source>
+        <target state="translated">MSB3981: ÁÑ°Ê≥ïÂà§Êñ∑ÊáâË©≤Â∞á '{0}' Âª∫ÁΩÆÁÇ∫‰Ωï„ÄÇÂ∞áÂú®Ê≤íÊúâË®≠ÂÆö Platform Â±¨ÊÄßÁöÑÊÉÖÊ≥Å‰∏ãÂª∫ÁΩÆÂ∞àÊ°à„ÄÇ</target>
+        <note>{StrBegin="MSB3981: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.NoPlatformsListed">
+        <source>MSB3982: EnableDynamicPlatformResolution is true but referenced project '{0}' has no 'Platforms' metadata set. It will be built without a specified platform.</source>
+        <target state="translated">MSB3982: EnableDynamicPlatformResolution ÁÇ∫ trueÔºå‰ΩÜÂèÉËÄÉÁöÑÂ∞àÊ°à '{0}' Êú™Ë®≠ÂÆö 'Platforms' ‰∏≠ÁπºË≥áÊñô„ÄÇÂÆÉÂ∞áÂú®Ê≤íÊúâÊåáÂÆöÂπ≥Âè∞ÁöÑÊÉÖÊ≥Å‰∏ãÂª∫ÁΩÆ„ÄÇ</target>
+        <note>{StrBegin="MSB3982: "}</note>
+      </trans-unit>
+      <trans-unit id="GetCompatiblePlatform.SamePlatform">
+        <source>ProjectReference and current project have the same platform.</source>
+        <target state="translated">ProjectReference ÂíåÁõÆÂâçÁöÑÂ∞àÊ°àÊúâÁõ∏ÂêåÁöÑÂπ≥Âè∞„ÄÇ</target>
+        <note />
+      </trans-unit>
       <trans-unit id="GetFrameworkSdkPath.CouldNotFindSDK">
         <source>Could not locate the expected version of the Microsoft Windows SDK. Looked for a location specified in the "{0}" value of the registry key "{1}". If your build process does not need the SDK then this can be ignored. Otherwise you can solve the problem by doing one of the following:  1) Install the Microsoft Windows SDK.  2) Install Visual Studio 2010.  3) Manually set the above registry key to the correct location.</source>
         <target state="translated">Êâæ‰∏çÂà∞È†êÊúüÁöÑ Microsoft Windows SDK ÁâàÊú¨„ÄÇÂ∑≤Âú®ÁôªÈåÑÊ©üÁ¢º "{1}" ÁöÑ "{0}" ÂÄº‰∏≠ÊåáÂÆöÁöÑ‰ΩçÁΩÆÂ∞ãÊâæ„ÄÇÂ¶ÇÊûúÊÇ®ÁöÑÂª∫ÁΩÆÁ®ãÂ∫è‰∏çÈúÄË¶ÅÈÄôÂÄã SDKÔºåÊÇ®ÂèØ‰ª•ÂøΩÁï•Ê≠§Ë®äÊÅØ„ÄÇÂê¶ÂâáÔºåÊÇ®ÂèØ‰ª•Âü∑Ë°å‰∏ãÂàóÂÖ∂‰∏≠‰∏ÄÂÄãÂãï‰Ωú‰ª•Ëß£Ê±∫Ê≠§ÂïèÈ°å:  1) ÂÆâË£ù Microsoft Windows SDK„ÄÇ2) ÂÆâË£ù Visual Studio 2010„ÄÇ  3) ÊâãÂãïÂ∞á‰∏äÊñπÁôªÈåÑÊ©üÁ¢ºË®≠ÁÇ∫Ê≠£Á¢∫‰ΩçÁΩÆ„ÄÇ</target>
diff --git a/src/Tasks/StateFileBase.cs b/src/Tasks/StateFileBase.cs
index 56177138fc3..20f98be86e0 100644
--- a/src/Tasks/StateFileBase.cs
+++ b/src/Tasks/StateFileBase.cs
@@ -3,18 +3,19 @@
 
 using System;
 using System.IO;
-using System.Runtime.Serialization.Formatters.Binary;
 using Microsoft.Build.Utilities;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.BackEnd;
 
 namespace Microsoft.Build.Tasks
 {
     /// <remarks>
     /// Base class for task state files.
     /// </remarks>
-    [Serializable()]
-    internal class StateFileBase
+    /// Serializable should be included in all state files. It permits BinaryFormatter-based calls, including from GenerateResource, which we cannot move off BinaryFormatter.
+    [Serializable]
+    internal abstract class StateFileBase
     {
         // Current version for serialization. This should be changed when breaking changes
         // are made to this class.
@@ -22,7 +23,7 @@ internal class StateFileBase
         // Version 4/5 - VS2017.7:
         //   Unify .NET Core + Full Framework. Custom serialization on some types that are no
         //   longer [Serializable].
-        private const byte CurrentSerializationVersion = 5;
+        internal const byte CurrentSerializationVersion = 6;
 
         // Version this instance is serialized with.
         private byte _serializedVersion = CurrentSerializationVersion;
@@ -43,24 +44,24 @@ internal virtual void SerializeCache(string stateFile, TaskLoggingHelper log)
 
                     using (var s = new FileStream(stateFile, FileMode.CreateNew))
                     {
-                        var formatter = new BinaryFormatter();
-                        formatter.Serialize(s, this);
+                        var translator = BinaryTranslator.GetWriteTranslator(s);
+                        translator.Translate(ref _serializedVersion);
+                        Translate(translator);
                     }
                 }
             }
-            catch (Exception e)
+            // If there was a problem writing the file (like it's read-only or locked on disk, for
+            // example), then eat the exception and log a warning.  Otherwise, rethrow.
+            catch (Exception e) when (!ExceptionHandling.NotExpectedSerializationException(e))
             {
-                // If there was a problem writing the file (like it's read-only or locked on disk, for
-                // example), then eat the exception and log a warning.  Otherwise, rethrow.
-                if (ExceptionHandling.NotExpectedSerializationException(e))
-                    throw;
-
                 // Not being able to serialize the cache is not an error, but we let the user know anyway.
                 // Don't want to hold up processing just because we couldn't read the file.
                 log.LogWarningWithCodeFromResources("General.CouldNotWriteStateFile", stateFile, e.Message);
             }
         }
 
+        public abstract void Translate(ITranslator translator);
+
         /// <summary>
         /// Reads the specified file from disk into a StateFileBase derived object.
         /// </summary>
@@ -75,43 +76,39 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp
                 {
                     using (FileStream s = File.OpenRead(stateFile))
                     {
-                        var formatter = new BinaryFormatter();
-                        object deserializedObject = formatter.Deserialize(s);
-                        retVal = deserializedObject as StateFileBase;
+                        using var translator = BinaryTranslator.GetReadTranslator(s, buffer: null);
 
-                        // If the deserialized object is null then there would be no cast error but retVal would still be null
-                        // only log the message if there would have been a cast error
-                        if (retVal == null && deserializedObject != null)
+                        byte version = 0;
+                        translator.Translate(ref version);
+                        // If the version is wrong, log a message not a warning. This could be a valid cache with the wrong version preventing correct deserialization.
+                        // For the latter case, internals may be unexpectedly null.
+                        if (version != CurrentSerializationVersion)
                         {
-                            // When upgrading to Visual Studio 2008 and running the build for the first time the resource cache files are replaced which causes a cast error due
-                            // to a new version number on the tasks class. "Unable to cast object of type 'Microsoft.Build.Tasks.SystemState' to type 'Microsoft.Build.Tasks.StateFileBase".
-                            // If there is an invalid cast, a message rather than a warning should be emitted.
                             log.LogMessageFromResources("General.CouldNotReadStateFileMessage", stateFile, log.FormatResourceString("General.IncompatibleStateFileType"));
+                            return null;
                         }
 
-                        if ((retVal != null) && (!requiredReturnType.IsInstanceOfType(retVal)))
+                        var constructors = requiredReturnType.GetConstructors();
+                        foreach (var constructor in constructors)
                         {
-                            log.LogMessageFromResources("General.CouldNotReadStateFileMessage", stateFile,
-                                log.FormatResourceString("General.IncompatibleStateFileType"));
-                            retVal = null;
+                            var parameters = constructor.GetParameters();
+                            if (parameters.Length == 1 && parameters[0].ParameterType == typeof(ITranslator))
+                            {
+                                retVal = constructor.Invoke(new object[] { translator }) as StateFileBase;
+                            }
                         }
-
-                        // If we get back a valid object and internals were changed, things are likely to be null. Check the version before we use it.
-                        if (retVal != null && retVal._serializedVersion != CurrentSerializationVersion)
+                        
+                        if (retVal == null || !requiredReturnType.IsInstanceOfType(retVal))
                         {
-                            log.LogMessageFromResources("General.CouldNotReadStateFileMessage", stateFile, log.FormatResourceString("General.IncompatibleStateFileType"));
+                            log.LogMessageFromResources("General.CouldNotReadStateFileMessage", stateFile,
+                                log.FormatResourceString("General.IncompatibleStateFileType"));
                             retVal = null;
                         }
                     }
                 }
             }
-            catch (Exception e)
+            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
-                if (ExceptionHandling.IsCriticalException(e))
-                {
-                    throw;
-                }
-
                 // The deserialization process seems like it can throw just about 
                 // any exception imaginable.  Catch them all here.
                 // Not being able to deserialize the cache is not an error, but we let the user know anyway.
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 3a56a2ce98f..2c11513b244 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -12,7 +12,6 @@
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
-using Microsoft.Build.Shared.FileSystem;
 using Microsoft.Build.Tasks.AssemblyDependency;
 using Microsoft.Build.Utilities;
 
@@ -21,12 +20,10 @@ namespace Microsoft.Build.Tasks
     /// <summary>
     /// Class is used to cache system state.
     /// </summary>
+    /// Serializable should be included in all state files. It permits BinaryFormatter-based calls, including from GenerateResource, which we cannot move off BinaryFormatter.
     [Serializable]
     internal sealed class SystemState : StateFileBase, ITranslatable
     {
-        private static readonly byte[] TranslateContractSignature = { (byte) 'M', (byte) 'B', (byte) 'R', (byte) 'S', (byte) 'C'}; // Microsoft Build RAR State Cache
-        private static readonly byte TranslateContractVersion = 0x01;
-
         /// <summary>
         /// Cache at the SystemState instance level. Has the same contents as <see cref="instanceLocalFileStateCache"/>.
         /// It acts as a flag to enforce that an entry has been checked for staleness only once.
@@ -89,11 +86,6 @@ internal sealed class SystemState : StateFileBase, ITranslatable
         /// </summary>
         private GetAssemblyMetadata getAssemblyMetadata;
 
-        /// <summary>
-        /// Cached delegate.
-        /// </summary>
-        private FileExists fileExists;
-
         /// <summary>
         /// Cached delegate.
         /// </summary>
@@ -221,8 +213,13 @@ internal FrameworkName FrameworkNameAttribute
         /// <summary>
         /// Construct.
         /// </summary>
-        internal SystemState()
+        public SystemState()
+        {
+        }
+
+        public SystemState(ITranslator translator)
         {
+            Translate(translator);
         }
 
         /// <summary>
@@ -239,88 +236,11 @@ AssemblyTableInfo[] installedAssemblyTableInfos
             redistList = RedistList.GetRedistList(installedAssemblyTableInfos);
         }
 
-        /// <summary>
-        /// Writes the contents of this object out to the specified file.
-        /// TODO: once all derived classes from StateFileBase adopt new serialization, we shall consider to mode this into base class
-        /// </summary>
-        internal void SerializeCacheByTranslator(string stateFile, TaskLoggingHelper log)
-        {
-            try
-            {
-                if (!string.IsNullOrEmpty(stateFile))
-                {
-                    if (FileSystems.Default.FileExists(stateFile))
-                    {
-                        File.Delete(stateFile);
-                    }
-
-                    using var s = new FileStream(stateFile, FileMode.CreateNew);
-                    var translator = BinaryTranslator.GetWriteTranslator(s);
-
-                    // write file signature
-                    translator.Writer.Write(TranslateContractSignature);
-                    translator.Writer.Write(TranslateContractVersion);
-
-                    Translate(translator);
-                    isDirty = false;
-                }
-            }
-            catch (Exception e) when (!ExceptionHandling.NotExpectedSerializationException(e))
-            {
-                // Not being able to serialize the cache is not an error, but we let the user know anyway.
-                // Don't want to hold up processing just because we couldn't read the file.
-                log.LogWarningWithCodeFromResources("General.CouldNotWriteStateFile", stateFile, e.Message);
-            }
-        }
-
-        /// <summary>
-        /// Read the contents of this object out to the specified file.
-        /// TODO: once all classes derived from StateFileBase adopt the new serialization, we should consider moving this into the base class
-        /// </summary>
-        internal static SystemState DeserializeCacheByTranslator(string stateFile, TaskLoggingHelper log)
-        {
-            // First, we read the cache from disk if one exists, or if one does not exist, we create one.
-            try
-            {
-                if (!string.IsNullOrEmpty(stateFile) && FileSystems.Default.FileExists(stateFile))
-                {
-                    using FileStream s = File.OpenRead(stateFile);
-                    var translator = BinaryTranslator.GetReadTranslator(s, buffer:null); // TODO: shared buffering?
-
-                    // verify file signature
-                    var contractSignature = translator.Reader.ReadBytes(TranslateContractSignature.Length);
-                    var contractVersion = translator.Reader.ReadByte();
-
-                    if (!contractSignature.SequenceEqual(TranslateContractSignature) || contractVersion != TranslateContractVersion)
-                    {
-                        log.LogMessageFromResources("General.CouldNotReadStateFileMessage", stateFile, log.FormatResourceString("General.IncompatibleStateFileType"));
-                        return null;
-                    }
-
-                    SystemState systemState = new SystemState();
-                    systemState.Translate(translator);
-                    systemState.isDirty = false;
-
-                    return systemState;
-                }
-            }
-            catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
-            {
-                // The deserialization process seems like it can throw just about 
-                // any exception imaginable.  Catch them all here.
-                // Not being able to deserialize the cache is not an error, but we let the user know anyway.
-                // Don't want to hold up processing just because we couldn't read the file.
-                log.LogMessageFromResources("General.CouldNotReadStateFileMessage", stateFile, e.Message);
-            }
-
-            return null;
-        }
-
         /// <summary>
         /// Reads/writes this class.
         /// Used for serialization and deserialization of this class persistent cache.
         /// </summary>
-        public void Translate(ITranslator translator)
+        public override void Translate(ITranslator translator)
         {
             if (instanceLocalFileStateCache is null)
                 throw new NullReferenceException(nameof(instanceLocalFileStateCache));
@@ -329,6 +249,10 @@ public void Translate(ITranslator translator)
                 ref instanceLocalFileStateCache,
                 StringComparer.OrdinalIgnoreCase,
                 (ITranslator t) => new FileState(t));
+
+            // IsDirty should be false for either direction. Either this cache was brought
+            // up-to-date with the on-disk cache or vice versa. Either way, they agree.
+            IsDirty = false;
         }
 
         /// <summary>
@@ -375,11 +299,9 @@ internal GetAssemblyMetadata CacheDelegate(GetAssemblyMetadata getAssemblyMetada
         /// <summary>
         /// Cache the results of a FileExists delegate. 
         /// </summary>
-        /// <param name="fileExistsValue">The delegate.</param>
         /// <returns>Cached version of the delegate.</returns>
-        internal FileExists CacheDelegate(FileExists fileExistsValue)
+        internal FileExists CacheDelegate()
         {
-            fileExists = fileExistsValue;
             return FileExists;
         }
 
@@ -444,19 +366,14 @@ private FileState ComputeFileStateFromCachesAndDisk(string path)
             // If the process-wide cache contains an up-to-date FileState, always use it
             if (isProcessFileStateUpToDate)
             {
-                // If a FileState already exists in this instance cache due to deserialization, remove it;
-                // another instance has taken responsibility for serialization, and keeping this would
-                // result in multiple instances serializing the same data to disk
-                if (isCachedInInstance)
+                // For the next build, we may be using a different process. Update the file cache.
+                if (!isInstanceFileStateUpToDate)
                 {
-                    instanceLocalFileStateCache.Remove(path);
+                    instanceLocalFileStateCache[path] = cachedProcessFileState;
                     isDirty = true;
                 }
-
                 return cachedProcessFileState;
             }
-            // If the process-wide FileState is missing or out-of-date, this instance owns serialization;
-            // sync the process-wide cache and signal other instances to avoid data duplication
             if (isInstanceFileStateUpToDate)
             {
                 return s_processWideFileStateCache[path] = cachedInstanceFileState;
@@ -605,7 +522,7 @@ out fileState.frameworkName
         /// <param name="log">How to log</param>
         /// <param name="fileExists">Whether a file exists</param>
         /// <returns>A cache representing key aspects of file states.</returns>
-        internal static SystemState DeserializePrecomputedCachesByTranslator(ITaskItem[] stateFiles, TaskLoggingHelper log, FileExists fileExists)
+        internal static SystemState DeserializePrecomputedCaches(ITaskItem[] stateFiles, TaskLoggingHelper log, FileExists fileExists)
         {
             SystemState retVal = new SystemState();
             retVal.isDirty = stateFiles.Length > 0;
@@ -614,7 +531,7 @@ internal static SystemState DeserializePrecomputedCachesByTranslator(ITaskItem[]
             foreach (ITaskItem stateFile in stateFiles)
             {
                 // Verify that it's a real stateFile. Log message but do not error if not.
-                SystemState sysState = DeserializeCacheByTranslator(stateFile.ToString(), log);
+                SystemState sysState = DeserializeCache(stateFile.ToString(), log, typeof(SystemState)) as SystemState;
                 if (sysState == null)
                 {
                     continue;
@@ -644,7 +561,7 @@ internal static SystemState DeserializePrecomputedCachesByTranslator(ITaskItem[]
         /// </summary>
         /// <param name="stateFile">Path to which to write the precomputed cache</param>
         /// <param name="log">How to log</param>
-        internal void SerializePrecomputedCacheByTranslator(string stateFile, TaskLoggingHelper log)
+        internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
         {
             // Save a copy of instanceLocalFileStateCache so we can restore it later. SerializeCacheByTranslator serializes
             // instanceLocalFileStateCache by default, so change that to the relativized form, then change it back.
@@ -657,7 +574,7 @@ internal void SerializePrecomputedCacheByTranslator(string stateFile, TaskLoggin
                 {
                     log.LogWarningWithCodeFromResources("General.StateFileAlreadyPresent", stateFile);
                 }
-                SerializeCacheByTranslator(stateFile, log);
+                SerializeCache(stateFile, log);
             }
             finally
             {
diff --git a/src/Tasks/XslTransformation.cs b/src/Tasks/XslTransformation.cs
index cf73331796e..3b8810be561 100644
--- a/src/Tasks/XslTransformation.cs
+++ b/src/Tasks/XslTransformation.cs
@@ -334,7 +334,7 @@ public XmlReader CreateReader(int itemPos)
             {
                 if (XmlMode == XmlModes.XmlFile)
                 {
-                    return XmlReader.Create(_data[itemPos]);
+                    return XmlReader.Create(new StreamReader(_data[itemPos]), null, _data[itemPos]);
                 }
                 else // xmlModes.Xml 
                 {
@@ -459,7 +459,7 @@ public XslCompiledTransform LoadXslt(bool useTrustedSettings)
                             _log.LogMessageFromResources(MessageImportance.Low, "XslTransform.UseTrustedSettings", _data);
                         }
 
-                        xslct.Load(new XPathDocument(XmlReader.Create(_data)), settings, new XmlUrlResolver());
+                        xslct.Load(new XPathDocument(XmlReader.Create(new StreamReader(_data), null, _data)), settings, new XmlUrlResolver());
                         break;
                     case XslModes.XsltCompiledDll:
 #if FEATURE_COMPILED_XSL
diff --git a/src/Utilities.UnitTests/Microsoft.Build.Utilities.UnitTests.csproj b/src/Utilities.UnitTests/Microsoft.Build.Utilities.UnitTests.csproj
index 2f3dd9cba5a..2051aed69cf 100644
--- a/src/Utilities.UnitTests/Microsoft.Build.Utilities.UnitTests.csproj
+++ b/src/Utilities.UnitTests/Microsoft.Build.Utilities.UnitTests.csproj
@@ -11,6 +11,7 @@
 
   <ItemGroup>
     <PackageReference Include="Shouldly" />
+    <PackageReference Include="System.Net.Http" />
     <PackageReference Include="Microsoft.CodeAnalysis.Build.Tasks" />
 
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />
diff --git a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
index f8554d8b18e..b2099ce44c5 100644
--- a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
+++ b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
@@ -2853,7 +2853,7 @@ private static IEnumerable<VisualStudioVersion> EnumVisualStudioVersions()
 
         private static IEnumerable<TargetDotNetFrameworkVersion> EnumDotNetFrameworkVersions()
         {
-            for (TargetDotNetFrameworkVersion dotNetVersion = TargetDotNetFrameworkVersion.Version11; dotNetVersion <= TargetDotNetFrameworkVersion.Latest; ++dotNetVersion)
+            for (TargetDotNetFrameworkVersion dotNetVersion = TargetDotNetFrameworkVersion.Version11; dotNetVersion <= TargetDotNetFrameworkVersion.VersionLatest; ++dotNetVersion)
             {
                 yield return dotNetVersion;
             }
diff --git a/src/Utilities/AssemblyInfo.cs b/src/Utilities/AssemblyInfo.cs
index 2bb16a1128f..0a6edcd2de0 100644
--- a/src/Utilities/AssemblyInfo.cs
+++ b/src/Utilities/AssemblyInfo.cs
@@ -21,14 +21,7 @@
 // so that we don't run into known security issues with loading libraries from unsafe locations 
 [assembly: DefaultDllImportSearchPaths(DllImportSearchPath.SafeDirectories)]
 
-// Needed for the "hub-and-spoke model to locate and retrieve localized resources": https://msdn.microsoft.com/en-us/library/21a15yht(v=vs.110).aspx
-// We want "en" to require a satellite assembly for debug builds in order to flush out localization
-// issues, but we want release builds to work without it. Also, .net core does not have resource fallbacks
-#if (DEBUG && !RUNTIME_TYPE_NETCORE)
-[assembly: NeutralResourcesLanguage("en", UltimateResourceFallbackLocation.Satellite)]
-#else
 [assembly: NeutralResourcesLanguage("en")]
-#endif
 
 [assembly: ComVisible(false)]
 
diff --git a/src/Utilities/Microsoft.Build.Utilities.csproj b/src/Utilities/Microsoft.Build.Utilities.csproj
index 87d1b12e2dc..09634e72315 100644
--- a/src/Utilities/Microsoft.Build.Utilities.csproj
+++ b/src/Utilities/Microsoft.Build.Utilities.csproj
@@ -14,7 +14,7 @@
     <IsPackable>true</IsPackable>
     <PackageDescription>This package contains the $(MSBuildProjectName) assembly which is used to implement custom MSBuild tasks.</PackageDescription>
     <IncludeSatelliteOutputInPack>false</IncludeSatelliteOutputInPack>
-    <ApplyNgenOptimization Condition="'$(TargetFramework)' == '$(FullFrameworkTFM)'">partial</ApplyNgenOptimization>
+    <ApplyNgenOptimization Condition="'$(TargetFramework)' == '$(FullFrameworkTFM)'">full</ApplyNgenOptimization>
   </PropertyGroup>
 
   <ItemGroup>
diff --git a/src/Utilities/Resources/xlf/Strings.en.xlf b/src/Utilities/Resources/xlf/Strings.en.xlf
deleted file mode 100644
index c5ca7ab2572..00000000000
--- a/src/Utilities/Resources/xlf/Strings.en.xlf
+++ /dev/null
@@ -1,282 +0,0 @@
-Ôªø<?xml version="1.0" encoding="utf-8"?>
-<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
-  <file datatype="xml" source-language="en" target-language="en" original="../Strings.resx">
-    <body>
-      <trans-unit id="General.InvalidToolSwitch">
-        <source>MSB6001: Invalid command line switch for "{0}". {1}</source>
-        <target state="new">MSB6001: Invalid command line switch for "{0}". {1}</target>
-        <note>{StrBegin="MSB6001: "}UE: This message is shown when a tool-based task (i.e. the task is a wrapper for an .exe) is given a parameter value that converts into an invalid command line switch for the tool. "{0}" is the name of the tool e.g. "csc.exe", and "{1}" is a message explaining the problem. LOCALIZATION: "{1}" is a localized message.</note>
-      </trans-unit>
-      <trans-unit id="General.QuotesNotAllowedInThisKindOfTaskParameter">
-        <source>Illegal quote passed to the command line switch named "{0}". The value was [{1}].</source>
-        <target state="new">Illegal quote passed to the command line switch named "{0}". The value was [{1}].</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.QuotesNotAllowedInThisKindOfTaskParameterNoSwitchName">
-        <source>Illegal quote in the command line value [{0}].</source>
-        <target state="new">Illegal quote in the command line value [{0}].</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="General.ToolCommandFailedNoErrorCode">
-        <source>The command exited with code {0}.</source>
-        <target state="new">The command exited with code {0}.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="LoggingBeforeTaskInitialization">
-        <source>MSB6005: Task attempted to log before it was initialized. Message was: {0}</source>
-        <target state="new">MSB6005: Task attempted to log before it was initialized. Message was: {0}</target>
-        <note>{StrBegin="MSB6005: "}UE: This occurs if the task attempts to log something in its own constructor.</note>
-      </trans-unit>
-      <trans-unit id="PlatformManifest.MissingPlatformXml">
-        <source>MSB6010: Could not find platform manifest file at "{0}".</source>
-        <target state="new">MSB6010: Could not find platform manifest file at "{0}".</target>
-        <note>{StrBegin="MSB6010: "}</note>
-      </trans-unit>
-      <trans-unit id="ToolLocationHelper.UnsupportedFrameworkVersion">
-        <source>.NET Framework version "{0}" is not supported. Please specify a value from the enumeration Microsoft.Build.Utilities.TargetDotNetFrameworkVersion.</source>
-        <target state="new">.NET Framework version "{0}" is not supported. Please specify a value from the enumeration Microsoft.Build.Utilities.TargetDotNetFrameworkVersion.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ToolLocationHelper.UnsupportedFrameworkVersionForWindowsSdk">
-        <source>.NET Framework version "{0}" is not supported when explicitly targeting the Windows SDK, which is only supported on .NET 4.5 and later.  Please specify a value from the enumeration Microsoft.Build.Utilities.TargetDotNetFrameworkVersion that is Version45 or above.</source>
-        <target state="new">.NET Framework version "{0}" is not supported when explicitly targeting the Windows SDK, which is only supported on .NET 4.5 and later.  Please specify a value from the enumeration Microsoft.Build.Utilities.TargetDotNetFrameworkVersion that is Version45 or above.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ToolLocationHelper.UnsupportedVisualStudioVersion">
-        <source>Visual Studio version "{0}" is not supported.  Please specify a value from the enumeration Microsoft.Build.Utilities.VisualStudioVersion.</source>
-        <target state="new">Visual Studio version "{0}" is not supported.  Please specify a value from the enumeration Microsoft.Build.Utilities.VisualStudioVersion.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="ToolTask.CommandTooLong">
-        <source>MSB6002: The command-line for the "{0}" task is too long. Command-lines longer than 32000 characters are likely to fail. Try reducing the length of the command-line by breaking down the call to "{0}" into multiple calls with fewer parameters per call.</source>
-        <target state="new">MSB6002: The command-line for the "{0}" task is too long. Command-lines longer than 32000 characters are likely to fail. Try reducing the length of the command-line by breaking down the call to "{0}" into multiple calls with fewer parameters per call.</target>
-        <note>{StrBegin="MSB6002: "}</note>
-      </trans-unit>
-      <trans-unit id="ToolTask.CouldNotStartToolExecutable">
-        <source>MSB6003: The specified task executable "{0}" could not be run. {1}</source>
-        <target state="new">MSB6003: The specified task executable "{0}" could not be run. {1}</target>
-        <note>{StrBegin="MSB6003: "}</note>
-      </trans-unit>
-      <trans-unit id="ToolTask.ToolCommandFailed">
-        <source>MSB6006: "{0}" exited with code {1}.</source>
-        <target state="new">MSB6006: "{0}" exited with code {1}.</target>
-        <note>{StrBegin="MSB6006: "}</note>
-      </trans-unit>
-      <trans-unit id="ToolTask.ToolExecutableNotFound">
-        <source>MSB6004: The specified task executable location "{0}" is invalid.</source>
-        <target state="new">MSB6004: The specified task executable location "{0}" is invalid.</target>
-        <note>{StrBegin="MSB6004: "}</note>
-      </trans-unit>
-      <trans-unit id="ToolTask.ValidateParametersFailed">
-        <source>MSB6011: Invalid parameters passed to the {0} task.</source>
-        <target state="new">MSB6011: Invalid parameters passed to the {0} task.</target>
-        <note>{StrBegin="MSB6011: "}</note>
-      </trans-unit>
-      <trans-unit id="ToolsLocationHelper.InvalidRedistFile">
-        <source>There was an error reading the redist list file "{0}". {1}</source>
-        <target state="new">There was an error reading the redist list file "{0}". {1}</target>
-        <note>No Error code because this resource will be used in an exception. The error code is discarded if it is included</note>
-      </trans-unit>
-      <trans-unit id="ToolsLocationHelper.CouldNotCreateChain">
-        <source>The Framework at path "{0}" tried to include the framework at path "{1}" as part of its reference assembly paths but there was an error. {2}</source>
-        <target state="new">The Framework at path "{0}" tried to include the framework at path "{1}" as part of its reference assembly paths but there was an error. {2}</target>
-        <note>No Error code because this resource will be used in an exception. The error code is discarded if it is included</note>
-      </trans-unit>
-      <trans-unit id="ToolsLocationHelper.CouldNotGenerateReferenceAssemblyDirectory">
-        <source>When attempting to generate a reference assembly path from the path "{0}" and the framework moniker "{1}" there was an error. {2}</source>
-        <target state="new">When attempting to generate a reference assembly path from the path "{0}" and the framework moniker "{1}" there was an error. {2}</target>
-        <note>No Error code because this resource will be used in an exception. The error code is discarded if it is included</note>
-      </trans-unit>
-      <trans-unit id="ToolTask.InvalidEnvironmentParameter">
-        <source>MSB6007: The "{0}" value passed to the Environment property is not in the format "name=value", where the value part may be empty.</source>
-        <target state="new">MSB6007: The "{0}" value passed to the Environment property is not in the format "name=value", where the value part may be empty.</target>
-        <note>{StrBegin="MSB6007: "}</note>
-      </trans-unit>
-      <trans-unit id="ToolTask.EnvironmentVariableHeader">
-        <source>Environment Variables passed to tool:</source>
-        <target state="new">Environment Variables passed to tool:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_LogFilesNotAvailable">
-        <source>Tracking logs are not available, minimal rebuild will be disabled.</source>
-        <target state="new">Tracking logs are not available, minimal rebuild will be disabled.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_MissingInputs">
-        <source>Missing input files detected, minimal rebuild will be disabled.</source>
-        <target state="new">Missing input files detected, minimal rebuild will be disabled.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_MissingOutputs">
-        <source>Missing output files detected, minimal rebuild will be disabled.</source>
-        <target state="new">Missing output files detected, minimal rebuild will be disabled.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_UpToDate">
-        <source>Skipping task because it is up-to-date.</source>
-        <target state="new">Skipping task because it is up-to-date.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_TrackingLogNotAvailable">
-        <source>Write Tracking log not available, minimal rebuild will be disabled.</source>
-        <target state="new">Write Tracking log not available, minimal rebuild will be disabled.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_WriteTrackingLogs">
-        <source>Write Tracking Logs:</source>
-        <target state="new">Write Tracking Logs:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_WriteTrackingCached">
-        <source>Using cached output dependency table built from:</source>
-        <target state="new">Using cached output dependency table built from:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_TrackingLogs">
-        <source>Tracking Logs:</source>
-        <target state="new">Tracking Logs:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_TrackingCached">
-        <source>Using cached dependency table built from:</source>
-        <target state="new">Using cached dependency table built from:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_OutputsFor">
-        <source>Outputs for {0}:</source>
-        <target state="new">Outputs for {0}:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_InputsFor">
-        <source>Inputs for {0}:</source>
-        <target state="new">Inputs for {0}:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_OutputsNotShown">
-        <source>Output details ({0} of them) were not logged for performance reasons.</source>
-        <target state="new">Output details ({0} of them) were not logged for performance reasons.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_InputsNotShown">
-        <source>Input details ({0} of them) were not logged for performance reasons.</source>
-        <target state="new">Input details ({0} of them) were not logged for performance reasons.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_SingleLogFileNotAvailable">
-        <source>Tracking log {0} is not available.</source>
-        <target state="new">Tracking log {0} is not available.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_SourceWillBeCompiledAsNoTrackingLog">
-        <source>{0} will be compiled because the tracking log is not available.</source>
-        <target state="new">{0} will be compiled because the tracking log is not available.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_SourceNotInTrackingLog">
-        <source>{0} will be compiled because it was not found in the tracking log.</source>
-        <target state="new">{0} will be compiled because it was not found in the tracking log.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_SourceOutputsNotAvailable">
-        <source>{0} will be compiled because not all outputs are available.</source>
-        <target state="new">{0} will be compiled because not all outputs are available.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_SourceWillBeCompiledMissingDependency">
-        <source>{0} will be compiled because dependency {1} was missing.</source>
-        <target state="new">{0} will be compiled because dependency {1} was missing.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_SourceWillBeCompiledDependencyWasModifiedAt">
-        <source>{0} will be compiled because {1} was modified at {2}.</source>
-        <target state="new">{0} will be compiled because {1} was modified at {2}.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_SourceWillBeCompiled">
-        <source>{0} will be compiled.</source>
-        <target state="new">{0} will be compiled.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_AllOutputsAreUpToDate">
-        <source>All outputs are up-to-date.</source>
-        <target state="new">All outputs are up-to-date.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_DependencyWasModifiedAt">
-        <source>File {0} was modified at {1} which is newer than {2} modified at {3}.</source>
-        <target state="new">File {0} was modified at {1} which is newer than {2} modified at {3}.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_OutputDoesNotExist">
-        <source>{0} does not exist; source compilation required.</source>
-        <target state="new">{0} does not exist; source compilation required.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_SourceWillBeCompiledOutputDoesNotExist">
-        <source>{0} will be compiled because output {1} does not exist.</source>
-        <target state="new">{0} will be compiled because output {1} does not exist.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_ReadTrackingLogs">
-        <source>Read Tracking Logs:</source>
-        <target state="new">Read Tracking Logs:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_ReadTrackingCached">
-        <source>Using cached input dependency table built from:</source>
-        <target state="new">Using cached input dependency table built from:</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_OutputForRootNotFound">
-        <source>No output for {0} was found in the tracking log; source compilation required.</source>
-        <target state="new">No output for {0} was found in the tracking log; source compilation required.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_DependenciesForRootNotFound">
-        <source>No dependencies for output {0} were found in the tracking log; source compilation required.</source>
-        <target state="new">No dependencies for output {0} were found in the tracking log; source compilation required.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_WriteLogEntryNotFound">
-        <source>Could not find {0} in the write tracking log.</source>
-        <target state="new">Could not find {0} in the write tracking log.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_ReadLogEntryNotFound">
-        <source>Could not find {0} in the read tracking log.</source>
-        <target state="new">Could not find {0} in the read tracking log.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_SourcesAndCorrespondingOutputMismatch">
-        <source>The number of source files and corresponding outputs must match.</source>
-        <target state="new">The number of source files and corresponding outputs must match.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_InputNewerThanOutput">
-        <source>Source compilation required: input {0} is newer than output {1}.</source>
-        <target state="new">Source compilation required: input {0} is newer than output {1}.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="Tracking_RebuildingDueToInvalidTLog">
-        <source>MSB6008: Forcing a rebuild of all sources due to an error with the tracking logs. {0}</source>
-        <target state="new">MSB6008: Forcing a rebuild of all sources due to an error with the tracking logs. {0}</target>
-        <note>{StrBegin="MSB6008: "}</note>
-      </trans-unit>
-      <trans-unit id="Tracking_RebuildingDueToInvalidTLogContents">
-        <source>MSB6009: Forcing a rebuild of all source files due to the contents of "{0}" being invalid.</source>
-        <target state="new">MSB6009: Forcing a rebuild of all source files due to the contents of "{0}" being invalid.</target>
-        <note>{StrBegin="MSB6009: "}</note>
-      </trans-unit>
-      <trans-unit id="MuxLogger_BuildFinishedFailure">
-        <source>Build FAILED.</source>
-        <target state="new">Build FAILED.</target>
-        <note />
-      </trans-unit>
-      <trans-unit id="MuxLogger_BuildFinishedSuccess">
-        <source>Build succeeded.</source>
-        <target state="new">Build succeeded.</target>
-        <note />
-      </trans-unit>
-    </body>
-  </file>
-</xliff>
\ No newline at end of file
diff --git a/src/Utilities/ToolLocationHelper.cs b/src/Utilities/ToolLocationHelper.cs
index 1b6d83c2caa..e34d6eef2af 100644
--- a/src/Utilities/ToolLocationHelper.cs
+++ b/src/Utilities/ToolLocationHelper.cs
@@ -109,7 +109,7 @@ public enum TargetDotNetFrameworkVersion
         /// breaking change. Use 'Latest' if possible, but note the
         /// compatibility implications.
         /// </summary>
-        VersionLatest = Version462,
+        VersionLatest = Version48,
 
         /// <summary>
         /// Sentinel value for the latest version that this version of MSBuild is aware of. Similar
@@ -160,7 +160,7 @@ public enum VisualStudioVersion
         Version160,
 
         /// <summary>
-        /// Visual Studio "Dev17"
+        /// Visual Studio 2022 (Dev17)
         /// </summary>
         Version170,
 
@@ -168,7 +168,7 @@ public enum VisualStudioVersion
         /// <summary>
         /// The latest version available at the time of release
         /// </summary>
-        VersionLatest = Version150
+        VersionLatest = Version170
     }
 
     /// <summary>
@@ -1903,14 +1903,14 @@ public static IList<string> GetPathToReferenceAssemblies(string targetFrameworkI
         /// <summary>
         /// Returns the paths to the reference assemblies location for the given target framework.
         /// This method will assume the requested ReferenceAssemblyRoot path will be the ProgramFiles directory specified by Environment.SpecialFolder.ProgramFiles
-        /// In additon when the .NETFramework or .NET Framework targetFrameworkIdentifiers are seen and targetFrameworkVersion is 2.0, 3.0, 3.5 or 4.0 we will return the correctly chained reference assembly paths
+        /// In addition when the .NETFramework or .NET Framework targetFrameworkIdentifiers are seen and targetFrameworkVersion is 2.0, 3.0, 3.5 or 4.0 we will return the correctly chained reference assembly paths
         /// for the legacy .net frameworks. This chaining will use the existing GetPathToDotNetFrameworkReferenceAssemblies to build up the list of reference assembly paths.
         /// </summary>
         /// <param name="targetFrameworkIdentifier">Identifier being targeted</param>
         /// <param name="targetFrameworkVersion">Version being targeted</param>
         /// <param name="targetFrameworkProfile">Profile being targeted</param>
         /// <param name="targetFrameworkRootPath">Root directory which will be used to calculate the reference assembly path. The references assemblies will be
-        /// <param name="targetFrameworkFallbackSearchPaths">';' separated list of paths that are looked up if the framework cannot be found in @targetFrameworkRootPath</param>
+        /// <param name="targetFrameworkFallbackSearchPaths">';' separated list of paths that are looked up if the framework cannot be found in <paramref name="targetFrameworkRootPath"/></param>
         /// generated in the following way TargetFrameworkRootPath\TargetFrameworkIdentifier\TargetFrameworkVersion\SubType\TargetFrameworkSubType.
         /// Uses the default path if this is null.
         /// </param>
diff --git a/src/Utilities/TrackedDependencies/FileTracker.cs b/src/Utilities/TrackedDependencies/FileTracker.cs
index 7fb15a7f638..ec2d396bfc5 100644
--- a/src/Utilities/TrackedDependencies/FileTracker.cs
+++ b/src/Utilities/TrackedDependencies/FileTracker.cs
@@ -366,8 +366,9 @@ public static string EnsureFileTrackerOnPath(string rootPath)
         /// <summary>
         /// Searches %PATH% for the location of Tracker.exe, and returns the first 
         /// path that matches. 
-        /// <returns>Matching full path to Tracker.exe or null if a matching path is not found.</returns>
         /// </summary>
+        /// <returns>The full path to Tracker.exe, or <see langword="null" /> if a matching path is not found.</returns>
+        
         public static string FindTrackerOnPath()
         {
             string[] paths = Environment.GetEnvironmentVariable(pathEnvironmentVariableName).Split(pathSeparatorArray, StringSplitOptions.RemoveEmptyEntries);
diff --git a/src/Xunit.NetCore.Extensions/Attributes/ActiveIssueAttribute.cs b/src/Xunit.NetCore.Extensions/Attributes/ActiveIssueAttribute.cs
deleted file mode 100644
index d4060615d87..00000000000
--- a/src/Xunit.NetCore.Extensions/Attributes/ActiveIssueAttribute.cs
+++ /dev/null
@@ -1,24 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System;
-using Xunit.Sdk;
-
-namespace Xunit
-{
-    /// <summary>
-    /// Apply this attribute to your test method to specify an active issue.
-    /// </summary>
-    [TraitDiscoverer("Xunit.NetCore.Extensions.ActiveIssueDiscoverer", "Xunit.NetCore.Extensions")]
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]
-    public class ActiveIssueAttribute : Attribute, ITraitAttribute
-    {
-        public ActiveIssueAttribute(int issueNumber, TestPlatforms platforms) { }
-        public ActiveIssueAttribute(string issue, TestPlatforms platforms) { }
-        public ActiveIssueAttribute(int issueNumber, TargetFrameworkMonikers framework) { }
-        public ActiveIssueAttribute(string issue, TargetFrameworkMonikers framework) { }
-        public ActiveIssueAttribute(int issueNumber, TestPlatforms platforms = TestPlatforms.Any, TargetFrameworkMonikers framework = (TargetFrameworkMonikers)0) { }
-        public ActiveIssueAttribute(string issue, TestPlatforms platforms = TestPlatforms.Any, TargetFrameworkMonikers framework = (TargetFrameworkMonikers)0) { }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/Attributes/ConditionalFactAttribute.cs b/src/Xunit.NetCore.Extensions/Attributes/ConditionalFactAttribute.cs
deleted file mode 100644
index f0951064b1b..00000000000
--- a/src/Xunit.NetCore.Extensions/Attributes/ConditionalFactAttribute.cs
+++ /dev/null
@@ -1,28 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System;
-using Xunit.Sdk;
-
-namespace Xunit
-{
-    [XunitTestCaseDiscoverer("Xunit.NetCore.Extensions.ConditionalFactDiscoverer", "Xunit.NetCore.Extensions")]
-    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
-    public sealed class ConditionalFactAttribute : FactAttribute
-    {
-        public Type     CalleeType { get; private set; }
-        public string[] ConditionMemberNames { get; private set; }
-
-        public ConditionalFactAttribute(Type calleeType, params string[] conditionMemberNames)
-        {
-            CalleeType = calleeType;
-            ConditionMemberNames = conditionMemberNames;
-        }
-
-        public ConditionalFactAttribute(params string[] conditionMemberNames)
-        {
-            ConditionMemberNames = conditionMemberNames;
-        }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/Attributes/ConditionalTheoryAttribute.cs b/src/Xunit.NetCore.Extensions/Attributes/ConditionalTheoryAttribute.cs
deleted file mode 100644
index 761f1ff4f1b..00000000000
--- a/src/Xunit.NetCore.Extensions/Attributes/ConditionalTheoryAttribute.cs
+++ /dev/null
@@ -1,28 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System;
-using Xunit.Sdk;
-
-namespace Xunit
-{
-    [XunitTestCaseDiscoverer("Xunit.NetCore.Extensions.ConditionalTheoryDiscoverer", "Xunit.NetCore.Extensions")]
-    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
-    public sealed class ConditionalTheoryAttribute : TheoryAttribute
-    {
-        public Type     CalleeType { get; private set; }
-        public string[] ConditionMemberNames { get; private set; }
-
-        public ConditionalTheoryAttribute(Type calleeType, params string[] conditionMemberNames)
-        {
-            CalleeType = calleeType;
-            ConditionMemberNames = conditionMemberNames;
-        }
-
-        public ConditionalTheoryAttribute(params string[] conditionMemberNames)
-        {
-            ConditionMemberNames = conditionMemberNames;
-        }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/Attributes/OuterLoopAttribute.cs b/src/Xunit.NetCore.Extensions/Attributes/OuterLoopAttribute.cs
deleted file mode 100644
index d09a52f4787..00000000000
--- a/src/Xunit.NetCore.Extensions/Attributes/OuterLoopAttribute.cs
+++ /dev/null
@@ -1,20 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System;
-using Xunit.Sdk;
-
-namespace Xunit
-{
-    /// <summary>
-    /// Apply this attribute to your test method to specify a outer-loop category.
-    /// </summary>
-    [TraitDiscoverer("Xunit.NetCore.Extensions.OuterLoopTestsDiscoverer", "Xunit.NetCore.Extensions")]
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]
-    public class OuterLoopAttribute : Attribute, ITraitAttribute
-    {
-        public OuterLoopAttribute() { }
-        public OuterLoopAttribute(string reason) { }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/Attributes/PlatformSpecificAttribute.cs b/src/Xunit.NetCore.Extensions/Attributes/PlatformSpecificAttribute.cs
deleted file mode 100644
index 50532884811..00000000000
--- a/src/Xunit.NetCore.Extensions/Attributes/PlatformSpecificAttribute.cs
+++ /dev/null
@@ -1,19 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System;
-using Xunit.Sdk;
-
-namespace Xunit
-{
-    /// <summary>
-    /// Apply this attribute to your test method to specify this is a platform specific test.
-    /// </summary>
-    [TraitDiscoverer("Xunit.NetCore.Extensions.PlatformSpecificDiscoverer", "Xunit.NetCore.Extensions")]
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = false)]
-    public class PlatformSpecificAttribute : Attribute, ITraitAttribute
-    {
-        public PlatformSpecificAttribute(TestPlatforms platforms) { }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/Attributes/SkipOnTargetFrameworkAttribute.cs b/src/Xunit.NetCore.Extensions/Attributes/SkipOnTargetFrameworkAttribute.cs
deleted file mode 100644
index c44881202aa..00000000000
--- a/src/Xunit.NetCore.Extensions/Attributes/SkipOnTargetFrameworkAttribute.cs
+++ /dev/null
@@ -1,19 +0,0 @@
-Ôªø// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System;
-using Xunit.Sdk;
-
-namespace Xunit
-{
-    /// <summary>
-    /// Apply this attribute to your test method to specify this is a platform specific test.
-    /// </summary>
-    [TraitDiscoverer("Xunit.NetCore.Extensions.SkipOnTargetFrameworkDiscoverer", "Xunit.NetCore.Extensions")]
-    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple = true)]
-    public class SkipOnTargetFrameworkAttribute : Attribute, ITraitAttribute
-    {
-        public SkipOnTargetFrameworkAttribute(TargetFrameworkMonikers platform, string reason = null) { }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/Discoverers/ActiveIssueDiscoverer.cs b/src/Xunit.NetCore.Extensions/Discoverers/ActiveIssueDiscoverer.cs
deleted file mode 100644
index 0839e333bf3..00000000000
--- a/src/Xunit.NetCore.Extensions/Discoverers/ActiveIssueDiscoverer.cs
+++ /dev/null
@@ -1,71 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System.Collections.Generic;
-using System.Diagnostics;
-using System.Linq;
-using System.Runtime.InteropServices;
-using Xunit.Abstractions;
-using Xunit.Sdk;
-
-namespace Xunit.NetCore.Extensions
-{
-    /// <summary>
-    /// This class discovers all of the tests and test classes that have
-    /// applied the ActiveIssue attribute
-    /// </summary>
-    public class ActiveIssueDiscoverer : ITraitDiscoverer
-    {
-        /// <summary>
-        /// Gets the trait values from the Category attribute.
-        /// </summary>
-        /// <param name="traitAttribute">The trait attribute containing the trait values.</param>
-        /// <returns>The trait values.</returns>
-        public IEnumerable<KeyValuePair<string, string>> GetTraits(IAttributeInfo traitAttribute)
-        {
-            IEnumerable<object> ctorArgs = traitAttribute.GetConstructorArguments();
-            Debug.Assert(ctorArgs.Count() >= 2);
-
-            string issue = ctorArgs.First().ToString();
-            TestPlatforms platforms = TestPlatforms.Any;
-            TargetFrameworkMonikers frameworks = (TargetFrameworkMonikers)0;
-            
-            foreach (object arg in ctorArgs.Skip(1)) // First argument is the issue number.
-            {
-                if (arg is TestPlatforms)
-                {
-                    platforms = (TestPlatforms)arg;
-                }
-                else if (arg is TargetFrameworkMonikers)
-                {
-                    frameworks = (TargetFrameworkMonikers)arg;
-                }
-            }
-        
-            if ((platforms.HasFlag(TestPlatforms.FreeBSD) && RuntimeInformation.IsOSPlatform(OSPlatform.Create("FREEBSD"))) ||
-                (platforms.HasFlag(TestPlatforms.Linux) && RuntimeInformation.IsOSPlatform(OSPlatform.Linux)) ||
-                (platforms.HasFlag(TestPlatforms.NetBSD) && RuntimeInformation.IsOSPlatform(OSPlatform.Create("NETBSD"))) ||
-                (platforms.HasFlag(TestPlatforms.OSX) && RuntimeInformation.IsOSPlatform(OSPlatform.OSX)) ||
-                (platforms.HasFlag(TestPlatforms.Windows) && RuntimeInformation.IsOSPlatform(OSPlatform.Windows)))
-            {
-                if (frameworks.HasFlag(TargetFrameworkMonikers.NetFramework))
-                    yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNetfxTest);
-                if (frameworks.HasFlag(TargetFrameworkMonikers.Mono))
-                    yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonMonoTest);
-                if (frameworks.HasFlag(TargetFrameworkMonikers.Netcoreapp))
-                    yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNetcoreappTest);
-                if (frameworks.HasFlag(TargetFrameworkMonikers.UapNotUapAot))
-                    yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonUapTest);
-                if (frameworks.HasFlag(TargetFrameworkMonikers.UapAot))
-                    yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonUapAotTest);
-                if (frameworks.HasFlag(TargetFrameworkMonikers.NetcoreCoreRT))
-                    yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNetcoreCoreRTTest);
-                if (frameworks == (TargetFrameworkMonikers)0)
-                    yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.Failing);
-
-                yield return new KeyValuePair<string, string>(XunitConstants.ActiveIssue, issue);
-            }
-        }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/Discoverers/ConditionalFactDiscoverer.cs b/src/Xunit.NetCore.Extensions/Discoverers/ConditionalFactDiscoverer.cs
deleted file mode 100644
index 3ef2fc34e4b..00000000000
--- a/src/Xunit.NetCore.Extensions/Discoverers/ConditionalFactDiscoverer.cs
+++ /dev/null
@@ -1,28 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System.Collections.Generic;
-using System.Linq;
-using Xunit.Abstractions;
-using Xunit.Sdk;
-
-namespace Xunit.NetCore.Extensions
-{
-    public class ConditionalFactDiscoverer : FactDiscoverer
-    {
-        private readonly IMessageSink _diagnosticMessageSink;
-
-        public ConditionalFactDiscoverer(IMessageSink diagnosticMessageSink) : base(diagnosticMessageSink)
-        {
-            _diagnosticMessageSink = diagnosticMessageSink;
-        }
-
-        public override IEnumerable<IXunitTestCase> Discover(
-            ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo factAttribute)
-        {
-            IEnumerable<IXunitTestCase> testCases = base.Discover(discoveryOptions, testMethod, factAttribute);
-            return ConditionalTestDiscoverer.Discover(discoveryOptions, _diagnosticMessageSink, testMethod, testCases, factAttribute.GetConstructorArguments().ToArray());
-        }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/Discoverers/ConditionalTestDiscoverer.cs b/src/Xunit.NetCore.Extensions/Discoverers/ConditionalTestDiscoverer.cs
deleted file mode 100644
index 1fc7269cd91..00000000000
--- a/src/Xunit.NetCore.Extensions/Discoverers/ConditionalTestDiscoverer.cs
+++ /dev/null
@@ -1,165 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Reflection;
-using Xunit.Abstractions;
-using Xunit.Sdk;
-
-namespace Xunit.NetCore.Extensions
-{
-    // Internal helper class for code common to conditional test discovery through
-    // [ConditionalFact] and [ConditionalTheory]
-    internal class ConditionalTestDiscoverer
-    {
-        // This helper method evaluates the given condition member names for a given set of test cases.
-        // If any condition member evaluates to 'false', the test cases are marked to be skipped.
-        // The skip reason is the collection of all the condition members that evalated to 'false'.
-        internal static IEnumerable<IXunitTestCase> Discover(
-                                                        ITestFrameworkDiscoveryOptions discoveryOptions,
-                                                        IMessageSink diagnosticMessageSink,
-                                                        ITestMethod testMethod,
-                                                        IEnumerable<IXunitTestCase> testCases,
-                                                        object[] conditionArguments)
-        {
-            // A null or empty list of conditionMemberNames is treated as "no conditions".
-            // and the test cases will not be skipped.
-            // Example: [ConditionalFact()]
-            if (conditionArguments == null || conditionArguments.Length == 0)
-            {
-                return testCases;
-            }
-
-            string [] conditionMemberNames;
-
-            Type calleeType = conditionArguments[0] as Type;
-            if (calleeType != null)
-            {
-                if (conditionArguments.Length < 2)
-                {
-                    // [ConditionalFact(typeof(x))] no provided methods.
-                    return testCases;
-                }
-
-                // [ConditionalFact(typeof(x), "MethodName")]
-                conditionMemberNames = conditionArguments[1] as string[];
-            }
-            else
-            {
-                // [ConditionalFact("MethodName")]
-                conditionMemberNames = conditionArguments[0] as string[];
-            }
-
-            // [ConditionalFact((string[]) null)]
-            int conditionCount = conditionMemberNames == null ? 0 : conditionMemberNames.Count();
-            if (conditionCount == 0)
-            {
-                return testCases;
-            }
-
-            MethodInfo testMethodInfo = testMethod.Method.ToRuntimeMethod();
-            Type testMethodDeclaringType = testMethodInfo.DeclaringType;
-            List<string> falseConditions = new List<string>(conditionCount);
-
-            foreach (string entry in conditionMemberNames)
-            {
-                string conditionMemberName = entry;
-
-                // Null condition member names are silently tolerated
-                if (string.IsNullOrWhiteSpace(conditionMemberName))
-                {
-                    continue;
-                }
-
-                Type declaringType;
-
-                if (calleeType != null)
-                {
-                    declaringType = calleeType;
-                }
-                else
-                {
-                    declaringType = testMethodDeclaringType;
-
-                    string[] symbols = conditionMemberName.Split('.');
-                    if (symbols.Length == 2)
-                    {
-                        conditionMemberName = symbols[1];
-                        ITypeInfo type = testMethod.TestClass.Class.Assembly.GetTypes(false).Where(t => t.Name.Contains(symbols[0])).FirstOrDefault();
-                        if (type != null)
-                        {
-                            declaringType = type.ToRuntimeType();
-                        }
-                    }
-                }
-
-                MethodInfo conditionMethodInfo;
-                if ((conditionMethodInfo = LookupConditionalMethod(declaringType, conditionMemberName)) == null)
-                {
-                    return new[] 
-                    {
-                        new ExecutionErrorTestCase(
-                            diagnosticMessageSink,
-                            discoveryOptions.MethodDisplayOrDefault(),
-                            TestMethodDisplayOptions.None,
-                            testMethod,
-                            GetFailedLookupString(conditionMemberName, declaringType))
-                    };
-                }
-
-                // In the case of multiple conditions, collect the results of all
-                // of them to produce a summary skip reason.
-                try
-                {
-                    if (!(bool)conditionMethodInfo.Invoke(null, null))
-                    {
-                        falseConditions.Add(conditionMemberName);
-                    }
-                }
-                catch (Exception exc)
-                {
-                    falseConditions.Add($"{conditionMemberName} ({exc.GetType().Name})");
-                }
-            }
-
-            // Compose a summary of all conditions that returned false.
-            if (falseConditions.Count > 0)
-            {
-                string skippedReason = string.Format("Condition(s) not met: \"{0}\"", string.Join("\", \"", falseConditions));
-                return testCases.Select(tc => new SkippedTestCase(tc, skippedReason));
-            }
-
-            // No conditions returned false (including the absence of any conditions).
-            return testCases;
-        }
-
-        internal static string GetFailedLookupString(string name, Type type)
-        {
-            return
-                $"An appropriate member '{name}' could not be found. " +
-                $"The conditional method needs to be a static method or property on the type {type} or any ancestor, " +
-                "of any visibility, accepting zero arguments, and having a return type of Boolean.";
-        }
-        
-        internal static MethodInfo LookupConditionalMethod(Type t, string name)
-        {
-            if (t == null || name == null)
-                return null;
-
-            TypeInfo ti = t.GetTypeInfo();
-
-            MethodInfo mi = ti.GetDeclaredMethod(name);
-            if (mi?.IsStatic == true && mi.GetParameters().Length == 0 && mi.ReturnType == typeof(bool))
-                return mi;
-
-            PropertyInfo pi = ti.GetDeclaredProperty(name);
-            if (pi?.PropertyType == typeof(bool) && pi.GetMethod?.IsStatic == true && pi.GetMethod.GetParameters().Length == 0)
-                return pi.GetMethod;
-
-            return LookupConditionalMethod(ti.BaseType, name);
-        }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/Discoverers/ConditionalTheoryDiscoverer.cs b/src/Xunit.NetCore.Extensions/Discoverers/ConditionalTheoryDiscoverer.cs
deleted file mode 100644
index b4b6e5b1ff7..00000000000
--- a/src/Xunit.NetCore.Extensions/Discoverers/ConditionalTheoryDiscoverer.cs
+++ /dev/null
@@ -1,28 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System.Collections.Generic;
-using System.Linq;
-using Xunit.Abstractions;
-using Xunit.Sdk;
-
-namespace Xunit.NetCore.Extensions
-{
-    public class ConditionalTheoryDiscoverer : TheoryDiscoverer
-    {
-        private readonly IMessageSink _diagnosticMessageSink;
-
-        public ConditionalTheoryDiscoverer(IMessageSink diagnosticMessageSink) : base(diagnosticMessageSink)
-        {
-            _diagnosticMessageSink = diagnosticMessageSink;
-        }
-
-        public override IEnumerable<IXunitTestCase> Discover(
-            ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo theoryAttribute)
-        {
-            IEnumerable<IXunitTestCase> testCases = base.Discover(discoveryOptions, testMethod, theoryAttribute);
-            return ConditionalTestDiscoverer.Discover(discoveryOptions, _diagnosticMessageSink, testMethod, testCases, theoryAttribute.GetConstructorArguments().ToArray());
-        }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/Discoverers/OuterLoopTestsDiscoverer.cs b/src/Xunit.NetCore.Extensions/Discoverers/OuterLoopTestsDiscoverer.cs
deleted file mode 100644
index db67037d84f..00000000000
--- a/src/Xunit.NetCore.Extensions/Discoverers/OuterLoopTestsDiscoverer.cs
+++ /dev/null
@@ -1,27 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System.Collections.Generic;
-using Xunit.Abstractions;
-using Xunit.Sdk;
-
-namespace Xunit.NetCore.Extensions
-{
-    /// <summary>
-    /// This class discovers all of the tests and test classes that have
-    /// applied the OuterLoop attribute
-    /// </summary>
-    public class OuterLoopTestsDiscoverer : ITraitDiscoverer
-    {
-        /// <summary>
-        /// Gets the trait values from the Category attribute.
-        /// </summary>
-        /// <param name="traitAttribute">The trait attribute containing the trait values.</param>
-        /// <returns>The trait values.</returns>
-        public IEnumerable<KeyValuePair<string, string>> GetTraits(IAttributeInfo traitAttribute)
-        {
-            yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.OuterLoop);
-        }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/Discoverers/PlatformSpecificDiscoverer.cs b/src/Xunit.NetCore.Extensions/Discoverers/PlatformSpecificDiscoverer.cs
deleted file mode 100644
index ce3b9e4b99f..00000000000
--- a/src/Xunit.NetCore.Extensions/Discoverers/PlatformSpecificDiscoverer.cs
+++ /dev/null
@@ -1,38 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System.Linq;
-using System.Collections.Generic;
-using Xunit.Abstractions;
-using Xunit.Sdk;
-
-namespace Xunit.NetCore.Extensions
-{
-    /// <summary>
-    /// This class discovers all of the tests and test classes that have
-    /// applied the PlatformSpecific attribute
-    /// </summary>
-    public class PlatformSpecificDiscoverer : ITraitDiscoverer
-    {
-        /// <summary>
-        /// Gets the trait values from the Category attribute.
-        /// </summary>
-        /// <param name="traitAttribute">The trait attribute containing the trait values.</param>
-        /// <returns>The trait values.</returns>
-        public IEnumerable<KeyValuePair<string, string>> GetTraits(IAttributeInfo traitAttribute)
-        {
-            TestPlatforms platforms = (TestPlatforms)traitAttribute.GetConstructorArguments().First();
-            if (!platforms.HasFlag(TestPlatforms.Windows))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonWindowsTest);
-            if (!platforms.HasFlag(TestPlatforms.Linux))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonLinuxTest);
-            if (!platforms.HasFlag(TestPlatforms.OSX))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonOSXTest);
-            if (!platforms.HasFlag(TestPlatforms.FreeBSD))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonFreeBSDTest);
-            if (!platforms.HasFlag(TestPlatforms.NetBSD))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNetBSDTest);
-        }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/Discoverers/SkipOnTargetFrameworkDiscoverer.cs b/src/Xunit.NetCore.Extensions/Discoverers/SkipOnTargetFrameworkDiscoverer.cs
deleted file mode 100644
index 19f73d13a2a..00000000000
--- a/src/Xunit.NetCore.Extensions/Discoverers/SkipOnTargetFrameworkDiscoverer.cs
+++ /dev/null
@@ -1,62 +0,0 @@
-Ôªø// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System.Linq;
-using System.Collections.Generic;
-using Xunit.Abstractions;
-using Xunit.Sdk;
-
-namespace Xunit.NetCore.Extensions
-{
-    /// <summary>
-    /// This class discovers all of the tests and test classes that have
-    /// applied the TestOnTargetFrameworkDiscoverer attribute
-    /// </summary>
-    public class SkipOnTargetFrameworkDiscoverer : ITraitDiscoverer
-    {
-        /// <summary>
-        /// Gets the trait values from the Category attribute.
-        /// </summary>
-        /// <param name="traitAttribute">The trait attribute containing the trait values.</param>
-        /// <returns>The trait values.</returns>
-        public IEnumerable<KeyValuePair<string, string>> GetTraits(IAttributeInfo traitAttribute)
-        {
-            TargetFrameworkMonikers platform = (TargetFrameworkMonikers)traitAttribute.GetConstructorArguments().First();
-            if (platform.HasFlag(TargetFrameworkMonikers.Net45))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNet45Test);
-            if (platform.HasFlag(TargetFrameworkMonikers.Net451))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNet451Test);
-            if (platform.HasFlag(TargetFrameworkMonikers.Net452))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNet452Test);
-            if (platform.HasFlag(TargetFrameworkMonikers.Net46))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNet46Test);
-            if (platform.HasFlag(TargetFrameworkMonikers.Net461))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNet461Test);
-            if (platform.HasFlag(TargetFrameworkMonikers.Net462))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNet462Test);
-            if (platform.HasFlag(TargetFrameworkMonikers.Net463))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNet463Test);
-            if (platform.HasFlag(TargetFrameworkMonikers.Netcore50))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNetcore50Test);
-            if (platform.HasFlag(TargetFrameworkMonikers.Netcore50aot))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNetcore50aotTest);
-            if (platform.HasFlag(TargetFrameworkMonikers.Netcoreapp1_0))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNetcoreapp1_0Test);
-            if (platform.HasFlag(TargetFrameworkMonikers.Netcoreapp1_1))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNetcoreapp1_1Test);
-            if (platform.HasFlag(TargetFrameworkMonikers.NetFramework))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNetfxTest);
-            if (platform.HasFlag(TargetFrameworkMonikers.Mono))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonMonoTest);
-            if (platform.HasFlag(TargetFrameworkMonikers.Netcoreapp))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNetcoreappTest);
-            if (platform.HasFlag(TargetFrameworkMonikers.UapNotUapAot))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonUapTest);
-            if (platform.HasFlag(TargetFrameworkMonikers.UapAot))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonUapAotTest);
-            if (platform.HasFlag(TargetFrameworkMonikers.NetcoreCoreRT))
-                yield return new KeyValuePair<string, string>(XunitConstants.Category, XunitConstants.NonNetcoreCoreRTTest);
-        }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/README.md b/src/Xunit.NetCore.Extensions/README.md
deleted file mode 100644
index 537725d4f33..00000000000
--- a/src/Xunit.NetCore.Extensions/README.md
+++ /dev/null
@@ -1 +0,0 @@
-# Xunit.NetCore.Extensions
\ No newline at end of file
diff --git a/src/Xunit.NetCore.Extensions/SkippedTestCase.cs b/src/Xunit.NetCore.Extensions/SkippedTestCase.cs
deleted file mode 100644
index 518f4ffa77a..00000000000
--- a/src/Xunit.NetCore.Extensions/SkippedTestCase.cs
+++ /dev/null
@@ -1,65 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System;
-using System.Collections.Generic;
-using System.Threading;
-using System.Threading.Tasks;
-using Xunit.Abstractions;
-using Xunit.Sdk;
-
-namespace Xunit.NetCore.Extensions
-{
-    /// <summary>Wraps another test case that should be skipped.</summary>
-    internal sealed class SkippedTestCase : LongLivedMarshalByRefObject, IXunitTestCase
-    {
-        private readonly IXunitTestCase _testCase;
-        private readonly string _skippedReason;
-
-        public SkippedTestCase()
-        {
-
-        }
-
-        internal SkippedTestCase(IXunitTestCase testCase, string skippedReason)
-        {
-            _testCase = testCase;
-            _skippedReason = skippedReason;
-        }
-
-        public string DisplayName { get { return _testCase.DisplayName; } }
-
-        public IMethodInfo Method { get { return _testCase.Method; } }
-
-        public string SkipReason { get { return _skippedReason; } }
-
-        public ISourceInformation SourceInformation { get { return _testCase.SourceInformation; } set { _testCase.SourceInformation = value; } }
-
-        public ITestMethod TestMethod { get { return _testCase.TestMethod; } }
-
-        public object[] TestMethodArguments { get { return _testCase.TestMethodArguments; } }
-
-        public Dictionary<string, List<string>> Traits { get { return _testCase.Traits; } }
-
-        public string UniqueID { get { return _testCase.UniqueID; } }
-
-        public int Timeout { get { return _testCase.Timeout; } }
-
-        public Exception InitializationException
-        {
-            get { return _testCase.InitializationException; }
-        }
-
-        public void Deserialize(IXunitSerializationInfo info) { _testCase.Deserialize(info); }
-
-        public Task<RunSummary> RunAsync(
-            IMessageSink diagnosticMessageSink, IMessageBus messageBus, object[] constructorArguments,
-            ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource)
-        {
-            return new XunitTestCaseRunner(this, DisplayName, _skippedReason, constructorArguments, TestMethodArguments, messageBus, aggregator, cancellationTokenSource).RunAsync();
-        }
-
-        public void Serialize(IXunitSerializationInfo info) { _testCase.Serialize(info); }
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/TargetFrameworkMonikers.cs b/src/Xunit.NetCore.Extensions/TargetFrameworkMonikers.cs
deleted file mode 100644
index 3091730edc7..00000000000
--- a/src/Xunit.NetCore.Extensions/TargetFrameworkMonikers.cs
+++ /dev/null
@@ -1,31 +0,0 @@
-Ôªø// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System;
-
-namespace Xunit
-{
-    [Flags]
-    public enum TargetFrameworkMonikers
-    {
-        Net45 = 0x1,
-        Net451 = 0x2,
-        Net452 = 0x4,
-        Net46 = 0x8,
-        Net461 = 0x10,
-        Net462 = 0x20,
-        Net463 = 0x40,
-        Netcore50 = 0x80,
-        Netcore50aot = 0x100,
-        Netcoreapp1_0 = 0x200,
-        Netcoreapp1_1 = 0x400,
-        NetFramework = 0x800,
-        Netcoreapp = 0x1000,
-        UapNotUapAot = 0x2000,
-        UapAot = 0x4000,
-        Uap = UapAot | UapNotUapAot,
-        NetcoreCoreRT = 0x8000,
-        Mono = 0x10000
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/TestPlatforms.cs b/src/Xunit.NetCore.Extensions/TestPlatforms.cs
deleted file mode 100644
index fe905803bec..00000000000
--- a/src/Xunit.NetCore.Extensions/TestPlatforms.cs
+++ /dev/null
@@ -1,20 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-using System;
-
-namespace Xunit
-{
-    [Flags]
-    public enum TestPlatforms
-    {
-        Windows = 1,
-        Linux = 2,
-        OSX = 4,
-        FreeBSD = 8,
-        NetBSD = 16,
-        AnyUnix = FreeBSD | Linux | NetBSD | OSX,
-        Any = ~0
-    }
-}
diff --git a/src/Xunit.NetCore.Extensions/XunitConstants.cs b/src/Xunit.NetCore.Extensions/XunitConstants.cs
deleted file mode 100644
index 02d08d297f1..00000000000
--- a/src/Xunit.NetCore.Extensions/XunitConstants.cs
+++ /dev/null
@@ -1,43 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-// See the LICENSE file in the project root for more information.
-
-namespace Xunit.NetCore.Extensions
-{
-    public struct XunitConstants
-    {
-        internal const string NonFreeBSDTest = "nonfreebsdtests";
-        internal const string NonLinuxTest = "nonlinuxtests";
-        internal const string NonNetBSDTest = "nonnetbsdtests";
-        internal const string NonOSXTest = "nonosxtests";
-        internal const string NonWindowsTest = "nonwindowstests";
-
-        internal const string NonNet45Test = "nonnet45tests";
-        internal const string NonNet451Test = "nonnet451tests";
-        internal static string NonNet452Test = "nonnet452tests";
-        internal static string NonNet46Test = "nonnet46tests";
-        internal static string NonNet461Test = "nonnet461tests";
-        internal static string NonNet462Test = "nonnet462tests";
-        internal static string NonNet463Test = "nonnet463tests";
-        internal static string NonNetcore50Test = "nonnetcore50tests";
-        internal static string NonNetcore50aotTest = "nonnetcore50aottests";
-        internal static string NonNetcoreapp1_0Test = "nonnetcoreapp1.0tests";
-        internal static string NonNetcoreapp1_1Test = "nonnetcoreapp1.1tests";
-
-        //Non version framework constants
-        internal static string NonNetfxTest = "nonnetfxtests";
-        internal static string NonMonoTest = "nonmonotests";
-        internal static string NonUapTest = "nonuaptests";
-        internal static string NonUapAotTest = "nonuapaottests";
-        internal static string NonNetcoreappTest = "nonnetcoreapptests";
-        internal static string NonNetcoreCoreRTTest = "nonnetcorecorerttests";
-
-        internal const string Failing = "failing";
-        internal const string ActiveIssue = "activeissue";
-        internal const string OuterLoop = "outerloop";
-
-        public const string Category = "category";
-        public const string IgnoreForCI = "ignoreforci";
-        public const string RequiresElevation = "requireselevation";
-    }
-}
