diff --git a/src/Build.UnitTests/BufferedBinaryReader_Tests.cs b/src/Build.UnitTests/BufferedBinaryReader_Tests.cs
index 81c2de97728..c23f26c54ca 100644
--- a/src/Build.UnitTests/BufferedBinaryReader_Tests.cs
+++ b/src/Build.UnitTests/BufferedBinaryReader_Tests.cs
@@ -347,5 +347,35 @@ public void Test_Seek(int bufferCapacity)
 
             Assert.Equal(testString[2], reader.ReadString());
         }
+
+        /// <summary>
+        /// Test ReadGuid 
+        /// </summary>
+        [Fact]
+        public void Test_ReadGuid()
+        {
+            int testCount = 20;
+            List<Guid> testGuids = new List<Guid>(testCount);
+
+            for(int i = 0; i < testCount; i++)
+            {
+                testGuids.Add(Guid.NewGuid());
+            }
+
+            using var stream = new MemoryStream();
+            using var writer = new BinaryWriter(stream);
+            foreach (var guid in testGuids)
+            {
+                writer.WriteGuid(guid);
+            }
+
+            stream.Position = 0;
+
+            using var reader = new BufferedBinaryReader(stream, bufferCapacity: 20);
+            foreach (var guid in testGuids)
+            {
+                Assert.Equal(guid, new Guid(reader.ReadGuid()));
+            }
+        }
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BinaryReaderWrapper.cs b/src/Build/Logging/BinaryLogger/BinaryReaderWrapper.cs
index d971d49d838..6801f8858f7 100644
--- a/src/Build/Logging/BinaryLogger/BinaryReaderWrapper.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryReaderWrapper.cs
@@ -61,6 +61,8 @@ int[] IBinaryReader.BulkRead7BitEncodedInt(int numIntegers)
 
         byte[] IBinaryReader.ReadBytes(int count) => _binaryReader.ReadBytes(count);
 
+        byte[] IBinaryReader.ReadGuid() => _binaryReader.ReadBytes(16 /*sizeof(Guid) - to avoid unsafe context, Guid will never change in size */);
+
         bool IBinaryReader.ReadBoolean() => _binaryReader.ReadBoolean();
 
         long IBinaryReader.ReadInt64() => _binaryReader.ReadInt64();
diff --git a/src/Build/Logging/BinaryLogger/BufferedBinaryReader.cs b/src/Build/Logging/BinaryLogger/BufferedBinaryReader.cs
index 3a8b2331f59..37a7befa163 100644
--- a/src/Build/Logging/BinaryLogger/BufferedBinaryReader.cs
+++ b/src/Build/Logging/BinaryLogger/BufferedBinaryReader.cs
@@ -40,6 +40,7 @@ public BufferedBinaryReader(Stream stream, Encoding? encoding = null, int buffer
             this.bufferCapacity = bufferCapacity;  // Note: bufferCapacity must be large enough for an BulkRead7BitEncodedInt operation.
             this.encoding = encoding ?? new UTF8Encoding();
             buffer = new byte[this.bufferCapacity];
+            charBuffer = new char[bufferCapacity + 1];
         }
 
         /// <summary>
@@ -94,7 +95,7 @@ public int ReadInt32()
         private StringBuilder? cachedBuilder;
 
         // Reusable char[] for ReadString().
-        private char[]? charBuffer;
+        private char[] charBuffer;
 
         /// <summary>
         /// Reads a string with a prefixed of the length.
@@ -113,12 +114,7 @@ public string ReadString()
 
             if (stringLength < 0)
             {
-                throw new Exception();
-            }
-
-            if (charBuffer == null)
-            {
-                charBuffer = new char[bufferCapacity + 1];
+                throw new FormatException();
             }
 
             int charRead = 0;
@@ -215,7 +211,7 @@ public byte[] ReadBytes(int count)
             // Avoid an allocation if the current buffer is large enough.
             // Except if the allocation is 16 byte because GUID requires exactly 16 byte array.
             byte[] result;
-            if (count != 16 && count < this.bufferCapacity)
+            if (count < this.bufferCapacity)
             {
                 if (this.bufferOffset > 0)
                 {
@@ -236,6 +232,23 @@ public byte[] ReadBytes(int count)
             return result;
         }
 
+        private byte[] resultGuidBytes = new byte[16];
+
+        /// <summary>
+        /// Read a 16 bytes that represents a GUID.
+        /// </summary>
+        /// <returns>A byte array containing a GUID.</returns>
+        public byte[] ReadGuid()
+        {
+            const int guidCount = 16;
+            FillBuffer(16);
+            Array.Copy(buffer, bufferOffset, resultGuidBytes, 0, guidCount);
+            bufferOffset += guidCount;
+            baseStreamPosition += guidCount;
+
+            return resultGuidBytes;
+        }
+
         /// <summary>
         /// Reads the next byte.
         /// </summary>
@@ -286,6 +299,11 @@ public int Read7BitEncodedInt()
         /// <remarks>This will reuse the same array for results to avoid extra allocations.</remarks>
         public int[] BulkRead7BitEncodedInt(int numIntegers)
         {
+            if (numIntegers > MaxBulkRead7BitLength)
+            {
+                throw new ArgumentOutOfRangeException();
+            }
+
             FillBuffer(5 * numIntegers, throwOnEOF: false);
             int count = 0;
             int shift = 0;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 593b9117e4a..2ccbb9f1f61 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -1740,7 +1740,7 @@ private bool ReadBoolean()
 
         private Guid ReadGuid()
         {
-            return new Guid(_binaryReader.ReadBytes(16 /*sizeof(Guid) - to avoid unsafe context, Guid will never change in size */));
+            return new Guid(_binaryReader.ReadGuid());
         }
 
         private DateTime ReadDateTime()
diff --git a/src/Framework/Logging/IBinaryReader.cs b/src/Framework/Logging/IBinaryReader.cs
index f3ce624f2f0..6064e8feaf3 100644
--- a/src/Framework/Logging/IBinaryReader.cs
+++ b/src/Framework/Logging/IBinaryReader.cs
@@ -22,6 +22,8 @@ public interface IBinaryReader : IDisposable
 
         public byte[] ReadBytes(int count);
 
+        public byte[] ReadGuid();
+
         public bool ReadBoolean();
 
         public long ReadInt64();
