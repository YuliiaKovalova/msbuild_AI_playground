diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index e2039ec6a15..3766635115a 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -33,6 +33,8 @@ internal sealed class LiveLogger : INodeLogger
 
     private Thread _refresher;
 
+    private List<string> _nodeStringBuffer = new();
+
     public LoggerVerbosity Verbosity { get => LoggerVerbosity.Minimal; set { } }
     public string Parameters { get => ""; set { } }
 
@@ -88,10 +90,14 @@ private void ThreadProc()
         while (!_cts.IsCancellationRequested)
         {
             Thread.Sleep(1_000 / 30); // poor approx of 30Hz
+
             lock (_lock)
             {
-                EraseNodes();
-                DisplayNodes();
+                if (UpdateNodeStringBuffer())
+                {
+                    EraseNodes();
+                    DisplayNodes();
+                }
             }
         }
 
@@ -163,6 +169,7 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
 
                 double duration = _notableProjects[restoreContext].Stopwatch.Elapsed.TotalSeconds;
 
+                UpdateNodeStringBuffer();
                 EraseNodes();
                 Console.WriteLine($"\x1b[{_usedNodes + 1}F");
                 Console.Write($"\x1b[0J");
@@ -176,6 +183,7 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
             lock (_lock)
             {
+                UpdateNodeStringBuffer();
                 EraseNodes();
 
                 double duration = _notableProjects[c].Stopwatch.Elapsed.TotalSeconds;
@@ -186,23 +194,51 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
         }
     }
 
-    private void DisplayNodes()
+    private bool UpdateNodeStringBuffer()
     {
-        lock (_lock)
+        bool stringBufferWasUpdated = false;
+
+        int i = 0;
+        foreach (NodeStatus n in _nodes)
         {
-            int i = 0;
-            foreach (NodeStatus n in _nodes)
+            if (n is null)
+            {
+                continue;
+            }
+            string str = n.ToString();
+
+            if (i < _nodeStringBuffer.Count)
             {
-                if (n is null)
+                if (_nodeStringBuffer[i] != str)
                 {
-                    continue;
+                    _nodeStringBuffer[i] = str;
+                    stringBufferWasUpdated = true;
                 }
-                Console.WriteLine(FitToWidth(n.ToString()));
-                i++;
             }
+            else
+            {
+                _nodeStringBuffer.Add(str);
+                stringBufferWasUpdated = true;
+            }
+            i++;
+        }
 
-            _usedNodes = i;
+        if (i < _nodeStringBuffer.Count)
+        {
+            _nodeStringBuffer.RemoveRange(i, _nodeStringBuffer.Count - i);
+            stringBufferWasUpdated = true;
         }
+
+        return stringBufferWasUpdated;
+    }
+
+    private void DisplayNodes()
+    {
+        foreach (string str in _nodeStringBuffer)
+        {
+            Console.WriteLine(FitToWidth(str));
+        }
+        _usedNodes = _nodeStringBuffer.Count;
     }
 
     private string FitToWidth(string input)
@@ -212,15 +248,12 @@ private string FitToWidth(string input)
 
     private void EraseNodes()
     {
-        lock (_lock)
+        if (_usedNodes == 0)
         {
-            if (_usedNodes == 0)
-            {
-                return;
-            }
-            Console.WriteLine($"\x1b[{_usedNodes + 1}F");
-            Console.Write($"\x1b[0J");
+            return;
         }
+        Console.WriteLine($"\x1b[{_usedNodes + 1}F");
+        Console.Write($"\x1b[0J");
     }
 
     private void TargetStarted(object sender, TargetStartedEventArgs e)
