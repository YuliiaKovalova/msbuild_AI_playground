diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs
index 73516c3b2d6..f86d7d1c33e 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Logging_Tests.cs
@@ -83,16 +83,16 @@ public BuildManager_Logging_Tests(ITestOutputHelper output)
         [InlineData("0", false)]
         [InlineData(null, true)]
         public void Build_WithCustomBuildArgs_NetCore(string envVariableValue, bool isWarningExpected)
-            => TestCustomEventWarning(envVariableValue, isWarningExpected);
+            => TestCustomEventWarning<BuildErrorEventArgs>(envVariableValue, isWarningExpected);
 
         [WindowsFullFrameworkOnlyTheory]
         [InlineData("1", true)]
         [InlineData("0", false)]
         [InlineData(null, false)]
         public void Build_WithCustomBuildArgs_Framework(string envVariableValue, bool isWarningExpected) =>
-            TestCustomEventWarning(envVariableValue, isWarningExpected);
+            TestCustomEventWarning<BuildWarningEventArgs>(envVariableValue, isWarningExpected);
 
-        private void TestCustomEventWarning(string envVariableValue, bool isWarningExpected)
+        private void TestCustomEventWarning<T>(string envVariableValue, bool isWarningExpected) where T : LazyFormattedBuildEventArgs
         {
             var testFiles = _env.CreateTestProjectWithFiles(string.Empty, new[] { "main", "child1" }, string.Empty);
 
@@ -127,14 +127,14 @@ private void TestCustomEventWarning(string envVariableValue, bool isWarningExpec
 
                 if (isWarningExpected)
                 {
-                    allEvents.OfType<BuildWarningEventArgs>().ShouldHaveSingleItem();
-                    allEvents.First(x => x is BuildWarningEventArgs).Message.ShouldContain(
+                    allEvents.OfType<T>().ShouldHaveSingleItem();
+                    allEvents.First(x => x is T).Message.ShouldContain(
                         string.Format(ResourceUtilities.GetResourceString("DeprecatedEventSerialization"),
                         "MyCustomBuildEventArgs"));
                 }
                 else
                 {
-                    allEvents.OfType<BuildWarningEventArgs>().ShouldBeEmpty();
+                    allEvents.OfType<T>().ShouldBeEmpty();
                 }
             }
             finally
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index 83a74bee7d6..619c476a1f6 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -572,7 +572,28 @@ private void SendPacket(INodePacket packet)
         {
             if (_nodeEndpoint.LinkStatus == LinkStatus.Active)
             {
+#if RUNTIME_TYPE_NETCORE
+                if (packet is LogMessagePacketBase logMessage
+                    && logMessage.EventType == LoggingEventType.CustomEvent 
+                    && ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_8) 
+                    && Traits.Instance.EscapeHatches.EnableWarningOnCustomBuildEvent)
+                {
+                    BuildEventArgs buildEvent = logMessage.NodeBuildEvent.Value.Value;
+
+                    // Serializing unknown CustomEvent which has to use unsecure BinaryFormatter by TranslateDotNet<T>
+                    // Since BinaryFormatter is deprecated in dotnet 8+, log error so users discover root cause easier
+                    // then by reading CommTrace where it would be otherwise logged as critical infra error.
+                    _loggingService.LogError(_loggingContext?.BuildEventContext ?? BuildEventContext.Invalid, null, BuildEventFileInfo.Empty,
+                            "DeprecatedEventSerialization",
+                            buildEvent?.GetType().Name ?? string.Empty);
+                }
+                else
+                {
+                    _nodeEndpoint.SendData(packet);
+                }
+#else
                 _nodeEndpoint.SendData(packet);
+#endif
             }
         }
 
