diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index 1f26cf2814a..4bd6aad3dc7 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -96,9 +96,8 @@ public Miscellaneous(ITestOutputHelper output) : base(output)
         }
 
         [Fact]
-        public void test()
+        public void VerifyPrimaryReferenceToBadImageDoesNotThrow()
         {
-            ITaskItem w = new TaskItem(Path.Combine(s_myComponentsRootPath, "DependsOnX.dll"));
             ITaskItem x = new TaskItem(Path.Combine(s_myComponentsRootPath, "X.dll"));
             ITaskItem xpdb = new TaskItem(Path.Combine(s_myComponentsRootPath, "X.pdb"));
             ResolveAssemblyReference t = new()
@@ -106,8 +105,8 @@ public void test()
                 BuildEngine = new MockEngine(),
                 AllowedRelatedFileExtensions = new string[] { ".pdb" },
                 Assemblies = new ITaskItem[] { xpdb },
-                AssemblyFiles = new ITaskItem[] { w, x },
-                SearchPaths = new string[] { s_myComponentsRootPath }
+                AssemblyFiles = new ITaskItem[] { x },
+                SearchPaths = new string[] { "{RawFileName}" },
         };
 
             bool success = Execute(t);
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index b3296d635a0..04d7da07938 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -545,7 +545,6 @@ internal void StopIOMonitoring()
 
             Path.Combine(s_myComponentsRootPath, "V.dll"),
             Path.Combine(s_myComponents2RootPath, "W.dll"),
-            Path.Combine(s_myComponentsRootPath, "DependsOnX.dll"),
             Path.Combine(s_myComponentsRootPath, "X.dll"),
             Path.Combine(s_myComponentsRootPath, "X.pdb"),
             Path.Combine(s_myComponentsRootPath, "Y.dll"),
@@ -1440,7 +1439,7 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "X.pdb"), StringComparison.OrdinalIgnoreCase))
             {
                 // return new AssemblyNameExtension("X, Version=2.0.0.0, Culture=Neutral, PublicKeyToken=null");
-                throw new BadImageReferenceException("Bad Image", null);
+                throw new BadImageFormatException("Bad Image");
             }
 
             if (String.Equals(path, @"C:\Regress714052\X86\a.dll", StringComparison.OrdinalIgnoreCase))
@@ -1493,10 +1492,6 @@ internal static AssemblyNameExtension GetAssemblyName(string path)
             {
                 return new AssemblyNameExtension("W, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null");
             }
-            if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "DependsOnX.dll"), StringComparison.OrdinalIgnoreCase))
-            {
-                return new AssemblyNameExtension("DependsOnX, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null");
-            }
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "X.dll"), StringComparison.OrdinalIgnoreCase))
             {
                 return new AssemblyNameExtension("X, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null");
@@ -2366,14 +2361,6 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
                 return Array.Empty<AssemblyNameExtension>();
             }
 
-            if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "DependsOnX.dll"), StringComparison.OrdinalIgnoreCase))
-            {
-                return new AssemblyNameExtension[]
-                {
-                    new AssemblyNameExtension("X, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null")
-                };
-            }
-
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "X.dll"), StringComparison.OrdinalIgnoreCase))
             {
                 return new AssemblyNameExtension[]
