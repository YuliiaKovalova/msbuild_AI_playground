diff --git a/src/Build.UnitTests/ConsoleOutputAlignerTests.cs b/src/Build.UnitTests/ConsoleOutputAlignerTests.cs
index 7ad602c251b..c2f0e4ceaac 100644
--- a/src/Build.UnitTests/ConsoleOutputAlignerTests.cs
+++ b/src/Build.UnitTests/ConsoleOutputAlignerTests.cs
@@ -140,7 +140,7 @@ public void BiggerThanBufferWithPrefixAlreadyWritten_AlignedWithIndentFromSecond
         [InlineData("a\nb")]
         [InlineData("12345\n54321")]
         [InlineData("\t12345\n\t54321")]
-        public void MultiLineWithoutAlign_NoChange(string input)
+        public void MultiLineWithoutAlign_NotChanged(string input)
         {
             input = input.Replace("\n", Environment.NewLine);
             var aligner = new ConsoleOutputAligner(bufferWidth: 4, alignMessages: false);
@@ -150,6 +150,20 @@ public void MultiLineWithoutAlign_NoChange(string input)
             output.ShouldBe(input + Environment.NewLine);
         }
 
+        [Theory]
+        [InlineData("a\n\rb")]
+        [InlineData("a\rb")]
+        [InlineData("\n\ra")]
+        [InlineData("\ra")]
+        [InlineData("a\nb\n\r")]
+        [InlineData("a\nb\r")]
+        public void NonStandardNewLines_DoNotCrash(string input)
+        {
+            var aligner = new ConsoleOutputAligner(bufferWidth: 10, alignMessages: false);
+
+            string _ = aligner.AlignConsoleOutput(message: input, prefixAlreadyWritten: true, prefixWidth: 0);
+        }
+
         [Theory]
         [InlineData("a\nb")]
         [InlineData("123456789\n987654321")]
diff --git a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
index ae177e01714..c2e11d3b669 100644
--- a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
+++ b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
@@ -51,29 +51,22 @@ public string AlignConsoleOutput(string message, bool prefixAlreadyWritten, int
         {
             int i = 0;
             int j = message.IndexOfAny(MSBuildConstants.CrLf);
-            try
-            {
-                StringBuilder sb = _reusedStringBuilder;
-                Debug.Assert(sb.Length == 0, "Something else is using _reusedStringBuilder. Please make sure this instance method is not called concurrently.");
-                sb.Length = 0;
-                // The string contains new lines, treat each new line as a different string to format and send to the console
-                while (j >= 0)
-                {
-                    AlignAndIndentLineOfMessage(sb, prefixAlreadyWritten, prefixWidth, message, i, j - i);
-                    i = j + (message[j] == '\r' ? 2 : 1);
-                    j = i < message.Length ? message.IndexOfAny(MSBuildConstants.CrLf, i) : -1;
-                }
-
-                // Process rest of message
-                AlignAndIndentLineOfMessage(sb, prefixAlreadyWritten, prefixWidth, message, i, message.Length - i);
 
-                return sb.ToString();
-            }
-            finally
+            StringBuilder sb = _reusedStringBuilder;
+            Debug.Assert(sb.Length == 0, "Something else is using _reusedStringBuilder. Please make sure this instance method is not called concurrently.");
+            sb.Length = 0;
+            // The string contains new lines, treat each new line as a different string to format and send to the console
+            while (j >= 0)
             {
-                // prepare for reuse
-                _reusedStringBuilder.Length = 0;
+                AlignAndIndentLineOfMessage(sb, prefixAlreadyWritten, prefixWidth, message, i, j - i);
+                i = j + (message[j] == '\r' && (j + 1) < message.Length && message[j + 1] == '\n' ? 2 : 1);
+                j = i < message.Length ? message.IndexOfAny(MSBuildConstants.CrLf, i) : -1;
             }
+
+            // Process rest of message
+            AlignAndIndentLineOfMessage(sb, prefixAlreadyWritten, prefixWidth, message, i, message.Length - i);
+
+            return sb.ToString();
         }
 
         /// <summary>
