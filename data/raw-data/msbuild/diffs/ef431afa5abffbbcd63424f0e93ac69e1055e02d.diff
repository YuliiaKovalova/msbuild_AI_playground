diff --git a/Directory.Build.props b/Directory.Build.props
index b0454aa3564..d9e3ec92d8d 100644
--- a/Directory.Build.props
+++ b/Directory.Build.props
@@ -57,7 +57,7 @@
         RS0016 & RS0017: Roslyn analyzers seem to be bugged, claiming that API's that exist don't and vise-versa: https://github.com/dotnet/msbuild/issues/7903
     -->
 
-    <NoWarn>$(NoWarn);NU1507;NU1603;NU5105;1701;1702;SYSLIB0011;SYSLIB0037;SYSLIB0044;RS0016;RS0017;</NoWarn>
+    <NoWarn>$(NoWarn);NU1507;NU1603;NU1605;NU5105;NU5100;NU1701;1702;SYSLIB0011;SYSLIB0037;SYSLIB0044;RS0016;RS0017;</NoWarn>
     <!-- Loading certificate data through the constructor or Import is obsolete. Use X509CertificateLoader instead to load certific
 ates https://learn.microsoft.com/en-gb/dotnet/fundamentals/syslib-diagnostics/syslib0057 -->
     <NoWarn>$(NoWarn);SYSLIB0057;</NoWarn>
diff --git a/NuGet.config b/NuGet.config
index 107cd4542dc..620a031ac09 100644
--- a/NuGet.config
+++ b/NuGet.config
@@ -1,4 +1,4 @@
-<?xml version="1.0" encoding="utf-8"?>
+﻿<?xml version="1.0" encoding="utf-8"?>
 <configuration>
   <packageSources>
     <clear />
@@ -13,6 +13,39 @@
     <add key="dotnet8" value="https://dnceng.pkgs.visualstudio.com/public/_packaging/dotnet8/nuget/v3/index.json" />
     <add key="dotnet8-transport" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8-transport/nuget/v3/index.json" />
     <add key="dotnet9" value="https://dnceng.pkgs.visualstudio.com/public/_packaging/dotnet9/nuget/v3/index.json" />
+    <add key="vs-impl" value="https://pkgs.dev.azure.com/azure-public/vside/_packaging/vs-impl/nuget/v3/index.json" />
+    <add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" />
+
+    <packageSourceMapping>
+      <packageSource key="arcade">
+        <package pattern="*" />
+      </packageSource>
+      <packageSource key="dotnet-public">
+        <package pattern="*" />
+      </packageSource>
+      <packageSource key="dotnet-tools">
+        <package pattern="*" />
+      </packageSource>
+      <packageSource key="dotnet6">
+        <package pattern="*" />
+      </packageSource>
+      <packageSource key="dotnet8">
+        <package pattern="*" />
+      </packageSource>
+      <packageSource key="dotnet8-transport">
+        <package pattern="*" />
+      </packageSource>
+      <packageSource key="dotnet9">
+        <package pattern="*" />
+      </packageSource>
+      <packageSource key="vs-impl">
+        <package pattern="*" />
+      </packageSource>
+      <packageSource key="nuget.org">
+        <package pattern="OpenTelem*" />
+        <package pattern="System.Diagnostics.DiagnosticSource" />
+      </packageSource>
+    </packageSourceMapping>
   </packageSources>
   <disabledPackageSources>
     <!--Begin: Package sources managed by Dependency Flow automation. Do not edit the sources below.-->
diff --git a/eng/Packages.props b/eng/Packages.props
index 87cf3b78909..60e5a74f9fc 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -33,5 +33,12 @@
     <PackageVersion Include="System.Threading.Channels" Version="$(SystemThreadingChannelsVersion)" />
     <PackageVersion Include="System.Threading.Tasks.Dataflow" Version="$(SystemThreadingTasksDataflowVersion)" />
     <PackageVersion Include="xunit.console" Version="$(XUnitVersion)" />
+    <PackageVersion Include="Microsoft.VisualStudio.OpenTelemetry.Collector" Version="0.1.700-beta" />
+    <PackageVersion Include="Microsoft.VisualStudio.OpenTelemetry.ClientExtensions" Version="0.1.700-beta" />
+    <PackageVersion Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.9.0" />
+    <PackageVersion Include="OpenTelemetry.Exporter.Console" Version="1.9.0" />
+    <PackageVersion Include="OpenTelemetry" Version="1.9.0" />
+    <PackageVersion Include="System.Diagnostics.DiagnosticSource" Version="8.0.1" />
+
   </ItemGroup>
 </Project>
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 4ee166bb5e2..4d069ee41c8 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -40,6 +40,11 @@
 using ForwardingLoggerRecord = Microsoft.Build.Logging.ForwardingLoggerRecord;
 using LoggerDescription = Microsoft.Build.Logging.LoggerDescription;
 
+#if NETFRAMEWORK
+using static Microsoft.Extensions.Logging.LoggerExtensions;
+using ExtILogger = Microsoft.Extensions.Logging.ILogger;
+#endif
+
 namespace Microsoft.Build.Execution
 {
     /// <summary>
@@ -492,6 +497,13 @@ public void BeginBuild(BuildParameters parameters)
                 parameters.DetailedSummary = true;
                 parameters.LogTaskInputs = true;
             }
+#if NETFRAMEWORK
+            Environment.SetEnvironmentVariable("OTEL_EXPORTER_OTLP_ENDPOINT", "http://localhost:4317");
+            Environment.SetEnvironmentVariable("OTEL_SERVICE_NAME", "MSBuild");
+            FrameworkTelemetry.Enable();
+            var a = TelemetryHelpers.StartActivity("BeginBuild", new Dictionary<string, object> { { "feature_flag.IsBuildCheckEnabled", parameters.IsBuildCheckEnabled } });
+            a.Dispose();
+#endif
 
             lock (_syncLock)
             {
@@ -1029,6 +1041,7 @@ public void EndBuild()
             {
                 try
                 {
+                    object TelemetryService = new();
                     ILoggingService? loggingService = ((IBuildComponentHost)this).LoggingService;
 
                     if (loggingService != null)
@@ -1069,8 +1082,13 @@ public void EndBuild()
                             var sacState = NativeMethodsShared.GetSACState();
                             // The Enforcement would lead to build crash - but let's have the check for completeness sake.
                             _buildTelemetry.SACEnabled = sacState == NativeMethodsShared.SAC_State.Evaluation || sacState == NativeMethodsShared.SAC_State.Enforcement;
-
+                            Debugger.Launch();
                             loggingService.LogTelemetry(buildEventContext: null, _buildTelemetry.EventName, _buildTelemetry.GetProperties());
+#if NETFRAMEWORK
+                            // var telemetryActivity = TelemetryHelpers.StartActivity("endbuild");
+                            FrameworkTelemetry.EndOfBuildTelemetry(_buildTelemetry);
+                            // telemetryActivity.Dispose();
+#endif
                             // Clean telemetry to make it ready for next build submission.
                             _buildTelemetry = null;
                         }
diff --git a/src/Framework/Microsoft.Build.Framework.csproj b/src/Framework/Microsoft.Build.Framework.csproj
index 736cccac2f1..7afa0e527f9 100644
--- a/src/Framework/Microsoft.Build.Framework.csproj
+++ b/src/Framework/Microsoft.Build.Framework.csproj
@@ -43,6 +43,20 @@
       <Link>Shared\IMSBuildElementLocation.cs</Link>
     </Compile>
   </ItemGroup>
+  
+  <ItemGroup>
+    <Compile Remove="Telemetry\FrameworkTelemetry.cs" />
+  </ItemGroup>
+
+  <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
+    <PackageReference Include="Microsoft.VisualStudio.OpenTelemetry.Collector" />
+    <PackageReference Include="Microsoft.VisualStudio.OpenTelemetry.ClientExtensions" />
+    <PackageReference Include="OpenTelemetry" />
+    <PackageReference Include="OpenTelemetry.Exporter.Console" />
+    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" />
+    <PackageReference Include="System.Diagnostics.DiagnosticSource" />
+    <Compile Include="Telemetry\FrameworkTelemetry.cs"/>
+  </ItemGroup>
 
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' != '.NETFramework'">
     <Compile Remove="XamlTypes\**" />
diff --git a/src/Framework/Telemetry/FrameworkTelemetry.cs b/src/Framework/Telemetry/FrameworkTelemetry.cs
new file mode 100644
index 00000000000..e0157fba200
--- /dev/null
+++ b/src/Framework/Telemetry/FrameworkTelemetry.cs
@@ -0,0 +1,174 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+#if NETFRAMEWORK
+using System;
+using System.Collections.Generic;
+using System.Diagnostics;
+using System.Linq;
+using System.Runtime.CompilerServices;
+using System.Threading;
+using Microsoft.Extensions.Logging;
+using Microsoft.VisualStudio.OpenTelemetry.ClientExtensions;
+using Microsoft.VisualStudio.OpenTelemetry.ClientExtensions.Exporters;
+using Microsoft.VisualStudio.OpenTelemetry.Collector.Interfaces;
+using Microsoft.VisualStudio.OpenTelemetry.Collector.Settings;
+
+using OpenTelemetry;
+using OpenTelemetry.Logs;
+using OpenTelemetry.Metrics;
+using OpenTelemetry.Trace;
+
+namespace Microsoft.Build.Framework.Telemetry
+{
+    /// <summary>
+    /// A static class to instrument telemetry via OpenTelemetry.
+    /// </summary>
+    public static class FrameworkTelemetry
+    {
+
+        private const string OTelNamespace = "Microsoft.VisualStudio.OpenTelemetry.MSBuild";
+        private const string vsMajorVersion = "17.0";
+        private static IOpenTelemetryCollector? collector;
+        private static TracerProvider? tracerProvider;
+        private static MeterProvider? meterProvider;
+
+        private static bool isInitialized;
+        // private static ILoggerFactory? loggerFactory;
+        public static Microsoft.Extensions.Logging.ILogger? logger;
+
+
+        /// <summary>
+        /// Gets an <see cref="ActivitySource"/> that is configured to create <see cref="Activity"/> objects
+        /// that can get reported as a VS telemetry event when disposed.
+        /// </summary>
+        internal static MSBuildActivitySourceWrapper DefaultTelemetrySource { get; } = new();
+
+        /// <summary>
+        /// Configures the <see cref="DefaultTelemetrySource"/> to send telemetry through the Open Telemetry pipeline.
+        /// </summary>
+        /// <remarks>
+        /// This should get called once at the start of the process. Subsequent calls are no-ops.
+        /// If this is not called, then <see cref="Activity"/> objects created from <see cref="DefaultTelemetrySource"/> will always be <see langword="null"/>.
+        /// </remarks>
+        [MethodImpl(MethodImplOptions.NoInlining)]
+        public static void Enable()
+        {
+            // this relies on single thread being here
+            if (isInitialized)
+            {
+                return;
+            }
+
+            isInitialized = true;
+
+            IOpenTelemetryExporterSettings defaultExporterSettings = OpenTelemetryExporterSettingsBuilder
+                .CreateVSDefault(vsMajorVersion)
+                .Build();
+            IOpenTelemetryCollectorSettings collectorSettings = OpenTelemetryCollectorSettingsBuilder
+                .CreateVSDefault(vsMajorVersion)
+                .Build();
+
+            using ILoggerFactory factory = LoggerFactory.Create(builder => { builder.AddOpenTelemetry(logging => { logging.AddVisualStudioDefaultLogExporter(defaultExporterSettings); logging.AddOtlpExporter(); }); });
+
+            tracerProvider = Sdk.CreateTracerProviderBuilder()
+                .AddVisualStudioDefaultTraceExporter(defaultExporterSettings)
+                .AddOtlpExporter()
+                .Build();
+            logger = factory.CreateLogger(OTelNamespace);
+
+            meterProvider = Sdk.CreateMeterProviderBuilder()
+                .AddVisualStudioDefaultMetricExporter(defaultExporterSettings)
+                .Build();
+
+            collector = OpenTelemetryCollectorProvider.CreateCollector(collectorSettings);
+            collector.StartAsync();
+        }
+
+        private const string SamplePropertyPrefix = "VS.MSBuild.Event.";
+        internal static void EndOfBuildTelemetry(BuildTelemetry buildTelemetry)
+        {
+            Enable();
+#pragma warning disable CS8604 // Possible null reference argument.
+            using var telemetryActivity = TelemetryHelpers.StartActivity("build", initialProperties: new
+                 Dictionary<string, object>
+                {
+                    { "StartAt", buildTelemetry.StartAt?.ToString() },
+                    { "InnerStartAt", buildTelemetry.InnerStartAt?.ToString() },
+                    { "FinishedAt", buildTelemetry.FinishedAt?.ToString() },
+                    { "Success", buildTelemetry.Success },
+                    { "Target", buildTelemetry.Target },
+                    { "ServerFallbackReason", buildTelemetry.ServerFallbackReason },
+                    { "Version", buildTelemetry.Version?.ToString() },
+                    { "DisplayVersion", buildTelemetry.DisplayVersion },
+                    { "SAC", buildTelemetry.SACEnabled },
+                    { "BuildCheckEnabled", buildTelemetry.BuildCheckEnabled },
+                });
+#pragma warning restore CS8604 // Possible null reference argument.
+            telemetryActivity.AddBaggage("baggage", "hey");
+            telemetryActivity.AddEvent(new ActivityEvent("hey2"));
+            telemetryActivity.AddEvent(new ActivityEvent(OTelNamespace + "hey3"));
+            telemetryActivity.SetStartTime(buildTelemetry.StartAt ?? DateTime.UtcNow);
+            telemetryActivity.Stop();
+            telemetryActivity.SetEndTime(buildTelemetry.FinishedAt ?? DateTime.UtcNow);
+            telemetryActivity.SetCustomProperty(SamplePropertyPrefix + "hey", "hello");
+            telemetryActivity.Dispose();
+        }
+
+        internal class MSBuildActivitySourceWrapper
+        {
+            private const string OTelNamespace = "Microsoft.VisualStudio.OpenTelemetry.MSBuild";
+            internal MSBuildActivitySourceWrapper()
+            {
+                Source = new ActivitySource(OTelNamespace, vsMajorVersion);
+            }
+            public ActivitySource Source { get; }
+
+            public string Name => Source.Name;
+
+            public string? Version => Source.Version;
+
+
+            public Activity StartActivity(string name = "", ActivityKind kind = ActivityKind.Internal)
+            {
+                // If the current activity has a remote parent, then we should start a child activity with the same parent ID.
+                Activity? activity = Activity.Current?.HasRemoteParent is true
+                    ? Source.StartActivity(name, kind, parentId: Activity.Current.ParentId)
+                    : Source.StartActivity(name);
+
+                if (activity is null)
+                {
+                    activity = new Activity(name);
+                    activity.Start();
+                }
+
+                return activity;
+            }
+        }
+    }
+    public static class TelemetryHelpers
+    {
+
+        private const string EventPrefix = "VS/MSBuild/Event/";
+        public static Activity StartActivity(string name, IDictionary<string, object> initialProperties)
+        {
+            return FrameworkTelemetry.DefaultTelemetrySource
+                .StartActivity(EventPrefix + name, ActivityKind.Internal)
+                .WithTags(initialProperties);
+        }
+        public static Activity WithTags(this Activity activity, IDictionary<string, object> tags)
+        {
+            if (tags is null)
+            {
+                return activity;
+            }
+
+            foreach (KeyValuePair<string, object> tag in tags)
+            {
+                activity.SetTag(tag.Key, tag.Value);
+            }
+
+            return activity;
+        }
+    }
+}
+#endif
diff --git a/src/MSBuild/app.config b/src/MSBuild/app.config
index 9bc9a4c595c..063d1f715c5 100644
--- a/src/MSBuild/app.config
+++ b/src/MSBuild/app.config
@@ -60,6 +60,14 @@
           <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-4.0.1.2" newVersion="4.0.1.2" />
         </dependentAssembly>
+        <dependentAssembly>
+          <assemblyIdentity name="System.Diagnostics.DiagnosticSource" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
+          <bindingRedirect oldVersion="0.0.0.0-8.0.0.1" newVersion="8.0.0.1" />
+        </dependentAssembly>
+        <dependentAssembly>
+          <assemblyIdentity name="Microsoft.Extensions.Configuration.Binder" publicKeyToken="adb9793829ddae60" culture="neutral" />
+          <bindingRedirect oldVersion="0.0.0.0-8.0.0.1" newVersion="8.0.0.1" />
+        </dependentAssembly>
         <dependentAssembly>
           <assemblyIdentity name="System.Numerics.Vectors" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
           <bindingRedirect oldVersion="0.0.0.0-4.1.4.0" newVersion="4.1.4.0" />
