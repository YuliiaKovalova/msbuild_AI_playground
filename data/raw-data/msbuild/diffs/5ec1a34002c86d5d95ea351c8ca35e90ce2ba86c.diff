diff --git a/.vsts-dotnet-ci.yml b/.vsts-dotnet-ci.yml
index 4573c77f6b9..8ff78b900be 100644
--- a/.vsts-dotnet-ci.yml
+++ b/.vsts-dotnet-ci.yml
@@ -233,4 +233,4 @@ jobs:
   parameters:
     platform:
       name: 'Managed'
-      container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'
+      container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7'
diff --git a/.vsts-dotnet.yml b/.vsts-dotnet.yml
index 2c9dd15416b..209e287bb6d 100644
--- a/.vsts-dotnet.yml
+++ b/.vsts-dotnet.yml
@@ -39,6 +39,8 @@ variables:
     value: .NETCore
   - name: _DotNetValidationArtifactsCategory
     value: .NETCoreValidation
+  - name: Codeql.Enabled
+    value: true
 
 stages:
 - stage: build
@@ -251,7 +253,7 @@ stages:
     parameters:
       platform:
         name: 'Managed'
-        container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343'
+        container: 'mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7'
 
   - template: /eng/common/templates/job/publish-build-assets.yml
     parameters:
diff --git a/README.md b/README.md
index 343c9d9c866..690fc1608a1 100644
--- a/README.md
+++ b/README.md
@@ -8,13 +8,13 @@ The [changelog](documentation/Changelog.md) has detailed information about chang
 
 ### Build Status
 
-The current development branch is `main`. Changes in `main` will go into a future update of MSBuild, which will release with Visual Studio 17.4 and a corresponding version of the .NET Core SDK.
+The current development branch is `main`. Changes in `main` will go into a future update of MSBuild, which will release with Visual Studio 17.5 and a corresponding version of the .NET Core SDK.
 
 [![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=main)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=main)
 
-We have forked for MSBuild 17.3 in the branch [`vs17.3`](https://github.com/Microsoft/msbuild/tree/vs17.3). Changes to that branch need special approval.
+We have forked for MSBuild 17.4 in the branch [`vs17.4`](https://github.com/Microsoft/msbuild/tree/vs17.4). Changes to that branch need special approval.
 
-[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs17.3)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs17.3)
+[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs17.4)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs17.4)
 
 17.2 builds from the branch [`vs17.2`](https://github.com/Microsoft/msbuild/tree/vs17.2). Only high-priority bugfixes will be considered for servicing 17.2.
 
@@ -28,10 +28,6 @@ We have forked for MSBuild 17.3 in the branch [`vs17.3`](https://github.com/Micr
 
 [![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.11)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs16.11)
 
-MSBuild 16.9 builds from the branch [`vs16.9`](https://github.com/dotnet/msbuild/tree/vs16.9). Only very-high-priority bugfixes will be considered for servicing 16.9.
-
-[![Build Status](https://dev.azure.com/dnceng/public/_apis/build/status/Microsoft/msbuild/msbuild-pr?branchName=vs16.9)](https://dev.azure.com/dnceng/public/_build/latest?definitionId=887&branchName=vs16.9)
-
 MSBuild 15.9 builds from the branch [`vs15.9`](https://github.com/dotnet/msbuild/tree/vs15.9). Only very-high-priority bugfixes will be considered for servicing 15.9.
 
 ## Building
@@ -45,11 +41,12 @@ To get started on **Visual Studio 2022**:
 1. [Install Visual Studio 2022](https://www.visualstudio.com/vs/).  Select the following Workloads:
   - .NET desktop development
   - .NET Core cross-platform development
-2. Open a `Developer Command Prompt for VS 2022` prompt.
-3. Clone the source code: `git clone https://github.com/dotnet/msbuild`
+2. Ensure [long path support](https://learn.microsoft.com/windows/win32/fileio/maximum-file-path-limitation?tabs=registry#enable-long-paths-in-windows-10-version-1607-and-later) is enabled at the Windows level.
+3. Open a `Developer Command Prompt for VS 2022` prompt.
+4. Clone the source code: `git clone https://github.com/dotnet/msbuild`
   - You may have to [download Git](https://git-scm.com/downloads) first.
-4. Run `.\build.cmd` from the root of the repo to build the code. This also restores packages needed to open the projects in Visual Studio.
-5. Open `MSBuild.sln` or `MSBuild.Dev.slnf` in Visual Studio 2022.
+5. Run `.\build.cmd` from the root of the repo to build the code. This also restores packages needed to open the projects in Visual Studio.
+6. Open `MSBuild.sln` or `MSBuild.Dev.slnf` in Visual Studio 2022.
 
 Note: To create a usable MSBuild with your changes, run `.\build.cmd /p:CreateBootstrap=true`.
 To build release, add `-c Release`: `.\build.cmd -c Release /p:CreateBootstrap=true`.
@@ -73,7 +70,7 @@ Before you contribute, please read through the contributing and developer guides
    - [Full Framework](documentation/wiki/Building-Testing-and-Debugging-on-Full-Framework-MSBuild.md)
    - [Mono](documentation/wiki/Building-Testing-and-Debugging-on-Mono-MSBuild.md)
 
-* See our [up for grabs issues](https://github.com/Microsoft/msbuild/issues?q=is%3Aopen+is%3Aissue+label%3Aup-for-grabs) for a list of issues we think are great to onboard new developers.
+* See our [help wanted issues](https://github.com/dotnet/msbuild/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22) for a list of issues we think are great to onboard new developers.
    - **Note:** Please leave a comment asking to be assigned the issue if you want to work on it.
 * See our [label documentation](documentation/wiki/Labels.md) for descriptions of labels we use throughout the repo.
 
diff --git a/documentation/wiki/ChangeWaves.md b/documentation/wiki/ChangeWaves.md
index 727b5ec915c..29b2352c349 100644
--- a/documentation/wiki/ChangeWaves.md
+++ b/documentation/wiki/ChangeWaves.md
@@ -23,10 +23,14 @@ A wave of features is set to "rotate out" (i.e. become standard functionality) t
 
 ## Current Rotation of Change Waves
 
+### 17.6
+- [Eliminate project string cache](https://github.com/dotnet/msbuild/pull/7965)
+
 ### 17.4
 - [Respect deps.json when loading assemblies](https://github.com/dotnet/msbuild/pull/7520)
 - [Consider `Platform` as default during Platform Negotiation](https://github.com/dotnet/msbuild/pull/7511)
 - [Adding accepted SDK name match pattern to SDK manifests](https://github.com/dotnet/msbuild/pull/7597)
+- [Throw warning indicating invalid project types](https://github.com/dotnet/msbuild/pull/7708)
 - [MSBuild server](https://github.com/dotnet/msbuild/pull/7634)
 
 ### 17.0
diff --git a/documentation/wiki/Labels.md b/documentation/wiki/Labels.md
index 7f65e10ad9b..0ede6a53483 100644
--- a/documentation/wiki/Labels.md
+++ b/documentation/wiki/Labels.md
@@ -9,4 +9,4 @@ Here's a brief explanation on the labels most often used by the MSBuild team exc
 | `initial-investigation` | A member of the team does a "first pass" investigation. | `needs-triage` is applied and team member and unassigns themselves after the initial investigation is complete. |
 | `stale` | An issue marked with `needs-more-info` is inactive for 7 days. | The issue will be closed after 30 days of inactivity while the `stale` label is applied. |
 | `For consideration` | An issue should get higher prioritization when planning the next set of features. | |
-| `up-for-grabs` | Anyone can take ownership over this issue. | If a contributor wants to take the issue on, they should ask that it be assigned to them BEFORE doing development work.  |
+| `help wanted` | Anyone can take ownership over this issue. | If a contributor wants to take the issue on, they should ask that it be assigned to them BEFORE doing development work.  |
diff --git a/eng/Packages.props b/eng/Packages.props
index 47af99de0a9..bce1a6ee70a 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -18,8 +18,8 @@
     <PackageReference Update="NuGet.Frameworks" Version="$(NuGetBuildTasksVersion)" />
     <PackageReference Update="System.Collections.Immutable" Version="$(SystemCollectionsImmutableVersion)" />
     <PackageReference Update="System.Configuration.ConfigurationManager" Version="$(SystemConfigurationConfigurationManagerVersion)" />
-    <PackageReference Update="System.Net.Http" Version="$(SystemNetHttpVersion)" />
     <PackageReference Update="System.Memory" Version="$(SystemMemoryVersion)" />
+    <PackageReference Update="System.Net.Http" Version="$(SystemNetHttpVersion)" />
     <PackageReference Update="System.Reflection.Metadata" Version="$(SystemReflectionMetadataVersion)" />
     <PackageReference Update="System.Reflection.MetadataLoadContext" Version="$(SystemReflectionMetadataLoadContextVersion)" />
     <PackageReference Update="System.Resources.Extensions" Version="$(SystemResourcesExtensionsPackageVersion)" />
diff --git a/eng/Version.Details.xml b/eng/Version.Details.xml
index b6bd8566cd0..70a03422fa5 100644
--- a/eng/Version.Details.xml
+++ b/eng/Version.Details.xml
@@ -6,9 +6,9 @@
       <Sha>6812704fe5a1baead5da5c1c8bf723752ab728b5</Sha>
       <SourceBuild RepoName="arcade" ManagedOnly="true" />
     </Dependency>
-    <Dependency Name="NuGet.Build.Tasks" Version="6.4.0-preview.3.74">
+    <Dependency Name="NuGet.Build.Tasks" Version="6.4.0-preview.3.107">
       <Uri>https://github.com/nuget/nuget.client</Uri>
-      <Sha>d22c6743bf6237c39b98d5d680e06e6c33e97f1c</Sha>
+      <Sha>1a082949ae5b6da7ca2cce047396c53ae1afdde7</Sha>
     </Dependency>
     <Dependency Name="Microsoft.Net.Compilers.Toolset" Version="4.4.0-2.22458.3">
       <Uri>https://github.com/dotnet/roslyn</Uri>
diff --git a/eng/Versions.props b/eng/Versions.props
index 4a1cb49f9cb..0329938655f 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -2,7 +2,7 @@
 <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->
 <Project>
   <PropertyGroup>
-    <VersionPrefix>17.4.0</VersionPrefix>
+    <VersionPrefix>17.5.0</VersionPrefix>
     <AssemblyVersion>15.1.0.0</AssemblyVersion>
     <PreReleaseVersionLabel>preview</PreReleaseVersionLabel>
     <DotNetUseShippingVersions>true</DotNetUseShippingVersions>
@@ -27,6 +27,11 @@
   <PropertyGroup>
     <SystemCollectionsImmutableVersion>6.0.0</SystemCollectionsImmutableVersion>
     <SystemConfigurationConfigurationManagerVersion>6.0.0</SystemConfigurationConfigurationManagerVersion>
+    <!-- 
+        Modifying the version of System.Memory is very high impact and causes downstream breaks in third-party tooling that uses the MSBuild API.
+        When updating the version of System.Memory file a breaking change here: https://github.com/dotnet/docs/issues/new?assignees=gewarren&labels=breaking-change%2CPri1%2Cdoc-idea&template=breaking-change.yml&title=%5BBreaking+change%5D%3A+ 
+        and follow the guidelines written here (internal-link): https://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/1796/How-to-add-a-Known-Issue
+    -->
     <SystemMemoryVersion>4.5.5</SystemMemoryVersion>
     <SystemNetHttpVersion>4.3.4</SystemNetHttpVersion>
     <SystemReflectionMetadataLoadContextVersion>6.0.0</SystemReflectionMetadataLoadContextVersion>
@@ -46,7 +51,7 @@
     <MicrosoftExtensionsDependencyModelVersion>6.0.0-preview.2.21154.6</MicrosoftExtensionsDependencyModelVersion>
     <MicrosoftIORedistVersion>6.0.0</MicrosoftIORedistVersion>
     <MicrosoftNetCompilersToolsetVersion>4.4.0-2.22458.3</MicrosoftNetCompilersToolsetVersion>
-    <NuGetBuildTasksVersion>6.4.0-preview.3.74</NuGetBuildTasksVersion>
+    <NuGetBuildTasksVersion>6.4.0-preview.3.107</NuGetBuildTasksVersion>
     <SystemRuntimeCompilerServicesUnsafeVersion>6.0.0</SystemRuntimeCompilerServicesUnsafeVersion>
     <SystemTextJsonVersion>6.0.0</SystemTextJsonVersion>
     <SystemThreadingTasksDataflowVersion>6.0.0</SystemThreadingTasksDataflowVersion>
diff --git a/global.json b/global.json
index 2b4212cde00..7cd88120047 100644
--- a/global.json
+++ b/global.json
@@ -3,11 +3,11 @@
     "allowPrerelease": true
   },
   "tools": {
-    "dotnet": "7.0.100-rc.1.22431.12",
+    "dotnet": "7.0.100-rc.2.22477.23",
     "vs": {
-      "version": "17.2.1"
+      "version": "17.3.1"
     },
-    "xcopy-msbuild": "17.2.1"
+    "xcopy-msbuild": "17.3.1"
   },
   "msbuild-sdks": {
     "Microsoft.Build.CentralPackageVersions": "2.0.1",
diff --git a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
index ba0defea01b..7cbbae8a85a 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
@@ -21,6 +21,7 @@
 using ProjectCollection = Microsoft.Build.Evaluation.ProjectCollection;
 using Shouldly;
 using Xunit;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
@@ -1853,6 +1854,10 @@ public void ReloadCanOverwriteUnsavedChanges()
         public void ReloadDoesNotLeakCachedXmlDocuments()
         {
             using var env = TestEnvironment.Create();
+            ChangeWaves.ResetStateForTests();
+            env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_6.ToString());
+            BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+
             var testFiles = env.CreateTestProjectWithFiles("", new[] { "build.proj" });
             var projectFile = testFiles.CreatedFiles.First();
 
diff --git a/src/Build.OM.UnitTests/Definition/Project_Tests.cs b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
index 4d856fb153d..beb78eec2ae 100644
--- a/src/Build.OM.UnitTests/Definition/Project_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
@@ -654,9 +654,7 @@ public void TransformsUseCorrectDirectory_Basic()
                 project.ReevaluateIfNecessary();
 
                 project.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(
-                    NativeMethodsShared.IsWindows
-                        ? Path.Combine(Path.GetTempPath(), @"obj\i386\foo.dll")
-                        : Path.Combine(Path.GetTempPath(), @"obj/i386/foo.dll"));
+                        Path.Combine(FileUtilities.TempFileDirectory, "obj", "i386", "foo.dll"));
             }
             finally
             {
@@ -721,8 +719,8 @@ public void TransformsUseCorrectDirectory_DirectoryTransform()
                 Project project = new Project(xml);
                 ProjectInstance projectInstance = new ProjectInstance(xml);
 
-                project.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(Path.Combine(Path.GetTempPath(), "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar);
-                projectInstance.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(Path.Combine(Path.GetTempPath(), "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar);
+                project.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(Path.Combine(FileUtilities.TempFileDirectory, "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar);
+                projectInstance.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(Path.Combine(FileUtilities.TempFileDirectory, "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar);
             }
             finally
             {
@@ -756,8 +754,8 @@ public void TransformsUseCorrectDirectory_DirectoryItemFunction()
                 Project project = new Project(xml);
                 ProjectInstance projectInstance = new ProjectInstance(xml);
 
-                project.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(Path.Combine(Path.GetTempPath(), "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar);
-                projectInstance.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(Path.Combine(Path.GetTempPath(), "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar);
+                project.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(Path.Combine(FileUtilities.TempFileDirectory, "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar);
+                projectInstance.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(Path.Combine(FileUtilities.TempFileDirectory, "obj", "i386").Substring(RootPrefixLength) + Path.DirectorySeparatorChar);
             }
             finally
             {
@@ -794,8 +792,8 @@ public void TransformsUseCorrectDirectory_DirectoryNameItemFunction()
                 ProjectInstance projectInstance = new ProjectInstance(xml);
 
                 // Should be the full path to the directory
-                project.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(Path.Combine(Path.GetTempPath() /* remove c:\ */, "obj" + Path.DirectorySeparatorChar + "i386"));
-                projectInstance.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(Path.Combine(Path.GetTempPath() /* remove c:\ */, "obj" + Path.DirectorySeparatorChar + "i386"));
+                project.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(Path.Combine(FileUtilities.TempFileDirectory /* remove c:\ */, "obj" + Path.DirectorySeparatorChar + "i386"));
+                projectInstance.GetItems("BuiltProjectOutputGroupKeyOutput").First().EvaluatedInclude.ShouldBe(Path.Combine(FileUtilities.TempFileDirectory /* remove c:\ */, "obj" + Path.DirectorySeparatorChar + "i386"));
             }
             finally
             {
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
index 7d42cfe8206..12fbe5d15d9 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
@@ -476,6 +476,7 @@ public void TestCache2()
                 Environment.SetEnvironmentVariable("TEMP", problematicTmpPath);
 
                 FileUtilities.ClearCacheDirectoryPath();
+                FileUtilities.ClearTempFileDirectory();
                 string cacheFilePath = configuration.GetCacheFile();
                 Assert.StartsWith(problematicTmpPath, cacheFilePath);
             }
@@ -484,6 +485,7 @@ public void TestCache2()
                 Environment.SetEnvironmentVariable("TMP", originalTmp);
                 Environment.SetEnvironmentVariable("TEMP", originalTemp);
                 FileUtilities.ClearCacheDirectoryPath();
+                FileUtilities.ClearTempFileDirectory();
             }
         }
 
diff --git a/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs b/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
index 351d86a0d6a..0419a840a6c 100644
--- a/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
+++ b/src/Build.UnitTests/BackEnd/DebugUtils_tests.cs
@@ -24,7 +24,7 @@ public void DumpExceptionToFileShouldWriteInTempPathByDefault()
             try
             {
                 ExceptionHandling.DumpExceptionToFile(new Exception("hello world"));
-                exceptionFiles = Directory.GetFiles(Path.GetTempPath(), "MSBuild_*failure.txt");
+                exceptionFiles = Directory.GetFiles(FileUtilities.TempFileDirectory, "MSBuild_*failure.txt");
             }
             finally
             {
diff --git a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
index 91b75a0cf59..102facdb9fb 100644
--- a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
@@ -990,7 +990,7 @@ private void SimpleSymlinkInputCheck(DateTime symlinkWriteTime, DateTime targetW
                 _testOutputHelper.WriteLine($"Created input file {inputTarget}");
                 File.SetLastWriteTime(inputTarget, targetWriteTime);
 
-                inputSymlink = FileUtilities.GetTemporaryFile(null, ".linkin", createFile: false);
+                inputSymlink = FileUtilities.GetTemporaryFile(null, null, ".linkin", createFile: false);
 
                 if (!CreateSymbolicLink(inputSymlink, inputTarget, 0))
                 {
diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index 3ff983ec264..dcb4529c011 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -274,6 +274,46 @@ public void MessagesCanBeLoggedWhenProjectsAreCached()
                 .OverallResult.ShouldBe(BuildResultCode.Success);
         }
 
+        /// <summary>
+        /// Regression test for https://github.com/dotnet/msbuild/issues/7828
+        /// </summary>
+        /// <remarks>
+        /// This test verifies,
+        /// 1. When binary log and verbosity=diagnostic are both set, the equivalent command line is printed.
+        /// 2. When binary log and non-diag verbosity are set, the equivalent command line is NOT printed.
+        /// </remarks>
+        [Fact]
+        public void SuppressCommandOutputForNonDiagVerbosity()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                var contents = @"
+                    <Project>
+                        <Target Name='Target2'>
+                            <Exec Command='echo a'/>
+                        </Target>
+                    </Project>";
+                BinaryLogger logger = new();
+                logger.Parameters = _logFile;
+                TransientTestFolder testFolder = env.CreateFolder(createFolder: true);
+
+                TransientTestFile projectFile1 = env.CreateFile(testFolder, "testProject01.proj", contents);
+                string consoleOutput1 = RunnerUtilities.ExecMSBuild($"{projectFile1.Path} -bl:{logger.Parameters} -verbosity:diag -nologo", out bool success1);
+                success1.ShouldBeTrue();
+                var expected1 = $"-nologo -bl:{logger.Parameters} -verbosity:diag {projectFile1.Path}";
+                consoleOutput1.ShouldContain(expected1);
+
+                foreach (var verbosity in new string[] { "q", "m", "n", "d" })
+                {
+                    TransientTestFile projectFile2 = env.CreateFile(testFolder, $"testProject_{verbosity}.proj", contents);
+                    string consoleOutput2 = RunnerUtilities.ExecMSBuild($"{projectFile2.Path} -bl:{logger.Parameters} -verbosity:{verbosity} -nologo", out bool success2);
+                    success2.ShouldBeTrue();
+                    var expected2 = $"-nologo -bl:{logger.Parameters} -verbosity:{verbosity} {projectFile2.Path}";
+                    consoleOutput2.ShouldNotContain(expected2);
+                }
+            }
+        }
+
         public void Dispose()
         {
             _env.Dispose();
diff --git a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
index d2ab15a93eb..16c1c196883 100644
--- a/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionFile_Tests.cs
@@ -141,7 +141,7 @@ public void ParseFirstProjectLine_InvalidProject()
         [Fact]
         public void ParseEtpProject()
         {
-            string proj1Path = Path.Combine(Path.GetTempPath(), "someproj.etp");
+            string proj1Path = Path.Combine(FileUtilities.TempFileDirectory, "someproj.etp");
             try
             {
                 // Create the first .etp project file
@@ -192,8 +192,8 @@ public void ParseEtpProject()
         [Fact]
         public void CanBeMSBuildFile()
         {
-            string proj1Path = Path.Combine(Path.GetTempPath(), "someproj.etp");
-            string proj2Path = Path.Combine(Path.GetTempPath(), "someproja.proj");
+            string proj1Path = Path.Combine(FileUtilities.TempFileDirectory, "someproj.etp");
+            string proj2Path = Path.Combine(FileUtilities.TempFileDirectory, "someproja.proj");
             try
             {
                 // Create the first .etp project file
@@ -317,8 +317,8 @@ public void CanBeMSBuildFileRejectsMSBuildLikeFiles()
         [Fact]
         public void ParseNestedEtpProjectSingleLevel()
         {
-            string proj1Path = Path.Combine(Path.GetTempPath(), "someproj.etp");
-            string proj2Path = Path.Combine(Path.GetTempPath(), "someproj2.etp");
+            string proj1Path = Path.Combine(FileUtilities.TempFileDirectory, "someproj.etp");
+            string proj2Path = Path.Combine(FileUtilities.TempFileDirectory, "someproj2.etp");
             try
             {
                 // Create the first .etp project file
@@ -513,9 +513,9 @@ public void TestVSAndSolutionVersionParsing()
         [Trait("Category", "netcore-linux-failing")]
         public void ParseNestedEtpProjectMultipleLevel()
         {
-            string proj1Path = Path.Combine(Path.GetTempPath(), "someproj.etp");
-            string proj2Path = Path.Combine(Path.GetTempPath(), "someproj2.etp");
-            string proj3Path = Path.Combine(Path.GetTempPath(), "ETPProjUpgradeTest", "someproj3.etp");
+            string proj1Path = Path.Combine(FileUtilities.TempFileDirectory, "someproj.etp");
+            string proj2Path = Path.Combine(FileUtilities.TempFileDirectory, "someproj2.etp");
+            string proj3Path = Path.Combine(FileUtilities.TempFileDirectory, "ETPProjUpgradeTest", "someproj3.etp");
             try
             {
                 // Create the first .etp project file
@@ -567,7 +567,7 @@ public void ParseNestedEtpProjectMultipleLevel()
                     </GENERAL>
                 </EFPROJECT>";
                 // Create the directory for the third project
-                Directory.CreateDirectory(Path.Combine(Path.GetTempPath(), "ETPProjUpgradeTest"));
+                Directory.CreateDirectory(Path.Combine(FileUtilities.TempFileDirectory, "ETPProjUpgradeTest"));
                 File.WriteAllText(proj3Path, etpProjContent);
 
                 // Create the SolutionFile object
@@ -602,7 +602,7 @@ public void ParseNestedEtpProjectMultipleLevel()
         [Fact]
         public void MalformedEtpProjFile()
         {
-            string proj1Path = Path.Combine(Path.GetTempPath(), "someproj.etp");
+            string proj1Path = Path.Combine(FileUtilities.TempFileDirectory, "someproj.etp");
             try
             {
                 // Create the .etp project file
diff --git a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
index 780b83ffa0b..6c726a5476d 100644
--- a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
@@ -850,7 +850,7 @@ public void SolutionConfigurationWithDependencies()
   <ProjectConfiguration Project=`{{786E302A-96CE-43DC-B640-D6B6CC9BF6C0}}` AbsolutePath=`##temp##{Path.Combine("Project1", "A.csproj")}` BuildProjectInSolution=`True`>Debug|AnyCPU</ProjectConfiguration>
   <ProjectConfiguration Project=`{{881C1674-4ECA-451D-85B6-D7C59B7F16FA}}` AbsolutePath=`##temp##{Path.Combine("Project2", "B.csproj")}` BuildProjectInSolution=`True`>Debug|AnyCPU<ProjectDependency Project=`{{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}}` /></ProjectConfiguration>
   <ProjectConfiguration Project=`{{4A727FF8-65F2-401E-95AD-7C8BBFBE3167}}` AbsolutePath=`##temp##{Path.Combine("Project3", "C.csproj")}` BuildProjectInSolution=`True`>Debug|AnyCPU</ProjectConfiguration>
-</SolutionConfiguration>".Replace("`", "\"").Replace("##temp##", Path.GetTempPath());
+</SolutionConfiguration>".Replace("`", "\"").Replace("##temp##", FileUtilities.TempFileDirectory);
 
             Helpers.VerifyAssertLineByLine(expected, solutionConfigurationContents);
         }
@@ -1090,14 +1090,14 @@ public void TestAddPropertyGroupForSolutionConfiguration()
             msbuildProject.ReevaluateIfNecessary();
 
             string solutionConfigurationContents = msbuildProject.GetPropertyValue("CurrentSolutionConfigurationContents");
-            string tempProjectPath = Path.Combine(Path.GetTempPath(), "ClassLibrary1", "ClassLibrary1.csproj");
+            string tempProjectPath = Path.Combine(FileUtilities.TempFileDirectory, "ClassLibrary1", "ClassLibrary1.csproj");
 
             Assert.Contains("{6185CC21-BE89-448A-B3C0-D1C27112E595}", solutionConfigurationContents);
             tempProjectPath = Path.GetFullPath(tempProjectPath);
             Assert.True(solutionConfigurationContents.IndexOf(tempProjectPath, StringComparison.OrdinalIgnoreCase) > 0);
             Assert.Contains("CSConfig1|AnyCPU", solutionConfigurationContents);
 
-            tempProjectPath = Path.Combine(Path.GetTempPath(), "MainApp", "MainApp.vcxproj");
+            tempProjectPath = Path.Combine(FileUtilities.TempFileDirectory, "MainApp", "MainApp.vcxproj");
             tempProjectPath = Path.GetFullPath(tempProjectPath);
             Assert.Contains("{A6F99D27-47B9-4EA4-BFC9-25157CBDC281}", solutionConfigurationContents);
             Assert.True(solutionConfigurationContents.IndexOf(tempProjectPath, StringComparison.OrdinalIgnoreCase) > 0);
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index e77a47e5ef4..8501b7297f9 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -3052,7 +3052,7 @@ public void PropertyFunctionStaticMethodEnumArgument()
         [Fact]
         public void PropertyFunctionStaticMethodDirectoryNameOfFileAbove()
         {
-            string tempPath = Path.GetTempPath();
+            string tempPath = FileUtilities.TempFileDirectory;
             string tempFile = Path.GetFileName(FileUtilities.GetTemporaryFile());
 
             try
@@ -3090,7 +3090,7 @@ public void PropertyFunctionStaticMethodGetPathOfFileAbove()
             //
             MockElementLocation mockElementLocation = new MockElementLocation(Path.Combine(ObjectModelHelpers.TempProjectDir, "one", "two", "three", "four", "five", Path.GetRandomFileName()));
 
-            string fileToFind = FileUtilities.GetTemporaryFile(ObjectModelHelpers.TempProjectDir, ".tmp");
+            string fileToFind = FileUtilities.GetTemporaryFile(ObjectModelHelpers.TempProjectDir, null, ".tmp");
 
             try
             {
diff --git a/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs
index ab9bfe05035..397e67fbecc 100644
--- a/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs
@@ -6,6 +6,7 @@
 using System.Xml;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
+using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Xunit;
 
@@ -27,7 +28,13 @@ public class ProjectStringCache_Tests
         [Trait("Category", "netcore-linux-failing")]
         public void ContentIsSameAcrossInstances()
         {
-            string content = ObjectModelHelpers.CleanupFileContents(@"
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                ChangeWaves.ResetStateForTests();
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_6.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+
+                string content = ObjectModelHelpers.CleanupFileContents(@"
                     <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
                         <ItemGroup>
                            Item group content
@@ -35,38 +42,39 @@ Item group content
                     </Project>
                     ");
 
-            string path = FileUtilities.GetTemporaryFile();
+                string path = FileUtilities.GetTemporaryFile();
 
-            try
-            {
-                File.WriteAllText(path, content);
+                try
+                {
+                    File.WriteAllText(path, content);
 
-                ProjectStringCache cache = new ProjectStringCache();
-                XmlDocumentWithLocation document1 = new XmlDocumentWithLocation();
-                document1.StringCache = cache;
-                document1.Load(path);
+                    ProjectStringCache cache = new ProjectStringCache();
+                    XmlDocumentWithLocation document1 = new XmlDocumentWithLocation();
+                    document1.StringCache = cache;
+                    document1.Load(path);
 
-                XmlDocumentWithLocation document2 = new XmlDocumentWithLocation();
-                document2.StringCache = cache;
-                document2.Load(path);
+                    XmlDocumentWithLocation document2 = new XmlDocumentWithLocation();
+                    document2.StringCache = cache;
+                    document2.Load(path);
 
-                XmlNodeList nodes1 = document1.GetElementsByTagName("ItemGroup");
-                XmlNodeList nodes2 = document2.GetElementsByTagName("ItemGroup");
+                    XmlNodeList nodes1 = document1.GetElementsByTagName("ItemGroup");
+                    XmlNodeList nodes2 = document2.GetElementsByTagName("ItemGroup");
 
-                Assert.Equal(1, nodes1.Count);
-                Assert.Equal(1, nodes2.Count);
+                    Assert.Equal(1, nodes1.Count);
+                    Assert.Equal(1, nodes2.Count);
 
-                XmlNode node1 = nodes1[0].FirstChild;
-                XmlNode node2 = nodes2[0].FirstChild;
+                    XmlNode node1 = nodes1[0].FirstChild;
+                    XmlNode node2 = nodes2[0].FirstChild;
 
-                Assert.NotNull(node1);
-                Assert.NotNull(node2);
-                Assert.NotSame(node1, node2);
-                Assert.Same(node1.Value, node2.Value);
-            }
-            finally
-            {
-                File.Delete(path);
+                    Assert.NotNull(node1);
+                    Assert.NotNull(node2);
+                    Assert.NotSame(node1, node2);
+                    Assert.Same(node1.Value, node2.Value);
+                }
+                finally
+                {
+                    File.Delete(path);
+                }
             }
         }
 
@@ -78,7 +86,13 @@ Item group content
         [Trait("Category", "netcore-linux-failing")]
         public void ContentCanBeModified()
         {
-            string content = ObjectModelHelpers.CleanupFileContents(@"
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                ChangeWaves.ResetStateForTests();
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_6.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+
+                string content = ObjectModelHelpers.CleanupFileContents(@"
                     <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
                         <ItemGroup attr1='attr1value'>
                            Item group content
@@ -86,57 +100,58 @@ Item group content
                     </Project>
                     ");
 
-            string path = FileUtilities.GetTemporaryFile();
-
-            try
-            {
-                File.WriteAllText(path, content);
-                ProjectStringCache cache = new ProjectStringCache();
-                XmlDocumentWithLocation document1 = new XmlDocumentWithLocation();
-                document1.StringCache = cache;
-                document1.Load(path);
-
-                XmlDocumentWithLocation document2 = new XmlDocumentWithLocation();
-                document2.StringCache = cache;
-                document2.Load(path);
-
-                string outerXml1 = document1.OuterXml;
-                string outerXml2 = document2.OuterXml;
-                Assert.Equal(outerXml1, outerXml2);
-
-                XmlNodeList nodes1 = document1.GetElementsByTagName("ItemGroup");
-                XmlNodeList nodes2 = document2.GetElementsByTagName("ItemGroup");
-
-                Assert.Equal(1, nodes1.Count);
-                Assert.Equal(1, nodes2.Count);
-
-                XmlNode node1 = nodes1[0];
-                XmlNode node2 = nodes2[0];
-                Assert.NotNull(node1);
-                Assert.NotNull(node2);
-                Assert.NotSame(node1, node2);
-                Assert.Single(node1.Attributes);
-                Assert.Single(node2.Attributes);
-                Assert.Same(node1.Attributes[0].Value, node2.Attributes[0].Value);
-
-                node2.Attributes[0].Value = "attr1value";
-                Assert.Equal(node1.Attributes[0].Value, node2.Attributes[0].Value);
-                Assert.NotSame(node1.Attributes[0].Value, node2.Attributes[0].Value);
-
-                node1 = nodes1[0].FirstChild;
-                node2 = nodes2[0].FirstChild;
-                Assert.NotSame(node1, node2);
-                Assert.Same(node1.Value, node2.Value);
-
-                XmlText newText = document2.CreateTextNode("New Value");
-                XmlNode parent = node2.ParentNode;
-                parent.ReplaceChild(newText, node2);
-
-                Assert.NotEqual(outerXml1, document2.OuterXml);
-            }
-            finally
-            {
-                File.Delete(path);
+                string path = FileUtilities.GetTemporaryFile();
+
+                try
+                {
+                    File.WriteAllText(path, content);
+                    ProjectStringCache cache = new ProjectStringCache();
+                    XmlDocumentWithLocation document1 = new XmlDocumentWithLocation();
+                    document1.StringCache = cache;
+                    document1.Load(path);
+
+                    XmlDocumentWithLocation document2 = new XmlDocumentWithLocation();
+                    document2.StringCache = cache;
+                    document2.Load(path);
+
+                    string outerXml1 = document1.OuterXml;
+                    string outerXml2 = document2.OuterXml;
+                    Assert.Equal(outerXml1, outerXml2);
+
+                    XmlNodeList nodes1 = document1.GetElementsByTagName("ItemGroup");
+                    XmlNodeList nodes2 = document2.GetElementsByTagName("ItemGroup");
+
+                    Assert.Equal(1, nodes1.Count);
+                    Assert.Equal(1, nodes2.Count);
+
+                    XmlNode node1 = nodes1[0];
+                    XmlNode node2 = nodes2[0];
+                    Assert.NotNull(node1);
+                    Assert.NotNull(node2);
+                    Assert.NotSame(node1, node2);
+                    Assert.Single(node1.Attributes);
+                    Assert.Single(node2.Attributes);
+                    Assert.Same(node1.Attributes[0].Value, node2.Attributes[0].Value);
+
+                    node2.Attributes[0].Value = "attr1value";
+                    Assert.Equal(node1.Attributes[0].Value, node2.Attributes[0].Value);
+                    Assert.NotSame(node1.Attributes[0].Value, node2.Attributes[0].Value);
+
+                    node1 = nodes1[0].FirstChild;
+                    node2 = nodes2[0].FirstChild;
+                    Assert.NotSame(node1, node2);
+                    Assert.Same(node1.Value, node2.Value);
+
+                    XmlText newText = document2.CreateTextNode("New Value");
+                    XmlNode parent = node2.ParentNode;
+                    parent.ReplaceChild(newText, node2);
+
+                    Assert.NotEqual(outerXml1, document2.OuterXml);
+                }
+                finally
+                {
+                    File.Delete(path);
+                }
             }
         }
 
@@ -149,74 +164,81 @@ Item group content
         [Trait("Category", "netcore-linux-failing")]
         public void RemovingFilesRemovesEntries()
         {
-            string content = ObjectModelHelpers.CleanupFileContents(@"
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                ChangeWaves.ResetStateForTests();
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_6.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+
+                string content = ObjectModelHelpers.CleanupFileContents(@"
                     <Project xmlns='msbuildnamespace' ToolsVersion='msbuilddefaulttoolsversion'>
                         <ItemGroup>Content</ItemGroup>
                     </Project>
                     ");
 
-            string path = FileUtilities.GetTemporaryFile();
+                string path = FileUtilities.GetTemporaryFile();
 
-            try
-            {
-                File.WriteAllText(path, content);
+                try
+                {
+                    File.WriteAllText(path, content);
 
-                ProjectStringCache cache = new ProjectStringCache();
-                ProjectCollection collection = new ProjectCollection();
-                int entryCount;
+                    ProjectStringCache cache = new ProjectStringCache();
+                    ProjectCollection collection = new ProjectCollection();
+                    int entryCount;
 
-                ProjectRootElement pre1 = ProjectRootElement.Create(collection);
-                pre1.XmlDocument.StringCache = cache;
-                pre1.FullPath = path;
-                pre1.XmlDocument.Load(path);
+                    ProjectRootElement pre1 = ProjectRootElement.Create(collection);
+                    pre1.XmlDocument.StringCache = cache;
+                    pre1.FullPath = path;
+                    pre1.XmlDocument.Load(path);
 
-                entryCount = cache.Count;
-                Assert.True(entryCount > 0);
+                    entryCount = cache.Count;
+                    Assert.True(entryCount > 0);
 
-                ProjectRootElement pre2 = ProjectRootElement.Create(collection);
-                pre2.XmlDocument.StringCache = cache;
-                pre2.FullPath = path;
-                pre2.XmlDocument.Load(path);
+                    ProjectRootElement pre2 = ProjectRootElement.Create(collection);
+                    pre2.XmlDocument.StringCache = cache;
+                    pre2.FullPath = path;
+                    pre2.XmlDocument.Load(path);
 
-                // Entry count should not have changed
-                Assert.Equal(entryCount, cache.Count);
+                    // Entry count should not have changed
+                    Assert.Equal(entryCount, cache.Count);
 
-                string itemGroupContent = cache.Get("Content");
-                Assert.NotNull(itemGroupContent);
+                    string itemGroupContent = cache.Get("Content");
+                    Assert.NotNull(itemGroupContent);
 
-                XmlNodeList nodes1 = pre1.XmlDocument.GetElementsByTagName("ItemGroup");
-                XmlNodeList nodes2 = pre2.XmlDocument.GetElementsByTagName("ItemGroup");
+                    XmlNodeList nodes1 = pre1.XmlDocument.GetElementsByTagName("ItemGroup");
+                    XmlNodeList nodes2 = pre2.XmlDocument.GetElementsByTagName("ItemGroup");
 
-                Assert.Equal(1, nodes1.Count);
-                Assert.Equal(1, nodes2.Count);
+                    Assert.Equal(1, nodes1.Count);
+                    Assert.Equal(1, nodes2.Count);
 
-                XmlNode node1 = nodes1[0];
-                XmlNode node2 = nodes2[0];
-                Assert.NotNull(node1);
-                Assert.NotNull(node2);
-                Assert.NotSame(node1, node2);
-                Assert.Same(node1.Value, node2.Value);
+                    XmlNode node1 = nodes1[0];
+                    XmlNode node2 = nodes2[0];
+                    Assert.NotNull(node1);
+                    Assert.NotNull(node2);
+                    Assert.NotSame(node1, node2);
+                    Assert.Same(node1.Value, node2.Value);
 
-                // Now remove one document
-                collection.UnloadProject(pre1);
+                    // Now remove one document
+                    collection.UnloadProject(pre1);
 
-                // We should still be able to get Content
-                itemGroupContent = cache.Get("Content");
-                Assert.NotNull(itemGroupContent);
+                    // We should still be able to get Content
+                    itemGroupContent = cache.Get("Content");
+                    Assert.NotNull(itemGroupContent);
 
-                // Now remove the second document
-                collection.UnloadProject(pre2);
+                    // Now remove the second document
+                    collection.UnloadProject(pre2);
 
-                // Now we should not be able to get Content
-                itemGroupContent = cache.Get("Content");
-                Assert.Null(itemGroupContent);
+                    // Now we should not be able to get Content
+                    itemGroupContent = cache.Get("Content");
+                    Assert.Null(itemGroupContent);
 
-                // And there should be no entries
-                Assert.Equal(0, cache.Count);
-            }
-            finally
-            {
-                File.Delete(path);
+                    // And there should be no entries
+                    Assert.Equal(0, cache.Count);
+                }
+                finally
+                {
+                    File.Delete(path);
+                }
             }
         }
 
@@ -227,32 +249,39 @@ public void RemovingFilesRemovesEntries()
         [Fact]
         public void AddReturnsSameInstanceForSameDocument()
         {
-            ProjectStringCache cache = new ProjectStringCache();
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                ChangeWaves.ResetStateForTests();
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_6.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+
+                ProjectStringCache cache = new ProjectStringCache();
 
-            XmlDocument document = new XmlDocument();
+                XmlDocument document = new XmlDocument();
 
-            string stringToAdd = "Test1";
-            string return1 = cache.Add(stringToAdd, document);
+                string stringToAdd = "Test1";
+                string return1 = cache.Add(stringToAdd, document);
 
-            // Content of string should be the same.
-            Assert.Equal(1, cache.Count);
-            Assert.Equal(stringToAdd, return1);
+                // Content of string should be the same.
+                Assert.Equal(1, cache.Count);
+                Assert.Equal(stringToAdd, return1);
 
-            // Build a new string guaranteed not to be optimized by the compiler into the same instance.
-            StringBuilder builder = new StringBuilder();
-            builder.Append("Test");
-            builder.Append('1');
+                // Build a new string guaranteed not to be optimized by the compiler into the same instance.
+                StringBuilder builder = new StringBuilder();
+                builder.Append("Test");
+                builder.Append('1');
 
-            string return2 = cache.Add(builder.ToString(), document);
+                string return2 = cache.Add(builder.ToString(), document);
 
-            // Content of string should be the same.            
-            Assert.Equal(builder.ToString(), return2);
+                // Content of string should be the same.            
+                Assert.Equal(builder.ToString(), return2);
 
-            // Returned references should be the same
-            Assert.Same(return1, return2);
+                // Returned references should be the same
+                Assert.Same(return1, return2);
 
-            // Should not have added any new string instances to the cache.
-            Assert.Equal(1, cache.Count);
+                // Should not have added any new string instances to the cache.
+                Assert.Equal(1, cache.Count);
+            }
         }
 
         /// <summary>
@@ -262,32 +291,39 @@ public void AddReturnsSameInstanceForSameDocument()
         [Fact]
         public void AddReturnsSameInstanceForDifferentDocument()
         {
-            ProjectStringCache cache = new ProjectStringCache();
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                ChangeWaves.ResetStateForTests();
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_6.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+
+                ProjectStringCache cache = new ProjectStringCache();
 
-            XmlDocument document = new XmlDocument();
+                XmlDocument document = new XmlDocument();
 
-            string stringToAdd = "Test1";
-            string return1 = cache.Add(stringToAdd, document);
+                string stringToAdd = "Test1";
+                string return1 = cache.Add(stringToAdd, document);
 
-            // Content of string should be the same.
-            Assert.Equal(stringToAdd, return1);
+                // Content of string should be the same.
+                Assert.Equal(stringToAdd, return1);
 
-            // Build a new string guaranteed not to be optimized by the compiler into the same instance.
-            StringBuilder builder = new StringBuilder();
-            builder.Append("Test");
-            builder.Append('1');
-            XmlDocument document2 = new XmlDocument();
+                // Build a new string guaranteed not to be optimized by the compiler into the same instance.
+                StringBuilder builder = new StringBuilder();
+                builder.Append("Test");
+                builder.Append('1');
+                XmlDocument document2 = new XmlDocument();
 
-            string return2 = cache.Add(builder.ToString(), document2);
+                string return2 = cache.Add(builder.ToString(), document2);
 
-            // Content of string should be the same.
-            Assert.Equal(builder.ToString(), return2);
+                // Content of string should be the same.
+                Assert.Equal(builder.ToString(), return2);
 
-            // Returned references should be the same
-            Assert.Same(return1, return2);
+                // Returned references should be the same
+                Assert.Same(return1, return2);
 
-            // Should not have added any new string instances to the cache.
-            Assert.Equal(1, cache.Count);
+                // Should not have added any new string instances to the cache.
+                Assert.Equal(1, cache.Count);
+            }
         }
 
         /// <summary>
@@ -302,28 +338,35 @@ public void AddReturnsSameInstanceForDifferentDocument()
         [Fact]
         public void RemoveLastInstanceDeallocatesEntry()
         {
-            ProjectStringCache cache = new ProjectStringCache();
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                ChangeWaves.ResetStateForTests();
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_6.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
 
-            XmlDocument document = new XmlDocument();
+                ProjectStringCache cache = new ProjectStringCache();
+
+                XmlDocument document = new XmlDocument();
 
-            string stringToAdd = "Test1";
-            string return1 = cache.Add(stringToAdd, document);
+                string stringToAdd = "Test1";
+                string return1 = cache.Add(stringToAdd, document);
 
-            cache.Clear(document);
+                cache.Clear(document);
 
-            // Should be no instances left.
-            Assert.Equal(0, cache.Count);
+                // Should be no instances left.
+                Assert.Equal(0, cache.Count);
 
-            // Build a new string guaranteed not to be optimized by the compiler into the same instance.
-            StringBuilder builder = new StringBuilder();
-            builder.Append("Test");
-            builder.Append('1');
-            XmlDocument document2 = new XmlDocument();
+                // Build a new string guaranteed not to be optimized by the compiler into the same instance.
+                StringBuilder builder = new StringBuilder();
+                builder.Append("Test");
+                builder.Append('1');
+                XmlDocument document2 = new XmlDocument();
 
-            string return2 = cache.Add(builder.ToString(), document2);
+                string return2 = cache.Add(builder.ToString(), document2);
 
-            // Returned references should NOT be the same
-            Assert.NotSame(return1, return2);
+                // Returned references should NOT be the same
+                Assert.NotSame(return1, return2);
+            }
         }
 
         /// <summary>
@@ -334,36 +377,43 @@ public void RemoveLastInstanceDeallocatesEntry()
         [Fact]
         public void RemoveOneInstance()
         {
-            ProjectStringCache cache = new ProjectStringCache();
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                ChangeWaves.ResetStateForTests();
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_6.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
 
-            XmlDocument document = new XmlDocument();
+                ProjectStringCache cache = new ProjectStringCache();
+
+                XmlDocument document = new XmlDocument();
 
-            string stringToAdd = "Test1";
-            string return1 = cache.Add(stringToAdd, document);
-            Assert.Equal(1, cache.Count);
+                string stringToAdd = "Test1";
+                string return1 = cache.Add(stringToAdd, document);
+                Assert.Equal(1, cache.Count);
 
-            XmlDocument document2 = new XmlDocument();
-            cache.Add(stringToAdd, document2);
-            Assert.Equal(1, cache.Count);
+                XmlDocument document2 = new XmlDocument();
+                cache.Add(stringToAdd, document2);
+                Assert.Equal(1, cache.Count);
 
-            cache.Clear(document2);
+                cache.Clear(document2);
 
-            // Since there is still one document referencing the string, it should remain.
-            Assert.Equal(1, cache.Count);
+                // Since there is still one document referencing the string, it should remain.
+                Assert.Equal(1, cache.Count);
 
-            // Build a new string guaranteed not to be optimized by the compiler into the same instance.
-            StringBuilder builder = new StringBuilder();
-            builder.Append("Test");
-            builder.Append('1');
-            XmlDocument document3 = new XmlDocument();
+                // Build a new string guaranteed not to be optimized by the compiler into the same instance.
+                StringBuilder builder = new StringBuilder();
+                builder.Append("Test");
+                builder.Append('1');
+                XmlDocument document3 = new XmlDocument();
 
-            string return3 = cache.Add(builder.ToString(), document3);
+                string return3 = cache.Add(builder.ToString(), document3);
 
-            // Returned references should be the same
-            Assert.Same(return1, return3);
+                // Returned references should be the same
+                Assert.Same(return1, return3);
 
-            // Still should only be one cached instance.
-            Assert.Equal(1, cache.Count);
+                // Still should only be one cached instance.
+                Assert.Equal(1, cache.Count);
+            }
         }
 
         /// <summary>
@@ -372,31 +422,38 @@ public void RemoveOneInstance()
         [Fact]
         public void DifferentStringsSameDocument()
         {
-            ProjectStringCache cache = new ProjectStringCache();
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                ChangeWaves.ResetStateForTests();
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_6.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
+
+                ProjectStringCache cache = new ProjectStringCache();
 
-            XmlDocument document = new XmlDocument();
+                XmlDocument document = new XmlDocument();
 
-            string stringToAdd = "Test1";
-            cache.Add(stringToAdd, document);
-            Assert.Equal(1, cache.Count);
+                string stringToAdd = "Test1";
+                cache.Add(stringToAdd, document);
+                Assert.Equal(1, cache.Count);
 
-            stringToAdd = "Test2";
-            string return2 = cache.Add(stringToAdd, document);
+                stringToAdd = "Test2";
+                string return2 = cache.Add(stringToAdd, document);
 
-            // The second string gets its own instance.
-            Assert.Equal(2, cache.Count);
+                // The second string gets its own instance.
+                Assert.Equal(2, cache.Count);
 
-            // Build a new string guaranteed not to be optimized by the compiler into the same instance.
-            StringBuilder builder = new StringBuilder();
-            builder.Append("Test");
-            builder.Append('2');
-            string return3 = cache.Add(builder.ToString(), document);
+                // Build a new string guaranteed not to be optimized by the compiler into the same instance.
+                StringBuilder builder = new StringBuilder();
+                builder.Append("Test");
+                builder.Append('2');
+                string return3 = cache.Add(builder.ToString(), document);
 
-            // The new string should be the same as the other one already in the collection.
-            Assert.Same(return2, return3);
+                // The new string should be the same as the other one already in the collection.
+                Assert.Same(return2, return3);
 
-            // No new instances for string with the same content.
-            Assert.Equal(2, cache.Count);
+                // No new instances for string with the same content.
+                Assert.Equal(2, cache.Count);
+            }
         }
 
         /// <summary>
@@ -405,33 +462,40 @@ public void DifferentStringsSameDocument()
         [Fact]
         public void DifferentStringsDifferentDocuments()
         {
-            ProjectStringCache cache = new ProjectStringCache();
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                ChangeWaves.ResetStateForTests();
+                env.SetEnvironmentVariable("MSBUILDDISABLEFEATURESFROMVERSION", ChangeWaves.Wave17_6.ToString());
+                BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
 
-            XmlDocument document = new XmlDocument();
+                ProjectStringCache cache = new ProjectStringCache();
 
-            string stringToAdd = "Test1";
-            cache.Add(stringToAdd, document);
-            Assert.Equal(1, cache.Count);
+                XmlDocument document = new XmlDocument();
 
-            stringToAdd = "Test2";
-            XmlDocument document2 = new XmlDocument();
-            string return2 = cache.Add(stringToAdd, document2);
+                string stringToAdd = "Test1";
+                cache.Add(stringToAdd, document);
+                Assert.Equal(1, cache.Count);
 
-            // The second string gets its own instance.
-            Assert.Equal(2, cache.Count);
+                stringToAdd = "Test2";
+                XmlDocument document2 = new XmlDocument();
+                string return2 = cache.Add(stringToAdd, document2);
 
-            // Build a new string guaranteed not to be optimized by the compiler into the same instance.
-            StringBuilder builder = new StringBuilder();
-            builder.Append("Test");
-            builder.Append('2');
-            XmlDocument document3 = new XmlDocument();
-            string return3 = cache.Add(builder.ToString(), document3);
+                // The second string gets its own instance.
+                Assert.Equal(2, cache.Count);
 
-            // The new string should be the same as the other one already in the collection.
-            Assert.Same(return2, return3);
+                // Build a new string guaranteed not to be optimized by the compiler into the same instance.
+                StringBuilder builder = new StringBuilder();
+                builder.Append("Test");
+                builder.Append('2');
+                XmlDocument document3 = new XmlDocument();
+                string return3 = cache.Add(builder.ToString(), document3);
 
-            // No new instances for string with the same content.
-            Assert.Equal(2, cache.Count);
+                // The new string should be the same as the other one already in the collection.
+                Assert.Same(return2, return3);
+
+                // No new instances for string with the same content.
+                Assert.Equal(2, cache.Count);
+            }
         }
     }
 }
diff --git a/src/Build.UnitTests/Parser_Tests.cs b/src/Build.UnitTests/Parser_Tests.cs
index bc7efd3b6ef..28691332f75 100644
--- a/src/Build.UnitTests/Parser_Tests.cs
+++ b/src/Build.UnitTests/Parser_Tests.cs
@@ -2,7 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-
+using System.Linq;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Exceptions;
 using Xunit;
@@ -215,16 +215,16 @@ public void ItemFuncParseTest()
             Console.WriteLine("ItemFuncParseTest()");
 
             Parser p = new Parser();
-            GenericExpressionNode tree = p.Parse("@(item->foo('ab'))", 
+            GenericExpressionNode tree = p.Parse("@(item->foo('ab'))",
                 ParserOptions.AllowProperties | ParserOptions.AllowItemLists, _elementLocation);
             Assert.IsType<StringExpressionNode>(tree);
             Assert.Equal("@(item->foo('ab'))", tree.GetUnexpandedValue(null));
 
-            tree = p.Parse("!@(item->foo())", 
+            tree = p.Parse("!@(item->foo())",
                 ParserOptions.AllowProperties | ParserOptions.AllowItemLists, _elementLocation);
             Assert.IsType<NotExpressionNode>(tree);
 
-            tree = p.Parse("(@(item->foo('ab')) and @(item->foo('bc')))", 
+            tree = p.Parse("(@(item->foo('ab')) and @(item->foo('bc')))",
                 ParserOptions.AllowProperties | ParserOptions.AllowItemLists, _elementLocation);
             Assert.IsType<AndExpressionNode>(tree);
         }
@@ -527,5 +527,73 @@ public void VerifyNoWarningForOrder()
             // Make sure the log contains the correct strings.
             Assert.DoesNotContain("MSB4130:", ml.FullLog); // "No need to warn for this expression - ($(a) == 1 or $(b) == 2) and $(c) == 3."
         }
+
+        // see https://github.com/dotnet/msbuild/issues/5436
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void SupportItemDefinationGroupInWhenOtherwise(bool context)
+        {
+            var projectContent = $@"
+                <Project ToolsVersion= `msbuilddefaulttoolsversion` xmlns= `msbuildnamespace`>
+                    <Choose>
+                        <When Condition= `{context}`>
+                            <PropertyGroup>
+                                <Foo>bar</Foo>
+                            </PropertyGroup>
+                            <ItemGroup>
+                                <A Include= `$(Foo)`>
+                                    <n>n1</n>
+                                </A>
+                            </ItemGroup>
+                            <ItemDefinitionGroup>
+                                <A>
+                                    <m>m1</m>
+                                    <n>n2</n>
+                                </A>
+                            </ItemDefinitionGroup>
+                        </When>
+                        <Otherwise>
+                            <PropertyGroup>
+                                <Foo>bar</Foo>
+                            </PropertyGroup>
+                            <ItemGroup>
+                                <A Include= `$(Foo)`>
+                                    <n>n1</n>
+                                </A>
+                            </ItemGroup>
+                            <ItemDefinitionGroup>
+                                <A>
+                                    <m>m2</m>
+                                    <n>n2</n>
+                                </A>
+                            </ItemDefinitionGroup>
+                        </Otherwise>
+                    </Choose>
+                </Project>
+                ".Cleanup();
+
+
+            var project = ObjectModelHelpers.CreateInMemoryProject(projectContent);
+
+            var projectItem = project.GetItems("A").FirstOrDefault();
+            Assert.Equal("bar", projectItem.EvaluatedInclude);
+
+            var metadatam = projectItem.GetMetadata("m");
+            if (context)
+            {
+                // Go to when 
+                Assert.Equal("m1", metadatam.EvaluatedValue);
+            }
+            else
+            {
+                // Go to Otherwise
+                Assert.Equal("m2", metadatam.EvaluatedValue);
+            }
+
+            var metadatan = projectItem.GetMetadata("n");
+            Assert.Equal("n1", metadatan.EvaluatedValue);
+            Assert.Equal("n2", metadatan.Predecessor.EvaluatedValue);
+        }
     }
 }
diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index 56126bfbffa..405f2716d21 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -1035,7 +1035,7 @@ public void MultiplePlugins()
 ");
             var mockCache = new InstanceMockCache();
 
-            var buildParameters =  new BuildParameters
+            var buildParameters = new BuildParameters
             {
                 ProjectCacheDescriptor = ProjectCacheDescriptor.FromInstance(mockCache),
             };
@@ -1047,7 +1047,7 @@ public void MultiplePlugins()
                 logger = buildSession.Logger;
                 graphResult = buildSession.BuildGraph(graph);
             }
-            
+
             graphResult.ShouldHaveSucceeded();
         }
 
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index f683529b74d..6670fbc468e 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -409,6 +409,14 @@ public DeferredBuildMessage(string text, MessageImportance importance)
         /// <exception cref="InvalidOperationException">Thrown if a build is already in progress.</exception>
         public void BeginBuild(BuildParameters parameters, IEnumerable<DeferredBuildMessage> deferredBuildMessages)
         {
+            // TEMP can be modified from the environment. Most of Traits is lasts for the duration of the process (with a manual reset for tests)
+            // and environment variables we use as properties are stored in a dictionary at the beginning of the build, so they also cannot be
+            // changed during a build. Some of our older stuff uses live environment variable checks. The TEMP directory previously used a live
+            // environment variable check, but it now uses a cached value. Nevertheless, we should support changing it between builds, so reset
+            // it here in case the user is using Visual Studio or the MSBuild server, as those each last for multiple builds without changing
+            // BuildManager.
+            FileUtilities.ClearTempFileDirectory();
+
             // deferredBuildMessages cannot be an optional parameter on a single BeginBuild method because it would break binary compatibility.
             _deferredBuildMessages = deferredBuildMessages;
             BeginBuild(parameters);
@@ -957,10 +965,10 @@ public void EndBuild()
 
                 if (e is AggregateException ae && ae.InnerExceptions.Count == 1)
                 {
-                    e = ae.InnerExceptions.First();
+                    ExceptionDispatchInfo.Capture(ae.InnerExceptions[0]).Throw();
                 }
 
-                throw e;
+                throw;
             }
             finally
             {
@@ -1846,8 +1854,7 @@ private void ExecuteGraphBuildScheduler(GraphBuildSubmission submission)
 
             if (submission.BuildRequestData.GraphBuildOptions.Build)
             {
-                // Kick off project cache initialization frontloading
-                Task.Run(() => _projectCacheService.InitializePluginsForGraph(projectGraph, _executionCancellationTokenSource.Token));
+                _projectCacheService.InitializePluginsForGraph(projectGraph, _executionCancellationTokenSource.Token);
 
                 var targetListTask = projectGraph.GetTargetLists(submission.BuildRequestData.TargetNames);
 
diff --git a/src/Build/BackEnd/Client/MSBuildClient.cs b/src/Build/BackEnd/Client/MSBuildClient.cs
index be791e7ced8..262b3eedd79 100644
--- a/src/Build/BackEnd/Client/MSBuildClient.cs
+++ b/src/Build/BackEnd/Client/MSBuildClient.cs
@@ -8,7 +8,6 @@
 using System.Globalization;
 using System.IO;
 using System.IO.Pipes;
-using System.Linq;
 using System.Threading;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.BackEnd.Client;
@@ -34,6 +33,11 @@ public sealed class MSBuildClient
         /// </summary>
         private readonly Dictionary<string, string> _serverEnvironmentVariables;
 
+        /// <summary>
+        /// The console mode we had before the build.
+        /// </summary>
+        private uint? _originalConsoleMode;
+
         /// <summary>
         /// Full path to current MSBuild.exe if executable is MSBuild.exe,
         /// or to version of MSBuild.dll found to be associated with the current process.
@@ -160,33 +164,46 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)
 #endif
 
             CommunicationsUtilities.Trace("Executing build with command line '{0}'", descriptiveCommandLine);
-            bool serverIsAlreadyRunning = ServerIsRunning();
-            if (KnownTelemetry.BuildTelemetry != null)
-            {
-                KnownTelemetry.BuildTelemetry.InitialServerState = serverIsAlreadyRunning ? "hot" : "cold";
-            }
-            if (!serverIsAlreadyRunning)
+
+            try
             {
-                CommunicationsUtilities.Trace("Server was not running. Starting server now.");
-                if (!TryLaunchServer())
+                bool serverIsAlreadyRunning = ServerIsRunning();
+                if (KnownTelemetry.BuildTelemetry != null)
+                {
+                    KnownTelemetry.BuildTelemetry.InitialServerState = serverIsAlreadyRunning ? "hot" : "cold";
+                }
+                if (!serverIsAlreadyRunning)
                 {
-                    _exitResult.MSBuildClientExitType = MSBuildClientExitType.LaunchError;
+                    CommunicationsUtilities.Trace("Server was not running. Starting server now.");
+                    if (!TryLaunchServer())
+                    {
+                        _exitResult.MSBuildClientExitType = (_exitResult.MSBuildClientExitType == MSBuildClientExitType.Success) ? MSBuildClientExitType.LaunchError : _exitResult.MSBuildClientExitType;
+                        return _exitResult;
+                    }
+                }
+
+                // Check that server is not busy.
+                bool serverWasBusy = ServerWasBusy();
+                if (serverWasBusy)
+                {
+                    CommunicationsUtilities.Trace("Server is busy, falling back to former behavior.");
+                    _exitResult.MSBuildClientExitType = MSBuildClientExitType.ServerBusy;
                     return _exitResult;
                 }
-            }
 
-            // Check that server is not busy.
-            bool serverWasBusy = ServerWasBusy();
-            if (serverWasBusy)
-            {
-                CommunicationsUtilities.Trace("Server is busy, falling back to former behavior.");
-                _exitResult.MSBuildClientExitType = MSBuildClientExitType.ServerBusy;
-                return _exitResult;
+                // Connect to server.
+                if (!TryConnectToServer(serverIsAlreadyRunning ? 1_000 : 20_000))
+                {
+                    return _exitResult;
+                }
             }
-
-            // Connect to server.
-            if (!TryConnectToServer(serverIsAlreadyRunning ? 1_000 : 20_000))
+            catch (IOException ex) when (ex is not PathTooLongException)
             {
+                // For unknown root cause, Mutex.TryOpenExisting can sometimes throw 'Connection timed out' exception preventing to obtain the build server state through it (Running or not, Busy or not).
+                // See: https://github.com/dotnet/msbuild/issues/7993
+                CommunicationsUtilities.Trace("Failed to obtain the current build server state: {0}", ex);
+                CommunicationsUtilities.Trace("HResult: {0}.", ex.HResult);
+                _exitResult.MSBuildClientExitType = MSBuildClientExitType.UnknownServerState;
                 return _exitResult;
             }
 
@@ -195,18 +212,23 @@ public MSBuildClientExitResult Execute(CancellationToken cancellationToken)
             // Send build command.
             // Let's send it outside the packet pump so that we easier and quicker deal with possible issues with connection to server.
             MSBuildEventSource.Log.MSBuildServerBuildStart(descriptiveCommandLine);
-            if (!TrySendBuildCommand())
+            if (TrySendBuildCommand())
             {
-                return _exitResult;
-            }
+                _numConsoleWritePackets = 0;
+                _sizeOfConsoleWritePackets = 0;
 
-            _numConsoleWritePackets = 0;
-            _sizeOfConsoleWritePackets = 0;
+                ReadPacketsLoop(cancellationToken);
 
-            ReadPacketsLoop(cancellationToken);
+                MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);
+                CommunicationsUtilities.Trace("Build finished.");
+            }
+
+            if (NativeMethodsShared.IsWindows && _originalConsoleMode is not null)
+            {
+                IntPtr stdOut = NativeMethodsShared.GetStdHandle(NativeMethodsShared.STD_OUTPUT_HANDLE);
+                NativeMethodsShared.SetConsoleMode(stdOut, _originalConsoleMode.Value);
+            }
 
-            MSBuildEventSource.Log.MSBuildServerBuildStop(descriptiveCommandLine, _numConsoleWritePackets, _sizeOfConsoleWritePackets, _exitResult.MSBuildClientExitType.ToString(), _exitResult.MSBuildAppExitTypeString);
-            CommunicationsUtilities.Trace("Build finished.");
             return _exitResult;
         }
 
@@ -354,15 +376,15 @@ private void ConfigureAndQueryConsoleProperties()
                     if (NativeMethodsShared.GetConsoleMode(stdOut, out uint consoleMode))
                     {
                         bool success;
-                        if ((consoleMode & NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING) == NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING &&
-                            (consoleMode & NativeMethodsShared.DISABLE_NEWLINE_AUTO_RETURN) == NativeMethodsShared.DISABLE_NEWLINE_AUTO_RETURN)
+                        if ((consoleMode & NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING) == NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING)
                         {
                             // Console is already in required state
                             success = true;
                         }
                         else
                         {
-                            consoleMode |= NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING | NativeMethodsShared.DISABLE_NEWLINE_AUTO_RETURN;
+                            _originalConsoleMode = consoleMode;
+                            consoleMode |= NativeMethodsShared.ENABLE_VIRTUAL_TERMINAL_PROCESSING;
                             success = NativeMethodsShared.SetConsoleMode(stdOut, consoleMode);
                         }
 
@@ -390,7 +412,7 @@ private void ConfigureAndQueryConsoleProperties()
 
             return (acceptAnsiColorCodes: acceptAnsiColorCodes, outputIsScreen: outputIsScreen);
         }
-
+        
         private int QueryConsoleBufferWidth()
         {
             int consoleBufferWidth = -1;
@@ -454,22 +476,34 @@ private bool TrySendPacket(Func<INodePacket> packetResolver)
         private bool TryLaunchServer()
         {
             string serverLaunchMutexName = $@"Global\msbuild-server-launch-{_handshake.ComputeHash()}";
-            using var serverLaunchMutex = ServerNamedMutex.OpenOrCreateMutex(serverLaunchMutexName, out bool mutexCreatedNew);
-            if (!mutexCreatedNew)
+
+            try
             {
-                // Some other client process launching a server and setting a build request for it. Fallback to usual msbuild app build.
-                CommunicationsUtilities.Trace("Another process launching the msbuild server, falling back to former behavior.");
-                _exitResult.MSBuildClientExitType = MSBuildClientExitType.ServerBusy;
+                // For unknown root cause, opening mutex can sometimes throw 'Connection timed out' exception. See: https://github.com/dotnet/msbuild/issues/7993
+                using var serverLaunchMutex = ServerNamedMutex.OpenOrCreateMutex(serverLaunchMutexName, out bool mutexCreatedNew);
+
+                if (!mutexCreatedNew)
+                {
+                    // Some other client process launching a server and setting a build request for it. Fallback to usual msbuild app build.
+                    CommunicationsUtilities.Trace("Another process launching the msbuild server, falling back to former behavior.");
+                    _exitResult.MSBuildClientExitType = MSBuildClientExitType.ServerBusy;
+                    return false;
+                }
+            }
+            catch (IOException ex) when (ex is not PathTooLongException)
+            {
+                CommunicationsUtilities.Trace("Failed to obtain the current build server state: {0}",  ex);
+                CommunicationsUtilities.Trace("HResult: {0}.", ex.HResult);
+                _exitResult.MSBuildClientExitType = MSBuildClientExitType.UnknownServerState;
                 return false;
             }
 
-            string[] msBuildServerOptions = new string[] {
-                "/nologo",
-                "/nodemode:8"
-            };
-
             try
             {
+                string[] msBuildServerOptions = new string[] {
+                    "/nologo",
+                    "/nodemode:8"
+                };
                 NodeLauncher nodeLauncher = new NodeLauncher();
                 CommunicationsUtilities.Trace("Starting Server...");
                 Process msbuildProcess = nodeLauncher.Start(_msbuildLocation, string.Join(" ", msBuildServerOptions));
diff --git a/src/Build/BackEnd/Client/MSBuildClientExitType.cs b/src/Build/BackEnd/Client/MSBuildClientExitType.cs
index e9916bd5414..9ac0d49652a 100644
--- a/src/Build/BackEnd/Client/MSBuildClientExitType.cs
+++ b/src/Build/BackEnd/Client/MSBuildClientExitType.cs
@@ -24,6 +24,14 @@ public enum MSBuildClientExitType
         /// The build stopped unexpectedly, for example,
         /// because a named pipe between the server and the client was unexpectedly closed.
         /// </summary>
-        Unexpected
+        Unexpected,
+        /// <summary>
+        /// The client is not able to identify the server state.
+        /// </summary>
+        /// <remarks>
+        /// This may happen when mutex that is regulating the server state throws.
+        /// See: https://github.com/dotnet/msbuild/issues/7993.
+        /// </remarks>
+        UnknownServerState
     }
 }
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 3bb58aa36ab..d635c661da9 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -127,7 +127,7 @@ internal BuildRequestEngine()
 
             if (String.IsNullOrEmpty(_debugDumpPath))
             {
-                _debugDumpPath = Path.GetTempPath();
+                _debugDumpPath = FileUtilities.TempFileDirectory;
             }
 
             _status = BuildRequestEngineStatus.Uninitialized;
diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index 6c7bb192575..2a9a83b0135 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -111,7 +111,7 @@ private ProjectLoggingContext(
                 }
                 else
                 {
-                    properties = projectProperties.Filter(p => p is not EnvironmentDerivedProjectPropertyInstance, p => new DictionaryEntry(p.Name, p.EvaluatedValue));
+                    properties = projectProperties.Filter(p => p is not EnvironmentDerivedProjectPropertyInstance || EnvironmentUtilities.IsWellKnownEnvironmentDerivedProperty(p.Name), p => new DictionaryEntry(p.Name, p.EvaluatedValue));
                 }
 
                 items = projectItems?.GetCopyOnReadEnumerable(item => new DictionaryEntry(item.ItemType, new TaskItem(item))) ?? Enumerable.Empty<DictionaryEntry>();
diff --git a/src/Build/BackEnd/Components/ProjectCache/CacheResult.cs b/src/Build/BackEnd/Components/ProjectCache/CacheResult.cs
index 3423453f19c..48a847b60ce 100644
--- a/src/Build/BackEnd/Components/ProjectCache/CacheResult.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/CacheResult.cs
@@ -127,13 +127,8 @@ private static WorkUnitResult CreateWorkUnitResult(BuildResultCode resultCode)
 
         private static ProjectItemInstance.TaskItem CreateTaskItem(ITaskItem2 taskItemInterface)
         {
-            var taskItem = new ProjectItemInstance.TaskItem(taskItemInterface.EvaluatedIncludeEscaped, null);
-
-            foreach (string metadataName in taskItemInterface.MetadataNames)
-            {
-                taskItem.SetMetadata(metadataName, taskItemInterface.GetMetadataValueEscaped(metadataName));
-            }
-
+            var taskItem = new ProjectItemInstance.TaskItem(taskItemInterface.EvaluatedIncludeEscaped, definingFileEscaped: null);
+            taskItemInterface.CopyMetadataTo(taskItem);
             return taskItem;
         }
     }
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index d95771ae3cd..7a1f6cc9c4f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -820,6 +820,19 @@ private async Task BuildAndReport()
 
                 thrownException = ex;
             }
+            // This is a workaround for https://github.com/dotnet/msbuild/issues/2064. It catches the exception case and turns it into a more understandable warning.
+            catch (UnbuildableProjectTypeException ex)
+            {
+                thrownException = ex;
+                if (_projectLoggingContext is null)
+                {
+                    _nodeLoggingContext.LogWarning("SolutionParseUnknownProjectType", ex.Message);
+                }
+                else
+                {
+                    _projectLoggingContext.LogWarning("SolutionParseUnknownProjectType", ex.Message);
+                }
+            }
             catch (Exception ex)
             {
                 thrownException = ex;
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 4835778b4c1..924b3abb698 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -1037,7 +1037,7 @@ private List<string> GetUndeclaredProjects(MSBuild msbuildTask)
 
             var projectReferenceItems = _buildRequestEntry.RequestConfiguration.Project.GetItems(ItemTypeNames.ProjectReference);
 
-            var declaredProjects = new HashSet<string>(projectReferenceItems.Count);
+            var declaredProjects = new HashSet<string>(projectReferenceItems.Count + 1, FileUtilities.PathComparer);
 
             foreach (var projectReferenceItem in projectReferenceItems)
             {
@@ -1045,7 +1045,7 @@ private List<string> GetUndeclaredProjects(MSBuild msbuildTask)
             }
 
             // allow a project to msbuild itself
-            declaredProjects.Add(_taskExecutionHost.ProjectInstance.FullPath);
+            declaredProjects.Add(FileUtilities.NormalizePath(_taskExecutionHost.ProjectInstance.FullPath));
 
             List<string> undeclaredProjects = null;
 
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 44f487998b8..f166c13d9fa 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -228,7 +228,7 @@ public Scheduler()
 
             if (String.IsNullOrEmpty(_debugDumpPath))
             {
-                _debugDumpPath = Path.GetTempPath();
+                _debugDumpPath = FileUtilities.TempFileDirectory;
             }
 
             Reset();
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index 3ef2120b037..2901298ed0a 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -67,6 +67,10 @@ public delegate (int exitCode, string exitType) BuildCallback(
         /// </summary>
         private Exception? _shutdownException = null;
 
+        /// <summary>
+        /// Indicate that cancel has been requested and initiated.
+        /// </summary>        
+        private bool _cancelRequested = false;
         private string _serverBusyMutexName = default!;
 
         public OutOfProcServerNode(BuildCallback buildFunction)
@@ -312,7 +316,12 @@ private void HandleServerShutdownCommand(NodeBuildComplete buildComplete)
             _shutdownEvent.Set();
         }
 
-        private static void HandleBuildCancel() => BuildManager.DefaultBuildManager.CancelAllSubmissions();
+        private void HandleBuildCancel()
+        {
+            CommunicationsUtilities.Trace("Received request to cancel build running on MSBuild Server. MSBuild server will shutdown.}");
+            _cancelRequested = true;
+            BuildManager.DefaultBuildManager.CancelAllSubmissions();
+        }
 
         private void HandleServerNodeBuildCommandAsync(ServerNodeBuildCommand command)
         {
@@ -411,10 +420,10 @@ private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
             var response = new ServerNodeBuildResult(buildResult.exitCode, buildResult.exitType);
             SendPacket(response);
 
-            _shutdownReason = NodeEngineShutdownReason.BuildCompleteReuse;
+            // Shutdown server if cancel was requested. This is consistent with nodes behavior.
+            _shutdownReason = _cancelRequested ? NodeEngineShutdownReason.BuildComplete : NodeEngineShutdownReason.BuildCompleteReuse;
             _shutdownEvent.Set();
         }
-
         internal sealed class RedirectConsoleWriter : StringWriter
         {
             private readonly Action<string> _writeCallback;
diff --git a/src/Build/BackEnd/Shared/ConfigurationMetadata.cs b/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
index 8f951bbcab3..a58dceeaaa8 100644
--- a/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
+++ b/src/Build/BackEnd/Shared/ConfigurationMetadata.cs
@@ -36,8 +36,8 @@ public ConfigurationMetadata(BuildRequestConfiguration configuration)
         public ConfigurationMetadata(Project project)
         {
             ErrorUtilities.VerifyThrowArgumentNull(project, nameof(project));
-            _globalProperties = new PropertyDictionary<ProjectPropertyInstance>(project.GlobalProperties.Count);
-            foreach (KeyValuePair<string, string> entry in project.GlobalProperties)
+            _globalProperties = new PropertyDictionary<ProjectPropertyInstance>(project.GlobalPropertiesCount);
+            foreach (KeyValuePair<string, string> entry in project.GlobalPropertiesEnumerable)
             {
                 _globalProperties[entry.Key] = ProjectPropertyInstance.Create(entry.Key, entry.Value);
             }
diff --git a/src/Build/Construction/ProjectItemDefinitionGroupElement.cs b/src/Build/Construction/ProjectItemDefinitionGroupElement.cs
index 29627027867..f55a6a0b1f5 100644
--- a/src/Build/Construction/ProjectItemDefinitionGroupElement.cs
+++ b/src/Build/Construction/ProjectItemDefinitionGroupElement.cs
@@ -30,7 +30,7 @@ internal ProjectItemDefinitionGroupElement(ProjectItemDefinitionGroupElementLink
         /// <summary>
         /// Initialize a parented ProjectItemDefinitionGroupElement
         /// </summary>
-        internal ProjectItemDefinitionGroupElement(XmlElement xmlElement, ProjectRootElement parent, ProjectRootElement containingProject)
+        internal ProjectItemDefinitionGroupElement(XmlElement xmlElement, ProjectElementContainer parent, ProjectRootElement containingProject)
             : base(xmlElement, parent, containingProject)
         {
             ErrorUtilities.VerifyThrowArgumentNull(parent, nameof(parent));
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 294b523e07e..254d11158b4 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -600,6 +600,21 @@ private enum BuildEnabledSetting
         /// </remarks>
         public IDictionary<string, string> GlobalProperties => implementation.GlobalProperties;
 
+        /// <summary>
+        /// Indicates whether the global properties dictionary contains the specified key.
+        /// </summary>
+        internal bool GlobalPropertiesContains(string key) => implementation.GlobalPropertiesContains(key);
+
+        /// <summary>
+        /// Indicates how many elements are in the global properties dictionary.
+        /// </summary>
+        internal int GlobalPropertiesCount => implementation.GlobalPropertiesCount();
+
+        /// <summary>
+        /// Enumerates the values in the global properties dictionary.
+        /// </summary>
+        internal IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable => implementation.GlobalPropertiesEnumerable();
+
         /// <summary>
         /// Item types in this project.
         /// This is an ordered collection.
@@ -2087,6 +2102,37 @@ public override bool IsDirty
                 }
             }
 
+            /// <summary>
+            /// See <see cref="ProjectLink.GlobalPropertiesContains(string)"/>.
+            /// </summary>
+            /// <param name="key">The key to check for its value.</param>
+            /// <returns>Whether the key is in the global properties dictionary.</returns>
+            public override bool GlobalPropertiesContains(string key)
+            {
+                return _data.GlobalPropertiesDictionary.Contains(key);
+            }
+
+            /// <summary>
+            /// See <see cref="ProjectLink.GlobalPropertiesCount()"/>.
+            /// </summary>
+            /// <returns>The number of properties in the global properties dictionary</returns>
+            public override int GlobalPropertiesCount()
+            {
+                return _data.GlobalPropertiesDictionary.Count;
+            }
+
+            /// <summary>
+            /// See <see cref="ProjectLink.GlobalPropertiesEnumerable()"/>.
+            /// </summary>
+            /// <returns>An IEnumerable of the keys and values of the global properties dictionary</returns>
+            public override IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable()
+            {
+                foreach (ProjectPropertyInstance property in _data.GlobalPropertiesDictionary)
+                {
+                    yield return new KeyValuePair<string, string>(property.Name, ((IProperty)property).EvaluatedValueEscaped);
+                }
+            }
+
             /// <summary>
             /// Read only dictionary of the global properties used in the evaluation
             /// of this project.
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 240fbd0d77f..838e95574fc 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -2592,12 +2592,12 @@ private static bool HasEquivalentGlobalPropertiesAndToolsVersion(Project project
                     return false;
                 }
 
-                if (project.GlobalProperties.Count != globalProperties.Count)
+                if (project.GlobalPropertiesCount != globalProperties.Count)
                 {
                     return false;
                 }
 
-                foreach (KeyValuePair<string, string> leftProperty in project.GlobalProperties)
+                foreach (KeyValuePair<string, string> leftProperty in project.GlobalPropertiesEnumerable)
                 {
                     if (!globalProperties.TryGetValue(leftProperty.Key, out var rightValue))
                     {
diff --git a/src/Build/Definition/ProjectProperty.cs b/src/Build/Definition/ProjectProperty.cs
index 157fc4366ec..e03454a5f7d 100644
--- a/src/Build/Definition/ProjectProperty.cs
+++ b/src/Build/Definition/ProjectProperty.cs
@@ -98,7 +98,7 @@ string IProperty.EvaluatedValueEscaped
             [DebuggerStepThrough]
             get
             {
-                if (this is EnvironmentDerivedProjectProperty environmentProperty && environmentProperty.loggingContext is { IsValid: true } loggingContext && !environmentProperty._loggedEnvProperty)
+                if (this is EnvironmentDerivedProjectProperty environmentProperty && environmentProperty.loggingContext is { IsValid: true } loggingContext && !environmentProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)
                 {
                     EnvironmentVariableReadEventArgs args = new(Name, EvaluatedValueEscapedInternal);
                     args.BuildEventContext = loggingContext.BuildEventContext;
@@ -596,7 +596,7 @@ public override bool IsGlobalProperty
             {
                 [DebuggerStepThrough]
                 get
-                { return _project.GlobalProperties.ContainsKey(Name); }
+                { return _project.GlobalPropertiesContains(Name); }
             }
 
             /// <summary>
diff --git a/src/Build/Definition/ToolsetReader.cs b/src/Build/Definition/ToolsetReader.cs
index ddb164cb778..f2393bfcbc1 100644
--- a/src/Build/Definition/ToolsetReader.cs
+++ b/src/Build/Definition/ToolsetReader.cs
@@ -439,10 +439,15 @@ bool accumulateProperties
                     Toolset toolset = ReadToolset(toolsVersion, globalProperties, initialPropertiesClone, accumulateProperties);
 
                     // Register toolset paths into list of immutable directories
-                    //   example: C:\Windows\Microsoft.NET\Framework\v4.0.30319\
-                    FileClassifier.Shared.RegisterImmutableDirectory(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath32")?.EvaluatedValue?.Trim());
-                    // example:  C:\Windows\Microsoft.NET\Framework64\v4.0.30319\
-                    FileClassifier.Shared.RegisterImmutableDirectory(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath64")?.EvaluatedValue?.Trim());
+                    // example: C:\Windows\Microsoft.NET\Framework
+                    string frameworksPathPrefix32 = existingRootOrNull(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath32")?.EvaluatedValue?.Trim());
+                    FileClassifier.Shared.RegisterImmutableDirectory(frameworksPathPrefix32);
+                    // example: C:\Windows\Microsoft.NET\Framework64
+                    string frameworksPathPrefix64 = existingRootOrNull(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPath64")?.EvaluatedValue?.Trim());
+                    FileClassifier.Shared.RegisterImmutableDirectory(frameworksPathPrefix64);
+                    // example: C:\Windows\Microsoft.NET\FrameworkArm64
+                    string frameworksPathPrefixArm64 = existingRootOrNull(initialPropertiesClone.GetProperty("MSBuildFrameworkToolsPathArm64")?.EvaluatedValue?.Trim());
+                    FileClassifier.Shared.RegisterImmutableDirectory(frameworksPathPrefixArm64);
 
                     if (toolset != null)
                     {
@@ -450,6 +455,28 @@ bool accumulateProperties
                     }
                 }
             }
+
+            string existingRootOrNull(string path)
+            {
+                if (!string.IsNullOrEmpty(path))
+                {
+                    try
+                    {
+                        path = Directory.GetParent(FileUtilities.EnsureNoTrailingSlash(path))?.FullName;
+
+                        if (!Directory.Exists(path))
+                        {
+                            path = null;
+                        }
+                    }
+                    catch
+                    {
+                        path = null;
+                    }
+                }
+
+                return path;
+            }
         }
 
         /// <summary>
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 6a99407a70a..1ee727c33ea 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -824,8 +824,11 @@ private IEnumerable FilterOutEnvironmentDerivedProperties(PropertyDictionary<P>
             List<P> list = new(dictionary.Count);
             foreach (P p in dictionary)
             {
-                if (p is EnvironmentDerivedProjectPropertyInstance ||
-                    (p is ProjectProperty pp && pp.IsEnvironmentProperty))
+                // This checks if a property was derived from the environment but is not one of the well-known environment variables we
+                // use to change build behavior.
+                if ((p is EnvironmentDerivedProjectPropertyInstance ||
+                    (p is ProjectProperty pp && pp.IsEnvironmentProperty)) &&
+                    !EnvironmentUtilities.IsWellKnownEnvironmentDerivedProperty(p.Name))
                 {
                     continue;
                 }
@@ -1539,6 +1542,9 @@ private bool EvaluateWhenOrOtherwiseChildren(IEnumerable<ProjectElement> childre
                         case ProjectChooseElement choose:
                             EvaluateChooseElement(choose);
                             break;
+                        case ProjectItemDefinitionGroupElement itemDefinition:
+                            _itemDefinitionGroupElements.Add(itemDefinition);
+                            break;
                         default:
                             ErrorUtilities.ThrowInternalError("Unexpected child type");
                             break;
diff --git a/src/Build/Evaluation/ProjectParser.cs b/src/Build/Evaluation/ProjectParser.cs
index 3b8c3f99a6f..6959e3709b0 100644
--- a/src/Build/Evaluation/ProjectParser.cs
+++ b/src/Build/Evaluation/ProjectParser.cs
@@ -181,7 +181,7 @@ private void Parse()
                         break;
 
                     case XMakeElements.itemDefinitionGroup:
-                        _project.AppendParentedChildNoChecks(ParseProjectItemDefinitionGroupElement(childElement));
+                        _project.AppendParentedChildNoChecks(ParseProjectItemDefinitionGroupElement(childElement, _project));
                         break;
 
                     case XMakeElements.choose:
@@ -709,11 +709,11 @@ private ProjectOutputElement ParseProjectOutputElement(XmlElementWithLocation el
         /// <summary>
         /// Parse a ProjectItemDefinitionGroupElement
         /// </summary>
-        private ProjectItemDefinitionGroupElement ParseProjectItemDefinitionGroupElement(XmlElementWithLocation element)
+        private ProjectItemDefinitionGroupElement ParseProjectItemDefinitionGroupElement(XmlElementWithLocation element, ProjectElementContainer parent)
         {
             ProjectXmlUtilities.VerifyThrowProjectAttributes(element, ValidAttributesOnlyConditionAndLabel);
 
-            ProjectItemDefinitionGroupElement itemDefinitionGroup = new ProjectItemDefinitionGroupElement(element, _project, _project);
+            ProjectItemDefinitionGroupElement itemDefinitionGroup = new ProjectItemDefinitionGroupElement(element, parent, _project);
 
             foreach (XmlElementWithLocation childElement in ProjectXmlUtilities.GetVerifyThrowProjectChildElements(element))
             {
@@ -865,6 +865,10 @@ private void ParseWhenOtherwiseChildren(XmlElementWithLocation element, ProjectE
                         child = ParseProjectChooseElement(childElement, parent, nestingDepth);
                         break;
 
+                    case XMakeElements.itemDefinitionGroup:
+                        child = ParseProjectItemDefinitionGroupElement(childElement, parent);
+                        break;
+
                     default:
                         ProjectXmlUtilities.ThrowProjectInvalidChildElement(childElement.Name, element.Name, element.Location);
                         break;
diff --git a/src/Build/Evaluation/ProjectStringCache.cs b/src/Build/Evaluation/ProjectStringCache.cs
index ee61fc8fd4d..92d0f42062e 100644
--- a/src/Build/Evaluation/ProjectStringCache.cs
+++ b/src/Build/Evaluation/ProjectStringCache.cs
@@ -8,6 +8,7 @@
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
@@ -84,6 +85,13 @@ internal int DocumentCount
         /// </summary>
         public string Add(string key, XmlDocument document)
         {
+            // Remove string interning in ChangeWave 17.6
+            // Note: When ready to remove the ChangeWaves under 17.6, please delete this entire class and all references to it. (See the PR https://github.com/dotnet/msbuild/pull/7952).
+            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6))
+            {
+                return key;
+            }
+
             if (key.Length == 0)
             {
                 return String.Empty;
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index 3a253dbc5a8..de9f9d01451 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -352,8 +352,8 @@ public ProjectInstance(Project project, ProjectInstanceSettings settings)
 
             this.CreateEvaluatedIncludeSnapshotIfRequested(keepEvaluationCache, project.Items, projectItemToInstanceMap);
 
-            _globalProperties = new PropertyDictionary<ProjectPropertyInstance>(project.GlobalProperties.Count);
-            foreach (var property in project.GlobalProperties)
+            _globalProperties = new PropertyDictionary<ProjectPropertyInstance>(project.GlobalPropertiesCount);
+            foreach (var property in project.GlobalPropertiesEnumerable)
             {
                 _globalProperties.Set(ProjectPropertyInstance.Create(property.Key, property.Value));
             }
diff --git a/src/Build/Instance/ProjectPropertyInstance.cs b/src/Build/Instance/ProjectPropertyInstance.cs
index c6fd6293e5d..ed7337062c5 100644
--- a/src/Build/Instance/ProjectPropertyInstance.cs
+++ b/src/Build/Instance/ProjectPropertyInstance.cs
@@ -90,7 +90,7 @@ string IProperty.EvaluatedValueEscaped
         {
             get
             {
-                if (this is EnvironmentDerivedProjectPropertyInstance envProperty && envProperty.loggingContext?.IsValid == true && !envProperty._loggedEnvProperty)
+                if (this is EnvironmentDerivedProjectPropertyInstance envProperty && envProperty.loggingContext?.IsValid == true && !envProperty._loggedEnvProperty && !Traits.LogAllEnvironmentVariables)
                 {
                     EnvironmentVariableReadEventArgs args = new(Name, _escapedValue);
                     args.BuildEventContext = envProperty.loggingContext.BuildEventContext;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 941cfccfc06..46f8eb085de 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -6,6 +6,7 @@
 using System.Collections.Generic;
 using System.Globalization;
 using System.IO;
+using System.Linq;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
@@ -253,7 +254,7 @@ private void Write(BuildStartedEventArgs e)
             }
             else
             {
-                Write(0);
+                Write(e.BuildEnvironment?.Where(kvp => EnvironmentUtilities.IsWellKnownEnvironmentDerivedProperty(kvp.Key)));
             }
         }
 
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 6e16da044d7..3d184b648f1 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -12,6 +12,7 @@
 using ColorSetter = Microsoft.Build.Logging.ColorSetter;
 using ColorResetter = Microsoft.Build.Logging.ColorResetter;
 using WriteHandler = Microsoft.Build.Logging.WriteHandler;
+using System.Linq;
 
 #nullable disable
 
@@ -235,6 +236,10 @@ public override void BuildStartedHandler(object sender, BuildStartedEventArgs e)
             {
                 WriteEnvironment(e.BuildEnvironment);
             }
+            else
+            {
+                WriteEnvironment(e.BuildEnvironment?.Where(kvp => EnvironmentUtilities.IsWellKnownEnvironmentDerivedProperty(kvp.Key)).ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
+            }
         }
 
         /// <summary>
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index bbfc1978a44..abb9c752d78 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -11,6 +11,7 @@
 using ColorSetter = Microsoft.Build.Logging.ColorSetter;
 using ColorResetter = Microsoft.Build.Logging.ColorResetter;
 using WriteHandler = Microsoft.Build.Logging.WriteHandler;
+using System.Linq;
 
 #nullable disable
 
@@ -112,6 +113,10 @@ public override void BuildStartedHandler(object sender, BuildStartedEventArgs e)
             {
                 WriteEnvironment(e.BuildEnvironment);
             }
+            else
+            {
+                WriteEnvironment(e.BuildEnvironment?.Where(kvp => EnvironmentUtilities.IsWellKnownEnvironmentDerivedProperty(kvp.Key)).ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
+            }
         }
 
         /// <summary>
diff --git a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs
index 68e3609784b..03f7a8795a5 100644
--- a/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs
+++ b/src/Build/ObjectModelRemoting/DefinitionObjectsLinks/ProjectLink.cs
@@ -259,5 +259,27 @@ public abstract class ProjectLink
         /// Called by the local project collection to indicate to this project that it is no longer loaded.
         /// </summary>
         public abstract void Unload();
+
+        /// <summary>
+        /// Indicates whether a specified key is in the global properties dictionary. This provides a default implementation
+        /// to avoid a breaking change, but it is often overriden for performance.
+        /// </summary>
+        /// <param name="key">The key to check for in the dictionary</param>
+        /// <returns>True if the key is in the global properties; false otherwise</returns>
+        public virtual bool GlobalPropertiesContains(string key) => GlobalProperties.ContainsKey(key);
+
+        /// <summary>
+        /// Indicates how many properties are in the global properties dictionary. This provides a default implementation to
+        /// avoid a breaking change, but it is often overriden for performance.
+        /// </summary>
+        /// <returns>The number of properties in the global properties dictionary</returns>
+        public virtual int GlobalPropertiesCount() => GlobalProperties.Count;
+
+        /// <summary>
+        /// Allows enumeration over the keys and values in the global properties dictionary. This provides a default
+        /// implementation to avoid a breaking change, but it can be overriden for performance.
+        /// </summary>
+        /// <returns>An enumerable of the keys and values in the global properties dictionary</returns>
+        public virtual IEnumerable<KeyValuePair<string, string>> GlobalPropertiesEnumerable() => GlobalProperties;
     }
 }
diff --git a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
index 47780d37b51..57af35851fb 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -19,3 +19,6 @@ Microsoft.Build.Experimental.OutOfProcServerNode.BuildCallback
 Microsoft.Build.Experimental.OutOfProcServerNode.OutOfProcServerNode(Microsoft.Build.Experimental.OutOfProcServerNode.BuildCallback buildFunction) -> void
 Microsoft.Build.Experimental.OutOfProcServerNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
 static Microsoft.Build.Experimental.MSBuildClient.ShutdownServer(System.Threading.CancellationToken cancellationToken) -> bool
+virtual Microsoft.Build.ObjectModelRemoting.ProjectLink.GlobalPropertiesContains(string key) -> bool
+virtual Microsoft.Build.ObjectModelRemoting.ProjectLink.GlobalPropertiesCount() -> int
+virtual Microsoft.Build.ObjectModelRemoting.ProjectLink.GlobalPropertiesEnumerable() -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index 42acd772719..05446d8617c 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -19,4 +19,6 @@ Microsoft.Build.Experimental.OutOfProcServerNode.BuildCallback
 Microsoft.Build.Experimental.OutOfProcServerNode.OutOfProcServerNode(Microsoft.Build.Experimental.OutOfProcServerNode.BuildCallback buildFunction) -> void
 Microsoft.Build.Experimental.OutOfProcServerNode.Run(out System.Exception shutdownException) -> Microsoft.Build.Execution.NodeEngineShutdownReason
 static Microsoft.Build.Experimental.MSBuildClient.ShutdownServer(System.Threading.CancellationToken cancellationToken) -> bool
-
+virtual Microsoft.Build.ObjectModelRemoting.ProjectLink.GlobalPropertiesContains(string key) -> bool
+virtual Microsoft.Build.ObjectModelRemoting.ProjectLink.GlobalPropertiesCount() -> int
+virtual Microsoft.Build.ObjectModelRemoting.ProjectLink.GlobalPropertiesEnumerable() -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string>>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index fc0594e7c40..fc31029e3e0 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: Proměnná prostředí MSBuildDisableFeaturesFromVersion je nastavená na neplatný formát. Povolují se všechny verze vlny změn. Zadaná hodnota: {0}. Aktuální vlny změn: {1}</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: Proměnná prostředí MSBuildDisableFeaturesFromVersion je nastavená na verzi, která je mimo rotaci. Nastavuje se výchozí verze vlny změn: {0}. Zadaná hodnota: {1}. Aktuální vlny změn: {2}</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">Načítá se následující modul plug-in mezipaměti projektu:
-    {0}</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index 1972d1b88ed..1bfb8341b04 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: Die Umgebungsvariable "MSBuildDisableFeaturesFromVersion" ist auf ein ungültiges Format festgelegt. Alle Änderungszyklusversionen werden aktiviert. Eingegebener Wert: {0}. Aktuelle Änderungszyklen: {1}.</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: Die Umgebungsvariable "MSBuildDisableFeaturesFromVersion" ist auf eine nicht rotierende Version festgelegt und wird auf die Standard-Änderungszyklusversion gesetzt: {0}. Eingegebener Wert: {1}. Aktuelle Änderungszyklen: {2}.</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">Folgendes Projektcache-Plug-In wird geladen:
-    {0}</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index 6dc804fa2a4..9381108a7e8 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: La variable de entorno MSBuildDisableFeaturesFromVersion está establecida en un formato no válido. Habilitando todas las versiones de oleadas de cambios. Valor especificado: {0}. Oleadas de cambios actuales: {1}.</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: La variable de entorno MSBuildDisableFeaturesFromVersion está establecida en una versión no incluida en la rotación. Se va a cambiar a la versión de oleada de cambios de forma predeterminada: {0}. Valor especificado: {1}. Oleadas de cambios actuales: {2}.</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">Cargando el complemento de caché de proyectos siguiente:
-    {0}</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index 2ee436b993c..2b690c854dd 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: la variable d'environnement MSBuildDisableFeaturesFromVersion a un format non valide. Activation de toutes les versions des vagues de changements. Valeur entrée : {0}. Vagues de changements actuelles : {1}.</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: la variable d'environnement MSBuildDisableFeaturesFromVersion a une valeur correspondant à une version hors rotation. Utilisation par défaut de la vague de changements version {0}. Valeur entrée : {1}. Vagues de changements actuelles : {2}.</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">Chargement du plug-in de cache de projet suivant:
-    {0}</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index 8e9c2904d7a..3c0e4bd0080 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: la variabile di ambiente MSBuildDisableFeaturesFromVersion è impostata su un formato non valido. Verranno abilitate tutte le versioni con flussi di modifiche. Valore immesso: {0}. Flussi di modifiche correnti: {1}.</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: la variabile di ambiente MSBuildDisableFeaturesFromVersion è impostata su una versione esclusa dalla rotazione. Per impostazione predefinita, verrà usata la versione con flussi di modifiche: {0}. Valore immesso: {1}. Flussi di modifiche correnti: {2}.</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">Caricamento del plug-in seguente della cache del progetto:
-    {0}</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index 7affbcbed39..bedf8d61abf 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: 環境変数 MSBuildDisableFeaturesFromVersion が無効な形式に設定されています。すべての変更ウェーブ バージョンを有効にしています。入力された値: {0}。現在の変更ウェーブ: {1}。</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: 環境変数 MSBuildDisableFeaturesFromVersion が、ローテーションから外れているバージョンに設定されています。変更ウェーブ バージョンを既定値にしています: {0}。入力された値: {1}。現在の変更ウェーブ: {2}。</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">次のプロジェクト キャッシュ プラグインを読み込んでいます。
-    {0}</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index b6a55fd316f..72b26912e06 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: 환경 변수 MSBuildDisableFeaturesFromVersion이 잘못된 형식으로 설정되어 있습니다. 변경 웨이브 버전을 모두 사용하도록 설정합니다. 입력한 값: {0}. 현재 변경 웨이브: {1}.</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: 환경 변수 MSBuildDisableFeaturesFromVersion이 순환되지 않는 버전으로 설정되어 있습니다. 기본값인 변경 웨이브 버전 {0}(으)로 설정합니다. 입력한 값: {1}. 현재 변경 웨이브: {2}.</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">다음 프로젝트 캐시 플러그 인을 로드하는 중:
-    {0}</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index 45809868498..ea709e424e9 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: Zmienna środowiskowa MSBuildDisableFeaturesFromVersion ma nieprawidłowy format. Zostaną włączone wszystkie wersje fali zmian. Wprowadzona wartość: {0}. Bieżące fale zmian: {1}.</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: Zmienna środowiskowa MSBuildDisableFeaturesFromVersion ma ustawioną wersję, która została wycofana z użycia. Domyślnie zostanie użyta fala zmian w wersji: {0}. Wprowadzona wartość: {1}. Bieżące fale zmian: {2}.</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">Ładowanie następującej wtyczki pamięci podręcznej projektu: 
-    {0}</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index c537c8a988f..12559cec995 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: A variável de ambiente MSBuildDisableFeaturesFromVersion está definida com um formato inválido. Habilitando todas as versões do ciclo de alterações. Valor inserido: {0}. Ciclos de Alterações Atuais: {1}.</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: A variável de ambiente MSBuildDisableFeaturesFromVersion está definida como uma versão fora de rotação. Usando como padrão a versão do Ciclo de Alterações: {0}. Valor inserido: {1}. Ciclos de Alterações Atuais: {2}.</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">Carregando o seguinte plug-in do projeto:
-    {0}</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index 4f5cc43877f..6ca8431952b 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: для переменной среды MSBuildDisableFeaturesFromVersion задан недопустимый формат. Идет включение всех версий волн изменений. Введенное значение: {0}. Текущие волны изменений: {1}.</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: для переменной среды MSBuildDisableFeaturesFromVersion задана версия, которая больше не используется. Идет возвращение к версии волны изменений по умолчанию: {0}. Введенное значение: {1}. Текущие волны изменений: {2}.</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">Идет загрузка следующего подключаемого модуля кэша проектов:
-    {0}</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 4093eb4b5bd..1917bb7e6ce 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: MSBuildDisableFeaturesFromVersion ortam değişkeni geçersiz bir biçime ayarlandı. Tüm değişiklik dalgası sürümleri etkinleştiriliyor. Girilen değer: {0}. Geçerli Değişiklik Dalgaları: {1}.</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: MSBuildDisableFeaturesFromVersion ortam değişkeni, düzenli değişiklik dışı bir sürüme ayarlandı. Varsayılan Değişiklik Dalgası sürümüne dönülüyor: {0}. Girilen değer: {1}. Geçerli Değişiklik Dalgaları: {2}.</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">Şu proje önbelleği eklentisi yükleniyor:
-    {0}</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index 87846c55e1b..082781250dd 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: 设置的环境变量 MSBuildDisableFeaturesFromVersion 格式无效。正在启用所有更改批次版本。输入的值: {0}。当前更改批次:{1}。</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: 设置的环境变量 MSBuildDisableFeaturesFromVersion 版本不在轮换范围内。默认为“更改批次”版本: {0}。输入的值: {1}。当前更改批次: {2}。</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">正在加载以下项目缓存插件: 
-    {0}”</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index 33d70db1062..87e681bf25b 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -64,12 +64,12 @@
       </trans-unit>
       <trans-unit id="ChangeWave_InvalidFormat">
         <source>MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</source>
-        <target state="needs-review-translation">MSB4271: 環境變數 MSBuildDisableFeaturesFromVersion 設定的格式無效。正在啟用所有變更波版本。輸入的值: {0}。目前的變更波: {1}。</target>
+        <target state="new">MSB4271: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to an invalid format. Enabling all change wave versions. Entered value: {0}. Current Change Waves: {1}.</target>
         <note>{StrBegin="MSB4271: "}UE: Value should be of the format: xx.yy</note>
       </trans-unit>
       <trans-unit id="ChangeWave_OutOfRotation">
         <source>MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</source>
-        <target state="needs-review-translation">MSB4272: 環境變數 MSBuildDisableFeaturesFromVersion 已設定為無法輪替的版本。預設為變更波版本: {0}。輸入的值: {1}。目前的變更波: {2}。</target>
+        <target state="new">MSB4272: Environment variable MSBUILDDISABLEFEATURESFROMVERSION is set to a version that is out of rotation. Defaulting to Change Wave version: {0}. Entered value: {1}. Current Change Waves: {2}.</target>
         <note>{StrBegin="MSB4272: "}</note>
       </trans-unit>
       <trans-unit id="CircularDependency">
@@ -149,8 +149,7 @@
       </trans-unit>
       <trans-unit id="LoadingProjectCachePlugin">
         <source>Loading the following project cache plugin: {0}</source>
-        <target state="needs-review-translation">正在載入下列專案快取外掛程式:
-    {0}</target>
+        <target state="new">Loading the following project cache plugin: {0}</target>
         <note />
       </trans-unit>
       <trans-unit id="LogLoggerVerbosity">
diff --git a/src/Build/Xml/ProjectXmlUtilities.cs b/src/Build/Xml/ProjectXmlUtilities.cs
index 7dec7be9239..40c33d8c30b 100644
--- a/src/Build/Xml/ProjectXmlUtilities.cs
+++ b/src/Build/Xml/ProjectXmlUtilities.cs
@@ -5,11 +5,25 @@
 using System.Collections.Generic;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Construction;
+using System.IO;
+using System.Xml;
+using Microsoft.Build.Framework;
 
 #nullable disable
 
 namespace Microsoft.Build.Internal
 {
+    /// <summary>
+    /// Exception indicating that we tried to build a type of project MSBuild did not recognize.
+    /// </summary>
+    internal sealed class UnbuildableProjectTypeException : Exception
+    {
+        internal UnbuildableProjectTypeException(string file)
+            : base(file)
+        {
+        }
+    }
+
     /// <summary>
     /// Project-related Xml utilities
     /// </summary>
@@ -68,13 +82,37 @@ internal static void ThrowProjectInvalidChildElement(string name, string parentN
         /// <returns>True when the namespace is in the MSBuild namespace or no namespace.</returns>
         internal static bool VerifyValidProjectNamespace(XmlElementWithLocation element)
         {
-            return
-                // Prefix must be empty
-                element.Prefix.Length == 0 &&
+            if (element.Prefix.Length != 0)
+            {
+                return false;
+            }
+            else if (string.Equals(element.NamespaceURI, XMakeAttributes.defaultXmlNamespace, StringComparison.OrdinalIgnoreCase))
+            {
+                return true;
+            }
+            else if (string.IsNullOrEmpty(element.NamespaceURI))
+            {
+                if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_4) && Path.GetExtension(element.Location.File).Equals(".dwproj", StringComparison.OrdinalIgnoreCase))
+                {
+                    bool validMSBuildProject = true;
+                    foreach (XmlNode child in element.ChildNodes)
+                    {
+                        if (child.Name.Equals("Database", StringComparison.OrdinalIgnoreCase))
+                        {
+                            validMSBuildProject = false;
+                            throw new UnbuildableProjectTypeException(element.Location.File);
+                        }
+                    }
+
+                    return validMSBuildProject;
+                }
 
-                // Namespace must equal to the MSBuild namespace or empty
-                (string.Equals(element.NamespaceURI, XMakeAttributes.defaultXmlNamespace,
-                     StringComparison.OrdinalIgnoreCase) || string.IsNullOrEmpty(element.NamespaceURI));
+                return true;
+            }
+            else
+            {
+                return false;
+            }
         }
 
         /// <summary>
diff --git a/src/Directory.Build.props b/src/Directory.Build.props
index ee0ec04823f..e3020e9de14 100644
--- a/src/Directory.Build.props
+++ b/src/Directory.Build.props
@@ -81,7 +81,7 @@
   </PropertyGroup>
 
   <!-- Produce ONLY reference assemblies and SKIP roslyn analyzers for netstandard2.0 builds. -->
-  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0' and '$(MSBuildProjectFile)' != 'PortableTask.csproj'">
+  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0' and '$(MSBuildProjectFile)' != 'PortableTask.csproj' and '$(MSBuildProjectFile)' != 'StringTools.csproj'">
     <!-- ProduceOnlyReferenceAssembly and ProduceReferenceAssembly are mutually exclusive compiler flags. -->
     <ProduceOnlyReferenceAssembly>true</ProduceOnlyReferenceAssembly>
     <ProduceReferenceAssembly>false</ProduceReferenceAssembly>
diff --git a/src/Framework/ChangeWaves.cs b/src/Framework/ChangeWaves.cs
index deff3e26750..405747281f1 100644
--- a/src/Framework/ChangeWaves.cs
+++ b/src/Framework/ChangeWaves.cs
@@ -27,7 +27,8 @@ internal class ChangeWaves
         internal static readonly Version Wave17_0 = new Version(17, 0);
         internal static readonly Version Wave17_2 = new Version(17, 2);
         internal static readonly Version Wave17_4 = new Version(17, 4);
-        internal static readonly Version[] AllWaves = { Wave17_0, Wave17_2, Wave17_4 };
+        internal static readonly Version Wave17_6 = new Version(17, 6);
+        internal static readonly Version[] AllWaves = { Wave17_0, Wave17_2, Wave17_4, Wave17_6 };
 
         /// <summary>
         /// Special value indicating that all features behind all Change Waves should be enabled.
diff --git a/src/Framework/FileClassifier.cs b/src/Framework/FileClassifier.cs
index 5cd5303e605..a214a751443 100644
--- a/src/Framework/FileClassifier.cs
+++ b/src/Framework/FileClassifier.cs
@@ -76,17 +76,15 @@ internal class FileClassifier
         /// </remarks>
         public FileClassifier()
         {
-            string? programFiles32 = Environment.GetEnvironmentVariable("ProgramFiles(x86)");
-            string? programFiles64 = Environment.GetEnvironmentVariable("ProgramW6432");
-
-            if (!string.IsNullOrEmpty(programFiles32))
-            {
-                RegisterImmutableDirectory(Path.Combine(programFiles32, "Reference Assemblies", "Microsoft"));
-            }
-
-            if (!string.IsNullOrEmpty(programFiles64))
+            // Register Microsoft "Reference Assemblies" as immutable
+            string[] programFilesEnvs = new[] { "ProgramFiles(x86)", "ProgramW6432", "ProgramFiles(Arm)" };
+            foreach (string programFilesEnv in programFilesEnvs)
             {
-                RegisterImmutableDirectory(Path.Combine(programFiles64, "Reference Assemblies", "Microsoft"));
+                string? programFiles = Environment.GetEnvironmentVariable(programFilesEnv);
+                if (!string.IsNullOrEmpty(programFiles))
+                {
+                    RegisterImmutableDirectory(Path.Combine(programFiles, "Reference Assemblies", "Microsoft"));
+                }
             }
 
 #if !RUNTIME_TYPE_NETCORE
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index d0c29652824..6ecf54b1843 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -36,7 +36,6 @@ internal static class NativeMethods
     internal const uint RUNTIME_INFO_DONT_SHOW_ERROR_DIALOG = 0x40;
     internal const uint FILE_TYPE_CHAR = 0x0002;
     internal const Int32 STD_OUTPUT_HANDLE = -11;
-    internal const uint DISABLE_NEWLINE_AUTO_RETURN = 0x0008;
     internal const uint ENABLE_VIRTUAL_TERMINAL_PROCESSING = 0x0004;
     internal const uint RPC_S_CALLPENDING = 0x80010115;
     internal const uint E_ABORT = (uint)0x80004004;
@@ -506,16 +505,10 @@ public static int GetLogicalCoreCount()
     {
         int numberOfCpus = Environment.ProcessorCount;
 #if !MONO
-        // .NET Core on Windows returns a core count limited to the current NUMA node
+        // .NET on Windows returns a core count limited to the current NUMA node
         //     https://github.com/dotnet/runtime/issues/29686
         // so always double-check it.
-        if (IsWindows
-#if NETFRAMEWORK
-            // .NET Framework calls Windows APIs that have a core count limit (32/64 depending on process bitness).
-            // So if we get a high core count on full framework, double-check it.
-            && (numberOfCpus >= 32)
-#endif
-            )
+        if (IsWindows)
         {
             var result = GetLogicalCoreCountOnWindows();
             if (result != -1)
@@ -655,6 +648,7 @@ internal static bool IsUnixLike
     /// <summary>
     /// Gets a flag indicating if we are running under Linux
     /// </summary>
+    [SupportedOSPlatformGuard("linux")]
     internal static bool IsLinux
     {
 #if CLR2COMPATIBILITY
@@ -1470,9 +1464,16 @@ internal static void VerifyThrowWin32Result(int result)
         }
     }
 
-#endregion
+    #endregion
+
+    #region PInvoke
+    [SupportedOSPlatform("linux")]
+    [DllImport("libc", SetLastError = true)]
+    internal static extern int chmod(string pathname, int mode);
 
-#region PInvoke
+    [SupportedOSPlatform("linux")]
+    [DllImport("libc", SetLastError = true)]
+    internal static extern int mkdir(string path, int mode);
 
     /// <summary>
     /// Gets the current OEM code page which is used by console apps
diff --git a/src/MSBuild/MSBuildClientApp.cs b/src/MSBuild/MSBuildClientApp.cs
index 9177f76aa19..0fd4ea40181 100644
--- a/src/MSBuild/MSBuildClientApp.cs
+++ b/src/MSBuild/MSBuildClientApp.cs
@@ -76,6 +76,7 @@ public static MSBuildApp.ExitType Execute(
 
             if (exitResult.MSBuildClientExitType == MSBuildClientExitType.ServerBusy ||
                 exitResult.MSBuildClientExitType == MSBuildClientExitType.UnableToConnect ||
+                exitResult.MSBuildClientExitType == MSBuildClientExitType.UnknownServerState ||
                 exitResult.MSBuildClientExitType == MSBuildClientExitType.LaunchError)
             {
                 if (KnownTelemetry.BuildTelemetry != null)
diff --git a/src/MSBuild/OutOfProcTaskHostNode.cs b/src/MSBuild/OutOfProcTaskHostNode.cs
index 9ec5f525074..629d9141a93 100644
--- a/src/MSBuild/OutOfProcTaskHostNode.cs
+++ b/src/MSBuild/OutOfProcTaskHostNode.cs
@@ -792,7 +792,7 @@ private NodeEngineShutdownReason HandleShutdown()
 
             if (_debugCommunications)
             {
-                using (StreamWriter writer = File.CreateText(String.Format(CultureInfo.CurrentCulture, Path.Combine(Path.GetTempPath(), @"MSBuild_NodeShutdown_{0}.txt"), Process.GetCurrentProcess().Id)))
+                using (StreamWriter writer = File.CreateText(String.Format(CultureInfo.CurrentCulture, Path.Combine(FileUtilities.TempFileDirectory, @"MSBuild_NodeShutdown_{0}.txt"), Process.GetCurrentProcess().Id)))
                 {
                     writer.WriteLine("Node shutting down with reason {0}.", _shutdownReason);
                 }
diff --git a/src/MSBuild/Resources/xlf/Strings.cs.xlf b/src/MSBuild/Resources/xlf/Strings.cs.xlf
index 530a415387b..e4c3a357b19 100644
--- a/src/MSBuild/Resources/xlf/Strings.cs.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.cs.xlf
@@ -532,39 +532,41 @@
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleloggerparameters:&lt;parameters&gt;
-                     Parametry protokolovacího nástroje konzoly. (Krátký tvar: -clp)
-                     Dostupné parametry:
-                        PerformanceSummary – zobrazí dobu zpracování úloh, cílů
-                            a projektů.
-                        Summary – na konci zobrazí souhrn chyb a upozornění.
-                        NoSummary – na konci nezobrazí souhrny chyb
-                            a upozornění.
-                        ErrorsOnly – zobrazí jenom chyby.
-                        WarningsOnly – zobrazí jenom upozornění.
-                        NoItemAndPropertyList – nezobrazí na začátku sestavení každého
-                            projektu seznamy položek a vlastností.
-                        ShowCommandLine – zobrazí zprávy TaskCommandLineEvent.
-                        ShowTimestamp – před každou zprávou zobrazí
-                            časové razítko.
-                        ShowEventId – zobrazí ID události pro spuštěné a dokončené
-                            události a zprávy.
-                        ForceNoAlign – nenastavuje text podle velikosti vyrovnávací
-                            paměti konzoly.
-                        DisableConsoleColor – použije výchozí barvy konzoly
-                            pro všechny zprávy protokolování.
-                        DisableMPLogging – zakáže víceprocesorový styl výstupu
-                            protokolování při práci v jiném než víceprocesorovém
-                            režimu.
-                        EnableMPLogging – povolí víceprocesorový styl výstupu
-                            protokolování i při práci v jiném
-                            režimu. Tento styl protokolování je výchozí. 
-                        ForceConsoleColor – použije barvy konzoly ANSI,
-                            i když to konzola nepodporuje.
-                        Verbosity – potlačí nastavení -verbosity
-                            pro tento protokolovací nástroj.
-                     Příklad:
-                        -consoleloggerparameters:PerformanceSummary;NoSummary;
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
+                        -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </target>
         <note>
diff --git a/src/MSBuild/Resources/xlf/Strings.de.xlf b/src/MSBuild/Resources/xlf/Strings.de.xlf
index 72bbc1f7f91..01fde964f64 100644
--- a/src/MSBuild/Resources/xlf/Strings.de.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.de.xlf
@@ -529,39 +529,41 @@ Beispiel:
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleloggerparameters:&lt;Parameter&gt;
-                     Parameter für die Konsolenprotokollierung. (Kurzform: -clp)
-                     Folgende Parameter sind verfügbar:
-                        PerformanceSummary: Zeigt die in Aufgaben, Zielen und
-                            Projekten verbrachte Zeit an.
-                        Summary: Zeigt abschließend eine Zusammenfassung der Fehler und Warnungen an.
-                        NoSummary: Zeigt keine Fehler- und Warnungsübersicht am
-                            Ende an.
-                        ErrorsOnly: Zeigt nur Fehler an.
-                        WarningsOnly: Zeigt nur Warnungen an.
-                        NoItemAndPropertyList: Zeigt keine Liste der Elemente
-                            und Eigenschaften am Anfang jeder Projekterstellung an.
-                        ShowCommandLine: Zeigt TaskCommandLineEvent-Meldungen an. 
-                        ShowTimestamp: Zeigt den Timestamp als Präfix einer
-                            Meldung an.                                           
-                        ShowEventId: Zeigt die eventId für gestartete
-                            Ereignisse, abgeschlossene Ereignisse und Meldungen an.
-                        ForceNoAlign: Richtet den Text nicht an der Größe des
-                            Konsolenpuffers aus.
-                        DisableConsoleColor: Verwendet die Standardkonsolenfarben
-                            für alle Protokollierungsmeldungen.
-                        DisableMPLogging: Deaktiviert die Ausgabe wie
-                            bei der Mehrprozessorprotokollierung im Modus mit nur einem Prozessor.
-                        EnableMPLogging: Aktiviert das Format der
-                            Mehrprozessorprotokollierung auch bei der Ausführung
-                            im Modus mit nur einem Prozessor. Dieses Protokollierungsformat ist standardmäßig aktiviert. 
-                        ForceConsoleColor: Verwendet selbst dann
-                            ANSI-Konsolenfarben, wenn
-                            die Konsole dies nicht unterstützt.
-                        Verbosity: Überschreibt die Einstellung für -verbosity für 
-                            diese Protokollierung.
-                     Beispiel:
-                        -consoleloggerparameters:PerformanceSummary;NoSummary;
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
+                        -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </target>
         <note>
diff --git a/src/MSBuild/Resources/xlf/Strings.es.xlf b/src/MSBuild/Resources/xlf/Strings.es.xlf
index ca5dce5d065..ce2b43e9108 100644
--- a/src/MSBuild/Resources/xlf/Strings.es.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.es.xlf
@@ -533,38 +533,40 @@
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleLoggerParameters:&lt;parámetros&gt;
-                     Parámetros del registrador de consola. (Forma corta: -clp)
-                     Los parámetros disponibles son:
-                        PerformanceSummary: muestra el tiempo empleado en tareas, destinos
-                            y proyectos.
-                        Summary: muestra un resumen de errores y advertencias al final.
-                        NoSummary: no muestra el resumen de errores y advertencias al
-                            final.
-                        ErrorsOnly: muestra solo errores.
-                        WarningsOnly: muestra solo advertencias.
-                        NoItemAndPropertyList: no muestra la lista de elementos y
-                            propiedades al principio de cada compilación del proyecto.
-                        ShowCommandLine: muestra los mensajes de TaskCommandLineEvent
-                        ShowTimestamp: muestra la marca de tiempo como un prefijo en los
-                            mensajes.
-                        ShowEventId: muestra el identificador de evento para los eventos iniciados, los eventos 
-                            finalizados y los mensajes.
-                        ForceNoAlign: no alinea el texto al tamaño del
-                            búfer de la consola
-                        DisableConsoleColor: usa los colores de consola predeterminados
-                            para todos los mensajes de registro.
-                        DisableMPLogging: deshabilita el estilo de registro de resultados
-                            de multiprocesador al ejecutarse en el
-                            modo de no multiprocesador.
-                        EnableMPLogging: habilita el estilo de registro de
-                            multiprocesador aunque se ejecute en el modo de
-                            no multiprocesador. Este estilo de registro está habilitado de forma predeterminada.
-                     ForceConsoleColor: usa los colores de consola ANSI incluso si
-                            la consola no lo admite.
-                        Verbosity: invalida el valor -verbosity para este
-                            registrador.
-                     Ejemplo:
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </target>
diff --git a/src/MSBuild/Resources/xlf/Strings.fr.xlf b/src/MSBuild/Resources/xlf/Strings.fr.xlf
index 1cc0eb9a78d..036ffce86e7 100644
--- a/src/MSBuild/Resources/xlf/Strings.fr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.fr.xlf
@@ -529,40 +529,42 @@
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleLoggerParameters:&lt;paramètres&gt;
-         Paramètres du journaliseur de la console. (Forme abrégée : -clp)
-         Paramètres disponibles :
-            PerformanceSummary--Affiche la durée des tâches, des cibles
-                et des projets.
-            Summary--Récapitulatif des erreurs et des avertissements à la fin.
-            NoSummary--Aucun récapitulatif des erreurs et des avertissements
-                à la fin.
-            ErrorsOnly--Affiche uniquement les erreurs.
-            WarningsOnly--Affiche uniquement les avertissements.
-            NoItemAndPropertyList--N'affiche pas la liste des éléments et
-                des propriétés au début de chaque build de projet.
-            ShowCommandLine--Affiche les messages de TaskCommandLineEvent
-            ShowTimestamp--Affiche l'horodatage en tant que préfixe des
-                messages.
-            ShowEventId--Affiche eventId pour les événements démarrés et
-                achevés ainsi que les messages
-            ForceNoAlign--N'aligne pas le texte par rapport à la taille de la
-                mémoire tampon de la console
-            DisableConsoleColor--Utilise les couleurs de la console par défaut
-                pour tous les messages de journalisation.
-            DisableMPLogging--Désactive le style de journalisation
-                multiprocesseur de la sortie durant l'exécution en
-                mode non multiprocesseur.
-            EnableMPLogging--Active le style de journalisation multiprocesseur
-                même durant l'exécution en mode non
-                multiprocesseur. Style de journalisation activé par défaut.
-            ForceConsoleColor--Utilise les couleurs de la console ANSI même si
-                cela n'est pas pris en charge par la console
-            Verbosity--Remplace le paramètre -verbosity pour ce
-                journaliseur.
-         Exemple :
-            -consoleLoggerParameters:PerformanceSummary;NoSummary;
-                         Verbosity=minimal
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
+                        -consoleLoggerParameters:PerformanceSummary;NoSummary;
+                                                 Verbosity=minimal
 </target>
         <note>
       LOCALIZATION: The following should not be localized:
diff --git a/src/MSBuild/Resources/xlf/Strings.it.xlf b/src/MSBuild/Resources/xlf/Strings.it.xlf
index 627508ca24d..c5d51c27d67 100644
--- a/src/MSBuild/Resources/xlf/Strings.it.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.it.xlf
@@ -539,48 +539,42 @@ Esempio:
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleLoggerParameters:&lt;parametri&gt;
-                      Parametri per il logger di console. Forma breve: -clp.
-                      I parametri disponibili sono:
-                      PerformanceSummary: indica il tempo impiegato per le
-                      attività, le destinazioni e i progetti.
-                      Summary: visualizza un riepilogo degli errori e degli
-                      avvisi alla fine.
-                      NoSummary: non visualizza un riepilogo degli errori e
-                      degli avvisi alla fine.
-                      ErrorsOnly: visualizza solo gli errori.
-                      WarningsOnly: visualizza solo gli avvisi.
-                      NoItemAndPropertyList: non visualizza l'elenco di
-                      elementi e proprietà all'inizio
-                      di ogni compilazione del
-                      progetto.
-                      ShowCommandLine: visualizza i messaggi
-                      TaskCommandLineEvent.
-                      ShowTimestamp: visualizza il timestamp sotto forma di
-                      prefisso per ogni messaggio.
-                      ShowEventId: mostra l'ID evento per gli eventi iniziati,
-                      gli eventi finiti e i messaggi.
-                      ForceNoAlign: non allinea il testo alle dimensioni del
-                      buffer della console.
-                      DisableConsoleColor: usa i colori predefiniti della
-                      console per tutti i messaggi di
-                      registrazione.
-                      DisableMPLogging: disabilita lo stile di registrazione
-                      multiprocessore dell'output quando è
-                      in esecuzione in modalità non-
-                      multiprocessore.
-                      EnableMPLogging: abilita lo stile di registrazione
-                      multiprocessore anche quando è in
-                      esecuzione in modalità non-
-                      multiprocessore. Si tratta dello stile
-                      di registrazione predefinito.
-                      ForceConsoleColor: usa i colori della console ANSI anche
-                      se non sono supportati dalla console.
-                      Verbosity: esegue l'override dell'impostazione
-                      -verbosity per questo logger.
-                      Esempio:
-                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
-                                                  Verbosity=minimal
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
+                        -consoleLoggerParameters:PerformanceSummary;NoSummary;
+                                                 Verbosity=minimal
 </target>
         <note>
       LOCALIZATION: The following should not be localized:
diff --git a/src/MSBuild/Resources/xlf/Strings.ja.xlf b/src/MSBuild/Resources/xlf/Strings.ja.xlf
index e932e579b73..d7c6bcba3c4 100644
--- a/src/MSBuild/Resources/xlf/Strings.ja.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ja.xlf
@@ -529,38 +529,40 @@
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleLoggerParameters:&lt;parameters&gt;
-                     コンソール ロガーへのパラメーターです。(短縮形: -clp)
-                     利用可能なパラメーター:
-                        PerformanceSummary--タスク、ターゲット、プロジェクトにかかった時間を
-                            表示します。
-                        Summary--最後にエラーと警告の概要を表示します。
-                        NoSummary--最後にエラーと警告の概要を表示
-                            しません。
-                        ErrorsOnly--エラーのみを表示します。
-                        WarningsOnly--警告のみを表示します。
-                        NoItemAndPropertyList--各プロジェクトのビルド開始時に、
-                            項目とプロパティのリストを表示しません。
-                        ShowCommandLine--TaskCommandLineEvent メッセージを表示します
-                        ShowTimestamp--Timestamp を任意のメッセージへのプレフィックスとして
-                            表示します。
-                        ShowEventId--開始されたイベント、終了したイベント、
-                            メッセージの eventId を表示します。
-                        ForceNoAlign--テキストを、コンソール バッファーの
-                            サイズに合わせません
-                        DisableConsoleColor--すべてのログ メッセージに対して
-                            既定のコンソール カラーを使用します。
-                        DisableMPLogging-- 非マルチプロセッサ モードで
-                            実行する際、マルチプロセッサの
-                            出力ログ形式を無効にします。
-                        EnableMPLogging--非マルチプロセッサ モードで
-                            実行する場合も、マルチプロセッサのログ形式を有効にします。
-                            このログ形式は、既定で有効です。
-                        ForceConsoleColor--コンソールでサポートされていない場合でも、
-                            ANSI コンソール カラーを使用します。
-                        Verbosity--このロガーの -verbosity 設定を
-                            上書きします。
-                     例:
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ko.xlf b/src/MSBuild/Resources/xlf/Strings.ko.xlf
index 25e7d561e6c..09336c091e9 100644
--- a/src/MSBuild/Resources/xlf/Strings.ko.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ko.xlf
@@ -529,38 +529,40 @@
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleLoggerParameters:&lt;parameters&gt;
-                     콘솔 로거에 대한 매개 변수입니다. (약식: -clp)
-                     사용 가능한 매개 변수는 다음과 같습니다.
-                        PerformanceSummary--작업, 대상 및 프로젝트에서 소요된 시간을 
-                            표시합니다.
-                        Summary--종료 시 오류 및 경고 요약을 표시합니다.
-                        NoSummary--종료 시 오류 및 경고 요약을 표시하지 
-                            않습니다.
-                        ErrorsOnly--오류만 표시합니다.
-                        WarningsOnly--경고만 표시합니다.
-                        NoItemAndPropertyList--각 프로젝트 빌드를 시작할 때 항목 및 속성 목록을 
-                            표시하지 않습니다.
-                        ShowCommandLine--TaskCommandLineEvent 메시지를 표시합니다.
-                        ShowTimestamp--메시지 접두사로 타임스탬프를 
-                            표시합니다.
-                        ShowEventId--시작된 이벤트 완료된 이벤트 및 메시지의 eventId를 
-                            표시합니다.
-                        ForceNoAlign--콘솔 버퍼 크기에 텍스트를 맞추지 
-                            않습니다.
-                        DisableConsoleColor--모든 로깅 메시지에 기본 콘솔 색을 
-                            사용합니다.
-                        DisableMPLogging--다중 프로세서가 아닌 모드에서 실행할 경우 
-                            출력의 다중 프로세서 로깅 스타일을 
-                            사용하지 않도록 설정합니다.
-                        EnableMPLogging--다중 프로세서가 아닌 모드에서 실행할 경우에도 
-                            다중 프로세서 로깅 스타일을 사용하도록 설정합니다.
-                            이 로깅 스타일은 기본적으로 켜집니다.
-                        ForceConsoleColor--콘솔에서 지원하지 않더라도 ANSI 콘솔 색을 
-                            사용합니다
-                        Verbosity--이 로거에 대한 -verbosity 설정을 
-                            재정의합니다.
-                     예:
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </target>
diff --git a/src/MSBuild/Resources/xlf/Strings.pl.xlf b/src/MSBuild/Resources/xlf/Strings.pl.xlf
index 24d8dec7006..66fd0fad124 100644
--- a/src/MSBuild/Resources/xlf/Strings.pl.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pl.xlf
@@ -539,40 +539,40 @@
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleLoggerParameters:&lt;parametry&gt;
-                     Parametry rejestratora konsoli. (Krótka wersja: -clp)
-                     Dostępne parametry:
-                        PerformanceSummary — pokazuje czas spędzony
-                        na zadaniach, elementach docelowych i projektach.
-                        Summary — pokazuje na końcu podsumowanie błędów i ostrzeżeń.
-                        NoSummary — nie pokazuje na końcu podsumowania błędów
-                        i ostrzeżeń.
-                        ErrorsOnly — pokazuje tylko błędy.
-                        WarningsOnly — pokazuje tylko ostrzeżenia.
-                        NoItemAndPropertyList — nie pokazuje listy elementów
-                        i właściwości na początku każdej kompilacji projektu.    
-                        ShowCommandLine — pokazuje komunikaty
-                        TaskCommandLineEvent.
-                        ShowTimestamp — wyświetla sygnaturę czasową jako
-                        prefiks każdego komunikatu.                                           
-                        ShowEventId — pokazuje identyfikator zdarzenia dla
-                        rozpoczętych zdarzeń, zakończonych zdarzeń
-                        i komunikatów.
-                        ForceNoAlign — nie dopasowuje tekstu do rozmiaru
-                        buforu konsoli.
-                        DisableConsoleColor — używa domyślnych kolorów konsoli
-                            dla wszystkich komunikatów dotyczących rejestrowania.
-                        DisableMPLogging — wyłącza styl rejestrowania
-                        wieloprocesorowego wyników podczas działania w trybie
-                        jednoprocesorowym.
-                        EnableMPLogging — włącza styl rejestrowania
-                        wieloprocesorowego nawet podczas działania w trybie
-                        jednoprocesorowym. Ten styl rejestrowania jest włączony domyślnie. 
-                        ForceConsoleColor — używa kolorów konsoli ANSI nawet wtedy,
-                            gdy konsola ich nie obsługuje.
-                        Verbosity — przesłania ustawienie -verbosity dla tego
-                        rejestratora.
-                     Przykład:
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </target>
diff --git a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
index 5f2722a9a4c..afd2b258ab6 100644
--- a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
@@ -530,38 +530,40 @@ isoladamente.
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleLoggerParameters:&lt;parameters&gt;
-                     Parâmetros do agente do console. (Forma abreviada: -clp)
-                     Os parâmetros disponíveis são:
-                        PerformanceSummary – mostrar o tempo gasto nas tarefas, nos destinos
-                            e nos projetos.
-                        Summary – mostrar o resumo de erros e avisos no final.
-                        NoSummary – não mostrar o resumo de erros e avisos no
-                            final.
-                        ErrorsOnly – mostrar somente os erros.
-                        WarningsOnly – mostrar somente os avisos.
-                        NoItemAndPropertyList – não mostrar a lista de itens e de
-                            propriedades no início de cada build do projeto.
-                        ShowCommandLine – mostrar as mensagens de TaskCommandLineEvent
-                        ShowTimestamp – exibir o Carimbo de data/hora como um prefixo em todas as
-                            mensagens.
-                        ShowEventId – mostrar eventId para eventos iniciados, eventos
-                            concluídos e mensagens
-                        ForceNoAlign – não alinhar o texto ao tamanho do
-                            buffer do console
-                        DisableConsoleColor – usar as cores padrão do console
-                            para todas as mensagens de registro em log.
-                        DisableMPLogging – desabilitar o estilo de saída do registro em log do
-                            multiprocessador quando executado no
-                            modo não multiprocessador.
-                        EnableMPLogging – habilitar o estilo de registro em log do
-                            multiprocessador mesmo quando executado no modo não
-                            multiprocessador. Esse estilo de registro em log é habilitado por padrão.
-                        ForceConsoleColor – usar as cores ANSI do console mesmo se
-                            o console não for compatível com elas
-                        Verbosity – substitui as configurações de -verbosity deste
-                            agente.
-                     Exemplo:
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ru.xlf b/src/MSBuild/Resources/xlf/Strings.ru.xlf
index 24a686a7a52..4bd08bac67e 100644
--- a/src/MSBuild/Resources/xlf/Strings.ru.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ru.xlf
@@ -528,38 +528,40 @@
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleLoggerParameters:&lt;параметры&gt;
-                     Параметры журнала консоли. (Краткая форма: -clp)
-                     Доступны следующие параметры:
-                        PerformanceSummary--выводить время, затраченное на выполнение задач,
-                            целевых объектов и  проектов.
-                        Summary--выводить сводку ошибок и предупреждений по завершении работы.
-                        NoSummary--не выводить сводку ошибок и предупреждений по
-                            завершении работы.
-                        ErrorsOnly--выводить только ошибки.
-                        WarningsOnly--выводить только предупреждения.
-                        NoItemAndPropertyList--не отображать список элементов и
-                            свойств в начале сборки каждого проекта.
-                        ShowCommandLine--выводить сообщения TaskCommandLineEvent
-                        ShowTimestamp--выводить метку времени в качестве префикса к любому
-                            сообщению.
-                        ShowEventId--выводить код события eventId для запущенных событий,
-                            завершенных событий и сообщений
-                        ForceNoAlign--не выравнивать текст относительно размера
-                            буфера консоли
-                        DisableConsoleColor--использовать цвета консоли по умолчанию
-                            для всех сообщений ведения журнала.
-                        DisableMPLogging--отключить многопроцессорный
-                            стиль ведения журнала выходных данных при работе в
-                            режиме, отличном от многопроцессорного.
-                        EnableMPLogging--включить многопроцессорный стиль ведения журнала
-                            даже при работе в режиме, отличном от
-                            многопроцессорного. Этот стиль ведения журнала включен по умолчанию.
-                        ForceConsoleColor--использовать ANSI-цвета в консоли, даже если
-                            она не поддерживает их
-                        Verbosity--переопределяет параметр -verbosity (уровень детализации) для этого
-                            журнала.
-                     Пример:
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </target>
diff --git a/src/MSBuild/Resources/xlf/Strings.tr.xlf b/src/MSBuild/Resources/xlf/Strings.tr.xlf
index e406f6c67cf..c894592e76d 100644
--- a/src/MSBuild/Resources/xlf/Strings.tr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.tr.xlf
@@ -529,39 +529,41 @@
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleLoggerParameters:&lt;parametreler&gt;
-                     Konsol günlükçüsü için parametreler. (Kısa biçim: -clp)
-                     Kullanılabilir parametreler:
-                        PerformanceSummary--Görevlerde, hedeflerde ve 
-                            projelerde harcanan süreyi göster.
-                        Summary--Sonda hata ve uyarı özetini göster.
-                        NoSummary--Sonda hata ve uyarı özetini gösterme.
-                        ErrorsOnly--Yalnızca hataları göster.
-                        WarningsOnly--Yalnızca uyarıları göster.
-                        NoItemAndPropertyList--Her proje derlemesinin
-                            başında öğe ve özelliklerin listesini gösterme. 
-                        ShowCommandLine--TaskCommandLineEvent iletilerini 
-                            göster.
-                        ShowTimestamp--Tüm iletilerde önek olarak Zaman
-                            Damgasını göster.
-                        ShowEventId--Başlatılan olaylar, bitirilen olaylar ve 
-                            iletiler için eventId'yi göster.
-                        ForceNoAlign--Metni konsol arabelleğinin boyutuna göre
-                            ayarlama.
-                        DisableConsoleColor--Tüm günlük iletileri için
-                            varsayılan konsol renklerini kullan.
-                        DisableMPLogging--Çoklu işlemci olmayan modda 
-                            çalışırken çıkışta çok işlemcili günlük stilini 
-                            devre dışı bırak.
-                        EnableMPLogging--Çok işlemci olmayan modda çalışırken 
-                            bile çok işlemcili günlük stilini etkinleştir. Bu 
-                            günlük stili varsayılan olarak açıktır.
-                        ForceConsoleColor--Konsol desteklemese bile ANSI
-                            konsol renklerini kullan
-                                                Verbosity--Bu günlükçü için /verbosity ayarını
-                            geçersiz kılar.
-                     Örnek:
-                        /consoleloggerparameters:PerformanceSummary;NoSummary;
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
+                        -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </target>
         <note>
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
index 6a4ea22ba85..a7097bedb80 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
@@ -529,40 +529,42 @@
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleloggerparameters:&lt;parameters&gt;
-           控制台记录器的参数。(缩写: -clp)
-           可用参数包括:
-            PerformanceSummary -- 显示在任务、目标和项目上
-              花费的时间。
-            Summary -- 结束时显示错误和警告的摘要。
-            NoSummary -- 结束时不显示错误和警告
-              的摘要。
-            ErrorsOnly -- 仅显示错误。
-            WarningsOnly -- 仅显示警告。
-            NoItemAndPropertyList -- 在开始生成每个项目时不显示
-              项和属性的列表。  
-            ShowCommandLine -- 显示 TaskCommandLineEvent 消息 
-            ShowTimestamp -- 将时间戳作为所有消息的前缀
-              显示。                      
-            ShowEventId -- 显示已开始事件、已完成事件和消息
-              的事件 ID。
-            ForceNoAlign -- 不将文本与控制台缓冲区的大小
-              匹配。
-            DisableConsoleColor -- 将默认控制台颜色
-              用于所有记录消息。
-            DisableMPLogging -- 在非多处理器
-              模式下运行时，禁用输出的多处理器
-              日志记录样式。
-            EnableMPLogging -- 即使在非多处理器
-              模式下运行，也启用多处理器
-              日志记录样式。默认情况下启用此日志记录样式。
-                        ForceConsoleColor--使用 ANSI 控制台颜色，即使
-                            控制台不支持它
-                        Verbosity -- 重写此记录器的 -verbosity
-              设置。
-           示例:
-                        -consoleloggerparameters:PerformanceSummary;NoSummary;
-                         Verbosity=minimal
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
+                        -consoleLoggerParameters:PerformanceSummary;NoSummary;
+                                                 Verbosity=minimal
 </target>
         <note>
       LOCALIZATION: The following should not be localized:
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
index 6c778fd8213..2229411222f 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
@@ -529,38 +529,40 @@
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </source>
-        <target state="needs-review-translation">  -consoleLoggerParameters:&lt;參數&gt;
-                     主控台記錄器的參數。(簡短形式: -clp)
-                     可用的參數為:
-                        PerformanceSummary--顯示工作、目標
-                            及專案所花費的時間。
-                        Summary--結束時顯示錯誤與警告摘要。
-                        NoSummary--結束時不顯示錯誤
-                            與警告摘要。
-                        ErrorsOnly--只顯示錯誤。
-                        WarningsOnly--只顯示警告。
-                        NoItemAndPropertyList--不在每個專案開始建置時，
-                            顯示項目與屬性清單。
-                        ShowCommandLine--顯示 TaskCommandLineEvent 訊息
-                        ShowTimestamp--在所有訊息開頭顯示
-                            時間戳記。
-                        ShowEventId--顯示已開始之事件、已完成之事件
-                            以及訊息的事件識別碼
-                        ForceNoAlign--不將文字調整成主控台
-                            緩衝區的大小
-                        DisableConsoleColor--為所有記錄訊息使用預設的
-                            主控台色彩。
-                        DisableMPLogging-- 在非多處理器模式下執行時，
-                            停用輸出的多處理器
-                            記錄樣式。
-                        EnableMPLogging--在非多處理器模式下執行時，
-                            啟用多處理器記錄樣式。
-                            此記錄樣式預設為啟用。
-                        ForceConsoleColor--即使主控台不支援 ANSI 主控台色彩，
-                            也一律使用該色彩
-                        Verbosity--覆寫此記錄器的 -verbosity
-                             設定。
-                     範例:
+        <target state="new">  -consoleLoggerParameters:&lt;parameters&gt;
+                     Parameters to console logger. (Short form: -clp)
+                     The available parameters are:
+                        PerformanceSummary--Show time spent in tasks, targets
+                            and projects.
+                        Summary--Show error and warning summary at the end.
+                        NoSummary--Don't show error and warning summary at the
+                            end.
+                        ErrorsOnly--Show only errors.
+                        WarningsOnly--Show only warnings.
+                        NoItemAndPropertyList--Don't show list of items and
+                            properties at the start of each project build.
+                        ShowCommandLine--Show TaskCommandLineEvent messages
+                        ShowTimestamp--Display the Timestamp as a prefix to any
+                            message.
+                        ShowEventId--Show eventId for started events, finished
+                            events, and messages
+                        ForceNoAlign--Does not align the text to the size of
+                            the console buffer
+                        DisableConsoleColor--Use the default console colors
+                            for all logging messages.
+                        DisableMPLogging-- Disable the multiprocessor
+                            logging style of output when running in
+                            non-multiprocessor mode.
+                        EnableMPLogging--Enable the multiprocessor logging
+                            style even when running in non-multiprocessor
+                            mode. This logging style is on by default.
+                        ForceConsoleColor--Use ANSI console colors even if
+                            console does not support it
+                        PreferConsoleColor--Use ANSI console colors only if
+                            target console does support it
+                     Verbosity--overrides the -verbosity setting for this
+                            logger.
+                     Example:
                         -consoleLoggerParameters:PerformanceSummary;NoSummary;
                                                  Verbosity=minimal
 </target>
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index a5330995f34..1288ac675c6 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -678,6 +678,7 @@ string[] commandLine
                 Dictionary<string, string> restoreProperties = null;
                 ILogger[] loggers = Array.Empty<ILogger>();
                 LoggerVerbosity verbosity = LoggerVerbosity.Normal;
+                LoggerVerbosity originalVerbosity = LoggerVerbosity.Normal;
                 List<DistributedLoggerRecord> distributedLoggerRecords = null;
 #if FEATURE_XML_SCHEMA_VALIDATION
                 bool needToValidateProject = false;
@@ -716,6 +717,7 @@ string[] commandLine
                                             ref globalProperties,
                                             ref loggers,
                                             ref verbosity,
+                                            ref originalVerbosity,
                                             ref distributedLoggerRecords,
 #if FEATURE_XML_SCHEMA_VALIDATION
                                             ref needToValidateProject,
@@ -996,9 +998,8 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs
                 return;
             }
 
-            s_buildCancellationSource.Cancel();
-
             Console.WriteLine(ResourceUtilities.GetResourceString("AbortingBuild"));
+            s_buildCancellationSource.Cancel();
 
             // The OS takes a lock in
             // kernel32.dll!_SetConsoleCtrlHandler, so if a task
@@ -1009,31 +1010,42 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs
             // We're already on a threadpool thread anyway.
             WaitCallback callback = delegate
             {
-                s_cancelComplete.Reset();
-
-                // If the build is already complete, just exit.
-                if (s_buildComplete.WaitOne(0))
+                try 
                 {
-                    s_cancelComplete.Set();
-                    return;
-                }
+                    s_cancelComplete.Reset();
 
-                // If the build has already started (or already finished), we will cancel it
-                // If the build has not yet started, it will cancel itself, because
-                // we set alreadyCalled=1
-                bool hasBuildStarted;
-                lock (s_buildLock)
-                {
-                    hasBuildStarted = s_hasBuildStarted;
-                }
+                    // If the build is already complete, just exit.
+                    if (s_buildComplete.WaitOne(0))
+                    {
+                        s_cancelComplete.Set();
+                        return;
+                    }
 
-                if (hasBuildStarted)
+                    // If the build has already started (or already finished), we will cancel it
+                    // If the build has not yet started, it will cancel itself, because
+                    // we set alreadyCalled=1
+                    bool hasBuildStarted;
+                    lock (s_buildLock)
+                    {
+                        hasBuildStarted = s_hasBuildStarted;
+                    }
+
+                    if (hasBuildStarted)
+                    {
+                        BuildManager.DefaultBuildManager.CancelAllSubmissions();
+                        s_buildComplete.WaitOne();
+                    }
+
+                    s_cancelComplete.Set(); // This will release our main Execute method so we can finally exit.
+                }
+                finally
                 {
-                    BuildManager.DefaultBuildManager.CancelAllSubmissions();
-                    s_buildComplete.WaitOne();
+                    // Server node shall terminate after it received CancelKey press.
+                    if (s_isServerNode)
+                    {
+                        Environment.Exit(0); // the process can now be terminated as everything has already been gracefully cancelled.
+                    }
                 }
-
-                s_cancelComplete.Set(); // This will release our main Execute method so we can finally exit.
             };
 
             ThreadPoolExtensions.QueueThreadPoolWorkItemWithCulture(callback, CultureInfo.CurrentCulture, CultureInfo.CurrentUICulture);
@@ -2181,6 +2193,7 @@ private static bool ProcessCommandLineSwitches
             ref Dictionary<string, string> globalProperties,
             ref ILogger[] loggers,
             ref LoggerVerbosity verbosity,
+            ref LoggerVerbosity originalVerbosity,
             ref List<DistributedLoggerRecord> distributedLoggerRecords,
 #if FEATURE_XML_SCHEMA_VALIDATION
             ref bool needToValidateProject,
@@ -2297,6 +2310,7 @@ string commandLine
                                                            ref globalProperties,
                                                            ref loggers,
                                                            ref verbosity,
+                                                           ref originalVerbosity,
                                                            ref distributedLoggerRecords,
 #if FEATURE_XML_SCHEMA_VALIDATION
                                                            ref needToValidateProject,
@@ -2408,6 +2422,7 @@ string commandLine
                         groupedFileLoggerParameters,
                         out distributedLoggerRecords,
                         out verbosity,
+                        out originalVerbosity,
                         cpuCount,
                         out profilerLogger,
                         out enableProfiler
@@ -2438,7 +2453,7 @@ out enableProfiler
                         Console.WriteLine(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("PickedUpSwitchesFromAutoResponse", autoResponseFileName));
                     }
 
-                    if (verbosity == LoggerVerbosity.Diagnostic)
+                    if (originalVerbosity == LoggerVerbosity.Diagnostic)
                     {
                         string equivalentCommandLine = commandLineSwitches.GetEquivalentCommandLineExceptProjectFile();
                         Console.WriteLine($"{Path.Combine(s_exePath, s_exeName)} {equivalentCommandLine} {projectFile}");
@@ -3191,18 +3206,21 @@ private static ILogger[] ProcessLoggingSwitches
             string[][] groupedFileLoggerParameters,
             out List<DistributedLoggerRecord> distributedLoggerRecords,
             out LoggerVerbosity verbosity,
+            out LoggerVerbosity originalVerbosity,
             int cpuCount,
             out ProfilerLogger profilerLogger,
             out bool enableProfiler
         )
         {
             // if verbosity level is not specified, use the default
-            verbosity = LoggerVerbosity.Normal;
+            originalVerbosity = LoggerVerbosity.Normal;
+            verbosity = originalVerbosity;
 
             if (verbositySwitchParameters.Length > 0)
             {
                 // Read the last verbosity switch found
-                verbosity = ProcessVerbositySwitch(verbositySwitchParameters[verbositySwitchParameters.Length - 1]);
+                originalVerbosity = ProcessVerbositySwitch(verbositySwitchParameters[verbositySwitchParameters.Length - 1]);
+                verbosity = originalVerbosity;
             }
 
             var loggers = ProcessLoggerSwitch(loggerSwitchParameters, verbosity);
diff --git a/src/MSBuild/app.amd64.config b/src/MSBuild/app.amd64.config
index 4cdef2986d2..ce9f6d2557c 100644
--- a/src/MSBuild/app.amd64.config
+++ b/src/MSBuild/app.amd64.config
@@ -177,6 +177,7 @@
         <property name="MSBuildFrameworkToolsPath" value="$(SystemRoot)\Microsoft.NET\Framework\v$(MSBuildRuntimeVersion)\" />
         <property name="MSBuildFrameworkToolsPath32" value="$(SystemRoot)\Microsoft.NET\Framework\v$(MSBuildRuntimeVersion)\" />
         <property name="MSBuildFrameworkToolsPath64" value="$(SystemRoot)\Microsoft.NET\Framework64\v$(MSBuildRuntimeVersion)\" />
+        <property name="MSBuildFrameworkToolsPathArm64" value="$(SystemRoot)\Microsoft.NET\FrameworkArm64\v$(MSBuildRuntimeVersion)\" />
         <property name="MSBuildFrameworkToolsRoot" value="$(SystemRoot)\Microsoft.NET\Framework\" />
         <property name="SDK35ToolsPath" value="$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v8.0A\WinSDK-NetFx35Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))" />
         <property name="SDK40ToolsPath" value="$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\NETFXSDK\4.8\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))" />
diff --git a/src/MSBuild/app.config b/src/MSBuild/app.config
index 3f412c2716a..f537c444eea 100644
--- a/src/MSBuild/app.config
+++ b/src/MSBuild/app.config
@@ -147,6 +147,7 @@
         <property name="MSBuildFrameworkToolsPath" value="$(SystemRoot)\Microsoft.NET\Framework\v$(MSBuildRuntimeVersion)\" />
         <property name="MSBuildFrameworkToolsPath32" value="$(SystemRoot)\Microsoft.NET\Framework\v$(MSBuildRuntimeVersion)\" />
         <property name="MSBuildFrameworkToolsPath64" value="$(SystemRoot)\Microsoft.NET\Framework64\v$(MSBuildRuntimeVersion)\" />
+        <property name="MSBuildFrameworkToolsPathArm64" value="$(SystemRoot)\Microsoft.NET\FrameworkArm64\v$(MSBuildRuntimeVersion)\" />
         <property name="MSBuildFrameworkToolsRoot" value="$(SystemRoot)\Microsoft.NET\Framework\" />
         <property name="SDK35ToolsPath" value="$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\Windows\v8.0A\WinSDK-NetFx35Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))" />
         <property name="SDK40ToolsPath" value="$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\NETFXSDK\4.8\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))" />
diff --git a/src/Package/MSBuild.VSSetup.Arm64/files.arm64.swr b/src/Package/MSBuild.VSSetup.Arm64/files.arm64.swr
index dbdb1d17ad5..f001f9d07ca 100644
--- a/src/Package/MSBuild.VSSetup.Arm64/files.arm64.swr
+++ b/src/Package/MSBuild.VSSetup.Arm64/files.arm64.swr
@@ -9,11 +9,11 @@ vs.relatedProcessFiles
   vs.relatedProcessFile Path="[InstallDir]\MSBuild\Current\Bin\arm64\Microsoft.Build.Tasks.Core.dll"
 
 folder InstallDir:\MSBuild\Current\Bin\arm64
-  file source=$(Arm64BinPath)MSBuild.exe vs.file.ngenArchitecture=all
+  file source=$(Arm64BinPath)MSBuild.exe vs.file.ngenArchitecture=arm64
   file source=$(Arm64BinPath)MSBuild.exe.config
 
   file source=$(FrameworkBinPath)x64\Microsoft.Build.Framework.tlb
-  file source=$(Arm64BinPath)Microsoft.Build.Tasks.Core.dll vs.file.ngenArchitecture=all
+  file source=$(Arm64BinPath)Microsoft.Build.Tasks.Core.dll vs.file.ngenArchitecture=arm64
   file source=$(Arm64BinPath)Microsoft.Common.CurrentVersion.targets
   file source=$(Arm64BinPath)Microsoft.Common.CrossTargeting.targets
   file source=$(Arm64BinPath)Microsoft.Common.overridetasks
diff --git a/src/Samples/PortableTask/PortableTask.csproj b/src/Samples/PortableTask/PortableTask.csproj
index a497a305fb2..944a7d713ac 100644
--- a/src/Samples/PortableTask/PortableTask.csproj
+++ b/src/Samples/PortableTask/PortableTask.csproj
@@ -1,4 +1,4 @@
-<Project Sdk="Microsoft.NET.Sdk">
+﻿<Project Sdk="Microsoft.NET.Sdk">
   <PropertyGroup>
     <UseProductOutputPath>true</UseProductOutputPath>
     <CopyNuGetImplementations>false</CopyNuGetImplementations>
@@ -12,7 +12,12 @@
   </ItemGroup>
   <ItemGroup>
     <PackageReference Include="Microsoft.Build.Framework" Version="15.5.180" />
-    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="15.5.180" />
+    <PackageReference Include="Microsoft.Build.Utilities.Core" Version="15.5.180" GeneratePathProperty="true" />
   </ItemGroup>
   <Target Name="UpdateXlf" />
+
+  <!-- This is only needed for a test in the MSBuild repo; it is unrelated to the PortableTask sample itself. -->
+  <Target Name="CopyMSBuildUtilitiesToNewFolder" BeforeTargets="CopyFilesToOutputDirectory">
+    <Copy SourceFiles="$(PkgMicrosoft_Build_Utilities_Core)\lib\net46\Microsoft.Build.Utilities.Core.dll" DestinationFiles="$(OutDir)\OldMSBuild\Microsoft.Build.Utilities.Core.dll" />
+  </Target>
 </Project>
diff --git a/src/Shared/CommunicationsUtilities.cs b/src/Shared/CommunicationsUtilities.cs
index f8106579fb7..0aa08501488 100644
--- a/src/Shared/CommunicationsUtilities.cs
+++ b/src/Shared/CommunicationsUtilities.cs
@@ -693,7 +693,7 @@ internal static void Trace(int nodeId, string format, params object[] args)
 
                         if (String.IsNullOrEmpty(s_debugDumpPath))
                         {
-                            s_debugDumpPath = Path.GetTempPath();
+                            s_debugDumpPath = FileUtilities.TempFileDirectory;
                         }
                         else
                         {
diff --git a/src/Shared/Debugging/DebugUtils.cs b/src/Shared/Debugging/DebugUtils.cs
index 74a3a7b9e79..3ae6cf16891 100644
--- a/src/Shared/Debugging/DebugUtils.cs
+++ b/src/Shared/Debugging/DebugUtils.cs
@@ -38,7 +38,7 @@ static DebugUtils()
                 }
                 else
                 {
-                    debugDirectory = Path.Combine(Path.GetTempPath(), "MSBuild_Logs");
+                    debugDirectory = Path.Combine(FileUtilities.TempFileDirectory, "MSBuild_Logs");
                 }
 
                 // Out of proc nodes do not know the startup directory so set the environment variable for them.
diff --git a/src/Shared/EnvironmentUtilities.cs b/src/Shared/EnvironmentUtilities.cs
index 01cf349f2f8..7cb21b1abe2 100644
--- a/src/Shared/EnvironmentUtilities.cs
+++ b/src/Shared/EnvironmentUtilities.cs
@@ -12,5 +12,12 @@ internal static partial class EnvironmentUtilities
 
         public static bool Is64BitOperatingSystem =>
             Environment.Is64BitOperatingSystem;
+
+        public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)
+        {
+            return propertyName.StartsWith("MSBUILD") ||
+                propertyName.StartsWith("COMPLUS_") ||
+                propertyName.StartsWith("DOTNET_");
+        }
     }
 }
diff --git a/src/Shared/ExceptionHandling.cs b/src/Shared/ExceptionHandling.cs
index 2d91a466fbf..3f0b910b267 100644
--- a/src/Shared/ExceptionHandling.cs
+++ b/src/Shared/ExceptionHandling.cs
@@ -54,7 +54,7 @@ private static string GetDebugDumpPath()
 
             return !string.IsNullOrEmpty(debugPath)
                     ? debugPath
-                    : Path.GetTempPath();
+                    : FileUtilities.TempFileDirectory;
         }
 
         /// <summary>
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index da24b87b134..63025199472 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -45,6 +45,10 @@ internal static partial class FileUtilities
         /// </summary>
         internal static string cacheDirectory = null;
 
+#if CLR2COMPATIBILITY
+        internal static string TempFileDirectory => Path.GetTempPath();
+#endif
+
         /// <summary>
         /// FOR UNIT TESTS ONLY
         /// Clear out the static variable used for the cache directory so that tests that
@@ -57,6 +61,8 @@ internal static void ClearCacheDirectoryPath()
 
         internal static readonly StringComparison PathComparison = GetIsFileSystemCaseSensitive() ? StringComparison.Ordinal : StringComparison.OrdinalIgnoreCase;
 
+        internal static readonly StringComparer PathComparer = GetIsFileSystemCaseSensitive() ? StringComparer.Ordinal : StringComparer.OrdinalIgnoreCase;
+
         /// <summary>
         /// Determines whether the file system is case sensitive.
         /// Copied from https://github.com/dotnet/runtime/blob/73ba11f3015216b39cb866d9fb7d3d25e93489f2/src/libraries/Common/src/System/IO/PathInternal.CaseSensitivity.cs#L41-L59
@@ -122,7 +128,7 @@ internal static string GetCacheDirectory()
         {
             if (cacheDirectory == null)
             {
-                cacheDirectory = Path.Combine(Path.GetTempPath(), String.Format(CultureInfo.CurrentUICulture, "MSBuild{0}-{1}", Process.GetCurrentProcess().Id, AppDomain.CurrentDomain.Id));
+                cacheDirectory = Path.Combine(TempFileDirectory, String.Format(CultureInfo.CurrentUICulture, "MSBuild{0}-{1}", Process.GetCurrentProcess().Id, AppDomain.CurrentDomain.Id));
             }
 
             return cacheDirectory;
diff --git a/src/Shared/NamedPipeUtil.cs b/src/Shared/NamedPipeUtil.cs
index dfc76317e84..4927b87103d 100644
--- a/src/Shared/NamedPipeUtil.cs
+++ b/src/Shared/NamedPipeUtil.cs
@@ -30,7 +30,13 @@ internal static string GetPlatformSpecificPipeName(string pipeName)
                 // can be quite long, leaving very little room for the actual pipe name. Fortunately,
                 // '/tmp' is mandated by POSIX to always be a valid temp directory, so we can use that
                 // instead.
+#if !CLR2COMPATIBILITY
                 return Path.Combine("/tmp", pipeName);
+#else
+                // We should never get here. This would be a net35 task host running on unix.
+                ErrorUtilities.ThrowInternalError("Task host used on unix in retrieving the pipe name.");
+                return string.Empty;
+#endif
             }
             else
             {
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index 4c5a3357063..aefd4aaebb2 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -232,7 +232,11 @@ internal void InternalConstruct(string pipeName = null)
                     PipeDirection.InOut,
                     1, // Only allow one connection at a time.
                     PipeTransmissionMode.Byte,
-                    PipeOptions.Asynchronous | PipeOptions.WriteThrough,
+                    PipeOptions.Asynchronous | PipeOptions.WriteThrough
+#if FEATURE_PIPEOPTIONS_CURRENTUSERONLY
+                    | PipeOptions.CurrentUserOnly
+#endif
+                    ,
                     PipeBufferSize, // Default input buffer
                     PipeBufferSize,  // Default output buffer
                     security,
@@ -248,7 +252,11 @@ internal void InternalConstruct(string pipeName = null)
                     PipeDirection.InOut,
                     1, // Only allow one connection at a time.
                     PipeTransmissionMode.Byte,
-                    PipeOptions.Asynchronous | PipeOptions.WriteThrough,
+                    PipeOptions.Asynchronous | PipeOptions.WriteThrough
+#if FEATURE_PIPEOPTIONS_CURRENTUSERONLY
+                    | PipeOptions.CurrentUserOnly
+#endif
+                    ,
                     PipeBufferSize, // Default input buffer
                     PipeBufferSize  // Default output buffer
                 );
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index d9cdca05e73..ff2b4901582 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -923,6 +923,17 @@ public void LogErrorFromException(Exception exception, bool showStackTrace, bool
             // global state.
             ErrorUtilities.VerifyThrowArgumentNull(exception, nameof(exception));
 
+            // For an AggregateException call LogErrorFromException on each inner exception
+            if (exception is AggregateException aggregateException)
+            {
+                foreach (Exception innerException in aggregateException.Flatten().InnerExceptions)
+                {
+                    LogErrorFromException(innerException, showStackTrace, showDetail, file);
+                }
+
+                return;
+            }
+
             string message;
 
             if (!showDetail && (Environment.GetEnvironmentVariable("MSBUILDDIAGNOSTICS") == null)) // This env var is also used in ToolTask
diff --git a/src/Shared/TempFileUtilities.cs b/src/Shared/TempFileUtilities.cs
index f3bffb9d425..c0583acb483 100644
--- a/src/Shared/TempFileUtilities.cs
+++ b/src/Shared/TempFileUtilities.cs
@@ -16,6 +16,57 @@ namespace Microsoft.Build.Shared
     /// </summary>
     internal static partial class FileUtilities
     {
+        // For the current user, these correspond to read, write, and execute permissions.
+        // Lower order bits correspond to the same for "group" or "other" users.
+        private const int userRWX = 0x100 | 0x80 | 0x40;
+        private static string tempFileDirectory = null;
+        internal static string TempFileDirectory
+        {
+            get
+            {
+                return tempFileDirectory ??= CreateFolderUnderTemp();
+            }
+        }
+
+        internal static void ClearTempFileDirectory()
+        {
+            tempFileDirectory = null;
+        }
+
+        // For all native calls, directly check their return values to prevent bad actors from getting in between checking if a directory exists and returning it.
+        private static string CreateFolderUnderTemp()
+        {
+            string basePath = Path.Combine(Path.GetTempPath(), $"MSBuildTemp{Environment.UserName}");
+
+            if (NativeMethodsShared.IsLinux && NativeMethodsShared.mkdir(basePath, userRWX) != 0)
+            {
+                if (NativeMethodsShared.chmod(basePath, userRWX) == 0)
+                {
+                    // Current user owns this file; we can read and write to it. It is reasonable here to assume it was created properly by MSBuild and can be used
+                    // for temporary files.
+                }
+                else
+                {
+                    // Another user created a folder pretending to be us! Find a folder we can actually use.
+                    int extraBits = 0;
+                    string pathToCheck = basePath + extraBits;
+                    while (NativeMethodsShared.mkdir(pathToCheck, userRWX) != 0 && NativeMethodsShared.chmod(pathToCheck, userRWX) != 0)
+                    {
+                        extraBits++;
+                        pathToCheck = basePath + extraBits;
+                    }
+
+                    basePath = pathToCheck;
+                }
+            }
+            else
+            {
+                Directory.CreateDirectory(basePath);
+            }
+
+            return FileUtilities.EnsureTrailingSlash(basePath);
+        }
+
         /// <summary>
         /// Generates a unique directory name in the temporary folder.
         /// Caller must delete when finished.
@@ -24,7 +75,7 @@ internal static partial class FileUtilities
         /// <param name="subfolder"></param>
         internal static string GetTemporaryDirectory(bool createDirectory = true, string subfolder = null)
         {
-            string temporaryDirectory = Path.Combine(Path.GetTempPath(), "Temporary" + Guid.NewGuid().ToString("N"), subfolder ?? string.Empty);
+            string temporaryDirectory = Path.Combine(TempFileDirectory, "Temporary" + Guid.NewGuid().ToString("N"), subfolder ?? string.Empty);
 
             if (createDirectory)
             {
@@ -43,7 +94,7 @@ internal static string GetTemporaryDirectory(bool createDirectory = true, string
         /// </summary>
         internal static string GetTemporaryFileName(string extension)
         {
-            return GetTemporaryFile(null, extension, false);
+            return GetTemporaryFile(null, null, extension, false);
         }
 
         /// <summary>
@@ -57,6 +108,16 @@ internal static string GetTemporaryFile()
             return GetTemporaryFile(".tmp");
         }
 
+        /// <summary>
+        /// Generates a unique temporary file name with a given extension in the temporary folder.
+        /// File is guaranteed to be unique.
+        /// Caller must delete it when finished.
+        /// </summary>
+        internal static string GetTemporaryFile(string fileName, string extension, bool createFile)
+        {
+            return GetTemporaryFile(null, fileName, extension, createFile);
+        }
+
         /// <summary>
         /// Generates a unique temporary file name with a given extension in the temporary folder.
         /// File is guaranteed to be unique.
@@ -66,7 +127,7 @@ internal static string GetTemporaryFile()
         /// </summary>
         internal static string GetTemporaryFile(string extension)
         {
-            return GetTemporaryFile(null, extension);
+            return GetTemporaryFile(null, null, extension);
         }
 
         /// <summary>
@@ -77,23 +138,33 @@ internal static string GetTemporaryFile(string extension)
         /// Caller must delete it when finished.
         /// May throw IOException.
         /// </summary>
-        internal static string GetTemporaryFile(string directory, string extension, bool createFile = true)
+        internal static string GetTemporaryFile(string directory, string fileName, string extension, bool createFile = true)
         {
             ErrorUtilities.VerifyThrowArgumentLengthIfNotNull(directory, nameof(directory));
-            ErrorUtilities.VerifyThrowArgumentLength(extension, nameof(extension));
-
-            if (extension[0] != '.')
-            {
-                extension = '.' + extension;
-            }
 
             try
             {
-                directory ??= Path.GetTempPath();
+                directory ??= TempFileDirectory;
+
+                // If the extension needs a dot prepended, do so.
+                if (extension is null)
+                {
+                    extension = string.Empty;
+                }
+                else if (extension.Length > 0 && extension[0] != '.')
+                {
+                    extension = '.' + extension;
+                }
+
+                // If the fileName is null, use tmp{Guid}; otherwise use fileName.
+                if (string.IsNullOrEmpty(fileName))
+                {
+                    fileName = $"tmp{Guid.NewGuid():N}";
+                }
 
                 Directory.CreateDirectory(directory);
 
-                string file = Path.Combine(directory, $"tmp{Guid.NewGuid():N}{extension}");
+                string file = Path.Combine(directory, $"{fileName}{extension}");
 
                 ErrorUtilities.VerifyThrow(!FileSystems.Default.FileExists(file), "Guid should be unique");
 
@@ -131,11 +202,15 @@ public class TempWorkingDirectory : IDisposable
         {
             public string Path { get; }
 
-            public TempWorkingDirectory(string sourcePath, [CallerMemberName] string name = null)
+            public TempWorkingDirectory(string sourcePath,
+#if !CLR2COMPATIBILITY
+                [CallerMemberName]
+#endif
+            string name = null)
             {
                 Path = name == null
                     ? GetTemporaryDirectory()
-                    : System.IO.Path.Combine(System.IO.Path.GetTempPath(), name);
+                    : System.IO.Path.Combine(TempFileDirectory, name);
 
                 if (FileSystems.Default.DirectoryExists(Path))
                 {
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index 9a1b027bd35..825bc0a41d3 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -59,10 +59,10 @@ private static string[] findRuntimeAssembliesWithMicrosoftBuildFramework()
             string[] msbuildAssemblies = Directory.GetFiles(msbuildDirectory, "*.dll");
             string[] runtimeAssemblies = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), "*.dll");
 
-            List<string> msbuildAssembliesList = new(msbuildAssemblies);
-            msbuildAssembliesList.AddRange(runtimeAssemblies);
+            List<string> runtimeAssembliesList = new(runtimeAssemblies);
+            runtimeAssembliesList.AddRange(msbuildAssemblies);
 
-            return msbuildAssembliesList.ToArray();
+            return runtimeAssembliesList.ToArray();
         }
 
         /// <summary>
@@ -192,10 +192,20 @@ private static Assembly LoadAssembly(AssemblyLoadInfo assemblyLoadInfo)
         private static Assembly LoadAssemblyUsingMetadataLoadContext(AssemblyLoadInfo assemblyLoadInfo)
         {
             string path = assemblyLoadInfo.AssemblyFile;
-            List<string> localPaths = new(Directory.GetFiles(Path.GetDirectoryName(path), "*.dll"));
-            localPaths.AddRange(runtimeAssemblies);
+            string[] localAssemblies = Directory.GetFiles(Path.GetDirectoryName(path), "*.dll");
 
-            _context = new(new PathAssemblyResolver(localPaths));
+            // Deduplicate between MSBuild assemblies and task dependencies. 
+            Dictionary<string, string> assembliesDictionary = new(localAssemblies.Length + runtimeAssemblies.Length);
+            foreach (string localPath in localAssemblies) {
+                assembliesDictionary.Add(Path.GetFileName(localPath), localPath);
+            }
+
+            foreach (string runtimeAssembly in runtimeAssemblies)
+            {
+                assembliesDictionary[Path.GetFileName(runtimeAssembly)] = runtimeAssembly;
+            }
+
+            _context = new(new PathAssemblyResolver(assembliesDictionary.Values));
             return _context.LoadFromAssemblyPath(path);
         }
 
diff --git a/src/Shared/UnitTests/FileUtilities_Tests.cs b/src/Shared/UnitTests/FileUtilities_Tests.cs
index 3f9c53f3a68..7e87e2217af 100644
--- a/src/Shared/UnitTests/FileUtilities_Tests.cs
+++ b/src/Shared/UnitTests/FileUtilities_Tests.cs
@@ -851,7 +851,7 @@ public void GenerateTempFileNameWithDirectoryAndExtension()
 
             try
             {
-                path = FileUtilities.GetTemporaryFile(directory, ".bat");
+                path = FileUtilities.GetTemporaryFile(directory, null, ".bat");
 
                 Assert.EndsWith(".bat", path);
                 Assert.True(File.Exists(path));
@@ -902,18 +902,6 @@ public void GenerateTempBatchFileWithBadExtension()
            );
         }
         /// <summary>
-        /// No extension is given
-        /// </summary>
-        [Fact]
-        public void GenerateTempBatchFileWithEmptyExtension()
-        {
-            Assert.Throws<ArgumentException>(() =>
-            {
-                FileUtilities.GetTemporaryFile(String.Empty);
-            }
-           );
-        }
-        /// <summary>
         /// Directory is invalid
         /// </summary>
         [Fact]
@@ -924,7 +912,7 @@ public void GenerateTempBatchFileWithBadDirectory()
         {
             Assert.Throws<IOException>(() =>
             {
-                FileUtilities.GetTemporaryFile("|", ".tmp");
+                FileUtilities.GetTemporaryFile("|", null, ".tmp");
             }
            );
         }
diff --git a/src/Shared/UnitTests/TestEnvironment.cs b/src/Shared/UnitTests/TestEnvironment.cs
index c97b575d88c..51ea0482d88 100644
--- a/src/Shared/UnitTests/TestEnvironment.cs
+++ b/src/Shared/UnitTests/TestEnvironment.cs
@@ -594,14 +594,14 @@ public TransientTestFile(string extension, bool createFile, bool expectedAsOutpu
         {
             _createFile = createFile;
             _expectedAsOutput = expectedAsOutput;
-            Path = FileUtilities.GetTemporaryFile(null, extension, createFile);
+            Path = FileUtilities.GetTemporaryFile(null, null, extension, createFile);
         }
 
         public TransientTestFile(string rootPath, string extension, bool createFile, bool expectedAsOutput)
         {
             _createFile = createFile;
             _expectedAsOutput = expectedAsOutput;
-            Path = FileUtilities.GetTemporaryFile(rootPath, extension, createFile);
+            Path = FileUtilities.GetTemporaryFile(rootPath, null, extension, createFile);
         }
 
         public TransientTestFile(string rootPath, string fileName, string contents = null)
diff --git a/src/Shared/UnitTests/TypeLoader_Tests.cs b/src/Shared/UnitTests/TypeLoader_Tests.cs
index 509f4c01565..54aa9961901 100644
--- a/src/Shared/UnitTests/TypeLoader_Tests.cs
+++ b/src/Shared/UnitTests/TypeLoader_Tests.cs
@@ -10,6 +10,7 @@
 using Xunit;
 using Xunit.Abstractions;
 using Shouldly;
+using System.Linq;
 
 #nullable disable
 
@@ -20,6 +21,8 @@ public class TypeLoader_Tests
         private static readonly string ProjectFileFolder = Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, "PortableTask");
         private const string ProjectFileName = "portableTaskTest.proj";
         private const string DLLFileName = "PortableTask.dll";
+        private static string PortableTaskFolderPath = Path.GetFullPath(
+                    Path.Combine(BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory, "..", "..", "..", "Samples", "PortableTask"));
 
         private readonly ITestOutputHelper _output;
 
@@ -90,6 +93,28 @@ public void LoadInsideAsssembly()
             }
         }
 
+        [Fact]
+        public void LoadTaskDependingOnMSBuild()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = env.CreateFolder(createFolder: true);
+                string currentAssembly = Assembly.GetExecutingAssembly().Location;
+                string utilitiesName = "Microsoft.Build.Utilities.Core.dll";
+                string newAssemblyLocation = Path.Combine(folder.Path, Path.GetFileName(currentAssembly));
+
+                // The "first" directory is "Debug" or "Release"
+                string portableTaskPath = Path.Combine(Directory.GetDirectories(PortableTaskFolderPath).First(), "netstandard2.0", "OldMSBuild");
+                string utilities = Path.Combine(portableTaskPath, utilitiesName);
+                File.Copy(utilities, Path.Combine(folder.Path, utilitiesName));
+                File.Copy(currentAssembly, newAssemblyLocation);
+                TypeLoader typeLoader = new(TaskLoader.IsTaskClass);
+
+                // If we cannot accept MSBuild next to the task assembly we're loading, this will throw.
+                typeLoader.Load("TypeLoader_Tests", AssemblyLoadInfo.Create(null, newAssemblyLocation), useTaskHost: true);
+            }
+        }
+
         [Fact]
         public void LoadOutsideAssembly()
         {
diff --git a/src/StringTools/InternableString.cs b/src/StringTools/InternableString.cs
index f04d2a9e931..6a2bbcc3473 100644
--- a/src/StringTools/InternableString.cs
+++ b/src/StringTools/InternableString.cs
@@ -33,7 +33,7 @@ public ref struct Enumerator
             /// </summary>
             private int _charIndex;
 
-            internal Enumerator(ref InternableString str)
+            internal Enumerator(scoped ref InternableString str)
             {
                 _string = str;
                 _spanIndex = -1;
diff --git a/src/StringTools/StringTools.csproj b/src/StringTools/StringTools.csproj
index fb76d610862..60f23ad625f 100644
--- a/src/StringTools/StringTools.csproj
+++ b/src/StringTools/StringTools.csproj
@@ -6,7 +6,6 @@
     <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
     <IsPackable>true</IsPackable>
     <GenerateReferenceAssemblySource>true</GenerateReferenceAssemblySource>
-    <LangVersion>8.0</LangVersion>
     <PackageId>Microsoft.NET.StringTools</PackageId>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
 
@@ -17,6 +16,13 @@
     <PackageDescription>This package contains the $(AssemblyName) assembly which implements common string-related functionality such as weak interning.</PackageDescription>
   </PropertyGroup>
 
+  <PropertyGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
+    <!-- Place the netstandard2.0 ref assembly to /ref instead of /lib to work around a NuGet pack misbehavior. -->
+    <!-- Without this customization both the ref and implementation assembly would go to /lib, creating a conflict. -->
+    <TargetsForTfmSpecificBuildOutput />
+    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);PackRefAssembly</TargetsForTfmSpecificContentInPackage>
+  </PropertyGroup>
+
   <PropertyGroup Condition="'$(TargetFramework)' == 'net35'">
     <AssemblyName>Microsoft.NET.StringTools.net35</AssemblyName>
   </PropertyGroup>
@@ -36,4 +42,10 @@
     <Compile Remove="InternableString.Simple.cs" />
     <Compile Remove="WeakStringCache.Locking.cs" />
   </ItemGroup>
+
+  <Target Name="PackRefAssembly">
+      <ItemGroup>
+        <TfmSpecificPackageFile Include="$(TargetRefPath);@(FinalDocFile)" PackagePath="ref/$(TargetFramework)" />
+      </ItemGroup>
+  </Target>
 </Project>
diff --git a/src/Tasks.UnitTests/AssignCulture_Tests.cs b/src/Tasks.UnitTests/AssignCulture_Tests.cs
index 33cdf7e7ad1..3ea88706f9c 100644
--- a/src/Tasks.UnitTests/AssignCulture_Tests.cs
+++ b/src/Tasks.UnitTests/AssignCulture_Tests.cs
@@ -259,5 +259,24 @@ public void AliasedCultures_SupportedOnNetCore(string culture)
             Assert.Equal($"MyResource.{culture}.resx", t.AssignedFiles[0].ItemSpec);
             Assert.Equal("MyResource.resx", t.CultureNeutralAssignedFiles[0].ItemSpec);
         }
+
+        [Fact]
+        [SkipOnTargetFramework(TargetFrameworkMonikers.NetFramework, "Pseudoloc is special-cased in .NET relative to Framework.")]
+        public void Pseudolocales_CaseInsensitive()
+        {
+            string culture = "qps-Ploc";
+            AssignCulture t = new AssignCulture();
+            t.BuildEngine = new MockEngine();
+            ITaskItem i = new TaskItem($"MyResource.{culture}.resx");
+            t.Files = new ITaskItem[] { i };
+            t.Execute();
+
+            Assert.Single(t.AssignedFiles);
+            Assert.Single(t.CultureNeutralAssignedFiles);
+            Assert.Equal("true", t.AssignedFiles[0].GetMetadata("WithCulture"));
+            Assert.Equal(culture, t.AssignedFiles[0].GetMetadata("Culture"));
+            Assert.Equal($"MyResource.{culture}.resx", t.AssignedFiles[0].ItemSpec);
+            Assert.Equal("MyResource.resx", t.CultureNeutralAssignedFiles[0].ItemSpec);
+        }
     }
 }
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index ad4de97136f..f02137ec589 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -696,8 +696,8 @@ public void DoCopyOverCopiedFile(bool skipUnchangedFiles)
         {
             using (var env = TestEnvironment.Create())
             {
-                var sourceFile = FileUtilities.GetTemporaryFile(env.DefaultTestDirectory.Path, "src", false);
-                var destinationFile = FileUtilities.GetTemporaryFile(env.DefaultTestDirectory.Path, "dst", false);
+                var sourceFile = FileUtilities.GetTemporaryFile(env.DefaultTestDirectory.Path, null, "src", false);
+                var destinationFile = FileUtilities.GetTemporaryFile(env.DefaultTestDirectory.Path, null, "dst", false);
 
                 File.WriteAllText(sourceFile, "This is a source temp file.");
 
diff --git a/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs b/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs
index 8003c95c70a..0bcb3ac0fec 100644
--- a/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs
+++ b/src/Tasks.UnitTests/ResolveSDKReference_Tests.cs
@@ -15,6 +15,7 @@
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Execution;
 using Xunit;
+using Shouldly;
 
 #nullable disable
 
@@ -4202,6 +4203,29 @@ public void CheckDefaultingOfTargetConfigAndArchitecture()
             }
         }
 
+        [Fact]
+        [PlatformSpecific(TestPlatforms.Windows)]
+        public void VerifyPlatformAliasesWork()
+        {
+            // This verifies that UAP is an alias for windows, so verifying the target platforms align. Other parts of the reference don't matter here.
+            SDKReference reference = new(new TaskItem("sdkReference", new Dictionary<string, string>() { { SDKManifest.Attributes.TargetPlatform, "UAP" } }), "sdkName", "1.0.2");
+            reference.Resolve(
+                new Dictionary<string, ITaskItem>() { { "sdkName, Version=1.0.2", new TaskItem(Path.GetTempFileName(), new Dictionary<string, string>() { { "PlatformVersion", "1.0.2" } }) } },
+                "Release",
+                "x64",
+                new HashSet<string>() { "sdkName" },
+                treatErrorsAsWarnings: false,
+                prefer32Bit: false,
+                "windows",
+                new Version("1.0.2"),
+                "projectName",
+                enableMaxPlatformVersionEmptyWarning: true);
+
+            reference.ResolutionErrors.ShouldBeEmpty();
+            reference.ResolutionWarnings.ShouldBeEmpty();
+            reference.TargetPlatform.ShouldBe("UAP");
+        }
+
         [Fact]
         [PlatformSpecific(TestPlatforms.Windows)]     // No GetResolvedSDKReferences target in Unix
         public void CheckAttributesFromManifestArePassedToResolvedAssemblies()
diff --git a/src/Tasks/CodeTaskFactory.cs b/src/Tasks/CodeTaskFactory.cs
index 77c8c929879..e3fd34e9fc6 100644
--- a/src/Tasks/CodeTaskFactory.cs
+++ b/src/Tasks/CodeTaskFactory.cs
@@ -811,19 +811,13 @@ private Assembly CompileInMemoryAssembly()
                 var fullSpec = new FullTaskSpecification(finalReferencedAssemblies, fullCode);
                 if (!s_compiledTaskCache.TryGetValue(fullSpec, out Assembly existingAssembly))
                 {
-                    // Invokes compilation. 
-
-                    // Note: CompileAssemblyFromSource uses Path.GetTempPath() directory, but will not create it. In some cases 
-                    // this will throw inside CompileAssemblyFromSource. To work around this, ensure the temp directory exists. 
-                    // See: https://github.com/dotnet/msbuild/issues/328
-                    Directory.CreateDirectory(Path.GetTempPath());
-
+                    // Invokes compilation.
                     CompilerResults compilerResults = provider.CompileAssemblyFromSource(compilerParameters, fullCode);
 
                     string outputPath = null;
                     if (compilerResults.Errors.Count > 0 || Environment.GetEnvironmentVariable("MSBUILDLOGCODETASKFACTORYOUTPUT") != null)
                     {
-                        string tempDirectory = Path.GetTempPath();
+                        string tempDirectory = FileUtilities.TempFileDirectory;
                         string fileName = Guid.NewGuid().ToString() + ".txt";
                         outputPath = Path.Combine(tempDirectory, fileName);
                         File.WriteAllText(outputPath, fullCode);
diff --git a/src/Tasks/CultureInfoCache.cs b/src/Tasks/CultureInfoCache.cs
index dca043b7d3c..1a4786a6477 100644
--- a/src/Tasks/CultureInfoCache.cs
+++ b/src/Tasks/CultureInfoCache.cs
@@ -71,7 +71,7 @@ internal static bool IsValidCultureString(string name)
                 catch
                 {
                     // Second attempt: try pseudolocales (see above)
-                    return pseudoLocales.Contains(name);
+                    return pseudoLocales.Contains(name, StringComparer.OrdinalIgnoreCase);
                 }
             }
 #endif
diff --git a/src/Tasks/GetSDKReferenceFiles.cs b/src/Tasks/GetSDKReferenceFiles.cs
index 1af05538af3..64afe2300aa 100644
--- a/src/Tasks/GetSDKReferenceFiles.cs
+++ b/src/Tasks/GetSDKReferenceFiles.cs
@@ -81,7 +81,7 @@ public class GetSDKReferenceFiles : TaskExtension
         /// <summary>
         /// Folder where the cache files are written to
         /// </summary>
-        private string _cacheFilePath = Path.GetTempPath();
+        private string _cacheFilePath = FileUtilities.TempFileDirectory;
 
         #region Properties
 
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index 18aca5c8b41..73e8d25dbb4 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -1965,14 +1965,16 @@ Copyright (C) Microsoft Corporation. All rights reserved.
         <TargetPlatformMonikers Condition="'$(TargetPlatformMoniker)' == ''">None</TargetPlatformMonikers>
         <AdditionalPropertiesFromProject>$(_AdditionalTargetFrameworkInfoProperties)</AdditionalPropertiesFromProject>
 
-        <!-- Determine whether a project is "RID agnostic" for each TargetFramework.  "RID agnostic" means that global properties such as SelfContained and RuntimeIdentifier should
-             not flow across project references.
-
-             Generally this value will come from the IsRidAgnostic property set by the .NET SDK.  If that's not set, then the fallback logic here will be that the project
-             is RID agnostic if it doesn't have RuntimeIdentifier or RuntimeIdentifiers properties set. -->
+        <!-- Determine whether a project is "RID agnostic" for each TargetFramework.  "RID agnostic" means that global properties such as
+             SelfContained and RuntimeIdentifier should not flow across project references.  The IsRidAgnostic metadata value is consumed in the
+             _GetProjectReferenceTargetFrameworkProperties target, where those properties are added to a project's UndefineProperties if
+             IsRidAgnostic is set.
+        
+             Generally we set the IsRidAgnostic metadata based on the IsRidAgnostic property set by the .NET SDK.  If that's not set, then the
+             fallback logic here will be that the project is RID agnostic if it doesn't have RuntimeIdentifier or RuntimeIdentifiers properties set. -->
         <IsRidAgnostic>$(IsRidAgnostic)</IsRidAgnostic>
-        <IsRidAgnostic Condition=" '$(IsRidAgnostic)' == '' and '$(RuntimeIdentifier)' == '' and '$(RuntimeIdentifiers)' == '' ">true</IsRidAgnostic>
-        <IsRidAgnostic Condition=" '$(IsRidAgnostic)' == ''">false</IsRidAgnostic>
+        <IsRidAgnostic Condition=" '%(IsRidAgnostic)' == '' and '$(RuntimeIdentifier)' == '' and '$(RuntimeIdentifiers)' == '' ">true</IsRidAgnostic>
+        <IsRidAgnostic Condition=" '%(IsRidAgnostic)' == ''">false</IsRidAgnostic>
 
       </_TargetFrameworkInfo>
     </ItemGroup>
@@ -5711,7 +5713,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
 
     <RemoveDir
         Directories="$(ClickOncePublishDir)"
-        Condition="'$(ClickOncePublishDir)'=='$(OutputPath)app.publish\' and Exists('$(ClickOncePublishDir)')"/>
+        Condition="Exists('$(ClickOncePublishDir)')"/>
 
   </Target>
 
diff --git a/src/Tasks/ResolveSDKReference.cs b/src/Tasks/ResolveSDKReference.cs
index f45d483f733..9936453c588 100644
--- a/src/Tasks/ResolveSDKReference.cs
+++ b/src/Tasks/ResolveSDKReference.cs
@@ -25,6 +25,14 @@ public class ResolveSDKReference : TaskExtension
     {
         #region fields
 
+        /// <summary>
+        /// Platform aliases
+        /// </summary>
+        private static readonly Dictionary<string, string> PlatformAliases = new(StringComparer.OrdinalIgnoreCase)
+        {
+            { "UAP", "Windows" }
+        };
+
         /// <summary>
         /// Regex for breaking up the sdk reference include into pieces.
         /// Example: XNA, Version=8.0
@@ -1251,7 +1259,7 @@ private void CreateResolvedReferenceItem(string targetConfiguration, string targ
                     AddResolutionWarning("ResolveSDKReference.MaxPlatformVersionNotSpecified", projectName, DisplayName, Version, targetPlatformIdentifier, targetPlatformVersionFromItem.ToString(), targetPlatformIdentifier, targetPlatformVersion.ToString());
                 }
 
-                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform))
+                if (!String.IsNullOrEmpty(TargetPlatform) && !String.Equals(targetPlatformIdentifier, TargetPlatform) && (!PlatformAliases.TryGetValue(TargetPlatform, out string platform) || !String.Equals(targetPlatformIdentifier, platform, StringComparison.OrdinalIgnoreCase)))
                 {
                     AddResolutionErrorOrWarning("ResolveSDKReference.TargetPlatformIdentifierDoesNotMatch", projectName, DisplayName, Version, targetPlatformIdentifier, TargetPlatform);
                 }
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index f9fbcadfcae..abeba2b2791 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -677,8 +677,8 @@ private bool TryCompileInMemoryAssembly(IBuildEngine buildEngine, RoslynCodeTask
 
             // The source code cannot actually be compiled "in memory" so instead the source code is written to disk in
             // the temp folder as well as the assembly.  After compilation, the source code and assembly are deleted.
-            string sourceCodePath = Path.GetTempFileName();
-            string assemblyPath = Path.Combine(Path.GetTempPath(), $"{Path.GetRandomFileName()}.dll");
+            string sourceCodePath = FileUtilities.GetTemporaryFileName(".tmp");
+            string assemblyPath = FileUtilities.GetTemporaryFileName(".dll");
 
             // Delete the code file unless compilation failed or the environment variable MSBUILDLOGCODETASKFACTORYOUTPUT
             // is set (which allows for debugging problems)
diff --git a/src/Tasks/TlbReference.cs b/src/Tasks/TlbReference.cs
index 7350cee5080..f08ae5f4d27 100644
--- a/src/Tasks/TlbReference.cs
+++ b/src/Tasks/TlbReference.cs
@@ -75,7 +75,7 @@ internal TlbReference(TaskLoggingHelper taskLoggingHelper, bool silent, IComRefe
         /// <summary>
         /// directory we should write the wrapper to
         /// </summary>
-        protected override string OutputDirectory => (HasTemporaryWrapper) ? Path.GetTempPath() : base.OutputDirectory;
+        protected override string OutputDirectory => (HasTemporaryWrapper) ? FileUtilities.TempFileDirectory : base.OutputDirectory;
 
         private readonly bool _noClassMembers;
         private readonly string _targetProcessorArchitecture;
diff --git a/src/Tasks/WriteCodeFragment.cs b/src/Tasks/WriteCodeFragment.cs
index 26325de8241..5088a0ff87e 100644
--- a/src/Tasks/WriteCodeFragment.cs
+++ b/src/Tasks/WriteCodeFragment.cs
@@ -109,7 +109,7 @@ public override bool Execute()
                     OutputFile = new TaskItem(Path.Combine(OutputDirectory.ItemSpec, OutputFile.ItemSpec));
                 }
 
-                OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, extension));
+                OutputFile ??= new TaskItem(FileUtilities.GetTemporaryFile(OutputDirectory.ItemSpec, null, extension));
 
                 File.WriteAllText(OutputFile.ItemSpec, code); // Overwrites file if it already exists (and can be overwritten)
             }
diff --git a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
index a66d88e48dc..36670c64bc3 100644
--- a/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
+++ b/src/Utilities.UnitTests/TaskLoggingHelper_Tests.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.IO;
+using Microsoft.Build.Exceptions;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
@@ -283,5 +284,29 @@ public void TestLogFromException()
                 engine.AssertLogContains("InvalidOperationException");
             }
         }
+
+        /// <summary>
+        /// Verify that <see cref="TaskLoggingHelper.LogErrorFromException(Exception, bool, bool, string)" /> logs inner exceptions from an <see cref="AggregateException" />.
+        /// </summary>
+        [Fact]
+        public void TestLogFromExceptionWithAggregateException()
+        {
+            AggregateException aggregateException = new AggregateException(
+                new InvalidOperationException("The operation was invalid"),
+                new IOException("An I/O error occurred"));
+
+            MockEngine engine = new MockEngine();
+            MockTask task = new MockTask
+            {
+                BuildEngine = engine
+            };
+
+            task.Log.LogErrorFromException(aggregateException);
+
+            engine.Errors.ShouldBe(2);
+
+            engine.AssertLogContains("The operation was invalid");
+            engine.AssertLogContains("An I/O error occurred");
+        }
     }
 }
diff --git a/src/Utilities/MuxLogger.cs b/src/Utilities/MuxLogger.cs
index b58f7f10881..5f67d9265a7 100644
--- a/src/Utilities/MuxLogger.cs
+++ b/src/Utilities/MuxLogger.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Linq;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
@@ -862,7 +863,10 @@ private void RaiseProjectStartedEvent(object sender, ProjectStartedEventArgs bui
                         _firstProjectStartedEventContext = buildEvent.BuildEventContext;
 
                         // We've never seen a project started event, so raise the build started event and save this project started event.
-                        BuildStartedEventArgs startedEvent = new BuildStartedEventArgs(_buildStartedEvent.Message, _buildStartedEvent.HelpKeyword, Traits.LogAllEnvironmentVariables ? _buildStartedEvent.BuildEnvironment : null);
+                        BuildStartedEventArgs startedEvent =
+                            new BuildStartedEventArgs(_buildStartedEvent.Message,
+                            _buildStartedEvent.HelpKeyword,
+                            Traits.LogAllEnvironmentVariables ? _buildStartedEvent.BuildEnvironment : _buildStartedEvent.BuildEnvironment?.Where(kvp => EnvironmentUtilities.IsWellKnownEnvironmentDerivedProperty(kvp.Key)).ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
                         RaiseBuildStartedEvent(sender, startedEvent);
                     }
 
diff --git a/src/Utilities/TrackedDependencies/FileTracker.cs b/src/Utilities/TrackedDependencies/FileTracker.cs
index 7eb6306f4a1..a6fa201acc7 100644
--- a/src/Utilities/TrackedDependencies/FileTracker.cs
+++ b/src/Utilities/TrackedDependencies/FileTracker.cs
@@ -73,7 +73,7 @@ public static class FileTracker
 #region Static Member Data
 
         // The default path to temp, used to create explicitly short and long paths
-        private static readonly string s_tempPath = Path.GetTempPath();
+        private static readonly string s_tempPath = FileUtilities.TempFileDirectory;
 
         // The short path to temp
         private static readonly string s_tempShortPath = FileUtilities.EnsureTrailingSlash(NativeMethodsShared.GetShortFilePath(s_tempPath).ToUpperInvariant());
