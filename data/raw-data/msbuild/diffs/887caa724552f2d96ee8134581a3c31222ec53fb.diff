diff --git a/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
index f299136e527..298987ef008 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverLoader_Tests.cs
@@ -30,7 +30,6 @@ public class SdkResolverLoader_Tests
     {
         private readonly ITestOutputHelper _output;
         private readonly MockLogger _logger;
-        private readonly LoggingContext _loggingContext;
 
         public SdkResolverLoader_Tests(ITestOutputHelper output)
         {
@@ -38,10 +37,6 @@ public SdkResolverLoader_Tests(ITestOutputHelper output)
             _logger = new MockLogger(output);
             ILoggingService loggingService = LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             loggingService.RegisterLogger(_logger);
-
-            _loggingContext = new MockLoggingContext(
-                loggingService,
-                new BuildEventContext(0, 0, BuildEventContext.InvalidProjectContextId, 0, 0));
         }
 
         [Fact]
@@ -49,7 +44,7 @@ public void AssertDefaultLoaderReturnsDefaultResolvers()
         {
             var loader = new SdkResolverLoader();
 
-            var resolvers = loader.LoadAllResolvers(_loggingContext, new MockElementLocation("file"));
+            var resolvers = loader.LoadAllResolvers(new MockElementLocation("file"));
 
             resolvers.Select(i => i.GetType().FullName).ShouldBe(new[] { typeof(DefaultSdkResolver).FullName });
 
@@ -131,7 +126,7 @@ public void VerifyThrowsWhenResolverFailsToLoad()
         {
             SdkResolverLoader sdkResolverLoader = new MockSdkResolverLoader
             {
-                LoadResolverAssemblyFunc = (resolverPath, loggingContext, location) => typeof(SdkResolverLoader_Tests).GetTypeInfo().Assembly,
+                LoadResolverAssemblyFunc = (resolverPath) => typeof(SdkResolverLoader_Tests).GetTypeInfo().Assembly,
                 FindPotentialSdkResolversFunc = (rootFolder, loc) => new List<string>
                 {
                     "myresolver.dll"
@@ -141,7 +136,7 @@ public void VerifyThrowsWhenResolverFailsToLoad()
 
             InvalidProjectFileException exception = Should.Throw<InvalidProjectFileException>(() =>
             {
-                sdkResolverLoader.LoadAllResolvers(_loggingContext, ElementLocation.EmptyLocation);
+                sdkResolverLoader.LoadAllResolvers(ElementLocation.EmptyLocation);
             });
 
             exception.Message.ShouldBe($"The SDK resolver type \"{nameof(MockSdkResolverThatDoesNotLoad)}\" failed to load. A8BB8B3131D3475D881ACD3AF8D75BD6");
@@ -163,7 +158,7 @@ public void VerifyThrowsWhenResolverHasNoPublicConstructor()
         {
             SdkResolverLoader sdkResolverLoader = new MockSdkResolverLoader
             {
-                LoadResolverAssemblyFunc = (resolverPath, loggingContext, location) => typeof(SdkResolverLoader_Tests).GetTypeInfo().Assembly,
+                LoadResolverAssemblyFunc = (resolverPath) => typeof(SdkResolverLoader_Tests).GetTypeInfo().Assembly,
                 FindPotentialSdkResolversFunc = (rootFolder, loc) => new List<string>
                 {
                     "myresolver.dll"
@@ -173,7 +168,7 @@ public void VerifyThrowsWhenResolverHasNoPublicConstructor()
 
             InvalidProjectFileException exception = Should.Throw<InvalidProjectFileException>(() =>
             {
-                sdkResolverLoader.LoadAllResolvers(_loggingContext, ElementLocation.EmptyLocation);
+                sdkResolverLoader.LoadAllResolvers(ElementLocation.EmptyLocation);
             });
 
             exception.Message.ShouldStartWith($"The SDK resolver type \"{nameof(MockSdkResolverNoPublicConstructor)}\" failed to load.");
@@ -195,7 +190,7 @@ public void VerifyWarningLoggedWhenResolverAssemblyCannotBeLoaded()
 
             SdkResolverLoader sdkResolverLoader = new MockSdkResolverLoader
             {
-                LoadResolverAssemblyFunc = (resolverPath, loggingContext, location) => throw new Exception(expectedMessage),
+                LoadResolverAssemblyFunc = (resolverPath) => throw new Exception(expectedMessage),
                 FindPotentialSdkResolversFunc = (rootFolder, loc) => new List<string>
                 {
                     assemblyPath,
@@ -204,7 +199,7 @@ public void VerifyWarningLoggedWhenResolverAssemblyCannotBeLoaded()
 
             InvalidProjectFileException exception = Should.Throw<InvalidProjectFileException>(() =>
             {
-                sdkResolverLoader.LoadAllResolvers(_loggingContext, ElementLocation.EmptyLocation);
+                sdkResolverLoader.LoadAllResolvers(ElementLocation.EmptyLocation);
             });
 
             exception.Message.ShouldBe($"The SDK resolver assembly \"{assemblyPath}\" could not be loaded. {expectedMessage}");
@@ -345,12 +340,12 @@ public void SdkResolverLoaderHonorsIncludeDefaultEnvVar()
                     Environment.SetEnvironmentVariable("MSBUILDINCLUDEDEFAULTSDKRESOLVER", "false");
                     SdkResolverLoader loader = new MockSdkResolverLoader()
                     {
-                        LoadResolversAction = (resolverPath, loggingContext, location, resolvers) =>
+                        LoadResolversAction = (resolverPath, location, resolvers) =>
                         {
                             resolvers.Add(new MockSdkResolverWithAssemblyPath(resolverPath));
                         }
                     };
-                    IReadOnlyList<SdkResolverBase> resolvers = loader.LoadAllResolvers(_loggingContext, new MockElementLocation("file"));
+                    IReadOnlyList<SdkResolverBase> resolvers = loader.LoadAllResolvers(new MockElementLocation("file"));
 
                     resolvers.Count.ShouldBe(0);
                 }
@@ -457,22 +452,22 @@ public override SdkResultBase Resolve(SdkReference sdkReference, SdkResolverCont
 
         private sealed class MockSdkResolverLoader : SdkResolverLoader
         {
-            public Func<string, LoggingContext, ElementLocation, Assembly> LoadResolverAssemblyFunc { get; set; }
+            public Func<string, Assembly> LoadResolverAssemblyFunc { get; set; }
 
             public Func<string, ElementLocation, IReadOnlyList<string>> FindPotentialSdkResolversFunc { get; set; }
 
             public Func<Assembly, IEnumerable<Type>> GetResolverTypesFunc { get; set; }
 
-            public Action<string, LoggingContext, ElementLocation, List<SdkResolver>> LoadResolversAction { get; set; }
+            public Action<string, ElementLocation, List<SdkResolver>> LoadResolversAction { get; set; }
 
-            protected override Assembly LoadResolverAssembly(string resolverPath, LoggingContext loggingContext, ElementLocation location)
+            protected override Assembly LoadResolverAssembly(string resolverPath)
             {
                 if (LoadResolverAssemblyFunc != null)
                 {
-                    return LoadResolverAssemblyFunc(resolverPath, loggingContext, location);
+                    return LoadResolverAssemblyFunc(resolverPath);
                 }
 
-                return base.LoadResolverAssembly(resolverPath, loggingContext, location);
+                return base.LoadResolverAssembly(resolverPath);
             }
 
             protected override IEnumerable<Type> GetResolverTypes(Assembly assembly)
@@ -495,14 +490,14 @@ internal override IReadOnlyList<string> FindPotentialSdkResolvers(string rootFol
                 return base.FindPotentialSdkResolvers(rootFolder, location);
             }
 
-            protected override void LoadResolvers(string resolverPath, LoggingContext loggingContext, ElementLocation location, List<SdkResolver> resolvers)
+            protected override void LoadResolvers(string resolverPath, ElementLocation location, List<SdkResolver> resolvers)
             {
                 if (LoadResolversAction != null)
                 {
-                    LoadResolversAction(resolverPath, loggingContext, location, resolvers);
+                    LoadResolversAction(resolverPath, location, resolvers);
                     return;
                 }
-                base.LoadResolvers(resolverPath, loggingContext, location, resolvers);
+                base.LoadResolvers(resolverPath, location, resolvers);
             }
         }
     }
diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index 2fa8989d641..f263f41844d 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -638,13 +638,12 @@ private MockLoaderStrategy()
                 _resolversWithPatterns = new List<(string ResolvableSdkPattern, SdkResolver Resolver)>();
             }
 
-            internal override IReadOnlyList<SdkResolver> LoadAllResolvers(LoggingContext loggingContext, ElementLocation location)
+            internal override IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation location)
             {
                 return _resolvers.OrderBy(i => i.Priority).ToList();
             }
 
-            internal override IReadOnlyList<SdkResolverManifest> GetResolversManifests(LoggingContext loggingContext,
-            ElementLocation location)
+            internal override IReadOnlyList<SdkResolverManifest> GetResolversManifests(ElementLocation location)
             {
                 var manifests = new List<SdkResolverManifest>();
                 foreach (SdkResolver resolver in _resolvers)
@@ -663,7 +662,7 @@ internal override IReadOnlyList<SdkResolverManifest> GetResolversManifests(Loggi
                 return manifests;
             }
 
-            protected internal override IReadOnlyList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, LoggingContext loggingContext, ElementLocation location)
+            protected internal override IReadOnlyList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, ElementLocation location)
             {
                 var resolvers = new List<SdkResolver>();
                 foreach (var resolver in _resolvers)
@@ -683,7 +682,7 @@ protected internal override IReadOnlyList<SdkResolver> LoadResolversFromManifest
                 return resolvers.OrderBy(t => t.Priority).ToList();
             }
 
-            internal override IReadOnlyList<SdkResolver> GetDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
+            internal override IReadOnlyList<SdkResolver> GetDefaultResolvers()
             {
                 return new List<SdkResolver>();
             }
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
index b6a4be03702..3c5349611c1 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs
@@ -34,7 +34,7 @@ internal class SdkResolverLoader
 #endif
             ?? Environment.GetEnvironmentVariable("MSBUILDADDITIONALSDKRESOLVERSFOLDER");
 
-        internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers(LoggingContext loggingContext, ElementLocation location)
+        internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers()
         {
             var resolvers = !string.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
                 new List<SdkResolver> { new DefaultSdkResolver() }
@@ -43,7 +43,7 @@ internal virtual IReadOnlyList<SdkResolver> GetDefaultResolvers(LoggingContext l
             return resolvers;
         }
 
-        internal virtual IReadOnlyList<SdkResolver> LoadAllResolvers(LoggingContext loggingContext, ElementLocation location)
+        internal virtual IReadOnlyList<SdkResolver> LoadAllResolvers(ElementLocation location)
         {
             var resolvers = !string.Equals(IncludeDefaultResolver, "false", StringComparison.OrdinalIgnoreCase) ?
                 new List<SdkResolver> { new DefaultSdkResolver() }
@@ -59,13 +59,13 @@ internal virtual IReadOnlyList<SdkResolver> LoadAllResolvers(LoggingContext logg
 
             foreach (var potentialResolver in potentialResolvers)
             {
-                LoadResolvers(potentialResolver, loggingContext, location, resolvers);
+                LoadResolvers(potentialResolver, location, resolvers);
             }
 
             return resolvers.OrderBy(t => t.Priority).ToList();
         }
 
-        internal virtual IReadOnlyList<SdkResolverManifest> GetResolversManifests(LoggingContext loggingContext, ElementLocation location)
+        internal virtual IReadOnlyList<SdkResolverManifest> GetResolversManifests(ElementLocation location)
         {
             return FindPotentialSdkResolversManifests(
                 Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectoryRoot, "SdkResolvers"), location);
@@ -223,7 +223,7 @@ protected virtual IEnumerable<Type> GetResolverTypes(Assembly assembly)
                 .Select(t => t.type);
         }
 
-        protected virtual Assembly LoadResolverAssembly(string resolverPath, LoggingContext loggingContext, ElementLocation location)
+        protected virtual Assembly LoadResolverAssembly(string resolverPath)
         {
 #if !FEATURE_ASSEMBLYLOADCONTEXT
             return Assembly.LoadFrom(resolverPath);
@@ -232,19 +232,19 @@ protected virtual Assembly LoadResolverAssembly(string resolverPath, LoggingCont
 #endif
         }
 
-        protected internal virtual IReadOnlyList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, LoggingContext loggingContext, ElementLocation location)
+        protected internal virtual IReadOnlyList<SdkResolver> LoadResolversFromManifest(SdkResolverManifest manifest, ElementLocation location)
         {
             var resolvers = new List<SdkResolver>();
-            LoadResolvers(manifest.Path, loggingContext, location, resolvers);
+            LoadResolvers(manifest.Path, location, resolvers);
             return resolvers;
         }
 
-        protected virtual void LoadResolvers(string resolverPath, LoggingContext loggingContext, ElementLocation location, List<SdkResolver> resolvers)
+        protected virtual void LoadResolvers(string resolverPath, ElementLocation location, List<SdkResolver> resolvers)
         {
             Assembly assembly;
             try
             {
-                assembly = LoadResolverAssembly(resolverPath, loggingContext, location);
+                assembly = LoadResolverAssembly(resolverPath);
             }
             catch (Exception e)
             {
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index c538f45f7e6..8679d45d3d3 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -145,7 +145,7 @@ private SdkResult ResolveSdkUsingResolversWithPatternsFirst(int submissionId, Sd
         {
             if (_specificResolversManifestsRegistry == null || _generalResolversManifestsRegistry == null)
             {
-                RegisterResolversManifests(loggingContext, sdkReferenceLocation);
+                RegisterResolversManifests(sdkReferenceLocation);
             }
 
             // Pick up the matching specific resolvers from the list of resolvers.
@@ -246,7 +246,7 @@ private List<SdkResolver> GetResolvers(IList<SdkResolverManifest> resolversManif
                         {
                             // Loading of the needed resolvers.
                             MSBuildEventSource.Log.SdkResolverServiceLoadResolversStart();
-                            newResolvers = _sdkResolverLoader.LoadResolversFromManifest(resolverManifest, loggingContext, sdkReferenceLocation);
+                            newResolvers = _sdkResolverLoader.LoadResolversFromManifest(resolverManifest, sdkReferenceLocation);
                             _manifestToResolvers[resolverManifest] = newResolvers;
                             MSBuildEventSource.Log.SdkResolverServiceLoadResolversStop(resolverManifest.DisplayName, newResolvers.Count);
                         }
@@ -265,7 +265,7 @@ private SdkResult ResolveSdkUsingAllResolvers(int submissionId, SdkReference sdk
             // Lazy initialize all SDK resolvers
             if (_resolversList == null)
             {
-                Initialize(loggingContext, sdkReferenceLocation);
+                Initialize(sdkReferenceLocation);
             }
 
             TryResolveSdkUsingSpecifiedResolvers(
@@ -444,7 +444,7 @@ private object GetResolverState(int submissionId, SdkResolver resolver)
             return null;
         }
 
-        private void Initialize(LoggingContext loggingContext, ElementLocation location)
+        private void Initialize(ElementLocation location)
         {
             lock (_lockObject)
             {
@@ -454,12 +454,12 @@ private void Initialize(LoggingContext loggingContext, ElementLocation location)
                 }
 
                 MSBuildEventSource.Log.SdkResolverServiceInitializeStart();
-                _resolversList = _sdkResolverLoader.LoadAllResolvers(loggingContext, location);
+                _resolversList = _sdkResolverLoader.LoadAllResolvers(location);
                 MSBuildEventSource.Log.SdkResolverServiceInitializeStop(_resolversList.Count);
             }
         }
 
-        private void RegisterResolversManifests(LoggingContext loggingContext, ElementLocation location)
+        private void RegisterResolversManifests(ElementLocation location)
         {
             lock (_lockObject)
             {
@@ -469,12 +469,12 @@ private void RegisterResolversManifests(LoggingContext loggingContext, ElementLo
                 }
 
                 MSBuildEventSource.Log.SdkResolverServiceFindResolversManifestsStart();
-                var allResolversManifests = _sdkResolverLoader.GetResolversManifests(loggingContext, location);
+                var allResolversManifests = _sdkResolverLoader.GetResolversManifests(location);
 
                 _manifestToResolvers = new Dictionary<SdkResolverManifest, IReadOnlyList<SdkResolver>>();
 
                 // Load and add the manifest for the default resolvers, located directly in this dll.
-                IReadOnlyList<SdkResolver> defaultResolvers = _sdkResolverLoader.GetDefaultResolvers(loggingContext, location);
+                IReadOnlyList<SdkResolver> defaultResolvers = _sdkResolverLoader.GetDefaultResolvers();
                 SdkResolverManifest sdkDefaultResolversManifest = null;
                 if (defaultResolvers.Count > 0)
                 {
