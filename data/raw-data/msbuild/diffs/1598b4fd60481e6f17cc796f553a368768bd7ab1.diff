diff --git a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
index 7e6fb294877..4cc129d7abd 100644
--- a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
@@ -80,10 +80,7 @@ public void SolutionProjectIgnoresDuplicateDefaultTargets(string name)
                       </Project>");
                 ProjectInstance[] instances = SolutionProjectGenerator.Generate(SolutionFile.Parse(sln.Path), null, null, _buildEventContext, CreateMockLoggingService());
                 instances.ShouldHaveSingleItem();
-                if (!name.Equals("name.that.does.Not.Affect.The.Build.targets"))
-                {
-                    instances[0].Targets["Build"].AfterTargets.ShouldBe("NonsenseTarget");
-                }
+                instances[0].Targets["Build"].AfterTargets.ShouldBe(string.Empty);
                 MockLogger logger = new MockLogger(output);
                 instances[0].Build(targets: null, new List<ILogger> { logger }).ShouldBeTrue();
             }
diff --git a/src/Build/Construction/Solution/SolutionProjectGenerator.cs b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
index 8afec9e1c5d..28ce38d434b 100644
--- a/src/Build/Construction/Solution/SolutionProjectGenerator.cs
+++ b/src/Build/Construction/Solution/SolutionProjectGenerator.cs
@@ -1969,11 +1969,14 @@ private static void AddTraversalReferencesTarget(ProjectInstance traversalProjec
                 outputItemAsItem = "@(" + outputItem + ")";
             }
 
-            if (!traversalProject.Targets.Select(target => target.Key).Contains(targetName ?? "Build"))
+            string correctedTargetName = targetName ?? "Build";
+
+            if (traversalProject.Targets.Select(target => target.Key).Contains(correctedTargetName))
             {
-                ProjectTargetInstance target = traversalProject.AddTarget(targetName ?? "Build", string.Empty, string.Empty, outputItemAsItem, null, string.Empty, string.Empty, string.Empty, string.Empty, false /* legacy target returns behaviour */);
-                AddReferencesBuildTask(target, targetName, outputItem);
+                traversalProject.RemoveTarget(correctedTargetName);
             }
+            ProjectTargetInstance target = traversalProject.AddTarget(correctedTargetName, string.Empty, string.Empty, outputItemAsItem, null, string.Empty, string.Empty, string.Empty, string.Empty, false /* legacy target returns behaviour */);
+            AddReferencesBuildTask(target, targetName, outputItem);
         }
 
         /// <summary>
