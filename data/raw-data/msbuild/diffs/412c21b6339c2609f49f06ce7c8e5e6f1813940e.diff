diff --git a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
index c7f5df71aff..0571ce4e7eb 100644
--- a/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
+++ b/src/Tasks.UnitTests/RARPrecomputedCache_Tests.cs
@@ -13,28 +13,41 @@ namespace Microsoft.Build.Tasks.UnitTests
 {
     public class RARPrecomputedCache_Tests
     {
+        private Dictionary<string, Guid> guidStore = new Dictionary<string, Guid>();
+
+        private Guid calculateMvid(string path)
+        {
+            if (!guidStore.ContainsKey(path))
+            {
+                guidStore.Add(path, Guid.NewGuid());
+            }
+            return guidStore[path];
+        }
+
         [Fact]
         public void TestPrecomputedCacheOutput()
         {
             using (TestEnvironment env = TestEnvironment.Create())
             {
+                TransientTestFile standardCache = env.CreateFile(".cache");
                 ResolveAssemblyReference t = new ResolveAssemblyReference();
                 t._cache = new SystemState();
                 t._cache.instanceLocalFileStateCache = new Dictionary<string, SystemState.FileState>() {
-                    { "assembly1", new SystemState.FileState(DateTime.Now) },
-                    { "assembly2", new SystemState.FileState(DateTime.Now) { Assembly = new Shared.AssemblyNameExtension("hi") } } };
-                TransientTestFile standardCache = env.CreateFile(".cache");
+                    { Path.Combine(standardCache.Path, "assembly1"), new SystemState.FileState(DateTime.Now) },
+                    { Path.Combine(standardCache.Path, "assembly2"), new SystemState.FileState(DateTime.Now) { Assembly = new Shared.AssemblyNameExtension("hi") } } };
+                t._cache.IsDirty = true;
                 t.StateFile = standardCache.Path;
-                t.WriteStateFile();
+                t.WriteStateFile(calculateMvid);
                 int standardLen = File.ReadAllText(standardCache.Path).Length;
                 File.Delete(standardCache.Path);
                 standardLen.ShouldBeGreaterThan(0);
 
-                TransientTestFile precomputedCache = env.CreateFile(standardCache.Path + ".cache", string.Empty);
-                t.AssemblyInformationCacheOutputPath = precomputedCache.Path;
-                t.WriteStateFile();
+                string precomputedPath = standardCache.Path + ".cache";
+                t._cache.IsDirty = true;
+                t.AssemblyInformationCacheOutputPath = precomputedPath;
+                t.WriteStateFile(calculateMvid);
                 File.Exists(standardCache.Path).ShouldBeFalse();
-                int preLen = File.ReadAllText(precomputedCache.Path).Length;
+                int preLen = File.ReadAllText(precomputedPath).Length;
                 preLen.ShouldBeGreaterThan(0);
                 preLen.ShouldNotBe(standardLen);
             }
@@ -44,38 +57,42 @@ public void TestPrecomputedCacheOutput()
         public void TestPreComputedCacheInputAndOutput()
         {
             using (TestEnvironment env = TestEnvironment.Create()) {
+                TransientTestFile standardCache = env.CreateFile(".cache");
                 ResolveAssemblyReference t = new ResolveAssemblyReference();
                 t._cache = new SystemState();
                 t._cache.instanceLocalFileStateCache = new Dictionary<string, SystemState.FileState>() {
-                    { "assembly1", new SystemState.FileState(DateTime.Now) },
-                    { "assembly2", new SystemState.FileState(DateTime.Now) { Assembly = new Shared.AssemblyNameExtension("hi") } } };
-                TransientTestFile standardCache = env.CreateFile(".cache");
+                    { Path.Combine(standardCache.Path, "assembly1"), new SystemState.FileState(DateTime.Now) },
+                    { Path.Combine(standardCache.Path, "assembly2"), new SystemState.FileState(DateTime.Now) { Assembly = new Shared.AssemblyNameExtension("hi") } } };
                 t.StateFile = standardCache.Path;
-                t.WriteStateFile();
+                t._cache.IsDirty = true;
+                t.WriteStateFile(calculateMvid);
 
-                t._cache.instanceLocalFileStateCache.Add("..\\.nuget\\packages\\system.text.encodings.web\\4.7.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll",
+                string dllName = Path.Combine(Path.GetDirectoryName(standardCache.Path), "randomFolder", "dll.dll");
+                t._cache.instanceLocalFileStateCache.Add(dllName,
                     new SystemState.FileState(DateTime.Now) {
                         Assembly = null,
                         RuntimeVersion = "v4.0.30319",
                         FrameworkNameAttribute = new System.Runtime.Versioning.FrameworkName(".NETFramework", Version.Parse("4.7.2"), "Profile"),
                         scatterFiles = new string[] { "first", "second" } });
-                TransientTestFile precomputedCache = env.CreateFile(standardCache.Path + ".cache", string.Empty);
-                t.AssemblyInformationCacheOutputPath = precomputedCache.Path;
-                t.WriteStateFile();
+                string precomputedCachePath = standardCache.Path + ".cache";
+                t.AssemblyInformationCacheOutputPath = precomputedCachePath;
+                t._cache.IsDirty = true;
+                t.WriteStateFile(calculateMvid);
 
                 ResolveAssemblyReference u = new ResolveAssemblyReference();
                 u.StateFile = standardCache.Path;
                 u.AssemblyInformationCachePaths = new ITaskItem[]
                 {
-                    new TaskItem(precomputedCache.Path)
+                    new TaskItem(precomputedCachePath)
                 };
 
-                u.ReadStateFile(File.GetLastWriteTime, Array.Empty<AssemblyTableInfo>());
-                u._cache.instanceLocalFileStateCache.ShouldNotContainKey("..\\.nuget\\packages\\system.text.encodings.web\\4.7.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll");
+                u.ReadStateFile(File.GetLastWriteTime, Array.Empty<AssemblyTableInfo>(), calculateMvid, p => true);
+                u._cache.instanceLocalFileStateCache.ShouldNotContainKey(dllName);
                 File.Delete(standardCache.Path);
-                u.ReadStateFile(File.GetLastWriteTime, Array.Empty<AssemblyTableInfo>());
-                u._cache.instanceLocalFileStateCache.ShouldContainKey("..\\.nuget\\packages\\system.text.encodings.web\\4.7.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll");
-                SystemState.FileState a3 = u._cache.instanceLocalFileStateCache["..\\.nuget\\packages\\system.text.encodings.web\\4.7.0\\lib\\netstandard2.0\\System.Text.Encodings.Web.dll"];
+                u._cache = null;
+                u.ReadStateFile(File.GetLastWriteTime, Array.Empty<AssemblyTableInfo>(), calculateMvid, p => true);
+                u._cache.instanceLocalFileStateCache.ShouldContainKey(dllName);
+                SystemState.FileState a3 = u._cache.instanceLocalFileStateCache[dllName];
                 a3.Assembly.ShouldBeNull();
                 a3.RuntimeVersion.ShouldBe("v4.0.30319");
                 a3.FrameworkNameAttribute.Version.ShouldBe(Version.Parse("4.7.2"));
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index 335fc98dfca..54c0c3c0f86 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1857,13 +1857,13 @@ private void LogConflict(Reference reference, string fusionName)
         /// <summary>
         /// Reads the state file (if present) into the cache. If not present, attempts to read from CacheInputPaths, then creates a new cache if necessary.
         /// </summary>
-        internal void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)
+        internal void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo, Func<string, Guid> calculateMvid = null, Func<string, bool> fileExists = null)
         {
             _cache = StateFileBase.DeserializeCache<SystemState>(_stateFile, Log);
 
             if (_cache == null)
             {
-                _cache = SystemState.DeserializePrecomputedCaches(AssemblyInformationCachePaths ?? Array.Empty<ITaskItem>(), Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo);
+                _cache = SystemState.DeserializePrecomputedCaches(AssemblyInformationCachePaths ?? Array.Empty<ITaskItem>(), Log, typeof(SystemState), getLastWriteTime, installedAssemblyTableInfo, calculateMvid, fileExists);
             }
             else
             {
@@ -1875,11 +1875,11 @@ internal void ReadStateFile(GetLastWriteTime getLastWriteTime, AssemblyTableInfo
         /// <summary>
         /// If CacheOutputPath is non-null, writes out a cache to that location. Otherwise, writes out the state file if a state name was supplied and the cache is dirty.
         /// </summary>
-        internal void WriteStateFile()
+        internal void WriteStateFile(Func<string, Guid> calculateMvid = null)
         {
             if (!string.IsNullOrEmpty(AssemblyInformationCacheOutputPath))
             {
-                _cache.SerializePrecomputedCache(AssemblyInformationCacheOutputPath, Log);
+                _cache.SerializePrecomputedCache(AssemblyInformationCacheOutputPath, Log, calculateMvid);
             }
             else if (!string.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
             {
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index 4968c9aa691..aa8087eecfc 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Diagnostics;
@@ -295,6 +294,7 @@ public void GetObjectData(SerializationInfo info, StreamingContext context)
         internal bool IsDirty
         {
             get { return isDirty; }
+            set { isDirty = value; }
         }
 
         /// <summary>
@@ -558,13 +558,15 @@ out fileState.frameworkName
         /// <summary>
         /// Reads in cached data from stateFiles to build an initial cache. Avoids logging warnings or errors.
         /// </summary>
-        internal static SystemState DeserializePrecomputedCaches(ITaskItem[] stateFiles, TaskLoggingHelper log, Type requiredReturnType, GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo)
+        internal static SystemState DeserializePrecomputedCaches(ITaskItem[] stateFiles, TaskLoggingHelper log, Type requiredReturnType, GetLastWriteTime getLastWriteTime, AssemblyTableInfo[] installedAssemblyTableInfo, Func<string, Guid> calculateMvid, Func<string, bool> fileExists)
         {
             SystemState retVal = new SystemState();
             retVal.SetGetLastWriteTime(getLastWriteTime);
             retVal.SetInstalledAssemblyInformation(installedAssemblyTableInfo);
             retVal.isDirty = stateFiles.Length > 0;
             HashSet<string> assembliesFound = new HashSet<string>();
+            calculateMvid ??= CalculateMvid;
+            fileExists ??= FileSystems.Default.FileExists;
 
             foreach (ITaskItem stateFile in stateFiles)
             {
@@ -581,22 +583,13 @@ internal static SystemState DeserializePrecomputedCaches(ITaskItem[] stateFiles,
                     {
                         FileState fileState = kvp.Value;
                         // Verify that the assembly is correct
-                        Guid mvid;
                         string fullPath = Path.GetFullPath(Path.Combine(Path.GetDirectoryName(stateFile.ToString()), relativePath));
-                        if (FileSystems.Default.FileExists(fullPath))
+                        if (fileExists(fullPath) && calculateMvid(fullPath).Equals(fileState.ModuleVersionID))
                         {
-                            using (var reader = new PEReader(File.OpenRead(fullPath)))
-                            {
-                                var metadataReader = reader.GetMetadataReader();
-                                mvid = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);
-                            }
-                            if (mvid.Equals(fileState.ModuleVersionID))
-                            {
-                                // Correct file path and timestamp
-                                fileState.LastModified = retVal.getLastWriteTime(fullPath);
-                                retVal.instanceLocalFileStateCache[fullPath] = fileState;
-                                assembliesFound.Add(relativePath);
-                            }
+                            // Correct file path and timestamp
+                            fileState.LastModified = retVal.getLastWriteTime(fullPath);
+                            retVal.instanceLocalFileStateCache[fullPath] = fileState;
+                            assembliesFound.Add(relativePath);
                         }
                     }
                 }
@@ -608,19 +601,16 @@ internal static SystemState DeserializePrecomputedCaches(ITaskItem[] stateFiles,
         /// <summary>
         /// Modifies this object to be more portable across machines, then writes it to stateFile.
         /// </summary>
-        internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
+        internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log, Func<string, Guid> calculateMvid)
         {
             Dictionary<string, FileState> newInstanceLocalFileStateCache = new Dictionary<string, FileState>(instanceLocalFileStateCache.Count);
+            calculateMvid ??= CalculateMvid;
             foreach (KeyValuePair<string, FileState> kvp in instanceLocalFileStateCache)
             {
                 // Add MVID to allow us to verify that we are using the same assembly later
                 string absolutePath = kvp.Key;
                 FileState fileState = kvp.Value;
-                using (var reader = new PEReader(File.OpenRead(absolutePath)))
-                {
-                    var metadataReader = reader.GetMetadataReader();
-                    fileState.ModuleVersionID = metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);
-                }
+                fileState.ModuleVersionID = calculateMvid(absolutePath);
 
                 string relativePath = FileUtilities.MakeRelative(Path.GetDirectoryName(stateFile), absolutePath);
                 newInstanceLocalFileStateCache[relativePath] = fileState;
@@ -634,6 +624,15 @@ internal void SerializePrecomputedCache(string stateFile, TaskLoggingHelper log)
             SerializeCache(stateFile, log);
         }
 
+        private static Guid CalculateMvid(string path)
+        {
+            using (var reader = new PEReader(File.OpenRead(path)))
+            {
+                var metadataReader = reader.GetMetadataReader();
+                return metadataReader.GetGuid(metadataReader.GetModuleDefinition().Mvid);
+            }
+        }
+
             /// <summary>
             /// Cached implementation of GetDirectories.
             /// </summary>
