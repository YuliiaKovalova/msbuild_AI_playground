diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index 32e221ac704..6618dc945c8 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -1137,17 +1137,6 @@ private void IssueBuildRequests(BuildRequestEntry issuingEntry, FullyQualifiedBu
                         buildRequestDataFlags |= BuildRequestDataFlags.IgnoreMissingEmptyAndInvalidImports;
                     }
 
-                    bool buildUnderIsolationExemption = false;
-                    if (_componentHost.BuildParameters.IsolateProjects == IsolateProjects.Message
-                        && !string.Equals(issuingEntry.RequestConfiguration.ProjectFullPath, request.Config.ProjectFullPath, StringComparison.Ordinal))
-                    {
-                        // The issuing (dependent) project did not receive all the required
-                        // target results from its provided input results cache file, so
-                        // it will need to violate its isolation mode and build said
-                        // targets on the dependency project.
-                        buildUnderIsolationExemption = true;
-                    }
-
                     if (matchingConfig == null)
                     {
                         // No configuration locally, are we already waiting for it?
@@ -1180,8 +1169,7 @@ private void IssueBuildRequests(BuildRequestEntry issuingEntry, FullyQualifiedBu
                             parentRequest: issuingEntry.Request,
                             buildRequestDataFlags: buildRequestDataFlags,
                             requestedProjectState: null,
-                            skipStaticGraphIsolationConstraints: request.SkipStaticGraphIsolationConstraints,
-                            buildUnderIsolationExemption: buildUnderIsolationExemption);
+                            skipStaticGraphIsolationConstraints: request.SkipStaticGraphIsolationConstraints);
 
                         issuingEntry.WaitForResult(newRequest);
 
@@ -1210,8 +1198,7 @@ private void IssueBuildRequests(BuildRequestEntry issuingEntry, FullyQualifiedBu
                             parentRequest: issuingEntry.Request,
                             buildRequestDataFlags: buildRequestDataFlags,
                             requestedProjectState: null,
-                            skipStaticGraphIsolationConstraints: request.SkipStaticGraphIsolationConstraints,
-                            buildUnderIsolationExemption: buildUnderIsolationExemption);
+                            skipStaticGraphIsolationConstraints: request.SkipStaticGraphIsolationConstraints);
 
                         IResultsCache resultsCache = (IResultsCache)_componentHost.GetComponent(BuildComponentType.ResultsCache);
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
index d6d963f4324..87604dfba2e 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs
@@ -524,16 +524,7 @@ await PushTargets(errorTargets, currentTargetEntry, currentTargetEntry.Lookup, t
                         // This target is no longer actively building.
                         _requestEntry.RequestConfiguration.ActivelyBuildingTargets.Remove(currentTargetEntry.Name);
 
-                        // Don't add the target result to the build result if this target was built
-                        // under isolation exemption because otherwise it will appear in the
-                        // override cache of the dependent project, resulting in the target
-                        // result being present in both the override and current caches
-                        // once the dependent project receives the build result and places it
-                        // into its current cache.
-                        if (!_requestEntry.Request.BuildUnderIsolationExemption)
-                        {
-                            _buildResult.AddResultsForTarget(currentTargetEntry.Name, targetResult);
-                        }
+                        _buildResult.AddResultsForTarget(currentTargetEntry.Name, targetResult);
 
                         TargetEntry topEntry = _targetsToBuild.Pop();
                         if (topEntry.StopProcessingOnCompletion)
diff --git a/src/Build/BackEnd/Shared/BuildRequest.cs b/src/Build/BackEnd/Shared/BuildRequest.cs
index 96d8f9a38d0..d0ffa213952 100644
--- a/src/Build/BackEnd/Shared/BuildRequest.cs
+++ b/src/Build/BackEnd/Shared/BuildRequest.cs
@@ -165,14 +165,6 @@ public BuildRequest(
         /// <param name="buildRequestDataFlags">Additional flags for the request.</param>
         /// <param name="requestedProjectState">Filter for desired build results.</param>
         /// <param name="projectContextId">The project context id</param>
-        /// <param name="buildUnderIsolationExemption"><c>true</c> iff this request's
-        /// <see cref="BuildRequest.Targets"></see>
-        /// will be built under an isolation exemption triggered under the isolation
-        /// mode <see cref="IsolateProjects.Message"/>; i.e., the issuing
-        /// (dependent) project did not obtain all required target cache
-        /// results in its <see cref="BuildParameters.InputResultsCacheFiles"/>,
-        /// so it must violate isolation constraints and build the
-        /// <see cref="BuildRequest.Targets"/> on the dependency project.</param>
         public BuildRequest(
             int submissionId,
             int nodeRequestId,
@@ -184,8 +176,7 @@ public BuildRequest(
             BuildRequestDataFlags buildRequestDataFlags = BuildRequestDataFlags.None,
             RequestedProjectState requestedProjectState = null,
             bool skipStaticGraphIsolationConstraints = false,
-            int projectContextId = BuildEventContext.InvalidProjectContextId,
-            bool buildUnderIsolationExemption = false)
+            int projectContextId = BuildEventContext.InvalidProjectContextId)
         : this(submissionId, nodeRequestId, configurationId, hostServices, buildRequestDataFlags, requestedProjectState, projectContextId)
         {
             ErrorUtilities.VerifyThrowArgumentNull(escapedTargets, "targets");
@@ -202,7 +193,6 @@ public BuildRequest(
             _parentGlobalRequestId = parentRequest?.GlobalRequestId ?? InvalidGlobalRequestId;
 
             _skipStaticGraphIsolationConstraints = skipStaticGraphIsolationConstraints;
-            BuildUnderIsolationExemption = buildUnderIsolationExemption;
         }
 
         /// <summary>
@@ -406,20 +396,6 @@ internal bool IsRootRequest
         /// </summary>
         internal bool SkipStaticGraphIsolationConstraints => _skipStaticGraphIsolationConstraints;
 
-        /// <summary>
-        /// Gets a value indicating whether this request's <see cref="BuildRequest.Targets"></see>
-        /// will be built under an isolation exemption triggered under the isolation
-        /// mode <see cref="IsolateProjects.Message"/>; i.e., the issuing
-        /// (dependent) project did not obtain all required target cache
-        /// results in its <see cref="BuildParameters.InputResultsCacheFiles"/>,
-        /// so it must violate isolation constraints and build the
-        /// <see cref="BuildRequest.Targets"/> on the dependency project.
-        /// </summary>
-        internal bool BuildUnderIsolationExemption
-        {
-            get;
-        }
-
         /// <summary>
         /// Sets the configuration id to a resolved id.
         /// </summary>
