diff --git a/src/Build/Logging/LiveLogger/ANSIBuilder.cs b/src/Build/Logging/LiveLogger/ANSIBuilder.cs
index 4c667536db1..29640d18ac9 100644
--- a/src/Build/Logging/LiveLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/LiveLogger/ANSIBuilder.cs
@@ -1,6 +1,5 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
-//
 
 using System;
 using System.Collections.Generic;
@@ -11,8 +10,10 @@ namespace Microsoft.Build.Logging.LiveLogger
     internal static class ANSIBuilder
     {
         public static string ANSIRegex = @"\x1b(?:[@-Z\-_]|\[[0-?]*[ -\/]*[@-~])";
+
         // TODO: This should replace ANSIRegex once FancyLogger's API is internal
         public static Regex ANSIRegexRegex = new Regex(ANSIRegex);
+
         public static string ANSIRemove(string text)
         {
             return ANSIRegexRegex.Replace(text, "");
@@ -23,10 +24,16 @@ public static int ANSIBreakpoint(string text, int position)
         {
             return ANSIBreakpoint(text, position, 0);
         }
+
         public static int ANSIBreakpoint(string text, int position, int initialPosition)
         {
-            if (position >= text.Length) return text.Length;
+            if (position >= text.Length)
+            {
+                return text.Length;
+            }
+
             int nonAnsiIndex = 0;
+
             // Match nextMatch = Regex.Match(text, ANSIRegex);
             Match nextMatch = ANSIRegexRegex.Match(text, initialPosition);
             int i = 0;
@@ -56,6 +63,7 @@ public static List<string> ANSIWrap(string text, int position)
                 textSpan = textSpan.Slice(breakpoint);
                 breakpoint = ANSIBreakpoint(text, position, breakpoint);
             }
+
             result.Add(textSpan.ToString());
             return result;
         }
@@ -64,9 +72,13 @@ public static class Alignment
         {
             public static string Center(string text)
             {
-                string result = String.Empty;
+                string result = string.Empty;
                 string noFormatString = ANSIRemove(text);
-                if (noFormatString.Length > Console.BufferWidth) return text;
+                if (noFormatString.Length > Console.BufferWidth)
+                {
+                    return text;
+                }
+
                 int space = (Console.BufferWidth - noFormatString.Length) / 2;
                 result += new string(' ', space);
                 result += text;
@@ -76,9 +88,13 @@ public static string Center(string text)
 
             public static string Right(string text)
             {
-                string result = String.Empty;
+                string result = string.Empty;
                 string noFormatString = ANSIRemove(text);
-                if (noFormatString.Length > Console.BufferWidth) return text;
+                if (noFormatString.Length > Console.BufferWidth)
+                {
+                    return text;
+                }
+
                 int space = Console.BufferWidth - noFormatString.Length;
                 result += new string(' ', space);
                 result += text;
@@ -87,9 +103,13 @@ public static string Right(string text)
 
             public static string Left(string text)
             {
-                string result = String.Empty;
+                string result = string.Empty;
                 string noFormatString = ANSIRemove(text);
-                if (noFormatString.Length > Console.BufferWidth) return text;
+                if (noFormatString.Length > Console.BufferWidth)
+                {
+                    return text;
+                }
+
                 int space = Console.BufferWidth - noFormatString.Length;
                 result += text;
                 result += new string(' ', space);
@@ -98,10 +118,14 @@ public static string Left(string text)
 
             public static string SpaceBetween(string leftText, string rightText, int width)
             {
-                string result = String.Empty;
+                string result = string.Empty;
                 string leftNoFormatString = ANSIRemove(leftText);
                 string rightNoFormatString = ANSIRemove(rightText);
-                if (leftNoFormatString.Length + rightNoFormatString.Length > Console.BufferWidth) return leftText + rightText;
+                if (leftNoFormatString.Length + rightNoFormatString.Length > Console.BufferWidth)
+                {
+                    return leftText + rightText;
+                }
+
                 int space = Console.BufferWidth - (leftNoFormatString.Length + rightNoFormatString.Length);
                 result += leftText;
                 result += new string(' ', space - 1);
@@ -242,9 +266,11 @@ public static string Up(int n = 1)
             public static string UpAndScroll(int n)
             {
                 string result = "";
-                for (int i = 0; i < n; i++) {
+                for (int i = 0; i < n; i++)
+                {
                     result += "\x1bM";
                 }
+
                 return result;
             }
 
@@ -278,7 +304,8 @@ public static string SavePosition()
                 return String.Format("\x1b[s");
             }
 
-            public static string RestorePosition() {
+            public static string RestorePosition()
+            {
                 return String.Format("\x1b[u");
             }
 
@@ -302,7 +329,11 @@ public static string SetStop()
 
             public static string ForwardTab(int n)
             {
-                if (n == 0) return "";
+                if (n == 0)
+                {
+                    return "";
+                }
+
                 return String.Format("\x1b[{0}I", n);
             }
 
@@ -393,7 +424,7 @@ public static string Spinner()
 
             public static string Spinner(int n)
             {
-                char[] chars = { '\\', '|', '/', '-'};
+                char[] chars = { '\\', '|', '/', '-' };
                 return chars[n % (chars.Length - 1)].ToString();
             }
 
diff --git a/src/Build/Logging/LiveLogger/LiveLogger.cs b/src/Build/Logging/LiveLogger/LiveLogger.cs
index d0edcaf333d..a6dc4b52862 100644
--- a/src/Build/Logging/LiveLogger/LiveLogger.cs
+++ b/src/Build/Logging/LiveLogger/LiveLogger.cs
@@ -9,7 +9,7 @@
 namespace Microsoft.Build.Logging.LiveLogger
 {
     public class LiveLogger : ILogger
-    {   
+    {
         private Dictionary<int, LiveLoggerProjectNode> projects = new Dictionary<int, LiveLoggerProjectNode>();
 
         private bool Succeeded;
@@ -17,7 +17,7 @@ public class LiveLogger : ILogger
         private float existingTasks = 1;
         private float completedTasks = 0;
 
-        public string Parameters {  get; set; }
+        public string Parameters { get; set; }
 
         public LoggerVerbosity Verbosity { get; set; }
 
@@ -45,14 +45,14 @@ public void Initialize(IEventSource eventSource)
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             // Cancelled
             Console.CancelKeyPress += new ConsoleCancelEventHandler(console_CancelKeyPressed);
-            
+
             Task.Run(() =>
             {
                 Render();
             });
         }
 
-        void Render()
+        private void Render()
         {
             // Initialize
             LiveLoggerBuffer.Initialize();
@@ -70,7 +70,10 @@ void Render()
                 Task.Delay((i / 60) * 1_000).ContinueWith((t) =>
                 {
                     // Rerender projects only when needed
-                    foreach (var project in projects) project.Value.Log();
+                    foreach (var project in projects)
+                    {
+                        project.Value.Log();
+                    }
                     // Rerender buffer
                     LiveLoggerBuffer.Render();
                 });
@@ -81,7 +84,11 @@ void Render()
                     switch (key)
                     {
                         case ConsoleKey.UpArrow:
-                            if (LiveLoggerBuffer.TopLineIndex > 0) LiveLoggerBuffer.TopLineIndex--;
+                            if (LiveLoggerBuffer.TopLineIndex > 0)
+                            {
+                                LiveLoggerBuffer.TopLineIndex--;
+                            }
+
                             LiveLoggerBuffer.ShouldRerender = true;
                             break;
                         case ConsoleKey.DownArrow:
@@ -96,22 +103,25 @@ void Render()
         }
 
         // Build
-        void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)
+        private void eventSource_BuildStarted(object sender, BuildStartedEventArgs e)
         {
         }
 
-        void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
+        private void eventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
         {
             Succeeded = e.Succeeded;
         }
 
         // Project
-        void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
+        private void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
             // If id already exists...
-            if (projects.ContainsKey(id)) return;
+            if (projects.ContainsKey(id))
+            {
+                return;
+            }
             // Add project
             LiveLoggerProjectNode node = new LiveLoggerProjectNode(e);
             projects[id] = node;
@@ -119,11 +129,14 @@ void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e)
             node.ShouldRerender = true;
         }
 
-        void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
+        private void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            {
+                return;
+            }
             // Update line
             node.Finished = true;
             // Log
@@ -131,22 +144,28 @@ void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         }
 
         // Target
-        void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
+        private void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            {
+                return;
+            }
             // Update
             node.AddTarget(e);
             // Log
             node.ShouldRerender = true;
         }
 
-        void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
+        private void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            {
+                return;
+            }
             // Update
             node.FinishedTargets++;
             // Log
@@ -154,11 +173,14 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         }
 
         // Task
-        void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
+        private void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            {
+                return;
+            }
             // Update
             node.AddTask(e);
             existingTasks++;
@@ -166,46 +188,59 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
             node.ShouldRerender = true;
         }
 
-        void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
+        private void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
         {
             completedTasks++;
         }
 
         // Raised messages, warnings and errors
-        void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
+        private void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
         {
-            if (e is TaskCommandLineEventArgs) return;
+            if (e is TaskCommandLineEventArgs)
+            {
+                return;
+            }
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            {
+                return;
+            }
             // Update
             node.AddMessage(e);
             // Log
             node.ShouldRerender = true;
         }
 
-        void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
+        private void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            {
+                return;
+            }
             // Update
             node.AddWarning(e);
             // Log
             node.ShouldRerender = true;
         }
-        void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
+
+        private void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node)) return;
+            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            {
+                return;
+            }
             // Update
             node.AddError(e);
             // Log
             node.ShouldRerender = true;
         }
 
-        void console_CancelKeyPressed(object? sender, ConsoleCancelEventArgs eventArgs)
+        private void console_CancelKeyPressed(object? sender, ConsoleCancelEventArgs eventArgs)
         {
             // Shutdown logger
             Shutdown();
diff --git a/src/Build/Logging/LiveLogger/LiveLoggerBuffer.cs b/src/Build/Logging/LiveLogger/LiveLoggerBuffer.cs
index 696beaa55fb..78ec484bc19 100644
--- a/src/Build/Logging/LiveLogger/LiveLoggerBuffer.cs
+++ b/src/Build/Logging/LiveLogger/LiveLoggerBuffer.cs
@@ -1,6 +1,5 @@
 // Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
-//
 
 using System;
 using System.Collections.Generic;
@@ -23,8 +22,14 @@ public string Text
             {
                 // Set text value and get wrapped lines
                 _text = value;
-                if (ShouldWrapLines) WrappedText = ANSIBuilder.ANSIWrap(value, Console.BufferWidth);
-                else WrappedText = new List<string> { value };
+                if (ShouldWrapLines)
+                {
+                    WrappedText = ANSIBuilder.ANSIWrap(value, Console.BufferWidth);
+                }
+                else
+                {
+                    WrappedText = new List<string> { value };
+                }
                 // Buffer should rerender
                 LiveLoggerBuffer.ShouldRerender = true;
             }
@@ -86,7 +91,11 @@ public static void Terminate()
         #region Rendering
         public static void Render()
         {
-            if (IsTerminated || !ShouldRerender) return;
+            if (IsTerminated || !ShouldRerender)
+            {
+                return;
+            }
+
             ShouldRerender = false;
             Console.Write(
                 // Write header
@@ -95,9 +104,11 @@ public static void Render()
                 // Write footer
                 ANSIBuilder.Eraser.LineCursorToEnd() + ANSIBuilder.Cursor.Position(Console.BufferHeight - 1, 0) +
                 // TODO: Remove and replace with actual footer
-                new string('-', Console.BufferWidth) +$"\nBuild progress: XX%\tTopLineIndex={TopLineIndex}"
-            );
-            if (Lines.Count == 0) return;
+                new string('-', Console.BufferWidth) + $"\nBuild progress: XX%\tTopLineIndex={TopLineIndex}");
+            if (Lines.Count == 0)
+            {
+                return;
+            }
 
             // Iterate over lines and display on terminal
             string contents = string.Empty;
@@ -106,17 +117,27 @@ public static void Render()
             foreach (LiveLoggerBufferLine line in Lines)
             {
                 // Continue if accum line count + next lines < scrolling area
-                if (accumulatedLineCount + line.WrappedText.Count < TopLineIndex) {
+                if (accumulatedLineCount + line.WrappedText.Count < TopLineIndex)
+                {
                     accumulatedLineCount += line.WrappedText.Count;
                     continue;
                 }
                 // Break if exceeds scrolling area
-                if (accumulatedLineCount - TopLineIndex > ScrollableAreaHeight) break;
-                foreach (string s in line.WrappedText) {
+                if (accumulatedLineCount - TopLineIndex > ScrollableAreaHeight)
+                {
+                    break;
+                }
+
+                foreach (string s in line.WrappedText)
+                {
                     // Get line index relative to scroll area
                     lineIndex = accumulatedLineCount - TopLineIndex;
                     // Print if line in scrolling area
-                    if (lineIndex >= 0 && lineIndex < ScrollableAreaHeight) contents += ANSIBuilder.Cursor.Position(lineIndex + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd() + s;
+                    if (lineIndex >= 0 && lineIndex < ScrollableAreaHeight)
+                    {
+                        contents += ANSIBuilder.Cursor.Position(lineIndex + 2, 0) + ANSIBuilder.Eraser.LineCursorToEnd() + s;
+                    }
+
                     accumulatedLineCount++;
                 }
             }
@@ -137,7 +158,11 @@ public static int GetLineIndexById(int lineId)
         public static LiveLoggerBufferLine? GetLineById(int lineId)
         {
             int index = GetLineIndexById(lineId);
-            if (index == -1) return null;
+            if (index == -1)
+            {
+                return null;
+            }
+
             return Lines[index];
         }
         #endregion
@@ -159,7 +184,10 @@ public static int GetLineIndexById(int lineId)
             {
                 // Get line index
                 int lineIndex = GetLineIndexById(lineId);
-                if (lineIndex == -1) return null;
+                if (lineIndex == -1)
+                {
+                    return null;
+                }
                 // Get line end index
                 Lines.Insert(lineIndex, line);
             }
@@ -196,7 +224,10 @@ public static void DeleteLine(int lineId)
         {
             // Get line index
             int lineIndex = GetLineIndexById(lineId);
-            if (lineIndex == -1) return;
+            if (lineIndex == -1)
+            {
+                return;
+            }
             // Delete
             Lines.RemoveAt(lineIndex);
             ShouldRerender = true;
diff --git a/src/Build/Logging/LiveLogger/LiveLoggerMessageNode.cs b/src/Build/Logging/LiveLogger/LiveLoggerMessageNode.cs
index 85b3143a0c9..7445cc528bb 100644
--- a/src/Build/Logging/LiveLogger/LiveLoggerMessageNode.cs
+++ b/src/Build/Logging/LiveLogger/LiveLoggerMessageNode.cs
@@ -1,13 +1,11 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
-//
 
 using System;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.LiveLogger
-{ 
-
+{
     public class LiveLoggerMessageNode
     {
         // Use this to change the max lenngth (relative to screen size) of messages
@@ -28,7 +26,10 @@ public enum MessageType
         public LiveLoggerMessageNode(LazyFormattedBuildEventArgs args)
         {
             Message = args.Message ?? string.Empty;
-            if (Message.Length > MAX_LENGTH) Message = Message.Substring(0, MAX_LENGTH - 1) + "â¦";
+            if (Message.Length > MAX_LENGTH)
+            {
+                Message = Message.Substring(0, MAX_LENGTH - 1) + "â¦";
+            }
             // Get type
             switch (args)
             {
@@ -73,7 +74,11 @@ public string ToANSIString()
         // TODO: Rename to Log after FancyLogger's API becomes internal
         public void Log()
         {
-            if (Line == null) return;
+            if (Line == null)
+            {
+                return;
+            }
+
             Line.Text = $"    âââ {ToANSIString()}";
         }
     }
diff --git a/src/Build/Logging/LiveLogger/LiveLoggerProjectNode.cs b/src/Build/Logging/LiveLogger/LiveLoggerProjectNode.cs
index 1b2289e9f94..63725da9f25 100644
--- a/src/Build/Logging/LiveLogger/LiveLoggerProjectNode.cs
+++ b/src/Build/Logging/LiveLogger/LiveLoggerProjectNode.cs
@@ -1,6 +1,5 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
-//
 
 using System;
 using System.Collections.Generic;
@@ -9,7 +8,7 @@
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.LiveLogger
-{ 
+{
     internal class LiveLoggerProjectNode
     {
         /// <summary>
@@ -59,7 +58,11 @@ public LiveLoggerProjectNode(ProjectStartedEventArgs args)
         // TODO: Rename to Render() after FancyLogger's API becomes internal
         public void Log()
         {
-            if (!ShouldRerender) return;
+            if (!ShouldRerender)
+            {
+                return;
+            }
+
             ShouldRerender = false;
             // Project details
             string lineContents = ANSIBuilder.Alignment.SpaceBetween(
@@ -68,37 +71,71 @@ public void Log()
                 // Project
                 ANSIBuilder.Formatting.Dim("Project: ") +
                 // Project file path with color
-                $"{ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default )} [{TargetFramework ?? "*"}]",
+                $"{ANSIBuilder.Formatting.Color(ANSIBuilder.Formatting.Bold(GetUnambiguousPath(ProjectPath)), Finished ? ANSIBuilder.Formatting.ForegroundColor.Green : ANSIBuilder.Formatting.ForegroundColor.Default)} [{TargetFramework ?? "*"}]",
                 $"({MessageCount} Messages, {WarningCount} Warnings, {ErrorCount} Errors)",
-                Console.WindowWidth
-            );
+                Console.WindowWidth);
             // Create or update line
-            if (Line is null) Line = LiveLoggerBuffer.WriteNewLine(lineContents, false);
-            else Line.Text = lineContents;
+            if (Line is null)
+            {
+                Line = LiveLoggerBuffer.WriteNewLine(lineContents, false);
+            }
+            else
+            {
+                Line.Text = lineContents;
+            }
 
             // For finished projects
             if (Finished)
             {
-                if (CurrentTargetLine is not null) LiveLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
+                if (CurrentTargetLine is not null)
+                {
+                    LiveLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
+                }
+
                 foreach (LiveLoggerMessageNode node in AdditionalDetails.ToList())
                 {
                     // Only delete high priority messages
-                    if (node.Type != LiveLoggerMessageNode.MessageType.HighPriorityMessage) continue;
-                    if (node.Line is not null) LiveLoggerBuffer.DeleteLine(node.Line.Id);
+                    if (node.Type != LiveLoggerMessageNode.MessageType.HighPriorityMessage)
+                    {
+                        continue;
+                    }
+
+                    if (node.Line is not null)
+                    {
+                        LiveLoggerBuffer.DeleteLine(node.Line.Id);
+                    }
                 }
             }
 
             // Current target details
-            if (CurrentTargetNode is null) return;
+            if (CurrentTargetNode is null)
+            {
+                return;
+            }
+
             string currentTargetLineContents = $"    âââ {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}";
-            if (CurrentTargetLine is null) CurrentTargetLine = LiveLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
-            else CurrentTargetLine.Text = currentTargetLineContents;
+            if (CurrentTargetLine is null)
+            {
+                CurrentTargetLine = LiveLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
+            }
+            else
+            {
+                CurrentTargetLine.Text = currentTargetLineContents;
+            }
 
             // Messages, warnings and errors
             foreach (LiveLoggerMessageNode node in AdditionalDetails)
             {
-                if (Finished && node.Type == LiveLoggerMessageNode.MessageType.HighPriorityMessage) continue;
-                if (node.Line is null) node.Line = LiveLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
+                if (Finished && node.Type == LiveLoggerMessageNode.MessageType.HighPriorityMessage)
+                {
+                    continue;
+                }
+
+                if (node.Line is null)
+                {
+                    node.Line = LiveLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
+                }
+
                 node.Log();
             }
         }
@@ -112,12 +149,22 @@ public LiveLoggerTargetNode AddTarget(TargetStartedEventArgs args)
         {
             // Get target id
             int targetId = args.BuildEventContext!.TargetId;
-            if (CurrentTargetNode?.Id == targetId) return CurrentTargetNode.AddTask(args);
-            else return null;
+            if (CurrentTargetNode?.Id == targetId)
+            {
+                return CurrentTargetNode.AddTask(args);
+            }
+            else
+            {
+                return null;
+            }
         }
         public LiveLoggerMessageNode? AddMessage(BuildMessageEventArgs args)
         {
-            if (args.Importance != MessageImportance.High) return null;
+            if (args.Importance != MessageImportance.High)
+            {
+                return null;
+            }
+
             MessageCount++;
             LiveLoggerMessageNode node = new LiveLoggerMessageNode(args);
             AdditionalDetails.Add(node);
diff --git a/src/Build/Logging/LiveLogger/LiveLoggerTargetNode.cs b/src/Build/Logging/LiveLogger/LiveLoggerTargetNode.cs
index 69665aed9ed..25b90c9fdf0 100644
--- a/src/Build/Logging/LiveLogger/LiveLoggerTargetNode.cs
+++ b/src/Build/Logging/LiveLogger/LiveLoggerTargetNode.cs
@@ -1,12 +1,10 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
-//
 
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.LiveLogger
-{ 
-
+{
     public class LiveLoggerTargetNode
     {
         public int Id;
diff --git a/src/Build/Logging/LiveLogger/LiveLoggerTaskNode.cs b/src/Build/Logging/LiveLogger/LiveLoggerTaskNode.cs
index 28a9ad09d87..5c3a9c00d1f 100644
--- a/src/Build/Logging/LiveLogger/LiveLoggerTaskNode.cs
+++ b/src/Build/Logging/LiveLogger/LiveLoggerTaskNode.cs
@@ -1,12 +1,10 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
-//
 
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.LiveLogger
-{ 
-
+{
     public class LiveLoggerTaskNode
     {
         public int Id;
