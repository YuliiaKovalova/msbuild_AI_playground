diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index c4169bf8724..54069122a58 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -77,6 +77,11 @@ internal class Scheduler : IScheduler
         /// </summary>
         private int _coreLimit;
 
+        /// <summary>
+        /// The weight of busy nodes in GetAvailableCoresForExplicitRequests().
+        /// </summary>
+        private int _nodeCoreAllocationWeight;
+
         /// <summary>
         /// { nodeId -> NodeInfo }
         /// A list of nodes we know about.  For the non-distributed case, there will be no more nodes than the
@@ -202,6 +207,13 @@ public Scheduler()
             // RequestCore exactly the number of cores.
             _coreLimit = Math.Max(0, _coreLimit - 1);
 
+            if (!int.TryParse(Environment.GetEnvironmentVariable("MSBUILDNODECOREALLOCATIONWEIGHT"), out _nodeCoreAllocationWeight)
+                || _nodeCoreAllocationWeight <= 0
+                || _nodeCoreAllocationWeight > 100)
+            {
+                _nodeCoreAllocationWeight = 0;
+            }
+
             if (String.IsNullOrEmpty(_debugDumpPath))
             {
                 _debugDumpPath = Path.GetTempPath();
@@ -1360,7 +1372,9 @@ private int GetAvailableCoresForScheduling()
 
         private int GetAvailableCoresForExplicitRequests()
         {
-            return Math.Max(0, _coreLimit - (/*_schedulingData.ExecutingRequestsCount +*/ _schedulingData.ExplicitlyRequestedCores));
+            int implicitlyAllocatedCores = ((_schedulingData.ExecutingRequestsCount - 1) * _nodeCoreAllocationWeight) / 100;
+            int explicitlyAllocatedCores = _schedulingData.ExplicitlyRequestedCores;
+            return Math.Max(0, _coreLimit - (implicitlyAllocatedCores + explicitlyAllocatedCores));
         }
 
         /// <summary>
