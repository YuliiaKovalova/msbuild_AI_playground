diff --git a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
index 6e1556b5712..2520bc41bb6 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
@@ -19,6 +19,7 @@
 using ElementLocation = Microsoft.Build.Construction.ElementLocation;
 using ILoggingService = Microsoft.Build.BackEnd.Logging.ILoggingService;
 using LegacyThreadingData = Microsoft.Build.Execution.LegacyThreadingData;
+using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
 
@@ -328,31 +329,28 @@ public void MSBuildLastTaskResult()
         /// else could let the item get corrupt (inconsistent values for Filename and FullPath, for example)
         /// </summary>
         [Fact]
-        [Trait("Category", "netcore-osx-failing")]
-        [Trait("Category", "netcore-linux-failing")]
-        [Trait("Category", "mono-osx-failing")]
         public void TasksCanAddRecursiveDirBuiltInMetadata()
         {
-            MockLogger logger = new MockLogger();
+            MockLogger logger = new MockLogger(this._testOutput);
 
-            string projectFileContents = ObjectModelHelpers.CleanupFileContents(@"
-<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
+            string projectFileContents = ObjectModelHelpers.CleanupFileContents($@"
+<Project>
 <Target Name='t'>
- <CreateItem Include='$(programfiles)\reference assemblies\**\*.dll;'>
+ <CreateItem Include='{Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)}\**\*.dll'>
    <Output TaskParameter='Include' ItemName='x' />
  </CreateItem>
 <Message Text='@(x)'/>
- <Message Text='[%(x.RecursiveDir)]'/>                    
+ <Message Text='[%(x.RecursiveDir)]'/>
 </Target>
 </Project>");
 
             Project project = new Project(XmlReader.Create(new StringReader(projectFileContents)));
-            List<ILogger> loggers = new List<ILogger>();
-            loggers.Add(logger);
-            bool result = project.Build("t", loggers);
+            project.Build("t", new[] { logger }).ShouldBeTrue();
 
-            Assert.True(result);
-            logger.AssertLogDoesntContain("[]");
+            // Assuming the current directory of the test .dll has at least one subfolder
+            // such as Roslyn, the log will contain [Roslyn\] (or [Roslyn/] on Unix)
+            string slashAndBracket = Path.DirectorySeparatorChar.ToString() + "]";
+            logger.AssertLogContains(slashAndBracket);
             logger.AssertLogDoesntContain("MSB4118");
             logger.AssertLogDoesntContain("MSB3031");
         }
