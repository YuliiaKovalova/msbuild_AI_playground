diff --git a/src/Build/ElementLocation/XmlDocumentWithLocation.cs b/src/Build/ElementLocation/XmlDocumentWithLocation.cs
index 1b3de4bb5e0..0b31130f1f3 100644
--- a/src/Build/ElementLocation/XmlDocumentWithLocation.cs
+++ b/src/Build/ElementLocation/XmlDocumentWithLocation.cs
@@ -7,6 +7,12 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
+#if FEATURE_MSIOREDIST
+using Path = Microsoft.IO.Path;
+#else
+using Path = System.IO.Path;
+#endif
+
 namespace Microsoft.Build.Construction
 {
     /// <summary>
@@ -350,17 +356,17 @@ private void DetermineWhetherToLoadReadOnly(string fullPath)
                 else if (s_readOnlyFlags == ReadOnlyLoadFlags.LoadReadOnlyIfAppropriate && fullPath is object)
                 {
                     // Only files from Microsoft
-                    if (Path.GetFileName(fullPath).StartsWith("Microsoft.", StringComparison.OrdinalIgnoreCase))
+                    if (Path.GetFileName(fullPath.AsSpan()).StartsWith("Microsoft.".AsSpan(), StringComparison.OrdinalIgnoreCase))
                     {
                         // Load read-only if they're in program files or windows directories
                         ErrorUtilities.VerifyThrow(Path.IsPathRooted(fullPath), "should be full path");
-                        string directory = Path.GetDirectoryName(fullPath);
+                        var directory = Path.GetDirectoryName(fullPath.AsSpan());
 
-                        string windowsFolder = Environment.GetFolderPath(Environment.SpecialFolder.Windows);
+                        var windowsFolder = Environment.GetFolderPath(Environment.SpecialFolder.Windows).AsSpan();
 
-                        if ((!String.IsNullOrEmpty(windowsFolder) && directory.StartsWith(windowsFolder, StringComparison.OrdinalIgnoreCase)) ||
-                            (!String.IsNullOrEmpty(FrameworkLocationHelper.programFiles32) && directory.StartsWith(FrameworkLocationHelper.programFiles32, StringComparison.OrdinalIgnoreCase)) ||
-                            (!String.IsNullOrEmpty(FrameworkLocationHelper.programFiles64) && directory.StartsWith(FrameworkLocationHelper.programFiles64, StringComparison.OrdinalIgnoreCase)))
+                        if ((windowsFolder.Length > 0 && directory.StartsWith(windowsFolder, StringComparison.OrdinalIgnoreCase)) ||
+                            (!string.IsNullOrEmpty(FrameworkLocationHelper.programFiles32) && directory.StartsWith(FrameworkLocationHelper.programFiles32.AsSpan(), StringComparison.OrdinalIgnoreCase)) ||
+                            (!string.IsNullOrEmpty(FrameworkLocationHelper.programFiles64) && directory.StartsWith(FrameworkLocationHelper.programFiles64.AsSpan(), StringComparison.OrdinalIgnoreCase)))
                         {
                             _loadAsReadOnly = true;
                         }
