diff --git a/src/Tasks.UnitTests/GetAssembliesMetadata_Tests.cs b/src/Tasks.UnitTests/GetAssembliesMetadata_Tests.cs
new file mode 100644
index 00000000000..cb930a78195
--- /dev/null
+++ b/src/Tasks.UnitTests/GetAssembliesMetadata_Tests.cs
@@ -0,0 +1,83 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+
+#if FEATURE_APPDOMAIN
+
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+using Microsoft.Build.UnitTests;
+using Shouldly;
+using Xunit;
+using Xunit.Sdk;
+
+namespace Microsoft.Build.Tasks.UnitTests
+{
+    public class GetAssembliesMetadata_Tests
+    {
+        private static string TestAssembliesPaths { get; } = Path.Combine(AppContext.BaseDirectory, "TestResources", "Assemblies");
+
+        [Fact]
+        public void CheckPresenceOfCustomCOMAssemblyAttributes()
+        {
+            string assemblyPath = Path.Combine(TestAssembliesPaths, "Custom_COM.dll");
+            GetAssembliesMetadata t = new() { AssembyPaths = new[] { assemblyPath } };
+
+            bool isSuccess = t.Execute();
+
+            isSuccess.ShouldBeTrue();
+            t.AssembliesMetadata[0].ItemSpec.ShouldBe(assemblyPath);
+            t.AssembliesMetadata[0].GetMetadata("AssemblyName").ShouldBe("Custom_COM");
+            t.AssembliesMetadata[0].GetMetadata("IsImportedFromTypeLib").ShouldBe("False");
+            t.AssembliesMetadata[0].GetMetadata("RevisionNumber").ShouldBe("4");
+            t.AssembliesMetadata[0].GetMetadata("IsAssembly").ShouldBe("True");
+            t.AssembliesMetadata[0].GetMetadata("RuntimeVersion").ShouldBe("v4.0.30319");
+            t.AssembliesMetadata[0].GetMetadata("MajorVersion").ShouldBe("1");
+            t.AssembliesMetadata[0].GetMetadata("MinorVersion").ShouldBe("2");
+            t.AssembliesMetadata[0].GetMetadata("PeKind").ShouldBe("1");
+            t.AssembliesMetadata[0].GetMetadata("Guid").ShouldBe("a48efb66-2596-4c6a-87ab-c8a765e54429");
+            t.AssembliesMetadata[0].GetMetadata("BuildNumber").ShouldBe("3");
+            t.AssembliesMetadata[0].GetMetadata("Description").ShouldBe("description for com");
+            t.AssembliesMetadata[0].GetMetadata("Culture").ShouldBeEmpty();
+            t.AssembliesMetadata[0].GetMetadata("TargetFrameworkMoniker").ShouldBe(".NETFramework,Version=v4.7.2");
+            t.AssembliesMetadata[0].GetMetadata("DefaultAlias").ShouldBe("Custom_COM");
+            t.AssembliesMetadata[0].GetMetadata("PublicKey").ShouldBeEmpty();
+            t.AssembliesMetadata[0].GetMetadata("PublicKeyLength").ShouldBe("0");
+        }
+
+        [Fact]
+        public void CheckPresenceOfCOMAssemblyAttributes()
+        {
+            string programFilesX86 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86);
+            string programFilesRefAssemblyLocation = Path.Combine(programFilesX86, "Reference Assemblies\\Microsoft\\Framework");
+            string assemblyPath = Path.Combine(programFilesRefAssemblyLocation, ".NETFramework", "v4.7.2", "mscorlib.dll");
+            GetAssembliesMetadata t = new() { AssembyPaths = new[] { assemblyPath } };
+
+            bool isSuccess = t.Execute();
+
+            isSuccess.ShouldBeTrue();
+            t.AssembliesMetadata[0].ItemSpec.ShouldBe(assemblyPath);
+            t.AssembliesMetadata[0].GetMetadata("AssemblyName").ShouldBe("mscorlib");
+            t.AssembliesMetadata[0].GetMetadata("IsImportedFromTypeLib").ShouldBe("False");
+            t.AssembliesMetadata[0].GetMetadata("RevisionNumber").ShouldBe("0");
+            t.AssembliesMetadata[0].GetMetadata("IsAssembly").ShouldBe("True");
+            t.AssembliesMetadata[0].GetMetadata("RuntimeVersion").ShouldBe("v4.0.30319");
+            t.AssembliesMetadata[0].GetMetadata("MajorVersion").ShouldBe("4");
+            t.AssembliesMetadata[0].GetMetadata("MinorVersion").ShouldBe("0");
+            t.AssembliesMetadata[0].GetMetadata("PeKind").ShouldBe("1");
+            t.AssembliesMetadata[0].GetMetadata("Guid").ShouldBe("BED7F4EA-1A96-11d2-8F08-00A0C9A6186D");
+            t.AssembliesMetadata[0].GetMetadata("BuildNumber").ShouldBe("0");
+            t.AssembliesMetadata[0].GetMetadata("Description").ShouldBe("mscorlib.dll");
+            t.AssembliesMetadata[0].GetMetadata("Culture").ShouldBeEmpty();
+            t.AssembliesMetadata[0].GetMetadata("TargetFrameworkMoniker").ShouldBeEmpty();
+            t.AssembliesMetadata[0].GetMetadata("DefaultAlias").ShouldBe("mscorlib");
+            t.AssembliesMetadata[0].GetMetadata("PublicKey").ShouldBe("00000000000000000400000000000000");
+            t.AssembliesMetadata[0].GetMetadata("PublicKeyLength").ShouldBe("16");
+        }
+    }
+}
+#endif
diff --git a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
index a69b7fa2ea3..190b2fc38f6 100644
--- a/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
+++ b/src/Tasks.UnitTests/Microsoft.Build.Tasks.UnitTests.csproj
@@ -145,6 +145,9 @@
 
   <ItemGroup>
     <None Update="ResourceHandling\*.txt" CopyToOutputDirectory="PreserveNewest" />
+    <None Update="TestResources\Assemblies\Custom_COM.dll">
+      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
+    </None>
     <None Update="TestResources\lorem.bin">
       <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
     </None>
diff --git a/src/Tasks.UnitTests/TestResources/Assemblies/Custom_COM.dll b/src/Tasks.UnitTests/TestResources/Assemblies/Custom_COM.dll
new file mode 100644
index 00000000000..af25630e33a
Binary files /dev/null and b/src/Tasks.UnitTests/TestResources/Assemblies/Custom_COM.dll differ
diff --git a/src/Tasks/AssemblyDependency/AssemblyAttributes.cs b/src/Tasks/AssemblyDependency/AssemblyAttributes.cs
new file mode 100644
index 00000000000..798218d848a
--- /dev/null
+++ b/src/Tasks/AssemblyDependency/AssemblyAttributes.cs
@@ -0,0 +1,52 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Text;
+using System.Threading.Tasks;
+
+namespace Microsoft.Build.Tasks.AssemblyDependency
+{
+    /// <summary>
+    /// Collection of assembly attributes.
+    /// </summary>
+    internal class AssemblyAttributes
+    {
+        public string AssemblyFullPath { get; set; } = string.Empty;
+
+        public string AssemblyName { get; set; } = string.Empty;
+
+        public string DefaultAlias { get; set; } = string.Empty;
+
+        public string Description { get; set; } = string.Empty;
+
+        public string Culture { get; set; } = string.Empty;
+
+        public string RuntimeVersion { get; set; } = string.Empty;
+
+        public ushort MajorVersion { get; set; }
+
+        public ushort MinorVersion { get; set; }
+
+        public ushort BuildNumber { get; set; }
+
+        public ushort RevisionNumber { get; set; }
+
+        // it is a byte[] converted to string
+        public string PublicKey { get; set; } = string.Empty;
+
+        public uint PublicKeyLength { get; set; }
+
+        public bool IsAssembly { get; set; }
+
+        public uint PeKind { get; set; }
+
+        public bool IsImportedFromTypeLib { get; set; }
+
+        public string TargetFrameworkMoniker { get; set; } = string.Empty;
+
+        public string Guid { get; set; } = string.Empty;
+    }
+}
diff --git a/src/Tasks/AssemblyDependency/AssemblyInformation.cs b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
index 2a247374d79..41a8761c397 100644
--- a/src/Tasks/AssemblyDependency/AssemblyInformation.cs
+++ b/src/Tasks/AssemblyDependency/AssemblyInformation.cs
@@ -10,12 +10,14 @@
 using System.Linq;
 using System.Runtime.InteropServices;
 #endif
-using System.Runtime.Versioning;
 using System.Reflection;
+using System.Runtime.Versioning;
+using System.Security.Cryptography;
+using System.Security.Cryptography.X509Certificates;
 using System.Text;
-
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using static Microsoft.Build.Shared.FileSystem.WindowsNative;
 #if FEATURE_ASSEMBLYLOADCONTEXT || MONO
 using System.Reflection.PortableExecutable;
 using System.Reflection.Metadata;
@@ -267,6 +269,111 @@ internal static bool IsWinMDFile(
             return false;
         }
 
+#if !FEATURE_ASSEMBLYLOADCONTEXT
+        internal AssemblyAttributes GetAssemblyMetadata()
+        {
+            IntPtr asmMetaPtr = IntPtr.Zero;
+            try
+            {
+                IMetaDataImport2 import2 = (IMetaDataImport2)_assemblyImport;
+                _assemblyImport.GetAssemblyFromScope(out uint assemblyScope);
+                AssemblyAttributes assemblyAttributes = new()
+                {
+                    AssemblyFullPath = _sourceFile,
+                };
+
+                // get the assembly, if there is no assembly, it is a module reference
+                if (assemblyScope == 0)
+                {
+                    return null;
+                }
+                else
+                {
+                    assemblyAttributes.IsAssembly = true;
+                }
+
+                // will be populated with the assembly name
+                char[] defaultCharArray = new char[GENMAN_STRING_BUF_SIZE];
+                asmMetaPtr = AllocAsmMeta();
+                _assemblyImport.GetAssemblyProps(
+                    assemblyScope,
+                    out IntPtr publicKeyPtr,
+                    out uint publicKeyLength,
+                    out uint hashAlgorithmId,
+                    defaultCharArray,
+
+                    // the default buffer size is taken from csproj call
+                    GENMAN_STRING_BUF_SIZE,
+                    out uint nameLength,
+                    asmMetaPtr,
+                    out uint flags);
+
+                assemblyAttributes.AssemblyName = new string(defaultCharArray, 0, (int)nameLength - 1);
+                assemblyAttributes.DefaultAlias = new string(defaultCharArray, 0, (int)nameLength - 1);
+
+                ASSEMBLYMETADATA asmMeta = (ASSEMBLYMETADATA)Marshal.PtrToStructure(asmMetaPtr, typeof(ASSEMBLYMETADATA));
+                assemblyAttributes.MajorVersion = asmMeta.usMajorVersion;
+                assemblyAttributes.MinorVersion = asmMeta.usMinorVersion;
+                assemblyAttributes.RevisionNumber = asmMeta.usRevisionNumber;
+                assemblyAttributes.BuildNumber = asmMeta.usBuildNumber;
+                assemblyAttributes.Culture = Marshal.PtrToStringUni(asmMeta.rpLocale);
+
+                byte[] publicKey = new byte[publicKeyLength];
+                Marshal.Copy(publicKeyPtr, publicKey, 0, (int)publicKeyLength);
+                assemblyAttributes.PublicKey = BitConverter.ToString(publicKey).Replace("-", string.Empty);
+                assemblyAttributes.PublicKeyLength = publicKeyLength;
+
+                if (import2 != null)
+                {
+                    assemblyAttributes.Description = GetStringCustomAttribute(import2, assemblyScope, "System.Reflection.AssemblyDescriptionAttribute");
+                    assemblyAttributes.Guid = GetStringCustomAttribute(import2, assemblyScope, "System.Runtime.InteropServices.GuidAttribute");
+                    if (!string.IsNullOrEmpty(assemblyAttributes.Guid))
+                    {
+                        string importedFromTypeLibString = GetStringCustomAttribute(import2, assemblyScope, "System.Runtime.InteropServices.ImportedFromTypeLibAttribute");
+                        if (!string.IsNullOrEmpty(importedFromTypeLibString))
+                        {
+                            assemblyAttributes.IsImportedFromTypeLib = true;
+                        }
+                        else
+                        {
+                            string primaryInteropAssemblyString = GetStringCustomAttribute(import2, assemblyScope, "System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute");
+                            assemblyAttributes.IsImportedFromTypeLib = !string.IsNullOrEmpty(primaryInteropAssemblyString);
+                        }
+                    }
+
+                    assemblyAttributes.TargetFrameworkMoniker = GetStringCustomAttribute(import2, assemblyScope, "System.Runtime.Versioning.TargetFrameworkAttribute");
+                }
+
+                assemblyAttributes.RuntimeVersion = GetRuntimeVersion(_sourceFile);
+                import2.GetPEKind(out uint peKind, out _);
+                assemblyAttributes.PeKind = peKind;
+
+                return assemblyAttributes;
+            }
+            finally
+            {
+                FreeAsmMeta(asmMetaPtr);
+            }
+        }
+
+        private string GetStringCustomAttribute(IMetaDataImport2 import2, uint assemblyScope, string propertyName)
+        {
+            int hr = import2.GetCustomAttributeByName(assemblyScope, propertyName, out IntPtr data, out uint valueLen);
+
+            // get the AssemblyTitle
+            if (hr == NativeMethodsShared.S_OK)
+            {
+                // if an AssemblyTitle exists, parse the contents of the blob
+                if (NativeMethods.TryReadMetadataString(_sourceFile, data, valueLen, out string propertyValue))
+                {
+                    return propertyValue;
+                }
+            }
+
+            return string.Empty;
+        }
+#endif
+
         /// <summary>
         /// Get the framework name from the assembly.
         /// </summary>
@@ -315,21 +422,12 @@ private FrameworkName GetFrameworkName()
             try
             {
                 var import2 = (IMetaDataImport2)_assemblyImport;
-
                 _assemblyImport.GetAssemblyFromScope(out uint assemblyScope);
-                int hr = import2.GetCustomAttributeByName(assemblyScope, s_targetFrameworkAttribute, out IntPtr data, out uint valueLen);
 
-                // get the AssemblyTitle
-                if (hr == NativeMethodsShared.S_OK)
+                string frameworkNameAttribute = GetStringCustomAttribute(import2, assemblyScope, s_targetFrameworkAttribute);
+                if (!string.IsNullOrEmpty(frameworkNameAttribute))
                 {
-                    // if an AssemblyTitle exists, parse the contents of the blob
-                    if (NativeMethods.TryReadMetadataString(_sourceFile, data, valueLen, out string frameworkNameAttribute))
-                    {
-                        if (!String.IsNullOrEmpty(frameworkNameAttribute))
-                        {
-                            frameworkAttribute = new FrameworkName(frameworkNameAttribute);
-                        }
-                    }
+                    frameworkAttribute = new FrameworkName(frameworkNameAttribute);
                 }
             }
             catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
diff --git a/src/Tasks/GetAssembliesMetadata.cs b/src/Tasks/GetAssembliesMetadata.cs
new file mode 100644
index 00000000000..03cd819f74d
--- /dev/null
+++ b/src/Tasks/GetAssembliesMetadata.cs
@@ -0,0 +1,128 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+#if FEATURE_APPDOMAIN
+
+using System;
+using System.Collections.Concurrent;
+using System.Collections.Generic;
+using System.Diagnostics.CodeAnalysis;
+using System.Globalization;
+using System.IO;
+using System.Linq;
+using System.Reflection;
+using System.Threading;
+using System.Threading.Tasks;
+using Microsoft.Build.BackEnd;
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+using Microsoft.Build.Shared.FileSystem;
+using Microsoft.Build.Tasks.AssemblyDependency;
+using Microsoft.Build.Utilities;
+
+#nullable disable
+
+namespace Microsoft.Build.Tasks
+{
+    /// <summary>
+    /// Resolves metadata for the specified set of assemblies.
+    /// </summary>
+    public class GetAssembliesMetadata : TaskExtension
+    {
+        /// <summary>
+        /// Assembly paths.
+        /// </summary>
+        private string[] _assemblyPaths = Array.Empty<string>();
+
+        /// <summary>
+        /// Set of resolved assembly metadata.
+        /// </summary>
+        private ITaskItem[] _assembliesMetadata = Array.Empty<ITaskItem>();
+
+        /// <summary>
+        /// Execute the task.
+        /// </summary>
+        public override bool Execute()
+        {
+            if (!NativeMethodsShared.IsWindows)
+            {
+                Log.LogErrorWithCodeFromResources("General.TaskRequiresWindows", nameof(GetAssembliesMetadata));
+                return false;
+            }
+
+            var assembliesMetadata = new List<ITaskItem>();
+            foreach (string assemblyPath in AssembyPaths)
+            {
+                AssemblyInformation assemblyInformation = new(assemblyPath);
+                AssemblyAttributes attributes = assemblyInformation.GetAssemblyMetadata();
+
+                if (attributes != null)
+                {
+                    assembliesMetadata.Add(SetItemMetadata(attributes));
+                }
+            }
+
+            _assembliesMetadata = assembliesMetadata.ToArray();
+
+            return true;
+        }
+
+        /// <summary>
+        /// List of assembly paths.
+        /// </summary>
+        [Required]
+        public string[] AssembyPaths
+        {
+            get => _assemblyPaths;
+
+            set
+            {
+                ErrorUtilities.VerifyThrowArgumentNull(value, nameof(AssembyPaths));
+                _assemblyPaths = value;
+            }
+        }
+
+        /// <summary>
+        /// This is a list of resolved assembly metadata.
+        /// </summary>
+        [Output]
+        public ITaskItem[] AssembliesMetadata => _assembliesMetadata;
+
+        /// <summary>
+        /// Set metadata on the assembly path.
+        /// </summary>
+        private ITaskItem SetItemMetadata(AssemblyAttributes attributes)
+        {
+            // Set up the main item.
+            TaskItem referenceItem = new TaskItem();
+            referenceItem.ItemSpec = attributes.AssemblyFullPath;
+
+            IMetadataContainer referenceItemAsMetadataContainer = referenceItem;
+            referenceItemAsMetadataContainer.ImportMetadata(EnumerateCommonMetadata());
+
+            return referenceItem;
+
+            // Enumerate common metadata with an iterator to allow using a more efficient bulk-set operation.
+            IEnumerable<KeyValuePair<string, string>> EnumerateCommonMetadata()
+            {
+                yield return new KeyValuePair<string, string>(nameof(attributes.AssemblyName), attributes.AssemblyName);
+                yield return new KeyValuePair<string, string>(nameof(attributes.RuntimeVersion), attributes.RuntimeVersion);
+                yield return new KeyValuePair<string, string>(nameof(attributes.RevisionNumber), attributes.RevisionNumber.ToString());
+                yield return new KeyValuePair<string, string>(nameof(attributes.BuildNumber), attributes.BuildNumber.ToString());
+                yield return new KeyValuePair<string, string>(nameof(attributes.Culture), attributes.Culture);
+                yield return new KeyValuePair<string, string>(nameof(attributes.DefaultAlias), attributes.DefaultAlias);
+                yield return new KeyValuePair<string, string>(nameof(attributes.Description), attributes.Description);
+                yield return new KeyValuePair<string, string>(nameof(attributes.Guid), attributes.Guid);
+                yield return new KeyValuePair<string, string>(nameof(attributes.MajorVersion), attributes.MajorVersion.ToString());
+                yield return new KeyValuePair<string, string>(nameof(attributes.MinorVersion), attributes.MinorVersion.ToString());
+                yield return new KeyValuePair<string, string>(nameof(attributes.PeKind), attributes.PeKind.ToString());
+                yield return new KeyValuePair<string, string>(nameof(attributes.PublicKey), attributes.PublicKey);
+                yield return new KeyValuePair<string, string>(nameof(attributes.PublicKeyLength), attributes.PublicKeyLength.ToString());
+                yield return new KeyValuePair<string, string>(nameof(attributes.IsAssembly), attributes.IsAssembly.ToString());
+                yield return new KeyValuePair<string, string>(nameof(attributes.TargetFrameworkMoniker), attributes.TargetFrameworkMoniker);
+                yield return new KeyValuePair<string, string>(nameof(attributes.IsImportedFromTypeLib), attributes.IsImportedFromTypeLib.ToString());
+            }
+        }
+    }
+}
+#endif
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index d791ba1e021..5890870ac2b 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -63,6 +63,7 @@
       <Link>CanonicalError.cs</Link>
       <ExcludeFromStyleCop>True</ExcludeFromStyleCop>
     </Compile>
+    <Compile Include="AssemblyDependency\AssemblyAttributes.cs" />
     <Compile Include="AssemblyDependency\AssemblyMetadata.cs" />
     <Compile Include="CombineTargetFrameworkInfoProperties.cs" />
     <Compile Include="CombineXmlElements.cs" />
@@ -327,6 +328,7 @@
     </Compile>
     <Compile Include="ResourceHandling\*.cs" />
     <Compile Include="GetCompatiblePlatform.cs" />
+    <Compile Include="GetAssembliesMetadata.cs" />
     <Compile Include="SetRidAgnosticValueForProjects.cs" />
     <Compile Include="BuildCacheDisposeWrapper.cs" />
     <Compile Include="DownloadFile.cs" />
