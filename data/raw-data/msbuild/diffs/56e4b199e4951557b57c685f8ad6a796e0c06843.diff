diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 497bbc6c0e4..b12b8a6a607 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1109,11 +1109,6 @@ private async Task<BuildResult> BuildProject()
 
             ErrorUtilities.VerifyThrow(_targetBuilder != null, "Target builder is null");
 
-            // We consider this the entrypoint for the project build for purposes of BuildCheck processing 
-
-            var buildCheckManager = (_componentHost.GetComponent(BuildComponentType.BuildCheckManagerProvider) as IBuildCheckManagerProvider)!.Instance;
-            buildCheckManager.SetDataSource(BuildCheckDataSource.BuildExecution);
-
             // Make sure it is null before loading the configuration into the request, because if there is a problem
             // we do not wand to have an invalid projectLoggingContext floating around. Also if this is null the error will be
             // logged with the node logging context
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 6c10675a0e1..a0f8e0fa9fb 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -90,9 +90,6 @@ private void EventSource_AnyEventRaised(object sender, BuildEventArgs e)
 
     private void EventSource_BuildFinished(object sender, BuildFinishedEventArgs e)
     {
-        _stats.Merge(buildCheckManager.CreateTracingStats(), (span1, span2) => span1 + span2);
-        string msg = string.Join(Environment.NewLine, _stats.Select(a => a.Key + ": " + a.Value));
-
         BuildEventContext buildEventContext = e.BuildEventContext ?? new BuildEventContext(
             BuildEventContext.InvalidNodeId, BuildEventContext.InvalidTargetId,
             BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);
@@ -124,19 +121,19 @@ private void LogAnalyzerStats(LoggingContext loggingContext)
         if (_areStatsEnabled)
         {
             loggingContext.LogCommentFromText(MessageImportance.High, $"BuildCheck run times{Environment.NewLine}");
-            string infraData = BuildStatsTable("Infrastructure run times", infraStats);
+            string infraData = BuildCsvString("Infrastructure run times", infraStats);
             loggingContext.LogCommentFromText(MessageImportance.High, infraData);
 
-            string analyzerData = BuildStatsTable("Analyzer run times", analyzerStats);
+            string analyzerData = BuildCsvString("Analyzer run times", analyzerStats);
             loggingContext.LogCommentFromText(MessageImportance.High, analyzerData);
         }
         else
         {
             loggingContext.LogCommentFromText(MessageImportance.Low, $"BuildCheck run times{Environment.NewLine}");
-            string infraData = BuildStatsTable("Infrastructure run times", infraStats);
+            string infraData = BuildCsvString("Infrastructure run times", infraStats);
             loggingContext.LogCommentFromText(MessageImportance.Low, infraData);
 
-            string analyzerData = BuildStatsTable("Analyzer run times", analyzerStats);
+            string analyzerData = BuildCsvString("Analyzer run times", analyzerStats);
             loggingContext.LogCommentFromText(MessageImportance.Low, analyzerData);
         }
     }
@@ -153,6 +150,11 @@ private string BuildStatsTable(string title, Dictionary<string, TimeSpan> rowDat
         return $"{header}{rows}{Environment.NewLine}";
     }
 
+    private string BuildCsvString(string title, Dictionary<string, TimeSpan> rowData)
+    {
+        return title + Environment.NewLine + String.Join(Environment.NewLine, rowData.Select(a => $"{a.Key},{a.Value}")) + Environment.NewLine;
+    }
+
     public void Shutdown()
     { }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
index 5190fb6175f..300240f243c 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckManagerProvider.cs
@@ -314,6 +314,14 @@ public Dictionary<string, TimeSpan> CreateAnalyzerTracingStats()
                 }
             }
 
+            var infraStats = new Dictionary<string, TimeSpan>() {
+                { $"{BuildCheckConstants.infraStatPrefix}analyzerAcquisitionTime", _tracingReporter.analyzerAcquisitionTime },
+                { $"{BuildCheckConstants.infraStatPrefix}analyzerSetDataSourceTime", _tracingReporter.analyzerSetDataSourceTime },
+                { $"{BuildCheckConstants.infraStatPrefix}newProjectAnalyzersTime", _tracingReporter.newProjectAnalyzersTime }
+            };
+
+            _tracingReporter.TracingStats.Merge(infraStats, (span1, span2) => span1 + span2);
+
             return _tracingReporter.TracingStats;
         }
 
@@ -326,12 +334,6 @@ public void FinalizeProcessing(LoggingContext loggingContext)
             }
 
             var analyzerEventStats = CreateAnalyzerTracingStats();
-            var infraStats = new Dictionary<string, TimeSpan>() {
-                { $"{BuildCheckConstants.infraStatPrefix}analyzerAcquisitionTime", _tracingReporter.analyzerAcquisitionTime },
-                { $"{BuildCheckConstants.infraStatPrefix}analyzerSetDataSourceTime", _tracingReporter.analyzerSetDataSourceTime },
-                { $"{BuildCheckConstants.infraStatPrefix}newProjectAnalyzersTime", _tracingReporter.newProjectAnalyzersTime }
-            };
-            analyzerEventStats.Merge(infraStats, (span1, span2) => span1 + span2);
 
             BuildCheckTracingEventArgs analyzerEventArg =
                 new(analyzerEventStats) { BuildEventContext = loggingContext.BuildEventContext };
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index dc2d2ed13ca..aa6a5f7769f 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -186,6 +186,7 @@
     <Compile Include="BuildCheck\Logging\IBuildAnalysisLoggingContextFactory.cs" />
     <Compile Include="BuildCheck\OM\EvaluatedPropertiesAnalysisData.cs" />
     <Compile Include="BuildCheck\OM\ParsedItemsAnalysisData.cs" />
+    <Compile Include="BuildCheck\Utilities\Constants.cs" />
     <Compile Include="BuildCheck\Utilities\EnumerableExtensions.cs" />
     <Compile Include="Evaluation\IItemTypeDefinition.cs" />
     <Compile Include="FileAccess\DesiredAccess.cs" />
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index a0007d2c103..4a9961eb37b 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -120,7 +120,7 @@ public void SampleAnalyzerIntegrationTest(bool buildInOutOfProcessNode, bool ana
         _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", buildInOutOfProcessNode ? "1" : "0");
         _env.SetEnvironmentVariable("MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION", "1");
         string output = RunnerUtilities.ExecBootstrapedMSBuild(
-            $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore" +
+            $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore -analyzeStats" +
             (analysisRequested ? " -analyze" : string.Empty), out bool success);
         _env.Output.WriteLine(output);
         success.ShouldBeTrue();
