diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index 168cca02bbe..99e734d96f6 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -309,11 +309,11 @@ public void RoundtripBuildMessageEventArgs(bool useArguments)
         }
 
         [Fact]
-        public void RoundtripResponseFileUsedEventArgs()
+        public void RoundtripFileUsedEventArgs()
         {
-            var args = new ResponseFileUsedEventArgs("MSBuild.rsp");
+            var args = new FileUsedEventArgs("MSBuild.rsp");
             Roundtrip(args,
-                e => e.ResponseFilePath);
+                e => e.FilePath);
         }
 
         [Fact]
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index 33c747f9eb0..b3071e3d1a3 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -800,7 +800,7 @@ public void LogIncludeFile(BuildEventContext buildEventContext, string filePath)
         {
             ErrorUtilities.VerifyThrow(buildEventContext != null, "buildEventContext was null");
             ErrorUtilities.VerifyThrow(filePath != null, "response file path was null");
-            ResponseFileUsedEventArgs responseFileUsedEvent = new ResponseFileUsedEventArgs(filePath);
+            FileUsedEventArgs responseFileUsedEvent = new FileUsedEventArgs(filePath);
             responseFileUsedEvent.BuildEventContext = buildEventContext;
             ProcessLoggingEvent(responseFileUsedEvent);
         }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index 29dfb17f8f1..0e160bf4b87 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -33,6 +33,6 @@ internal enum BinaryLogRecordKind
         NameValueList,
         String,
         TaskParameter,
-        ResponseFileUsed,
+        FileUsed,
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index fe944b6e87f..d249d0e5e53 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -280,9 +280,9 @@ private void CollectImports(BuildEventArgs e)
             {
                 projectImportsCollector.AddFileFromMemory(metaprojectArgs.ProjectFile, metaprojectArgs.metaprojectXml);
             }
-            else if (e is ResponseFileUsedEventArgs responseFileArgs && responseFileArgs.ResponseFilePath != null)
+            else if (e is FileUsedEventArgs responseFileArgs && responseFileArgs.FilePath != null)
             {
-                projectImportsCollector.AddFile(responseFileArgs.ResponseFilePath);
+                projectImportsCollector.AddFile(responseFileArgs.FilePath);
             }
         }
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index ee7f201ba25..d52b64f3fd5 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -176,8 +176,8 @@ public BuildEventArgs Read()
                 case BinaryLogRecordKind.EnvironmentVariableRead:
                     result = ReadEnvironmentVariableReadEventArgs();
                     break;
-                case BinaryLogRecordKind.ResponseFileUsed:
-                    result = ReadResponseFileUsedEventArgs();
+                case BinaryLogRecordKind.FileUsed:
+                    result = ReadFileUsedEventArgs();
                     break;
                 case BinaryLogRecordKind.PropertyReassignment:
                     result = ReadPropertyReassignmentEventArgs();
@@ -730,11 +730,11 @@ private BuildEventArgs ReadEnvironmentVariableReadEventArgs()
             return e;
         }
 
-        private BuildEventArgs ReadResponseFileUsedEventArgs()
+        private BuildEventArgs ReadFileUsedEventArgs()
         {
             var fields = ReadBuildEventArgsFields();
-            var responseFilePath = ReadDeduplicatedString();
-            var e = new ResponseFileUsedEventArgs(responseFilePath);
+            var filePath = ReadDeduplicatedString();
+            var e = new FileUsedEventArgs(filePath);
             SetCommonFields(e, fields);
 
             return e;
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 67a2005c284..449780df1a8 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -428,7 +428,7 @@ private void Write(BuildMessageEventArgs e)
         {
             switch (e)
             {
-                case ResponseFileUsedEventArgs responseFileUsed: Write(responseFileUsed); break;
+                case FileUsedEventArgs responseFileUsed: Write(responseFileUsed); break;
                 case TaskParameterEventArgs taskParameter: Write(taskParameter); break;
                 case ProjectImportedEventArgs projectImported: Write(projectImported); break;
                 case TargetSkippedEventArgs targetSkipped: Write(targetSkipped); break;
@@ -507,11 +507,11 @@ private void Write(EnvironmentVariableReadEventArgs e)
             WriteMessageFields(e, writeImportance: true);
             WriteDeduplicatedString(e.EnvironmentVariableName);
         }
-        private void Write(ResponseFileUsedEventArgs e)
+        private void Write(FileUsedEventArgs e)
         {
-            Write(BinaryLogRecordKind.ResponseFileUsed);
+            Write(BinaryLogRecordKind.FileUsed);
             WriteMessageFields(e);
-            WriteDeduplicatedString(e.ResponseFilePath);
+            WriteDeduplicatedString(e.FilePath);
         }
         private void Write(TaskCommandLineEventArgs e)
         {
diff --git a/src/Framework/FileUsedEventArgs.cs b/src/Framework/FileUsedEventArgs.cs
new file mode 100644
index 00000000000..793f4393731
--- /dev/null
+++ b/src/Framework/FileUsedEventArgs.cs
@@ -0,0 +1,26 @@
+// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// Arguments for the file used event
+    /// </summary>
+    [Serializable]
+    public class FileUsedEventArgs : BuildMessageEventArgs
+    {
+        public FileUsedEventArgs()
+        {
+        }
+        /// <summary>
+        /// Initialize a new instance of the FileUsedEventArgs class.
+        /// </summary>
+        public FileUsedEventArgs(string filePath) : base()
+        {
+            FilePath = filePath;
+        }
+        public string? FilePath { set; get; }
+    }
+}
diff --git a/src/Framework/ResponseFileUsedEventArgs.cs b/src/Framework/ResponseFileUsedEventArgs.cs
deleted file mode 100644
index bc027518a67..00000000000
--- a/src/Framework/ResponseFileUsedEventArgs.cs
+++ /dev/null
@@ -1,26 +0,0 @@
-// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-
-namespace Microsoft.Build.Framework
-{
-    /// <summary>
-    /// Arguments for the response file used event
-    /// </summary>
-    [Serializable]
-    public class ResponseFileUsedEventArgs : BuildMessageEventArgs
-    {
-        public ResponseFileUsedEventArgs()
-        {
-        }
-        /// <summary>
-        /// Initialize a new instance of the ResponseFileUsedEventArgs class.
-        /// </summary>
-        public ResponseFileUsedEventArgs(string responseFilePath) : base()
-        {
-            ResponseFilePath = responseFilePath;
-        }
-        public string? ResponseFilePath { set; get; }
-    }
-}
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index 9938e6ac170..26f1d887d7e 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -137,9 +137,9 @@ internal enum LoggingEventType : int
         EnvironmentVariableReadEvent = 19,
 
         /// <summary>
-        /// Event is a ResponseFileUsedEventArgs
+        /// Event is a FileUsedEventArgs
         /// </summary>
-        ResponseFileUsedEvent = 20
+        FileUsedEvent = 20
     }
     #endregion
 
@@ -522,7 +522,7 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.TaskFinishedEvent => new TaskFinishedEventArgs(null, null, null, null, null, false),
                 LoggingEventType.TaskCommandLineEvent => new TaskCommandLineEventArgs(null, null, MessageImportance.Normal),
                 LoggingEventType.EnvironmentVariableReadEvent => new EnvironmentVariableReadEventArgs(),
-                LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),
+                LoggingEventType.FileUsedEvent => new FileUsedEventArgs(null),
 #if !TASKHOST // MSBuildTaskHost is targeting Microsoft.Build.Framework.dll 3.5
                 LoggingEventType.TaskParameterEvent => new TaskParameterEventArgs(0, null, null, true, default),
                 LoggingEventType.ProjectEvaluationStartedEvent => new ProjectEvaluationStartedEventArgs(),
@@ -625,9 +625,9 @@ private LoggingEventType GetLoggingEventId(BuildEventArgs eventArg)
             {
                 return LoggingEventType.EnvironmentVariableReadEvent;
             }
-            else if (eventType == typeof(ResponseFileUsedEventArgs))
+            else if (eventType == typeof(FileUsedEventArgs))
             {
-                return LoggingEventType.ResponseFileUsedEvent;
+                return LoggingEventType.FileUsedEvent;
             }
             else
             {
@@ -668,8 +668,8 @@ private void WriteEventToStream(BuildEventArgs buildEvent, LoggingEventType even
                 case LoggingEventType.BuildMessageEvent:
                     WriteBuildMessageEventToStream((BuildMessageEventArgs)buildEvent, translator);
                     break;
-                case LoggingEventType.ResponseFileUsedEvent:
-                    WriteResponseFileUsedEventToStream((ResponseFileUsedEventArgs)buildEvent, translator);
+                case LoggingEventType.FileUsedEvent:
+                    WriteFileUsedEventToStream((FileUsedEventArgs)buildEvent, translator);
                     break;
                 case LoggingEventType.TaskCommandLineEvent:
                     WriteTaskCommandLineEventToStream((TaskCommandLineEventArgs)buildEvent, translator);
@@ -814,11 +814,11 @@ private void WriteBuildMessageEventToStream(BuildMessageEventArgs buildMessageEv
         }
 
         /// <summary>
-        /// Write a response file used log message into the translator
+        /// Write a file used log message into the translator
         /// </summary>
-        private void WriteResponseFileUsedEventToStream(ResponseFileUsedEventArgs responseFileUsedEventArgs, ITranslator translator)
+        private void WriteFileUsedEventToStream(FileUsedEventArgs fileUsedEventArgs, ITranslator translator)
         {
-            string filePath = responseFileUsedEventArgs.ResponseFilePath;
+            string filePath = fileUsedEventArgs.FilePath;
             translator.Translate(ref filePath);
         }
 
@@ -1059,7 +1059,7 @@ private BuildEventArgs ReadEventFromStream(LoggingEventType eventType, ITranslat
                 LoggingEventType.ProjectStartedEvent => ReadExternalProjectStartedEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.ProjectFinishedEvent => ReadExternalProjectFinishedEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.BuildMessageEvent => ReadBuildMessageEventFromStream(translator, message, helpKeyword, senderName),
-                LoggingEventType.ResponseFileUsedEvent => ReadResponseFileUsedEventFromStream(translator, message, helpKeyword, senderName),
+                LoggingEventType.FileUsedEvent => ReadFileUsedEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.BuildWarningEvent => ReadBuildWarningEventFromStream(translator, message, helpKeyword, senderName),
                 LoggingEventType.EnvironmentVariableReadEvent => ReadEnvironmentVariableReadEventFromStream(translator, message, helpKeyword, senderName),
                 _ => null,
@@ -1241,11 +1241,11 @@ private BuildMessageEventArgs ReadBuildMessageEventFromStream(ITranslator transl
             return buildEvent;
         }
 
-        private ResponseFileUsedEventArgs ReadResponseFileUsedEventFromStream(ITranslator translator, string message, string helpKeyword, string senderName)
+        private FileUsedEventArgs ReadFileUsedEventFromStream(ITranslator translator, string message, string helpKeyword, string senderName)
         {
-            string responseFilePath = String.Empty;
-            translator.Translate(ref responseFilePath);
-            ResponseFileUsedEventArgs buildEvent = new ResponseFileUsedEventArgs(responseFilePath);
+            string filePath = String.Empty;
+            translator.Translate(ref filePath);
+            FileUsedEventArgs buildEvent = new FileUsedEventArgs(filePath);
             return buildEvent;
         }
 
