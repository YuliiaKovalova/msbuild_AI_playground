diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index 05c3bc99cfc..7761b98cddb 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -1160,6 +1160,21 @@ public UnregisterAssembly() { }
         public Microsoft.Build.Framework.ITaskItem[] TypeLibFiles { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
+    public partial class Unzip : Microsoft.Build.Tasks.TaskExtension, Microsoft.Build.Framework.ICancelableTask, Microsoft.Build.Framework.ITask
+    {
+        public Unzip() { }
+        [Microsoft.Build.Framework.OutputAttribute]
+        public Microsoft.Build.Framework.ITaskItem[] DestinationFiles { get { throw null; } }
+        public Microsoft.Build.Framework.ITaskItem DestinationFolder { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public bool OverwriteReadOnlyFiles { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public bool SkipUnchangedFiles { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        [Microsoft.Build.Framework.RequiredAttribute]
+        public Microsoft.Build.Framework.ITaskItem[] SourceFiles { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        [Microsoft.Build.Framework.OutputAttribute]
+        public Microsoft.Build.Framework.ITaskItem[] UnzippedFiles { get { throw null; } }
+        public void Cancel() { }
+        public override bool Execute() { throw null; }
+    }
     public partial class UpdateManifest : Microsoft.Build.Utilities.Task
     {
         public UpdateManifest() { }
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index af4d1cae038..e29c22a4365 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -666,6 +666,21 @@ public Touch() { }
         public Microsoft.Build.Framework.ITaskItem[] TouchedFiles { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
+    public partial class Unzip : Microsoft.Build.Tasks.TaskExtension, Microsoft.Build.Framework.ICancelableTask, Microsoft.Build.Framework.ITask
+    {
+        public Unzip() { }
+        [Microsoft.Build.Framework.OutputAttribute]
+        public Microsoft.Build.Framework.ITaskItem[] DestinationFiles { get { throw null; } }
+        public Microsoft.Build.Framework.ITaskItem DestinationFolder { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public bool OverwriteReadOnlyFiles { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public bool SkipUnchangedFiles { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        [Microsoft.Build.Framework.RequiredAttribute]
+        public Microsoft.Build.Framework.ITaskItem[] SourceFiles { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        [Microsoft.Build.Framework.OutputAttribute]
+        public Microsoft.Build.Framework.ITaskItem[] UnzippedFiles { get { throw null; } }
+        public void Cancel() { }
+        public override bool Execute() { throw null; }
+    }
     public sealed partial class Warning : Microsoft.Build.Tasks.TaskExtension
     {
         public Warning() { }
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index a2cb5da18b9..d4cceaed29d 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -489,6 +489,7 @@
     <Compile Include="Touch.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
+    <Compile Include="Unzip.cs" />
     <Compile Include="VisualBasicParserUtilities.cs">
       <ExcludeFromStyleCop>true</ExcludeFromStyleCop>
     </Compile>
@@ -927,6 +928,7 @@
   <ItemGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETFramework'">
     <Reference Include="System" />
     <Reference Include="System.Core" />
+    <Reference Include="System.IO.Compression" />
     <Reference Include="System.Net.Http" />
     <Reference Include="System.Reflection" />
     <Reference Include="System.Runtime.Serialization" />
diff --git a/src/Tasks/Microsoft.Common.tasks b/src/Tasks/Microsoft.Common.tasks
index 4020ee07537..4ea7971c479 100644
--- a/src/Tasks/Microsoft.Common.tasks
+++ b/src/Tasks/Microsoft.Common.tasks
@@ -162,6 +162,7 @@
     <UsingTask TaskName="Microsoft.Build.Tasks.UnregisterAssembly"                    AssemblyName="Microsoft.Build.Tasks.v3.5, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Runtime="CLR2" Condition="('$(MSBuildAssemblyVersion)' != '') and '$(DisableOutOfProcTaskHost)' == ''" />
 
     <UsingTask TaskName="Microsoft.Build.Tasks.UpdateManifest"                        AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
+    <UsingTask TaskName="Microsoft.Build.Tasks.Unzip"                                 AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.Warning"                               AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.WriteCodeFragment"                     AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
     <UsingTask TaskName="Microsoft.Build.Tasks.WriteLinesToFile"                      AssemblyName="Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" Condition="'$(MSBuildAssemblyVersion)' != ''" />
diff --git a/src/Tasks/Unzip.cs b/src/Tasks/Unzip.cs
new file mode 100644
index 00000000000..a2ba1c7cdba
--- /dev/null
+++ b/src/Tasks/Unzip.cs
@@ -0,0 +1,219 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Framework;
+using Microsoft.Build.Shared;
+using Microsoft.Build.Utilities;
+using System;
+using System.Collections.ObjectModel;
+using System.IO;
+using System.IO.Compression;
+using System.Linq;
+
+namespace Microsoft.Build.Tasks
+{
+    /// <summary>
+    /// Represents a task that can extract a .zip archive.
+    /// </summary>
+    public sealed class Unzip : TaskExtension, ICancelableTask
+    {
+        /// <summary>
+        /// Stores a collection of all destination files.
+        /// </summary>
+        private readonly Collection<ITaskItem> _destinationFiles = new Collection<ITaskItem>();
+
+        /// <summary>
+        /// Stores a collection of all files that were unzipped.
+        /// </summary>
+        private readonly Collection<ITaskItem> _unzippedFiles = new Collection<ITaskItem>();
+
+        /// <summary>
+        /// Stores a value indicating if a cancellation was requested.
+        /// </summary>
+        private bool _canceling;
+
+        /// <summary>
+        /// Gets an array of <see cref="ITaskItem"/> objects containing details about all of the destination files.
+        /// </summary>
+        [Output]
+        public ITaskItem[] DestinationFiles => _destinationFiles.ToArray();
+
+        /// <summary>
+        /// Gets or sets a <see cref="ITaskItem"/> with a destination folder path to unzip the files to.
+        /// </summary>
+        public ITaskItem DestinationFolder { get; set; }
+
+        /// <summary>
+        /// Gets or sets a value indicating whether read-only files should be overwritten.
+        /// </summary>
+        public bool OverwriteReadOnlyFiles { get; set; }
+
+        /// <summary>
+        /// Gets or sets a value indicating whether files should be skipped if the destination is unchanged.
+        /// </summary>
+        public bool SkipUnchangedFiles { get; set; } = true;
+
+        /// <summary>
+        /// Gets or sets an array of <see cref="ITaskItem"/> objects containing the paths to .zip archive files to unzip.
+        /// </summary>
+        [Required]
+        public ITaskItem[] SourceFiles { get; set; }
+
+        /// <summary>
+        /// Gets an array of <see cref="ITaskItem"/> objects containing details about only the files that were unzipped.
+        /// </summary>
+        [Output]
+        public ITaskItem[] UnzippedFiles => _unzippedFiles.ToArray();
+
+        /// <inheritdoc cref="ICancelableTask.Cancel"/>
+        public void Cancel()
+        {
+            _canceling = true;
+        }
+
+        /// <inheritdoc cref="Task.Execute"/>
+        public override bool Execute()
+        {
+            DirectoryInfo destinationDirectory;
+            try
+            {
+                destinationDirectory = Directory.CreateDirectory(DestinationFolder.ItemSpec);
+            }
+            catch (Exception e)
+            {
+                // TODO: Resource
+                Log.LogErrorFromResources("Unzip.ErrorCouldNotCreateDestinationDirectory", DestinationFolder.ItemSpec, e.Message);
+
+                return false;
+            }
+
+            foreach (ITaskItem sourceFile in SourceFiles.TakeWhile(i => !_canceling))
+            {
+                if (!File.Exists(sourceFile.ItemSpec))
+                {
+                    // TODO: Resource
+                    Log.LogErrorFromResources("Unzip.ErrorFileDoesNotExist", sourceFile.ItemSpec);
+                    continue;
+                }
+
+                try
+                {
+                    using (FileStream stream = new FileStream(sourceFile.ItemSpec, FileMode.Open, FileAccess.Read, FileShare.Read, bufferSize: 0x1000, useAsync: false))
+                    {
+                        using (ZipArchive zipArchive = new ZipArchive(stream, ZipArchiveMode.Read, leaveOpen: false))
+                        {
+                            try
+                            {
+                                Extract(sourceFile, zipArchive, destinationDirectory);
+                            }
+                            catch (Exception e)
+                            {
+                                // Unhandled exception in Extract() is a bug!
+                                Log.LogErrorFromException(e, showStackTrace: true);
+                                return false;
+                            }
+                        }
+                    }
+                }
+                catch (Exception e)
+                {
+                    // Should only be thrown if the archive could not be opened (Access denied, corrupt file, etc)
+                    // TODO: Resource
+                    Log.LogErrorFromResources("Unzip.ErrorCouldNotOpenFile", e.Message);
+                }
+            }
+
+            return !_canceling && !Log.HasLoggedErrors;
+        }
+
+        /// <summary>
+        /// Extracts all files to the specified directory.
+        /// </summary>
+        /// <param name="sourceTaskItem">The original <see cref="ITaskItem"/> containing details about the source file.</param>
+        /// <param name="sourceArchive">The <see cref="ZipArchive"/> containing the files to extract.</param>
+        /// <param name="destinationDirectory">The <see cref="DirectoryInfo"/> to extract files to.</param>
+        private void Extract(ITaskItem sourceTaskItem, ZipArchive sourceArchive, DirectoryInfo destinationDirectory)
+        {
+            foreach (ZipArchiveEntry zipArchiveEntry in sourceArchive.Entries.TakeWhile(i => !_canceling))
+            {
+                FileInfo destinationPath = new FileInfo(Path.Combine(destinationDirectory.FullName, zipArchiveEntry.FullName));
+
+                if (!destinationPath.FullName.StartsWith(destinationDirectory.FullName, StringComparison.OrdinalIgnoreCase))
+                {
+                    // ExtractToDirectory() throws an IOException for this but since we're extracting one file at a time
+                    // for logging and cancellation, we need to check for it ourselves.
+                    // TODO: Resource
+                    Log.LogErrorFromResources("Unzip.ExtractingResultsInFilesOutsideDestination", destinationPath.FullName, destinationDirectory.FullName);
+                    continue;
+                }
+
+                TaskItem taskItem = new TaskItem(EscapingUtilities.Escape(destinationPath.FullName));
+
+                sourceTaskItem.CopyMetadataTo(taskItem);
+
+                _destinationFiles.Add(taskItem);
+
+                if (ShouldSkipEntry(zipArchiveEntry, destinationPath))
+                {
+                    // TODO: Resource
+                    Log.LogMessageFromResources(MessageImportance.Low, "Copy.DidNotCopyBecauseOfFileMatch", zipArchiveEntry.FullName, destinationPath.FullName, nameof(SkipUnchangedFiles), "true");
+                    continue;
+                }
+
+                try
+                {
+                    destinationPath.Directory?.Create();
+                }
+                catch (Exception e)
+                {
+                    // TODO: Resource
+                    Log.LogErrorWithCodeFromResources("Copy.ErrorCouldNotCreateDestinationDirectory", destinationPath.DirectoryName, e.Message);
+                    continue;
+                }
+
+                if (OverwriteReadOnlyFiles && destinationPath.IsReadOnly)
+                {
+                    try
+                    {
+                        destinationPath.IsReadOnly = false;
+                    }
+                    catch (Exception e)
+                    {
+                        // TODO: Resource
+                        Log.LogErrorWithCodeFromResources("Copy.ErrorCouldNotMakeFileWriteable", zipArchiveEntry.FullName, destinationPath.FullName, e.Message);
+                        continue;
+                    }
+                }
+
+                try
+                {
+                    // TODO: Resource
+                    Log.LogMessageFromResources(MessageImportance.Normal, "Copy.FileComment", zipArchiveEntry.FullName, destinationPath.FullName);
+
+                    zipArchiveEntry.ExtractToFile(destinationPath.FullName, overwrite: true);
+
+                    _unzippedFiles.Add(taskItem);
+                }
+                catch (IOException e)
+                {
+                    // TODO: Resource
+                    Log.LogErrorWithCodeFromResources("Copy.ErrorCouldNotExtractFile", zipArchiveEntry.FullName, destinationPath.FullName, e.Message);
+                }
+            }
+        }
+
+        /// <summary>
+        /// Determines whether or not a file should be skipped when unzipping.
+        /// </summary>
+        /// <param name="zipArchiveEntry">The <see cref="ZipArchiveEntry"/> object containing information about the file in the zip archive.</param>
+        /// <param name="fileInfo">A <see cref="FileInfo"/> object containing information about the destination file.</param>
+        /// <returns><code>true</code> if the file should be skipped, otherwise <code>false</code>.</returns>
+        private bool ShouldSkipEntry(ZipArchiveEntry zipArchiveEntry, FileInfo fileInfo)
+        {
+            return SkipUnchangedFiles
+                   && fileInfo.Exists
+                   && zipArchiveEntry.LastWriteTime == fileInfo.LastWriteTimeUtc
+                   && zipArchiveEntry.Length == fileInfo.Length;
+        }
+    }
+}
