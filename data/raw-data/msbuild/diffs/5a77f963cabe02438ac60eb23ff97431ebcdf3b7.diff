diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index 7b012cd3b22..3ed01264544 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -27,17 +27,17 @@ internal sealed class ConfigurationProvider
     /// <summary>
     /// The dictionary used for storing the BuildAnalyzerConfiguration per projectfile and rule id. The key is equal to {projectFullPath}-{ruleId}
     /// </summary>
-    private readonly Dictionary<string, BuildAnalyzerConfiguration> _buildAnalyzerConfiguration = new Dictionary<string, BuildAnalyzerConfiguration>();
+    private readonly Dictionary<string, BuildAnalyzerConfiguration> _buildAnalyzerConfiguration = new Dictionary<string, BuildAnalyzerConfiguration>(StringComparer.InvariantCultureIgnoreCase);
 
     /// <summary>
     /// The dictionary used for storing the key-value pairs retrieved from the .editorconfigs for specific projectfile. The key is equal to projectFullPath
     /// </summary>
-    private readonly Dictionary<string, Dictionary<string, string>> _editorConfigData = new Dictionary<string, Dictionary<string, string>>();
+    private readonly Dictionary<string, Dictionary<string, string>> _editorConfigData = new Dictionary<string, Dictionary<string, string>>(StringComparer.InvariantCultureIgnoreCase);
 
     /// <summary>
     /// The dictionary used for storing the CustomConfigurationData per ruleId. The key is equal to ruleId.
     /// </summary>
-    private readonly Dictionary<string, CustomConfigurationData> _customConfigurationData = new Dictionary<string, CustomConfigurationData>();
+    private readonly Dictionary<string, CustomConfigurationData> _customConfigurationData = new Dictionary<string, CustomConfigurationData>(StringComparer.InvariantCultureIgnoreCase);
 
     private readonly string[] _infrastructureConfigurationKeys = new string[] {
         nameof(BuildAnalyzerConfiguration.EvaluationAnalysisScope).ToLower(),
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
index 4146ba92ad4..029918bf122 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
@@ -18,7 +18,11 @@ namespace Microsoft.Build.BuildCheck.Infrastructure.EditorConfig
     internal class EditorConfigParser
     {
         private const string EditorconfigFile = ".editorconfig";
-        private Dictionary<string, EditorConfigFile> editorConfigFileCache = new Dictionary<string, EditorConfigFile>();
+
+        /// <summary>
+        /// Cache layer of the parsed editor configs the key is the path to the .editorconfig file.
+        /// </summary>
+        private Dictionary<string, EditorConfigFile> _editorConfigFileCache = new Dictionary<string, EditorConfigFile>(StringComparer.InvariantCultureIgnoreCase);
 
         internal Dictionary<string, string> Parse(string filePath)
         {
@@ -41,15 +45,15 @@ internal IEnumerable<EditorConfigFile> EditorConfigFileDiscovery(string filePath
             {
                 EditorConfigFile editorConfig;
 
-                if (editorConfigFileCache.ContainsKey(editorConfigFilePath))
+                if (_editorConfigFileCache.ContainsKey(editorConfigFilePath))
                 {
-                    editorConfig = editorConfigFileCache[editorConfigFilePath];
+                    editorConfig = _editorConfigFileCache[editorConfigFilePath];
                 }
                 else
                 {
                     var editorConfigfileContent = File.ReadAllText(editorConfigFilePath);
                     editorConfig = EditorConfigFile.Parse(editorConfigfileContent);
-                    editorConfigFileCache[editorConfigFilePath] = editorConfig;
+                    _editorConfigFileCache[editorConfigFilePath] = editorConfig;
                 }
 
                 editorConfigDataFromFilesList.Add(editorConfig);
@@ -75,7 +79,7 @@ internal IEnumerable<EditorConfigFile> EditorConfigFileDiscovery(string filePath
         /// <param name="filePath"></param>
         internal Dictionary<string, string> MergeEditorConfigFiles(IEnumerable<EditorConfigFile> editorConfigFiles, string filePath)
         {
-            var resultingDictionary = new Dictionary<string, string>();
+            var resultingDictionary = new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase);
 
             if (editorConfigFiles.Any())
             {
