diff --git a/src/Build.UnitTests/Construction/ProjectInSolution_Tests.cs b/src/Build.UnitTests/Construction/ProjectInSolution_Tests.cs
new file mode 100644
index 00000000000..c355abbbf77
--- /dev/null
+++ b/src/Build.UnitTests/Construction/ProjectInSolution_Tests.cs
@@ -0,0 +1,30 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using Xunit;
+
+namespace Microsoft.Build.Construction;
+
+public sealed class ProjectInSolution_Tests
+{
+    [Theory]
+    [InlineData("", "")]
+    [InlineData("Hello", "Hello")]
+    [InlineData("Hello.world", "Hello_world")]
+    [InlineData("Hello_world", "Hello_world")]
+    [InlineData("Hello (world)", "Hello _world_")]
+    [InlineData("It's 99.9% bug free", "It_s 99_9_ bug free")]
+    [InlineData("%$@;.()'", "________")]
+    public void CleanseProjectName(string input, string expected)
+    {
+        // Disallowed characters are: %$@;.()'
+        string actual = ProjectInSolution.CleanseProjectName(input);
+
+        Assert.Equal(expected, actual);
+
+        if (input == expected)
+        {
+            Assert.Same(input, actual);
+        }
+    }
+}
diff --git a/src/Build/Construction/Solution/ProjectInSolution.cs b/src/Build/Construction/Solution/ProjectInSolution.cs
index 49b5eef3b98..e1dbd856bc5 100644
--- a/src/Build/Construction/Solution/ProjectInSolution.cs
+++ b/src/Build/Construction/Solution/ProjectInSolution.cs
@@ -90,11 +90,6 @@ public sealed class ProjectInSolution
         /// </summary>
         internal static readonly string[] projectNamesToDisambiguate = { "Build", "Rebuild", "Clean", "Publish" };
 
-        /// <summary>
-        /// Character that will be used to replace 'unclean' ones.
-        /// </summary>
-        private const char cleanCharacter = '_';
-
         #endregion
         #region Member data
         private string _relativePath;         // Relative from .SLN file.  For example, "WindowsApplication1\WindowsApplication1.csproj"
@@ -486,25 +481,28 @@ internal void UpdateUniqueProjectName(string newUniqueName)
         /// </summary>
         /// <param name="projectName">The name to be cleansed</param>
         /// <returns>string</returns>
-        private static string CleanseProjectName(string projectName)
+        internal static string CleanseProjectName(string projectName)
         {
             ErrorUtilities.VerifyThrow(projectName != null, "Null strings not allowed.");
 
             // If there are no special chars, just return the original string immediately.
             // Don't even instantiate the StringBuilder.
             int indexOfChar = projectName.IndexOfAny(s_charsToCleanse);
+
             if (indexOfChar == -1)
             {
+                // No illegal character exists in the name, so return the input unchanged.
                 return projectName;
             }
 
             // This is where we're going to work on the final string to return to the caller.
-            var cleanProjectName = new StringBuilder(projectName);
+            StringBuilder cleanProjectName = new(projectName);
 
-            // Replace each unclean character with a clean one            
-            foreach (char uncleanChar in s_charsToCleanse)
+            while (indexOfChar != -1)
             {
-                cleanProjectName.Replace(uncleanChar, cleanCharacter);
+                cleanProjectName[indexOfChar] = '_';
+
+                indexOfChar = projectName.IndexOfAny(s_charsToCleanse, indexOfChar + 1);
             }
 
             return cleanProjectName.ToString();
