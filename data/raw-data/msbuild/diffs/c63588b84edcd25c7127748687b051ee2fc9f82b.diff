diff --git a/ref/Microsoft.NET.StringTools.net35/net/Microsoft.NET.StringTools.net35.cs b/ref/Microsoft.NET.StringTools.net35/net/Microsoft.NET.StringTools.net35.cs
new file mode 100644
index 00000000000..25fe835978c
--- /dev/null
+++ b/ref/Microsoft.NET.StringTools.net35/net/Microsoft.NET.StringTools.net35.cs
@@ -0,0 +1,38 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+namespace Microsoft.NET.StringTools
+{
+    public partial class SpanBasedStringBuilder : System.IDisposable
+    {
+        public SpanBasedStringBuilder(int capacity = 4) { }
+        public SpanBasedStringBuilder(string str) { }
+        public int Length { get { throw null; } }
+        public void Clear() { }
+        public void Dispose() { }
+        public Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator GetEnumerator() { throw null; }
+        public override string ToString() { throw null; }
+        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
+        public partial struct Enumerator
+        {
+            private object _dummy;
+            private int _dummyPrimitive;
+            public Enumerator(System.Text.StringBuilder builder) { throw null; }
+            public char Current { get { throw null; } }
+            public bool MoveNext() { throw null; }
+        }
+    }
+    public static partial class Strings
+    {
+        public static string CreateDiagnosticReport() { throw null; }
+        public static void EnableDiagnostics() { }
+        public static Microsoft.NET.StringTools.SpanBasedStringBuilder GetSpanBasedStringBuilder() { throw null; }
+        public static string WeakIntern(string str) { throw null; }
+    }
+}
+namespace System
+{
+    public static partial class MemoryExtensions
+    {
+        public static string AsSpan<T>(this T[] array, int start, int length) { throw null; }
+    }
+}
diff --git a/ref/Microsoft.NET.StringTools/net/Microsoft.NET.StringTools.cs b/ref/Microsoft.NET.StringTools/net/Microsoft.NET.StringTools.cs
new file mode 100644
index 00000000000..c86507624bc
--- /dev/null
+++ b/ref/Microsoft.NET.StringTools/net/Microsoft.NET.StringTools.cs
@@ -0,0 +1,38 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+namespace Microsoft.NET.StringTools
+{
+    public partial class SpanBasedStringBuilder : System.IDisposable
+    {
+        public SpanBasedStringBuilder(int capacity = 4) { }
+        public SpanBasedStringBuilder(string str) { }
+        public int Capacity { get { throw null; } }
+        public int Length { get { throw null; } }
+        public void Append(System.ReadOnlyMemory<char> span) { }
+        public void Append(string value) { }
+        public void Append(string value, int startIndex, int count) { }
+        public void Clear() { }
+        public void Dispose() { }
+        public Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator GetEnumerator() { throw null; }
+        public override string ToString() { throw null; }
+        public void Trim() { }
+        public void TrimEnd() { }
+        public void TrimStart() { }
+        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
+        public partial struct Enumerator
+        {
+            private object _dummy;
+            private int _dummyPrimitive;
+            public char Current { get { throw null; } }
+            public bool MoveNext() { throw null; }
+        }
+    }
+    public static partial class Strings
+    {
+        public static string CreateDiagnosticReport() { throw null; }
+        public static void EnableDiagnostics() { }
+        public static Microsoft.NET.StringTools.SpanBasedStringBuilder GetSpanBasedStringBuilder() { throw null; }
+        public static string WeakIntern(System.ReadOnlySpan<char> str) { throw null; }
+        public static string WeakIntern(string str) { throw null; }
+    }
+}
diff --git a/ref/Microsoft.NET.StringTools/netstandard/Microsoft.NET.StringTools.cs b/ref/Microsoft.NET.StringTools/netstandard/Microsoft.NET.StringTools.cs
new file mode 100644
index 00000000000..c86507624bc
--- /dev/null
+++ b/ref/Microsoft.NET.StringTools/netstandard/Microsoft.NET.StringTools.cs
@@ -0,0 +1,38 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+namespace Microsoft.NET.StringTools
+{
+    public partial class SpanBasedStringBuilder : System.IDisposable
+    {
+        public SpanBasedStringBuilder(int capacity = 4) { }
+        public SpanBasedStringBuilder(string str) { }
+        public int Capacity { get { throw null; } }
+        public int Length { get { throw null; } }
+        public void Append(System.ReadOnlyMemory<char> span) { }
+        public void Append(string value) { }
+        public void Append(string value, int startIndex, int count) { }
+        public void Clear() { }
+        public void Dispose() { }
+        public Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator GetEnumerator() { throw null; }
+        public override string ToString() { throw null; }
+        public void Trim() { }
+        public void TrimEnd() { }
+        public void TrimStart() { }
+        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
+        public partial struct Enumerator
+        {
+            private object _dummy;
+            private int _dummyPrimitive;
+            public char Current { get { throw null; } }
+            public bool MoveNext() { throw null; }
+        }
+    }
+    public static partial class Strings
+    {
+        public static string CreateDiagnosticReport() { throw null; }
+        public static void EnableDiagnostics() { }
+        public static Microsoft.NET.StringTools.SpanBasedStringBuilder GetSpanBasedStringBuilder() { throw null; }
+        public static string WeakIntern(System.ReadOnlySpan<char> str) { throw null; }
+        public static string WeakIntern(string str) { throw null; }
+    }
+}
diff --git a/src/StringTools/StringTools.csproj b/src/StringTools/StringTools.csproj
index fef9909ce6f..b14e2464e18 100644
--- a/src/StringTools/StringTools.csproj
+++ b/src/StringTools/StringTools.csproj
@@ -5,6 +5,7 @@
     <PlatformTarget>AnyCPU</PlatformTarget>
     <WarningsAsErrors>true</WarningsAsErrors>
     <IsPackable>true</IsPackable>
+    <GenerateReferenceAssemblySource>true</GenerateReferenceAssemblySource>
     <LangVersion>8.0</LangVersion>
     <PackageId>Microsoft.NET.StringTools</PackageId>
     <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
