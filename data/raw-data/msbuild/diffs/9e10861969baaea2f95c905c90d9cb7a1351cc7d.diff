diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index f423f2faf04..25f90cfde0d 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -1731,15 +1731,7 @@ private static void AddProxyBuildRequestToSubmission(
             ProxyTargets proxyTargets,
             int projectContextId)
         {
-            // Reverse the map so we can look up requested targets
-            // The ProxyTargetToRealTargetMap is "backwards" from how most users would want to use it and doesn't provide as much flexibility as it could if reversed.
-            // Unfortunately this is part of a public API so cannot easily change at this point.
-            Dictionary<string, string> realTargetsToProxyTargets = new(proxyTargets.ProxyTargetToRealTargetMap.Count, StringComparer.OrdinalIgnoreCase);
-            foreach (KeyValuePair<string, string> kvp in proxyTargets.ProxyTargetToRealTargetMap)
-            {
-                // In the case of multiple proxy targets pointing to the same real target, the last one wins. Another awkwardness of ProxyTargetToRealTargetMap being "backwards".
-                realTargetsToProxyTargets[kvp.Value] = kvp.Key;
-            }
+            IReadOnlyDictionary<string, string> realTargetsToProxyTargets = proxyTargets.RealTargetToProxyTargetMap;
 
             ICollection<string> requestedTargets = submission.BuildRequestData.TargetNames.Count > 0
                 ? submission.BuildRequestData.TargetNames
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs b/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs
index 970dfdd3332..03f7892e8b3 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProxyTargets.cs
@@ -27,6 +27,23 @@ public class ProxyTargets : ITranslatable
         /// </summary>
         public IReadOnlyDictionary<string, string> ProxyTargetToRealTargetMap => _proxyTargetToRealTargetMap;
 
+        internal IReadOnlyDictionary<string, string> RealTargetToProxyTargetMap
+        {
+            get
+            {
+                // The ProxyTargetToRealTargetMap is "backwards" from how most users would want to use it and doesn't provide as much flexibility as it could if reversed.
+                // Unfortunately this is part of a public API so cannot easily change at this point.
+                Dictionary<string, string> realTargetsToProxyTargets = new(ProxyTargetToRealTargetMap.Count, StringComparer.OrdinalIgnoreCase);
+                foreach (KeyValuePair<string, string> kvp in ProxyTargetToRealTargetMap)
+                {
+                    // In the case of multiple proxy targets pointing to the same real target, the last one wins. Another awkwardness of ProxyTargetToRealTargetMap being "backwards".
+                    realTargetsToProxyTargets[kvp.Value] = kvp.Key;
+                }
+
+                return realTargetsToProxyTargets;
+            }
+        }
+
         private ProxyTargets()
         {
         }
