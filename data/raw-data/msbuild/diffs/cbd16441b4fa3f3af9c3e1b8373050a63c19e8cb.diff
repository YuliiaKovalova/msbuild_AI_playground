diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index bc1e535abab..15d517149be 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -670,7 +670,7 @@ IEnumerable<ILogger> AppendDebuggingLoggers(IEnumerable<ILogger> loggers)
 
                 var binlogPath = DebugUtils.FindNextAvailableDebugFilePath($"{DebugUtils.ProcessInfoString}_BuildManager_{_hostName}.binlog");
 
-                var logger = new BinaryLogger { Parameters = binlogPath };
+                var logger = new BinaryLogger { BinaryLoggerParameters = new BinaryLoggerParameters(binlogPath) };
 
                 return (loggers ?? Enumerable.Empty<ILogger>()).Concat(new[] { logger });
             }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
index 34d6b0e21a7..b7505945b76 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
@@ -2,6 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections;
 using System.Collections.Generic;
 using System.Linq;
 using System.Text;
@@ -11,9 +12,13 @@ namespace Microsoft.Build.Logging
 {
     public class BinaryLoggerParameters
     {
-        public string binaryLoggerArguments { get; private set; }
+        public string binaryLoggerArguments { get; set; }
 
-        public string binaryLoggerParameters { get; private set; }
+        public string binaryLoggerParameters { get; set; }
+
+        public bool IsBinaryLoggerSet { get; set; }
+
+        public string InitProjectFile { get; set; } = string.Empty;
 
         public BinaryLoggerParameters(string binaryLoggerArguments, string binaryLoggerParameters)
         {
@@ -27,10 +32,6 @@ public BinaryLoggerParameters(string binaryLoggerArguments)
             binaryLoggerParameters = string.Empty;
         }
 
-        public bool IsBinaryLoggerSet { get; set; }
-
-        public string InitProjectFile { get; set; } = string.Empty;
-
 
         /// <summary>
         /// Generates the stringified representation of current instance
@@ -38,17 +39,16 @@ public BinaryLoggerParameters(string binaryLoggerArguments)
         /// <returns></returns>
         public string GetStringifiedParameters()
         {
-            var builtParameters = new StringBuilder();
-            // common configuration
-            builtParameters.Append("commonConfig=[");
-            builtParameters.Append($"InitProjectFile={InitProjectFile};");
-            builtParameters.Append($"IsBinaryLoggerSet={IsBinaryLoggerSet};");
-            builtParameters.Append(']');
-
-            builtParameters.Append($"blArguments=[binaryLoggerArguments={binaryLoggerArguments}]");
-            builtParameters.Append($"blParameters=[binaryLoggerParameters={binaryLoggerParameters}]");
+            // tmp
+            Dictionary<string, string> parameters = new Dictionary<string, string>()
+            {
+                { "initProjectFile", InitProjectFile },
+                { "isBinaryLoggerSet", IsBinaryLoggerSet.ToString() },
+                { "blArguments", binaryLoggerArguments },
+                { "blParameters", binaryLoggerParameters }
+            };
 
-            return builtParameters.ToString();
+            return string.Join(Environment.NewLine, parameters);
         }
 
 
diff --git a/src/MSBuild.UnitTests/TerminalLogger_Tests.cs b/src/MSBuild.UnitTests/TerminalLogger_Tests.cs
index 9d764455e9a..c3043e8b081 100644
--- a/src/MSBuild.UnitTests/TerminalLogger_Tests.cs
+++ b/src/MSBuild.UnitTests/TerminalLogger_Tests.cs
@@ -383,13 +383,8 @@ public void TestTerminalLoggerTogetherWithOtherLoggers()
                 TransientTestFolder logFolder = env.CreateFolder(createFolder: true);
                 TransientTestFile projectFile = env.CreateFile(logFolder, "myProj.proj", contents);
 
-                BinaryLogger loggerWithTL = new();
                 string logFileWithTL = env.ExpectFile(".binlog").Path;
-                loggerWithTL.Parameters = logFileWithTL;
-
-                BinaryLogger loggerWithoutTL = new();
                 string logFileWithoutTL = env.ExpectFile(".binlog").Path;
-                loggerWithoutTL.Parameters = logFileWithoutTL;
 
                 // Execute MSBuild with binary, file and terminal loggers
                 RunnerUtilities.ExecMSBuild($"{projectFile.Path} /m /bl:{logFileWithTL} -flp:logfile={Path.Combine(logFolder.Path, "logFileWithTL.log")};verbosity=diagnostic -tl:on", out bool success);
diff --git a/src/Shared/UnitTests/EngineTestEnvironment.cs b/src/Shared/UnitTests/EngineTestEnvironment.cs
index 87be4933bc4..5ebfdbf0357 100644
--- a/src/Shared/UnitTests/EngineTestEnvironment.cs
+++ b/src/Shared/UnitTests/EngineTestEnvironment.cs
@@ -195,8 +195,9 @@ public override void Revert()
         {
             var binaryLogger = new BinaryLogger();
             string binaryLoggerFilePath = Path.GetFullPath(Path.Combine(TestRoot, Guid.NewGuid().ToString() + ".binlog"));
-            binaryLogger.CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.None;
-            binaryLogger.Parameters = binaryLoggerFilePath;
+            var binaryLoggerParameters = new BinaryLoggerParameters($"ProjectImports=None;{binaryLoggerFilePath}");
+            binaryLogger.BinaryLoggerParameters = binaryLoggerParameters;
+
             return (binaryLogger, null);
         }
 
