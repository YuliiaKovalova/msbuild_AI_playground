diff --git a/src/Build/BuildCop/API/BuildAnalyzer.cs b/src/Build/BuildCop/API/BuildAnalyzer.cs
index 261054e14a4..6299fc4c282 100644
--- a/src/Build/BuildCop/API/BuildAnalyzer.cs
+++ b/src/Build/BuildCop/API/BuildAnalyzer.cs
@@ -38,8 +38,8 @@ public abstract class BuildAnalyzer : IDisposable
     /// <summary>
     /// 
     /// </summary>
-    /// <param name="context"></param>
-    public abstract void RegisterActions(IBuildCopContext context);
+    /// <param name="registrationContext"></param>
+    public abstract void RegisterActions(IBuildCopRegistrationContext registrationContext);
 
     public virtual void Dispose()
     { }
diff --git a/src/Build/BuildCop/API/BuildAnalyzerRule.cs b/src/Build/BuildCop/API/BuildAnalyzerRule.cs
index 25d34e08a6b..06194471be5 100644
--- a/src/Build/BuildCop/API/BuildAnalyzerRule.cs
+++ b/src/Build/BuildCop/API/BuildAnalyzerRule.cs
@@ -49,7 +49,7 @@ public BuildAnalyzerRule(string id, string title, string description, string cat
     public string Category { get; }
 
     /// <summary>
-    /// Message format that will be used by the actual findings (<see cref="BuildCopResult"/>) - those will just supply the actual arguments.
+    /// Message format that will be used by the actual reports (<see cref="BuildCopResult"/>) - those will just supply the actual arguments.
     /// </summary>
     public string MessageFormat { get; }
 
diff --git a/src/Build/BuildCop/API/ConfigurationContext.cs b/src/Build/BuildCop/API/ConfigurationContext.cs
index 83fdbfdcbde..1ee058be2f0 100644
--- a/src/Build/BuildCop/API/ConfigurationContext.cs
+++ b/src/Build/BuildCop/API/ConfigurationContext.cs
@@ -18,7 +18,7 @@ private ConfigurationContext(CustomConfigurationData[] customConfigurationData)
         CustomConfigurationData = customConfigurationData;
     }
 
-    public static ConfigurationContext FromDataEnumeration(CustomConfigurationData[] customConfigurationData)
+    internal static ConfigurationContext FromDataEnumeration(CustomConfigurationData[] customConfigurationData)
     {
         if (!customConfigurationData.Any(BuildCop.CustomConfigurationData.NotNull))
         {
@@ -31,7 +31,7 @@ public static ConfigurationContext FromDataEnumeration(CustomConfigurationData[]
                 .ToArray());
     }
 
-    public static ConfigurationContext Null { get; } = new(Array.Empty<CustomConfigurationData>());
+    internal static ConfigurationContext Null { get; } = new(Array.Empty<CustomConfigurationData>());
 
     /// <summary>
     /// Custom configuration data - per each rule that has some specified.
diff --git a/src/Build/BuildCop/API/IBuildCopRegistrationContext.cs b/src/Build/BuildCop/API/IBuildCopRegistrationContext.cs
new file mode 100644
index 00000000000..4c1b6751ef8
--- /dev/null
+++ b/src/Build/BuildCop/API/IBuildCopRegistrationContext.cs
@@ -0,0 +1,12 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+namespace Microsoft.Build.Experimental.BuildCop;
+
+public interface IBuildCopRegistrationContext
+{
+    void RegisterEvaluatedPropertiesAction(Action<BuildCopDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);
+    void RegisterParsedItemsAction(Action<BuildCopDataContext<ParsedItemsAnalysisData>> parsedItemsAction);
+}
diff --git a/src/Build/BuildCop/Analyzers/SharedOutputPathAnalyzer.cs b/src/Build/BuildCop/Analyzers/SharedOutputPathAnalyzer.cs
index 59eb865169b..b028f78ee88 100644
--- a/src/Build/BuildCop/Analyzers/SharedOutputPathAnalyzer.cs
+++ b/src/Build/BuildCop/Analyzers/SharedOutputPathAnalyzer.cs
@@ -30,15 +30,15 @@ public override void Initialize(ConfigurationContext configurationContext)
         /* This is it - no custom configuration */
     }
 
-    public override void RegisterActions(IBuildCopContext context)
+    public override void RegisterActions(IBuildCopRegistrationContext registrationContext)
     {
-        context.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);
+        registrationContext.RegisterEvaluatedPropertiesAction(EvaluatedPropertiesAction);
     }
 
     private readonly Dictionary<string, string> _projectsPerOutputPath = new(StringComparer.CurrentCultureIgnoreCase);
     private readonly HashSet<string> _projects = new(StringComparer.CurrentCultureIgnoreCase);
 
-    private void EvaluatedPropertiesAction(BuildAnalysisContext<EvaluatedPropertiesAnalysisData> context)
+    private void EvaluatedPropertiesAction(BuildCopDataContext<EvaluatedPropertiesAnalysisData> context)
     {
         if (!_projects.Add(context.Data.ProjectFilePath))
         {
@@ -61,7 +61,7 @@ private void EvaluatedPropertiesAction(BuildAnalysisContext<EvaluatedPropertiesA
         }
     }
 
-    private string? CheckAndAddFullOutputPath(string? path, BuildAnalysisContext<EvaluatedPropertiesAnalysisData> context)
+    private string? CheckAndAddFullOutputPath(string? path, BuildCopDataContext<EvaluatedPropertiesAnalysisData> context)
     {
         if (string.IsNullOrEmpty(path))
         {
diff --git a/src/Build/BuildCop/Infrastructure/BuildCopCentralContext.cs b/src/Build/BuildCop/Infrastructure/BuildCopCentralContext.cs
index 7ad82c37c1f..96b125cbca6 100644
--- a/src/Build/BuildCop/Infrastructure/BuildCopCentralContext.cs
+++ b/src/Build/BuildCop/Infrastructure/BuildCopCentralContext.cs
@@ -16,8 +16,8 @@ namespace Microsoft.Build.BuildCop.Infrastructure;
 internal sealed class BuildCopCentralContext
 {
     private record CallbackRegistry(
-        List<(BuildAnalyzerWrapper, Action<BuildAnalysisContext<EvaluatedPropertiesAnalysisData>>)> EvaluatedPropertiesActions,
-        List<(BuildAnalyzerWrapper, Action<BuildAnalysisContext<ParsedItemsAnalysisData>>)> ParsedItemsActions)
+        List<(BuildAnalyzerWrapper, Action<BuildCopDataContext<EvaluatedPropertiesAnalysisData>>)> EvaluatedPropertiesActions,
+        List<(BuildAnalyzerWrapper, Action<BuildCopDataContext<ParsedItemsAnalysisData>>)> ParsedItemsActions)
     {
         public CallbackRegistry() : this([],[]) { }
     }
@@ -30,21 +30,21 @@ public CallbackRegistry() : this([],[]) { }
     internal bool HasEvaluatedPropertiesActions => _globalCallbacks.EvaluatedPropertiesActions.Any();
     internal bool HasParsedItemsActions => _globalCallbacks.ParsedItemsActions.Any();
 
-    internal void RegisterEvaluatedPropertiesAction(BuildAnalyzerWrapper analyzer, Action<BuildAnalysisContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction)
+    internal void RegisterEvaluatedPropertiesAction(BuildAnalyzerWrapper analyzer, Action<BuildCopDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction)
         // Here we might want to communicate to node that props need to be sent.
         //  (it was being communicated via MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION)
         => RegisterAction(analyzer, evaluatedPropertiesAction, _globalCallbacks.EvaluatedPropertiesActions);
 
-    internal void RegisterParsedItemsAction(BuildAnalyzerWrapper analyzer, Action<BuildAnalysisContext<ParsedItemsAnalysisData>> parsedItemsAction)
+    internal void RegisterParsedItemsAction(BuildAnalyzerWrapper analyzer, Action<BuildCopDataContext<ParsedItemsAnalysisData>> parsedItemsAction)
         => RegisterAction(analyzer, parsedItemsAction, _globalCallbacks.ParsedItemsActions);
 
     private void RegisterAction<T>(
         BuildAnalyzerWrapper wrappedAnalyzer,
-        Action<BuildAnalysisContext<T>> handler,
-        List<(BuildAnalyzerWrapper, Action<BuildAnalysisContext<T>>)> handlersRegistry)
+        Action<BuildCopDataContext<T>> handler,
+        List<(BuildAnalyzerWrapper, Action<BuildCopDataContext<T>>)> handlersRegistry)
         where T : AnalysisData
     {
-        void WrappedHandler(BuildAnalysisContext<T> context)
+        void WrappedHandler(BuildCopDataContext<T> context)
         {
             using var _ = wrappedAnalyzer.StartSpan();
             handler(context);
@@ -79,7 +79,7 @@ internal void RunParsedItemsActions(
             loggingContext, resultHandler);
 
     private void RunRegisteredActions<T>(
-        List<(BuildAnalyzerWrapper, Action<BuildAnalysisContext<T>>)> registeredCallbacks,
+        List<(BuildAnalyzerWrapper, Action<BuildCopDataContext<T>>)> registeredCallbacks,
         T analysisData,
         LoggingContext loggingContext,
         Action<BuildAnalyzerWrapper, LoggingContext, BuildAnalyzerConfigurationInternal[], BuildCopResult> resultHandler)
@@ -122,7 +122,7 @@ private void RunRegisteredActions<T>(
 
                 // TODO: if the input data supports that - check the configPerRule[0].EvaluationAnalysisScope
 
-                BuildAnalysisContext<T> context = new BuildAnalysisContext<T>(
+                BuildCopDataContext<T> context = new BuildCopDataContext<T>(
                     analyzerCallback.Item1,
                     loggingContext,
                     configPerRule,
diff --git a/src/Build/BuildCop/Infrastructure/BuildCopContext.cs b/src/Build/BuildCop/Infrastructure/BuildCopContext.cs
index 2bfa8c6eaae..2316d9d601e 100644
--- a/src/Build/BuildCop/Infrastructure/BuildCopContext.cs
+++ b/src/Build/BuildCop/Infrastructure/BuildCopContext.cs
@@ -7,12 +7,12 @@
 
 namespace Microsoft.Build.BuildCop.Infrastructure;
 
-internal sealed class BuildCopContext(BuildAnalyzerWrapper analyzerWrapper, BuildCopCentralContext buildCopCentralContext) : IBuildCopContext
+internal sealed class BuildCopRegistrationContext(BuildAnalyzerWrapper analyzerWrapper, BuildCopCentralContext buildCopCentralContext) : IBuildCopRegistrationContext
 {
     private int _evaluatedPropertiesActionCount;
     private int _parsedItemsActionCount;
 
-    public void RegisterEvaluatedPropertiesAction(Action<BuildAnalysisContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction)
+    public void RegisterEvaluatedPropertiesAction(Action<BuildCopDataContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction)
     {
         if (Interlocked.Increment(ref _evaluatedPropertiesActionCount) > 1)
         {
@@ -23,7 +23,7 @@ public void RegisterEvaluatedPropertiesAction(Action<BuildAnalysisContext<Evalua
         buildCopCentralContext.RegisterEvaluatedPropertiesAction(analyzerWrapper, evaluatedPropertiesAction);
     }
 
-    public void RegisterParsedItemsAction(Action<BuildAnalysisContext<ParsedItemsAnalysisData>> parsedItemsAction)
+    public void RegisterParsedItemsAction(Action<BuildCopDataContext<ParsedItemsAnalysisData>> parsedItemsAction)
     {
         if (Interlocked.Increment(ref _parsedItemsActionCount) > 1)
         {
diff --git a/src/Build/BuildCop/Infrastructure/BuildCopManagerProvider.cs b/src/Build/BuildCop/Infrastructure/BuildCopManagerProvider.cs
index 67c7027e61e..85e22321017 100644
--- a/src/Build/BuildCop/Infrastructure/BuildCopManagerProvider.cs
+++ b/src/Build/BuildCop/Infrastructure/BuildCopManagerProvider.cs
@@ -220,7 +220,7 @@ private void SetupSingleAnalyzer(BuildAnalyzerFactoryContext analyzerFactoryCont
 
                 // Create the wrapper and register to central context
                 wrapper.StartNewProject(projectFullPath, configurations);
-                var wrappedContext = new BuildCopContext(wrapper, _buildCopCentralContext);
+                var wrappedContext = new BuildCopRegistrationContext(wrapper, _buildCopCentralContext);
                 analyzer.RegisterActions(wrappedContext);
             }
             else
diff --git a/src/Build/BuildCop/Infrastructure/IBuildCopContext.cs b/src/Build/BuildCop/Infrastructure/IBuildCopContext.cs
deleted file mode 100644
index 9ce8c8c65a8..00000000000
--- a/src/Build/BuildCop/Infrastructure/IBuildCopContext.cs
+++ /dev/null
@@ -1,13 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using Microsoft.Build.Experimental.BuildCop;
-
-namespace Microsoft.Build.BuildCop.Infrastructure;
-
-public interface IBuildCopContext
-{
-    void RegisterEvaluatedPropertiesAction(Action<BuildAnalysisContext<EvaluatedPropertiesAnalysisData>> evaluatedPropertiesAction);
-    void RegisterParsedItemsAction(Action<BuildAnalysisContext<ParsedItemsAnalysisData>> parsedItemsAction);
-}
diff --git a/src/Build/BuildCop/OM/BuildAnalysisContext.cs b/src/Build/BuildCop/OM/BuildCopDataContext.cs
similarity index 95%
rename from src/Build/BuildCop/OM/BuildAnalysisContext.cs
rename to src/Build/BuildCop/OM/BuildCopDataContext.cs
index f6b85906a53..5549a01f4b9 100644
--- a/src/Build/BuildCop/OM/BuildAnalysisContext.cs
+++ b/src/Build/BuildCop/OM/BuildCopDataContext.cs
@@ -25,14 +25,14 @@ public abstract class AnalysisData(string projectFilePath)
     public string ProjectFilePath { get; } = projectFilePath;
 }
 
-public class BuildAnalysisContext<T> where T : AnalysisData
+public class BuildCopDataContext<T> where T : AnalysisData
 {
     private readonly BuildAnalyzerWrapper _analyzerWrapper;
     private readonly LoggingContext _loggingContext;
     private readonly BuildAnalyzerConfigurationInternal[] _configPerRule;
     private readonly Action<BuildAnalyzerWrapper, LoggingContext, BuildAnalyzerConfigurationInternal[], BuildCopResult> _resultHandler;
 
-    internal BuildAnalysisContext(
+    internal BuildCopDataContext(
         BuildAnalyzerWrapper analyzerWrapper,
         LoggingContext loggingContext,
         BuildAnalyzerConfigurationInternal[] configPerRule,
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 7ee66791af4..b76f1a0ecf3 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -165,7 +165,7 @@
     <Compile Include="BuildCop\Infrastructure\NullBuildCopManager.cs" />
     <Compile Include="BuildCop\Infrastructure\NullBuildCopManagerProvider.cs" />
     <Compile Include="BuildCop\Infrastructure\TracingReporter.cs" />
-    <Compile Include="BuildCop\OM\BuildAnalysisContext.cs" />
+    <Compile Include="BuildCop\OM\BuildCopDataContext.cs" />
     <Compile Include="BuildCop\API\BuildAnalyzer.cs" />
     <Compile Include="BuildCop\API\BuildAnalyzerConfiguration.cs" />
     <Compile Include="BuildCop\API\BuildCopResult.cs" />
@@ -181,7 +181,7 @@
     <Compile Include="BuildCop\Infrastructure\BuildCopManagerProvider.cs" />
     <Compile Include="BuildCop\Infrastructure\ConfigurationProvider.cs" />
     <Compile Include="BuildCop\Infrastructure\CustomConfigurationData.cs" />
-    <Compile Include="BuildCop\Infrastructure\IBuildCopContext.cs" />
+    <Compile Include="BuildCop\API\IBuildCopRegistrationContext.cs" />
     <Compile Include="BuildCop\Infrastructure\IBuildCopManager.cs" />
     <Compile Include="BuildCop\Logging\IBuildAnalysisLoggingContext.cs" />
     <Compile Include="BuildCop\Logging\IBuildAnalysisLoggingContextFactory.cs" />
diff --git a/src/Framework/Features.cs b/src/Framework/Features.cs
index 636a30ba859..b11e41c4ddc 100644
--- a/src/Framework/Features.cs
+++ b/src/Framework/Features.cs
@@ -42,7 +42,8 @@ public static class Features
     {
         private static readonly Dictionary<string, FeatureStatus> _featureStatusMap = new Dictionary<string, FeatureStatus>
         {
-            // TODO: Fill in the dictionary with the features and their status
+            // Fill in the dictionary with the features and their status
+            { "BuildCop.Beta", FeatureStatus.Preview }
         };
 
         /// <summary>
