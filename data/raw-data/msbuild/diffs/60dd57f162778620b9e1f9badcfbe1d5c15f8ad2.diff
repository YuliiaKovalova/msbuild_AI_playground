diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
index 2078c42fe6c..be3e4ac3d38 100644
--- a/eng/CodeAnalysis.ruleset
+++ b/eng/CodeAnalysis.ruleset
@@ -96,7 +96,7 @@
     <Rule Id="CA1822" Action="None" />             <!-- Mark members as static --> 
     <Rule Id="CA1823" Action="Info" />             <!-- Avoid unused private fields --> 
     <Rule Id="CA1824" Action="Warning" />          <!-- Mark assemblies with NeutralResourcesLanguageAttribute -->
-    <Rule Id="CA1825" Action="Info" />             <!-- Avoid zero-length array allocations. --> 
+    <Rule Id="CA1825" Action="Warning" />          <!-- Avoid zero-length array allocations. --> 
     <Rule Id="CA1827" Action="Warning" />          <!-- Do not use Count() or LongCount() when Any() can be used --> 
     <Rule Id="CA1828" Action="Warning" />          <!-- Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used --> 
     <Rule Id="CA1829" Action="Info" />             <!-- Use Length/Count property instead of Count() when available --> 
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 015e7429c55..62ee33f0774 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -891,7 +891,7 @@ public void IncludeAndExcludeWorkWithRelativeAndAbsolutePaths(
                     var formattedProject = string.Format(projectContents, include, exclude);
                     File.WriteAllText(projectFile, formattedProject);
 
-                    var expectedInclude = includeSurvivesExclude ? new[] { include } : new string[0];
+                    var expectedInclude = includeSurvivesExclude ? new[] { include } : Array.Empty<string>();
 
                     ObjectModelHelpers.AssertItems(expectedInclude, new Project(projectFile).Items.ToList());
                 }
@@ -3423,7 +3423,7 @@ public static IEnumerable<Object[]> UpdateAndRemoveShouldWorkWithEscapedCharacte
         public void UpdateAndRemoveShouldWorkWithEscapedCharacters(string projectContents, string include, string update, string remove, string[] expectedInclude, Dictionary<string, string>[] expectedMetadata)
         {
             var formattedProjectContents = string.Format(projectContents, include, update, remove);
-            ObjectModelHelpers.AssertItemEvaluationFromProject(formattedProjectContents, new string[0], expectedInclude, expectedMetadata);
+            ObjectModelHelpers.AssertItemEvaluationFromProject(formattedProjectContents, Array.Empty<string>(), expectedInclude, expectedMetadata);
         }
 
         [Fact]
@@ -3456,7 +3456,7 @@ public void UpdateAndRemoveShouldNotUseGlobMatchingOnEscapedGlobsFromReferencedI
                         .ToList();
                 },
                 project,
-                inputFiles: new string[0],
+                inputFiles: Array.Empty<string>(),
                 expectedInclude: new[] { "1.cs", "2.js" },
                 expectedMetadataPerItem: null
                 );
diff --git a/src/Build.OM.UnitTests/Definition/Project_Tests.cs b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
index afaf6ecf8ab..91e378b998c 100644
--- a/src/Build.OM.UnitTests/Definition/Project_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
@@ -3245,7 +3245,7 @@ public void GetItemProvenanceMatchesLiteralsWithNonCanonicPaths()
             using (var env = TestEnvironment.Create())
             {
                 var projectCollection = env.CreateProjectCollection().Collection;
-                var testFiles = env.CreateTestProjectWithFiles(projectContents, new string[0], "u/x");
+                var testFiles = env.CreateTestProjectWithFiles(projectContents, Array.Empty<string>(), "u/x");
                 var project = new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection);
 
                 var expected2Foo = new ProvenanceResultTupleList
@@ -3274,7 +3274,7 @@ public void GetItemProvenanceMatchesAbsoluteAndRelativePaths()
             {
                 var projectCollection = env.CreateProjectCollection().Collection;
 
-                var testFiles = env.CreateTestProjectWithFiles(projectContents, new string[0]);
+                var testFiles = env.CreateTestProjectWithFiles(projectContents, Array.Empty<string>());
 
                 var project = new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection);
 
@@ -3566,7 +3566,7 @@ public void GetItemProvenanceShouldBeSensitiveToGlobbingCone(string includeGlob,
             using (var env = TestEnvironment.Create())
             using (var projectCollection = new ProjectCollection())
             {
-                var testFiles = env.CreateTestProjectWithFiles(projectContents, new string[0], relativePathOfProjectFile);
+                var testFiles = env.CreateTestProjectWithFiles(projectContents, Array.Empty<string>(), relativePathOfProjectFile);
                 var project = new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection);
 
                 ProvenanceResultTupleList expectedProvenance = null;
@@ -3762,7 +3762,7 @@ public void GetAllGlobsShouldProduceGlobsThatMatchAbsolutePaths()
             {
                 var projectCollection = env.CreateProjectCollection().Collection;
 
-                var testFiles = env.CreateTestProjectWithFiles(projectContents, new string[0]);
+                var testFiles = env.CreateTestProjectWithFiles(projectContents, Array.Empty<string>());
 
                 var project = new Project(testFiles.ProjectFile, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection);
 
diff --git a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
index dc1e3cfdc23..fd24f3ffad8 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
@@ -402,13 +402,13 @@ public void BuildProjectInstancesConsecutively()
         {
             ProjectInstance instance1 = new Project().CreateProjectInstance();
 
-            BuildRequestData buildRequestData1 = new BuildRequestData(instance1, new string[] { });
+            BuildRequestData buildRequestData1 = new BuildRequestData(instance1, Array.Empty<string>());
 
             BuildManager.DefaultBuildManager.Build(new BuildParameters(), buildRequestData1);
 
             new Project().CreateProjectInstance();
 
-            BuildRequestData buildRequestData2 = new BuildRequestData(instance1, new string[] { });
+            BuildRequestData buildRequestData2 = new BuildRequestData(instance1, Array.Empty<string>());
 
             BuildManager.DefaultBuildManager.Build(new BuildParameters(), buildRequestData2);
         }
diff --git a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
index 32e5a1a9ce1..a1160e070d3 100644
--- a/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs
@@ -125,7 +125,7 @@ public void TestSerializeString()
         [Fact]
         public void TestSerializeStringArray()
         {
-            HelperTestArray(new string[] { }, StringComparer.Ordinal);
+            HelperTestArray(Array.Empty<string>(), StringComparer.Ordinal);
             HelperTestArray(new string[] { "foo", "bar" }, StringComparer.Ordinal);
             HelperTestArray(null, StringComparer.Ordinal);
         }
diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
index 466bce2536a..492290c2b7b 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
@@ -193,7 +193,7 @@ private void SimpleP2PBuild(BuildParameters buildParameters)
                         .ProjectInstance.FullPath,
                     new Dictionary<string, string>(),
                     MSBuildConstants.CurrentToolsVersion,
-                    new string[0],
+                    Array.Empty<string>(),
                     null));
 
             result.OverallResult.ShouldBe(BuildResultCode.Success);
@@ -444,7 +444,7 @@ private void RunOutOfProcBuild(Action<BuildParameters> buildParametersModifier)
 
             Project project = CreateProject(CleanupFileContents(contents), MSBuildDefaultToolsVersion, _projectCollection, false);
 
-            var data = new BuildRequestData(project.CreateProjectInstance(), new string[0], _projectCollection.HostServices);
+            var data = new BuildRequestData(project.CreateProjectInstance(), Array.Empty<string>(), _projectCollection.HostServices);
             var customparameters = new BuildParameters { EnableNodeReuse = false, Loggers = new ILogger[] { _logger } };
             buildParametersModifier(customparameters);
 
@@ -655,7 +655,7 @@ public void MsBuildForwardAllPropertiesFromChildLaunchChildNode()
             _env.SetEnvironmentVariable("MsBuildForwardPropertiesFromChild", "Something");
 
             var project = CreateProject(contents, null, _projectCollection, false);
-            var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, new string[] { }, null);
+            var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
 
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
@@ -711,7 +711,7 @@ public void OutOfProcNodeForwardCertainproperties()
 
             var project = CreateProject(contents, null, _projectCollection, false);
             var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(),
-                MSBuildDefaultToolsVersion, new string[] { }, null);
+                MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
 
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
@@ -773,7 +773,7 @@ public void OutOfProcNodeForwardCertainpropertiesAlsoGetResultsFromCache()
 
             var project = CreateProject(contents, null, _projectCollection, false);
             var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(),
-                MSBuildDefaultToolsVersion, new string[] { }, null);
+                MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
 
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
@@ -828,7 +828,7 @@ public void ForwardNoPropertiesLaunchChildNode()
 
             var project = CreateProject(contents, null, _projectCollection, false);
             var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(),
-                MSBuildDefaultToolsVersion, new string[] { }, null);
+                MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
 
@@ -897,7 +897,7 @@ public override bool Execute()
 
             var project = CreateProject(contents, null, projectCollection, false);
             var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(),
-                MSBuildDefaultToolsVersion, new string[] { }, null);
+                MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
 
             var customParameters = new BuildParameters(projectCollection) { Loggers = new ILogger[] { _logger } };
             BuildResult result = _buildManager.Build(customParameters, data);
@@ -932,7 +932,7 @@ public void ForwardNoPropertiesLaunchChildNodeDefault()
 
             var project = CreateProject(contents, null, _projectCollection, false);
             var data = new BuildRequestData(project.FullPath, new Dictionary<string, string>(),
-                MSBuildDefaultToolsVersion, new string[] { }, null);
+                MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
             _logger.AssertLogContains("[success]");
@@ -1098,7 +1098,7 @@ public void SimpleBuildWithFailureAndWarningOnlyLogCriticalEventsFalse()
         [Fact]
         public void BuildRequestWithoutBegin()
         {
-            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", new string[0], null);
+            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", Array.Empty<string>(), null);
             Should.Throw<InvalidOperationException>(() => _buildManager.BuildRequest(data));
         }
 
@@ -1108,7 +1108,7 @@ public void BuildRequestWithoutBegin()
         [Fact]
         public void GraphBuildRequestWithoutBegin()
         {
-            GraphBuildRequestData data = new GraphBuildRequestData("foo", new Dictionary<string, string>(), new string[0], null);
+            GraphBuildRequestData data = new GraphBuildRequestData("foo", new Dictionary<string, string>(), Array.Empty<string>(), null);
             Should.Throw<InvalidOperationException>(() => _buildManager.BuildRequest(data));
         }
 
@@ -1118,7 +1118,7 @@ public void GraphBuildRequestWithoutBegin()
         [Fact]
         public void PendBuildRequestWithoutBegin()
         {
-            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", new string[0], null);
+            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", Array.Empty<string>(), null);
             Should.Throw<InvalidOperationException>(() => _buildManager.PendBuildRequest(data));
         }
 
@@ -1128,7 +1128,7 @@ public void PendBuildRequestWithoutBegin()
         [Fact]
         public void PendGraphBuildRequestWithoutBegin()
         {
-            GraphBuildRequestData data = new GraphBuildRequestData("foo", new Dictionary<string, string>(), new string[0], null);
+            GraphBuildRequestData data = new GraphBuildRequestData("foo", new Dictionary<string, string>(), Array.Empty<string>(), null);
             Should.Throw<InvalidOperationException>(() => _buildManager.PendBuildRequest(data));
         }
 
@@ -1154,7 +1154,7 @@ public void DisposeAfterUse()
 ");
             var project = CreateProject(contents, null, _projectCollection, false);
             var globalProperties = new Dictionary<string, string>();
-            var targets = new string[0];
+            var targets = Array.Empty<string>();
             var brd = new BuildRequestData(project.FullPath, globalProperties, null, targets, new HostServices());
             using (var bm = new BuildManager())
             {
@@ -1218,7 +1218,7 @@ public void ExtraEnds()
         [Fact]
         public void PendBuildRequestAfterEnd()
         {
-            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", new string[0], null);
+            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", Array.Empty<string>(), null);
             _buildManager.BeginBuild(new BuildParameters());
             _buildManager.EndBuild();
 
@@ -1231,7 +1231,7 @@ public void PendBuildRequestAfterEnd()
         [Fact]
         public void PendGraphBuildRequestAfterEnd()
         {
-            GraphBuildRequestData data = new GraphBuildRequestData("foo", new Dictionary<string, string>(), new string[0], null);
+            GraphBuildRequestData data = new GraphBuildRequestData("foo", new Dictionary<string, string>(), Array.Empty<string>(), null);
             _buildManager.BeginBuild(new BuildParameters());
             _buildManager.EndBuild();
 
@@ -1247,7 +1247,7 @@ public void BuildDuringBuild()
             try
             {
                 BuildRequestData data =
-                    new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", new string[0], null);
+                    new BuildRequestData("foo", new Dictionary<string, string>(), "2.0", Array.Empty<string>(), null);
                 _buildManager.BeginBuild(new BuildParameters());
 
                 Assert.Throws<InvalidOperationException>(() => { _buildManager.Build(new BuildParameters(), data); });
@@ -1489,7 +1489,7 @@ public void EndWithUnexecutedSubmission()
  </Target>
 </Project>
 ");
-            BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+            BuildRequestData data = GetBuildRequestData(contents, Array.Empty<string>(), MSBuildDefaultToolsVersion);
             _buildManager.BeginBuild(_parameters);
             _buildManager.PendBuildRequest(data);
             _buildManager.EndBuild();
@@ -1509,7 +1509,7 @@ public void CancelledBuildWithUnexecutedSubmission()
  </Target>
 </Project>
 ");
-            BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+            BuildRequestData data = GetBuildRequestData(contents, Array.Empty<string>(), MSBuildDefaultToolsVersion);
             _buildManager.BeginBuild(_parameters);
             _buildManager.PendBuildRequest(data);
             _buildManager.CancelAllSubmissions();
@@ -1539,7 +1539,7 @@ public void CancelledBuild()
                 EnableNodeReuse = false
             };
 
-            BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+            BuildRequestData data = GetBuildRequestData(contents, Array.Empty<string>(), MSBuildDefaultToolsVersion);
 
             Console.WriteLine("CancelledBuild: beginning build");
             _buildManager.BeginBuild(_parameters);
@@ -1620,7 +1620,7 @@ public void CancelledBuildInTaskHostWithDelay20()
  </Target>
 </Project>
 ");
-            BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+            BuildRequestData data = GetBuildRequestData(contents, Array.Empty<string>(), MSBuildDefaultToolsVersion);
             _buildManager.BeginBuild(_parameters);
             BuildSubmission asyncResult = _buildManager.PendBuildRequest(data);
             asyncResult.ExecuteAsync(null, null);
@@ -1657,7 +1657,7 @@ public void CancelledBuildWithDelay40()
  </Target>
 </Project>
 ");
-            BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+            BuildRequestData data = GetBuildRequestData(contents, Array.Empty<string>(), MSBuildDefaultToolsVersion);
             _buildManager.BeginBuild(_parameters);
             BuildSubmission asyncResult = _buildManager.PendBuildRequest(data);
             asyncResult.ExecuteAsync(null, null);
@@ -1688,7 +1688,7 @@ public void CancelledBuildInTaskHostWithDelay40()
  </Target>
 </Project>
 ");
-            BuildRequestData data = GetBuildRequestData(contents, new string[] { }, MSBuildDefaultToolsVersion);
+            BuildRequestData data = GetBuildRequestData(contents, Array.Empty<string>(), MSBuildDefaultToolsVersion);
             _buildManager.BeginBuild(_parameters);
             BuildSubmission asyncResult = _buildManager.PendBuildRequest(data);
             asyncResult.ExecuteAsync(null, null);
@@ -1828,7 +1828,7 @@ public void OutOfProcNodeDoesntLockWorkingDirectory()
 
             File.WriteAllText(projectFile, contents);
             _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", "1");
-            var data = new BuildRequestData(projectFile, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, new string[] { }, null);
+            var data = new BuildRequestData(projectFile, new Dictionary<string, string>(), MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             _buildManager.Build(_parameters, data);
         }
 
@@ -1983,7 +1983,7 @@ public void GhostProjectRootElementCache()
 
             // Create Project 1
             ProjectInstance projectInstance = CreateProjectInstance(contents1, null, _projectCollection, false);
-            var data = new BuildRequestData(projectInstance, new string[0]);
+            var data = new BuildRequestData(projectInstance, Array.Empty<string>());
 
             _logger.ClearLog();
 
@@ -2010,7 +2010,7 @@ public void GhostProjectRootElementCache()
 
             // Create a new build.
             ProjectInstance projectInstance2 = CreateProjectInstance(contents1, null, _projectCollection, false);
-            var data2 = new BuildRequestData(projectInstance2, new string[0]);
+            var data2 = new BuildRequestData(projectInstance2, Array.Empty<string>());
 
             // Build again.
             _parameters.ResetCaches = false;
@@ -2148,7 +2148,7 @@ public void Regress239661()
 
             string fileName = _env.CreateFile(".proj").Path;
             File.WriteAllText(fileName, contents);
-            var data = new BuildRequestData(fileName, _projectCollection.GlobalProperties, MSBuildDefaultToolsVersion, new string[0], null);
+            var data = new BuildRequestData(fileName, _projectCollection.GlobalProperties, MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             _parameters.DisableInProcNode = true;
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
@@ -2236,7 +2236,7 @@ public void ProjectInstanceTransfersToOOPNode()
                 }
             }
 
-            var data = new BuildRequestData(instance, new string[0]);
+            var data = new BuildRequestData(instance, Array.Empty<string>());
 
             // Force this to build out-of-proc
             _parameters.DisableInProcNode = true;
@@ -2280,7 +2280,7 @@ public void ProjectInstanceLimitedTransferToOOPNode()
             instance.SetProperty("VirtualProp", "overridden");
             instance.SetProperty("Unmodified", "changed");
 
-            var data = new BuildRequestData(instance, new string[0], null, BuildRequestDataFlags.None, new string[] { "VirtualProp" });
+            var data = new BuildRequestData(instance, Array.Empty<string>(), null, BuildRequestDataFlags.None, new string[] { "VirtualProp" });
 
             // Force this to build out-of-proc
             _parameters.DisableInProcNode = true;
@@ -2307,7 +2307,7 @@ public void CacheLifetime()
             // Do a build with one build manager.
             using (var outerBuildManager = new BuildManager())
             {
-                outerBuildCacheDirectory = BuildAndCheckCache(outerBuildManager, new string[] { });
+                outerBuildCacheDirectory = BuildAndCheckCache(outerBuildManager, Array.Empty<string>());
 
                 // Do another build with a second build manager while the first still exists.  Since both BuildManagers
                 // share a process-wide cache directory, we want to verify that they don't stomp on each other, either
@@ -4324,7 +4324,7 @@ public void GraphBuildShouldBeAbleToConstructGraphButSkipBuild()
                 var graphResult = buildSession.BuildGraphSubmission(
                     new GraphBuildRequestData(
                         projectGraphEntryPoints: new[] {new ProjectGraphEntryPoint(graph.GraphRoots.First().ProjectInstance.FullPath)},
-                        targetsToBuild: new string[0],
+                        targetsToBuild: Array.Empty<string>(),
                         hostServices: null,
                         flags: BuildRequestDataFlags.None,
                         graphBuildOptions: new GraphBuildOptions {Build = false}));
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
index 9ccf30da8e2..43d786c6509 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
@@ -39,7 +39,7 @@ public void TestConstructorNullFile()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequestData config1 = new BuildRequestData(null, new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+                BuildRequestData config1 = new BuildRequestData(null, new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             }
            );
         }
@@ -48,14 +48,14 @@ public void TestConstructorNullProps()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequestData config1 = new BuildRequestData("file", null, "toolsVersion", new string[0], null);
+                BuildRequestData config1 = new BuildRequestData("file", null, "toolsVersion", Array.Empty<string>(), null);
             }
            );
         }
         [Fact]
         public void TestConstructor1()
         {
-            BuildRequestData config1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+            BuildRequestData config1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
         }
 
         [Fact]
@@ -63,7 +63,7 @@ public void TestConstructorInvalidConfigId()
         {
             Assert.Throws<InternalErrorException>(() =>
             {
-                BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+                BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
                 BuildRequestConfiguration config1 = new BuildRequestConfiguration(1, data, "2.0");
                 config1.ShallowCloneWithNewId(0);
             }
@@ -72,14 +72,14 @@ public void TestConstructorInvalidConfigId()
         [Fact]
         public void TestConstructor2PositiveConfigId()
         {
-            BuildRequestData config1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+            BuildRequestData config1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             new BuildRequestConfiguration(1, config1, "2.0");
         }
 
         [Fact]
         public void TestConstructor2NegativeConfigId()
         {
-            BuildRequestData config1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+            BuildRequestData config1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             new BuildRequestConfiguration(-1, config1, "2.0");
         }
 
@@ -88,7 +88,7 @@ public void TestConstructor2NullFile()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequestData config1 = new BuildRequestData(null, new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+                BuildRequestData config1 = new BuildRequestData(null, new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             }
            );
         }
@@ -98,22 +98,22 @@ public void TestConstructor2NullProps()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequestData config1 = new BuildRequestData("file", null, "toolsVersion", new string[0], null);
+                BuildRequestData config1 = new BuildRequestData("file", null, "toolsVersion", Array.Empty<string>(), null);
             }
            );
         }
         [Fact]
         public void TestWasGeneratedByNode()
         {
-            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(-1, data1, "2.0");
             Assert.True(config1.WasGeneratedByNode);
 
-            BuildRequestData data2 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data2 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config2 = new BuildRequestConfiguration(1, data2, "2.0");
             Assert.False(config2.WasGeneratedByNode);
 
-            BuildRequestData data3 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data3 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config3 = new BuildRequestConfiguration(data3, "2.0");
             Assert.False(config3.WasGeneratedByNode);
         }
@@ -121,15 +121,15 @@ public void TestWasGeneratedByNode()
         [Fact]
         public void TestDefaultConfigurationId()
         {
-            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(-1, data1, "2.0");
             Assert.Equal(-1, config1.ConfigurationId);
 
-            BuildRequestData data2 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data2 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config2 = new BuildRequestConfiguration(1, data2, "2.0");
             Assert.Equal(1, config2.ConfigurationId);
 
-            BuildRequestData data3 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data3 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config3 = new BuildRequestConfiguration(0, data3, "2.0");
             Assert.Equal(0, config3.ConfigurationId);
         }
@@ -139,7 +139,7 @@ public void TestSetConfigurationIdBad()
         {
             Assert.Throws<InternalErrorException>(() =>
             {
-                BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+                BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
                 BuildRequestConfiguration config1 = new BuildRequestConfiguration(-1, data, "2.0");
                 config1.ConfigurationId = -2;
             }
@@ -148,7 +148,7 @@ public void TestSetConfigurationIdBad()
         [Fact]
         public void TestSetConfigurationIdGood()
         {
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(data, "2.0");
             Assert.Equal(0, config1.ConfigurationId);
             config1.ConfigurationId = 1;
@@ -158,7 +158,7 @@ public void TestSetConfigurationIdGood()
         [Fact]
         public void TestGetFileName()
         {
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(data, "2.0");
             Assert.Equal(config1.ProjectFullPath, Path.GetFullPath("file"));
         }
@@ -166,7 +166,7 @@ public void TestGetFileName()
         [Fact]
         public void TestGetToolsVersion()
         {
-            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(data1, "2.0");
             Assert.Equal("toolsVersion", config1.ToolsVersion);
         }
@@ -175,7 +175,7 @@ public void TestGetToolsVersion()
         public void TestGetProperties()
         {
             Dictionary<string, string> props = new Dictionary<string, string>();
-            BuildRequestConfiguration config1 = new BuildRequestConfiguration(new BuildRequestData("file", props, "toolsVersion", new string[0], null), "2.0");
+            BuildRequestConfiguration config1 = new BuildRequestConfiguration(new BuildRequestData("file", props, "toolsVersion", Array.Empty<string>(), null), "2.0");
 
             Assert.Equal(props.Count, Helpers.MakeList((IEnumerable<ProjectPropertyInstance>)(config1.GlobalProperties)).Count);
         }
@@ -183,7 +183,7 @@ public void TestGetProperties()
         [Fact]
         public void TestSetProjectGood()
         {
-            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(data1, "2.0");
             Assert.Null(config1.Project);
             Project project = new Project(XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace' />"))));
@@ -196,7 +196,7 @@ public void TestSetProjectGood()
         [Fact]
         public void TestPacketType()
         {
-            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(data1, "2.0");
             Assert.Equal(NodePacketType.BuildRequestConfiguration, config1.Type);
         }
@@ -204,11 +204,11 @@ public void TestPacketType()
         [Fact]
         public void TestGetHashCode()
         {
-            BuildRequestConfiguration config1 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null), "2.0");
-            BuildRequestConfiguration config2 = new BuildRequestConfiguration(new BuildRequestData("File", new Dictionary<string, string>(), "ToolsVersion", new string[0], null), "2.0");
-            BuildRequestConfiguration config3 = new BuildRequestConfiguration(new BuildRequestData("file2", new Dictionary<string, string>(), "toolsVersion", new string[0], null), "2.0");
-            BuildRequestConfiguration config4 = new BuildRequestConfiguration(new BuildRequestData("file2", new Dictionary<string, string>(), "toolsVersion2", new string[0], null), "2.0");
-            BuildRequestConfiguration config5 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion2", new string[0], null), "2.0");
+            BuildRequestConfiguration config1 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null), "2.0");
+            BuildRequestConfiguration config2 = new BuildRequestConfiguration(new BuildRequestData("File", new Dictionary<string, string>(), "ToolsVersion", Array.Empty<string>(), null), "2.0");
+            BuildRequestConfiguration config3 = new BuildRequestConfiguration(new BuildRequestData("file2", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null), "2.0");
+            BuildRequestConfiguration config4 = new BuildRequestConfiguration(new BuildRequestData("file2", new Dictionary<string, string>(), "toolsVersion2", Array.Empty<string>(), null), "2.0");
+            BuildRequestConfiguration config5 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion2", Array.Empty<string>(), null), "2.0");
 
             Assert.Equal(config1.GetHashCode(), config2.GetHashCode());
             Assert.NotEqual(config1.GetHashCode(), config3.GetHashCode());
@@ -219,20 +219,20 @@ public void TestGetHashCode()
         [Fact]
         public void TestEquals()
         {
-            BuildRequestConfiguration config1 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null), "2.0");
+            BuildRequestConfiguration config1 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null), "2.0");
             Assert.Equal(config1, config1);
-            BuildRequestConfiguration config2 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null), "2.0");
+            BuildRequestConfiguration config2 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null), "2.0");
             Assert.Equal(config1, config2);
 
-            BuildRequestConfiguration config3 = new BuildRequestConfiguration(new BuildRequestData("file2", new Dictionary<string, string>(), "toolsVersion", new string[0], null), "2.0");
+            BuildRequestConfiguration config3 = new BuildRequestConfiguration(new BuildRequestData("file2", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null), "2.0");
             Assert.NotEqual(config1, config3);
 
-            BuildRequestConfiguration config4 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion2", new string[0], null), "2.0");
+            BuildRequestConfiguration config4 = new BuildRequestConfiguration(new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion2", Array.Empty<string>(), null), "2.0");
             Assert.NotEqual(config1, config4);
 
             PropertyDictionary<ProjectPropertyInstance> props = new PropertyDictionary<ProjectPropertyInstance>();
             props.Set(ProjectPropertyInstance.Create("prop1", "value1"));
-            BuildRequestData data = new BuildRequestData("file", props.ToDictionary(), "toolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", props.ToDictionary(), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config5 = new BuildRequestConfiguration(data, "2.0");
             Assert.NotEqual(config1, config5);
 
@@ -247,7 +247,7 @@ public void TestTranslation()
             properties.Set(ProjectPropertyInstance.Create("this", "that"));
             properties.Set(ProjectPropertyInstance.Create("foo", "bar"));
 
-            BuildRequestData data = new BuildRequestData("file", properties.ToDictionary(), "4.0", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", properties.ToDictionary(), "4.0", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(data, "2.0");
 
             Assert.Equal(NodePacketType.BuildRequestConfiguration, config.Type);
@@ -288,7 +288,7 @@ public void TestTranslationWithEntireProjectState()
 
             instance.TranslateEntireState = true;
 
-            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, new string[] { }, null), "2.0");
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, Array.Empty<string>(), null), "2.0");
             configuration.ConfigurationId = 1;
 
             ((ITranslatable)configuration).Translate(TranslationHelpers.GetWriteTranslator());
@@ -308,7 +308,7 @@ public void TestTranslationWithEntireProjectState()
         [Fact]
         public void TestProperties()
         {
-            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData("path", new Dictionary<string, string>(), "2.0", new string[] { }, null), "2.0");
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData("path", new Dictionary<string, string>(), "2.0", Array.Empty<string>(), null), "2.0");
             Assert.True(configuration.IsCacheable);
             Assert.False(configuration.IsLoaded);
             Assert.False(configuration.IsCached);
@@ -361,7 +361,7 @@ public void TestCache()
                 new ProjectCollection());
             project.FullPath = "foo";
             ProjectInstance instance = project.CreateProjectInstance();
-            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, new string[] { }, null), "2.0");
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, Array.Empty<string>(), null), "2.0");
             configuration.ConfigurationId = 1;
 
             string originalValue = Environment.GetEnvironmentVariable("MSBUILDCACHE");
@@ -462,7 +462,7 @@ public void TestCache2()
             Project project = new Project(XmlReader.Create(new StringReader(projectBody)), globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, new ProjectCollection());
             project.FullPath = "foo";
             ProjectInstance instance = project.CreateProjectInstance();
-            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, new string[] { }, null), "2.0");
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, Array.Empty<string>(), null), "2.0");
 
             string originalTmp = Environment.GetEnvironmentVariable("TMP");
             string originalTemp = Environment.GetEnvironmentVariable("TEMP");
@@ -562,7 +562,7 @@ private void TestSkipIsolationConstraints(string glob, string referencePath, boo
 
             var projectInstance = project.CreateProjectInstance();
 
-            var configuration = new BuildRequestConfiguration(new BuildRequestData(projectInstance, new string[] {}), MSBuildConstants.CurrentToolsVersion);
+            var configuration = new BuildRequestConfiguration(new BuildRequestData(projectInstance, Array.Empty<string>()), MSBuildConstants.CurrentToolsVersion);
 
             if (referencePath.Contains("$"))
             {
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
index bd2e1172fe5..97a6ee1ea06 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
@@ -331,7 +331,7 @@ private void ConfigureEngine(IBuildRequestEngine engine)
         [Fact]
         public void TestEngineShutdownWhileActive()
         {
-            BuildRequestData data = new BuildRequestData("TestFile", new Dictionary<string, string>(), "TestToolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("TestFile", new Dictionary<string, string>(), "TestToolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             _cache.AddConfiguration(config);
 
@@ -359,7 +359,7 @@ public void TestEngineShutdownWhileActive()
         [Fact]
         public void TestSimpleBuildScenario()
         {
-            BuildRequestData data = new BuildRequestData("TestFile", new Dictionary<string, string>(), "TestToolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("TestFile", new Dictionary<string, string>(), "TestToolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             _cache.AddConfiguration(config);
 
@@ -386,7 +386,7 @@ public void TestSimpleBuildScenario()
         [Fact]
         public void TestBuildWithChildren()
         {
-            BuildRequestData data = new BuildRequestData("TestFile", new Dictionary<string, string>(), "TestToolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("TestFile", new Dictionary<string, string>(), "TestToolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             _cache.AddConfiguration(config);
 
@@ -439,13 +439,13 @@ public void TestBuildWithChildren()
         [Fact]
         public void TestBuildWithNewConfiguration()
         {
-            BuildRequestData data = new BuildRequestData(Path.GetFullPath("TestFile"), new Dictionary<string, string>(), "TestToolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData(Path.GetFullPath("TestFile"), new Dictionary<string, string>(), "TestToolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             _cache.AddConfiguration(config);
 
             // Configure the builder to spawn build requests
             MockRequestBuilder builder = (MockRequestBuilder)_host.GetComponent(BuildComponentType.RequestBuilder);
-            BuildRequestData data2 = new BuildRequestData(Path.GetFullPath("OtherFile"), new Dictionary<string, string>(), "TestToolsVersion", new string[0], null);
+            BuildRequestData data2 = new BuildRequestData(Path.GetFullPath("OtherFile"), new Dictionary<string, string>(), "TestToolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration unresolvedConfig = new BuildRequestConfiguration(data2, "2.0");
             builder.NewRequests.Add(new FullyQualifiedBuildRequest[1] { new FullyQualifiedBuildRequest(unresolvedConfig, new string[1] { "requiredTarget1" }, true) });
 
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs
index 00e27aeca13..e241380a2b6 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestEntry_Tests.cs
@@ -20,8 +20,8 @@ public class BuildRequestEntry_Tests
         [Fact]
         public void TestConstructorGood()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0] { });
-            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
+            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
 
@@ -43,7 +43,7 @@ public void TestSimpleStateProgression()
         {
             // Start in Ready
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
             Assert.Equal(BuildRequestEntryState.Ready, entry.State);
             Assert.Equal(entry.Request, request);
@@ -91,7 +91,7 @@ public void TestSimpleStateProgression()
         public void TestResolveConfiguration()
         {
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
 
@@ -113,7 +113,7 @@ public void TestResolveConfiguration()
         public void TestMultipleWaitingRequests()
         {
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
 
@@ -143,7 +143,7 @@ public void TestMultipleWaitingRequests()
         public void TestMixedWaitingRequests()
         {
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
             Assert.Equal(BuildRequestEntryState.Ready, entry.State);
 
@@ -180,7 +180,7 @@ public void TestNoReadyToWaiting()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null);
+                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
                 BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
                 BuildRequestEntry entry = new BuildRequestEntry(request, config);
                 Assert.Equal(BuildRequestEntryState.Ready, entry.State);
@@ -197,7 +197,7 @@ public void TestNoReadyToComplete()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null);
+                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
                 BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
                 BuildRequestEntry entry = new BuildRequestEntry(request, config);
                 Assert.Equal(BuildRequestEntryState.Ready, entry.State);
@@ -215,7 +215,7 @@ public void TestNoWaitingToComplete()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null);
+                BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null);
                 BuildRequestConfiguration config = new BuildRequestConfiguration(1, data1, "2.0");
                 BuildRequestEntry entry = new BuildRequestEntry(request, config);
                 Assert.Equal(BuildRequestEntryState.Ready, entry.State);
@@ -240,7 +240,7 @@ public void TestNoCompleteToWaiting()
             Assert.Throws<InternalErrorException>(() =>
             {
                 BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
                 BuildRequestEntry entry = new BuildRequestEntry(request, config);
                 Assert.Equal(BuildRequestEntryState.Ready, entry.State);
 
@@ -261,7 +261,7 @@ public void TestNoCompleteToWaiting()
         public void TestResultsWithNoMatch1()
         {
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "foo" });
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
             BuildRequestEntry entry = new BuildRequestEntry(request, config);
             Assert.Equal(BuildRequestEntryState.Ready, entry.State);
 
@@ -272,7 +272,7 @@ public void TestResultsWithNoMatch1()
             entry.WaitForResult(waitingRequest1);
             Assert.Equal(BuildRequestEntryState.Waiting, entry.State);
 
-            BuildRequest randomRequest = CreateNewBuildRequest(3, new string[0]);
+            BuildRequest randomRequest = CreateNewBuildRequest(3, Array.Empty<string>());
             BuildResult requiredResult = new BuildResult(randomRequest);
             requiredResult.AddResultsForTarget("bar", BuildResultUtilities.GetEmptySucceedingTargetResult());
             entry.ReportResult(requiredResult);
diff --git a/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
index 9cede0f7298..7fcd1e1f609 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequest_Tests.cs
@@ -32,39 +32,39 @@ public void TestConstructorBad()
         [Fact]
         public void TestConstructorGood()
         {
-            CreateNewBuildRequest(0, new string[0] { });
+            CreateNewBuildRequest(0, Array.Empty<string>() );
         }
 
         [Fact]
         public void TestConfigurationId()
         {
-            BuildRequest request = CreateNewBuildRequest(0, new string[0] { });
+            BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
             Assert.Equal(0, request.ConfigurationId);
 
-            BuildRequest request2 = CreateNewBuildRequest(1, new string[0] { });
+            BuildRequest request2 = CreateNewBuildRequest(1, Array.Empty<string>());
             Assert.Equal(1, request2.ConfigurationId);
 
-            BuildRequest request3 = CreateNewBuildRequest(-1, new string[0] { });
+            BuildRequest request3 = CreateNewBuildRequest(-1, Array.Empty<string>());
             Assert.Equal(-1, request3.ConfigurationId);
         }
 
         [Fact]
         public void TestConfigurationResolved()
         {
-            BuildRequest request = CreateNewBuildRequest(0, new string[0] { });
+            BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
             Assert.False(request.IsConfigurationResolved);
 
-            BuildRequest request2 = CreateNewBuildRequest(1, new string[0] { });
+            BuildRequest request2 = CreateNewBuildRequest(1, Array.Empty<string>());
             Assert.True(request2.IsConfigurationResolved);
 
-            BuildRequest request3 = CreateNewBuildRequest(-1, new string[0] { });
+            BuildRequest request3 = CreateNewBuildRequest(-1, Array.Empty<string>());
             Assert.False(request3.IsConfigurationResolved);
         }
 
         [Fact]
         public void TestTargets()
         {
-            BuildRequest request = CreateNewBuildRequest(0, new string[0] { });
+            BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
             Assert.NotNull(request.Targets);
             Assert.Empty(request.Targets);
 
@@ -77,14 +77,14 @@ public void TestTargets()
         [Fact]
         public void TestPacketType()
         {
-            BuildRequest request = CreateNewBuildRequest(0, new string[0] { });
+            BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
             Assert.Equal(NodePacketType.BuildRequest, request.Type);
         }
 
         [Fact]
         public void TestResolveConfigurationGood()
         {
-            BuildRequest request = CreateNewBuildRequest(0, new string[0] { });
+            BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
             request.ResolveConfiguration(1);
             Assert.True(request.IsConfigurationResolved);
             Assert.Equal(1, request.ConfigurationId);
@@ -95,7 +95,7 @@ public void TestResolveConfigurationBad()
         {
             Assert.Throws<InternalErrorException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0] { });
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 request.ResolveConfiguration(2);
             }
            );
@@ -106,7 +106,7 @@ public void TestResolveConfigurationBad2()
         {
             Assert.Throws<InternalErrorException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(0, new string[0] { });
+                BuildRequest request = CreateNewBuildRequest(0, Array.Empty<string>());
                 request.ResolveConfiguration(-1);
             }
            );
diff --git a/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs b/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
index e46a84eb0e4..69e04708733 100644
--- a/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildResult_Tests.cs
@@ -28,14 +28,14 @@ public BuildResult_Tests()
         [Fact]
         public void TestConstructorGood()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result2 = new BuildResult(request);
         }
 
         [Fact]
         public void Clone()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result1 = new BuildResult(request);
             result1.ResultsByTarget.Add("FOO", BuildResultUtilities.GetEmptySucceedingTargetResult());
             Assert.True(result1.ResultsByTarget.ContainsKey("foo")); // test comparer
@@ -68,11 +68,11 @@ public void TestConstructorBad()
         [Fact]
         public void TestConfigurationId()
         {
-            BuildRequest request = CreateNewBuildRequest(-1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(-1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             Assert.Equal(-1, result.ConfigurationId);
 
-            BuildRequest request2 = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request2 = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result2 = new BuildResult(request2);
             Assert.Equal(1, result2.ConfigurationId);
         }
@@ -80,7 +80,7 @@ public void TestConfigurationId()
         [Fact]
         public void TestExceptionGood()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             Assert.Null(result.Exception);
             AccessViolationException e = new AccessViolationException();
@@ -92,20 +92,20 @@ public void TestExceptionGood()
         [Fact]
         public void TestOverallResult()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
 
             result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
 
-            result.AddResultsForTarget("bar", new TargetResult(new TaskItem[0] { }, new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, new Exception())));
+            result.AddResultsForTarget("bar", new TargetResult(Array.Empty<TaskItem>(), new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, new Exception())));
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
 
-            result.AddResultsForTarget("baz", new TargetResult(new TaskItem[0] { }, BuildResultUtilities.GetStopWithErrorResult(new Exception())));
+            result.AddResultsForTarget("baz", new TargetResult(Array.Empty<TaskItem>(), BuildResultUtilities.GetStopWithErrorResult(new Exception())));
             Assert.Equal(BuildResultCode.Failure, result.OverallResult);
 
-            BuildRequest request2 = CreateNewBuildRequest(2, new string[0]);
+            BuildRequest request2 = CreateNewBuildRequest(2, Array.Empty<string>());
             BuildResult result2 = new BuildResult(request2);
             result2.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
             result2.AddResultsForTarget("bar", BuildResultUtilities.GetEmptyFailingTargetResult());
@@ -115,7 +115,7 @@ public void TestOverallResult()
         [Fact]
         public void TestPacketType()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             Assert.Equal(NodePacketType.BuildResult, ((INodePacket)result).Type);
         }
@@ -123,7 +123,7 @@ public void TestPacketType()
         [Fact]
         public void TestAddAndRetrieve()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
             result.AddResultsForTarget("bar", BuildResultUtilities.GetEmptyFailingTargetResult());
@@ -137,7 +137,7 @@ public void TestIndexerBad1()
         {
             Assert.Throws<KeyNotFoundException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 ITargetResult targetResult = result["foo"];
             }
@@ -149,7 +149,7 @@ public void TestIndexerBad2()
         {
             Assert.Throws<KeyNotFoundException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
                 ITargetResult targetResult = result["bar"];
@@ -162,7 +162,7 @@ public void TestAddResultsInvalid1()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget(null, BuildResultUtilities.GetEmptySucceedingTargetResult());
             }
@@ -174,7 +174,7 @@ public void TestAddResultsInvalid2()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget("foo", null);
             }
@@ -186,7 +186,7 @@ public void TestAddResultsInvalid3()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget(null, BuildResultUtilities.GetEmptySucceedingTargetResult());
             }
@@ -195,7 +195,7 @@ public void TestAddResultsInvalid3()
         [Fact]
         public void TestMergeResults()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
@@ -222,7 +222,7 @@ public void TestMergeResultsBad1()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
@@ -236,11 +236,11 @@ public void TestMergeResultsBad3()
         {
             Assert.Throws<InternalErrorException>(() =>
             {
-                BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+                BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
                 BuildResult result = new BuildResult(request);
                 result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
-                BuildRequest request2 = CreateNewBuildRequest(2, new string[0]);
+                BuildRequest request2 = CreateNewBuildRequest(2, Array.Empty<string>());
                 BuildResult result2 = new BuildResult(request2);
                 result2.AddResultsForTarget("bar", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
@@ -251,7 +251,7 @@ public void TestMergeResultsBad3()
         [Fact]
         public void TestHasResultsForTarget()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             result.AddResultsForTarget("foo", BuildResultUtilities.GetEmptySucceedingTargetResult());
 
@@ -262,7 +262,7 @@ public void TestHasResultsForTarget()
         [Fact]
         public void TestEnumerator()
         {
-            BuildRequest request = CreateNewBuildRequest(1, new string[0]);
+            BuildRequest request = CreateNewBuildRequest(1, Array.Empty<string>());
             BuildResult result = new BuildResult(request);
             int countFound = 0;
             foreach (KeyValuePair<string, TargetResult> resultPair in result.ResultsByTarget)
@@ -322,7 +322,7 @@ public void TestTranslation()
             result.DefaultTargets = new List<string> { "c", "d" };
 
             result.AddResultsForTarget("alpha", new TargetResult(new TaskItem[] { fooTaskItem }, BuildResultUtilities.GetSuccessResult()));
-            result.AddResultsForTarget("omega", new TargetResult(new TaskItem[] { }, BuildResultUtilities.GetStopWithErrorResult(new ArgumentException("The argument was invalid"))));
+            result.AddResultsForTarget("omega", new TargetResult(Array.Empty<TaskItem>(), BuildResultUtilities.GetStopWithErrorResult(new ArgumentException("The argument was invalid"))));
 
             Assert.Equal(NodePacketType.BuildResult, (result as INodePacket).Type);
             ((ITranslatable)result).Translate(TranslationHelpers.GetWriteTranslator());
diff --git a/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs b/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
index 6448a80ee70..67a47a52ec3 100644
--- a/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
@@ -59,7 +59,7 @@ public void TestConstructorNullProject()
         [Fact]
         public void TestValidConfiguration()
         {
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, "2.0");
             ConfigurationMetadata metadata = new ConfigurationMetadata(config);
             Assert.Equal(data.ProjectFullPath, metadata.ProjectFullPath);
@@ -85,7 +85,7 @@ public void TestValidProject()
         [Fact]
         public void TestGetHashCode()
         {
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, ObjectModelHelpers.MSBuildDefaultToolsVersion);
 
             Project project = CreateProject();
@@ -101,7 +101,7 @@ public void TestGetHashCode()
         [Fact]
         public void TestEquals()
         {
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, data, ObjectModelHelpers.MSBuildDefaultToolsVersion);
 
             Project project = CreateProject();
@@ -110,12 +110,12 @@ public void TestEquals()
             ConfigurationMetadata metadata2 = new ConfigurationMetadata(project);
             Assert.True(metadata1.Equals(metadata2));
 
-            data = new BuildRequestData("file2", new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, new string[0], null);
+            data = new BuildRequestData("file2", new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
             BuildRequestConfiguration config2 = new BuildRequestConfiguration(1, data, ObjectModelHelpers.MSBuildDefaultToolsVersion);
             ConfigurationMetadata metadata3 = new ConfigurationMetadata(config2);
             Assert.False(metadata1.Equals(metadata3));
 
-            data = new BuildRequestData("file", new Dictionary<string, string>(), "3.0", new string[0], null);
+            data = new BuildRequestData("file", new Dictionary<string, string>(), "3.0", Array.Empty<string>(), null);
             BuildRequestConfiguration config3 = new BuildRequestConfiguration(1, data, "3.0");
             ConfigurationMetadata metadata4 = new ConfigurationMetadata(config3);
             Assert.False(metadata1.Equals(metadata4));
diff --git a/src/Build.UnitTests/BackEnd/FullyQualifiedBuildRequest_Tests.cs b/src/Build.UnitTests/BackEnd/FullyQualifiedBuildRequest_Tests.cs
index 4901c0fe91b..2381c054839 100644
--- a/src/Build.UnitTests/BackEnd/FullyQualifiedBuildRequest_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/FullyQualifiedBuildRequest_Tests.cs
@@ -14,13 +14,13 @@ public class FullyQualifiedBuildRequest_Tests
         [Fact]
         public void TestConstructorGood()
         {
-            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "tools", new string[0], null);
+            BuildRequestData data1 = new BuildRequestData("foo", new Dictionary<string, string>(), "tools", Array.Empty<string>(), null);
             FullyQualifiedBuildRequest request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(data1, "2.0"), new string[1] { "foo" }, true);
 
-            request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(data1, "2.0"), new string[0] { }, true);
+            request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(data1, "2.0"), Array.Empty<string>(), true);
 
-            BuildRequestData data3 = new BuildRequestData("foo", new Dictionary<string, string>(), "tools", new string[0], null);
-            request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(data1, "2.0"), new string[0] { }, false);
+            BuildRequestData data3 = new BuildRequestData("foo", new Dictionary<string, string>(), "tools", Array.Empty<string>(), null);
+            request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(data1, "2.0"), Array.Empty<string>(), false);
         }
 
         [Fact]
@@ -38,14 +38,14 @@ public void TestConstructorBad2()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                FullyQualifiedBuildRequest request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(new BuildRequestData("foo", new Dictionary<string, string>(), "tools", new string[0], null), "2.0"), null, true);
+                FullyQualifiedBuildRequest request = new FullyQualifiedBuildRequest(new BuildRequestConfiguration(new BuildRequestData("foo", new Dictionary<string, string>(), "tools", Array.Empty<string>(), null), "2.0"), null, true);
             }
            );
         }
         [Fact]
         public void TestProperties()
         {
-            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "tools", new string[0], null);
+            BuildRequestData data = new BuildRequestData("foo", new Dictionary<string, string>(), "tools", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(data, "2.0");
             FullyQualifiedBuildRequest request = new FullyQualifiedBuildRequest(config, new string[1] { "foo" }, true);
             Assert.Equal(request.Config, config);
@@ -54,4 +54,4 @@ public void TestProperties()
             Assert.True(request.ResultsNeeded);
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
index a52b53f97f5..595f80a5d89 100644
--- a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
@@ -3879,7 +3879,7 @@ private static IntrinsicTask CreateIntrinsicTask(string content)
             ProjectTargetInstanceChild targetChild = projectInstance.Targets["t"].Children.First();
 
             NodeLoggingContext nodeContext = new NodeLoggingContext(new MockLoggingService(), 1, false);
-            BuildRequestEntry entry = new BuildRequestEntry(new BuildRequest(1 /* submissionId */, 0, 1, new string[] { "t" }, null, BuildEventContext.Invalid, null), new BuildRequestConfiguration(1, new BuildRequestData("projectFile", new Dictionary<string, string>(), "3.5", new string[0], null), "2.0"));
+            BuildRequestEntry entry = new BuildRequestEntry(new BuildRequest(1 /* submissionId */, 0, 1, new string[] { "t" }, null, BuildEventContext.Invalid, null), new BuildRequestConfiguration(1, new BuildRequestData("projectFile", new Dictionary<string, string>(), "3.5", Array.Empty<string>(), null), "2.0"));
             entry.RequestConfiguration.Project = projectInstance;
             IntrinsicTask task = IntrinsicTask.InstantiateTask(
                 targetChild,
@@ -3914,7 +3914,7 @@ internal static void AssertItemEvaluationFromTarget(string projectContents, stri
                     var targetChild = projectInstance.Targets["t"].Children.First();
 
                     var nodeContext = new NodeLoggingContext(new MockLoggingService(), 1, false);
-                    var entry = new BuildRequestEntry(new BuildRequest(1 /* submissionId */, 0, 1, new string[] { targetName }, null, BuildEventContext.Invalid, null), new BuildRequestConfiguration(1, new BuildRequestData("projectFile", new Dictionary<string, string>(), "3.5", new string[0], null), "2.0"));
+                    var entry = new BuildRequestEntry(new BuildRequest(1 /* submissionId */, 0, 1, new string[] { targetName }, null, BuildEventContext.Invalid, null), new BuildRequestConfiguration(1, new BuildRequestData("projectFile", new Dictionary<string, string>(), "3.5", Array.Empty<string>(), null), "2.0"));
                     entry.RequestConfiguration.Project = projectInstance;
                     var task = IntrinsicTask.InstantiateTask(
                         targetChild,
diff --git a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
index ebbec93cd53..53ac71c8f9c 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
@@ -860,7 +860,7 @@ public void ProjectStartedEventTests(string projectFile, string targetNames)
             ProcessBuildEventHelper service = (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1, componentHost);
             ConfigCache cache = (ConfigCache)componentHost.GetComponent(BuildComponentType.ConfigCache);
 
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(2, data, "4.0");
             cache.AddConfiguration(config);
 
@@ -1442,7 +1442,7 @@ private void TestProjectFinishedEvent(string projectFile, bool success)
 
             ConfigCache cache = (ConfigCache)componentHost.GetComponent(BuildComponentType.ConfigCache);
 
-            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", new string[0], null);
+            BuildRequestData data = new BuildRequestData("file", new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(2, data, "4.0");
             cache.AddConfiguration(config);
 
diff --git a/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
index 42ceffcef27..55c480d184f 100644
--- a/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/RequestBuilder_Tests.cs
@@ -221,7 +221,7 @@ public void TestMissingProjectFile()
         {
             TestTargetBuilder targetBuilder = (TestTargetBuilder)_host.GetComponent(BuildComponentType.TargetBuilder);
             IConfigCache configCache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestConfiguration configuration = new BuildRequestConfiguration(1, new BuildRequestData("testName", new Dictionary<string, string>(), "3.5", new string[0], null), "2.0");
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(1, new BuildRequestData("testName", new Dictionary<string, string>(), "3.5", Array.Empty<string>(), null), "2.0");
             configCache.AddConfiguration(configuration);
 
             BuildRequest request = CreateNewBuildRequest(1, new string[1] { "target1" });
@@ -266,7 +266,7 @@ private BuildRequestConfiguration CreateTestProject(int configId)
                     projectFile,
                     new Dictionary<string, string>(),
                     ObjectModelHelpers.MSBuildDefaultToolsVersion,
-                    new string[0],
+                    Array.Empty<string>(),
                     null),
                 defaultToolsVersion);
             return config;
@@ -318,7 +318,7 @@ private BuildRequest CreateNewBuildRequest(int configurationId, string[] targets
 
         private TargetResult GetEmptySuccessfulTargetResult()
         {
-            return new TargetResult(new TaskItem[0] { }, new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null));
+            return new TargetResult(Array.Empty<TaskItem>(), new WorkUnitResult(WorkUnitResultCode.Success, WorkUnitActionCode.Continue, null));
         }
 
         private void WaitForEvent(WaitHandle evt, string eventName)
diff --git a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
index 7386b34a91f..dd7b684ff6a 100644
--- a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
@@ -70,11 +70,11 @@ public Scheduler_Tests()
             _scheduler = new Scheduler();
             _scheduler.InitializeComponent(_host);
             CreateConfiguration(99, "parent.proj");
-            _defaultParentRequest = CreateBuildRequest(99, 99, new string[] { }, null);
+            _defaultParentRequest = CreateBuildRequest(99, 99, Array.Empty<string>(), null);
 
             // Set up the scheduler with one node to start with.
             _scheduler.ReportNodesCreated(new NodeInfo[] { new NodeInfo(1, NodeProviderType.InProc) });
-            _scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, new string[] { }, new BuildRequest[] { _defaultParentRequest }));
+            _scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, Array.Empty<string>(), new BuildRequest[] { _defaultParentRequest }));
 
             _logger = new MockLogger();
             _parameters = new BuildParameters();
@@ -105,7 +105,7 @@ public void TestSimpleRequest()
         {
             CreateConfiguration(1, "foo.proj");
             BuildRequest request = CreateBuildRequest(1, 1);
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Single(response);
@@ -123,7 +123,7 @@ public void TestSimpleRequestWithCachedResultsSuccess()
             BuildRequest request = CreateBuildRequest(1, 1, new string[] { "foo" });
             BuildResult result = CacheBuildResult(request, "foo", BuildResultUtilities.GetSuccessResult());
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -147,7 +147,7 @@ public void TestSimpleRequestWithCachedResultsFail()
             BuildRequest request = CreateBuildRequest(1, 1, new string[] { "foo" });
             BuildResult result = CacheBuildResult(request, "foo", BuildResultUtilities.GetStopWithErrorResult());
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -170,7 +170,7 @@ public void TestChildRequest()
             CreateConfiguration(1, "foo.proj");
             BuildRequest request = CreateBuildRequest(1, 1, new string[] { "foo" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(-1, new string[] { }, new BuildRequest[] { request });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(-1, Array.Empty<string>(), new BuildRequest[] { request });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             CreateConfiguration(2, "bar.proj");
@@ -201,7 +201,7 @@ public void TestMultipleRequests()
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" });
             BuildRequest request2 = CreateBuildRequest(2, 1, new string[] { "bar" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Single(response);
@@ -221,7 +221,7 @@ public void TestMultipleRequestsWithSomeResults()
             BuildRequest request2 = CreateBuildRequest(2, 2, new string[] { "bar" });
             BuildResult result2 = CacheBuildResult(request2, "bar", BuildResultUtilities.GetSuccessResult());
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -244,7 +244,7 @@ public void TestMultipleRequestsWithAllResults()
             BuildRequest request2 = CreateBuildRequest(2, 2, new string[] { "bar" });
             BuildResult result2 = CacheBuildResult(request2, "bar", BuildResultUtilities.GetSuccessResult());
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(3, response.Count);
@@ -272,7 +272,7 @@ public void TestOutOfProcNodeCreatedWhenAffinityIsOutOfProc()
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" }, NodeAffinity.OutOfProc, _defaultParentRequest);
             BuildRequest request2 = CreateBuildRequest(2, 1, new string[] { "bar" }, NodeAffinity.OutOfProc, _defaultParentRequest);
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             // Parent request is blocked by the fact that both child requests require the out-of-proc node that doesn't
@@ -296,7 +296,7 @@ public void TestOutOfProcNodesCreatedWhenAffinityIsOutOfProc()
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" }, NodeAffinity.OutOfProc, _defaultParentRequest);
             BuildRequest request2 = CreateBuildRequest(2, 1, new string[] { "bar" }, NodeAffinity.OutOfProc, _defaultParentRequest);
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             // Parent request is blocked by the fact that both child requests require the out-of-proc node that doesn't
@@ -323,7 +323,7 @@ public void TestNoNewNodesCreatedForMultipleRequestsWithSameConfiguration()
             BuildRequest request3 = CreateBuildRequest(3, 1, new string[] { "baz" });
             BuildRequest request4 = CreateBuildRequest(4, 1, new string[] { "qux" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2, request3, request4 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2, request3, request4 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Single(response);
@@ -349,7 +349,7 @@ public void TestMaxNodeCountNotExceededWithRequestsOfAffinityAny()
             BuildRequest request3 = CreateBuildRequest(3, 3, new string[] { "baz" });
             BuildRequest request4 = CreateBuildRequest(4, 4, new string[] { "qux" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2, request3, request4 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2, request3, request4 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -386,14 +386,14 @@ public void VerifyRequestOrderingDoesNotAffectNodeCreationCountWithInProcAndAnyR
             _buildManager = new BuildManager();
 
             CreateConfiguration(99, "parent.proj");
-            _defaultParentRequest = CreateBuildRequest(99, 99, new string[] { }, null);
+            _defaultParentRequest = CreateBuildRequest(99, 99, Array.Empty<string>(), null);
 
             CreateConfiguration(1, "foo.proj");
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" }, NodeAffinity.Any, _defaultParentRequest);
             BuildRequest request2 = CreateBuildRequest(2, 1, new string[] { "bar" }, NodeAffinity.InProc, _defaultParentRequest);
             BuildRequest request3 = CreateBuildRequest(3, 1, new string[] { "bar" }, NodeAffinity.InProc, _defaultParentRequest);
 
-            List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, new string[] { }, new BuildRequest[] { _defaultParentRequest, request1, request2, request3 })));
+            List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, Array.Empty<string>(), new BuildRequest[] { _defaultParentRequest, request1, request2, request3 })));
             Assert.Single(response);
             Assert.Equal(ScheduleActionType.CreateNode, response[0].Action);
             Assert.Equal(NodeAffinity.InProc, response[0].RequiredNodeType);
@@ -427,7 +427,7 @@ public void TestMaxNodeCountOOPNodesCreatedForOOPAffinitizedRequests()
             BuildRequest request3 = CreateBuildRequest(3, 3, new string[] { "baz" }, NodeAffinity.OutOfProc, _defaultParentRequest);
             BuildRequest request4 = CreateBuildRequest(4, 4, new string[] { "qux" }, NodeAffinity.OutOfProc, _defaultParentRequest);
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2, request3, request4 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2, request3, request4 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             // Parent request is blocked by the fact that both child requests require the out-of-proc node that doesn't
@@ -457,7 +457,7 @@ public void TestMaxNodeCountNodesNotExceededWithSomeOOPRequests1()
             BuildRequest request3 = CreateBuildRequest(3, 3, new string[] { "baz" });
             BuildRequest request4 = CreateBuildRequest(4, 4, new string[] { "qux" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2, request3, request4 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2, request3, request4 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -487,7 +487,7 @@ public void TestMaxNodeCountNodesNotExceededWithSomeOOPRequests2()
             BuildRequest request3 = CreateBuildRequest(3, 3, new string[] { "baz" });
             BuildRequest request4 = CreateBuildRequest(4, 4, new string[] { "qux" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2, request3, request4 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2, request3, request4 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -520,7 +520,7 @@ public void TestTraversalAffinityIsInProc()
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" }, _defaultParentRequest);
             BuildRequest request2 = CreateBuildRequest(2, 2, new string[] { "bar" }, _defaultParentRequest);
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             // There will be no request to create a new node, because both of the above requests are traversals,
@@ -544,7 +544,7 @@ public void TestProxyAffinityIsInProc()
 
             BuildRequest request1 = CreateProxyBuildRequest(1, 1, new ProxyTargets(new Dictionary<string, string> {{"foo", "bar"}}), null);
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(-1, new string[] { }, new[] { request1 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(-1, Array.Empty<string>(), new[] { request1 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             // There will be no request to create a new node, because both of the above requests are proxy build requests,
@@ -578,7 +578,7 @@ public void VerifyNoOverCreationOfNodesWithBuildLoop()
             _buildManager = new BuildManager();
 
             CreateConfiguration(99, "parent.proj");
-            _defaultParentRequest = CreateBuildRequest(99, 99, new string[] { }, null);
+            _defaultParentRequest = CreateBuildRequest(99, 99, Array.Empty<string>(), null);
 
             CreateConfiguration(1, "foo.proj");
             BuildRequest request1 = CreateBuildRequest(1, 1, new string[] { "foo" }, NodeAffinity.OutOfProc, _defaultParentRequest);
@@ -587,7 +587,7 @@ public void VerifyNoOverCreationOfNodesWithBuildLoop()
             CreateConfiguration(3, "foo3.proj");
             BuildRequest request3 = CreateBuildRequest(3, 3, new string[] { "bar" }, NodeAffinity.InProc, _defaultParentRequest);
 
-            List<ScheduleResponse> responses = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, new string[] { }, new BuildRequest[] { _defaultParentRequest, request1, request2, request3 })));
+            List<ScheduleResponse> responses = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, new BuildRequestBlocker(-1, Array.Empty<string>(), new BuildRequest[] { _defaultParentRequest, request1, request2, request3 })));
 
             int nextNodeId = 1;
             bool inProcNodeExists = false;
@@ -606,7 +606,7 @@ public void TestTwoRequestsWithFirstFailure()
             BuildResult result1 = CacheBuildResult(request1, "foo", BuildResultUtilities.GetStopWithErrorResult());
             BuildRequest request2 = CreateBuildRequest(2, 1, new string[] { "bar" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -625,7 +625,7 @@ public void TestTwoRequestsWithSecondFailure()
             BuildRequest request2 = CreateBuildRequest(2, 1, new string[] { "bar" });
             BuildResult result2 = CacheBuildResult(request2, "bar", BuildResultUtilities.GetStopWithErrorResult());
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -645,7 +645,7 @@ public void TestThreeRequestsWithOneFailure()
             BuildResult result2 = CacheBuildResult(request2, "bar", BuildResultUtilities.GetStopWithErrorResult());
             BuildRequest request3 = CreateBuildRequest(3, 1, new string[] { "baz" });
 
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request1, request2, request3 });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request1.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request1, request2, request3 });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             Assert.Equal(2, response.Count);
@@ -661,7 +661,7 @@ public void TestResult()
         {
             CreateConfiguration(1, "foo.proj");
             BuildRequest request = CreateBuildRequest(1, 1);
-            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, new string[] { }, new BuildRequest[] { request });
+            BuildRequestBlocker blocker = new BuildRequestBlocker(request.ParentGlobalRequestId, Array.Empty<string>(), new BuildRequest[] { request });
             List<ScheduleResponse> response = new List<ScheduleResponse>(_scheduler.ReportRequestBlocked(1, blocker));
 
             BuildResult result = CreateBuildResult(request, "foo", BuildResultUtilities.GetSuccessResult());
@@ -708,7 +708,7 @@ public void TestDetailedSummary()
         /// </summary>
         private void CreateConfiguration(int configId, string file)
         {
-            BuildRequestData data = new BuildRequestData(file, new Dictionary<string, string>(), "4.0", new string[] { }, null);
+            BuildRequestData data = new BuildRequestData(file, new Dictionary<string, string>(), "4.0", Array.Empty<string>(), null);
             BuildRequestConfiguration config = new BuildRequestConfiguration(configId, data, "4.0");
             config.ProjectInitialTargets = new List<string>();
             config.ProjectDefaultTargets = new List<string>();
@@ -733,7 +733,7 @@ private BuildResult CacheBuildResult(BuildRequest request, string target, WorkUn
         private BuildResult CreateBuildResult(BuildRequest request, string target, WorkUnitResult workUnitResult)
         {
             BuildResult result = new BuildResult(request);
-            result.AddResultsForTarget(target, new TargetResult(new TaskItem[] { }, workUnitResult));
+            result.AddResultsForTarget(target, new TargetResult(Array.Empty<TaskItem>(), workUnitResult));
             return result;
         }
 
@@ -742,7 +742,7 @@ private BuildResult CreateBuildResult(BuildRequest request, string target, WorkU
         /// </summary>
         private BuildRequest CreateBuildRequest(int nodeRequestId, int configId)
         {
-            return CreateBuildRequest(nodeRequestId, configId, new string[] { });
+            return CreateBuildRequest(nodeRequestId, configId, Array.Empty<string>());
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
index 62674749d33..cbf5126c87a 100644
--- a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
@@ -1616,7 +1616,7 @@ private ProjectInstance CreateTestProject(string projectBodyContents, string ini
             }
 
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("testFile", new Dictionary<string, string>(), "3.5", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("testFile", new Dictionary<string, string>(), "3.5", Array.Empty<string>(), null), "2.0");
             Project project = new Project(XmlReader.Create(new StringReader(projectFileContents)));
 
             config.Project = project.CreateProjectInstance();
diff --git a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
index 3446700cae3..c921b0bdcf9 100644
--- a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
@@ -78,7 +78,7 @@ public void TestConstructorNullTarget()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 ProjectInstance project = CreateTestProject(true /* Returns enabled */);
-                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
                 BuildRequestEntry requestEntry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "foo" }), config);
                 Lookup lookup = new Lookup(new ItemDictionary<ProjectItemInstance>(project.Items), new PropertyDictionary<ProjectPropertyInstance>(project.Properties));
                 TargetEntry entry = new TargetEntry(requestEntry, this, null, lookup, null, TargetBuiltReason.None, _host, false);
@@ -94,7 +94,7 @@ public void TestConstructorNullLookup()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 ProjectInstance project = CreateTestProject(true /* Returns enabled */);
-                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
                 BuildRequestEntry requestEntry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "foo" }), config);
                 TargetEntry entry = new TargetEntry(requestEntry, this, new TargetSpecification("Empty", null), null, null, TargetBuiltReason.None, _host, false);
             }
@@ -109,7 +109,7 @@ public void TestConstructorNullHost()
             Assert.Throws<ArgumentNullException>(() =>
             {
                 ProjectInstance project = CreateTestProject(true /* Returns enabled */);
-                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+                BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
                 BuildRequestEntry requestEntry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "foo" }), config);
 
                 Lookup lookup = new Lookup(new ItemDictionary<ProjectItemInstance>(project.Items), new PropertyDictionary<ProjectPropertyInstance>(project.Properties));
@@ -876,7 +876,7 @@ public void AfterTargetsShouldReportFailedBuild()
                     project.FullPath,
                     new Dictionary<string, string>(),
                     ObjectModelHelpers.MSBuildDefaultToolsVersion,
-                    new string[] { },
+                    Array.Empty<string>(),
                     null);
                 manager = new BuildManager();
                 BuildResult result = manager.Build(parameters, data);
@@ -1023,7 +1023,7 @@ private BuildRequest CreateNewBuildRequest(int configurationId, string[] targets
         /// <returns>The new target entry</returns>
         private TargetEntry CreateStandardTargetEntry(ProjectInstance project, string targetName)
         {
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
             config.Project = project;
             BuildRequestEntry requestEntry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[] { "foo" }), config);
 
@@ -1041,7 +1041,7 @@ private TargetEntry CreateStandardTargetEntry(ProjectInstance project, string ta
         /// <returns>The new target entry</returns>
         private TargetEntry CreateStandardTargetEntry(ProjectInstance project, string target, TargetEntry baseEntry)
         {
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("foo", new Dictionary<string, string>(), "foo", Array.Empty<string>(), null), "2.0");
             config.Project = project;
             BuildRequestEntry requestEntry = new BuildRequestEntry(CreateNewBuildRequest(1, new string[1] { "foo" }), config);
             TargetEntry entry = new TargetEntry(requestEntry, this, new TargetSpecification(target, project.Targets[target].Location), baseEntry.Lookup, baseEntry, TargetBuiltReason.None, _host, false);
diff --git a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
index 67950cf5716..4a1f5e95dce 100644
--- a/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetResult_Tests.cs
@@ -23,7 +23,7 @@ public class TargetResult_Tests
         [Fact]
         public void TestConstructorNoItems()
         {
-            TargetResult result = new TargetResult(new TaskItem[] { }, BuildResultUtilities.GetStopWithErrorResult());
+            TargetResult result = new TargetResult(Array.Empty<TaskItem>(), BuildResultUtilities.GetStopWithErrorResult());
             Assert.Empty(result.Items);
             Assert.Null(result.Exception);
             Assert.Equal(TargetResultCode.Failure, result.ResultCode);
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs b/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs
index c0341747d64..9aec67f5edd 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilderTestTask.cs
@@ -270,7 +270,7 @@ public string[] EmptyStringArrayOutput
             get
             {
                 _testTaskHost.OutputRead("EmptyStringArrayOutput", null);
-                return new string[0];
+                return Array.Empty<string>();
             }
         }
 
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
index 7ba76a5b89d..459e11c2e7c 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
@@ -1131,7 +1131,7 @@ private ProjectInstance CreateTestProject()
                 ");
 
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
-            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("testfile", new Dictionary<string, string>(), "3.5", new string[0], null), "2.0");
+            BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("testfile", new Dictionary<string, string>(), "3.5", Array.Empty<string>(), null), "2.0");
             Project project = new Project(XmlReader.Create(new StringReader(projectFileContents)));
             config.Project = project.CreateProjectInstance();
             cache.AddConfiguration(config);
diff --git a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
index 93abec24663..9c55e1d7c20 100644
--- a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
@@ -897,7 +897,7 @@ public void TestOutputItemArrayToProperty()
         public void TestEmptyStringInStringArrayParameterIntoItemList()
         {
             SetTaskParameter("StringArrayParam", "");
-            ValidateOutputItems("StringArrayOutput", new ITaskItem[] { });
+            ValidateOutputItems("StringArrayOutput", Array.Empty<ITaskItem>());
         }
 
         /// <summary>
@@ -908,7 +908,7 @@ public void TestEmptyStringInStringArrayParameterIntoItemList()
         public void TestEmptyStringParameterIntoItemList()
         {
             SetTaskParameter("StringParam", "");
-            ValidateOutputItems("StringOutput", new ITaskItem[] { });
+            ValidateOutputItems("StringOutput", Array.Empty<ITaskItem>());
         }
 
         /// <summary>
@@ -917,7 +917,7 @@ public void TestEmptyStringParameterIntoItemList()
         [Fact]
         public void TestNullITaskItemArrayParameter()
         {
-            ValidateOutputItems("ItemArrayNullOutput", new ITaskItem[] { });
+            ValidateOutputItems("ItemArrayNullOutput", Array.Empty<ITaskItem>());
         }
 
         /// <summary>
@@ -928,7 +928,7 @@ public void TestArrayListParameter()
         {
             Assert.Throws<InvalidProjectFileException>(() =>
             {
-                ValidateOutputItems("ArrayListOutput", new ITaskItem[] { });
+                ValidateOutputItems("ArrayListOutput", Array.Empty<ITaskItem>());
             }
            );
         }
@@ -1203,7 +1203,7 @@ private void InitializeHost(bool throwOnExecute)
             itemsByName.Add(item2);
             _twoItems = new ITaskItem[] { new TaskItem(item), new TaskItem(item2) };
 
-            _bucket = new ItemBucket(new string[0], new Dictionary<string, string>(), new Lookup(itemsByName, new PropertyDictionary<ProjectPropertyInstance>()), 0);
+            _bucket = new ItemBucket(Array.Empty<string>(), new Dictionary<string, string>(), new Lookup(itemsByName, new PropertyDictionary<ProjectPropertyInstance>()), 0);
             _host.FindTask(null);
             _host.InitializeForBatch(talc, _bucket, null);
             _parametersSetOnTask = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);
diff --git a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
index e45add12e09..2f370689cb7 100644
--- a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
@@ -71,7 +71,7 @@ public TaskHost_Tests()
             _elementLocation = ElementLocation.Create("MockFile", 5, 5);
 
             BuildRequest buildRequest = new BuildRequest(1 /* submissionId */, 1, 1, new List<string>(), null, BuildEventContext.Invalid, null);
-            BuildRequestConfiguration configuration = new BuildRequestConfiguration(1, new BuildRequestData("Nothing", new Dictionary<string, string>(), "4.0", new string[0], null), "2.0");
+            BuildRequestConfiguration configuration = new BuildRequestConfiguration(1, new BuildRequestData("Nothing", new Dictionary<string, string>(), "4.0", Array.Empty<string>(), null), "2.0");
 
             configuration.Project = new ProjectInstance(ProjectRootElement.Create());
 
diff --git a/src/Build.UnitTests/BuildResultUtilities.cs b/src/Build.UnitTests/BuildResultUtilities.cs
index 244fee76119..ca2a4f64822 100644
--- a/src/Build.UnitTests/BuildResultUtilities.cs
+++ b/src/Build.UnitTests/BuildResultUtilities.cs
@@ -12,12 +12,12 @@ internal class BuildResultUtilities
     {
         public static TargetResult GetEmptyFailingTargetResult()
         {
-            return new TargetResult(new TaskItem[0] { }, BuildResultUtilities.GetStopWithErrorResult());
+            return new TargetResult(Array.Empty<TaskItem>(), BuildResultUtilities.GetStopWithErrorResult());
         }
 
         public static TargetResult GetEmptySucceedingTargetResult()
         {
-            return new TargetResult(new TaskItem[0] { }, BuildResultUtilities.GetSuccessResult());
+            return new TargetResult(Array.Empty<TaskItem>(), BuildResultUtilities.GetSuccessResult());
         }
 
         public static TargetResult GetNonEmptySucceedingTargetResult()
diff --git a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
index a6649794529..ba15b8e328e 100644
--- a/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
+++ b/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs
@@ -1930,7 +1930,7 @@ public void BadFrameworkMonkierExpectBuildToFail()
                 Dictionary<string, string> globalProperties = new Dictionary<string, string>();
                 globalProperties["Configuration"] = "Release";
 
-                BuildRequestData request = new BuildRequestData(projectFilePath, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, new string[0], null);
+                BuildRequestData request = new BuildRequestData(projectFilePath, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
                 BuildResult result = buildManager.Build(parameters, request);
                 Assert.Equal(BuildResultCode.Failure, result.OverallResult);
                 // Build should complete successfully even with an invalid solution config if SkipInvalidConfigurations is true
@@ -2018,7 +2018,7 @@ public void BadFrameworkMonkierExpectBuildToFail2()
                 Dictionary<string, string> globalProperties = new Dictionary<string, string>();
                 globalProperties["Configuration"] = "Release";
 
-                BuildRequestData request = new BuildRequestData(projectFilePath, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, new string[0], null);
+                BuildRequestData request = new BuildRequestData(projectFilePath, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, Array.Empty<string>(), null);
                 BuildResult result = buildManager.Build(parameters, request);
                 Assert.Equal(BuildResultCode.Failure, result.OverallResult);
                 // Build should complete successfully even with an invalid solution config if SkipInvalidConfigurations is true
diff --git a/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs b/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs
index 653a01f2fd3..8e58e109926 100644
--- a/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ExpressionShredder_Tests.cs
@@ -441,7 +441,7 @@ private void VerifySplitSemiColonSeparatedList(string input, params string[] exp
             if (expected == null)
             {
                 // passing "null" means you expect an empty array back
-                expected = new string[] { };
+                expected = Array.Empty<string>();
             }
 
             Assert.Equal(actual, expected, StringComparer.Ordinal);
diff --git a/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs b/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
index 1c9389c162f..2218fc59603 100644
--- a/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ItemEvaluation_Tests.cs
@@ -115,7 +115,7 @@ public void RemoveShouldPreserveIntermediaryReferences(string content)
             ObjectModelHelpers.AssertItems(new[] { "a", "b", "c" }, itemsForI, expectedMetadata);
 
             var itemsForI2 = items.Where(i => i.ItemType == "i2").ToList();
-            ObjectModelHelpers.AssertItems(new string[0], itemsForI2);
+            ObjectModelHelpers.AssertItems(Array.Empty<string>(), itemsForI2);
         }
 
         [Fact]
diff --git a/src/Build.UnitTests/EvaluationProfiler_Tests.cs b/src/Build.UnitTests/EvaluationProfiler_Tests.cs
index 94dea5eccbd..1e659732d9f 100644
--- a/src/Build.UnitTests/EvaluationProfiler_Tests.cs
+++ b/src/Build.UnitTests/EvaluationProfiler_Tests.cs
@@ -299,7 +299,7 @@ private ProfilerResult BuildAndGetProfilerResult(string projectContent, bool set
 
                 var buildRequestData = new BuildRequestData(
                     projectInstance,
-                    new string[]{},
+                    Array.Empty<string>(),
                     projectCollection.HostServices);
 
                 var result = _buildManager.Build(parameters, buildRequestData);
diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 97802055673..bc0735fc12b 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -1954,7 +1954,7 @@ public static IEnumerable<object[]> AllNodesShouldHaveGraphBuildGlobalPropertyDa
                     yield return new object[]
                     {
                         new Dictionary<int, int[]>(),
-                        new int[] {},
+                        Array.Empty<int>(),
                         globalVariables
                     };
 
@@ -2089,7 +2089,7 @@ public static IEnumerable<object[]> TransitiveReferencesAreDefinedPerProjectTest
                         {1, new[] {2, 3, 4}},
                         {2, new[] {3}},
                         {3, new[] {4}},
-                        {4, new int[0]}
+                        {4, Array.Empty<int>()}
                     }
                 };
 
@@ -2154,7 +2154,7 @@ public static IEnumerable<object[]> TransitiveReferencesAreDefinedPerProjectTest
                         {3, new[] {4, 5, 6}},
                         {4, new[] {5}},
                         {5, new[] {6}},
-                        {6, new int[0]},
+                        {6, Array.Empty<int>()},
                     }
                 };
             }
@@ -2230,7 +2230,7 @@ public void TransitiveReferencesShouldNotBeAddedToOuterBuilds()
 
             GetFirstNodeWithProjectNumber(graph, 2).AssertReferencesIgnoringOrder(new []{3, 4, 4, 4, 5, 6, 6, 6});
 
-            GetOuterBuild(graph, 4).AssertReferencesIgnoringOrder(new int[0]);
+            GetOuterBuild(graph, 4).AssertReferencesIgnoringOrder(Array.Empty<int>());
 
             var innerBuilds4 = GetInnerBuilds(graph, 4);
             innerBuilds4.Count.ShouldBe(2);
diff --git a/src/Build.UnitTests/Instance/HostServices_Tests.cs b/src/Build.UnitTests/Instance/HostServices_Tests.cs
index 318d56ef351..654c53aca1c 100644
--- a/src/Build.UnitTests/Instance/HostServices_Tests.cs
+++ b/src/Build.UnitTests/Instance/HostServices_Tests.cs
@@ -398,10 +398,10 @@ public void TestProjectInstanceWithNonConflictingHostServices()
             HostServices hostServices = new HostServices();
             ProjectInstance project = CreateDummyProject("foo.proj");
 
-            BuildRequestData data = new BuildRequestData(project, new string[] { }, hostServices);
+            BuildRequestData data = new BuildRequestData(project, Array.Empty<string>(), hostServices);
 
             hostServices.SetNodeAffinity(project.FullPath, NodeAffinity.InProc);
-            BuildRequestData data2 = new BuildRequestData(project, new string[] { }, hostServices);
+            BuildRequestData data2 = new BuildRequestData(project, Array.Empty<string>(), hostServices);
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs
index df74f7c9cca..0eb6d03e81c 100644
--- a/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectTargetInstance_Internal_Tests.cs
@@ -26,8 +26,8 @@ public static IEnumerable<object[]> TargetChildrenTestData
 
                 yield return new object[]
                 {
-                    new ReadOnlyCollection<ProjectTargetInstanceChild>(new ProjectTargetInstanceChild[0]),
-                    new ReadOnlyCollection<ProjectOnErrorInstance>(new ProjectOnErrorInstance[0])
+                    new ReadOnlyCollection<ProjectTargetInstanceChild>(System.Array.Empty<ProjectTargetInstanceChild>()),
+                    new ReadOnlyCollection<ProjectOnErrorInstance>(System.Array.Empty<ProjectOnErrorInstance>())
                 };
 
                 yield return new object[]
diff --git a/src/Build/Utilities/NuGetFrameworkWrapper.cs b/src/Build/Utilities/NuGetFrameworkWrapper.cs
index a318ddb8117..a8670ebe8a1 100644
--- a/src/Build/Utilities/NuGetFrameworkWrapper.cs
+++ b/src/Build/Utilities/NuGetFrameworkWrapper.cs
@@ -40,7 +40,7 @@ public NuGetFrameworkWrapper()
                 var NuGetFrameworkDefaultCompatibilityProvider = NuGetAssembly.GetType("NuGet.Frameworks.DefaultCompatibilityProvider");
                 ParseMethod = NuGetFramework.GetMethod("Parse", new Type[] { typeof(string) });
                 IsCompatibleMethod = NuGetFrameworkCompatibilityProvider.GetMethod("IsCompatible");
-                DefaultCompatibilityProvider = NuGetFrameworkDefaultCompatibilityProvider.GetMethod("get_Instance").Invoke(null, new object[] { });
+                DefaultCompatibilityProvider = NuGetFrameworkDefaultCompatibilityProvider.GetMethod("get_Instance").Invoke(null, Array.Empty<object>());
                 FrameworkProperty = NuGetFramework.GetProperty("Framework");
                 VersionProperty = NuGetFramework.GetProperty("Version");
                 PlatformProperty = NuGetFramework.GetProperty("Platform");
diff --git a/src/Deprecated/Engine/Engine/BuildTask.cs b/src/Deprecated/Engine/Engine/BuildTask.cs
index 4d7552ed0fa..6fc77b50924 100644
--- a/src/Deprecated/Engine/Engine/BuildTask.cs
+++ b/src/Deprecated/Engine/Engine/BuildTask.cs
@@ -310,7 +310,7 @@ public string[] GetParameterNames()
         {
             if (this.taskElement == null)
             {
-                return new string[0];
+                return Array.Empty<string>();
             }
 
             ArrayList list = new ArrayList();
diff --git a/src/Deprecated/Engine/Engine/Expander.cs b/src/Deprecated/Engine/Engine/Expander.cs
index 2cd7ba7bcd4..480dfee46e1 100644
--- a/src/Deprecated/Engine/Engine/Expander.cs
+++ b/src/Deprecated/Engine/Engine/Expander.cs
@@ -1517,7 +1517,7 @@ private static Function ConstructFunction(string expressionFunction, string expr
                     // It may be that there are '()' but no actual arguments content
                     if (argumentStartIndex == expressionFunction.Length - 1)
                     {
-                        functionArguments = new string[0];
+                        functionArguments = Array.Empty<string>();
                     }
                     else
                     {
@@ -1527,7 +1527,7 @@ private static Function ConstructFunction(string expressionFunction, string expr
                         // If there are no arguments, then just create an empty array
                         if (String.IsNullOrEmpty(argumentsContent))
                         {
-                            functionArguments = new string[0];
+                            functionArguments = Array.Empty<string>();
                         }
                         else
                         {
@@ -1543,7 +1543,7 @@ private static Function ConstructFunction(string expressionFunction, string expr
                     int nextMethodIndex = expressionFunction.IndexOf('.', methodStartIndex);
                     int methodLength = expressionFunction.Length - methodStartIndex;
 
-                    functionArguments = new string[0];
+                    functionArguments = Array.Empty<string>();
 
                     if (nextMethodIndex > 0)
                     {
diff --git a/src/Deprecated/Engine/Engine/Project.cs b/src/Deprecated/Engine/Engine/Project.cs
index fa38a06859d..4c0ddb0e1c8 100644
--- a/src/Deprecated/Engine/Engine/Project.cs
+++ b/src/Deprecated/Engine/Engine/Project.cs
@@ -408,7 +408,7 @@ string toolsVersion
                 this.targets = new TargetCollection(this);
 
                 // Initialize the default targets, initial targets, and project file name.
-                this.defaultTargetNames = new string[0];
+                this.defaultTargetNames = Array.Empty<string>();
                 this.initialTargetNamesInMainProject = new ArrayList();
                 this.initialTargetNamesInImportedProjects = new ArrayList();
                 this.FullFileName = String.Empty;
@@ -1549,7 +1549,7 @@ string propertyName
 
             if (propertyValues == null)
             {
-                return new string[0];
+                return Array.Empty<string>();
             }
             else
             {
@@ -3743,7 +3743,7 @@ private void ProcessMainProjectElement
             this.evaluatedItemsIgnoringCondition.Clear();
             this.targets.Clear();
             this.nameOfFirstTarget = null;
-            this.defaultTargetNames = new string[0];
+            this.defaultTargetNames = Array.Empty<string>();
             this.initialTargetNamesInImportedProjects.Clear();
             this.initialTargetNamesInMainProject.Clear();
 
diff --git a/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs b/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs
index b0a635794c7..188bbb81ad1 100644
--- a/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs
+++ b/src/Deprecated/Engine/Engine/RegistryKeyWrapper.cs
@@ -110,7 +110,7 @@ public virtual string[] GetValueNames()
         {
             try
             {
-                return Exists() ? WrappedKey.GetValueNames() : new string[] { };
+                return Exists() ? WrappedKey.GetValueNames() : Array.Empty<string>();
             }
             catch (Exception ex)
             {
@@ -129,7 +129,7 @@ public virtual string[] GetSubKeyNames()
         {
             try
             {
-                return Exists() ? WrappedKey.GetSubKeyNames() : new string[] { };
+                return Exists() ? WrappedKey.GetSubKeyNames() : Array.Empty<string>();
             }
             catch (Exception ex)
             {
diff --git a/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs b/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
index 4935eaea24e..8fce018f88f 100644
--- a/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetRegistryReader.cs
@@ -57,7 +57,7 @@ protected override IEnumerable<PropertyDefinition> ToolsVersions
         {
             get
             {
-                string[] toolsVersionNames = new string[] { };
+                string[] toolsVersionNames = System.Array.Empty<string>();
                 try
                 {
                     toolsVersionNames = msbuildRegistryWrapper.OpenSubKey("ToolsVersions").GetSubKeyNames();
diff --git a/src/Deprecated/Engine/Logging/ParallelLogger/ParallelLoggerHelpers.cs b/src/Deprecated/Engine/Logging/ParallelLogger/ParallelLoggerHelpers.cs
index 8470aca7630..3bde1782032 100644
--- a/src/Deprecated/Engine/Logging/ParallelLogger/ParallelLoggerHelpers.cs
+++ b/src/Deprecated/Engine/Logging/ParallelLogger/ParallelLoggerHelpers.cs
@@ -149,7 +149,7 @@ internal string[] ProjectCallStackFromProject(BuildEventContext e)
             // or the event is raised before the project started event
             if (startedEvent == null)
             {
-                return new string[0];
+                return Array.Empty<string>();
             }
 
             List<ProjectStartedEventMinimumFields> projectStackTrace = GetProjectCallStack(e);
diff --git a/src/Deprecated/Engine/Shared/FileMatcher.cs b/src/Deprecated/Engine/Shared/FileMatcher.cs
index 3292f664426..c18f30d1fca 100644
--- a/src/Deprecated/Engine/Shared/FileMatcher.cs
+++ b/src/Deprecated/Engine/Shared/FileMatcher.cs
@@ -121,7 +121,7 @@ private static string[] GetAccessibleFilesAndDirectories(string path, string pat
 
             if (entries == null)
             {
-                entries = new string[0];
+                entries = Array.Empty<string>();
             }
 
             return entries;
@@ -177,12 +177,12 @@ bool   stripProjectDirectory
             catch (System.Security.SecurityException)
             {
                 // For code access security.
-                return new string[0];
+                return Array.Empty<string>();
             }
             catch (System.UnauthorizedAccessException)
             {
                 // For OS security.
-                return new string[0];
+                return Array.Empty<string>();
             }
         }
 
@@ -229,12 +229,12 @@ string pattern
             catch (System.Security.SecurityException)
             {
                 // For code access security.
-                return new string[0];
+                return Array.Empty<string>();
             }
             catch (System.UnauthorizedAccessException)
             {
                 // For OS security.
-                return new string[0];
+                return Array.Empty<string>();
             }
         }
 
@@ -1198,7 +1198,7 @@ DirectoryExists directoryExists
                     }
                     catch (ArgumentException)
                     {
-                        return new string[0];
+                        return Array.Empty<string>();
                     }
 
                     stripProjectDirectory = !String.Equals(fixedDirectoryPart, oldFixedDirectoryPart, StringComparison.OrdinalIgnoreCase);
@@ -1216,7 +1216,7 @@ DirectoryExists directoryExists
              */
             if (fixedDirectoryPart.Length > 0 && !directoryExists(fixedDirectoryPart))
             {
-                return new string[0];
+                return Array.Empty<string>();
             }
 
             // determine if we need to use the regular expression to match the files
diff --git a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
index bd04dfc4a6f..035b475dc5c 100644
--- a/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
+++ b/src/MSBuild.UnitTests/CommandLineSwitches_Tests.cs
@@ -560,7 +560,7 @@ public void GraphBuildSwitchCanBeParameterless()
 
             MSBuildApp.GatherCommandLineSwitches(new List<string>{ "/graph" }, switches);
 
-            switches[CommandLineSwitches.ParameterizedSwitch.GraphBuild].ShouldBe(new string[0]);
+            switches[CommandLineSwitches.ParameterizedSwitch.GraphBuild].ShouldBe(Array.Empty<string>());
 
             switches.HaveErrors().ShouldBeFalse();
         }
@@ -981,9 +981,9 @@ public void InvalidToolsVersionErrors()
                                         "ScoobyDoo",
                                         new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase),
                                         new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase),
-                                        new ILogger[] { },
+                                        Array.Empty<ILogger>(),
                                         LoggerVerbosity.Normal,
-                                        new DistributedLoggerRecord[] { },
+                                        Array.Empty<DistributedLoggerRecord>(),
 #if FEATURE_XML_SCHEMA_VALIDATION
                                         false,
                                         null,
@@ -1223,9 +1223,9 @@ public void ProcessProfileEvaluationEmpty()
         [Fact]
         public void ProcessBooleanSwitchTest()
         {
-            MSBuildApp.ProcessBooleanSwitch(new string[0], defaultValue: true, resourceName: null).ShouldBeTrue();
+            MSBuildApp.ProcessBooleanSwitch(Array.Empty<string>(), defaultValue: true, resourceName: null).ShouldBeTrue();
 
-            MSBuildApp.ProcessBooleanSwitch(new string[0], defaultValue: false, resourceName: null).ShouldBeFalse();
+            MSBuildApp.ProcessBooleanSwitch(Array.Empty<string>(), defaultValue: false, resourceName: null).ShouldBeFalse();
 
             MSBuildApp.ProcessBooleanSwitch(new [] { "true" }, defaultValue: false, resourceName: null).ShouldBeTrue();
 
@@ -1239,7 +1239,7 @@ public static IEnumerable<object[]> ProcessGraphBuildSwitchData()
             var emptyOptions = new GraphBuildOptions();
             var noBuildOptions = new GraphBuildOptions {Build = false};
 
-            yield return new object[] {new string[0], emptyOptions, null};
+            yield return new object[] {Array.Empty<string>(), emptyOptions, null};
 
             yield return new object[] {new[] {"true"}, emptyOptions, null};
 
diff --git a/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs b/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
index ae0e0d671f2..369b0719aba 100644
--- a/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
+++ b/src/MSBuild.UnitTests/ProjectSchemaValidationHandler_Tests.cs
@@ -30,7 +30,7 @@ public void VerifyInvalidProjectSchema
             (
             )
         {
-            string[] msbuildTempXsdFilenames = new string[] { };
+            string[] msbuildTempXsdFilenames = Array.Empty<string>();
             string projectFilename = null;
             string oldValueForMSBuildOldOM = null;
             try
@@ -165,7 +165,7 @@ public void VerifyValidProjectSchema
             (
             )
         {
-            string[] msbuildTempXsdFilenames = new string[] { };
+            string[] msbuildTempXsdFilenames = Array.Empty<string>();
             string projectFilename = CreateTempFileOnDisk(@"
                     <Project xmlns=`msbuildnamespace`>
                         <Target Name=`Build` />
@@ -209,7 +209,7 @@ public void VerifyInvalidImportNotCaughtBySchema
             (
             )
         {
-            string[] msbuildTempXsdFilenames = new string[] { };
+            string[] msbuildTempXsdFilenames = Array.Empty<string>();
 
             string importedProjectFilename = CreateTempFileOnDisk(@"
                     <Project xmlns=`msbuildnamespace`>
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index e44fe59257f..a7b34e37d34 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -1330,7 +1330,7 @@ public void TestProcessProjectSwitchOneProjNotFoundExtension()
             string[] projects = { "my.proj" };
             string[] extensionsToIgnore = { ".phantomextension" };
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
         }
 
         /// <summary>
@@ -1342,7 +1342,7 @@ public void TestTwoIdenticalExtensionsToIgnore()
             string[] projects = { "my.proj" };
             string[] extensionsToIgnore = { ".phantomextension", ".phantomextension" };
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
         }
 
         /// <summary>
@@ -1354,10 +1354,10 @@ public void TestProcessProjectSwitchNullandEmptyProjectsToIgnore()
             string[] projects = { "my.proj" };
             string[] extensionsToIgnore = null;
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
 
-            extensionsToIgnore = new string[] { };
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+            extensionsToIgnore = Array.Empty<string>();
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
         }
 
         /// <summary>
@@ -1371,7 +1371,7 @@ public void TestProcessProjectSwitchNullInList()
                 string[] projects = { "my.proj" };
                 string[] extensionsToIgnore = { ".phantomextension", null };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
             }
            );
         }
@@ -1387,7 +1387,7 @@ public void TestProcessProjectSwitchEmptyInList()
                 string[] projects = { "my.proj" };
                 string[] extensionsToIgnore = { ".phantomextension", string.Empty };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
             }
            );
         }
@@ -1402,7 +1402,7 @@ public void TestProcessProjectSwitchExtensionWithoutDot()
                 string[] projects = { "my.proj" };
                 string[] extensionsToIgnore = { "phantomextension" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase);
             }
            );
         }
@@ -1417,7 +1417,7 @@ public void TestProcessProjectSwitchMalformed()
                 string[] projects = { "my.proj" };
                 string[] extensionsToIgnore = { ".C:\\boocatmoo.a" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("my.proj", StringCompareShould.IgnoreCase); // "Expected my.proj to be only project found"
             }
            );
         }
@@ -1432,7 +1432,7 @@ public void TestProcessProjectSwitchWildcards()
                 string[] projects = { "my.proj" };
                 string[] extensionsToIgnore = { ".proj*", ".nativeproj?" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1442,52 +1442,52 @@ public void TestProcessProjectSwitch()
             string[] projects = { "test.nativeproj", "test.vcproj" };
             string[] extensionsToIgnore = { ".phantomextension", ".vcproj" };
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.nativeproj", StringCompareShould.IgnoreCase); // "Expected test.nativeproj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.nativeproj", StringCompareShould.IgnoreCase); // "Expected test.nativeproj to be only project found"
 
             projects = new[] { "test.nativeproj", "test.vcproj", "test.proj" };
             extensionsToIgnore = new[] { ".phantomextension", ".vcproj" };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
 
             projects = new[] { "test.nativeproj", "test.vcproj" };
             extensionsToIgnore = new[] { ".vcproj" };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.nativeproj", StringCompareShould.IgnoreCase); // "Expected test.nativeproj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.nativeproj", StringCompareShould.IgnoreCase); // "Expected test.nativeproj to be only project found"
 
             projects = new[] { "test.proj", "test.sln" };
             extensionsToIgnore = new[] { ".vcproj" };
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
 
             projects = new[] { "test.proj", "test.sln", "test.proj~", "test.sln~" };
-            extensionsToIgnore = new string[] { };
+            extensionsToIgnore = Array.Empty<string>();
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
 
             projects = new[] { "test.proj" };
-            extensionsToIgnore = new string[] { };
+            extensionsToIgnore = Array.Empty<string>();
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
 
             projects = new[] { "test.proj", "test.proj~" };
-            extensionsToIgnore = new string[] { };
+            extensionsToIgnore = Array.Empty<string>();
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj", StringCompareShould.IgnoreCase); // "Expected test.proj to be only project found"
 
             projects = new[] { "test.sln" };
-            extensionsToIgnore = new string[] { };
+            extensionsToIgnore = Array.Empty<string>();
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
 
             projects = new[] { "test.sln", "test.sln~" };
-            extensionsToIgnore = new string[] { };
+            extensionsToIgnore = Array.Empty<string>();
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
 
             projects = new[] { "test.sln~", "test.sln" };
-            extensionsToIgnore = new string[] { };
+            extensionsToIgnore = Array.Empty<string>();
             projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.sln", StringCompareShould.IgnoreCase); // "Expected test.sln to be only solution found"
         }
 
         /// <summary>
@@ -1499,7 +1499,7 @@ public void TestProcessProjectSwitchReplicateBuildingDFLKG()
             string[] projects = { "test.proj", "test.sln", "Foo.vcproj" };
             string[] extensionsToIgnore = { ".sln", ".vcproj" };
             IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-            MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj"); // "Expected test.proj to be only project found"
+            MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles).ShouldBe("test.proj"); // "Expected test.proj to be only project found"
         }
 
         /// <summary>
@@ -1513,7 +1513,7 @@ public void TestProcessProjectSwitchRemovedAllprojects()
                 var projects = new[] { "test.nativeproj", "test.vcproj" };
                 var extensionsToIgnore = new[] { ".nativeproj", ".vcproj" };
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1528,7 +1528,7 @@ public void TestProcessProjectSwitchSlnProjDifferentNames()
                 string[] projects = { "test.proj", "Different.sln" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1543,7 +1543,7 @@ public void TestProcessProjectSwitchTwoProj()
                 string[] projects = { "test.proj", "Different.proj" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1558,7 +1558,7 @@ public void TestProcessProjectSwitchTwoNative()
                 string[] projects = { "test.nativeproj", "Different.nativeproj" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1573,7 +1573,7 @@ public void TestProcessProjectSwitchTwoSolutions()
                 string[] projects = { "test.sln", "Different.sln" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1588,7 +1588,7 @@ public void TestProcessProjectSwitchMoreThenTwoProj()
                 string[] projects = { "test.nativeproj", "Different.csproj", "Another.proj" };
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -1600,10 +1600,10 @@ public void TestProcessProjectSwitchNoProjectOrSolution()
         {
             Should.Throw<InitializationException>(() =>
             {
-                string[] projects = { };
+                string[] projects = Array.Empty<string>();
                 string[] extensionsToIgnore = null;
                 IgnoreProjectExtensionsHelper projectHelper = new IgnoreProjectExtensionsHelper(projects);
-                MSBuildApp.ProcessProjectSwitch(new string[] { }, extensionsToIgnore, projectHelper.GetFiles);
+                MSBuildApp.ProcessProjectSwitch(Array.Empty<string>(), extensionsToIgnore, projectHelper.GetFiles);
             }
            );
         }
@@ -2485,7 +2485,7 @@ private string ExecuteMSBuildExeExpectFailure(string projectContents, IDictionar
 
         private (bool result, string output) ExecuteMSBuildExe(string projectContents, IDictionary<string, string> filesToCreate = null, IDictionary<string, string> envsToCreate = null, params string[] arguments)
         {
-            TransientTestProjectWithFiles testProject = _env.CreateTestProjectWithFiles(projectContents, new string[0]);
+            TransientTestProjectWithFiles testProject = _env.CreateTestProjectWithFiles(projectContents, Array.Empty<string>());
 
             if (filesToCreate != null)
             {
diff --git a/src/MSBuild/CommandLineSwitches.cs b/src/MSBuild/CommandLineSwitches.cs
index e1e53cbb1f5..d0f9fb185a2 100644
--- a/src/MSBuild/CommandLineSwitches.cs
+++ b/src/MSBuild/CommandLineSwitches.cs
@@ -597,7 +597,7 @@ internal bool IsParameterizedSwitchSet(ParameterizedSwitch parameterizedSwitch)
         }
 
         // used to indicate a null parameter list for a switch
-        private static readonly string[] s_noParameters = { };
+        private static readonly string[] s_noParameters = Array.Empty<string>();
 
         /// <summary>
         /// Gets the parameters (if any) detected on the command line for the given parameterized switch.
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index ae95d608193..bc3c60dec60 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -539,11 +539,11 @@ string [] commandLine
                 // process the detected command line switches -- gather build information, take action on non-build switches, and
                 // check for non-trivial errors
                 string projectFile = null;
-                string[] targets = { };
+                string[] targets = Array.Empty<string>();
                 string toolsVersion = null;
                 Dictionary<string, string> globalProperties = null;
                 Dictionary<string, string> restoreProperties = null;
-                ILogger[] loggers = { };
+                ILogger[] loggers = Array.Empty<ILogger>();
                 LoggerVerbosity verbosity = LoggerVerbosity.Normal;
                 List<DistributedLoggerRecord> distributedLoggerRecords = null;
 #if FEATURE_XML_SCHEMA_VALIDATION
diff --git a/src/Shared/AssemblyNameExtension.cs b/src/Shared/AssemblyNameExtension.cs
index 99db41274e3..4d0abc197cf 100644
--- a/src/Shared/AssemblyNameExtension.cs
+++ b/src/Shared/AssemblyNameExtension.cs
@@ -820,11 +820,15 @@ internal static bool ComparePublicKeyTokens(byte[] aPKT, byte[] bPKT)
             // Some assemblies (real case was interop assembly) may have null PKTs.
             if (aPKT == null)
             {
+#pragma warning disable CA1825 // Avoid zero-length array allocations
                 aPKT = new byte[0];
+#pragma warning restore CA1825 // Avoid zero-length array allocations
             }
             if (bPKT == null)
             {
+#pragma warning disable CA1825 // Avoid zero-length array allocations
                 bPKT = new byte[0];
+#pragma warning restore CA1825 // Avoid zero-length array allocations
             }
 
             if (aPKT.Length != bPKT.Length)
diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index 56a1b1f3803..d7fad5fb653 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -197,7 +197,9 @@ public void Translate(ref byte[] byteArray)
                 }
                 else
                 {
+#pragma warning disable CA1825 // Avoid zero-length array allocations
                     byteArray = new byte[0];
+#pragma warning restore CA1825 // Avoid zero-length array allocations
                 }
             }
 
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index b779aaa45ba..79cb24389be 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -1292,7 +1292,7 @@ public void Regress367780_CrashOnStarDotDot()
             string workingPath = _env.CreateFolder().Path;
             string workingPathSubfolder = Path.Combine(workingPath, "SubDir");
             string offendingPattern = Path.Combine(workingPath, @"*\..\bar");
-            string[] files = new string[0];
+            string[] files = Array.Empty<string>();
 
             Directory.CreateDirectory(workingPath);
             Directory.CreateDirectory(workingPathSubfolder);
@@ -1518,9 +1518,7 @@ public void ExcludeSpecificFiles()
                     @"Program_old.cs",
                     @"Properties\AssemblyInfo_old.cs"
                 },
-                new string[]    //  Non matching files that shouldn't be touched
-                {
-                }
+                Array.Empty<string>()    //  Non matching files that shouldn't be touched
             );
         }
 
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index e647fd709c0..07b7b89e3a4 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -1408,7 +1408,7 @@ public static BuildResult BuildProjectFileUsingBuildManager(string projectFile,
                     projectFile,
                     new Dictionary<string, string>(),
                     MSBuildConstants.CurrentToolsVersion,
-                    new string[] {},
+                    Array.Empty<string>(),
                     null);
 
                 var result = buildManager.Build(
@@ -1982,7 +1982,7 @@ public async Task<BuildResult> BuildProjectFileAsync(
                 var buildRequestData = new BuildRequestData(projectFile,
                     globalProperties ?? new Dictionary<string, string>(),
                     MSBuildConstants.CurrentToolsVersion,
-                    entryTargets ?? new string[0],
+                    entryTargets ?? Array.Empty<string>(),
                     null);
 
                 var completion = new TaskCompletionSource<BuildResult>();
@@ -2002,7 +2002,7 @@ public GraphBuildResult BuildGraphSubmission(GraphBuildRequestData requestData)
 
             public GraphBuildResult BuildGraph(ProjectGraph graph, string[] entryTargets = null)
             {
-                return _buildManager.BuildRequest(new GraphBuildRequestData(graph, entryTargets ?? new string[0]));
+                return _buildManager.BuildRequest(new GraphBuildRequestData(graph, entryTargets ?? Array.Empty<string>()));
             }
 
             public void Dispose()
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index 2d0aaec17b3..899f55b7089 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -3312,7 +3312,7 @@ public void ParentAssemblyResolvedFromAForGac()
         /// <returns></returns>
         private ReferenceTable GenerateTableWithAssemblyFromTheGlobalLocation(string location)
         {
-            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, new string[0], null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null,
+            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, Array.Empty<string>(), null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null,
 #if FEATURE_WIN32_REGISTRY
                 null, null, null,
 #endif
@@ -3514,7 +3514,7 @@ public void NoFrameworkDirectoriesStillCopyLocal()
 
             t.BuildEngine = engine;
             t.Assemblies = assemblyNames;
-            t.TargetFrameworkDirectories = new string[] { };
+            t.TargetFrameworkDirectories = Array.Empty<string>();
             t.SearchPaths = new string[] { "{RawFileName}" };
             Execute(t);
             Assert.Equal(@"true", t.ResolvedFiles[0].GetMetadata("CopyLocal"));
@@ -6206,7 +6206,7 @@ public void SubsetListFinderNullFrameworkDirectory()
         {
             Assert.Throws<ArgumentNullException>(() =>
             {
-                SubsetListFinder finder = new SubsetListFinder(new string[0]);
+                SubsetListFinder finder = new SubsetListFinder(Array.Empty<string>());
                 finder.GetSubsetListPathsFromDisk(null);
             }
            );
@@ -6229,7 +6229,7 @@ public void SubsetListFinderNullSubsetToSearchFor()
         [Fact]
         public void SubsetListFinderEmptySubsetToSearchFor()
         {
-            SubsetListFinder finder = new SubsetListFinder(new string[0]);
+            SubsetListFinder finder = new SubsetListFinder(Array.Empty<string>());
             string[] returnArray = finder.GetSubsetListPathsFromDisk("FrameworkDirectory");
             Assert.Empty(returnArray); // "Expected the array returned to be 0 length"
         }
@@ -6526,7 +6526,7 @@ public void TestGenerateFrameworkName()
             targetFrameworks = new string[] { "Client", "Framework" };
             Assert.Equal("Client, Framework", ResolveAssemblyReference.GenerateSubSetName(targetFrameworks, null));
 
-            targetFrameworks = new string[0];
+            targetFrameworks = Array.Empty<string>();
             Assert.True(String.IsNullOrEmpty(ResolveAssemblyReference.GenerateSubSetName(targetFrameworks, null)));
 
             targetFrameworks = null;
@@ -6580,7 +6580,7 @@ public void ReferenceTablePrimaryItemInBlackListRemoveOnlyNoWarn()
             referenceTable.RemoveReferencesMarkedForExclusion(true, String.Empty);
 
             Dictionary<AssemblyNameExtension, Reference> table2 = referenceTable.References;
-            string subSetName = ResolveAssemblyReference.GenerateSubSetName(new string[] { }, null);
+            string subSetName = ResolveAssemblyReference.GenerateSubSetName(Array.Empty<string>(), null);
             string warningMessage = rar.Log.FormatResourceString("ResolveAssemblyReference.FailedToResolveReferenceBecausePrimaryAssemblyInExclusionList", taskItem.ItemSpec, subSetName);
             Assert.False(Object.ReferenceEquals(table, table2)); // "Expected dictionary to be a different instance"
             Assert.Single(table2); // "Expected there to be one elements in the dictionary"
@@ -6817,7 +6817,7 @@ public void ReferenceTableDependentItemsInBlackList3()
         [Fact]
         public void ReferenceTableDependentItemsInBlackList4()
         {
-            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, new string[0], null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null,
+            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, Array.Empty<string>(), null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null,
 #if FEATURE_WIN32_REGISTRY
                 null, null, null,
 #endif
@@ -6995,7 +6995,7 @@ public void ReferenceTableDependentItemsInBlackListPrimaryWithSpecificVersion()
 
         private static ReferenceTable MakeEmptyReferenceTable(TaskLoggingHelper log)
         {
-            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, new string[0], null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null,
+            ReferenceTable referenceTable = new ReferenceTable(null, false, false, false, false, Array.Empty<string>(), null, null, null, null, null, null, SystemProcessorArchitecture.None, fileExists, null, null, null, null,
 #if FEATURE_WIN32_REGISTRY
                 null, null, null,
 #endif
@@ -7317,7 +7317,7 @@ public void NoClientSubsetButInstalledSubTables()
                 t.TargetFrameworkDirectories = new string[] { Path.Combine(ObjectModelHelpers.TempProjectDir, "v3.5") };
                 t.InstalledAssemblyTables = new ITaskItem[] { new TaskItem(redistListPath) };
                 // Only the explicitly specified redist list should be used
-                t.TargetFrameworkSubsets = new string[0];
+                t.TargetFrameworkSubsets = Array.Empty<string>();
 
                 // Create a subset list which should be read in
                 string explicitSubsetListContents =
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index e64d7b07d8c..0eea27bff64 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -914,7 +914,7 @@ internal static string[] GetDirectories(string path, string pattern)
                 };
             }
 
-            return new string[0];
+            return Array.Empty<string>();
         }
 
         /// <summary>
@@ -1985,7 +1985,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
 
             if (String.Equals(path, @"c:\Regress313086\mscorlib.dll", StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[] { };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, Path.Combine(s_myVersion20Path, "System.dll"), StringComparison.OrdinalIgnoreCase))
@@ -2088,16 +2088,12 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
                 || String.Equals(path, Path.Combine(s_myVersionPocket20Path, "mscorlib.dll"), StringComparison.OrdinalIgnoreCase)
             )
             {
-                return new AssemblyNameExtension[]
-                {
-                };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, @"MyRelativeAssembly.dll", StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[]
-                {
-                };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, Path.Combine(s_myAppRootPath, "DependsOnSimpleA.dll"), StringComparison.OrdinalIgnoreCase))
@@ -2206,9 +2202,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
 
             if (String.Equals(path, s_myLibraries_V1_E_EDllPath, StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[]
-                {
-                };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, Path.Combine(s_myApp_V05Path, "DependsOnWeaklyNamedUnified.dll"), StringComparison.OrdinalIgnoreCase))
@@ -2354,7 +2348,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
 
             if (String.Equals(path, Path.Combine(s_myComponents2RootPath, "W.dll"), StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[] { };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "X.dll"), StringComparison.OrdinalIgnoreCase))
@@ -2367,7 +2361,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
 
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "Z.dll"), StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[] { };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "Y.dll"), StringComparison.OrdinalIgnoreCase))
@@ -2380,7 +2374,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
 
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "Microsoft.Build.dll"), StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[] { };
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, Path.Combine(s_myComponentsRootPath, "DependsOnMSBuild12.dll"), StringComparison.OrdinalIgnoreCase))
@@ -2439,7 +2433,7 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
             if (String.Equals(path, @"C:\DirectoryContainsdllAndWinmd\c.winmd", StringComparison.OrdinalIgnoreCase))
             {
                 // Simulate a strongly named assembly.
-                return new AssemblyNameExtension[0];
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, @"C:\DirectoryContainstwoWinmd\a.winmd", StringComparison.OrdinalIgnoreCase))
@@ -2453,12 +2447,12 @@ internal static AssemblyNameExtension[] GetDependencies(string path)
 
             if (String.Equals(path, @"C:\DirectoryContainstwoWinmd\c.winmd", StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[0];
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (path.StartsWith(@"C:\FakeSDK\", StringComparison.OrdinalIgnoreCase))
             {
-                return new AssemblyNameExtension[0];
+                return Array.Empty<AssemblyNameExtension>();
             }
 
             if (String.Equals(path, s_portableDllPath, StringComparison.OrdinalIgnoreCase))
@@ -2526,49 +2520,49 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
             {
                 if (String.Equals(subKey, @"Software\Regress714052", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\AssemblyFoldersEx", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\X86", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\MSIL", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\Mix", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\Mix\Mix", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\None", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\X86\X86", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\MSIL\MSIL", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\None\None", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NetFramework", StringComparison.OrdinalIgnoreCase))
@@ -2609,7 +2603,7 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
                     || String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\ZControlB", StringComparison.OrdinalIgnoreCase)
                 )
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if
@@ -2666,12 +2660,12 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\AssemblyFoldersEx\A", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\AssemblyFoldersEx\B", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\X86", StringComparison.OrdinalIgnoreCase))
                 {
@@ -2695,21 +2689,21 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\Mix\Mix", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\X86\X86", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\MSIL\MSIL", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Regress714052\v2.0.0\None\None", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NetFramework", StringComparison.OrdinalIgnoreCase))
@@ -2724,12 +2718,12 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.FancyControl.1.0", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NetFramework\v2.0.50727\AssemblyFoldersEx\Infragistics.MyHKLMControl.1.0", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NETCompactFramework", StringComparison.OrdinalIgnoreCase))
@@ -2744,12 +2738,12 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NETCompactFramework\v2.0.3600\PocketPC\AssemblyFoldersEx", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Microsoft\.NETCompactFramework\v2.0.3600\PocketPC\AssemblyFoldersEx\AFETestDeviceControl", StringComparison.OrdinalIgnoreCase))
                 {
-                    return new string[] { };
+                    return Array.Empty<string>();
                 }
 
                 if (String.Equals(subKey, @"Software\Microsoft\Microsoft SDKs\Windows", StringComparison.OrdinalIgnoreCase))
@@ -3027,7 +3021,7 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
 	                );
 
                     // A few checks. These should always be true or it may be a perf issue for project load.
-                    ITaskItem[] loadModeResolvedFiles = new TaskItem[0];
+                    ITaskItem[] loadModeResolvedFiles = Array.Empty<TaskItem>();
                     if (t.ResolvedFiles != null)
                     {
                         loadModeResolvedFiles = (ITaskItem[])t.ResolvedFiles.Clone();
diff --git a/src/Tasks.UnitTests/CombinePath_Tests.cs b/src/Tasks.UnitTests/CombinePath_Tests.cs
index 6d60979ae68..dc05b71dde1 100644
--- a/src/Tasks.UnitTests/CombinePath_Tests.cs
+++ b/src/Tasks.UnitTests/CombinePath_Tests.cs
@@ -173,7 +173,7 @@ public void NoPaths()
             t.BuildEngine = new MockEngine();
 
             t.BasePath = @"c:\abc\def";
-            t.Paths = new ITaskItem[0];
+            t.Paths = System.Array.Empty<ITaskItem>();
             Assert.True(t.Execute()); // "success"
 
             ObjectModelHelpers.AssertItemsMatch(@"
diff --git a/src/Tasks.UnitTests/Exec_Tests.cs b/src/Tasks.UnitTests/Exec_Tests.cs
index 6bbcdb146cc..bb7f9dcefee 100644
--- a/src/Tasks.UnitTests/Exec_Tests.cs
+++ b/src/Tasks.UnitTests/Exec_Tests.cs
@@ -523,7 +523,7 @@ public void ExecTaskDisablesAutoRun(string environmentVariableName, string envir
 
                 MethodInfo generateCommandLineCommandsMethod = execType.GetMethod("GenerateCommandLineCommands", BindingFlags.Instance | BindingFlags.NonPublic);
 
-                string commandLine = generateCommandLineCommandsMethod.Invoke(exec, new object[0]) as string;
+                string commandLine = generateCommandLineCommandsMethod.Invoke(exec, Array.Empty<object>()) as string;
 
                 if (autoRunShouldBeDisabled)
                 {
diff --git a/src/Tasks.UnitTests/FindAppConfigFile_Tests.cs b/src/Tasks.UnitTests/FindAppConfigFile_Tests.cs
index c2bd134f11a..74d1c6a7c82 100644
--- a/src/Tasks.UnitTests/FindAppConfigFile_Tests.cs
+++ b/src/Tasks.UnitTests/FindAppConfigFile_Tests.cs
@@ -17,7 +17,7 @@ public void FoundInFirstInProjectDirectory()
             FindAppConfigFile f = new FindAppConfigFile();
             f.BuildEngine = new MockEngine();
             f.PrimaryList = new ITaskItem[] { new TaskItem("app.config"), new TaskItem("xxx") };
-            f.SecondaryList = new ITaskItem[] { };
+            f.SecondaryList = System.Array.Empty<ITaskItem>();
             f.TargetPath = "targetpath";
             Assert.True(f.Execute());
             Assert.Equal("app.config", f.AppConfigFile.ItemSpec);
@@ -86,7 +86,7 @@ public void ReturnsLastOne()
             ITaskItem item2 = new TaskItem("app.config");
             item2.SetMetadata("id", "2");
             f.PrimaryList = new ITaskItem[] { item1, item2 };
-            f.SecondaryList = new ITaskItem[] { };
+            f.SecondaryList = System.Array.Empty<ITaskItem>();
             f.TargetPath = "targetpath";
             Assert.True(f.Execute());
             Assert.Equal("app.config", f.AppConfigFile.ItemSpec);
diff --git a/src/Tasks.UnitTests/FindInList_Tests.cs b/src/Tasks.UnitTests/FindInList_Tests.cs
index a87a9cc5ffc..25073969b17 100644
--- a/src/Tasks.UnitTests/FindInList_Tests.cs
+++ b/src/Tasks.UnitTests/FindInList_Tests.cs
@@ -90,7 +90,7 @@ public void ReturnsLastOneEmptyList()
             f.BuildEngine = new MockEngine();
             f.ItemSpecToFind = "a.cs";
             f.FindLastMatch = true;
-            f.List = new ITaskItem[] { };
+            f.List = Array.Empty<ITaskItem>();
             Assert.True(f.Execute());
             Assert.Null(f.ItemFound);
         }
diff --git a/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs b/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
index 22e3eb6a34c..0c7f25086fd 100644
--- a/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
+++ b/src/Tasks.UnitTests/GenerateBindingRedirects_Tests.cs
@@ -310,7 +310,7 @@ private BindingRedirectsExecutionResult GenerateBindingRedirects(string appConfi
             GenerateBindingRedirects bindingRedirects = new GenerateBindingRedirects
             {
                 BuildEngine = engine,
-                SuggestedRedirects = suggestedRedirects ?? new ITaskItem[] { },
+                SuggestedRedirects = suggestedRedirects ?? System.Array.Empty<ITaskItem>(),
                 AppConfigFile = new TaskItem(appConfigFile),
                 OutputAppConfigFile = new TaskItem(outputAppConfig)
             };
diff --git a/src/Tasks.UnitTests/Hash_Tests.cs b/src/Tasks.UnitTests/Hash_Tests.cs
index e2b64378d47..ff5e3a2819d 100644
--- a/src/Tasks.UnitTests/Hash_Tests.cs
+++ b/src/Tasks.UnitTests/Hash_Tests.cs
@@ -39,7 +39,7 @@ public void HashTaskEmptyInputTest()
             var nullItemsHash = ExecuteHashTask(null);
             Assert.Null(nullItemsHash);
 
-            var zeroLengthItemsHash = ExecuteHashTask(new ITaskItem[0]);
+            var zeroLengthItemsHash = ExecuteHashTask(System.Array.Empty<ITaskItem>());
             Assert.Null(zeroLengthItemsHash);
         }
 
diff --git a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
index b389d8c784c..e6388b02331 100644
--- a/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
+++ b/src/Tasks.UnitTests/WriteCodeFragment_Tests.cs
@@ -135,7 +135,7 @@ public void NoAttributesShouldEmitNoFile()
             MockEngine engine = new MockEngine(true);
             task.BuildEngine = engine;
             task.Language = "c#";
-            task.AssemblyAttributes = new TaskItem[] { }; // MSBuild sets an empty array
+            task.AssemblyAttributes = Array.Empty<TaskItem>(); // MSBuild sets an empty array
             task.OutputFile = new TaskItem(file);
             bool result = task.Execute();
 
diff --git a/src/Utilities.UnitTests/MuxLogger_Tests.cs b/src/Utilities.UnitTests/MuxLogger_Tests.cs
index 21fcfb9f78c..1ed22c96d67 100644
--- a/src/Utilities.UnitTests/MuxLogger_Tests.cs
+++ b/src/Utilities.UnitTests/MuxLogger_Tests.cs
@@ -54,7 +54,7 @@ public void SimpleBuildWithNoLoggers()
             MuxLogger muxLogger = new MuxLogger();
             BuildParameters parameters = new BuildParameters(ProjectCollection.GlobalProjectCollection);
             parameters.Loggers = new ILogger[] { muxLogger };
-            buildManager.Build(parameters, new BuildRequestData(project, new string[0], null));
+            buildManager.Build(parameters, new BuildRequestData(project, Array.Empty<string>(), null));
         }
 
         /// <summary>
@@ -94,7 +94,7 @@ public void BuildWithMuxLoggerEquivalentToNormalLogger()
             ProjectInstance project = (new Project(XmlReader.Create(new StringReader(projectBody)), null, ObjectModelHelpers.MSBuildDefaultToolsVersion, projectCollection)).CreateProjectInstance();
             BuildParameters parameters = new BuildParameters(projectCollection);
             parameters.Loggers = new ILogger[] { mockLogger2 };
-            buildManager.Build(parameters, new BuildRequestData(project, new string[0], null));
+            buildManager.Build(parameters, new BuildRequestData(project, Array.Empty<string>(), null));
 
             // Build with the mux logger
             MuxLogger muxLogger = new MuxLogger();
@@ -109,7 +109,7 @@ public void BuildWithMuxLoggerEquivalentToNormalLogger()
 
             try
             {
-                BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, new string[0], null));
+                BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, Array.Empty<string>(), null));
                 muxLogger.RegisterLogger(submission.SubmissionId, mockLogger);
                 submission.Execute();
             }
@@ -149,7 +149,7 @@ public void OneSubmissionOneLogger()
 
             try
             {
-                BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, new string[0], null));
+                BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, Array.Empty<string>(), null));
 
                 muxLogger.RegisterLogger(submission.SubmissionId, mockLogger);
                 submission.Execute();
@@ -202,11 +202,11 @@ public void TwoSubmissionsWithSeparateLoggers()
 
             try
             {
-                BuildSubmission submission1 = buildManager.PendBuildRequest(new BuildRequestData(project1, new string[0], null));
+                BuildSubmission submission1 = buildManager.PendBuildRequest(new BuildRequestData(project1, Array.Empty<string>(), null));
                 muxLogger.RegisterLogger(submission1.SubmissionId, mockLogger1);
                 submission1.Execute();
 
-                BuildSubmission submission2 = buildManager.PendBuildRequest(new BuildRequestData(project2, new string[0], null));
+                BuildSubmission submission2 = buildManager.PendBuildRequest(new BuildRequestData(project2, Array.Empty<string>(), null));
                 muxLogger.RegisterLogger(submission2.SubmissionId, mockLogger2);
                 submission2.Execute();
             }
@@ -255,7 +255,7 @@ public void OneSubmissionTwoLoggers()
             buildManager.BeginBuild(parameters);
             try
             {
-                BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, new string[0], null));
+                BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, Array.Empty<string>(), null));
 
                 muxLogger.RegisterLogger(submission.SubmissionId, mockLogger1);
                 muxLogger.RegisterLogger(submission.SubmissionId, mockLogger2);
@@ -306,7 +306,7 @@ public void RegisteringLoggerDuringBuildThrowsException()
             {
                 try
                 {
-                    BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, new string[0], null));
+                    BuildSubmission submission = buildManager.PendBuildRequest(new BuildRequestData(project, Array.Empty<string>(), null));
 
                     submission.ExecuteAsync(null, null);
                     projectStartedEvent.WaitOne();
diff --git a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
index 4578651a935..9bd65b8f09c 100644
--- a/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
+++ b/src/Utilities.UnitTests/ToolLocationHelper_Tests.cs
@@ -2819,7 +2819,7 @@ private static string[] GetDirectories(string path, string pattern)
             {
                 return new[] { @"{runtime-base}\v1.2.30617", @"{runtime-base}\v1.2.x86dbg", @"{runtime-base}\v1.2.x86fre" };
             }
-            return new string[0];
+            return Array.Empty<string>();
         }
 
         /// <summary>
@@ -4084,7 +4084,7 @@ public void GetPlatformsForSDKNullSDKVersion()
         [Fact]
         public void GetPlatformsForSDKWithNoInstalledTargetPlatforms()
         {
-            ToolLocationHelper.GetPlatformsForSDK("AnySDK", new Version("1.0"), new string[0], "").Any().ShouldBeFalse();
+            ToolLocationHelper.GetPlatformsForSDK("AnySDK", new Version("1.0"), Array.Empty<string>(), "").Any().ShouldBeFalse();
         }
 
         /// <summary>
@@ -4753,7 +4753,7 @@ private static IEnumerable<string> GetRegistrySubKeyNames(RegistryKey baseKey, s
                 }
             }
 
-            return new string[] { };
+            return Array.Empty<string>();
         }
 
         /// <summary>
