diff --git a/src/Build/BackEnd/BuildManager/BuildParameters.cs b/src/Build/BackEnd/BuildManager/BuildParameters.cs
index a8d528d4fb4..f33174f7afb 100644
--- a/src/Build/BackEnd/BuildManager/BuildParameters.cs
+++ b/src/Build/BackEnd/BuildManager/BuildParameters.cs
@@ -211,6 +211,8 @@ public class BuildParameters : ITranslatable
 
         private bool _isBuildCheckEnabled;
 
+        private bool _isTelemetryEnabled = true;
+
         /// <summary>
         /// The settings used to load the project under build
         /// </summary>
@@ -848,6 +850,17 @@ public bool IsBuildCheckEnabled
             set => _isBuildCheckEnabled = value;
         }
 
+        /// <summary>
+        /// Gets or sets an indication if telemetry is enabled.
+        /// This is reserved for future usage - we will likely add a whole dictionary of enablement per telemetry namespace
+        ///  as we plan to have variable sampling rate per various sources.
+        /// </summary>
+        internal bool IsTelemetryEnabled
+        {
+            get => _isTelemetryEnabled;
+            set => _isTelemetryEnabled = value;
+        }
+
         /// <summary>
         /// Gets or sets the project cache description to use for all <see cref="BuildSubmission"/> or <see cref="GraphBuildSubmission"/>
         /// in addition to any potential project caches described in each project.
@@ -913,6 +926,7 @@ void ITranslatable.Translate(ITranslator translator)
             translator.Translate(ref _interactive);
             translator.Translate(ref _question);
             translator.Translate(ref _isBuildCheckEnabled);
+            translator.Translate(ref _isTelemetryEnabled);
             translator.TranslateEnum(ref _projectIsolationMode, (int)_projectIsolationMode);
             translator.Translate(ref _reportFileAccesses);
 
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index b3bfc2db8e8..193a0a10a4f 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -1715,12 +1715,28 @@ private void FlushProjStats(ProjectFinishedEventArgs finsEventArgs)
             Console.WriteLine("=================================================");
             Console.WriteLine($"Stats for [{finsEventArgs.ProjectFile}, {suffix}");
             Console.WriteLine($"Total Defined  Tasks: {stats.TotalTasksCount}");
+            Console.WriteLine($"Total Tasks Executions: {stats.TotalTasksExecutionsCount}");
             Console.WriteLine($"Total Executed Tasks: {stats.TotalExecutedTasksCount}");
             Console.WriteLine($"Total task exec time: {stats.TotalTasksExecution:mm\\:ss\\.fff}");
             Console.WriteLine();
             Console.WriteLine($"Defined  Custom Tasks: {stats.CustomTasksCount}");
+            Console.WriteLine($"Custom Tasks Executions: {stats.CustomTasksExecutionsCount}");
             Console.WriteLine($"Executed Custom Tasks: {stats.ExecutedCustomTasksCount}");
             Console.WriteLine($"Custom task exec time: {stats.TotalCustomTasksExecution:mm\\:ss\\.fff}");
+            Console.WriteLine();
+            Console.WriteLine();
+            Console.WriteLine($"Total Defined  Targets: {stats.TotalTargetsCount}");
+            Console.WriteLine($"Total Targets Executions: {stats.TotalTargetsExecutionsCount}");
+            Console.WriteLine();
+            Console.WriteLine($"Defined  Custom Targets: {stats.CustomTargetsCount}");
+            Console.WriteLine($"Executed Custom Targets: {stats.ExecutedCustomTargetsCount}");
+            Console.WriteLine();
+            Console.WriteLine();
+            Console.WriteLine("Top tasks by cumulative execution time:");
+            foreach (var pair in stats.TopTasksByCumulativeExecution)
+            {
+                Console.WriteLine($"{pair.Value}: {pair.Key}");
+            }
             Console.WriteLine("=================================================");
         }
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 7d8dd09bfe5..378316a71ad 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -771,6 +771,7 @@ private async Task RequestThreadProc(bool setThreadParameters)
         {
             Exception thrownException = null;
             BuildResult result = null;
+            ProjectBuildStats stats = null;
 
             try
             {
@@ -780,7 +781,7 @@ private async Task RequestThreadProc(bool setThreadParameters)
                 }
                 MSBuildEventSource.Log.RequestThreadProcStart();
                 VerifyEntryInActiveState();
-                result = await BuildProject();
+                (result, stats) = await BuildProject();
                 MSBuildEventSource.Log.RequestThreadProcStop();
             }
             catch (InvalidProjectFileException ex)
@@ -866,71 +867,19 @@ private async Task RequestThreadProc(bool setThreadParameters)
                     result = new BuildResult(_requestEntry.Request, thrownException);
                 }
 
-                ReportResultAndCleanUp(result);
+                ReportResultAndCleanUp(result, stats);
             }
         }
 
-        ////public class ProjectBuildStats
-        ////{
-        ////    public int TotalTasksCount { get; set; }
-        ////    public int CustomTasksCount { get; set; }
-        ////    public int TotalExecutedTasksCount { get; set; }
-        ////    public int ExecutedCustomTasksCount { get; set; }
-        ////    public TimeSpan TotalTasksExecution { get; set; }
-        ////    public TimeSpan TotalCustomTasksExecution { get; set; }
-
-        ////    // todo top N tasks - names (unhashed if not custom) and time
-        ////}
-
         /// <summary>
         /// Reports this result to the engine and cleans up.
         /// </summary>
-        private void ReportResultAndCleanUp(BuildResult result)
+        private void ReportResultAndCleanUp(BuildResult result, ProjectBuildStats stats)
         {
             if (_projectLoggingContext != null)
             {
                 try
                 {
-                    TaskRegistry taskReg = _requestEntry.RequestConfiguration.Project.TaskRegistry;
-                    ProjectBuildStats stats = new();
-                    CollectTasksStats(taskReg, stats);
-
-                    // Custom tasks count
-                    // Total tasks count
-                    // Executed tasks count (+ number of executions and total time of execution?)
-                    // Custom tasks executed count
-                    // Top tasks execution cumulative. Top tasks execution without aggregation
-                    // And similarly for Targets - custom vs builtin
-
-                    void CollectTasksStats(TaskRegistry taskRegistry, ProjectBuildStats projectBuildStats)
-                    {
-                        if (taskRegistry == null)
-                        {
-                            return;
-                        }
-
-                        foreach (TaskRegistry.RegisteredTaskRecord registeredTaskRecord in taskRegistry.TaskRegistrations.Values.SelectMany(record => record))
-                        {
-                            // registeredTaskRecord.TaskIdentity.Name
-
-                            projectBuildStats.TotalTasksCount++;
-                            projectBuildStats.TotalTasksExecution += registeredTaskRecord.Statistics.ExecutedTime;
-                            projectBuildStats.TotalExecutedTasksCount += registeredTaskRecord.Statistics.ExecutedCount;
-
-                            if (registeredTaskRecord.Statistics.IsCustom)
-                            {
-                                projectBuildStats.CustomTasksCount++;
-                                projectBuildStats.TotalCustomTasksExecution += registeredTaskRecord.Statistics.ExecutedTime;
-                                projectBuildStats.ExecutedCustomTasksCount +=
-                                    registeredTaskRecord.Statistics.ExecutedCount;
-                            }
-                        }
-
-                        CollectTasksStats(taskRegistry.Toolset?._defaultTaskRegistry, projectBuildStats);
-                        CollectTasksStats(taskRegistry.Toolset?._overrideTaskRegistry, projectBuildStats);
-                    }
-
-
                     _projectLoggingContext.LogProjectFinished(result.OverallResult == BuildResultCode.Success, stats);
                 }
                 catch (Exception ex) when (!ExceptionHandling.IsCriticalException(ex))
@@ -1153,7 +1102,7 @@ private void SetProjectCurrentDirectory()
         /// <summary>
         /// Kicks off the build of the project file.  Doesn't return until the build is complete (or aborted.)
         /// </summary>
-        private async Task<BuildResult> BuildProject()
+        private async Task<(BuildResult, ProjectBuildStats)> BuildProject()
         {
             ErrorUtilities.VerifyThrow(_targetBuilder != null, "Target builder is null");
 
@@ -1256,10 +1205,14 @@ private async Task<BuildResult> BuildProject()
                         _requestEntry.RequestConfiguration.ResultsNodeId);
                 }
 
+                ProjectBuildStats projectBuildStats = GetPreBuildStatistics();
+
                 // Build the targets
                 BuildResult result = await _targetBuilder.BuildTargets(_projectLoggingContext, _requestEntry, this,
                     allTargets, _requestEntry.RequestConfiguration.BaseLookup, _cancellationTokenSource.Token);
 
+                UpdateStatisticsPostBuild(projectBuildStats);
+
                 result = _requestEntry.Request.ProxyTargets == null
                     ? result
                     : CopyTargetResultsFromProxyTargetsToRealTargets(result);
@@ -1270,46 +1223,16 @@ private async Task<BuildResult> BuildProject()
                         string.Join(", ", allTargets));
                 }
 
-                return result;
+                return (result, projectBuildStats);
             }
             finally
             {
                 buildCheckManager?.EndProjectRequest(
                     new CheckLoggingContext(_nodeLoggingContext.LoggingService, _projectLoggingContext.BuildEventContext),
                     _requestEntry.RequestConfiguration.ProjectFullPath);
-
-                TaskRegistry taskReg = _requestEntry.RequestConfiguration.Project.TaskRegistry;
-                int tasksCount = GetTasksRegistrationsCount(taskReg);
-
-                // Custom tasks count
-                // Total tasks count
-                // Executed tasks count (+ number of executions and total time of execution?)
-                // Custom tasks executed count
-                // Top tasks execution cumulative. Top tasks execution without aggregation
-                // And similarly for Targets - custom vs builtin
-
-
-                int GetTasksRegistrationsCount(TaskRegistry taskRegistry)
-                {
-                    if (taskRegistry == null)
-                    {
-                        return 0;
-                    }
-
-                    // This is proper - account for a situation where multiple tasks with same name, but from different assemblies are registered.
-                    // int registrationsCount = taskRegistry.TaskRegistrations.Values.Sum(v => v.Count);
-                    // But - let's make it fast and simple
-                    int registrationsCount = taskRegistry.TaskRegistrations.Count;
-
-                    // taskRegistry.TaskRegistrations.Values.First().First().Statistics
-
-                    return
-                        registrationsCount +
-                        GetTasksRegistrationsCount(taskRegistry.Toolset?._defaultTaskRegistry) +
-                        GetTasksRegistrationsCount(taskRegistry.Toolset?._overrideTaskRegistry);
-                }
             }
 
+
             BuildResult CopyTargetResultsFromProxyTargetsToRealTargets(BuildResult resultFromTargetBuilder)
             {
                 var proxyTargetMapping = _requestEntry.Request.ProxyTargets.ProxyTargetToRealTargetMap;
@@ -1340,6 +1263,89 @@ BuildResult CopyTargetResultsFromProxyTargetsToRealTargets(BuildResult resultFro
             }
         }
 
+        private ProjectBuildStats GetPreBuildStatistics()
+        {
+            if (!_componentHost.BuildParameters.IsTelemetryEnabled)
+            {
+                return null;
+            }
+
+            ProjectBuildStats stats = new ProjectBuildStats(false);
+
+            IResultsCache resultsCache = (IResultsCache)_componentHost.GetComponent(BuildComponentType.ResultsCache);
+            BuildResult existingBuildResult = resultsCache.GetResultsForConfiguration(_requestEntry.Request.ConfigurationId);
+
+            stats.TotalTargetsCount = (short)_requestEntry.RequestConfiguration.Project.TargetsCount;
+
+            stats.CustomTargetsCount = (short)
+                _requestEntry.RequestConfiguration.Project.Targets.Count(t =>
+                    IsCustomTargetPath(t.Value.FullPath));
+
+            if (existingBuildResult?.ResultsByTarget != null && stats.CustomTargetsCount > 0)
+            {
+                stats.ExecutedCustomTargetsCount = (short)_requestEntry.RequestConfiguration.Project.Targets
+                    .Where(t => IsCustomTargetPath(t.Value.FullPath))
+                    .Count(t => existingBuildResult.ResultsByTarget.ContainsKey(t.Key));
+            }
+
+            stats.TotalTargetsExecutionsCount = (short)(existingBuildResult?.ResultsByTarget.Count ?? 0);
+
+            return stats;
+        }
+
+        private void UpdateStatisticsPostBuild(ProjectBuildStats stats)
+        {
+            if (stats == null)
+            {
+                return;
+            }
+
+            IResultsCache resultsCache = (IResultsCache)_componentHost.GetComponent(BuildComponentType.ResultsCache);
+            // The TargetBuilder filters out results for targets not explicitly requested before returning the result.
+            // Hence we need to fetch the original result from the cache - to get the data for all executed targets.
+            BuildResult unfilteredResult = resultsCache.GetResultsForConfiguration(_requestEntry.Request.ConfigurationId);
+
+            // Count only new executions
+            stats.TotalTargetsExecutionsCount = (short)(unfilteredResult.ResultsByTarget.Count - stats.TotalTargetsExecutionsCount);
+
+            if (stats.CustomTargetsCount > 0)
+            {
+                int executedCustomTargetsCount = _requestEntry.RequestConfiguration.Project.Targets
+                    .Where(t => IsCustomTargetPath(t.Value.FullPath))
+                    .Count(t => unfilteredResult.ResultsByTarget.ContainsKey(t.Key));
+
+                // Count only new executions
+                stats.ExecutedCustomTargetsCount = (short)(executedCustomTargetsCount - stats.ExecutedCustomTargetsCount);
+            }
+
+            TaskRegistry taskReg = _requestEntry.RequestConfiguration.Project.TaskRegistry;
+            CollectTasksStats(taskReg, stats);
+
+            void CollectTasksStats(TaskRegistry taskRegistry, ProjectBuildStats projectBuildStats)
+            {
+                if (taskRegistry == null)
+                {
+                    return;
+                }
+
+                foreach (TaskRegistry.RegisteredTaskRecord registeredTaskRecord in taskRegistry.TaskRegistrations.Values.SelectMany(record => record))
+                {
+                    projectBuildStats.AddTask(registeredTaskRecord.TaskIdentity.Name,
+                        registeredTaskRecord.Statistics.ExecutedTime,
+                        registeredTaskRecord.Statistics.ExecutedCount,
+                        registeredTaskRecord.GetIsCustom());
+
+                    registeredTaskRecord.Statistics.Reset();
+                }
+
+                CollectTasksStats(taskRegistry.Toolset?._defaultTaskRegistry, projectBuildStats);
+                CollectTasksStats(taskRegistry.Toolset?._overrideTaskRegistry, projectBuildStats);
+            }
+        }
+
+        private static bool IsCustomTargetPath(string targetPath)
+            =>  !targetPath.EndsWith(".metaproj", StringComparison.OrdinalIgnoreCase) && !FileClassifier.Shared.IsBuiltInLogic(targetPath);
+
         /// <summary>
         /// Saves the current operating environment.
         /// </summary>
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 8599d03fe13..c9e0fef5aba 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -450,13 +450,6 @@ private static void RegisterTasksFromUsingTaskElement
                 // and let's consider all tasks imported by common targets as non custom logic.
                 && !FileClassifier.Shared.IsBuiltInLogic(projectUsingTaskXml.ContainingProject.FullPath);
 
-            // TODO: We might want to decide this post-hoc (on project done), based on TaskRegistration.AssemblyLoadInfo
-            //  as only then we might better know the location of dotnet install root
-            if (isCustomTask)
-            {
-                Debugger.Launch();
-            }
-
             taskRegistry.RegisterTask(
                 taskName,
                 AssemblyLoadInfo.Create(assemblyName, assemblyFile),
@@ -466,7 +459,7 @@ private static void RegisterTasksFromUsingTaskElement
                 loggingContext,
                 projectUsingTaskXml,
                 ConversionUtilities.ValidBooleanTrue(overrideUsingTask),
-                isCustomTask);
+                projectUsingTaskXml.ContainingProject.FullPath);
         }
 
         private static Dictionary<string, string> CreateTaskFactoryParametersDictionary(int? initialCount = null)
@@ -712,7 +705,7 @@ private void RegisterTask(
             LoggingContext loggingContext,
             ProjectUsingTaskElement projectUsingTaskInXml,
             bool overrideTask,
-            bool isCustom)
+            string containingFileFullPath)
         {
             ErrorUtilities.VerifyThrowInternalLength(taskName, nameof(taskName));
             ErrorUtilities.VerifyThrowInternalNull(assemblyLoadInfo);
@@ -740,7 +733,7 @@ private void RegisterTask(
                 taskFactoryParameters,
                 inlineTaskRecord,
                 Interlocked.Increment(ref _nextRegistrationOrderId),
-                isCustom);
+                containingFileFullPath);
 
             if (overrideTask)
             {
@@ -1185,14 +1178,28 @@ internal class RegisteredTaskRecord : ITranslatable
             /// </summary>
             private int _registrationOrderId;
 
-            internal Stats Statistics = new Stats();
+            internal Stats Statistics { get; private init; } = new Stats();
+
+            public bool GetIsCustom()
+            {
+                return
+                (
+                    // TODO: some taskfactories are used within our common targets - but we should flag it somehow as well
+                    (!string.IsNullOrEmpty(_taskFactory)) ||
+
+                 (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyName) && !AssemblyLoadsTracker.IsBuiltinType(_taskFactoryAssemblyLoadInfo.AssemblyName)) ||
+                 (!string.IsNullOrEmpty(_taskFactoryAssemblyLoadInfo.AssemblyFile) && !AssemblyLoadsTracker.IsBuiltinType(Path.GetFileName(_taskFactoryAssemblyLoadInfo.AssemblyFile)) && !FileClassifier.Shared.IsBuiltInLogic(_taskFactoryAssemblyLoadInfo.AssemblyFile)))
+                    // and let's consider all tasks imported by common targets as non custom logic.
+                    && !FileClassifier.Shared.IsBuiltInLogic(Statistics?.ContainingFileFullPath);
+            }
 
             internal class Stats
             {
-                public bool IsCustom { get; set; }
                 public short ExecutedCount { get; private set; }
                 private readonly Stopwatch _executedSw  = new Stopwatch();
 
+                public string ContainingFileFullPath { get; set; }
+
                 public TimeSpan ExecutedTime => _executedSw.Elapsed;
 
                 public void ExecutionStarted()
@@ -1205,6 +1212,12 @@ public void ExecutionStoped()
                 {
                     _executedSw.Stop();
                 }
+
+                public void Reset()
+                {
+                    ExecutedCount = 0;
+                    _executedSw.Reset();
+                }
             }
 
             /// <summary>
@@ -1217,7 +1230,7 @@ internal RegisteredTaskRecord(
                 Dictionary<string, string> taskFactoryParameters,
                 ParameterGroupAndTaskElementRecord inlineTask,
                 int registrationOrderId,
-                bool isCustom)
+                string containingFileFullPath)
             {
                 ErrorUtilities.VerifyThrowArgumentNull(assemblyLoadInfo, "AssemblyLoadInfo");
                 _registeredName = registeredName;
@@ -1246,7 +1259,7 @@ internal RegisteredTaskRecord(
                     _parameterGroupAndTaskBody = new ParameterGroupAndTaskElementRecord();
                 }
 
-                Statistics.IsCustom = isCustom;
+                Statistics.ContainingFileFullPath = containingFileFullPath;
             }
 
             private RegisteredTaskRecord()
diff --git a/src/Framework/ProjectFinishedEventArgs.cs b/src/Framework/ProjectFinishedEventArgs.cs
index d9916ce0b0b..e9de8c53735 100644
--- a/src/Framework/ProjectFinishedEventArgs.cs
+++ b/src/Framework/ProjectFinishedEventArgs.cs
@@ -2,21 +2,90 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
+using System.Collections.Generic;
 using System.IO;
+using System.Linq;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Framework
 {
     public class ProjectBuildStats
     {
+        // TODO: this might be configurable e.g. via telemetry sensitivity level?
+        private const int TopNTasksToReport = 5;
+
+        public ProjectBuildStats(bool isDeserialized)
+        {
+            if (!isDeserialized)
+            {
+                _topTasksByCumulativeExecution =
+                    // sorted in descending order, plus we cannot return 0 on equality as SortedList would throw
+                    new SortedList<TimeSpan, string>(Comparer<TimeSpan>.Create((a, b) => b >= a ? 1 : -1));
+            }
+        }
+
+        public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, bool isCustom)
+        {
+            if (TopNTasksToReport > 0 && cumulativeExectionTime > TimeSpan.Zero)
+            {
+                if (_topTasksByCumulativeExecution!.Count == 0 ||
+                    _topTasksByCumulativeExecution.Last().Key < cumulativeExectionTime)
+                {
+                    _topTasksByCumulativeExecution.Add(cumulativeExectionTime, (isCustom ? "Custom:" : null) + name);
+                }
+
+                while (_topTasksByCumulativeExecution!.Count > TopNTasksToReport)
+                {
+                    _topTasksByCumulativeExecution.RemoveAt(_topTasksByCumulativeExecution.Count - 1);
+                }
+            }
+
+            TotalTasksCount++;
+            TotalTasksExecution += cumulativeExectionTime;
+            TotalTasksExecutionsCount += executionsCount;
+            if (executionsCount > 0)
+            {
+                TotalExecutedTasksCount++;
+            }
+
+            if (isCustom)
+            {
+                CustomTasksCount++;
+                TotalCustomTasksExecution += cumulativeExectionTime;
+                CustomTasksExecutionsCount += executionsCount;
+                if (executionsCount > 0)
+                {
+                    ExecutedCustomTasksCount++;
+                }
+            }
+        }
+
         public short TotalTasksCount { get; set; }
         public short CustomTasksCount { get; set; }
+        public short TotalTasksExecutionsCount { get; set; }
         public short TotalExecutedTasksCount { get; set; }
+        public short CustomTasksExecutionsCount { get; set; }
         public short ExecutedCustomTasksCount { get; set; }
         public TimeSpan TotalTasksExecution { get; set; }
         public TimeSpan TotalCustomTasksExecution { get; set; }
 
+        public short TotalTargetsCount { get; set; }
+        public short CustomTargetsCount { get; set; }
+        public short TotalTargetsExecutionsCount { get; set; }
+        public short ExecutedCustomTargetsCount { get; set; }
+
         // todo top N tasks - names (unhashed if not custom) and time
+
+        public IReadOnlyCollection<KeyValuePair<TimeSpan, string>> TopTasksByCumulativeExecution =>
+            _topTasksByCumulativeExecution ?? _topTasksDeserialized ?? [];
+
+        internal void SetDeserializedTopN(IReadOnlyCollection<KeyValuePair<TimeSpan, string>> topNTasks)
+        {
+            _topTasksDeserialized = topNTasks;
+        }
+
+        private IReadOnlyCollection<KeyValuePair<TimeSpan, string>>? _topTasksDeserialized;
+        private readonly SortedList<TimeSpan, string>? _topTasksByCumulativeExecution;
     }
 
     /// <summary>
@@ -96,13 +165,27 @@ internal override void WriteToStream(BinaryWriter writer)
             if (ProjectBuildStats != null)
             {
                 writer.Write((byte)1);
-                writer.Write(ProjectBuildStats.TotalTasksCount);
-                writer.Write(ProjectBuildStats.CustomTasksCount);
-                writer.Write(ProjectBuildStats.TotalExecutedTasksCount);
-                writer.Write(ProjectBuildStats.ExecutedCustomTasksCount);
+                writer.Write7BitEncodedInt(ProjectBuildStats.TotalTasksCount);
+                writer.Write7BitEncodedInt(ProjectBuildStats.CustomTasksCount);
+                writer.Write7BitEncodedInt(ProjectBuildStats.TotalTasksExecutionsCount);
+                writer.Write7BitEncodedInt(ProjectBuildStats.TotalExecutedTasksCount);
+                writer.Write7BitEncodedInt(ProjectBuildStats.CustomTasksExecutionsCount);
+                writer.Write7BitEncodedInt(ProjectBuildStats.ExecutedCustomTasksCount);
 
                 writer.Write(ProjectBuildStats.TotalTasksExecution.Ticks);
                 writer.Write(ProjectBuildStats.TotalCustomTasksExecution.Ticks);
+
+                writer.Write7BitEncodedInt(ProjectBuildStats.TotalTargetsCount);
+                writer.Write7BitEncodedInt(ProjectBuildStats.CustomTargetsCount);
+                writer.Write7BitEncodedInt(ProjectBuildStats.TotalTargetsExecutionsCount);
+                writer.Write7BitEncodedInt(ProjectBuildStats.ExecutedCustomTargetsCount);
+
+                writer.Write7BitEncodedInt(ProjectBuildStats.TopTasksByCumulativeExecution.Count);
+                foreach (var pair in ProjectBuildStats.TopTasksByCumulativeExecution)
+                {
+                    writer.Write(pair.Key.Ticks);
+                    writer.Write(pair.Value);
+                }
             }
             else
             {
@@ -124,17 +207,39 @@ internal override void CreateFromStream(BinaryReader reader, int version)
 
             if (reader.ReadByte() == 1)
             {
-                ProjectBuildStats = new ProjectBuildStats()
+                ProjectBuildStats = new ProjectBuildStats(true)
                 {
-                    TotalTasksCount = reader.ReadInt16(),
-                    CustomTasksCount = reader.ReadInt16(),
-                    TotalExecutedTasksCount = reader.ReadInt16(),
-                    ExecutedCustomTasksCount = reader.ReadInt16(),
+                    TotalTasksCount = (short)reader.Read7BitEncodedInt(),
+                    CustomTasksCount = (short)reader.Read7BitEncodedInt(),
+                    TotalTasksExecutionsCount = (short)reader.Read7BitEncodedInt(),
+                    TotalExecutedTasksCount = (short)reader.Read7BitEncodedInt(),
+                    CustomTasksExecutionsCount = (short)reader.Read7BitEncodedInt(),
+                    ExecutedCustomTasksCount = (short)reader.Read7BitEncodedInt(),
                     TotalTasksExecution = TimeSpan.FromTicks(reader.ReadInt64()),
                     TotalCustomTasksExecution = TimeSpan.FromTicks(reader.ReadInt64()),
+
+                    TotalTargetsCount = (short)reader.Read7BitEncodedInt(),
+                    CustomTargetsCount = (short)reader.Read7BitEncodedInt(),
+                    TotalTargetsExecutionsCount = (short)reader.Read7BitEncodedInt(),
+                    ExecutedCustomTargetsCount = (short)reader.Read7BitEncodedInt(),
                 };
+
+                ProjectBuildStats.SetDeserializedTopN(ReadTaskStats(reader));
+            }
+        }
+
+        private static IReadOnlyCollection<KeyValuePair<TimeSpan, string>> ReadTaskStats(BinaryReader reader)
+        {
+            int cnt = reader.Read7BitEncodedInt();
+            List<KeyValuePair<TimeSpan, string>> list = new (cnt);
+            for (int _ = 0; _ < cnt; _++)
+            {
+                list.Add(new KeyValuePair<TimeSpan, string>(TimeSpan.FromTicks(reader.ReadInt64()), reader.ReadString()));
             }
+
+            return list;
         }
+
         #endregion
 
         /// <summary>
