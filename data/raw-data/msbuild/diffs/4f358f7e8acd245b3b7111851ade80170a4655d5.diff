diff --git a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
index a0c83877c82..9b273fa870d 100644
--- a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
+++ b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
@@ -1189,7 +1189,8 @@ public override bool Execute()
             using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);
 
             // A path like "C:\path" in ZipArchive is saved as "C\path"
-            filePath = filePath.Replace(":\\", "\\");
+            // For unix-based systems path uses '/'
+            filePath = NativeMethodsShared.IsWindows ? filePath.Replace(":\\", "\\") : filePath.Replace("/", "\\");
 
             // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
             // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
@@ -1254,7 +1255,8 @@ public class {{taskName}} : Task
             using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);
 
             // A path like "C:\path" in ZipArchive is saved as "C\path"
-            filePath = filePath.Replace(":\\", "\\");
+            // For unix-based systems path uses '/'
+            filePath = NativeMethodsShared.IsWindows ? filePath.Replace(":\\", "\\") : filePath.Replace("/", "\\");
 
             // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
             // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
@@ -1313,7 +1315,8 @@ public void EmbedsGeneratedFileInBinlog()
             using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);
 
             // A path like "C:\path" in ZipArchive is saved as "C\path"
-            filePath = filePath.Replace(":\\", "\\");
+            // For unix-based systems path uses '/'
+            filePath = NativeMethodsShared.IsWindows ? filePath.Replace(":\\", "\\") : filePath.Replace("/", "\\");
 
             // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
             // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
@@ -1372,7 +1375,8 @@ public void EmbedsGeneratedFileInBinlogWhenFailsToCompile()
             using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);
 
             // A path like "C:\path" in ZipArchive is saved as "C\path"
-            filePath = filePath.Replace(":\\", "\\");
+            // For unix-based systems path uses '/'
+            filePath = NativeMethodsShared.IsWindows ? filePath.Replace(":\\", "\\") : filePath.Replace("/", "\\");
 
             // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
             // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
diff --git a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
index 658339f18dc..7f592543d58 100644
--- a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
+++ b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
@@ -709,7 +709,8 @@ public override bool Execute()
             using var zipArchive = new System.IO.Compression.ZipArchive(fileStream, System.IO.Compression.ZipArchiveMode.Read);
 
             // A path like "C:\path" in ZipArchive is saved as "C\path"
-            filePath = filePath.Replace(":\\", "\\");
+            // For unix-based systems path uses '/'
+            filePath = NativeMethodsShared.IsWindows ? filePath.Replace(":\\", "\\") : filePath.Replace("/", "\\");
 
             // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
             // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
@@ -774,7 +775,8 @@ public class {{taskName}} : Task
             using var zipArchive = new System.IO.Compression.ZipArchive(fileStream, System.IO.Compression.ZipArchiveMode.Read);
 
             // A path like "C:\path" in ZipArchive is saved as "C\path"
-            filePath = filePath.Replace(":\\", "\\");
+            // For unix-based systems path uses '/'
+            filePath = NativeMethodsShared.IsWindows ? filePath.Replace(":\\", "\\") : filePath.Replace("/", "\\");
 
             // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
             // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
@@ -833,12 +835,13 @@ public void EmbedsGeneratedFileInBinlog()
             using var zipArchive = new System.IO.Compression.ZipArchive(fileStream, System.IO.Compression.ZipArchiveMode.Read);
 
             // A path like "C:\path" in ZipArchive is saved as "C\path"
-            filePath = filePath.Replace(":\\", "\\");
+            // For unix-based systems path uses '/'
+            filePath = NativeMethodsShared.IsWindows ? filePath.Replace(":\\", "\\") : filePath.Replace("/", "\\");
 
             // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
             // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
             zipArchive.Entries.ShouldContain(zE => zE.FullName.EndsWith(filePath),
-                $"Binlog's embedded files didn't have the expected '{filePath}'.");
+               $"Binlog's embedded files didn't have the expected '{filePath}'.");
         }
 
         [Fact]
@@ -892,7 +895,8 @@ public void EmbedsGeneratedFileInBinlogWhenFailsToCompile()
             using var zipArchive = new System.IO.Compression.ZipArchive(fileStream, System.IO.Compression.ZipArchiveMode.Read);
 
             // A path like "C:\path" in ZipArchive is saved as "C\path"
-            filePath = filePath.Replace(":\\", "\\");
+            // For unix-based systems path uses '/'
+            filePath = NativeMethodsShared.IsWindows ? filePath.Replace(":\\", "\\") : filePath.Replace("/", "\\");
 
             // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
             // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
