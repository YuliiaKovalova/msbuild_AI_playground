diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 8804918dbc0..ae86ac8c7fa 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -39,6 +39,11 @@ internal sealed class EventSourceSink :
         /// </summary>
         public event BuildWarningEventHandler WarningRaised;
 
+        /// <summary>
+        /// This event is raised to log the start of a build submission.
+        /// </summary>
+        public event BuildSubmissionStartedEventHandler BuildSubmissionStarted;
+
         /// <summary>
         /// this event is raised to log the start of a build
         /// </summary>
@@ -247,6 +252,8 @@ public void Consume(BuildEventArgs buildEvent)
                 case ProjectFinishedEventArgs projectFinishedEvent:
                     RaiseProjectFinishedEvent(null, projectFinishedEvent);
                     break;
+                case BuildSubmissionStartedEventArgs buildSubmissionStartedEvent:
+                    break;
                 case BuildStartedEventArgs buildStartedEvent:
                     HaveLoggedBuildStartedEvent = true;
                     RaiseBuildStartedEvent(null, buildStartedEvent);
@@ -447,6 +454,40 @@ private void RaiseWarningEvent(object sender, BuildWarningEventArgs buildEvent)
             RaiseAnyEvent(sender, buildEvent);
         }
 
+        private void RaiseBuildSubmissionStartedEvent(object sender, BuildSubmissionStartedEventArgs buildEvent)
+        {
+            if (BuildSubmissionStarted != null)
+            {
+                try
+                {
+                    BuildSubmissionStarted(sender, buildEvent);
+                }
+                catch (LoggerException)
+                {
+                    // if a logger has failed politely, abort immediately
+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
+                    // if a fellow logger is throwing in an event handler.
+                    this.UnregisterAllEventHandlers();
+                    throw;
+                }
+                catch (Exception exception)
+                {
+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
+                    // if a fellow logger is throwing in an event handler.
+                    this.UnregisterAllEventHandlers();
+
+                    if (ExceptionHandling.IsCriticalException(exception))
+                    {
+                        throw;
+                    }
+
+                    InternalLoggerException.Throw(exception, buildEvent, "FatalErrorWhileLogging", false);
+                }
+            }
+
+            RaiseStatusEvent(sender, buildEvent);
+        }
+
         /// <summary>
         /// Raises a "build started" event to all registered loggers.
         /// </summary>
diff --git a/src/Framework/IEventSource.cs b/src/Framework/IEventSource.cs
index 2439db58eea..4ef85f23288 100644
--- a/src/Framework/IEventSource.cs
+++ b/src/Framework/IEventSource.cs
@@ -27,6 +27,11 @@ namespace Microsoft.Build.Framework
     /// </summary>
     public delegate void CustomBuildEventHandler(object sender, CustomBuildEventArgs e);
 
+    /// <summary>
+    /// Type of handler for BuildSubmissionStartedEvent events
+    /// </summary>
+    public delegate void BuildSubmissionStartedEventHandler(object sender, BuildSubmissionStartedEventArgs e);
+
     /// <summary>
     /// Type of handler for BuildStartedEvent events
     /// </summary>
