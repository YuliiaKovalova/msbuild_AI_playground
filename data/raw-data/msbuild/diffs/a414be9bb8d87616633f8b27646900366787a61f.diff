diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index a1dc52ac4c3..43fa2696859 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -657,10 +657,8 @@ public void BinlogFileNameParameterParsing(string parameters, string expectedBin
             {
                 Parameters = parameters
             };
-            var stampProvider = A.Fake<IBinlogPathParameterExpander>();
             string random = "xxxxx";
-            A.CallTo(() => stampProvider.ExpandParameter(A<string>.Ignored)).Returns(random);
-            binaryLogger.PathParameterExpander = stampProvider;
+            binaryLogger.PathParameterExpander = _ => random;
 
             var eventSource = A.Fake<IEventSource>();
 
@@ -671,6 +669,7 @@ public void BinlogFileNameParameterParsing(string parameters, string expectedBin
             File.Exists(binaryLogger.FilePath).ShouldBeTrue();
             FileUtilities.DeleteNoThrow(binaryLogger.FilePath);
 
+            // We need to create the file to satisfy the invariant set by the ctor of this testclass
             File.Create(_logFile);
         }
 
@@ -691,6 +690,7 @@ public void BinlogFileNameWildcardGeneration()
             File.Exists(binaryLogger.FilePath).ShouldBeTrue();
             FileUtilities.DeleteNoThrow(binaryLogger.FilePath);
 
+            // We need to create the file to satisfy the invariant set by the ctor of this testclass
             File.Create(_logFile);
         }
 
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 4b0ad6d5123..a7b005a1925 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -136,10 +136,13 @@ public enum ProjectImportsCollectionMode
         public string Parameters { get; set; }
 
         /// <summary>
-        /// Optional expander of wildcard(s) within the path parameter of a binlog <see cref="Parameters"/>.
-        /// See <see cref="IBinlogPathParameterExpander"/> for more details.
+        /// Optional expander of wildcard(s) within the LogFile path parameter of a binlog <see cref="Parameters"/>.
+        /// Wildcards can be used in the LogFile parameter in a form for curly brackets ('{}', '{[param]}').
+        /// Currently, the only supported wildcard is '{}', the optional parameters within the curly brackets
+        ///  are not currently supported, however the string parameter to the <see cref="PathParameterExpander"/> func
+        /// is reserved for this purpose.
         /// </summary>
-        public IBinlogPathParameterExpander PathParameterExpander { private get; set; } = new BinlogPathParameterExpander();
+        internal Func<string, string> PathParameterExpander { private get; set; } = ExpandPathParameter;
 
         /// <summary>
         /// Initializes the logger by subscribing to events of the specified event source and embedded content source.
@@ -482,30 +485,16 @@ private bool TryInterpretPathParameter(string parameter, out string filePath)
         }
 
         private string GetUniqueStamp()
-            => PathParameterExpander.ExpandParameter(string.Empty);
+            => (PathParameterExpander ?? ExpandPathParameter)(string.Empty);
 
-        private class BinlogPathParameterExpander : IBinlogPathParameterExpander
-        {
-            public string ExpandParameter(string parameters)
-                => $"{DateTime.UtcNow.ToString("yyyyMMddHHmmss")}-{GenerateRandomString(6)}";
+        private static string ExpandPathParameter(string parameters)
+            => $"{DateTime.UtcNow.ToString("yyyyMMdd-HHmmss")}--{ProcessId}--{StringUtils.GenerateRandomString(6)}";
 
-            private string GenerateRandomString(int length)
-            {
-                // Base64, 2^6 = 64
-                const int eachStringCharEncodesBites = 6;
-                const int eachByteHasBits = 8;
-                const double bytesNumNeededForSingleStringChar = eachStringCharEncodesBites / (double)eachByteHasBits;
-
-                int randomBytesNeeded = (int)Math.Ceiling(length * bytesNumNeededForSingleStringChar);
-                Random random = new();
-
-                byte[] randomBytes = new byte[randomBytesNeeded];
-                random.NextBytes(randomBytes);
-                // Base64: [A-Z], [a-z], [0-9], +, /, =
-                // We are replacing '/' to get a valid path
-                string randomBase64String = Convert.ToBase64String(randomBytes).Replace('/', '_');
-                return randomBase64String.Substring(0, length);
-            }
-        }
+        private static int ProcessId
+#if NET
+            => Environment.ProcessId;
+#else
+            => System.Diagnostics.Process.GetCurrentProcess().Id;
+#endif
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/IBinlogPathParameterExpander.cs b/src/Build/Logging/BinaryLogger/IBinlogPathParameterExpander.cs
deleted file mode 100644
index a7d692e2adb..00000000000
--- a/src/Build/Logging/BinaryLogger/IBinlogPathParameterExpander.cs
+++ /dev/null
@@ -1,23 +0,0 @@
-﻿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-namespace Microsoft.Build.Logging;
-
-/// <summary>
-/// Interface for expanding LogFile parameter wildcard(s) in a binary log.
-/// Wildcards can be used in the LogFile parameter in a form for curly brackets ('{}', '{[param]}').
-/// Currently, the only supported wildcard is '{}', the optional parameters within the curly brackets
-///  are not currently supported, however the string parameter to the <see cref="ExpandParameter"/> method
-/// is reserved for this purpose.
-/// </summary>
-public interface IBinlogPathParameterExpander
-{
-    /// <summary>
-    /// Expands the wildcard parameter in a binlog path parameter.
-    /// </summary>
-    /// <param name="parameters">
-    /// Reserved for future use, currently not used.
-    /// </param>
-    /// <returns>Replacement for the wildcard.</returns>
-    string ExpandParameter(string parameters);
-}
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index 84c0f92d3bf..a8972d29abb 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -196,7 +196,6 @@
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="BuildCheck\Logging\AnalyzerLoggingContext.cs" />
     <Compile Include="BuildCheck\Logging\AnalyzerLoggingContextFactory.cs" />
-    <Compile Include="Logging\BinaryLogger\IBinlogPathParameterExpander.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
     <Compile Include="BackEnd\Node\PartialBuildTelemetry.cs" />
diff --git a/src/Framework/StringUtils.cs b/src/Framework/StringUtils.cs
new file mode 100644
index 00000000000..e5502ab7320
--- /dev/null
+++ b/src/Framework/StringUtils.cs
@@ -0,0 +1,34 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+
+namespace Microsoft.Build.Framework;
+
+internal static class StringUtils
+{
+    /// <summary>
+    /// Generates a random string of the specified length.
+    /// The generated string is suitable for use in file paths.
+    /// The randomness distribution is given by the System.Random.
+    /// </summary>
+    /// <param name="length"></param>
+    /// <returns></returns>
+    internal static string GenerateRandomString(int length)
+    {
+        // Base64, 2^6 = 64
+        const int eachStringCharEncodesBites = 6;
+        const int eachByteHasBits = 8;
+        const double bytesNumNeededForSingleStringChar = eachStringCharEncodesBites / (double)eachByteHasBits;
+
+        int randomBytesNeeded = (int)Math.Ceiling(length * bytesNumNeededForSingleStringChar);
+        Random random = new();
+
+        byte[] randomBytes = new byte[randomBytesNeeded];
+        random.NextBytes(randomBytes);
+        // Base64: [A-Z], [a-z], [0-9], +, /, =
+        // We are replacing '/' to get a valid path
+        string randomBase64String = Convert.ToBase64String(randomBytes).Replace('/', '_');
+        return randomBase64String.Substring(0, length);
+    }
+}
