diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 0a6df394738..d7c8e2690b6 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -491,6 +491,8 @@ public static Project FromFile(string file, ProjectOptions options)
                 options.EvaluationContext);
         }
 
+        static EvaluationContext _sharedEvaluationContext = EvaluationContext.Create(EvaluationContext.SharingPolicy.Shared);
+
         /// <summary>
         /// Create a <see cref="ProjectRootElement"/> based project.
         /// </summary>
@@ -505,7 +507,7 @@ public static Project FromProjectRootElement(ProjectRootElement rootElement, Pro
                 options.SubToolsetVersion,
                 options.ProjectCollection ?? ProjectCollection.GlobalProjectCollection,
                 options.LoadSettings,
-                options.EvaluationContext);
+                options.EvaluationContext ?? _sharedEvaluationContext);
         }
 
         /// <summary>
diff --git a/src/Build/Evaluation/ItemDataCollectionValue.cs b/src/Build/Evaluation/ItemDataCollectionValue.cs
index 6746c3707b6..70c1e7f9370 100644
--- a/src/Build/Evaluation/ItemDataCollectionValue.cs
+++ b/src/Build/Evaluation/ItemDataCollectionValue.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System.Collections.Generic;
-using System.Collections.Immutable;
 
 namespace Microsoft.Build.Evaluation
 {
@@ -54,7 +53,7 @@ public void Reset()
         /// </summary>
         private object _value;
 
-        public bool IsEmpty => _value == null || (_value is ImmutableList<I> list && list.Count == 0);
+        public bool IsEmpty => _value == null || (_value is List<I> list && list.Count == 0);
 
         public ItemDataCollectionValue(I item)
         {
@@ -63,12 +62,12 @@ public ItemDataCollectionValue(I item)
 
         public void Add(I item)
         {
-            if (_value is not ImmutableList<I> list)
+            if (_value is not List<I> list)
             {
-                list = ImmutableList<I>.Empty;
-                list = list.Add((I)_value);
+                list = new List<I>();
+                _value = list;
             }
-            _value = list.Add(item);
+            list.Add(item);
         }
 
         public void Delete(I item)
@@ -77,9 +76,9 @@ public void Delete(I item)
             {
                 _value = null;
             }
-            else if (_value is ImmutableList<I> list)
+            else if (_value is List<I> list)
             {
-                _value = list.Remove(item);
+                list.Remove(item);
             }
         }
 
@@ -89,9 +88,13 @@ public void Replace(I oldItem, I newItem)
             {
                 _value = newItem;
             }
-            else if (_value is ImmutableList<I> list)
+            else if (_value is List<I> list)
             {
-                _value = list.Replace(oldItem, newItem);
+                int index = list.FindIndex(item => object.ReferenceEquals(item, oldItem));
+                if (index >= 0)
+                {
+                    list[index] = newItem;
+                }
             }
         }
 
