diff --git a/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs b/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
index 106e03beaf3..2fdb186e768 100644
--- a/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/AssemblyTaskFactory_Tests.cs
@@ -699,7 +699,7 @@ private void SetupTaskFactory(IDictionary<string, string> factoryParameters, boo
 #else
             _loadInfo = AssemblyLoadInfo.Create(typeof(TaskToTestFactories).GetTypeInfo().Assembly.FullName, null);
 #endif
-            _loadedType = _taskFactory.InitializeFactory(_loadInfo, "TaskToTestFactories", new Dictionary<string, TaskPropertyInfo>(), string.Empty, factoryParameters, explicitlyLaunchTaskHost, null, ElementLocation.Create("NONE"), String.Empty);
+            _loadedType = _taskFactory.InitializeFactory(_loadInfo, "TaskToTestFactories", new Dictionary<string, TaskPropertyInfo>(), string.Empty, factoryParameters, explicitlyLaunchTaskHost, null, ElementLocation.Create("NONE"), String.Empty).LoadedType;
             Assert.True(_loadedType.Assembly.Equals(_loadInfo)); // "Expected the AssemblyLoadInfo to be equal"
         }
 
diff --git a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
index 0f2be626fca..8c69ae2dd95 100644
--- a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
@@ -1168,7 +1168,7 @@ private void InitializeHost(bool throwOnExecute)
             TaskBuilderTestTask.TaskBuilderTestTaskFactory taskFactory = new TaskBuilderTestTask.TaskBuilderTestTaskFactory();
             taskFactory.ThrowOnExecute = throwOnExecute;
             string taskName = "TaskBuilderTestTask";
-            (_host as TaskExecutionHost)._UNITTESTONLY_TaskFactoryWrapper = new TaskFactoryWrapper(taskFactory, loadedType, loadInfo, taskName, null);
+            (_host as TaskExecutionHost)._UNITTESTONLY_TaskFactoryWrapper = new TaskFactoryWrapper(taskFactory, new TypeInformation(loadedType), loadInfo, taskName, null);
             _host.InitializeForTask
                 (
                 this,
diff --git a/src/Build/Instance/ReflectableTaskPropertyInfo.cs b/src/Build/Instance/ReflectableTaskPropertyInfo.cs
index 93e9594b6ed..f54a5a6c143 100644
--- a/src/Build/Instance/ReflectableTaskPropertyInfo.cs
+++ b/src/Build/Instance/ReflectableTaskPropertyInfo.cs
@@ -22,7 +22,8 @@ internal class ReflectableTaskPropertyInfo : TaskPropertyInfo
         /// <summary>
         /// The type of the generated tasks.
         /// </summary>
-        private Type _taskType;
+        private readonly Func<string, BindingFlags, PropertyInfo> getProperty;
+        private readonly string taskName;
 
         /// <summary>
         /// Initializes a new instance of the <see cref="ReflectableTaskPropertyInfo"/> class.
@@ -33,7 +34,16 @@ internal ReflectableTaskPropertyInfo(TaskPropertyInfo taskPropertyInfo, Type tas
             : base(taskPropertyInfo.Name, taskPropertyInfo.PropertyType, taskPropertyInfo.Output, taskPropertyInfo.Required)
         {
             ErrorUtilities.VerifyThrowArgumentNull(taskType, nameof(taskType));
-            _taskType = taskType;
+            getProperty = taskType.GetProperty;
+            taskName = taskType.FullName;
+        }
+
+        internal ReflectableTaskPropertyInfo(TaskPropertyInfo taskPropertyInfo, TypeInformation typeInformation)
+            : base(taskPropertyInfo.Name, taskPropertyInfo.PropertyType, taskPropertyInfo.Output, taskPropertyInfo.Required)
+        {
+            ErrorUtilities.VerifyThrowArgumentNull(typeInformation, nameof(typeInformation));
+            getProperty = typeInformation.GetProperty;
+            taskName = typeInformation.TypeName;
         }
 
         /// <summary>
@@ -59,8 +69,8 @@ internal PropertyInfo Reflection
             {
                 if (_propertyInfo == null)
                 {
-                    _propertyInfo = _taskType.GetProperty(Name, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreCase);
-                    ErrorUtilities.VerifyThrow(_propertyInfo != null, "Could not find property {0} on type {1} that the task factory indicated should exist.", Name, _taskType.FullName);
+                    _propertyInfo = getProperty(Name, BindingFlags.Instance | BindingFlags.Public | BindingFlags.IgnoreCase);
+                    ErrorUtilities.VerifyThrow(_propertyInfo != null, "Could not find property {0} on type {1} that the task factory indicated should exist.", Name, taskName);
                 }
 
                 return _propertyInfo;
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index c0e9a0022c5..0a8b5359213 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -93,6 +93,10 @@ public Type TaskType
             get { return _typeInformation.LoadedType?.Type ?? Type.GetType(_typeInformation.TypeName, true, true); }
         }
 
+        public TypeInformation TypeInformation { get { return _typeInformation; } }
+
+        public bool ImplementsIGeneratedTask { get { return _typeInformation?.ImplementsIGeneratedTask ?? false; } }
+
         /// <summary>
         /// Initializes this factory for instantiating tasks with a particular inline task block.
         /// </summary>
diff --git a/src/Build/Instance/TaskFactoryWrapper.cs b/src/Build/Instance/TaskFactoryWrapper.cs
index 2ce6fc0de37..312144d49e8 100644
--- a/src/Build/Instance/TaskFactoryWrapper.cs
+++ b/src/Build/Instance/TaskFactoryWrapper.cs
@@ -7,6 +7,7 @@
 using Microsoft.Build.Collections;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using Microsoft.Build.BackEnd;
 
 namespace Microsoft.Build.Execution
 {
@@ -251,7 +252,7 @@ private void PopulatePropertyInfoCacheIfNecessary()
         {
             if (_propertyInfoCache == null)
             {
-                bool taskTypeImplementsIGeneratedTask = typeof(IGeneratedTask).IsAssignableFrom(_taskFactory.TaskType);
+                bool taskTypeImplementsIGeneratedTask = _taskFactory is AssemblyTaskFactory assemblyTaskFactory ? assemblyTaskFactory.ImplementsIGeneratedTask : typeof(IGeneratedTask).IsAssignableFrom(_taskFactory.TaskType);
                 TaskPropertyInfo[] propertyInfos = _taskFactory.GetTaskParameters();
 
                 for (int i = 0; i < propertyInfos.Length; i++)
@@ -262,7 +263,7 @@ private void PopulatePropertyInfoCacheIfNecessary()
                     TaskPropertyInfo propertyInfo = propertyInfos[i];
                     if (!taskTypeImplementsIGeneratedTask)
                     {
-                        propertyInfo = new ReflectableTaskPropertyInfo(propertyInfo, _taskFactory.TaskType);
+                        propertyInfo = _taskFactory is AssemblyTaskFactory assemblyTaskFactory2 ? new ReflectableTaskPropertyInfo(propertyInfo, assemblyTaskFactory2.TypeInformation) : new ReflectableTaskPropertyInfo(propertyInfo, _taskFactory.TaskType);
                     }
 
                     try
diff --git a/src/Shared/TaskLoader.cs b/src/Shared/TaskLoader.cs
index e0dce14cd65..d0a80686b2a 100644
--- a/src/Shared/TaskLoader.cs
+++ b/src/Shared/TaskLoader.cs
@@ -138,7 +138,8 @@ internal static ITask CreateTask(TypeInformation typeInformation, string taskNam
                     // If the types don't match, we have a problem. It means that our AppDomain was able to load
                     // a task assembly using Load, and loaded a different one. I don't see any other choice than
                     // to fail here.
-                    if (taskType != loadedType.Type)
+                    if (((typeInformation.LoadedType is not null) && taskType != typeInformation.LoadedType.Type) ||
+                            !taskType.Assembly.Location.Equals(typeInformation.LoadInfo.AssemblyLocation) || !taskType.Name.Equals(typeInformation.TypeName))
                     {
                         logError
                         (
diff --git a/src/Shared/TypeInformation.cs b/src/Shared/TypeInformation.cs
index 106caf59b33..e1898d0f8cd 100644
--- a/src/Shared/TypeInformation.cs
+++ b/src/Shared/TypeInformation.cs
@@ -19,7 +19,6 @@ internal sealed class TypeInformation
         internal bool IsMarshallByRef { get; set; }
         internal bool ImplementsIGeneratedTask { get; set; }
         internal AssemblyName AssemblyName { get; set; }
-        internal Func<BindingFlags, PropertyInfo[]> GetProperties { get; set; }
 
         internal TypeInformation()
         {
@@ -37,7 +36,30 @@ internal TypeInformation(LoadedType baseType)
             ImplementsIGeneratedTask = LoadedType.Type is IGeneratedTask;
 #endif
             AssemblyName = LoadedType.LoadedAssembly.GetName();
-            GetProperties = bindingAttr => LoadedType.Type.GetProperties(bindingAttr);
+        }
+
+        public PropertyInfo[] GetProperties(BindingFlags flags)
+        {
+            if (LoadedType is null)
+            {
+                throw new NotImplementedException();
+            }
+            else
+            {
+                return LoadedType.Type.GetProperties(flags);
+            }
+        }
+
+        public PropertyInfo GetProperty(string name, BindingFlags flags)
+        {
+            if (LoadedType is null)
+            {
+                throw new NotImplementedException();
+            }
+            else
+            {
+                return LoadedType.Type.GetProperty(name, flags);
+            }
         }
     }
 }
\ No newline at end of file
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index 31a7332e164..b010bc78a7b 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -403,6 +403,9 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
                                                 typeInformation.ImplementsIGeneratedTask = true;
                                             }
                                         }
+
+                                        typeInformation.AssemblyName = _assemblyLoadInfo.AssemblyName is null ? new AssemblyName(Path.GetFileNameWithoutExtension(_assemblyLoadInfo.AssemblyFile)) : new AssemblyName(_assemblyLoadInfo.AssemblyName);
+
                                         break;
                                     }
                                 }
