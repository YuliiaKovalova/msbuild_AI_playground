diff --git a/src/Build/Logging/LiveLogger/LiveLoggerBuffer.cs b/src/Build/Logging/LiveLogger/Buffer.cs
similarity index 98%
rename from src/Build/Logging/LiveLogger/LiveLoggerBuffer.cs
rename to src/Build/Logging/LiveLogger/Buffer.cs
index 78ec484bc19..91ab0bd0f66 100644
--- a/src/Build/Logging/LiveLogger/LiveLoggerBuffer.cs
+++ b/src/Build/Logging/LiveLogger/Buffer.cs
@@ -31,7 +31,7 @@ public string Text
                     WrappedText = new List<string> { value };
                 }
                 // Buffer should rerender
-                LiveLoggerBuffer.ShouldRerender = true;
+                Buffer.ShouldRerender = true;
             }
         }
 
@@ -54,7 +54,7 @@ public LiveLoggerBufferLine(string text, bool shouldWrapLines)
         }
     }
 
-    public class LiveLoggerBuffer
+    public class Buffer
     {
         private static List<LiveLoggerBufferLine> Lines = new();
         public static int TopLineIndex = 0;
diff --git a/src/Build/Logging/LiveLogger/LiveLogger.cs b/src/Build/Logging/LiveLogger/LiveLogger.cs
index a6dc4b52862..5b6fe76dcf3 100644
--- a/src/Build/Logging/LiveLogger/LiveLogger.cs
+++ b/src/Build/Logging/LiveLogger/LiveLogger.cs
@@ -10,7 +10,7 @@ namespace Microsoft.Build.Logging.LiveLogger
 {
     public class LiveLogger : ILogger
     {
-        private Dictionary<int, LiveLoggerProjectNode> projects = new Dictionary<int, LiveLoggerProjectNode>();
+        private Dictionary<int, ProjectNode> projects = new Dictionary<int, ProjectNode>();
 
         private bool Succeeded;
 
@@ -55,14 +55,14 @@ public void Initialize(IEventSource eventSource)
         private void Render()
         {
             // Initialize
-            LiveLoggerBuffer.Initialize();
+            Buffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
-            LiveLoggerBuffer.WriteNewLine(string.Empty);
+            Buffer.WriteNewLine(string.Empty);
             // First render
-            LiveLoggerBuffer.Render();
+            Buffer.Render();
             int i = 0;
             // Rerender periodically
-            while (!LiveLoggerBuffer.IsTerminated)
+            while (!Buffer.IsTerminated)
             {
                 i++;
                 // Delay by 1/60 seconds
@@ -75,7 +75,7 @@ private void Render()
                         project.Value.Log();
                     }
                     // Rerender buffer
-                    LiveLoggerBuffer.Render();
+                    Buffer.Render();
                 });
                 // Handle keyboard input
                 if (Console.KeyAvailable)
@@ -84,16 +84,16 @@ private void Render()
                     switch (key)
                     {
                         case ConsoleKey.UpArrow:
-                            if (LiveLoggerBuffer.TopLineIndex > 0)
+                            if (Buffer.TopLineIndex > 0)
                             {
-                                LiveLoggerBuffer.TopLineIndex--;
+                                Buffer.TopLineIndex--;
                             }
 
-                            LiveLoggerBuffer.ShouldRerender = true;
+                            Buffer.ShouldRerender = true;
                             break;
                         case ConsoleKey.DownArrow:
-                            LiveLoggerBuffer.TopLineIndex++;
-                            LiveLoggerBuffer.ShouldRerender = true;
+                            Buffer.TopLineIndex++;
+                            Buffer.ShouldRerender = true;
                             break;
                         default:
                             break;
@@ -123,7 +123,7 @@ private void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e
                 return;
             }
             // Add project
-            LiveLoggerProjectNode node = new LiveLoggerProjectNode(e);
+            ProjectNode node = new ProjectNode(e);
             projects[id] = node;
             // Log
             node.ShouldRerender = true;
@@ -133,7 +133,7 @@ private void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -148,7 +148,7 @@ private void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -162,7 +162,7 @@ private void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -177,7 +177,7 @@ private void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -202,7 +202,7 @@ private void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
             }
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -216,7 +216,7 @@ private void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -230,7 +230,7 @@ private void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
-            if (!projects.TryGetValue(id, out LiveLoggerProjectNode? node))
+            if (!projects.TryGetValue(id, out ProjectNode? node))
             {
                 return;
             }
@@ -248,7 +248,7 @@ private void console_CancelKeyPressed(object? sender, ConsoleCancelEventArgs eve
 
         public void Shutdown()
         {
-            LiveLoggerBuffer.Terminate();
+            Buffer.Terminate();
             // TODO: Remove. There is a bug that causes switching to main buffer without deleting the contents of the alternate buffer
             Console.Clear();
             int errorCount = 0;
diff --git a/src/Build/Logging/LiveLogger/LiveLoggerMessageNode.cs b/src/Build/Logging/LiveLogger/MessageNode.cs
similarity index 96%
rename from src/Build/Logging/LiveLogger/LiveLoggerMessageNode.cs
rename to src/Build/Logging/LiveLogger/MessageNode.cs
index 7445cc528bb..7c45f1f2785 100644
--- a/src/Build/Logging/LiveLogger/LiveLoggerMessageNode.cs
+++ b/src/Build/Logging/LiveLogger/MessageNode.cs
@@ -6,7 +6,7 @@
 
 namespace Microsoft.Build.Logging.LiveLogger
 {
-    public class LiveLoggerMessageNode
+    public class MessageNode
     {
         // Use this to change the max lenngth (relative to screen size) of messages
         private static int MAX_LENGTH = 3 * Console.BufferWidth;
@@ -23,7 +23,7 @@ public enum MessageType
         public string? FilePath;
         public int? LineNumber;
         public int? ColumnNumber;
-        public LiveLoggerMessageNode(LazyFormattedBuildEventArgs args)
+        public MessageNode(LazyFormattedBuildEventArgs args)
         {
             Message = args.Message ?? string.Empty;
             if (Message.Length > MAX_LENGTH)
diff --git a/src/Build/Logging/LiveLogger/LiveLoggerProjectNode.cs b/src/Build/Logging/LiveLogger/ProjectNode.cs
similarity index 75%
rename from src/Build/Logging/LiveLogger/LiveLoggerProjectNode.cs
rename to src/Build/Logging/LiveLogger/ProjectNode.cs
index 63725da9f25..88f899c3927 100644
--- a/src/Build/Logging/LiveLogger/LiveLoggerProjectNode.cs
+++ b/src/Build/Logging/LiveLogger/ProjectNode.cs
@@ -9,7 +9,7 @@
 
 namespace Microsoft.Build.Logging.LiveLogger
 {
-    internal class LiveLoggerProjectNode
+    internal class ProjectNode
     {
         /// <summary>
         /// Given a list of paths, this method will get the shortest not ambiguous path for a project.
@@ -30,16 +30,16 @@ private static string GetUnambiguousPath(string path)
         // Targets
         public int FinishedTargets;
         public LiveLoggerBufferLine? CurrentTargetLine;
-        public LiveLoggerTargetNode? CurrentTargetNode;
+        public TargetNode? CurrentTargetNode;
         // Messages, errors and warnings
-        public List<LiveLoggerMessageNode> AdditionalDetails = new();
+        public List<MessageNode> AdditionalDetails = new();
         // Count messages, warnings and errors
         public int MessageCount = 0;
         public int WarningCount = 0;
         public int ErrorCount = 0;
         // Bool if node should rerender
         internal bool ShouldRerender = true;
-        public LiveLoggerProjectNode(ProjectStartedEventArgs args)
+        public ProjectNode(ProjectStartedEventArgs args)
         {
             Id = args.ProjectId;
             ProjectPath = args.ProjectFile!;
@@ -77,7 +77,7 @@ public void Log()
             // Create or update line
             if (Line is null)
             {
-                Line = LiveLoggerBuffer.WriteNewLine(lineContents, false);
+                Line = Buffer.WriteNewLine(lineContents, false);
             }
             else
             {
@@ -89,20 +89,20 @@ public void Log()
             {
                 if (CurrentTargetLine is not null)
                 {
-                    LiveLoggerBuffer.DeleteLine(CurrentTargetLine.Id);
+                    Buffer.DeleteLine(CurrentTargetLine.Id);
                 }
 
-                foreach (LiveLoggerMessageNode node in AdditionalDetails.ToList())
+                foreach (MessageNode node in AdditionalDetails.ToList())
                 {
                     // Only delete high priority messages
-                    if (node.Type != LiveLoggerMessageNode.MessageType.HighPriorityMessage)
+                    if (node.Type != MessageNode.MessageType.HighPriorityMessage)
                     {
                         continue;
                     }
 
                     if (node.Line is not null)
                     {
-                        LiveLoggerBuffer.DeleteLine(node.Line.Id);
+                        Buffer.DeleteLine(node.Line.Id);
                     }
                 }
             }
@@ -116,7 +116,7 @@ public void Log()
             string currentTargetLineContents = $"    └── {CurrentTargetNode.TargetName} : {CurrentTargetNode.CurrentTaskNode?.TaskName ?? String.Empty}";
             if (CurrentTargetLine is null)
             {
-                CurrentTargetLine = LiveLoggerBuffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
+                CurrentTargetLine = Buffer.WriteNewLineAfter(Line!.Id, currentTargetLineContents);
             }
             else
             {
@@ -124,28 +124,28 @@ public void Log()
             }
 
             // Messages, warnings and errors
-            foreach (LiveLoggerMessageNode node in AdditionalDetails)
+            foreach (MessageNode node in AdditionalDetails)
             {
-                if (Finished && node.Type == LiveLoggerMessageNode.MessageType.HighPriorityMessage)
+                if (Finished && node.Type == MessageNode.MessageType.HighPriorityMessage)
                 {
                     continue;
                 }
 
                 if (node.Line is null)
                 {
-                    node.Line = LiveLoggerBuffer.WriteNewLineAfter(Line!.Id, "Message");
+                    node.Line = Buffer.WriteNewLineAfter(Line!.Id, "Message");
                 }
 
                 node.Log();
             }
         }
 
-        public LiveLoggerTargetNode AddTarget(TargetStartedEventArgs args)
+        public TargetNode AddTarget(TargetStartedEventArgs args)
         {
-            CurrentTargetNode = new LiveLoggerTargetNode(args);
+            CurrentTargetNode = new TargetNode(args);
             return CurrentTargetNode;
         }
-        public LiveLoggerTaskNode? AddTask(TaskStartedEventArgs args)
+        public TaskNode? AddTask(TaskStartedEventArgs args)
         {
             // Get target id
             int targetId = args.BuildEventContext!.TargetId;
@@ -158,7 +158,7 @@ public LiveLoggerTargetNode AddTarget(TargetStartedEventArgs args)
                 return null;
             }
         }
-        public LiveLoggerMessageNode? AddMessage(BuildMessageEventArgs args)
+        public MessageNode? AddMessage(BuildMessageEventArgs args)
         {
             if (args.Importance != MessageImportance.High)
             {
@@ -166,21 +166,21 @@ public LiveLoggerTargetNode AddTarget(TargetStartedEventArgs args)
             }
 
             MessageCount++;
-            LiveLoggerMessageNode node = new LiveLoggerMessageNode(args);
+            MessageNode node = new MessageNode(args);
             AdditionalDetails.Add(node);
             return node;
         }
-        public LiveLoggerMessageNode? AddWarning(BuildWarningEventArgs args)
+        public MessageNode? AddWarning(BuildWarningEventArgs args)
         {
             WarningCount++;
-            LiveLoggerMessageNode node = new LiveLoggerMessageNode(args);
+            MessageNode node = new MessageNode(args);
             AdditionalDetails.Add(node);
             return node;
         }
-        public LiveLoggerMessageNode? AddError(BuildErrorEventArgs args)
+        public MessageNode? AddError(BuildErrorEventArgs args)
         {
             ErrorCount++;
-            LiveLoggerMessageNode node = new LiveLoggerMessageNode(args);
+            MessageNode node = new MessageNode(args);
             AdditionalDetails.Add(node);
             return node;
         }
diff --git a/src/Build/Logging/LiveLogger/LiveLoggerTargetNode.cs b/src/Build/Logging/LiveLogger/TargetNode.cs
similarity index 61%
rename from src/Build/Logging/LiveLogger/LiveLoggerTargetNode.cs
rename to src/Build/Logging/LiveLogger/TargetNode.cs
index 25b90c9fdf0..17cfdf1ed9f 100644
--- a/src/Build/Logging/LiveLogger/LiveLoggerTargetNode.cs
+++ b/src/Build/Logging/LiveLogger/TargetNode.cs
@@ -5,19 +5,19 @@
 
 namespace Microsoft.Build.Logging.LiveLogger
 {
-    public class LiveLoggerTargetNode
+    public class TargetNode
     {
         public int Id;
         public string TargetName;
-        public LiveLoggerTaskNode? CurrentTaskNode;
-        public LiveLoggerTargetNode(TargetStartedEventArgs args)
+        public TaskNode? CurrentTaskNode;
+        public TargetNode(TargetStartedEventArgs args)
         {
             Id = args.BuildEventContext!.TargetId;
             TargetName = args.TargetName;
         }
-        public LiveLoggerTaskNode AddTask(TaskStartedEventArgs args)
+        public TaskNode AddTask(TaskStartedEventArgs args)
         {
-            CurrentTaskNode = new LiveLoggerTaskNode(args);
+            CurrentTaskNode = new TaskNode(args);
             return CurrentTaskNode;
         }
     }
diff --git a/src/Build/Logging/LiveLogger/LiveLoggerTaskNode.cs b/src/Build/Logging/LiveLogger/TaskNode.cs
similarity index 80%
rename from src/Build/Logging/LiveLogger/LiveLoggerTaskNode.cs
rename to src/Build/Logging/LiveLogger/TaskNode.cs
index 5c3a9c00d1f..6d4aa5d80a7 100644
--- a/src/Build/Logging/LiveLogger/LiveLoggerTaskNode.cs
+++ b/src/Build/Logging/LiveLogger/TaskNode.cs
@@ -5,11 +5,11 @@
 
 namespace Microsoft.Build.Logging.LiveLogger
 {
-    public class LiveLoggerTaskNode
+    public class TaskNode
     {
         public int Id;
         public string TaskName;
-        public LiveLoggerTaskNode(TaskStartedEventArgs args)
+        public TaskNode(TaskStartedEventArgs args)
         {
             Id = args.BuildEventContext!.TaskId;
             TaskName = args.TaskName;
