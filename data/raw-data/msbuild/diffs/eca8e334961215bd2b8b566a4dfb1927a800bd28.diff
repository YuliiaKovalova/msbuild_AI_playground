diff --git a/scripts/killnodereuse.bat b/scripts/killnodereuse.bat
new file mode 100644
index 00000000000..62ed1051a71
--- /dev/null
+++ b/scripts/killnodereuse.bat
@@ -0,0 +1,4 @@
+taskkill /f /im msbuild.exe
+taskkill /f /im dotnet.exe
+taskkill /f /im vbcscompiler.exe
+taskkill /f /im omnisharp.exe
\ No newline at end of file
diff --git a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
index 445f1668bdf..2ba412be28c 100644
--- a/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/ProjectGraph_Tests.cs
@@ -76,6 +76,7 @@ public void  AnyCPUSetPlatformMetaDataWasNotSet()
                                                                                                 <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
                                                                                                 <Platform>x86</Platform>
                                                                                                 <Platforms>x86</Platforms>
+                                                                                                <TargetFrameworks>netstandard2.0;net472</TargetFrameworks>
                                                                                             </PropertyGroup>
                                                                                             <ItemGroup>
                                                                                                 <ProjectReference Include=""$(MSBuildThisFileDirectory)2.proj"" >
@@ -84,6 +85,7 @@ public void  AnyCPUSetPlatformMetaDataWasNotSet()
                 var file = env.CreateFile("2.proj", @"
                                 <Project>
                                 <PropertyGroup>
+                                    <TargetFrameworks>netstandard2.0;net472</TargetFrameworks>
                                     <Platforms>AnyCPU</Platforms>
                                 </PropertyGroup>
                                 </Project>");
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index c419203fb47..2c492e93f7c 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -22,6 +22,10 @@ namespace Microsoft.Build.Graph
 {
     internal class GraphBuilder
     {
+        private const string PlatformLookupTableMetadataName = "PlatformLookupTable";
+        private const string PlatformMetadataName = "Platform";
+        private const string PlatformsMetadataName = "Platforms";
+        private const string EnableDynamicPlatformResolutionMetadataName = "EnableDynamicPlatformResolution";
         internal const string SolutionItemReference = "_SolutionReference";
         
         /// <summary>
@@ -510,10 +514,33 @@ private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata)
                 throw new InvalidOperationException(ResourceUtilities.GetResourceString("NullReferenceFromProjectInstanceFactory"));
             }
 
+
+
             var graphNode = new ProjectGraphNode(projectInstance);
+            if(globalProperties.ContainsKey(EnableDynamicPlatformResolutionMetadataName)){
+                
+                var Platforms = projectInstance.GetProperty("Platforms");
+                var Platform = projectInstance.GetProperty("Platform");
+                var SelectedPlatform = PlatformNegotiation.GetNearestPlatform(projectInstance.GetPropertyValue(PlatformsMetadataName), projectInstance.GetPropertyValue(PlatformLookupTableMetadataName), globalProperties[PlatformMetadataName], "", projectInstance.FullPath);
+
+
+                if (SelectedPlatform != null)
+                {
+                    // configurationMetadata.GlobalProperties.GetProperty("platform").EvaluatedValue = SelectedPlatform;
+                    globalProperties["platform"] = SelectedPlatform;
+                }
+
+                var projectInstancePlatform = _projectInstanceFactory(
+                    configurationMetadata.ProjectFullPath,
+                    globalProperties,
+                    _projectCollection);
+
+                graphNode = new ProjectGraphNode(projectInstancePlatform);
+            }
 
             var referenceInfos = ParseReferences(graphNode);
 
+
             return new ParsedProject(configurationMetadata, graphNode, referenceInfos);
         }
 
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index c7885268eb0..fd5fd706e31 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -5,10 +5,12 @@
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Globalization;
+using System.IO;
 using System.Linq;
 using System.Runtime.CompilerServices;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Collections;
+using Microsoft.Build.Construction;
 using Microsoft.Build.Evaluation;
 using Microsoft.Build.Exceptions;
 using Microsoft.Build.Execution;
@@ -21,10 +23,7 @@ namespace Microsoft.Build.Graph
 {
     internal sealed class ProjectInterpretation
     {
-        private const string PlatformLookupTableMetadataName = "PlatformLookupTable";
-        private const string PlatformMetadataName = "Platform";
-        private const string PlatformsMetadataName = "Platforms";
-        private const string EnableDynamicPlatformResolutionMetadataName  = "EnableDynamicPlatformResolution";
+        private const string EnableDynamicPlatformResolutionMetadataName = "EnableDynamicPlatformResolution";
         private const string FullPathMetadataName = "FullPath";
         private const string ToolsVersionMetadataName = "ToolsVersion";
         private const string SetConfigurationMetadataName = "SetConfiguration";
@@ -69,7 +68,6 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc
         {
             IEnumerable<ProjectItemInstance> projectReferenceItems;
             IEnumerable<GlobalPropertiesModifier> globalPropertiesModifiers = null;
-
             switch (GetProjectType(requesterInstance))
             {
                 case ProjectType.OuterBuild:
@@ -100,6 +98,10 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstance requesterInstanc
                             requesterInstance.FullPath));
                 }
 
+                if (requesterInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName) == "true")
+                {
+                    requesterInstance.GlobalPropertiesDictionary.Set(requesterInstance.GetProperty(EnableDynamicPlatformResolutionMetadataName));
+                }
                 var projectReferenceFullPath = projectReferenceItem.GetMetadataValue(FullPathMetadataName);
 
                 var referenceGlobalProperties = GetGlobalPropertiesForItem(projectReferenceItem, requesterInstance.GlobalPropertiesDictionary, globalPropertiesModifiers);
@@ -235,12 +237,6 @@ ProjectItemInstance projectReference
             {
                 // This mimics the _GetProjectReferenceTargetFrameworkProperties task in order to properly reflect what the build graph looks like in
                 // a traversal in which EnableDynamicPlatformResolution is turned on
-                if (ConversionUtilities.ValidBooleanTrue(projectReference.Project.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)) && String.IsNullOrEmpty(projectReference.GetMetadataValue(SetPlatformMetadataName)))
-                {
-                    var referencedProject = new Project(projectReference.EvaluatedInclude);
-                    var SelectedPlatform = PlatformNegotiation.GetNearestPlatform(referencedProject.GetPropertyValue(PlatformsMetadataName), referencedProject.GetPropertyValue(PlatformLookupTableMetadataName), projectReference.Project.GetPropertyValue(PlatformMetadataName), projectReference.Project.GetPropertyValue(PlatformLookupTableMetadataName), projectReference.EvaluatedInclude);    
-                    projectReference.SetMetadata("SetPlatform", $"Platform={SelectedPlatform}");
-                }
                 // TODO: Mimic AssignProjectConfiguration's behavior for determining the values for these.
                 var setConfigurationString = projectReference.GetMetadataValue(SetConfigurationMetadataName);
                 var setPlatformString = projectReference.GetMetadataValue(SetPlatformMetadataName);
diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
index 3a9632e61f7..89576d1c701 100644
--- a/src/Tasks/GetCompatiblePlatform.cs
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -58,8 +58,8 @@ public override bool Execute()
                 AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);
                 // Pull platformlookuptable metadata from the referenced project. This allows custom
                 // mappings on a per-ProjectReference basis.
-                string? buildProjectReferenceAs = PlatformNegotiation.GetNearestPlatform(AssignedProjectsWithPlatform[i].GetMetadata("Platforms"), AssignedProjectsWithPlatform[i].GetMetadata("PlatformLookupTable"), CurrentProjectPlatform, PlatformLookupTable, AssignedProjectsWithPlatform[i].ItemSpec, Log);
-                
+                 string? buildProjectReferenceAs = PlatformNegotiation.GetNearestPlatform(AssignedProjectsWithPlatform[i].GetMetadata("Platforms"), AssignedProjectsWithPlatform[i].GetMetadata("PlatformLookupTable"), CurrentProjectPlatform, PlatformLookupTable, AssignedProjectsWithPlatform[i].ItemSpec, Log);
+
                 AssignedProjectsWithPlatform[i].SetMetadata("NearestPlatform", buildProjectReferenceAs);
                 Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.DisplayChosenPlatform", AssignedProjectsWithPlatform[i].ItemSpec, buildProjectReferenceAs);
             }
