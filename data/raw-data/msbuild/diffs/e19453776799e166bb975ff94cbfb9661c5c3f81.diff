diff --git a/src/Shared/Debugging/DebugUtils.cs b/src/Shared/Debugging/DebugUtils.cs
index aad130b9bfe..8b8744957e3 100644
--- a/src/Shared/Debugging/DebugUtils.cs
+++ b/src/Shared/Debugging/DebugUtils.cs
@@ -23,8 +23,8 @@ private enum NodeMode
 
         static DebugUtils()
         {
-            string environmentDebugPath = Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH");
-            var debugDirectory = environmentDebugPath;
+            string environmentDebugPath = FileUtilities.TrimAndStripAnyQuotes(Environment.GetEnvironmentVariable("MSBUILDDEBUGPATH"));
+            string debugDirectory = environmentDebugPath;
 
             if (Traits.Instance.DebugEngine)
             {
@@ -33,25 +33,17 @@ static DebugUtils()
                 // Probe writeability
                 try
                 {
-                    string testFilePath = Path.Combine(debugDirectory, "textFile.txt");
-                    File.WriteAllText(testFilePath, "Successfully wrote to file.");
-                    File.Delete(testFilePath);
+                    debugDirectory = ProbeWriteability(debugDirectory);
                 }
-                catch (UnauthorizedAccessException)
+                catch (ArgumentException)
                 {
-                    // Failed to write to the specified directory; redirecting to TEMP
-                    debugDirectory = Path.Combine(Path.GetTempPath(), "MSBuild_Logs");
-                }
-                catch (SecurityException)
-                {
-                    // Failed to write to the specified directory; redirecting to TEMP
-                    debugDirectory = Path.Combine(Path.GetTempPath(), "MSBuild_Logs");
-                }
-                catch (PathTooLongException)
-                {
-                    ErrorUtilities.ThrowArgument("DebugPathTooLong", debugDirectory);
+                    // This can happen if MSBUILDDEBUGPATH contains invalid characters, but the current working directory may still work.
+                    debugDirectory = ProbeWriteability(Path.Combine(Directory.GetCurrentDirectory(), "MSBuild_Logs"));
                 }
 
+                // Redirect to TEMP if we failed to write to either MSBUILDDEBUGPATH or the current working directory.
+                debugDirectory ??= Path.Combine(Path.GetTempPath(), "MSBuild_Logs");
+
                 // Out of proc nodes do not know the startup directory so set the environment variable for them.
                 if (string.IsNullOrWhiteSpace(environmentDebugPath))
                 {
@@ -67,6 +59,32 @@ static DebugUtils()
             DebugPath = debugDirectory;
         }
 
+        private static string ProbeWriteability(string path)
+        {
+            try
+            {
+                string testFilePath = Path.Combine(path, "textFile.txt");
+                File.WriteAllText(testFilePath, "Successfully wrote to file.");
+                File.Delete(testFilePath);
+                return path;
+            }
+            catch (UnauthorizedAccessException)
+            {
+                // Failed to write to the specified directory
+                return null;
+            }
+            catch (SecurityException)
+            {
+                // Failed to write to the specified directory
+                return null;
+            }
+            catch (PathTooLongException)
+            {
+                ErrorUtilities.ThrowArgument("DebugPathTooLong", path);
+                return null; // Should never reach here.
+            }
+        }
+
         private static readonly Lazy<NodeMode> ProcessNodeMode = new(
         () =>
         {
diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index 3d467547ad4..3cd00a01543 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -270,6 +270,11 @@ internal static bool IsSlash(char c)
         /// </summary>
         internal static string TrimAndStripAnyQuotes(string path)
         {
+            if (path is null)
+            {
+                return path;
+            }
+
             // Trim returns the same string if trimming isn't needed
             path = path.Trim();
             path = path.Trim(new char[] { '"' });
