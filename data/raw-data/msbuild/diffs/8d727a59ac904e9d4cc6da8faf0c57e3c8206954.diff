diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index 0694fa41f89..9f7340ddab2 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -16,6 +16,9 @@ internal class LiveLogger : ILogger
 
         private float existingTasks = 1;
         private float completedTasks = 0;
+        private int completedProjects = 0;
+        private TerminalBufferLine? finishedProjectsLine;
+        private Dictionary<string, string> blockedProjects = new();
 
         public string Parameters { get; set; }
 
@@ -58,6 +61,10 @@ private void Render()
             TerminalBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
             TerminalBuffer.WriteNewLine(string.Empty);
+
+            // Top line indicates the number of finished projects.
+            finishedProjectsLine = TerminalBuffer.WriteNewLine($"{completedProjects} projects finished building.");
+
             // First render
             TerminalBuffer.Render();
             int i = 0;
@@ -69,6 +76,10 @@ private void Render()
                 // Use task delay to avoid blocking the task, so that keyboard input is listened continously
                 Task.Delay((i / 60) * 1_000).ContinueWith((t) =>
                 {
+                    foreach (KeyValuePair<string, string> blockedProject in blockedProjects)
+                    {
+                    }
+
                     // Rerender projects only when needed
                     foreach (var project in projects)
                     {
@@ -130,6 +141,9 @@ private void eventSource_ProjectStarted(object sender, ProjectStartedEventArgs e
 
         private void eventSource_ProjectFinished(object sender, ProjectFinishedEventArgs e)
         {
+            completedProjects++;
+            finishedProjectsLine!.Text = $"{completedProjects} projects finished building.";
+
             // Get project id
             int id = e.BuildEventContext!.ProjectInstanceId;
             if (!projects.TryGetValue(id, out ProjectNode? node))
@@ -183,6 +197,12 @@ private void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
             // Update
             node.AddTask(e);
             existingTasks++;
+
+            if (e.TaskName.Equals("MSBuild"))
+            {
+                blockedProjects[e.ProjectFile] = "Blocked by MSBuild task";
+            }
+
             // Log
             node.ShouldRerender = true;
         }
diff --git a/src/MSBuild/LiveLogger/ProjectNode.cs b/src/MSBuild/LiveLogger/ProjectNode.cs
index ce66c2d21b9..c8686500d8f 100644
--- a/src/MSBuild/LiveLogger/ProjectNode.cs
+++ b/src/MSBuild/LiveLogger/ProjectNode.cs
@@ -93,8 +93,15 @@ public void Log()
                     TerminalBuffer.DeleteLine(CurrentTargetLine.Id);
                 }
 
+                bool foundErrorOrWarning = false;
+
                 foreach (MessageNode node in AdditionalDetails.ToList())
                 {
+                    if (node.Type != MessageNode.MessageType.HighPriorityMessage)
+                    {
+                        foundErrorOrWarning = true;
+                    }
+
                     // Only delete high priority messages
                     if (node.Type != MessageNode.MessageType.HighPriorityMessage)
                     {
@@ -106,6 +113,11 @@ public void Log()
                         TerminalBuffer.DeleteLine(node.Line.Id);
                     }
                 }
+
+                if (!foundErrorOrWarning && this.Line is not null)
+                {
+                    TerminalBuffer.DeleteLine(this.Line.Id);
+                }
             }
 
             // Current target details
