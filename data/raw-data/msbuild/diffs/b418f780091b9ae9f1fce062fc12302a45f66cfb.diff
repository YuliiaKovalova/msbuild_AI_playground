diff --git a/src/Shared/FileUtilities.cs b/src/Shared/FileUtilities.cs
index e4d016cfa37..f55db912ef7 100644
--- a/src/Shared/FileUtilities.cs
+++ b/src/Shared/FileUtilities.cs
@@ -642,11 +642,8 @@ internal static string GetFullPath(string fileSpec, string currentDirectory)
 
             if (NativeMethodsShared.IsWindows && !EndsWithSlash(fullPath))
             {
-                Match drive = FileUtilitiesRegex.DrivePattern.Match(fileSpec);
-                Match UNCShare = FileUtilitiesRegex.UNCPattern.Match(fullPath);
-
-                if ((drive.Success && (drive.Length == fileSpec.Length)) ||
-                    (UNCShare.Success && (UNCShare.Length == fullPath.Length)))
+                if (FileUtilitiesRegex.DrivePattern.IsMatch(fileSpec) ||
+                    FileUtilitiesRegex.UncPattern.IsMatch(fullPath))
                 {
                     // append trailing slash if Path.GetFullPath failed to (this happens with drive-specs and UNC shares)
                     fullPath += Path.DirectorySeparatorChar;
diff --git a/src/Shared/FileUtilitiesRegex.cs b/src/Shared/FileUtilitiesRegex.cs
index 69f0af15942..36327bf2cce 100644
--- a/src/Shared/FileUtilitiesRegex.cs
+++ b/src/Shared/FileUtilitiesRegex.cs
@@ -1,11 +1,7 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
 using System.IO;
-using System.Security;
-using System.Collections;
-using System.Diagnostics;
 using System.Globalization;
 using System.Text.RegularExpressions;
 
@@ -19,13 +15,21 @@ namespace Microsoft.Build.Shared
     /// </summary>
     internal static class FileUtilitiesRegex
     {
-        // regular expression used to match file-specs beginning with "<drive letter>:" 
-        internal static readonly Regex DrivePattern = new Regex(@"^[A-Za-z]:", RegexOptions.Compiled);
+        // regular expression used to match file-specs comprising exactly "<drive letter>:" (with no trailing characters)
+        internal static readonly Regex DrivePattern = new Regex(@"^[A-Za-z]:$", RegexOptions.Compiled);
+
+        private static readonly string s_baseUncPattern = string.Format(
+            CultureInfo.InvariantCulture,
+            @"^[\{0}\{1}][\{0}\{1}][^\{0}\{1}]+[\{0}\{1}][^\{0}\{1}]+",
+            Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar);
 
         // regular expression used to match UNC paths beginning with "\\<server>\<share>"
-        internal static readonly Regex UNCPattern =
+        internal static readonly Regex StartsWithUncPattern = new Regex(s_baseUncPattern, RegexOptions.Compiled);
+
+        // regular expression used to match UNC paths comprising exactly "\\<server>\<share>"
+        internal static readonly Regex UncPattern =
             new Regex(
-                string.Format(CultureInfo.InvariantCulture, @"^[\{0}\{1}][\{0}\{1}][^\{0}\{1}]+[\{0}\{1}][^\{0}\{1}]+",
-                    Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar), RegexOptions.Compiled);
+                string.Format(CultureInfo.InvariantCulture, @"{0}$", s_baseUncPattern),
+                RegexOptions.Compiled);
     }
 }
diff --git a/src/Shared/Modifiers.cs b/src/Shared/Modifiers.cs
index 0f97710e210..c1ac500b5bd 100644
--- a/src/Shared/Modifiers.cs
+++ b/src/Shared/Modifiers.cs
@@ -422,7 +422,7 @@ internal static string GetItemSpecModifier(string currentDirectory, string itemS
 
                         if (!EndsWithSlash(modifiedItemSpec))
                         {
-                            ErrorUtilities.VerifyThrow(FileUtilitiesRegex.UNCPattern.IsMatch(modifiedItemSpec),
+                            ErrorUtilities.VerifyThrow(FileUtilitiesRegex.StartsWithUncPattern.IsMatch(modifiedItemSpec),
                                 "Only UNC shares should be missing trailing slashes.");
 
                             // restore/append trailing slash if Path.GetPathRoot() has either removed it, or failed to add it
@@ -471,19 +471,26 @@ internal static string GetItemSpecModifier(string currentDirectory, string itemS
 
                         if (NativeMethodsShared.IsWindows)
                         {
-                            Match root = FileUtilitiesRegex.DrivePattern.Match(modifiedItemSpec);
-
-                            if (!root.Success)
+                            int length = -1;
+                            if (FileUtilitiesRegex.DrivePattern.IsMatch(modifiedItemSpec))
+                            {
+                                length = 2;
+                            }
+                            else
                             {
-                                root = FileUtilitiesRegex.UNCPattern.Match(modifiedItemSpec);
+                                var match = FileUtilitiesRegex.StartsWithUncPattern.Match(modifiedItemSpec);
+                                if (match.Success)
+                                {
+                                    length = match.Length;
+                                }
                             }
 
-                            if (root.Success)
+                            if (length != -1)
                             {
-                                ErrorUtilities.VerifyThrow((modifiedItemSpec.Length > root.Length) && IsSlash(modifiedItemSpec[root.Length]),
+                                ErrorUtilities.VerifyThrow((modifiedItemSpec.Length > length) && IsSlash(modifiedItemSpec[length]),
                                                            "Root directory must have a trailing slash.");
 
-                                modifiedItemSpec = modifiedItemSpec.Substring(root.Length + 1);
+                                modifiedItemSpec = modifiedItemSpec.Substring(length + 1);
                             }
                         }
                         else
diff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs
index 6dceca3bd3f..251fd7a1003 100644
--- a/src/Tasks/Exec.cs
+++ b/src/Tasks/Exec.cs
@@ -479,7 +479,7 @@ protected override bool ValidateParameters()
                 : Directory.GetCurrentDirectory();
 
             // check if the working directory we're going to use for the exec command is a UNC path
-            workingDirectoryIsUNC = FileUtilitiesRegex.UNCPattern.IsMatch(_workingDirectory);
+            workingDirectoryIsUNC = FileUtilitiesRegex.StartsWithUncPattern.IsMatch(_workingDirectory);
 
             // if the working directory is a UNC path, and all drive letters are mapped, bail out, because the pushd command
             // will not be able to auto-map to the UNC path
