diff --git a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
index 5aca8898ee3..bf84699f6b7 100644
--- a/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/EventSourceSink_Tests.cs
@@ -42,6 +42,7 @@ public void ConsumeEventsGoodEvents()
             EventHandlerHelper testHandlers = new EventHandlerHelper(sink, null);
             VerifyRegisteredHandlers(RaiseEventHelper.BuildStarted, eventHelper, testHandlers);
             VerifyRegisteredHandlers(RaiseEventHelper.BuildFinished, eventHelper, testHandlers);
+            VerifyRegisteredHandlers(RaiseEventHelper.BuildCanceled, eventHelper, testHandlers);
             VerifyRegisteredHandlers(RaiseEventHelper.NormalMessage, eventHelper, testHandlers);
             VerifyRegisteredHandlers(RaiseEventHelper.TaskFinished, eventHelper, testHandlers);
             VerifyRegisteredHandlers(RaiseEventHelper.CommandLine, eventHelper, testHandlers);
@@ -66,6 +67,7 @@ public void ConsumeEventsGoodEventsNoHandlers()
             RaiseEventHelper eventHelper = new RaiseEventHelper(sink);
             eventHelper.RaiseBuildEvent(RaiseEventHelper.BuildStarted);
             eventHelper.RaiseBuildEvent(RaiseEventHelper.BuildFinished);
+            eventHelper.RaiseBuildEvent(RaiseEventHelper.BuildCanceled);
             eventHelper.RaiseBuildEvent(RaiseEventHelper.NormalMessage);
             eventHelper.RaiseBuildEvent(RaiseEventHelper.TaskFinished);
             eventHelper.RaiseBuildEvent(RaiseEventHelper.CommandLine);
@@ -98,6 +100,7 @@ public void LoggerExceptionInEventHandler()
             {
                 RaiseExceptionInEventHandler(RaiseEventHelper.BuildStarted, exception);
                 RaiseExceptionInEventHandler(RaiseEventHelper.BuildFinished, exception);
+                RaiseExceptionInEventHandler(RaiseEventHelper.BuildCanceled, exception);
                 RaiseExceptionInEventHandler(RaiseEventHelper.NormalMessage, exception);
                 RaiseExceptionInEventHandler(RaiseEventHelper.TaskFinished, exception);
                 RaiseExceptionInEventHandler(RaiseEventHelper.CommandLine, exception);
@@ -127,7 +130,7 @@ public void RaiseGenericBuildEventArgs()
             });
         }
         /// <summary>
-        /// Verify that shutdown un registers all of the event handlers
+        /// Verify that shutdown unregisters all of the event handlers
         /// </summary>
         [Fact]
         public void VerifyShutdown()
@@ -431,6 +434,11 @@ internal EventHandlerHelper(IEventSource source, Exception exceptionToThrow)
                 source.TaskFinished += Source_TaskFinished;
                 source.TaskStarted += Source_TaskStarted;
                 source.WarningRaised += Source_WarningRaised;
+
+                if (source is IEventSource5 eventSource5)
+                {
+                    eventSource5.BuildCanceled += Source_BuildCanceled;
+                }
             }
             #endregion
 
@@ -671,6 +679,16 @@ private void Source_BuildFinished(object sender, BuildFinishedEventArgs e)
                 HandleEvent(e);
             }
 
+            /// <summary>
+            /// Handle a build canceled event
+            /// </summary>
+            /// <param name="sender">Who sent the event</param>
+            /// <param name="e">Event raised on the event source</param>
+            private void Source_BuildCanceled(object sender, BuildCanceledEventArgs e)
+            {
+                HandleEvent(e);
+            }
+
             /// <summary>
             /// Handle a events raised from the any event source. This source will
             /// raise all events no matter the type.
@@ -715,6 +733,11 @@ internal sealed class RaiseEventHelper
             /// </summary>
             private static BuildFinishedEventArgs s_buildFinished = new BuildFinishedEventArgs("Message", "Keyword", true);
 
+            /// <summary>
+            /// Build Finished Event
+            /// </summary>
+            private static BuildCanceledEventArgs s_buildCanceled = new BuildCanceledEventArgs("Message", "Keyword");
+
             /// <summary>
             /// Build Message Event
             /// </summary>
@@ -846,6 +869,17 @@ internal static BuildFinishedEventArgs BuildFinished
                 }
             }
 
+            /// <summary>
+            /// Event which can be raised in multiple tests.
+            /// </summary>
+            internal static BuildCanceledEventArgs BuildCanceled
+            {
+                get
+                {
+                    return s_buildCanceled;
+                }
+            }
+
             /// <summary>
             /// Event which can be raised in multiple tests.
             /// </summary>
diff --git a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
index 1bae3f8adde..32e587c3cdb 100644
--- a/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingService_Tests.cs
@@ -411,17 +411,28 @@ public void RegisterGoodDistributedAndCentralLoggerTestBuildStartedFinished()
             Assert.Equal(1, regularILoggerB.BuildFinishedCount);
             Assert.Equal(1, regularILoggerC.BuildFinishedCount);
 
+            _initializedService.LogBuildCanceled();
+            Assert.Equal(1, regularILoggerA.BuildCanceledCount);
+            Assert.Equal(1, regularILoggerB.BuildCanceledCount);
+            Assert.Equal(1, regularILoggerC.BuildCanceledCount);
+
             // Make sure if we call build started again we only get one other build started event.
             _initializedService.LogBuildStarted();
             Assert.Equal(2, regularILoggerA.BuildStartedCount);
             Assert.Equal(2, regularILoggerB.BuildStartedCount);
             Assert.Equal(2, regularILoggerC.BuildStartedCount);
 
-            // Make sure if we call build started again we only get one other build started event.
+            // Make sure if we call build finished again we only get one other build finished event.
             _initializedService.LogBuildFinished(true);
             Assert.Equal(2, regularILoggerA.BuildFinishedCount);
             Assert.Equal(2, regularILoggerB.BuildFinishedCount);
             Assert.Equal(2, regularILoggerC.BuildFinishedCount);
+
+            // Make sure if we call build canceled again we only get one other build canceled event.
+            _initializedService.LogBuildCanceled();
+            Assert.Equal(2, regularILoggerA.BuildCanceledCount);
+            Assert.Equal(2, regularILoggerB.BuildCanceledCount);
+            Assert.Equal(2, regularILoggerC.BuildCanceledCount);
         }
 
         /// <summary>
@@ -1421,6 +1432,15 @@ internal int BuildFinishedCount
                 set;
             }
 
+            /// <summary>
+            /// Number of times build finished was logged
+            /// </summary>
+            internal int BuildCanceledCount
+            {
+                get;
+                set;
+            }
+
             /// <summary>
             /// Initialize
             /// </summary>
@@ -1452,6 +1472,11 @@ internal void LoggerEventHandler(object sender, BuildEventArgs eventArgs)
                 {
                     ++BuildFinishedCount;
                 }
+
+                if (eventArgs is BuildCanceledEventArgs)
+                {
+                    ++BuildCanceledCount;
+                }
             }
         }
 
diff --git a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
index 6a31254da54..88a01498fac 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
@@ -999,17 +999,21 @@ public void ProjectFinished()
         /// Make sure we can log a build started event correctly.
         /// Test both the LogOnlyCriticalEvents true and false
         /// </summary>
-        [Fact]
-        public void LogBuildStarted()
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void LogBuildStarted(bool onlyLogCriticalEvents)
         {
             ProcessBuildEventHelper service =
                 (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
-
+            service.OnlyLogCriticalEvents = onlyLogCriticalEvents;
             service.LogBuildStarted();
 
+            string message = onlyLogCriticalEvents ? string.Empty : ResourceUtilities.GetResourceString("BuildStarted");
+
             BuildStartedEventArgs buildEvent =
                 new BuildStartedEventArgs(
-                    ResourceUtilities.GetResourceString("BuildStarted"),
+                    message,
                     null /* no help keyword */,
                     service.ProcessedBuildEvent.Timestamp);
 
@@ -1018,26 +1022,6 @@ public void LogBuildStarted()
                 new EventArgsEqualityComparer<BuildStartedEventArgs>());
         }
 
-        [Fact(Skip = "https://github.com/dotnet/msbuild/issues/437")]
-        [Trait("Category", "netcore-osx-failing")]
-        [Trait("Category", "netcore-linux-failing")]
-        public void LogBuildStartedCriticalOnly()
-        {
-            ProcessBuildEventHelper service =
-                (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
-            service.OnlyLogCriticalEvents = true;
-            service.LogBuildStarted();
-
-            BuildStartedEventArgs buildEvent =
-                new BuildStartedEventArgs(
-                    string.Empty,
-                    null /* no help keyword */);
-
-            Assert.IsType<BuildStartedEventArgs>(service.ProcessedBuildEvent);
-            Assert.Equal(buildEvent, (BuildStartedEventArgs)service.ProcessedBuildEvent,
-                new EventArgsEqualityComparer<BuildStartedEventArgs>());
-        }
-
         /// <summary>
         /// Make sure we can log a build finished event correctly.
         /// Verify the success cases as well as OnlyLogCriticalEvents
@@ -1062,6 +1046,29 @@ public void LogBuildFinished()
             Assert.True(((BuildFinishedEventArgs)service.ProcessedBuildEvent).IsEquivalent(buildEvent));
         }
 
+        [Theory]
+        [InlineData(true)]
+        [InlineData(false)]
+        public void LogBuildCanceled(bool onlyLogCriticalEvents)
+        {
+            ProcessBuildEventHelper service =
+                (ProcessBuildEventHelper)ProcessBuildEventHelper.CreateLoggingService(LoggerMode.Synchronous, 1);
+            service.OnlyLogCriticalEvents = onlyLogCriticalEvents;
+            service.LogBuildCanceled();
+
+            string message = onlyLogCriticalEvents ? string.Empty : ResourceUtilities.GetResourceString("AbortingBuild");
+
+            BuildCanceledEventArgs buildEvent =
+                new BuildCanceledEventArgs(
+                    message,
+                    null /* no help keyword */,
+                    service.ProcessedBuildEvent.Timestamp);
+
+            Assert.IsType<BuildCanceledEventArgs>(service.ProcessedBuildEvent);
+            Assert.Equal(buildEvent, (BuildCanceledEventArgs)service.ProcessedBuildEvent,
+                new EventArgsEqualityComparer<BuildCanceledEventArgs>());
+        }
+
         /// <summary>
         ///  Exercise Asynchronous code path, this method should return right away as there are no events to process.
         ///  This will be further tested in the LoggingService_Tests class.
diff --git a/src/Build.UnitTests/BackEnd/MockLoggingService.cs b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
index a62b03686d4..a60e662d532 100644
--- a/src/Build.UnitTests/BackEnd/MockLoggingService.cs
+++ b/src/Build.UnitTests/BackEnd/MockLoggingService.cs
@@ -486,6 +486,10 @@ public void LogBuildFinished(bool success)
         {
         }
 
+        /// <inheritdoc />
+        public void LogBuildCanceled()
+        {
+        }
 
         /// <inheritdoc />
         public BuildEventContext CreateEvaluationBuildEventContext(int nodeId, int submissionId)
diff --git a/src/Build.UnitTests/ConsoleLogger_Tests.cs b/src/Build.UnitTests/ConsoleLogger_Tests.cs
index 10859bb9ce5..4144c35429a 100644
--- a/src/Build.UnitTests/ConsoleLogger_Tests.cs
+++ b/src/Build.UnitTests/ConsoleLogger_Tests.cs
@@ -475,6 +475,7 @@ public void NullEventFields()
             es.Consume(new BuildFinishedEventArgs(null, null, true));
             es.Consume(new BuildFinishedEventArgs(null, null, true));
             es.Consume(new MyCustomBuildEventArgs2());
+            es.Consume(new BuildCanceledEventArgs(null, null));
             // No exception raised
         }
 
@@ -511,6 +512,8 @@ public void NullEventFieldsParallel()
             pfea.BuildEventContext = buildEventContext;
             BuildFinishedEventArgs bfea = new BuildFinishedEventArgs(null, null, true);
             bfea.BuildEventContext = buildEventContext;
+            BuildCanceledEventArgs bcea = new BuildCanceledEventArgs(null, null);
+            bcea.BuildEventContext = buildEventContext;
             MyCustomBuildEventArgs2 mcea = new MyCustomBuildEventArgs2();
             mcea.BuildEventContext = buildEventContext;
 
@@ -530,6 +533,7 @@ public void NullEventFieldsParallel()
             es.Consume(bfea);
             es.Consume(bfea);
             es.Consume(bfea);
+            es.Consume(bcea);
             es.Consume(mcea);
             // No exception raised
         }
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index ec86b218112..e452dc50a0a 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -781,6 +781,9 @@ public void CancelAllSubmissions()
 
         private void CancelAllSubmissions(bool async)
         {
+            ILoggingService loggingService = ((IBuildComponentHost)this).LoggingService;
+            loggingService.LogBuildCanceled();
+
             var parentThreadCulture = _buildParameters != null
                 ? _buildParameters.Culture
                 : CultureInfo.CurrentCulture;
diff --git a/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs b/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs
index 893d8796e7d..c6bbf33bb1f 100644
--- a/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs
+++ b/src/Build/BackEnd/Components/Logging/BuildEventArgTransportSink.cs
@@ -74,6 +74,13 @@ public bool HaveLoggedBuildFinishedEvent
             set;
         }
 
+        /// <inheritdoc />
+        public bool HaveLoggedBuildCanceledEvent
+        {
+            get;
+            set;
+        }
+
         /// <summary>
         /// This property is ignored by this event sink and relies on the receiver to treat warnings as errors.
         /// </summary>
@@ -115,6 +122,7 @@ public IDictionary<int, ISet<string>> WarningsAsMessagesByProject
         /// This property is ignored by this event sink and relies on the receiver to keep track of whether or not any errors have been logged.
         /// </summary>
         public ISet<int> BuildSubmissionIdsThatHaveLoggedErrors { get; } = null;
+        
         #endregion
         #region IBuildEventSink Methods
 
@@ -145,6 +153,11 @@ public void Consume(BuildEventArgs buildEvent, int sinkId)
                 HaveLoggedBuildFinishedEvent = true;
                 return;
             }
+            else if (buildEvent is BuildCanceledEventArgs)
+            {
+                HaveLoggedBuildFinishedEvent = true;
+                return;
+            }
 
             LogMessagePacket logPacket = new LogMessagePacket(new KeyValuePair<int, BuildEventArgs>(sinkId, buildEvent));
             _sendDataDelegate(logPacket);
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index 1a16e9f2190..45fef5a74c2 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -20,7 +20,7 @@ internal sealed class EventSourceSink :
 #if FEATURE_APPDOMAIN
         MarshalByRefObject,
 #endif
-        IEventSource4, IBuildEventSink
+        IEventSource5, IBuildEventSink
     {
         #region Events
 
@@ -49,6 +49,11 @@ internal sealed class EventSourceSink :
         /// </summary>
         public event BuildFinishedEventHandler BuildFinished;
 
+        /// <summary>
+        /// this event is raised to log the cancellation of a build
+        /// </summary>
+        public event BuildCanceledEventHandler BuildCanceled;
+
         /// <summary>
         /// this event is raised to log the start of a project build
         /// </summary>
@@ -136,6 +141,13 @@ public bool HaveLoggedBuildFinishedEvent
             set;
         }
 
+        /// <inheritdoc />
+        public bool HaveLoggedBuildCanceledEvent
+        {
+            get;
+            set;
+        }
+
         /// <summary>
         /// Should evaluation events include generated metaprojects?
         /// </summary>
@@ -255,6 +267,10 @@ public void Consume(BuildEventArgs buildEvent)
                     HaveLoggedBuildFinishedEvent = true;
                     RaiseBuildFinishedEvent(null, buildFinishedEvent);
                     break;
+                case BuildCanceledEventArgs buildCanceledEvent:
+                    HaveLoggedBuildCanceledEvent = true;
+                    RaiseBuildCanceledEvent(null, buildCanceledEvent);
+                    break;
                 case CustomBuildEventArgs customBuildEvent:
                     RaiseCustomEvent(null, customBuildEvent);
                     break;
@@ -301,6 +317,7 @@ internal void UnregisterAllEventHandlers()
             WarningRaised = null;
             BuildStarted = null;
             BuildFinished = null;
+            BuildCanceled = null;
             ProjectStarted = null;
             ProjectFinished = null;
             TargetStarted = null;
@@ -527,6 +544,48 @@ private void RaiseBuildFinishedEvent(object sender, BuildFinishedEventArgs build
             RaiseStatusEvent(sender, buildEvent);
         }
 
+        /// <summary>
+        /// Raises a "build canceled" event to all registered loggers.
+        /// </summary>
+        /// <param name="sender">sender of the event</param>
+        /// <param name="buildEvent">BuildCanceledEventArgs</param>
+        /// <exception cref="LoggerException">When EventHandler raises an logger exception the LoggerException is rethrown</exception>
+        /// <exception cref="InternalLoggerException">Any exceptions which are not LoggerExceptions are wrapped in an InternalLoggerException</exception>
+        /// <exception cref="Exception">ExceptionHandling.IsCriticalException exceptions will not be wrapped</exception>
+        private void RaiseBuildCanceledEvent(object sender, BuildCanceledEventArgs buildEvent)
+        {
+            if (BuildCanceled != null)
+            {
+                try
+                {
+                    BuildCanceled(sender, buildEvent);
+                }
+                catch (LoggerException)
+                {
+                    // if a logger has failed politely, abort immediately
+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
+                    // if a fellow logger is throwing in an event handler.
+                    this.UnregisterAllEventHandlers();
+                    throw;
+                }
+                catch (Exception exception)
+                {
+                    // first unregister all loggers, since other loggers may receive remaining events in unexpected orderings
+                    // if a fellow logger is throwing in an event handler.
+                    this.UnregisterAllEventHandlers();
+
+                    if (ExceptionHandling.IsCriticalException(exception))
+                    {
+                        throw;
+                    }
+
+                    InternalLoggerException.Throw(exception, buildEvent, "FatalErrorWhileLogging", false);
+                }
+            }
+
+            RaiseStatusEvent(sender, buildEvent);
+        }
+
         /// <summary>
         /// Raises a "project build started" event to all registered loggers.
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Logging/ILoggingService.cs b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
index 3e44402a61e..72ca53aea54 100644
--- a/src/Build/BackEnd/Components/Logging/ILoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/ILoggingService.cs
@@ -462,6 +462,11 @@ MessageImportance MinimumRequiredMessageImportance
         /// <param name="success">Did the build succeed or not</param>
         void LogBuildFinished(bool success);
 
+        /// <summary>
+        /// Logs that the build has canceled
+        /// </summary>
+        void LogBuildCanceled();
+
         /// <summary>
         /// Create an evaluation context, by generating a new evaluation id.
         /// </summary>
@@ -650,6 +655,16 @@ bool HaveLoggedBuildFinishedEvent
             get;
             set;
         }
+
+        /// <summary>
+        /// Has the sink logged the BuildCanceledEvent. This is important to know because we only want to log the build canceled event once
+        /// </summary>
+        bool HaveLoggedBuildCanceledEvent
+        {
+            get;
+            set;
+        }
+
         #endregion
         /// <summary>
         /// Entry point for a sink to consume an event.
diff --git a/src/Build/BackEnd/Components/Logging/LoggingService.cs b/src/Build/BackEnd/Components/Logging/LoggingService.cs
index 885647baba0..6a73ad3f89a 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingService.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingService.cs
@@ -1689,6 +1689,24 @@ private void RouteBuildEvent(BuildEventArgs eventArg)
                         }
                     }
                 }
+                else if (eventArg is BuildCanceledEventArgs)
+                {
+                    foreach (KeyValuePair<int, IBuildEventSink> pair in _eventSinkDictionary)
+                    {
+                        IBuildEventSink sink = pair.Value;
+
+                        if (sink != null)
+                        {
+                            if (!sink.HaveLoggedBuildCanceledEvent)
+                            {
+                                sink.Consume(eventArg, (int)pair.Key);
+                            }
+
+                            // Reset the HaveLoggedBuildFinished event because no one else will be sending a build canceled event to any loggers at this time.
+                            sink.HaveLoggedBuildCanceledEvent = false;
+                        }
+                    }
+                }
             }
 
             TryRaiseProjectFinishedEvent(eventArg);
diff --git a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
index 547554d06d8..a6a34a4c8d9 100644
--- a/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
+++ b/src/Build/BackEnd/Components/Logging/LoggingServiceLogMethods.cs
@@ -420,6 +420,25 @@ public void LogBuildFinished(bool success)
             WaitForLoggingToProcessEvents();
         }
 
+        /// <inheritdoc />
+        public void LogBuildCanceled()
+        {
+            // If we're only logging critical events, don't risk causing all the resources to load by formatting
+            // a string that won't get emitted anyway.
+            string message = String.Empty;
+            if (!OnlyLogCriticalEvents)
+            {
+                message = ResourceUtilities.GetResourceString("AbortingBuild");
+            }            
+            
+            BuildCanceledEventArgs buildEvent = new BuildCanceledEventArgs(message, null);
+
+            ProcessLoggingEvent(buildEvent);
+
+            // Make sure we process this event before going any further
+            WaitForLoggingToProcessEvents();
+        }
+
         /// <inheritdoc />
         public BuildEventContext CreateEvaluationBuildEventContext(int nodeId, int submissionId)
             => new BuildEventContext(submissionId, nodeId, NextEvaluationId, BuildEventContext.InvalidProjectInstanceId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidTaskId);
diff --git a/src/Build/Definition/ProjectCollection.cs b/src/Build/Definition/ProjectCollection.cs
index 11dd0a1143d..9ce2d9766d9 100644
--- a/src/Build/Definition/ProjectCollection.cs
+++ b/src/Build/Definition/ProjectCollection.cs
@@ -1831,7 +1831,7 @@ public ProjectAddedToProjectCollectionEventArgs(ProjectRootElement element)
         /// The ReusableLogger wraps a logger and allows it to be used for both design-time and build-time.  It internally swaps
         /// between the design-time and build-time event sources in response to Initialize and Shutdown events.
         /// </summary>
-        internal class ReusableLogger : INodeLogger, IEventSource4
+        internal class ReusableLogger : INodeLogger, IEventSource5
         {
             /// <summary>
             /// The logger we are wrapping.
@@ -1863,6 +1863,11 @@ internal class ReusableLogger : INodeLogger, IEventSource4
             /// </summary>
             private BuildFinishedEventHandler _buildFinishedEventHandler;
 
+            /// <summary>
+            /// The BuildCanceled event handler
+            /// </summary>
+            private BuildCanceledEventHandler _buildCanceledEventHandler;
+
             /// <summary>
             /// The BuildStarted event handler
             /// </summary>
@@ -1972,6 +1977,11 @@ public ReusableLogger(ILogger originalLogger)
             /// </summary>
             public event BuildFinishedEventHandler BuildFinished;
 
+            /// <summary>
+            /// The BuildCanceled logging event
+            /// </summary>
+            public event BuildCanceledEventHandler BuildCanceled;
+
             /// <summary>
             /// The ProjectStarted logging event
             /// </summary>
@@ -2021,7 +2031,7 @@ public ReusableLogger(ILogger originalLogger)
             /// The telemetry sent event.
             /// </summary>
             public event TelemetryEventHandler TelemetryLogged;
-
+            
             /// <summary>
             /// Should evaluation events include generated metaprojects?
             /// </summary>
@@ -2183,6 +2193,7 @@ private void RegisterForEvents(IEventSource eventSource)
                 _anyEventHandler = AnyEventRaisedHandler;
                 _buildFinishedEventHandler = BuildFinishedHandler;
                 _buildStartedEventHandler = BuildStartedHandler;
+                _buildCanceledEventHandler = BuildCanceledHandler;
                 _customBuildEventHandler = CustomEventRaisedHandler;
                 _buildErrorEventHandler = ErrorRaisedHandler;
                 _buildMessageEventHandler = MessageRaisedHandler;
@@ -2242,6 +2253,11 @@ private void RegisterForEvents(IEventSource eventSource)
                         eventSource4.IncludeEvaluationPropertiesAndItems();
                     }
                 }
+
+                if (eventSource is IEventSource5 eventSource5)
+                {
+                    eventSource5.BuildCanceled += _buildCanceledEventHandler;
+                }
             }
 
             /// <summary>
@@ -2270,10 +2286,16 @@ private void UnregisterForEvents(IEventSource eventSource)
                     eventSource2.TelemetryLogged -= _telemetryEventHandler;
                 }
 
+                if (eventSource is IEventSource5 eventSource5)
+                {
+                    eventSource5.BuildCanceled -= _buildCanceledEventHandler;
+                }
+
                 // Null out the handlers.
                 _anyEventHandler = null;
                 _buildFinishedEventHandler = null;
                 _buildStartedEventHandler = null;
+                _buildCanceledEventHandler = null;
                 _customBuildEventHandler = null;
                 _buildErrorEventHandler = null;
                 _buildMessageEventHandler = null;
@@ -2392,6 +2414,14 @@ private void BuildFinishedHandler(object sender, BuildFinishedEventArgs e)
                 BuildFinished?.Invoke(sender, e);
             }
 
+            /// <summary>
+            /// Handler for BuildCanceled events.
+            /// </summary>
+            private void BuildCanceledHandler(object sender, BuildCanceledEventArgs e)
+            {
+                BuildCanceled?.Invoke(sender, e);
+            }
+
             /// <summary>
             /// Handler for Any events.
             /// </summary>
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 7dc448e6fb5..a05df1dc57e 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -955,6 +955,11 @@ public virtual void Initialize(IEventSource eventSource)
                 {
                     eventSource4.IncludeEvaluationPropertiesAndItems();
                 }
+
+                if (eventSource is IEventSource5 eventSource5)
+                {
+                    eventSource5.BuildCanceled += BuildCanceledHanlder;
+                }
             }
         }
 
@@ -1046,6 +1051,8 @@ private bool ApplyVerbosityParameter(string parameterValue)
 
         public abstract void BuildFinishedHandler(object sender, BuildFinishedEventArgs e);
 
+        public abstract void BuildCanceledHanlder(object sender, BuildCanceledEventArgs e);
+
         public abstract void ProjectStartedHandler(object sender, ProjectStartedEventArgs e);
 
         public abstract void ProjectFinishedHandler(object sender, ProjectFinishedEventArgs e);
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 280d61a3bad..3cbb2add764 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -338,6 +338,16 @@ public override void BuildFinishedHandler(object sender, BuildFinishedEventArgs
             CheckIfOutputSupportsAlignment();
         }
 
+        /// <summary>
+        /// Handler for build canceled event
+        /// </summary>
+        /// <param name="sender">sender (should be null)</param>
+        /// <param name="e">event arguments</param>
+        public override void BuildCanceledHanlder(object sender, BuildCanceledEventArgs e)
+        {
+            Console.WriteLine(e.Message ?? string.Empty);
+        }
+
         /// <summary>
         /// At the end of the build, repeats the errors and warnings that occurred
         /// during the build, and displays the error count and warning count.
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index 61f750ff472..f7f62d8ef7e 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -181,6 +181,16 @@ public override void BuildFinishedHandler(object sender, BuildFinishedEventArgs
             ResetConsoleLoggerState();
         }
 
+        /// <summary>
+        /// Handler for build canceled event
+        /// </summary>
+        /// <param name="sender">sender (should be null)</param>
+        /// <param name="e">event arguments</param>
+        public override void BuildCanceledHanlder(object sender, BuildCanceledEventArgs e)
+        {
+            Console.WriteLine(e.Message ?? string.Empty);
+        }
+
         /// <summary>
         /// At the end of the build, repeats the errors and warnings that occurred
         /// during the build, and displays the error count and warning count.
diff --git a/src/Build/Resources/Strings.resx b/src/Build/Resources/Strings.resx
index 7453fff8c5e..3ff255b9bf7 100644
--- a/src/Build/Resources/Strings.resx
+++ b/src/Build/Resources/Strings.resx
@@ -139,6 +139,9 @@
   <data name="NoBuildInProgress" xml:space="preserve">
     <value>The operation cannot be completed because BeginBuild has not yet been called.</value>
   </data>
+  <data name="AbortingBuild" xml:space="preserve">
+    <value>Attempting to cancel the build...</value>
+  </data>
   <data name="WaitingForEndOfBuild" xml:space="preserve">
     <value>The operation cannot be completed because EndBuild has already been called but existing submissions have not yet completed.</value>
   </data>
diff --git a/src/Build/Resources/xlf/Strings.cs.xlf b/src/Build/Resources/xlf/Strings.cs.xlf
index ad7c2ad80e5..4bb23418cca 100644
--- a/src/Build/Resources/xlf/Strings.cs.xlf
+++ b/src/Build/Resources/xlf/Strings.cs.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="cs" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: Úloha {0} má více než jeden parametr s názvem {1}.</target>
diff --git a/src/Build/Resources/xlf/Strings.de.xlf b/src/Build/Resources/xlf/Strings.de.xlf
index c34c232203f..342eb2e0c7f 100644
--- a/src/Build/Resources/xlf/Strings.de.xlf
+++ b/src/Build/Resources/xlf/Strings.de.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="de" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: Die {0}-Aufgabe enthält mehrere Parameter mit dem Namen "{1}".</target>
diff --git a/src/Build/Resources/xlf/Strings.es.xlf b/src/Build/Resources/xlf/Strings.es.xlf
index 236863c1570..e38ee3439b3 100644
--- a/src/Build/Resources/xlf/Strings.es.xlf
+++ b/src/Build/Resources/xlf/Strings.es.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="es" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: La tarea"{0}" tiene más de un parámetro denominado "{1}".</target>
diff --git a/src/Build/Resources/xlf/Strings.fr.xlf b/src/Build/Resources/xlf/Strings.fr.xlf
index 0225ed0f126..fda619eb7ca 100644
--- a/src/Build/Resources/xlf/Strings.fr.xlf
+++ b/src/Build/Resources/xlf/Strings.fr.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="fr" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: La tâche "{0}" a plusieurs paramètres appelés "{1}".</target>
diff --git a/src/Build/Resources/xlf/Strings.it.xlf b/src/Build/Resources/xlf/Strings.it.xlf
index f74935daff9..9956a86861b 100644
--- a/src/Build/Resources/xlf/Strings.it.xlf
+++ b/src/Build/Resources/xlf/Strings.it.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="it" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: l'attività "{0}" contiene più di un parametro denominato "{1}".</target>
diff --git a/src/Build/Resources/xlf/Strings.ja.xlf b/src/Build/Resources/xlf/Strings.ja.xlf
index 8f56bc5320a..02350cc2791 100644
--- a/src/Build/Resources/xlf/Strings.ja.xlf
+++ b/src/Build/Resources/xlf/Strings.ja.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="ja" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: "{0}" タスクには "{1}" という名前のパラメーターが 2 つ以上あります。</target>
diff --git a/src/Build/Resources/xlf/Strings.ko.xlf b/src/Build/Resources/xlf/Strings.ko.xlf
index f08f1c8e3a4..5f22774fce8 100644
--- a/src/Build/Resources/xlf/Strings.ko.xlf
+++ b/src/Build/Resources/xlf/Strings.ko.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="ko" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: "{0}" 작업에 이름이 "{1}"인 매개 변수가 두 개 이상 있습니다.</target>
diff --git a/src/Build/Resources/xlf/Strings.pl.xlf b/src/Build/Resources/xlf/Strings.pl.xlf
index 61bf754b653..64897c0149c 100644
--- a/src/Build/Resources/xlf/Strings.pl.xlf
+++ b/src/Build/Resources/xlf/Strings.pl.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="pl" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: Zadanie „{0}” zawiera więcej niż jeden parametr o nazwie „{1}”.</target>
diff --git a/src/Build/Resources/xlf/Strings.pt-BR.xlf b/src/Build/Resources/xlf/Strings.pt-BR.xlf
index b211fd7d955..c3aed69e65b 100644
--- a/src/Build/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/Build/Resources/xlf/Strings.pt-BR.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="pt-BR" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: A tarefa "{0}" tem mais de um parâmetro denominado "{1}".</target>
diff --git a/src/Build/Resources/xlf/Strings.ru.xlf b/src/Build/Resources/xlf/Strings.ru.xlf
index 234b5338a3f..e03b2cb88b3 100644
--- a/src/Build/Resources/xlf/Strings.ru.xlf
+++ b/src/Build/Resources/xlf/Strings.ru.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="ru" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: у задачи "{0}" несколько параметров "{1}".</target>
diff --git a/src/Build/Resources/xlf/Strings.tr.xlf b/src/Build/Resources/xlf/Strings.tr.xlf
index 3e4431b5272..d3ed34c4b69 100644
--- a/src/Build/Resources/xlf/Strings.tr.xlf
+++ b/src/Build/Resources/xlf/Strings.tr.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="tr" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: "{0}" görevinin "{1}" adında birden fazla parametresi var.</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hans.xlf b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
index f0709af4138..88683d6a4bd 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hans.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="zh-Hans" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: “{0}”任务包含多个名为“{1}”的参数。</target>
diff --git a/src/Build/Resources/xlf/Strings.zh-Hant.xlf b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
index db646b99ac9..8ff76572a59 100644
--- a/src/Build/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/Build/Resources/xlf/Strings.zh-Hant.xlf
@@ -2,6 +2,11 @@
 <xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
   <file datatype="xml" source-language="en" target-language="zh-Hant" original="../Strings.resx">
     <body>
+      <trans-unit id="AbortingBuild">
+        <source>Attempting to cancel the build...</source>
+        <target state="new">Attempting to cancel the build...</target>
+        <note />
+      </trans-unit>
       <trans-unit id="AmbiguousTaskParameterError">
         <source>MSB4001: The "{0}" task has more than one parameter called "{1}".</source>
         <target state="translated">MSB4001: "{0}" 工作有多個名稱為 "{1}" 的參數。</target>
diff --git a/src/Deprecated/Engine/Engine/EngineLoggingServices.cs b/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
index 018b94a2ae6..cf7e5cf0af5 100644
--- a/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
+++ b/src/Deprecated/Engine/Engine/EngineLoggingServices.cs
@@ -21,12 +21,12 @@ namespace Microsoft.Build.BuildEngine
     /// services for tasks. This class allows for better encapsulation by making it clear when only
     /// logging services are needed and not the rest of the engine data and methods. This class allows
     /// us to provide different implementations of logging services for engine components that are
-    /// either in-proc (engine process) or out-of-proc (node process).
+    /// either in-proc (engine process) or out-of-proc (node process). 
     /// </summary>
     /// <remarks>
     /// We have made this an abstract class and not an interface to avoid forcing the "public" access
     /// modifier on the implementation of the internal logging services.
-    /// </remarks>
+    /// </remarks> 
     internal abstract class EngineLoggingServices
     {
         #region Initialization/Shutdown methods
diff --git a/src/Framework/BuildCanceledEventArgs.cs b/src/Framework/BuildCanceledEventArgs.cs
new file mode 100644
index 00000000000..e403a791357
--- /dev/null
+++ b/src/Framework/BuildCanceledEventArgs.cs
@@ -0,0 +1,59 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using System.IO;
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// This class represents the event arguments for build canceled events.
+    /// </summary>
+    public sealed class BuildCanceledEventArgs : BuildStatusEventArgs
+    {
+        /// <summary>
+        /// Constructor to initialize all parameters.
+        /// Sender field cannot be set here and is assumed to be "MSBuild"
+        /// </summary>
+        /// <param name="message">text message</param>
+        /// <param name="helpKeyword">help keyword </param>
+        public BuildCanceledEventArgs(
+            string? message,
+            string? helpKeyword)
+            : this(message, helpKeyword, DateTime.UtcNow)
+        {
+        }
+
+        /// <summary>
+        /// Constructor which allows the timestamp to be set
+        /// </summary>
+        /// <param name="message">text message</param>
+        /// <param name="helpKeyword">help keyword </param>
+        /// <param name="eventTimestamp">Timestamp when the event was created</param>
+        public BuildCanceledEventArgs(
+            string? message,
+            string? helpKeyword,
+            DateTime eventTimestamp)
+            : this(message, helpKeyword, eventTimestamp, null)
+        {
+            // do nothing
+        }
+
+        /// <summary>
+        /// Constructor which allows the timestamp to be set
+        /// </summary>
+        /// <param name="message">text message</param>
+        /// <param name="helpKeyword">help keyword </param>
+        /// <param name="eventTimestamp">Timestamp when the event was created</param>
+        /// <param name="messageArgs">message arguments</param>
+        public BuildCanceledEventArgs(
+            string? message,
+            string? helpKeyword,
+            DateTime eventTimestamp,
+            params object[]? messageArgs)
+            : base(message, helpKeyword, "MSBuild", eventTimestamp, messageArgs)
+        {
+            // do nothing
+        }
+    }
+}
diff --git a/src/Framework/IEventSource.cs b/src/Framework/IEventSource.cs
index 8e5402b6fd3..2439db58eea 100644
--- a/src/Framework/IEventSource.cs
+++ b/src/Framework/IEventSource.cs
@@ -37,6 +37,11 @@ namespace Microsoft.Build.Framework
     /// </summary>
     public delegate void BuildFinishedEventHandler(object sender, BuildFinishedEventArgs e);
 
+    /// <summary>
+    /// Type of handler for BuildCanceledEvent events
+    /// </summary>
+    public delegate void BuildCanceledEventHandler(object sender, BuildCanceledEventArgs e);
+
     /// <summary>
     /// Type of handler for ProjectStarted events
     /// </summary>
diff --git a/src/Framework/IEventSource5.cs b/src/Framework/IEventSource5.cs
new file mode 100644
index 00000000000..c93fd35e79a
--- /dev/null
+++ b/src/Framework/IEventSource5.cs
@@ -0,0 +1,20 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+#nullable disable
+
+namespace Microsoft.Build.Framework
+{
+    /// <summary>
+    /// This interface defines the events raised by the build engine.
+    /// Loggers use this interface to subscribe to the events they
+    /// are interested in receiving.
+    /// </summary>
+    public interface IEventSource5 : IEventSource4
+    {
+        /// <summary>
+        /// this event is raised to log the cancellation of a build
+        /// </summary>
+        event BuildCanceledEventHandler BuildCanceled;
+    }
+}
diff --git a/src/MSBuild/Resources/Strings.resx b/src/MSBuild/Resources/Strings.resx
index 1129806b5c5..1c07bba9032 100644
--- a/src/MSBuild/Resources/Strings.resx
+++ b/src/MSBuild/Resources/Strings.resx
@@ -1373,9 +1373,6 @@
       LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
     </comment>
   </data>
-  <data name="AbortingBuild" xml:space="preserve">
-    <value>Attempting to cancel the build...</value>
-  </data>
   <data name="InvalidPreprocessPath" xml:space="preserve">
     <value>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</value>
     <comment>{StrBegin="MSBUILD : error MSB1047: "}</comment>
diff --git a/src/MSBuild/Resources/xlf/Strings.cs.xlf b/src/MSBuild/Resources/xlf/Strings.cs.xlf
index f417ee15051..07a6f0c61c2 100644
--- a/src/MSBuild/Resources/xlf/Strings.cs.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.cs.xlf
@@ -1804,11 +1804,6 @@ Když se nastaví na MessageUponIsolationViolation (nebo jeho krátký
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">Pokus o zrušení sestavování...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: Soubor, do kterého má být provedeno předběžné zpracování, není platný. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.de.xlf b/src/MSBuild/Resources/xlf/Strings.de.xlf
index 50706b404dc..0f2ed656037 100644
--- a/src/MSBuild/Resources/xlf/Strings.de.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.de.xlf
@@ -1792,11 +1792,6 @@ Dieses Protokollierungsformat ist standardmäßig aktiviert.
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">Es wird versucht, den Buildvorgang abzubrechen...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: Die vorzuverarbeitende Datei ist ungültig. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.es.xlf b/src/MSBuild/Resources/xlf/Strings.es.xlf
index e8e133d96d3..645d17ebb00 100644
--- a/src/MSBuild/Resources/xlf/Strings.es.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.es.xlf
@@ -1798,11 +1798,6 @@ Esta marca es experimental y puede que no funcione según lo previsto.
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">Intentando cancelar la compilación...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: El archivo en el que se preprocesará no es válido. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.fr.xlf b/src/MSBuild/Resources/xlf/Strings.fr.xlf
index bf502af7f50..4e85388e8a7 100644
--- a/src/MSBuild/Resources/xlf/Strings.fr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.fr.xlf
@@ -1791,11 +1791,6 @@ Remarque : verbosité des enregistreurs d’événements de fichiers
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">Tentative d'annulation de la génération en cours...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: Le fichier à prétraiter n'est pas valide. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.it.xlf b/src/MSBuild/Resources/xlf/Strings.it.xlf
index 9963ca29c49..306a2839471 100644
--- a/src/MSBuild/Resources/xlf/Strings.it.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.it.xlf
@@ -1802,11 +1802,6 @@ Nota: livello di dettaglio dei logger di file
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">Tentativo di annullare la compilazione in corso...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: file da pre-elaborare non valido. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ja.xlf b/src/MSBuild/Resources/xlf/Strings.ja.xlf
index e7954c3f91c..1d7cb8429d1 100644
--- a/src/MSBuild/Resources/xlf/Strings.ja.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ja.xlf
@@ -1791,11 +1791,6 @@
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">ビルドを取り消そうとしています...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: 前処理するファイルが無効です。{0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ko.xlf b/src/MSBuild/Resources/xlf/Strings.ko.xlf
index f995ca421bc..c507fb90e80 100644
--- a/src/MSBuild/Resources/xlf/Strings.ko.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ko.xlf
@@ -1791,11 +1791,6 @@
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">빌드를 취소하는 중...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: 전처리할 파일이 잘못되었습니다. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.pl.xlf b/src/MSBuild/Resources/xlf/Strings.pl.xlf
index 6d1956125cd..035dd326a8c 100644
--- a/src/MSBuild/Resources/xlf/Strings.pl.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pl.xlf
@@ -1802,11 +1802,6 @@ Ta flaga jest eksperymentalna i może nie działać zgodnie z oczekiwaniami.
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">Trwa próba anulowania kompilacji...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: Plik, który ma zostać wstępnie przetworzony, jest nieprawidłowy. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
index 4e3266b9533..154b419d9de 100644
--- a/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.pt-BR.xlf
@@ -1792,11 +1792,6 @@ arquivo de resposta.
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">Tentando cancelar a compilação...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: O arquivo a ser pré-processado é inválido. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.ru.xlf b/src/MSBuild/Resources/xlf/Strings.ru.xlf
index 2c27bb72d73..a65057a7914 100644
--- a/src/MSBuild/Resources/xlf/Strings.ru.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.ru.xlf
@@ -1790,11 +1790,6 @@
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">Попытка отменить сборку...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: недопустимый файл для предварительной обработки. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.tr.xlf b/src/MSBuild/Resources/xlf/Strings.tr.xlf
index 86fc2093ac5..9ab13a1245a 100644
--- a/src/MSBuild/Resources/xlf/Strings.tr.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.tr.xlf
@@ -1795,11 +1795,6 @@
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">Oluşturma iptal edilmeye çalışılıyor...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: Ön işlem uygulanacak dosya geçerli değil. {0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
index 78c661b0857..289b0d07742 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hans.xlf
@@ -1791,11 +1791,6 @@
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">正在尝试取消生成...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: 要预处理的文件无效。{0}</target>
diff --git a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
index 29c76948500..cb6b2920e6e 100644
--- a/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
+++ b/src/MSBuild/Resources/xlf/Strings.zh-Hant.xlf
@@ -1791,11 +1791,6 @@
      LOCALIZATION: The prefix "MSBUILD : error MSBxxxx:" should not be localized.
   </note>
       </trans-unit>
-      <trans-unit id="AbortingBuild">
-        <source>Attempting to cancel the build...</source>
-        <target state="translated">正在嘗試取消建置...</target>
-        <note />
-      </trans-unit>
       <trans-unit id="InvalidPreprocessPath">
         <source>MSBUILD : error MSB1047: File to preprocess to is not valid. {0}</source>
         <target state="translated">MSBUILD : error MSB1047: 要前置處理的目地檔案無效。{0}</target>
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index e241c6b65bc..a3155b3d7f7 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -207,21 +207,19 @@ public ProjectContext(BuildEventContext context)
     /// </summary>
     private bool _showCommandLine = false;
 
-    private CancellationToken _buildCancellationToken;
+    private BuildCanceledEventArgs? _buildCanceledEvetnAgrs;
 
     private bool _cancellationMessageRendered;
 
     /// <summary>
     /// Default constructor, used by the MSBuild logger infra.
     /// </summary>
-    public TerminalLogger(CancellationToken buildCancellationToken)
+    public TerminalLogger()
     {
-        _buildCancellationToken = buildCancellationToken;
         Terminal = new Terminal();
     }
 
-    public TerminalLogger(LoggerVerbosity verbosity, CancellationToken buildCancellationToken)
-        : this(buildCancellationToken)
+    public TerminalLogger(LoggerVerbosity verbosity) : this()
     {
         Verbosity = verbosity;
     }
@@ -273,6 +271,11 @@ public void Initialize(IEventSource eventSource)
         {
             eventSource4.IncludeEvaluationPropertiesAndItems();
         }
+
+        if (eventSource is IEventSource5 eventSource5)
+        {
+            eventSource5.BuildCanceled += BuildCanceled;
+        }
     }
 
     /// <summary>
@@ -453,6 +456,11 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
         _testEndTime = null;
     }
 
+    private void BuildCanceled(object sender, BuildCanceledEventArgs e)
+    {
+        _buildCanceledEvetnAgrs = e;
+    }
+
     /// <summary>
     /// The <see cref="IEventSource.ProjectStarted"/> callback.
     /// </summary>
@@ -949,11 +957,12 @@ private void ThreadProc()
     /// </summary>
     internal void DisplayNodes()
     {
-        if (_buildCancellationToken.IsCancellationRequested)
+        if (_buildCanceledEvetnAgrs != null)
         {
             if (!_cancellationMessageRendered)
             {
-                Terminal.WriteLine(ResourceUtilities.GetResourceString("AbortingBuild"));
+                string message = _buildCanceledEvetnAgrs.Message ?? string.Empty;
+                Terminal.WriteLine(message);
                 _cancellationMessageRendered = true;
             }
 
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 83afa5fa277..032ccb2b17b 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -1145,8 +1145,8 @@ private static void Console_CancelKeyPress(object sender, ConsoleCancelEventArgs
                 return;
             }
 
-            Console.WriteLine(ResourceUtilities.GetResourceString("AbortingBuild"));
             s_buildCancellationSource.Cancel();
+            
 
             // The OS takes a lock in
             // kernel32.dll!_SetConsoleCtrlHandler, so if a task
@@ -3980,7 +3980,7 @@ private static void ProcessTerminalLogger(bool noConsoleLogger,
             if (!noConsoleLogger)
             {
                 // A central logger will be created for both single proc and multiproc.
-                TerminalLogger logger = new TerminalLogger(verbosity, s_buildCancellationSource.Token)
+                TerminalLogger logger = new TerminalLogger(verbosity)
                 {
                     Parameters = aggregatedLoggerParameters
                 };
