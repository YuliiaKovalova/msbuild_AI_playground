diff --git a/.config/git-merge-flow-config.jsonc b/.config/git-merge-flow-config.jsonc
new file mode 100644
index 00000000000..e9fac7f230c
--- /dev/null
+++ b/.config/git-merge-flow-config.jsonc
@@ -0,0 +1,42 @@
+// IMPORTANT: This file is read by the merge flow from main branch only. 
+{
+    "merge-flow-configurations": {
+        // MSBuild servicing chain from oldest supported through currently-supported to main
+        // Automate opening PRs to merge msbuild's vs16.11 (VS until 4/2029) into vs17.0 (SDK 6.0.1xx)
+        "vs16.11": {
+            "MergeToBranch": "vs17.0"
+        },
+        // Automate opening PRs to merge msbuild's vs17.0 (SDK 6.0.1xx) into vs17.3 (SDK 6.0.4xx)
+        "vs17.0": {
+            "MergeToBranch": "vs17.3"
+        },
+        // Automate opening PRs to merge msbuild's vs17.3 (SDK 6.0.4xx) into vs17.4 (SDK 7.0.1xx until 5/2024, VS until 7/2024)
+        "vs17.3": {
+            "MergeToBranch": "vs17.4"
+        },
+        // Automate opening PRs to merge msbuild's vs17.4 into vs17.6 (VS until 1/2025)
+        "vs17.4": {
+            "MergeToBranch": "vs17.6"
+        },
+        // Automate opening PRs to merge msbuild's vs17.6 into vs17.8 (VS until 7/2025)
+        "vs17.6": {
+            "MergeToBranch": "vs17.8"
+        },
+        // Automate opening PRs to merge msbuild's vs17.8 (SDK 8.0.1xx) into vs17.9 (SDK 8.0.2xx)
+        "vs17.8": {
+            "MergeToBranch": "vs17.9"
+        },
+        // Automate opening PRs to merge msbuild's vs17.9 (SDK 8.0.2xx) into vs17.10 (SDK 8.0.3xx)
+        "vs17.9": {
+            "MergeToBranch": "vs17.10"
+        },
+        // Automate opening PRs to merge msbuild's vs17.10 (SDK 8.0.3xx) into vs17.11 (SDK 8.0.4xx)
+        "vs17.10": {
+            "MergeToBranch": "vs17.11"
+        },
+        // MSBuild latest release to main
+        "vs17.11": {
+            "MergeToBranch": "main"
+        }
+    }
+}
\ No newline at end of file
diff --git a/.config/guardian/.gdnbaselines b/.config/guardian/.gdnbaselines
index 7c1e70b5438..7d8206c7975 100644
--- a/.config/guardian/.gdnbaselines
+++ b/.config/guardian/.gdnbaselines
@@ -52,6 +52,45 @@
       "createdDate": "2024-03-14 12:01:14Z",
       "expirationDate": "2024-08-31 12:48:32Z",
       "justification": "This error is baselined with an expiration date of 180 days from 2024-03-14 12:48:32Z"
+    },
+    "24491acb7bf0f8b072d9fbd2f6efcf1bdf6e9506ff3f7a9f9c803445c55b7bd9": {
+      "signature": "24491acb7bf0f8b072d9fbd2f6efcf1bdf6e9506ff3f7a9f9c803445c55b7bd9",
+      "alternativeSignatures": [
+        "2dc3f5f5423a151deb6a74413f2798ade061c1f50519daeed42acfd2caebed03"
+      ],
+      "target": ".packages/drop.app/18.165.29912-buildid11693003/lib/net45/ContentStoreApp.Full/x64/BuildXLAria.dll",
+      "memberOf": [
+        "default"
+      ],
+      "tool": "binskim",
+      "ruleId": "BA2008",
+      "createdDate": "2024-06-19 17:22:41Z"
+    },
+    "1dc1a6797e20d1319df1cb8d4df5c6f6194ce4e87151bf801fb9bf2d038ccfaf": {
+      "signature": "1dc1a6797e20d1319df1cb8d4df5c6f6194ce4e87151bf801fb9bf2d038ccfaf",
+      "alternativeSignatures": [
+        "f52bc24a2feebdcb7b1192ac2debea8da9ca5d012a6719e905b16f979711ceca"
+      ],
+      "target": ".packages/drop.app/18.165.29912-buildid11693003/lib/net45/ContentStoreApp.Full/x64/BuildXLNatives.dll",
+      "memberOf": [
+        "default"
+      ],
+      "tool": "binskim",
+      "ruleId": "BA2008",
+      "createdDate": "2024-06-19 17:22:41Z"
+    },
+    "5bf3f552d54adcae12d7f1e79d47b5a9392c774f03943793cd1a0f7bb2eef28b": {
+      "signature": "5bf3f552d54adcae12d7f1e79d47b5a9392c774f03943793cd1a0f7bb2eef28b",
+      "alternativeSignatures": [
+        "ea4d59d18cbff7ffab4bb678927fc6fee763539a51cfbf5aae60ae1b8123a6ba"
+      ],
+      "target": ".packages/drop.app/18.165.29912-buildid11693003/lib/net45/ContentStoreApp.Full/x64/ClientTelemetry.dll",
+      "memberOf": [
+        "default"
+      ],
+      "tool": "binskim",
+      "ruleId": "BA2007",
+      "createdDate": "2024-06-19 17:22:41Z"
     }
   }
-}
\ No newline at end of file
+}
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index fbfe748e717..df31f2253d8 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -60,6 +60,48 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProces
         }
     }
 
+    [Theory(Skip = "https://github.com/dotnet/msbuild/issues/10036")]
+    [InlineData(true, true, "warning")]
+    [InlineData(true, true, "error")]
+    [InlineData(true, true, "info")]
+    [InlineData(false, true, "warning")]
+    [InlineData(false, true, "error")]
+    [InlineData(false, true, "info")]
+    [InlineData(false, false, "warning")]
+    public void SampleAnalyzerIntegrationTest_ReplayBinaryLogOfAnalyzedBuild(bool buildInOutOfProcessNode, bool analysisRequested, string BC0101Severity)
+    {
+        PrepareSampleProjectsAndConfig(buildInOutOfProcessNode, out TransientTestFile projectFile, BC0101Severity);
+
+        var projectDirectory = Path.GetDirectoryName(projectFile.Path);
+        string logFile = _env.ExpectFile(".binlog").Path;
+
+        RunnerUtilities.ExecBootstrapedMSBuild(
+            $"{Path.GetFileName(projectFile.Path)} /m:1 -nr:False -restore {(analysisRequested ? "-analyze" : string.Empty)} -bl:{logFile}",
+            out bool success, false, _env.Output, timeoutMilliseconds: 120_000);
+
+        success.ShouldBeTrue();
+
+        string output = RunnerUtilities.ExecBootstrapedMSBuild(
+         $"{logFile} -flp:logfile={Path.Combine(projectDirectory!, "logFile.log")};verbosity=diagnostic",
+         out success, false, _env.Output, timeoutMilliseconds: 120_000);
+
+        _env.Output.WriteLine(output);
+
+        success.ShouldBeTrue();
+
+        // The conflicting outputs warning appears - but only if analysis was requested
+        if (analysisRequested)
+        {
+            output.ShouldContain("BC0101");
+            output.ShouldContain("BC0102");
+        }
+        else
+        {
+            output.ShouldNotContain("BC0101");
+            output.ShouldNotContain("BC0102");
+        }
+    }
+
     [Theory]
     [InlineData(true, true)]
     [InlineData(false, true)]
@@ -98,7 +140,10 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBinaryLogReplay(bool buildInO
         }
     }
 
-    private void PrepareSampleProjectsAndConfig(bool buildInOutOfProcessNode, out TransientTestFile projectFile)
+    private void PrepareSampleProjectsAndConfig(
+        bool buildInOutOfProcessNode,
+        out TransientTestFile projectFile,
+        string BC0101Severity = "warning")
     {
         TransientTestFolder workFolder = _env.CreateFolder(createFolder: true);
         TransientTestFile testFile = _env.CreateFile(workFolder, "somefile");
@@ -154,12 +199,12 @@ private void PrepareSampleProjectsAndConfig(bool buildInOutOfProcessNode, out Tr
         TransientTestFile projectFile2 = _env.CreateFile(workFolder, "FooBar-Copy.csproj", contents2);
 
         TransientTestFile config = _env.CreateFile(workFolder, ".editorconfig",
-            """
+            $"""
             root=true
 
             [*.csproj]
             build_check.BC0101.IsEnabled=true
-            build_check.BC0101.Severity=warning
+            build_check.BC0101.Severity={BC0101Severity}
 
             build_check.BC0102.IsEnabled=true
             build_check.BC0102.Severity=warning
diff --git a/src/Framework/BuildCheck/BuildCheckEventArgs.cs b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
index 7789ba37d18..8cc9dfbd691 100644
--- a/src/Framework/BuildCheck/BuildCheckEventArgs.cs
+++ b/src/Framework/BuildCheck/BuildCheckEventArgs.cs
@@ -109,7 +109,7 @@ internal sealed class BuildCheckResultWarning : BuildWarningEventArgs
 {
     public BuildCheckResultWarning(IBuildCheckResult result)
     {
-        this.Message = result.FormatMessage();
+        RawMessage = result.FormatMessage();
     }
 
     internal BuildCheckResultWarning() { }
@@ -118,24 +118,22 @@ internal override void WriteToStream(BinaryWriter writer)
     {
         base.WriteToStream(writer);
 
-        writer.Write(Message!);
+        writer.Write(RawMessage!);
     }
 
     internal override void CreateFromStream(BinaryReader reader, int version)
     {
         base.CreateFromStream(reader, version);
 
-        Message = reader.ReadString();
+        RawMessage = reader.ReadString();
     }
-
-    public override string? Message { get; protected set; }
 }
 
 internal sealed class BuildCheckResultError : BuildErrorEventArgs
 {
     public BuildCheckResultError(IBuildCheckResult result)
     {
-        this.Message = result.FormatMessage();
+        RawMessage = result.FormatMessage();
     }
 
     internal BuildCheckResultError() { }
@@ -144,24 +142,22 @@ internal override void WriteToStream(BinaryWriter writer)
     {
         base.WriteToStream(writer);
 
-        writer.Write(Message!);
+        writer.Write(RawMessage!);
     }
 
     internal override void CreateFromStream(BinaryReader reader, int version)
     {
         base.CreateFromStream(reader, version);
 
-        Message = reader.ReadString();
+        RawMessage = reader.ReadString();
     }
-
-    public override string? Message { get; protected set; }
 }
 
 internal sealed class BuildCheckResultMessage : BuildMessageEventArgs
 {
     public BuildCheckResultMessage(IBuildCheckResult result)
     {
-        this.Message = result.FormatMessage();
+        RawMessage = result.FormatMessage();
     }
 
     internal BuildCheckResultMessage() { }
@@ -170,15 +166,13 @@ internal override void WriteToStream(BinaryWriter writer)
     {
         base.WriteToStream(writer);
 
-        writer.Write(Message!);
+        writer.Write(RawMessage!);
     }
 
     internal override void CreateFromStream(BinaryReader reader, int version)
     {
         base.CreateFromStream(reader, version);
 
-        Message = reader.ReadString();
+        RawMessage = reader.ReadString();
     }
-
-    public override string? Message { get; protected set; }
 }
