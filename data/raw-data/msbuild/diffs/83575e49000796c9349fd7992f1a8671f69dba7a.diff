diff --git a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
index 6c37e3e869a..b8f3f7ff841 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
@@ -12,6 +12,7 @@
 using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
+using Microsoft.Build.UnitTests.Shared;
 using Shouldly;
 using Xunit;
 using Xunit.NetCore.Extensions;
@@ -24,13 +25,20 @@ namespace Microsoft.Build.UnitTests.OM.Instance
     /// <summary>
     /// Tests for ProjectItemInstance public members
     /// </summary>
-    public class ProjectItemInstance_Tests
+    public class ProjectItemInstance_Tests : IDisposable
     {
+        public void Dispose()
+        {
+            _mappedDrive?.Dispose();
+        }
+
         /// <summary>
         /// The number of built-in metadata for items.
         /// </summary>
         public const int BuiltInMetadataCount = 15;
 
+        private DummyMappedDrive _mappedDrive = null;
+
         internal const string TargetItemWithInclude = @"
             <Project>
                 <Target Name='TestTarget'>
@@ -126,7 +134,7 @@ public void ImportMetadataAddsAndOverwrites()
             item.SetMetadata("m1", "v1");
             item.SetMetadata("m2", "v0");
 
-            ((IMetadataContainer) item).ImportMetadata(new Dictionary<string, string>
+            ((IMetadataContainer)item).ImportMetadata(new Dictionary<string, string>
             {
                 { "m2", "v2" },
                 { "m3", "v3" },
@@ -1002,29 +1010,33 @@ public void ThrowExceptionUponBuildingProjectWithDriveEnumeration(string content
         [WindowsOnlyTheory]
         [InlineData(
             TargetItemWithIncludeAndExclude,
-            @"z:$(Microsoft_WindowsAzure_EngSys)\**\*",
+            @"%DRIVE%:$(Microsoft_WindowsAzure_EngSys)\**\*",
             @"$(Microsoft_WindowsAzure_EngSys)\*.pdb;$(Microsoft_WindowsAzure_EngSys)\Microsoft.WindowsAzure.Storage.dll;$(Microsoft_WindowsAzure_EngSys)\Certificates\**\*")]
 
         [InlineData(
             TargetItemWithIncludeAndExclude,
             @"$(Microsoft_WindowsAzure_EngSys)\*.pdb",
-            @"z:$(Microsoft_WindowsAzure_EngSys)\**\*")]
+            @"%DRIVE%:$(Microsoft_WindowsAzure_EngSys)\**\*")]
 
         [InlineData(
             TargetWithDefinedPropertyAndItemWithInclude,
             @"$(Microsoft_WindowsAzure_EngSys)**",
             null,
             "Microsoft_WindowsAzure_EngSys",
-            @"z:\")]
+            @"%DRIVE%:\")]
 
         [InlineData(
             TargetWithDefinedPropertyAndItemWithInclude,
             @"$(Microsoft_WindowsAzure_EngSys)\**\*",
             null,
             "Microsoft_WindowsAzure_EngSys",
-            @"z:")]
+            @"%DRIVE%:")]
         public void LogWindowsWarningUponBuildingProjectWithDriveEnumeration(string content, string include, string exclude = null, string property = null, string propertyValue = null)
         {
+            var mappedDrive = GetDummyMappedDrive();
+            include = UpdatePathToMappedDrive(include, mappedDrive.MappedDriveLetter);
+            exclude = UpdatePathToMappedDrive(exclude, mappedDrive.MappedDriveLetter);
+            propertyValue = UpdatePathToMappedDrive(propertyValue, mappedDrive.MappedDriveLetter);
             content = (string.IsNullOrEmpty(property) && string.IsNullOrEmpty(propertyValue)) ?
                 string.Format(content, include, exclude) :
                 string.Format(content, property, propertyValue, include);
@@ -1197,5 +1209,27 @@ private static void AssertItemHasMetadata(Dictionary<string, string> expected, P
                 Assert.Equal(expected[key], item.GetMetadataValue(key));
             }
         }
+
+        private DummyMappedDrive GetDummyMappedDrive()
+        {
+            if (NativeMethods.IsWindows)
+            {
+                // let's create the mapped drive only once it's needed by any test, then let's reuse;
+                _mappedDrive ??= new DummyMappedDrive();
+            }
+
+            return _mappedDrive;
+        }
+
+        private static string UpdatePathToMappedDrive(string path, char driveLetter)
+        {
+            const string drivePlaceholder = "%DRIVE%";
+            // if this seems to be rooted path - replace with the dummy mount
+            if (!string.IsNullOrEmpty(path) && path.StartsWith(drivePlaceholder))
+            {
+                path = driveLetter + path.Substring(drivePlaceholder.Length);
+            }
+            return path;
+        }
     }
 }
