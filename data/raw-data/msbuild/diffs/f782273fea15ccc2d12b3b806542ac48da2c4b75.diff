diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index e50d84dc0a4..6bc8b1623ac 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -808,9 +808,8 @@ public void ProjectGetterResultsInDriveEnumerationException(string unevaluatedIn
         [InlineData(@"z:\**\*.cs")]
         public void ProjectGetterResultsInWindowsDriveEnumerationWarning(string unevaluatedInclude)
         {
-            // let's create the mapped drive only once it's needed by any test, then let's reuse;
-            _mappedDrive ??= new DummyMappedDrive();
-            unevaluatedInclude = UpdatePathToMappedDrive(unevaluatedInclude, _mappedDrive.MappedDriveLetter);
+            var mappedDrive = GetDummyMappedDrive();
+            unevaluatedInclude = UpdatePathToMappedDrive(unevaluatedInclude, mappedDrive.MappedDriveLetter);
             ProjectGetterResultsInDriveEnumerationWarning(unevaluatedInclude);
         }
 
@@ -904,17 +903,28 @@ public void ThrowExceptionUponProjectInstanceCreationFromDriveEnumeratingContent
             @"z:\$(Microsoft_WindowsAzure_EngSys)**")]
         public void LogWindowsWarningUponProjectInstanceCreationFromDriveEnumeratingContent(string content, string placeHolder, string excludePlaceHolder = null)
         {
-            // let's create the mapped drive only once it's needed by any test, then let's reuse;
-            _mappedDrive ??= new DummyMappedDrive();
-            placeHolder = UpdatePathToMappedDrive(placeHolder, _mappedDrive.MappedDriveLetter);
-            excludePlaceHolder = UpdatePathToMappedDrive(excludePlaceHolder, _mappedDrive.MappedDriveLetter);
+            var mappedDrive = GetDummyMappedDrive();
+            placeHolder = UpdatePathToMappedDrive(placeHolder, mappedDrive.MappedDriveLetter);
+            excludePlaceHolder = UpdatePathToMappedDrive(excludePlaceHolder, mappedDrive.MappedDriveLetter);
             content = string.Format(content, placeHolder, excludePlaceHolder);
             CleanContentsAndCreateProjectInstanceFromFileWithDriveEnumeratingWildcard(content, false);
         }
 
+        private DummyMappedDrive GetDummyMappedDrive()
+        {
+            if (NativeMethods.IsWindows)
+            {
+                // let's create the mapped drive only once it's needed by any test, then let's reuse;
+                _mappedDrive ??= new DummyMappedDrive();
+            }
+
+            return _mappedDrive;
+        }
+
         private static string UpdatePathToMappedDrive(string path, char driveLetter)
         {
-            if (!string.IsNullOrEmpty(path) && path.StartsWith(driveLetter + ":", StringComparison.OrdinalIgnoreCase))
+            // if this seems to be rooted path - replace with the dummy mount
+            if (!string.IsNullOrEmpty(path) && path.Length > 1 && path[1] == ':')
             {
                 path = driveLetter + path.Substring(1);
             }
diff --git a/src/UnitTests.Shared/DriveMapping.cs b/src/UnitTests.Shared/DriveMapping.cs
index 689d31ab848..5f1dcd02bd2 100644
--- a/src/UnitTests.Shared/DriveMapping.cs
+++ b/src/UnitTests.Shared/DriveMapping.cs
@@ -4,6 +4,7 @@
 #nullable enable
 using System;
 using System.Runtime.InteropServices;
+using System.Runtime.Versioning;
 using System.Text;
 
 namespace Microsoft.Build.UnitTests.Shared;
@@ -22,6 +23,7 @@ internal static class DriveMapping
     /// </summary>
     /// <param name="letter">Drive letter</param>
     /// <param name="path">Path to be mapped</param>
+    [SupportedOSPlatform("windows")]
     public static void MapDrive(char letter, string path)
     {
         if (!DefineDosDevice(DDD_NO_FLAG, ToDeviceName(letter), path))
@@ -34,6 +36,7 @@ public static void MapDrive(char letter, string path)
     /// Windows specific. Unmaps drive mapping.
     /// </summary>
     /// <param name="letter">Drive letter.</param>
+    [SupportedOSPlatform("windows")]
     public static void UnmapDrive(char letter)
     {
         if (!DefineDosDevice(DDD_REMOVE_DEFINITION, ToDeviceName(letter), null))
@@ -47,6 +50,7 @@ public static void UnmapDrive(char letter)
     /// </summary>
     /// <param name="letter">Drive letter.</param>
     /// <returns>Path mapped under specified letter. Empty string if mapping not found.</returns>
+    [SupportedOSPlatform("windows")]
     public static string GetDriveMapping(char letter)
     {
         // since this is just for test purposes - let's not overcomplicate with long paths support
@@ -71,7 +75,10 @@ private static string ToDeviceName(char letter)
     }
 
     [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
+    [SupportedOSPlatform("windows")]
     private static extern bool DefineDosDevice([In] int flags, [In] string deviceName, [In] string? path);
+
     [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
+    [SupportedOSPlatform("windows")]
     private static extern int QueryDosDevice([In] string deviceName, [Out] char[] buffer, [In] int bufSize);
 }
diff --git a/src/UnitTests.Shared/DummyMappedDrive.cs b/src/UnitTests.Shared/DummyMappedDrive.cs
index acde6e569f1..ec7df37a00d 100644
--- a/src/UnitTests.Shared/DummyMappedDrive.cs
+++ b/src/UnitTests.Shared/DummyMappedDrive.cs
@@ -5,6 +5,7 @@
 using System;
 using System.Diagnostics;
 using System.IO;
+using System.Runtime.Versioning;
 
 namespace Microsoft.Build.UnitTests.Shared;
 
@@ -20,6 +21,12 @@ public class DummyMappedDrive : IDisposable
     public DummyMappedDrive()
     {
         _mappedPath = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
+
+        if (!NativeMethodsShared.IsWindows)
+        {
+            return;
+        }
+
         Directory.CreateDirectory(_mappedPath);
         File.Create(Path.Combine(_mappedPath, "x")).Dispose();
 
@@ -51,7 +58,7 @@ private void ReleaseUnmanagedResources(bool disposing)
             }
         }
 
-        if (_mapped)
+        if (_mapped && NativeMethodsShared.IsWindows)
         {
             try
             {
