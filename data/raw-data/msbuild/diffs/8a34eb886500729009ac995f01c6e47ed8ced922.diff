diff --git a/src/MSBuild/TerminalLogger/Project.cs b/src/MSBuild/TerminalLogger/Project.cs
index fec67e629af..403a66375e7 100644
--- a/src/MSBuild/TerminalLogger/Project.cs
+++ b/src/MSBuild/TerminalLogger/Project.cs
@@ -46,6 +46,9 @@ public Project(string? targetFramework, StopwatchAbstraction? stopwatch)
     /// </summary>
     public string? TargetFramework { get; }
 
+    /// <summary>
+    /// True when the project has run target with name "_TestRunStart" defined in <see cref="TerminalLogger._testTarget"/>.
+    /// </summary>
     public bool IsTestProject { get; set; }
 
     /// <summary>
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 918f5488e51..9df37bf6f3d 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -176,8 +176,25 @@ public ProjectContext(BuildEventContext context)
     /// The two directory separator characters to be passed to methods like <see cref="String.IndexOfAny(char[])"/>.
     /// </summary>
     private static readonly char[] PathSeparators = { Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar };
+
+    /// <summary>
+    /// One summary per finished project test run.
+    /// </summary>
     private ConcurrentBag<TestSummary> _testRunSummaries = new();
+
+    /// <summary>
+    /// Name of target that identifies a project that has tests.
+    /// </summary>
+    private static string _testTarget = "_TestRunStart";
+
+    /// <summary>
+    /// Time of the oldest observed test target start.
+    /// </summary>
     private DateTime? _testStartTime;
+
+    /// <summary>
+    /// Time of the most recently observed test target finished.
+    /// </summary>
     private DateTime? _testEndTime;
 
     /// <summary>
@@ -280,7 +297,7 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
 
         _projects.Clear();
 
-        var testRunSummaries = _testRunSummaries;
+        var testRunSummaries = _testRunSummaries.ToList();
         _testRunSummaries = new ConcurrentBag<TestSummary>();
 
         Terminal.BeginUpdate();
@@ -332,7 +349,6 @@ private void BuildFinished(object sender, BuildFinishedEventArgs e)
             Terminal.EndUpdate();
         }
 
-
         _buildHasErrors = false;
         _buildHasWarnings = false;
         _restoreFailed = false;
@@ -438,6 +454,8 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                         _restoreFinished = true;
                     }
                     // If this was a notable project build, we print it as completed only if it's produced an output or warnings/error.
+                    // If this is a test project, print it always, so user can see either a success or failure, otherwise success is hidden
+                    // and it is hard to see if project finished, or did not run at all.
                     else if (project.OutputPath is not null || project.BuildMessages is not null || project.IsTestProject)
                     {
                         // Show project build complete and its output
@@ -558,7 +576,7 @@ private void TargetStarted(object sender, TargetStartedEventArgs e)
 
             string projectFile = Path.GetFileNameWithoutExtension(e.ProjectFile);
 
-            var isTestTarget = e.TargetName == "_VSTestMSBuild2";
+            var isTestTarget = e.TargetName == _testTarget;
 
             var targetName = isTestTarget ? "Testing" : e.TargetName;
             if (isTestTarget)
@@ -591,7 +609,7 @@ private void UpdateNodeStatus(BuildEventContext buildEventContext, NodeStatus? n
     /// </summary>
     private void TargetFinished(object sender, TargetFinishedEventArgs e)
     {
-        if (e.TargetName == "_VSTestMSBuild")
+        if (e.TargetName == _testTarget)
         {
             _testEndTime = _testEndTime == null
                     ? e.Timestamp
@@ -658,33 +676,34 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
             {
                 var node = _nodes[NodeIndexForContext(buildEventContext)];
 
-                if (e is IExtendedBuildEventArgs extendedMessage)
+                // Consumes test update messages produced by VSTest and MSTest runner.
+                if (node != null && e is IExtendedBuildEventArgs extendedMessage)
                 {
                     switch (extendedMessage.ExtendedType)
                     {
-                        case "VSTESTTLPASSED":
+                        case "TLTESTPASSED":
                             {
                                 var indicator = extendedMessage.ExtendedMetadata!["localizedResult"]!;
                                 var displayName = extendedMessage.ExtendedMetadata!["displayName"];
 
                                 var testResult = $"{AnsiCodes.Colorize(indicator, TerminalColor.Green)} {displayName}";
-                                var status = new NodeStatus(node!.Project, node.TargetFramework, testResult, project.Stopwatch);
+                                var status = new NodeStatus(node.Project, node.TargetFramework, testResult, project.Stopwatch);
                                 UpdateNodeStatus(buildEventContext, status);
                                 break;
                             }
 
-                        case "VSTESTTLSKIPPED":
+                        case "TLTESTSKIPPED":
                             {
                                 var indicator = extendedMessage.ExtendedMetadata!["localizedResult"]!;
                                 var displayName = extendedMessage.ExtendedMetadata!["displayName"];
 
                                 var testResult = $"{AnsiCodes.Colorize(indicator, TerminalColor.Yellow)} {displayName}";
-                                var status = new NodeStatus(node!.Project, node.TargetFramework, testResult, project.Stopwatch);
+                                var status = new NodeStatus(node.Project, node.TargetFramework, testResult, project.Stopwatch);
                                 UpdateNodeStatus(buildEventContext, status);
                                 break;
                             }
 
-                        case "VSTESTTLFINISH":
+                        case "TLTESTFINISH":
                             {
                                 _ = int.TryParse(extendedMessage.ExtendedMetadata!["total"]!, out int total);
                                 _ = int.TryParse(extendedMessage.ExtendedMetadata!["passed"]!, out int passed);
