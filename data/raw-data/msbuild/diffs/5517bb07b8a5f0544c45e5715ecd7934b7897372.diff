diff --git a/src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs b/src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs
index c4f56d16b04..f1a31f7dbe6 100644
--- a/src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs
+++ b/src/Build.UnitTests/Graph/GetCompatiblePlatformGraph_Tests.cs
@@ -39,7 +39,7 @@ public void ValidateSetPlatformOverride()
         {
             using (var env = TestEnvironment.Create())
             {
-                // PlatformLookupTable always takes priority. It is typically user-defined.
+
                 TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
                                                                                                 <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
                                                                                                 <Platform>x64</Platform>
@@ -80,7 +80,7 @@ public void ResolvesViaPlatformLookupTable()
         {
             using (var env = TestEnvironment.Create())
             {
-                // PlatformLookupTable always takes priority. It is typically user-defined.
+
                 TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
                                                                                                 <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
                                                                                                 <Platform>win32</Platform>
@@ -107,7 +107,7 @@ public void ResolvesViaProjectReferencesPlatformLookupTable()
         {
             using (var env = TestEnvironment.Create())
             {
-                // PlatformLookupTable always takes priority. It is typically user-defined.
+
                 TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
                                                                                                 <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
                                                                                                 <Platform>win32</Platform>
@@ -135,7 +135,7 @@ public void ResolvesViaAnyCPUDefault()
         {
             using (var env = TestEnvironment.Create())
             {
-                // PlatformLookupTable always takes priority. It is typically user-defined.
+
                 TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
                                                                                                 <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
                                                                                                 <Platform>x86</Platform>
@@ -162,7 +162,7 @@ public void ResolvesViaSamePlatform()
         {
             using (var env = TestEnvironment.Create())
             {
-                // PlatformLookupTable always takes priority. It is typically user-defined.
+
                 TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
                                                                                                 <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
                                                                                                 <Platform>x86</Platform>
@@ -190,7 +190,7 @@ public void FailsToResolve()
         {
             using (var env = TestEnvironment.Create())
             {
-                // PlatformLookupTable always takes priority. It is typically user-defined.
+
                 TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
                                                                                                 <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
                                                                                                 <Platform>x86</Platform>
@@ -208,6 +208,9 @@ public void FailsToResolve()
                                                     </Project>");
               
                 ProjectGraph graph = new ProjectGraph(entryProject.Path);
+                // Here we are checking if platform is defined. in this case it should not be since Platorm would be set to the value this project defaults as
+                // in order to avoid dual build errors we remove platform in order to avoid the edge case where a project has global platform set and does not have global platform set
+                // yet still default to the same platform.
                 GetFirstNodeWithProjectNumber(graph, 2).ProjectInstance.GlobalProperties.ContainsKey("Platform").ShouldBeFalse();
             }
         }
@@ -217,7 +220,7 @@ public void PlatformIsChosenAsDefault()
         {
             using (var env = TestEnvironment.Create())
             {
-                // PlatformLookupTable always takes priority. It is typically user-defined.
+
                 TransientTestFile entryProject = CreateProjectFile(env, 1, extraContent: @"<PropertyGroup>
                                                                                                 <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>
                                                                                                 <Platform>x64</Platform>
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index de34e0f1512..fc0bf5573a5 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -1,3 +1,6 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
 using System;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
@@ -504,11 +507,11 @@ private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata)
             var globalProperties = configurationMetadata.GlobalProperties.ToDictionary();
             ProjectGraphNode graphNode;
             ProjectInstance projectInstance;
-            var DynamiclySetPlatform = PlatformNegotiationEnabled && !configurationMetadata.IsSetPlatformHardCoded;
+            var dynamiclySetPlatform = PlatformNegotiationEnabled && !configurationMetadata.IsSetPlatformHardCoded;
 
             projectInstance = _projectInstanceFactory(
                                 configurationMetadata.ProjectFullPath,
-                                DynamiclySetPlatform ? null : globalProperties, // Platform negotiation requires an evaluation with no global properties first
+                                dynamiclySetPlatform ? null : globalProperties, // Platform negotiation requires an evaluation with no global properties first
                                 _projectCollection);
 
             if (ConversionUtilities.ValidBooleanTrue(projectInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)))
@@ -521,7 +524,7 @@ private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata)
                 throw new InvalidOperationException(ResourceUtilities.GetResourceString("NullReferenceFromProjectInstanceFactory"));
             }
 
-            if (DynamiclySetPlatform)
+            if (dynamiclySetPlatform)
             {
                 var selectedPlatform = PlatformNegotiation.GetNearestPlatform(projectInstance.GetPropertyValue(PlatformMetadataName), projectInstance.GetPropertyValue(PlatformsMetadataName), projectInstance.GetPropertyValue(PlatformLookupTableMetadataName), configurationMetadata.PreviousPlatformLookupTable, projectInstance.FullPath, configurationMetadata.PreviousPlatform);
 
