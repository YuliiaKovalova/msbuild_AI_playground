diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 406ad017571..7ecd88ae815 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -3688,6 +3688,50 @@ public void UpdateShouldMatchNonCanonicPaths(string include, string update)
             }
         }
 
+        /// <summary>
+        /// HasMetadata
+        /// </summary>
+        [Fact]
+        public void HasMetadata()
+        {
+            string content = """
+                    <Project>
+                        <ItemDefinitionGroup>
+                            <i>
+                                <m0>v0</m0>
+                            </i>
+                        </ItemDefinitionGroup>
+                        <ItemGroup>
+                            <i Include='i1'>
+                                <m1>v1</m1>
+                            </i>
+                        </ItemGroup>
+                    </Project>
+                """;
+
+            ProjectItem item = GetOneItem(content);
+            item.HasMetadata("m0").ShouldBeTrue();
+            item.HasMetadata("m1").ShouldBeTrue();
+            item.HasMetadata("Identity").ShouldBeTrue();
+
+            item.HasMetadata("").ShouldBeFalse();
+            item.HasMetadata("m2").ShouldBeFalse();
+            Assert.Throws<ArgumentNullException>(() => { item.HasMetadata(null); });
+        }
+
+        /// <summary>
+        /// GetMetadataValueEscaped with non present and invalid value
+        /// </summary>
+        [Fact]
+        public void GetMetadataValueEscaped()
+        {
+            ProjectItem item = GetOneItemFromFragment(@"<i Include='i0'/>");
+            item.GetMetadataValueEscaped("m2", returnNullIfNotFound: true).ShouldBeNull();
+            item.GetMetadataValueEscaped("m2", returnNullIfNotFound: false).ShouldBeEmpty();
+            Assert.Throws<ArgumentNullException>(() => { item.GetMetadataValueEscaped(null, returnNullIfNotFound: true); });
+            Assert.Throws<ArgumentException>(() => { item.GetMetadataValueEscaped("", returnNullIfNotFound: true); });
+        }
+
         private static List<ProjectItem> GetItemsFromFragmentWithGlobs(string itemGroupFragment, params string[] globFiles)
         {
             var formattedProjectContents = ObjectModelHelpers.FormatProjectContentsWithItemGroupFragment(itemGroupFragment);
diff --git a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
index 96bee6d7db8..e3943cb0389 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
@@ -515,6 +515,50 @@ public void ExcludeVectorWithIncludeVector()
             AssertEvaluatedIncludes(items, new string[] { "a", "b", "c", "z", "a", "c", "u" });
         }
 
+        /// <summary>
+        /// HasMetadata
+        /// </summary>
+        [Fact]
+        public void HasMetadata()
+        {
+            string content = """
+                    <Project>
+                        <ItemDefinitionGroup>
+                            <i>
+                                <m0>v0</m0>
+                            </i>
+                        </ItemDefinitionGroup>
+                        <ItemGroup>
+                            <i Include='i1'>
+                                <m1>v1</m1>
+                            </i>
+                        </ItemGroup>
+                    </Project>
+                """;
+
+            ProjectItemInstance item = GetOneItem(content);
+            item.HasMetadata("m0").ShouldBeTrue();
+            item.HasMetadata("m1").ShouldBeTrue();
+            item.HasMetadata("Identity").ShouldBeTrue();
+
+            item.HasMetadata("").ShouldBeFalse();
+            item.HasMetadata("m2").ShouldBeFalse();
+            Assert.Throws<ArgumentNullException>(() => { item.HasMetadata(null); });
+        }
+
+        /// <summary>
+        /// GetMetadataValueEscaped with non present and invalid value
+        /// </summary>
+        [Fact]
+        public void GetMetadataValueEscaped()
+        {
+            ProjectItemInstance item = GetItemInstance();
+            item.GetMetadataValueEscaped("m2", returnNullIfNotFound: true).ShouldBeNull();
+            item.GetMetadataValueEscaped("m2", returnNullIfNotFound: false).ShouldBeEmpty();
+            Assert.Throws<ArgumentNullException>(() => { item.GetMetadataValueEscaped(null, returnNullIfNotFound: true); });
+            Assert.Throws<ArgumentException>(() => { item.GetMetadataValueEscaped("", returnNullIfNotFound: true); });
+        }
+
         /// <summary>
         /// Metadata on items can refer to metadata above
         /// </summary>
diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index b88305e7aae..6f5c74653d2 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -443,7 +443,7 @@ public string GetMetadataValue(string name)
         /// </summary>
         public bool HasMetadata(string name)
         {
-            ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));
+            ErrorUtilities.VerifyThrowArgumentNull(name, nameof(name));
 
             if (Link != null)
             {
@@ -475,7 +475,7 @@ public bool HasMetadata(string name)
         /// </summary>
         string IItem.GetMetadataValueEscaped(string name)
         {
-            return GetMetadataValueEscaped(name, false);
+            return GetMetadataValueEscaped(name, returnNullIfNotFound: false);
         }
 
         /// <summary>
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 98a22673d3e..17cba80f400 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -1280,7 +1280,7 @@ public string GetMetadata(string metadataName)
             /// </summary>
             public string GetMetadataEscaped(string metadataName)
             {
-                return GetMetadataEscaped(metadataName, false);
+                return GetMetadataEscaped(metadataName, returnNullIfNotFound: false);
             }
 
             /// <summary>
@@ -1634,10 +1634,8 @@ public bool Equals(TaskItem other)
             /// </remarks>
             public bool HasMetadata(string name)
             {
-                if (string.IsNullOrEmpty(name))
-                {
-                    ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));
-                }
+
+                ErrorUtilities.VerifyThrowArgumentNull(name, nameof(name));
 
                 if ((_directMetadata?.Contains(name) == true) ||
                      FileUtilities.ItemSpecModifiers.IsItemSpecModifier(name) ||
