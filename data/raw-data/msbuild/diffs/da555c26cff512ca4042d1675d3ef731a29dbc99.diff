diff --git a/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs b/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
index acea21d69cb..c9a1e8a6ef3 100644
--- a/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
@@ -888,7 +888,7 @@ public void SdkImportsAreInPreprocessedOutput()
   <!--
 ============================================================================================================================================
   <Import Project=""Sdk.props"" Sdk=""MSBuildUnitTestSdk"">
-  This import was added implicitly because of the Project element's Sdk attribute specified ""MSBuildUnitTestSdk"".
+  This import was added implicitly because the Project element's Sdk attribute specified ""MSBuildUnitTestSdk"".
 
 {sdkPropsPath}
 ============================================================================================================================================
@@ -909,7 +909,7 @@ This import was added implicitly because of the Project element's Sdk attribute
   <!--
 ============================================================================================================================================
   <Import Project=""Sdk.targets"" Sdk=""MSBuildUnitTestSdk"">
-  This import was added implicitly because of the Project element's Sdk attribute specified ""MSBuildUnitTestSdk"".
+  This import was added implicitly because the Project element's Sdk attribute specified ""MSBuildUnitTestSdk"".
 
 {sdkTargetsPath}
 ============================================================================================================================================
@@ -929,6 +929,171 @@ This import was added implicitly because of the Project element's Sdk attribute
             }
         }
 
+        [Fact]
+        public void ImportedProjectsSdkImportsAreInPreprocessedOutput()
+        {
+            using (TestEnvironment env = TestEnvironment.Create())
+            {
+                string sdk1 = env.CreateFolder().FolderPath;
+                string sdk2 = env.CreateFolder().FolderPath;
+
+                env.WithTransientTestState(new TransientSdkResolution(new Dictionary<string, string>
+                {
+                    {"MSBuildUnitTestSdk1", sdk1},
+                    {"MSBuildUnitTestSdk2", sdk2},
+                }));
+
+
+                string sdkPropsPath1 = Path.Combine(sdk1, "Sdk.props");
+                string sdkTargetsPath1 = Path.Combine(sdk1, "Sdk.targets");
+
+                File.WriteAllText(sdkPropsPath1, @"<Project>
+    <PropertyGroup>
+        <SdkProps1Imported>true</SdkProps1Imported>
+    </PropertyGroup>
+</Project>");
+                File.WriteAllText(sdkTargetsPath1, @"<Project>
+    <PropertyGroup>
+        <SdkTargets1Imported>true</SdkTargets1Imported>
+    </PropertyGroup>
+</Project>");
+
+                string sdkPropsPath2 = Path.Combine(sdk2, "Sdk.props");
+                string sdkTargetsPath2 = Path.Combine(sdk2, "Sdk.targets");
+
+                File.WriteAllText(sdkPropsPath2, @"<Project>
+    <PropertyGroup>
+        <SdkProps2Imported>true</SdkProps2Imported>
+    </PropertyGroup>
+</Project>");
+                File.WriteAllText(sdkTargetsPath2, @"<Project>
+    <PropertyGroup>
+        <SdkTargets2Imported>true</SdkTargets2Imported>
+    </PropertyGroup>
+</Project>");
+
+
+                TransientTestProjectWithFiles import = env.CreateTestProjectWithFiles(@"<Project Sdk='MSBuildUnitTestSdk2'>
+    <PropertyGroup>
+        <MyImportWasImported>true</MyImportWasImported>
+    </PropertyGroup>
+</Project>");
+                string importPath = Path.GetFullPath(import.ProjectFile);
+                string content = $@"<Project Sdk='MSBuildUnitTestSdk1'>
+  <Import Project='{importPath}' />
+  <PropertyGroup>
+    <p>v1</p>
+  </PropertyGroup>
+</Project>";
+
+                Project project = new Project(ProjectRootElement.Create(XmlReader.Create(new StringReader(content))));
+
+                StringWriter writer = new StringWriter();
+
+                project.SaveLogicalProject(writer);
+
+                string expected = ObjectModelHelpers.CleanupFileContents(
+                    $@"<?xml version=""1.0"" encoding=""utf-16""?>
+<Project>
+  <!--
+============================================================================================================================================
+  <Import Project=""Sdk.props"" Sdk=""MSBuildUnitTestSdk1"">
+  This import was added implicitly because the Project element's Sdk attribute specified ""MSBuildUnitTestSdk1"".
+
+{sdkPropsPath1}
+============================================================================================================================================
+-->
+  <PropertyGroup>
+    <SdkProps1Imported>true</SdkProps1Imported>
+  </PropertyGroup>
+  <!--
+============================================================================================================================================
+  </Import>
+
+
+============================================================================================================================================
+-->
+  <!--
+============================================================================================================================================
+  <Import Project=""{importPath}"">
+
+{importPath}
+============================================================================================================================================
+-->
+  <!--
+============================================================================================================================================
+  <Import Project=""Sdk.props"" Sdk=""MSBuildUnitTestSdk2"">
+  This import was added implicitly because the Project element's Sdk attribute specified ""MSBuildUnitTestSdk2"".
+
+{sdkPropsPath2}
+============================================================================================================================================
+-->
+  <PropertyGroup>
+    <SdkProps2Imported>true</SdkProps2Imported>
+  </PropertyGroup>
+  <!--
+============================================================================================================================================
+  </Import>
+
+{importPath}
+============================================================================================================================================
+-->
+  <PropertyGroup>
+    <MyImportWasImported>true</MyImportWasImported>
+  </PropertyGroup>
+  <!--
+============================================================================================================================================
+  <Import Project=""Sdk.targets"" Sdk=""MSBuildUnitTestSdk2"">
+  This import was added implicitly because the Project element's Sdk attribute specified ""MSBuildUnitTestSdk2"".
+
+{sdkTargetsPath2}
+============================================================================================================================================
+-->
+  <PropertyGroup>
+    <SdkTargets2Imported>true</SdkTargets2Imported>
+  </PropertyGroup>
+  <!--
+============================================================================================================================================
+  </Import>
+
+{importPath}
+============================================================================================================================================
+-->
+  <!--
+============================================================================================================================================
+  </Import>
+
+
+============================================================================================================================================
+-->
+  <PropertyGroup>
+    <p>v1</p>
+  </PropertyGroup>
+  <!--
+============================================================================================================================================
+  <Import Project=""Sdk.targets"" Sdk=""MSBuildUnitTestSdk1"">
+  This import was added implicitly because the Project element's Sdk attribute specified ""MSBuildUnitTestSdk1"".
+
+{sdkTargetsPath1}
+============================================================================================================================================
+-->
+  <PropertyGroup>
+    <SdkTargets1Imported>true</SdkTargets1Imported>
+  </PropertyGroup>
+  <!--
+============================================================================================================================================
+  </Import>
+
+
+============================================================================================================================================
+-->
+</Project>");
+                Helpers.VerifyAssertLineByLine(expected, writer.ToString());
+            }
+        }
+
+
+
         /// <summary>
         /// Verifies that the Preprocessor works when the import graph contains unevaluated duplicates.  This can occur if two projects in 
         /// two different folders both import "..\dir.props" or "$(Property)".  Those values will evaluate to different paths at run time
diff --git a/src/Build/Evaluation/Preprocessor.cs b/src/Build/Evaluation/Preprocessor.cs
index 8c718914efb..c29c1654cdf 100644
--- a/src/Build/Evaluation/Preprocessor.cs
+++ b/src/Build/Evaluation/Preprocessor.cs
@@ -47,6 +47,17 @@ internal class Preprocessor
         /// </summary>
         private readonly Stack<string> _filePaths = new Stack<string>();
 
+        /// <summary>
+        /// Used to keep track of nodes that were added to the document from implicit imports which will be removed later.
+        /// At the time of adding this feature, cloning is buggy so it is easier to just edit the DOM in memory.
+        /// </summary>
+        private List<XmlNode> _addedNodes;
+
+        /// <summary>
+        /// Table of implicit imports by document.  The list per document contains both top and bottom imports.
+        /// </summary>
+        private readonly Dictionary<XmlDocument, List<ResolvedImport>> _implicitImportsByProject = new Dictionary<XmlDocument, List<ResolvedImport>>();
+
         /// <summary>
         /// Constructor
         /// </summary>
@@ -84,47 +95,9 @@ private XmlDocument Preprocess()
         {
             XmlDocument outerDocument = _project.Xml.XmlDocument;
 
-            int implicitImportCount = _project.Imports.Count(i => i.ImportingElement.ImplicitImportLocation != ImplicitImportLocation.None);
-            // At the time of adding this feature, cloning is buggy.  The implicit imports are added to the XML document and removed after
-            // processing.  This variable keeps track of the nodes that were added
-            IList<XmlNode> addedNodes = new List<XmlNode>(implicitImportCount);
-            XmlElement documentElement = outerDocument.DocumentElement;
-
-            if (implicitImportCount > 0 && documentElement != null)
-            {
-                // Top implicit imports need to be added in the correct order by adding the first one at the top and each one after the first
-                // one.  This variable keeps track of the last import that was added.
-                XmlNode lastImplicitImportAdded = null;
-
-                // Add the implicit top imports
-                //
-                foreach (var import in _project.Imports.Where(i => i.ImportingElement.ImplicitImportLocation == ImplicitImportLocation.Top))
-                {
-                    XmlElement xmlElement = (XmlElement)outerDocument.ImportNode(import.ImportingElement.XmlElement, false);
-                    if (lastImplicitImportAdded == null)
-                    {
-                        documentElement.InsertBefore(xmlElement, documentElement.FirstChild);
-                        lastImplicitImportAdded = xmlElement;
-                    }
-                    else
-                    {
-                        documentElement.InsertAfter(xmlElement, lastImplicitImportAdded);
-                    }
-                    addedNodes.Add(xmlElement);
-                    AddToImportTable(xmlElement, import.ImportedProject);
-                }
-
-                // Add the implicit bottom imports
-                //
-                foreach (var import in _project.Imports.Where(i => i.ImportingElement.ImplicitImportLocation == ImplicitImportLocation.Bottom))
-                {
-                    XmlElement xmlElement = (XmlElement)documentElement.InsertAfter(outerDocument.ImportNode(import.ImportingElement.XmlElement, false), documentElement.LastChild);
-
-                    AddToImportTable(xmlElement, import.ImportedProject);
+            CreateImplicitImportTable();
 
-                    addedNodes.Add(xmlElement);
-                }
-            }
+            AddImplicitImportNodes(outerDocument.DocumentElement);
 
             XmlDocument destinationDocument = (XmlDocument)outerDocument.CloneNode(false /* shallow */);
 
@@ -139,9 +112,9 @@ private XmlDocument Preprocess()
 
             // Remove the nodes that were added as implicit imports
             //
-            foreach (XmlNode addedNode in addedNodes)
+            foreach (XmlNode node in _addedNodes)
             {
-                documentElement?.RemoveChild(addedNode);
+                node.ParentNode?.RemoveChild(node);
             }
 
             return destinationDocument;
@@ -159,6 +132,93 @@ private void AddToImportTable(XmlElement element, ProjectRootElement importedPro
             list.Add(importedProject);
         }
 
+        /// <summary>
+        /// Creates a table containing implicit imports by project document.
+        /// </summary>
+        private void CreateImplicitImportTable()
+        {
+            int implicitImportCount = 0;
+
+            // Loop through all implicit imports top and bottom
+            foreach (ResolvedImport resolvedImport in _project.Imports.Where(i => i.ImportingElement.ImplicitImportLocation != ImplicitImportLocation.None))
+            {
+                implicitImportCount++;
+                List<ResolvedImport> imports;
+
+                // Attempt to get an existing list from the dictionary
+                if (!_implicitImportsByProject.TryGetValue(resolvedImport.ImportingElement.XmlDocument, out imports))
+                {
+                    // Add a new list
+                    _implicitImportsByProject[resolvedImport.ImportingElement.XmlDocument] = new List<ResolvedImport>();
+
+                    // Get a pointer to the list
+                    imports = _implicitImportsByProject[resolvedImport.ImportingElement.XmlDocument];
+                }
+
+                imports.Add(resolvedImport);
+            }
+
+            // Create a list to store nodes which will be added.  Optimization here is that we now know how many items are going to be added.
+            _addedNodes = new List<XmlNode>(implicitImportCount);
+        }
+
+
+        /// <summary>
+        /// Adds all implicit import nodes to the specified document.
+        /// </summary>
+        /// <param name="documentElement">The document element to add nodes to.</param>
+        private void AddImplicitImportNodes(XmlElement documentElement)
+        {
+            List<ResolvedImport> implicitImports;
+
+            // Do nothing if this project has no implicit imports
+            if (!_implicitImportsByProject.TryGetValue(documentElement.OwnerDocument, out implicitImports))
+            {
+                return;
+            }
+
+            // Top implicit imports need to be added in the correct order by adding the first one at the top and each one after the first
+            // one.  This variable keeps track of the last import that was added.
+            XmlNode lastImplicitImportAdded = null;
+
+            // Add the implicit top imports
+            //
+            foreach (ResolvedImport import in implicitImports.Where(i => i.ImportingElement.ImplicitImportLocation == ImplicitImportLocation.Top))
+            {
+                XmlElement xmlElement = (XmlElement)documentElement.OwnerDocument.ImportNode(import.ImportingElement.XmlElement, false);
+                if (lastImplicitImportAdded == null)
+                {
+                    if (documentElement.FirstChild == null)
+                    {
+                        documentElement.AppendChild(xmlElement);
+                    }
+                    else
+                    {
+                        documentElement.InsertBefore(xmlElement, documentElement.FirstChild);
+                    }
+                    
+                    lastImplicitImportAdded = xmlElement;
+                }
+                else
+                {
+                    documentElement.InsertAfter(xmlElement, lastImplicitImportAdded);
+                }
+                _addedNodes.Add(xmlElement);
+                AddToImportTable(xmlElement, import.ImportedProject);
+            }
+
+            // Add the implicit bottom imports
+            //
+            foreach (var import in implicitImports.Where(i => i.ImportingElement.ImplicitImportLocation == ImplicitImportLocation.Bottom))
+            {
+                XmlElement xmlElement = (XmlElement)documentElement.InsertAfter(documentElement.OwnerDocument.ImportNode(import.ImportingElement.XmlElement, false), documentElement.LastChild);
+
+                _addedNodes.Add(xmlElement);
+
+                AddToImportTable(xmlElement, import.ImportedProject);
+            }
+        }
+
         /// <summary>
         /// Recursively called method that clones source nodes into nodes in the destination
         /// document.
@@ -211,6 +271,9 @@ private void CloneChildrenResolvingImports(XmlNode source, XmlNode destination)
                         }
                     }
 
+                    // Add any implicit imports for an imported document
+                    AddImplicitImportNodes(child.OwnerDocument.DocumentElement);
+
                     CloneChildrenResolvingImports(child, destination);
                     continue;
                 }
@@ -225,6 +288,9 @@ private void CloneChildrenResolvingImports(XmlNode source, XmlNode destination)
                     string importSdk = ((XmlElement)child).GetAttribute(XMakeAttributes.sdk);
                     string sdk = importSdk.Length > 0 ? $" {XMakeAttributes.sdk}=\"{importSdk}\"" : String.Empty;
 
+                    // Get the Sdk attribute of the Project element if specified
+                    string projectSdk = source.NodeType == XmlNodeType.Element && String.Equals(XMakeElements.project, source.Name, StringComparison.Ordinal) ? ((XmlElement) source).GetAttribute(XMakeAttributes.sdk) : String.Empty;
+
                     IList<ProjectRootElement> resolvedList;
                     if (!_importTable.TryGetValue((XmlElement)child, out resolvedList))
                     {
@@ -244,10 +310,10 @@ private void CloneChildrenResolvingImports(XmlNode source, XmlNode destination)
                         string importTag =
                             $"  <Import Project=\"{importProject}\"{sdk}{condition}>";
 
-                        if (!String.IsNullOrWhiteSpace(importSdk) && _project.Xml.Sdk.IndexOf(importSdk, StringComparison.OrdinalIgnoreCase) >= 0)
+                        if (!String.IsNullOrWhiteSpace(importSdk) && projectSdk.IndexOf(importSdk, StringComparison.OrdinalIgnoreCase) >= 0)
                         {
                             importTag +=
-                                $"\r\n  This import was added implicitly because of the {XMakeElements.project} element's {XMakeAttributes.sdk} attribute specified \"{importSdk}\".";
+                                $"\r\n  This import was added implicitly because the {XMakeElements.project} element's {XMakeAttributes.sdk} attribute specified \"{importSdk}\".";
                         }
 
                         destination.AppendChild(destinationDocument.CreateComment(
