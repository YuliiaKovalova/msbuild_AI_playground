diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 0f56e34d76e..c326794f4ce 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -3747,19 +3747,6 @@ public void HasMetadata()
             Assert.Throws<ArgumentNullException>(() => { item.HasMetadata(null); });
         }
 
-        /// <summary>
-        /// GetMetadataValueEscaped with non present and invalid value
-        /// </summary>
-        [Fact]
-        public void GetMetadataValueEscaped()
-        {
-            ProjectItem item = GetOneItemFromFragment(@"<i Include='i0'/>");
-            item.GetMetadataValueEscaped("m2", returnNullIfNotFound: true).ShouldBeNull();
-            item.GetMetadataValueEscaped("m2", returnNullIfNotFound: false).ShouldBeEmpty();
-            Assert.Throws<ArgumentNullException>(() => { item.GetMetadataValueEscaped(null, returnNullIfNotFound: true); });
-            Assert.Throws<ArgumentException>(() => { item.GetMetadataValueEscaped("", returnNullIfNotFound: true); });
-        }
-
         private static List<ProjectItem> GetItemsFromFragmentWithGlobs(string itemGroupFragment, params string[] globFiles)
         {
             var formattedProjectContents = ObjectModelHelpers.FormatProjectContentsWithItemGroupFragment(itemGroupFragment);
diff --git a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
index 3f95902d43b..3d9d65bfcba 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
@@ -544,19 +544,6 @@ public void HasMetadata()
             Assert.Throws<ArgumentNullException>(() => { item.HasMetadata(null); });
         }
 
-        /// <summary>
-        /// GetMetadataValueEscaped with non present and invalid value
-        /// </summary>
-        [Fact]
-        public void GetMetadataValueEscaped()
-        {
-            ProjectItemInstance item = GetItemInstance();
-            item.GetMetadataValueEscaped("m2", returnNullIfNotFound: true).ShouldBeNull();
-            item.GetMetadataValueEscaped("m2", returnNullIfNotFound: false).ShouldBeEmpty();
-            Assert.Throws<ArgumentNullException>(() => { item.GetMetadataValueEscaped(null, returnNullIfNotFound: true); });
-            Assert.Throws<ArgumentException>(() => { item.GetMetadataValueEscaped("", returnNullIfNotFound: true); });
-        }
-
         /// <summary>
         /// Metadata on items can refer to metadata above
         /// </summary>
diff --git a/src/Build.UnitTests/Evaluation/Expander_Tests.cs b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
index b5df8c0c38f..6ba7ff0e8d9 100644
--- a/src/Build.UnitTests/Evaluation/Expander_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Expander_Tests.cs
@@ -1110,7 +1110,7 @@ public void HasMetadata()
         /// Test metadata item functions with empty string metadata and not present metadata
         /// </summary>
         [Fact]
-        public void MetadataFuntionTestingWithEmtpyString()
+        public void MetadataFunctionTestingWithEmtpyString()
         {
             MockLogger logger = Helpers.BuildProjectWithNewOMExpectSuccess("""
 <Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
diff --git a/src/Build/Definition/ProjectItem.cs b/src/Build/Definition/ProjectItem.cs
index 82031d5572d..a6021a1d97f 100644
--- a/src/Build/Definition/ProjectItem.cs
+++ b/src/Build/Definition/ProjectItem.cs
@@ -475,7 +475,59 @@ public bool HasMetadata(string name)
         /// </summary>
         string IItem.GetMetadataValueEscaped(string name)
         {
-            return GetMetadataValueEscaped(name, returnNullIfNotFound: false);
+            return GetMetadataEscaped(name, returnNullIfNotFound: false);
+        }
+
+        /// <summary>
+        /// Returns the metadata with the specified key.
+        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present
+        /// </summary>
+        string IItem.GetMetadataValueEscaped(string name, bool returnNullIfNotFound)
+        {
+            return GetMetadataEscaped(name, returnNullIfNotFound);
+        }
+
+        /// <summary>
+        /// Returns the metadata with the specified key.
+        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present
+        /// </summary>
+        public string GetMetadataEscaped(string name, bool returnNullIfNotFound)
+        {
+            ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));
+
+            string value = null;
+
+            if (_directMetadata != null)
+            {
+                ProjectMetadata metadatum = _directMetadata[name];
+                if (metadatum != null)
+                {
+                    value = metadatum.EvaluatedValueEscaped;
+                }
+            }
+
+            if (value == null)
+            {
+                value = GetBuiltInMetadataEscaped(name);
+            }
+
+            if (value == null)
+            {
+                ProjectMetadata metadatum = GetItemDefinitionMetadata(name);
+
+                if (metadatum != null && Expander<ProjectProperty, ProjectItem>.ExpressionMayContainExpandableExpressions(metadatum.EvaluatedValueEscaped))
+                {
+                    Expander<ProjectProperty, ProjectItem> expander = new Expander<ProjectProperty, ProjectItem>(null, null, new BuiltInMetadataTable(this), FileSystems.Default);
+
+                    value = expander.ExpandIntoStringLeaveEscaped(metadatum.EvaluatedValueEscaped, ExpanderOptions.ExpandBuiltInMetadata, metadatum.Location);
+                }
+                else if (metadatum != null)
+                {
+                    value = metadatum.EvaluatedValueEscaped;
+                }
+            }
+
+            return returnNullIfNotFound ? value : value ?? string.Empty;
         }
 
         /// <summary>
@@ -863,49 +915,6 @@ private ProjectMetadata GetItemDefinitionMetadata(string name)
             return metadataFromDefinition;
         }
 
-        /// <summary>
-        /// Returns the metadata with the specified key.
-        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present
-        /// </summary>
-        public string GetMetadataValueEscaped(string name, bool returnNullIfNotFound)
-        {
-            ErrorUtilities.VerifyThrowArgumentLength(name, nameof(name));
-
-            string value = null;
-
-            if (_directMetadata != null)
-            {
-                ProjectMetadata metadatum = _directMetadata[name];
-                if (metadatum != null)
-                {
-                    value = metadatum.EvaluatedValueEscaped;
-                }
-            }
-
-            if (value == null)
-            {
-                value = GetBuiltInMetadataEscaped(name);
-            }
-
-            if (value == null)
-            {
-                ProjectMetadata metadatum = GetItemDefinitionMetadata(name);
-
-                if (metadatum != null && Expander<ProjectProperty, ProjectItem>.ExpressionMayContainExpandableExpressions(metadatum.EvaluatedValueEscaped))
-                {
-                    Expander<ProjectProperty, ProjectItem> expander = new Expander<ProjectProperty, ProjectItem>(null, null, new BuiltInMetadataTable(this), FileSystems.Default);
-
-                    value = expander.ExpandIntoStringLeaveEscaped(metadatum.EvaluatedValueEscaped, ExpanderOptions.ExpandBuiltInMetadata, metadatum.Location);
-                }
-                else if (metadatum != null)
-                {
-                    value = metadatum.EvaluatedValueEscaped;
-                }
-            }
-
-            return returnNullIfNotFound ? value : value ?? string.Empty;
-        }
-
         /// <summary>
         /// A class factory for ProjectItems.
         /// </summary>
diff --git a/src/Build/Evaluation/Expander.cs b/src/Build/Evaluation/Expander.cs
index 9f65aa18fb4..d3ef226d0c2 100644
--- a/src/Build/Evaluation/Expander.cs
+++ b/src/Build/Evaluation/Expander.cs
@@ -2788,7 +2788,7 @@ internal static IEnumerable<Pair<string, S>> WithMetadataValue(Expander<P, I> ex
 
                         try
                         {
-                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName, true);
+                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName, returnNullIfNotFound: true);
                         }
                         catch (ArgumentException ex) // Blank metadata name
                         {
@@ -2824,7 +2824,7 @@ internal static IEnumerable<Pair<string, S>> WithoutMetadataValue(Expander<P, I>
 
                         try
                         {
-                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName, true);
+                            metadataValue = item.Value.GetMetadataValueEscaped(metadataName, returnNullIfNotFound: true);
                         }
                         catch (ArgumentException ex) // Blank metadata name
                         {
@@ -2863,7 +2863,7 @@ internal static IEnumerable<Pair<string, S>> AnyHaveMetadataValue(Expander<P, I>
 
                             try
                             {
-                                metadataValue = item.Value.GetMetadataValueEscaped(metadataName, true);
+                                metadataValue = item.Value.GetMetadataValueEscaped(metadataName, returnNullIfNotFound: true);
                             }
                             catch (ArgumentException ex) // Blank metadata name
                             {
diff --git a/src/Build/Instance/ProjectItemInstance.cs b/src/Build/Instance/ProjectItemInstance.cs
index 852aa2febfa..265027e6c90 100644
--- a/src/Build/Instance/ProjectItemInstance.cs
+++ b/src/Build/Instance/ProjectItemInstance.cs
@@ -431,6 +431,15 @@ string IItem.GetMetadataValueEscaped(string name)
             return _taskItem.GetMetadataEscaped(name);
         }
 
+        /// <summary>
+        /// Returns the metadata with the specified key.
+        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present
+        /// </summary>
+        string IItem.GetMetadataValueEscaped(string name, bool returnNullIfNotFound)
+        {
+            return _taskItem.GetMetadataEscaped(name, returnNullIfNotFound);
+        }
+
         /// <summary>
         /// Sets the specified metadata.  Discards the xml part except for the name.
         /// Discards the location of the original element. This is not interesting in the Execution world
@@ -708,15 +717,6 @@ private void CommonConstructor(ProjectInstance projectToUse, string itemTypeToUs
                                         definingFileEscaped);
         }
 
-        /// <summary>
-        /// Returns the metadata with the specified key.
-        /// Returns null if returnNullIfNotFound is true otherwise returns empty string when metadata not present
-        /// </summary>
-        public string GetMetadataValueEscaped(string name, bool returnNullIfNotFound)
-        {
-            return _taskItem.GetMetadataEscaped(name, returnNullIfNotFound);
-        }
-
         /// <summary>
         /// An item without an item type. Cast to an ITaskItem, this is
         /// what is given to tasks. It is also used for target outputs.
