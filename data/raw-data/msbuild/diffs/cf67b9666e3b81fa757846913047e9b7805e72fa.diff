diff --git a/src/Tasks/AssemblyDependency/Reference.cs b/src/Tasks/AssemblyDependency/Reference.cs
index 0bdd0d08d63..4eae100cefe 100644
--- a/src/Tasks/AssemblyDependency/Reference.cs
+++ b/src/Tasks/AssemblyDependency/Reference.cs
@@ -27,8 +27,7 @@ sealed internal class Reference
         private Dictionary<string, ITaskItem> _sourceItems = new Dictionary<string, ITaskItem>(StringComparer.OrdinalIgnoreCase);
 
         /// <summary>
-        /// Hashtable of Key=Reference, Value=Irrelevent.
-        /// A list of unique dependies.
+        /// A list of unique dependencies.
         /// </summary>
         private HashSet<Reference> _dependees = new HashSet<Reference>();
 
diff --git a/src/Tasks/BootstrapperUtil/xmlvalidationresults.cs b/src/Tasks/BootstrapperUtil/xmlvalidationresults.cs
index 42e1cd8ebd2..a9c3142b154 100644
--- a/src/Tasks/BootstrapperUtil/xmlvalidationresults.cs
+++ b/src/Tasks/BootstrapperUtil/xmlvalidationresults.cs
@@ -47,7 +47,6 @@ public void SchemaValidationEventHandler(object sender, System.Xml.Schema.Valida
         /// Gets all of the validation errors of the file being validated.
         /// </summary>
         /// <value>An array of type string, containing all of the validation errors.</value>
-        /// <remarks>This method uses ArrayList.Copy to copy the errors.</remarks>
         public string[] ValidationErrors => _validationErrors.ToArray();
 
         /// <summary>
@@ -60,7 +59,6 @@ public void SchemaValidationEventHandler(object sender, System.Xml.Schema.Valida
         /// Gets all of the validation warnings of the file being validated.
         /// </summary>
         /// <value>An array of type string, containing all of the validation warnings.</value>
-        /// <remarks>This method uses ArrayList.Copy to copy the warnings.</remarks>
         public string[] ValidationWarnings => _validationWarnings.ToArray();
     }
 }
diff --git a/src/Tasks/GenerateBootstrapper.cs b/src/Tasks/GenerateBootstrapper.cs
index 34fac6b59cf..98ffca90a5e 100644
--- a/src/Tasks/GenerateBootstrapper.cs
+++ b/src/Tasks/GenerateBootstrapper.cs
@@ -3,7 +3,7 @@
 
 using System;
 using System.IO;
-using System.Collections;
+using System.Collections.Generic;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks.Deployment.Bootstrapper;
 
@@ -98,14 +98,14 @@ public override bool Execute()
                 // in order, looking to see if the item is built.  If it is, remove the item from 
                 // the hashtable.  All remaining items in the table can not be built, so errors 
                 // will be issued.
-                var items = new Hashtable(StringComparer.OrdinalIgnoreCase);
+                var items = new Dictionary<string, ITaskItem>(StringComparer.OrdinalIgnoreCase);
 
                 foreach (ITaskItem bootstrapperItem in BootstrapperItems)
                 {
                     string installAttribute = bootstrapperItem.GetMetadata("Install");
                     if (String.IsNullOrEmpty(installAttribute) || Shared.ConversionUtilities.ConvertStringToBool(installAttribute))
                     {
-                        if (!items.Contains(bootstrapperItem.ItemSpec))
+                        if (!items.ContainsKey(bootstrapperItem.ItemSpec))
                         {
                             items.Add(bootstrapperItem.ItemSpec, bootstrapperItem);
                         }
@@ -118,7 +118,7 @@ public override bool Execute()
 
                 foreach (Product product in products)
                 {
-                    if (items.Contains(product.ProductCode))
+                    if (items.ContainsKey(product.ProductCode))
                     {
                         settings.ProductBuilders.Add(product.ProductBuilder);
                         items.Remove(product.ProductCode);
diff --git a/src/Tasks/MSBuild.cs b/src/Tasks/MSBuild.cs
index dfa14632992..1750bdac7f5 100644
--- a/src/Tasks/MSBuild.cs
+++ b/src/Tasks/MSBuild.cs
@@ -357,15 +357,15 @@ private bool BuildProjectsInParallel(Dictionary<string, string> propertiesTable,
         {
             // There were some projects that were skipped so we need to recreate the
             // project array with those projects removed
-            var projectsToBuildArrayList = new List<ITaskItem>();
+            var projectsToBuildList = new List<ITaskItem>();
             for (int i = 0; i < Projects.Length; i++)
             {
                 if (!skipProjects[i])
                 {
-                    projectsToBuildArrayList.Add(Projects[i]);
+                    projectsToBuildList.Add(Projects[i]);
                 }
             }
-            ITaskItem[] projectToBuildInParallel = projectsToBuildArrayList.ToArray();
+            ITaskItem[] projectToBuildInParallel = projectsToBuildList.ToArray();
 
             // Make the call to build the projects
             if (projectToBuildInParallel.Length > 0)
diff --git a/src/Tasks/ManifestUtil/Util.cs b/src/Tasks/ManifestUtil/Util.cs
index eb92ae1b1ac..8135a2c1684 100644
--- a/src/Tasks/ManifestUtil/Util.cs
+++ b/src/Tasks/ManifestUtil/Util.cs
@@ -6,10 +6,12 @@
 using Microsoft.Win32;
 using System;
 using System.Collections;
+using System.Collections.Generic;
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.Globalization;
 using System.IO;
+using System.Linq;
 using System.Reflection;
 using System.Security;
 using System.Security.Cryptography;
@@ -320,7 +322,7 @@ private static ITaskItem[] RemoveDuplicateItems(ITaskItem[] items)
                 return null;
             if (items.Length <= 1)
                 return items;
-            Hashtable list = new Hashtable();
+            var list = new Dictionary<string, ITaskItem>();
             foreach (ITaskItem item in items)
             {
                 if (String.IsNullOrEmpty(item.ItemSpec))
@@ -339,13 +341,13 @@ private static ITaskItem[] RemoveDuplicateItems(ITaskItem[] items)
                     key = Path.GetFullPath(item.ItemSpec).ToUpperInvariant();
                 }
 
-                if (!list.Contains(key))
+                if (!list.ContainsKey(key))
+                {
                     list.Add(key, item);
+                }
             }
 
-            ITaskItem[] outputItems = new ITaskItem[list.Count];
-            list.Values.CopyTo(outputItems, 0);
-            return outputItems;
+            return list.Values.ToArray();
         }
 
         public static ITaskItem[] SortItems(ITaskItem[] items)
diff --git a/src/Tasks/ResolveComReference.cs b/src/Tasks/ResolveComReference.cs
index ed267c2f4b9..d9190ddc98f 100644
--- a/src/Tasks/ResolveComReference.cs
+++ b/src/Tasks/ResolveComReference.cs
@@ -1496,7 +1496,7 @@ internal bool CheckForConflictingReferences()
         /// <summary>
         /// Set the CopyLocal metadata to false on all assemblies that are located in the GAC.
         /// </summary>
-        /// <param name="outputTaskItems">ArrayList of ITaskItems that will be outputted from the task</param>
+        /// <param name="outputTaskItems">List of ITaskItems that will be outputted from the task</param>
         /// <param name="gacPath">The GAC root path</param>
         internal void SetCopyLocalToFalseOnGacOrNoPIAAssemblies(List<ITaskItem> outputTaskItems, string gacPath)
         {
diff --git a/src/Tasks/ResolveNativeReference.cs b/src/Tasks/ResolveNativeReference.cs
index f4e9d7e8a43..e4e9855120a 100644
--- a/src/Tasks/ResolveNativeReference.cs
+++ b/src/Tasks/ResolveNativeReference.cs
@@ -4,6 +4,8 @@
 using System;
 using System.IO;
 using System.Collections;
+using System.Collections.Generic;
+using System.Linq;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Tasks.Deployment.ManifestUtilities;
@@ -95,12 +97,12 @@ public override bool Execute()
             bool retValue = true;
             int reference;
 
-            var containingReferenceFilesTable = new Hashtable(StringComparer.OrdinalIgnoreCase);
-            var containedPrerequisiteAssembliesTable = new Hashtable(StringComparer.OrdinalIgnoreCase);
-            var containedComComponentsTable = new Hashtable(StringComparer.OrdinalIgnoreCase);
-            var containedTypeLibrariesTable = new Hashtable(StringComparer.OrdinalIgnoreCase);
-            var containedLooseTlbFilesTable = new Hashtable(StringComparer.OrdinalIgnoreCase);
-            var containedLooseEtcFilesTable = new Hashtable(StringComparer.OrdinalIgnoreCase);
+            var containingReferenceFilesTable = new Dictionary<string, ITaskItem>(StringComparer.OrdinalIgnoreCase);
+            var containedPrerequisiteAssembliesTable = new Dictionary<string, ITaskItem>(StringComparer.OrdinalIgnoreCase);
+            var containedComComponentsTable = new Dictionary<string, ITaskItem>(StringComparer.OrdinalIgnoreCase);
+            var containedTypeLibrariesTable = new Dictionary<string, ITaskItem>(StringComparer.OrdinalIgnoreCase);
+            var containedLooseTlbFilesTable = new Dictionary<string, ITaskItem>(StringComparer.OrdinalIgnoreCase);
+            var containedLooseEtcFilesTable = new Dictionary<string, ITaskItem>(StringComparer.OrdinalIgnoreCase);
 
             for (reference = 0; reference < NativeReferences.GetLength(0); reference++)
             {
@@ -154,28 +156,22 @@ public override bool Execute()
 
             IComparer itemSpecComparer = new ItemSpecComparerClass();
 
-            ContainingReferenceFiles = new ITaskItem[containingReferenceFilesTable.Count];
-            containingReferenceFilesTable.Values.CopyTo(ContainingReferenceFiles, 0);
+            ContainingReferenceFiles = containingReferenceFilesTable.Values.ToArray();
             Array.Sort(ContainingReferenceFiles, itemSpecComparer);
 
-            ContainedPrerequisiteAssemblies = new ITaskItem[containedPrerequisiteAssembliesTable.Count];
-            containedPrerequisiteAssembliesTable.Values.CopyTo(ContainedPrerequisiteAssemblies, 0);
+            ContainedPrerequisiteAssemblies = containedPrerequisiteAssembliesTable.Values.ToArray();
             Array.Sort(ContainedPrerequisiteAssemblies, itemSpecComparer);
 
-            ContainedComComponents = new ITaskItem[containedComComponentsTable.Count];
-            containedComComponentsTable.Values.CopyTo(ContainedComComponents, 0);
+            ContainedComComponents = containedComComponentsTable.Values.ToArray();
             Array.Sort(ContainedComComponents, itemSpecComparer);
 
-            ContainedTypeLibraries = new ITaskItem[containedTypeLibrariesTable.Count];
-            containedTypeLibrariesTable.Values.CopyTo(ContainedTypeLibraries, 0);
+            ContainedTypeLibraries = containedTypeLibrariesTable.Values.ToArray();
             Array.Sort(ContainedTypeLibraries, itemSpecComparer);
 
-            ContainedLooseTlbFiles = new ITaskItem[containedLooseTlbFilesTable.Count];
-            containedLooseTlbFilesTable.Values.CopyTo(ContainedLooseTlbFiles, 0);
+            ContainedLooseTlbFiles = containedLooseTlbFilesTable.Values.ToArray();
             Array.Sort(ContainedLooseTlbFiles, itemSpecComparer);
 
-            ContainedLooseEtcFiles = new ITaskItem[containedLooseEtcFilesTable.Count];
-            containedLooseEtcFilesTable.Values.CopyTo(ContainedLooseEtcFiles, 0);
+            ContainedLooseEtcFiles = containedLooseEtcFilesTable.Values.ToArray();
             Array.Sort(ContainedLooseEtcFiles, itemSpecComparer);
 
             return retValue;
@@ -187,7 +183,15 @@ public override bool Execute()
         /// <summary>
         /// Helper manifest resolution method. Cracks the manifest and extracts the different elements from it.
         /// </summary>
-        internal bool ExtractFromManifest(ITaskItem taskItem, string path, Hashtable containingReferenceFilesTable, Hashtable containedPrerequisiteAssembliesTable, Hashtable containedComComponentsTable, Hashtable containedTypeLibrariesTable, Hashtable containedLooseTlbFilesTable, Hashtable containedLooseEtcFilesTable)
+        internal bool ExtractFromManifest(
+            ITaskItem taskItem,
+            string path,
+            Dictionary<string, ITaskItem> containingReferenceFilesTable,
+            Dictionary<string, ITaskItem> containedPrerequisiteAssembliesTable,
+            Dictionary<string, ITaskItem> containedComComponentsTable,
+            Dictionary<string, ITaskItem> containedTypeLibrariesTable,
+            Dictionary<string, ITaskItem> containedLooseTlbFilesTable,
+            Dictionary<string, ITaskItem> containedLooseEtcFilesTable)
         {
             Log.LogMessageFromResources(MessageImportance.Low, "ResolveNativeReference.Comment", path);
 
@@ -215,7 +219,7 @@ internal bool ExtractFromManifest(ITaskItem taskItem, string path, Hashtable con
 
                 bool isClickOnceApp = manifest is ApplicationManifest applicationManifest && applicationManifest.IsClickOnceManifest;
                 // ClickOnce application manifest should not be added as native reference, but we should open and process it.        
-                if (containingReferenceFilesTable.ContainsKey(path) == false && !isClickOnceApp)
+                if (!containingReferenceFilesTable.ContainsKey(path) && !isClickOnceApp)
                 {
                     ITaskItem itemNativeReferenceFile = new TaskItem();
                     itemNativeReferenceFile.ItemSpec = path;
@@ -246,7 +250,7 @@ internal bool ExtractFromManifest(ITaskItem taskItem, string path, Hashtable con
                         {
                             string id = assemblyref.AssemblyIdentity.GetFullName(AssemblyIdentity.FullNameFlags.All);
                             // add the assembly to the prerequisites list, if it's not already there
-                            if (containedPrerequisiteAssembliesTable.ContainsKey(id) == false)
+                            if (!containedPrerequisiteAssembliesTable.ContainsKey(id))
                             {
                                 ITaskItem item = new TaskItem();
                                 item.ItemSpec = id;
@@ -267,7 +271,7 @@ internal bool ExtractFromManifest(ITaskItem taskItem, string path, Hashtable con
                         }
 
                         // add the loose file to the outputs list, if it's not already there
-                        if (containedLooseEtcFilesTable.ContainsKey(fileref.ResolvedPath) == false)
+                        if (!containedLooseEtcFilesTable.ContainsKey(fileref.ResolvedPath))
                         {
                             ITaskItem itemLooseEtcFile = new TaskItem();
                             itemLooseEtcFile.ItemSpec = fileref.ResolvedPath;
@@ -284,7 +288,7 @@ internal bool ExtractFromManifest(ITaskItem taskItem, string path, Hashtable con
                             foreach (ComClass comclass in fileref.ComClasses)
                             {
                                 // add the comclass to the outputs list, if it's not already there
-                                if (containedComComponentsTable.ContainsKey(comclass.ClsId) == false)
+                                if (!containedComComponentsTable.ContainsKey(comclass.ClsId))
                                 {
                                     ITaskItem itemComClass = new TaskItem();
                                     itemComClass.ItemSpec = comclass.ClsId;
@@ -298,7 +302,7 @@ internal bool ExtractFromManifest(ITaskItem taskItem, string path, Hashtable con
                             foreach (TypeLib typelib in fileref.TypeLibs)
                             {
                                 // add the typelib to the outputs list, if it's not already there
-                                if (containedTypeLibrariesTable.ContainsKey(typelib.TlbId) == false)
+                                if (!containedTypeLibrariesTable.ContainsKey(typelib.TlbId))
                                 {
                                     ITaskItem itemTypeLib = new TaskItem();
                                     itemTypeLib.ItemSpec = typelib.TlbId;
@@ -314,7 +318,7 @@ internal bool ExtractFromManifest(ITaskItem taskItem, string path, Hashtable con
                             }
 
                             // add the loose TLB file to the outputs list, if it's not already there
-                            if (containedLooseTlbFilesTable.Contains(fileref.ResolvedPath) == false)
+                            if (!containedLooseTlbFilesTable.ContainsKey(fileref.ResolvedPath))
                             {
                                 ITaskItem itemLooseTlbFile = new TaskItem();
                                 itemLooseTlbFile.ItemSpec = fileref.ResolvedPath;
diff --git a/src/Tasks/Touch.cs b/src/Tasks/Touch.cs
index 95edd4a064f..be53de8a405 100644
--- a/src/Tasks/Touch.cs
+++ b/src/Tasks/Touch.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
-using System.Collections;
 using System.Collections.Generic;
 using System.Globalization;
 using System.IO;
@@ -72,7 +71,7 @@ SetLastWriteTime fileSetLastWriteTime
 
             // Go through all files and touch 'em
             bool retVal = true;
-            var touchedItems = new ArrayList();
+            var touchedItems = new List<ITaskItem>();
             var touchedFilesSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
 
             foreach (ITaskItem file in Files)
@@ -114,7 +113,7 @@ SetLastWriteTime fileSetLastWriteTime
 
             // Now, set the property that indicates which items we touched.  Note that we
             // touch all the items 
-            TouchedFiles = (ITaskItem[])touchedItems.ToArray(typeof(ITaskItem));
+            TouchedFiles = touchedItems.ToArray();
             return retVal;
         }
 
diff --git a/src/Tasks/XamlTaskFactory/XamlDataDrivenToolTask.cs b/src/Tasks/XamlTaskFactory/XamlDataDrivenToolTask.cs
index 7a6f2878b6c..81b9ff7fa0a 100644
--- a/src/Tasks/XamlTaskFactory/XamlDataDrivenToolTask.cs
+++ b/src/Tasks/XamlTaskFactory/XamlDataDrivenToolTask.cs
@@ -75,7 +75,7 @@ protected XamlDataDrivenToolTask(string[] switchOrderList, ResourceManager taskR
         /// <summary>
         /// Ordered list of switches
         /// </summary>
-        /// <returns>ArrayList of switches in declaration order</returns>
+        /// <returns>Switches in declaration order</returns>
         internal virtual IEnumerable<string> SwitchOrderList { get; }
 
         /// <summary>
