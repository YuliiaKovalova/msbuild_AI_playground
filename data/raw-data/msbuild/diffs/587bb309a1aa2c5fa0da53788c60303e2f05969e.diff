diff --git a/src/Deprecated/Engine.UnitTests/EngineProxy_Tests.cs b/src/Deprecated/Engine.UnitTests/EngineProxy_Tests.cs
index 809c19ee46a..28ef3d03323 100644
--- a/src/Deprecated/Engine.UnitTests/EngineProxy_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/EngineProxy_Tests.cs
@@ -213,7 +213,7 @@ public void CustomBuildErrorEventIsPreserved()
             engine.RegisterLogger(myLogger);
             // Create a custom build event args that derives from MSBuild's BuildErrorEventArgs.
             // Set a custom field on this event (FXCopRule).
-            MyCustomBuildErrorEventArgs fxcopError = new MyCustomBuildErrorEventArgs("Your code isbad.");
+            MyCustomBuildErrorEventArgs fxcopError = new MyCustomBuildErrorEventArgs("Your code is bad.");
             fxcopError.FXCopRule = "CodeLamenessViolation";
 
             // Log the custom event args.  (Pretend that the task actually did this.)
@@ -225,7 +225,7 @@ public void CustomBuildErrorEventIsPreserved()
 
             // Make sure the special fields in the custom event match what we originally logged.
             fxcopError = myLogger.lastError as MyCustomBuildErrorEventArgs;
-            Assertion.AssertEquals("Your code isbad.", fxcopError.Message);
+            Assertion.AssertEquals("Your code is bad.", fxcopError.Message);
             Assertion.AssertEquals("CodeLamenessViolation", fxcopError.FXCopRule);
         }
 
diff --git a/src/Deprecated/Engine.UnitTests/Lookup_Tests.cs b/src/Deprecated/Engine.UnitTests/Lookup_Tests.cs
index 5ce34dd4420..5338d973fe7 100644
--- a/src/Deprecated/Engine.UnitTests/Lookup_Tests.cs
+++ b/src/Deprecated/Engine.UnitTests/Lookup_Tests.cs
@@ -984,7 +984,7 @@ public void SetPropertyOnDifferentThread()
         }
 
         /// <summary>
-        ///Bad but simple way to get the lookup from another thread
+        /// Bad but simple way to get the lookup from another thread
         /// </summary>
         private static Lookup lookupPassedBetweenThreads;
 
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index 133d01c5e57..f80f88a5139 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -499,7 +499,7 @@ internal static void AssertArrayContentsMatch(object[] expected, object[] actual
         }
 
         /// <summary>
-        /// Parses the different string passed into AssertItemsMatch and returns a list of ITaskItems.
+        /// Parses the string passed into AssertItemsMatch and returns a list of ITaskItems.
         /// </summary>
         /// <param name="expectedItemsString"></param>
         /// <returns></returns>
diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index 5a9e02577f7..31e6535dfb3 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -5567,7 +5567,7 @@ public void GetRedistListPathsFromDisk_ThrowsArgumentNullException()
 
         /// <summary>
         /// Test the case where the redist list is empty and we pass in an empty set of allow lists
-        /// We should return null as there is no point generating a allow list if there is nothing to subtract from.
+        /// We should return null as there is no point generating an allow list if there is nothing to subtract from.
         /// ResolveAssemblyReference will see this as null and log a warning indicating no redist assemblies were found therefore no deny list could be
         /// generated
         /// </summary>
diff --git a/src/Utilities/ToolTask.cs b/src/Utilities/ToolTask.cs
index 1fee4d9f761..daee4074552 100644
--- a/src/Utilities/ToolTask.cs
+++ b/src/Utilities/ToolTask.cs
@@ -1,4 +1,4 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
@@ -1398,7 +1398,7 @@ public override bool Execute()
 
                         string batchFileForCommandLine = _temporaryBatchFile;
 
-                        // If for some different reason the path has a & character and a space in it
+                        // If for some reason the path has a & character and a space in it
                         // then get the short path of the temp path, which should not have spaces in it
                         // and then escape the &
                         if (batchFileForCommandLine.Contains("&") && !batchFileForCommandLine.Contains("^&"))
