diff --git a/src/Build/Logging/FancyLogger/ANSIBuilder.cs b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
index eb76f3e43fa..555327a9452 100644
--- a/src/Build/Logging/FancyLogger/ANSIBuilder.cs
+++ b/src/Build/Logging/FancyLogger/ANSIBuilder.cs
@@ -27,31 +27,31 @@ public static int ANSIBreakpoint(string text, int position)
             if (position >= text.Length) return text.Length;
             int nonAnsiIndex = 0;
             Match nextMatch = Regex.Match(text, ANSIRegex);
-            int i = 0;
-            while (i < text.Length && nonAnsiIndex != position)
+            int logicalIndex = 0;
+            while (logicalIndex < text.Length && nonAnsiIndex != position)
             {
                 // Jump over ansi codes
-                if (i == nextMatch.Index && nextMatch.Length > 0)
+                if (logicalIndex == nextMatch.Index && nextMatch.Length > 0)
                 {
-                    i += nextMatch.Length;
+                    logicalIndex += nextMatch.Length;
                     nextMatch = nextMatch.NextMatch();
                 }
                 // Increment non ansi index
                 nonAnsiIndex++;
-                i++;
+                logicalIndex++;
             }
-            return i;
+            return logicalIndex;
         }
 
-        public static List<string> ANSIWrap(string text, int position)
+        public static List<string> ANSIWrap(string text, int maxLength)
         {
             List<string> result = new();
-            int breakpoint = ANSIBreakpoint(text, position);
+            int breakpoint = ANSIBreakpoint(text, maxLength);
             while (text.Length > breakpoint)
             {
                 result.Add(text.Substring(0, breakpoint));
                 text = text.Substring(breakpoint);
-                breakpoint = ANSIBreakpoint(text, position);
+                breakpoint = ANSIBreakpoint(text, maxLength);
             }
             result.Add(text);
             return result;
diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index d6d44fefde8..fc36d0c21f6 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -170,8 +170,6 @@ void console_CancelKeyPressed(object? sender, ConsoleCancelEventArgs eventArgs)
         public void Shutdown()
         {
             FancyLoggerBuffer.Terminate();
-            // TODO: Remove. There is a bug that causes switching to main buffer without deleting the contents of the alternate buffer
-            // Console.Clear();
             int errorCount = 0;
             int warningCount = 0;
             foreach (var project in projects)
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 8b7302fba9f..26e8b305357 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -103,6 +103,7 @@ public static void Initialize()
         public static void Terminate()
         {
             IsTerminated = true;
+            // Delete contents from alternate buffer before switching back to main buffer
             Console.Write(
                 ANSIBuilder.Cursor.Home() +
                 ANSIBuilder.Eraser.DisplayCursorToEnd()
