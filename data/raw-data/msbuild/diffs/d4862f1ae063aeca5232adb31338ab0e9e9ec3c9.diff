diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index 0136e1a95ab..839e5b70c6e 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -872,7 +872,6 @@ internal static bool FileExists(string path)
         /// </summary>
         /// <param name="path">The path to directory.</param>
         /// <returns>'true' if the file is supposed to exist</returns>
-
         internal static string[] GetDirectoryFiles(string path, string pattern)
         {
             if (!Path.IsPathRooted(path))
@@ -3054,7 +3053,7 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
                         fileExists,
                         directoryExists,
                         getDirectories,
-                            getDirectoryFiles,
+                        getDirectoryFiles,
                         getAssemblyName,
                         getAssemblyMetadata,
     #if FEATURE_WIN32_REGISTRY
diff --git a/src/Tasks/AssemblyDependency/Resolver.cs b/src/Tasks/AssemblyDependency/Resolver.cs
index 4f03a876a05..72dd8c4a4c7 100644
--- a/src/Tasks/AssemblyDependency/Resolver.cs
+++ b/src/Tasks/AssemblyDependency/Resolver.cs
@@ -208,7 +208,7 @@ protected bool FileMatchesAssemblyName
                 catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
                 {
                     // Assuming it's the search path that's bad. But combine them both so the error is visible if it's the reference itself.
-                    throw new InvalidParameterValueException("SearchPaths", directory + (directory.EndsWith("\\", StringComparison.OrdinalIgnoreCase) ? String.Empty : "\\") + fileName, e.Message);
+                    throw new InvalidParameterValueException("SearchPaths", $"{directory.TrimEnd(Path.DirectorySeparatorChar)}{Path.DirectorySeparatorChar}{fileName}", e.Message);
                 }
             }
             else
@@ -360,7 +360,7 @@ List<ResolutionSearchLocation> assembliesConsideredAndRejected
                     catch (Exception e) when (ExceptionHandling.IsIoRelatedException(e))
                     {
                         // Assuming it's the search path that's bad. But combine them both so the error is visible if it's the reference itself.
-                        throw new InvalidParameterValueException("SearchPaths", directory + (directory.EndsWith("\\", StringComparison.OrdinalIgnoreCase) ? String.Empty : "\\") + fileName, e.Message);
+                        throw new InvalidParameterValueException("SearchPaths", $"{directory.TrimEnd(Path.DirectorySeparatorChar)}{Path.DirectorySeparatorChar}{fileName}", e.Message);
                     }
 
                     // We have a full path returned
diff --git a/src/Tasks/SystemState.cs b/src/Tasks/SystemState.cs
index a54532d9ea2..84c11a0b70e 100644
--- a/src/Tasks/SystemState.cs
+++ b/src/Tasks/SystemState.cs
@@ -594,7 +594,7 @@ private string[] GetDirectories(string path, string pattern)
 
         /// <summary>
         /// Cached implementation of GetFiles aimed to verify existence of a file in a directory.
-        /// It does not throw if directory do not exists.
+        /// It does not throw if directory does not exists.
         /// </summary>
         /// <param name="path"></param>
         /// <param name="fileName"></param>
