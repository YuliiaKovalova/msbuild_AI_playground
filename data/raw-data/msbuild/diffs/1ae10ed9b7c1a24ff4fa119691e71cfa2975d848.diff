diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index a9eafdf201e..d57364ef3ed 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -333,7 +333,8 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo
             // "required" so that we can keep track of whether or not they all get set.
             var setParameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             IDictionary<string, string> requiredParameters = GetNamesOfPropertiesWithRequiredAttribute();
-            IDictionary<string, string> allowEmptyStringParameters = GetNamesOfPropertiesWithAllowEmptyStringAttribute();
+
+            IList<string> allowEmptyStringParameters = GetNamesOfPropertiesWithAllowEmptyStringAttribute();
 
             // look through all the attributes of the task element
             foreach (KeyValuePair<string, (string, ElementLocation)> parameter in parameters)
@@ -343,7 +344,7 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo
 
                 try
                 {
-                    success = SetTaskParameter(parameter.Key, parameter.Value.Item1, parameter.Value.Item2, requiredParameters.ContainsKey(parameter.Key), allowEmptyStringParameters.ContainsKey(parameter.Key), out taskParameterSet);
+                    success = SetTaskParameter(parameter.Key, parameter.Value.Item1, parameter.Value.Item2, requiredParameters.ContainsKey(parameter.Key), allowEmptyStringParameters.Contains(parameter.Key), out taskParameterSet);
                 }
                 catch (Exception e) when (!ExceptionHandling.NotExpectedReflectionException(e))
                 {
@@ -1618,13 +1619,13 @@ private IDictionary<string, string> GetNamesOfPropertiesWithRequiredAttribute()
 
         /// <summary>
         /// Finds all the task properties that are allowEmptyString.
-        /// Returns them as keys in a dictionary.
+        /// Returns them in a list.
         /// </summary>
         /// <returns>Gets a list of properties which are allowEmptyString.</returns>
-        private IDictionary<string, string> GetNamesOfPropertiesWithAllowEmptyStringAttribute()
+        private IList<string> GetNamesOfPropertiesWithAllowEmptyStringAttribute()
         {
             ErrorUtilities.VerifyThrow(_taskFactoryWrapper != null, "Expected taskFactoryWrapper to not be null");
-            IDictionary<string, string> allowEmptyStringParameters = null;
+            IList<string> allowEmptyStringParameters = null;
 
             try
             {
diff --git a/src/Build/Instance/ReflectableTaskPropertyInfo.cs b/src/Build/Instance/ReflectableTaskPropertyInfo.cs
index 9a54afec924..238aa87f002 100644
--- a/src/Build/Instance/ReflectableTaskPropertyInfo.cs
+++ b/src/Build/Instance/ReflectableTaskPropertyInfo.cs
@@ -58,7 +58,7 @@ internal ReflectableTaskPropertyInfo(PropertyInfo propertyInfo)
         /// used with MetadataLoadContext, as these parameters cannot be computed for the property type passed in directly but
         /// rather the relevant base type.
         /// </summary>
-        internal ReflectableTaskPropertyInfo(PropertyInfo propertyInfo, bool output, bool required,bool allowEmptyString, bool isAssignableToITaskItemType)
+        internal ReflectableTaskPropertyInfo(PropertyInfo propertyInfo, bool output, bool required, bool allowEmptyString, bool isAssignableToITaskItemType)
             : base(
             propertyInfo.Name,
             propertyInfo.PropertyType,
diff --git a/src/Build/Instance/TaskFactoryWrapper.cs b/src/Build/Instance/TaskFactoryWrapper.cs
index 009ef11f62d..78607479320 100644
--- a/src/Build/Instance/TaskFactoryWrapper.cs
+++ b/src/Build/Instance/TaskFactoryWrapper.cs
@@ -32,7 +32,7 @@ internal sealed class TaskFactoryWrapper
         /// <summary>
         /// Cache of names of allowEmptyString properties on this type
         /// </summary>
-        private IDictionary<string, string> _namesOfPropertiesWithAllowEmptyStringAttribute;
+        private IList<string> _namesOfPropertiesWithAllowEmptyStringAttribute;
 
         /// <summary>
         /// Cache of names of output properties on this type
@@ -154,7 +154,7 @@ public IDictionary<string, string> FactoryIdentityParameters
             }
         }
 
-        public IDictionary<string, string> GetNamesOfPropertiesWithAllowEmptyStringAttribute {
+        public IList<string> GetNamesOfPropertiesWithAllowEmptyStringAttribute {
             get
             {
                 PopulatePropertyInfoCacheIfNecessary();
@@ -324,11 +324,9 @@ private void PopulatePropertyInfoCacheIfNecessary()
                     {
                         if (_namesOfPropertiesWithAllowEmptyStringAttribute == null)
                         {
-                            _namesOfPropertiesWithAllowEmptyStringAttribute = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+                            _namesOfPropertiesWithAllowEmptyStringAttribute = new List<string>();
                         }
-
-                        // we have a allowEmptyString attribute defined, keep a record of that
-                        _namesOfPropertiesWithAllowEmptyStringAttribute[propertyInfo.Name] = String.Empty;
+                        _namesOfPropertiesWithAllowEmptyStringAttribute.Add(propertyInfo.Name);
                     }
                 }
 
@@ -337,7 +335,7 @@ private void PopulatePropertyInfoCacheIfNecessary()
                 _namesOfPropertiesWithRequiredAttribute ??= ReadOnlyEmptyDictionary<string, string>.Instance;
                 _namesOfPropertiesWithOutputAttribute ??= ReadOnlyEmptyDictionary<string, string>.Instance;
                 _namesOfPropertiesWithAmbiguousMatches ??= ReadOnlyEmptyDictionary<string, string>.Instance;
-                _namesOfPropertiesWithAllowEmptyStringAttribute ??= ReadOnlyEmptyDictionary<string, string>.Instance;
+                _namesOfPropertiesWithAllowEmptyStringAttribute ??= new List<string>();
             }
         }
         #endregion
diff --git a/src/Framework/TaskPropertyInfo.cs b/src/Framework/TaskPropertyInfo.cs
index 18990adefc2..c0829600824 100644
--- a/src/Framework/TaskPropertyInfo.cs
+++ b/src/Framework/TaskPropertyInfo.cs
@@ -21,8 +21,26 @@ public class TaskPropertyInfo
         /// <param name="typeOfParameter">The actual type of the parameter</param>
         /// <param name="output">True if the parameter is both an output and input parameter. False if the parameter is only an input parameter</param>
         /// <param name="required">True if the parameter must be supplied to each invocation of the task.</param>
-        /// <param name="allowEmptyString"></param>
-        public TaskPropertyInfo(string name, Type typeOfParameter, bool output, bool required, bool allowEmptyString = false)
+        public TaskPropertyInfo(string name, Type typeOfParameter, bool output, bool required)
+        {
+            Name = name;
+            PropertyType = typeOfParameter;
+            Output = output;
+            Required = required;
+            Type elementType = typeOfParameter.IsArray ? typeOfParameter.GetElementType() : typeOfParameter;
+            IsValueTypeOutputParameter = elementType.GetTypeInfo().IsValueType || elementType.FullName.Equals("System.String");
+            IsAssignableToITask = typeof(ITaskItem).IsAssignableFrom(elementType);
+        }
+
+        /// <summary>
+        /// Encapsulates a list of parameters declared in the UsingTask
+        /// </summary>
+        /// <param name="name">Name of the parameter</param>
+        /// <param name="typeOfParameter">The actual type of the parameter</param>
+        /// <param name="output">True if the parameter is both an output and input parameter. False if the parameter is only an input parameter</param>
+        /// <param name="required">True if the parameter must be supplied to each invocation of the task.</param>
+        /// <param name="allowEmptyString">True if the parameter can be empty of the task.</param>
+        public TaskPropertyInfo(string name, Type typeOfParameter, bool output, bool required, bool allowEmptyString)
         {
             Name = name;
             PropertyType = typeOfParameter;
@@ -55,7 +73,7 @@ public TaskPropertyInfo(string name, Type typeOfParameter, bool output, bool req
         public bool Required { get; private set; }
 
         /// <summary>
-        /// This task parameter is required (analogous to the [Required] attribute)
+        /// This task parameter is emtpy (analogous to the [AllowEmptyString] attribute)
         /// </summary>
         public bool AllowEmptyString { get; private set; }
 
diff --git a/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs b/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
index 4046b5fea01..80b0140226a 100644
--- a/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
+++ b/src/Tasks.UnitTests/XamlDataDrivenToolTask_Tests.cs
@@ -255,7 +255,7 @@ public void CommandLineErrorsReportFullCommandlineAmpersandTemp()
         {
             string projectFile = @"
                       <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory`>
-                        <UsingTask TaskName=`TestTask` TaskFactory=`XamlTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
+                        <UsingTask TaskName=`TestTask` TaskFactory=`XamlTaskFactory` AssemblyName=`Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`>
                           <Task>
                             <![CDATA[
                               <ProjectSchemaDefinitions xmlns=`clr-namespace:Microsoft.Build.Framework.XamlTypes;assembly=Microsoft.Build.Framework` xmlns:x=`http://schemas.microsoft.com/winfx/2006/xaml` xmlns:sys=`clr-namespace:System;assembly=mscorlib` xmlns:impl=`clr-namespace:Microsoft.VisualStudio.Project.Contracts.Implementation;assembly=Microsoft.VisualStudio.Project.Contracts.Implementation`>
@@ -309,7 +309,7 @@ public void CommandLineErrorsReportFullCommandline()
         {
             string projectFile = @"
                       <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory`>
-                        <UsingTask TaskName=`TestTask` TaskFactory=`XamlTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
+                        <UsingTask TaskName=`TestTask` TaskFactory=`XamlTaskFactory` AssemblyName=`Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`>
                           <Task>
                             <![CDATA[
                               <ProjectSchemaDefinitions xmlns=`clr-namespace:Microsoft.Build.Framework.XamlTypes;assembly=Microsoft.Build.Framework` xmlns:x=`http://schemas.microsoft.com/winfx/2006/xaml` xmlns:sys=`clr-namespace:System;assembly=mscorlib` xmlns:impl=`clr-namespace:Microsoft.VisualStudio.Project.Contracts.Implementation;assembly=Microsoft.VisualStudio.Project.Contracts.Implementation`>
@@ -346,7 +346,7 @@ public void SquareBracketEscaping()
         {
             string projectFile = @"
                       <Project ToolsVersion=`msbuilddefaulttoolsversion` DefaultTargets=`XamlTaskFactory`>
-                        <UsingTask TaskName=`TestTask` TaskFactory=`XamlTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll`>
+                        <UsingTask TaskName=`TestTask` TaskFactory=`XamlTaskFactory` AssemblyName=`Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a`>
                           <Task>
                             <![CDATA[
                               <ProjectSchemaDefinitions xmlns=`clr-namespace:Microsoft.Build.Framework.XamlTypes;assembly=Microsoft.Build.Framework` xmlns:x=`http://schemas.microsoft.com/winfx/2006/xaml` xmlns:sys=`clr-namespace:System;assembly=mscorlib` xmlns:impl=`clr-namespace:Microsoft.VisualStudio.Project.Contracts.Implementation;assembly=Microsoft.VisualStudio.Project.Contracts.Implementation`>
