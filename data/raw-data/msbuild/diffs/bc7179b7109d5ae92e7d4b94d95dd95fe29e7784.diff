diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index c30b6e4a414..fed9bbf6f7b 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -810,6 +810,7 @@ public void ProjectGetterResultsInWindowsDriveEnumerationWarning(string unevalua
         }
 
         [UnixOnlyTheory]
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/8373")]
         [InlineData(@"/**/*.log")]
         [InlineData(@"$(empty)/**/*.log")]
         [InlineData(@"/$(empty)**/*.log")]
@@ -926,11 +927,11 @@ private static string UpdatePathToMappedDrive(string path, char driveLetter)
         }
 
         [UnixOnlyTheory]
-        // Failing: https://github.com/dotnet/msbuild/issues/8373
-        // [InlineData(
-        //    ImportProjectElement,
-        //    @"\**\*.targets",
-        //    null)]
+        [ActiveIssue("https://github.com/dotnet/msbuild/issues/8373")]
+        [InlineData(
+            ImportProjectElement,
+            @"\**\*.targets",
+            null)]
 
         // LazyItem.IncludeOperation
         [InlineData(
diff --git a/src/UnitTests.Shared/DriveMapping.cs b/src/UnitTests.Shared/DriveMapping.cs
index 5f1dcd02bd2..81324086548 100644
--- a/src/UnitTests.Shared/DriveMapping.cs
+++ b/src/UnitTests.Shared/DriveMapping.cs
@@ -12,7 +12,7 @@ namespace Microsoft.Build.UnitTests.Shared;
 internal static class DriveMapping
 {
     private const int ERROR_FILE_NOT_FOUND = 2;
-    // private const int ERROR_INSUFFICIENT_BUFFER = 122;
+    private const int ERROR_INSUFFICIENT_BUFFER = 122;
     private const int DDD_REMOVE_DEFINITION = 2;
     private const int DDD_NO_FLAG = 0;
     // extra space for '\??\'. Not counting for long paths support in tests.
@@ -55,7 +55,8 @@ public static string GetDriveMapping(char letter)
     {
         // since this is just for test purposes - let's not overcomplicate with long paths support
         char[] buffer = new char[MAX_PATH];
-        if (QueryDosDevice(ToDeviceName(letter), buffer, buffer.Length) == 0)
+
+        while (QueryDosDevice(ToDeviceName(letter), buffer, buffer.Length) == 0)
         {
             // Return empty string if the drive is not mapped
             int err = Marshal.GetLastWin32Error();
@@ -63,15 +64,22 @@ public static string GetDriveMapping(char letter)
             {
                 return string.Empty;
             }
-            NativeMethodsShared.ThrowExceptionForErrorCode(err);
+
+            if (err != ERROR_INSUFFICIENT_BUFFER)
+            {
+                NativeMethodsShared.ThrowExceptionForErrorCode(err);
+            }
+
+            buffer = new char[buffer.Length * 4];
         }
+
         // Translate from the native path semantic - starting with '\??\'
         return new string(buffer, 4, buffer.Length - 4);
     }
 
     private static string ToDeviceName(char letter)
     {
-        return new string(char.ToUpper(letter), 1) + ":";
+        return $"{char.ToUpper(letter)}:";
     }
 
     [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
