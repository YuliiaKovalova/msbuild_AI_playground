diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index abd90736495..094325d4340 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -807,10 +807,10 @@ public partial class RemoveDuplicates : Microsoft.Build.Tasks.TaskExtension
     {
         public RemoveDuplicates() { }
         [Microsoft.Build.Framework.OutputAttribute]
-        public Microsoft.Build.Framework.ITaskItem[] Filtered { get { throw null; } set { } }
+        public Microsoft.Build.Framework.ITaskItem[] Filtered { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         [Microsoft.Build.Framework.OutputAttribute]
-        public bool HadAnyDuplicates { get { throw null; } set { } }
-        public Microsoft.Build.Framework.ITaskItem[] Inputs { get { throw null; } set { } }
+        public bool HadAnyDuplicates { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public Microsoft.Build.Framework.ITaskItem[] Inputs { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public override bool Execute() { throw null; }
     }
     public sealed partial class RequiresFramework35SP1Assembly : Microsoft.Build.Tasks.TaskExtension
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 74187975999..add317f8808 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -482,10 +482,10 @@ public partial class RemoveDuplicates : Microsoft.Build.Tasks.TaskExtension
     {
         public RemoveDuplicates() { }
         [Microsoft.Build.Framework.OutputAttribute]
-        public Microsoft.Build.Framework.ITaskItem[] Filtered { get { throw null; } set { } }
+        public Microsoft.Build.Framework.ITaskItem[] Filtered { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         [Microsoft.Build.Framework.OutputAttribute]
-        public bool HadAnyDuplicates { get { throw null; } set { } }
-        public Microsoft.Build.Framework.ITaskItem[] Inputs { get { throw null; } set { } }
+        public bool HadAnyDuplicates { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
+        public Microsoft.Build.Framework.ITaskItem[] Inputs { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
         public override bool Execute() { throw null; }
     }
     public partial class ResolveAssemblyReference : Microsoft.Build.Tasks.TaskExtension
diff --git a/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs b/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs
index 31b629451a4..a06fba68683 100644
--- a/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs
+++ b/src/Tasks.UnitTests/RemoveDuplicates_Tests.cs
@@ -1,9 +1,6 @@
 // Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using System;
-using System.IO;
-using System.Reflection;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Tasks;
 using Microsoft.Build.Utilities;
@@ -19,10 +16,10 @@ sealed public class RemoveDuplicates_Tests
         [Fact]
         public void OneItemNop()
         {
-            RemoveDuplicates t = new RemoveDuplicates();
+            var t = new RemoveDuplicates();
             t.BuildEngine = new MockEngine();
 
-            t.Inputs = new ITaskItem[] { new TaskItem("MyFile.txt") };
+            t.Inputs = new[] { new TaskItem("MyFile.txt") };
 
             bool success = t.Execute();
             Assert.True(success);
@@ -37,10 +34,10 @@ public void OneItemNop()
         [Fact]
         public void TwoItemsTheSame()
         {
-            RemoveDuplicates t = new RemoveDuplicates();
+            var t = new RemoveDuplicates();
             t.BuildEngine = new MockEngine();
 
-            t.Inputs = new ITaskItem[] { new TaskItem("MyFile.txt"), new TaskItem("MyFile.txt") };
+            t.Inputs = new[] { new TaskItem("MyFile.txt"), new TaskItem("MyFile.txt") };
 
             bool success = t.Execute();
             Assert.True(success);
@@ -55,12 +52,12 @@ public void TwoItemsTheSame()
         [Fact]
         public void OrderPreservedNoDups()
         {
-            RemoveDuplicates t = new RemoveDuplicates();
+            var t = new RemoveDuplicates();
             t.BuildEngine = new MockEngine();
 
             // intentionally not sorted to catch an invalid implementation that sorts before
             // de-duping.
-            t.Inputs = new ITaskItem[]
+            t.Inputs = new[]
             {
                 new TaskItem("MyFile2.txt"),
                 new TaskItem("MyFile1.txt"),
@@ -81,10 +78,10 @@ public void OrderPreservedNoDups()
         [Fact]
         public void OrderPreservedDups()
         {
-            RemoveDuplicates t = new RemoveDuplicates();
+            var t = new RemoveDuplicates();
             t.BuildEngine = new MockEngine();
 
-            t.Inputs = new ITaskItem[]
+            t.Inputs = new[]
             {
                 new TaskItem("MyFile2.txt"),
                 new TaskItem("MyFile1.txt"),
@@ -107,10 +104,10 @@ public void OrderPreservedDups()
         [Fact]
         public void TwoItemsDifferent()
         {
-            RemoveDuplicates t = new RemoveDuplicates();
+            var t = new RemoveDuplicates();
             t.BuildEngine = new MockEngine();
 
-            t.Inputs = new ITaskItem[] { new TaskItem("MyFile1.txt"), new TaskItem("MyFile2.txt") };
+            t.Inputs = new[] { new TaskItem("MyFile1.txt"), new TaskItem("MyFile2.txt") };
 
             bool success = t.Execute();
             Assert.True(success);
@@ -126,10 +123,10 @@ public void TwoItemsDifferent()
         [Fact]
         public void CaseInsensitive()
         {
-            RemoveDuplicates t = new RemoveDuplicates();
+            var t = new RemoveDuplicates();
             t.BuildEngine = new MockEngine();
 
-            t.Inputs = new ITaskItem[] { new TaskItem("MyFile.txt"), new TaskItem("MyFIle.tXt") };
+            t.Inputs = new[] { new TaskItem("MyFile.txt"), new TaskItem("MyFIle.tXt") };
 
             bool success = t.Execute();
             Assert.True(success);
@@ -144,7 +141,7 @@ public void CaseInsensitive()
         [Fact]
         public void MissingInputs()
         {
-            RemoveDuplicates t = new RemoveDuplicates();
+            var t = new RemoveDuplicates();
             t.BuildEngine = new MockEngine();
             bool success = t.Execute();
 
diff --git a/src/Tasks/ListOperators/RemoveDuplicates.cs b/src/Tasks/ListOperators/RemoveDuplicates.cs
index e0c3a26df02..f7906e35606 100644
--- a/src/Tasks/ListOperators/RemoveDuplicates.cs
+++ b/src/Tasks/ListOperators/RemoveDuplicates.cs
@@ -6,7 +6,6 @@
 
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
-using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Tasks
 {
@@ -15,38 +14,22 @@ namespace Microsoft.Build.Tasks
     /// </summary>
     public class RemoveDuplicates : TaskExtension
     {
-        private ITaskItem[] _inputs = Array.Empty<TaskItem>();
-        private ITaskItem[] _filtered = null;
-        private bool _hadAnyDuplicates = false;
-
         /// <summary>
         /// The left-hand set of items to be RemoveDuplicatesed from.
         /// </summary>
-        public ITaskItem[] Inputs
-        {
-            get { return _inputs; }
-            set { _inputs = value; }
-        }
+        public ITaskItem[] Inputs { get; set; } = Array.Empty<TaskItem>();
 
         /// <summary>
         /// List of unique items.
         /// </summary>
         [Output]
-        public ITaskItem[] Filtered
-        {
-            get { return _filtered; }
-            set { _filtered = value; }
-        }
+        public ITaskItem[] Filtered { get; set; } = null;
 
         /// <summary>
         /// True if any duplicate items were found. False otherwise.
         /// </summary>
         [Output]
-        public bool HadAnyDuplicates
-        {
-            get { return _hadAnyDuplicates; }
-            set { _hadAnyDuplicates = value; }
-        }
+        public bool HadAnyDuplicates { get; set; } = false;
 
         /// <summary>
         /// Execute the task.
@@ -54,8 +37,8 @@ public bool HadAnyDuplicates
         /// <returns></returns>
         public override bool Execute()
         {
-            Hashtable alreadySeen = new Hashtable(Inputs.Length, StringComparer.OrdinalIgnoreCase);
-            ArrayList filteredList = new ArrayList();
+            var alreadySeen = new Hashtable(Inputs.Length, StringComparer.OrdinalIgnoreCase);
+            var filteredList = new ArrayList();
             foreach (ITaskItem item in Inputs)
             {
                 if (!alreadySeen.ContainsKey(item.ItemSpec))
