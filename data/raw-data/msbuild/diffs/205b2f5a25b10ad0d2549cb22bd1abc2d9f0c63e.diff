diff --git a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
index 1db0b3935b2..e45add12e09 100644
--- a/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskHost_Tests.cs
@@ -120,20 +120,20 @@ public void TestLiveTargetOutputs()
         public void CustomBuildErrorEventIsPreserved()
         {
             // Create a custom build event args that derives from MSBuild's BuildErrorEventArgs.
-            // Set a custom field on this event (FXCopRule).
-            MyCustomBuildErrorEventArgs fxcopError = new MyCustomBuildErrorEventArgs("Your code failed.");
-            fxcopError.FXCopRule = "CodeViolation";
+            // Set a custom field on this event.
+            MyCustomBuildErrorEventArgs customBuildError = new MyCustomBuildErrorEventArgs("Your code failed.");
+            customBuildError.CustomData = "CodeViolation";
 
             // Log the custom event args.  (Pretend that the task actually did this.)
-            _taskHost.LogErrorEvent(fxcopError);
+            _taskHost.LogErrorEvent(customBuildError);
 
             // Make sure our custom logger received the actual custom event and not some fake.
             Assert.True(_customLogger.LastError is MyCustomBuildErrorEventArgs); // "Expected Custom Error Event"
 
             // Make sure the special fields in the custom event match what we originally logged.
-            fxcopError = _customLogger.LastError as MyCustomBuildErrorEventArgs;
-            Assert.Equal("Your code failed.", fxcopError.Message);
-            Assert.Equal("CodeViolation", fxcopError.FXCopRule);
+            customBuildError = _customLogger.LastError as MyCustomBuildErrorEventArgs;
+            Assert.Equal("Your code failed.", customBuildError.Message);
+            Assert.Equal("CodeViolation", customBuildError.CustomData);
         }
 
         /// <summary>
@@ -146,19 +146,19 @@ public void CustomBuildErrorEventIsPreserved()
         public void CustomBuildWarningEventIsPreserved()
         {
             // Create a custom build event args that derives from MSBuild's BuildWarningEventArgs.
-            // Set a custom field on this event (FXCopRule).
-            MyCustomBuildWarningEventArgs fxcopWarning = new MyCustomBuildWarningEventArgs("Your code failed.");
-            fxcopWarning.FXCopRule = "CodeViolation";
+            // Set a custom field on this event.
+            MyCustomBuildWarningEventArgs customBuildWarning = new MyCustomBuildWarningEventArgs("Your code failed.");
+            customBuildWarning.CustomData = "CodeViolation";
 
-            _taskHost.LogWarningEvent(fxcopWarning);
+            _taskHost.LogWarningEvent(customBuildWarning);
 
             // Make sure our custom logger received the actual custom event and not some fake.
             Assert.True(_customLogger.LastWarning is MyCustomBuildWarningEventArgs); // "Expected Custom Warning Event"
 
             // Make sure the special fields in the custom event match what we originally logged.
-            fxcopWarning = _customLogger.LastWarning as MyCustomBuildWarningEventArgs;
-            Assert.Equal("Your code failed.", fxcopWarning.Message);
-            Assert.Equal("CodeViolation", fxcopWarning.FXCopRule);
+            customBuildWarning = _customLogger.LastWarning as MyCustomBuildWarningEventArgs;
+            Assert.Equal("Your code failed.", customBuildWarning.Message);
+            Assert.Equal("CodeViolation", customBuildWarning.CustomData);
         }
 
         /// <summary>
@@ -171,7 +171,7 @@ public void CustomBuildWarningEventIsPreserved()
         public void CustomBuildMessageEventIsPreserved()
         {
             // Create a custom build event args that derives from MSBuild's BuildMessageEventArgs.
-            // Set a custom field on this event (FXCopRule).
+            // Set a custom field on this event.
             MyCustomMessageEvent customMessage = new MyCustomMessageEvent("I am a message");
             customMessage.CustomMessage = "CodeViolation";
 
@@ -861,7 +861,7 @@ internal class MyCustomBuildErrorEventArgs : BuildErrorEventArgs
             /// <summary>
             /// Some custom data for the custom event.
             /// </summary>
-            private string _fxcopRule;
+            private string _customData;
 
             /// <summary>
             /// Constructor
@@ -877,16 +877,16 @@ string message
             /// <summary>
             /// Some data which can be set on the custom error event to make sure it makes it to the logger.
             /// </summary>
-            internal string FXCopRule
+            internal string CustomData
             {
                 get
                 {
-                    return _fxcopRule;
+                    return _customData;
                 }
 
                 set
                 {
-                    _fxcopRule = value;
+                    _customData = value;
                 }
             }
         }
@@ -900,7 +900,7 @@ internal class MyCustomBuildWarningEventArgs : BuildWarningEventArgs
             /// <summary>
             /// Custom data for the custom event
             /// </summary>
-            private string _fxcopRule;
+            private string _customData;
 
             /// <summary>
             /// Constructor
@@ -916,16 +916,16 @@ string message
             /// <summary>
             /// Getter for the custom data in the custom event.
             /// </summary>
-            internal string FXCopRule
+            internal string CustomData
             {
                 get
                 {
-                    return _fxcopRule;
+                    return _customData;
                 }
 
                 set
                 {
-                    _fxcopRule = value;
+                    _customData = value;
                 }
             }
         }
@@ -998,7 +998,7 @@ internal class MyCustomBuildErrorEventArgsNotSerializable : BuildErrorEventArgs
             /// <summary>
             /// Custom data for the custom event
             /// </summary>
-            private string _fxcopRule;
+            private string _customData;
 
             /// <summary>
             /// Constructor
@@ -1014,16 +1014,16 @@ string message
             /// <summary>
             /// Getter and setter for the custom data
             /// </summary>
-            internal string FXCopRule
+            internal string CustomData
             {
                 get
                 {
-                    return _fxcopRule;
+                    return _customData;
                 }
 
                 set
                 {
-                    _fxcopRule = value;
+                    _customData = value;
                 }
             }
         }
@@ -1036,7 +1036,7 @@ internal class MyCustomBuildWarningEventArgsNotSerializable : BuildWarningEventA
             /// <summary>
             /// Custom data for the custom event
             /// </summary>
-            private string _fxcopRule;
+            private string _customData;
 
             /// <summary>
             /// Constructor
@@ -1052,16 +1052,16 @@ string message
             /// <summary>
             /// Getter and setter for the custom data
             /// </summary>
-            internal string FXCopRule
+            internal string CustomData
             {
                 get
                 {
-                    return _fxcopRule;
+                    return _customData;
                 }
 
                 set
                 {
-                    _fxcopRule = value;
+                    _customData = value;
                 }
             }
         }
diff --git a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
index a393d6c36a8..a1757c74f3d 100644
--- a/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
+++ b/src/Build/BackEnd/Components/Logging/EventSourceSink.cs
@@ -217,66 +217,63 @@ public void Consume(BuildEventArgs buildEvent, int sinkId)
         /// </summary>
         public void Consume(BuildEventArgs buildEvent)
         {
-            // FXCop may complain that there are unecessary casts here, and there are, but
-            // using "as" and allocating another variable for each event is extremely costly
-            // and is much slower then this approach even with the additional casts
-            if (buildEvent is BuildMessageEventArgs)
+            if (buildEvent is BuildMessageEventArgs buildMessageEvent)
             {
-                this.RaiseMessageEvent(null, (BuildMessageEventArgs)buildEvent);
+                this.RaiseMessageEvent(null, buildMessageEvent);
             }
-            else if (buildEvent is TaskStartedEventArgs)
+            else if (buildEvent is TaskStartedEventArgs taskStartedEvent)
             {
-                this.RaiseTaskStartedEvent(null, (TaskStartedEventArgs)buildEvent);
+                this.RaiseTaskStartedEvent(null, taskStartedEvent);
             }
-            else if (buildEvent is TaskFinishedEventArgs)
+            else if (buildEvent is TaskFinishedEventArgs taskFinishedEvent)
             {
-                this.RaiseTaskFinishedEvent(null, (TaskFinishedEventArgs)buildEvent);
+                this.RaiseTaskFinishedEvent(null, taskFinishedEvent);
             }
-            else if (buildEvent is TargetStartedEventArgs)
+            else if (buildEvent is TargetStartedEventArgs targetStartedEvent)
             {
-                this.RaiseTargetStartedEvent(null, (TargetStartedEventArgs)buildEvent);
+                this.RaiseTargetStartedEvent(null, targetStartedEvent);
             }
-            else if (buildEvent is TargetFinishedEventArgs)
+            else if (buildEvent is TargetFinishedEventArgs targetFinishedEvent)
             {
-                this.RaiseTargetFinishedEvent(null, (TargetFinishedEventArgs)buildEvent);
+                this.RaiseTargetFinishedEvent(null, targetFinishedEvent);
             }
-            else if (buildEvent is ProjectStartedEventArgs)
+            else if (buildEvent is ProjectStartedEventArgs projectStartedEvent)
             {
-                this.RaiseProjectStartedEvent(null, (ProjectStartedEventArgs)buildEvent);
+                this.RaiseProjectStartedEvent(null, projectStartedEvent);
             }
-            else if (buildEvent is ProjectFinishedEventArgs)
+            else if (buildEvent is ProjectFinishedEventArgs projectFinishedEvent)
             {
-                this.RaiseProjectFinishedEvent(null, (ProjectFinishedEventArgs)buildEvent);
+                this.RaiseProjectFinishedEvent(null, projectFinishedEvent);
             }
-            else if (buildEvent is BuildStartedEventArgs)
+            else if (buildEvent is BuildStartedEventArgs buildStartedEvent)
             {
                 HaveLoggedBuildStartedEvent = true;
-                this.RaiseBuildStartedEvent(null, (BuildStartedEventArgs)buildEvent);
+                this.RaiseBuildStartedEvent(null, buildStartedEvent);
             }
-            else if (buildEvent is BuildFinishedEventArgs)
+            else if (buildEvent is BuildFinishedEventArgs buildFinishedEvent)
             {
                 HaveLoggedBuildFinishedEvent = true;
-                this.RaiseBuildFinishedEvent(null, (BuildFinishedEventArgs)buildEvent);
+                this.RaiseBuildFinishedEvent(null, buildFinishedEvent);
             }
-            else if (buildEvent is CustomBuildEventArgs)
+            else if (buildEvent is CustomBuildEventArgs customBuildEvent)
             {
-                this.RaiseCustomEvent(null, (CustomBuildEventArgs)buildEvent);
+                this.RaiseCustomEvent(null, customBuildEvent);
             }
-            else if (buildEvent is BuildStatusEventArgs)
+            else if (buildEvent is BuildStatusEventArgs buildStatusEvent)
             {
-                this.RaiseStatusEvent(null, (BuildStatusEventArgs)buildEvent);
+                this.RaiseStatusEvent(null, buildStatusEvent);
             }
-            else if (buildEvent is BuildWarningEventArgs)
+            else if (buildEvent is BuildWarningEventArgs buildWarningEvent)
             {
-                this.RaiseWarningEvent(null, (BuildWarningEventArgs)buildEvent);
+                this.RaiseWarningEvent(null, buildWarningEvent);
             }
-            else if (buildEvent is BuildErrorEventArgs)
+            else if (buildEvent is BuildErrorEventArgs buildErrorEvent)
             {
-                this.RaiseErrorEvent(null, (BuildErrorEventArgs)buildEvent);
+                this.RaiseErrorEvent(null, buildErrorEvent);
             }
-            else if (buildEvent is TelemetryEventArgs)
+            else if (buildEvent is TelemetryEventArgs telemetryEvent)
             {
-                this.RaiseTelemetryEvent(null, (TelemetryEventArgs) buildEvent);
+                this.RaiseTelemetryEvent(null, telemetryEvent);
             }
             else
             {
diff --git a/src/Build/Construction/ProjectRootElement.cs b/src/Build/Construction/ProjectRootElement.cs
index 389f1f3cf6e..cb08aee7b3e 100644
--- a/src/Build/Construction/ProjectRootElement.cs
+++ b/src/Build/Construction/ProjectRootElement.cs
@@ -1810,7 +1810,7 @@ internal override void VerifyThrowInvalidOperationAcceptableLocation(ProjectElem
         /// </summary>
         /// <remarks>
         /// This is sealed because it is virtual and called in a constructor; by sealing it we
-        /// satisfy FXCop that nobody will override it to do something that would rely on
+        /// satisfy the rule that nobody will override it to do something that would rely on
         /// unconstructed state.
         /// Should be protected+internal.
         /// </remarks>
diff --git a/src/Build/Logging/FileLogger.cs b/src/Build/Logging/FileLogger.cs
index 7394b006c0f..96732da2b2d 100644
--- a/src/Build/Logging/FileLogger.cs
+++ b/src/Build/Logging/FileLogger.cs
@@ -153,15 +153,7 @@ private void Write(string text)
         /// </summary>
         public override void Shutdown()
         {
-            try
-            {
-                // Do, or do not, there is no try.
-            }
-            finally
-            {
-                // Keep FxCop happy by closing in a Finally.
-                _fileWriter?.Dispose();
-            }
+            _fileWriter?.Dispose();
         }
 
         /// <summary>
diff --git a/src/Deprecated/Engine/Engine/BuildTask.cs b/src/Deprecated/Engine/Engine/BuildTask.cs
index 908d29e9aad..4d7552ed0fa 100644
--- a/src/Deprecated/Engine/Engine/BuildTask.cs
+++ b/src/Deprecated/Engine/Engine/BuildTask.cs
@@ -106,19 +106,6 @@ bool            importedFromAnotherProject
             this.taskName = taskElement.Name;
         }
 
-        /// <summary>
-        /// Default constructor.  This is not allowed, because it leaves the
-        /// BuildTask in a bad state. But we have to have it, otherwise FXCop
-        /// complains.
-        /// </summary>
-        /// <owner>rgoel</owner>
-        private BuildTask
-            (
-            )
-        {
-            // Not allowed.
-        }
-
         #endregion
 
         #region Properties
diff --git a/src/Deprecated/Engine/Engine/EventSource.cs b/src/Deprecated/Engine/Engine/EventSource.cs
index 99454be7fa2..b2266420281 100644
--- a/src/Deprecated/Engine/Engine/EventSource.cs
+++ b/src/Deprecated/Engine/Engine/EventSource.cs
@@ -526,35 +526,32 @@ internal void RaiseAnyEvent(object sender, BuildEventArgs e)
         /// <param name="e"></param>
         internal void RaiseStronglyTypedEvent(BuildEventArgs e)
         {
-            // FXCop may complain that there are unecessary casts here, and there are, but
-            // using "as" and allocating another variable for each event is extremely costly
-            // and is much slower then this approach even with the additional casts
-            if (e is BuildMessageEventArgs)
-                this.RaiseMessageEvent(null, (BuildMessageEventArgs)e);
-            else if (e is TaskStartedEventArgs)
-                this.RaiseTaskStartedEvent(null, (TaskStartedEventArgs)e);
-            else if (e is TaskFinishedEventArgs)
-                this.RaiseTaskFinishedEvent(null, (TaskFinishedEventArgs)e);
-            else if (e is TargetStartedEventArgs)
-                this.RaiseTargetStartedEvent(null, (TargetStartedEventArgs)e);
-            else if (e is TargetFinishedEventArgs)
-                this.RaiseTargetFinishedEvent(null, (TargetFinishedEventArgs)e);
-            else if (e is ProjectStartedEventArgs)
-                this.RaiseProjectStartedEvent(null, (ProjectStartedEventArgs)e);
-            else if (e is ProjectFinishedEventArgs)
-                this.RaiseProjectFinishedEvent(null, (ProjectFinishedEventArgs)e);
-            else if (e is BuildStartedEventArgs)
-                this.RaiseBuildStartedEvent(null, (BuildStartedEventArgs)e);
-            else if (e is BuildFinishedEventArgs)
-                this.RaiseBuildFinishedEvent(null, (BuildFinishedEventArgs)e);
-            else if (e is CustomBuildEventArgs)
-                this.RaiseCustomEvent(null, (CustomBuildEventArgs)e);
-            else if (e is BuildStatusEventArgs)
-                this.RaiseStatusEvent(null, (BuildStatusEventArgs)e);
-            else if (e is BuildWarningEventArgs)
-                this.RaiseWarningEvent(null, (BuildWarningEventArgs)e);
-            else if (e is BuildErrorEventArgs)
-                this.RaiseErrorEvent(null, (BuildErrorEventArgs)e);
+            if (e is BuildMessageEventArgs buildMessageEvent)
+                this.RaiseMessageEvent(null, buildMessageEvent);
+            else if (e is TaskStartedEventArgs taskStartedEvent)
+                this.RaiseTaskStartedEvent(null, taskStartedEvent);
+            else if (e is TaskFinishedEventArgs taskFinishedEvent)
+                this.RaiseTaskFinishedEvent(null, taskFinishedEvent);
+            else if (e is TargetStartedEventArgs targetStartedEvent)
+                this.RaiseTargetStartedEvent(null, targetStartedEvent);
+            else if (e is TargetFinishedEventArgs targetFinishedEvent)
+                this.RaiseTargetFinishedEvent(null, targetFinishedEvent);
+            else if (e is ProjectStartedEventArgs projectStartedEvent)
+                this.RaiseProjectStartedEvent(null, projectStartedEvent);
+            else if (e is ProjectFinishedEventArgs projectFinishedEvent)
+                this.RaiseProjectFinishedEvent(null, projectFinishedEvent);
+            else if (e is BuildStartedEventArgs buildStartedEvent)
+                this.RaiseBuildStartedEvent(null, buildStartedEvent);
+            else if (e is BuildFinishedEventArgs buildFinishedEvent)
+                this.RaiseBuildFinishedEvent(null, buildFinishedEvent);
+            else if (e is CustomBuildEventArgs customBuildEvent)
+                this.RaiseCustomEvent(null, customBuildEvent);
+            else if (e is BuildStatusEventArgs buildStatusEvent)
+                this.RaiseStatusEvent(null, buildStatusEvent);
+            else if (e is BuildWarningEventArgs buildWarningEvent)
+                this.RaiseWarningEvent(null, buildWarningEvent);
+            else if (e is BuildErrorEventArgs buildErrorEvent)
+                this.RaiseErrorEvent(null, buildErrorEvent);
             else
                 ErrorUtilities.VerifyThrow(false, "Unknown event args type.");
         }
diff --git a/src/Deprecated/Engine/Logging/FileLogger.cs b/src/Deprecated/Engine/Logging/FileLogger.cs
index e6c767ac775..a8bfd10fa98 100644
--- a/src/Deprecated/Engine/Logging/FileLogger.cs
+++ b/src/Deprecated/Engine/Logging/FileLogger.cs
@@ -136,15 +136,7 @@ private void Write(string text)
         /// <owner>KieranMo</owner>
         public override void Shutdown()
         {
-            try
-            {
-                // Do, or do not, there is no try.
-            }
-            finally
-            {
-                // Keep FxCop happy by closing in a Finally.
-                fileWriter?.Close();
-            }
+            fileWriter?.Close();
         }
 
         /// <summary>
diff --git a/src/Deprecated/Engine/Properties/BuildProperty.cs b/src/Deprecated/Engine/Properties/BuildProperty.cs
index 5f09f69875c..6d1d947f2e5 100644
--- a/src/Deprecated/Engine/Properties/BuildProperty.cs
+++ b/src/Deprecated/Engine/Properties/BuildProperty.cs
@@ -344,19 +344,6 @@ string propertyValue
         {
         }
 
-        /// <summary>
-        /// Default constructor.  This is not allowed because it leaves the
-        /// property in a bad state -- without a name or value.  But we have to
-        /// have it, otherwise FXCop complains.
-        /// </summary>
-        /// <owner>sumedhk</owner>
-        private BuildProperty
-            (
-            )
-        {
-            // not allowed.
-        }
-
         #endregion
 
         #region Properties
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index 54d5b149d96..a5f9c7646b3 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -3956,9 +3956,6 @@ internal sealed class TextFileException : Exception
             private int lineNumber;
             private int column;
 
-            /// <summary>
-            /// Fxcop want to have the correct basic exception constructors implemented
-            /// </summary>
             private TextFileException(SerializationInfo info, StreamingContext context)
                 : base(info, context)
             {
diff --git a/src/Utilities/ToolTask.cs b/src/Utilities/ToolTask.cs
index 0818aec23b2..6f58e9e66f0 100644
--- a/src/Utilities/ToolTask.cs
+++ b/src/Utilities/ToolTask.cs
@@ -638,12 +638,12 @@ string responseFileSwitch
             // New style environment overrides
             if (_environmentVariablePairs != null)
             {
-                foreach (KeyValuePair<object, object> variable in _environmentVariablePairs)
+                foreach (KeyValuePair<string, string> variable in _environmentVariablePairs)
                 {
 #if FEATURE_PROCESSSTARTINFO_ENVIRONMENT
-                    startInfo.Environment[(string)variable.Key] = (string)variable.Value;
+                    startInfo.Environment[variable.Key] = variable.Value;
 #else
-                    startInfo.EnvironmentVariables[(string)variable.Key] = (string)variable.Value;
+                    startInfo.EnvironmentVariables[variable.Key] = variable.Value;
 #endif
                 }
             }
@@ -1306,7 +1306,7 @@ public override bool Execute()
 
             if (EnvironmentVariables != null)
             {
-                _environmentVariablePairs = new List<KeyValuePair<object, object>>(EnvironmentVariables.Length);
+                _environmentVariablePairs = new List<KeyValuePair<string, string>>(EnvironmentVariables.Length);
 
                 foreach (string entry in EnvironmentVariables)
                 {
@@ -1318,7 +1318,7 @@ public override bool Execute()
                         return false;
                     }
 
-                    _environmentVariablePairs.Add(new KeyValuePair<object, object>((object)nameValuePair[0], (object)nameValuePair[1]));
+                    _environmentVariablePairs.Add(new KeyValuePair<string, string>(nameValuePair[0], nameValuePair[1]));
                 }
             }
 
@@ -1470,9 +1470,9 @@ public override bool Execute()
                 // New style environment overrides
                 if (_environmentVariablePairs != null)
                 {
-                    foreach (KeyValuePair<object, object> variable in _environmentVariablePairs)
+                    foreach (KeyValuePair<string, string> variable in _environmentVariablePairs)
                     {
-                        alreadyLoggedEnvironmentHeader = LogEnvironmentVariable(alreadyLoggedEnvironmentHeader, (string)variable.Key, (string)variable.Value);
+                        alreadyLoggedEnvironmentHeader = LogEnvironmentVariable(alreadyLoggedEnvironmentHeader, variable.Key, variable.Value);
                     }
                 }
 
@@ -1696,9 +1696,8 @@ private bool LogEnvironmentVariable(bool alreadyLoggedEnvironmentHeader, string
         /// <summary>
         /// List of name, value pairs to be passed to the spawned tool's environment.
         /// May be null.
-        /// Object is used instead of string to avoid NGen/JIT FXcop flagging.
         /// </summary>
-        private List<KeyValuePair<object, object>> _environmentVariablePairs;
+        private List<KeyValuePair<string, string>> _environmentVariablePairs;
 
         /// <summary>
         /// Enumeration which indicates what kind of queue is being passed
