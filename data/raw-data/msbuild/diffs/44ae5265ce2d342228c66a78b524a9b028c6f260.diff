diff --git a/src/Build.UnitTests/BinaryLogger_Tests.cs b/src/Build.UnitTests/BinaryLogger_Tests.cs
index 4928a8d29f8..1b7a48850a2 100644
--- a/src/Build.UnitTests/BinaryLogger_Tests.cs
+++ b/src/Build.UnitTests/BinaryLogger_Tests.cs
@@ -88,9 +88,10 @@ public BinaryLoggerTests(ITestOutputHelper output)
         [InlineData(s_testProject2)]
         public void TestBinaryLoggerRoundtrip(string projectText)
         {
+            var binaryLoggerParameters = new BinaryLoggerParameters($"LogFile={_logFile}");
             var binaryLogger = new BinaryLogger();
 
-            binaryLogger.Parameters = _logFile;
+            binaryLogger.BinaryLoggerParameters = binaryLoggerParameters;
 
             var mockLogFromBuild = new MockLogger();
 
@@ -143,8 +144,9 @@ public void TestBinaryLoggerRoundtrip(string projectText)
         [Fact]
         public void BinaryLoggerShouldSupportFilePathExplicitParameter()
         {
+            var binaryLoggerParameters = new BinaryLoggerParameters($"LogFile={_logFile}");
             var binaryLogger = new BinaryLogger();
-            binaryLogger.Parameters = $"LogFile={_logFile}";
+            binaryLogger.BinaryLoggerParameters = binaryLoggerParameters;
 
             ObjectModelHelpers.BuildProjectExpectSuccess(s_testProject, binaryLogger);
         }
@@ -172,11 +174,10 @@ public void UnusedEnvironmentVariablesDoNotAppearInBinaryLog()
 </Project>";
                 TransientTestFolder logFolder = env.CreateFolder(createFolder: true);
                 TransientTestFile projectFile = env.CreateFile(logFolder, "myProj.proj", contents);
-                BinaryLogger logger = new();
-                logger.Parameters = _logFile;
-                RunnerUtilities.ExecMSBuild($"{projectFile.Path} -bl:{logger.Parameters}", out bool success);
+
+                RunnerUtilities.ExecMSBuild($"{projectFile.Path} -bl:{_logFile}", out bool success);
                 success.ShouldBeTrue();
-                RunnerUtilities.ExecMSBuild($"{logger.Parameters} -flp:logfile={Path.Combine(logFolder.Path, "logFile.log")};verbosity=diagnostic", out success);
+                RunnerUtilities.ExecMSBuild($"{_logFile} -flp:logfile={Path.Combine(logFolder.Path, "logFile.log")};verbosity=diagnostic", out success);
                 success.ShouldBeTrue();
                 string text = File.ReadAllText(Path.Combine(logFolder.Path, "logFile.log"));
                 text.ShouldContain("EnvVar2");
@@ -230,10 +231,9 @@ private void AssemblyLoadsDuringTaskRun(string additionalEventText)
                     """;
                 TransientTestFolder logFolder = env.CreateFolder(createFolder: true);
                 TransientTestFile projectFile = env.CreateFile(logFolder, "myProj.proj", contents);
-                BinaryLogger logger = new();
-                logger.Parameters = _logFile;
+                
                 env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", "1");
-                RunnerUtilities.ExecMSBuild($"{projectFile.Path} -nr:False -bl:{logger.Parameters} -flp1:logfile={Path.Combine(logFolder.Path, "logFile.log")};verbosity=diagnostic -flp2:logfile={Path.Combine(logFolder.Path, "logFile2.log")};verbosity=normal", out bool success);
+                RunnerUtilities.ExecMSBuild($"{projectFile.Path} -nr:False -bl:{_logFile} -flp1:logfile={Path.Combine(logFolder.Path, "logFile.log")};verbosity=diagnostic -flp2:logfile={Path.Combine(logFolder.Path, "logFile2.log")};verbosity=normal", out bool success);
                 success.ShouldBeTrue();
 
                 string assemblyLoadedEventText =
@@ -245,7 +245,7 @@ private void AssemblyLoadsDuringTaskRun(string additionalEventText)
                 string text2 = File.ReadAllText(Path.Combine(logFolder.Path, "logFile2.log"));
                 text2.ShouldNotContain(assemblyLoadedEventText);
                 text2.ShouldNotContain(additionalEventText);
-                RunnerUtilities.ExecMSBuild($"{logger.Parameters} -flp1:logfile={Path.Combine(logFolder.Path, "logFile3.log")};verbosity=diagnostic -flp2:logfile={Path.Combine(logFolder.Path, "logFile4.log")};verbosity=normal", out success);
+                RunnerUtilities.ExecMSBuild($"{_logFile} -flp1:logfile={Path.Combine(logFolder.Path, "logFile3.log")};verbosity=diagnostic -flp2:logfile={Path.Combine(logFolder.Path, "logFile4.log")};verbosity=normal", out success);
                 success.ShouldBeTrue();
                 text = File.ReadAllText(Path.Combine(logFolder.Path, "logFile3.log"));
                 text.ShouldContain(assemblyLoadedEventText);
@@ -263,8 +263,7 @@ public void BinaryLoggerShouldEmbedFilesViaTaskOutput()
             using var buildManager = new BuildManager();
             var binaryLogger = new BinaryLogger()
             {
-                Parameters = $"LogFile={_logFile}",
-                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,
+                BinaryLoggerParameters = new BinaryLoggerParameters($"ProjectImports=ZipFile;LogFile={_logFile}"),
             };
             var testProject = @"
 <Project>
@@ -307,8 +306,7 @@ public void BinaryLoggerShouldEmbedSymlinkFilesViaTaskOutput()
             using var buildManager = new BuildManager();
             var binaryLogger = new BinaryLogger()
             {
-                Parameters = $"LogFile={_logFile}",
-                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,
+                BinaryLoggerParameters = new BinaryLoggerParameters($"ProjectImports=ZipFile;LogFile={_logFile}"),
             };
             var testProjectFmt = @"
 <Project>
@@ -355,9 +353,10 @@ public void BinaryLoggerShouldEmbedSymlinkFilesViaTaskOutput()
         [Fact]
         public void BinaryLoggerShouldNotThrowWhenMetadataCannotBeExpanded()
         {
+            var binaryLoggerParameters = new BinaryLoggerParameters($"LogFile={_logFile}");
             var binaryLogger = new BinaryLogger
             {
-                Parameters = $"LogFile={_logFile}"
+                BinaryLoggerParameters = binaryLoggerParameters,
             };
 
             const string project = @"
@@ -394,7 +393,7 @@ public void MessagesCanBeLoggedWhenProjectsAreCached()
 
             var binaryLogger = new BinaryLogger
             {
-                Parameters = $"LogFile={_logFile}"
+                BinaryLoggerParameters = new BinaryLoggerParameters($"LogFile={_logFile}")
             };
 
             // To trigger #6323, there must be at least two project instances.
@@ -438,22 +437,21 @@ public void SuppressCommandOutputForNonDiagVerbosity()
                             <Exec Command='echo a'/>
                         </Target>
                     </Project>";
-                BinaryLogger logger = new();
-                logger.Parameters = _logFile;
+
                 TransientTestFolder testFolder = env.CreateFolder(createFolder: true);
 
                 TransientTestFile projectFile1 = env.CreateFile(testFolder, "testProject01.proj", contents);
-                string consoleOutput1 = RunnerUtilities.ExecMSBuild($"{projectFile1.Path} -bl:{logger.Parameters} -verbosity:diag -nologo", out bool success1);
+                string consoleOutput1 = RunnerUtilities.ExecMSBuild($"{projectFile1.Path} -bl:{_logFile} -verbosity:diag -nologo", out bool success1);
                 success1.ShouldBeTrue();
-                var expected1 = $"-nologo -bl:{logger.Parameters} -verbosity:diag {projectFile1.Path}";
+                var expected1 = $"-nologo -bl:{_logFile} -verbosity:diag {projectFile1.Path}";
                 consoleOutput1.ShouldContain(expected1);
 
                 foreach (var verbosity in new string[] { "q", "m", "n", "d" })
                 {
                     TransientTestFile projectFile2 = env.CreateFile(testFolder, $"testProject_{verbosity}.proj", contents);
-                    string consoleOutput2 = RunnerUtilities.ExecMSBuild($"{projectFile2.Path} -bl:{logger.Parameters} -verbosity:{verbosity} -nologo", out bool success2);
+                    string consoleOutput2 = RunnerUtilities.ExecMSBuild($"{projectFile2.Path} -bl:{_logFile} -verbosity:{verbosity} -nologo", out bool success2);
                     success2.ShouldBeTrue();
-                    var expected2 = $"-nologo -bl:{logger.Parameters} -verbosity:{verbosity} {projectFile2.Path}";
+                    var expected2 = $"-nologo -bl:{_logFile} -verbosity:{verbosity} {projectFile2.Path}";
                     consoleOutput2.ShouldNotContain(expected2);
                 }
             }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
index 03df6e003e1..34d6b0e21a7 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLoggerParameters.cs
@@ -15,10 +15,16 @@ public class BinaryLoggerParameters
 
         public string binaryLoggerParameters { get; private set; }
 
-        public BinaryLoggerParameters(string[] binaryLoggerArguments, string[] binaryLoggerParameters)
+        public BinaryLoggerParameters(string binaryLoggerArguments, string binaryLoggerParameters)
         {
-            this.binaryLoggerArguments = GetLastArgumentPart(binaryLoggerArguments);
-            this.binaryLoggerParameters = GetLastArgumentPart(binaryLoggerParameters);
+            this.binaryLoggerArguments = binaryLoggerArguments;
+            this.binaryLoggerParameters = binaryLoggerParameters;
+        }
+
+        public BinaryLoggerParameters(string binaryLoggerArguments)
+        {
+            this.binaryLoggerArguments = binaryLoggerArguments;
+            binaryLoggerParameters = string.Empty;
         }
 
         public bool IsBinaryLoggerSet { get; set; }
@@ -26,23 +32,6 @@ public BinaryLoggerParameters(string[] binaryLoggerArguments, string[] binaryLog
         public string InitProjectFile { get; set; } = string.Empty;
 
 
-        /// <summary>
-        /// Gets the last argument from the provided array.
-        /// If the array is empty returns empty string
-        /// </summary>
-        /// <param name="arguments"></param>
-        /// <returns></returns>
-        private string GetLastArgumentPart(string[] arguments)
-        {
-            string result = string.Empty;
-            if (arguments != null && arguments.Length > 0)
-            {
-                result = arguments[arguments.Length - 1];
-            }
-            return result;
-        }
-
-
         /// <summary>
         /// Generates the stringified representation of current instance
         /// </summary>
@@ -68,14 +57,14 @@ public string GetStringifiedParameters()
         /// </summary>
         /// <param name="parameters"></param>
         /// <returns></returns>
-        public BinaryLoggerParameters GenerateInstanceFromParameters(string parameters)
+        public BinaryLoggerParameters? GenerateInstanceFromParameters(string parameters)
         {
             if (string.IsNullOrEmpty(parameters))
             {
                 return null;
             }
             // TODO: parsing logic
-            return new BinaryLoggerParameters(Array.Empty<string>(), Array.Empty<string>());
+            return new BinaryLoggerParameters(string.Empty, string.Empty);
         }
     }
 }
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 68f68d46752..670ae08f510 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -2630,9 +2630,19 @@ private static bool ProcessCommandLineSwitches(
                     // figure out which loggers are going to listen to build events
                     string[][] groupedFileLoggerParameters = commandLineSwitches.GetFileLoggerParameters();
 
-                    var binaryLoggerParameters = new BinaryLoggerParameters(
-                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLogger],
-                        commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLoggerParameters])
+                    var blArguments = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLogger].LastOrDefault();
+                    if(blArguments == null)
+                    {
+                        blArguments = string.Empty;
+                    }
+
+                    var blpArguments = commandLineSwitches[CommandLineSwitches.ParameterizedSwitch.BinaryLoggerParameters].LastOrDefault();
+                    if (blpArguments == null)
+                    {
+                        blpArguments = string.Empty;
+                    }
+
+                    var binaryLoggerParameters = new BinaryLoggerParameters(blArguments, blpArguments)
                     {
                         IsBinaryLoggerSet = commandLineSwitches.IsParameterizedSwitchSet(CommandLineSwitches.ParameterizedSwitch.BinaryLogger),
                         InitProjectFile = projectFile
