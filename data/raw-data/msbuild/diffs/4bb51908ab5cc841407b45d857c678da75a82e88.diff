diff --git a/src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs b/src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs
index b1926dde918..cd98bdbbf22 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerResultSeverity.cs
@@ -9,27 +9,27 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 public enum BuildAnalyzerResultSeverity
 {
     /// <summary>
-    /// Information level message.
+    /// When set, the default value of the BuildCheck rule will be used.
     /// </summary>
-    Info,
+    Default,
 
     /// <summary>
-    /// Results a warning in build if the BuildCheck rule applied.
+    /// When set to None the rule will not run.
     /// </summary>
-    Warning,
+    None,
 
     /// <summary>
-    /// Results an error in build if the BuildCheck rule applied.
+    /// Information level message.
     /// </summary>
-    Error,
+    Suggestion,
 
     /// <summary>
-    /// When set to None the rule will not run.
+    /// Results a warning in build if the BuildCheck rule applied.
     /// </summary>
-    None,
+    Warning,
 
     /// <summary>
-    /// When set, the default value of the BuildCheck rule will be used.
+    /// Results an error in build if the BuildCheck rule applied.
     /// </summary>
-    Default,
+    Error
 }
diff --git a/src/Build/BuildCheck/API/BuildCheckResult.cs b/src/Build/BuildCheck/API/BuildCheckResult.cs
index f6b54e1ed99..0f70c5228b7 100644
--- a/src/Build/BuildCheck/API/BuildCheckResult.cs
+++ b/src/Build/BuildCheck/API/BuildCheckResult.cs
@@ -31,7 +31,7 @@ public BuildCheckResult(BuildAnalyzerRule buildAnalyzerRule, ElementLocation loc
     internal BuildEventArgs ToEventArgs(BuildAnalyzerResultSeverity severity)
         => severity switch
         {
-            BuildAnalyzerResultSeverity.Info => new BuildCheckResultMessage(this),
+            BuildAnalyzerResultSeverity.Suggestion => new BuildCheckResultMessage(this),
             BuildAnalyzerResultSeverity.Warning => new BuildCheckResultWarning(this),
             BuildAnalyzerResultSeverity.Error => new BuildCheckResultError(this),
             _ => throw new ArgumentOutOfRangeException(nameof(severity), severity, null),
diff --git a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs
index d00bc37abad..0114a9b07dd 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildAnalyzerConfigurationInternal.cs
@@ -1,6 +1,7 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
+using System;
 using Microsoft.Build.Experimental.BuildCheck;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
@@ -10,12 +11,16 @@ namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 /// </summary>
 internal sealed class BuildAnalyzerConfigurationInternal
 {
-    public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity, bool isEnabled)
+    public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope evaluationAnalysisScope, BuildAnalyzerResultSeverity severity)
     {
+        if (severity == BuildAnalyzerResultSeverity.Default)
+        {
+            throw new ArgumentOutOfRangeException(nameof(severity), severity, "Severity 'Default' is not recognized by the BuilcCheck reports infrastructure");
+        }
+
         RuleId = ruleId;
         EvaluationAnalysisScope = evaluationAnalysisScope;
         Severity = severity;
-        IsEnabled = isEnabled;
     }
 
     public string RuleId { get; }
@@ -24,7 +29,7 @@ public BuildAnalyzerConfigurationInternal(string ruleId, EvaluationAnalysisScope
 
     public BuildAnalyzerResultSeverity Severity { get; }
 
-    public bool IsEnabled { get; }
+    public bool IsEnabled => Severity >= BuildAnalyzerResultSeverity.Suggestion;
 
     // Intentionally not checking the RuleId
     //  as for analyzers with multiple rules, we can squash config to a single one,
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index 3f019a93d6c..1a06fc08ee1 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -262,7 +262,6 @@ internal BuildAnalyzerConfigurationInternal MergeConfiguration(
         => new BuildAnalyzerConfigurationInternal(
             ruleId: ruleId,
             evaluationAnalysisScope: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.EvaluationAnalysisScope),
-            isEnabled: GetConfigValue(editorConfig, defaultConfig, cfg => cfg.IsEnabled),
             severity: GetSeverityValue(editorConfig, defaultConfig));
 
     private BuildAnalyzerConfigurationInternal GetMergedConfiguration(
@@ -283,6 +282,8 @@ private BuildAnalyzerResultSeverity GetSeverityValue(BuildAnalyzerConfiguration
     {
         BuildAnalyzerResultSeverity? resultSeverity = null;
 
+        // Consider Default as null, so the severity from the default value could be selected.
+        // Default severity is not recognized by the infrastructure and serves for configuration purpuses only. 
         if (editorConfigValue.Severity != null && editorConfigValue.Severity != BuildAnalyzerResultSeverity.Default)
         {
             resultSeverity = editorConfigValue.Severity;
diff --git a/src/BuildCheck.UnitTests/BuildAnalyzerConfigurationInternalTests.cs b/src/BuildCheck.UnitTests/BuildAnalyzerConfigurationInternalTests.cs
index 7bd57f8014b..2c559ffbe29 100644
--- a/src/BuildCheck.UnitTests/BuildAnalyzerConfigurationInternalTests.cs
+++ b/src/BuildCheck.UnitTests/BuildAnalyzerConfigurationInternalTests.cs
@@ -5,34 +5,59 @@
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Experimental.BuildCheck;
 using Shouldly;
+using System;
 
 namespace Microsoft.Build.BuildCheck.UnitTests;
 
 public class BuildAnalyzerConfigurationInternalTests
 {
     [Theory]
-    [InlineData("ruleId", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Warning, true, true)]
-    [InlineData("ruleId2", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Warning, true, true)]
-    [InlineData("ruleId", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Error, true, false)]
+    [InlineData("ruleId", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Warning,  true)]
+    [InlineData("ruleId2", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Warning,  true)]
+    [InlineData("ruleId", EvaluationAnalysisScope.ProjectOnly, BuildAnalyzerResultSeverity.Error, false)]
     public void IsSameConfigurationAsTest(
         string secondRuleId,
         EvaluationAnalysisScope secondScope,
         BuildAnalyzerResultSeverity secondSeverity,
-        bool secondEnabled,
         bool isExpectedToBeSame)
     {
         BuildAnalyzerConfigurationInternal configuration1 = new BuildAnalyzerConfigurationInternal(
                        ruleId: "ruleId",
                        evaluationAnalysisScope: EvaluationAnalysisScope.ProjectOnly,
-                       severity: BuildAnalyzerResultSeverity.Warning,
-                       isEnabled: true);
+                       severity: BuildAnalyzerResultSeverity.Warning);
 
         BuildAnalyzerConfigurationInternal configuration2 = new BuildAnalyzerConfigurationInternal(
             ruleId: secondRuleId,
             evaluationAnalysisScope: secondScope,
-            severity: secondSeverity,
-            isEnabled: secondEnabled);
+            severity: secondSeverity);
 
         configuration1.IsSameConfigurationAs(configuration2).ShouldBe(isExpectedToBeSame);
     }
+
+    [Theory]
+    [InlineData( BuildAnalyzerResultSeverity.Warning, true)]
+    [InlineData(BuildAnalyzerResultSeverity.Suggestion, true)]
+    [InlineData(BuildAnalyzerResultSeverity.Error, true)]
+    [InlineData(BuildAnalyzerResultSeverity.None, false)]
+    public void BuildAnalyzerConfigurationInternal_Constructor_SeverityConfig(BuildAnalyzerResultSeverity severity, bool isEnabledExpected)
+    {
+        BuildAnalyzerConfigurationInternal configuration = new BuildAnalyzerConfigurationInternal(
+                       ruleId: "ruleId",
+                       evaluationAnalysisScope: EvaluationAnalysisScope.ProjectOnly,
+                       severity: severity);
+
+        configuration.IsEnabled.ShouldBe(isEnabledExpected);
+    }
+
+    [Fact]
+    public void BuildAnalyzerConfigurationInternal_Constructor_SeverityConfig_Fails()
+    {
+        Should.Throw<ArgumentOutOfRangeException>(() =>
+        {
+            new BuildAnalyzerConfigurationInternal(
+                        ruleId: "ruleId",
+                        evaluationAnalysisScope: EvaluationAnalysisScope.ProjectOnly,
+                        severity: BuildAnalyzerResultSeverity.Default);
+        });
+    }
 }
diff --git a/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs b/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs
index 2ea4738c8ff..f1aff479f9e 100644
--- a/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs
+++ b/src/BuildCheck.UnitTests/BuildAnalyzerConfiguration_Test.cs
@@ -34,8 +34,8 @@ public void CreateWithEmpty_ReturnsObjectWithNullValues()
     [Theory]
     [InlineData("error", BuildAnalyzerResultSeverity.Error)]
     [InlineData("ERROR", BuildAnalyzerResultSeverity.Error)]
-    [InlineData("info", BuildAnalyzerResultSeverity.Info)]
-    [InlineData("INFO", BuildAnalyzerResultSeverity.Info)]
+    [InlineData("suggestion", BuildAnalyzerResultSeverity.Suggestion)]
+    [InlineData("SUGGESTION", BuildAnalyzerResultSeverity.Suggestion)]
     [InlineData("warning", BuildAnalyzerResultSeverity.Warning)]
     [InlineData("WARNING", BuildAnalyzerResultSeverity.Warning)]
     [InlineData("NONE", BuildAnalyzerResultSeverity.None)]
@@ -59,7 +59,7 @@ public void CreateBuildAnalyzerConfiguration_Severity(string parameter, BuildAna
     [Theory]
     [InlineData("error", true)]
     [InlineData("warning", true)]
-    [InlineData("info", true)]
+    [InlineData("suggestion", true)]
     [InlineData("none", false)]
     [InlineData("default", null)]
     public void CreateBuildAnalyzerConfiguration_SeverityAndEnabledOrder(string parameter, bool? expected)
diff --git a/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs b/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs
index d0f2dfc9ca4..d4fdb9d49df 100644
--- a/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs
+++ b/src/BuildCheck.UnitTests/ConfigurationProvider_Tests.cs
@@ -217,7 +217,7 @@ public void GetRuleIdConfiguration_CustomConfigurationValidity_Valid()
     [InlineData(BuildAnalyzerResultSeverity.Warning, BuildAnalyzerResultSeverity.Warning, true)]
     [InlineData(BuildAnalyzerResultSeverity.Error, BuildAnalyzerResultSeverity.Error, true)]
     [InlineData(BuildAnalyzerResultSeverity.Default, BuildAnalyzerResultSeverity.Warning, true)]
-    [InlineData(BuildAnalyzerResultSeverity.Info, BuildAnalyzerResultSeverity.Info, true)]
+    [InlineData(BuildAnalyzerResultSeverity.Suggestion, BuildAnalyzerResultSeverity.Suggestion, true)]
     [InlineData(BuildAnalyzerResultSeverity.None, BuildAnalyzerResultSeverity.None, false)]
     [InlineData(null, BuildAnalyzerResultSeverity.Warning, true)]
     public void GetConfigurationProvider_MergesSeverity_Correctly(BuildAnalyzerResultSeverity? buildAnalyzerResultSeverity, BuildAnalyzerResultSeverity expectedSeverity, bool expectedEnablment)
