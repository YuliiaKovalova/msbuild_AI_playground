diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index 4c6cce06d49..7a67734775b 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -12,6 +12,7 @@ public partial struct BuildEngineResult
     }
     public partial class BuildErrorEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
+        protected BuildErrorEventArgs() { }
         public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) { }
         public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) { }
         public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
@@ -77,6 +78,7 @@ public BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded
     public delegate void BuildFinishedEventHandler(object sender, Microsoft.Build.Framework.BuildFinishedEventArgs e);
     public partial class BuildMessageEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
+        protected BuildMessageEventArgs() { }
         public BuildMessageEventArgs(string message, string helpKeyword, string senderName, Microsoft.Build.Framework.MessageImportance importance) { }
         public BuildMessageEventArgs(string message, string helpKeyword, string senderName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp) { }
         public BuildMessageEventArgs(string message, string helpKeyword, string senderName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp, params object[] messageArgs) { }
@@ -114,6 +116,7 @@ protected BuildStatusEventArgs(string message, string helpKeyword, string sender
     public delegate void BuildStatusEventHandler(object sender, Microsoft.Build.Framework.BuildStatusEventArgs e);
     public partial class BuildWarningEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
+        protected BuildWarningEventArgs() { }
         public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) { }
         public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) { }
         public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
@@ -131,10 +134,10 @@ public BuildWarningEventArgs(string subcategory, string code, string file, int l
     public delegate void BuildWarningEventHandler(object sender, Microsoft.Build.Framework.BuildWarningEventArgs e);
     public partial class CriticalBuildMessageEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        protected CriticalBuildMessageEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        protected CriticalBuildMessageEventArgs() { }
+        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) { }
+        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) { }
+        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
     }
     public abstract partial class CustomBuildEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
@@ -146,12 +149,13 @@ protected CustomBuildEventArgs(string message, string helpKeyword, string sender
     public delegate void CustomBuildEventHandler(object sender, Microsoft.Build.Framework.CustomBuildEventArgs e);
     public partial class EnvironmentVariableReadEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public EnvironmentVariableReadEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public EnvironmentVariableReadEventArgs(string environmentVariableName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public EnvironmentVariableReadEventArgs() { }
+        public EnvironmentVariableReadEventArgs(string environmentVariableName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
         public string EnvironmentVariableName { get { throw null; } set { } }
     }
     public partial class ExternalProjectFinishedEventArgs : Microsoft.Build.Framework.CustomBuildEventArgs
     {
+        protected ExternalProjectFinishedEventArgs() { }
         public ExternalProjectFinishedEventArgs(string message, string helpKeyword, string senderName, string projectFile, bool succeeded) { }
         public ExternalProjectFinishedEventArgs(string message, string helpKeyword, string senderName, string projectFile, bool succeeded, System.DateTime eventTimestamp) { }
         public string ProjectFile { get { throw null; } }
@@ -159,6 +163,7 @@ public ExternalProjectFinishedEventArgs(string message, string helpKeyword, stri
     }
     public partial class ExternalProjectStartedEventArgs : Microsoft.Build.Framework.CustomBuildEventArgs
     {
+        protected ExternalProjectStartedEventArgs() { }
         public ExternalProjectStartedEventArgs(string message, string helpKeyword, string senderName, string projectFile, string targetNames) { }
         public ExternalProjectStartedEventArgs(string message, string helpKeyword, string senderName, string projectFile, string targetNames, System.DateTime eventTimestamp) { }
         public string ProjectFile { get { throw null; } }
@@ -359,7 +364,7 @@ public enum MessageImportance
     public partial class MetaprojectGeneratedEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
         public string metaprojectXml;
-        public MetaprojectGeneratedEventArgs(string metaprojectXml, string metaprojectPath, string message) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public MetaprojectGeneratedEventArgs(string metaprojectXml, string metaprojectPath, string message) { }
     }
     [System.AttributeUsageAttribute((System.AttributeTargets)(128), AllowMultiple=false, Inherited=false)]
     public sealed partial class OutputAttribute : System.Attribute
@@ -390,8 +395,8 @@ public ProjectFinishedEventArgs(string message, string helpKeyword, string proje
     public delegate void ProjectFinishedEventHandler(object sender, Microsoft.Build.Framework.ProjectFinishedEventArgs e);
     public partial class ProjectImportedEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public ProjectImportedEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public ProjectImportedEventArgs(int lineNumber, int columnNumber, string message, params object[] messageArgs) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public ProjectImportedEventArgs() { }
+        public ProjectImportedEventArgs(int lineNumber, int columnNumber, string message, params object[] messageArgs) { }
         public string ImportedProjectFile { get { throw null; } set { } }
         public bool ImportIgnored { get { throw null; } set { } }
         public string UnexpandedProject { get { throw null; } set { } }
@@ -417,16 +422,16 @@ public ProjectStartedEventArgs(string message, string helpKeyword, string projec
     public delegate void ProjectStartedEventHandler(object sender, Microsoft.Build.Framework.ProjectStartedEventArgs e);
     public partial class PropertyInitialValueSetEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public PropertyInitialValueSetEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public PropertyInitialValueSetEventArgs(string propertyName, string propertyValue, string propertySource, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public PropertyInitialValueSetEventArgs() { }
+        public PropertyInitialValueSetEventArgs(string propertyName, string propertyValue, string propertySource, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
         public string PropertyName { get { throw null; } set { } }
         public string PropertySource { get { throw null; } set { } }
         public string PropertyValue { get { throw null; } set { } }
     }
     public partial class PropertyReassignmentEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public PropertyReassignmentEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public PropertyReassignmentEventArgs(string propertyName, string previousValue, string newValue, string location, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public PropertyReassignmentEventArgs() { }
+        public PropertyReassignmentEventArgs(string propertyName, string previousValue, string newValue, string location, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
         public string Location { get { throw null; } set { } }
         public string NewValue { get { throw null; } set { } }
         public string PreviousValue { get { throw null; } set { } }
@@ -543,8 +548,8 @@ public TargetFinishedEventArgs(string message, string helpKeyword, string target
     public delegate void TargetFinishedEventHandler(object sender, Microsoft.Build.Framework.TargetFinishedEventArgs e);
     public partial class TargetSkippedEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public TargetSkippedEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public TargetSkippedEventArgs(string message, params object[] messageArgs) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public TargetSkippedEventArgs() { }
+        public TargetSkippedEventArgs(string message, params object[] messageArgs) { }
         public Microsoft.Build.Framework.TargetBuiltReason BuildReason { get { throw null; } set { } }
         public string ParentTarget { get { throw null; } set { } }
         public string TargetFile { get { throw null; } set { } }
@@ -565,9 +570,9 @@ public TargetStartedEventArgs(string message, string helpKeyword, string targetN
     public delegate void TargetStartedEventHandler(object sender, Microsoft.Build.Framework.TargetStartedEventArgs e);
     public partial class TaskCommandLineEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        protected TaskCommandLineEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        protected TaskCommandLineEventArgs() { }
+        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance) { }
+        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp) { }
         public string CommandLine { get { throw null; } }
         public string TaskName { get { throw null; } }
     }
@@ -611,8 +616,8 @@ public TelemetryEventArgs() { }
     public delegate void TelemetryEventHandler(object sender, Microsoft.Build.Framework.TelemetryEventArgs e);
     public partial class UninitializedPropertyReadEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public UninitializedPropertyReadEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public UninitializedPropertyReadEventArgs(string propertyName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public UninitializedPropertyReadEventArgs() { }
+        public UninitializedPropertyReadEventArgs(string propertyName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
         public string PropertyName { get { throw null; } set { } }
     }
 }
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index b507dfdb10a..9e3004af4bb 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -12,6 +12,7 @@ public partial struct BuildEngineResult
     }
     public partial class BuildErrorEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
+        protected BuildErrorEventArgs() { }
         public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) { }
         public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) { }
         public BuildErrorEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
@@ -77,6 +78,7 @@ public BuildFinishedEventArgs(string message, string helpKeyword, bool succeeded
     public delegate void BuildFinishedEventHandler(object sender, Microsoft.Build.Framework.BuildFinishedEventArgs e);
     public partial class BuildMessageEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
+        protected BuildMessageEventArgs() { }
         public BuildMessageEventArgs(string message, string helpKeyword, string senderName, Microsoft.Build.Framework.MessageImportance importance) { }
         public BuildMessageEventArgs(string message, string helpKeyword, string senderName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp) { }
         public BuildMessageEventArgs(string message, string helpKeyword, string senderName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp, params object[] messageArgs) { }
@@ -114,6 +116,7 @@ protected BuildStatusEventArgs(string message, string helpKeyword, string sender
     public delegate void BuildStatusEventHandler(object sender, Microsoft.Build.Framework.BuildStatusEventArgs e);
     public partial class BuildWarningEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
+        protected BuildWarningEventArgs() { }
         public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) { }
         public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) { }
         public BuildWarningEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
@@ -131,10 +134,10 @@ public BuildWarningEventArgs(string subcategory, string code, string file, int l
     public delegate void BuildWarningEventHandler(object sender, Microsoft.Build.Framework.BuildWarningEventArgs e);
     public partial class CriticalBuildMessageEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        protected CriticalBuildMessageEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        protected CriticalBuildMessageEventArgs() { }
+        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName) { }
+        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp) { }
+        public CriticalBuildMessageEventArgs(string subcategory, string code, string file, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string helpKeyword, string senderName, System.DateTime eventTimestamp, params object[] messageArgs) { }
     }
     public abstract partial class CustomBuildEventArgs : Microsoft.Build.Framework.LazyFormattedBuildEventArgs
     {
@@ -146,12 +149,13 @@ protected CustomBuildEventArgs(string message, string helpKeyword, string sender
     public delegate void CustomBuildEventHandler(object sender, Microsoft.Build.Framework.CustomBuildEventArgs e);
     public partial class EnvironmentVariableReadEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public EnvironmentVariableReadEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public EnvironmentVariableReadEventArgs(string environmentVariableName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public EnvironmentVariableReadEventArgs() { }
+        public EnvironmentVariableReadEventArgs(string environmentVariableName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
         public string EnvironmentVariableName { get { throw null; } set { } }
     }
     public partial class ExternalProjectFinishedEventArgs : Microsoft.Build.Framework.CustomBuildEventArgs
     {
+        protected ExternalProjectFinishedEventArgs() { }
         public ExternalProjectFinishedEventArgs(string message, string helpKeyword, string senderName, string projectFile, bool succeeded) { }
         public ExternalProjectFinishedEventArgs(string message, string helpKeyword, string senderName, string projectFile, bool succeeded, System.DateTime eventTimestamp) { }
         public string ProjectFile { get { throw null; } }
@@ -159,6 +163,7 @@ public ExternalProjectFinishedEventArgs(string message, string helpKeyword, stri
     }
     public partial class ExternalProjectStartedEventArgs : Microsoft.Build.Framework.CustomBuildEventArgs
     {
+        protected ExternalProjectStartedEventArgs() { }
         public ExternalProjectStartedEventArgs(string message, string helpKeyword, string senderName, string projectFile, string targetNames) { }
         public ExternalProjectStartedEventArgs(string message, string helpKeyword, string senderName, string projectFile, string targetNames, System.DateTime eventTimestamp) { }
         public string ProjectFile { get { throw null; } }
@@ -358,7 +363,7 @@ public enum MessageImportance
     public partial class MetaprojectGeneratedEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
         public string metaprojectXml;
-        public MetaprojectGeneratedEventArgs(string metaprojectXml, string metaprojectPath, string message) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public MetaprojectGeneratedEventArgs(string metaprojectXml, string metaprojectPath, string message) { }
     }
     [System.AttributeUsageAttribute((System.AttributeTargets)(128), AllowMultiple=false, Inherited=false)]
     public sealed partial class OutputAttribute : System.Attribute
@@ -389,8 +394,8 @@ public ProjectFinishedEventArgs(string message, string helpKeyword, string proje
     public delegate void ProjectFinishedEventHandler(object sender, Microsoft.Build.Framework.ProjectFinishedEventArgs e);
     public partial class ProjectImportedEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public ProjectImportedEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public ProjectImportedEventArgs(int lineNumber, int columnNumber, string message, params object[] messageArgs) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public ProjectImportedEventArgs() { }
+        public ProjectImportedEventArgs(int lineNumber, int columnNumber, string message, params object[] messageArgs) { }
         public string ImportedProjectFile { get { throw null; } set { } }
         public bool ImportIgnored { get { throw null; } set { } }
         public string UnexpandedProject { get { throw null; } set { } }
@@ -416,16 +421,16 @@ public ProjectStartedEventArgs(string message, string helpKeyword, string projec
     public delegate void ProjectStartedEventHandler(object sender, Microsoft.Build.Framework.ProjectStartedEventArgs e);
     public partial class PropertyInitialValueSetEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public PropertyInitialValueSetEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public PropertyInitialValueSetEventArgs(string propertyName, string propertyValue, string propertySource, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public PropertyInitialValueSetEventArgs() { }
+        public PropertyInitialValueSetEventArgs(string propertyName, string propertyValue, string propertySource, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
         public string PropertyName { get { throw null; } set { } }
         public string PropertySource { get { throw null; } set { } }
         public string PropertyValue { get { throw null; } set { } }
     }
     public partial class PropertyReassignmentEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public PropertyReassignmentEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public PropertyReassignmentEventArgs(string propertyName, string previousValue, string newValue, string location, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public PropertyReassignmentEventArgs() { }
+        public PropertyReassignmentEventArgs(string propertyName, string previousValue, string newValue, string location, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
         public string Location { get { throw null; } set { } }
         public string NewValue { get { throw null; } set { } }
         public string PreviousValue { get { throw null; } set { } }
@@ -542,8 +547,8 @@ public TargetFinishedEventArgs(string message, string helpKeyword, string target
     public delegate void TargetFinishedEventHandler(object sender, Microsoft.Build.Framework.TargetFinishedEventArgs e);
     public partial class TargetSkippedEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public TargetSkippedEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public TargetSkippedEventArgs(string message, params object[] messageArgs) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public TargetSkippedEventArgs() { }
+        public TargetSkippedEventArgs(string message, params object[] messageArgs) { }
         public Microsoft.Build.Framework.TargetBuiltReason BuildReason { get { throw null; } set { } }
         public string ParentTarget { get { throw null; } set { } }
         public string TargetFile { get { throw null; } set { } }
@@ -564,9 +569,9 @@ public TargetStartedEventArgs(string message, string helpKeyword, string targetN
     public delegate void TargetStartedEventHandler(object sender, Microsoft.Build.Framework.TargetStartedEventArgs e);
     public partial class TaskCommandLineEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        protected TaskCommandLineEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        protected TaskCommandLineEventArgs() { }
+        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance) { }
+        public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.Build.Framework.MessageImportance importance, System.DateTime eventTimestamp) { }
         public string CommandLine { get { throw null; } }
         public string TaskName { get { throw null; } }
     }
@@ -610,8 +615,8 @@ public TelemetryEventArgs() { }
     public delegate void TelemetryEventHandler(object sender, Microsoft.Build.Framework.TelemetryEventArgs e);
     public partial class UninitializedPropertyReadEventArgs : Microsoft.Build.Framework.BuildMessageEventArgs
     {
-        public UninitializedPropertyReadEventArgs() : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
-        public UninitializedPropertyReadEventArgs(string propertyName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) : base (default(string), default(string), default(string), default(Microsoft.Build.Framework.MessageImportance)) { }
+        public UninitializedPropertyReadEventArgs() { }
+        public UninitializedPropertyReadEventArgs(string propertyName, string message, string helpKeyword=null, string senderName=null, Microsoft.Build.Framework.MessageImportance importance=(Microsoft.Build.Framework.MessageImportance)(2)) { }
         public string PropertyName { get { throw null; } set { } }
     }
 }
diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index 5bf95c1ac10..4acd75a5f5f 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -2544,18 +2544,6 @@ public partial interface IVbcHostObjectFreeThreaded
         bool Compile();
     }
 }
-namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract
-{
-    public sealed partial class ReadOnlyTaskItem
-    {
-        public ReadOnlyTaskItem(string itemSpec) { }
-        public ReadOnlyTaskItem(string itemSpec, System.Collections.IDictionary metadata) { }
-        public string ItemSpec { get { throw null; } set { } }
-        public System.Collections.Generic.Dictionary<string, string> MetadataNameToValue { get { throw null; } set { } }
-        public static explicit operator string (Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem taskItemToCast) { throw null; }
-        public override string ToString() { throw null; }
-    }
-}
 namespace Microsoft.Build.Tasks.Xaml
 {
     public partial class CommandLineArgumentRelation : Microsoft.Build.Tasks.Xaml.PropertyRelation
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index bc5b80b1ae3..af96c3bbc19 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -2166,18 +2166,6 @@ public partial interface IVbcHostObjectFreeThreaded
         bool Compile();
     }
 }
-namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract
-{
-    public sealed partial class ReadOnlyTaskItem
-    {
-        public ReadOnlyTaskItem(string itemSpec) { }
-        public ReadOnlyTaskItem(string itemSpec, System.Collections.IDictionary metadata) { }
-        public string ItemSpec { get { throw null; } set { } }
-        public System.Collections.Generic.Dictionary<string, string> MetadataNameToValue { get { throw null; } set { } }
-        public static explicit operator string (Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract.ReadOnlyTaskItem taskItemToCast) { throw null; }
-        public override string ToString() { throw null; }
-    }
-}
 namespace System.Deployment.Internal.CodeSigning
 {
     public sealed partial class RSAPKCS1SHA256SignatureDescription : System.Security.Cryptography.SignatureDescription
diff --git a/src/Framework/BuildErrorEventArgs.cs b/src/Framework/BuildErrorEventArgs.cs
index cdea0353c50..5d086d1850e 100644
--- a/src/Framework/BuildErrorEventArgs.cs
+++ b/src/Framework/BuildErrorEventArgs.cs
@@ -212,7 +212,7 @@ params object[] messageArgs
         /// <summary>
         /// Default constructor
         /// </summary>
-        internal BuildErrorEventArgs()
+        protected BuildErrorEventArgs()
             : base()
         {
             // do nothing
diff --git a/src/Framework/BuildMessageEventArgs.cs b/src/Framework/BuildMessageEventArgs.cs
index 0a58ffaec25..c31672b68a5 100644
--- a/src/Framework/BuildMessageEventArgs.cs
+++ b/src/Framework/BuildMessageEventArgs.cs
@@ -47,7 +47,7 @@ public class BuildMessageEventArgs : LazyFormattedBuildEventArgs
         /// <summary>
         /// Default constructor
         /// </summary>
-        internal BuildMessageEventArgs()
+        protected BuildMessageEventArgs()
             : base()
         {
             // do nothing
diff --git a/src/Framework/BuildWarningEventArgs.cs b/src/Framework/BuildWarningEventArgs.cs
index 4ae72cfd965..0bf9641b45d 100644
--- a/src/Framework/BuildWarningEventArgs.cs
+++ b/src/Framework/BuildWarningEventArgs.cs
@@ -25,7 +25,7 @@ public class BuildWarningEventArgs : LazyFormattedBuildEventArgs
         /// <summary>
         /// Default constructor
         /// </summary>
-        internal BuildWarningEventArgs()
+        protected BuildWarningEventArgs()
             : base()
         {
             // do nothing
@@ -213,9 +213,7 @@ internal override void CreateFromStream(BinaryReader reader, int version)
         {
             base.CreateFromStream(reader, version);
 
-            int b = reader.ReadByte();
-
-            subcategory = b == 0 ? null : reader.ReadString();
+            subcategory = reader.ReadByte() == 0 ? null : reader.ReadString();
             code = reader.ReadByte() == 0 ? null : reader.ReadString();
             file = reader.ReadByte() == 0 ? null : reader.ReadString();
 
diff --git a/src/Framework/ExternalProjectFinishedEventArgs.cs b/src/Framework/ExternalProjectFinishedEventArgs.cs
index 5a342d1bd7d..4fae3f9eb48 100644
--- a/src/Framework/ExternalProjectFinishedEventArgs.cs
+++ b/src/Framework/ExternalProjectFinishedEventArgs.cs
@@ -23,7 +23,7 @@ public class ExternalProjectFinishedEventArgs : CustomBuildEventArgs
         /// <summary>
         /// Default constructor
         /// </summary>
-        internal ExternalProjectFinishedEventArgs()
+        protected ExternalProjectFinishedEventArgs()
             : base()
         {
             // nothing to do here, move along.
diff --git a/src/Framework/ExternalProjectStartedEventArgs.cs b/src/Framework/ExternalProjectStartedEventArgs.cs
index a340954a714..f0dea23e6ea 100644
--- a/src/Framework/ExternalProjectStartedEventArgs.cs
+++ b/src/Framework/ExternalProjectStartedEventArgs.cs
@@ -23,7 +23,7 @@ public class ExternalProjectStartedEventArgs : CustomBuildEventArgs
         /// <summary>
         /// Default constructor
         /// </summary>
-        internal ExternalProjectStartedEventArgs()
+        protected ExternalProjectStartedEventArgs()
             : base()
         {
             // nothing to do here, move along.
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index 0902a0071dd..569c244ae97 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -1,5 +1,4 @@
-﻿using System;
-using System.Diagnostics.Tracing;
+﻿using System.Diagnostics.Tracing;
 
 namespace Microsoft.Build.Eventing
 {
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs
index bafe42c80fb..e2bf40fb5a1 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceAsAService_Tests.cs
@@ -36,7 +36,7 @@ public ResolveAssemblyReferenceAsAService_Tests(ITestOutputHelper output) : base
         public void EnsureInputPropertiesMatch()
         {
             string[] rarInputProperties = typeof(ResolveAssemblyReference).GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)
-                .Where(p => !p.GetCustomAttributes(typeof(OutputAttribute), true).Any()).Select(p => $"{p.PropertyType.FullName}.{p.Name}").ToArray();
+                .Where(p => !p.GetCustomAttributes(typeof(OutputAttribute), inherit: true).Any()).Select(p => $"{p.PropertyType.FullName}.{p.Name}").ToArray();
             string[] inputProperties = typeof(ResolveAssemblyReferenceTaskInput).GetProperties().Select(p => $"{p.PropertyType.FullName}.{p.Name}").ToArray();
 
             foreach (var item in rarInputProperties)
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
index 847020bd852..917b6fd08d5 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceTestFixture.cs
@@ -26,6 +26,11 @@ namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     public class ResolveAssemblyReferenceTestFixture : IDisposable
     {
+        /// <summary>
+        /// Determines if <see cref="Execute(ResolveAssemblyReference, bool, RARSimulationMode)"/> should use RARaaS
+        /// </summary>
+        private const bool UseRARaaS = false;
+
         // Create the mocks.
         internal static Microsoft.Build.Shared.FileExists fileExists = new Microsoft.Build.Shared.FileExists(FileExists);
         internal static Microsoft.Build.Shared.DirectoryExists directoryExists = new Microsoft.Build.Shared.DirectoryExists(DirectoryExists);
@@ -2962,9 +2967,9 @@ protected static bool ContainsItem(ITaskItem[] items, string spec)
         /// <remarks>
         /// NOTE! This test is not in fact completely isolated from its environment: it is reading the real redist lists.
         /// </remarks>
-        protected static bool Execute(ResolveAssemblyReference t, RARSimulationMode RARSimulationMode = RARSimulationMode.LoadAndBuildProject, bool useRarService = true)
+        protected static bool Execute(ResolveAssemblyReference t, RARSimulationMode RARSimulationMode = RARSimulationMode.LoadAndBuildProject)
         {
-            return Execute(t, true, RARSimulationMode, useRarService);
+            return Execute(t, true, RARSimulationMode);
         }
 
         [Flags]
@@ -2991,7 +2996,6 @@ internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceRequest
             {
                 ResolveAssemblyReferenceTaskInput taskInput = new ResolveAssemblyReferenceTaskInput(input);
                 ResolveAssemblyReferenceBuildEngine buildEngine = new ResolveAssemblyReferenceBuildEngine();
-                //ResolveAssemblyReference task = GetResolveAssemblyReferenceTask(buildEngine);
                 ResolveAssemblyReference task = new ResolveAssemblyReference
                 {
                     BuildEngine = buildEngine
@@ -3009,8 +3013,6 @@ internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceRequest
                     EventCount = buildEngine.EventCount
                 };
 
-                //System.Console.WriteLine("RAR task: {0}. Logged {1} events", result.TaskResult ? "Succeded" : "Failed", result.EventCount);
-
                 return result;
             }
         }
@@ -3019,7 +3021,7 @@ internal ResolveAssemblyReferenceResult Execute(ResolveAssemblyReferenceRequest
         /// Execute the task. Without confirming that the number of files resolved with and without find dependencies is identical.
         /// This is because profiles could cause the number of primary references to be different.
         /// </summary>
-        protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyCheck, RARSimulationMode rarSimulationMode = RARSimulationMode.LoadAndBuildProject, bool useRarService = true)
+        protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyCheck, RARSimulationMode rarSimulationMode = RARSimulationMode.LoadAndBuildProject)
         {
             string tempPath = Path.GetTempPath();
             string redistListPath = Path.Combine(tempPath, Guid.NewGuid() + ".xml");
@@ -3028,11 +3030,13 @@ protected static bool Execute(ResolveAssemblyReference t, bool buildConsistencyC
 
             bool succeeded = false;
 
-            bool usingRarService = false;
+            bool usingRarService = UseRARaaS;
             System.Threading.Tasks.Task serverTask = null;
             Stream clientStream = null, serverStream = null;
-            if (useRarService)
+            if (usingRarService)
             {
+                // Reset the value, so we know that we could initialize RARaaS
+                usingRarService = false;
                 if (t.BuildEngine is MockEngine e)
                 {
                     (serverStream, clientStream) = FullDuplexStream.CreatePair();
diff --git a/src/Tasks/ResolveAssemblyReferences/Contract/ReadOnlyTaskItem.cs b/src/Tasks/ResolveAssemblyReferences/Contract/ReadOnlyTaskItem.cs
index 7567d847e5d..d75d5642964 100644
--- a/src/Tasks/ResolveAssemblyReferences/Contract/ReadOnlyTaskItem.cs
+++ b/src/Tasks/ResolveAssemblyReferences/Contract/ReadOnlyTaskItem.cs
@@ -8,7 +8,7 @@
 
 namespace Microsoft.Build.Tasks.ResolveAssemblyReferences.Contract
 {
-    public sealed class ReadOnlyTaskItem
+    internal sealed class ReadOnlyTaskItem
     {
         public string ItemSpec { get; set; }
 
