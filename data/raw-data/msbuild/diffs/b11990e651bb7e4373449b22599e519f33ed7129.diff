diff --git a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
index 67eba7e0b12..0649b96b566 100644
--- a/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/NodePackets_Tests.cs
@@ -74,7 +74,6 @@ public void VerifyEventType()
             ResponseFileUsedEventArgs responseFileUsed = new("path");
             UninitializedPropertyReadEventArgs uninitializedPropertyRead = new("prop", "message", "help", "sender", MessageImportance.Normal);
             EnvironmentVariableReadEventArgs environmentVariableRead = new("env", "message", "help", "sender", MessageImportance.Normal);
-            GeneratedFileUsedEventArgs generatedFileUsed = new GeneratedFileUsedEventArgs("path", "some content");
 
             VerifyLoggingPacket(buildFinished, LoggingEventType.BuildFinishedEvent);
             VerifyLoggingPacket(buildStarted, LoggingEventType.BuildStartedEvent);
@@ -107,7 +106,6 @@ public void VerifyEventType()
             VerifyLoggingPacket(responseFileUsed, LoggingEventType.ResponseFileUsedEvent);
             VerifyLoggingPacket(uninitializedPropertyRead, LoggingEventType.UninitializedPropertyRead);
             VerifyLoggingPacket(environmentVariableRead, LoggingEventType.EnvironmentVariableReadEvent);
-            VerifyLoggingPacket(generatedFileUsed, LoggingEventType.GeneratedFileUsedEvent);
         }
 
         private static BuildEventContext CreateBuildEventContext()
@@ -309,7 +307,6 @@ public void TestTranslation()
                         ExtendedMetadata = new Dictionary<string, string> { { "m1", "v1" }, { "m2", "v2" } },
                         BuildEventContext = new BuildEventContext(1, 2, 3, 4, 5, 6, 7)
                     },
-                    new GeneratedFileUsedEventArgs("path", "some content"),
                 };
                 foreach (BuildEventArgs arg in testArgs)
                 {
diff --git a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
index b911ec86563..99474115048 100644
--- a/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
+++ b/src/Build.UnitTests/BuildEventArgsSerialization_Tests.cs
@@ -547,15 +547,6 @@ public void RoundtripResponseFileUsedEventArgs()
                 e => e.ResponseFilePath);
         }
 
-        [Fact]
-        public void RoundtripGeneratedFileUsedEventArgs()
-        {
-            var args = new GeneratedFileUsedEventArgs("MSBuild.rsp", "");
-            Roundtrip(args,
-                e => e.FilePath,
-                e => e.Content);
-        }
-
         [Fact]
         public void RoundtripCriticalBuildMessageEventArgs()
         {
diff --git a/src/Build/Instance/TaskFactoryLoggingHost.cs b/src/Build/Instance/TaskFactoryLoggingHost.cs
index c8e70102bda..1fbad6a47b6 100644
--- a/src/Build/Instance/TaskFactoryLoggingHost.cs
+++ b/src/Build/Instance/TaskFactoryLoggingHost.cs
@@ -340,9 +340,7 @@ internal bool IsEventSerializable(BuildEventArgs e)
 #pragma warning disable SYSLIB0050
             // Types which are not serializable and are not IExtendedBuildEventArgs as
             // those always implement custom serialization by WriteToStream and CreateFromStream.
-            if (!e.GetType().GetTypeInfo().IsSerializable &&
-                e is not IExtendedBuildEventArgs &&
-                e is not GeneratedFileUsedEventArgs)
+            if (!e.GetType().GetTypeInfo().IsSerializable && e is not IExtendedBuildEventArgs)
 #pragma warning restore SYSLIB0050
             {
                 _loggingContext.LogWarning(null, new BuildEventFileInfo(string.Empty), "ExpectedEventToBeSerializable", e.GetType().Name);
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
index 62780fe6781..22921695dea 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogRecordKind.cs
@@ -39,7 +39,6 @@ public enum BinaryLogRecordKind
         String,
         TaskParameter,
         ResponseFileUsed,
-        GeneratedFileUsed,
         AssemblyLoad,
     }
 }
diff --git a/src/Build/Logging/BinaryLogger/BinaryLogger.cs b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
index 1d69afc319a..a9e6f75705f 100644
--- a/src/Build/Logging/BinaryLogger/BinaryLogger.cs
+++ b/src/Build/Logging/BinaryLogger/BinaryLogger.cs
@@ -67,8 +67,6 @@ public sealed class BinaryLogger : ILogger
         //   - Making ProjectStartedEventArgs, ProjectEvaluationFinishedEventArgs, AssemblyLoadBuildEventArgs equal
         //     between de/serialization roundtrips.
         //   - Adding serialized events lengths - to support forward compatible reading
-        // version 19:
-        //   - new record kind: GeneratedFileUsedEventArgs
 
         // This should be never changed.
         // The minimum version of the binary log reader that can read log of above version.
@@ -76,7 +74,7 @@ public sealed class BinaryLogger : ILogger
 
         // The current version of the binary log representation.
         // Changes with each update of the binary log format.
-        internal const int FileFormatVersion = 19;
+        internal const int FileFormatVersion = 18;
 
         // The minimum version of the binary log reader that can read log of above version.
         // This should be changed only when the binary log format is changed in a way that would prevent it from being
@@ -366,11 +364,6 @@ private void CollectImports(BuildEventArgs e)
             {
                 projectImportsCollector.AddFile(responseFileArgs.ResponseFilePath);
             }
-            else if (e is GeneratedFileUsedEventArgs generatedFileUsedEventArgs && generatedFileUsedEventArgs.FilePath != null)
-            {
-                string fullPath = Path.GetFullPath(generatedFileUsedEventArgs.FilePath);
-                projectImportsCollector.AddFileFromMemory(fullPath, generatedFileUsedEventArgs.Content);
-            }
         }
 
         /// <summary>
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 8c4b51d8b73..2c49c17c8a7 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -315,7 +315,6 @@ void HandleError(FormatErrorMessage msgFactory, bool noThrow, ReaderErrorType re
                 BinaryLogRecordKind.TargetSkipped => ReadTargetSkippedEventArgs(),
                 BinaryLogRecordKind.EnvironmentVariableRead => ReadEnvironmentVariableReadEventArgs(),
                 BinaryLogRecordKind.ResponseFileUsed => ReadResponseFileUsedEventArgs(),
-                BinaryLogRecordKind.GeneratedFileUsed => ReadGeneratedFileUsedEventArgs(),
                 BinaryLogRecordKind.PropertyReassignment => ReadPropertyReassignmentEventArgs(),
                 BinaryLogRecordKind.UninitializedPropertyRead => ReadUninitializedPropertyReadEventArgs(),
                 BinaryLogRecordKind.PropertyInitialValueSet => ReadPropertyInitialValueSetEventArgs(),
@@ -1113,23 +1112,6 @@ private BuildEventArgs ReadResponseFileUsedEventArgs()
             return e;
         }
 
-        private BuildEventArgs ReadGeneratedFileUsedEventArgs()
-        {
-            var fields = ReadBuildEventArgsFields();
-
-            string? filePath = ReadDeduplicatedString();
-            string? content = ReadDeduplicatedString();
-
-            if (filePath != null && content != null)
-            {
-                var e = new GeneratedFileUsedEventArgs(filePath, content);
-                SetCommonFields(e, fields);
-                return e;
-            }
-
-            return new GeneratedFileUsedEventArgs();
-        }
-
         private BuildEventArgs ReadPropertyReassignmentEventArgs()
         {
             var fields = ReadBuildEventArgsFields(readImportance: true);
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 6bc81e9d4a6..a3ce5efa3c5 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -460,7 +460,6 @@ private BinaryLogRecordKind Write(BuildMessageEventArgs e)
             switch (e)
             {
                 case ResponseFileUsedEventArgs responseFileUsed: return Write(responseFileUsed);
-                case GeneratedFileUsedEventArgs generatedFileUsed: return Write(generatedFileUsed);
                 case TaskParameterEventArgs taskParameter: return Write(taskParameter);
                 case ProjectImportedEventArgs projectImported: return Write(projectImported);
                 case TargetSkippedEventArgs targetSkipped: return Write(targetSkipped);
@@ -557,13 +556,6 @@ private BinaryLogRecordKind Write(ResponseFileUsedEventArgs e)
             WriteDeduplicatedString(e.ResponseFilePath);
             return BinaryLogRecordKind.ResponseFileUsed;
         }
-        private BinaryLogRecordKind Write(GeneratedFileUsedEventArgs e)
-        {
-            WriteMessageFields(e);
-            WriteDeduplicatedString(e.FilePath);
-            WriteDeduplicatedString(e.Content);
-            return BinaryLogRecordKind.GeneratedFileUsed;
-        }
         private BinaryLogRecordKind Write(TaskCommandLineEventArgs e)
         {
             WriteMessageFields(e, writeMessage: false, writeImportance: true);
diff --git a/src/Framework.UnitTests/GeneratedFileUsedEventArgs_Tests.cs b/src/Framework.UnitTests/GeneratedFileUsedEventArgs_Tests.cs
deleted file mode 100644
index 576c37e265f..00000000000
--- a/src/Framework.UnitTests/GeneratedFileUsedEventArgs_Tests.cs
+++ /dev/null
@@ -1,38 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.Collections.Generic;
-using System.IO;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using Shouldly;
-using Xunit;
-
-namespace Microsoft.Build.Framework.UnitTests
-{
-    public class GeneratedFileUsedEventArgs_Tests
-    {
-        [Fact]
-        public void SerializationDeserializationTest()
-        {
-            string filePath = "path";
-            string content = "content";
-            GeneratedFileUsedEventArgs arg = new(filePath, content);
-
-            using MemoryStream stream = new MemoryStream();
-            using BinaryWriter bw = new BinaryWriter(stream);
-            arg.WriteToStream(bw);
-
-            stream.Position = 0;
-            using BinaryReader br = new BinaryReader(stream);
-            GeneratedFileUsedEventArgs argDeserialized = new();
-            int packetVersion = (Environment.Version.Major * 10) + Environment.Version.Minor;
-            argDeserialized.CreateFromStream(br, packetVersion);
-
-            argDeserialized.FilePath.ShouldBe(filePath);
-            argDeserialized.Content.ShouldBe(content);
-        }
-    }
-}
diff --git a/src/Framework/GeneratedFileUsedEventArgs.cs b/src/Framework/GeneratedFileUsedEventArgs.cs
deleted file mode 100644
index 22b62a8aa9a..00000000000
--- a/src/Framework/GeneratedFileUsedEventArgs.cs
+++ /dev/null
@@ -1,58 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.IO;
-
-namespace Microsoft.Build.Framework
-{
-    /// <summary>
-    /// Arguments for the generated file used event
-    /// </summary>
-    public class GeneratedFileUsedEventArgs : BuildMessageEventArgs
-    {
-        public GeneratedFileUsedEventArgs()
-        {
-        }
-
-        /// <summary>
-        /// Initializes a new instance of the <see cref="GeneratedFileUsedEventArgs"/> class.
-        /// </summary>
-        /// 
-        public GeneratedFileUsedEventArgs(string filePath, string content)
-            : base("", null, null, MessageImportance.Low)
-        {
-            FilePath = filePath;
-            Content = content;
-        }
-
-        /// <summary>
-        /// The file path relative to the current project.
-        /// </summary>
-        public string? FilePath { set; get; }
-
-        /// <summary>
-        /// The content of the file.
-        /// </summary>
-        public string? Content { set; get; }
-
-        internal override void WriteToStream(BinaryWriter writer)
-        {
-            base.WriteToStream(writer);
-
-            if (FilePath != null && Content != null)
-            {
-                writer.Write(FilePath);
-                writer.Write(Content);
-            }
-        }
-
-        internal override void CreateFromStream(BinaryReader reader, int version)
-        {
-            base.CreateFromStream(reader, version);
-
-            FilePath = reader.ReadString();
-            Content = reader.ReadString();
-        }
-    }
-}
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index 81eacb5e604..92cc46106f0 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -205,11 +205,6 @@ internal enum LoggingEventType : int
         /// Event is <see cref="ExtendedCriticalBuildMessageEventArgs"/>
         /// </summary>
         ExtendedCriticalBuildMessageEvent = 33,
-
-        /// <summary>
-        /// Event is a <see cref="GeneratedFileUsedEventArgs"/>
-        /// </summary>
-        GeneratedFileUsedEvent = 34,
     }
     #endregion
 
@@ -594,8 +589,7 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.TaskFinishedEvent => new TaskFinishedEventArgs(null, null, null, null, null, false),
                 LoggingEventType.TaskCommandLineEvent => new TaskCommandLineEventArgs(null, null, MessageImportance.Normal),
                 LoggingEventType.EnvironmentVariableReadEvent => new EnvironmentVariableReadEventArgs(),
-                LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),               
-
+                LoggingEventType.ResponseFileUsedEvent => new ResponseFileUsedEventArgs(null),
 #if !TASKHOST // MSBuildTaskHost is targeting Microsoft.Build.Framework.dll 3.5
                 LoggingEventType.AssemblyLoadEvent => new AssemblyLoadBuildEventArgs(),
                 LoggingEventType.TaskParameterEvent => new TaskParameterEventArgs(0, null, null, true, default),
@@ -616,7 +610,6 @@ private BuildEventArgs GetBuildEventArgFromId()
                 LoggingEventType.PropertyInitialValueSet => new PropertyInitialValueSetEventArgs(),
                 LoggingEventType.PropertyReassignment => new PropertyReassignmentEventArgs(),
                 LoggingEventType.UninitializedPropertyRead => new UninitializedPropertyReadEventArgs(),
-                LoggingEventType.GeneratedFileUsedEvent => new GeneratedFileUsedEventArgs(),
 #endif
                 _ => throw new InternalErrorException("Should not get to the default of GetBuildEventArgFromId ID: " + _eventType)
             };
@@ -728,10 +721,6 @@ private LoggingEventType GetLoggingEventId(BuildEventArgs eventArg)
             {
                 return LoggingEventType.UninitializedPropertyRead;
             }
-            else if (eventType == typeof(GeneratedFileUsedEventArgs))
-            {
-                return LoggingEventType.GeneratedFileUsedEvent;
-            }
 #endif
             else if (eventType == typeof(TargetStartedEventArgs))
             {
diff --git a/src/Shared/TaskLoggingHelper.cs b/src/Shared/TaskLoggingHelper.cs
index 9a5315b1b32..da848678ded 100644
--- a/src/Shared/TaskLoggingHelper.cs
+++ b/src/Shared/TaskLoggingHelper.cs
@@ -503,21 +503,6 @@ public void LogMessageFromResources(MessageImportance importance, string message
 #endif
         }
 
-        /// <summary>
-        /// Logs a file generated from the given data.
-        /// </summary>
-        /// <param name="filePath">The file path relative to the currecnt project.</param>
-        /// <param name="content">The content of the file.</param>
-        public void LogIncludeGeneratedFile(string filePath, string content)
-        {
-            ErrorUtilities.VerifyThrowArgumentNull(filePath, nameof(filePath));
-            ErrorUtilities.VerifyThrowArgumentNull(content, nameof(content));
-
-            var e = new GeneratedFileUsedEventArgs(filePath, content);
-
-            BuildEngine.LogMessageEvent(e);
-        }
-
         /// <summary>
         /// Flatten the inner exception message
         /// </summary>
diff --git a/src/Tasks.UnitTests/CodeTaskFactoryEmbeddedFileInBinlogTestHelper.cs b/src/Tasks.UnitTests/CodeTaskFactoryEmbeddedFileInBinlogTestHelper.cs
deleted file mode 100644
index 20542cd8ce8..00000000000
--- a/src/Tasks.UnitTests/CodeTaskFactoryEmbeddedFileInBinlogTestHelper.cs
+++ /dev/null
@@ -1,133 +0,0 @@
-ï»¿// Licensed to the .NET Foundation under one or more agreements.
-// The .NET Foundation licenses this file to you under the MIT license.
-
-using System;
-using System.IO;
-using System.IO.Compression;
-using Microsoft.Build.Logging;
-using Microsoft.Build.UnitTests;
-using Shouldly;
-using Xunit;
-
-namespace Microsoft.Build.Tasks.UnitTests
-{
-    internal enum FactoryType
-    {
-        CodeTaskFactory,
-        RoslynCodeTaskFactory,
-    }
-
-    internal static class CodeTaskFactoryEmbeddedFileInBinlogTestHelper
-    {
-        internal static void BuildFromSourceAndCheckForEmbeddedFileInBinlog(
-            FactoryType factoryType,
-            string taskName,
-            string sourceContent,
-            bool buildShouldSucceed)
-        {
-            using var env = TestEnvironment.Create();
-
-            TransientTestFolder folder = env.CreateFolder(createFolder: true);
-
-            var sourceClass = env.CreateFile(folder, $"{taskName}.cs", sourceContent);
-
-            string projectFileContents = $"""
-                <Project>
-
-                  <UsingTask
-                    TaskName="{taskName}"
-                    TaskFactory="{factoryType}"
-                    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
-                    <Task>
-                      <Code Type="Class" Language="cs" Source="{sourceClass.Path}">
-                      </Code>
-                    </Task>
-                  </UsingTask>
-
-                    <Target Name="SayHello">
-                        <{taskName} />
-                    </Target>
-
-                </Project>
-                """;
-
-            TransientTestFile binlog = env.ExpectFile(".binlog");
-
-            var binaryLogger = new BinaryLogger()
-            {
-                Parameters = $"LogFile={binlog.Path}",
-                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,
-            };
-
-            Helpers.BuildProjectWithNewOMAndBinaryLogger(projectFileContents, binaryLogger, out bool result, out string projectDirectoryPath);
-
-            Assert.Equal(buildShouldSucceed, result);
-
-            string projectImportsZipPath = Path.ChangeExtension(binlog.Path, ".ProjectImports.zip");
-            using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);
-            using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);
-
-            // A path like "C:\path" in ZipArchive is saved as "C\path"
-            // For unix-based systems path uses '/'
-            projectDirectoryPath = NativeMethodsShared.IsWindows ? projectDirectoryPath.Replace(":\\", "\\") : projectDirectoryPath.Replace("/", "\\");
-
-            // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
-            // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
-            zipArchive.Entries.ShouldContain(
-                zE => zE.FullName.StartsWith(projectDirectoryPath) && zE.Name.EndsWith($"{taskName}-compilation-file.tmp"),
-                $"Binlog's embedded files didn't have the expected '{projectDirectoryPath}/{{guid}}-{taskName}-compilation-file.tmp'.");
-        }
-
-        internal static void BuildAndCheckForEmbeddedFileInBinlog(
-            FactoryType factoryType,
-            string taskName,
-            string taskXml,
-            bool buildShouldSucceed)
-        {
-            string projectFileContents = $"""
-                <Project>
-
-                  <UsingTask
-                    TaskName="{taskName}"
-                    TaskFactory="{factoryType}"
-                    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
-                    {taskXml}
-                  </UsingTask>
-
-                    <Target Name="SayHello">
-                        <{taskName} />
-                    </Target>
-
-                </Project>
-                """;
-
-            using var env = TestEnvironment.Create();
-
-            TransientTestFile binlog = env.ExpectFile(".binlog");
-
-            var binaryLogger = new BinaryLogger()
-            {
-                Parameters = $"LogFile={binlog.Path}",
-                CollectProjectImports = BinaryLogger.ProjectImportsCollectionMode.ZipFile,
-            };
-
-            Helpers.BuildProjectWithNewOMAndBinaryLogger(projectFileContents, binaryLogger, out bool result, out string projectDirectory);
-
-            Assert.Equal(buildShouldSucceed, result);
-
-            string projectImportsZipPath = Path.ChangeExtension(binlog.Path, ".ProjectImports.zip");
-            using var fileStream = new FileStream(projectImportsZipPath, FileMode.Open);
-            using var zipArchive = new ZipArchive(fileStream, ZipArchiveMode.Read);
-
-            // A path like "C:\path" in ZipArchive is saved as "C\path"
-            // For unix-based systems path uses '/'
-            projectDirectory = NativeMethodsShared.IsWindows ? projectDirectory.Replace(":\\", "\\") : projectDirectory.Replace("/", "\\");
-
-            // Can't just compare `Name` because `ZipArchive` does not handle unix directory separators well
-            // thus producing garbled fully qualified paths in the actual .ProjectImports.zip entries
-            zipArchive.Entries.ShouldContain(
-                zE => zE.FullName.StartsWith(projectDirectory) && zE.Name.EndsWith($"{taskName}-compilation-file.tmp"),
-                $"Binlog's embedded files didn't have the expected '{projectDirectory}/{{guid}}-{taskName}-compilation-file.tmp'.");
-        }
-    }
-}
diff --git a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
index 784e05d8bae..f6d0b3a01ed 100644
--- a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
+++ b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
@@ -16,7 +16,6 @@ namespace Microsoft.Build.UnitTests
 #if FEATURE_CODETASKFACTORY
 
     using System.CodeDom.Compiler;
-    using Microsoft.Build.Tasks.UnitTests;
 
     public sealed class CodeTaskFactoryTests
     {
@@ -1121,81 +1120,6 @@ public void RedundantMSBuildReferences()
             MockLogger mockLogger = Helpers.BuildProjectWithNewOMExpectSuccess(projectFileContents);
             mockLogger.AssertLogContains("Hello, World!");
         }
-
-        [Fact]
-        public void EmbedsGeneratedFromSourceFileInBinlog()
-        {
-            string taskName = "HelloTask";
-
-            string sourceContent = $$"""
-                namespace InlineTask
-                {
-                    using Microsoft.Build.Utilities;
-
-                    public class {{taskName}} : Task
-                    {
-                        public override bool Execute()
-                        {
-                            Log.LogMessage("Hello, world!");
-                            return !Log.HasLoggedErrors;
-                        }
-                    }
-                }
-                """;
-
-            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildFromSourceAndCheckForEmbeddedFileInBinlog(
-                FactoryType.CodeTaskFactory, taskName, sourceContent, true);
-        }
-
-        [Fact]
-        public void EmbedsGeneratedFromSourceFileInBinlogWhenFailsToCompile()
-        {
-            string taskName = "HelloTask";
-
-            string sourceContent =  $$"""
-                namespace InlineTask
-                {
-                    using Microsoft.Build.Utilities;
-
-                    public class {{taskName}} : Task
-                    {
-                """;
-
-            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildFromSourceAndCheckForEmbeddedFileInBinlog(
-                FactoryType.CodeTaskFactory, taskName, sourceContent, false);
-        }
-
-        [Fact]
-        public void EmbedsGeneratedFileInBinlog()
-        {
-            string taskXml = @"
-                <Task>
-                    <Code Type=""Fragment"" Language=""cs"">
-                        <![CDATA[
-                              Log.LogMessage(""Hello, World!"");
-                		   ]]>
-                    </Code>
-                </Task>";
-
-            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildAndCheckForEmbeddedFileInBinlog(
-                FactoryType.CodeTaskFactory, "HelloTask", taskXml, true);
-        }
-
-        [Fact]
-        public void EmbedsGeneratedFileInBinlogWhenFailsToCompile()
-        {
-            string taskXml = @"
-                <Task>
-                    <Code Type=""Fragment"" Language=""cs"">
-                        <![CDATA[
-                              Log.LogMessage(""Hello, World!
-                		   ]]>
-                    </Code>
-                </Task>";
-
-            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildAndCheckForEmbeddedFileInBinlog(
-                FactoryType.CodeTaskFactory, "HelloTask", taskXml, false);
-        }
     }
 #else
     public sealed class CodeTaskFactoryTests
diff --git a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
index 0a142052398..967dfe65a42 100644
--- a/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
+++ b/src/Tasks.UnitTests/RoslynCodeTaskFactory_Tests.cs
@@ -644,81 +644,6 @@ public override bool Execute()
             }
         }
 
-        [Fact]
-        public void EmbedsGeneratedFromSourceFileInBinlog()
-        {
-            string taskName = "HelloTask";
-
-            string sourceContent = $$"""
-                namespace InlineTask
-                {
-                    using Microsoft.Build.Utilities;
-
-                    public class {{taskName}} : Task
-                    {
-                        public override bool Execute()
-                        {
-                            Log.LogMessage("Hello, world!");
-                            return !Log.HasLoggedErrors;
-                        }
-                    }
-                }
-                """;
-
-            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildFromSourceAndCheckForEmbeddedFileInBinlog(
-                FactoryType.RoslynCodeTaskFactory, taskName, sourceContent, true);
-        }
-
-        [Fact]
-        public void EmbedsGeneratedFromSourceFileInBinlogWhenFailsToCompile()
-        {
-            string taskName = "HelloTask";
-
-            string sourceContent =  $$"""
-                namespace InlineTask
-                {
-                    using Microsoft.Build.Utilities;
-
-                    public class {{taskName}} : Task
-                    {
-                """;
-
-            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildFromSourceAndCheckForEmbeddedFileInBinlog(
-                FactoryType.RoslynCodeTaskFactory, taskName, sourceContent, false);
-        }
-
-        [Fact]
-        public void EmbedsGeneratedFileInBinlog()
-        {
-            string taskXml = @"
-                <Task>
-                    <Code Type=""Fragment"" Language=""cs"">
-                        <![CDATA[
-                              Log.LogMessage(""Hello, World!"");
-                		   ]]>
-                    </Code>
-                </Task>";
-
-            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildAndCheckForEmbeddedFileInBinlog(
-                FactoryType.RoslynCodeTaskFactory, "HelloTask", taskXml, true);
-        }
-
-        [Fact]
-        public void EmbedsGeneratedFileInBinlogWhenFailsToCompile()
-        {
-            string taskXml = @"
-                <Task>
-                    <Code Type=""Fragment"" Language=""cs"">
-                        <![CDATA[
-                              Log.LogMessage(""Hello, World!
-                		   ]]>
-                    </Code>
-                </Task>";
-
-            CodeTaskFactoryEmbeddedFileInBinlogTestHelper.BuildAndCheckForEmbeddedFileInBinlog(
-                FactoryType.RoslynCodeTaskFactory, "HelloTask", taskXml, false);
-        }
-
 #if !FEATURE_RUN_EXE_IN_TESTS
         [Fact]
         public void RoslynCodeTaskFactory_UsingAPI()
diff --git a/src/Tasks/CodeTaskFactory.cs b/src/Tasks/CodeTaskFactory.cs
index f863c969cbf..73eb0403611 100644
--- a/src/Tasks/CodeTaskFactory.cs
+++ b/src/Tasks/CodeTaskFactory.cs
@@ -791,10 +791,6 @@ private Assembly CompileInMemoryAssembly()
                 // Our code generation is complete, grab the source from the builder ready for compilation
                 string fullCode = codeBuilder.ToString();
 
-                // Embed generated file in the binlog
-                string fileNameInBinlog = $"{Guid.NewGuid()}-{_nameOfTask}-compilation-file.tmp";
-                _log.LogIncludeGeneratedFile(fileNameInBinlog, fullCode);
-
                 var fullSpec = new FullTaskSpecification(finalReferencedAssemblies, fullCode);
                 if (!s_compiledTaskCache.TryGetValue(fullSpec, out Assembly existingAssembly))
                 {
diff --git a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
index 7989a98917a..63d7fd5b8ae 100644
--- a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
+++ b/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs
@@ -685,10 +685,6 @@ private bool TryCompileInMemoryAssembly(IBuildEngine buildEngine, RoslynCodeTask
 
             try
             {
-                // Embed generated file in the binlog
-                string fileNameInBinlog = $"{Guid.NewGuid()}-{_taskName}-compilation-file.tmp";
-                _log.LogIncludeGeneratedFile(fileNameInBinlog, taskInfo.SourceCode);
-
                 // Create the code
                 File.WriteAllText(sourceCodePath, taskInfo.SourceCode);
 
diff --git a/src/UnitTests.Shared/ObjectModelHelpers.cs b/src/UnitTests.Shared/ObjectModelHelpers.cs
index ce51be22785..a7609b3a908 100644
--- a/src/UnitTests.Shared/ObjectModelHelpers.cs
+++ b/src/UnitTests.Shared/ObjectModelHelpers.cs
@@ -1359,20 +1359,6 @@ private static void BuildProjectWithNewOM(string content, ref MockLogger logger,
             result = project.Build(loggers);
         }
 
-        public static void BuildProjectWithNewOMAndBinaryLogger(string content, BinaryLogger binaryLogger, out bool result, out string projectDirectory)
-        {
-            // Replace the nonstandard quotes with real ones
-            content = ObjectModelHelpers.CleanupFileContents(content);
-
-            Project project = new Project(XmlReader.Create(new StringReader(content)), null, toolsVersion: null);
-
-            List<ILogger> loggers = new List<ILogger>() { binaryLogger };
-
-            result = project.Build(loggers);
-
-            projectDirectory = project.DirectoryPath;
-        }
-
         public static MockLogger BuildProjectContentUsingBuildManagerExpectResult(string content, BuildResultCode expectedResult)
         {
             var logger = new MockLogger();
