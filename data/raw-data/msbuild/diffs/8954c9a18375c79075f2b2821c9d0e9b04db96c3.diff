diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index 54507da16dc..d9876ad1227 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -497,9 +497,9 @@ public void ReusableStringBuilderFactoryStart(int hash, int newCapacity, int old
         }
 
         [Event(69, Keywords = Keywords.All)]
-        public void ReusableStringBuilderFactoryStop(int hash, int returningCapacity, string type)
+        public void ReusableStringBuilderFactoryStop(int hash, int returningCapacity, int returningLength, string type)
         {
-            WriteEvent(69, hash, returningCapacity, type);
+            WriteEvent(69, hash, returningCapacity, returningLength, type);
         }
 
 
diff --git a/src/Shared/ReuseableStringBuilder.cs b/src/Shared/ReuseableStringBuilder.cs
index 77181e97ea5..5041e213a84 100644
--- a/src/Shared/ReuseableStringBuilder.cs
+++ b/src/Shared/ReuseableStringBuilder.cs
@@ -174,12 +174,12 @@ private static class ReuseableStringBuilderFactory
             /// because we could otherwise hold a huge builder indefinitely.
             /// This size seems reasonable for MSBuild uses (mostly expression expansion)
             /// </summary>
-            private const int MaxBuilderSize = 1024;
+            private const int MaxBuilderSize = 10*1024*1024;
 
             /// <summary>
             /// The shared builder.
             /// </summary>
-            private static StringBuilder s_sharedBuilder;
+            private static StringBuilder s_sharedBuilder = new(MaxBuilderSize);
 
 #if DEBUG
             /// <summary>
@@ -273,6 +273,8 @@ internal static StringBuilder Get(int capacity)
             /// </summary>
             internal static void Release(StringBuilder returningBuilder)
             {
+                int returningLength = returningBuilder.Length;
+
                 // It's possible for someone to cause the builder to
                 // enlarge to such an extent that this static field
                 // would be a leak. To avoid that, only accept
@@ -288,7 +290,7 @@ internal static void Release(StringBuilder returningBuilder)
                     returningBuilder.Clear(); // Clear before pooling
 
                     var oldSharedBuilder = Interlocked.Exchange(ref s_sharedBuilder, returningBuilder);
-                    MSBuildEventSource.Log.ReusableStringBuilderFactoryStop(hash: returningBuilder.GetHashCode(), returningCapacity: returningBuilder.Capacity, type: oldSharedBuilder == null ? "returned-set" : "returned-replace");
+                    MSBuildEventSource.Log.ReusableStringBuilderFactoryStop(hash: returningBuilder.GetHashCode(), returningCapacity: returningBuilder.Capacity, returningLength: returningLength, type: oldSharedBuilder == null ? "returned-set" : "returned-replace");
 
 #if DEBUG
                     Interlocked.Increment(ref s_accepts);
@@ -296,7 +298,7 @@ internal static void Release(StringBuilder returningBuilder)
                 }
                 else
                 {
-                    MSBuildEventSource.Log.ReusableStringBuilderFactoryStop(hash: returningBuilder.GetHashCode(), returningCapacity: returningBuilder.Capacity, type: "discarded");
+                    MSBuildEventSource.Log.ReusableStringBuilderFactoryStop(hash: returningBuilder.GetHashCode(), returningCapacity: returningBuilder.Capacity, returningLength: returningLength, type: "discarded");
 #if DEBUG
                     Interlocked.Increment(ref s_discards);
 #endif
diff --git a/src/Shared/StringBuilderCache.cs b/src/Shared/StringBuilderCache.cs
index d81cc81bcdf..c5663d2d3e6 100644
--- a/src/Shared/StringBuilderCache.cs
+++ b/src/Shared/StringBuilderCache.cs
@@ -84,7 +84,7 @@ public static void Release(StringBuilder sb)
                 StringBuilderCache.t_cachedInstance = sb;
             }
 #if !CLR2COMPATIBILITY && !MICROSOFT_BUILD_ENGINE_OM_UNITTESTS
-            MSBuildEventSource.Log.ReusableStringBuilderFactoryStop(hash: sb.GetHashCode(), returningCapacity: sb.Capacity, type: sb.Capacity <= MAX_BUILDER_SIZE ? "sbc-returned" :  "sbc-discarded");
+            MSBuildEventSource.Log.ReusableStringBuilderFactoryStop(hash: sb.GetHashCode(), returningCapacity: sb.Capacity, returningLength: sb.Length, type: sb.Capacity <= MAX_BUILDER_SIZE ? "sbc-returned" :  "sbc-discarded");
 #endif
         }
 
