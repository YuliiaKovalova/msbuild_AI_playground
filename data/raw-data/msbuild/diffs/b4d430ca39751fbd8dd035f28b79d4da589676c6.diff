diff --git a/eng/CodeAnalysis.ruleset b/eng/CodeAnalysis.ruleset
index 2078c42fe6c..e097cfd58ee 100644
--- a/eng/CodeAnalysis.ruleset
+++ b/eng/CodeAnalysis.ruleset
@@ -104,7 +104,7 @@
     <Rule Id="CA1831" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
     <Rule Id="CA1832" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
     <Rule Id="CA1833" Action="Warning" />          <!-- Use AsSpan or AsMemory instead of Range-based indexers when appropriate --> 
-    <Rule Id="CA1834" Action="Info" />             <!-- Consider using 'StringBuilder.Append(char)' when applicable. --> 
+    <Rule Id="CA1834" Action="Warning" />          <!-- Consider using 'StringBuilder.Append(char)' when applicable. --> 
     <Rule Id="CA1835" Action="Info" />             <!-- Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync' --> 
     <Rule Id="CA1836" Action="Info" />             <!-- Prefer IsEmpty over Count --> 
     <Rule Id="CA1837" Action="Info" />             <!-- Use 'Environment.ProcessId' -->  
diff --git a/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs
index dc5bca68248..6302d247a14 100644
--- a/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectStringCache_Tests.cs
@@ -284,7 +284,7 @@ public void AddReturnsSameInstanceForSameDocument()
             // Build a new string guaranteed not to be optimized by the compiler into the same instance.
             StringBuilder builder = new StringBuilder();
             builder.Append("Test");
-            builder.Append("1");
+            builder.Append('1');
 
             string return2 = cache.Add(builder.ToString(), document);
 
@@ -318,7 +318,7 @@ public void AddReturnsSameInstanceForDifferentDocument()
             // Build a new string guaranteed not to be optimized by the compiler into the same instance.
             StringBuilder builder = new StringBuilder();
             builder.Append("Test");
-            builder.Append("1");
+            builder.Append('1');
             XmlDocument document2 = new XmlDocument();
 
             string return2 = cache.Add(builder.ToString(), document2);
@@ -360,7 +360,7 @@ public void RemoveLastInstanceDeallocatesEntry()
             // Build a new string guaranteed not to be optimized by the compiler into the same instance.
             StringBuilder builder = new StringBuilder();
             builder.Append("Test");
-            builder.Append("1");
+            builder.Append('1');
             XmlDocument document2 = new XmlDocument();
 
             string return2 = cache.Add(builder.ToString(), document2);
@@ -397,7 +397,7 @@ public void RemoveOneInstance()
             // Build a new string guaranteed not to be optimized by the compiler into the same instance.
             StringBuilder builder = new StringBuilder();
             builder.Append("Test");
-            builder.Append("1");
+            builder.Append('1');
             XmlDocument document3 = new XmlDocument();
 
             string return3 = cache.Add(builder.ToString(), document3);
@@ -432,7 +432,7 @@ public void DifferentStringsSameDocument()
             // Build a new string guaranteed not to be optimized by the compiler into the same instance.
             StringBuilder builder = new StringBuilder();
             builder.Append("Test");
-            builder.Append("2");
+            builder.Append('2');
             string return3 = cache.Add(builder.ToString(), document);
 
             // The new string should be the same as the other one already in the collection.
@@ -466,7 +466,7 @@ public void DifferentStringsDifferentDocuments()
             // Build a new string guaranteed not to be optimized by the compiler into the same instance.
             StringBuilder builder = new StringBuilder();
             builder.Append("Test");
-            builder.Append("2");
+            builder.Append('2');
             XmlDocument document3 = new XmlDocument();
             string return3 = cache.Add(builder.ToString(), document3);
 
diff --git a/src/Build/Graph/ProjectGraph.cs b/src/Build/Graph/ProjectGraph.cs
index 40cf6aee0ed..ec0fc628fd0 100644
--- a/src/Build/Graph/ProjectGraph.cs
+++ b/src/Build/Graph/ProjectGraph.cs
@@ -522,7 +522,7 @@ internal string ToDot(
                 }
             }
 
-            sb.Append("}");
+            sb.Append('}');
 
             return sb.ToString();
 
diff --git a/src/Shared/ExceptionHandling.cs b/src/Shared/ExceptionHandling.cs
index f359e71a71d..d0c56bb2d50 100644
--- a/src/Shared/ExceptionHandling.cs
+++ b/src/Shared/ExceptionHandling.cs
@@ -371,7 +371,7 @@ internal static string ReadAnyExceptionFromFile(DateTime fromTimeUtc)
                 {
                     builder.Append(Environment.NewLine);
                     builder.Append(file);
-                    builder.Append(":");
+                    builder.Append(':');
                     builder.Append(Environment.NewLine);
                     builder.Append(File.ReadAllText(file));
                     builder.Append(Environment.NewLine);
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 6f089b3e8ad..91e4ca5152f 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -2226,7 +2226,7 @@ internal static string Normalize(string aString)
             }
             else if (aString.StartsWith(@"\", StringComparison.Ordinal))
             {
-                sb.Append(@"\");
+                sb.Append('\\');
                 index = SkipSlashes(aString, 1);
             }
 
diff --git a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
index f902ab72933..ffcf825adf8 100644
--- a/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
+++ b/src/Tasks.UnitTests/ResourceHandling/GenerateResource_Tests.cs
@@ -3616,7 +3616,7 @@ public static string GetTestTextContent(string tagName, string oneLine, bool cle
 
             if (tagName != null)
             {
-                txt.Append("[");
+                txt.Append('[');
                 txt.Append(tagName);
                 txt.Append("]\xd\xa");
             }
