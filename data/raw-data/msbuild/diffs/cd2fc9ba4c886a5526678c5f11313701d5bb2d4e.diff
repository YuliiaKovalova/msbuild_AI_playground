diff --git a/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs b/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
index 4c7f50a76fb..5230364d65c 100644
--- a/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskRegistry_Tests.cs
@@ -622,52 +622,12 @@ public void RetrieveFromCacheMatchingExactParameters_AdditionalParameters()
                 );
         }
 
-        [Fact]
-        public void ArchitectureSpecificTask_ShouldAlwaysReturnFirst()
-        {
-            Assert.NotNull(_testTaskLocation); // "Need a test task to run this test"
-
-            List<ProjectUsingTaskElement> elementList = new List<ProjectUsingTaskElement>();
-            ProjectRootElement project = ProjectRootElement.Create();
-
-            ProjectUsingTaskElement element = project.AddUsingTask(TestTaskName, _testTaskLocation, null);
-            elementList.Add(element);
-
-            ProjectUsingTaskElement secondElement = project.AddUsingTask(TestTaskName, _testTaskLocation, null);
-            secondElement.Architecture = "x86";
-            elementList.Add(secondElement);
-
-            TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
-
-            // no parameters
-            RetrieveAndValidateRegisteredTaskRecord
-                (
-                    registry,
-                    exactMatchRequired: false,
-                    runtime: null,
-                    architecture: null,
-                    shouldBeRetrieved: true,
-                    shouldBeRetrievedFromCache: false,
-                    expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
-
-            // no parameters, fuzzy match
-            RetrieveAndValidateRegisteredTaskRecord
-                (
-                    registry,
-                    exactMatchRequired: false,
-                    runtime: null,
-                    architecture: null,
-                    shouldBeRetrieved: true,
-                    shouldBeRetrievedFromCache: false,
-                    expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x86
-                );
-        }
-
-        [Fact]
-        public void ArchitectureSpecificTask_FirstOneWins()
+        [Theory]
+        [InlineData("x64","true","x86","", "x64")] // override wins
+        [InlineData("x64", "false", "x86", "true", "x86")] // override wins
+        [InlineData("x64","true","x86","true", "x64")] // first one wins
+        [InlineData("x86", "true", "x64", "true", "x86")] // first one wins
+        public void OverriddenTask_AlwaysWins(string firstArch, string firstOverride, string secondArch, string secondOverride, string expectedArch)
         {
             Assert.NotNull(_testTaskLocation); // "Need a test task to run this test"
 
@@ -675,11 +635,13 @@ public void ArchitectureSpecificTask_FirstOneWins()
             ProjectRootElement project = ProjectRootElement.Create();
 
             ProjectUsingTaskElement element = project.AddUsingTask(TestTaskName, _testTaskLocation, null);
-            element.Architecture = "x64";
+            element.Architecture = firstArch;
+            element.Override = firstOverride;
             elementList.Add(element);
 
             ProjectUsingTaskElement secondElement = project.AddUsingTask(TestTaskName, _testTaskLocation, null);
-            secondElement.Architecture = "x86";
+            secondElement.Architecture = secondArch;
+            secondElement.Override = secondOverride;
             elementList.Add(secondElement);
 
             TaskRegistry registry = CreateTaskRegistryAndRegisterTasks(elementList);
@@ -694,7 +656,7 @@ public void ArchitectureSpecificTask_FirstOneWins()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64
+                    expectedArchitecture: expectedArch
                 );
 
             // no parameters, fuzzy match
@@ -707,7 +669,7 @@ public void ArchitectureSpecificTask_FirstOneWins()
                     shouldBeRetrieved: true,
                     shouldBeRetrievedFromCache: false,
                     expectedRuntime: XMakeAttributes.MSBuildRuntimeValues.any,
-                    expectedArchitecture: XMakeAttributes.MSBuildArchitectureValues.x64
+                    expectedArchitecture: expectedArch
                 );
         }
 
