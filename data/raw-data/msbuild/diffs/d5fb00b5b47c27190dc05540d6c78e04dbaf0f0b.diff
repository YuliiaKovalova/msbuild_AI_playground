diff --git a/src/Build.UnitTests/BackEnd/ConfigCache_Tests.cs b/src/Build.UnitTests/BackEnd/ConfigCache_Tests.cs
index 1593604ae74..83af9375bc7 100644
--- a/src/Build.UnitTests/BackEnd/ConfigCache_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ConfigCache_Tests.cs
@@ -2,6 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System.Collections.Generic;
+using System.IO;
 using System.Linq;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Execution;
@@ -131,5 +132,20 @@ public void HappyGetSmallestConfigId(object obj)
         {
             Assert.Equal(1, ((ConfigCache)obj).GetSmallestConfigId());
         }
+
+        [Theory]
+        [MemberData(nameof(CacheSerializationTestData))]
+        public void KeepCacheEntryWithLowestConfigId(object obj)
+        {
+            var initial = (ConfigCache)obj;
+            string cacheFile = Path.Combine(Directory.GetCurrentDirectory(), "Output.MSBuildResultsCache");
+            Assert.Null(CacheSerialization.SerializeCaches(initial, new ResultsCache(), cacheFile, IsolateProjects.Message));
+
+            var result = CacheSerialization.DeserializeCaches(cacheFile);
+            Assert.True(result.ConfigCache.HasConfiguration(1));
+            Assert.False(result.ConfigCache.HasConfiguration(2));
+            Assert.False(result.ConfigCache.HasConfiguration(3));
+            File.Delete(cacheFile);
+        }
     }
 }
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 4fc7021ccff..946650f6549 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -1053,7 +1053,7 @@ public void EndBuild()
 
             void SerializeCaches()
             {
-                var errorMessage = CacheSerialization.SerializeCaches(_configCache, _resultsCache, _buildParameters.OutputResultsCacheFile);
+                string errorMessage = CacheSerialization.SerializeCaches(_configCache, _resultsCache, _buildParameters.OutputResultsCacheFile, _buildParameters.IsolateProjects);
 
                 if (!string.IsNullOrEmpty(errorMessage))
                 {
diff --git a/src/Build/BackEnd/BuildManager/CacheSerialization.cs b/src/Build/BackEnd/BuildManager/CacheSerialization.cs
index 950182296ab..49bf88faae7 100644
--- a/src/Build/BackEnd/BuildManager/CacheSerialization.cs
+++ b/src/Build/BackEnd/BuildManager/CacheSerialization.cs
@@ -13,7 +13,7 @@ namespace Microsoft.Build.Execution
 {
     internal static class CacheSerialization
     {
-        public static string SerializeCaches(IConfigCache configCache, IResultsCache resultsCache, string outputCacheFile)
+        public static string SerializeCaches(IConfigCache configCache, IResultsCache resultsCache, string outputCacheFile, IsolateProjects isolateProjects)
         {
             ErrorUtilities.VerifyThrowInternalNull(outputCacheFile, nameof(outputCacheFile));
 
diff --git a/src/Build/BackEnd/Components/Caching/ConfigCache.cs b/src/Build/BackEnd/Components/Caching/ConfigCache.cs
index f2eac09484f..9e040deea9e 100644
--- a/src/Build/BackEnd/Components/Caching/ConfigCache.cs
+++ b/src/Build/BackEnd/Components/Caching/ConfigCache.cs
@@ -201,6 +201,14 @@ public void ClearConfigurations()
             }
         }
 
+        public int GetLowestConfigId()
+        {
+            lock (_lockObject)
+            {
+                return _configurations.OrderBy(kvp => kvp.Key).FirstOrDefault().Key;
+            }
+        }
+
         /// <summary>
         /// Gets the smallest configuration id of any configuration
         /// in this cache.
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index bac3fd5bac3..4a37b0aed28 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -367,8 +367,8 @@ public IEnumerable<ScheduleResponse> ReportResult(int nodeId, BuildResult result
 
             // Record these results to the cache only if they are not present in the
             // override cache, which can happen if we are building in isolation mode
-            // (IsolateProjects.Message), and the received result was built by a
-            // dependency, isolation-violating project.
+            // (IsolateProjects.Message), and the received result was built by an
+            // isolation-violating dependency project.
             if (_configCache is not ConfigCacheWithOverride || !((ConfigCacheWithOverride)_configCache).HasConfigurationInOverrideCache(result.ConfigurationId))
             {
                 _resultsCache.AddResult(result);
diff --git a/src/Shared/UnitTests/ObjectModelHelpers.cs b/src/Shared/UnitTests/ObjectModelHelpers.cs
index a8f02e7d2cc..a5d835e130b 100644
--- a/src/Shared/UnitTests/ObjectModelHelpers.cs
+++ b/src/Shared/UnitTests/ObjectModelHelpers.cs
@@ -1719,16 +1719,16 @@ internal static ProjectGraph CreateProjectGraph(
             var nodes = new Dictionary<int, (bool IsRoot, string ProjectPath)>();
 
             // add nodes with dependencies
-            foreach (var nodeDependencies in dependencyEdges)
+            foreach (var nodeWithDependencies in dependencyEdges)
             {
-                var parent = nodeDependencies.Key;
+                var parent = nodeWithDependencies.Key;
 
                 if (!nodes.ContainsKey(parent))
                 {
                     TransientTestFile file = createProjectFile(
                         env,
                         parent,
-                        nodeDependencies.Value,
+                        nodeWithDependencies.Value,
                         projectReferenceTargets: null,
                         defaultTargets: null,
                         extraContent: GetExtraContent(parent));
