diff --git a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
index cbfd97c5f83..6b7f22dc041 100644
--- a/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResolverService_Tests.cs
@@ -39,7 +39,7 @@ public SdkResolverService_Tests()
         [Fact]
         public void AssertAllResolverErrorsLoggedWhenSdkNotResolved()
         {
-            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy());
+            using ResettableSdkResolverServiceState state = new(SdkResolverService.Instance, new MockLoaderStrategy());
 
             SdkReference sdk = new SdkReference("notfound", "referencedVersion", "minimumVersion");
 
@@ -63,8 +63,8 @@ public void AssertResolutionWarnsIfResolvedVersionIsDifferentFromReferencedVersi
         {
             var sdk = new SdkReference("foo", "1.0.0", null);
 
-            SdkResolverService.Instance.InitializeForTests(
-                null,
+            using ResettableSdkResolverServiceState state = new(SdkResolverService.Instance,
+            null,
                 new List<SdkResolver>
                 {
                     new SdkUtilities.ConfigurableMockSdkResolver(
@@ -87,7 +87,7 @@ public void AssertResolutionWarnsIfResolvedVersionIsDifferentFromReferencedVersi
         [Fact]
         public void AssertResolverThrows()
         {
-            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy(includeErrorResolver: true));
+            using ResettableSdkResolverServiceState state = new(SdkResolverService.Instance, new MockLoaderStrategy(includeErrorResolver: true));
 
             SdkReference sdk = new SdkReference("1sdkName", "version1", "minimumVersion");
 
@@ -100,7 +100,7 @@ public void AssertResolverThrows()
         [Fact]
         public void AssertFirstResolverCanResolve()
         {
-            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy());
+            using ResettableSdkResolverServiceState state = new(SdkResolverService.Instance, new MockLoaderStrategy());
 
             SdkReference sdk = new SdkReference("1sdkName", "referencedVersion", "minimumVersion");
 
@@ -113,7 +113,7 @@ public void AssertFirstResolverCanResolve()
         [Fact]
         public void AssertFirstResolverErrorsSupressedWhenResolved()
         {
-            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy());
+            using ResettableSdkResolverServiceState state = new(SdkResolverService.Instance, new MockLoaderStrategy());
 
             // 2sdkName will cause MockSdkResolver1 to fail with an error reason. The error will not
             // be logged because MockSdkResolver2 will succeed.
@@ -137,7 +137,7 @@ public void AssertResolverHasStatePreserved()
         {
             const int submissionId = 5;
 
-            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy());
+            using ResettableSdkResolverServiceState state = new(SdkResolverService.Instance, new MockLoaderStrategy());
 
             SdkReference sdk = new SdkReference("othersdk", "1.0", "minimumVersion");
 
@@ -153,7 +153,7 @@ public void AssertResolverStateNotPreserved()
         {
             const int submissionId = BuildEventContext.InvalidSubmissionId;
 
-            SdkResolverService.Instance.InitializeForTests(new MockLoaderStrategy());
+            using ResettableSdkResolverServiceState state = new(SdkResolverService.Instance, new MockLoaderStrategy());
 
             SdkReference sdk = new SdkReference("othersdk", "1.0", "minimumVersion");
 
@@ -195,7 +195,7 @@ public void CachingWrapperShouldWarnWhenMultipleVersionsAreReferenced()
                     ));
 
             var service = new CachingSdkResolverService();
-            service.InitializeForTests(
+            using ResettableSdkResolverServiceState state = new(service, 
                 null,
                 new List<SdkResolver>
                 {
@@ -282,7 +282,7 @@ public void SdkResolverCanReturnNoPaths(bool includePropertiesAndItems)
                     warnings: null
                     ));
 
-            SdkResolverService.Instance.InitializeForTests(null, new List<SdkResolver>() { resolver });
+            using ResettableSdkResolverServiceState state = new(SdkResolverService.Instance, null, new List<SdkResolver>() { resolver });
 
             var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false);
 
@@ -319,7 +319,7 @@ public void SdkResultCanReturnPropertiesAndItems()
                     warnings: null
                     ));
 
-            SdkResolverService.Instance.InitializeForTests(null, new List<SdkResolver>() { resolver });
+            using ResettableSdkResolverServiceState state = new(SdkResolverService.Instance, null, new List<SdkResolver>() { resolver });
 
             var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false);
 
@@ -366,7 +366,7 @@ public void SdkResultCanReturnMultiplePaths(bool includePropertiesAndItems)
                     warnings: null
                     ));
 
-            SdkResolverService.Instance.InitializeForTests(null, new List<SdkResolver>() { resolver });
+            using ResettableSdkResolverServiceState state = new(SdkResolverService.Instance, null, new List<SdkResolver>() { resolver });
 
             var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false);
 
@@ -412,7 +412,7 @@ public void AssertResolutionWarnsIfResolvedVersionIsDifferentFromReferencedVersi
                     warnings: null
                     ));
 
-            SdkResolverService.Instance.InitializeForTests(null, new List<SdkResolver>() { resolver });
+            using ResettableSdkResolverServiceState state = new(SdkResolverService.Instance, null, new List<SdkResolver>() { resolver });
 
             var result = SdkResolverService.Instance.ResolveSdk(BuildEventContext.InvalidSubmissionId, sdk, _loggingContext, new MockElementLocation("file"), "sln", "projectPath", interactive: false, isRunningInVisualStudio: false);
 
@@ -451,7 +451,7 @@ public void CachingWrapperShouldOnlyResolveOnce()
                 ));
 
             var service = new CachingSdkResolverService();
-            service.InitializeForTests(
+            using ResettableSdkResolverServiceState state = new(service, 
                 null,
                 new List<SdkResolver>
                 {
@@ -480,7 +480,7 @@ public void InteractiveIsSetForResolverContext()
 
             var service = new CachingSdkResolverService();
 
-            service.InitializeForTests(
+            using ResettableSdkResolverServiceState state = new(service, 
                 resolvers: new List<SdkResolver>
                 {
                     new SdkUtilities.ConfigurableMockSdkResolver((sdkRference, resolverContext, factory) =>
@@ -511,7 +511,7 @@ public void IsRunningInVisualStudioIsSetForResolverContext()
             bool isRunningInVisualStudio = false;
 
             var service = new CachingSdkResolverService();
-            service.InitializeForTests(
+            using ResettableSdkResolverServiceState state = new(service, 
                 resolvers: new List<SdkResolver>
                 {
                     new SdkUtilities.ConfigurableMockSdkResolver((sdkRference, resolverContext, factory) =>
diff --git a/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs b/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs
index 562ac26f280..12258d8ada5 100644
--- a/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/SdkResultOutOfProc_Tests.cs
@@ -17,6 +17,8 @@
 using System.Linq;
 using Xunit;
 using Xunit.Abstractions;
+
+using static Microsoft.Build.Engine.UnitTests.BackEnd.SdkResolverService_Tests;
 using static Microsoft.Build.UnitTests.ObjectModelHelpers;
 
 namespace Microsoft.Build.UnitTests.BackEnd
@@ -112,7 +114,7 @@ public void RunOutOfProcBuild()
             string projectPath = Path.Combine(projectFolder, "TestProject.proj");
             File.WriteAllText(projectPath, CleanupFileContents(contents));
 
-            ProjectInstance projectInstance = CreateProjectInstance(projectPath, MSBuildDefaultToolsVersion, _projectCollection);
+            using var state = CreateProjectInstance(projectPath, MSBuildDefaultToolsVersion, _projectCollection, out ProjectInstance projectInstance);
 
             var data = new BuildRequestData(projectInstance, new[] { "GetCurrentProcessId", "GetResolverResults" }, _projectCollection.HostServices);
             var customparameters = new BuildParameters { EnableNodeReuse = false, Loggers = new ILogger[] { _logger } };
@@ -157,7 +159,7 @@ public void RunOutOfProcBuildWithTwoProjects()
             string projectWithSdkImportPath = Path.Combine(projectFolder, "ProjectWithSdkImport.proj");
             File.WriteAllText(projectWithSdkImportPath, CleanupFileContents(projectWithSdkImportContents));
 
-            ProjectInstance projectInstance = CreateProjectInstance(entryProjectPath, MSBuildDefaultToolsVersion, _projectCollection);
+            using var state = CreateProjectInstance(entryProjectPath, MSBuildDefaultToolsVersion, _projectCollection, out ProjectInstance projectInstance);
 
             var data = new BuildRequestData(projectInstance, new[] { "GetCurrentProcessId", "GetResolverResults" }, _projectCollection.HostServices);
             var customparameters = new BuildParameters { EnableNodeReuse = false, Loggers = new ILogger[] { _logger } };
@@ -200,11 +202,12 @@ IEnumerable<string> GetResolverResults(string type)
             GetResolverResults("SdksImported").ShouldBeSameIgnoringOrder(new[] { "Sdk1", "Sdk2" });
         }
 
-        private ProjectInstance CreateProjectInstance(string projectPath, string toolsVersion, ProjectCollection projectCollection)
+        private ResettableSdkResolverServiceState CreateProjectInstance(string projectPath, string toolsVersion, ProjectCollection projectCollection, out ProjectInstance instance)
         {
-            var sdkResolver = SetupSdkResolver(Path.GetDirectoryName(projectPath));
+            var (sdkResolver, state) = SetupSdkResolver(Path.GetDirectoryName(projectPath));
 
-            var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(sdkResolver);
+            // No need to store the state object here: it would restore to the state of the one above.
+            SdkUtilities.CreateProjectOptionsWithResolver(sdkResolver, out var projectOptions);
 
             projectOptions.ProjectCollection = projectCollection;
             projectOptions.ToolsVersion = toolsVersion;
@@ -213,10 +216,12 @@ private ProjectInstance CreateProjectInstance(string projectPath, string toolsVe
 
             Project project = Project.FromProjectRootElement(projectRootElement, projectOptions);
 
-            return project.CreateProjectInstance(ProjectInstanceSettings.None, projectOptions.EvaluationContext);
+            instance= project.CreateProjectInstance(ProjectInstanceSettings.None, projectOptions.EvaluationContext);
+
+            return state;
         }
 
-        private SdkResolver SetupSdkResolver(string projectFolder)
+        private (SdkResolver, ResettableSdkResolverServiceState) SetupSdkResolver(string projectFolder)
         {
             Directory.CreateDirectory(Path.Combine(projectFolder, "Sdk1"));
             Directory.CreateDirectory(Path.Combine(projectFolder, "Sdk2"));
@@ -256,21 +261,23 @@ private SdkResolver SetupSdkResolver(string projectFolder)
                         warnings: null
                     ));
 
+            ResettableSdkResolverServiceState state = new();
+
             EvaluationContext.TestOnlyHookOnCreate = context =>
             {
                 var sdkService = (SdkResolverService)context.SdkResolverService;
 
-                sdkService.InitializeForTests(null, new List<SdkResolver> { sdkResolver });
+                state.Initialize(sdkService, null, new List<SdkResolver> { sdkResolver });
             };
 
             ((IBuildComponentHost)_buildManager).RegisterFactory(BuildComponentType.SdkResolverService, type =>
             {
                 var resolverService = new MainNodeSdkResolverService();
-                resolverService.InitializeForTests(null, new List<SdkResolver> { sdkResolver });
+                state.Initialize(resolverService, null, new List<SdkResolver> { sdkResolver });
                 return resolverService;
             });
 
-            return sdkResolver;
+            return (sdkResolver, state);
         }
     }
 }
diff --git a/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs b/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
index 3f42d9bd664..6af8b604d47 100644
--- a/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
@@ -845,10 +845,11 @@ public void SdkImportsAreInPreprocessedOutput()
             {
                 string testSdkDirectory = env.CreateFolder().Path;
 
-                var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.FileBasedMockSdkResolver(new Dictionary<string, string>
+                using var state = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.FileBasedMockSdkResolver(new Dictionary<string, string>
                 {
                     {"MSBuildUnitTestSdk", testSdkDirectory}
-                }));
+                }),
+                out var projectOptions);
 
 
                 string sdkPropsPath = Path.Combine(testSdkDirectory, "Sdk.props");
@@ -949,7 +950,7 @@ public void SdkResolverItemsAndPropertiesAreInPreprocessedOutput()
                     }
                 };
 
-                var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(
+                using var state = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(
                     new Build.BackEnd.SdkResolution.SdkResult(
                         new SdkReference("TestPropsAndItemsFromResolverSdk", null, null),
                         new [] { testDirectory},
@@ -957,7 +958,8 @@ public void SdkResolverItemsAndPropertiesAreInPreprocessedOutput()
                         propertiesToAdd,
                         itemsToAdd,
                         warnings: null
-                        )));
+                        )),
+                    out var projectOptions);
 
                 string content = @"<Project>
 <Import Project='Import.props' Sdk='TestPropsAndItemsFromResolverSdk' />
@@ -1051,11 +1053,12 @@ public void ImportedProjectsSdkImportsAreInPreprocessedOutput()
                 string sdk1 = env.CreateFolder().Path;
                 string sdk2 = env.CreateFolder().Path;
 
-                var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.FileBasedMockSdkResolver(new Dictionary<string, string>
+                var state = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.FileBasedMockSdkResolver(new Dictionary<string, string>
                 {
                     {"MSBuildUnitTestSdk1", sdk1},
                     {"MSBuildUnitTestSdk2", sdk2},
-                }));
+                }),
+                out var projectOptions);
 
                 string sdkPropsPath1 = Path.Combine(sdk1, "Sdk.props");
                 string sdkTargetsPath1 = Path.Combine(sdk1, "Sdk.targets");
diff --git a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
index ed3030d0aa9..5d991a1880b 100644
--- a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
@@ -340,7 +340,8 @@ public void ProjectResolverContextRefersToBuildingProject(string projectFormatSt
 
             // Use custom SDK resolution to ensure resolver context is logged.
             var mapping = new Dictionary<string, string> { { SdkName, _testSdkDirectory } };
-            var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.FileBasedMockSdkResolver(mapping));
+            using var state = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.FileBasedMockSdkResolver(mapping),
+                out var projectOptions);
 
             // Create a normal project (p1) which imports an SDK style project (p2).
             var projectFolder = _env.CreateFolder().Path;
@@ -622,8 +623,9 @@ internal void SdkPropertiesAreExpanded(SdkPropertiesAreExpandedCase data)
                 null
             );
 
-            var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(
-                new MockExpandedSdkResolver(_testSdkDirectory)
+            using var state = SdkUtilities.CreateProjectOptionsWithResolver(
+                new MockExpandedSdkResolver(_testSdkDirectory),
+                out var projectOptions
             );
 
             void AddProperty(string name, string value) =>
diff --git a/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs b/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs
index e40e6a6d93a..5ab915eb0fc 100644
--- a/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/SdkResultEvaluation_Tests.cs
@@ -110,7 +110,7 @@ public void SdkResolverCanReturnNoPaths(bool includePropertiesAndItems)
                 CreateMockSdkResultPropertiesAndItems(out propertiesToAdd, out itemsToAdd);
             }
 
-            var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(
+            using var state = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(
                 new Build.BackEnd.SdkResolution.SdkResult(
                         new SdkReference("TestPropsAndItemsFromResolverSdk", null, null),
                         Enumerable.Empty<string>(),
@@ -118,7 +118,8 @@ public void SdkResolverCanReturnNoPaths(bool includePropertiesAndItems)
                         propertiesToAdd,
                         itemsToAdd,
                         warnings: null
-                    ))
+                    )),
+                out var projectOptions
                 );
 
             string projectContent = @"
@@ -168,7 +169,8 @@ public void SdkResolverCanReturnSinglePath(bool includePropertiesAndItems, bool
                     itemsToAdd,
                     warnings: null);
 
-            var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(sdkResult));
+            using var state = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(sdkResult),
+                out var projectOptions);
 
             string projectContent = @"
                     <Project>
@@ -246,7 +248,7 @@ public void SdkResolverCanReturnMultiplePaths(bool includePropertiesAndItems)
                 CreateMockSdkResultPropertiesAndItems(out propertiesToAdd, out itemsToAdd);
             }
 
-            var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(
+            using var state = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(
                 new Build.BackEnd.SdkResolution.SdkResult(
                         new SdkReference("TestPropsAndItemsFromResolverSdk", null, null),
                         new[] {
@@ -257,7 +259,8 @@ public void SdkResolverCanReturnMultiplePaths(bool includePropertiesAndItems)
                         propertiesToAdd,
                         itemsToAdd,
                         warnings: null
-                    ))
+                    )),
+                out var projectOptions
                 );
 
             string projectContent = @"
@@ -350,7 +353,7 @@ public void SdkResolverCanReturnTheSamePropertiesAndItemsMultipleTimes()
             Dictionary<string, SdkResultItem> itemsToAdd;
             CreateMockSdkResultPropertiesAndItems(out propertiesToAdd, out itemsToAdd);
 
-            var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(
+            using var state = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(
                 new Build.BackEnd.SdkResolution.SdkResult(
                         new SdkReference("TestPropsAndItemsFromResolverSdk", null, null),
                         new[] { Path.Combine(_testFolder, "Sdk") },
@@ -358,7 +361,8 @@ public void SdkResolverCanReturnTheSamePropertiesAndItemsMultipleTimes()
                         propertiesToAdd,
                         itemsToAdd,
                         warnings: null
-                    ))
+                    )),
+                out var projectOptions
                 );
 
             string projectContent = @"
@@ -434,7 +438,7 @@ public void SdkResolverCanReturnSpecialCharacters()
                 }
             };
 
-            var projectOptions = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(
+            using var state = SdkUtilities.CreateProjectOptionsWithResolver(new SdkUtilities.ConfigurableMockSdkResolver(
                 new Build.BackEnd.SdkResolution.SdkResult(
                         new SdkReference("TestSpecialCharactersFromSdkResolver", null, null),
                         Enumerable.Empty<string>(),
@@ -442,7 +446,8 @@ public void SdkResolverCanReturnSpecialCharacters()
                         propertiesToAdd,
                         itemsToAdd,
                         warnings: null
-                    ))
+                    )),
+                out var projectOptions
                 );
 
             string projectContent = @"
diff --git a/src/Build.UnitTests/InternalEngineHelpers.cs b/src/Build.UnitTests/InternalEngineHelpers.cs
index aa0ae0c34be..f32ff79bd5e 100644
--- a/src/Build.UnitTests/InternalEngineHelpers.cs
+++ b/src/Build.UnitTests/InternalEngineHelpers.cs
@@ -22,16 +22,19 @@ namespace Microsoft.Build.Unittest
 {
     internal static class SdkUtilities
     {
-        public static ProjectOptions CreateProjectOptionsWithResolver(SdkResolver resolver)
+        public static ResettableSdkResolverServiceState CreateProjectOptionsWithResolver(SdkResolver resolver, out ProjectOptions options)
         {
             var context = EvaluationContext.Create(EvaluationContext.SharingPolicy.Isolated);
             var sdkService = (SdkResolverService)context.SdkResolverService;
-            sdkService.InitializeForTests(null, new List<SdkResolver>() { resolver });
 
-            return new ProjectOptions
+            ResettableSdkResolverServiceState state = new ResettableSdkResolverServiceState(sdkService, null, new List<SdkResolver>() { resolver });
+
+            options = new ProjectOptions
             {
                 EvaluationContext = context
             };
+
+            return state;
         }
 
         internal class ConfigurableMockSdkResolver : SdkResolver
@@ -184,4 +187,50 @@ internal static void AssertTargetResultsEqual(TargetResult a, TargetResult b)
             }
         }
     }
+
+    /// <summary>
+    /// Helper disposable class to reset <see cref="SdkResolverService"/> state.
+    /// </summary>
+    internal class ResettableSdkResolverServiceState : IDisposable
+    {
+        private SdkResolverService _service;
+        private MainNodeSdkResolverService _mainNodeService;
+
+        public ResettableSdkResolverServiceState()
+        { }
+
+        public ResettableSdkResolverServiceState(ISdkResolverService service, SdkResolverLoader resolverLoader = null, IList<SdkResolver> resolvers = null)
+        {
+            switch (service)
+            {
+                case SdkResolverService sdkResolverService:
+                    Initialize(sdkResolverService, resolverLoader, resolvers);
+                    break;
+                case MainNodeSdkResolverService mainNodeService:
+                    Initialize(mainNodeService, resolverLoader, resolvers);
+                    break;
+                default:
+                    throw new NotImplementedException($"Unknown type; extend {nameof(ResettableSdkResolverServiceState)} to support {service.GetType}");
+            }
+        }
+
+        public void Initialize(SdkResolverService sdkResolverService, SdkResolverLoader resolverLoader = null, IList<SdkResolver> resolvers = null)
+        {
+            sdkResolverService.InitializeForTests(resolverLoader, resolvers);
+            _service = sdkResolverService;
+        }
+
+        public void Initialize(MainNodeSdkResolverService mainNodeService, SdkResolverLoader resolverLoader = null, IList<SdkResolver> resolvers = null)
+        {
+            mainNodeService.InitializeForTests(resolverLoader, resolvers);
+            _mainNodeService = mainNodeService;
+        }
+
+
+        public void Dispose()
+        {
+            _service?.InitializeForTests(resolverLoader: null, resolvers: null);
+            _mainNodeService?.InitializeForTests(resolverLoader: null, resolvers: null);
+        }
+    }
 }
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 6f90dacaeb4..133ce579aae 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -28,7 +28,7 @@ internal class SdkResolverService : ISdkResolverService
         /// <summary>
         /// A lock object used for this class.
         /// </summary>
-        private readonly object _lockObject = new object();
+        private static readonly object _lockObject = new object();
 
         /// <summary>
         /// Stores resolver state by build submission ID.
@@ -38,12 +38,17 @@ internal class SdkResolverService : ISdkResolverService
         /// <summary>
         /// Stores the list of SDK resolvers which were loaded.
         /// </summary>
-        private IList<SdkResolver> _resolvers;
+        /// <remarks>
+        /// This list is not expected to change within an MSBuild process lifetime, since
+        /// that would require adding/removing files from the MSBuild directory.
+        /// </remarks>
+        private static IList<SdkResolver> s_resolvers;
 
         /// <summary>
-        /// Stores an <see cref="SdkResolverLoader"/> which can load registered SDK resolvers.
+        /// Overrides the default <see cref="SdkResolverLoader"/> when set from
+        /// <see cref="InitializeForTests(SdkResolverLoader, IList{SdkResolver})"/>.
         /// </summary>
-        private SdkResolverLoader _sdkResolverLoader = new SdkResolverLoader();
+        private SdkResolverLoader _sdkResolverLoader = null;
 
         public SdkResolverService()
         {
@@ -90,7 +95,7 @@ public virtual void ClearCaches()
         public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
             // Lazy initialize the SDK resolvers
-            if (_resolvers == null)
+            if (s_resolvers == null)
             {
                 Initialize(loggingContext, sdkReferenceLocation);
             }
@@ -102,7 +107,7 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC
 
             loggingContext.LogComment(MessageImportance.Low, "SdkResolving", sdk.ToString());
 
-            foreach (SdkResolver sdkResolver in _resolvers)
+            foreach (SdkResolver sdkResolver in s_resolvers)
             {
                 SdkResolverContext context = new SdkResolverContext(buildEngineLogger, projectPath, solutionPath, ProjectCollection.Version, interactive, isRunningInVisualStudio)
                 {
@@ -181,12 +186,9 @@ public virtual SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingC
         /// <param name="resolvers">Explicit set of SdkResolvers to use for all SDK resolution.</param>
         internal void InitializeForTests(SdkResolverLoader resolverLoader = null, IList<SdkResolver> resolvers = null)
         {
-            if (resolverLoader != null)
-            {
-                _sdkResolverLoader = resolverLoader;
-            }
+            _sdkResolverLoader = resolverLoader;
 
-            _resolvers = resolvers;
+            s_resolvers = resolvers;
         }
 
         private static void LogWarnings(LoggingContext loggingContext, ElementLocation location, SdkResult result)
@@ -227,12 +229,15 @@ private void Initialize(LoggingContext loggingContext, ElementLocation location)
         {
             lock (_lockObject)
             {
-                if (_resolvers != null)
+                if (s_resolvers != null)
                 {
                     return;
                 }
 
-                _resolvers = _sdkResolverLoader.LoadResolvers(loggingContext, location);
+                // In normal operation, we only need a transient SdkResolverLoader
+                // to load the resolvers and then go away. Tests may use a special
+                // _sdkResolverLoader set in InitializeForTests, though.
+                s_resolvers = (_sdkResolverLoader ?? new SdkResolverLoader()).LoadResolvers(loggingContext, location);
             }
         }
 
@@ -241,7 +246,7 @@ private void SetResolverState(int submissionId, SdkResolver resolver, object sta
             // Do not set state for resolution requests that are not associated with a valid build submission ID
             if (submissionId != BuildEventContext.InvalidSubmissionId)
             {
-                ConcurrentDictionary<SdkResolver, object> resolverState = _resolverStateBySubmission.GetOrAdd(submissionId, new ConcurrentDictionary<SdkResolver, object>(NativeMethodsShared.GetLogicalCoreCount(), _resolvers.Count));
+                ConcurrentDictionary<SdkResolver, object> resolverState = _resolverStateBySubmission.GetOrAdd(submissionId, new ConcurrentDictionary<SdkResolver, object>(NativeMethodsShared.GetLogicalCoreCount(), s_resolvers.Count));
 
                 resolverState.AddOrUpdate(resolver, state, (sdkResolver, obj) => state);
             }
