diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index 3981b1135c5..f89e43229c3 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -21,6 +21,9 @@ namespace Microsoft.Build.Graph
 {
     internal sealed class ProjectInterpretation
     {
+        private const string PlatformLookupTableMetadataName = "PlatformLookupTable";
+        private const string PlatformMetadataName = "Platform";
+        private const string PlatformsMetadataName = "Platforms";
         private const string EnableDynamicPlatformResolutionMetadataName  = "EnableDynamicPlatformResolution";
         private const string FullPathMetadataName = "FullPath";
         private const string ToolsVersionMetadataName = "ToolsVersion";
@@ -234,7 +237,16 @@ ProjectItemInstance projectReference
                 // a traversal in which EnableDynamicPlatformResolution is turned on
                 if (ConversionUtilities.ValidBooleanTrue(projectReference.Project.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)) && String.IsNullOrEmpty(projectReference.GetMetadataValue(SetPlatformMetadataName)))
                 {
-                    var SelectedPlatform = PlatformNegotiation.GetNearestPlatform(projectReference);    
+
+                    var referencedProject = new Project(projectReference.EvaluatedInclude);
+                    var projectReferencePlatformMetadata = referencedProject.GetPropertyValue(PlatformsMetadataName);
+                    var projectReferenceLookupTableMetadata = referencedProject.GetPropertyValue(PlatformLookupTableMetadataName);
+                    var currentProjectPlatformMetadata = projectReference.Project.GetPropertyValue(PlatformMetadataName);
+                    var currentPlatformLookupTableMetadata = projectReference.Project.GetPropertyValue(PlatformLookupTableMetadataName);
+                    var projectPath = projectReference.EvaluatedInclude;
+
+
+                    var SelectedPlatform = PlatformNegotiation.GetNearestPlatform(projectReferencePlatformMetadata, projectReferenceLookupTableMetadata, currentProjectPlatformMetadata, currentPlatformLookupTableMetadata, projectPath);    
                     projectReference.SetMetadata("SetPlatform", $"Platform={SelectedPlatform}");
                 }
                 // TODO: Mimic AssignProjectConfiguration's behavior for determining the values for these.
diff --git a/src/Shared/PlatformNegotiation.cs b/src/Shared/PlatformNegotiation.cs
index 94d854fcd84..b7ead5c8a0b 100644
--- a/src/Shared/PlatformNegotiation.cs
+++ b/src/Shared/PlatformNegotiation.cs
@@ -6,8 +6,6 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Utilities;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Execution;
 using Microsoft.Build.Evaluation;
 
 namespace Microsoft.Build.Shared
@@ -19,21 +17,9 @@ namespace Microsoft.Build.Shared
     /// </summary>
     static internal class PlatformNegotiation
     {
-        private const string PlatformLookupTableMetadataName = "PlatformLookupTable";
-        private const string PlatformMetadataName = "Platform";
-        private const string PlatformsMetadataName = "Platforms";
-        internal static string? GetNearestPlatform(ProjectItemInstance projectReference, TaskLoggingHelper? Log = null)
-        {
-
-            var referencedProject = new Project(projectReference.EvaluatedInclude);
-            var projectReferencePlatformMetadata = referencedProject.GetPropertyValue(PlatformsMetadataName);
-            var projectReferenceLookupTableMetadata = referencedProject.GetPropertyValue(PlatformLookupTableMetadataName);
-            var currentProjectPlatformMetadata = projectReference.Project.GetPropertyValue(PlatformMetadataName);
-            var currentPlatformLookupTableMetadata = projectReference.Project.GetPropertyValue(PlatformLookupTableMetadataName);
-            var projectPath = projectReference.EvaluatedInclude;
-
-
 
+        internal static string? GetNearestPlatform(String projectReferencePlatformMetadata, String projectReferenceLookupTableMetadata, String currentProjectPlatformMetadata, String currentPlatformLookupTableMetadata, String projectPath, TaskLoggingHelper? Log = null)
+        {
 
             Dictionary<string, string>? currentProjectLookupTable = ExtractLookupTable(currentPlatformLookupTableMetadata, Log);
 
@@ -89,10 +75,6 @@ static internal class PlatformNegotiation
             return buildProjectReferenceAs;
         }
 
-        internal static void test(ProjectItemInstance stringTable)
-        {
-            Console.Write("hello");
-        }
 
         internal static Dictionary<string, string>? ExtractLookupTable(string stringTable, TaskLoggingHelper? Log = null)
         {
diff --git a/src/Tasks/GetCompatiblePlatform.cs b/src/Tasks/GetCompatiblePlatform.cs
index 6815f2f89a6..6028e300cff 100644
--- a/src/Tasks/GetCompatiblePlatform.cs
+++ b/src/Tasks/GetCompatiblePlatform.cs
@@ -1,7 +1,6 @@
 ï»¿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
-using Microsoft.Build.Execution;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Utilities;
@@ -57,14 +56,13 @@ public override bool Execute()
             for (int i = 0; i < AnnotatedProjects.Length; i++)
             {
                 AssignedProjectsWithPlatform[i] = new TaskItem(AnnotatedProjects[i]);
-
+                
                 string projectReferencePlatformMetadata = AssignedProjectsWithPlatform[i].GetMetadata("Platforms");
 
                 string projectReferenceLookupTableMetadata = AssignedProjectsWithPlatform[i].GetMetadata("PlatformLookupTable");
                 // Pull platformlookuptable metadata from the referenced project. This allows custom
                 // mappings on a per-ProjectReference basis.
-                var projectReference = (ProjectItemInstance)AssignedProjectsWithPlatform[i];
-                string? buildProjectReferenceAs = PlatformNegotiation.GetNearestPlatform(projectReference, Log);
+                string? buildProjectReferenceAs = PlatformNegotiation.GetNearestPlatform(projectReferencePlatformMetadata, projectReferenceLookupTableMetadata , CurrentProjectPlatform, PlatformLookupTable, AssignedProjectsWithPlatform[i].ItemSpec, Log);
                 
                 AssignedProjectsWithPlatform[i].SetMetadata("NearestPlatform", buildProjectReferenceAs);
                 Log.LogMessageFromResources(MessageImportance.Low, "GetCompatiblePlatform.DisplayChosenPlatform", AssignedProjectsWithPlatform[i].ItemSpec, buildProjectReferenceAs);
diff --git a/src/Tasks/Microsoft.Build.Tasks.csproj b/src/Tasks/Microsoft.Build.Tasks.csproj
index a2c25574dc1..dc093743590 100644
--- a/src/Tasks/Microsoft.Build.Tasks.csproj
+++ b/src/Tasks/Microsoft.Build.Tasks.csproj
@@ -968,7 +968,6 @@
   <ItemGroup>
     <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" SetTargetFramework="TargetFramework=netstandard2.0" OutputItemType="NetstandardRefAssemblies" />
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" SetTargetFramework="TargetFramework=netstandard2.0" OutputItemType="NetstandardRefAssemblies" />
-    <ProjectReference Include="..\Build\Microsoft.Build.csproj" SetTargetFramework="TargetFramework=net472" OutputItemType="NetstandardRefAssemblies" />
     <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj"/>
     <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj"/>
     <ProjectReference Include="..\StringTools\StringTools.csproj" />
