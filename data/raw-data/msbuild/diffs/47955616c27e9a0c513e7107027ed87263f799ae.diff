diff --git a/src/Build.UnitTests/TerminalLoggerConfiguration_Tests.cs b/src/Build.UnitTests/TerminalLoggerConfiguration_Tests.cs
index 84e458f6a54..5566ca75c81 100644
--- a/src/Build.UnitTests/TerminalLoggerConfiguration_Tests.cs
+++ b/src/Build.UnitTests/TerminalLoggerConfiguration_Tests.cs
@@ -113,7 +113,6 @@ public void TerminalLoggerWithTlAutoIsOff(string tlValue)
         ShouldNotBeTerminalLog(output);
     }
 
-
     [Fact]
     public void TerminalLoggerDefaultByEnv()
     {
@@ -232,6 +231,30 @@ public void TerminalLoggerDefaultOff(string defaultValue)
         ShouldNotBeTerminalLog(output);
     }
 
+    [WindowsFullFrameworkOnlyTheory]
+    [InlineData("1")]
+    [InlineData("0")]
+    public void TerminalLoggerOnInvalidProjectBuild(string msbuildinprocnodeState)
+    {
+        var projectFile = _env.CreateFile(_env.CreateFolder(createFolder: true), "myProjBroken.proj", $"""
+            <Project>
+              <Target Name='Build'>
+                <RegisterAssembly Assemblies="nonexistent.dll" />
+              </Target>
+            </Project>
+            """);
+        string cmd = $"{projectFile.Path} -logger:{typeof(MockLogger).FullName},{typeof(MockLogger).Assembly.Location};ReportTelemetry";
+        _env.SetEnvironmentVariable("MSBUILDNOINPROCNODE", msbuildinprocnodeState);
+
+        string output = RunnerUtilities.ExecMSBuild(
+            $"{cmd} -tl:true",
+            out bool success);
+
+        success.ShouldBeFalse();
+        ShouldBeTerminalLog(output);
+        output.ShouldContain("Cannot register assembly \"nonexistent.dll\" - file doesn't exist.");
+    }
+
     private static void ShouldBeTerminalLog(string output) => output.ShouldContain("\x1b[?25l");
     private static void ShouldNotBeTerminalLog(string output) => output.ShouldNotContain("\x1b[?25l");
 }
diff --git a/src/MSBuild/TerminalLogger/TerminalLogger.cs b/src/MSBuild/TerminalLogger/TerminalLogger.cs
index 0d5d5cd2b09..ddb33d36fec 100644
--- a/src/MSBuild/TerminalLogger/TerminalLogger.cs
+++ b/src/MSBuild/TerminalLogger/TerminalLogger.cs
@@ -339,10 +339,7 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
         // Mark node idle until something uses it again
         if (_restoreContext is null)
         {
-            lock (_lock)
-            {
-                _nodes[NodeIndexForContext(buildEventContext)] = null;
-            }
+            UpdateNodeStatus(buildEventContext, null);
         }
 
         ProjectContext c = new(buildEventContext);
@@ -494,9 +491,18 @@ private void TargetStarted(object sender, TargetStartedEventArgs e)
 
             string projectFile = Path.GetFileNameWithoutExtension(e.ProjectFile);
             NodeStatus nodeStatus = new(projectFile, project.TargetFramework, e.TargetName, project.Stopwatch);
-            lock (_lock)
+            UpdateNodeStatus(buildEventContext, nodeStatus);
+        }
+    }
+
+    private void UpdateNodeStatus(BuildEventContext buildEventContext, NodeStatus? nodeStatus)
+    {
+        lock (_lock)
+        {
+            int nodeIndex = NodeIndexForContext(buildEventContext);
+            if (_nodes != null && _nodes.Length - 1 >= nodeIndex)
             {
-                _nodes[NodeIndexForContext(buildEventContext)] = nodeStatus;
+                _nodes[nodeIndex] = nodeStatus;
             }
         }
     }
@@ -517,10 +523,7 @@ private void TaskStarted(object sender, TaskStartedEventArgs e)
         if (_restoreContext is null && buildEventContext is not null && e.TaskName == "MSBuild")
         {
             // This will yield the node, so preemptively mark it idle
-            lock (_lock)
-            {
-                _nodes[NodeIndexForContext(buildEventContext)] = null;
-            }
+            UpdateNodeStatus(buildEventContext, null);
 
             if (_projects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
             {
