diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 781ec24739f..94c77e619f9 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -369,7 +369,7 @@ bool ITaskExecutionHost.SetTaskParameters(IDictionary<string, (string, ElementLo
 
             if (this.TaskInstance is IIncrementalTask incrementalTask)
             {
-                incrementalTask.SetQuestion(_buildComponentHost.BuildParameters.Question);
+                incrementalTask.Question = _buildComponentHost.BuildParameters.Question;
             }
 
             if (taskInitialized)
diff --git a/src/Framework/IIncrementalTask.cs b/src/Framework/IIncrementalTask.cs
index a7cfa3ba29f..feb30733575 100644
--- a/src/Framework/IIncrementalTask.cs
+++ b/src/Framework/IIncrementalTask.cs
@@ -10,6 +10,6 @@ namespace Microsoft.Build.Framework
     /// </summary>
     public interface IIncrementalTask
     {
-        void SetQuestion(bool question);
+        bool Question { set; }
     }
 }
diff --git a/src/Tasks.UnitTests/Copy_Tests.cs b/src/Tasks.UnitTests/Copy_Tests.cs
index 9c239e6aac7..89314eabd1f 100644
--- a/src/Tasks.UnitTests/Copy_Tests.cs
+++ b/src/Tasks.UnitTests/Copy_Tests.cs
@@ -159,7 +159,7 @@ public void QuestionCopyFile()
                     UseHardlinksIfPossible = UseHardLinks,
                     UseSymboliclinksIfPossible = UseSymbolicLinks,
                 };
-                t.SetQuestion(true);
+                t.Question = true;
 
                 Assert.False(t.Execute(m.CopyFile, _parallelismThreadCount));
 
@@ -219,7 +219,7 @@ public void QuestionCopyFileSameContent()
                     UseSymboliclinksIfPossible = UseSymbolicLinks,
                     SkipUnchangedFiles = true,
                 };
-                t.SetQuestion(true);
+                t.Question = true;
                 Assert.True(t.Execute(m.CopyFile, _parallelismThreadCount));
 
                 // Expect for there to have been no copies.
@@ -270,7 +270,7 @@ public void QuestionCopyFileNotSameContent()
                     UseSymboliclinksIfPossible = UseSymbolicLinks,
                     SkipUnchangedFiles = true,
                 };
-                t.SetQuestion(true);
+                t.Question = true;
 
                 Assert.False(t.Execute(m.CopyFile, _parallelismThreadCount));
 
diff --git a/src/Tasks.UnitTests/MakeDir_Tests.cs b/src/Tasks.UnitTests/MakeDir_Tests.cs
index 6547e51cc29..a173dbd84a4 100644
--- a/src/Tasks.UnitTests/MakeDir_Tests.cs
+++ b/src/Tasks.UnitTests/MakeDir_Tests.cs
@@ -184,7 +184,7 @@ public void QuestionCreateNewDirectory()
                 MakeDir t = new MakeDir();
                 MockEngine engine = new MockEngine();
                 t.BuildEngine = engine;
-                t.SetQuestion(true);
+                t.Question = true;
                 t.Directories = dirList;
 
                 bool success = t.Execute();
@@ -206,7 +206,7 @@ public void QuestionCreateNewDirectory()
 
                 // Question an existing directory should return true.
                 engine.Log = "";
-                t.SetQuestion(true);
+                t.Question = true;
                 success = t.Execute();
                 Assert.True(success);
 
diff --git a/src/Tasks.UnitTests/RemoveDir_Tests.cs b/src/Tasks.UnitTests/RemoveDir_Tests.cs
index 4dbbeb49d29..f9102cdca37 100644
--- a/src/Tasks.UnitTests/RemoveDir_Tests.cs
+++ b/src/Tasks.UnitTests/RemoveDir_Tests.cs
@@ -62,7 +62,7 @@ public void SimpleDelete()
                     Directories = list.ToArray(),
                     BuildEngine = new MockEngine(_output),
                 };
-                t.SetQuestion(true);
+                t.Question = true;
                 t.Execute().ShouldBeFalse();
 
                 RemoveDir t2 = new RemoveDir()
@@ -84,7 +84,7 @@ public void SimpleDelete()
                     Directories = list.ToArray(),
                     BuildEngine = new MockEngine(_output),
                 };
-                t3.SetQuestion(true);
+                t3.Question = true;
                 t3.Execute().ShouldBeTrue();
             }
         }
diff --git a/src/Tasks.UnitTests/Touch_Tests.cs b/src/Tasks.UnitTests/Touch_Tests.cs
index 8bd561e9e3f..1ae983f0e2c 100644
--- a/src/Tasks.UnitTests/Touch_Tests.cs
+++ b/src/Tasks.UnitTests/Touch_Tests.cs
@@ -342,7 +342,7 @@ public void QuestionTouchNonExisting()
             Touch t = new Touch();
             MockEngine engine = new MockEngine();
             t.BuildEngine = engine;
-            t.SetQuestion(true);
+            t.Question = true;
 
             t.Files = new ITaskItem[]
             {
@@ -368,7 +368,7 @@ public void QuestionTouchNonExistingAlwaysCreate()
             Touch t = new Touch();
             MockEngine engine = new MockEngine();
             t.BuildEngine = engine;
-            t.SetQuestion(true);
+            t.Question = true;
             t.AlwaysCreate = true;
             t.Files = new ITaskItem[]
             {
@@ -393,7 +393,7 @@ public void QuestionTouchExisting()
             Touch t = new Touch();
             MockEngine engine = new MockEngine();
             t.BuildEngine = engine;
-            t.SetQuestion(true);
+            t.Question = true;
             t.Files = new ITaskItem[]
             {
                 new TaskItem(myexisting_txt)
diff --git a/src/Tasks.UnitTests/Unzip_Tests.cs b/src/Tasks.UnitTests/Unzip_Tests.cs
index ffc39b0c2d0..e7f7f50a6e9 100644
--- a/src/Tasks.UnitTests/Unzip_Tests.cs
+++ b/src/Tasks.UnitTests/Unzip_Tests.cs
@@ -68,7 +68,7 @@ public void CanUnzip()
                     SkipUnchangedFiles = false,
                     SourceFiles = new ITaskItem[] { new TaskItem(zipArchive.Path) }
                 };
-                unzip.SetQuestion(true);
+                unzip.Question = true;
                 unzip.Execute().ShouldBeFalse(() => _mockEngine.Log);
                 _mockEngine.Log = string.Empty;
 
@@ -81,7 +81,7 @@ public void CanUnzip()
                     SkipUnchangedFiles = false,
                     SourceFiles = new ITaskItem[] { new TaskItem(zipArchive.Path) }
                 };
-                unzip2.SetQuestion(false);
+                unzip2.Question = true;
                 unzip2.Execute().ShouldBeTrue(() => _mockEngine.Log);
 
                 _mockEngine.Log.ShouldContain(Path.Combine(destination.Path, "BE78A17D30144B549D21F71D5C633F7D.txt"), () => _mockEngine.Log);
@@ -96,7 +96,7 @@ public void CanUnzip()
                     SkipUnchangedFiles = true,
                     SourceFiles = new ITaskItem[] { new TaskItem(zipArchive.Path) }
                 };
-                unzip3.SetQuestion(true);
+                unzip3.Question = true;
                 unzip3.Execute().ShouldBeTrue(() => _mockEngine.Log);
             }
         }
diff --git a/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs b/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
index 4eb0c4bd525..b0029d1453f 100644
--- a/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
+++ b/src/Tasks.UnitTests/WriteLinesToFile_Tests.cs
@@ -193,7 +193,7 @@ public void QuestionWriteLinesWriteOnlyWhenDifferentTest()
                     WriteOnlyWhenDifferent = true,
                     Lines = new ITaskItem[] { new TaskItem("File contents1") },
                 };
-                a2.SetQuestion(true);
+                a2.Question = true;
                 a2.Execute().ShouldBeTrue();
                 File.GetLastWriteTime(file).ShouldBe(writeTime, tolerance: TimeSpan.FromSeconds(1));
 
@@ -206,7 +206,7 @@ public void QuestionWriteLinesWriteOnlyWhenDifferentTest()
                     WriteOnlyWhenDifferent = true,
                     Lines = new ITaskItem[] { new TaskItem("File contents2") },
                 };
-                a3.SetQuestion(true);
+                a3.Question = true;
 
                 a3.Execute().ShouldBeFalse();
                 File.GetLastWriteTime(file).ShouldBe(writeTime, tolerance: TimeSpan.FromSeconds(1));
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index a8e6aca517f..81a0f99a45a 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1039,9 +1039,8 @@ public String DependsOnNETStandard
         [Output]
         public ITaskItem[] UnresolvedAssemblyConflicts => _unresolvedConflicts.ToArray();
 
-        public void SetQuestion(bool question) => this.question = question;
+        public bool Question { get; set; }
 
-        private bool question = false;
 
         #endregion
         #region Logging
@@ -2055,7 +2054,7 @@ internal void WriteStateFile()
             }
             else if (!String.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
             {
-                if (question)
+                if (Question)
                 {
                     Log.LogErrorFromResources("ResolveAssemblyReference.WritingCacheFile", _stateFile);
                     return;
diff --git a/src/Tasks/Copy.cs b/src/Tasks/Copy.cs
index 1f0976f5f63..12f4a076a2a 100644
--- a/src/Tasks/Copy.cs
+++ b/src/Tasks/Copy.cs
@@ -153,9 +153,7 @@ public Copy()
         /// </summary>
         public bool OverwriteReadOnlyFiles { get; set; }
 
-        public void SetQuestion(bool question) => this.question = question;
-
-        private bool question = false;
+        public bool Question { get; set; }
 
         #endregion
 
@@ -260,7 +258,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)
             {
                 if (!FileSystems.Default.DirectoryExists(destinationFolder))
                 {
-                    if (question)
+                    if (Question)
                     {
                         Log.LogError(CreatesDirectory, destinationFolder);
                         return false;
@@ -278,7 +276,7 @@ private void LogDiagnostic(string message, params object[] messageArgs)
                 _directoriesKnownToExist.TryAdd(destinationFolder, true);
             }
 
-            if (question)
+            if (Question)
             {
                 string sourceFilePath = FileUtilities.GetFullPathNoThrow(sourceFileState.Name);
                 string destinationFilePath = FileUtilities.GetFullPathNoThrow(destinationFileState.Name);
@@ -771,7 +769,7 @@ private bool DoCopyIfNecessary(FileState sourceFileState, FileState destinationF
                 {
                     MSBuildEventSource.Log.CopyUpToDateStop(destinationFileState.Name, false);
 
-                    if (question)
+                    if (Question)
                     {
                         Log.LogError(FileComment, sourceFileState.Name, destinationFileState.Name);
                         success = false;
diff --git a/src/Tasks/Delete.cs b/src/Tasks/Delete.cs
index 3dcdc6a240d..d73f652a7a3 100644
--- a/src/Tasks/Delete.cs
+++ b/src/Tasks/Delete.cs
@@ -61,10 +61,7 @@ public ITaskItem[] Files
         /// Set question parameter to verify if this is incremental.
         /// </summary>
         /// <remarks></remarks>
-        public void SetQuestion(bool question) => this.question = question;
-
-        private bool question = false;
-
+        public bool Question { get; set; }
         /// <summary>
         /// Verify that the inputs are correct.
         /// </summary>
@@ -123,7 +120,7 @@ public override bool Execute()
                     {
                         if (FileSystems.Default.FileExists(file.ItemSpec))
                         {
-                            if (question)
+                            if (Question)
                             {
                                 Log.LogErrorFromResources("Delete.DeletingFile", file.ItemSpec);
                             }
diff --git a/src/Tasks/DownloadFile.cs b/src/Tasks/DownloadFile.cs
index 18617407b03..e72dc796587 100644
--- a/src/Tasks/DownloadFile.cs
+++ b/src/Tasks/DownloadFile.cs
@@ -65,9 +65,8 @@ public sealed class DownloadFile : TaskExtension, ICancelableTask, IIncrementalT
         /// </summary>
         public int Timeout { get; set; } = 100_000;
 
-        public void SetQuestion(bool question) => this.question = question;
 
-        private bool question = false;
+        public bool Question { get; set; }
 
         /// <summary>
         /// Gets or sets a <see cref="HttpMessageHandler"/> to use.  This is used by unit tests to mock a connection to a remote server.
@@ -187,7 +186,7 @@ private async Task DownloadAsync(Uri uri, CancellationToken cancellationToken)
 
                         return;
                     }
-                    else if (question)
+                    else if (Question)
                     {
                         Log.LogErrorFromResources("DownloadFile.Downloading", SourceUrl, destinationFile.FullName, response.Content.Headers.ContentLength);
                         return;
diff --git a/src/Tasks/FileIO/WriteLinesToFile.cs b/src/Tasks/FileIO/WriteLinesToFile.cs
index 534b4969a7b..ee2fae55dc8 100644
--- a/src/Tasks/FileIO/WriteLinesToFile.cs
+++ b/src/Tasks/FileIO/WriteLinesToFile.cs
@@ -52,9 +52,7 @@ public class WriteLinesToFile : TaskExtension, IIncrementalTask
         /// Question whether this task is incremental.
         /// </summary>
         /// <remarks>When question is true, then this task would not write to disk.  If CanBeIncremental is true, then error out.</remarks>
-        public void SetQuestion(bool question) => this.question = question;
-
-        private bool question = false;
+        public bool Question { get; set; }
 
         public bool CanBeIncremental => WriteOnlyWhenDifferent;
 
@@ -71,7 +69,7 @@ public override bool Execute()
                 // do not return if Lines is null, because we may
                 // want to delete the file in that case
                 StringBuilder buffer = new StringBuilder();
-                if (Lines != null && (!question || WriteOnlyWhenDifferent))
+                if (Lines != null && (!Question || WriteOnlyWhenDifferent))
                 {
                     foreach (ITaskItem line in Lines)
                     {
@@ -118,7 +116,7 @@ public override bool Execute()
                                             MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, true);
                                             return true;
                                         }
-                                        else if (question)
+                                        else if (Question)
                                         {
                                             Log.LogErrorWithCodeFromResources("WriteLinesToFile.ErrorReadingFile", File.ItemSpec);
                                             return false;
@@ -133,7 +131,7 @@ public override bool Execute()
                             MSBuildEventSource.Log.WriteLinesToFileUpToDateStop(File.ItemSpec, false);
                         }
 
-                        if (question)
+                        if (Question)
                         {
                             Log.LogErrorWithCodeFromResources("WriteLinesToFile.ErrorReadingFile", File.ItemSpec);
                             return false;
@@ -145,7 +143,7 @@ public override bool Execute()
                     }
                     else
                     {
-                        if (question)
+                        if (Question)
                         {
                             Log.LogErrorWithCodeFromResources("WriteLinesToFile.ErrorOrWarning", File.ItemSpec, string.Empty);
                             return false;
diff --git a/src/Tasks/GenerateResource.cs b/src/Tasks/GenerateResource.cs
index 537eea1b339..23242673ce5 100644
--- a/src/Tasks/GenerateResource.cs
+++ b/src/Tasks/GenerateResource.cs
@@ -546,9 +546,8 @@ public GenerateResource()
             // do nothing
         }
 
-        public void SetQuestion(bool question) => this.question = question;
 
-        private bool question = false;
+        public bool Question { get; set; }
 
         /// <summary>
         /// Logs a Resgen.exe command line that indicates what parameters were
@@ -719,7 +718,7 @@ public override bool Execute()
 
                     Log.LogMessageFromResources("GenerateResource.NothingOutOfDate");
                 }
-                else if (question)
+                else if (Question)
                 {
                     Log.LogErrorFromResources("GenerateResource.OutOfDate");
                 }
diff --git a/src/Tasks/MakeDir.cs b/src/Tasks/MakeDir.cs
index 99d139f4e30..e84f9a5feac 100644
--- a/src/Tasks/MakeDir.cs
+++ b/src/Tasks/MakeDir.cs
@@ -31,9 +31,7 @@ public ITaskItem[] Directories
         [Output]
         public ITaskItem[] DirectoriesCreated { get; private set; }
 
-        public void SetQuestion(bool question) => this.question = question;
-
-        private bool question = false;
+        public bool Question { get; set; }
 
         private ITaskItem[] _directories;
 
@@ -63,7 +61,7 @@ public override bool Execute()
                             // Only log a message if we actually need to create the folder
                             if (!FileUtilities.DirectoryExistsNoThrow(directory.ItemSpec))
                             {
-                                if (question)
+                                if (Question)
                                 {
                                     Log.LogErrorFromResources("MakeDir.Comment", directory.ItemSpec);
                                 }
diff --git a/src/Tasks/Move.cs b/src/Tasks/Move.cs
index a235f9f4849..e7d2c1e4611 100644
--- a/src/Tasks/Move.cs
+++ b/src/Tasks/Move.cs
@@ -70,13 +70,10 @@ public class Move : TaskExtension, ICancelableTask, IIncrementalTask
         /// <summary>
         /// Set question parameter for Move task.
         /// </summary>
-        /// <param name="question"></param>
         /// <remarks>Move can be chained A->B->C with location C as the final location.
         /// Incrementally, it is hard to question A->B if both files are gone.
         /// In short, question will always return false and author should use target inputs/outputs.</remarks>
-        public void SetQuestion(bool question) => this.question = question;
-
-        private bool question = false;
+        public bool Question { get; set; }
 
         /// <summary>
         /// Stop and return (in an undefined state) as soon as possible.
@@ -160,7 +157,7 @@ public override bool Execute()
 
                 try
                 {
-                    if (!question && MoveFileWithLogging(sourceFile, destinationFile))
+                    if (!Question && MoveFileWithLogging(sourceFile, destinationFile))
                     {
                         SourceFiles[i].CopyMetadataTo(DestinationFiles[i]);
                         destinationFilesSuccessfullyMoved.Add(DestinationFiles[i]);
diff --git a/src/Tasks/RemoveDir.cs b/src/Tasks/RemoveDir.cs
index 582ff932fc5..6586d975cf9 100644
--- a/src/Tasks/RemoveDir.cs
+++ b/src/Tasks/RemoveDir.cs
@@ -41,9 +41,7 @@ public ITaskItem[] Directories
         [Output]
         public ITaskItem[] RemovedDirectories { get; set; }
 
-        public void SetQuestion(bool question) => this.question = question;
-
-        private bool question = false;
+        public bool Question { get; set; }
 
         //-----------------------------------------------------------------------------------
         // Execute -- this runs the task
@@ -65,7 +63,7 @@ public override bool Execute()
 
                 if (FileSystems.Default.DirectoryExists(directory.ItemSpec))
                 {
-                    if (question)
+                    if (Question)
                     {
                         Log.LogErrorFromResources("RemoveDir.Removing", directory.ItemSpec);
                         continue;
diff --git a/src/Tasks/Touch.cs b/src/Tasks/Touch.cs
index 1f323e3906b..9d497021f8f 100644
--- a/src/Tasks/Touch.cs
+++ b/src/Tasks/Touch.cs
@@ -57,9 +57,7 @@ public class Touch : TaskExtension, IIncrementalTask
         /// </summary>
         /// <remarks>When Question is true, skip touching the disk to avoid causing incremental issue.
         /// Unless the file doesn't exists, in which case, error out.</remarks>
-        public void SetQuestion(bool question) => this.question = question;
-
-        private bool question = false;
+        public bool Question { get; set; }
 
         /// <summary>
         /// Implementation of the execute method.
@@ -207,7 +205,7 @@ private bool TouchFile(
                 // If the file does not exist then we check if we need to create it.
                 if (AlwaysCreate)
                 {
-                    if (question)
+                    if (Question)
                     {
                         Log.LogErrorFromResources("Touch.CreatingFile", file, "AlwaysCreate");
                         return false;
@@ -231,7 +229,7 @@ private bool TouchFile(
 
             Log.LogMessageFromResources(messageImportance, "Touch.Touching", file);
 
-            if (question)
+            if (Question)
             {
                 return true;
             }
diff --git a/src/Tasks/Unzip.cs b/src/Tasks/Unzip.cs
index 22612c699b3..3b7808ca892 100644
--- a/src/Tasks/Unzip.cs
+++ b/src/Tasks/Unzip.cs
@@ -73,9 +73,7 @@ public sealed class Unzip : TaskExtension, ICancelableTask, IIncrementalTask
         /// </summary>
         public string Exclude { get; set; }
 
-        public void SetQuestion(bool question) => this.question = question;
-
-        private bool question = false;
+        public bool Question { get; set; }
 
         /// <inheritdoc cref="ICancelableTask.Cancel"/>
         public void Cancel()
@@ -197,7 +195,7 @@ private void Extract(ZipArchive sourceArchive, DirectoryInfo destinationDirector
                     Log.LogMessageFromResources(MessageImportance.Low, "Unzip.DidNotUnzipBecauseOfFileMatch", zipArchiveEntry.FullName, destinationPath.FullName, nameof(SkipUnchangedFiles), "true");
                     continue;
                 }
-                else if (question)
+                else if (Question)
                 {
                     Log.LogErrorFromResources("Unzip.FileComment", zipArchiveEntry.FullName, destinationPath.FullName);
                     continue;
diff --git a/src/Tasks/ZipDirectory.cs b/src/Tasks/ZipDirectory.cs
index fc57921e89a..2b8bc585087 100644
--- a/src/Tasks/ZipDirectory.cs
+++ b/src/Tasks/ZipDirectory.cs
@@ -29,9 +29,7 @@ public sealed class ZipDirectory : TaskExtension, IIncrementalTask
         [Required]
         public ITaskItem SourceDirectory { get; set; }
 
-        public void SetQuestion(bool question) => this.question = question;
-
-        private bool question = false;
+        public bool Question { get; set; }
 
         public override bool Execute()
         {
@@ -51,7 +49,7 @@ public override bool Execute()
             {
                 if (destinationFile.Exists)
                 {
-                    if (!Overwrite || question)
+                    if (!Overwrite || Question)
                     {
                         Log.LogErrorWithCodeFromResources("ZipDirectory.ErrorFileExists", destinationFile.FullName);
 
@@ -72,7 +70,7 @@ public override bool Execute()
 
                 try
                 {
-                    if (question)
+                    if (Question)
                     {
                         Log.LogErrorFromResources("ZipDirectory.Comment", sourceDirectory.FullName, destinationFile.FullName);
                     }
diff --git a/src/Utilities/ToolTask.cs b/src/Utilities/ToolTask.cs
index 5555939727b..d7fb0967965 100644
--- a/src/Utilities/ToolTask.cs
+++ b/src/Utilities/ToolTask.cs
@@ -353,11 +353,12 @@ protected virtual void ProcessStarted() { }
         /// <returns></returns>
         protected virtual bool SkipTaskExecution() { canBeIncremental = false; return false; }
 
-        private bool canBeIncremental { get; set; } = true;
-
-        public void SetQuestion(bool question) => this.question = question;
+        /// <summary>
+        /// ToolTask is not incremental it can't be questioned.  However, when SkipTaskExecution is override, then Question feature can task effect.
+        /// </summary>
+        protected bool canBeIncremental { get; set; } = true;
 
-        private bool question = false;
+        public bool Question { get; set; }
 
         /// <summary>
         /// Returns a string with those switches and other information that can go into a response file.
@@ -1330,7 +1331,7 @@ public override bool Execute()
                     // doing any actual work).
                     return true;
                 }
-                else if (canBeIncremental && question)
+                else if (canBeIncremental && Question)
                 {
                     LogPrivate.LogErrorWithCodeFromResources("ToolTask.NotUpToDate");
                     return false;
