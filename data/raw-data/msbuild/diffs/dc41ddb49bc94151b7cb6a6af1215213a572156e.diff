diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 886d1847b01..9e59b969443 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -153,16 +153,16 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         public void Shutdown()
         {
             FancyLoggerBuffer.Terminate();
+            // TODO: Remove. There is a bug that causes switching to main buffer without deleting the contents of the alternate buffer
+            Console.Clear();
+            Console.Out.Flu
             foreach (var project in projects)
             {
                 foreach (var message in project.Value.AdditionalDetails)
                 {
-                    Console.WriteLine(message.Message);
-                    // TODO: Update to show complete formatting. Maybe add a member to `FancyLoggerMessageNode` to store the contents. 
+                    Console.WriteLine(message.ToANSIString());
                 }
             }
-            // TODO: Remove. There is a bug that causes switching to main buffer without deleting the contents of the alternate buffer
-            // Console.Clear();
             // Console.WriteLine("Build status, warnings and errors will be shown here after the build has ended and the interactive logger has closed");
             if (Succeeded)
             {
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 6b31180b72b..73a397696fb 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -40,6 +40,7 @@ public static void Initialize()
             // Use alternate buffer
             // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer
             // Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
+            Console.OutputEncoding = Encoding.UTF8;
             Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
 
             Task.Run(async () => {
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
index 54b4c5101cd..9682e563342 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerMessageNode.cs
@@ -39,6 +39,10 @@ public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
             else if (args is BuildWarningEventArgs warning)
             {
                 Type = MessageType.Warning;
+                Code = warning.Code;
+                FilePath = warning.File;
+                LineNumber = warning.LineNumber;
+                ColumnNumber = warning.ColumnNumber;
             }
             else if (args is BuildErrorEventArgs error)
             {
@@ -64,27 +68,28 @@ public FancyLoggerMessageNode(LazyFormattedBuildEventArgs args)
             }
         }
 
-        public void Log()
+        public string ToANSIString()
         {
-            if (Line == null) return;
-            // Get color
-            if (Type == MessageType.HighPriorityMessage)
-            {
-                FancyLoggerBuffer.UpdateLine(Line.Id, $"    └── {ANSIBuilder.Formatting.Italic(Message)}");
-            }
-            else if (Type == MessageType.Warning)
-            {
-                FancyLoggerBuffer.UpdateLine(Line.Id, $"    └── {ANSIBuilder.Formatting.Color(
-                    ANSIBuilder.Formatting.Italic($"{ANSIBuilder.Formatting.Dim("Warning:")} {Message}"),
-                    ANSIBuilder.Formatting.ForegroundColor.Yellow
-                )}");
-            } else if (Type == MessageType.Error)
+            switch (Type)
             {
-                FancyLoggerBuffer.UpdateLine(Line.Id, $"    └── {ANSIBuilder.Formatting.Color(
-                    ANSIBuilder.Formatting.Italic($"Error {Code}: {FilePath}({LineNumber},{ColumnNumber}) {Message}"),
-                    ANSIBuilder.Formatting.ForegroundColor.Red
-                )}");
+                case MessageType.Warning:
+                    return $"⚠️ {ANSIBuilder.Formatting.Color(
+                        $"Warning {Code}: {FilePath}({LineNumber},{ColumnNumber}) {Message}",
+                        ANSIBuilder.Formatting.ForegroundColor.Yellow)}";
+                case MessageType.Error:
+                    return $"❌ {ANSIBuilder.Formatting.Color(
+                        $"Error {Code}: {FilePath}({LineNumber},{ColumnNumber}) {Message}",
+                        ANSIBuilder.Formatting.ForegroundColor.Red)}";
+                case MessageType.HighPriorityMessage:
+                default:
+                    return $"ℹ️ {ANSIBuilder.Formatting.Italic(Message)}";
             }
         }
+
+        public void Log()
+        {
+            if (Line == null) return;
+            FancyLoggerBuffer.UpdateLine(Line.Id, $"    └── {ToANSIString()}");
+        }
     }
 }
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index c951759e591..37f8cbc8eda 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -102,18 +102,17 @@ public void Log()
             }
         }
 
-        public void AddTarget(TargetStartedEventArgs args)
+        public FancyLoggerTargetNode AddTarget(TargetStartedEventArgs args)
         {
             CurrentTargetNode = new FancyLoggerTargetNode(args);
+            return CurrentTargetNode;
         }
-        public void AddTask(TaskStartedEventArgs args)
+        public FancyLoggerTaskNode? AddTask(TaskStartedEventArgs args)
         {
             // Get target id
             int targetId = args.BuildEventContext!.TargetId;
-            if (CurrentTargetNode?.Id == targetId)
-            {
-                CurrentTargetNode.AddTask(args);
-            }
+            if (CurrentTargetNode?.Id == targetId) return CurrentTargetNode.AddTask(args);
+            else return null;
         }
         public FancyLoggerMessageNode? AddMessage(BuildMessageEventArgs args)
         {
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerTargetNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerTargetNode.cs
index 3859354d925..6110ef148a5 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerTargetNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerTargetNode.cs
@@ -23,9 +23,10 @@ public FancyLoggerTargetNode(TargetStartedEventArgs args)
             Id = args.BuildEventContext!.TargetId;
             TargetName = args.TargetName;
         }
-        public void AddTask(TaskStartedEventArgs args)
+        public FancyLoggerTaskNode AddTask(TaskStartedEventArgs args)
         {
             CurrentTaskNode = new FancyLoggerTaskNode(args);
+            return CurrentTaskNode;
         }
     }
 }
