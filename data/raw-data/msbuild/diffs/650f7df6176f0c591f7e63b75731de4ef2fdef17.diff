diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index bacc0ad5914..c1b49647f8e 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -1317,6 +1317,8 @@ private bool InternalSetTaskParameter(
                     // Structured logging for all parameters that have logging enabled and are not empty lists.
                     if (parameterValueAsList?.Count > 0 || (parameterValueAsList == null && !legacyBehavior))
                     {
+                        // Note: We're setting TaskParameterEventArgs.ItemType to parameter name for backward compatibility with
+                        // older loggers and binlog viewers.
                         ItemGroupLoggingHelper.LogTaskParameter(
                             _taskLoggingContext,
                             TaskParameterMessageKind.TaskInput,
@@ -1476,12 +1478,14 @@ static IEnumerable<KeyValuePair<string, string>> EnumerateMetadata(IDictionary c
                         {
                             if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12))
                             {
+                                // Note: We're setting TaskParameterEventArgs.ItemType to property name for backward compatibility with
+                                // older loggers and binlog viewers.
                                 ItemGroupLoggingHelper.LogTaskParameter(
                                     _taskLoggingContext,
                                     TaskParameterMessageKind.TaskOutput,
                                     parameterName: parameter.Name,
                                     propertyName: outputTargetName,
-                                    itemType: null,
+                                    itemType: outputTargetName,
                                     new object[] { outputString },
                                     parameter.LogItemMetadata);
                             }
@@ -1561,12 +1565,14 @@ private void GatherArrayStringAndValueOutputs(bool outputTargetIsItem, string ou
                         {
                             if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_12))
                             {
+                                // Note: We're setting TaskParameterEventArgs.ItemType to property name for backward compatibility with
+                                // older loggers and binlog viewers.
                                 ItemGroupLoggingHelper.LogTaskParameter(
                                     _taskLoggingContext,
                                     TaskParameterMessageKind.TaskOutput,
                                     parameterName: parameter.Name,
                                     propertyName: outputTargetName,
-                                    itemType: null,
+                                    itemType: outputTargetName,
                                     new object[] { outputString },
                                     parameter.LogItemMetadata);
                             }
diff --git a/src/Framework/TaskParameterEventArgs.cs b/src/Framework/TaskParameterEventArgs.cs
index d9ad4c0d4bd..8dcf97730c7 100644
--- a/src/Framework/TaskParameterEventArgs.cs
+++ b/src/Framework/TaskParameterEventArgs.cs
@@ -80,8 +80,9 @@ public TaskParameterEventArgs(
         public string PropertyName { get; private set; }
 
         /// <summary>
-        /// The name of the item being manipulated, e.g. "Compile", or null in cases where the operation does not manipulate
-        /// any items, such as when representing task inputs or task outputs assigned to properties.
+        /// The name of the item being manipulated, e.g. "Compile" if this is an item operation. If this object represents a task input, this property should be set
+        /// to the same value as <see cref="ParameterName"/> for backward compatibility. Similarly, if this object represents a task output assigned to a property,
+        /// this should be set to the same value as <see cref="PropertyName"/> for backward compatibility.
         /// </summary>
         public string ItemType { get; private set; }
 
