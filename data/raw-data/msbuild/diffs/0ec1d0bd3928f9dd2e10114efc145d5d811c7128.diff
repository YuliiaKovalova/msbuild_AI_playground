diff --git a/src/Tasks/AssemblyDependency/Node/OutOfProcRarNode.cs b/src/Tasks/AssemblyDependency/Node/OutOfProcRarNode.cs
index 1b1bdfa33b7..760d7e1d22d 100644
--- a/src/Tasks/AssemblyDependency/Node/OutOfProcRarNode.cs
+++ b/src/Tasks/AssemblyDependency/Node/OutOfProcRarNode.cs
@@ -140,7 +140,7 @@ private async Task RunNodeEndpointsAsync(CancellationToken cancellationToken)
             {
                 OutOfProcRarNodeEndpoint endpoint = new(endpointId: i + 1, _handshake, _maxNumberOfConcurrentTasks);
                 endpoints[i] = endpoint;
-                endpointTasks[i] = Task.Run(() => endpoint.Run(cancellationToken), cancellationToken);
+                endpointTasks[i] = Task.Run(() => endpoint.RunAsync(cancellationToken), cancellationToken);
             }
 
             CommunicationsUtilities.Trace("{0} RAR endpoints started.", _maxNumberOfConcurrentTasks);
diff --git a/src/Tasks/AssemblyDependency/Node/OutOfProcRarNodeEndpoint.cs b/src/Tasks/AssemblyDependency/Node/OutOfProcRarNodeEndpoint.cs
index 5fc9fe4ae85..c7dd9c75bda 100644
--- a/src/Tasks/AssemblyDependency/Node/OutOfProcRarNodeEndpoint.cs
+++ b/src/Tasks/AssemblyDependency/Node/OutOfProcRarNodeEndpoint.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Threading;
+using System.Threading.Tasks;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
@@ -30,13 +31,13 @@ internal OutOfProcRarNodeEndpoint(int endpointId, ServerNodeHandshake handshake,
 
         public void Dispose() => _pipeServer.Dispose();
 
-        internal void Run(CancellationToken cancellationToken = default)
+        internal async Task RunAsync(CancellationToken cancellationToken = default)
         {
             CommunicationsUtilities.Trace("({0}) Starting RAR endpoint.", _endpointId);
 
             try
             {
-                RunInternal(cancellationToken);
+                await RunInternalAsync(cancellationToken);
             }
             catch (OperationCanceledException)
             {
@@ -46,7 +47,7 @@ internal void Run(CancellationToken cancellationToken = default)
             }
         }
 
-        private void RunInternal(CancellationToken cancellationToken)
+        private async Task RunInternalAsync(CancellationToken cancellationToken)
         {
             while (!cancellationToken.IsCancellationRequested)
             {
@@ -59,7 +60,7 @@ private void RunInternal(CancellationToken cancellationToken)
 
                 try
                 {
-                    INodePacket packet = _pipeServer.ReadPacket();
+                    INodePacket packet = await _pipeServer.ReadPacketAsync(cancellationToken);
 
                     if (packet.Type == NodePacketType.NodeShutdown)
                     {
@@ -78,7 +79,7 @@ private void RunInternal(CancellationToken cancellationToken)
 
                     // TODO: bool success = rarTask.ExecuteInProcess();
                     // TODO: Use RAR task outputs to create response packet.
-                    _pipeServer.WritePacket(new RarNodeExecuteResponse());
+                    await _pipeServer.WritePacketAsync(new RarNodeExecuteResponse(), cancellationToken);
 
                     CommunicationsUtilities.Trace("({0}) Completed RAR request.", _endpointId);
                 }
