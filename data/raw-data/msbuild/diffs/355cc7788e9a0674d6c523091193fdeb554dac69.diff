diff --git a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
index dce14e3d422..dc312773b45 100644
--- a/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeEndpointOutOfProc.cs
@@ -4,88 +4,41 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
-#nullable disable
-
 namespace Microsoft.Build.BackEnd
 {
     /// <summary>
     /// This is an implementation of INodeEndpoint for the out-of-proc nodes.  It acts only as a client.
     /// </summary>
-    internal class NodeEndpointOutOfProc : NodeEndpointOutOfProcBase
+    internal sealed class NodeEndpointOutOfProc : NodeEndpointOutOfProcBase
     {
-        #region Private Data
-
-        /// <summary>
-        /// The build component host
-        /// </summary>
-        private IBuildComponentHost _componentHost;
-
         private readonly bool _enableReuse;
 
-        private readonly bool _lowPriority;
-
-        internal bool LowPriority { get { return _lowPriority; } }
-
-        #endregion
-
-        #region Constructors and Factories
+        internal bool LowPriority { get; private set; }
 
         /// <summary>
-        /// Instantiates an endpoint to act as a client
+        /// Instantiates an endpoint to act as a client.
         /// </summary>
-        /// <param name="host">The component host.</param>
         /// <param name="enableReuse">Whether this node may be reused for a later build.</param>
         /// <param name="lowPriority">Whether this node is low priority.</param>
-        internal NodeEndpointOutOfProc(
-            IBuildComponentHost host,
-            bool enableReuse,
-            bool lowPriority)
+        internal NodeEndpointOutOfProc(bool enableReuse, bool lowPriority)
         {
-            ErrorUtilities.VerifyThrowArgumentNull(host, nameof(host));
-            _componentHost = host;
             _enableReuse = enableReuse;
-            _lowPriority = lowPriority;
+            LowPriority = lowPriority;
 
             InternalConstruct();
         }
 
-        #endregion
-
         /// <summary>
-        /// Returns the host handshake for this node endpoint
+        /// Returns the host handshake for this node endpoint.
         /// </summary>
         protected override Handshake GetHandshake()
         {
-            return new Handshake(CommunicationsUtilities.GetHandshakeOptions(taskHost: false, architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(), nodeReuse: _enableReuse, lowPriority: _lowPriority));
-        }
-
-        #region Structs
-        /// <summary>
-        /// Used to return a matched pair of endpoints for in-proc nodes to use with the Build Manager.
-        /// </summary>
-        internal struct EndpointPair
-        {
-            /// <summary>
-            /// The endpoint destined for use by a node.
-            /// </summary>
-            internal readonly NodeEndpointInProc NodeEndpoint;
-
-            /// <summary>
-            /// The endpoint destined for use by the Build Manager
-            /// </summary>
-            internal readonly NodeEndpointInProc ManagerEndpoint;
-
-            /// <summary>
-            /// Creates an endpoint pair
-            /// </summary>
-            /// <param name="node">The node-side endpoint.</param>
-            /// <param name="manager">The manager-side endpoint.</param>
-            internal EndpointPair(NodeEndpointInProc node, NodeEndpointInProc manager)
-            {
-                NodeEndpoint = node;
-                ManagerEndpoint = manager;
-            }
+            HandshakeOptions handshakeOptions = CommunicationsUtilities.GetHandshakeOptions(
+                taskHost: false,
+                architectureFlagToSet: XMakeAttributes.GetCurrentMSBuildArchitecture(),
+                nodeReuse: _enableReuse,
+                lowPriority: LowPriority);
+            return new Handshake(handshakeOptions);
         }
-        #endregion
     }
 }
diff --git a/src/Build/BackEnd/Node/OutOfProcNode.cs b/src/Build/BackEnd/Node/OutOfProcNode.cs
index 60838dd3f20..f45bb803573 100644
--- a/src/Build/BackEnd/Node/OutOfProcNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcNode.cs
@@ -240,9 +240,7 @@ public NodeEngineShutdownReason Run(bool enableReuse, out Exception shutdownExce
         /// <returns>The reason for shutting down.</returns>
         public NodeEngineShutdownReason Run(bool enableReuse, bool lowPriority, out Exception shutdownException)
         {
-            // Console.WriteLine("Run called at {0}", DateTime.Now);
-
-            _nodeEndpoint = new NodeEndpointOutOfProc(this, enableReuse, lowPriority);
+            _nodeEndpoint = new NodeEndpointOutOfProc(enableReuse, lowPriority);
             _nodeEndpoint.OnLinkStatusChanged += OnLinkStatusChanged;
             _nodeEndpoint.Listen(this);
 
