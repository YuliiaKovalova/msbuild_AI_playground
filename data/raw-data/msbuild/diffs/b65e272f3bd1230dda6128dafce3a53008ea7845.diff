diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 865f2c5fd00..4956e1383cd 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -272,7 +272,7 @@ public bool Execute()
                         AssemblyUtilities.GetAssemblyLocation(_taskType.Type.GetTypeInfo().Assembly),
                         _setParameters,
                         new Dictionary<string, string>(_buildComponentHost.BuildParameters.GlobalProperties),
-                        _taskLoggingContext.LoggingService.GetWarningsToBeLoggedAsErrorsByProject(_taskLoggingContext.BuildEventContext) as HashSet<string>
+                        _taskLoggingContext.GetWarningsAsErrors()
                         
                     );
 
diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index 3404e63c11b..6c2b6337393 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -294,12 +294,14 @@ public void Translate<T, L>(ref IList<T> list, ObjectTranslator<T> objectTransla
             }
 
             /// <summary>
-            /// Translates a collection of strings to the specified type using an <see cref="NodePacketCollectionCreator{T}"/>
+            /// Translates a collection of T into the specified type using an <see cref="ObjectTranslator{T}"/> and <see cref="NodePacketCollectionCreator{L}"/>
             /// </summary>
             /// <param name="collection">The collection to be translated.</param>
-            /// <param name="collectionFactory">factory to create the IList.</param>
-            /// <typeparam name="T">The type of collection to be created.</typeparam>
-            public void Translate<T>(ref ICollection<string> collection, NodePacketCollectionCreator<T> collectionFactory) where T : ICollection<string>
+            /// <param name="objectTranslator">The translator to use for the values in the collection.</param>
+            /// <param name="collectionFactory">The factory to create the ICollection.</param>
+            /// <typeparam name="T">The type contained in the collection.</typeparam>
+            /// <typeparam name="L">The type of collection to be created.</typeparam>
+            public void Translate<T, L>(ref ICollection<T> collection, ObjectTranslator<T> objectTranslator, NodePacketCollectionCreator<L> collectionFactory) where L : ICollection<T>
             {
                 if (!TranslateNullable(collection))
                 {
@@ -311,7 +313,9 @@ public void Translate<T>(ref ICollection<string> collection, NodePacketCollectio
 
                 for (int i = 0; i < count; i++)
                 {
-                    collection.Add(_reader.ReadString());
+                    T value = default(T);
+                    objectTranslator(this, ref value);
+                    collection.Add(value);
                 }
             }
 
@@ -906,12 +910,14 @@ public void Translate<T, L>(ref IList<T> list, ObjectTranslator<T> objectTransla
             }
 
             /// <summary>
-            /// Translates a collection of strings to the specified type using an <see cref="NodePacketCollectionCreator{T}"/>
+            /// Translates a collection of T into the specified type using an <see cref="ObjectTranslator{T}"/> and <see cref="NodePacketCollectionCreator{L}"/>
             /// </summary>
             /// <param name="collection">The collection to be translated.</param>
-            /// <param name="collectionFactory">factory to create the IList.</param>
-            /// <typeparam name="T">The type of collection to be created.</typeparam>
-            public void Translate<T>(ref ICollection<string> collection, NodePacketCollectionCreator<T> collectionFactory) where T : ICollection<string>
+            /// <param name="objectTranslator">The translator to use for the values in the collection.</param>
+            /// <param name="collectionFactory">The factory to create the ICollection.</param>
+            /// <typeparam name="T">The type contained in the collection.</typeparam>
+            /// <typeparam name="L">The type of collection to be created.</typeparam>
+            public void Translate<T, L>(ref ICollection<T> collection, ObjectTranslator<T> objectTranslator, NodePacketCollectionCreator<L> collectionFactory) where L : ICollection<T>
             {
                 if (!TranslateNullable(collection))
                 {
@@ -920,9 +926,10 @@ public void Translate<T>(ref ICollection<string> collection, NodePacketCollectio
 
                 _writer.Write(collection.Count);
 
-                foreach(string item in collection)
+                foreach (T item in collection)
                 {
-                    _writer.Write(item);
+                    T value = item;
+                    objectTranslator(this, ref value);
                 }
             }
 
diff --git a/src/Shared/ITranslator.cs b/src/Shared/ITranslator.cs
index 25509f193c1..b1acb85ec2f 100644
--- a/src/Shared/ITranslator.cs
+++ b/src/Shared/ITranslator.cs
@@ -181,12 +181,14 @@ BinaryWriter Writer
         void Translate<T, L>(ref IList<T> list, ObjectTranslator<T> objectTranslator, NodePacketCollectionCreator<L> collectionFactory) where L : IList<T>;
 
         /// <summary>
-        /// Translates a collection of strings to the specified type using an <see cref="NodePacketCollectionCreator{T}"/>
+        /// Translates a collection of T into the specified type using an <see cref="ObjectTranslator{T}"/> and <see cref="NodePacketCollectionCreator{L}"/>
         /// </summary>
         /// <param name="collection">The collection to be translated.</param>
-        /// <param name="collectionFactory">factory to create the IList.</param>
-        /// <typeparam name="T">The type of collection to be created.</typeparam>
-        void Translate<T>(ref ICollection<string> collection, NodePacketCollectionCreator<T> collectionFactory) where T : ICollection<string>;
+        /// <param name="objectTranslator">The translator to use for the values in the collection.</param>
+        /// <param name="collectionFactory">The factory to create the ICollection.</param>
+        /// <typeparam name="T">The type contained in the collection.</typeparam>
+        /// <typeparam name="L">The type of collection to be created.</typeparam>
+        void Translate<T, L>(ref ICollection<T> collection, ObjectTranslator<T> objectTranslator, NodePacketCollectionCreator<L> collectionFactory) where L : ICollection<T>;
 
         /// <summary>
         /// Translates a DateTime.
diff --git a/src/Shared/TaskHostConfiguration.cs b/src/Shared/TaskHostConfiguration.cs
index a32cf28cd3d..367e2845823 100644
--- a/src/Shared/TaskHostConfiguration.cs
+++ b/src/Shared/TaskHostConfiguration.cs
@@ -379,7 +379,13 @@ public void Translate(ITranslator translator)
             translator.TranslateDictionary(ref _taskParameters, StringComparer.OrdinalIgnoreCase, TaskParameter.FactoryForDeserialization);
             translator.Translate(ref _continueOnError);
             translator.TranslateDictionary(ref _globalParameters, StringComparer.OrdinalIgnoreCase);
-            translator.Translate(ref _warningsAsErrors, count => new HashSet<string>(count));
+            translator.Translate(collection: ref _warningsAsErrors,
+                                 objectTranslator: (ITranslator t, ref string s) => t.Translate(ref s),
+#if CLR2COMPATIBILITY
+                                 collectionFactory: count => new HashSet<string>());
+#else
+                                 collectionFactory: count => new HashSet<string>(count, StringComparer.OrdinalIgnoreCase));
+#endif
         }
 
         /// <summary>
