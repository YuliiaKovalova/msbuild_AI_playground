diff --git a/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs
index f4ffd7727a6..1ce7f1aa336 100644
--- a/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContext.cs
@@ -9,21 +9,20 @@
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BackEnd.Shared;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Logging;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
 
 internal class AnalysisDispatchingContext : IAnalysisContext
 {
-    private readonly EventArgsDispatcher _eventDispatcher;
+    private readonly Action<BuildEventArgs> _dispatch;
     private readonly BuildEventContext _eventContext;
 
     public AnalysisDispatchingContext(
-        EventArgsDispatcher eventDispatcher,
+        Action<BuildEventArgs> dispatch,
         BuildEventContext eventContext)
     {
-        _eventDispatcher = eventDispatcher;
+        _dispatch = dispatch;
         _eventContext = eventContext;
     }
 
@@ -33,24 +32,7 @@ public void DispatchBuildEvent(BuildEventArgs buildEvent)
     {
         ErrorUtilities.VerifyThrow(buildEvent != null, "buildEvent is null");
 
-        // BuildWarningEventArgs? warningEvent = null;
-        // BuildErrorEventArgs? errorEvent = null;
-        // BuildMessageEventArgs? messageEvent = null;
-
-        // if ((warningEvent = buildEvent as BuildWarningEventArgs) != null &&
-        //    warningEvent.ProjectFile == null)
-        // {
-        // }
-        // else if ((errorEvent = buildEvent as BuildErrorEventArgs) != null &&
-        //    errorEvent.ProjectFile == null)
-        // {
-        // }
-        // else if ((messageEvent = buildEvent as BuildMessageEventArgs) != null &&
-        //    messageEvent.ProjectFile == null)
-        // {
-        // }
-
-        _eventDispatcher.Dispatch(buildEvent);
+        _dispatch!(buildEvent!);
     }
 
     public void DispatchAsComment(MessageImportance importance, string messageResourceName, params object?[] messageArgs)
@@ -67,18 +49,13 @@ private void DispatchAsCommentFromText(BuildEventContext buildEventContext, Mess
     {
         BuildMessageEventArgs buildEvent = EventsCreatorHelper.CreateMessageEventFromText(buildEventContext, importance, message, messageArgs);
 
-        _eventDispatcher.Dispatch(buildEvent);
+        _dispatch!(buildEvent!);
     }
 
     public void DispatchAsErrorFromText(string? subcategoryResourceName, string? errorCode, string? helpKeyword, BuildEventFileInfo file, string message)
     {
         BuildErrorEventArgs buildEvent = EventsCreatorHelper.CreateErrorEventFromText(_eventContext, subcategoryResourceName, errorCode, helpKeyword, file, message);
 
-        // if (buildEvent.ProjectFile == null &&
-        //    _eventContext!.ProjectContextId != BuildEventContext.InvalidProjectContextId)
-        // {
-        // }
-
-        _eventDispatcher.Dispatch(buildEvent);
+        _dispatch!(buildEvent!);
     }
 }
diff --git a/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContextFactory.cs b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContextFactory.cs
index 2cda8d7480e..bfa256be85a 100644
--- a/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContextFactory.cs
+++ b/src/Build/BuildCheck/Infrastructure/AnalysisContext/AnalysisDispatchingContextFactory.cs
@@ -7,7 +7,6 @@
 using System.Linq;
 using System.Text;
 using System.Threading.Tasks;
-using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
 
@@ -15,10 +14,10 @@ namespace Microsoft.Build.Experimental.BuildCheck;
 
 internal class AnalysisDispatchingContextFactory : IAnalysisContextFactory
 {
-    private readonly EventArgsDispatcher _eventDispatcher;
+    private readonly Action<BuildEventArgs> _dispatch;
 
-    public AnalysisDispatchingContextFactory(EventArgsDispatcher eventDispatcher) => _eventDispatcher = eventDispatcher;
+    public AnalysisDispatchingContextFactory(Action<BuildEventArgs> dispatch) => _dispatch = dispatch;
 
     public IAnalysisContext CreateAnalysisContext(BuildEventContext eventContext)
-        => new AnalysisDispatchingContext(_eventDispatcher, eventContext);
+        => new AnalysisDispatchingContext(_dispatch, eventContext);
 }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckEventArgsDispatcher.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckEventArgsDispatcher.cs
index 850f398f30f..33344826809 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckEventArgsDispatcher.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckEventArgsDispatcher.cs
@@ -19,7 +19,7 @@ public class BuildCheckEventArgsDispatcher : EventArgsDispatcher
 
     internal BuildCheckEventArgsDispatcher(IBuildCheckManager buildCheckManager)
         => _buildCheckEventHandler = new BuildCheckBuildEventHandler(
-            new AnalysisDispatchingContextFactory(this),
+            new AnalysisDispatchingContextFactory(base.Dispatch),
             buildCheckManager);
 
     public override void Dispatch(BuildEventArgs buildEvent)
diff --git a/src/Build/Logging/BinaryLogger/EventArgsDispatcher.cs b/src/Build/Logging/BinaryLogger/EventArgsDispatcher.cs
index 37f5e44b893..2abf9566c3d 100644
--- a/src/Build/Logging/BinaryLogger/EventArgsDispatcher.cs
+++ b/src/Build/Logging/BinaryLogger/EventArgsDispatcher.cs
@@ -106,23 +106,6 @@ public class EventArgsDispatcher : IEventSource
         /// </summary>
         public virtual void Dispatch(BuildEventArgs buildEvent)
         {
-            // BuildWarningEventArgs? warningEvent = null;
-            // BuildErrorEventArgs? errorEvent = null;
-            // BuildMessageEventArgs? messageEvent = null;
-
-            // if ((warningEvent = buildEvent as BuildWarningEventArgs) != null &&
-            //    warningEvent.ProjectFile == null)
-            // {
-            // }
-            // else if ((errorEvent = buildEvent as BuildErrorEventArgs) != null &&
-            //    errorEvent.ProjectFile == null)
-            // {
-            // }
-            // else if ((messageEvent = buildEvent as BuildMessageEventArgs) != null &&
-            //    messageEvent.ProjectFile == null)
-            // {
-            // }
-
             if (buildEvent is BuildMessageEventArgs buildMessageEventArgs)
             {
                 MessageRaised?.Invoke(null, buildMessageEventArgs);
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index a2d6069843c..23313ad24ec 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -64,7 +64,7 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBuild(bool buildInOutOfProces
     [InlineData(true, true)]
     [InlineData(false, true)]
     [InlineData(false, false)]
-    public void SampleAnalyzerIntegrationTest_AnalyzeOnBunaryLogReplay(bool buildInOutOfProcessNode, bool analysisRequested)
+    public void SampleAnalyzerIntegrationTest_AnalyzeOnBinaryLogReplay(bool buildInOutOfProcessNode, bool analysisRequested)
     {
         PrepareSampleProjectsAndConfig(buildInOutOfProcessNode, out TransientTestFile projectFile);
 
@@ -77,8 +77,6 @@ public void SampleAnalyzerIntegrationTest_AnalyzeOnBunaryLogReplay(bool buildInO
 
         success.ShouldBeTrue();
 
-        // _env.SetEnvironmentVariable("MSBUILDDEBUGONSTART", "1");
-
         string output = RunnerUtilities.ExecBootstrapedMSBuild(
          $"{logFile} -flp:logfile={Path.Combine(projectDirectory!, "logFile.log")};verbosity=diagnostic {(analysisRequested ? "-analyze" : string.Empty)}",
          out success, false, _env.Output, timeoutMilliseconds: 130_000);
