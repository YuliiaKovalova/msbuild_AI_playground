diff --git a/src/Directory.BeforeCommon.targets b/src/Directory.BeforeCommon.targets
index 6696e3861ba..4b500411a1c 100644
--- a/src/Directory.BeforeCommon.targets
+++ b/src/Directory.BeforeCommon.targets
@@ -90,6 +90,7 @@
     <DefineConstants>$(DefineConstants);FEATURE_RUNTIMEINFORMATION</DefineConstants>
     <DefineConstants>$(DefineConstants);USE_MSBUILD_DLL_EXTN</DefineConstants>
     <DefineConstants>$(DefineConstants);WORKAROUND_COREFX_19110</DefineConstants>
+    <DefineConstants>$(DefineConstants);FEATURE_SYMLINK_TARGET</DefineConstants>
   </PropertyGroup>
 
   <PropertyGroup Condition="'$(TargetFramework)' == 'netcoreapp2.1' or '$(TargetFramework)' == 'net6.0'">
diff --git a/src/Shared/FileMatcher.cs b/src/Shared/FileMatcher.cs
index 03270fbd576..c0773f9b089 100644
--- a/src/Shared/FileMatcher.cs
+++ b/src/Shared/FileMatcher.cs
@@ -837,7 +837,7 @@ private void GetFilesRecursive(
             Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs,
             TaskOptions taskOptions)
         {
-#if NET6_0_OR_GREATER
+#if FEATURE_SYMLINK_TARGET
             // This is a pretty quick, simple check, but it misses some cases:
             // symlink in folder A pointing to folder B and symlink in folder B pointing to folder A
             // If folder C contains file Foo.cs and folder D, and folder D contains a symlink pointing to folder C, calling GetFilesRecursive and
@@ -846,6 +846,7 @@ private void GetFilesRecursive(
             // The solution I'd propose for the first two, if necessary, would be maintaining a set of symlinks and verifying, before following it,
             // that we had not followed it previously. The third would require a more involved P/invoke-style fix.
             // These issues should ideally be resolved as part of #703
+            DirectoryInfo info = new(recursionState.BaseDirectory);
             FileSystemInfo linkTarget = Directory.ResolveLinkTarget(recursionState.BaseDirectory, returnFinalTarget: true);
             if (linkTarget is not null && recursionState.BaseDirectory.Contains(linkTarget.FullName))
             {
@@ -971,16 +972,10 @@ private void GetFilesRecursive(
 
                 if (searchesToExcludeInSubdirs != null)
                 {
-                    List<RecursionState> searchesForSubdir;
-
-                    if (searchesToExcludeInSubdirs.TryGetValue(subdir, out searchesForSubdir))
+                    if (searchesToExcludeInSubdirs.TryGetValue(subdir, out List<RecursionState> searchesForSubdir))
                     {
                         // We've found the base directory that these exclusions apply to.  So now add them as normal searches
-                        if (newSearchesToExclude == null)
-                        {
-                            newSearchesToExclude = new List<RecursionState>();
-                        }
-                        newSearchesToExclude.AddRange(searchesForSubdir);
+                        newSearchesToExclude ??= new(searchesForSubdir);
                     }
                 }
 
@@ -1018,10 +1013,10 @@ private void GetFilesRecursive(
                     }
                 }
             }
-            // Use a foreach to reduce the overhead of Parallel.ForEach when we are not running in parallel
+            // Use a foreach to avoid the overhead of Parallel.ForEach when we are not running in parallel
             if (dop < 2)
             {
-                foreach (var subdir in _getFileSystemEntries(FileSystemEntity.Directories, recursionState.BaseDirectory, nextStep.DirectoryPattern, null, false))
+                foreach (string subdir in _getFileSystemEntries(FileSystemEntity.Directories, recursionState.BaseDirectory, nextStep.DirectoryPattern, null, false))
                 {
                     processSubdirectory(subdir);
                 }
diff --git a/src/Shared/UnitTests/FileMatcher_Tests.cs b/src/Shared/UnitTests/FileMatcher_Tests.cs
index d9068d6ad64..d28a57407cc 100644
--- a/src/Shared/UnitTests/FileMatcher_Tests.cs
+++ b/src/Shared/UnitTests/FileMatcher_Tests.cs
@@ -67,17 +67,18 @@ public void GetFilesPatternMatching(string pattern, int expectedMatchCount)
             fileMatches.Length.ShouldBe(expectedMatchCount, $"Matches: '{String.Join("', '", fileMatches)}'");
         }
 
-#if NET6_0_OR_GREATER
+#if FEATURE_SYMLINK_TARGET
         [Fact]
         // Please provide a better name for this test.
         public void DoNotFollowRecursiveSymlinks()
         {
             TransientTestFolder testFolder = _env.CreateFolder();
             TransientTestFile file = _env.CreateFile(testFolder, "Foo.cs");
-            string symlinkPath = Path.Combine(testFolder.Path, "mySymlink");
+            TransientTestFolder tf2 = _env.CreateFolder(Path.Combine(testFolder.Path, "subfolder"));
+            string symlinkPath = Path.Combine(tf2.Path, "mySymlink");
             try
             {
-                File.CreateSymbolicLink(symlinkPath, testFolder.Path);
+                Directory.CreateSymbolicLink(symlinkPath, testFolder.Path);
                 string[] fileMatches = FileMatcher.Default.GetFiles(testFolder.Path, "**").FileList;
                 fileMatches.Length.ShouldBe(1);
             }
