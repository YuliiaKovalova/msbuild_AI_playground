diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index c8b24ef61f7..ae2bb451dc6 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -252,7 +252,8 @@ private bool IsNotableProject(ProjectStartedEventArgs e)
         return e.TargetNames switch
         {
             "" or "Restore" => true,
-            "GetTargetFrameworks" or "GetTargetFrameworks" or "GetNativeManifest" or "GetCopyToOutputDirectoryItems" => false,
+            "GetTargetFrameworks" or "GetTargetFrameworksWithPlatformForSingleTargetFramework" or
+            "GetNativeManifest" or "GetCopyToOutputDirectoryItems" or "GetCopyToPublishDirectoryItems" => false,
             _ => true,
         };
     }
@@ -300,8 +301,8 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
             }
         }
 
-        // If this was a notable project build, print the output path, time elapsed, and warnings/error.
-        if (_notableProjects.ContainsKey(c))
+        // If this was a notable project build, we print it as completed only if it's produced an output or warnings/error.
+        if (_notableProjects.TryGetValue(c, out Project? project) && (project.OutputPath is not null || project.BuildMessages is not null))
         {
             lock (_lock)
             {
@@ -312,7 +313,6 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                 {
                     EraseNodes();
 
-                    Project project = _notableProjects[c];
                     double duration = project.Stopwatch.Elapsed.TotalSeconds;
                     ReadOnlyMemory<char>? outputPath = project.OutputPath;
 
@@ -444,6 +444,7 @@ private void TargetStarted(object sender, TargetStartedEventArgs e)
         var buildEventContext = e.BuildEventContext;
         if (buildEventContext is not null && _notableProjects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
         {
+            project.Stopwatch.Start();
             _nodes[NodeIndexForContext(buildEventContext)] = new(e.ProjectFile, e.TargetName, project.Stopwatch);
         }
     }
@@ -474,6 +475,11 @@ private void TaskStarted(object sender, TaskStartedEventArgs e)
         {
             // This will yield the node, so preemptively mark it idle
             _nodes[NodeIndexForContext(buildEventContext)] = null;
+
+            if (_notableProjects.TryGetValue(new ProjectContext(buildEventContext), out Project? project))
+            {
+                project.Stopwatch.Stop();
+            }
         }
     }
 
