diff --git a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
index ddaaf313d27..2e891f1efaa 100644
--- a/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/CachingSdkResolverService.cs
@@ -38,6 +38,10 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
         {
             SdkResult result;
 
+            bool wasResultCached = false;
+
+            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);
+
             if (Traits.Instance.EscapeHatches.DisableSdkResolutionCache)
             {
                 result = base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
@@ -55,21 +59,9 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                  */
                 Lazy<SdkResult> resultLazy = cached.GetOrAdd(
                     sdk.Name,
-                    key => new Lazy<SdkResult>(() =>
-                    {
-                        MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStart(sdk.Name, solutionPath, projectPath);
-
-                        SdkResult result = base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio);
-
-                        MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success);
-
-                        return result;
-                    }));
+                    key => new Lazy<SdkResult>(() => base.ResolveSdk(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));
 
-                if (resultLazy.IsValueCreated)
-                {
-                    MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkFromCache(sdk.Name, solutionPath, projectPath, resultLazy.Value.Success);
-                }
+                wasResultCached = resultLazy.IsValueCreated;
 
                 // Get the lazy value which will block all waiting threads until the SDK is resolved at least once while subsequent calls get cached results.
                 result = resultLazy.Value;
@@ -83,7 +75,7 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                 loggingContext.LogWarning(null, new BuildEventFileInfo(sdkReferenceLocation), "ReferencingMultipleVersionsOfTheSameSdk", sdk.Name, result.Version, result.ElementLocation, sdk.Version);
             }
 
-            
+            MSBuildEventSource.Log.CachedSdkResolverServiceResolveSdkStop(sdk.Name, solutionPath, projectPath, result.Success, wasResultCached);
 
             return result;
         }
diff --git a/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
index c190a6d22a5..1c58f662274 100644
--- a/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/OutOfProcNodeSdkResolverService.cs
@@ -64,15 +64,16 @@ public override void PacketReceived(int node, INodePacket packet)
         /// <inheritdoc cref="ISdkResolverService.ResolveSdk"/>
         public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
+            bool wasResultCached = false;
+
+            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);
+
             // Get a cached response if possible, otherwise send the request
             Lazy<SdkResult> sdkResultLazy = _responseCache.GetOrAdd(
                 sdk.Name,
                 key => new Lazy<SdkResult>(() => RequestSdkPathFromMainNode(submissionId, sdk, loggingContext, sdkReferenceLocation, solutionPath, projectPath, interactive, isRunningInVisualStudio)));
 
-            if (sdkResultLazy.IsValueCreated)
-            {
-                MSBuildEventSource.Log.OutOfProcSdkResolverServiceResolveSdkFromCache(submissionId, sdk.Name, solutionPath, projectPath, sdkResultLazy.Value.Success);
-            }
+            wasResultCached = sdkResultLazy.IsValueCreated;
 
             SdkResult sdkResult = sdkResultLazy.Value;
 
@@ -82,6 +83,8 @@ public override SdkResult ResolveSdk(int submissionId, SdkReference sdk, Logging
                 loggingContext.LogWarning(null, new BuildEventFileInfo(sdkReferenceLocation), "ReferencingMultipleVersionsOfTheSameSdk", sdk.Name, sdkResult.Version, sdkResult.ElementLocation, sdk.Version);
             }
 
+            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(submissionId, sdk.Name, solutionPath, projectPath, _lastResponse.Success, wasResultCached);
+
             return sdkResult;
         }
 
@@ -109,8 +112,6 @@ private void HandleResponse(SdkResult response)
 
         private SdkResult RequestSdkPathFromMainNode(int submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, string solutionPath, string projectPath, bool interactive, bool isRunningInVisualStudio)
         {
-            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(submissionId, sdk.Name, solutionPath, projectPath);
-
             // Clear out the last response for good measure
             _lastResponse = null;
 
@@ -125,8 +126,6 @@ private SdkResult RequestSdkPathFromMainNode(int submissionId, SdkReference sdk,
             // Keep track of the element location of the reference
             _lastResponse.ElementLocation = sdkReferenceLocation;
 
-            MSBuildEventSource.Log.OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(submissionId, sdk.Name, solutionPath, projectPath, _lastResponse.Success);
-
             // Return the response which was set by another thread.  In the case of shutdown, it should be null.
             return _lastResponse;
         }
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkLogger.cs b/src/Build/BackEnd/Components/SdkResolution/SdkLogger.cs
index 71ec3070e80..182cda8da52 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkLogger.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkLogger.cs
@@ -2,7 +2,6 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.Eventing;
 using Microsoft.Build.Framework;
 
 using SdkLoggerBase = Microsoft.Build.Framework.SdkLogger;
@@ -21,21 +20,6 @@ public SdkLogger(LoggingContext loggingContext)
             _loggingContext = loggingContext;
         }
 
-        public override void LogEvent(params object[] args)
-        {
-            MSBuildEventSource.Log.SdkResolverEvent(args);
-        }
-
-        public override void LogEventStart(params object[] args)
-        {
-            MSBuildEventSource.Log.SdkResolverEventStart(args);
-        }
-
-        public override void LogEventStop(params object[] args)
-        {
-            MSBuildEventSource.Log.SdkResolverEventStop(args);
-        }
-
         public override void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low)
         {
             _loggingContext.LogCommentFromText(messageImportance, message);
diff --git a/src/Framework/MSBuildEventSource.cs b/src/Framework/MSBuildEventSource.cs
index ec26ea48436..b1ae27b4b37 100644
--- a/src/Framework/MSBuildEventSource.cs
+++ b/src/Framework/MSBuildEventSource.cs
@@ -485,9 +485,9 @@ public void CachedSdkResolverServiceResolveSdkStart(string sdkName, string solut
         }
 
         [Event(67, Keywords = Keywords.All)]
-        public void CachedSdkResolverServiceResolveSdkStop(string sdkName, string solutionPath, string projectPath, bool success)
+        public void CachedSdkResolverServiceResolveSdkStop(string sdkName, string solutionPath, string projectPath, bool success, bool wasResultCached)
         {
-            WriteEvent(67, sdkName, solutionPath, projectPath, success);
+            WriteEvent(67, sdkName, solutionPath, projectPath, success, wasResultCached);
         }
 
         /// <remarks>
@@ -538,27 +538,15 @@ public void SdkResolverEventStop(params object[] args)
         }
 
         [Event(74, Keywords = Keywords.All)]
-        public void CachedSdkResolverServiceResolveSdkFromCache(string sdkName, string solutionPath, string projectPath, bool success)
-        {
-            WriteEvent(74, sdkName, solutionPath, projectPath, success);
-        }
-
-        [Event(75, Keywords = Keywords.All)]
         public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStart(int submissionId, string sdkName, string solutionPath, string projectPath)
         {
-            WriteEvent(75, submissionId, sdkName, solutionPath, projectPath);
+            WriteEvent(74, submissionId, sdkName, solutionPath, projectPath);
         }
 
-        [Event(76, Keywords = Keywords.All)]
-        public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(int submissionId, string sdkName, string solutionPath, string projectPath, bool success)
-        {
-            WriteEvent(76, submissionId, sdkName, solutionPath, projectPath, success);
-        }
-
-        [Event(77, Keywords = Keywords.All)]
-        public void OutOfProcSdkResolverServiceResolveSdkFromCache(int submissionId, string sdkName, string solutionPath, string projectPath, bool success)
+        [Event(75, Keywords = Keywords.All)]
+        public void OutOfProcSdkResolverServiceRequestSdkPathFromMainNodeStop(int submissionId, string sdkName, string solutionPath, string projectPath, bool success, bool wasResultCached)
         {
-            WriteEvent(77, submissionId, sdkName, solutionPath, projectPath, success);
+            WriteEvent(75, submissionId, sdkName, solutionPath, projectPath, success, wasResultCached);
         }
 
         #endregion
diff --git a/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt
index 1ba0281ecff..ad0d0a96b42 100644
--- a/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Framework/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -1,3 +1,3 @@
-abstract Microsoft.Build.Framework.SdkLogger.LogEvent(params object[] args) -> void
-abstract Microsoft.Build.Framework.SdkLogger.LogEventStart(params object[] args) -> void
-abstract Microsoft.Build.Framework.SdkLogger.LogEventStop(params object[] args) -> void
\ No newline at end of file
+virtual Microsoft.Build.Framework.SdkLogger.LogEvent(params object[] args) -> void
+virtual Microsoft.Build.Framework.SdkLogger.LogEventStart(params object[] args) -> void
+virtual Microsoft.Build.Framework.SdkLogger.LogEventStop(params object[] args) -> void
\ No newline at end of file
diff --git a/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index 1ba0281ecff..ad0d0a96b42 100644
--- a/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Framework/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1,3 +1,3 @@
-abstract Microsoft.Build.Framework.SdkLogger.LogEvent(params object[] args) -> void
-abstract Microsoft.Build.Framework.SdkLogger.LogEventStart(params object[] args) -> void
-abstract Microsoft.Build.Framework.SdkLogger.LogEventStop(params object[] args) -> void
\ No newline at end of file
+virtual Microsoft.Build.Framework.SdkLogger.LogEvent(params object[] args) -> void
+virtual Microsoft.Build.Framework.SdkLogger.LogEventStart(params object[] args) -> void
+virtual Microsoft.Build.Framework.SdkLogger.LogEventStop(params object[] args) -> void
\ No newline at end of file
diff --git a/src/Framework/Sdk/SdkLogger.cs b/src/Framework/Sdk/SdkLogger.cs
index dd8d6a2c667..92e07ca18fe 100644
--- a/src/Framework/Sdk/SdkLogger.cs
+++ b/src/Framework/Sdk/SdkLogger.cs
@@ -1,6 +1,8 @@
 ﻿// Copyright (c) Microsoft. All rights reserved.
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
+using Microsoft.Build.Eventing;
+
 namespace Microsoft.Build.Framework
 {
     /// <summary>
@@ -20,18 +22,27 @@ public abstract class SdkLogger
         /// Logs that an event.
         /// </summary>
         /// <param name="args">An array of arguments to log with the event.</param>
-        public abstract void LogEvent(params object[] args);
+        public virtual void LogEvent(params object[] args)
+        {
+            MSBuildEventSource.Log.SdkResolverEvent(args);
+        }
 
         /// <summary>
         /// Logs that an event when an operation has started.
         /// </summary>
         /// <param name="args">An array of arguments to log with the event.</param>
-        public abstract void LogEventStart(params object[] args);
+        public virtual void LogEventStart(params object[] args)
+        {
+            MSBuildEventSource.Log.SdkResolverEventStart(args);
+        }
 
         /// <summary>
         /// Logs that an event when an operation has completed.
         /// </summary>
         /// <param name="args">An array of arguments to log with the event.</param>
-        public abstract void LogEventStop(params object[] args);
+        public virtual void LogEventStop(params object[] args)
+        {
+            MSBuildEventSource.Log.SdkResolverEventStop(args);
+        }
     }
 }
