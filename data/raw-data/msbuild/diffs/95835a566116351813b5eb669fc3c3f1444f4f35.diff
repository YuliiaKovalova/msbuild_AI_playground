diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 33fba22ca1e..98c7f61606c 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2004,82 +2004,84 @@ private Dictionary<ProjectGraphNode, BuildResult> BuildGraph(
             IReadOnlyDictionary<ProjectGraphNode, ImmutableList<string>> targetsPerNode,
             GraphBuildRequestData graphBuildRequestData)
         {
-            var waitHandle = new AutoResetEvent(true);
-            var graphBuildStateLock = new object();
-
-            var blockedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes);
-            var finishedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes.Count);
-            var buildingNodes = new Dictionary<BuildSubmission, ProjectGraphNode>();
             var resultsPerNode = new Dictionary<ProjectGraphNode, BuildResult>(projectGraph.ProjectNodes.Count);
-            ExceptionDispatchInfo submissionException = null;
-
-            while (blockedNodes.Count > 0 || buildingNodes.Count > 0)
+            using (var waitHandle = new AutoResetEvent(true))
             {
-                waitHandle.WaitOne();
+                var graphBuildStateLock = new object();
 
-                // When a cache plugin is present, ExecuteSubmission(BuildSubmission) executes on a separate thread whose exceptions do not get observed.
-                // Observe them here to keep the same exception flow with the case when there's no plugins and ExecuteSubmission(BuildSubmission) does not run on a separate thread.
-                if (submissionException != null)
-                {
-                    submissionException.Throw();
-                }
+                var blockedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes);
+                var finishedNodes = new HashSet<ProjectGraphNode>(projectGraph.ProjectNodes.Count);
+                var buildingNodes = new Dictionary<BuildSubmission, ProjectGraphNode>();
+                ExceptionDispatchInfo submissionException = null;
 
-                lock (graphBuildStateLock)
+                while (blockedNodes.Count > 0 || buildingNodes.Count > 0)
                 {
-                    var unblockedNodes = blockedNodes
-                        .Where(node => node.ProjectReferences.All(projectReference => finishedNodes.Contains(projectReference)))
-                        .ToList();
-                    foreach (var node in unblockedNodes)
+                    waitHandle.WaitOne();
+
+                    // When a cache plugin is present, ExecuteSubmission(BuildSubmission) executes on a separate thread whose exceptions do not get observed.
+                    // Observe them here to keep the same exception flow with the case when there's no plugins and ExecuteSubmission(BuildSubmission) does not run on a separate thread.
+                    if (submissionException != null)
                     {
-                        var targetList = targetsPerNode[node];
-                        if (targetList.Count == 0)
+                        submissionException.Throw();
+                    }
+
+                    lock (graphBuildStateLock)
+                    {
+                        var unblockedNodes = blockedNodes
+                            .Where(node => node.ProjectReferences.All(projectReference => finishedNodes.Contains(projectReference)))
+                            .ToList();
+                        foreach (var node in unblockedNodes)
                         {
-                            // An empty target list here means "no targets" instead of "default targets", so don't even build it.
-                            finishedNodes.Add(node);
-                            blockedNodes.Remove(node);
+                            var targetList = targetsPerNode[node];
+                            if (targetList.Count == 0)
+                            {
+                                // An empty target list here means "no targets" instead of "default targets", so don't even build it.
+                                finishedNodes.Add(node);
+                                blockedNodes.Remove(node);
 
-                            waitHandle.Set();
+                                waitHandle.Set();
 
-                            continue;
-                        }
+                                continue;
+                            }
 
-                        var request = new BuildRequestData(
-                            node.ProjectInstance,
-                            targetList.ToArray(),
-                            graphBuildRequestData.HostServices,
-                            graphBuildRequestData.Flags);
-
-                        // TODO Tack onto the existing submission instead of pending a whole new submission for every node
-                        // Among other things, this makes BuildParameters.DetailedSummary produce a summary for each node, which is not desirable.
-                        // We basically want to submit all requests to the scheduler all at once and describe dependencies by requests being blocked by other requests.
-                        // However today the scheduler only keeps track of MSBuild nodes being blocked by other MSBuild nodes, and MSBuild nodes haven't been assigned to the graph nodes yet.
-                        var innerBuildSubmission = PendBuildRequest(request);
-                        buildingNodes.Add(innerBuildSubmission, node);
-                        blockedNodes.Remove(node);
-                        innerBuildSubmission.ExecuteAsync(finishedBuildSubmission =>
-                        {
-                            lock (graphBuildStateLock)
+                            var request = new BuildRequestData(
+                                node.ProjectInstance,
+                                targetList.ToArray(),
+                                graphBuildRequestData.HostServices,
+                                graphBuildRequestData.Flags);
+
+                            // TODO Tack onto the existing submission instead of pending a whole new submission for every node
+                            // Among other things, this makes BuildParameters.DetailedSummary produce a summary for each node, which is not desirable.
+                            // We basically want to submit all requests to the scheduler all at once and describe dependencies by requests being blocked by other requests.
+                            // However today the scheduler only keeps track of MSBuild nodes being blocked by other MSBuild nodes, and MSBuild nodes haven't been assigned to the graph nodes yet.
+                            var innerBuildSubmission = PendBuildRequest(request);
+                            buildingNodes.Add(innerBuildSubmission, node);
+                            blockedNodes.Remove(node);
+                            innerBuildSubmission.ExecuteAsync(finishedBuildSubmission =>
                             {
-                                if (submissionException == null && finishedBuildSubmission.BuildResult.Exception != null)
+                                lock (graphBuildStateLock)
                                 {
-                                    // Preserve the original stack.
-                                    submissionException = ExceptionDispatchInfo.Capture(finishedBuildSubmission.BuildResult.Exception);
-                                }
+                                    if (submissionException == null && finishedBuildSubmission.BuildResult.Exception != null)
+                                    {
+                                        // Preserve the original stack.
+                                        submissionException = ExceptionDispatchInfo.Capture(finishedBuildSubmission.BuildResult.Exception);
+                                    }
 
-                                ProjectGraphNode finishedNode = buildingNodes[finishedBuildSubmission];
+                                    ProjectGraphNode finishedNode = buildingNodes[finishedBuildSubmission];
 
-                                finishedNodes.Add(finishedNode);
-                                buildingNodes.Remove(finishedBuildSubmission);
+                                    finishedNodes.Add(finishedNode);
+                                    buildingNodes.Remove(finishedBuildSubmission);
 
-                                resultsPerNode.Add(finishedNode, finishedBuildSubmission.BuildResult);
-                            }
+                                    resultsPerNode.Add(finishedNode, finishedBuildSubmission.BuildResult);
+                                }
 
-                            waitHandle.Set();
-                        }, null);
+                                waitHandle.Set();
+                            }, null);
+                        }
                     }
                 }
             }
-
+          
             return resultsPerNode;
         }
 
diff --git a/src/Build/BackEnd/Node/OutOfProcServerNode.cs b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
index 6b2715903e7..54a45f77816 100644
--- a/src/Build/BackEnd/Node/OutOfProcServerNode.cs
+++ b/src/Build/BackEnd/Node/OutOfProcServerNode.cs
@@ -430,6 +430,7 @@ private void HandleServerNodeBuildCommand(ServerNodeBuildCommand command)
             _shutdownReason = _cancelRequested ? NodeEngineShutdownReason.BuildComplete : NodeEngineShutdownReason.BuildCompleteReuse;
             _shutdownEvent.Set();
         }
+
         internal sealed class RedirectConsoleWriter : StringWriter
         {
             private readonly Action<string> _writeCallback;
@@ -446,6 +447,7 @@ private RedirectConsoleWriter(Action<string> writeCallback)
             public static TextWriter Create(Action<string> writeCallback)
             {
                 RedirectConsoleWriter writer = new(writeCallback);
+
                 return writer._syncWriter;
             }
 
diff --git a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
index eda42874f86..f34b0443210 100644
--- a/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
+++ b/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs
@@ -698,7 +698,11 @@ public void CacheIfPossible()
                 {
                     if (IsCacheable)
                     {
-                        using ITranslator translator = GetConfigurationTranslator(TranslationDirection.WriteToStream);
+                        string cacheFile = GetCacheFile();
+                        Directory.CreateDirectory(Path.GetDirectoryName(cacheFile));
+
+                        using Stream stream = File.Create(cacheFile);
+                        using ITranslator translator = GetConfigurationTranslator(TranslationDirection.WriteToStream, stream, cacheFile);
 
                         _project.Cache(translator);
                         _baseLookup = null;
@@ -726,7 +730,9 @@ public void RetrieveFromCache()
                     return;
                 }
 
-                using ITranslator translator = GetConfigurationTranslator(TranslationDirection.ReadFromStream);
+                string cacheFile = GetCacheFile();
+                using Stream stream = File.OpenRead(cacheFile);
+                using ITranslator translator = GetConfigurationTranslator(TranslationDirection.ReadFromStream, stream, cacheFile);
 
                 _project.RetrieveFromCache(translator);
 
@@ -1024,23 +1030,17 @@ private static string ResolveToolsVersion(BuildRequestData data, string defaultT
         /// <summary>
         /// Gets the translator for this configuration.
         /// </summary>
-        private ITranslator GetConfigurationTranslator(TranslationDirection direction)
+        private ITranslator GetConfigurationTranslator(TranslationDirection direction, Stream stream, string cacheFile)
         {
-            string cacheFile = GetCacheFile();
             try
             {
-                if (direction == TranslationDirection.WriteToStream)
-                {
-                    Directory.CreateDirectory(Path.GetDirectoryName(cacheFile));
-                    return BinaryTranslator.GetWriteTranslator(File.Create(cacheFile));
-                }
-                else
-                {
+                return direction == TranslationDirection.WriteToStream
+                    ? BinaryTranslator.GetWriteTranslator(stream)
+
                     // Not using sharedReadBuffer because this is not a memory stream and so the buffer won't be used anyway.
-                    return BinaryTranslator.GetReadTranslator(File.OpenRead(cacheFile), InterningBinaryReader.PoolingBuffer);
-                }
+                    : BinaryTranslator.GetReadTranslator(stream, InterningBinaryReader.PoolingBuffer);
             }
-            catch (Exception e) when (e is DirectoryNotFoundException || e is UnauthorizedAccessException)
+            catch (Exception e) when (e is DirectoryNotFoundException or UnauthorizedAccessException)
             {
                 ErrorUtilities.ThrowInvalidOperation("CacheFileInaccessible", cacheFile, e);
                 throw;
diff --git a/src/Build/BackEnd/Shared/TargetResult.cs b/src/Build/BackEnd/Shared/TargetResult.cs
index d435d1c3606..b490f005543 100644
--- a/src/Build/BackEnd/Shared/TargetResult.cs
+++ b/src/Build/BackEnd/Shared/TargetResult.cs
@@ -10,6 +10,7 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Shared.FileSystem;
+using static BuildXL.Processes.SandboxConnectionKext;
 using TaskItem = Microsoft.Build.Execution.ProjectItemInstance.TaskItem;
 
 #nullable disable
@@ -245,7 +246,11 @@ internal void CacheItems(int configId, string targetName)
                     return;
                 }
 
-                using ITranslator translator = GetResultsCacheTranslator(configId, targetName, TranslationDirection.WriteToStream);
+                string cacheFile = GetCacheFile(configId, targetName);
+                Directory.CreateDirectory(Path.GetDirectoryName(cacheFile));
+
+                using Stream stream = File.Create(cacheFile);
+                using ITranslator translator = GetResultsCacheTranslator(TranslationDirection.WriteToStream, stream, cacheFile);
 
                 // If the translator is null, it means these results were cached once before.  Since target results are immutable once they
                 // have been created, there is no point in writing them again.
@@ -279,7 +284,9 @@ private void RetrieveItemsFromCache()
             {
                 if (_items == null)
                 {
-                    using ITranslator translator = GetResultsCacheTranslator(_cacheInfo.ConfigId, _cacheInfo.TargetName, TranslationDirection.ReadFromStream);
+                    string cacheFile = GetCacheFile(_cacheInfo.ConfigId, _cacheInfo.TargetName);
+                    using Stream stream = File.OpenRead(cacheFile);
+                    using ITranslator translator = GetResultsCacheTranslator(TranslationDirection.ReadFromStream, stream, cacheFile);
 
                     TranslateItems(translator);
                     _cacheInfo = new CacheInfo();
@@ -339,23 +346,24 @@ private void TranslateItems(ITranslator translator)
         /// <summary>
         /// Gets the translator for this configuration.
         /// </summary>
-        private static ITranslator GetResultsCacheTranslator(int configId, string targetToCache, TranslationDirection direction)
+        private static ITranslator GetResultsCacheTranslator(
+            TranslationDirection direction,
+            Stream stream,
+            string cacheFile)
         {
-            string cacheFile = GetCacheFile(configId, targetToCache);
             if (direction == TranslationDirection.WriteToStream)
             {
-                Directory.CreateDirectory(Path.GetDirectoryName(cacheFile));
                 if (FileSystems.Default.FileExists(cacheFile))
                 {
                     // If the file already exists, then we have cached this once before.  No need to cache it again since it cannot have changed.
                     return null;
                 }
 
-                return BinaryTranslator.GetWriteTranslator(File.Create(cacheFile));
+                return BinaryTranslator.GetWriteTranslator(stream);
             }
             else
             {
-                return BinaryTranslator.GetReadTranslator(File.OpenRead(cacheFile), InterningBinaryReader.PoolingBuffer);
+                return BinaryTranslator.GetReadTranslator(stream, InterningBinaryReader.PoolingBuffer);
             }
         }
 
diff --git a/src/Framework/NativeMethods.cs b/src/Framework/NativeMethods.cs
index b543973746e..093ad6113bd 100644
--- a/src/Framework/NativeMethods.cs
+++ b/src/Framework/NativeMethods.cs
@@ -1201,49 +1201,51 @@ internal static void KillTree(int processIdToKill)
 
             // Grab the process handle.  We want to keep this open for the duration of the function so that
             // it cannot be reused while we are running.
-            SafeProcessHandle hProcess = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, processIdToKill);
-            if (hProcess.IsInvalid)
+            using (SafeProcessHandle hProcess = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, processIdToKill))
             {
-                return;
-            }
-
-            try
-            {
-                try
-                {
-                    // Kill this process, so that no further children can be created.
-                    thisProcess.Kill();
-                }
-                catch (Win32Exception e) when (e.NativeErrorCode == ERROR_ACCESS_DENIED)
+                if (hProcess.IsInvalid)
                 {
-                    // Access denied is potentially expected -- it happens when the process that
-                    // we're attempting to kill is already dead.  So just ignore in that case.
+                    return;
                 }
 
-                // Now enumerate our children.  Children of this process are any process which has this process id as its parent
-                // and which also started after this process did.
-                List<KeyValuePair<int, SafeProcessHandle>> children = GetChildProcessIds(processIdToKill, myStartTime);
-
                 try
                 {
-                    foreach (KeyValuePair<int, SafeProcessHandle> childProcessInfo in children)
+                    try
+                    {
+                        // Kill this process, so that no further children can be created.
+                        thisProcess.Kill();
+                    }
+                    catch (Win32Exception e) when (e.NativeErrorCode == ERROR_ACCESS_DENIED)
                     {
-                        KillTree(childProcessInfo.Key);
+                        // Access denied is potentially expected -- it happens when the process that
+                        // we're attempting to kill is already dead.  So just ignore in that case.
+                    }
+
+                    // Now enumerate our children.  Children of this process are any process which has this process id as its parent
+                    // and which also started after this process did.
+                    List<KeyValuePair<int, SafeProcessHandle>> children = GetChildProcessIds(processIdToKill, myStartTime);
+
+                    try
+                    {
+                        foreach (KeyValuePair<int, SafeProcessHandle> childProcessInfo in children)
+                        {
+                            KillTree(childProcessInfo.Key);
+                        }
+                    }
+                    finally
+                    {
+                        foreach (KeyValuePair<int, SafeProcessHandle> childProcessInfo in children)
+                        {
+                            childProcessInfo.Value.Dispose();
+                        }
                     }
                 }
                 finally
                 {
-                    foreach (KeyValuePair<int, SafeProcessHandle> childProcessInfo in children)
-                    {
-                        childProcessInfo.Value.Dispose();
-                    }
+                    // Release the handle.  After this point no more children of this process exist and this process has also exited.
+                    hProcess.Dispose();
                 }
             }
-            finally
-            {
-                // Release the handle.  After this point no more children of this process exist and this process has also exited.
-                hProcess.Dispose();
-            }
         }
         finally
         {
@@ -1296,26 +1298,27 @@ internal static int GetParentProcessId(int processId)
         else
 #endif
         {
-            SafeProcessHandle hProcess = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, processId);
-
-            if (!hProcess.IsInvalid)
+            using SafeProcessHandle hProcess = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, processId);
             {
-                try
+                if (!hProcess.IsInvalid)
                 {
-                    // UNDONE: NtQueryInformationProcess will fail if we are not elevated and other process is. Advice is to change to use ToolHelp32 API's
-                    // For now just return zero and worst case we will not kill some children.
-                    PROCESS_BASIC_INFORMATION pbi = new PROCESS_BASIC_INFORMATION();
-                    int pSize = 0;
+                    try
+                    {
+                        // UNDONE: NtQueryInformationProcess will fail if we are not elevated and other process is. Advice is to change to use ToolHelp32 API's
+                        // For now just return zero and worst case we will not kill some children.
+                        PROCESS_BASIC_INFORMATION pbi = new PROCESS_BASIC_INFORMATION();
+                        int pSize = 0;
 
-                    if (0 == NtQueryInformationProcess(hProcess, PROCESSINFOCLASS.ProcessBasicInformation, ref pbi, pbi.Size, ref pSize))
+                        if (0 == NtQueryInformationProcess(hProcess, PROCESSINFOCLASS.ProcessBasicInformation, ref pbi, pbi.Size, ref pSize))
+                        {
+                            ParentID = (int)pbi.InheritedFromUniqueProcessId;
+                        }
+                    }
+                    finally
                     {
-                        ParentID = (int)pbi.InheritedFromUniqueProcessId;
+                        hProcess.Dispose();
                     }
                 }
-                finally
-                {
-                    hProcess.Dispose();
-                }
             }
         }
 
@@ -1337,34 +1340,36 @@ internal static List<KeyValuePair<int, SafeProcessHandle>> GetChildProcessIds(in
             {
                 // Hold the child process handle open so that children cannot die and restart with a different parent after we've started looking at it.
                 // This way, any handle we pass back is guaranteed to be one of our actual children.
-                SafeProcessHandle childHandle = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, possibleChildProcess.Id);
-                if (childHandle.IsInvalid)
+                using (SafeProcessHandle childHandle = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, possibleChildProcess.Id))
                 {
-                    continue;
-                }
+                    if (childHandle.IsInvalid)
+                    {
+                        continue;
+                    }
 
-                bool keepHandle = false;
-                try
-                {
-                    if (possibleChildProcess.StartTime > parentStartTime)
+                    bool keepHandle = false;
+                    try
                     {
-                        int childParentProcessId = GetParentProcessId(possibleChildProcess.Id);
-                        if (childParentProcessId != 0)
+                        if (possibleChildProcess.StartTime > parentStartTime)
                         {
-                            if (parentProcessId == childParentProcessId)
+                            int childParentProcessId = GetParentProcessId(possibleChildProcess.Id);
+                            if (childParentProcessId != 0)
                             {
-                                // Add this one
-                                myChildren.Add(new KeyValuePair<int, SafeProcessHandle>(possibleChildProcess.Id, childHandle));
-                                keepHandle = true;
+                                if (parentProcessId == childParentProcessId)
+                                {
+                                    // Add this one
+                                    myChildren.Add(new KeyValuePair<int, SafeProcessHandle>(possibleChildProcess.Id, childHandle));
+                                    keepHandle = true;
+                                }
                             }
                         }
                     }
-                }
-                finally
-                {
-                    if (!keepHandle)
+                    finally
                     {
-                        childHandle.Dispose();
+                        if (!keepHandle)
+                        {
+                            childHandle.Dispose();
+                        }
                     }
                 }
             }
diff --git a/src/MSBuild/XMake.cs b/src/MSBuild/XMake.cs
index 213b842ae6a..8aa95e9ab23 100644
--- a/src/MSBuild/XMake.cs
+++ b/src/MSBuild/XMake.cs
@@ -662,6 +662,9 @@ public static ExitType Execute(
             ExitType exitType = ExitType.Success;
 
             ConsoleCancelEventHandler cancelHandler = Console_CancelKeyPress;
+
+            TextWriter preprocessWriter = null;
+            TextWriter targetsWriter = null;
             try
             {
 #if FEATURE_GET_COMMANDLINE
@@ -701,8 +704,6 @@ public static ExitType Execute(
 #else
                 bool enableNodeReuse = false;
 #endif
-                TextWriter preprocessWriter = null;
-                TextWriter targetsWriter = null;
                 bool detailedSummary = false;
                 ISet<string> warningsAsErrors = null;
                 ISet<string> warningsNotAsErrors = null;
@@ -819,12 +820,15 @@ public static ExitType Execute(
                     }
                     else if ((getProperty.Length > 0 || getItem.Length > 0) && (targets is null || targets.Length == 0))
                     {
+                        TextWriter output = null;
                         try
                         {
                             using (ProjectCollection collection = new(globalProperties, loggers, ToolsetDefinitionLocations.Default))
                             {
                                 Project project = collection.LoadProject(projectFile, globalProperties, toolsVersion);
-                                TextWriter output = getResultOutputFile.Length > 0 ? new StreamWriter(getResultOutputFile) : Console.Out;
+                                output = getResultOutputFile.Length > 0
+                                    ? new StreamWriter(getResultOutputFile)
+                                    : Console.Out;
                                 exitType = OutputPropertiesAfterEvaluation(getProperty, getItem, project, output);
                                 collection.LogBuildFinishedEvent(exitType == ExitType.Success);
                             }
@@ -833,6 +837,10 @@ public static ExitType Execute(
                         {
                             exitType = ExitType.BuildError;
                         }
+                        finally
+                        {
+                            output?.Dispose();
+                        }
                     }
                     else // regular build
                     {
@@ -885,10 +893,18 @@ public static ExitType Execute(
 
                     string timerOutputFilename = Environment.GetEnvironmentVariable("MSBUILDTIMEROUTPUTS");
 
-                    if (outputPropertiesItemsOrTargetResults && targets?.Length > 0 && result is not null)
+                    TextWriter outputStream = null;
+                    try
+                    {
+                        if (outputPropertiesItemsOrTargetResults && targets?.Length > 0 && result is not null)
+                        {
+                            outputStream = getResultOutputFile.Length > 0 ? new StreamWriter(getResultOutputFile) : Console.Out;
+                            exitType = OutputBuildInformationInJson(result, getProperty, getItem, getTargetResult, loggers, exitType, outputStream);
+                        }
+                    }
+                    finally
                     {
-                        TextWriter outputStream = getResultOutputFile.Length > 0 ? new StreamWriter(getResultOutputFile) : Console.Out;
-                        exitType = OutputBuildInformationInJson(result, getProperty, getItem, getTargetResult, loggers, exitType, outputStream);
+                        outputStream?.Dispose();
                     }
 
                     if (!string.IsNullOrEmpty(timerOutputFilename))
@@ -1032,6 +1048,9 @@ public static ExitType Execute(
 
                 NativeMethodsShared.RestoreConsoleMode(s_originalConsoleMode);
 
+                preprocessWriter?.Dispose();
+                targetsWriter?.Dispose();
+
 #if FEATURE_GET_COMMANDLINE
                 MSBuildEventSource.Log.MSBuildExeStop(commandLine);
 #else
@@ -3764,9 +3783,9 @@ private static ILogger[] ProcessLoggingSwitches(
                 ProcessConsoleLoggerSwitch(noConsoleLogger, consoleLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);
             }
 
-            ProcessDistributedFileLogger(distributedFileLogger, fileLoggerParameters, distributedLoggerRecords, loggers, cpuCount);
+            ProcessDistributedFileLogger(distributedFileLogger, fileLoggerParameters, distributedLoggerRecords);
 
-            ProcessFileLoggers(groupedFileLoggerParameters, distributedLoggerRecords, verbosity, cpuCount, loggers);
+            ProcessFileLoggers(groupedFileLoggerParameters, distributedLoggerRecords, cpuCount, loggers);
 
             verbosity = outVerbosity;
 
@@ -3808,7 +3827,7 @@ internal static string AggregateParameters(string anyPrefixingParameter, string[
         /// Add a file logger with the appropriate parameters to the loggers list for each
         /// non-empty set of file logger parameters provided.
         /// </summary>
-        private static void ProcessFileLoggers(string[][] groupedFileLoggerParameters, List<DistributedLoggerRecord> distributedLoggerRecords, LoggerVerbosity verbosity, int cpuCount, List<ILogger> loggers)
+        private static void ProcessFileLoggers(string[][] groupedFileLoggerParameters, List<DistributedLoggerRecord> distributedLoggerRecords, int cpuCount, List<ILogger> loggers)
         {
             for (int i = 0; i < groupedFileLoggerParameters.Length; i++)
             {
@@ -4001,9 +4020,7 @@ private static DistributedLoggerRecord CreateForwardingLoggerRecord(ILogger logg
         internal static void ProcessDistributedFileLogger(
             bool distributedFileLogger,
             string[] fileLoggerParameters,
-            List<DistributedLoggerRecord> distributedLoggerRecords,
-            List<ILogger> loggers,
-            int cpuCount)
+            List<DistributedLoggerRecord> distributedLoggerRecords)
         {
             if (distributedFileLogger)
             {
