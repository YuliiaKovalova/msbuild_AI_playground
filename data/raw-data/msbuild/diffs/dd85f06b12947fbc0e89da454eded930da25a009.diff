diff --git a/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLogger.cs b/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLogger.cs
index 42e9b3cd51e..718abddbc50 100644
--- a/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLogger.cs
+++ b/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLogger.cs
@@ -7,7 +7,6 @@
 using System.Text;
 using System.Threading.Tasks;
 using Microsoft.Build.Framework;
-using Newtonsoft.Json.Linq;
 
 namespace Microsoft.Build.CommandLine.UnitTests.TestAssets.MemberAccessException.LoggerProject
 {
diff --git a/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLogger.csproj b/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLogger.csproj
index 96a6e7a82b6..79d5be48816 100644
--- a/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLogger.csproj
+++ b/src/MSBuild.UnitTests/TestAssets/MemberAccessException/LoggerProject/CustomLogger.csproj
@@ -9,6 +9,5 @@
   </PropertyGroup>
   <ItemGroup>
     <PackageReference Include="Microsoft.Build.Framework" Version="17.0.0" />
-    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
   </ItemGroup>
 </Project>
diff --git a/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.cs b/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.cs
index 62fded03c89..40c60116787 100644
--- a/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.cs
+++ b/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.cs
@@ -7,7 +7,6 @@
 using System.Text;
 using System.Threading.Tasks;
 using Microsoft.Build.Framework;
-using Newtonsoft.Json.Linq;
 
 namespace Microsoft.Build.CommandLine.UnitTests.TestAssets.TargetInvocationException.LoggerProject
 {
diff --git a/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.csproj b/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.csproj
index 96a6e7a82b6..c5da4dff7c1 100644
--- a/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.csproj
+++ b/src/MSBuild.UnitTests/TestAssets/TargetInvocationException/LoggerProject/FaultyLogger.csproj
@@ -2,13 +2,12 @@
   <PropertyGroup>
     <TargetFramework>netstandard2.0</TargetFramework>
     <OutputType>Library</OutputType>
-    <AssemblyName>CustomLogger</AssemblyName>
+    <AssemblyName>FaultyLogger</AssemblyName>
     <OutputPath>artifacts/bin</OutputPath>
     <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
     <LangVersion>8.0</LangVersion>
   </PropertyGroup>
   <ItemGroup>
     <PackageReference Include="Microsoft.Build.Framework" Version="17.0.0" />
-    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
   </ItemGroup>
 </Project>
diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index 2c078976ee1..62e26e60d84 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -2541,30 +2541,17 @@ public void LoggerThrowsMemberAccessExceptionWhenClassIsInvalid(string memberAcc
         {
             using (var env = TestEnvironment.Create())
             {
-                string projectString = "<Project><Target Name=\"t\"><Message Text=\"Hello\"/></Target></Project>";
+                string projectContent = "<Project><Target Name=\"t\"><Message Text=\"Hello\"/></Target></Project>";
                 var tempDir = _env.CreateFolder();
-                var memberAccessPath = Path.Combine(TestAssetsRootPath, memberAccess);
-                var loggerProjDir = Path.Combine(memberAccessPath, "LoggerProject");
 
-                var projectFile = tempDir.CreateFile("memberaccesstest.proj", projectString);
-
-                var tempLoggerProjDir = Path.Combine(tempDir.Path, "LoggerProject");
-                Directory.CreateDirectory(tempLoggerProjDir);
-
-                foreach (var file in Directory.GetFiles(loggerProjDir, "*.*", SearchOption.AllDirectories))
-                {
-                    var relativePath = file.Substring(loggerProjDir.Length + 1);
-                    var destPath = Path.Combine(tempLoggerProjDir, relativePath);
-                    Directory.CreateDirectory(Path.GetDirectoryName(destPath));
-                    File.Copy(file, destPath, true);
-                }
+                (string projectFilePath, string tempLoggerProjDir) = CopyTestAssetsToTestEnv(tempDir, projectContent, memberAccess);
 
                 string projectCheckBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
                 $"{Path.Combine(tempLoggerProjDir, $"CustomLogger.csproj")} -restore -verbosity:n", out bool success);
 
                 var loggerDllPath = Path.Combine(tempLoggerProjDir, "artifacts", "bin", "netstandard2.0", expectedLoggerName);
                 var loggerSwitch = $"{loggerTemplate}{loggerDllPath}";
-                var mainBuildParameters = $"{projectFile.Path} -restore {loggerSwitch} -verbosity:diagnostic";
+                var mainBuildParameters = $"{projectFilePath} -restore {loggerSwitch} -verbosity:diagnostic";
 
                 string mainBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
                     mainBuildParameters,
@@ -2576,36 +2563,23 @@ public void LoggerThrowsMemberAccessExceptionWhenClassIsInvalid(string memberAcc
         }
 
         [Theory]
-        [InlineData("TargetInvocationException", "-logger:,", "CustomLogger.dll")]
-        [InlineData("TargetInvocationException", "-distributedlogger:,", "CustomLogger.dll")]
+        [InlineData("TargetInvocationException", "-logger:,", "FaultyLogger.dll")]
+        [InlineData("TargetInvocationException", "-distributedlogger:,", "FaultyLogger.dll")]
         public void LoggerThrowsTargetInvocationException(string targetInvocation, string loggerTemplate, string expectedLoggerName)
         {
             using (var env = TestEnvironment.Create())
             {
-                string projectString = "<Project><Target Name=\"t\"><Message Text=\"Hello\"/></Target></Project>";
+                string projectContent = "<Project><Target Name=\"t\"><Message Text=\"Hello\"/></Target></Project>";
                 var tempDir = _env.CreateFolder();
-                var targetInvocationPath = Path.Combine(TestAssetsRootPath, targetInvocation);
-                var loggerProjDir = Path.Combine(targetInvocationPath, "LoggerProject");
-
-                var projectFile = tempDir.CreateFile("targetinvocationtest.proj", projectString);
 
-                var tempLoggerProjDir = Path.Combine(tempDir.Path, "LoggerProject");
-                Directory.CreateDirectory(tempLoggerProjDir);
+                (string projectFilePath, string tempLoggerProjDir) = CopyTestAssetsToTestEnv(tempDir, projectContent, targetInvocation);
 
-                foreach (var file in Directory.GetFiles(loggerProjDir, "*.*", SearchOption.AllDirectories))
-                {
-                    var relativePath = file.Substring(loggerProjDir.Length + 1);
-                    var destPath = Path.Combine(tempLoggerProjDir, relativePath);
-                    Directory.CreateDirectory(Path.GetDirectoryName(destPath));
-                    File.Copy(file, destPath, true);
-                }
-
-                string projectCheckBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
-                $"{Path.Combine(loggerProjDir, $"FaultyLogger.csproj")} -restore -verbosity:n", out bool success);
+                string loggerBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
+                $"{Path.Combine(tempLoggerProjDir, $"FaultyLogger.csproj")} -restore -verbosity:n", out bool success);
 
-                var loggerDllPath = Path.Combine(loggerProjDir, "artifacts", "bin", "netstandard2.0", expectedLoggerName);
+                var loggerDllPath = Path.Combine(tempLoggerProjDir, "artifacts", "bin", "netstandard2.0", expectedLoggerName);
                 var loggerSwitch = $"{loggerTemplate}{loggerDllPath}";
-                var mainBuildParameters = $"{projectFile.Path} -restore {loggerSwitch} -verbosity:diagnostic";
+                var mainBuildParameters = $"{projectFilePath} -restore {loggerSwitch} -verbosity:diagnostic";
 
                 string mainBuildLog = RunnerUtilities.ExecBootstrapedMSBuild(
                     mainBuildParameters,
@@ -2975,6 +2949,26 @@ private string ExecuteMSBuildExeExpectFailure(string projectContents, IDictionar
             return (success, output);
         }
 
+        private (string projectFilePath, string tempLoggerProjDir) CopyTestAssetsToTestEnv(TransientTestFolder tempDir, string projectContent, string folderName)
+        {
+            var testAssetsPath = Path.Combine(TestAssetsRootPath, folderName);
+            var loggerProjDir = Path.Combine(testAssetsPath, "LoggerProject");
+
+            var projectFile = tempDir.CreateFile("loggerproject.proj", projectContent);
+
+            var tempLoggerProjDir = Path.Combine(tempDir.Path, "LoggerProject");
+            Directory.CreateDirectory(tempLoggerProjDir);
+
+            foreach (var file in Directory.GetFiles(loggerProjDir, "*.*", SearchOption.AllDirectories))
+            {
+                var relativePath = file.Substring(loggerProjDir.Length + 1);
+                var destPath = Path.Combine(tempLoggerProjDir, relativePath);
+                Directory.CreateDirectory(Path.GetDirectoryName(destPath));
+                File.Copy(file, destPath, true);
+            }
+            return (projectFile.Path, tempLoggerProjDir);
+        }
+
         public void Dispose()
         {
             _env.Dispose();
