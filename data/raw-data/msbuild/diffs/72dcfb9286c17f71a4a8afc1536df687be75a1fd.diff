diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 3afb0893b43..aba40e9a8e9 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -644,41 +644,56 @@ internal SortedList ExtractItemList(IEnumerable items)
         /// </summary>
         internal virtual void OutputItems(string itemType, ArrayList itemTypeList)
         {
-            setColor(ConsoleColor.Gray);
-            WriteLinePretty(itemType);
-            setColor(ConsoleColor.DarkGray);
+            WriteItemType(itemType);
 
-            Internal.Utilities.EnumerateItems(itemTypeList, entry =>
+            foreach (var item in itemTypeList)
             {
-                string itemSpec = entry.Value switch
+                string itemSpec = item switch
                 {
                     ITaskItem taskItem => taskItem.ItemSpec,
                     IItem iitem => iitem.EvaluatedInclude,
-                    { } misc => throw new InvalidOperationException($"Unsupported item {entry.Value} of type {entry.Value.GetType()}"),
+                    { } misc => throw new InvalidOperationException($"Unsupported item {item} of type {item.GetType()}"),
                     null => "null"
                 };
 
-                var metadata = entry.Value switch
+                var metadata = item switch
                 {
                     IMetadataContainer metadataContainer => metadataContainer.EnumerateMetadata(),
                     IItem<ProjectMetadata> iitem => iitem.Metadata.Select(m => new KeyValuePair<string, string>(m.Name, m.EvaluatedValue)),
                     _ => throw new InvalidOperationException("Unsupported item with metadata")
                 };
 
-                WriteLinePretty("    "  /* indent slightly*/ + itemSpec);
+                WriteItemSpec(itemSpec);
 
                 if (metadata != null)
                 {
                     foreach (var metadatum in metadata)
                     {
-                        WriteLinePretty("        " + metadatum.Key + " = " + metadatum.Value);
+                        WriteMetadata(metadatum.Key, metadatum.Value);
                     }
                 }
-            });
+            }
 
             resetColor();
         }
 
+        protected virtual void WriteItemType(string itemType)
+        {
+            setColor(ConsoleColor.Gray);
+            WriteLinePretty(itemType);
+            setColor(ConsoleColor.DarkGray);
+        }
+
+        protected virtual void WriteItemSpec(string itemSpec)
+        {
+            WriteLinePretty("    " + itemSpec);
+        }
+
+        protected virtual void WriteMetadata(string name, string value)
+        {
+            WriteLinePretty("        " + name + " = " + value);
+        }
+
         /// <summary>
         /// Returns a performance counter for a given scope (either task name or target name)
         /// from the given table.
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 34b28a19196..d9d42add607 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -782,44 +782,23 @@ internal void WriteItems(BuildEventArgs e, IEnumerable items)
             ShownBuildEventContext(e.BuildEventContext);
         }
 
-        internal override void OutputItems(string itemType, ArrayList itemTypeList)
+        protected override void WriteItemType(string itemType)
         {
-            // Write each item, one per line
-            bool haveWrittenItemType = false;
-            foreach (ITaskItem item in itemTypeList)
-            {
-                if (!haveWrittenItemType)
-                {
-                    setColor(ConsoleColor.DarkGray);
-                    WriteMessageAligned(itemType, false);
-                    haveWrittenItemType = true;
-                }
-                setColor(ConsoleColor.Gray);
-
-                // Indent the text by two tab lengths
-                StringBuilder result = new StringBuilder((2 * tabWidth) + item.ItemSpec.Length);
-                result.Append(' ', 2 * tabWidth).Append(item.ItemSpec);
-                WriteMessageAligned(result.ToString(), false);
-
-                IDictionary metadata = item.CloneCustomMetadata();
+            setColor(ConsoleColor.DarkGray);
+            WriteMessageAligned(itemType, prefixAlreadyWritten: false);
+            setColor(ConsoleColor.Gray);
+        }
 
-                foreach (DictionaryEntry metadatum in metadata)
-                {
-                    string valueOrError;
-                    try
-                    {
-                        valueOrError = item.GetMetadata(metadatum.Key as string);
-                    }
-                    catch (InvalidProjectFileException e)
-                    {
-                        valueOrError = e.Message;
-                    }
+        protected override void WriteItemSpec(string itemSpec)
+        {
+            WriteMessageAligned(new string(' ', 2 * tabWidth) + itemSpec, prefixAlreadyWritten: false);
+        }
 
-                    WriteMessageAligned($"{new string(' ', 4 * tabWidth)}{metadatum.Key} = {valueOrError}", false);
-                }
-            }
-            resetColor();
+        protected override void WriteMetadata(string name, string value)
+        {
+            WriteMessageAligned($"{new string(' ', 4 * tabWidth)}{name} = {value}", prefixAlreadyWritten: false);
         }
+
         /// <summary>
         /// Handler for target started events
         /// </summary>
