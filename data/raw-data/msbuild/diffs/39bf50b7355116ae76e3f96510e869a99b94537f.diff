diff --git a/src/Build/BackEnd/Shared/BuildResult.cs b/src/Build/BackEnd/Shared/BuildResult.cs
index b6979377133..f39797c78e5 100644
--- a/src/Build/BackEnd/Shared/BuildResult.cs
+++ b/src/Build/BackEnd/Shared/BuildResult.cs
@@ -630,10 +630,16 @@ void ITranslatable.Translate(ITranslator translator)
             // This is a work-around for the bug https://github.com/dotnet/msbuild/issues/10208
             // We are adding a version field to this class to make the ResultsCache backwards compatible with at least 2 previous releases.
             // The adding of a version field is done without a breaking change in 3 steps, each separated with at least 1 intermediate release.
-            // 1st step (done): Add a special key to the dictionary. The presence of this key indicates that the version is serialized next.
-            // When serializing, add a key to the dictionary and a version field. Delete the special key from the dictionary during the deserialization and read a version if it presents.
-            // 2nd step: Stop writing a special key to the dictionary. Always serialize and de-serialize the version field. Remove the special keys if they present in the dictionary.
-            // 3rd step: Stop removing the special keys from the dictionary.
+            //
+            // 1st step (done): Add a special key to the _savedEnvironmentVariables dictionary during the serialization. A workaround overload of the TranslateDictionary function is created to achieve it.
+            // The presence of this key will indicate that the version is serialized next.
+            // When serializing, add a key to the dictionary and serialize a version field.
+            // Do not actually save the special key to dictionary during the deserialization, but read a version as a next field if it presents.
+            //
+            // 2nd step: Stop serialize a special key with the dictionary _savedEnvironmentVariables using the TranslateDictionary function workaround overload. Always serialize and de-serialize the version field.
+            // Continue to deserialize _savedEnvironmentVariables with the TranslateDictionary function workaround overload in order not to deserialize dictionary with the special keys.
+            //
+            // 3rd step: Stop using the TranslateDictionary function workaround overload during _savedEnvironmentVariables deserialization.
             if (_version == 0)
             {
                 // Escape hatch: serialize/deserialize without version field.
@@ -652,13 +658,18 @@ void ITranslatable.Translate(ITranslator translator)
                     // Add the special key VersionKeyName to additional entries indicating the presence of a version to the _savedEnvironmentVariables dictionary.
                     additionalEntries.Add(VersionKeyName, String.Empty);
 
+                    // Serialize the special key together with _savedEnvironmentVariables dictionary using the workaround overload of TranslateDictionary:
                     translator.TranslateDictionary(ref _savedEnvironmentVariables, StringComparer.OrdinalIgnoreCase, ref additionalEntries, additionalEntriesKeys);
+
+                    // Serialize version
                     translator.Translate(ref _version);
                 }
                 else if (translator.Mode == TranslationDirection.ReadFromStream)
                 {
-                    // Read the dictionary. If the special key VersionKeyName present there, also read a version and remove the special keys.
+                    // Read the dictionary using the workaround overload of TranslateDictionary: special keys (additionalEntriesKeys) would be read to additionalEntries instead of the _savedEnvironmentVariables dictionary.
                     translator.TranslateDictionary(ref _savedEnvironmentVariables, StringComparer.OrdinalIgnoreCase, ref additionalEntries, additionalEntriesKeys);
+
+                    // If the special key VersionKeyName present in additionalEntries, also read a version, otherwise set it to 0.
                     if (additionalEntries is not null && additionalEntries.ContainsKey(VersionKeyName))
                     {
                         translator.Translate(ref _version);
diff --git a/src/Framework/BinaryTranslator.cs b/src/Framework/BinaryTranslator.cs
index 81c3059cf73..c93956c8178 100644
--- a/src/Framework/BinaryTranslator.cs
+++ b/src/Framework/BinaryTranslator.cs
@@ -26,7 +26,7 @@ internal static class BinaryTranslator
         /// Presence of this key in the dictionary indicates that it was null.
         /// </summary>
         /// <remarks>
-        /// This is needed for a workaround.
+        /// This constant is needed for a workaround concerning serializing <see cref="BuildResult"/> with a version.
         /// </remarks>
         private const string SpecialKeyForDictionaryBeingNull = "=MSBUILDDICTIONARYWASNULL=";
 
@@ -605,6 +605,10 @@ public void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqua
             /// <param name="comparer">The comparer used to instantiate the dictionary.</param>
             /// <param name="additionalEntries">Additional entries to be translated</param>
             /// <param name="additionalEntriesKeys">Additional entries keys</param>
+            /// <remarks>
+            /// This overload is needed for a workaround concerning serializing <see cref="BuildResult"/> with a version.
+            /// It deserializes additional entries together with the main dictionary.
+            /// </remarks>
             public void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqualityComparer<string> comparer, ref Dictionary<string, string> additionalEntries, HashSet<string> additionalEntriesKeys)
             {
                 if (!TranslateNullable(dictionary))
@@ -1316,9 +1320,13 @@ public void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqua
             /// <param name="comparer">The comparer used to instantiate the dictionary.</param>
             /// <param name="additionalEntries">Additional entries to be translated.</param>
             /// <param name="additionalEntriesKeys">Additional entries keys.</param>
+            /// <remarks>
+            /// This overload is needed for a workaround concerning serializing <see cref="BuildResult"/> with a version.
+            /// It serializes additional entries together with the main dictionary.
+            /// </remarks>
             public void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqualityComparer<string> comparer, ref Dictionary<string, string> additionalEntries, HashSet<string> additionalEntriesKeys)
             {
-                // Translate whether object is Null
+                // Translate whether object is null
                 if ((dictionary is null) && ((additionalEntries is null) || (additionalEntries.Count == 0)))
                 {
                     _writer.Write(false);
@@ -1330,11 +1338,14 @@ public void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqua
                     _writer.Write(true);
                 }
 
-                // Writing dictionary, extra entries and special key if copy dictionary was null
-                int count = (dictionary is null ? 0 : dictionary.Count) + (additionalEntries is null ? 0 : additionalEntries.Count) + (dictionary is null ? 1 : 0);
+                // Writing a dictionary, additional entries and special key if dictionary was null. We need the special key for distinguishing whether the initial dictionary was null or empty.
+                int count = (dictionary is null ? 1 : 0) +
+                            (additionalEntries is null ? 0 : additionalEntries.Count) +
+                            (dictionary is null ? 0 : dictionary.Count);
+
                 _writer.Write(count);
 
-                // If the dictionary was null, add a special key SpecialKeyForDictionaryBeingNull to the dictionary.
+                // If the dictionary was null, serialize a special key SpecialKeyForDictionaryBeingNull.
                 if (dictionary is null)
                 {
                     string key = SpecialKeyForDictionaryBeingNull;
@@ -1343,9 +1354,9 @@ public void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqua
                     Translate(ref value);
                 }
 
+                // Serialize additional entries
                 if (additionalEntries is not null)
                 {
-                    // Translate extra entries
                     foreach (KeyValuePair<string, string> pair in additionalEntries)
                     {
                         string key = pair.Key;
@@ -1355,9 +1366,9 @@ public void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqua
                     }
                 }
 
+                // Serialize dictionary
                 if (dictionary is not null)
                 {
-                    // Translate dictionary
                     foreach (KeyValuePair<string, string> pair in dictionary)
                     {
                         string key = pair.Key;
diff --git a/src/Framework/ITranslator.cs b/src/Framework/ITranslator.cs
index c99eecd730d..c28ce7219c6 100644
--- a/src/Framework/ITranslator.cs
+++ b/src/Framework/ITranslator.cs
@@ -320,12 +320,16 @@ void TranslateArray<T>(ref T[] array)
         void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqualityComparer<string> comparer);
 
         /// <summary>
-        /// Translates a dictionary of { string, string } adding extra entries.
+        /// Translates a dictionary of { string, string } adding additional entries.
         /// </summary>
         /// <param name="dictionary">The dictionary to be translated.</param>
         /// <param name="comparer">The comparer used to instantiate the dictionary.</param>
         /// <param name="additionalEntries">Additional entries to be translated</param>
         /// <param name="additionalEntriesKeys">Additional entries keys</param>
+        /// <remarks>
+        /// This overload is needed for a workaround concerning serializing <see cref="BuildResult"/> with a version.
+        /// It serializes/deserializes additional entries together with the main dictionary.
+        /// </remarks>
         void TranslateDictionary(ref Dictionary<string, string> dictionary, IEqualityComparer<string> comparer, ref Dictionary<string, string> additionalEntries, HashSet<string> additionalEntriesKeys);
 
         void TranslateDictionary(ref IDictionary<string, string> dictionary, NodePacketCollectionCreator<IDictionary<string, string>> collectionCreator);
