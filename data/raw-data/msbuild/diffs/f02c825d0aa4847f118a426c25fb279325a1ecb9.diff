diff --git a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
index 7a490b59def..a903ee5b609 100644
--- a/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
+++ b/src/Build.UnitTests/WarningsAsMessagesAndErrors_Tests.cs
@@ -428,6 +428,7 @@ public void WarningsNotAsErrorsAndMessages_Tests(bool useMSPrefix)
         [InlineData("WarningsAsErrors", "MSB1007", false)]
         [InlineData("WarningsAsMessages", "MSB1007", false)]
         [InlineData("WarningsNotAsErrors", "MSB1007", true)]
+        [InlineData("WarningsNotAsErrors", "MSB1007", false)]
         public void WarningsChangeWaveTest(string property, string propertyData, bool treatWarningsAsErrors)
         {
             using (TestEnvironment env = TestEnvironment.Create(_output))
@@ -449,6 +450,8 @@ public void WarningsChangeWaveTest(string property, string propertyData, bool tr
                 {
                     // Since the "no prefix" variations can't do anything with the change wave disabled, this should always fail.
                     MockLogger logger = proj.BuildProjectExpectFailure();
+                    logger.ErrorCount.ShouldBe(1);
+                    logger.AssertLogContains(warningCode);
                 }
                 else
                 {
@@ -459,6 +462,7 @@ public void WarningsChangeWaveTest(string property, string propertyData, bool tr
 
                     logger.AssertLogContains(warningCode);
                 }
+                ChangeWaves.ResetStateForTests();
             }
         }
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index d1f15570b59..a5b8e6b9717 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -8,7 +8,6 @@
 using System.Globalization;
 using System.IO;
 using System.Linq;
-using System.Reflection.Metadata.Ecma335;
 using System.Threading;
 using System.Threading.Tasks;
 using Microsoft.Build.BackEnd.Logging;
@@ -1470,7 +1469,6 @@ private static ISet<string> ParseWarningCodes(string warnings, string warningsNo
             return result2;
         }
 
-
         private sealed class DedicatedThreadsTaskScheduler : TaskScheduler
         {
             private readonly BlockingCollection<Task> _tasks = new BlockingCollection<Task>();
