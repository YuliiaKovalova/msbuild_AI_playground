diff --git a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
index 5d117b6822a..1d9df49e2e3 100644
--- a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
+++ b/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs
@@ -916,13 +916,14 @@ private TaskFactoryWrapper FindTaskInRegistry(IDictionary<string, string> taskId
                     }
                 }
 
+                string taskFactoryFullName = returnClass.TaskFactory is AssemblyTaskFactory atf ? atf.TaskName : returnClass.TaskFactory.TaskType.FullName;
                 // Map to an intrinsic task, if necessary.
-                if (String.Equals(returnClass.TaskFactory.TaskType.FullName, "Microsoft.Build.Tasks.MSBuild", StringComparison.OrdinalIgnoreCase))
+                if (String.Equals(taskFactoryFullName, "Microsoft.Build.Tasks.MSBuild", StringComparison.OrdinalIgnoreCase))
                 {
                     returnClass = new TaskFactoryWrapper(new IntrinsicTaskFactory(typeof(MSBuild)), new TypeInformation(new LoadedType(typeof(MSBuild), AssemblyLoadInfo.Create(typeof(TaskExecutionHost).GetTypeInfo().Assembly.FullName, null))), AssemblyLoadInfo.Create(typeof(TaskExecutionHost).GetTypeInfo().Assembly.FullName, null), _taskName, null);
                     _intrinsicTasks[_taskName] = returnClass;
                 }
-                else if (String.Equals(returnClass.TaskFactory.TaskType.FullName, "Microsoft.Build.Tasks.CallTarget", StringComparison.OrdinalIgnoreCase))
+                else if (String.Equals(taskFactoryFullName, "Microsoft.Build.Tasks.CallTarget", StringComparison.OrdinalIgnoreCase))
                 {
                     returnClass = new TaskFactoryWrapper(new IntrinsicTaskFactory(typeof(CallTarget)), new TypeInformation(new LoadedType(typeof(CallTarget), AssemblyLoadInfo.Create(typeof(TaskExecutionHost).GetTypeInfo().Assembly.FullName, null))), AssemblyLoadInfo.Create(typeof(TaskExecutionHost).GetTypeInfo().Assembly.FullName, null), _taskName, null);
                     _intrinsicTasks[_taskName] = returnClass;
diff --git a/src/Build/Instance/ReflectableTaskPropertyInfo.cs b/src/Build/Instance/ReflectableTaskPropertyInfo.cs
index f54a5a6c143..806134ea248 100644
--- a/src/Build/Instance/ReflectableTaskPropertyInfo.cs
+++ b/src/Build/Instance/ReflectableTaskPropertyInfo.cs
@@ -60,6 +60,16 @@ internal ReflectableTaskPropertyInfo(PropertyInfo propertyInfo)
             _propertyInfo = propertyInfo;
         }
 
+        internal ReflectableTaskPropertyInfo(TypeInformationPropertyInfo propertyInfo) :
+            base(
+                propertyInfo.Name,
+                propertyInfo.PropertyType,
+                propertyInfo.OutputAttribute,
+                propertyInfo.RequiredAttribute)
+        {
+
+        }
+
         /// <summary>
         /// Gets or sets the reflection-produced PropertyInfo.
         /// </summary>
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index 0a8b5359213..0f9c1538d03 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -3,6 +3,7 @@
 
 using System;
 using System.Collections.Generic;
+using System.Linq;
 using System.Reflection;
 using System.Threading.Tasks;
 using Microsoft.Build.Execution;
@@ -93,6 +94,11 @@ public Type TaskType
             get { return _typeInformation.LoadedType?.Type ?? Type.GetType(_typeInformation.TypeName, true, true); }
         }
 
+        public string TaskName
+        {
+            get { return _typeInformation.LoadedType is null ? $"{_typeInformation.Namespace}.{_typeInformation.TypeName}" : TaskType.FullName; }
+        }
+
         public TypeInformation TypeInformation { get { return _typeInformation; } }
 
         public bool ImplementsIGeneratedTask { get { return _typeInformation?.ImplementsIGeneratedTask ?? false; } }
@@ -148,14 +154,9 @@ public bool Initialize(string taskName, IDictionary<string, string> factoryIdent
         /// </summary>
         public TaskPropertyInfo[] GetTaskParameters()
         {
-            PropertyInfo[] infos = _typeInformation.GetProperties(BindingFlags.Instance | BindingFlags.Public);
-            var propertyInfos = new TaskPropertyInfo[infos.Length];
-            for (int i = 0; i < infos.Length; i++)
-            {
-                propertyInfos[i] = new ReflectableTaskPropertyInfo(infos[i]);
-            }
-
-            return propertyInfos;
+            return _typeInformation.LoadedType is null ?
+                _typeInformation.Properties.Select(prop => new ReflectableTaskPropertyInfo(prop)).ToArray() :
+                _typeInformation.GetProperties(BindingFlags.Instance | BindingFlags.Public).Select(prop => new ReflectableTaskPropertyInfo(prop)).ToArray();
         }
 
         /// <summary>
diff --git a/src/Build/Instance/TaskFactories/TaskHostTask.cs b/src/Build/Instance/TaskFactories/TaskHostTask.cs
index 8fad81079da..5ecc66249a0 100644
--- a/src/Build/Instance/TaskFactories/TaskHostTask.cs
+++ b/src/Build/Instance/TaskFactories/TaskHostTask.cs
@@ -13,7 +13,6 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 using Microsoft.Build.BackEnd.Logging;
-using System.Linq;
 
 namespace Microsoft.Build.BackEnd
 {
@@ -202,16 +201,28 @@ public object GetPropertyValue(TaskPropertyInfo property)
             {
                 // If we returned an exception, then we want to throw it when we 
                 // do the get.  
-                if (value is Exception)
+                if (value is Exception eVal)
                 {
-                    throw (Exception)value;
+                    throw eVal;
                 }
 
                 return value;
             }
+            else if (_taskType.LoadedType is null)
+            {
+                switch (property.Name)
+                {
+                    case "HostObject":
+                        return this.HostObject;
+                    case "BuildEngine":
+                        return this.BuildEngine;
+                    default:
+                        throw new InternalErrorException($"{property.Name} is not a property on TaskHostTask, or else it needs to be added to its registered list of properties.");
+                }
+            }
             else
             {
-                PropertyInfo parameter = _taskType.GetProperties(BindingFlags.Instance | BindingFlags.Public).Where(p => p.Name.Equals(property.Name)).FirstOrDefault();
+                PropertyInfo parameter = _taskType.GetProperty(property.Name, BindingFlags.Instance | BindingFlags.Public);
                 return parameter.GetValue(this, null);
             }
         }
diff --git a/src/Build/Instance/TaskFactoryWrapper.cs b/src/Build/Instance/TaskFactoryWrapper.cs
index 312144d49e8..9248625e6f5 100644
--- a/src/Build/Instance/TaskFactoryWrapper.cs
+++ b/src/Build/Instance/TaskFactoryWrapper.cs
@@ -8,6 +8,7 @@
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 using Microsoft.Build.BackEnd;
+using System.Linq;
 
 namespace Microsoft.Build.Execution
 {
@@ -193,15 +194,15 @@ internal void SetPropertyValue(ITask task, TaskPropertyInfo property, object val
             ErrorUtilities.VerifyThrowArgumentNull(task, nameof(task));
             ErrorUtilities.VerifyThrowArgumentNull(property, nameof(property));
 
-            IGeneratedTask generatedTask = task as IGeneratedTask;
-            if (generatedTask != null)
+            if (task is IGeneratedTask generatedTask)
             {
                 generatedTask.SetPropertyValue(property, value);
             }
             else
             {
-                ReflectableTaskPropertyInfo propertyInfo = (ReflectableTaskPropertyInfo)property;
-                propertyInfo.Reflection.SetValue(task, value, null);
+                PropertyInfo prop = task.GetType().GetProperty(property.Name);
+                prop.SetValue(task, value);
+                //task.GetType().GetTypeInfo().DeclaredProperties.FirstOrDefault(prop => prop.Name.Equals(property.Name)).SetValue(property, value);
             }
         }
 
@@ -220,16 +221,17 @@ internal object GetPropertyValue(ITask task, TaskPropertyInfo property)
             }
             else
             {
-                ReflectableTaskPropertyInfo propertyInfo = property as ReflectableTaskPropertyInfo;
-                if (propertyInfo != null)
-                {
-                    return propertyInfo.Reflection.GetValue(task, null);
-                }
-                else
+                if (property is ReflectableTaskPropertyInfo propertyInfo)
                 {
-                    ErrorUtilities.ThrowInternalError("Task does not implement IGeneratedTask and we don't have {0} either.", typeof(ReflectableTaskPropertyInfo).Name);
-                    throw new InternalErrorException(); // unreachable
+                    try
+                    {
+                        return propertyInfo.Reflection.GetValue(task, null);
+                    }
+                    // If the type was not loaded, we may end up with a NotImplementedException. Ignore it.
+                    catch (NotImplementedException) { }
                 }
+
+                return task.GetType().GetTypeInfo().GetProperty(property.Name);
             }
         }
 
diff --git a/src/Shared/TaskLoader.cs b/src/Shared/TaskLoader.cs
index d0a80686b2a..d7f899ac795 100644
--- a/src/Shared/TaskLoader.cs
+++ b/src/Shared/TaskLoader.cs
@@ -67,7 +67,7 @@ internal static ITask CreateTask(TypeInformation typeInformation, string taskNam
 #if FEATURE_APPDOMAIN
                 if (separateAppDomain)
                 {
-                    if (!typeInformation.IsMarshallByRef)
+                    if (!typeInformation.IsMarshalByRef)
                     {
                         logError
                         (
@@ -119,12 +119,12 @@ internal static ITask CreateTask(TypeInformation typeInformation, string taskNam
 #endif
                     }
                 }
-                else
+                else if (typeInformation.LoadedType is not null)
 #endif
                 {
                     // perf improvement for the same appdomain case - we already have the type object
                     // and don't want to go through reflection to recreate it from the name.
-                    return (ITask)Activator.CreateInstance(typeInformation.LoadInfo.AssemblyName ?? typeInformation.LoadedType.Assembly.AssemblyName, typeInformation.TypeName);
+                    return (ITask)Activator.CreateInstance(typeInformation.LoadedType.Type);
                 }
 
 #if FEATURE_APPDOMAIN
diff --git a/src/Shared/TypeInformation.cs b/src/Shared/TypeInformation.cs
index e1898d0f8cd..e0e5606fdba 100644
--- a/src/Shared/TypeInformation.cs
+++ b/src/Shared/TypeInformation.cs
@@ -3,6 +3,9 @@
 
 using System;
 using System.Reflection;
+#if !TASKHOST
+using System.Reflection.Metadata;
+#endif
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Shared
@@ -16,9 +19,13 @@ internal sealed class TypeInformation
 
         internal bool HasSTAThreadAttribute { get; set; }
         internal bool HasLoadInSeparateAppDomainAttribute { get; set; }
-        internal bool IsMarshallByRef { get; set; }
+        internal bool IsMarshalByRef { get; set; }
         internal bool ImplementsIGeneratedTask { get; set; }
         internal AssemblyName AssemblyName { get; set; }
+        internal string Namespace { get; set; }
+#if !TASKHOST
+        internal TypeInformationPropertyInfo[] Properties { get; set; }
+#endif
 
         internal TypeInformation()
         {
@@ -29,13 +36,14 @@ internal TypeInformation(LoadedType baseType)
             LoadedType = baseType;
             HasSTAThreadAttribute = LoadedType.HasSTAThreadAttribute();
             HasLoadInSeparateAppDomainAttribute = LoadedType.HasLoadInSeparateAppDomainAttribute();
-            IsMarshallByRef = LoadedType.Type.GetTypeInfo().IsMarshalByRef;
+            IsMarshalByRef = LoadedType.Type.GetTypeInfo().IsMarshalByRef;
 #if TASKHOST
             ImplementsIGeneratedTask = false;
 #else
             ImplementsIGeneratedTask = LoadedType.Type is IGeneratedTask;
 #endif
-            AssemblyName = LoadedType.LoadedAssembly.GetName();
+            AssemblyName = LoadedType.LoadedAssembly?.GetName();
+            Namespace = LoadedType.Type.Namespace;
         }
 
         public PropertyInfo[] GetProperties(BindingFlags flags)
@@ -43,6 +51,7 @@ public PropertyInfo[] GetProperties(BindingFlags flags)
             if (LoadedType is null)
             {
                 throw new NotImplementedException();
+                
             }
             else
             {
@@ -62,4 +71,12 @@ public PropertyInfo GetProperty(string name, BindingFlags flags)
             }
         }
     }
-}
\ No newline at end of file
+
+    internal struct TypeInformationPropertyInfo
+    {
+        public string Name { get; set; }
+        public Type PropertyType { get; set; } = null;
+        public bool OutputAttribute { get; set; }
+        public bool RequiredAttribute { get; set; }
+    }
+}
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index b010bc78a7b..11075125241 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -7,6 +7,7 @@
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
+using System.Linq;
 using System.Reflection;
 using System.Reflection.Metadata;
 using System.Reflection.PortableExecutable;
@@ -363,7 +364,7 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
                             foreach (TypeDefinitionHandle typeDefHandle in metadataReader.TypeDefinitions)
                             {
                                 TypeDefinition typeDef = metadataReader.GetTypeDefinition(typeDefHandle);
-                                if ((typeDef.Attributes & TypeAttributes.Public) == 0 || (typeDef.Attributes & TypeAttributes.Class) == 0)
+                                if (!typeDef.Attributes.HasFlag(TypeAttributes.Public) || !typeDef.Attributes.HasFlag(TypeAttributes.Class))
                                 {
                                     continue;
                                 }
@@ -383,19 +384,96 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
                                                 string customAttributeName = metadataReader.GetString(typeReference.Name);
                                                 switch (customAttributeName)
                                                 {
-                                                    case "STAAttribute":
+                                                    case "RunInSTAAttribute":
                                                         typeInformation.HasSTAThreadAttribute = true;
                                                         break;
                                                     case "LoadInSeparateAppDomainAttribute":
                                                         typeInformation.HasLoadInSeparateAppDomainAttribute = true;
                                                         break;
-                                                    case "IsMarshallByRef":
-                                                        typeInformation.IsMarshallByRef = true;
-                                                        break;
                                                 }
                                             }
                                         }
 
+#if !TASKHOST
+                                        IEnumerable<PropertyDefinition> propertyDefinitions = typeDef.GetProperties().Select(prop => metadataReader.GetPropertyDefinition(prop));
+                                        List<TypeInformationPropertyInfo> typePropertyInfos = new();
+                                        foreach (PropertyDefinition propertyDefinition in propertyDefinitions)
+                                        {
+                                            TypeInformationPropertyInfo toAdd = new();
+                                            toAdd.Name = metadataReader.GetString(propertyDefinition.Name);
+                                            foreach (CustomAttributeHandle attr in propertyDefinition.GetCustomAttributes())
+                                            {
+                                                EntityHandle referenceHandle = metadataReader.GetMemberReference((MemberReferenceHandle)metadataReader.GetCustomAttribute(attr).Constructor).Parent;
+                                                if (referenceHandle.Kind == HandleKind.TypeReference)
+                                                {
+                                                    string name = metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)referenceHandle).Name);
+                                                    if (name.Equals("OutputAttribute", StringComparison.OrdinalIgnoreCase))
+                                                    {
+                                                        toAdd.OutputAttribute = true;
+                                                    }
+                                                    else if (name.Equals("RequiredAttribute", StringComparison.OrdinalIgnoreCase))
+                                                    {
+                                                        toAdd.RequiredAttribute = true;
+                                                    }
+                                                }
+                                            }
+                                            typePropertyInfos.Add(toAdd);
+                                        }
+                                        typeInformation.Properties = typePropertyInfos.ToArray();
+#endif
+
+                                        TypeDefinition parentTypeDefinition = typeDef;
+                                        while (true)
+                                        {
+                                            foreach (InterfaceImplementationHandle interfaceHandle in parentTypeDefinition.GetInterfaceImplementations())
+                                            {
+                                                if (metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)metadataReader.GetInterfaceImplementation(interfaceHandle).Interface).Name).Equals("IGeneratedTask"))
+                                                {
+                                                    typeInformation.ImplementsIGeneratedTask = true;
+                                                }
+                                            }
+
+                                            if (parentTypeDefinition.BaseType.IsNil)
+                                            {
+                                                break;
+                                            }
+
+                                            // If the baseType is not a TypeDefinitionHandle, we won't be able to chase it without actually loading the assembly. We would need to find the assembly containing the base type
+                                            // and load it using System.Reflection.Metdata just as we're doing here, but we don't know its path without loading this assembly. Just assume it didn't implement IGeneratedTask.
+                                            bool shouldBreakLoop = false;
+                                            switch (parentTypeDefinition.BaseType.Kind)
+                                            {
+                                                case HandleKind.TypeDefinition:
+                                                    parentTypeDefinition = metadataReader.GetTypeDefinition((TypeDefinitionHandle)parentTypeDefinition.BaseType);
+                                                    break;
+                                                case HandleKind.TypeReference:
+                                                    string parentName = metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)parentTypeDefinition.BaseType).Name);
+                                                    if (parentName.Equals("IGeneratedTask"))
+                                                    {
+                                                        typeInformation.ImplementsIGeneratedTask = true;
+                                                    }
+                                                    else if (parentName.Equals("MarshalByRefObject"))
+                                                    {
+                                                        typeInformation.IsMarshalByRef = true;
+                                                    }
+                                                    shouldBreakLoop = true;
+                                                    break;
+                                                case HandleKind.TypeSpecification:
+                                                    shouldBreakLoop = true;
+                                                    break;
+                                            }
+
+                                            string typeDefinitionName = metadataReader.GetString(parentTypeDefinition.Name);
+                                            if (typeDefinitionName.Equals("MarshalByRefObject"))
+                                            {
+                                                typeInformation.IsMarshalByRef = true;
+                                            }
+                                            if (shouldBreakLoop || typeDefinitionName.Equals("object"))
+                                            {
+                                                break;
+                                            }
+                                        }
+
                                         foreach (InterfaceImplementationHandle interfaceHandle in typeDef.GetInterfaceImplementations())
                                         {
                                             if (metadataReader.GetString(metadataReader.GetTypeReference((TypeReferenceHandle)metadataReader.GetInterfaceImplementation(interfaceHandle).Interface).Name).Equals("IGeneratedTask"))
@@ -406,6 +484,8 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
 
                                         typeInformation.AssemblyName = _assemblyLoadInfo.AssemblyName is null ? new AssemblyName(Path.GetFileNameWithoutExtension(_assemblyLoadInfo.AssemblyFile)) : new AssemblyName(_assemblyLoadInfo.AssemblyName);
 
+                                        typeInformation.Namespace = metadataReader.GetString(metadataReader.GetNamespaceDefinition(metadataReader.GetNamespaceDefinitionRoot().NamespaceDefinitions.First()).Name);
+
                                         break;
                                     }
                                 }
@@ -416,7 +496,7 @@ internal TypeInformation GetLoadedTypeByTypeName(string typeName, bool taskHostF
                 }
                 else
                 {
-                    return new TypeInformation() { LoadedType = new LoadedType(type, _assemblyLoadInfo, _loadedAssembly) };
+                    return new TypeInformation(new LoadedType(type, _assemblyLoadInfo, _loadedAssembly));
                 }
             }
 
