diff --git a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
index cd56d549948..54eefeb925b 100644
--- a/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
+++ b/src/Build.UnitTests/Graph/GraphTestingUtilities.cs
@@ -132,17 +132,17 @@ public static void AssertInnerBuildEvaluation(
 
         internal static bool IsOuterBuild(ProjectGraphNode project)
         {
-            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.OuterBuild;
+            return project.ProjectInstance.ProjectType == ProjectInterpretation.ProjectType.OuterBuild;
         }
 
         internal static bool IsInnerBuild(ProjectGraphNode project)
         {
-            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.InnerBuild;
+            return project.ProjectInstance.ProjectType == ProjectInterpretation.ProjectType.InnerBuild;
         }
 
         internal static bool IsNotMultitargeting(ProjectGraphNode project)
         {
-            return ProjectInterpretation.GetProjectType(project.ProjectInstance) == ProjectInterpretation.ProjectType.NonMultitargeting;
+            return project.ProjectInstance.ProjectType == ProjectInterpretation.ProjectType.NonMultitargeting;
         }
 
         internal static ProjectGraphNode GetFirstNodeWithProjectNumber(ProjectGraph graph, int projectNum)
diff --git a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
index 221d18bbda6..9dd7274b2a1 100644
--- a/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
+++ b/src/Build/BackEnd/Components/ProjectCache/ProjectCacheService.cs
@@ -75,11 +75,6 @@ public void InitializePluginsForGraph(ProjectGraph projectGraph, CancellationTok
         {
             EnsureNotDisposed();
 
-            if (_globalProjectCacheDescriptor != null)
-            {
-                _ = GetProjectCachePluginAsync(_globalProjectCacheDescriptor, projectGraph, buildRequestConfiguration: null, cancellationToken);
-            }
-
             Parallel.ForEach(
                 projectGraph.ProjectNodes,
                 s_parallelOptions,
diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index 91c8a5b8509..8ec1d5af8bb 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -82,25 +82,16 @@ public void BuildGraph()
                 return;
             }
 
-            var gcLatencyMode = System.Runtime.GCSettings.LatencyMode = System.Runtime.GCLatencyMode.SustainedLowLatency;
-            try
-            {
-
-                var allParsedProjects = FindGraphNodes();
+            var allParsedProjects = FindGraphNodes();
 
-                AddEdges(allParsedProjects);
+            AddEdges(allParsedProjects);
 
-                EntryPointNodes = _entryPointConfigurationMetadata.Select(e => allParsedProjects[e].GraphNode).ToList();
+            EntryPointNodes = _entryPointConfigurationMetadata.Select(e => allParsedProjects[e].GraphNode).ToList();
 
-                DetectCycles(EntryPointNodes, _projectInterpretation, allParsedProjects);
+            DetectCycles(EntryPointNodes, _projectInterpretation, allParsedProjects);
 
-                RootNodes = GetGraphRoots(EntryPointNodes);
-                ProjectNodes = allParsedProjects.Values.Select(p => p.GraphNode).ToList();
-            }
-            finally
-            {
-                System.Runtime.GCSettings.LatencyMode = gcLatencyMode;
-            }
+            RootNodes = GetGraphRoots(EntryPointNodes);
+            ProjectNodes = allParsedProjects.Values.Select(p => p.GraphNode).ToList();
         }
 
         private static IReadOnlyCollection<ProjectGraphNode> GetGraphRoots(IReadOnlyCollection<ProjectGraphNode> entryPointNodes)
diff --git a/src/Build/Graph/ProjectGraphNode.cs b/src/Build/Graph/ProjectGraphNode.cs
index 15853068d7a..469b54f1427 100644
--- a/src/Build/Graph/ProjectGraphNode.cs
+++ b/src/Build/Graph/ProjectGraphNode.cs
@@ -32,7 +32,7 @@ public ProjectReferenceSnapshot(ProjectItemInstance projectReferenceTarget)
             Metadata = new()
             {
                 { ItemMetadataNames.ProjectReferenceTargetsMetadataName, projectReferenceTarget.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName) },
-                { "SkipNonexistentTargets" , projectReferenceTarget.GetMetadataValue("SkipNonexistentTargets") },
+                { SkipNonexistentTargetsMetadataName , projectReferenceTarget.GetMetadataValue(SkipNonexistentTargetsMetadataName) },
                 { ProjectReferenceTargetIsOuterBuildMetadataName, projectReferenceTarget.GetMetadataValue(ProjectReferenceTargetIsOuterBuildMetadataName) },
                 { ItemMetadataNames.PropertiesMetadataName , projectReferenceTarget.GetMetadataValue(ItemMetadataNames.PropertiesMetadataName) },
                 { ItemMetadataNames.AdditionalPropertiesMetadataName , projectReferenceTarget.GetMetadataValue(ItemMetadataNames.AdditionalPropertiesMetadataName) },
@@ -55,8 +55,8 @@ public string GetMetadataValue(string metadataName)
                 return result;
             }
 
-            return string.Empty;
-            // throw new System.Exception($"Metadata Not Found {metadataName} in {ItemType}::{EvaluatedInclude} snapshot.");
+            // return string.Empty;
+            throw new System.Exception($"Metadata Not Found {metadataName} in {ItemType}::{EvaluatedInclude} snapshot.");
         }
 
         public void SetMetadata(string metadataName, string value)
@@ -86,11 +86,10 @@ public ProjectInstanceSnapshot(ProjectInstance instance)
             var innerBuildPropName = instance.GetPropertyValue(PropertyNames.InnerBuildProperty);
             var innerBuildPropValue = instance.GetPropertyValue(innerBuildPropName);
 
-            instance.GetPropertyValue(instance.GetPropertyValue(PropertyNames.InnerBuildPropertyValues));
+            var innerBuildPropValues = instance.GetPropertyValue(PropertyNames.InnerBuildPropertyValues);
+            var innerBuildPropValuesValue = instance.GetPropertyValue(innerBuildPropValues);
 
-            var innerBuildPropValues1 = instance.GetPropertyValue(PropertyNames.InnerBuildPropertyValues);
-            var innerBuildPropValues2 = instance.GetPropertyValue(innerBuildPropValues1);
-            var isOuterBuild = string.IsNullOrWhiteSpace(innerBuildPropValue) && !string.IsNullOrWhiteSpace(innerBuildPropValues2);
+            var isOuterBuild = string.IsNullOrWhiteSpace(innerBuildPropValue) && !string.IsNullOrWhiteSpace(innerBuildPropValuesValue);
             var isInnerBuild = !string.IsNullOrWhiteSpace(innerBuildPropValue);
 
             ProjectType = isOuterBuild
@@ -106,7 +105,7 @@ public ProjectInstanceSnapshot(ProjectInstance instance)
                     { EnableDynamicPlatformResolutionPropertyName, instance.GetPropertyValue(EnableDynamicPlatformResolutionPropertyName) },
                     { "TargetFrameworks", instance.GetPropertyValue("TargetFrameworks") },
                     { PropertyNames.InnerBuildProperty, innerBuildPropName },
-                    { PropertyNames.InnerBuildPropertyValues, innerBuildPropValues1 },
+                    { PropertyNames.InnerBuildPropertyValues, innerBuildPropValues },
                     { "UsingMicrosoftNETSdk", instance.GetPropertyValue("UsingMicrosoftNETSdk") },
                     { "DisableTransitiveProjectReferences", instance.GetPropertyValue("DisableTransitiveProjectReferences") },
                     { SolutionProjectGenerator.CurrentSolutionConfigurationContents, instance.GetPropertyValue(SolutionProjectGenerator.CurrentSolutionConfigurationContents) },
@@ -115,8 +114,15 @@ public ProjectInstanceSnapshot(ProjectInstance instance)
                     { "PlatformLookupTable", instance.GetPropertyValue("PlatformLookupTable") },
                 };
 
-            Properties[innerBuildPropValue] = innerBuildPropValue;
-            Properties[innerBuildPropValues1] = innerBuildPropValues2;
+            if (!string.IsNullOrEmpty(innerBuildPropValue))
+            {
+                Properties[innerBuildPropValue] = innerBuildPropValue;
+            }
+
+            if (!string.IsNullOrEmpty(innerBuildPropValues))
+            {
+                Properties[innerBuildPropValues] = innerBuildPropValuesValue;
+            }
 
             var projectReferenceTargets = instance.GetItems(ItemTypeNames.ProjectReference).ToList();
 
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index 239c6b534df..ba941963789 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -31,6 +31,7 @@ internal sealed class ProjectInterpretation
         private const string InnerBuildReferenceItemName = "_ProjectSelfReference";
         internal static string TransitiveReferenceItemName = "_TransitiveProjectReference";
         internal const string AddTransitiveProjectReferencesInStaticGraphPropertyName = "AddTransitiveProjectReferencesInStaticGraph";
+        internal const string SkipNonexistentTargetsMetadataName = "SkipNonexistentTargets";
         private const string PlatformLookupTableMetadataName = "PlatformLookupTable";
         private const string PlatformMetadataName = "Platform";
         private const string PlatformsMetadataName = "Platforms";
@@ -194,7 +195,6 @@ public IEnumerable<ReferenceInfo> GetReferences(ProjectInstanceSnapshot requeste
                     }
                     else
                     {
-                        // referenceGlobalProperties[PlatformMetadataName] = selectedPlatform;
                         SetProperty(referenceGlobalProperties, PlatformMetadataName, selectedPlatform);
                     }
                 }
@@ -498,7 +498,7 @@ public static TargetsToPropagate FromProjectAndEntryTargets(ProjectInstanceSnaps
                         if (projectReferenceTarget.EvaluatedInclude.Equals(entryTarget, StringComparison.OrdinalIgnoreCase))
                         {
                             string targetsMetadataValue = projectReferenceTarget.GetMetadataValue(ItemMetadataNames.ProjectReferenceTargetsMetadataName);
-                            bool skipNonexistentTargets = MSBuildStringIsTrue(projectReferenceTarget.GetMetadataValue("SkipNonexistentTargets"));
+                            bool skipNonexistentTargets = MSBuildStringIsTrue(projectReferenceTarget.GetMetadataValue(SkipNonexistentTargetsMetadataName));
                             bool targetsAreForOuterBuild = MSBuildStringIsTrue(projectReferenceTarget.GetMetadataValue(ProjectReferenceTargetIsOuterBuildMetadataName));
                             TargetSpecification[] targets = ExpressionShredder.SplitSemiColonSeparatedList(targetsMetadataValue)
                                 .Select(t => new TargetSpecification(t, skipNonexistentTargets)).ToArray();
@@ -563,7 +563,5 @@ private static bool MSBuildStringIsTrue(string msbuildString) =>
             ConversionUtilities.ConvertStringToBool(msbuildString, nullOrWhitespaceIsFalse: true);
 
         private static bool MSBuildStringIsFalse(string msbuildString) => !MSBuildStringIsTrue(msbuildString);
-
-        internal static ProjectType GetProjectType(ProjectInstanceSnapshot projectInstance) => projectInstance.ProjectType;
     }
 }
