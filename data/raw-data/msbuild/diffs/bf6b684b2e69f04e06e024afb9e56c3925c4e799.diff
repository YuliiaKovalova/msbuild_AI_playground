diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
index 7c1f5fad53e..bfc36d70cad 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEntry.cs
@@ -9,7 +9,6 @@
 using System.Diagnostics;
 
 using BuildAbortedException = Microsoft.Build.Exceptions.BuildAbortedException;
-using System.Linq;
 
 #nullable disable
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs b/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
index 61a06e43c73..3aefd150c03 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/Lookup.cs
@@ -1072,13 +1072,10 @@ public void ApplyModifications(MetadataModifications other)
                 if (other._keepOnlySpecified)
                 {
                     // Any metadata not specified in other must be removed from this one.
-                    var metadataToRemove = new List<string>(_modifications.Keys);
+                    var metadataToRemove = new List<string>(_modifications.Keys.Where(m => other[m].Remove));
                     foreach (var metadata in metadataToRemove)
                     {
-                        if (other[metadata].Remove)
-                        {
-                            _modifications.Remove(metadata);
-                        }
+                        _modifications.Remove(metadata);
                     }
                 }
 
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
index ee3116c31e5..d613eca3f84 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs
@@ -203,7 +203,7 @@ out ItemDictionary<ProjectItemInstance> upToDateTargetInputs
                          * 
                          */
                         ErrorUtilities.VerifyThrow(itemVectorsReferencedInBothTargetInputsAndOutputs.Count > 0, "The target must have inputs.");
-                        ErrorUtilities.VerifyThrow(GetItemSpecsFromItemVectors(itemVectorsInTargetInputs).Count > 0, "The target must have inputs.");
+                        ErrorUtilities.VerifyThrow(GetItemSpecsFromItemVectors(itemVectorsInTargetInputs, earlyExitIfNonEmpty: true).Count > 0, "The target must have inputs.");
 
                         result = PerformDependencyAnalysisIfDiscreteInputs(itemVectorsInTargetInputs,
                                     itemVectorTransformsInTargetInputs, discreteItemsInTargetInputs, itemVectorsReferencedOnlyInTargetInputs,
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index 09a213fcf38..90b06b5cdc7 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -975,7 +975,7 @@ private void AssignUnscheduledRequestsWithPlanByGreatestPlanTime(List<ScheduleRe
                         }
                         else
                         {
-                            if (bestConfig == null || bestConfig.TotalPlanTime < configToConsider.TotalPlanTime)
+                            if (bestConfig is null || bestConfig.TotalPlanTime < configToConsider.TotalPlanTime)
                             {
                                 bestConfig = configToConsider;
                                 bestRequest = request;
@@ -984,7 +984,7 @@ private void AssignUnscheduledRequestsWithPlanByGreatestPlanTime(List<ScheduleRe
                     }
                 }
 
-                if (bestConfig is not null)
+                if (bestRequest is not null)
                 {
                     AssignUnscheduledRequestToNode(bestRequest, idleNodeId, responses);
                 }
