diff --git a/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs b/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
index d2bc80bcd14..034d95d3740 100644
--- a/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
+++ b/src/Build/BuildCheck/Checks/NoEnvironmentVariablePropertyCheck.cs
@@ -2,7 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections;
 using System.Collections.Generic;
 using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Construction;
@@ -10,14 +9,14 @@
 
 namespace Microsoft.Build.Experimental.BuildCheck.Checks;
 
-internal sealed class NoEnvironmentVariablePropertyCheck : Check, IDisposable
+internal sealed class NoEnvironmentVariablePropertyCheck : Check
 {
     public static CheckRule SupportedRule = new CheckRule(
-                "BC0103",
-                "NoEnvironmentVariablePropertyCheck",
-                "No implicit property derived from an environment variable should be used during the build",
-                "Property is derived from environment variable: {0}. Properties should be passed explicitly using the /p option.",
-                new CheckConfiguration() { Severity = CheckResultSeverity.Suggestion });
+        "BC0103",
+        "NoEnvironmentVariablePropertyCheck",
+        "No implicit property derived from an environment variable should be used during the build",
+        "Property is derived from environment variable: {0}. Properties should be passed explicitly using the /p option.",
+        new CheckConfiguration() { Severity = CheckResultSeverity.Suggestion });
 
     private const string RuleId = "BC0103";
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
index 69f7c0580d3..9de51e2a05d 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsReader.cs
@@ -1242,12 +1242,13 @@ private AssemblyLoadBuildEventArgs ReadAssemblyLoadEventArgs()
             return e;
         }
 
-        private BuildEventArgs ReadBuildCheckEventArgs<T>(Func<BuildEventArgsFields, string, T> createEvent) where T : BuildEventArgs
+        private BuildEventArgs ReadBuildCheckEventArgs<T>(Func<BuildEventArgsFields, string, T> createEvent)
+            where T : BuildEventArgs
         {
-            var fields = ReadBuildEventArgsFields(readImportance: true);
-            var rawMessage = ReadDeduplicatedString() ?? string.Empty;
-            var e = createEvent(fields, rawMessage);
+            var fields = ReadBuildEventArgsFields();
+            var e = createEvent(fields, fields.Message);
             SetCommonFields(e, fields);
+
             return e;
         }
 
@@ -1259,23 +1260,25 @@ private BuildEventArgs ReadBuildCheckEventArgs<T>(Func<BuildEventArgsFields, str
 
         private BuildEventArgs ReadBuildCheckTracingEventArgs()
         {
-            var fields = ReadBuildEventArgsFields(readImportance: true);
+            var fields = ReadBuildEventArgsFields();
             var rawTracingData = ReadStringDictionary() ?? new Dictionary<string, string>();
 
             var e = new BuildCheckTracingEventArgs(rawTracingData.ToDictionary(
                 kvp => kvp.Key,
                 kvp => TimeSpan.FromTicks(long.Parse(kvp.Value))));
             SetCommonFields(e, fields);
+
             return e;
         }
 
         private BuildEventArgs ReadBuildCheckAcquisitionEventArgs()
         {
-            var fields = ReadBuildEventArgsFields(readImportance: true);
+            var fields = ReadBuildEventArgsFields();
             var acquisitionPath = ReadString();
             var projectPath = ReadString();
             var e = new BuildCheckAcquisitionEventArgs(acquisitionPath, projectPath);
             SetCommonFields(e, fields);
+
             return e;
         }
 
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index 9e57eaa31a8..b5d7f6fb73c 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -4,7 +4,6 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Globalization;
 using System.IO;
 using System.Linq;
@@ -125,7 +124,7 @@ internal class BuildEventArgsWriter
         /// <param name="binaryWriter">A BinaryWriter to write the BuildEventArgs instances to</param>
         public BuildEventArgsWriter(BinaryWriter binaryWriter)
         {
-            this.originalStream = binaryWriter.BaseStream;
+            originalStream = binaryWriter.BaseStream;
 
             // this doesn't exceed 30K for smaller binlogs so seems like a reasonable
             // starting point to avoid reallocations in the common case
@@ -318,7 +317,6 @@ private BinaryLogRecordKind Write(ProjectEvaluationStartedEventArgs e)
         private BinaryLogRecordKind Write(BuildCheckResultMessage e)
         {
             WriteBuildEventArgsFields(e, writeMessage: true);
-            WriteDeduplicatedString(e.RawMessage);
 
             return BinaryLogRecordKind.BuildCheckMessage;
         }
@@ -326,16 +324,13 @@ private BinaryLogRecordKind Write(BuildCheckResultMessage e)
         private BinaryLogRecordKind Write(BuildCheckResultWarning e)
         {
             WriteBuildEventArgsFields(e, writeMessage: true);
-            WriteDeduplicatedString(e.RawMessage);
 
             return BinaryLogRecordKind.BuildCheckWarning;
         }
 
         private BinaryLogRecordKind Write(BuildCheckResultError e)
         {
-            Debugger.Launch();
-            WriteBuildEventArgsFields(e, writeMessage: false);
-            WriteDeduplicatedString(e.RawMessage);
+            WriteBuildEventArgsFields(e, writeMessage: true);
 
             return BinaryLogRecordKind.BuildCheckError;
         }
@@ -484,6 +479,11 @@ private BinaryLogRecordKind Write(TaskFinishedEventArgs e)
 
         private BinaryLogRecordKind Write(BuildErrorEventArgs e)
         {
+            if (e is BuildCheckResultError buildCheckError)
+            {
+                return Write(buildCheckError);
+            }
+
             WriteBuildEventArgsFields(e);
             WriteArguments(e.RawArguments);
             WriteDeduplicatedString(e.Subcategory);
@@ -495,16 +495,16 @@ private BinaryLogRecordKind Write(BuildErrorEventArgs e)
             Write(e.EndLineNumber);
             Write(e.EndColumnNumber);
 
-            if (e is BuildCheckResultError buildCheckError)
-            {
-                return Write(buildCheckError);
-            }
-
             return BinaryLogRecordKind.Error;
         }
 
         private BinaryLogRecordKind Write(BuildWarningEventArgs e)
         {
+            if (e is BuildCheckResultWarning buildCheckWarning)
+            {
+                return Write(buildCheckWarning);
+            }
+
             WriteBuildEventArgsFields(e);
             WriteArguments(e.RawArguments);
             WriteDeduplicatedString(e.Subcategory);
@@ -516,11 +516,6 @@ private BinaryLogRecordKind Write(BuildWarningEventArgs e)
             Write(e.EndLineNumber);
             Write(e.EndColumnNumber);
 
-            if (e is BuildCheckResultWarning buildCheckWarning)
-            {
-                return Write(buildCheckWarning);
-            }
-
             return BinaryLogRecordKind.Warning;
         }
 
@@ -632,6 +627,7 @@ private BinaryLogRecordKind Write(ResponseFileUsedEventArgs e)
             WriteDeduplicatedString(e.ResponseFilePath);
             return BinaryLogRecordKind.ResponseFileUsed;
         }
+
         private BinaryLogRecordKind Write(TaskCommandLineEventArgs e)
         {
             WriteMessageFields(e, writeMessage: false, writeImportance: true);
diff --git a/src/BuildCheck.UnitTests/EndToEndTests.cs b/src/BuildCheck.UnitTests/EndToEndTests.cs
index 81f6ea2ed8d..ca44e1f0fcd 100644
--- a/src/BuildCheck.UnitTests/EndToEndTests.cs
+++ b/src/BuildCheck.UnitTests/EndToEndTests.cs
@@ -234,7 +234,7 @@ public void SampleCheckIntegrationTest_CheckOnBinaryLogReplay(bool buildInOutOfP
 
     [Theory]
     [InlineData(null, new[] { "Property is derived from environment variable: 'TestFromTarget'.", "Property is derived from environment variable: 'TestFromEvaluation'." } )]
-    [InlineData(true, new[] { "Property is derived from environment variable: 'TestFromTarget' with value 'FromTarget'.", "Property is derived from environment variable: 'TestFromEvaluation' with value 'FromEvaluation'." })]
+    [InlineData(true, new[] { "Property is derived from environment variable: 'TestFromTarget' with value: 'FromTarget'.", "Property is derived from environment variable: 'TestFromEvaluation' with value: 'FromEvaluation'." })]
     [InlineData(false, new[] { "Property is derived from environment variable: 'TestFromTarget'.", "Property is derived from environment variable: 'TestFromEvaluation'." } )]
     public void NoEnvironmentVariableProperty_Test(bool? customConfigEnabled, string[] expectedMessages)
     {
diff --git a/src/Shared/LogMessagePacketBase.cs b/src/Shared/LogMessagePacketBase.cs
index 09d425eda97..4caf4874652 100644
--- a/src/Shared/LogMessagePacketBase.cs
+++ b/src/Shared/LogMessagePacketBase.cs
@@ -991,12 +991,12 @@ private void WriteResponseFileUsedEventToStream(ResponseFileUsedEventArgs respon
 #if !TASKHOST && !MSBUILDENTRYPOINTEXE
         private void WriteProjectEvaluationStartedEventToStream(ProjectEvaluationStartedEventArgs args, ITranslator translator)
         {
-            WriteBuildStatusEvent(args, args.ProjectFile, args.RawTimestamp, translator);
+            WriteEvaluationEvent(args, args.ProjectFile, args.RawTimestamp, translator);
         }
 
         private void WriteProjectEvaluationFinishedEventToStream(ProjectEvaluationFinishedEventArgs args, ITranslator translator)
         {
-            WriteBuildStatusEvent(args, args.ProjectFile, args.RawTimestamp, translator);
+            WriteEvaluationEvent(args, args.ProjectFile, args.RawTimestamp, translator);
 
             WriteProperties(args.GlobalProperties, translator);
             WriteProperties(args.Properties, translator);
@@ -1004,7 +1004,7 @@ private void WriteProjectEvaluationFinishedEventToStream(ProjectEvaluationFinish
             WriteProfileResult(args.ProfilerResult, translator);
         }
 
-        private static void WriteBuildStatusEvent(BuildStatusEventArgs args, string projectFile, DateTime timestamp, ITranslator translator)
+        private static void WriteEvaluationEvent(BuildStatusEventArgs args, string projectFile, DateTime timestamp, ITranslator translator)
         {
             var buildEventContext = args.BuildEventContext;
             translator.Translate(ref buildEventContext);
