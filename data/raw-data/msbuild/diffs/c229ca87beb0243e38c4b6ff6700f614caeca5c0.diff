diff --git a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
index 1318a437f92..887de160539 100644
--- a/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/net/Microsoft.Build.Framework.cs
@@ -227,6 +227,10 @@ public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
         void Cancel();
     }
+    public partial interface IConcurrentTask
+    {
+        void ConfigureForConcurrentExecution(Microsoft.Build.Framework.TaskExecutionContext executionContext);
+    }
     public partial interface IEventRedirector
     {
         void ForwardEvent(Microsoft.Build.Framework.BuildEventArgs buildEvent);
@@ -588,6 +592,14 @@ public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.B
         public string CommandLine { get { throw null; } }
         public string TaskName { get { throw null; } }
     }
+    public partial class TaskExecutionContext
+    {
+        public TaskExecutionContext(string startupDirectory, System.Collections.Generic.Dictionary<string, string> buildProcessEnvironment, System.Globalization.CultureInfo culture, System.Globalization.CultureInfo uiCulture) { }
+        public System.Collections.Generic.Dictionary<string, string> BuildProcessEnvironment { get { throw null; } }
+        public System.Globalization.CultureInfo Culture { get { throw null; } }
+        public string StartupDirectory { get { throw null; } }
+        public System.Globalization.CultureInfo UICulture { get { throw null; } }
+    }
     public partial class TaskFinishedEventArgs : Microsoft.Build.Framework.BuildStatusEventArgs
     {
         protected TaskFinishedEventArgs() { }
diff --git a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
index 9d3b8a4e277..fa36f414395 100644
--- a/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
+++ b/ref/Microsoft.Build.Framework/netstandard/Microsoft.Build.Framework.cs
@@ -227,6 +227,10 @@ public partial interface ICancelableTask : Microsoft.Build.Framework.ITask
     {
         void Cancel();
     }
+    public partial interface IConcurrentTask
+    {
+        void ConfigureForConcurrentExecution(Microsoft.Build.Framework.TaskExecutionContext executionContext);
+    }
     public partial interface IEventRedirector
     {
         void ForwardEvent(Microsoft.Build.Framework.BuildEventArgs buildEvent);
@@ -587,6 +591,14 @@ public TaskCommandLineEventArgs(string commandLine, string taskName, Microsoft.B
         public string CommandLine { get { throw null; } }
         public string TaskName { get { throw null; } }
     }
+    public partial class TaskExecutionContext
+    {
+        public TaskExecutionContext(string startupDirectory, System.Collections.Generic.Dictionary<string, string> buildProcessEnvironment, System.Globalization.CultureInfo culture, System.Globalization.CultureInfo uiCulture) { }
+        public System.Collections.Generic.Dictionary<string, string> BuildProcessEnvironment { get { throw null; } }
+        public System.Globalization.CultureInfo Culture { get { throw null; } }
+        public string StartupDirectory { get { throw null; } }
+        public System.Globalization.CultureInfo UICulture { get { throw null; } }
+    }
     public partial class TaskFinishedEventArgs : Microsoft.Build.Framework.BuildStatusEventArgs
     {
         protected TaskFinishedEventArgs() { }
diff --git a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
index c94de3e3688..319ce95d300 100644
--- a/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/net/Microsoft.Build.Tasks.Core.cs
@@ -908,7 +908,7 @@ public RequiresFramework35SP1Assembly() { }
         public string TargetFrameworkVersion { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
-    public partial class ResolveAssemblyReference : Microsoft.Build.Tasks.TaskExtension
+    public partial class ResolveAssemblyReference : Microsoft.Build.Tasks.TaskExtension, Microsoft.Build.Framework.IConcurrentTask
     {
         public ResolveAssemblyReference() { }
         public string[] AllowedAssemblyExtensions { get { throw null; } set { } }
@@ -979,6 +979,7 @@ public ResolveAssemblyReference() { }
         public bool UnresolveFrameworkAssembliesFromHigherFrameworks { get { throw null; } set { } }
         public string WarnOrErrorOnTargetArchitectureMismatch { get { throw null; } set { } }
         public override bool Execute() { throw null; }
+        void Microsoft.Build.Framework.IConcurrentTask.ConfigureForConcurrentExecution(Microsoft.Build.Framework.TaskExecutionContext executionContext) { }
     }
     public sealed partial class ResolveCodeAnalysisRuleSet : Microsoft.Build.Tasks.TaskExtension
     {
diff --git a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
index 1cefcd56250..7ca8c3be56c 100644
--- a/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
+++ b/ref/Microsoft.Build.Tasks.Core/netstandard/Microsoft.Build.Tasks.Core.cs
@@ -653,7 +653,7 @@ public RemoveDuplicates() { }
         public Microsoft.Build.Framework.ITaskItem[] Inputs { get { throw null; } set { } }
         public override bool Execute() { throw null; }
     }
-    public partial class ResolveAssemblyReference : Microsoft.Build.Tasks.TaskExtension
+    public partial class ResolveAssemblyReference : Microsoft.Build.Tasks.TaskExtension, Microsoft.Build.Framework.IConcurrentTask
     {
         public ResolveAssemblyReference() { }
         public string[] AllowedAssemblyExtensions { get { throw null; } set { } }
@@ -724,6 +724,7 @@ public ResolveAssemblyReference() { }
         public bool UnresolveFrameworkAssembliesFromHigherFrameworks { get { throw null; } set { } }
         public string WarnOrErrorOnTargetArchitectureMismatch { get { throw null; } set { } }
         public override bool Execute() { throw null; }
+        void Microsoft.Build.Framework.IConcurrentTask.ConfigureForConcurrentExecution(Microsoft.Build.Framework.TaskExecutionContext executionContext) { }
     }
     public sealed partial class ResolveCodeAnalysisRuleSet : Microsoft.Build.Tasks.TaskExtension
     {
diff --git a/src/Framework/TaskExecutionContext.cs b/src/Framework/TaskExecutionContext.cs
new file mode 100644
index 00000000000..d6cb69307b3
--- /dev/null
+++ b/src/Framework/TaskExecutionContext.cs
@@ -0,0 +1,30 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using System.Collections.Generic;
+using System.Globalization;
+
+namespace Microsoft.Build.Framework
+{
+    public class TaskExecutionContext
+    {
+        public TaskExecutionContext(string startupDirectory, Dictionary<string, string> buildProcessEnvironment, CultureInfo culture, CultureInfo uiCulture)
+        {
+            StartupDirectory = startupDirectory;
+            BuildProcessEnvironment = buildProcessEnvironment;
+            Culture = culture;
+            UICulture = uiCulture;
+        }
+
+        public string StartupDirectory { get; }
+        public Dictionary<string, string> BuildProcessEnvironment { get; }
+        public CultureInfo Culture { get; }
+        public CultureInfo UICulture { get; }
+    }
+
+    // TODO: move to own file
+    public interface IConcurrentTask
+    {
+        void ConfigureForConcurrentExecution(TaskExecutionContext executionContext);
+    }
+}
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index f0062776ba5..02a168d2e21 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -27,7 +27,7 @@ namespace Microsoft.Build.Tasks
     /// Given a list of assemblyFiles, determine the closure of all assemblyFiles that
     /// depend on those assemblyFiles including second and nth-order dependencies too.
     /// </summary>
-    public class ResolveAssemblyReference : TaskExtension
+    public class ResolveAssemblyReference : TaskExtension, IConcurrentTask
     {
         /// <summary>
         /// key assembly used to trigger inclusion of facade references.
@@ -891,6 +891,12 @@ public ITaskItem[] SuggestedRedirects
         /// </summary>
         private List<ITaskItem> _filesWritten = new List<ITaskItem>();
 
+        /// <summary>
+        /// Execution context used when task is supposed to run concurrently in multiple threads.
+        /// If null hosting process do not run this task concurrently and set it execution context on process level.
+        /// </summary>
+        private TaskExecutionContext _concurrencyExecutionContext;
+
         /// <summary>
         /// The names of all files written to disk.
         /// </summary>
@@ -1885,7 +1891,7 @@ private void LogConflict(Reference reference, string fusionName, StringBuilder l
         /// </summary>
         internal void ReadStateFile(FileExists fileExists)
         {
-            _cache = SystemState.DeserializeCacheByTranslator(_stateFile, Log);
+            _cache = (SystemState)StateFileBase.DeserializeCache(_stateFile, Log, typeof(SystemState));
 
             // Construct the cache only if we can't find any caches.
             if (_cache == null && AssemblyInformationCachePaths != null && AssemblyInformationCachePaths.Length > 0)
@@ -1910,7 +1916,7 @@ internal void WriteStateFile()
             }
             else if (!String.IsNullOrEmpty(_stateFile) && _cache.IsDirty)
             {
-                _cache.SerializeCacheByTranslator(_stateFile, Log);
+                _cache.SerializeCache(_stateFile, Log);
             }
         }
         #endregion
@@ -3049,5 +3055,10 @@ public override bool Execute()
         }
 
         #endregion
+
+        void IConcurrentTask.ConfigureForConcurrentExecution(TaskExecutionContext executionContext)
+        {
+            _concurrencyExecutionContext = executionContext;
+        }
     }
 }
