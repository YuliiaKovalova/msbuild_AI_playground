diff --git a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
index ec849b7fb62..f7d7eca1c2c 100644
--- a/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
+++ b/src/Build.UnitTests/ProjectCache/ProjectCacheTests.cs
@@ -41,6 +41,8 @@ public void Dispose()
             _env.Dispose();
         }
 
+        private static readonly string AssemblyMockCache = nameof(AssemblyMockCache);
+
         private static readonly Lazy<string> SamplePluginAssemblyPath =
             new Lazy<string>(
                 () =>
@@ -198,7 +200,7 @@ public enum ExceptionLocations
             EndBuildAsync = 1 << 3
         }
 
-        public class MockProjectCache : ProjectCachePluginBase
+        public class InstanceMockCache : ProjectCachePluginBase
         {
             private readonly GraphCacheResponse? _testData;
             public ConcurrentQueue<BuildRequestData> Requests { get; } = new ConcurrentQueue<BuildRequestData>();
@@ -206,7 +208,7 @@ public class MockProjectCache : ProjectCachePluginBase
             public bool BeginBuildCalled { get; set; }
             public bool EndBuildCalled { get; set; }
 
-            public MockProjectCache(GraphCacheResponse? testData = null)
+            public InstanceMockCache(GraphCacheResponse? testData = null)
             {
                 _testData = testData;
             }
@@ -379,7 +381,7 @@ public void ProjectCacheByBuildParametersAndGraphBuildWorks(GraphCacheResponse t
         {
             _output.WriteLine(testData.ToString());
             var graph = testData.CreateGraph(_env);
-            var mockCache = new MockProjectCache(testData);
+            var mockCache = new InstanceMockCache(testData);
 
             buildParameters.ProjectCacheDescriptor = ProjectCacheDescriptor.FromInstance(
                 mockCache,
@@ -404,7 +406,7 @@ public void ProjectCacheByBuildParametersAndGraphBuildWorks(GraphCacheResponse t
         public void ProjectCacheByBuildParametersAndBottomUpBuildWorks(GraphCacheResponse testData, BuildParameters buildParameters)
         {
             var graph = testData.CreateGraph(_env);
-            var mockCache = new MockProjectCache(testData);
+            var mockCache = new InstanceMockCache(testData);
 
             buildParameters.ProjectCacheDescriptor = ProjectCacheDescriptor.FromInstance(
                 mockCache,
@@ -479,25 +481,25 @@ public void ProjectCacheByVSWorkaroundWorks(GraphCacheResponse testData, BuildPa
         private void AssertCacheBuild(
             ProjectGraph graph,
             GraphCacheResponse testData,
-            MockProjectCache? mockCache,
+            InstanceMockCache? instanceMockCache,
             MockLogger mockLogger,
             IReadOnlyDictionary<ProjectGraphNode, BuildResult> projectPathToBuildResults)
         {
-            if (mockCache != null)
+            if (instanceMockCache != null)
             {
                 mockLogger.FullLog.ShouldContain("MockCache: BeginBuildAsync");
                 mockLogger.FullLog.ShouldContain("Instance based");
                 mockLogger.FullLog.ShouldNotContain("Assembly path based");
 
-                mockCache.Requests.Count.ShouldBe(graph.ProjectNodes.Count);
+                instanceMockCache.Requests.Count.ShouldBe(graph.ProjectNodes.Count);
             }
             else
             {
-                mockLogger.FullLog.ShouldContain("MockCacheFromAssembly: BeginBuildAsync");
+                mockLogger.FullLog.ShouldContain($"{AssemblyMockCache}: BeginBuildAsync");
                 mockLogger.FullLog.ShouldContain("Assembly path based");
                 mockLogger.FullLog.ShouldNotContain("Instance based");
 
-                Regex.Matches(mockLogger.FullLog, "MockCacheFromAssembly: GetCacheResultAsync for").Count.ShouldBe(graph.ProjectNodes.Count);
+                Regex.Matches(mockLogger.FullLog, $"{AssemblyMockCache}: GetCacheResultAsync for").Count.ShouldBe(graph.ProjectNodes.Count);
             }
 
             foreach (var node in graph.ProjectNodes)
@@ -506,18 +508,18 @@ private void AssertCacheBuild(
 
                 mockLogger.FullLog.ShouldContain($"====== Querying project cache for project {node.ProjectInstance.FullPath}");
 
-                if (mockCache != null)
+                if (instanceMockCache != null)
                 {
-                    mockCache.Requests.ShouldContain(r => r.ProjectFullPath.Equals(node.ProjectInstance.FullPath));
-                    mockCache.BeginBuildCalled.ShouldBeTrue();
-                    mockCache.EndBuildCalled.ShouldBeTrue();
+                    instanceMockCache.Requests.ShouldContain(r => r.ProjectFullPath.Equals(node.ProjectInstance.FullPath));
+                    instanceMockCache.BeginBuildCalled.ShouldBeTrue();
+                    instanceMockCache.EndBuildCalled.ShouldBeTrue();
                 }
                 else
                 {
-                    mockLogger.FullLog.ShouldContain($"MockCacheFromAssembly: GetCacheResultAsync for {node.ProjectInstance.FullPath}");
+                    mockLogger.FullLog.ShouldContain($"{AssemblyMockCache}: GetCacheResultAsync for {node.ProjectInstance.FullPath}");
                 }
 
-                if (mockCache == null)
+                if (instanceMockCache == null)
                 {
                     // Too complicated, not worth it to send expected results to the assembly plugin, so skip checking the build results.
                     continue;
@@ -601,7 +603,7 @@ public void CacheShouldNotGetQueriedForNestedBuildRequests(BuildParameters build
                         </Target>
                     </Project>".Cleanup());
 
-            var mockCache = new MockProjectCache();
+            var mockCache = new InstanceMockCache();
             buildParameters.ProjectCacheDescriptor = ProjectCacheDescriptor.FromInstance(
                 mockCache,
                 new[] {new ProjectGraphEntryPoint(project1.Path)},
@@ -706,7 +708,7 @@ public void BuildFailsWhenCacheBuildResultIsWrong()
                 );
 
             var graph = testData.CreateGraph(_env);
-            var mockCache = new MockProjectCache(testData);
+            var mockCache = new InstanceMockCache(testData);
 
             using var buildSession = new Helpers.BuildManagerSession(
                 _env,
@@ -869,13 +871,13 @@ public void EngineShouldHandleExceptionsFromCachePlugin(ExceptionLocations excep
 
             if ((exceptionsThatShouldPreventCacheQueryAndEndBuildAsync & exceptionLocations) != 0)
             {
-                logger.FullLog.ShouldNotContain("MockCacheFromAssembly: GetCacheResultAsync for");
-                logger.FullLog.ShouldNotContain("MockCacheFromAssembly: EndBuildAsync");
+                logger.FullLog.ShouldNotContain($"{AssemblyMockCache}: GetCacheResultAsync for");
+                logger.FullLog.ShouldNotContain($"{AssemblyMockCache}: EndBuildAsync");
             }
             else
             {
-                logger.FullLog.ShouldContain("MockCacheFromAssembly: GetCacheResultAsync for");
-                logger.FullLog.ShouldContain("MockCacheFromAssembly: EndBuildAsync");
+                logger.FullLog.ShouldContain($"{AssemblyMockCache}: GetCacheResultAsync for");
+                logger.FullLog.ShouldContain($"{AssemblyMockCache}: EndBuildAsync");
             }
         }
     }
diff --git a/src/Samples/ProjectCachePlugin/MockCacheFromAssembly.cs b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
similarity index 77%
rename from src/Samples/ProjectCachePlugin/MockCacheFromAssembly.cs
rename to src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
index df42b4ac302..8b0a83ecc8b 100644
--- a/src/Samples/ProjectCachePlugin/MockCacheFromAssembly.cs
+++ b/src/Samples/ProjectCachePlugin/AssemblyMockCache.cs
@@ -10,16 +10,16 @@
 
 namespace MockCacheFromAssembly
 {
-    public class MockCacheFromAssembly : ProjectCachePluginBase
+    public class AssemblyMockCache : ProjectCachePluginBase
     {
-        public MockCacheFromAssembly()
+        public AssemblyMockCache()
         {
             ThrowFrom("Constructor");
         }
 
         public override Task BeginBuildAsync(CacheContext context, PluginLoggerBase logger, CancellationToken cancellationToken)
         {
-            logger.LogMessage("MockCacheFromAssembly: BeginBuildAsync", MessageImportance.High);
+            logger.LogMessage($"{nameof(AssemblyMockCache)}: BeginBuildAsync", MessageImportance.High);
 
             ThrowFrom(nameof(BeginBuildAsync));
 
@@ -31,7 +31,7 @@ public override Task<CacheResult> GetCacheResultAsync(
             PluginLoggerBase logger,
             CancellationToken cancellationToken)
         {
-            logger.LogMessage($"MockCacheFromAssembly: GetCacheResultAsync for {buildRequest.ProjectFullPath}", MessageImportance.High);
+            logger.LogMessage($"{nameof(AssemblyMockCache)}: GetCacheResultAsync for {buildRequest.ProjectFullPath}", MessageImportance.High);
 
             ThrowFrom(nameof(GetCacheResultAsync));
 
@@ -40,7 +40,7 @@ public override Task<CacheResult> GetCacheResultAsync(
 
         public override Task EndBuildAsync(PluginLoggerBase logger, CancellationToken cancellationToken)
         {
-            logger.LogMessage("MockCacheFromAssembly: EndBuildAsync", MessageImportance.High);
+            logger.LogMessage($"{nameof(AssemblyMockCache)}: EndBuildAsync", MessageImportance.High);
 
             ThrowFrom(nameof(EndBuildAsync));
 
