diff --git a/src/MSBuild.UnitTests/XMake_Tests.cs b/src/MSBuild.UnitTests/XMake_Tests.cs
index 736c7d920f1..f3ae4a58ab3 100644
--- a/src/MSBuild.UnitTests/XMake_Tests.cs
+++ b/src/MSBuild.UnitTests/XMake_Tests.cs
@@ -9,8 +9,8 @@
 using System.IO.Compression;
 using System.Linq;
 using System.Reflection;
+using System.Runtime.InteropServices;
 using System.Threading;
-using Newtonsoft.Json.Linq;
 using Microsoft.Build.CommandLine;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
@@ -20,7 +20,6 @@
 using Shouldly;
 using Xunit;
 using Xunit.Abstractions;
-using System.Runtime.InteropServices;
 
 #nullable disable
 
@@ -648,6 +647,11 @@ public void SetConsoleUICulture()
         [Fact]
         public void ConsoleUIRespectsSDKLanguage()
         {
+            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows) && !MSBuildApp.CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())
+            {
+                return; // The feature to detect .NET SDK Languages is not enabled on this machine, so don't test it.
+            }
+
             const string DOTNET_CLI_UI_LANGUAGE = nameof(DOTNET_CLI_UI_LANGUAGE);
             using TestEnvironment testEnvironment = TestEnvironment.Create();
             // Save the current environment info so it can be restored.
@@ -665,16 +669,16 @@ public void ConsoleUIRespectsSDKLanguage()
 
                 MSBuildApp.SetConsoleUI();
 
-                if (!RuntimeInformation.IsOSPlatform(OSPlatform.Windows) || MSBuildApp.CurrentPlatformIsWindowsAndOfficiallySupportsUTF8Encoding())
-                {
-                    Assert.Equal(new CultureInfo("ja"), thisThread.CurrentUICulture);
-                    Assert.Equal(65001, Console.OutputEncoding.CodePage); // utf 8 enabled for correct rendering.
-                }
+                Assert.Equal(new CultureInfo("ja"), thisThread.CurrentUICulture);
+                Assert.Equal(65001, Console.OutputEncoding.CodePage); // utf 8 enabled for correct rendering.
             }
             finally
             {
                 // Restore the current UI culture back to the way it was at the beginning of this unit test.
                 thisThread.CurrentUICulture = originalUICulture;
+                // Restore for full framework
+                CultureInfo.CurrentCulture = originalUICulture;
+                CultureInfo.DefaultThreadCurrentUICulture = originalUICulture;
 
                 // MSbuild should also restore the encoding upon exit, but we don't create that context here.
                 Console.OutputEncoding = originalOutputEncoding;
@@ -840,6 +844,7 @@ public void MSBuildEngineLogger()
         {
             using TestEnvironment testEnvironment = TestEnvironment.Create();
             testEnvironment.SetEnvironmentVariable("DOTNET_CLI_UI_LANGUAGE", "en"); // build machines may have other values.
+            CultureInfo.CurrentUICulture = new CultureInfo("en"); // Validate that the thread will produce an english log regardless of the machine OS language
 
             string oldValueForMSBuildLoadMicrosoftTargetsReadOnly = Environment.GetEnvironmentVariable("MSBuildLoadMicrosoftTargetsReadOnly");
             string projectString =
@@ -877,6 +882,8 @@ public void MSBuildEngineLogger()
 
                 var logFileContents = File.ReadAllText(logFile);
 
+                Assert.Equal(new CultureInfo("en"), Thread.CurrentThread.CurrentUICulture);
+
                 logFileContents.ShouldContain("Process = ");
                 logFileContents.ShouldContain("MSBuild executable path = ");
                 logFileContents.ShouldContain("Command line arguments = ");
diff --git a/src/MSBuild/AutomaticEncodingRestorer.cs b/src/MSBuild/AutomaticEncodingRestorer.cs
index ba4acfda90b..1129cca0708 100644
--- a/src/MSBuild/AutomaticEncodingRestorer.cs
+++ b/src/MSBuild/AutomaticEncodingRestorer.cs
@@ -75,9 +75,11 @@ public void Dispose()
 
         /// <summary>
         /// Return whether the running OS is windows for net472.
-        /// RuntimeInformation.IsOSPlatform(OSPlatform.Windows) is supposed to be available in net472 but apparently it isnt part of full framework so we can't use it.
+        /// RuntimeInformation.IsOSPlatform(OSPlatform.Windows) is sometimes available in net472 but in this context it's an unavailable API, so this function is needed.
         /// </summary>
-        /// <returns></returns>
+        /// <returns>
+        /// A boolean of 'true' iff the current machine os is windows.
+        /// </returns>
         private bool IsWindowsOS()
         {
             string? windir = Environment.GetEnvironmentVariable("windir");
diff --git a/src/MSBuild/MSBuild.csproj b/src/MSBuild/MSBuild.csproj
index 039fe2e452a..00bbd4e0bf4 100644
--- a/src/MSBuild/MSBuild.csproj
+++ b/src/MSBuild/MSBuild.csproj
@@ -48,8 +48,8 @@
     <NoPackageAnalysis>true</NoPackageAnalysis>
     <AddAppConfigToBuildOutputs>false</AddAppConfigToBuildOutputs>
 
-    <DebugType Condition="'$(Platform)' == 'x64'">full</DebugType>
     <!-- Setting DebugType here goes hand in hand with eng\AfterSigning.targets. This is to prompt the x64 build to produce a 'full' .pdb that's `more compatible` then 'portable' and 'embedded' .pdbs. This doesn't get set on 32 bit architecture, which will default to 'embedded' and 'pdb2pdb' will convert those as needed. See https://github.com/dotnet/msbuild/pull/5070 for context. -->
+    <DebugType Condition="'$(Platform)' == 'x64'">full</DebugType>
     <DefineConstants>$(DefineConstants);MSBUILDENTRYPOINTEXE</DefineConstants>
   </PropertyGroup>
 
