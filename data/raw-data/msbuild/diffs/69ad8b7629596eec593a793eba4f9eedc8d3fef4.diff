diff --git a/src/Shared/BinaryTranslator.cs b/src/Shared/BinaryTranslator.cs
index b200004c15d..74f46865a14 100644
--- a/src/Shared/BinaryTranslator.cs
+++ b/src/Shared/BinaryTranslator.cs
@@ -662,9 +662,13 @@ public void TranslateDictionary<D, T>(ref D dictionary, ObjectTranslator<T> obje
 
             public void TranslateDictionary(ref Dictionary<string, DateTime> dictionary, StringComparer comparer)
             {
-                int count = 0;
-                dictionary = new(comparer);
-                Translate(ref count);
+                if (!TranslateNullable(dictionary))
+                {
+                    return;
+                }
+
+                int count = _reader.ReadInt32();
+                dictionary = new(count, comparer);
                 string key = string.Empty;
                 DateTime val = DateTime.MinValue;
                 for (int i = 0; i < count; i++)
@@ -1270,14 +1274,19 @@ public void TranslateDictionary<D, T>(ref D dictionary, ObjectTranslator<T> obje
             }
 
             /// <summary>
-            /// Translates a dictionary of { string, T } for dictionaries with public parameterless constructors.
+            /// Translates a dictionary of { string, DateTime }.
             /// </summary>
             /// <param name="dictionary">The dictionary to be translated.</param>
             /// <param name="comparer">Key comparer</param>
             public void TranslateDictionary(ref Dictionary<string, DateTime> dictionary, StringComparer comparer)
             {
+                if (!TranslateNullable(dictionary))
+                {
+                    return;
+                }
+
                 int count = dictionary.Count;
-                Translate(ref count);
+                _writer.Write(count);
                 foreach (KeyValuePair<string, DateTime> kvp in dictionary)
                 {
                     string key = kvp.Key;
diff --git a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
index 2f0a70d2204..7f55c5bcbd1 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/ResolveAssemblyReferenceCacheSerialization.cs
@@ -15,10 +15,6 @@ namespace Microsoft.Build.UnitTests.ResolveAssemblyReference_Tests
 {
     public class ResolveAssemblyReferenceCacheSerialization : IDisposable
     {
-        // Maintain this two in sync with the constant in SystemState
-        private static readonly byte[] TranslateContractSignature = { (byte)'M', (byte)'B', (byte)'R', (byte)'S', (byte)'C' }; // Microsoft Build RAR State Cache
-        private static readonly byte TranslateContractVersion = 0x01;
-
         private readonly string _rarCacheFile;
         private readonly TaskLoggingHelper _taskLoggingHelper;
 
@@ -60,8 +56,8 @@ public void CorrectFileVersion()
             systemState.SerializeCache(_rarCacheFile, _taskLoggingHelper);
             using (var cacheStream = new FileStream(_rarCacheFile, FileMode.Open, FileAccess.ReadWrite))
             {
-                cacheStream.Seek(TranslateContractSignature.Length, SeekOrigin.Begin);
-                cacheStream.WriteByte(TranslateContractVersion);
+                cacheStream.Seek(0, SeekOrigin.Begin);
+                cacheStream.WriteByte(StateFileBase.CurrentSerializationVersion);
                 cacheStream.Close();
             }
 
@@ -70,6 +66,24 @@ public void CorrectFileVersion()
             deserialized.ShouldNotBeNull();
         }
 
+        [Fact]
+        public void WrongFileVersion()
+        {
+            SystemState systemState = new();
+
+            systemState.SerializeCache(_rarCacheFile, _taskLoggingHelper);
+            using (var cacheStream = new FileStream(_rarCacheFile, FileMode.Open, FileAccess.ReadWrite))
+            {
+                cacheStream.Seek(0, SeekOrigin.Begin);
+                cacheStream.WriteByte(StateFileBase.CurrentSerializationVersion - 1);
+                cacheStream.Close();
+            }
+
+            var deserialized = SystemState.DeserializeCache(_rarCacheFile, _taskLoggingHelper, typeof(SystemState));
+
+            deserialized.ShouldBeNull();
+        }
+
         [Fact]
         public void ValidateSerializationAndDeserialization()
         {
diff --git a/src/Tasks/AssemblyRegistrationCache.cs b/src/Tasks/AssemblyRegistrationCache.cs
index 1c34bd4abd4..9c94ed3aefa 100644
--- a/src/Tasks/AssemblyRegistrationCache.cs
+++ b/src/Tasks/AssemblyRegistrationCache.cs
@@ -65,7 +65,6 @@ public override void Translate(ITranslator translator)
             ErrorUtilities.VerifyThrowArgumentNull(translator, nameof(translator));
             translator.Translate(ref _assemblies);
             translator.Translate(ref _typeLibraries);
-            translator.Translate(ref _serializedVersion);
         }
     }
 }
diff --git a/src/Tasks/ResGenDependencies.cs b/src/Tasks/ResGenDependencies.cs
index 55f67c4b0f4..4e2d06bafee 100644
--- a/src/Tasks/ResGenDependencies.cs
+++ b/src/Tasks/ResGenDependencies.cs
@@ -115,7 +115,6 @@ public override void Translate(ITranslator translator)
                 },
                 count => new Dictionary<string, PortableLibraryFile>(count));
             translator.Translate(ref baseLinkedFileDirectory);
-            translator.Translate(ref _serializedVersion);
         }
 
         internal ResXFile GetResXFileInfo(string resxFile, bool useMSBuildResXReader)
diff --git a/src/Tasks/ResolveComReferenceCache.cs b/src/Tasks/ResolveComReferenceCache.cs
index aae1745bd55..ec73dc72c57 100644
--- a/src/Tasks/ResolveComReferenceCache.cs
+++ b/src/Tasks/ResolveComReferenceCache.cs
@@ -99,7 +99,6 @@ public override void Translate(ITranslator translator)
             translator.Translate(ref axImpLocation);
             translator.Translate(ref tlbImpLocation);
             translator.TranslateDictionary(ref componentTimestamps, StringComparer.Ordinal);
-            translator.Translate(ref _serializedVersion);
         }
     }
 }
diff --git a/src/Tasks/StateFileBase.cs b/src/Tasks/StateFileBase.cs
index 023b7de42d3..f228e84bd07 100644
--- a/src/Tasks/StateFileBase.cs
+++ b/src/Tasks/StateFileBase.cs
@@ -21,10 +21,10 @@ internal abstract class StateFileBase
         // Version 4/5 - VS2017.7:
         //   Unify .NET Core + Full Framework. Custom serialization on some types that are no
         //   longer [Serializable].
-        private const byte CurrentSerializationVersion = 6;
+        internal const byte CurrentSerializationVersion = 6;
 
         // Version this instance is serialized with.
-        protected byte _serializedVersion = CurrentSerializationVersion;
+        private byte _serializedVersion = CurrentSerializationVersion;
 
         /// <summary>
         /// Writes the contents of this object out to the specified file.
@@ -43,6 +43,7 @@ internal virtual void SerializeCache(string stateFile, TaskLoggingHelper log)
                     using (var s = new FileStream(stateFile, FileMode.CreateNew))
                     {
                         var translator = BinaryTranslator.GetWriteTranslator(s);
+                        translator.Translate(ref _serializedVersion);
                         Translate(translator);
                     }
                 }
@@ -74,6 +75,8 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp
                     using (FileStream s = new FileStream(stateFile, FileMode.Open))
                     {
                         var translator = BinaryTranslator.GetReadTranslator(s, buffer: null);
+                        byte version = 0;
+                        translator.Translate(ref version);
                         var constructors = requiredReturnType.GetConstructors();
                         foreach (var constructor in constructors)
                         {
@@ -86,7 +89,7 @@ internal static StateFileBase DeserializeCache(string stateFile, TaskLoggingHelp
 
                         // If retVal is still null or the version is wrong, log a message not a warning. This could be a valid cache with the wrong version preventing correct deserialization.
                         // For the latter case, internals may be unexpectedly null.
-                        if (retVal == null || retVal._serializedVersion != CurrentSerializationVersion)
+                        if (retVal == null || version != CurrentSerializationVersion)
                         {
                             // When upgrading to Visual Studio 2008 and running the build for the first time the resource cache files are replaced which causes a cast error due
                             // to a new version number on the tasks class. "Unable to cast object of type 'Microsoft.Build.Tasks.SystemState' to type 'Microsoft.Build.Tasks.StateFileBase".
