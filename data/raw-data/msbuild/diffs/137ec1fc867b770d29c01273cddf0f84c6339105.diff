diff --git a/src/Build/Evaluation/IItem.cs b/src/Build/Evaluation/IItem.cs
index 4483fb437e7..49d897768ee 100644
--- a/src/Build/Evaluation/IItem.cs
+++ b/src/Build/Evaluation/IItem.cs
@@ -10,7 +10,7 @@ namespace Microsoft.Build.Evaluation
     /// <summary>
     /// This interface represents an item without exposing its type.
     /// </summary>
-    internal interface IItem : IKeyed
+    public interface IItem : IKeyed
     {
         /// <summary>
         /// Gets the evaluated include value for this item, unescaped.
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
index 96abf529b9f..babeda01644 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsExtensions.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections;
 using System.Collections.Generic;
+using Microsoft.Build.Evaluation;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging;
@@ -33,7 +34,7 @@ public static class BuildEventArgsExtensions
     /// The actual item value is of nongeneric <see cref="object"/> type.
     /// The actual type need to be inferred during runtime based on the itemType.
     /// </summary>
-    public static IEnumerable<(string itemType, object itemValue)> EnumerateItems(
+    public static IEnumerable<(string itemType, IItem itemValue)> EnumerateItems(
         this ProjectEvaluationFinishedEventArgs eventArgs)
         => EnumerateItems(eventArgs.Items);
 
@@ -42,13 +43,13 @@ public static class BuildEventArgsExtensions
     /// The actual item value is of nongeneric <see cref="object"/> type.
     /// The actual type need to be inferred during runtime based on the itemType.
     /// </summary>
-    public static IEnumerable<(string itemType, object itemValue)> EnumerateItems(
+    public static IEnumerable<(string itemType, IItem itemValue)> EnumerateItems(
         this ProjectStartedEventArgs eventArgs)
         => EnumerateItems(eventArgs.Items);
 
     private static IEnumerable<(string propertyName, string propertyValue)> EnumerateProperties(IEnumerable? properties)
         => Internal.Utilities.EnumerateProperties(properties);
 
-    private static IEnumerable<(string itemType, object itemValue)> EnumerateItems(IEnumerable? items)
+    private static IEnumerable<(string itemType, IItem itemValue)> EnumerateItems(IEnumerable? items)
         => Internal.Utilities.EnumerateItems(items);
 }
diff --git a/src/Build/Utilities/Utilities.cs b/src/Build/Utilities/Utilities.cs
index a22c13596ab..b129b1cc6a2 100644
--- a/src/Build/Utilities/Utilities.cs
+++ b/src/Build/Utilities/Utilities.cs
@@ -687,7 +687,7 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
             }
         }
 
-        public static IEnumerable<(string itemType, object itemValue)> EnumerateItems(IEnumerable items)
+        public static IEnumerable<(string itemType, IItem itemValue)> EnumerateItems(IEnumerable items)
         {
             if (items == null)
             {
@@ -696,23 +696,29 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
 
             if (items is ItemDictionary<ProjectItemInstance> projectItemInstanceDictionary)
             {
-                return projectItemInstanceDictionary.EnumerateItemsPerType().Select(t => (t.itemType, (object) t.itemValue));
+                return projectItemInstanceDictionary
+                    .EnumerateItemsPerType()
+                    .Select(t => t.itemValue.Select(itemValue => (t.itemType, (IItem)itemValue)))
+                    .SelectMany(tpl => tpl);
             }
             else if (items is ItemDictionary<ProjectItem> projectItemDictionary)
             {
-                return projectItemDictionary.EnumerateItemsPerType().Select(t => (t.itemType, (object)t.itemValue));
+                return projectItemDictionary
+                    .EnumerateItemsPerType()
+                    .Select(t => t.itemValue.Select(itemValue => (t.itemType, (IItem)itemValue)))
+                    .SelectMany(tpl => tpl);
             }
             else
             {
                 return CastOneByOne(items);
             }
 
-            IEnumerable<(string itemType, object itemValue)> CastOneByOne(IEnumerable itms)
+            IEnumerable<(string itemType, IItem itemValue)> CastOneByOne(IEnumerable itms)
             {
                 foreach (var item in itms)
                 {
                     string itemType = default;
-                    object itemValue = null;
+                    IItem itemValue = null;
 
                     if (item is IItem iitem)
                     {
@@ -722,7 +728,7 @@ public static void EnumerateProperties<TArg>(IEnumerable properties, TArg arg, A
                     else if (item is DictionaryEntry dictionaryEntry)
                     {
                         itemType = dictionaryEntry.Key as string;
-                        itemValue = dictionaryEntry.Value;
+                        itemValue = dictionaryEntry.Value as IItem;
                     }
                     else
                     {
diff --git a/src/Shared/IKeyed.cs b/src/Shared/IKeyed.cs
index 2c27ca9dc5d..1dc146192c4 100644
--- a/src/Shared/IKeyed.cs
+++ b/src/Shared/IKeyed.cs
@@ -11,7 +11,7 @@ namespace Microsoft.Build.Collections
     /// <remarks>
     /// This can be internal as it is a constraint only on internal collections.
     /// </remarks>
-    internal interface IKeyed
+    public interface IKeyed
     {
         /// <summary>
         /// Returns some value useful for a key in a dictionary
