diff --git a/src/Build.UnitTests/BackEnd/MockHost.cs b/src/Build.UnitTests/BackEnd/MockHost.cs
index ed2b547c0af..388a44f149a 100644
--- a/src/Build.UnitTests/BackEnd/MockHost.cs
+++ b/src/Build.UnitTests/BackEnd/MockHost.cs
@@ -163,32 +163,17 @@ internal IRequestBuilder RequestBuilder
         /// </summary>
         public IBuildComponent GetComponent(BuildComponentType type)
         {
-            switch (type)
+            return type switch
             {
-                case BuildComponentType.ConfigCache:
-                    return (IBuildComponent)_configCache;
-
-                case BuildComponentType.LoggingService:
-                    return (IBuildComponent)_loggingService;
-
-                case BuildComponentType.RequestEngine:
-                    return (IBuildComponent)_requestEngine;
-
-                case BuildComponentType.TargetBuilder:
-                    return (IBuildComponent)_targetBuilder;
-
-                case BuildComponentType.ResultsCache:
-                    return (IBuildComponent)_resultsCache;
-
-                case BuildComponentType.RequestBuilder:
-                    return (IBuildComponent)_requestBuilder;
-
-                case BuildComponentType.SdkResolverService:
-                    return (IBuildComponent)_sdkResolverService;
-
-                default:
-                    throw new ArgumentException("Unexpected type " + type);
-            }
+                BuildComponentType.ConfigCache => (IBuildComponent)_configCache,
+                BuildComponentType.LoggingService => (IBuildComponent)_loggingService,
+                BuildComponentType.RequestEngine => (IBuildComponent)_requestEngine,
+                BuildComponentType.TargetBuilder => (IBuildComponent)_targetBuilder,
+                BuildComponentType.ResultsCache => (IBuildComponent)_resultsCache,
+                BuildComponentType.RequestBuilder => (IBuildComponent)_requestBuilder,
+                BuildComponentType.SdkResolverService => (IBuildComponent)_sdkResolverService,
+                _ => throw new ArgumentException("Unexpected type " + type),
+            };
         }
 
         /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
index f8597385549..5af65de88f9 100644
--- a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
@@ -1690,32 +1690,17 @@ public BuildParameters BuildParameters
             /// <returns>The component</returns>
             public IBuildComponent GetComponent(BuildComponentType type)
             {
-                switch (type)
+                return type switch
                 {
-                    case BuildComponentType.ConfigCache:
-                        return (IBuildComponent)_configCache;
-
-                    case BuildComponentType.LoggingService:
-                        return (IBuildComponent)_loggingService;
-
-                    case BuildComponentType.ResultsCache:
-                        return (IBuildComponent)_resultsCache;
-
-                    case BuildComponentType.RequestBuilder:
-                        return (IBuildComponent)_requestBuilder;
-
-                    case BuildComponentType.TaskBuilder:
-                        return (IBuildComponent)_taskBuilder;
-
-                    case BuildComponentType.TargetBuilder:
-                        return (IBuildComponent)_targetBuilder;
-
-                    case BuildComponentType.SdkResolverService:
-                        return (IBuildComponent)_sdkResolverService;
-
-                    default:
-                        throw new ArgumentException("Unexpected type " + type);
-                }
+                    BuildComponentType.ConfigCache => (IBuildComponent)_configCache,
+                    BuildComponentType.LoggingService => (IBuildComponent)_loggingService,
+                    BuildComponentType.ResultsCache => (IBuildComponent)_resultsCache,
+                    BuildComponentType.RequestBuilder => (IBuildComponent)_requestBuilder,
+                    BuildComponentType.TaskBuilder => (IBuildComponent)_taskBuilder,
+                    BuildComponentType.TargetBuilder => (IBuildComponent)_targetBuilder,
+                    BuildComponentType.SdkResolverService => (IBuildComponent)_sdkResolverService,
+                    _ => throw new ArgumentException("Unexpected type " + type),
+                };
             }
 
             /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
index 7eedce9361e..26d552825c9 100644
--- a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
@@ -1306,29 +1306,16 @@ public BuildParameters BuildParameters
             /// <returns>The component</returns>
             public IBuildComponent GetComponent(BuildComponentType type)
             {
-                switch (type)
+                return type switch
                 {
-                    case BuildComponentType.ConfigCache:
-                        return (IBuildComponent)_configCache;
-
-                    case BuildComponentType.LoggingService:
-                        return (IBuildComponent)_loggingService;
-
-                    case BuildComponentType.ResultsCache:
-                        return (IBuildComponent)_resultsCache;
-
-                    case BuildComponentType.RequestBuilder:
-                        return (IBuildComponent)_requestBuilder;
-
-                    case BuildComponentType.TaskBuilder:
-                        return (IBuildComponent)_taskBuilder;
-
-                    case BuildComponentType.SdkResolverService:
-                        return (IBuildComponent)_sdkResolverService;
-
-                    default:
-                        throw new ArgumentException("Unexpected type " + type);
-                }
+                    BuildComponentType.ConfigCache => (IBuildComponent)_configCache,
+                    BuildComponentType.LoggingService => (IBuildComponent)_loggingService,
+                    BuildComponentType.ResultsCache => (IBuildComponent)_resultsCache,
+                    BuildComponentType.RequestBuilder => (IBuildComponent)_requestBuilder,
+                    BuildComponentType.TaskBuilder => (IBuildComponent)_taskBuilder,
+                    BuildComponentType.SdkResolverService => (IBuildComponent)_sdkResolverService,
+                    _ => throw new ArgumentException("Unexpected type " + type),
+                };
             }
 
             /// <summary>
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
index 99dbc5198e6..02d0810b61a 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
@@ -1194,29 +1194,16 @@ LegacyThreadingData IBuildComponentHost.LegacyThreadingData
             /// <returns>The component</returns>
             public IBuildComponent GetComponent(BuildComponentType type)
             {
-                switch (type)
+                return type switch
                 {
-                    case BuildComponentType.ConfigCache:
-                        return (IBuildComponent)_configCache;
-
-                    case BuildComponentType.LoggingService:
-                        return (IBuildComponent)_loggingService;
-
-                    case BuildComponentType.ResultsCache:
-                        return (IBuildComponent)_resultsCache;
-
-                    case BuildComponentType.RequestBuilder:
-                        return (IBuildComponent)_requestBuilder;
-
-                    case BuildComponentType.TargetBuilder:
-                        return (IBuildComponent)_targetBuilder;
-
-                    case BuildComponentType.SdkResolverService:
-                        return (IBuildComponent)_sdkResolverService;
-
-                    default:
-                        throw new ArgumentException("Unexpected type " + type);
-                }
+                    BuildComponentType.ConfigCache => (IBuildComponent)_configCache,
+                    BuildComponentType.LoggingService => (IBuildComponent)_loggingService,
+                    BuildComponentType.ResultsCache => (IBuildComponent)_resultsCache,
+                    BuildComponentType.RequestBuilder => (IBuildComponent)_requestBuilder,
+                    BuildComponentType.TargetBuilder => (IBuildComponent)_targetBuilder,
+                    BuildComponentType.SdkResolverService => (IBuildComponent)_sdkResolverService,
+                    _ => throw new ArgumentException("Unexpected type " + type),
+                };
             }
 
             /// <summary>
diff --git a/src/Build/BackEnd/Components/Communications/NodeInfo.cs b/src/Build/BackEnd/Components/Communications/NodeInfo.cs
index b621994a31f..d94cccba51c 100644
--- a/src/Build/BackEnd/Components/Communications/NodeInfo.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeInfo.cs
@@ -87,19 +87,13 @@ public bool HasConfiguration(int configId)
         /// </summary>
         internal bool CanServiceRequestWithAffinity(NodeAffinity nodeAffinity)
         {
-            switch (nodeAffinity)
+            return nodeAffinity switch
             {
-                case NodeAffinity.Any:
-                    return true;
-
-                case NodeAffinity.InProc:
-                    return _providerType == NodeProviderType.InProc;
-
-                case NodeAffinity.OutOfProc:
-                    return _providerType != NodeProviderType.InProc;
-            }
-
-            return true;
+                NodeAffinity.Any => true,
+                NodeAffinity.InProc => _providerType == NodeProviderType.InProc,
+                NodeAffinity.OutOfProc => _providerType != NodeProviderType.InProc,
+                _ => true,
+            };
         }
     }
 }
diff --git a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
index d34a2df0426..d997cd64e70 100644
--- a/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
+++ b/src/Build/BackEnd/Components/Scheduler/Scheduler.cs
@@ -1288,20 +1288,12 @@ private bool AtSchedulingLimit()
             }
 
             int limit = 0;
-            switch (_componentHost.BuildParameters.MaxNodeCount)
+            limit = _componentHost.BuildParameters.MaxNodeCount switch
             {
-                case 1:
-                    limit = 1;
-                    break;
-
-                case 2:
-                    limit = _componentHost.BuildParameters.MaxNodeCount + 1 + _nodeLimitOffset;
-                    break;
-
-                default:
-                    limit = _componentHost.BuildParameters.MaxNodeCount + 2 + _nodeLimitOffset;
-                    break;
-            }
+                1 => 1,
+                2 => _componentHost.BuildParameters.MaxNodeCount + 1 + _nodeLimitOffset,
+                _ => _componentHost.BuildParameters.MaxNodeCount + 2 + _nodeLimitOffset,
+            };
 
             // We're at our limit of schedulable requests if: 
             // (1) MaxNodeCount requests are currently executing
diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
index 9afca3f4c4c..52b848ede1e 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverManifest.cs
@@ -31,21 +31,15 @@ internal static SdkResolverManifest Load(string filePath)
             {
                 while (reader.Read())
                 {
-                    switch (reader.NodeType)
+                    return reader.NodeType switch
                     {
-                        case XmlNodeType.Element:
-                            switch (reader.Name)
-                            {
-                                case "SdkResolver":
-                                    return ParseSdkResolverElement(reader);
-
-                                default:
-                                    throw new XmlException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnrecognizedElement", reader.Name));
-                            }
-
-                        default:
-                            throw new XmlException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnrecognizedElement", reader.Name));
-                    }
+                        XmlNodeType.Element => reader.Name switch
+                        {
+                            "SdkResolver" => ParseSdkResolverElement(reader),
+                            _ => throw new XmlException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnrecognizedElement", reader.Name)),
+                        },
+                        _ => throw new XmlException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnrecognizedElement", reader.Name)),
+                    };
                 }
             }
 
@@ -62,15 +56,11 @@ private static SdkResolverManifest ParseSdkResolverElement(XmlReader reader)
                 {
                     case XmlNodeType.Element:
                         {
-                            switch (reader.Name)
+                            manifest.Path = reader.Name switch
                             {
-                                case "Path":
-                                    manifest.Path = reader.ReadElementContentAsString();
-                                    break;
-
-                                default:
-                                    throw new XmlException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnrecognizedElement", reader.Name));
-                            }
+                                "Path" => reader.ReadElementContentAsString(),
+                                _ => throw new XmlException(ResourceUtilities.FormatResourceStringStripCodeAndKeyword("UnrecognizedElement", reader.Name)),
+                            };
                         }
                         break;
 
diff --git a/src/Build/Collections/LookasideStringInterner.cs b/src/Build/Collections/LookasideStringInterner.cs
index a71f382b43f..d5d18898654 100644
--- a/src/Build/Collections/LookasideStringInterner.cs
+++ b/src/Build/Collections/LookasideStringInterner.cs
@@ -98,17 +98,12 @@ public int Intern(string str)
         /// <returns>The corresponding string.</returns>
         public string GetString(int index)
         {
-            switch (index)
+            return index switch
             {
-                case NullStringIndex:
-                    return null;
-
-                case EmptyStringIndex:
-                    return String.Empty;
-
-                default:
-                    return _strings[index];
-            }
+                NullStringIndex => null,
+                EmptyStringIndex => String.Empty,
+                _ => _strings[index],
+            };
         }
 
         /// <summary>
diff --git a/src/Build/Graph/ProjectInterpretation.cs b/src/Build/Graph/ProjectInterpretation.cs
index cd9b85686e5..ae88e1064b0 100644
--- a/src/Build/Graph/ProjectInterpretation.cs
+++ b/src/Build/Graph/ProjectInterpretation.cs
@@ -423,17 +423,13 @@ public static TargetsToPropagate FromProjectAndEntryTargets(ProjectInstance proj
 
             public ImmutableList<string> GetApplicableTargetsForReference(ProjectInstance reference)
             {
-                switch (GetProjectType(reference))
+                return (GetProjectType(reference)) switch
                 {
-                    case ProjectType.InnerBuild:
-                        return _allTargets;
-                    case ProjectType.OuterBuild:
-                        return _outerBuildTargets;
-                    case ProjectType.NonMultitargeting:
-                        return _allTargets;
-                    default:
-                        throw new ArgumentOutOfRangeException();
-                }
+                    ProjectType.InnerBuild => _allTargets,
+                    ProjectType.OuterBuild => _outerBuildTargets,
+                    ProjectType.NonMultitargeting => _allTargets,
+                    _ => throw new ArgumentOutOfRangeException(),
+                };
             }
         }
 
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index cff4feb6b66..c1789256f48 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -798,12 +798,12 @@ public bool TranslateEntireState
         {
             get
             {
-                switch (Traits.Instance.EscapeHatches.ProjectInstanceTranslation)
+                return Traits.Instance.EscapeHatches.ProjectInstanceTranslation switch
                 {
-                    case EscapeHatches.ProjectInstanceTranslationMode.Full: return true;
-                    case EscapeHatches.ProjectInstanceTranslationMode.Partial: return false;
-                    default: return _translateEntireState;
-                }
+                    EscapeHatches.ProjectInstanceTranslationMode.Full => true,
+                    EscapeHatches.ProjectInstanceTranslationMode.Partial => false,
+                    _ => _translateEntireState,
+                };
             }
 
             set
diff --git a/src/Build/Logging/BaseConsoleLogger.cs b/src/Build/Logging/BaseConsoleLogger.cs
index 1b265e7fb62..b805c739752 100644
--- a/src/Build/Logging/BaseConsoleLogger.cs
+++ b/src/Build/Logging/BaseConsoleLogger.cs
@@ -1007,16 +1007,11 @@ internal virtual bool ApplyParameter(string parameterName, string parameterValue
                         }
                         else
                         {
-                            switch (parameterValue.ToUpperInvariant())
+                            showProjectFile = (parameterValue.ToUpperInvariant()) switch
                             {
-                                case "TRUE":
-                                    showProjectFile = true;
-                                    break;
-
-                                default:
-                                    showProjectFile = false;
-                                    break;
-                            }
+                                "TRUE" => true,
+                                _ => false,
+                            };
                         }
                     }
 
diff --git a/src/Samples/XmlFileLogger/ObjectModel/TaskParameter.cs b/src/Samples/XmlFileLogger/ObjectModel/TaskParameter.cs
index 022fc191533..4e28d5136f1 100644
--- a/src/Samples/XmlFileLogger/ObjectModel/TaskParameter.cs
+++ b/src/Samples/XmlFileLogger/ObjectModel/TaskParameter.cs
@@ -65,21 +65,15 @@ public void SaveToElement(XElement parentElement)
         /// <returns>Concrete task parameter node.</returns>
         public static TaskParameter Create(string message, string prefix)
         {
-            switch (prefix)
+            return prefix switch
             {
-                case XmlFileLogger.OutputItemsMessagePrefix:
-                    return new OutputItem(message, prefix);
-                case XmlFileLogger.TaskParameterMessagePrefix:
-                    return new InputParameter(message, prefix);
-                case XmlFileLogger.OutputPropertyMessagePrefix:
-                    return new OutputProperty(message, prefix);
-                case XmlFileLogger.ItemGroupIncludeMessagePrefix:
-                    return new ItemGroup(message, prefix, "Include");
-                case XmlFileLogger.ItemGroupRemoveMessagePrefix:
-                    return new ItemGroup(message, prefix, "Remove");
-                default:
-                    throw new UnknownTaskParameterPrefixException(prefix);
-            }
+                XmlFileLogger.OutputItemsMessagePrefix => new OutputItem(message, prefix),
+                XmlFileLogger.TaskParameterMessagePrefix => new InputParameter(message, prefix),
+                XmlFileLogger.OutputPropertyMessagePrefix => new OutputProperty(message, prefix),
+                XmlFileLogger.ItemGroupIncludeMessagePrefix => new ItemGroup(message, prefix, "Include"),
+                XmlFileLogger.ItemGroupRemoveMessagePrefix => new ItemGroup(message, prefix, "Remove"),
+                _ => throw new UnknownTaskParameterPrefixException(prefix),
+            };
         }
     }
 }
diff --git a/src/Shared/Debugging/PrintLineDebugger.cs b/src/Shared/Debugging/PrintLineDebugger.cs
index b6f1bf71261..fc5b610c0fe 100644
--- a/src/Shared/Debugging/PrintLineDebugger.cs
+++ b/src/Shared/Debugging/PrintLineDebugger.cs
@@ -63,15 +63,12 @@ NodeMode ScanNodeMode(string input)
 
                     Trace.Assert(!string.IsNullOrEmpty(nodeMode));
 
-                    switch (nodeMode)
+                    return nodeMode switch
                     {
-                        case "1":
-                            return NodeMode.OutOfProcNode;
-                        case "2":
-                            return NodeMode.OutOfProcTaskHostNode;
-                        default:
-                            throw new NotImplementedException();
-                    }
+                        "1" => NodeMode.OutOfProcNode,
+                        "2" => NodeMode.OutOfProcTaskHostNode,
+                        _ => throw new NotImplementedException(),
+                    };
                 }
             });
 
diff --git a/src/Shared/FileSystem/WindowsFileSystem.cs b/src/Shared/FileSystem/WindowsFileSystem.cs
index 2b66c993281..71431d00924 100644
--- a/src/Shared/FileSystem/WindowsFileSystem.cs
+++ b/src/Shared/FileSystem/WindowsFileSystem.cs
@@ -113,27 +113,14 @@ private static WindowsNative.EnumerateDirectoryResult CustomEnumerateDirectoryEn
                 {
                     int hr = Marshal.GetLastWin32Error();
                     Debug.Assert(hr != WindowsNative.ErrorFileNotFound);
-
-                    WindowsNative.EnumerateDirectoryStatus findHandleOpenStatus;
-                    switch (hr)
+                    WindowsNative.EnumerateDirectoryStatus findHandleOpenStatus = hr switch
                     {
-                        case WindowsNative.ErrorFileNotFound:
-                            findHandleOpenStatus = WindowsNative.EnumerateDirectoryStatus.SearchDirectoryNotFound;
-                            break;
-                        case WindowsNative.ErrorPathNotFound:
-                            findHandleOpenStatus = WindowsNative.EnumerateDirectoryStatus.SearchDirectoryNotFound;
-                            break;
-                        case WindowsNative.ErrorDirectory:
-                            findHandleOpenStatus = WindowsNative.EnumerateDirectoryStatus.CannotEnumerateFile;
-                            break;
-                        case WindowsNative.ErrorAccessDenied:
-                            findHandleOpenStatus = WindowsNative.EnumerateDirectoryStatus.AccessDenied;
-                            break;
-                        default:
-                            findHandleOpenStatus = WindowsNative.EnumerateDirectoryStatus.UnknownError;
-                            break;
-                    }
-
+                        WindowsNative.ErrorFileNotFound => WindowsNative.EnumerateDirectoryStatus.SearchDirectoryNotFound,
+                        WindowsNative.ErrorPathNotFound => WindowsNative.EnumerateDirectoryStatus.SearchDirectoryNotFound,
+                        WindowsNative.ErrorDirectory => WindowsNative.EnumerateDirectoryStatus.CannotEnumerateFile,
+                        WindowsNative.ErrorAccessDenied => WindowsNative.EnumerateDirectoryStatus.AccessDenied,
+                        _ => WindowsNative.EnumerateDirectoryStatus.UnknownError,
+                    };
                     return new WindowsNative.EnumerateDirectoryResult(directoryPath, findHandleOpenStatus, hr);
                 }
 
diff --git a/src/Shared/FrameworkLocationHelper.cs b/src/Shared/FrameworkLocationHelper.cs
index 7b86e274cdf..669f059b122 100644
--- a/src/Shared/FrameworkLocationHelper.cs
+++ b/src/Shared/FrameworkLocationHelper.cs
@@ -1003,15 +1003,12 @@ internal static string RemoveDirectories(string path, int numberOfLevelsToRemove
         /// </summary>
         private static string GetPathToBuildToolsFromEnvironment(DotNetFrameworkArchitecture architecture)
         {
-            switch (architecture)
+            return architecture switch
             {
-                case DotNetFrameworkArchitecture.Bitness64:
-                    return BuildEnvironmentHelper.Instance.MSBuildToolsDirectory64;
-                case DotNetFrameworkArchitecture.Bitness32:
-                    return BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32;
-                default:
-                    return BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory;
-            }
+                DotNetFrameworkArchitecture.Bitness64 => BuildEnvironmentHelper.Instance.MSBuildToolsDirectory64,
+                DotNetFrameworkArchitecture.Bitness32 => BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32,
+                _ => BuildEnvironmentHelper.Instance.CurrentMSBuildToolsDirectory,
+            };
         }
 
 #if FEATURE_WIN32_REGISTRY
diff --git a/src/Shared/NativeMethodsShared.cs b/src/Shared/NativeMethodsShared.cs
index 49385b177ad..5d18bc707b6 100644
--- a/src/Shared/NativeMethodsShared.cs
+++ b/src/Shared/NativeMethodsShared.cs
@@ -379,21 +379,15 @@ private class SystemInformationData
             /// <returns></returns>
             private static ProcessorArchitectures ConvertSystemArchitecture(ushort arch)
             {
-                switch (arch)
+                return arch switch
                 {
-                    case PROCESSOR_ARCHITECTURE_INTEL:
-                        return ProcessorArchitectures.X86;
-                    case PROCESSOR_ARCHITECTURE_AMD64:
-                        return ProcessorArchitectures.X64;
-                    case PROCESSOR_ARCHITECTURE_ARM:
-                        return ProcessorArchitectures.ARM;
-                    case PROCESSOR_ARCHITECTURE_IA64:
-                        return ProcessorArchitectures.IA64;
-                    case PROCESSOR_ARCHITECTURE_ARM64:
-                        return ProcessorArchitectures.ARM64;
-                    default:
-                        return ProcessorArchitectures.Unknown;
-                }
+                    PROCESSOR_ARCHITECTURE_INTEL => ProcessorArchitectures.X86,
+                    PROCESSOR_ARCHITECTURE_AMD64 => ProcessorArchitectures.X64,
+                    PROCESSOR_ARCHITECTURE_ARM => ProcessorArchitectures.ARM,
+                    PROCESSOR_ARCHITECTURE_IA64 => ProcessorArchitectures.IA64,
+                    PROCESSOR_ARCHITECTURE_ARM64 => ProcessorArchitectures.ARM64,
+                    _ => ProcessorArchitectures.Unknown,
+                };
             }
 
             /// <summary>
diff --git a/src/Tasks/FileIO/GetFileHash.cs b/src/Tasks/FileIO/GetFileHash.cs
index 39ad392e8f8..0a6095e5d58 100644
--- a/src/Tasks/FileIO/GetFileHash.cs
+++ b/src/Tasks/FileIO/GetFileHash.cs
@@ -115,15 +115,12 @@ public override bool Execute()
 
         internal static string EncodeHash(HashEncoding encoding, byte[] hash)
         {
-            switch (encoding)
+            return encoding switch
             {
-                case Tasks.HashEncoding.Hex:
-                    return ConversionUtilities.ConvertByteArrayToHex(hash);
-                case Tasks.HashEncoding.Base64:
-                    return Convert.ToBase64String(hash);
-                default:
-                    throw new NotImplementedException();
-            }
+                Tasks.HashEncoding.Hex => ConversionUtilities.ConvertByteArrayToHex(hash),
+                Tasks.HashEncoding.Base64 => Convert.ToBase64String(hash),
+                _ => throw new NotImplementedException(),
+            };
         }
 
         internal static bool TryParseHashEncoding(string value, out HashEncoding encoding)
diff --git a/src/Tasks/GenerateManifestBase.cs b/src/Tasks/GenerateManifestBase.cs
index 1e78ee56ee2..460e2def06f 100644
--- a/src/Tasks/GenerateManifestBase.cs
+++ b/src/Tasks/GenerateManifestBase.cs
@@ -92,24 +92,14 @@ protected internal AssemblyReference AddAssemblyFromItem(ITaskItem item)
                 return null;
             }
 
-            AssemblyReferenceType referenceType;
             AssemblyType assemblyType = GetItemAssemblyType(item);
-            switch (assemblyType)
+            AssemblyReferenceType referenceType = assemblyType switch
             {
-                case AssemblyType.Managed:
-                    referenceType = AssemblyReferenceType.ManagedAssembly;
-                    break;
-                case AssemblyType.Native:
-                    referenceType = AssemblyReferenceType.NativeAssembly;
-                    break;
-                case AssemblyType.Satellite:
-                    referenceType = AssemblyReferenceType.ManagedAssembly;
-                    break;
-                default:
-                    referenceType = AssemblyReferenceType.Unspecified;
-                    break;
-            }
-
+                AssemblyType.Managed => AssemblyReferenceType.ManagedAssembly,
+                AssemblyType.Native => AssemblyReferenceType.NativeAssembly,
+                AssemblyType.Satellite => AssemblyReferenceType.ManagedAssembly,
+                _ => AssemblyReferenceType.Unspecified,
+            };
             DependencyType dependencyType = GetItemDependencyType(item);
             AssemblyReference assembly;
             if (dependencyType == DependencyType.Install)
diff --git a/src/Tasks/LockCheck.cs b/src/Tasks/LockCheck.cs
index 9b343227cef..6624a318f53 100644
--- a/src/Tasks/LockCheck.cs
+++ b/src/Tasks/LockCheck.cs
@@ -284,43 +284,21 @@ internal static IEnumerable<ProcessInfo> GetLockingProcessInfos(params string[]
 
         private static Exception GetException(int res, string apiName, string message)
         {
-            string reason;
-            switch (res)
+            string reason = res switch
             {
-                case ERROR_ACCESS_DENIED:
-                    reason = "Access is denied.";
-                    break;
-                case ERROR_SEM_TIMEOUT:
-                    reason = "A Restart Manager function could not obtain a Registry write mutex in the allotted time. " +
-                             "A system restart is recommended because further use of the Restart Manager is likely to fail.";
-                    break;
-                case ERROR_BAD_ARGUMENTS:
-                    reason = "One or more arguments are not correct. This error value is returned by the Restart Manager " +
-                             "function if a NULL pointer or 0 is passed in a parameter that requires a non-null and non-zero value.";
-                    break;
-                case ERROR_MAX_SESSIONS_REACHED:
-                    reason = "The maximum number of sessions has been reached.";
-                    break;
-                case ERROR_WRITE_FAULT:
-                    reason = "An operation was unable to read or write to the registry.";
-                    break;
-                case ERROR_OUTOFMEMORY:
-                    reason = "A Restart Manager operation could not complete because not enough memory was available.";
-                    break;
-                case ERROR_CANCELLED:
-                    reason = "The current operation is canceled by user.";
-                    break;
-                case ERROR_MORE_DATA:
-                    reason = "More data is available.";
-                    break;
-                case ERROR_INVALID_HANDLE:
-                    reason = "No Restart Manager session exists for the handle supplied.";
-                    break;
-                default:
-                    reason = $"0x{res:x8}";
-                    break;
-            }
-
+                ERROR_ACCESS_DENIED => "Access is denied.",
+                ERROR_SEM_TIMEOUT => "A Restart Manager function could not obtain a Registry write mutex in the allotted time. " +
+   "A system restart is recommended because further use of the Restart Manager is likely to fail.",
+                ERROR_BAD_ARGUMENTS => "One or more arguments are not correct. This error value is returned by the Restart Manager " +
+"function if a NULL pointer or 0 is passed in a parameter that requires a non-null and non-zero value.",
+                ERROR_MAX_SESSIONS_REACHED => "The maximum number of sessions has been reached.",
+                ERROR_WRITE_FAULT => "An operation was unable to read or write to the registry.",
+                ERROR_OUTOFMEMORY => "A Restart Manager operation could not complete because not enough memory was available.",
+                ERROR_CANCELLED => "The current operation is canceled by user.",
+                ERROR_MORE_DATA => "More data is available.",
+                ERROR_INVALID_HANDLE => "No Restart Manager session exists for the handle supplied.",
+                _ => $"0x{res:x8}",
+            };
             throw new Win32Exception(res, $"{message} ({apiName}() error {res}: {reason})");
         }
     }
diff --git a/src/Tasks/ManifestUtil/Manifest.cs b/src/Tasks/ManifestUtil/Manifest.cs
index d6c882667d7..e1d60774240 100644
--- a/src/Tasks/ManifestUtil/Manifest.cs
+++ b/src/Tasks/ManifestUtil/Manifest.cs
@@ -424,21 +424,13 @@ private void UpdateAssemblyReference(AssemblyReference a, string targetFramework
 
             if (a.AssemblyIdentity == null)
             {
-                switch (a.ReferenceType)
+                a.AssemblyIdentity = a.ReferenceType switch
                 {
-                    case AssemblyReferenceType.ClickOnceManifest:
-                        a.AssemblyIdentity = AssemblyIdentity.FromManifest(a.ResolvedPath);
-                        break;
-                    case AssemblyReferenceType.ManagedAssembly:
-                        a.AssemblyIdentity = AssemblyIdentity.FromManagedAssembly(a.ResolvedPath);
-                        break;
-                    case AssemblyReferenceType.NativeAssembly:
-                        a.AssemblyIdentity = AssemblyIdentity.FromNativeAssembly(a.ResolvedPath);
-                        break;
-                    default:
-                        a.AssemblyIdentity = AssemblyIdentity.FromFile(a.ResolvedPath);
-                        break;
-                }
+                    AssemblyReferenceType.ClickOnceManifest => AssemblyIdentity.FromManifest(a.ResolvedPath),
+                    AssemblyReferenceType.ManagedAssembly => AssemblyIdentity.FromManagedAssembly(a.ResolvedPath),
+                    AssemblyReferenceType.NativeAssembly => AssemblyIdentity.FromNativeAssembly(a.ResolvedPath),
+                    _ => AssemblyIdentity.FromFile(a.ResolvedPath),
+                };
             }
 
             if (!a.IsPrerequisite)
diff --git a/src/Tasks/ManifestUtil/SecurityUtil.cs b/src/Tasks/ManifestUtil/SecurityUtil.cs
index 2a08073279d..c44988eadd7 100644
--- a/src/Tasks/ManifestUtil/SecurityUtil.cs
+++ b/src/Tasks/ManifestUtil/SecurityUtil.cs
@@ -112,15 +112,12 @@ internal static PermissionSet ComputeZonePermissionSetHelper(string targetZone,
 
         private static PermissionSet GetNamedPermissionSetFromZone(string targetZone, string targetFrameworkMoniker)
         {
-            switch (targetZone)
+            return targetZone switch
             {
-                case LocalIntranet:
-                    return GetNamedPermissionSet(LocalIntranet, targetFrameworkMoniker);
-                case Internet:
-                    return GetNamedPermissionSet(Internet, targetFrameworkMoniker);
-                default:
-                    throw new ArgumentException(String.Empty /* no message */, nameof(targetZone));
-            }
+                LocalIntranet => GetNamedPermissionSet(LocalIntranet, targetFrameworkMoniker),
+                Internet => GetNamedPermissionSet(Internet, targetFrameworkMoniker),
+                _ => throw new ArgumentException(String.Empty /* no message */, nameof(targetZone)),
+            };
         }
 
         private static PermissionSet GetNamedPermissionSet(string targetZone, string targetFrameworkMoniker)
@@ -235,19 +232,12 @@ private static XmlElement GetXmlElement(string targetZone, FrameworkNameVersioni
         [SuppressMessage("Microsoft.Security.Xml", "CA3057: DoNotUseLoadXml.")]
         private static XmlElement GetCurrentCLRPermissions(string targetZone)
         {
-            SecurityZone zone;
-            switch (targetZone)
+            var zone = targetZone switch
             {
-                case LocalIntranet:
-                    zone = SecurityZone.Intranet;
-                    break;
-                case Internet:
-                    zone = SecurityZone.Internet;
-                    break;
-                default:
-                    throw new ArgumentException(String.Empty /* no message */, nameof(targetZone));
-            }
-
+                LocalIntranet => SecurityZone.Intranet,
+                Internet => SecurityZone.Internet,
+                _ => throw new ArgumentException(String.Empty /* no message */, nameof(targetZone)),
+            };
             var evidence = new Evidence(new EvidenceBase[] { new Zone(zone), new System.Runtime.Hosting.ActivationArguments(new System.ApplicationIdentity("")) }, null);
 
             PermissionSet sandbox = SecurityManager.GetStandardSandbox(evidence);
@@ -267,20 +257,12 @@ private static XmlElement GetCurrentCLRPermissions(string targetZone)
 
         private static XmlElement GetXmlElement(string targetZone, int majorVersion)
         {
-            XmlDocument doc;
-
-            switch (majorVersion)
+            XmlDocument doc = majorVersion switch
             {
-                case Fx2MajorVersion:
-                    doc = CreateXmlDocV2(targetZone);
-                    break;
-                case Fx3MajorVersion:
-                    doc = CreateXmlDocV3(targetZone);
-                    break;
-                default:
-                    throw new ArgumentException(String.Empty /* no message */, nameof(majorVersion));
-            }
-
+                Fx2MajorVersion => CreateXmlDocV2(targetZone),
+                Fx3MajorVersion => CreateXmlDocV3(targetZone),
+                _ => throw new ArgumentException(String.Empty /* no message */, nameof(majorVersion)),
+            };
             XmlElement rootElement = doc.DocumentElement;
 
             return rootElement;
diff --git a/src/Tasks/SdkToolsPathUtility.cs b/src/Tasks/SdkToolsPathUtility.cs
index cf37031dcda..54bbd21deeb 100644
--- a/src/Tasks/SdkToolsPathUtility.cs
+++ b/src/Tasks/SdkToolsPathUtility.cs
@@ -54,25 +54,15 @@ internal static string GeneratePathToTool(FileExists fileExists, string currentA
                 string processorSpecificToolDirectory;
                 try
                 {
-                    switch (currentArchitecture)
+                    processorSpecificToolDirectory = currentArchitecture switch
                     {
                         // There may not be an arm directory so we will fall back to the x86 tool location
                         // but if there is then we should try and use it.
-                        case ProcessorArchitecture.ARM:
-                            processorSpecificToolDirectory = Path.Combine(sdkToolsPath, "arm");
-                            break;
-                        case ProcessorArchitecture.AMD64:
-                            processorSpecificToolDirectory = Path.Combine(sdkToolsPath, "x64");
-                            break;
-                        case ProcessorArchitecture.IA64:
-                            processorSpecificToolDirectory = Path.Combine(sdkToolsPath, "ia64");
-                            break;
-                        case ProcessorArchitecture.X86:
-                        default:
-                            processorSpecificToolDirectory = sdkToolsPath;
-                            break;
-                    }
-
+                        ProcessorArchitecture.ARM => Path.Combine(sdkToolsPath, "arm"),
+                        ProcessorArchitecture.AMD64 => Path.Combine(sdkToolsPath, "x64"),
+                        ProcessorArchitecture.IA64 => Path.Combine(sdkToolsPath, "ia64"),
+                        _ => sdkToolsPath,
+                    };
                     pathToTool = Path.Combine(processorSpecificToolDirectory, toolName);
 
                     if (!fileExists(pathToTool))
diff --git a/src/Tasks/TlbImp.cs b/src/Tasks/TlbImp.cs
index dbcd83aae6f..25295ea9c89 100644
--- a/src/Tasks/TlbImp.cs
+++ b/src/Tasks/TlbImp.cs
@@ -303,18 +303,14 @@ private TlbImpTransformFlags GetTlbImpTransformFlagsParameterWithDefault(string
             private bool ValidateTransformFlags()
             {
                 // Any flag on its own is fine ...
-                switch (Transform)
+                return Transform switch
                 {
-                    case TlbImpTransformFlags.None:
-                        return true;
-                    case TlbImpTransformFlags.SerializableValueClasses:
-                        return true;
-                    case TlbImpTransformFlags.TransformDispRetVals:
-                        return true;
-                }
-
-                // ... But any and all other combinations of flags are disallowed.
-                return false;
+                    TlbImpTransformFlags.None => true,
+                    TlbImpTransformFlags.SerializableValueClasses => true,
+                    TlbImpTransformFlags.TransformDispRetVals => true,
+                    // ... But any and all other combinations of flags are disallowed.
+                    _ => false,
+                };
             }
 
             /// <summary>
@@ -325,17 +321,13 @@ private bool ValidateTransformFlags()
             /// <returns>A string that can be passed to /transform: on the command line</returns>
             private static string ConvertTransformFlagsToCommandLineCommand(TlbImpTransformFlags flags)
             {
-                switch (flags)
+                return flags switch
                 {
-                    case TlbImpTransformFlags.None:
-                        return null;
-                    case TlbImpTransformFlags.SerializableValueClasses:
-                        return "SerializableValueClasses";
-                    case TlbImpTransformFlags.TransformDispRetVals:
-                        return "DispRet";
-                }
-
-                return null;
+                    TlbImpTransformFlags.None => null,
+                    TlbImpTransformFlags.SerializableValueClasses => "SerializableValueClasses",
+                    TlbImpTransformFlags.TransformDispRetVals => "DispRet",
+                    _ => null,
+                };
             }
 
             #endregion // ToolTask Members
diff --git a/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs b/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
index 77964a82a4e..5812888fbd1 100644
--- a/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
+++ b/src/Utilities.UnitTests/ProcessorArchitecture_Tests.cs
@@ -14,24 +14,15 @@ public class ProcessorArchitectureTests
     {
         internal static string ProcessorArchitectureIntToString()
         {
-            switch (NativeMethodsShared.ProcessorArchitecture)
+            return NativeMethodsShared.ProcessorArchitecture switch
             {
-                case NativeMethodsShared.ProcessorArchitectures.X86:
-                    return ProcessorArchitecture.X86;
-
-                case NativeMethodsShared.ProcessorArchitectures.X64:
-                    return ProcessorArchitecture.AMD64;
-
-                case NativeMethodsShared.ProcessorArchitectures.IA64:
-                    return ProcessorArchitecture.IA64;
-
-                case NativeMethodsShared.ProcessorArchitectures.ARM:
-                    return ProcessorArchitecture.ARM;
-
+                NativeMethodsShared.ProcessorArchitectures.X86 => ProcessorArchitecture.X86,
+                NativeMethodsShared.ProcessorArchitectures.X64 => ProcessorArchitecture.AMD64,
+                NativeMethodsShared.ProcessorArchitectures.IA64 => ProcessorArchitecture.IA64,
+                NativeMethodsShared.ProcessorArchitectures.ARM => ProcessorArchitecture.ARM,
                 // unknown architecture? return null
-                default:
-                    return null;
-            }
+                _ => null,
+            };
         }
 
         [Fact]
diff --git a/src/Utilities/ProcessorArchitecture.cs b/src/Utilities/ProcessorArchitecture.cs
index abdced9c21f..0b12a2ceb81 100644
--- a/src/Utilities/ProcessorArchitecture.cs
+++ b/src/Utilities/ProcessorArchitecture.cs
@@ -55,36 +55,16 @@ public static class ProcessorArchitecture
         /// <returns>null if unknown architecture or error, one of the known architectures otherwise</returns>
         private static string GetCurrentProcessArchitecture()
         {
-            string architecture;
-
-            switch (NativeMethodsShared.ProcessorArchitecture)
+            string architecture = NativeMethodsShared.ProcessorArchitecture switch
             {
-                case NativeMethodsShared.ProcessorArchitectures.X86:
-                    architecture = X86;
-                    break;
-
-                case NativeMethodsShared.ProcessorArchitectures.X64:
-                    architecture = AMD64;
-                    break;
-
-                case NativeMethodsShared.ProcessorArchitectures.IA64:
-                    architecture = IA64;
-                    break;
-
-                case NativeMethodsShared.ProcessorArchitectures.ARM:
-                    architecture = ARM;
-                    break;
-
-                case NativeMethodsShared.ProcessorArchitectures.ARM64:
-                    architecture = ARM64;
-                    break;
-
+                NativeMethodsShared.ProcessorArchitectures.X86 => X86,
+                NativeMethodsShared.ProcessorArchitectures.X64 => AMD64,
+                NativeMethodsShared.ProcessorArchitectures.IA64 => IA64,
+                NativeMethodsShared.ProcessorArchitectures.ARM => ARM,
+                NativeMethodsShared.ProcessorArchitectures.ARM64 => ARM64,
                 // unknown architecture? return null
-                default:
-                    architecture = null;
-                    break;
-            }
-
+                _ => null,
+            };
             return architecture;
         }
     }
diff --git a/src/Utilities/ToolLocationHelper.cs b/src/Utilities/ToolLocationHelper.cs
index 82cd4cc9d4a..691da7faf16 100644
--- a/src/Utilities/ToolLocationHelper.cs
+++ b/src/Utilities/ToolLocationHelper.cs
@@ -3409,22 +3409,17 @@ internal static string ConvertDotNetFrameworkArchitectureToProcessorArchitecture
                     return ProcessorArchitecture.X86;
                 case DotNetFrameworkArchitecture.Bitness64:
                     // We need to know which 64-bit architecture we're on.
-                    switch (NativeMethodsShared.ProcessorArchitectureNative)
+                    return NativeMethodsShared.ProcessorArchitectureNative switch
                     {
-                        case NativeMethodsShared.ProcessorArchitectures.X64:
-                            return ProcessorArchitecture.AMD64;
-                        case NativeMethodsShared.ProcessorArchitectures.IA64:
-                            return ProcessorArchitecture.IA64;
+                        NativeMethodsShared.ProcessorArchitectures.X64 => ProcessorArchitecture.AMD64,
+                        NativeMethodsShared.ProcessorArchitectures.IA64 => ProcessorArchitecture.IA64,
                         // Error, OK, we're trying to get the 64-bit path on a 32-bit machine.
                         // That ... doesn't make sense. 
-                        case NativeMethodsShared.ProcessorArchitectures.X86:
-                            return null;
-                        case NativeMethodsShared.ProcessorArchitectures.ARM:
-                            return null;
+                        NativeMethodsShared.ProcessorArchitectures.X86 => null,
+                        NativeMethodsShared.ProcessorArchitectures.ARM => null,
                         // unknown architecture? return null
-                        default:
-                            return null;
-                    }
+                        _ => null,
+                    };
                 case DotNetFrameworkArchitecture.Current:
                     return ProcessorArchitecture.CurrentProcessArchitecture;
             }
@@ -3579,18 +3574,14 @@ private static string GetPathToWindowsSdkFile(string fileName, string pathToSdk,
         /// <returns>The tools path folder of the appropriate ToolsVersion if it exists, otherwise null.</returns>
         public static string GetPathToBuildTools(string toolsVersion, UtilitiesDotNetFrameworkArchitecture architecture)
         {
-            switch (toolsVersion)
+            return toolsVersion switch
             {
-                case "2.0":
-                    return GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version20, architecture);
-                case "3.5":
-                    return GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version35, architecture);
-                case "4.0":
-                    return GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version40, architecture);
-            }
-
-            // Doesn't map to an existing .NET Framework, so let's grab it out of the toolset.
-            return FrameworkLocationHelper.GeneratePathToBuildToolsForToolsVersion(toolsVersion, ConvertToSharedDotNetFrameworkArchitecture(architecture));
+                "2.0" => GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version20, architecture),
+                "3.5" => GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version35, architecture),
+                "4.0" => GetPathToDotNetFramework(TargetDotNetFrameworkVersion.Version40, architecture),
+                // Doesn't map to an existing .NET Framework, so let's grab it out of the toolset.
+                _ => FrameworkLocationHelper.GeneratePathToBuildToolsForToolsVersion(toolsVersion, ConvertToSharedDotNetFrameworkArchitecture(architecture)),
+            };
         }
 
         /// <summary>
