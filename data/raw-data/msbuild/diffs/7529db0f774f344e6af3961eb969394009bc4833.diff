diff --git a/src/MSBuild.sln b/src/MSBuild.sln
index 11ac992ab85..82fc63f51e7 100644
--- a/src/MSBuild.sln
+++ b/src/MSBuild.sln
@@ -73,6 +73,8 @@ Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "XmlFileLogger", "..\Samples
 EndProject
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "NuGet.MSBuildSdkResolver", "NuGetSdkResolver\NuGet.MSBuildSdkResolver.csproj", "{C7988833-3EF2-43F4-A170-34E8CCCB1320}"
 EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "NuGet.MSBuildSdkResolver.UnitTests", "NuGetSdkResolver.UnitTests\NuGet.MSBuildSdkResolver.UnitTests.csproj", "{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -855,6 +857,48 @@ Global
 		{C7988833-3EF2-43F4-A170-34E8CCCB1320}.Release-NetCore|x64.Build.0 = Release-NetCore|x64
 		{C7988833-3EF2-43F4-A170-34E8CCCB1320}.Release-NetCore|x86.ActiveCfg = Release-NetCore|x86
 		{C7988833-3EF2-43F4-A170-34E8CCCB1320}.Release-NetCore|x86.Build.0 = Release-NetCore|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug|x64.ActiveCfg = Debug|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug|x64.Build.0 = Debug|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug|x86.ActiveCfg = Debug|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug|x86.Build.0 = Debug|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug-MONO|Any CPU.ActiveCfg = Debug-MONO|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug-MONO|Any CPU.Build.0 = Debug-MONO|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug-MONO|x64.ActiveCfg = Debug-MONO|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug-MONO|x64.Build.0 = Debug-MONO|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug-MONO|x86.ActiveCfg = Debug-MONO|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug-MONO|x86.Build.0 = Debug-MONO|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug-NetCore|Any CPU.ActiveCfg = Debug-NetCore|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug-NetCore|Any CPU.Build.0 = Debug-NetCore|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug-NetCore|x64.ActiveCfg = Debug-NetCore|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug-NetCore|x64.Build.0 = Debug-NetCore|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug-NetCore|x86.ActiveCfg = Debug-NetCore|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Debug-NetCore|x86.Build.0 = Debug-NetCore|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Port-Progress|Any CPU.ActiveCfg = Port-Progress|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Port-Progress|Any CPU.Build.0 = Port-Progress|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Port-Progress|x64.ActiveCfg = Port-Progress|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Port-Progress|x64.Build.0 = Port-Progress|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Port-Progress|x86.ActiveCfg = Port-Progress|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Port-Progress|x86.Build.0 = Port-Progress|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release|Any CPU.Build.0 = Release|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release|x64.ActiveCfg = Release|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release|x64.Build.0 = Release|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release|x86.ActiveCfg = Release|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release|x86.Build.0 = Release|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release-MONO|Any CPU.ActiveCfg = Release-MONO|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release-MONO|Any CPU.Build.0 = Release-MONO|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release-MONO|x64.ActiveCfg = Release-MONO|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release-MONO|x64.Build.0 = Release-MONO|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release-MONO|x86.ActiveCfg = Release-MONO|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release-MONO|x86.Build.0 = Release-MONO|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release-NetCore|Any CPU.ActiveCfg = Release-NetCore|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release-NetCore|Any CPU.Build.0 = Release-NetCore|Any CPU
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release-NetCore|x64.ActiveCfg = Release-NetCore|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release-NetCore|x64.Build.0 = Release-NetCore|x64
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release-NetCore|x86.ActiveCfg = Release-NetCore|x86
+		{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}.Release-NetCore|x86.Build.0 = Release-NetCore|x86
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
diff --git a/src/NuGetSdkResolver.UnitTests/GlobalJsonReader_Tests.cs b/src/NuGetSdkResolver.UnitTests/GlobalJsonReader_Tests.cs
new file mode 100644
index 00000000000..db3a22b2112
--- /dev/null
+++ b/src/NuGetSdkResolver.UnitTests/GlobalJsonReader_Tests.cs
@@ -0,0 +1,102 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Engine.UnitTests;
+using Shouldly;
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Linq;
+using Xunit;
+
+namespace NuGet.MSBuildSdkResolver.UnitTests
+{
+    public class GlobalJsonReader_Tests
+    {
+        public static string WriteGlobalJson(string directory, Dictionary<string, string> sdkVersions, string additionalcontent = "")
+        {
+            string path = Path.Combine(directory, GlobalJsonReader.GlobalJsonFileName);
+
+            using (StreamWriter writer = File.CreateText(path))
+            {
+                writer.WriteLine("{");
+                if (sdkVersions != null)
+                {
+                    writer.WriteLine("    \"msbuild-sdks\": {");
+                    writer.WriteLine(String.Join($",{Environment.NewLine}        ", sdkVersions.Select(i => $"\"{i.Key}\": \"{i.Value}\"")));
+                    writer.WriteLine("    }");
+                }
+
+                if (!String.IsNullOrWhiteSpace(additionalcontent))
+                {
+                    writer.Write(additionalcontent);
+                }
+
+                writer.WriteLine("}");
+            }
+
+            return path;
+        }
+
+        [Fact]
+        public void EmptyGlobalJson()
+        {
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestFolder folder = testEnvironment.CreateFolder();
+
+                File.WriteAllText(Path.Combine(folder.FolderPath, GlobalJsonReader.GlobalJsonFileName), " { } ");
+
+                MockSdkResolverContext context = new MockSdkResolverContext(Path.Combine(folder.FolderPath, "foo.proj"));
+
+                GlobalJsonReader.GetMSBuildSdkVersions(context).ShouldBeNull();
+            }
+        }
+
+        [Fact]
+        public void InvalidJsonLogsMessage()
+        {
+            Dictionary<string, string> expectedVersions = new Dictionary<string, string>
+            {
+                {"foo", "1.0.0"},
+                {"bar", "2.0.0"}
+            };
+
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestProjectWithFiles projectWithFiles = testEnvironment.CreateTestProjectWithFiles("");
+
+                string globalJsonPath = WriteGlobalJson(projectWithFiles.TestRoot, expectedVersions, additionalcontent: ", abc");
+
+                MockSdkResolverContext context = new MockSdkResolverContext(projectWithFiles.ProjectFile);
+
+                GlobalJsonReader.GetMSBuildSdkVersions(context).ShouldBeNull();
+
+                context.MockSdkLogger.LoggedMessages
+                    .ShouldHaveSingleItem()
+                    .Key
+                    .ShouldBe($"Failed to parse \"{globalJsonPath}\". Invalid JavaScript property identifier character: }}. Path \'msbuild-sdks\', line 6, position 5.");
+            }
+        }
+
+        [Fact]
+        public void SdkVersionsAreSuccessfullyLoaded()
+        {
+            Dictionary<string, string> expectedVersions = new Dictionary<string, string>
+            {
+                {"foo", "1.0.0"},
+                {"bar", "2.0.0"}
+            };
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestProjectWithFiles projectWithFiles = testEnvironment.CreateTestProjectWithFiles("", relativePathFromRootToProject: @"a\b\c");
+
+                WriteGlobalJson(projectWithFiles.TestRoot, expectedVersions);
+
+                MockSdkResolverContext context = new MockSdkResolverContext(projectWithFiles.ProjectFile);
+
+                GlobalJsonReader.GetMSBuildSdkVersions(context).ShouldBe(expectedVersions);
+            }
+        }
+    }
+}
diff --git a/src/NuGetSdkResolver.UnitTests/MockSdkLogger.cs b/src/NuGetSdkResolver.UnitTests/MockSdkLogger.cs
new file mode 100644
index 00000000000..4698a9ffb38
--- /dev/null
+++ b/src/NuGetSdkResolver.UnitTests/MockSdkLogger.cs
@@ -0,0 +1,34 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Framework;
+using System.Collections.Generic;
+using SdkLoggerBase = Microsoft.Build.Framework.SdkLogger;
+
+namespace NuGet.MSBuildSdkResolver.UnitTests
+{
+    /// <summary>
+    /// A mock implementation of <see cref="SdkLoggerBase"/> that stores logged messages.
+    /// </summary>
+    public class MockSdkLogger : SdkLoggerBase
+    {
+        /// <summary>
+        /// Stores the list of messages that have been logged.
+        /// </summary>
+        private readonly List<KeyValuePair<string, MessageImportance>> _messages = new List<KeyValuePair<string, MessageImportance>>();
+
+        /// <summary>
+        /// Gets a list of messages that have been logged.
+        /// </summary>
+        public IReadOnlyCollection<KeyValuePair<string, MessageImportance>> LoggedMessages
+        {
+            get { return _messages; }
+        }
+
+        /// <inheritdoc cref="LogMessage"/>
+        public override void LogMessage(string message, MessageImportance messageImportance = MessageImportance.Low)
+        {
+            _messages.Add(new KeyValuePair<string, MessageImportance>(message, messageImportance));
+        }
+    }
+}
diff --git a/src/NuGetSdkResolver.UnitTests/MockSdkResolverContext.cs b/src/NuGetSdkResolver.UnitTests/MockSdkResolverContext.cs
new file mode 100644
index 00000000000..b1472f6c77c
--- /dev/null
+++ b/src/NuGetSdkResolver.UnitTests/MockSdkResolverContext.cs
@@ -0,0 +1,29 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using SdkResolverContextBase = Microsoft.Build.Framework.SdkResolverContext;
+
+namespace NuGet.MSBuildSdkResolver.UnitTests
+{
+    /// <summary>
+    /// A mock implementation of <see cref="SdkResolverContextBase"/> that uses a <see cref="MockSdkLogger"/>.
+    /// </summary>
+    public sealed class MockSdkResolverContext : SdkResolverContextBase
+    {
+        /// <summary>
+        /// Initializes a new instance of the MockSdkResolverContext class.
+        /// </summary>
+        /// <param name="projectPath">The path to the project.</param>
+        public MockSdkResolverContext(string projectPath)
+        {
+            Logger = MockSdkLogger;
+
+            ProjectFilePath = projectPath;
+        }
+
+        /// <summary>
+        /// Gets the <see cref="MockSdkLogger"/> being used by the context.
+        /// </summary>
+        public MockSdkLogger MockSdkLogger { get; } = new MockSdkLogger();
+    }
+}
diff --git a/src/NuGetSdkResolver.UnitTests/NuGet.MSBuildSdkResolver.UnitTests.csproj b/src/NuGetSdkResolver.UnitTests/NuGet.MSBuildSdkResolver.UnitTests.csproj
new file mode 100644
index 00000000000..3bbb2aed77d
--- /dev/null
+++ b/src/NuGetSdkResolver.UnitTests/NuGet.MSBuildSdkResolver.UnitTests.csproj
@@ -0,0 +1,87 @@
+ï»¿<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <PropertyGroup Condition="'$(Configuration)' == 'Debug-NetCore' or '$(Configuration)' == 'Release-NetCore'">
+    <TargetFrameworkVersion Condition="'$(TargetFrameworkVersion)' == ''">v1.5</TargetFrameworkVersion>
+  </PropertyGroup>
+  <Import Project="..\dir.props" />
+  <PropertyGroup>
+    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+    <ProjectGuid>{7FD51C62-1D6A-4DF5-9E70-E4D23CA3048C}</ProjectGuid>
+    <OutputType>Library</OutputType>
+    <RootNamespace>NuGet.MSBuildSdkResolver.UnitTests</RootNamespace>
+    <AssemblyName>NuGet.MSBuildSdkResolver.UnitTests</AssemblyName>
+    <IsTestProject>true</IsTestProject>
+  </PropertyGroup>
+  <!-- Default configurations to help VS understand the configurations -->
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' " />
+  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' " />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x64'" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x64'" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug|x86'" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release|x86'" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug-MONO|AnyCPU'" />
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release-MONO|AnyCPU'" />
+  <ItemGroup Condition="'$(NetCoreBuild)' != 'true'">
+    <Reference Include="$(CompilerToolsDir)\Microsoft.Build.Tasks.CodeAnalysis.dll">
+      <Name>Microsoft.Build.Tasks.CodeAnalysis</Name>
+    </Reference>
+    <Reference Include="System" />
+    <Reference Include="System.Xml" />
+  </ItemGroup>
+  <ItemGroup>
+    <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj">
+      <Project>{828566EE-6F6A-4EF4-98B0-513F7DF9C628}</Project>
+      <Name>Microsoft.Build.Utilities</Name>
+    </ProjectReference>
+    <ProjectReference Include="..\Build\Microsoft.Build.csproj">
+      <Project>{16CD7635-7CF4-4C62-A77B-CF87D0F09A58}</Project>
+      <Name>Microsoft.Build</Name>
+    </ProjectReference>
+    <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj">
+      <Project>{571F09DB-A81A-4444-945C-6F7B530054CD}</Project>
+      <Name>Microsoft.Build.Framework</Name>
+    </ProjectReference>
+    <ProjectReference Include="..\NuGetSdkResolver\NuGet.MSBuildSdkResolver.csproj">
+      <Project>{C7988833-3EF2-43F4-A170-34E8CCCB1320}</Project>
+      <Name>NuGet.MSBuildSdkResolver</Name>
+    </ProjectReference>
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="GlobalJsonReader_Tests.cs" />
+    <Compile Include="MockSdkLogger.cs" />
+    <Compile Include="MockSdkResolverContext.cs" />
+    <Compile Include="NuGetSdkLogger_Tests.cs" />
+    <Compile Include="NuGetSdkResolver_Tests.cs" />
+  </ItemGroup>
+  <ItemGroup>
+    <Compile Include="..\Shared\FxCopExclusions\Microsoft.Build.Shared.Suppressions.cs">
+      <Link>Shared\Microsoft.Build.Shared.Suppressions.cs</Link>
+    </Compile>
+    <Compile Include="..\Shared\UnitTests\MockLogger.cs">
+      <Link>Shared\MockLogger.cs</Link>
+    </Compile>
+    <Compile Include="..\Shared\UnitTests\ObjectModelHelpers.cs">
+      <Link>Shared\ObjectModelHelpers.cs</Link>
+    </Compile>
+    <Compile Include="..\Shared\UnitTests\TestEnvironment.cs">
+      <Link>Shared\TestEnvironment.cs</Link>
+    </Compile>
+  </ItemGroup>
+  <ItemGroup>
+    <AppDesigner Include="Properties\" />
+    <EmbeddedResource Include="*.resx">
+      <SubType>Designer</SubType>
+    </EmbeddedResource>
+    <None Include="..\Shared\UnitTests\App.config">
+      <Link>App.config</Link>
+      <SubType>Designer</SubType>
+    </None>
+    <None Include="project.json" />
+    <Service Include="{82A7F48D-3B50-4B1E-B82E-3ADA8210C358}" />
+  </ItemGroup>
+  <ItemGroup>
+    <Folder Include="Properties\" />
+  </ItemGroup>
+  <Import Project="..\dir.targets" />
+</Project>
\ No newline at end of file
diff --git a/src/NuGetSdkResolver.UnitTests/NuGetSdkLogger_Tests.cs b/src/NuGetSdkResolver.UnitTests/NuGetSdkLogger_Tests.cs
new file mode 100644
index 00000000000..5807bf65bab
--- /dev/null
+++ b/src/NuGetSdkResolver.UnitTests/NuGetSdkLogger_Tests.cs
@@ -0,0 +1,180 @@
+// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Framework;
+using NuGet.Common;
+using Shouldly;
+using System;
+using System.Collections.Generic;
+using Xunit;
+
+namespace NuGet.MSBuildSdkResolver.UnitTests
+{
+    /// <summary>
+    /// Tests for LazyFormattedEventArgs
+    /// </summary>
+    public class NuGetSdkLogger_Tests
+    {
+        [Fact]
+        public void LogDebugMapsToMessage()
+        {
+            const string expectedMessage = "F4E2857F8B6F4ADC8D9B727DDBEE769B";
+
+            VerifyLog(sdkLogger => sdkLogger.LogDebug(expectedMessage), expectedMessage, MessageImportance.Low, isWarning: false, isError: false);
+        }
+
+        [Fact]
+        public void LogErrorMapsToError()
+        {
+            const string expectedMessage = "FC168C5B9E9C4FC199974BE664F5D723";
+
+            VerifyLog(sdkLogger => sdkLogger.LogError(expectedMessage), expectedMessage, expectedMessageImportance: null, isWarning: false, isError: true);
+        }
+
+        [Fact]
+        public void LogInformationMapsToMessage()
+        {
+            const string expectedMessage = "67170559A4EC47FE88FCC3E8B68E3522";
+
+            VerifyLog(sdkLogger => sdkLogger.LogInformation(expectedMessage), expectedMessage, MessageImportance.Low, isWarning: false, isError: false);
+        }
+
+        [Fact]
+        public void LogInformationSummaryMapsToMessage()
+        {
+            const string expectedMessage = "EA9F5D816A0342E38A4A87DB955ABC33";
+
+            VerifyLog(sdkLogger => sdkLogger.LogInformationSummary(expectedMessage), expectedMessage, MessageImportance.Low, isWarning: false, isError: false);
+        }
+
+        [Theory]
+        [InlineData(LogLevel.Debug, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Information, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Minimal, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Verbose, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Error, null, false, true)]
+        [InlineData(LogLevel.Warning, null, true, false)]
+        [InlineData(999, null, false, false)]
+        public void LogLevelMapsToMessageWarningOrError(LogLevel logLevel, MessageImportance? expectedMessageImportance = null, bool isWarning = false, bool isError = false)
+        {
+            const string expectedMessage = "BE0F702B91714CED9AAE850CE1798430";
+
+            VerifyLog(sdkLogger => sdkLogger.Log(logLevel, expectedMessage), expectedMessage, expectedMessageImportance, isWarning, isError);
+        }
+
+        [Theory]
+        [InlineData(LogLevel.Debug, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Information, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Minimal, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Verbose, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Error, null, false, true)]
+        [InlineData(LogLevel.Warning, null, true, false)]
+        [InlineData(999, null, false, false)]
+        public void LogLevelMapsToMessageWarningOrErrorAsync(LogLevel logLevel, MessageImportance? expectedMessageImportance = null, bool isWarning = false, bool isError = false)
+        {
+            const string expectedMessage = "BE0F702B91714CED9AAE850CE1798430";
+
+            VerifyLog(async sdkLogger => await sdkLogger.LogAsync(logLevel, expectedMessage).ConfigureAwait(false), expectedMessage, expectedMessageImportance, isWarning, isError);
+        }
+
+        [Theory]
+        [InlineData(LogLevel.Debug, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Information, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Minimal, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Verbose, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Error, null, false, true)]
+        [InlineData(LogLevel.Warning, null, true, false)]
+        [InlineData(999, null, false, false)]
+        public void LogMessageMapsToMessageWarningOrError(LogLevel logLevel, MessageImportance? expectedMessageImportance = null, bool isWarning = false, bool isError = false)
+        {
+            const string expectedMessage = "B8F887DBCA4A4748824E9ED3CAC484A0";
+
+            ILogMessage logMessage = new LogMessage(logLevel, expectedMessage);
+
+            VerifyLog(sdkLogger => sdkLogger.Log(logMessage), expectedMessage, expectedMessageImportance, isWarning, isError);
+        }
+
+        [Theory]
+        [InlineData(LogLevel.Debug, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Information, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Minimal, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Verbose, MessageImportance.Low, false, false)]
+        [InlineData(LogLevel.Error, null, false, true)]
+        [InlineData(LogLevel.Warning, null, true, false)]
+        [InlineData(999, null, false, false)]
+        public void LogMessageMapsToMessageWarningOrErrorAsync(LogLevel logLevel, MessageImportance? expectedMessageImportance = null, bool isWarning = false, bool isError = false)
+        {
+            const string expectedMessage = "5022EC7B7A694D41BFF1A6ED973297A4";
+
+            ILogMessage logMessage = new LogMessage(logLevel, expectedMessage);
+
+            VerifyLog(async sdkLogger => await sdkLogger.LogAsync(logMessage).ConfigureAwait(false), expectedMessage, expectedMessageImportance, isWarning, isError);
+        }
+
+        [Fact]
+        public void LogMinimalSummaryMapsToMessage()
+        {
+            const string expectedMessage = "D6412F6087CE41C4803AD940E26E221B";
+
+            VerifyLog(sdkLogger => sdkLogger.LogMinimal(expectedMessage), expectedMessage, MessageImportance.Low, isWarning: false, isError: false);
+        }
+
+        [Fact]
+        public void LogVerboseMapsToMessage()
+        {
+            const string expectedMessage = "815F49653DB74CD6BD2B66201BB3BCA8";
+
+            VerifyLog(sdkLogger => sdkLogger.LogVerbose(expectedMessage), expectedMessage, MessageImportance.Low, isWarning: false, isError: false);
+        }
+
+        [Fact]
+        public void LogWarningMapsToWarning()
+        {
+            const string expectedMessage = "787607F4D1B141F898CCB432B5CB8CDE";
+
+            VerifyLog(sdkLogger => sdkLogger.LogWarning(expectedMessage), expectedMessage, expectedMessageImportance: null, isWarning: true, isError: false);
+        }
+
+        private void VerifyLog(Action<NuGetSdkLogger> action, string expectedMessage, MessageImportance? expectedMessageImportance, bool isWarning, bool isError)
+        {
+            MockSdkLogger mockLogger = new MockSdkLogger();
+
+            List<string> errors = new List<string>();
+            List<string> warnings = new List<string>();
+
+            NuGetSdkLogger sdkLogger = new NuGetSdkLogger(mockLogger, warnings, errors);
+
+            action(sdkLogger);
+
+            if (expectedMessageImportance.HasValue)
+            {
+                KeyValuePair<string, MessageImportance> item = mockLogger.LoggedMessages.ShouldHaveSingleItem();
+
+                item.Key.ShouldBe(expectedMessage);
+                item.Value.ShouldBe(expectedMessageImportance.Value);
+            }
+            else
+            {
+                mockLogger.LoggedMessages.ShouldBeEmpty();
+            }
+
+            if (isWarning)
+            {
+                warnings.ShouldHaveSingleItem().ShouldBe(expectedMessage);
+            }
+            else
+            {
+                warnings.ShouldBeEmpty();
+            }
+
+            if (isError)
+            {
+                errors.ShouldHaveSingleItem().ShouldBe(expectedMessage);
+            }
+            else
+            {
+                errors.ShouldBeEmpty();
+            }
+        }
+    }
+}
diff --git a/src/NuGetSdkResolver.UnitTests/NuGetSdkResolver_Tests.cs b/src/NuGetSdkResolver.UnitTests/NuGetSdkResolver_Tests.cs
new file mode 100644
index 00000000000..944ae7a7e28
--- /dev/null
+++ b/src/NuGetSdkResolver.UnitTests/NuGetSdkResolver_Tests.cs
@@ -0,0 +1,126 @@
+ï»¿// Copyright (c) Microsoft. All rights reserved.
+// Licensed under the MIT license. See LICENSE file in the project root for full license information.
+
+using Microsoft.Build.Engine.UnitTests;
+using NuGet.Versioning;
+using Shouldly;
+using System.Collections.Generic;
+using Xunit;
+
+using SdkResolverContextBase = Microsoft.Build.Framework.SdkResolverContext;
+
+namespace NuGet.MSBuildSdkResolver.UnitTests
+{
+    public class NuGetSdkResolver_Tests
+    {
+        [Fact]
+        public void TryGetNuGetVersionForSdkGetsVersionFromGlobalJson()
+        {
+            Dictionary<string, string> expectedVersions = new Dictionary<string, string>
+            {
+                {"foo", "5.11.77"},
+                {"bar", "2.0.0"}
+            };
+
+            using (TestEnvironment testEnvironment = TestEnvironment.Create())
+            {
+                TransientTestProjectWithFiles projectWithFiles = testEnvironment.CreateTestProjectWithFiles("", relativePathFromRootToProject: @"a\b\c");
+
+                GlobalJsonReader_Tests.WriteGlobalJson(projectWithFiles.TestRoot, expectedVersions);
+
+                MockSdkResolverContext context = new MockSdkResolverContext(projectWithFiles.ProjectFile);
+
+                VerifyTryGetNuGetVersionForSdk(
+                    version: null,
+                    expectedVersion: NuGetVersion.Parse(expectedVersions["foo"]),
+                    context: context);
+            }
+        }
+
+        [Fact]
+        public void TryGetNuGetVersionForSdkGetsVersionFromState()
+        {
+            MockSdkResolverContext context = new MockSdkResolverContext("foo.proj")
+            {
+                State = new Dictionary<string, string>
+                {
+                    {"foo", "1.2.3"}
+                }
+            };
+
+            VerifyTryGetNuGetVersionForSdk(
+                version: null,
+                expectedVersion: NuGetVersion.Parse("1.2.3"),
+                context: context);
+        }
+
+        [Fact]
+        public void TryGetNuGetVersionForSdkInvalidVersion()
+        {
+            VerifyTryGetNuGetVersionForSdk(
+                version: "abc",
+                expectedVersion: null);
+        }
+
+        [Fact]
+        public void TryGetNuGetVersionForSdkInvalidVersionInGlobalJson()
+        {
+            MockSdkResolverContext context = new MockSdkResolverContext("foo.proj")
+            {
+                State = new Dictionary<string, string>
+                {
+                    {"foo", "abc"}
+                }
+            };
+
+            VerifyTryGetNuGetVersionForSdk(
+                version: "abc",
+                expectedVersion: null,
+                context: context);
+        }
+
+        [Fact]
+        public void TryGetNuGetVersionForSdkSucceeds()
+        {
+            VerifyTryGetNuGetVersionForSdk(
+                version: "3.2.1",
+                expectedVersion: NuGetVersion.Parse("3.2.1"));
+        }
+
+        [Fact]
+        public void TryGetNuGetVersionNoVersionSpecified()
+        {
+            MockSdkResolverContext context = new MockSdkResolverContext("foo.proj")
+            {
+                State = new Dictionary<string, string>()
+            };
+
+            VerifyTryGetNuGetVersionForSdk(
+                version: null,
+                expectedVersion: null,
+                context: context);
+        }
+
+        private void VerifyTryGetNuGetVersionForSdk(string version, NuGetVersion expectedVersion, SdkResolverContextBase context = null)
+        {
+            object parsedVersion;
+
+            bool result = NuGetSdkResolver.TryGetNuGetVersionForSdk("foo", version, context, out parsedVersion);
+
+            if (expectedVersion != null)
+            {
+                result.ShouldBeTrue();
+
+                parsedVersion.ShouldNotBeNull();
+
+                parsedVersion.ShouldBe(expectedVersion);
+            }
+            else
+            {
+                result.ShouldBeFalse();
+
+                parsedVersion.ShouldBeNull();
+            }
+        }
+    }
+}
diff --git a/src/NuGetSdkResolver.UnitTests/project.json b/src/NuGetSdkResolver.UnitTests/project.json
new file mode 100644
index 00000000000..896af307eb7
--- /dev/null
+++ b/src/NuGetSdkResolver.UnitTests/project.json
@@ -0,0 +1,23 @@
+ï»¿{
+  "dependencies": {
+    "NuGet.Commands": "4.6.0-rtm-4822",
+    "NuGet.Protocol": "4.6.0-rtm-4822",
+    "Shouldly": "3.0.0-beta0003",
+    "xunit": "2.1.0"
+  },
+  "frameworks": {
+    "net46": {
+      "dependencies": {
+       "System.Runtime.InteropServices.RuntimeInformation": "4.3.0"
+      }
+    },
+    "netstandard1.5": {
+      "dependencies": {
+        "NETStandard.Library": "1.6.0",
+        "System.Collections.NonGeneric": "4.0.1",
+        "System.Xml.XmlDocument": "4.0.1"
+      },
+      "imports": [ "portable-net451+win81" ]
+    }
+  }
+}
diff --git a/src/NuGetSdkResolver/NuGet.MSBuildSdkResolver.csproj b/src/NuGetSdkResolver/NuGet.MSBuildSdkResolver.csproj
index f38c9fa4125..abdacc3c8e3 100644
--- a/src/NuGetSdkResolver/NuGet.MSBuildSdkResolver.csproj
+++ b/src/NuGetSdkResolver/NuGet.MSBuildSdkResolver.csproj
@@ -64,6 +64,9 @@
     <Compile Include="..\Shared\FileUtilities.cs">
       <Link>Shared\FileUtilities.cs</Link>
     </Compile>
+    <Compile Include="..\Shared\TempFileUtilities.cs">
+      <Link>Shared\TempFileUtilities.cs</Link>
+    </Compile>
     <Compile Include="..\Shared\FileUtilitiesRegex.cs">
       <Link>Shared\FileUtilitiesRegex.cs</Link>
     </Compile>
diff --git a/src/NuGetSdkResolver/Properties/AssemblyInfo.cs b/src/NuGetSdkResolver/Properties/AssemblyInfo.cs
index 7273fd2aeea..317c4a40474 100644
--- a/src/NuGetSdkResolver/Properties/AssemblyInfo.cs
+++ b/src/NuGetSdkResolver/Properties/AssemblyInfo.cs
@@ -7,6 +7,8 @@
 
 using System;
 using System.Reflection;
+using System.Runtime.CompilerServices;
+
 #if (LOCALIZED_BUILD)
 using System.Resources;
 #endif
@@ -34,3 +36,5 @@
 [assembly: AssemblyCompany("Microsoft Corporation")]
 [assembly: AssemblyProduct("MicrosoftÂ® Build ToolsÂ®")]
 [assembly: AssemblyCopyright("Â© Microsoft Corporation. All rights reserved.")]
+
+[assembly: InternalsVisibleTo("NuGet.MSBuildSdkResolver.UnitTests, PublicKey=002400000480000094000000060200000024000052534131000400000100010015c01ae1f50e8cc09ba9eac9147cf8fd9fce2cfe9f8dce4f7301c4132ca9fb50ce8cbf1df4dc18dd4d210e4345c744ecb3365ed327efdbc52603faa5e21daa11234c8c4a73e51f03bf192544581ebe107adee3a34928e39d04e524a9ce729d5090bfd7dad9d10c722c0def9ccc08ff0a03790e48bcd1f9b6c476063e1966a1c4")]
diff --git a/src/NuGetSdkResolver/project.json b/src/NuGetSdkResolver/project.json
index 16728884960..49aef9daa42 100644
--- a/src/NuGetSdkResolver/project.json
+++ b/src/NuGetSdkResolver/project.json
@@ -1,7 +1,7 @@
 ï»¿{
   "dependencies": {
-    "NuGet.Commands": "4.5.0",
-    "NuGet.Protocol": "4.5.0"
+      "NuGet.Commands": "4.6.0-rtm-4822",
+      "NuGet.Protocol": "4.6.0-rtm-4822"
   },
   "frameworks": {
     "net46": {
diff --git a/src/dirs.proj b/src/dirs.proj
index 39ec811590f..822e56dc418 100644
--- a/src/dirs.proj
+++ b/src/dirs.proj
@@ -21,6 +21,7 @@
     <Project Include="Build.OM.UnitTests\Microsoft.Build.Engine.OM.UnitTests.csproj" />
     <Project Include="UnitTests.Shared\Microsoft.Build.UnitTests.Shared.csproj" />
     <Project Include="NuGetSdkResolver\NuGet.MSBuildSdkResolver.csproj" />
+    <Project Include="NuGetSdkResolver.UnitTests\NuGet.MSBuildSdkResolver.UnitTests.csproj" />
   </ItemGroup>
 
   <Import Project="dir.targets" />
diff --git a/targets/DeployDependencies.proj b/targets/DeployDependencies.proj
index eacc18154a3..c6a18881554 100644
--- a/targets/DeployDependencies.proj
+++ b/targets/DeployDependencies.proj
@@ -27,20 +27,19 @@
   -->
   <Target Name="CopyNuGetTargets">
     <ItemGroup Condition="'$(NetCoreBuild)' != 'true'">
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.build.tasks\$(NuGetVersion)\lib\net45\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.build.tasks\$(NuGetVersion)\lib\net46\**\*.*" />
       <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.build.tasks\$(NuGetVersion)\runtimes\any\native\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.commands\$(NuGetVersion)\lib\net45\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.common\$(NuGetVersion)\lib\net45\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.configuration\$(NuGetVersion)\lib\net45\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.dependencyresolver.core\$(NuGetVersion)\lib\net45\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.frameworks\$(NuGetVersion)\lib\net45\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.librarymodel\$(NuGetVersion)\lib\net45\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.packaging\$(NuGetVersion)\lib\net45\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.packaging.core\$(NuGetVersion)\lib\net45\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.projectmodel\$(NuGetVersion)\lib\net45\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.protocol\$(NuGetVersion)\lib\net45\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.versioning\$(NuGetVersion)\lib\net45\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuspec.referencegenerator\$(NuGetVersion)\lib\net45\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.commands\$(NuGetVersion)\lib\net46\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.common\$(NuGetVersion)\lib\net46\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.configuration\$(NuGetVersion)\lib\net46\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.dependencyresolver.core\$(NuGetVersion)\lib\net46\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.frameworks\$(NuGetVersion)\lib\net46\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.librarymodel\$(NuGetVersion)\lib\net46\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.packaging\$(NuGetVersion)\lib\net46\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.packaging.core\$(NuGetVersion)\lib\net46\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.projectmodel\$(NuGetVersion)\lib\net46\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.protocol\$(NuGetVersion)\lib\net46\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.versioning\$(NuGetVersion)\lib\net46\**\*.*" />
       <NuGetCommonExtensions Include="$(ProjectDir)packages\Newtonsoft.Json\9.0.1\lib\net45\**\*.*" />
     </ItemGroup>
     <ItemGroup Condition="'$(NetCoreBuild)' == 'true'">
@@ -56,8 +55,7 @@
       <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.packaging.core\$(NuGetVersion)\lib\netstandard1.3\**\*.*" />
       <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.projectmodel\$(NuGetVersion)\lib\netstandard1.3\**\*.*" />
       <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.protocol\$(NuGetVersion)\lib\netstandard1.3\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.versioning\$(NuGetVersion)\lib\netstandard1.0\**\*.*" />
-      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuspec.referencegenerator\$(NuGetVersion)\lib\netstandard1.3\**\*.*" />
+      <NuGetCommonExtensions Include="$(ProjectDir)packages\nuget.versioning\$(NuGetVersion)\lib\netstandard1.3\**\*.*" />
       <NuGetCommonExtensions Include="$(ProjectDir)packages\Newtonsoft.Json\9.0.1\lib\netstandard1.0\**\*.*" />
     </ItemGroup>
 
