diff --git a/src/Directory.BeforeCommon.targets b/src/Directory.BeforeCommon.targets
index 8e63a94f93d..3741fdc7d47 100644
--- a/src/Directory.BeforeCommon.targets
+++ b/src/Directory.BeforeCommon.targets
@@ -42,7 +42,6 @@
     <DefineConstants Condition="'$(MonoBuild)' != 'true' and '$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_ENCODING_DEFAULT</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_ENVIRONMENT_SYSTEMDIRECTORY</DefineConstants>
     <DefineConstants Condition="'$(MonoBuild)' != 'true'">$(DefineConstants);FEATURE_FILE_TRACKER</DefineConstants>
-    <DefineConstants>$(DefineConstants);FEATURE_FUSION_COMPAREASSEMBLYIDENTITY</DefineConstants>
     <DefineConstants Condition="'$(MachineIndependentBuild)' != 'true'">$(DefineConstants);FEATURE_GAC</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_GET_COMMANDLINE</DefineConstants>
     <DefineConstants>$(DefineConstants);FEATURE_HANDLE_SAFEWAITHANDLE</DefineConstants>
diff --git a/src/Tasks/NativeMethods.cs b/src/Tasks/NativeMethods.cs
index 55ecb95ecc6..7ea1f7abb3d 100644
--- a/src/Tasks/NativeMethods.cs
+++ b/src/Tasks/NativeMethods.cs
@@ -1052,87 +1052,20 @@ internal static extern int CreateAssemblyNameObject(
         internal static extern int GetCachePath(AssemblyCacheFlags cacheFlags, StringBuilder cachePath, ref int pcchPath);
 #endif
 
-        /*------------------------------------------------------------------------------
-        CompareAssemblyIdentity
-        The Fusion API to compare two assembly identities to determine whether or not they are equivalent is now available. This new API is exported from mscorwks.dll, which you can access via mscoree's GetRealProcAddress. The function prototype is defined in fusion.h as follows:
-
-        STDAPI CompareAssemblyIdentity(LPCWSTR pwzAssemblyIdentity1,
-                                    BOOL fUnified1,
-                                    LPCWSTR pwzAssemblyIdentity2,
-                                    BOOL fUnified2,
-                                    BOOL *pfEquivalent,
-                                    AssemblyComparisonResult *pResult);
-
-typedef enum _tagAssemblyComparisonResult 
-{
-    ACR_Unknown,                    // Unknown 
-    ACR_EquivalentFullMatch,        // all fields match
-    ACR_EquivalentWeakNamed,        // match based on weak-name, version numbers ignored
-    ACR_EquivalentFXUnified,        // match based on FX-unification of version numbers
-    ACR_EquivalentUnified,          // match based on legacy-unification of version numbers
-    ACR_NonEquivalentVersion,       // all fields match except version field
-    ACR_NonEquivalent,              // no match
-
-    ACR_EquivalentPartialMatch,
-    ACR_EquivalentPartialWeakNamed,  
-    ACR_EquivalentPartialUnified,
-    ACR_EquivalentPartialFXUnified,
-    ACR_NonEquivalentPartialVersion     
-} AssemblyComparisonResult;
-
-        Parameters:
-            [in] LPCWSTR pwzAssemblyIdentity1 : Textual identity of the first assembly to be compared
-            [in] BOOL fUnified1               : Flag to indicate user-specified unification for pwzAssemblyIdentity1 (see below)
-            [in] LPCWSTR pwzAssemblyIdentity2 : Textual identity of the second assembly to be compared
-            [in] BOOL fUnified2               : Flag to inidcate user-specified unification for pwzAssemblyIdentity2 (see below)
-            [out] BOOL *pfEquivalent          : Boolean indicating whether the identities are equivalent
-            [out] AssemblyComparisonResult *pResult : Contains detailed information about the comparison result
-
-        This API will check whether or not pwzAssemblyIdentity1 and pwzAssemblyIdentity2 are equivalent. Both of these identities must be full-specified (name, version, pkt, culture). The pfEquivalent parameter will be set to TRUE if one (or more) of the following conditions is true:
-
-        a) The assembly identities are equivalent. For strongly-named assemblies this means full match on (name, version, pkt, culture); for simply-named assemblies this means a match on (name, culture)
-
-        b) The assemblies being compared are FX assemblies (even if the version numbers are not the same, these will compare as equivalent by way of unification)
-
-        c) The assemblies are not FX assemblies but are equivalent because fUnified1 and/or fUnified2 were set.
-
-        The fUnified flag is used to indicate that all versions up to the version number of the strongly-named assembly are considered equivalent to itself. For example, if pwzAssemblyIdentity1 is "foo, version=5.0.0.0, culture=neutral, publicKeyToken=...." and fUnified1==TRUE, then this means to treat all versions of the assembly in the range 0.0.0.0-5.0.0.0 to be equivalent to "foo, version=5.0.0.0, culture=neutral, publicKeyToken=...". If pwzAssemblyIdentity2 is the same as pwzAssemblyIdentity1, except has a lower version number (e.g. version range 0.0.0.0-5.0.0.0), then the API will return that the identities are equivalent. If pwzAssemblyIdentity2 is the same as pwzAssemblyIdentity1, but has a greater version number than 5.0.0.0 then the two identities will only be equivalent if fUnified2 is set.
-
-        The AssemblyComparisonResult gives you information about why the identities compared as equal or not equal. The description of the meaning of each ACR_* return value is described in the declaration above.
-        ------------------------------------------------------------------------------*/
-        [DllImport("fusion.dll", CharSet = CharSet.Unicode, EntryPoint = "CompareAssemblyIdentity")]
-        internal static extern int CompareAssemblyIdentityWindows
-            (
-                string pwzAssemblyIdentity1,
-                [MarshalAs(UnmanagedType.Bool)] bool fUnified1,
-                string pwzAssemblyIdentity2,
-                [MarshalAs(UnmanagedType.Bool)] bool fUnified2,
-                [MarshalAs(UnmanagedType.Bool)] out bool pfEquivalent,
-                out int pResult
-            );
-
-        // TODO: Verify correctness of this implementation and
-        // extend to more cases.
+        //------------------------------------------------------------------------------
+        // AreAssembliesEquivalent
+        //------------------------------------------------------------------------------
+        // TODO: Verify correctness of this implementation and extend to more cases.
+        // Should be consistent with CompareAssemblyIdentity from Fusion API
+        /// <summary>
+        /// Compares two assembly identities to determine whether or not they are equivalent.
+        /// </summary>
         internal static bool AreAssembliesEquivalent(
             string assemblyIdentity1,
             bool fUnified1,
             string assemblyIdentity2,
             bool fUnified2)
         {
-#if FEATURE_FUSION_COMPAREASSEMBLYIDENTITY
-            if (NativeMethodsShared.IsWindows)
-            {
-                CompareAssemblyIdentityWindows(
-                    assemblyIdentity1,
-                    fUnified1,
-                    assemblyIdentity2,
-                    fUnified2,
-                    out bool pfEquivalent,
-                    out _);
-                return pfEquivalent;
-            }
-#endif
-
             AssemblyName an1 = new AssemblyName(assemblyIdentity1);
             AssemblyName an2 = new AssemblyName(assemblyIdentity2);
 
