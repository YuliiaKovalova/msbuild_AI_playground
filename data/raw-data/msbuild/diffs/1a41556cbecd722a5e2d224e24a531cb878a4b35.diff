diff --git a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
index 2d0f453a127..2d0aaec17b3 100644
--- a/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
+++ b/src/Tasks.UnitTests/AssemblyDependency/Miscellaneous.cs
@@ -3686,6 +3686,37 @@ public void ConflictGeneratesMessageReferencingAssemblyName()
             warningMessage.ShouldContain(ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("ResolveAssemblyReference.FourSpaceIndent", ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword("ResolveAssemblyReference.ReferenceDependsOn", "D, Version=1.0.0.0, CulTUre=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa", Path.Combine(s_myLibraries_V1Path, "D.dll"))));
         }
 
+        [Fact]
+        public void ConflictOutputsExtraInformationOnDemand()
+        {
+            ResolveAssemblyReference t = new ResolveAssemblyReference();
+
+            MockEngine e = new MockEngine(_output);
+            t.BuildEngine = e;
+
+            t.Assemblies = new ITaskItem[]
+            {
+                new TaskItem("B"),
+                new TaskItem("D, Version=1.0.0.0, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa")
+            };
+
+            t.SearchPaths = new string[]
+            {
+                s_myLibrariesRootPath, s_myLibraries_V2Path, s_myLibraries_V1Path
+            };
+
+            t.TargetFrameworkDirectories = new string[] { s_myVersion20Path };
+            t.OutputUnresolvedAssemblyConflicts = true;
+
+            Execute(t);
+
+            ITaskItem[] conflicts = t.UnresolvedAssemblyConflicts;
+            conflicts.Length.ShouldBe(1);
+            conflicts[0].ItemSpec.ShouldBe("D");
+            conflicts[0].GetMetadata("victorVersionNumber").ShouldBe("1.0.0.0");
+            conflicts[0].GetMetadata("victimVersionNumber").ShouldBe("2.0.0.0");
+        }
+
         /// <summary>
         /// Consider this dependency chain:
         ///
diff --git a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
index bd605d9373f..e2831a3293e 100644
--- a/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
+++ b/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs
@@ -1009,21 +1009,36 @@ quiet at the engine level.
                             // Log the reference which lost the conflict and the dependencies and source items which caused it.
                             LogReferenceDependenciesAndSourceItemsToStringBuilder(fusionName, conflictCandidate, logDependencies.AppendLine());
 
+                            string toOutput;
                             if (logWarning)
                             {
                                 // This warning is logged regardless of AutoUnify since it means a conflict existed where the reference	
                                 // chosen was not the conflict victor in a version comparison. In other words, the victor was older.
-                                Log.LogWarningWithCodeFromResources("ResolveAssemblyReference.FoundConflicts", assemblyName.Name, StringBuilderCache.GetStringAndRelease(logConflict));
+                                toOutput = StringBuilderCache.GetStringAndRelease(logConflict);
+                                Log.LogWarningWithCodeFromResources("ResolveAssemblyReference.FoundConflicts", assemblyName.Name, toOutput);
                             }
                             else
                             {
-                                Log.LogMessage(ChooseReferenceLoggingImportance(conflictCandidate), StringBuilderCache.GetStringAndRelease(logConflict));
-                                Log.LogMessage(MessageImportance.Low, StringBuilderCache.GetStringAndRelease(logDependencies));
+                                toOutput = StringBuilderCache.GetStringAndRelease(logConflict);
+                                string extra = StringBuilderCache.GetStringAndRelease(logDependencies);
+                                Log.LogMessage(ChooseReferenceLoggingImportance(conflictCandidate), toOutput);
+                                Log.LogMessage(MessageImportance.Low, extra);
+
+                                // This does an extra allocation, so only do it when necessary.
+                                if (OutputUnresolvedAssemblyConflicts)
+                                {
+                                    toOutput += '\n' + extra;
+                                }
                             }
 
                             if (OutputUnresolvedAssemblyConflicts)
                             {
-                                _unresolvedConflicts.Add(new TaskItem(assemblyName.Name));
+                                _unresolvedConflicts.Add(new TaskItem(assemblyName.Name, new Dictionary<string, string>()
+                                {
+                                    { "logMessage", toOutput },
+                                    {"victorVersionNumber", victor.ReferenceVersion.ToString() },
+                                    {"victimVersionNumber", conflictCandidate.ReferenceVersion.ToString() }
+                                }));
                             }
                         }
                     }
diff --git a/src/Tasks/Microsoft.Common.CurrentVersion.targets b/src/Tasks/Microsoft.Common.CurrentVersion.targets
index c7fbc474b24..3f73528bfe4 100644
--- a/src/Tasks/Microsoft.Common.CurrentVersion.targets
+++ b/src/Tasks/Microsoft.Common.CurrentVersion.targets
@@ -2235,7 +2235,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.
       <Output TaskParameter="FilesWritten" ItemName="FileWrites"/>
       <Output TaskParameter="DependsOnSystemRuntime" PropertyName="DependsOnSystemRuntime"/>
       <Output TaskParameter="DependsOnNETStandard" PropertyName="_DependsOnNETStandard"/>
-      <Output TaskParameter="UnresolvedAssemblyConflicts" ItemName="UnresolvedAssemblyConflicts"/>
+      <Output TaskParameter="UnresolvedAssemblyConflicts" ItemName="ResolveAssemblyReferenceUnresolvedAssemblyConflicts"/>
     </ResolveAssemblyReference>
   </Target>
 
