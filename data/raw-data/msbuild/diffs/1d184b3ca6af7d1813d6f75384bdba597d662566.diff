diff --git a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
index 3b3f2c9f985..5b0265c8ae2 100644
--- a/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
+++ b/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs
@@ -423,8 +423,8 @@ private bool TryResolveSdkUsingSpecifiedResolvers(
                 }
                 else if (loggingContext.LoggingService.MinimumRequiredMessageImportance >= MessageImportance.Low)
                 {
-                    string resultWarnings = result.Warnings != null && result.Warnings.Any() ? string.Join(Environment.NewLine, result.Warnings) : "null";
-                    string resultErrors = result.Errors != null && result.Errors.Any() ? string.Join(Environment.NewLine, result.Errors) : "null";
+                    string resultWarnings = result.Warnings?.Any() == true ? string.Join(Environment.NewLine, result.Warnings) : "null";
+                    string resultErrors = result.Errors?.Any() == true ? string.Join(Environment.NewLine, result.Errors) : "null";
 
                     loggingContext.LogComment(MessageImportance.Low, "SDKResolverAttempt", sdkResolver.Name, sdk.ToString(), resultWarnings, resultErrors);
                 }
diff --git a/src/Build/Definition/Project.cs b/src/Build/Definition/Project.cs
index 4729418f906..fe8a64d2939 100644
--- a/src/Build/Definition/Project.cs
+++ b/src/Build/Definition/Project.cs
@@ -3441,7 +3441,7 @@ public bool IsSuitableExistingItemXml(ProjectItemElement candidateExistingItemXm
                     return false;
                 }
 
-                if ((metadata != null && metadata.Any()) || candidateExistingItemXml.Count > 0)
+                if ((metadata?.Any() == true) || candidateExistingItemXml.Count > 0)
                 {
                     // Don't try to make sure the metadata are the same.
                     return false;
@@ -3846,7 +3846,7 @@ private ProjectElement GetAnySuitableExistingItemXml(string itemType, string une
                     return null;
                 }
 
-                if (metadata != null && metadata.Any())
+                if (metadata?.Any() == true)
                 {
                     // Don't bother trying to match up metadata
                     return null;
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index f5cfb5bdbb9..5326d4d5a6c 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -1847,8 +1847,8 @@ static string EvaluateProperty(string value, IElementLocation location,
                     }
                 }
 
-                if ((sdkResult.PropertiesToAdd != null && sdkResult.PropertiesToAdd.Any()) ||
-                    (sdkResult.ItemsToAdd != null && sdkResult.ItemsToAdd.Any()))
+                if ((sdkResult.PropertiesToAdd?.Any() == true) ||
+                    (sdkResult.ItemsToAdd?.Any() == true))
                 {
                     projectList ??= new List<ProjectRootElement>();
 
@@ -1917,7 +1917,7 @@ ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)
                 ProjectRootElement project = ProjectRootElement.Create();
                 project.FullPath = projectPath;
 
-                if (sdkResult.PropertiesToAdd != null && sdkResult.PropertiesToAdd.Any())
+                if (sdkResult.PropertiesToAdd?.Any() == true)
                 {
                     var propertyGroup = project.AddPropertyGroup();
                     foreach (var propertyNameAndValue in sdkResult.PropertiesToAdd)
@@ -1926,7 +1926,7 @@ ProjectRootElement InnerCreate(string _, ProjectRootElementCacheBase __)
                     }
                 }
 
-                if (sdkResult.ItemsToAdd != null && sdkResult.ItemsToAdd.Any())
+                if (sdkResult.ItemsToAdd?.Any() == true)
                 {
                     var itemGroup = project.AddItemGroup();
                     foreach (var item in sdkResult.ItemsToAdd)
diff --git a/src/Build/Utilities/EngineFileUtilities.cs b/src/Build/Utilities/EngineFileUtilities.cs
index 136c44cbc0d..9fc62d7b964 100644
--- a/src/Build/Utilities/EngineFileUtilities.cs
+++ b/src/Build/Utilities/EngineFileUtilities.cs
@@ -192,7 +192,7 @@ private static string[] GetFileList(
 
             var filespecHasNoWildCards = !FilespecHasWildcards(filespecEscaped);
             var filespecMatchesLazyWildcard = FilespecMatchesLazyWildcard(filespecEscaped, forceEvaluateWildCards);
-            var excludeSpecsAreEmpty = excludeSpecsEscaped == null || !excludeSpecsEscaped.Any();
+            var excludeSpecsAreEmpty = excludeSpecsEscaped?.Any() != true;
 
             // Return original value if:
             //      FileSpec matches lazyloading regex or
diff --git a/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs b/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs
index 64fb2c8eee2..531ba4b0706 100644
--- a/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs
+++ b/src/Deprecated/Engine/Engine/ToolsetConfigurationReader.cs
@@ -8,15 +8,15 @@
 using System;
 using System.Collections.Generic;
 using System.Configuration;
-using Microsoft.Build.BuildEngine.Shared;
 using error = Microsoft.Build.BuildEngine.Shared.ErrorUtilities;
+using Microsoft.Build.BuildEngine.Shared;
 
 namespace Microsoft.Build.BuildEngine
 {
     internal class ToolsetConfigurationReader : ToolsetReader
     {
         private ToolsetConfigurationSection configurationSection = null;
-        private readonly ReadApplicationConfiguration readApplicationConfiguration = null;
+        private ReadApplicationConfiguration readApplicationConfiguration = null;
         private bool configurationReadAttempted = false;
 
         /// <summary>
@@ -248,7 +248,7 @@ internal sealed class ToolsetElementCollection : ConfigurationElementCollection
         /// toolset definition before, since the .NET configuration classes
         /// won't perform this check without respect for case.
         /// </summary>
-        private readonly Dictionary<string, string> previouslySeenToolsVersions = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
+        private Dictionary<string, string> previouslySeenToolsVersions = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
 
         /// <summary>
         /// Creates a new element of the collection
