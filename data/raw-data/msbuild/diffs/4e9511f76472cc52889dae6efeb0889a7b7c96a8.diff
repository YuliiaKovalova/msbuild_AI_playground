diff --git a/src/Build.UnitTests/TelemetryTests.cs b/src/Build.UnitTests/TelemetryTests.cs
index 5ca8f2a03e3..01a3308a345 100644
--- a/src/Build.UnitTests/TelemetryTests.cs
+++ b/src/Build.UnitTests/TelemetryTests.cs
@@ -49,7 +49,7 @@ public void Shutdown()
         public void WorkerNodeTelemetryCollection_BasicTarget()
         {
             WorkerNodeTelemetryData? workerNodeTelemetryData = null;
-            InternalTelemeteryConsumingLogger.TestOnly_InternalTelemetryAggregted += dt => workerNodeTelemetryData = dt;
+            InternalTelemetryConsumingLogger.TestOnly_InternalTelemetryAggregted += dt => workerNodeTelemetryData = dt;
 
             var testProject = """
                                       <Project>
@@ -87,7 +87,7 @@ public void WorkerNodeTelemetryCollection_BasicTarget()
         public void WorkerNodeTelemetryCollection_CustomTargetsAndTasks()
         {
             WorkerNodeTelemetryData? workerNodeTelemetryData = null;
-            InternalTelemeteryConsumingLogger.TestOnly_InternalTelemetryAggregted += dt => workerNodeTelemetryData = dt;
+            InternalTelemetryConsumingLogger.TestOnly_InternalTelemetryAggregted += dt => workerNodeTelemetryData = dt;
 
             var testProject = """
                                       <Project>
diff --git a/src/Build/BackEnd/BuildManager/BuildManager.cs b/src/Build/BackEnd/BuildManager/BuildManager.cs
index 11c61497bf1..77ae2ff1439 100644
--- a/src/Build/BackEnd/BuildManager/BuildManager.cs
+++ b/src/Build/BackEnd/BuildManager/BuildManager.cs
@@ -2961,7 +2961,7 @@ private ILoggingService CreateLoggingService(
                     verbosity: LoggerVerbosity.Quiet);
 
                 ILogger internalTelemetryLogger =
-                    new InternalTelemeteryConsumingLogger();
+                    new InternalTelemetryConsumingLogger();
 
                 ForwardingLoggerRecord[] forwardingLogger = { new ForwardingLoggerRecord(internalTelemetryLogger, forwardingLoggerDescription) };
 
diff --git a/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs b/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
index 5d650d4c7d0..1bb984a1675 100644
--- a/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
+++ b/src/Build/BackEnd/Components/BuildComponentFactoryCollection.cs
@@ -80,7 +80,7 @@ public void RegisterDefaultFactories()
             _componentEntriesByType[BuildComponentType.RequestBuilder] = new BuildComponentEntry(BuildComponentType.RequestBuilder, RequestBuilder.CreateComponent, CreationPattern.CreateAlways);
             // Following two conditionally registers real or no-op implementation based on BuildParameters
             _componentEntriesByType[BuildComponentType.BuildCheckManagerProvider] = new BuildComponentEntry(BuildComponentType.BuildCheckManagerProvider, BuildCheckManagerProvider.CreateComponent, CreationPattern.Singleton);
-            _componentEntriesByType[BuildComponentType.TelemetryCollector] = new BuildComponentEntry(BuildComponentType.TelemetryCollector, TelemetryCollectorProvider.CreateComponent, CreationPattern.Singleton);
+            _componentEntriesByType[BuildComponentType.TelemetryForwarder] = new BuildComponentEntry(BuildComponentType.TelemetryForwarder, TelemetryForwarderProvider.CreateComponent, CreationPattern.Singleton);
             _componentEntriesByType[BuildComponentType.TargetBuilder] = new BuildComponentEntry(BuildComponentType.TargetBuilder, TargetBuilder.CreateComponent, CreationPattern.CreateAlways);
             _componentEntriesByType[BuildComponentType.TaskBuilder] = new BuildComponentEntry(BuildComponentType.TaskBuilder, TaskBuilder.CreateComponent, CreationPattern.CreateAlways);
             _componentEntriesByType[BuildComponentType.RegisteredTaskObjectCache] = new BuildComponentEntry(BuildComponentType.RegisteredTaskObjectCache, RegisteredTaskObjectCache.CreateComponent, CreationPattern.Singleton);
diff --git a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
index abbe6441335..f193321d481 100644
--- a/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
+++ b/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs
@@ -288,7 +288,7 @@ public void CleanupForBuild()
                     var buildCheckManager = buildCheckProvider!.Instance;
                     buildCheckManager.FinalizeProcessing(_nodeLoggingContext);
                     // Flush and send the final telemetry data if they are being collected
-                    ITelemetryCollector telemetryCollector = (_componentHost.GetComponent(BuildComponentType.TelemetryCollector) as TelemetryCollectorProvider)!.Instance;
+                    ITelemetryForwarder telemetryCollector = (_componentHost.GetComponent(BuildComponentType.TelemetryForwarder) as TelemetryForwarderProvider)!.Instance;
                     telemetryCollector.FinalizeProcessing(_nodeLoggingContext);
                     // Clears the instance so that next call (on node reuse) to 'GetComponent' leads to reinitialization.
                     buildCheckProvider.ShutdownComponent();
diff --git a/src/Build/BackEnd/Components/IBuildComponentHost.cs b/src/Build/BackEnd/Components/IBuildComponentHost.cs
index 568976587ee..5c46a8ef807 100644
--- a/src/Build/BackEnd/Components/IBuildComponentHost.cs
+++ b/src/Build/BackEnd/Components/IBuildComponentHost.cs
@@ -149,9 +149,9 @@ internal enum BuildComponentType
         BuildCheckManagerProvider,
 
         /// <summary>
-        /// The component which collects telemetry data.
+        /// The component which collects telemetry data in worker node and forwards it to the main node.
         /// </summary>
-        TelemetryCollector,
+        TelemetryForwarder,
     }
 
     /// <summary>
diff --git a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
index 28d13e37127..7a558a6b53f 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs
@@ -1262,8 +1262,8 @@ BuildResult CopyTargetResultsFromProxyTargetsToRealTargets(BuildResult resultFro
 
         private void UpdateStatisticsPostBuild()
         {
-            ITelemetryCollector collector =
-                ((TelemetryCollectorProvider)_componentHost.GetComponent(BuildComponentType.TelemetryCollector))
+            ITelemetryForwarder collector =
+                ((TelemetryForwarderProvider)_componentHost.GetComponent(BuildComponentType.TelemetryForwarder))
                 .Instance;
 
             if (!collector.IsTelemetryCollected)
diff --git a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
index 5a97e87f857..3a406115fce 100644
--- a/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
+++ b/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs
@@ -479,7 +479,7 @@ private async Task<WorkUnitResult> ExecuteBucket(TaskHost taskHost, ItemBucket b
 
                             // Flag the completion of the task.
                             taskLoggingContext.LogTaskBatchFinished(_projectFullPath, taskResult.ResultCode == WorkUnitResultCode.Success || taskResult.ResultCode == WorkUnitResultCode.Skipped);
-                            taskFactoryWrapper?.Statistics?.ExecutionStoped();
+                            taskFactoryWrapper?.Statistics?.ExecutionStopped();
 
                             if (taskResult.ResultCode == WorkUnitResultCode.Failed && _continueOnError == ContinueOnError.WarnAndContinue)
                             {
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 431587336d2..b4d6304f3fe 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -1195,7 +1195,7 @@ public void ExecutionStarted()
                     ExecutedCount++;
                 }
 
-                public void ExecutionStoped()
+                public void ExecutionStopped()
                 {
                     _executedSw.Stop();
                     TotalMemoryConsumption += GC.GetTotalMemory(false) - _memoryConsumptionOnStart;
@@ -1255,6 +1255,10 @@ private RegisteredTaskRecord()
             {
             }
 
+            /// <summary>
+            /// Evaluates whether the current task is assumed to be defined within the user code - as opposed
+            ///  to being a built-in task, or task authored by Microsoft brought to build via sdk, common targets or nuget.
+            /// </summary>
             public bool GetIsCustom()
             {
                 return
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index e20bb64a52e..de26bedd4ae 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -175,7 +175,7 @@
     <Compile Include="FileAccess\RequestedAccess.cs" />
     <Compile Include="Instance\IPropertyElementWithLocation.cs" />
     <Compile Include="Logging\BuildEventArgsExtensions.cs" />
-    <Compile Include="Telemetry\ITelemetryCollector.cs" />
+    <Compile Include="Telemetry\ITelemetryForwarder.cs" />
     <Compile Include="Telemetry\TelemetryCollectorProvider.cs" />
     <Compile Include="Utilities\ReaderWriterLockSlimExtensions.cs" />
     <Compile Include="BackEnd\Node\ConsoleOutput.cs" />
diff --git a/src/Build/Telemetry/ITelemetryCollector.cs b/src/Build/Telemetry/ITelemetryForwarder.cs
similarity index 86%
rename from src/Build/Telemetry/ITelemetryCollector.cs
rename to src/Build/Telemetry/ITelemetryForwarder.cs
index dfd8cc62bfc..51559be3531 100644
--- a/src/Build/Telemetry/ITelemetryCollector.cs
+++ b/src/Build/Telemetry/ITelemetryForwarder.cs
@@ -10,11 +10,11 @@ namespace Microsoft.Build.Telemetry;
 /// A build component responsible for accumulating telemetry data from worker node and then sending it to main node
 /// at the end of the build.
 /// </summary>
-internal interface ITelemetryCollector
+internal interface ITelemetryForwarder
 {
     bool IsTelemetryCollected { get; }
 
-    void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumed, bool isCustom,
+    void AddTask(string name, TimeSpan cumulativeExecutionTime, short executionsCount, long totalMemoryConsumed, bool isCustom,
         bool isFromNugetCache);
 
     /// <summary>
diff --git a/src/Build/Telemetry/TelemetryCollectorProvider.cs b/src/Build/Telemetry/TelemetryForwarderProvider.cs
similarity index 79%
rename from src/Build/Telemetry/TelemetryCollectorProvider.cs
rename to src/Build/Telemetry/TelemetryForwarderProvider.cs
index 09af8c8cedf..6309c96b588 100644
--- a/src/Build/Telemetry/TelemetryCollectorProvider.cs
+++ b/src/Build/Telemetry/TelemetryForwarderProvider.cs
@@ -13,16 +13,16 @@ namespace Microsoft.Build.Telemetry;
 /// A build component responsible for accumulating telemetry data from worker node and then sending it to main node
 /// at the end of the build.
 /// </summary>
-internal class TelemetryCollectorProvider : IBuildComponent
+internal class TelemetryForwarderProvider : IBuildComponent
 {
-    private ITelemetryCollector? _instance;
+    private ITelemetryForwarder? _instance;
 
-    public ITelemetryCollector Instance => _instance ?? new NullTelemetryCollector();
+    public ITelemetryForwarder Instance => _instance ?? new NullTelemetryForwarder();
 
     internal static IBuildComponent CreateComponent(BuildComponentType type)
     {
-        ErrorUtilities.VerifyThrow(type == BuildComponentType.TelemetryCollector, "Cannot create components of type {0}", type);
-        return new TelemetryCollectorProvider();
+        ErrorUtilities.VerifyThrow(type == BuildComponentType.TelemetryForwarder, "Cannot create components of type {0}", type);
+        return new TelemetryForwarderProvider();
     }
 
     public void InitializeComponent(IBuildComponentHost host)
@@ -33,11 +33,11 @@ public void InitializeComponent(IBuildComponentHost host)
         {
             if (host!.BuildParameters.IsTelemetryEnabled)
             {
-                _instance = new TelemetryCollector();
+                _instance = new TelemetryForwarder();
             }
             else
             {
-                _instance = new NullTelemetryCollector();
+                _instance = new NullTelemetryForwarder();
             }
         }
     }
@@ -48,17 +48,17 @@ public void ShutdownComponent()
         _instance = null;
     }
 
-    public class TelemetryCollector : ITelemetryCollector
+    public class TelemetryForwarder : ITelemetryForwarder
     {
         private readonly WorkerNodeTelemetryData _workerNodeTelemetryData = new();
 
         // in future, this might be per event type
         public bool IsTelemetryCollected => true;
 
-        public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumed, bool isCustom, bool isFromNugetCache)
+        public void AddTask(string name, TimeSpan cumulativeExecutionTime, short executionsCount, long totalMemoryConsumed, bool isCustom, bool isFromNugetCache)
         {
             name = GetName(name, isCustom, false, isFromNugetCache);
-            _workerNodeTelemetryData.AddTask(name, cumulativeExectionTime, executionsCount, totalMemoryConsumed);
+            _workerNodeTelemetryData.AddTask(name, cumulativeExecutionTime, executionsCount, totalMemoryConsumed);
         }
 
         public void AddTarget(string name, bool wasExecuted, bool isCustom, bool isMetaproj, bool isFromNugetCache)
@@ -95,11 +95,11 @@ public void FinalizeProcessing(LoggingContext loggingContext)
         }
     }
 
-    public class NullTelemetryCollector : ITelemetryCollector
+    public class NullTelemetryForwarder : ITelemetryForwarder
     {
         public bool IsTelemetryCollected => false;
 
-        public void AddTask(string name, TimeSpan cumulativeExectionTime, short executionsCount, long totalMemoryConsumed, bool isCustom, bool isFromNugetCache) { }
+        public void AddTask(string name, TimeSpan cumulativeExecutionTime, short executionsCount, long totalMemoryConsumed, bool isCustom, bool isFromNugetCache) { }
         public void AddTarget(string name, bool wasExecuted, bool isCustom, bool isMetaproj, bool isFromNugetCache) { }
 
         public void FinalizeProcessing(LoggingContext loggingContext) { }
diff --git a/src/Framework/Telemetry/InternalTelemeteryConsumingLogger.cs b/src/Framework/Telemetry/InternalTelemetryConsumingLogger.cs
similarity index 98%
rename from src/Framework/Telemetry/InternalTelemeteryConsumingLogger.cs
rename to src/Framework/Telemetry/InternalTelemetryConsumingLogger.cs
index 2a624708b25..723b51ef0a2 100644
--- a/src/Framework/Telemetry/InternalTelemeteryConsumingLogger.cs
+++ b/src/Framework/Telemetry/InternalTelemetryConsumingLogger.cs
@@ -6,7 +6,7 @@
 
 namespace Microsoft.Build.Framework;
 
-internal sealed class InternalTelemeteryConsumingLogger : ILogger
+internal sealed class InternalTelemetryConsumingLogger : ILogger
 {
     public LoggerVerbosity Verbosity { get; set; }
     public string? Parameters { get; set; }
diff --git a/src/Framework/Telemetry/InternalTelemeteryForwardingLogger.cs b/src/Framework/Telemetry/InternalTelemetryForwardingLogger.cs
similarity index 96%
rename from src/Framework/Telemetry/InternalTelemeteryForwardingLogger.cs
rename to src/Framework/Telemetry/InternalTelemetryForwardingLogger.cs
index b6cd0a21c9b..a47e0d75453 100644
--- a/src/Framework/Telemetry/InternalTelemeteryForwardingLogger.cs
+++ b/src/Framework/Telemetry/InternalTelemetryForwardingLogger.cs
@@ -4,7 +4,7 @@
 namespace Microsoft.Build.Framework;
 
 /// <remarks>
-/// Ensure that events filtering is in sync with <see cref="InternalTelemeteryConsumingLogger"/>.
+/// Ensure that events filtering is in sync with <see cref="InternalTelemetryConsumingLogger"/>.
 /// </remarks>
 internal class InternalTelemeteryForwardingLogger : IForwardingLogger
 {
