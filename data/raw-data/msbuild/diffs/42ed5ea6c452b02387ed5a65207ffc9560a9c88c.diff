diff --git a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
index 34b425d47e7..94d882161b4 100644
--- a/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
+++ b/src/Tasks.UnitTests/CodeTaskFactoryTests.cs
@@ -13,6 +13,7 @@
 
 namespace Microsoft.Build.UnitTests
 {
+#if FEATURE_CODETASKFACTORY
 
     using System.CodeDom.Compiler;
     using System.Globalization;
@@ -1379,4 +1380,37 @@ public void EmbedsGeneratedFileInBinlogWhenFailsToCompile()
                 $"Binlog's embedded files didn't have the expected '{filePath}'.");
         }
     }
+#else
+    public sealed class CodeTaskFactoryTests
+    {
+        [Fact]
+        public void CodeTaskFactoryNotSupported()
+        {
+            string projectFileContents = @"
+                    <Project ToolsVersion='msbuilddefaulttoolsversion'>
+                        <UsingTask TaskName=`CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory` TaskFactory=`CodeTaskFactory` AssemblyFile=`$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll` >
+                         <ParameterGroup>
+                             <Text/>
+                          </ParameterGroup>
+                            <Task>
+                                <Code>
+                                     Log.LogMessage(MessageImportance.High, Text);
+                                </Code>
+                            </Task>
+                        </UsingTask>
+                        <Target Name=`Build`>
+                            <CustomTaskFromCodeFactory_BuildTaskSimpleCodeFactory Text=`Hello, World!` />
+                        </Target>
+                    </Project>";
+
+            MockLogger mockLogger = Helpers.BuildProjectWithNewOMExpectFailure(projectFileContents, allowTaskCrash: false);
+
+            BuildErrorEventArgs error = mockLogger.Errors.FirstOrDefault();
+
+            Assert.NotNull(error);
+            Assert.Equal("MSB4801", error.Code);
+            Assert.Contains("CodeTaskFactory", error.Message);
+        }
+    }
+#endif
 }
diff --git a/src/Tasks/CodeTaskFactory.cs b/src/Tasks/CodeTaskFactory.cs
index a3fe4ec2e4e..885de9fdac8 100644
--- a/src/Tasks/CodeTaskFactory.cs
+++ b/src/Tasks/CodeTaskFactory.cs
@@ -11,6 +11,7 @@
 
 namespace Microsoft.Build.Tasks
 {
+#if FEATURE_CODETASKFACTORY
     using System.CodeDom;
     using System.CodeDom.Compiler;
     using System.Collections.Concurrent;
@@ -1016,4 +1017,46 @@ int IComparable<FullTaskSpecification>.CompareTo(FullTaskSpecification other)
             }
         }
     }
+#else
+    /// <summary>
+    /// A task factory which can take code dom supported languages and create a task out of it
+    /// </summary>
+    /// <remarks>CodeDom is not supported for .NET Core so this code task factory simply logs an error that it isn't supported.
+    /// If we don't compile this class, then the user will get an error that the class doesn't exist which is a bad experience.</remarks>
+    [Obsolete("The CodeTaskFactory is not supported on .NET Core.  This class is included so that users receive run-time errors and should not be used for any other purpose.", error: true)]
+    public sealed class CodeTaskFactory : ITaskFactory
+    {
+        public string FactoryName => "Code Task Factory";
+
+        public Type TaskType { get; } = null;
+
+        public bool Initialize(string taskName, IDictionary<string, TaskPropertyInfo> parameterGroup, string taskBody, IBuildEngine taskFactoryLoggingHost)
+        {
+            TaskLoggingHelper log = new TaskLoggingHelper(taskFactoryLoggingHost, taskName)
+            {
+                TaskResources = AssemblyResources.PrimaryResources,
+                HelpKeywordPrefix = "MSBuild."
+            };
+
+            log.LogErrorWithCodeFromResources("TaskFactoryNotSupportedFailure", nameof(CodeTaskFactory));
+
+            return false;
+        }
+
+        public TaskPropertyInfo[] GetTaskParameters()
+        {
+            throw new NotSupportedException();
+        }
+
+        public ITask CreateTask(IBuildEngine taskFactoryLoggingHost)
+        {
+            throw new NotSupportedException();
+        }
+
+        public void CleanupTask(ITask task)
+        {
+            throw new NotSupportedException();
+        }
+    }
+#endif
 }
