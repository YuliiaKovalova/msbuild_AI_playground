diff --git a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
index 68e8ddd0607..b895a36c9be 100644
--- a/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
+++ b/src/Build/BuildCheck/API/BuildAnalyzerConfiguration.cs
@@ -54,13 +54,13 @@ public class BuildAnalyzerConfiguration
     /// </summary>
     /// <param name="configDictionary">The configuration dictionary containing the settings for the build analyzer. The configuration's keys are expected to be in lower case or the EqualityComparer to ignore case.</param>
     /// <returns>A new instance of <see cref="BuildAnalyzerConfiguration"/> with the specified settings.</returns>
-    public static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary)
+    internal static BuildAnalyzerConfiguration Create(Dictionary<string, string>? configDictionary)
     {
         return new()
         {
-            EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope).ToLower(), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,
-            Severity = TryExtractValue(nameof(Severity).ToLower(), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null,
-            IsEnabled = TryExtractValue(nameof(IsEnabled).ToLower(), configDictionary, out bool isEnabled) ? isEnabled : null,
+            EvaluationAnalysisScope = TryExtractValue(nameof(EvaluationAnalysisScope), configDictionary, out EvaluationAnalysisScope evaluationAnalysisScope) ? evaluationAnalysisScope : null,
+            Severity = TryExtractValue(nameof(Severity), configDictionary, out BuildAnalyzerResultSeverity severity) ? severity : null,
+            IsEnabled = TryExtractValue(nameof(IsEnabled), configDictionary, out bool isEnabled) ? isEnabled : null,
         };
     }
 
@@ -68,7 +68,7 @@ private static bool TryExtractValue<T>(string key, Dictionary<string, string>? c
     {
         value = default;
 
-        if (config == null || !config.TryGetValue(key, out var stringValue) || stringValue is null)
+        if (config == null || !config.TryGetValue(key.ToLower(), out var stringValue) || stringValue is null)
         {
             return false;
         }
@@ -87,7 +87,7 @@ private static bool TryExtractValue(string key, Dictionary<string, string>? conf
     {
         value = default;
 
-        if (config == null || !config.TryGetValue(key, out var stringValue) || stringValue is null)
+        if (config == null || !config.TryGetValue(key.ToLower(), out var stringValue) || stringValue is null)
         {
             return false;
         }
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationErrorScope.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationErrorScope.cs
index 79ed49edb46..720ae3c9570 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationErrorScope.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationErrorScope.cs
@@ -1,11 +1,17 @@
 ï»¿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-namespace Microsoft.Build.BuildCheck.Infrastructure
+namespace Microsoft.Build.BuildCheck.Infrastructure;
+
+internal enum BuildCheckConfigurationErrorScope
 {
-    internal enum BuildCheckConfigurationErrorScope
-    {
-        SingleRule,
-        EditorConfigParser
-    }
+    /// <summary>
+    /// Error related to the single rule.
+    /// </summary>
+    SingleRule,
+
+    /// <summary>
+    /// Error related to the parsing of .editorconfig file. 
+    /// </summary>
+    EditorConfigParser
 }
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index d56f0c7834e..a0e4fde6e5f 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -3,15 +3,9 @@
 
 using System;
 using System.Collections.Generic;
-using System.Diagnostics;
-using System.IO;
 using System.Linq;
-using System.Text;
-using System.Text.Json.Serialization;
-using System.Text.Json;
-using Microsoft.Build.Experimental.BuildCheck;
-using System.Configuration;
 using Microsoft.Build.BuildCheck.Infrastructure.EditorConfig;
+using Microsoft.Build.Experimental.BuildCheck;
 
 namespace Microsoft.Build.BuildCheck.Infrastructure;
 
@@ -21,16 +15,13 @@ internal sealed class ConfigurationProvider
 
     private const string BuildCheck_ConfigurationKey = "build_check";
 
-    // TODO: This module should have a mechanism for removing unneeded configurations
-    //  (disabled rules and analyzers that need to run in different node)
-
     /// <summary>
-    /// The dictionary used for storing the BuildAnalyzerConfiguration per projectfile and rule id. The key is equal to {projectFullPath}-{ruleId}
+    /// The dictionary used for storing the BuildAnalyzerConfiguration per projectfile and rule id. The key is equal to {projectFullPath}-{ruleId}.
     /// </summary>
     private readonly Dictionary<string, BuildAnalyzerConfiguration> _buildAnalyzerConfiguration = new Dictionary<string, BuildAnalyzerConfiguration>(StringComparer.InvariantCultureIgnoreCase);
 
     /// <summary>
-    /// The dictionary used for storing the key-value pairs retrieved from the .editorconfigs for specific projectfile. The key is equal to projectFullPath
+    /// The dictionary used for storing the key-value pairs retrieved from the .editorconfigs for specific projectfile. The key is equal to projectFullPath.
     /// </summary>
     private readonly Dictionary<string, Dictionary<string, string>> _editorConfigData = new Dictionary<string, Dictionary<string, string>>(StringComparer.InvariantCultureIgnoreCase);
 
@@ -180,7 +171,7 @@ private Dictionary<string, string> FilterDictionaryByKeys(string keyFilter, Dict
                 {
                     newKey = kv.Key.Substring(keyFilter.Length);
                 }
-                
+
                 filteredConfig[newKey] = kv.Value;
             }
         }
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
index c399c83f2f4..da1ede9ec39 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
@@ -39,6 +39,7 @@ internal List<EditorConfigFile> DiscoverEditorConfigFiles(string filePath)
             var editorConfigDataFromFilesList = new List<EditorConfigFile>();
 
             var directoryOfTheProject = Path.GetDirectoryName(filePath);
+            // The method will look for the file in parent directory if not found in current until found or the directory is root. 
             var editorConfigFilePath = FileUtilities.GetPathOfFileAbove(EditorconfigFile, directoryOfTheProject);
 
             while (editorConfigFilePath != string.Empty)
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/README.md b/src/Build/BuildCheck/Infrastructure/EditorConfig/README.md
index 14d1e75be59..a725757b1ec 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/README.md
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/README.md
@@ -44,8 +44,9 @@ The implementation differs depending on category:
  - Infra related config: Merges the configuration retrieved from configuration module with default values (respecting the specified configs in editorconfig) 
  - Custom configuration: Remove all infra related keys from dictionary
 
-Two levels of cache introduced: 
+Three levels of cache introduced: 
 - When retrieving and parsing the editor config -> Parsed results are saved into dictionary: editorconfigPath = ParsedEditorConfig
+- When retrieving and merging the editor config data for project -> Parsed and merged results are saved into dictionary: projectFilePath = MargedData of ParsedEditorConfig
 - When retrieving Infra related config: ruleId-projectPath = BuildConfigInstance
 
 Usage examples (API)
