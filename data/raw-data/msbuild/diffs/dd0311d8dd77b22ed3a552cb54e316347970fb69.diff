diff --git a/src/Build/BackEnd/Components/Communications/NodeManager.cs b/src/Build/BackEnd/Components/Communications/NodeManager.cs
index 31ebde5a1d6..61d4a487f45 100644
--- a/src/Build/BackEnd/Components/Communications/NodeManager.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeManager.cs
@@ -4,6 +4,7 @@
 using System;
 using System.Collections.Generic;
 using System.Diagnostics;
+using System.IO.MemoryMappedFiles;
 using System.Threading;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Shared;
@@ -36,6 +37,8 @@ internal class NodeManager : INodeManager
         /// </summary>
         private readonly Dictionary<int, INodeProvider> _nodeIdToProvider;
 
+        private readonly List<MemoryMappedFile> _memoryMappedFiles = new List<MemoryMappedFile>();
+
         /// <summary>
         /// The packet factory used to translate and route packets
         /// </summary>
diff --git a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
index 2e8ebf51c88..453f4c8a367 100644
--- a/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
+++ b/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs
@@ -25,6 +25,12 @@
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
 
+using Task = System.Threading.Tasks.Task;
+using Microsoft.Build.Framework;
+using Microsoft.Build.BackEnd.Logging;
+using System.IO.MemoryMappedFiles;
+using System.Net.Sockets;
+
 #nullable disable
 
 namespace Microsoft.Build.BackEnd
@@ -35,10 +41,10 @@ namespace Microsoft.Build.BackEnd
     /// </summary>
     internal abstract class NodeProviderOutOfProcBase
     {
-        /// <summary>
+        /// xxx <summary>
         /// The maximum number of bytes to write
-        /// </summary>
-        private const int MaxPacketWriteSize = 1048576;
+        /// xxx </summary>
+        // private const int MaxPacketWriteSize = 1048576;
 
         /// <summary>
         /// The number of times to retry creating an out-of-proc node.
@@ -629,27 +635,64 @@ public NodeContext(int nodeId, Process process,
             /// </summary>
             public int NodeId => _nodeId;
 
+            private MemoryMappedFile _mappedFile;
+            private int _mappedFileIdx;
+            private int _mappedFileLength = 10000000;
+
             public async void StartDrainingQueue()
             {
+
+                _mappedFile = MemoryMappedFile.CreateOrOpen(String.Format("D:/bld/MSBuild_side_channel{0}", _nodeId), _mappedFileLength, MemoryMappedFileAccess.ReadWrite);
+                
+
                 while (await _packetChannel.Reader.WaitToReadAsync())
                 {
                     while (_packetChannel.Reader.TryRead(out var packet))
                     {
-                        // NodeContext context = (NodeContext)this;
+                        if (_mappedFileIdx + _writeBufferMemoryStream.Length > _mappedFileLength)
+                        {
+                            _mappedFileIdx = 0;
+                        }
+                        var accessor = _mappedFile.CreateViewStream(_mappedFileIdx, _mappedFileLength - _mappedFileIdx);
+
                         MemoryStream writeStream = this._writeBufferMemoryStream;
                         writeStream.SetLength(0);
-                        ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(writeStream);
                         try
                         {
-                            writeStream.WriteByte((byte)packet.Type);
+                            writeStream.WriteByte((byte)NodePacketType.MemoryMappedFilePacket);
                             // Pad for the packet length
-                            WriteInt32(writeStream, 0);
+
+                            // Pipe bookkeeping
+                            // writeStream.WriteByte((byte)packet.Type);
+                            WriteInt32(writeStream, NodeId);
+                            WriteInt32(writeStream, _mappedFileIdx);
+
+
+                            // Writing the packet to the memory mapped file as if it was the original pipe
+
+                            byte[] x = { (byte)packet.Type };
+                            accessor.Write(x, 0, 1);
+                            accessor.Position = 5;
+                            ITranslator writeTranslator = BinaryTranslator.GetWriteTranslator(accessor);
+
                             packet.Translate(writeTranslator);
-                            int writeStreamLength = (int)writeStream.Position;
+                            var packetSize = accessor.Position;
+                            accessor.Position = 1;
+                            WriteInt32(accessor, (int)packetSize);
+                            accessor.Dispose();
+
+
+
+                            // int writeStreamLength = (int)writeStream.Position;
+                            // WriteInt32(writeStream, (int)packetSize);
+                            _mappedFileIdx += (int)packetSize;
+
                             // Now plug in the real packet length
-                            writeStream.Position = 1;
-                            WriteInt32(writeStream, writeStreamLength - 5);
+                            // writeStream.Position = 1;
+                            // WriteInt32(writeStream, writeStreamLength - 5);
                             byte[] writeStreamBuffer = writeStream.GetBuffer();
+                            await _serverToClientStream.WriteAsync(writeStreamBuffer, 0, 9, CancellationToken.None).ConfigureAwait(true);
+                            /*
                             for (int i = 0; i < writeStreamLength; i += MaxPacketWriteSize)
                             {
                                 int lengthToWrite = Math.Min(writeStreamLength - i, MaxPacketWriteSize);
@@ -657,6 +700,7 @@ public async void StartDrainingQueue()
                                 await _serverToClientStream.WriteAsync(writeStreamBuffer, i, lengthToWrite, CancellationToken.None);
 #pragma warning restore CA1835 // Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
                             }
+                            */
                             if (IsExitPacket(packet))
                             {
                                 _exitPacketState = ExitPacketState.ExitPacketSent;
@@ -781,6 +825,14 @@ private static void WriteInt32(MemoryStream stream, int value)
                 stream.WriteByte((byte)(value >> 24));
             }
 
+            private static void WriteInt32(Stream stream, int value)
+            {
+                stream.WriteByte((byte)value);
+                stream.WriteByte((byte)(value >> 8));
+                stream.WriteByte((byte)(value >> 16));
+                stream.WriteByte((byte)(value >> 24));
+            }
+
             /// <summary>
             /// Closes the node's context, disconnecting it from the node.
             /// </summary>
@@ -803,15 +855,7 @@ public async Task WaitForExitAsync(ILoggingService loggingService)
                 {
                     // Wait up to 100ms until all remaining packets are sent.
                     // We don't need to wait long, just long enough for the Task to start running on the ThreadPool.
-#if NET
-                    await _packetWriteDrainTask.WaitAsync(TimeSpan.FromMilliseconds(100)).ConfigureAwait(ConfigureAwaitOptions.SuppressThrowing);
-#else
-                    using (var cts = new CancellationTokenSource(100))
-                    {
-                        await Task.WhenAny(_packetWriteDrainTask, Task.Delay(100, cts.Token));
-                        cts.Cancel();
-                    }
-#endif
+
                 }
 
                 if (_exitPacketState == ExitPacketState.ExitPacketSent)
@@ -913,15 +957,24 @@ private void HeaderReadComplete(IAsyncResult result)
                     return;
                 }
 
-                int packetLength = BinaryPrimitives.ReadInt32LittleEndian(new Span<byte>(_headerByte, 1, 4));
-                MSBuildEventSource.Log.PacketReadSize(packetLength);
+                if ((NodePacketType)_headerByte[0] == NodePacketType.MemoryMappedFilePacket)
+                {
+                    byte[] packetData = _readBufferMemoryStream.GetBuffer();
+                    _clientToServerStream.BeginRead(packetData, 0, 4, PickupBodyFromSideChannel, new Tuple<byte[], int>(packetData, 4));
+                }
+                else
+                {
+                    int packetLength = BinaryPrimitives.ReadInt32LittleEndian(new Span<byte>(_headerByte, 1, 4));
+                    MSBuildEventSource.Log.PacketReadSize(packetLength);
+
+                    // Ensures the buffer is at least this length.
+                    // It avoids reallocations if the buffer is already large enough.
+                    _readBufferMemoryStream.SetLength(packetLength);
+                    byte[] packetData = _readBufferMemoryStream.GetBuffer();
 
-                // Ensures the buffer is at least this length.
-                // It avoids reallocations if the buffer is already large enough.
-                _readBufferMemoryStream.SetLength(packetLength);
-                byte[] packetData = _readBufferMemoryStream.GetBuffer();
 
-                _clientToServerStream.BeginRead(packetData, 0, packetLength, BodyReadComplete, new Tuple<byte[], int>(packetData, packetLength));
+                    _clientToServerStream.BeginRead(packetData, 0, packetLength, BodyReadComplete, new Tuple<byte[], int>(packetData, packetLength));
+                }
             }
 #endif
 
@@ -959,6 +1012,81 @@ private bool ReadAndRoutePacket(NodePacketType packetType, byte[] packetData, in
                 return true;
             }
 
+            private MemoryMappedFile _mappedFileRead
+            {
+                get
+                {
+                    if (_mappedFileRead == null)
+                    {
+                        _mappedFileRead = MemoryMappedFile.CreateOrOpen(String.Format("D:/bld/MSBuild_side_channel_other{0}", _nodeId), _mappedFileLength, MemoryMappedFileAccess.ReadWrite);
+                    }
+                    return _mappedFileRead;
+                }
+                set { }
+            }
+            private int _mappedFileReadIdx = 0;
+
+         
+
+            private void PickupBodyFromSideChannel(IAsyncResult result)
+            {
+                NodePacketType packetType = (NodePacketType)_headerByte[1];
+                // this should be long enough for the node ID
+                int nodeId = _headerByte[2];
+                nodeId += (int)_headerByte[3] << 8;
+                nodeId += (int)_headerByte[4] << 16;
+
+                var state = (Tuple<byte[], int>)result.AsyncState;
+                byte[] packetData = state.Item1;
+                int packetLength = state.Item2;
+                int bytesRead;
+
+
+                try
+                {
+                    try
+                    {
+                        bytesRead = _clientToServerStream.EndRead(result);
+                    }
+
+                    // Workaround for CLR stress bug; it sporadically calls us twice on the same async
+                    // result, and EndRead will throw on the second one. Pretend the second one never happened.
+                    catch (ArgumentException)
+                    {
+                        CommunicationsUtilities.Trace(_nodeId, "Hit CLR bug #825607: called back twice on same async result; ignoring");
+                        return;
+                    }
+
+                    if (!ProcessBodyBytesRead(bytesRead, packetLength, packetType))
+                    {
+                        return;
+                    }
+                }
+                catch (IOException e)
+                {
+                    CommunicationsUtilities.Trace(_nodeId, "EXCEPTION in BodyReadComplete (Reading): {0}", e);
+                    _packetFactory.RoutePacket(_nodeId, new NodeShutdown(NodeShutdownReason.ConnectionFailed));
+                    Close();
+                    return;
+                }
+
+                // Read and route the packet.
+                if (!ReadAndRoutePacket(packetType, packetData, packetLength))
+                {
+                    return;
+                }
+
+                if (packetType != NodePacketType.NodeShutdown)
+                {
+                    // Read the next packet.
+                    BeginAsyncPacketRead();
+                }
+                else
+                {
+                    Close();
+                }
+            }
+
 #if FEATURE_APM
             /// <summary>
             /// Method called when the body of a packet has been read.
diff --git a/src/Build/BackEnd/Node/NodeConfiguration.cs b/src/Build/BackEnd/Node/NodeConfiguration.cs
index cd57d5b74df..b751f5b8ed7 100644
--- a/src/Build/BackEnd/Node/NodeConfiguration.cs
+++ b/src/Build/BackEnd/Node/NodeConfiguration.cs
@@ -5,7 +5,7 @@
 using System;
 #endif
 using System.Diagnostics;
-
+using System.IO.MemoryMappedFiles;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Logging;
 #nullable disable
@@ -22,6 +22,7 @@ internal class NodeConfiguration : INodePacket
         /// </summary>
         private int _nodeId;
 
+        public MemoryMappedFile _sideChannel;
         /// <summary>
         /// The system parameters which were defined on the host.
         /// </summary>
diff --git a/src/Framework/BinaryTranslator.cs b/src/Framework/BinaryTranslator.cs
index 762292169eb..137bfa8d2c7 100644
--- a/src/Framework/BinaryTranslator.cs
+++ b/src/Framework/BinaryTranslator.cs
@@ -50,6 +50,11 @@ internal static ITranslator GetWriteTranslator(Stream stream)
             return new BinaryWriteTranslator(stream);
         }
 
+        internal static ITranslator GetWriteTranslator(UnmanagedMemoryStream stream)
+        {
+            return new BinaryWriteTranslator(stream);
+        }
+
         /// <summary>
         /// Implementation of ITranslator for reading from a stream.
         /// </summary>
diff --git a/src/Shared/AssemblyLoadInfo.cs b/src/Shared/AssemblyLoadInfo.cs
index be467ff2a20..ca467a482e8 100644
--- a/src/Shared/AssemblyLoadInfo.cs
+++ b/src/Shared/AssemblyLoadInfo.cs
@@ -27,7 +27,7 @@ internal static AssemblyLoadInfo Create(string assemblyName, string assemblyFile
             ErrorUtilities.VerifyThrow((!string.IsNullOrEmpty(assemblyName)) || (!string.IsNullOrEmpty(assemblyFile)),
                 "We must have either the assembly name or the assembly file/path.");
             ErrorUtilities.VerifyThrow((assemblyName == null) || (assemblyFile == null),
-                "We must not have both the assembly name and the assembly file/path.");
+                String.Format("We must not have both the assembly name and the assembly file/path. {0}, {1}", assemblyName, assemblyFile));
 
             if (assemblyName != null)
             {
diff --git a/src/Shared/INodePacket.cs b/src/Shared/INodePacket.cs
index 42b6a8d6ab6..efe245c4ad2 100644
--- a/src/Shared/INodePacket.cs
+++ b/src/Shared/INodePacket.cs
@@ -200,6 +200,11 @@ internal enum NodePacketType : byte
         /// </summary>
         ProcessReport,
 
+        /// <summary>
+        /// Message sent via a MMF
+        /// </summary>
+        MemoryMappedFilePacket,
+
         /// <summary>
         /// Command in form of MSBuild command line for server node - MSBuild Server.
         /// Keep this enum value constant intact as this is part of contract with dotnet CLI
diff --git a/src/Shared/NodeEndpointOutOfProcBase.cs b/src/Shared/NodeEndpointOutOfProcBase.cs
index fbaeb4dbde2..dc9c11dc56a 100644
--- a/src/Shared/NodeEndpointOutOfProcBase.cs
+++ b/src/Shared/NodeEndpointOutOfProcBase.cs
@@ -8,6 +8,9 @@
 #else
 using System.Collections.Concurrent;
 #endif
+using System.IO;
+using System.IO.Pipes;
+using System.Diagnostics;
 using System.Threading;
 using Microsoft.Build.Internal;
 using Microsoft.Build.Shared;
@@ -16,6 +19,15 @@
 
 #if FEATURE_SECURITY_PERMISSIONS || FEATURE_PIPE_SECURITY
 using System.Security.AccessControl;
+using System.Diagnostics;
+#if NET472_OR_GREATER
+using System.IO.MemoryMappedFiles;
+using System.Collections.Generic;
+
+#endif
+
+
+
 #endif
 #if FEATURE_PIPE_SECURITY && FEATURE_NAMED_PIPE_SECURITY_CONSTRUCTOR
 using System.Security.Principal;
@@ -511,6 +523,25 @@ private void PacketPumpProc()
                 // We don't really care if Disconnect somehow fails, but it gives us a chance to do the right thing.
             }
         }
+#if NET472_OR_GREATER
+        private Dictionary<int, MemoryMappedFile> _sideChannels = new Dictionary<int, MemoryMappedFile>();
+
+        private MemoryMappedFile getOrOpenFile(int nodeId)
+        {
+            if (_sideChannels.TryGetValue(nodeId, out MemoryMappedFile MMF))
+            {
+                return MMF;
+            }
+            else
+            {
+                MMF = MemoryMappedFile.OpenExisting(String.Format("D:/bld/MSBuild_side_channel{0}", nodeId));
+                _sideChannels[nodeId] = MMF;
+                return MMF;
+            }
+        }
+
+
+#endif
 
         private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream localWritePipe,
             ConcurrentQueue<INodePacket> localPacketQueue, AutoResetEvent localPacketAvailable, AutoResetEvent localTerminatePacketPump)
@@ -597,21 +628,65 @@ private void RunReadLoop(BufferedReadStream localReadPipe, NamedPipeServerStream
                                 break;
                             }
 
-                            NodePacketType packetType = (NodePacketType)headerByte[0];
-
-                            try
+                            NodePacketType packetType = (NodePacketType)Enum.ToObject(typeof(NodePacketType), headerByte[0]);
+#if NET472_OR_GREATER
+                            if (packetType == NodePacketType.MemoryMappedFilePacket)
                             {
-                                _packetFactory.DeserializeAndRoutePacket(0, packetType, BinaryTranslator.GetReadTranslator(localReadPipe, _sharedReadBuffer));
+                                /*
+                                var readTranslator = BinaryTranslator.GetReadTranslator(localReadPipe, _sharedReadBuffer);
+
+                                var realPacketType = (NodePacketType)readTranslator.Reader.ReadByte();
+
+
+                                var nodeId = readTranslator.Reader.ReadInt32();
+                                var offset = readTranslator.Reader.ReadInt32();
+                                var length = readTranslator.Reader.ReadInt32();
+                                */
+                                
+
+                                var nodeId = 0;
+                                nodeId += (int)headerByte[1];
+                                nodeId += ((int)headerByte[2]) << 8;
+                                nodeId += ((int)headerByte[3]) << 16;
+                                nodeId += ((int)headerByte[4]) << 24;
+
+                                var offset = localReadPipe.ReadByte();
+                                offset += localReadPipe.ReadByte() << 8;
+                                offset += localReadPipe.ReadByte() << 16;
+                                offset += localReadPipe.ReadByte() << 24;
+                                // Debugger.Launch();
+
+                                // Debugger.Launch();
+                                var accessor = getOrOpenFile(nodeId).CreateViewStream(offset, 5);
+                                var realPacketType = (NodePacketType)accessor.ReadByte();
+                                var length = accessor.ReadByte();
+                                length += accessor.ReadByte() << 8;
+                                length += accessor.ReadByte() << 16;
+                                length += accessor.ReadByte() << 24;
+                                accessor = getOrOpenFile(nodeId).CreateViewStream(offset + 5, length - 5);
+
+                                _packetFactory.DeserializeAndRoutePacket(0, realPacketType, BinaryTranslator.GetReadTranslator(accessor, _sharedReadBuffer));
+                                accessor.Dispose();
                             }
-                            catch (Exception e)
+                            else
                             {
-                                // Error while deserializing or handling packet.  Abort.
-                                CommunicationsUtilities.Trace("Exception while deserializing packet {0}: {1}", packetType, e);
-                                ExceptionHandling.DumpExceptionToFile(e);
-                                ChangeLinkStatus(LinkStatus.Failed);
-                                exitLoop = true;
-                                break;
+#endif
+                                try
+                                {
+                                    _packetFactory.DeserializeAndRoutePacket(0, packetType, BinaryTranslator.GetReadTranslator(localReadPipe, _sharedReadBuffer));
+                                }
+                                catch (Exception e)
+                                {
+                                    // Error while deserializing or handling packet.  Abort.
+                                    CommunicationsUtilities.Trace("Exception while deserializing packet {0}: {1}", packetType, e);
+                                    ExceptionHandling.DumpExceptionToFile(e);
+                                    ChangeLinkStatus(LinkStatus.Failed);
+                                    exitLoop = true;
+                                    break;
+                                }
+#if NET472_OR_GREATER
                             }
+#endif
 
 #if NET451_OR_GREATER
                             readTask = localReadPipe.ReadAsync(headerByte, 0, headerByte.Length, CancellationToken.None);
