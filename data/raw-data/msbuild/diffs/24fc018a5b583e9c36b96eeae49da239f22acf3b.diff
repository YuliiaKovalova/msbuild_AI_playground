diff --git a/src/MSBuild/LiveLogger/LiveLogger.cs b/src/MSBuild/LiveLogger/LiveLogger.cs
index 11675e109c0..3502c179f0b 100644
--- a/src/MSBuild/LiveLogger/LiveLogger.cs
+++ b/src/MSBuild/LiveLogger/LiveLogger.cs
@@ -164,17 +164,17 @@ public void Initialize(IEventSource eventSource, int nodeCount)
     /// <inheritdoc/>
     public void Initialize(IEventSource eventSource)
     {
-        eventSource.BuildStarted += new BuildStartedEventHandler(BuildStarted);
-        eventSource.BuildFinished += new BuildFinishedEventHandler(BuildFinished);
-        eventSource.ProjectStarted += new ProjectStartedEventHandler(ProjectStarted);
-        eventSource.ProjectFinished += new ProjectFinishedEventHandler(ProjectFinished);
-        eventSource.TargetStarted += new TargetStartedEventHandler(TargetStarted);
-        eventSource.TargetFinished += new TargetFinishedEventHandler(TargetFinished);
-        eventSource.TaskStarted += new TaskStartedEventHandler(TaskStarted);
-
-        eventSource.MessageRaised += new BuildMessageEventHandler(MessageRaised);
-        eventSource.WarningRaised += new BuildWarningEventHandler(WarningRaised);
-        eventSource.ErrorRaised += new BuildErrorEventHandler(ErrorRaised);
+        eventSource.BuildStarted += BuildStarted;
+        eventSource.BuildFinished += BuildFinished;
+        eventSource.ProjectStarted += ProjectStarted;
+        eventSource.ProjectFinished += ProjectFinished;
+        eventSource.TargetStarted += TargetStarted;
+        eventSource.TargetFinished += TargetFinished;
+        eventSource.TaskStarted += TaskStarted;
+
+        eventSource.MessageRaised += MessageRaised;
+        eventSource.WarningRaised += WarningRaised;
+        eventSource.ErrorRaised += ErrorRaised;
     }
 
     /// <summary>
@@ -263,7 +263,6 @@ private void ProjectStarted(object sender, ProjectStartedEventArgs e)
         {
             _restoreContext = c;
             Terminal.WriteLine("Restoring");
-            return;
         }
     }
 
@@ -352,7 +351,7 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
 
                     if (e.ProjectFile is not null)
                     {
-                        string projectFile = Path.GetFileName(e.ProjectFile) ?? e.ProjectFile;
+                        string projectFile = Path.GetFileName(e.ProjectFile);
                         Terminal.Write(projectFile);
                         Terminal.Write(" ");
                     }
@@ -380,7 +379,9 @@ private void ProjectFinished(object sender, ProjectFinishedEventArgs e)
                             url = Path.GetDirectoryName(url);
                         }
                         catch
-                        { }
+                        {
+                            // Ignore any GetDirectoryName exceptions
+                        }
                         Terminal.WriteLine($" ({duration:F1}s) â†’ \x1b]8;;{url}\x1b\\{outputPath}\x1b]8;;\x1b\\");
                     }
                     else
@@ -460,8 +461,8 @@ private void TargetStarted(object sender, TargetStartedEventArgs e)
         {
             project.Stopwatch.Start();
 
-            string projectFile = Path.GetFileName(e.ProjectFile) ?? e.ProjectFile;
-            NodeStatus? nodeStatus = new(projectFile, project.TargetFramework, e.TargetName, project.Stopwatch);
+            string projectFile = Path.GetFileName(e.ProjectFile);
+            NodeStatus nodeStatus = new(projectFile, project.TargetFramework, e.TargetName, project.Stopwatch);
             lock (_lock)
             {
                 _nodes[NodeIndexForContext(buildEventContext)] = nodeStatus;
@@ -522,7 +523,7 @@ private void MessageRaised(object sender, BuildMessageEventArgs e)
         {
             // Detect project output path by matching high-importance messages against the "$(MSBuildProjectName) -> ..."
             // pattern used by the CopyFilesToOutputDirectory target.
-            int index = message.IndexOf(" -> ");
+            int index = message.IndexOf(" -> ", StringComparison.Ordinal);
             if (index > 0)
             {
                 var projectFileName = Path.GetFileName(e.ProjectFile.AsSpan());
@@ -641,7 +642,6 @@ private ReadOnlySpan<char> FitToWidth(ReadOnlySpan<char> input)
         public string Render(NodesFrame previousFrame)
         {
             StringBuilder sb = _renderBuilder;
-            bool forceFullRefresh = previousFrame.Width != Width || previousFrame.Height != Height;
             sb.Clear();
 
             int i = 0;
