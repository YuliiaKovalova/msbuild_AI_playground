diff --git a/documentation/wiki/Bootstrap.md b/documentation/wiki/Bootstrap.md
new file mode 100644
index 00000000000..2f194488b5b
--- /dev/null
+++ b/documentation/wiki/Bootstrap.md
@@ -0,0 +1,12 @@
+## Quick Intro
+The document describes the logic behind the bootstrap and testing capabilities for the fresh MSBuild bits.
+
+## History
+MSBuild is built for two different environments: .NET and .NET Framework. To check the changes for .NET, the fresh bits were published to the MSBuild.Bootstrap folder and copied to the bootstrap later together with a set of specific dependencies to make it work as a part of the .dotnet folder.
+
+## Current Implementation for .NET
+During the bootstrap phase, install-scripts is used for downloading the bits that are compatible with the current version. The logic of interplay with the scripts is moved to a separate MSBuild task: InstallDotNetCoreTask.cs. What happens under the hood:
+
+ 1. The SDK is downloaded in the bootstrap folder.
+ 2. Fresh MSBuild bits are copied to it later.
+ 3. The constructed SDK is used for testing for both: local e2e tests and CI runs.
\ No newline at end of file
diff --git a/eng/BootStrapMsBuild.targets b/eng/BootStrapMsBuild.targets
index 3debcb95ad1..6f84e7eb3a5 100644
--- a/eng/BootStrapMsBuild.targets
+++ b/eng/BootStrapMsBuild.targets
@@ -202,6 +202,7 @@
            AlwaysCreate="true" />
   </Target>
 
+  <!-- The task allow to download sdk bits for the specified version. It will be used later to bootstrap the runnable MSBuild. -->
   <UsingTask TaskName="MSBuild.Bootstrap.Utils.Tasks.InstallDotNetCoreTask" AssemblyFile="$(ArtifactsBinDir)MSBuild.Bootstrap.Utils\$(Configuration)\netstandard2.0\MSBuild.Bootstrap.Utils.dll" TaskFactory="TaskHostFactory" />
   <Target Name="BootstrapNetCore" DependsOnTargets="CleanBootstrapFolder">
 
@@ -209,7 +210,7 @@
       <InstallDir>$(ArtifactsBinDir)bootstrap\$(TargetFramework)\</InstallDir>
     </PropertyGroup>
 
-    <InstallDotNetCoreTask DotNetInstallScriptRootPath="$(DotNetRoot)" InstallDir="$(InstallDir)" Version="$(NetVersion)"/>
+    <InstallDotNetCoreTask DotNetInstallScriptRootPath="$(DotNetRoot)" InstallDir="$(InstallDir)" Version="$(NetVersion)" DotNetInstallBaseUrl="https://raw.githubusercontent.com/dotnet/install-scripts/main/src/"/>
   </Target>
 
   <Target Name="BootstrapNetCorePatch" AfterTargets="BootstrapNetCore">
diff --git a/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs b/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
index 008a86887c3..c5a8f2f1472 100644
--- a/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
+++ b/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs
@@ -14,11 +14,17 @@
 
 namespace MSBuild.Bootstrap.Utils.Tasks
 {
+    /// <summary>
+    /// This task is designed to automate the installation of .NET Core SDK.
+    /// It downloads the appropriate installation script and executes it to install the specified version of .NET Core SDK.
+    /// </summary>
     public sealed class InstallDotNetCoreTask : Task
     {
         private const string ScriptName = "dotnet-install";
-        private const string DotNetInstallBaseUrl = "https://dot.net/v1/";
 
+        /// <summary>
+        /// Initializes a new instance of the <see cref="InstallDotNetCoreTask"/> class.
+        /// </summary>
         public InstallDotNetCoreTask()
         {
             InstallDir = string.Empty;
@@ -26,17 +32,35 @@ public InstallDotNetCoreTask()
             Version = string.Empty;
         }
 
+        /// <summary>
+        /// Gets or sets the directory where the .NET Core SDK should be installed. This property is required.
+        /// </summary>
         [Required]
         public string InstallDir { get; set; }
 
+        /// <summary>
+        /// Gets or sets the root path where the .NET Core installation script is located. This property is required.
+        /// </summary>
         [Required]
         public string DotNetInstallScriptRootPath { get; set; }
 
+        /// <summary>
+        /// Gets or sets the version of the .NET Core SDK to be installed. This property is required.
+        /// </summary>
         [Required]
         public string Version { get; set; }
 
+        /// <summary>
+        /// Gets or sets the base URL for downloading the .NET Core installation script. The default value is "https://dot.net/v1/".
+        /// </summary>
+        public string DotNetInstallBaseUrl { get; set; } = "https://dot.net/v1/";
+
         private bool IsWindows => RuntimeInformation.IsOSPlatform(OSPlatform.Windows);
 
+        /// <summary>
+        /// Executes the task, downloading and running the .NET Core installation script.
+        /// </summary>
+        /// <returns>True if the task succeeded; otherwise, false.</returns>
         public override bool Execute()
         {
             ScriptExecutionSettings executionSettings = SetupScriptsExecutionSettings();
@@ -50,6 +74,11 @@ public override bool Execute()
             return RunScript(executionSettings);
         }
 
+        /// <summary>
+        /// Downloads the .NET Core installation script asynchronously from the specified URL.
+        /// </summary>
+        /// <param name="scriptName">The name of the script to download.</param>
+        /// <param name="scriptPath">The path where the script will be saved.</param>
         private async AsyncTasks.Task DownloadScriptAsync(string scriptName, string scriptPath)
         {
             using (HttpClient client = new HttpClient())
@@ -70,6 +99,10 @@ private async AsyncTasks.Task DownloadScriptAsync(string scriptName, string scri
             }
         }
 
+        /// <summary>
+        /// Makes the installation script executable on non-Windows platforms.
+        /// </summary>
+        /// <param name="scriptPath">The path of the script to make executable.</param>
         private void MakeScriptExecutable(string scriptPath)
         {
             if (IsWindows)
@@ -101,6 +134,11 @@ private void MakeScriptExecutable(string scriptPath)
             }
         }
 
+        /// <summary>
+        /// Runs the .NET Core installation script with the specified settings.
+        /// </summary>
+        /// <param name="executionSettings">The settings required for script execution.</param>
+        /// <returns>True if the script executed successfully; otherwise, false.</returns>
         private bool RunScript(ScriptExecutionSettings executionSettings)
         {
             if (Log.HasLoggedErrors)
@@ -133,6 +171,10 @@ private bool RunScript(ScriptExecutionSettings executionSettings)
             return !Log.HasLoggedErrors;
         }
 
+        /// <summary>
+        /// Sets up the settings required for executing the .NET Core installation script.
+        /// </summary>
+        /// <returns>The settings required for script execution.</returns>
         private ScriptExecutionSettings SetupScriptsExecutionSettings()
         {
             string scriptExtension = IsWindows ? "ps1" : "sh";
@@ -155,14 +197,14 @@ private ScriptExecutionSettings SetupScriptsExecutionSettings()
             return new ScriptExecutionSettings(executableName, startInfo, $"{ScriptName}.{scriptExtension}", scriptPath);
         }
 
+        /// <summary>
+        /// A private struct to hold settings for script execution.
+        /// </summary>
         private struct ScriptExecutionSettings(string executableName, ProcessStartInfo startInfo, string scriptName, string scriptsFullPath)
         {
             public string ExecutableName { get; } = executableName;
-
             public ProcessStartInfo StartInfo { get; } = startInfo;
-
             public string ScriptName { get; } = scriptName;
-
             public string ScriptsFullPath { get; } = scriptsFullPath;
         }
     }
