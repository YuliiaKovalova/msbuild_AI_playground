diff --git a/src/Build/BuildCheck/.editorconfig b/src/Build/BuildCheck/.editorconfig
index 731ad1c1785..6b3ef97bf14 100644
--- a/src/Build/BuildCheck/.editorconfig
+++ b/src/Build/BuildCheck/.editorconfig
@@ -1,2 +1,3 @@
 [*.cs]
 csharp_style_namespace_declarations = file_scoped:warning
+dotnet_diagnostic.IDE0005.severity = warning
diff --git a/src/Build/BuildCheck/API/BuildCheckResult.cs b/src/Build/BuildCheck/API/BuildCheckResult.cs
index 6471d717056..d164c22b28a 100644
--- a/src/Build/BuildCheck/API/BuildCheckResult.cs
+++ b/src/Build/BuildCheck/API/BuildCheckResult.cs
@@ -2,7 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Construction;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
diff --git a/src/Build/BuildCheck/API/Check.cs b/src/Build/BuildCheck/API/Check.cs
index 55c1d87a950..22a009981e6 100644
--- a/src/Build/BuildCheck/API/Check.cs
+++ b/src/Build/BuildCheck/API/Check.cs
@@ -3,8 +3,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Collections.Immutable;
-using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
 
diff --git a/src/Build/BuildCheck/API/CheckConfiguration.cs b/src/Build/BuildCheck/API/CheckConfiguration.cs
index f89feaec506..c014419ee67 100644
--- a/src/Build/BuildCheck/API/CheckConfiguration.cs
+++ b/src/Build/BuildCheck/API/CheckConfiguration.cs
@@ -1,7 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
 using System.Collections.Generic;
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Experimental.BuildCheck.Utilities;
diff --git a/src/Build/BuildCheck/API/ConfigurationContext.cs b/src/Build/BuildCheck/API/ConfigurationContext.cs
index 86a52ae1a11..936139ff310 100644
--- a/src/Build/BuildCheck/API/ConfigurationContext.cs
+++ b/src/Build/BuildCheck/API/ConfigurationContext.cs
@@ -1,9 +1,7 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
 using System.Collections.Generic;
-using System.Linq;
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
diff --git a/src/Build/BuildCheck/API/InternalCheck.cs b/src/Build/BuildCheck/API/InternalCheck.cs
index 242c513e655..a25705e033c 100644
--- a/src/Build/BuildCheck/API/InternalCheck.cs
+++ b/src/Build/BuildCheck/API/InternalCheck.cs
@@ -2,7 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Experimental.BuildCheck;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Checks;
 
diff --git a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
index 7083d50aa8d..ccedf3bab7f 100644
--- a/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
+++ b/src/Build/BuildCheck/Acquisition/BuildCheckAcquisitionModule.cs
@@ -7,8 +7,9 @@
 using System.Reflection;
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Framework;
-using Microsoft.Build.Framework.Telemetry;
+#if FEATURE_ASSEMBLYLOADCONTEXT
 using Microsoft.Build.Shared;
+#endif
 
 namespace Microsoft.Build.Experimental.BuildCheck.Acquisition;
 
diff --git a/src/Build/BuildCheck/Acquisition/CheckAcquisitionData.cs b/src/Build/BuildCheck/Acquisition/CheckAcquisitionData.cs
index 74a0c87be38..4b9fab08901 100644
--- a/src/Build/BuildCheck/Acquisition/CheckAcquisitionData.cs
+++ b/src/Build/BuildCheck/Acquisition/CheckAcquisitionData.cs
@@ -1,13 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.Build.Experimental.BuildCheck;
-
 namespace Microsoft.Build.Experimental.BuildCheck.Acquisition;
 
 // https://github.com/dotnet/msbuild/issues/9633
diff --git a/src/Build/BuildCheck/Acquisition/IBuildCheckAcquisitionModule.cs b/src/Build/BuildCheck/Acquisition/IBuildCheckAcquisitionModule.cs
index 245736ca67a..4715209c972 100644
--- a/src/Build/BuildCheck/Acquisition/IBuildCheckAcquisitionModule.cs
+++ b/src/Build/BuildCheck/Acquisition/IBuildCheckAcquisitionModule.cs
@@ -3,7 +3,6 @@
 
 using System.Collections.Generic;
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
-using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Acquisition;
 
diff --git a/src/Build/BuildCheck/Checks/DoubleWritesCheck.cs b/src/Build/BuildCheck/Checks/DoubleWritesCheck.cs
index 25d99b2bb91..6cdd79c200b 100644
--- a/src/Build/BuildCheck/Checks/DoubleWritesCheck.cs
+++ b/src/Build/BuildCheck/Checks/DoubleWritesCheck.cs
@@ -3,13 +3,10 @@
 
 using System;
 using System.Collections.Generic;
-using System.Collections.Immutable;
-using System.Diagnostics;
+#if !FEATURE_MSIOREDIST
 using System.IO;
+#endif
 using System.Linq;
-using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
-using Microsoft.Build.Construction;
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Shared;
 using static Microsoft.Build.Experimental.BuildCheck.TaskInvocationCheckData;
 
diff --git a/src/Build/BuildCheck/Checks/PreferProjectReferenceCheck.cs b/src/Build/BuildCheck/Checks/PreferProjectReferenceCheck.cs
index 4c4901cbfac..373a41d20e6 100644
--- a/src/Build/BuildCheck/Checks/PreferProjectReferenceCheck.cs
+++ b/src/Build/BuildCheck/Checks/PreferProjectReferenceCheck.cs
@@ -1,13 +1,8 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.IO;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Construction;
 using Microsoft.Build.Framework;
@@ -20,7 +15,7 @@ internal class PreferProjectReferenceCheck : Check
     public static CheckRule SupportedRule = new CheckRule(RuleId, "PreferProjectReference",
         ResourceUtilities.GetResourceString("BuildCheck_BC0104_Title")!,
         ResourceUtilities.GetResourceString("BuildCheck_BC0104_MessageFmt")!,
-        new CheckConfiguration() { RuleId = "BC0104", Severity = CheckResultSeverity.Warning });
+        new CheckConfiguration() { RuleId = RuleId, Severity = CheckResultSeverity.Warning });
 
     public override string FriendlyName => "MSBuild.PreferProjectReferenceCheck";
 
@@ -39,33 +34,39 @@ public override void RegisterActions(IBuildCheckRegistrationContext registration
 
     internal override bool IsBuiltIn => true;
 
-    private readonly Dictionary<string, (string, string)> _projectsPerReferencPath = new(MSBuildNameIgnoreCaseComparer.Default);
+    private readonly Dictionary<string, (string, string)> _projectsPerReferencePath = new(MSBuildNameIgnoreCaseComparer.Default);
     private readonly Dictionary<string, string> _projectsPerOutputPath = new(MSBuildNameIgnoreCaseComparer.Default);
-    private readonly HashSet<string> _projects = new(MSBuildNameIgnoreCaseComparer.Default);
+    private readonly HashSet<string> _projectsSeen = new(MSBuildNameIgnoreCaseComparer.Default);
 
     private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)
     {
-        // Just check - do not add yet - it'll be done by EvaluatedItemsAction
-        if (_projects.Contains(context.Data.ProjectFilePath))
+        // We want to avoid repeated checking of a same project (as it might be evaluated multiple times)
+        //  for this reason we use a hashset with already seen projects.
+        // We want to do the same prevention for both registered actions: EvaluatedPropertiesAction and EvaluatedItemsAction.
+        //  To avoid the need to have separate hashset for each of those functions - we use a single one and we use the fact that
+        //  both functions are always called after each other (EvaluatedPropertiesAction first, then EvaluatedItemsAction),
+        //  so this function just checks the hashset (not to prevent execution of EvaluatedItemsAction) and EvaluatedItemsAction
+        //  updates the hashset.
+        if (_projectsSeen.Contains(context.Data.ProjectFilePath))
         {
             return;
         }
 
         string? targetPath;
 
-        context.Data.EvaluatedProperties.TryGetValue("TargetPath", out targetPath);
+        context.Data.EvaluatedProperties.TryGetValue(ItemMetadataNames.targetPath, out targetPath);
 
         if (string.IsNullOrEmpty(targetPath))
         {
             return;
         }
 
-        targetPath = RootEvaluatedPath(targetPath, context.Data.ProjectFilePath);
+        targetPath = BuildCheckUtilities.RootEvaluatedPath(targetPath, context.Data.ProjectFilePath);
 
         _projectsPerOutputPath[targetPath] = context.Data.ProjectFilePath;
 
         (string, string) projectProducingOutput;
-        if (_projectsPerReferencPath.TryGetValue(targetPath, out projectProducingOutput))
+        if (_projectsPerReferencePath.TryGetValue(targetPath, out projectProducingOutput))
         {
             context.ReportResult(BuildCheckResult.Create(
                 SupportedRule,
@@ -79,17 +80,19 @@ private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedProperties
 
     private void EvaluatedItemsAction(BuildCheckDataContext<EvaluatedItemsCheckData> context)
     {
-        if (!_projects.Add(context.Data.ProjectFilePath))
+        // We want to avoid repeated checking of a same project (as it might be evaluated multiple times)
+        //  for this reason we use a hashset with already seen projects.
+        if (!_projectsSeen.Add(context.Data.ProjectFilePath))
         {
             return;
         }
 
-        foreach (ItemData itemData in context.Data.EnumerateItemsOfType("Reference"))
+        foreach (ItemData itemData in context.Data.EnumerateItemsOfType(ItemNames.reference))
         {
             string evaluatedReferencePath = itemData.EvaluatedInclude;
-            string referenceFullPath = RootEvaluatedPath(evaluatedReferencePath, context.Data.ProjectFilePath);
+            string referenceFullPath = BuildCheckUtilities.RootEvaluatedPath(evaluatedReferencePath, context.Data.ProjectFilePath);
 
-            _projectsPerReferencPath[referenceFullPath] = (context.Data.ProjectFilePath, evaluatedReferencePath);
+            _projectsPerReferencePath[referenceFullPath] = (context.Data.ProjectFilePath, evaluatedReferencePath);
             string? projectReferencedViaOutput;
             if (_projectsPerOutputPath.TryGetValue(referenceFullPath, out projectReferencedViaOutput))
             {
@@ -103,16 +106,4 @@ private void EvaluatedItemsAction(BuildCheckDataContext<EvaluatedItemsCheckData>
             }
         }
     }
-
-    private static string RootEvaluatedPath(string path, string projectFilePath)
-    {
-        if (!Path.IsPathRooted(path))
-        {
-            path = Path.Combine(Path.GetDirectoryName(projectFilePath)!, path);
-        }
-        // Normalize the path to avoid false negatives due to different path representations.
-        path = FileUtilities.NormalizePath(path)!;
-
-        return path;
-    }
 }
diff --git a/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs b/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs
index 7c17d13b5f4..30ef3951390 100644
--- a/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs
+++ b/src/Build/BuildCheck/Checks/PropertiesUsageCheck.cs
@@ -3,12 +3,10 @@
 
 using System;
 using System.Collections.Generic;
-using System.Diagnostics;
 using System.Linq;
 using Microsoft.Build.BuildCheck.Infrastructure;
 using Microsoft.Build.Collections;
 using Microsoft.Build.Evaluation;
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Shared;
 
diff --git a/src/Build/BuildCheck/Checks/SharedOutputPathCheck.cs b/src/Build/BuildCheck/Checks/SharedOutputPathCheck.cs
index 0eb4ac9899c..a60b6e5805b 100644
--- a/src/Build/BuildCheck/Checks/SharedOutputPathCheck.cs
+++ b/src/Build/BuildCheck/Checks/SharedOutputPathCheck.cs
@@ -1,14 +1,9 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
 using System.Collections.Generic;
-using System.Collections.Immutable;
-using System.Diagnostics;
 using System.IO;
-using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Construction;
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Shared;
 using Microsoft.Build.Collections;
 
@@ -39,11 +34,13 @@ public override void RegisterActions(IBuildCheckRegistrationContext registration
     internal override bool IsBuiltIn => true;
 
     private readonly Dictionary<string, string> _projectsPerOutputPath = new(MSBuildNameIgnoreCaseComparer.Default);
-    private readonly HashSet<string> _projects = new(MSBuildNameIgnoreCaseComparer.Default);
+    private readonly HashSet<string> _projectsSeen = new(MSBuildNameIgnoreCaseComparer.Default);
 
     private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedPropertiesCheckData> context)
     {
-        if (!_projects.Add(context.Data.ProjectFilePath))
+        // We want to avoid repeated checking of a same project (as it might be evaluated multiple times)
+        //  for this reason we use a hashset with already seen projects
+        if (!_projectsSeen.Add(context.Data.ProjectFilePath))
         {
             return;
         }
@@ -73,14 +70,7 @@ private void EvaluatedPropertiesAction(BuildCheckDataContext<EvaluatedProperties
         }
 
         string projectPath = context.Data.ProjectFilePath;
-
-        if (!Path.IsPathRooted(path))
-        {
-            path = Path.Combine(Path.GetDirectoryName(projectPath)!, path);
-        }
-
-        // Normalize the path to avoid false negatives due to different path representations.
-        path = FileUtilities.NormalizePath(path);
+        path = BuildCheckUtilities.RootEvaluatedPath(path!, projectPath);
 
         if (_projectsPerOutputPath.TryGetValue(path!, out string? conflictingProject))
         {
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs
index 98c04bb78f5..a653049d5dc 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConfigurationException.cs
@@ -2,10 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
index 7e581e2979d..9e8782ae9ee 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckConnectorLogger.cs
@@ -1,13 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.Experimental.BuildCheck;
-using Microsoft.Build.Experimental.BuildCheck.Acquisition;
-using Microsoft.Build.Experimental.BuildCheck.Utilities;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckReplayModeConnector.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckReplayModeConnector.cs
index 515b050a8cc..0c2dd47faad 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckReplayModeConnector.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckReplayModeConnector.cs
@@ -1,11 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Microsoft.Build.BackEnd;
 using Microsoft.Build.Execution;
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
diff --git a/src/Build/BuildCheck/Infrastructure/CheckConfigurationEffective.cs b/src/Build/BuildCheck/Infrastructure/CheckConfigurationEffective.cs
index 0f857dad631..ffc0f6aeafc 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckConfigurationEffective.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckConfigurationEffective.cs
@@ -2,7 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using Microsoft.Build.Experimental.BuildCheck;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
diff --git a/src/Build/BuildCheck/Infrastructure/CheckContext/CheckDispatchingContext.cs b/src/Build/BuildCheck/Infrastructure/CheckContext/CheckDispatchingContext.cs
index 06b7d5ccec1..d3069a979d9 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckContext/CheckDispatchingContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckContext/CheckDispatchingContext.cs
@@ -2,11 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.BackEnd.Shared;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Logging;
diff --git a/src/Build/BuildCheck/Infrastructure/CheckContext/CheckLoggingContext.cs b/src/Build/BuildCheck/Infrastructure/CheckContext/CheckLoggingContext.cs
index 13f308d2283..594182f8c32 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckContext/CheckLoggingContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckContext/CheckLoggingContext.cs
@@ -3,9 +3,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Framework.Telemetry;
diff --git a/src/Build/BuildCheck/Infrastructure/CheckContext/CheckLoggingContextFactory.cs b/src/Build/BuildCheck/Infrastructure/CheckContext/CheckLoggingContextFactory.cs
index 5f429c94b02..a313a5fc473 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckContext/CheckLoggingContextFactory.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckContext/CheckLoggingContextFactory.cs
@@ -1,11 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Framework;
 
diff --git a/src/Build/BuildCheck/Infrastructure/CheckContext/ICheckContext.cs b/src/Build/BuildCheck/Infrastructure/CheckContext/ICheckContext.cs
index 8cfa8b5b820..2f2660da1a8 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckContext/ICheckContext.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckContext/ICheckContext.cs
@@ -2,10 +2,6 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Microsoft.Build.Framework;
 using Microsoft.Build.Shared;
 
diff --git a/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs b/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs
index 6d2fc868d95..426887e3f55 100644
--- a/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs
+++ b/src/Build/BuildCheck/Infrastructure/CheckWrapper.cs
@@ -5,8 +5,6 @@
 using System.Collections.Generic;
 using System.Diagnostics;
 using System.Linq;
-using Microsoft.Build.BackEnd.Logging;
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
diff --git a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
index e102fe96ced..e2e2de859de 100644
--- a/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/ConfigurationProvider.cs
@@ -5,7 +5,6 @@
 using System.Collections.Generic;
 using System.Linq;
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure.EditorConfig;
-using Microsoft.Build.Experimental.BuildCheck;
 using System.Collections.Concurrent;
 using Microsoft.Build.Experimental.BuildCheck.Utilities;
 using Microsoft.Build.BuildCheck.Infrastructure;
diff --git a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
index ac8d8012e01..82dca5ff4f8 100644
--- a/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
+++ b/src/Build/BuildCheck/Infrastructure/CustomConfigurationData.cs
@@ -3,10 +3,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Diagnostics.CodeAnalysis;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
 
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigFile.cs b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigFile.cs
index 8dfbf7aa944..820b00bba85 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigFile.cs
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigFile.cs
@@ -9,14 +9,9 @@
 //  3. Remove the FilePath and receive only the text
 
 using System;
-using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Diagnostics;
-using System.IO;
-using System.Linq;
-using System.Text;
 using System.Text.RegularExpressions;
-using System.Threading.Tasks;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure.EditorConfig;
 
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs
index 60df42cb36d..5ae35d5ea75 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigGlobsMatcher.cs
@@ -9,15 +9,12 @@
 //  2. Exceptions. Wrap in try/catch blocks for proper reporting
 
 
-using System;
 using System.Collections.Generic;
 using System.Collections.Immutable;
 using System.Diagnostics;
 using System.IO;
-using System.Linq;
 using System.Text;
 using System.Text.RegularExpressions;
-using System.Threading.Tasks;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure.EditorConfig;
 
diff --git a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
index 76baa1f1e66..87c9c8d89c6 100644
--- a/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
+++ b/src/Build/BuildCheck/Infrastructure/EditorConfig/EditorConfigParser.cs
@@ -2,14 +2,9 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
-using System.Drawing.Design;
 using System.IO;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Microsoft.Build.Shared;
 using static Microsoft.Build.Experimental.BuildCheck.Infrastructure.EditorConfig.EditorConfigGlobsMatcher;
 
diff --git a/src/Build/BuildCheck/Infrastructure/IBuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/IBuildCheckManagerProvider.cs
index 45eb5acea41..20825f70033 100644
--- a/src/Build/BuildCheck/Infrastructure/IBuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/IBuildCheckManagerProvider.cs
@@ -1,11 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Microsoft.Build.BackEnd;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
diff --git a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManagerProvider.cs b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManagerProvider.cs
index 33da469ac5f..31a192dc67e 100644
--- a/src/Build/BuildCheck/Infrastructure/NullBuildCheckManagerProvider.cs
+++ b/src/Build/BuildCheck/Infrastructure/NullBuildCheckManagerProvider.cs
@@ -1,14 +1,7 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Microsoft.Build.BackEnd;
-using Microsoft.Build.Experimental.BuildCheck;
-using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
diff --git a/src/Build/BuildCheck/Infrastructure/TracingReporter.cs b/src/Build/BuildCheck/Infrastructure/TracingReporter.cs
index 05bb2f33cdc..d5f3f59d602 100644
--- a/src/Build/BuildCheck/Infrastructure/TracingReporter.cs
+++ b/src/Build/BuildCheck/Infrastructure/TracingReporter.cs
@@ -3,11 +3,7 @@
 
 using System;
 using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
 using Microsoft.Build.Experimental.BuildCheck.Utilities;
-using Microsoft.Build.Experimental.BuildCheck;
 
 namespace Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 
diff --git a/src/Build/BuildCheck/OM/BuildCheckDataContext.cs b/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
index fd33666fbd9..b4ead9bb81b 100644
--- a/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
+++ b/src/Build/BuildCheck/OM/BuildCheckDataContext.cs
@@ -2,14 +2,7 @@
 // The .NET Foundation licenses this file to you under the MIT license.
 
 using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-using Microsoft.Build.BackEnd.Logging;
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
-using Microsoft.Build.Experimental;
-using Microsoft.Build.Framework;
 using System.IO;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
diff --git a/src/Build/BuildCheck/OM/ProjectImportedCheckData.cs b/src/Build/BuildCheck/OM/ProjectImportedCheckData.cs
index e4172f52215..db7fdaaa591 100644
--- a/src/Build/BuildCheck/OM/ProjectImportedCheckData.cs
+++ b/src/Build/BuildCheck/OM/ProjectImportedCheckData.cs
@@ -1,8 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Experimental.BuildCheck;
-
 namespace Microsoft.Build.Experimental.BuildCheck;
 
 /// <summary>
diff --git a/src/Build/BuildCheck/OM/ProjectRequestProcessingDoneData.cs b/src/Build/BuildCheck/OM/ProjectRequestProcessingDoneData.cs
index 3fa36d4cde5..962713e88df 100644
--- a/src/Build/BuildCheck/OM/ProjectRequestProcessingDoneData.cs
+++ b/src/Build/BuildCheck/OM/ProjectRequestProcessingDoneData.cs
@@ -1,8 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Experimental.BuildCheck;
-
 namespace Microsoft.Build.Experimental.BuildCheck;
 
 /// <summary>
diff --git a/src/Build/BuildCheck/OM/PropertyReadData.cs b/src/Build/BuildCheck/OM/PropertyReadData.cs
index 3599b381a5d..531f9fdc4a4 100644
--- a/src/Build/BuildCheck/OM/PropertyReadData.cs
+++ b/src/Build/BuildCheck/OM/PropertyReadData.cs
@@ -3,7 +3,6 @@
 
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Evaluation;
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Shared;
 
 namespace Microsoft.Build.Experimental.BuildCheck;
diff --git a/src/Build/BuildCheck/OM/PropertyWriteData.cs b/src/Build/BuildCheck/OM/PropertyWriteData.cs
index c15ac695031..bfdbad4ff74 100644
--- a/src/Build/BuildCheck/OM/PropertyWriteData.cs
+++ b/src/Build/BuildCheck/OM/PropertyWriteData.cs
@@ -1,7 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using Microsoft.Build.Experimental.BuildCheck;
 using Microsoft.Build.Experimental.BuildCheck.Infrastructure;
 using Microsoft.Build.Shared;
 
diff --git a/src/Build/BuildCheck/Utilities/BuildCheckUtilities.cs b/src/Build/BuildCheck/Utilities/BuildCheckUtilities.cs
new file mode 100644
index 00000000000..01461b7c9ef
--- /dev/null
+++ b/src/Build/BuildCheck/Utilities/BuildCheckUtilities.cs
@@ -0,0 +1,22 @@
+﻿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System.IO;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Experimental.BuildCheck;
+
+internal static class BuildCheckUtilities
+{
+    internal static string RootEvaluatedPath(string path, string projectFilePath)
+    {
+        if (!Path.IsPathRooted(path))
+        {
+            path = Path.Combine(Path.GetDirectoryName(projectFilePath)!, path);
+        }
+        // Normalize the path to avoid false negatives due to different path representations.
+        path = FileUtilities.NormalizePath(path)!;
+
+        return path;
+    }
+}
diff --git a/src/Build/BuildCheck/Utilities/Constants.cs b/src/Build/BuildCheck/Utilities/Constants.cs
index a95f02452e5..e556a6aa37f 100644
--- a/src/Build/BuildCheck/Utilities/Constants.cs
+++ b/src/Build/BuildCheck/Utilities/Constants.cs
@@ -1,12 +1,6 @@
 ﻿// Licensed to the .NET Foundation under one or more agreements.
 // The .NET Foundation licenses this file to you under the MIT license.
 
-using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using System.Threading.Tasks;
-
 namespace Microsoft.Build.Experimental.BuildCheck.Utilities;
 
 /// <summary>
diff --git a/src/Shared/Constants.cs b/src/Shared/Constants.cs
index e0ac6bae417..caf4f6e9eb2 100644
--- a/src/Shared/Constants.cs
+++ b/src/Shared/Constants.cs
@@ -234,4 +234,12 @@ internal static class ItemMetadataNames
         internal const string AdditionalPropertiesMetadataName = "AdditionalProperties";
         internal const string ProjectConfigurationDescription = "ProjectConfigurationDescription";
     }
+
+    /// <summary>
+    /// Constants naming well-known items.
+    /// </summary>
+    internal static class ItemNames
+    {
+        internal const string reference = "Reference";
+    }
 }
