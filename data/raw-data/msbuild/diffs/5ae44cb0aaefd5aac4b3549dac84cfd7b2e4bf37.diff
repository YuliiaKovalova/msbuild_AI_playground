diff --git a/src/Build/Logging/FancyLogger/FancyLogger.cs b/src/Build/Logging/FancyLogger/FancyLogger.cs
index 848bd3a66a9..4b5bfe2f22a 100644
--- a/src/Build/Logging/FancyLogger/FancyLogger.cs
+++ b/src/Build/Logging/FancyLogger/FancyLogger.cs
@@ -3,6 +3,8 @@
 
 using System;
 using System.Collections.Generic;
+// using System.Linq;
+// using System.Threading.Tasks;
 using Microsoft.Build.Framework;
 
 namespace Microsoft.Build.Logging.FancyLogger
@@ -39,13 +41,21 @@ public void Initialize(IEventSource eventSource)
             eventSource.TargetFinished += new TargetFinishedEventHandler(eventSource_TargetFinished);
             // eventSource.TaskFinished += new TaskFinishedEventHandler(eventSource_TaskFinished);
             // Raised
-            eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);
+            // eventSource.MessageRaised += new BuildMessageEventHandler(eventSource_MessageRaised);
             eventSource.WarningRaised += new BuildWarningEventHandler(eventSource_WarningRaised);
             eventSource.ErrorRaised += new BuildErrorEventHandler(eventSource_ErrorRaised);
             // Initialize FancyLoggerBuffer
             FancyLoggerBuffer.Initialize();
             // TODO: Fix. First line does not appear at top. Leaving empty line for now
-            FancyLoggerBuffer.WriteNewLine("");
+            // FancyLoggerBuffer.WriteNewLine("");
+
+            /*for (int i = 0; i < 300; i++)
+            {
+                string l = string.Concat( Enumerable.Repeat($"{i}-", 30));
+                FancyLoggerBuffer.WriteNewLine(l);
+            }*/
+
+            FancyLoggerBuffer.Render();
         }
 
         // Build
@@ -88,6 +98,8 @@ void eventSource_TargetStarted(object sender, TargetStartedEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddTarget(e);
+
+            node.Log();
         }
         void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
         {
@@ -96,6 +108,8 @@ void eventSource_TargetFinished(object sender, TargetFinishedEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.FinishedTargets++;
+
+            node.Log();
         }
 
         // Task
@@ -108,6 +122,8 @@ void eventSource_TaskStarted(object sender, TaskStartedEventArgs e)
             // Update
             node.AddTask(e);
             existingTasks++;
+
+            node.Log();
         }
 
         void eventSource_TaskFinished(object sender, TaskFinishedEventArgs e)
@@ -122,6 +138,8 @@ void eventSource_MessageRaised(object sender, BuildMessageEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddMessage(e);
+
+            node.Log();
         }
         void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
         {
@@ -130,6 +148,8 @@ void eventSource_WarningRaised(object sender, BuildWarningEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddWarning(e);
+
+            node.Log();
         }
         void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
         {
@@ -138,6 +158,8 @@ void eventSource_ErrorRaised(object sender, BuildErrorEventArgs e)
             if (!projects.TryGetValue(id, out FancyLoggerProjectNode? node)) return;
             // Update
             node.AddError(e);
+
+            node.Log();
         }
 
 
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
index 04af0b207b7..bece30a15f6 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerBuffer.cs
@@ -6,6 +6,7 @@
 using System.Collections.Generic;
 using System.Linq;
 using System.Threading.Tasks;
+// using System.Threading.Tasks;
 
 namespace Microsoft.Build.Logging.FancyLogger
 {
@@ -40,44 +41,42 @@ public FancyLoggerBufferLine(string text)
     public class FancyLoggerBuffer
     {
         private static List<FancyLoggerBufferLine> Lines = new();
-        private static int TopLineIndex = 0;
+        public static int TopLineIndex = 0;
         public static string Footer = string.Empty;
+        private static bool IsTerminated = false;
         // private static bool AutoScrollEnabled = true;
         public static void Initialize()
         {
+            // Use encoding
+            Console.OutputEncoding = System.Text.Encoding.UTF8;
             // Use alternate buffer
             // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer
             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
             Console.Write(ANSIBuilder.Buffer.UseAlternateBuffer());
 
-            Task.Run(async () =>
+            Task.Run(() =>
             {
-                while (true)
+                // Use encoding
+                Console.OutputEncoding = System.Text.Encoding.UTF8;
+                while (!IsTerminated)
                 {
-                    // Wait (1/60 seconds)
-                    await Task.Delay((1 / 60) * 1_000);
-                    // Handle keyboard input
-                    switch (Console.ReadKey(true).Key)
+                    Task.Delay((1 / 60) * 1_000).ContinueWith((t) =>
                     {
-                        case ConsoleKey.UpArrow:
-                            if (TopLineIndex > 0) TopLineIndex--;
-                            break;
-                        case ConsoleKey.DownArrow:
-                            TopLineIndex++;
-                            break;
-                        case ConsoleKey.Spacebar:
-                        case ConsoleKey.Escape:
-                            // AutoScrollEnabled = !AutoScrollEnabled;
-                            break;
+                        Render();
+                    });
+                    if (Console.KeyAvailable)
+                    {
+                        ConsoleKey key = Console.ReadKey().Key;
+                        if (key == ConsoleKey.UpArrow && TopLineIndex > 0) TopLineIndex--;
+                        else if (key == ConsoleKey.DownArrow) TopLineIndex++;
                     }
-                    // Render
-                    Render();
-            }
+                }
             });
         }
 
         public static void Terminate()
         {
+            IsTerminated = true;
             // TODO: Remove. Tries to solve a bug when switching from and to the alternate buffer
             Console.Write(ANSIBuilder.Buffer.UseMainBuffer());
             Console.Write(ANSIBuilder.Eraser.Display());
diff --git a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
index 324785cbbf8..27a13b24095 100644
--- a/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
+++ b/src/Build/Logging/FancyLogger/FancyLoggerProjectNode.cs
@@ -87,7 +87,7 @@ public void Log()
             }
 
             // Update buffer
-            FancyLoggerBuffer.Render();
+            // FancyLoggerBuffer.Render();
         }
 
         public void AddTarget(TargetStartedEventArgs args)
