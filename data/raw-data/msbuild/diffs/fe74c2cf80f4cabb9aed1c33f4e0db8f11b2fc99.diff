diff --git a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
index d6fde1610f4..9f839cfff5f 100644
--- a/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
+++ b/src/Build/Logging/ParallelLogger/ConsoleOutputAligner.cs
@@ -45,7 +45,7 @@ public ConsoleOutputAligner(int bufferWidth, bool alignMessages)
         /// <returns>Aligned message ready to be written to Console</returns>
         /// <remarks>
         /// For optimization purposes this method uses single <see cref="StringBuilder"/> instance. This makes this method non thread safe.
-        /// Calling side is expected this usage is non-concurrent. This shall nto be an issue as it is expected that writing into Console shall be serialized anyway.
+        /// Calling side is expected this usage is non-concurrent. This shall not be an issue as it is expected that writing into Console shall be serialized anyway.
         /// </remarks>
         public string AlignConsoleOutput(string message, bool prefixAlreadyWritten, int prefixWidth)
         {
@@ -60,7 +60,7 @@ public string AlignConsoleOutput(string message, bool prefixAlreadyWritten, int
             {
                 AlignAndIndentLineOfMessage(sb, prefixAlreadyWritten, prefixWidth, message, i, j - i);
                 i = j + (message[j] == '\r' && (j + 1) < message.Length && message[j + 1] == '\n' ? 2 : 1);
-                j = i < message.Length ? message.IndexOfAny(MSBuildConstants.CrLf, i) : -1;
+                j = message.IndexOfAny(MSBuildConstants.CrLf, i);
             }
 
             // Process rest of message
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 231a11fd9cc..a68b477bfdc 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -1344,7 +1344,7 @@ private void WriteMessageAligned(string message, bool prefixAlreadyWritten, int
             {
                 int adjustedPrefixWidth = _prefixWidth + prefixAdjustment;
 
-                if (Traits.Instance.EscapeHatches.DoNotOptimizeConsoleLogger || !ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))
+                if (!ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_0))
                 {
                     // The string may contain new lines, treat each new line as a different string to format and send to the console
                     string[] nonNullMessages = SplitStringOnNewLines(message);
diff --git a/src/Shared/Traits.cs b/src/Shared/Traits.cs
index 98152f5741d..d1fc45ffe12 100644
--- a/src/Shared/Traits.cs
+++ b/src/Shared/Traits.cs
@@ -145,8 +145,6 @@ internal class EscapeHatches
         /// </summary>
         public readonly bool AlwaysEvaluateDangerousGlobs = Environment.GetEnvironmentVariable("MSBuildAlwaysEvaluateDangerousGlobs") == "1";
 
-        public readonly bool DoNotOptimizeConsoleLogger = Environment.GetEnvironmentVariable("MSBUILDDONOOPTIMISECONSOLELOGGER") == "1";
-
         /// <summary>
         /// Emit events for project imports.
         /// </summary>
