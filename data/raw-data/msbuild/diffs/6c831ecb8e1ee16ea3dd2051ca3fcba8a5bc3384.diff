diff --git a/src/Build/Construction/ProjectElement.cs b/src/Build/Construction/ProjectElement.cs
index 8327feda09e..54df6827192 100644
--- a/src/Build/Construction/ProjectElement.cs
+++ b/src/Build/Construction/ProjectElement.cs
@@ -50,6 +50,7 @@ internal ProjectElement(ProjectElementLink link)
             ErrorUtilities.VerifyThrowArgumentNull(link, nameof(link));
 
             _xmlSource = link;
+            _xmlSource_Link = _xmlSource.Link;
         }
 
         /// <summary>
@@ -62,6 +63,7 @@ internal ProjectElement(XmlElement xmlElement, ProjectElementContainer parent, P
             ErrorUtilities.VerifyThrowArgumentNull(containingProject, nameof(containingProject));
 
             _xmlSource = (XmlElementWithLocation)xmlElement;
+            _xmlSource_Link = _xmlSource.Link;
             _parent = parent;
             ContainingProject = containingProject;
         }
@@ -88,7 +90,7 @@ internal virtual bool ExpressedAsAttribute
                     _expressedAsAttribute = value;
                     Parent?.AddToXml(this);
                     MarkDirty("Set express as attribute: {0}", value.ToString());
-                }                
+                }
             }
         }
 
@@ -208,7 +210,7 @@ public IEnumerable<ProjectElementContainer> AllParents
         public ProjectElement PreviousSibling
         {
             [DebuggerStepThrough]
-            get => Link != null? Link.PreviousSibling : _previousSibling;
+            get => Link != null ? Link.PreviousSibling : _previousSibling;
             [DebuggerStepThrough]
             internal set => _previousSibling = value;
         }
@@ -289,15 +291,29 @@ internal set
         /// In the case of an unsaved edit, the location only
         /// contains the path to the file that the element originates from.
         /// </summary>
-        public ElementLocation Location => Link != null ? Link.Location :  XmlElement.Location;
+        public ElementLocation Location
+        {
+            get
+            {
+                if (_location == null)
+                {
+                    _location = Link != null ? Link.Location : XmlElement.Location;
+                }
+
+                return _location;
+            }
+        }
+
+        private ElementLocation _location = null;
 
         /// <inheritdoc/>
-        public string ElementName => Link != null? Link.ElementName : XmlElement.Name;
+        public string ElementName => Link != null ? Link.ElementName : XmlElement.Name;
 
         // Using ILinkedXml to share single field for either Linked (external) and local (XML backed) nodes.
         private ILinkedXml _xmlSource;
+        private ProjectElementLink _xmlSource_Link;
 
-        internal ProjectElementLink Link => _xmlSource?.Link;
+        internal ProjectElementLink Link => _xmlSource_Link;
 
         /// <summary>
         /// <see cref="ILinkableObject.Link"/>
@@ -329,7 +345,7 @@ internal XmlDocumentWithLocation XmlDocument
             [DebuggerStepThrough]
             get
             {
-                return (XmlDocumentWithLocation) XmlElement?.OwnerDocument;
+                return (XmlDocumentWithLocation)XmlElement?.OwnerDocument;
             }
         }
 
@@ -428,6 +444,7 @@ public virtual void CopyFrom(ProjectElement element)
         internal void SetProjectRootElementFromParser(XmlElementWithLocation xmlElement, ProjectRootElement projectRootElement)
         {
             _xmlSource = xmlElement;
+            _xmlSource_Link = _xmlSource.Link;
             ContainingProject = projectRootElement;
         }
 
@@ -462,6 +479,7 @@ internal void ReplaceElement(XmlElementWithLocation newElement)
             }
 
             _xmlSource = newElement;
+            _xmlSource_Link = _xmlSource.Link;
             MarkDirty("Replace element {0}", newElement.Name);
         }
 
diff --git a/src/Build/ElementLocation/ElementLocation.cs b/src/Build/ElementLocation/ElementLocation.cs
index 3b5a286956a..18e34b17440 100644
--- a/src/Build/ElementLocation/ElementLocation.cs
+++ b/src/Build/ElementLocation/ElementLocation.cs
@@ -171,7 +171,7 @@ internal static ElementLocation FactoryForDeserialization(ITranslator translator
         /// </summary>
         internal static ElementLocation Create(string file)
         {
-            return Create(file, 0, 0);
+            return new ElementLocation.SmallElementLocation(file, 0, 0);
         }
 
         /// <summary>
@@ -185,7 +185,8 @@ internal static ElementLocation Create(string file)
         /// </remarks>
         internal static ElementLocation Create(string file, int line, int column)
         {
-            if (string.IsNullOrEmpty(file) && line == 0 && column == 0)
+            // return EmptyLocation;
+            if (line == 0 && column == 0 && string.IsNullOrEmpty(file))
             {
                 return EmptyLocation;
             }
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 712307191f4..aaeb329f765 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -2374,7 +2374,8 @@ private bool EvaluateCondition(ProjectElement element, string condition, Expande
                 return true;
             }
 
-            using (_evaluationProfiler.TrackCondition(element.ConditionLocation, condition))
+            ElementLocation location = element.ConditionLocation;
+            using (_evaluationProfiler.TrackCondition(location, condition))
             {
                 bool result = ConditionEvaluator.EvaluateCondition
                     (
@@ -2383,7 +2384,7 @@ private bool EvaluateCondition(ProjectElement element, string condition, Expande
                     _expander,
                     expanderOptions,
                     GetCurrentDirectoryForConditionEvaluation(element),
-                    element.ConditionLocation,
+                    location,
                     _evaluationLoggingContext.LoggingService,
                     _evaluationLoggingContext.BuildEventContext,
                     _evaluationContext.FileSystem
@@ -2413,7 +2414,8 @@ private bool EvaluateConditionCollectingConditionedProperties(ProjectElement ele
                 return EvaluateCondition(element, condition, expanderOptions, parserOptions);
             }
 
-            using (_evaluationProfiler.TrackCondition(element.ConditionLocation, condition))
+            ElementLocation location = element.ConditionLocation;
+            using (_evaluationProfiler.TrackCondition(location, condition))
             {
                 bool result = ConditionEvaluator.EvaluateConditionCollectingConditionedProperties
                     (
@@ -2423,7 +2425,7 @@ private bool EvaluateConditionCollectingConditionedProperties(ProjectElement ele
                     expanderOptions,
                     _data.ConditionedProperties,
                     GetCurrentDirectoryForConditionEvaluation(element),
-                    element.ConditionLocation,
+                    location,
                     _evaluationLoggingContext.LoggingService,
                     _evaluationLoggingContext.BuildEventContext,
                     _evaluationContext.FileSystem,
