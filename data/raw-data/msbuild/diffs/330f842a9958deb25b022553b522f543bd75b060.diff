diff --git a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs
index 7a0b2d7220a..6738aa7b705 100644
--- a/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs
+++ b/src/Build/Logging/BinaryLogger/Postprocessing/ArchiveFileEventArgsExtensions.cs
@@ -7,6 +7,27 @@ namespace Microsoft.Build.Logging;
 
 public static class ArchiveFileEventArgsExtensions
 {
+    /// <summary>
+    /// Helper method that allows to subscribe to <see cref="IBuildFileReader.ArchiveFileEncountered"/> event via <see cref="IBuildEventStringsReader.StringReadDone"/> event handler.
+    ///
+    /// This applies only when subscriber is OK with greedy reading entire content of the file and is interested only in the individual strings (e.g. for sensitive data redaction purposes),
+    ///  without distinction what each individual string means (e.g. they do not care about distinction between path and content or between individual files - they just need all textual data).
+    ///
+    /// <example>
+    /// <code>
+    /// private void OnStringReadDone(StringReadEventArgs e)
+    /// {
+    ///     e.StringToBeUsed = e.StringToBeUsed.Replace("foo", "bar");
+    /// }
+    ///
+    /// private void SubscribeToEvents()
+    /// {
+    ///     reader.StringReadDone += OnStringReadDone;
+    ///     reader.ArchiveFileEncountered += ((Action&lt;StringReadEventArgs&gt;)OnStringReadDone).ToArchiveFileHandler();
+    /// }
+    /// </code>
+    /// </example>
+    /// </summary>
     public static Action<ArchiveFileEventArgs> ToArchiveFileHandler(this Action<StringReadEventArgs> stringHandler)
     {
         return args =>
