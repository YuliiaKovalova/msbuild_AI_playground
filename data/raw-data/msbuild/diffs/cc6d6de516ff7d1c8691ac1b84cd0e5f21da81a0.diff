diff --git a/src/Build/Collections/PropertyDictionary.cs b/src/Build/Collections/PropertyDictionary.cs
index 4a46d2d201d..3f55b17a06d 100644
--- a/src/Build/Collections/PropertyDictionary.cs
+++ b/src/Build/Collections/PropertyDictionary.cs
@@ -553,13 +553,11 @@ internal IEnumerable<TResult> Filter<TResult>(Func<T, bool> filter, Func<T, TRes
         {
             lock (_properties)
             {
-                ICollection<T> propertiesCollection = (ICollection<T>)_properties;
-                List<TResult> result = new(propertiesCollection.Count);
-
                 // PERF: Prefer using struct enumerators from the concrete types to avoid allocations.
                 // RetrievableValuedEntryHashSet implements a struct enumerator.
                 if (_properties is RetrievableValuedEntryHashSet<T> hashSet)
                 {
+                    List<TResult> result = new(hashSet.Count);
                     foreach (T property in hashSet)
                     {
                         if (filter(property))
@@ -567,9 +565,13 @@ internal IEnumerable<TResult> Filter<TResult>(Func<T, bool> filter, Func<T, TRes
                             result.Add(selector(property));
                         }
                     }
+
+                    return result;
                 }
                 else
                 {
+                    ICollection<T> propertiesCollection = _properties;
+                    List<TResult> result = new(propertiesCollection.Count);
                     foreach (T property in propertiesCollection)
                     {
                         if (filter(property))
@@ -577,9 +579,9 @@ internal IEnumerable<TResult> Filter<TResult>(Func<T, bool> filter, Func<T, TRes
                             result.Add(selector(property));
                         }
                     }
-                }
 
-                return result;
+                    return result;
+                }
             }
         }
     }
