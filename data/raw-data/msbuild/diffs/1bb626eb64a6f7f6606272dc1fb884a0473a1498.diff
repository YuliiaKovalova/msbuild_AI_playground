diff --git a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
index 12597da0a86..68528380552 100644
--- a/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
+++ b/src/Build/BuildCheck/Infrastructure/BuildCheckBuildEventHandler.cs
@@ -21,7 +21,7 @@ internal class BuildCheckBuildEventHandler
 
     private readonly Dictionary<Type, Action<BuildEventArgs>> _eventHandlers;
 
-    private bool isRestoring = false;
+    private bool _isRestoring = false;
 
     internal BuildCheckBuildEventHandler(
         IAnalysisContextFactory analyzerContextFactory,
@@ -51,9 +51,8 @@ public void HandleBuildEvent(BuildEventArgs e)
     {
         // Skip event handling during restore phase
         if (
-            isRestoring &&
-            e.GetType() != typeof(BuildSubmissionStartedEventArgs) &&
-            e.BuildEventContext is not null)
+            _isRestoring &&
+            e.GetType() != typeof(BuildSubmissionStartedEventArgs))
         {
             return;
         }
@@ -66,15 +65,8 @@ public void HandleBuildEvent(BuildEventArgs e)
 
     private void HandleBuildSubmissionStartedEvent(BuildSubmissionStartedEventArgs eventArgs)
     {
-        if (isRestoring)
-        {
-            isRestoring = false;
-        }
-        else
-        {
-            eventArgs.GlobalProperties.TryGetValue(MSBuildConstants.MSBuildIsRestoring, out string? restoreProperty);
-            isRestoring = restoreProperty is not null ? Convert.ToBoolean(restoreProperty) : false;
-        }
+        eventArgs.GlobalProperties.TryGetValue(MSBuildConstants.MSBuildIsRestoring, out string? restoreProperty);
+        _isRestoring = restoreProperty is not null ? Convert.ToBoolean(restoreProperty) : false;
     }
 
     private void HandleProjectEvaluationFinishedEvent(ProjectEvaluationFinishedEventArgs eventArgs)
