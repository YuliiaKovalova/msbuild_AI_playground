diff --git a/eng/Packages.props b/eng/Packages.props
index b6e51805983..55d9bbeb153 100644
--- a/eng/Packages.props
+++ b/eng/Packages.props
@@ -22,7 +22,8 @@
     <PackageReference Update="System.Configuration.ConfigurationManager" Version="4.7.0" />
     <PackageReference Update="System.Net.Http" Version="4.3.4" />
     <PackageReference Update="System.Memory" Version="4.5.4" />
-    <PackageReference Update="System.Reflection.Metadata" Version="1.6.0" />
+    <PackageReference Update="System.Reflection.Metadata" Version="5.0.0" />
+    <PackageReference Update="System.Reflection.MetadataLoadContext" Version="5.0.0" />
     <PackageReference Update="System.Resources.Extensions" Version="$(SystemResourcesExtensionsPackageVersion)" />
     <PackageReference Update="System.Runtime.CompilerServices.Unsafe" Version="6.0.0" />
     <PackageReference Update="System.Security.Cryptography.Pkcs" Version="4.7.0" />
diff --git a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
index 37433613a00..15e1b90d47b 100644
--- a/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
+++ b/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs
@@ -279,7 +279,7 @@ string taskProjectFile
             {
                 ErrorUtilities.VerifyThrowArgumentLength(taskName, nameof(taskName));
                 _taskName = taskName;
-                _loadedType = _typeLoader.Load(taskName, loadInfo);
+                _loadedType = _typeLoader.Load(taskName, loadInfo, _taskHostFactoryExplicitlyRequested);
                 ProjectErrorUtilities.VerifyThrowInvalidProject(_loadedType != null, elementLocation, "TaskLoadFailure", taskName, loadInfo.AssemblyLocation, String.Empty);
             }
             catch (TargetInvocationException e)
diff --git a/src/Build/Instance/TaskRegistry.cs b/src/Build/Instance/TaskRegistry.cs
index 390f8e29f92..99c497dcfc3 100644
--- a/src/Build/Instance/TaskRegistry.cs
+++ b/src/Build/Instance/TaskRegistry.cs
@@ -1327,7 +1327,7 @@ private bool GetTaskFactory(TargetLoggingContext targetLoggingContext, ElementLo
                                 }
 
                                 // Make sure we only look for task factory classes when loading based on the name
-                                loadedType = s_taskFactoryTypeLoader.Load(TaskFactoryAttributeName, taskFactoryLoadInfo);
+                                loadedType = s_taskFactoryTypeLoader.Load(TaskFactoryAttributeName, taskFactoryLoadInfo, false);
 
                                 if (loadedType == null)
                                 {
diff --git a/src/Build/Logging/LoggerDescription.cs b/src/Build/Logging/LoggerDescription.cs
index 560d96c4c30..58f41145ce0 100644
--- a/src/Build/Logging/LoggerDescription.cs
+++ b/src/Build/Logging/LoggerDescription.cs
@@ -201,7 +201,7 @@ private ILogger CreateLogger(bool forwardingLogger)
                 if (forwardingLogger)
                 {
                     // load the logger from its assembly
-                    LoadedType loggerClass = (new TypeLoader(s_forwardingLoggerClassFilter)).Load(_loggerClassName, _loggerAssembly);
+                    LoadedType loggerClass = (new TypeLoader(s_forwardingLoggerClassFilter)).Load(_loggerClassName, _loggerAssembly, false);
 
                     if (loggerClass != null)
                     {
@@ -212,7 +212,7 @@ private ILogger CreateLogger(bool forwardingLogger)
                 else
                 {
                     // load the logger from its assembly
-                    LoadedType loggerClass = (new TypeLoader(s_loggerClassFilter)).Load(_loggerClassName, _loggerAssembly);
+                    LoadedType loggerClass = (new TypeLoader(s_loggerClassFilter)).Load(_loggerClassName, _loggerAssembly, false);
 
                     if (loggerClass != null)
                     {
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index c25e4dc39fe..eb717f7f7e2 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -35,6 +35,7 @@
     <PackageReference Include="System.Text.Json" />
 
     <PackageReference Include="System.Reflection.Metadata" Condition="'$(MonoBuild)' == 'true'" />
+    <PackageReference Include="System.Reflection.MetadataLoadContext" />
 
     <PackageReference Include="Microsoft.IO.Redist" Condition="'$(FeatureMSIORedist)' == 'true'" />
   </ItemGroup>
diff --git a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
index adb4e7931cc..5b4bd05d8a6 100644
--- a/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
+++ b/src/MSBuild/OutOfProcTaskAppDomainWrapperBase.cs
@@ -115,7 +115,7 @@ IDictionary<string, TaskParameter> taskParams
             try
             {
                 TypeLoader typeLoader = new TypeLoader(TaskLoader.IsTaskClass);
-                taskType = typeLoader.Load(taskName, AssemblyLoadInfo.Create(null, taskLocation));
+                taskType = typeLoader.Load(taskName, AssemblyLoadInfo.Create(null, taskLocation), false);
             }
             catch (Exception e) when (!ExceptionHandling.IsCriticalException(e))
             {
diff --git a/src/MSBuildTaskHost/TypeLoader.cs b/src/MSBuildTaskHost/TypeLoader.cs
index 5b4833472c4..57ccdb7b7dd 100644
--- a/src/MSBuildTaskHost/TypeLoader.cs
+++ b/src/MSBuildTaskHost/TypeLoader.cs
@@ -130,7 +130,8 @@ internal static bool IsPartialTypeNameMatch(string typeName1, string typeName2)
         internal LoadedType Load
         (
             string typeName,
-            AssemblyLoadInfo assembly
+            AssemblyLoadInfo assembly,
+            bool _
         )
         {
             return GetLoadedType(s_cacheOfLoadedTypesByFilter, typeName, assembly);
diff --git a/src/Package/MSBuild.VSSetup/files.swr b/src/Package/MSBuild.VSSetup/files.swr
index 8de7164fde5..9c3da0b3224 100644
--- a/src/Package/MSBuild.VSSetup/files.swr
+++ b/src/Package/MSBuild.VSSetup/files.swr
@@ -39,6 +39,7 @@ folder InstallDir:\MSBuild\Current\Bin
   file source=$(TaskHostBinPath)MSBuildTaskHost.exe.config
   file source=$(X86BinPath)System.Buffers.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
   file source=$(X86BinPath)System.Memory.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
+  file source=$(X86BinPath)System.Reflection.MetadataLoadContext.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
   file source=$(X86BinPath)System.Text.Json.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
   file source=$(X86BinPath)Microsoft.Bcl.AsyncInterfaces.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
   file source=$(X86BinPath)System.Text.Encodings.Web.dll vs.file.ngenApplications="[installDir]\MSBuild\Current\Bin\MSBuild.exe" vs.file.ngenArchitecture=all vs.file.ngenPriority=1
@@ -184,6 +185,7 @@ folder InstallDir:\MSBuild\Current\Bin\amd64
   file source=$(X86BinPath)Microsoft.Build.Utilities.Core.dll vs.file.ngenArchitecture=all
   file source=$(X86BinPath)System.Buffers.dll vs.file.ngenArchitecture=all
   file source=$(X86BinPath)System.Memory.dll vs.file.ngenArchitecture=all
+  file source=$(X86BinPath)System.Reflection.MetadataLoadContext.dll vs.file.ngenArchitecture=all
   file source=$(X86BinPath)System.Text.Json.dll vs.file.ngenArchitecture=all
   file source=$(X86BinPath)Microsoft.Bcl.AsyncInterfaces.dll vs.file.ngenArchitecture=all
   file source=$(X86BinPath)Microsoft.IO.Redist.dll vs.file.ngenArchitecture=all
diff --git a/src/Shared/LoadedType.cs b/src/Shared/LoadedType.cs
index eeae7eb79ab..e872e6c6a68 100644
--- a/src/Shared/LoadedType.cs
+++ b/src/Shared/LoadedType.cs
@@ -2,6 +2,7 @@
 // Licensed under the MIT license. See LICENSE file in the project root for full license information.
 
 using System;
+using System.Collections.Generic;
 using System.Reflection;
 using Microsoft.Build.Framework;
 
@@ -20,8 +21,8 @@ internal sealed class LoadedType
         /// <summary>
         /// Creates an instance of this class for the given type.
         /// </summary>
-        internal LoadedType(Type type, AssemblyLoadInfo assemblyLoadInfo)
-            : this(type, assemblyLoadInfo, null)
+        internal LoadedType(Type type, AssemblyLoadInfo assemblyLoadInfo, Dictionary<string, Type> otherTypes = null)
+            : this(type, assemblyLoadInfo, null, otherTypes)
         {
         }
 
@@ -31,7 +32,7 @@ internal LoadedType(Type type, AssemblyLoadInfo assemblyLoadInfo)
         /// <param name="type">The Type to be loaded</param>
         /// <param name="assemblyLoadInfo">Information used to load the assembly</param>
         /// <param name="loadedAssembly">The assembly which has been loaded, if any</param>
-        internal LoadedType(Type type, AssemblyLoadInfo assemblyLoadInfo, Assembly loadedAssembly)
+        internal LoadedType(Type type, AssemblyLoadInfo assemblyLoadInfo, Assembly loadedAssembly, Dictionary<string, Type> otherTypes = null)
         {
             ErrorUtilities.VerifyThrow(type != null, "We must have the type.");
             ErrorUtilities.VerifyThrow(assemblyLoadInfo != null, "We must have the assembly the type was loaded from.");
@@ -41,8 +42,11 @@ internal LoadedType(Type type, AssemblyLoadInfo assemblyLoadInfo, Assembly loade
             _loadedAssembly = loadedAssembly;
 
             CheckForHardcodedSTARequirement();
-            HasLoadInSeparateAppDomainAttribute();
-            HasSTAThreadAttribute();
+            _hasLoadInSeparateAppDomainAttribute = this.Type.GetTypeInfo().IsDefined(otherTypes?.TryGetValue("LoadInSeparateAppDomainAttribute", out Type appDomainAttr) == true ? appDomainAttr : typeof(LoadInSeparateAppDomainAttribute), true /* inherited */);
+            if (_hasSTAThreadAttribute is null)
+            {
+                _hasSTAThreadAttribute = this.Type.GetTypeInfo().IsDefined(otherTypes?.TryGetValue("RunInSTAAttribute", out Type STAAttr) == true ? STAAttr : typeof(RunInSTAAttribute), true /* inherited */);
+            }
         }
 
 
@@ -56,11 +60,6 @@ internal LoadedType(Type type, AssemblyLoadInfo assemblyLoadInfo, Assembly loade
         /// <returns></returns>
         public bool HasLoadInSeparateAppDomainAttribute()
         {
-            if (_hasLoadInSeparateAppDomainAttribute == null)
-            {
-                _hasLoadInSeparateAppDomainAttribute = this.Type.GetTypeInfo().IsDefined(typeof(LoadInSeparateAppDomainAttribute), true /* inherited */);
-            }
-
             return (bool)_hasLoadInSeparateAppDomainAttribute;
         }
 
@@ -71,11 +70,6 @@ public bool HasLoadInSeparateAppDomainAttribute()
         /// <returns></returns>
         public bool HasSTAThreadAttribute()
         {
-            if (_hasSTAThreadAttribute == null)
-            {
-                _hasSTAThreadAttribute = this.Type.GetTypeInfo().IsDefined(typeof(RunInSTAAttribute), true /* inherited */);
-            }
-
             return (bool)_hasSTAThreadAttribute;
         }
 
diff --git a/src/Shared/TypeLoader.cs b/src/Shared/TypeLoader.cs
index fe5ea680c49..750f59fb5df 100644
--- a/src/Shared/TypeLoader.cs
+++ b/src/Shared/TypeLoader.cs
@@ -7,7 +7,12 @@
 using System.Diagnostics;
 using System.Diagnostics.CodeAnalysis;
 using System.IO;
+using System.Linq;
 using System.Reflection;
+using System.Runtime.InteropServices;
+#if !NETFRAMEWORK
+using System.Runtime.Loader;
+#endif
 using System.Threading;
 
 #nullable disable
@@ -132,47 +137,6 @@ internal static bool IsPartialTypeNameMatch(string typeName1, string typeName2)
             return isPartialMatch;
         }
 
-        /// <summary>
-        /// Load an assembly given its AssemblyLoadInfo
-        /// </summary>
-        /// <param name="assemblyLoadInfo"></param>
-        /// <returns></returns>
-        private static Assembly LoadAssembly(AssemblyLoadInfo assemblyLoadInfo)
-        {
-            Assembly loadedAssembly = null;
-
-            try
-            {
-                if (assemblyLoadInfo.AssemblyName != null)
-                {
-#if !FEATURE_ASSEMBLYLOADCONTEXT
-                    loadedAssembly = Assembly.Load(assemblyLoadInfo.AssemblyName);
-#else
-                    loadedAssembly = Assembly.Load(new AssemblyName(assemblyLoadInfo.AssemblyName));
-#endif
-                }
-                else
-                {
-#if !FEATURE_ASSEMBLYLOADCONTEXT
-                    loadedAssembly = Assembly.UnsafeLoadFrom(assemblyLoadInfo.AssemblyFile);
-#else
-                    var baseDir = Path.GetDirectoryName(assemblyLoadInfo.AssemblyFile);
-                    s_coreClrAssemblyLoader.AddDependencyLocation(baseDir);
-                    loadedAssembly = s_coreClrAssemblyLoader.LoadFromPath(assemblyLoadInfo.AssemblyFile);
-#endif
-                }
-            }
-            catch (ArgumentException e)
-            {
-                // Assembly.Load() and Assembly.LoadFrom() will throw an ArgumentException if the assembly name is invalid
-                // convert to a FileNotFoundException because it's more meaningful
-                // NOTE: don't use ErrorUtilities.VerifyThrowFileExists() here because that will hit the disk again
-                throw new FileNotFoundException(null, assemblyLoadInfo.AssemblyLocation, e);
-            }
-
-            return loadedAssembly;
-        }
-
         /// <summary>
         /// Loads the specified type if it exists in the given assembly. If the type name is fully qualified, then a match (if
         /// any) is unambiguous; otherwise, if there are multiple types with the same name in different namespaces, the first type
@@ -181,10 +145,11 @@ private static Assembly LoadAssembly(AssemblyLoadInfo assemblyLoadInfo)
         internal LoadedType Load
         (
             string typeName,
-            AssemblyLoadInfo assembly
+            AssemblyLoadInfo assembly,
+            bool useTaskHost
         )
         {
-            return GetLoadedType(s_cacheOfLoadedTypesByFilter, typeName, assembly);
+            return GetLoadedType(s_cacheOfLoadedTypesByFilter, typeName, assembly, useTaskHost);
         }
 
         /// <summary>
@@ -199,7 +164,7 @@ internal LoadedType ReflectionOnlyLoad
             AssemblyLoadInfo assembly
         )
         {
-            return GetLoadedType(s_cacheOfReflectionOnlyLoadedTypesByFilter, typeName, assembly);
+            return GetLoadedType(s_cacheOfReflectionOnlyLoadedTypesByFilter, typeName, assembly, false);
         }
 
         /// <summary>
@@ -207,7 +172,7 @@ AssemblyLoadInfo assembly
         /// any) is unambiguous; otherwise, if there are multiple types with the same name in different namespaces, the first type
         /// found will be returned.
         /// </summary>
-        private LoadedType GetLoadedType(ConcurrentDictionary<Func<Type, object, bool>, ConcurrentDictionary<AssemblyLoadInfo, AssemblyInfoToLoadedTypes>> cache, string typeName, AssemblyLoadInfo assembly)
+        private LoadedType GetLoadedType(ConcurrentDictionary<Func<Type, object, bool>, ConcurrentDictionary<AssemblyLoadInfo, AssemblyInfoToLoadedTypes>> cache, string typeName, AssemblyLoadInfo assembly, bool useTaskHost)
         {
             // A given type filter have been used on a number of assemblies, Based on the type filter we will get another dictionary which 
             // will map a specific AssemblyLoadInfo to a AssemblyInfoToLoadedTypes class which knows how to find a typeName in a given assembly.
@@ -218,7 +183,7 @@ private LoadedType GetLoadedType(ConcurrentDictionary<Func<Type, object, bool>,
             AssemblyInfoToLoadedTypes typeNameToType =
                 loadInfoToType.GetOrAdd(assembly, (_) => new AssemblyInfoToLoadedTypes(_isDesiredType, _));
 
-            return typeNameToType.GetLoadedTypeByTypeName(typeName);
+            return typeNameToType.GetLoadedTypeByTypeName(typeName, useTaskHost);
         }
 
         /// <summary>
@@ -249,7 +214,7 @@ private class AssemblyInfoToLoadedTypes
             /// <summary>
             /// What is the type for the given type name, this may be null if the typeName does not map to a type.
             /// </summary>
-            private ConcurrentDictionary<string, Type> _typeNameToType;
+            private ConcurrentDictionary<string, (Type, Dictionary<string, Type>)> _typeNameToType;
 
             /// <summary>
             /// List of public types in the assembly which match the type filter and their corresponding types
@@ -278,20 +243,19 @@ internal AssemblyInfoToLoadedTypes(Func<Type, object, bool> typeFilter, Assembly
 
                 _isDesiredType = typeFilter;
                 _assemblyLoadInfo = loadInfo;
-                _typeNameToType = new ConcurrentDictionary<string, Type>(StringComparer.OrdinalIgnoreCase);
+                _typeNameToType = new(StringComparer.OrdinalIgnoreCase);
                 _publicTypeNameToType = new Dictionary<string, Type>(StringComparer.OrdinalIgnoreCase);
             }
 
             /// <summary>
             /// Determine if a given type name is in the assembly or not. Return null if the type is not in the assembly
             /// </summary>
-            internal LoadedType GetLoadedTypeByTypeName(string typeName)
+            internal LoadedType GetLoadedTypeByTypeName(string typeName, bool useTaskHost)
             {
                 ErrorUtilities.VerifyThrowArgumentNull(typeName, nameof(typeName));
 
                 // Only one thread should be doing operations on this instance of the object at a time.
-
-                Type type = _typeNameToType.GetOrAdd(typeName, (key) =>
+                (Type type, Dictionary<string, Type> otherTypes) type = _typeNameToType.GetOrAdd(typeName, (key) =>
                 {
                     if ((_assemblyLoadInfo.AssemblyName != null) && (typeName.Length > 0))
                     {
@@ -301,7 +265,7 @@ internal LoadedType GetLoadedTypeByTypeName(string typeName)
                             Type t2 = Type.GetType(typeName + "," + _assemblyLoadInfo.AssemblyName, false /* don't throw on error */, true /* case-insensitive */);
                             if (t2 != null)
                             {
-                                return !_isDesiredType(t2, null) ? null : t2;
+                                return (!_isDesiredType(t2, null) ? null : t2, null);
                             }
                         }
                         catch (ArgumentException)
@@ -312,13 +276,14 @@ internal LoadedType GetLoadedTypeByTypeName(string typeName)
                         }
                     }
 
+                    Dictionary<string, Type> otherTypes = null;
                     if (Interlocked.Read(ref _haveScannedPublicTypes) == 0)
                     {
                         lock (_lockObject)
                         {
                             if (Interlocked.Read(ref _haveScannedPublicTypes) == 0)
                             {
-                                ScanAssemblyForPublicTypes();
+                                otherTypes = ScanAssemblyForPublicTypes(useTaskHost);
                                 Interlocked.Exchange(ref _haveScannedPublicTypes, ~0);
                             }
                         }
@@ -329,25 +294,24 @@ internal LoadedType GetLoadedTypeByTypeName(string typeName)
                         // if type matches partially on its name
                         if (typeName.Length == 0 || TypeLoader.IsPartialTypeNameMatch(desiredTypeInAssembly.Key, typeName))
                         {
-                            return desiredTypeInAssembly.Value;
+                            return (desiredTypeInAssembly.Value, otherTypes);
                         }
                     }
 
-                    return null;
+                    return (null, null);
                 });
 
-                return type != null ? new LoadedType(type, _assemblyLoadInfo, _loadedAssembly) : null;
+                return type.type != null ? new LoadedType(type.type, _assemblyLoadInfo, _loadedAssembly, type.otherTypes) : null;
             }
 
             /// <summary>
             /// Scan the assembly pointed to by the assemblyLoadInfo for public types. We will use these public types to do partial name matching on 
             /// to find tasks, loggers, and task factories.
             /// </summary>
-            [SuppressMessage("Microsoft.Reliability", "CA2001:AvoidCallingProblematicMethods", MessageId = "System.Reflection.Assembly.LoadFrom", Justification = "Necessary in this case.")]
-            private void ScanAssemblyForPublicTypes()
+            private Dictionary<string, Type> ScanAssemblyForPublicTypes(bool useTaskHost)
             {
                 // we need to search the assembly for the type...
-                _loadedAssembly = LoadAssembly(_assemblyLoadInfo);
+                Dictionary<string, Type> typeReferences = useTaskHost ? LoadAssemblyUsingMetadataLoadContext(_assemblyLoadInfo) : LoadAssembly(_assemblyLoadInfo);
 
                 // only look at public types
                 Type[] allPublicTypesInAssembly = _loadedAssembly.GetExportedTypes();
@@ -358,6 +322,86 @@ private void ScanAssemblyForPublicTypes()
                         _publicTypeNameToType.Add(publicType.FullName, publicType);
                     }
                 }
+
+                return typeReferences;
+            }
+
+            /// <summary>
+            /// Load an assembly given its AssemblyLoadInfo
+            /// </summary>
+            /// <param name="assemblyLoadInfo"></param>
+            /// <returns></returns>
+            private Dictionary<string, Type> LoadAssembly(AssemblyLoadInfo assemblyLoadInfo)
+            {
+                try
+                {
+                    if (assemblyLoadInfo.AssemblyName != null)
+                    {
+#if !FEATURE_ASSEMBLYLOADCONTEXT
+                        _loadedAssembly = Assembly.Load(assemblyLoadInfo.AssemblyName);
+#else
+                    _loadedAssembly = Assembly.Load(new AssemblyName(assemblyLoadInfo.AssemblyName));
+#endif
+                    }
+                    else
+                    {
+#if !FEATURE_ASSEMBLYLOADCONTEXT
+                        _loadedAssembly = Assembly.UnsafeLoadFrom(assemblyLoadInfo.AssemblyFile);
+#else
+                    var baseDir = Path.GetDirectoryName(assemblyLoadInfo.AssemblyFile);
+                    s_coreClrAssemblyLoader.AddDependencyLocation(baseDir);
+                    _loadedAssembly = s_coreClrAssemblyLoader.LoadFromPath(assemblyLoadInfo.AssemblyFile);
+#endif
+                    }
+                }
+                catch (ArgumentException e)
+                {
+                    // Assembly.Load() and Assembly.LoadFrom() will throw an ArgumentException if the assembly name is invalid
+                    // convert to a FileNotFoundException because it's more meaningful
+                    // NOTE: don't use ErrorUtilities.VerifyThrowFileExists() here because that will hit the disk again
+                    throw new FileNotFoundException(null, assemblyLoadInfo.AssemblyLocation, e);
+                }
+
+                return null;
+            }
+
+            private Dictionary<string, Type> LoadAssemblyUsingMetadataLoadContext(AssemblyLoadInfo assemblyLoadInfo)
+            {
+                string path = assemblyLoadInfo.AssemblyFile;
+
+                if (path is null)
+                {
+#if NETFRAMEWORK
+                    AppDomainSetup setup = AppDomain.CurrentDomain.SetupInformation;
+                    setup.LoaderOptimization = LoaderOptimization.SingleDomain;
+                    AppDomain appDomain = AppDomain.CreateDomain("appDomainToFindPath", null, setup);
+                    path = appDomain.Load(new AssemblyName(assemblyLoadInfo.AssemblyName)).Location;
+                    AppDomain.Unload(appDomain);
+#else
+                    AssemblyLoadContext alc = new("loadContextToFindPath", true);
+                    path = alc.LoadFromAssemblyName(new AssemblyName(assemblyLoadInfo.AssemblyName)).Location;
+                    alc.Unload();
+#endif
+                }
+
+                string[] runtimePaths = Directory.GetFiles(RuntimeEnvironment.GetRuntimeDirectory(), "*.dll");
+                string msbuildLocation = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
+                string[] msbuildPaths = Directory.GetFiles(msbuildLocation, "*.dll");
+                List<string> localPaths = new(Directory.GetFiles(Path.GetDirectoryName(path), "*.dll"));
+                localPaths.AddRange(msbuildPaths);
+                localPaths.AddRange(runtimePaths);
+
+                MetadataLoadContext loadContext = new(new PathAssemblyResolver(localPaths));
+                _loadedAssembly = loadContext.LoadFromAssemblyPath(path);
+
+                Dictionary<string, Type> otherTypes = new();
+                Assembly frameworkAssembly = loadContext.LoadFromAssemblyPath(Path.Combine(msbuildLocation, "Microsoft.Build.Framework.dll"));
+                IEnumerable<Type> types = frameworkAssembly.GetExportedTypes().Where(t => t.Name.Equals("LoadInSeparateAppDomainAttribute") || t.Name.Equals("RunInSTAAttribute") || t.Name.Equals("IGeneratedTask"));
+                foreach (Type t in types)
+                {
+                    otherTypes.Add(t.Name, t);
+                }
+                return otherTypes;
             }
         }
     }
diff --git a/src/Shared/UnitTests/TypeLoader_Tests.cs b/src/Shared/UnitTests/TypeLoader_Tests.cs
index 9fb112d8c03..96c4a5d66d5 100644
--- a/src/Shared/UnitTests/TypeLoader_Tests.cs
+++ b/src/Shared/UnitTests/TypeLoader_Tests.cs
@@ -200,13 +200,13 @@ public void Regress640476PartialName()
         {
             string forwardingLoggerLocation = typeof(Microsoft.Build.Logging.ConfigurableForwardingLogger).Assembly.Location;
             TypeLoader loader = new TypeLoader(IsForwardingLoggerClass);
-            LoadedType loadedType = loader.Load("ConfigurableForwardingLogger", AssemblyLoadInfo.Create(null, forwardingLoggerLocation));
+            LoadedType loadedType = loader.Load("ConfigurableForwardingLogger", AssemblyLoadInfo.Create(null, forwardingLoggerLocation), false);
             Assert.NotNull(loadedType);
             Assert.Equal(forwardingLoggerLocation, loadedType.Assembly.AssemblyLocation);
 
             string fileLoggerLocation = typeof(Microsoft.Build.Logging.FileLogger).Assembly.Location;
             loader = new TypeLoader(IsLoggerClass);
-            loadedType = loader.Load("FileLogger", AssemblyLoadInfo.Create(null, fileLoggerLocation));
+            loadedType = loader.Load("FileLogger", AssemblyLoadInfo.Create(null, fileLoggerLocation), false);
             Assert.NotNull(loadedType);
             Assert.Equal(fileLoggerLocation, loadedType.Assembly.AssemblyLocation);
         }
@@ -221,14 +221,14 @@ public void Regress640476FullyQualifiedName()
             Type forwardingLoggerType = typeof(Microsoft.Build.Logging.ConfigurableForwardingLogger);
             string forwardingLoggerLocation = forwardingLoggerType.Assembly.Location;
             TypeLoader loader = new TypeLoader(IsForwardingLoggerClass);
-            LoadedType loadedType = loader.Load(forwardingLoggerType.FullName, AssemblyLoadInfo.Create(null, forwardingLoggerLocation));
+            LoadedType loadedType = loader.Load(forwardingLoggerType.FullName, AssemblyLoadInfo.Create(null, forwardingLoggerLocation), false);
             Assert.NotNull(loadedType);
             Assert.Equal(forwardingLoggerLocation, loadedType.Assembly.AssemblyLocation);
 
             Type fileLoggerType = typeof(Microsoft.Build.Logging.FileLogger);
             string fileLoggerLocation = fileLoggerType.Assembly.Location;
             loader = new TypeLoader(IsLoggerClass);
-            loadedType = loader.Load(fileLoggerType.FullName, AssemblyLoadInfo.Create(null, fileLoggerLocation));
+            loadedType = loader.Load(fileLoggerType.FullName, AssemblyLoadInfo.Create(null, fileLoggerLocation), false);
             Assert.NotNull(loadedType);
             Assert.Equal(fileLoggerLocation, loadedType.Assembly.AssemblyLocation);
         }
@@ -248,7 +248,7 @@ public void NoTypeNamePicksFirstType()
             Type firstPublicType = FirstPublicDesiredType(forwardingLoggerfilter, forwardingLoggerAssemblyLocation);
 
             TypeLoader loader = new TypeLoader(forwardingLoggerfilter);
-            LoadedType loadedType = loader.Load(String.Empty, AssemblyLoadInfo.Create(null, forwardingLoggerAssemblyLocation));
+            LoadedType loadedType = loader.Load(String.Empty, AssemblyLoadInfo.Create(null, forwardingLoggerAssemblyLocation), false);
             Assert.NotNull(loadedType);
             Assert.Equal(forwardingLoggerAssemblyLocation, loadedType.Assembly.AssemblyLocation);
             Assert.Equal(firstPublicType, loadedType.Type);
@@ -260,7 +260,7 @@ public void NoTypeNamePicksFirstType()
             firstPublicType = FirstPublicDesiredType(fileLoggerfilter, fileLoggerAssemblyLocation);
 
             loader = new TypeLoader(fileLoggerfilter);
-            loadedType = loader.Load(String.Empty, AssemblyLoadInfo.Create(null, fileLoggerAssemblyLocation));
+            loadedType = loader.Load(String.Empty, AssemblyLoadInfo.Create(null, fileLoggerAssemblyLocation), false);
             Assert.NotNull(loadedType);
             Assert.Equal(fileLoggerAssemblyLocation, loadedType.Assembly.AssemblyLocation);
             Assert.Equal(firstPublicType, loadedType.Type);
