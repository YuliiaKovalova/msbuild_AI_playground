diff --git a/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs b/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
index 57f3a2dc6dc..06827f116b9 100644
--- a/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ConstructionEditing_Tests.cs
@@ -2313,14 +2313,15 @@ public void InvalidChooseOverflow()
         [Fact]
         public void Dirtying_ItemCondition()
         {
-            using XmlReader content = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var projectFileContents = ObjectModelHelpers.CleanupFileContents(
 @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
   <ItemGroup>
     <i Include=""i1"" />
   </ItemGroup>
-</Project>")));
+</Project>");
 
-            Project project = new Project(content);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             ProjectItem item = Helpers.GetFirst(project.Items);
 
             item.Xml.Condition = "false";
@@ -2338,16 +2339,17 @@ public void Dirtying_ItemCondition()
         [Fact]
         public void Dirtying_MetadataCondition()
         {
-            using XmlReader content = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
 @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
   <ItemGroup>
     <i Include=""i1"">
       <m>m1</m>
     </i>
   </ItemGroup>
-</Project>")));
+</Project>");
 
-            Project project = new Project(content);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
             ProjectMetadata metadatum = Helpers.GetFirst(project.Items).GetMetadata("m");
 
             metadatum.Xml.Condition = "false";
diff --git a/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
index 8279b2d2217..f4bb4443fcb 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectChooseElement_Tests.cs
@@ -193,9 +193,8 @@ public void ReadChooseOnlyWhen()
                         </Choose>
                     </Project>
                 ";
-
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectChooseElement choose = (ProjectChooseElement)Helpers.GetFirst(project.Children);
 
             Assert.Equal(1, Helpers.Count(choose.WhenElements));
@@ -218,8 +217,8 @@ public void ReadChooseBothWhenOtherwise()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectChooseElement choose = (ProjectChooseElement)Helpers.GetFirst(project.Children);
 
             List<ProjectWhenElement> whens = Helpers.MakeList(choose.WhenElements);
@@ -272,8 +271,8 @@ public void SettingWhenConditionDirties()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
             ProjectChooseElement choose = Helpers.GetFirst(project.Xml.ChooseElements);
             ProjectWhenElement when = Helpers.GetFirst(choose.WhenElements);
             when.Condition = "false";
diff --git a/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
index b4b5e79f8c7..218c19b57c1 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectExtensionsElement_Tests.cs
@@ -31,8 +31,8 @@ public void Read()
                  </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectExtensionsElement extensions = (ProjectExtensionsElement)Helpers.GetFirst(project.Children);
 
             Assert.Equal(@"<a />", extensions.Content);
@@ -117,8 +117,8 @@ public void DeleteById()
                  </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectExtensionsElement extensions = (ProjectExtensionsElement)Helpers.GetFirst(project.Children);
             extensions["a"] = String.Empty;
             content = extensions["a"];
@@ -143,8 +143,8 @@ public void GetById()
                  </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectExtensionsElement extensions = (ProjectExtensionsElement)Helpers.GetFirst(project.Children);
 
             content = extensions["b"];
@@ -169,8 +169,8 @@ public void SetById()
                  </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+           using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectExtensionsElement extensions = (ProjectExtensionsElement)Helpers.GetFirst(project.Children);
 
             extensions["c"] = "z";
@@ -192,8 +192,8 @@ public void SetByIdWhereItAlreadyExists()
                  </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+           using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectExtensionsElement extensions = (ProjectExtensionsElement)Helpers.GetFirst(project.Children);
 
             extensions["b"] = "y2";
@@ -211,8 +211,8 @@ private static ProjectExtensionsElement GetEmptyProjectExtensions()
                  </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+           using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectExtensionsElement extensions = (ProjectExtensionsElement)Helpers.GetFirst(project.Children);
             return extensions;
         }
diff --git a/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
index 1729c56e38f..f7567f061ac 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectFormatting_Tests.cs
@@ -108,10 +108,12 @@ public void ProjectAddItemFormatting_StartOfGroup()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                content,
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
+            ProjectRootElement xml = projectRootElementFromString.Project;
+
             Project project = new Project(xml);
             project.AddItem("Compile", "Class1.cs");
             using StringWriter writer = new StringWriter();
@@ -142,10 +144,12 @@ public void ProjectAddItemFormatting_MiddleOfGroup()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                content,
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
+            ProjectRootElement xml = projectRootElementFromString.Project;
+
             Project project = new Project(xml);
             project.AddItem("Compile", "Class2.cs");
             using StringWriter writer = new StringWriter();
@@ -176,10 +180,11 @@ public void ProjectAddItemFormatting_EndOfGroup()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                content,
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             Project project = new Project(xml);
             project.AddItem("Compile", "Program.cs");
             using StringWriter writer = new StringWriter();
@@ -195,7 +200,6 @@ public void ProjectAddItemFormatting_EndOfGroup()
 </Project>");
 
             string actual = writer.ToString();
-
             VerifyAssertLineByLine(expected, actual);
         }
 
@@ -207,10 +211,12 @@ public void ProjectAddItemFormatting_EmptyGroup()
   <ItemGroup>
   </ItemGroup>
 </Project>");
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                content,
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
+            ProjectRootElement xml = projectRootElementFromString.Project;
+
             Project project = new Project(xml);
             project.AddItem("Compile", "Program.cs");
             using StringWriter writer = new EncodingStringWriter();
@@ -235,10 +241,11 @@ public void ProjectAddItemFormatting_NoItemGroup()
 <Project DefaultTargets=`Build` ToolsVersion=`msbuilddefaulttoolsversion` xmlns=`msbuildnamespace`>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                content,
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             Project project = new Project(xml);
             project.AddItem("Compile", "Program.cs");
             using StringWriter writer = new StringWriter();
@@ -268,10 +275,12 @@ public void ProjectRemoveItemFormatting()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                content,
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
+            ProjectRootElement xml = projectRootElementFromString.Project;
+
             Project project = new Project(xml);
 
             var itemToRemove = project.GetItems("Compile").Single(item => item.EvaluatedInclude == "Class2.cs");
@@ -305,10 +314,12 @@ public void ProjectAddItemMetadataFormatting()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                content,
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
+            ProjectRootElement xml = projectRootElementFromString.Project;
+
             Project project = new Project(xml);
 
             var itemToEdit = project.GetItems("Compile").Single(item => item.EvaluatedInclude == "Class2.cs");
@@ -346,9 +357,12 @@ public void PreprocessorFormatting()
   />
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader, ProjectCollection.GlobalProjectCollection,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                content,
+                ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
+            ProjectRootElement xml = projectRootElementFromString.Project;
+
             Project project = new Project(xml);
 
             using StringWriter writer = new StringWriter();
@@ -370,10 +384,12 @@ private void VerifyFormattingPreserved(string projectContents)
 
         private void VerifyFormattingPreservedFromString(string projectContents)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(projectContents));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                projectContents,
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
+            ProjectRootElement xml = projectRootElementFromString.Project;
+
             Project project = new Project(xml);
             using StringWriter writer = new StringWriter();
             project.Save(writer);
@@ -423,10 +439,12 @@ private void VerifyProjectReformatting(string originalContents, string expectedC
 
         private void VerifyProjectReformattingFromString(string originalContents, string expectedContents)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(originalContents));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                originalContents,
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: false);
+            ProjectRootElement xml = projectRootElementFromString.Project;
+
             Project project = new Project(xml);
             using StringWriter writer = new StringWriter();
             project.Save(writer);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
index a713f5fd136..a7dd4f9d1d8 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportElement_Tests.cs
@@ -95,8 +95,8 @@ public void ReadBasic()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             List<ProjectImportElement> imports = Helpers.MakeList(project.Imports);
 
@@ -118,8 +118,8 @@ public void SetProjectValid()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             ProjectImportElement import = (ProjectImportElement)Helpers.GetFirst(project.Children);
 
@@ -175,8 +175,8 @@ public void SettingProjectDirties()
 </Project>",
                     file1);
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader);
+                using ProjectFromString projectFromString = new(content);
+                Project project = projectFromString.Project;
                 ProjectImportElement import = Helpers.GetFirst(project.Xml.Imports);
                 import.Project = file2;
 
@@ -214,8 +214,8 @@ public void SettingConditionDirties()
 </Project>",
                     file);
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader);
+                using ProjectFromString projectFromString = new(content);
+                Project project = projectFromString.Project;
                 ProjectImportElement import = Helpers.GetFirst(project.Xml.Imports);
                 import.Condition = "false";
 
@@ -255,11 +255,11 @@ public void ImportWithRelativePath()
             try
             {
                 Directory.CreateDirectory(testTempPath);
-                using var projectfileReader = XmlReader.Create(new StringReader(projectfileContent));
-                ProjectRootElement project = ProjectRootElement.Create(projectfileReader);
+                using ProjectRootElementFromString projectFileProject = new(projectfileContent);
+                ProjectRootElement project = projectFileProject.Project;
                 project.Save(projectfile);
-                using var targetsfileReader = XmlReader.Create(new StringReader(targetsfileContent));
-                project = ProjectRootElement.Create(targetsfileReader);
+                using ProjectRootElementFromString targetsFileProject = new(targetsfileContent);
+                project = targetsFileProject.Project;
                 project.Save(targetsFile);
                 Project msbuildProject = new Project(projectfile);
             }
diff --git a/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
index 92ab83fb700..924340b3842 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectImportGroupElement_Tests.cs
@@ -31,8 +31,8 @@ public void AddImportWhenNoImportGroupExists()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             project.AddImport("b.proj");
 
@@ -71,8 +71,8 @@ public void AddImportToLastImportGroupWithNoCondition()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             project.AddImport("e.proj");
 
@@ -117,8 +117,8 @@ public void AddImportOnlyConditionedImportGroupsExist()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             project.AddImport("d.proj");
 
@@ -161,8 +161,8 @@ public void ReadNoChild()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             ProjectImportGroupElement importGroup = (ProjectImportGroupElement)Helpers.GetFirst(project.ImportGroups);
 
@@ -261,8 +261,8 @@ public void ReadBasic()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             List<ProjectImportElement> imports = Helpers.MakeList(project.Imports);
             List<ProjectImportGroupElement> importGroups = Helpers.MakeList(project.ImportGroups);
@@ -293,8 +293,8 @@ public void ReadMultipleImportGroups()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             List<ProjectImportElement> imports = Helpers.MakeList(project.Imports);
             List<ProjectImportGroupElement> importGroups = Helpers.MakeList(project.ImportGroups);
@@ -325,8 +325,8 @@ public void SetProjectValid()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             ProjectImportGroupElement importGroup = (ProjectImportGroupElement)Helpers.GetFirst(project.Children);
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs
index f14c72e5b1e..61f7167bbf6 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionElement_Tests.cs
@@ -31,8 +31,8 @@ public void ReadNoChildren()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)Helpers.GetFirst(project.Children);
             ProjectItemDefinitionElement itemDefinition = Helpers.GetFirst(itemDefinitionGroup.ItemDefinitions);
 
@@ -55,8 +55,8 @@ public void ReadBasic()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)Helpers.GetFirst(project.Children);
             ProjectItemDefinitionElement definition = Helpers.GetFirst(itemDefinitionGroup.ItemDefinitions);
 
@@ -84,8 +84,7 @@ public void ReadBuiltInElementName()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement.Create(xmlReader);
+            using ProjectFromString projectFromString = new(content);
         }
 
         /// <summary>
@@ -105,8 +104,8 @@ public void ReadMetadata()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)Helpers.GetFirst(project.Children);
             ProjectItemDefinitionElement itemDefinition = Helpers.GetFirst(itemDefinitionGroup.ItemDefinitions);
 
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
index aa2abfba808..8609f0b9423 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemDefinitionGroupElement_Tests.cs
@@ -56,8 +56,8 @@ public void ReadNoChildren()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)Helpers.GetFirst(project.Children);
 
             Assert.Equal(0, Helpers.Count(itemDefinitionGroup.ItemDefinitions));
@@ -81,8 +81,8 @@ public void ReadBasic()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             var itemDefinitionGroups = Helpers.MakeList(project.ItemDefinitionGroups);
             Assert.Equal(2, itemDefinitionGroups.Count);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
index 6770b5d1baf..dd7d18b3590 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemElement_Tests.cs
@@ -354,8 +354,8 @@ public void ReadInvalidItemAttributeCasing(string project)
                 ")]
         public void ReadBasic(string project)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(project));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(project);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var items = Helpers.MakeList(itemGroup.Items);
@@ -407,8 +407,8 @@ public void ReadBasic(string project)
                 ")]
         public void ReadMetadata(string project)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(project));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(project);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
             ProjectItemElement item = Helpers.GetFirst(itemGroup.Items);
 
@@ -1038,8 +1038,9 @@ public void SettingItemUpdateDirties()
 
         private static ProjectItemElement GetItemFromContent(string content)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            var project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
+
             return Helpers.GetFirst(project.Items);
         }
     }
diff --git a/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs b/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
index 131c40ac57a..b79815ad3d0 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectItemGroupElement_tests.cs
@@ -39,8 +39,8 @@ public void ReadEmptyItemGroup()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectItemGroupElement group = (ProjectItemGroupElement)Helpers.GetFirst(project.Children);
 
             Assert.Equal(0, Helpers.Count(group.Items));
@@ -61,8 +61,8 @@ public void ReadItemGroupTwoItems()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectItemGroupElement group = (ProjectItemGroupElement)Helpers.GetFirst(project.Children);
 
             var items = Helpers.MakeList(group.Items);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
index 2d90d9c86f3..27b52869ac2 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectMetadataElement_Tests.cs
@@ -296,8 +296,8 @@ public void SetExpressedAsAttributeIllegalName()
                 ")]
         public void AddMetadataAsAttributeIllegalName(string project)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(project));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(project);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var items = Helpers.MakeList(itemGroup.Items);
@@ -323,8 +323,8 @@ public void AddMetadataAsAttributeToItemDefinitionIllegalName()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(project));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(project);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemDefinitionGroupElement);
 
             var itemDefinitions = Helpers.MakeList(itemDefinitionGroup.ItemDefinitions);
@@ -402,8 +402,7 @@ public void ReadValidItemExpressionInMetadata()
                 ";
 
             // Should not throw
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
         }
 
         [Theory]
@@ -425,8 +424,8 @@ public void ReadValidItemExpressionInMetadata()
                 ")]
         public void ReadMetadataAsAttribute(string project)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(project));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(project);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var items = Helpers.MakeList(itemGroup.Items);
@@ -450,8 +449,8 @@ public void ReadMetadataAsAttributeOnItemDefinition()
                         </ItemDefinitionGroup>
                     </Project>
                 ";
-            using var xmlReader = XmlReader.Create(new StringReader(project));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(project);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemDefinitionGroupElement);
 
             var itemDefinitions = Helpers.MakeList(itemDefinitionGroup.ItemDefinitions);
@@ -484,8 +483,8 @@ public void ReadMetadataAsAttributeOnItemDefinition()
                 ")]
         public void ReadMetadataAsAttributeWithSpecialCharacters(string project)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(project));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(project);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var items = Helpers.MakeList(itemGroup.Items);
@@ -509,8 +508,8 @@ public void ReadMetadataAsAttributeOnItemDefinitionWithSpecialCharacters()
                         </ItemDefinitionGroup>
                     </Project>
                 ";
-            using var xmlReader = XmlReader.Create(new StringReader(project));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(project);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemDefinitionGroupElement);
 
             var itemDefinitions = Helpers.MakeList(itemDefinitionGroup.ItemDefinitions);
@@ -555,12 +554,12 @@ public void ReadMetadataAsAttributeOnItemDefinitionWithSpecialCharacters()
                     </Project>")]
         public void UpdateMetadataValueAsAttribute(string projectContents, string updatedProject)
         {
-            using var xmlReader = XmlReader.Create(
-                new StringReader(ObjectModelHelpers.CleanupFileContents(projectContents)));
-            ProjectRootElement projectElement = ProjectRootElement.Create(
-                xmlReader,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                ObjectModelHelpers.CleanupFileContents(projectContents),
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
+
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var project = new Project(projectElement);
@@ -599,12 +598,11 @@ public void UpdateMetadataValueAsAttributeOnItemDefinition()
                             <i1 m1=`v1` />
                         </ItemDefinitionGroup>
                     </Project>";
-            using var xmlReader = XmlReader.Create(
-                    new StringReader(ObjectModelHelpers.CleanupFileContents(projectContents)));
-            ProjectRootElement projectElement = ProjectRootElement.Create(
-                xmlReader,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                ObjectModelHelpers.CleanupFileContents(projectContents),
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemDefinitionGroupElement);
 
             var project = new Project(projectElement);
@@ -674,12 +672,11 @@ public void UpdateMetadataValueAsAttributeOnItemDefinition()
                     </Project>")]
         public void UpdateMetadataValueAsAttributeWithSpecialCharacters(string projectContents, string updatedProject)
         {
-            using var xmlReader = XmlReader.Create(
-                new StringReader(ObjectModelHelpers.CleanupFileContents(projectContents)));
-            ProjectRootElement projectElement = ProjectRootElement.Create(
-                xmlReader,
-                ProjectCollection.GlobalProjectCollection,
-                preserveFormatting: true);
+            using ProjectRootElementFromString projectRootElementFromString = new(
+               ObjectModelHelpers.CleanupFileContents(projectContents),
+               ProjectCollection.GlobalProjectCollection,
+               preserveFormatting: true);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var project = new Project(projectElement);
@@ -718,12 +715,11 @@ public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters(
                             <i1 m1=`v1` />
                         </ItemDefinitionGroup>
                     </Project>";
-            using var xmlReader = XmlReader.Create(
-                    new StringReader(ObjectModelHelpers.CleanupFileContents(projectContents)));
-            ProjectRootElement projectElement = ProjectRootElement.Create(
-                xmlReader,
-                ProjectCollection.GlobalProjectCollection,
-                preserveFormatting: true);
+            using ProjectRootElementFromString projectRootElementFromString = new(
+               ObjectModelHelpers.CleanupFileContents(projectContents),
+               ProjectCollection.GlobalProjectCollection,
+               preserveFormatting: true);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemDefinitionGroupElement);
 
             var project = new Project(projectElement);
@@ -805,10 +801,11 @@ public void UpdateMetadataValueAsAttributeOnItemDefinitionWithSpecialCharacters(
                     </Project>")]
         public void ChangeMetadataToAttribute(string projectContents, string updatedProject)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(projectContents));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader,
-                ProjectCollection.GlobalProjectCollection,
-                preserveFormatting: true);
+            using ProjectRootElementFromString projectRootElementFromString = new(
+               projectContents,
+               ProjectCollection.GlobalProjectCollection,
+               preserveFormatting: true);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var project = new Project(projectElement);
@@ -867,10 +864,11 @@ public void ChangeMetadataToAttribute(string projectContents, string updatedProj
                     </Project>")]
         public void ChangeMetadataToAttributeOnItemDefinition(string projectContents, string updatedProject)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(projectContents));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader,
-                ProjectCollection.GlobalProjectCollection,
-                preserveFormatting: true);
+            using ProjectRootElementFromString projectRootElementFromString = new(
+               projectContents,
+               ProjectCollection.GlobalProjectCollection,
+               preserveFormatting: true);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemDefinitionGroupElement);
 
             var project = new Project(projectElement);
@@ -935,10 +933,11 @@ public void ChangeMetadataToAttributeOnItemDefinition(string projectContents, st
                     </Project>")]
         public void ChangeAttributeToMetadata(string projectContents, string updatedProject)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(projectContents));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader,
-                ProjectCollection.GlobalProjectCollection,
-                preserveFormatting: true);
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                 projectContents,
+                 ProjectCollection.GlobalProjectCollection,
+                 preserveFormatting: true);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var project = new Project(projectElement);
@@ -977,10 +976,11 @@ public void ChangeAttributeToMetadataOnItemDefinition()
                             <i1 m1='v1'/>
                         </ItemDefinitionGroup>
                     </Project>";
-            using var xmlReader = XmlReader.Create(new StringReader(projectContents));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader,
-                ProjectCollection.GlobalProjectCollection,
-                preserveFormatting: true);
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                 projectContents,
+                 ProjectCollection.GlobalProjectCollection,
+                 preserveFormatting: true);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemDefinitionGroupElement);
 
             var project = new Project(projectElement);
@@ -1048,10 +1048,11 @@ public void ChangeAttributeToMetadataOnItemDefinition()
                     </Project>")]
         public void AddMetadataAsAttribute(string projectContents, string updatedProject)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(projectContents));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader,
-                ProjectCollection.GlobalProjectCollection,
-                preserveFormatting: true);
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                 projectContents,
+                 ProjectCollection.GlobalProjectCollection,
+                 preserveFormatting: true);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var project = new Project(projectElement);
@@ -1087,10 +1088,11 @@ public void AddMetadataAsAttributeToItemDefinition()
                             <i1/>
                         </ItemDefinitionGroup>
                     </Project>";
-            using var xmlReader = XmlReader.Create(new StringReader(projectContents));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader,
-                ProjectCollection.GlobalProjectCollection,
-                preserveFormatting: true);
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                 projectContents,
+                 ProjectCollection.GlobalProjectCollection,
+                 preserveFormatting: true);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemDefinitionGroupElement);
 
             var project = new Project(projectElement);
@@ -1157,10 +1159,11 @@ public void AddMetadataAsAttributeToItemDefinition()
                     </Project>")]
         public void AddMetadataAsAttributeAndAsElement(string projectContents, string updatedProject)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(projectContents));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader,
+            using ProjectRootElementFromString projectRootElementFromString = new(
+                projectContents,
                 ProjectCollection.GlobalProjectCollection,
                 preserveFormatting: true);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemGroupElement);
 
             var project = new Project(projectElement);
@@ -1203,10 +1206,11 @@ public void AddMetadataToItemDefinitionAsAttributeAndAsElement()
                             <i1/>
                         </ItemDefinitionGroup>
                     </Project>";
-            using var xmlReader = XmlReader.Create(new StringReader(projectContents));
-            ProjectRootElement projectElement = ProjectRootElement.Create(xmlReader,
-                ProjectCollection.GlobalProjectCollection,
-                preserveFormatting: true);
+            using ProjectRootElementFromString projectRootElementFromString = new(
+               projectContents,
+               ProjectCollection.GlobalProjectCollection,
+               preserveFormatting: true);
+            ProjectRootElement projectElement = projectRootElementFromString.Project;
             ProjectItemDefinitionGroupElement itemDefinitionGroup = (ProjectItemDefinitionGroupElement)projectElement.AllChildren.FirstOrDefault(c => c is ProjectItemDefinitionGroupElement);
 
             var project = new Project(projectElement);
@@ -1262,8 +1266,8 @@ private static ProjectMetadataElement GetMetadataXml()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectItemGroupElement itemGroup = (ProjectItemGroupElement)Helpers.GetFirst(project.Children);
             ProjectItemElement item = Helpers.GetFirst(itemGroup.Items);
             ProjectMetadataElement metadata = Helpers.GetFirst(item.Metadata);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
index 748b27458e7..10665563b12 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectOnErrorElement_Tests.cs
@@ -46,8 +46,8 @@ public void ReadTargetTwoOnErrors()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
             var onErrors = Helpers.MakeList(target.OnErrors);
 
@@ -298,8 +298,8 @@ private static ProjectOnErrorElement GetOnError()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
             ProjectOnErrorElement onError = (ProjectOnErrorElement)Helpers.GetFirst(target.Children);
             return onError;
diff --git a/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
index b7ca7735ea5..fe42a33f9be 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectOutputElement_Tests.cs
@@ -287,8 +287,8 @@ private static ProjectOutputElement GetOutputItem()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
             ProjectTaskElement task = (ProjectTaskElement)Helpers.GetFirst(target.Children);
             return Helpers.GetFirst(task.Outputs);
@@ -310,8 +310,8 @@ private static ProjectOutputElement GetOutputProperty()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
             ProjectTaskElement task = (ProjectTaskElement)Helpers.GetFirst(target.Children);
             return Helpers.GetFirst(task.Outputs);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
index da71aa3fb9b..7e2d84b8735 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectPropertyElement_Tests.cs
@@ -44,8 +44,8 @@ public void ReadPropertyWithChildren()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectPropertyGroupElement propertyGroup = (ProjectPropertyGroupElement)Helpers.GetFirst(project.Children);
             ProjectPropertyElement property = Helpers.GetFirst(propertyGroup.Properties);
 
@@ -275,8 +275,8 @@ private static ProjectPropertyElement GetPropertyXml()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectPropertyGroupElement propertyGroup = (ProjectPropertyGroupElement)Helpers.GetFirst(project.Children);
             ProjectPropertyElement property = Helpers.GetFirst(propertyGroup.Properties);
             return property;
diff --git a/src/Build.OM.UnitTests/Construction/ProjectPropertyGroupElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectPropertyGroupElement_Tests.cs
index e6aeac3ddea..7350965edac 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectPropertyGroupElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectPropertyGroupElement_Tests.cs
@@ -38,8 +38,8 @@ public void ReadEmptyPropertyGroup()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectPropertyGroupElement group = (ProjectPropertyGroupElement)Helpers.GetFirst(project.Children);
 
             Assert.Equal(0, Helpers.Count(group.Properties));
@@ -60,8 +60,8 @@ public void ReadPropertyGroupTwoProperties()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectPropertyGroupElement group = (ProjectPropertyGroupElement)Helpers.GetFirst(project.Children);
 
             var properties = Helpers.MakeList(group.Properties);
diff --git a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
index c09f905493f..6522e66bbef 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectRootElement_Tests.cs
@@ -220,8 +220,9 @@ public void ConstructOverSameFileReturnsSameEvenWithOneBeingRelativePath3()
         {
             string content = "<Project ToolsVersion=\"4.0\">\r\n</Project>";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement projectXml1 = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement projectXml1 = projectRootElementFromString.Project;
+
 
             projectXml1.FullPath = @"xyz\abc";
 
@@ -238,8 +239,9 @@ public void ConstructOverSameFileReturnsSameEvenWithOneBeingRelativePath4()
         {
             string content = "<Project ToolsVersion=\"4.0\">\r\n</Project>";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement projectXml1 = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement projectXml1 = projectRootElementFromString.Project;
+
 
             projectXml1.FullPath = Path.Combine(Directory.GetCurrentDirectory(), @"xyz\abc");
 
@@ -368,8 +370,8 @@ public void InvalidNamespaceErrorReport()
             bool exceptionThrown = false;
             try
             {
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader);
+                using ProjectRootElementFromString projectRootElementFromString = new(content);
+                ProjectRootElement project = projectRootElementFromString.Project;
             }
             catch (InvalidProjectFileException ex)
             {
@@ -702,22 +704,22 @@ public void SaveUnnamedProject()
         [Fact]
         public void EncodingGetterBasedOnXmlDeclaration()
         {
-            using var projectUTF16 = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"<?xml version=""1.0"" encoding=""utf-16""?>
+            using ProjectRootElementFromString projectRootElementFromStringUTF16 = new(ObjectModelHelpers.CleanupFileContents(@"<?xml version=""1.0"" encoding=""utf-16""?>
 <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
-</Project>")));
-            ProjectRootElement project = ProjectRootElement.Create(projectUTF16);
+</Project>"));
+            ProjectRootElement project = projectRootElementFromStringUTF16.Project;
             Assert.Equal(Encoding.Unicode, project.Encoding);
 
-            using var projectUTF8 = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"<?xml version=""1.0"" encoding=""utf-8""?>
+            using ProjectRootElementFromString projectRootElementFromStringUTF8 = new(ObjectModelHelpers.CleanupFileContents(@"<?xml version=""1.0"" encoding=""utf-8""?>
 <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
-</Project>")));
-            project = ProjectRootElement.Create(projectUTF8);
+</Project>"));
+            project = projectRootElementFromStringUTF8.Project;
             Assert.Equal(Encoding.UTF8, project.Encoding);
 
-            using var projectASCII = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"<?xml version=""1.0"" encoding=""us-ascii""?>
+            using ProjectRootElementFromString projectRootElementFromStringASCII = new(ObjectModelHelpers.CleanupFileContents(@"<?xml version=""1.0"" encoding=""us-ascii""?>
 <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
-</Project>")));
-            project = ProjectRootElement.Create(projectASCII);
+</Project>"));
+            project = projectRootElementFromStringASCII.Project;
             Assert.Equal(Encoding.ASCII, project.Encoding);
         }
 
@@ -753,10 +755,11 @@ public void EncodingGetterBasedOnActualEncodingWhenXmlDeclarationIsAbsent()
         [Fact]
         public void SaveUnmodifiedWithNewEncoding()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectRootElementFromString projectRootElementFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 <Project DefaultTargets=""Build"" ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
-</Project>")));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+</Project>"));
+            ProjectRootElement project = projectRootElementFromString.Project;
+
             project.FullPath = FileUtilities.GetTemporaryFile();
             string projectFullPath = project.FullPath;
             try
@@ -821,8 +824,8 @@ public void PropertiesEnumerator()
                         </Choose>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             List<ProjectPropertyElement> properties = Helpers.MakeList(project.Properties);
 
@@ -879,8 +882,8 @@ public void ItemsEnumerator()
                         </Choose>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             List<ProjectItemElement> items = Helpers.MakeList(project.Items);
 
@@ -1267,8 +1270,8 @@ public void DeepCloneWithMetadataAsAttributes()
 
   </Project>";
 
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(project)));
-            var pre = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(ObjectModelHelpers.CleanupFileContents(project));
+            ProjectRootElement pre = projectRootElementFromString.Project;
 
             ValidateDeepCloneAndCopyFrom(pre);
         }
@@ -1289,12 +1292,11 @@ public void TryOpenWithPreserveFormatting()
             {
                 var projectFiles = env.CreateTestProjectWithFiles("", new[] { "build.proj" });
                 var projectFile = projectFiles.CreatedFiles.First();
-
-                using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(project)));
-                var projectXml = ProjectRootElement.Create(
-                    xmlReader,
-                    projectCollection,
-                    preserveFormatting: true);
+                using ProjectRootElementFromString projectRootElementFromString = new(
+                ObjectModelHelpers.CleanupFileContents(project),
+                projectCollection,
+                preserveFormatting: true);
+                ProjectRootElement projectXml = projectRootElementFromString.Project;
 
                 projectXml.Save(projectFile);
 
@@ -2003,8 +2005,8 @@ private ProjectRootElement CreatePREWithSubstantialContent()
         {
             string content = ObjectModelHelpers.CleanupFileContents(ComplexProject);
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             return project;
         }
diff --git a/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
index fab6466c0da..776f81d020d 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectTargetElement_Tests.cs
@@ -56,8 +56,8 @@ public void ReadEmptyTarget()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
 
             Assert.Equal(0, Helpers.Count(target.Children));
@@ -394,8 +394,8 @@ private static ProjectTargetElement GetTargetXml()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
             return target;
         }
diff --git a/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
index 2d468428985..5dc0ea98b9e 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectTaskElement_Tests.cs
@@ -299,8 +299,8 @@ public void SetCondition()
         /// </summary>
         private static ProjectTaskElement GetTaskFromContent(string content)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectTargetElement target = (ProjectTargetElement)Helpers.GetFirst(project.Children);
             return (ProjectTaskElement)Helpers.GetFirst(target.Children);
         }
diff --git a/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs b/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
index f1a85df474f..e7de9167df2 100644
--- a/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/ProjectUsingTaskElement_Tests.cs
@@ -417,8 +417,8 @@ RANDOM GOO
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectUsingTaskElement usingTask = (ProjectUsingTaskElement)Helpers.GetFirst(project.Children);
             Assert.NotNull(usingTask);
             Assert.Equal(2, usingTask.Count);
@@ -479,8 +479,8 @@ private static ProjectUsingTaskElement GetUsingTaskFactoryRuntimeAndPlatform()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectUsingTaskElement usingTask = (ProjectUsingTaskElement)Helpers.GetFirst(project.Children);
             return usingTask;
         }
@@ -497,8 +497,8 @@ private static ProjectUsingTaskElement GetUsingTaskAssemblyFile()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectUsingTaskElement usingTask = (ProjectUsingTaskElement)Helpers.GetFirst(project.Children);
             return usingTask;
         }
@@ -514,8 +514,8 @@ private static ProjectUsingTaskElement GetUsingTaskAssemblyName()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectUsingTaskElement usingTask = (ProjectUsingTaskElement)Helpers.GetFirst(project.Children);
             return usingTask;
         }
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
index 0f86c85bc44..fc3ea0d47e4 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskBodyElement_Tests.cs
@@ -135,8 +135,8 @@ private static ProjectUsingTaskBodyElement GetBodyXml()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+                  using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectUsingTaskElement usingTask = (ProjectUsingTaskElement)Helpers.GetFirst(project.Children);
             ProjectUsingTaskBodyElement body = usingTask.TaskBody;
             return body;
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
index 514100bc1f3..c1c02d3311e 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskParameterElement_Tests.cs
@@ -224,8 +224,8 @@ public void SetNullRequired()
         /// </summary>
         private static ProjectUsingTaskParameterElement GetParameterXml(string contents)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(contents));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(contents);
+            ProjectRootElement project = projectRootElementFromString.Project;
             ProjectUsingTaskElement usingTask = (ProjectUsingTaskElement)Helpers.GetFirst(project.Children);
             UsingTaskParameterGroupElement parameterGroup = usingTask.ParameterGroup;
             ProjectUsingTaskParameterElement body = Helpers.GetFirst(parameterGroup.Parameters);
diff --git a/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs b/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
index 25b8f920058..90a30355d35 100644
--- a/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
+++ b/src/Build.OM.UnitTests/Construction/UsingTaskParameterGroup_Tests.cs
@@ -135,8 +135,9 @@ public void ReadInvalidAttribute()
         /// </summary>
         private static UsingTaskParameterGroupElement GetParameterGroupXml(string contents)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(contents));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(contents);
+            ProjectRootElement project = projectRootElementFromString.Project;
+
             ProjectUsingTaskElement usingTask = (ProjectUsingTaskElement)Helpers.GetFirst(project.Children);
             return usingTask.ParameterGroup;
         }
diff --git a/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs b/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs
index b6154d64b4b..3e85948675a 100644
--- a/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/DefinitionEditing_Tests.cs
@@ -707,7 +707,7 @@ public void SetMetadata_ItemOriginatingWithWildcard()
         [Fact]
         public void SetMetadata_ItemOriginatingWithItemList()
         {
-            using XmlReader content = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
 @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
   <ItemGroup>
     <h Include=""h1;h2"">
@@ -715,9 +715,9 @@ public void SetMetadata_ItemOriginatingWithItemList()
     </h>
     <i Include=""@(h)"" />
   </ItemGroup>
-</Project>")));
-
-            Project project = new Project(content);
+</Project>");
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             Helpers.GetFirst(project.GetItems("i")).SetMetadataValue("m", "m2");
 
@@ -746,7 +746,7 @@ public void SetMetadata_ItemOriginatingWithItemList()
         [Fact]
         public void SetMetadataUnevaluatedValue_ItemOriginatingWithItemList()
         {
-            using XmlReader content = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
 @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
   <ItemGroup>
     <h Include=""h1;h2"">
@@ -754,9 +754,10 @@ public void SetMetadataUnevaluatedValue_ItemOriginatingWithItemList()
     </h>
     <i Include=""@(h)"" />
   </ItemGroup>
-</Project>")));
+</Project>");
 
-            Project project = new Project(content);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = Helpers.GetFirst(project.GetItems("i")).GetMetadata("m");
             metadatum.UnevaluatedValue = "m2";
@@ -985,7 +986,7 @@ public void RenameItem_NewNameContainsItemExpressionExpandingToZeroItems()
         [Fact]
         public void RenameItem_OriginatingWithItemList()
         {
-            using XmlReader content = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
 @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
   <ItemGroup>
     <h Include=""h1;h2"">
@@ -993,9 +994,10 @@ public void RenameItem_OriginatingWithItemList()
     </h>
     <i Include=""@(h)"" />
   </ItemGroup>
-</Project>")));
+</Project>");
 
-            Project project = new Project(content);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item = Helpers.GetFirst(project.GetItems("i"));
             item.Rename("h1b");
@@ -1319,7 +1321,7 @@ public void RemoveItem()
         [Fact]
         public void RemoveItem_OriginatingWithItemList()
         {
-            using XmlReader content = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
 @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
   <ItemGroup>
     <h Include=""h1;h2"">
@@ -1327,9 +1329,10 @@ public void RemoveItem_OriginatingWithItemList()
     </h>
     <i Include=""@(h)"" />
   </ItemGroup>
-</Project>")));
+</Project>");
 
-            Project project = new Project(content);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             project.RemoveItem(Helpers.GetFirst(project.GetItems("i")));
 
@@ -1421,14 +1424,15 @@ public void RemoveItem_OriginatingWithWildcard()
         [Fact]
         public void RemoveItem_IncludingFromIgnoringConditionList()
         {
-            using XmlReader content = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
 @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
   <ItemGroup Condition=""false"">
     <i Include=""i1"" />
   </ItemGroup>
-</Project>")));
+</Project>");
 
-            Project project = new Project(content);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             Assert.Empty(Helpers.MakeList(project.GetItems("i")));
             List<ProjectItem> itemsIgnoringCondition = Helpers.MakeList(project.GetItemsIgnoringCondition("i"));
@@ -1991,7 +1995,7 @@ public void AddItem_ExpandsToSeveralWithMetadata()
         [Fact]
         public void AddMetadata_Reevaluation()
         {
-            using XmlReader content = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
 @"<Project ToolsVersion=""msbuilddefaulttoolsversion"" xmlns=""msbuildnamespace"">
   <ItemGroup>
     <i Include=""i1"">
@@ -1999,9 +2003,10 @@ public void AddMetadata_Reevaluation()
       <m>m1</m>
     </i>
   </ItemGroup>
-</Project>")));
+</Project>");
 
-            Project project = new Project(content);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item = Helpers.GetFirst(project.Items);
 
@@ -2583,8 +2588,8 @@ private static void AssertDisabledItemSplitting(string projectContents, int item
             }
             else
             {
-                using var content = XmlReader.Create(new StringReader(projectContents));
-                project = new Project(content);
+                using ProjectFromString projectFromString = new(projectContents);
+                project = projectFromString.Project;
 
                 setupProject?.Invoke(project);
                 project.ReevaluateIfNecessary();
diff --git a/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs b/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs
index bfbaa1d4220..018dc9dca91 100644
--- a/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/EditingElementsReferencedByOrReferences_Tests.cs
@@ -340,8 +340,9 @@ public void RemoveProperty()
         /// <returns>The project contents.</returns>
         private Project GetProject(string contents)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(contents));
-            return new Project(xmlReader);
+            using ProjectFromString projectFromString = new(contents);
+            Project project = projectFromString.Project;
+            return project;
         }
     }
 }
diff --git a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
index c76cbc60a1c..3173951625f 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectCollection_Tests.cs
@@ -527,8 +527,9 @@ public void ReloadProjectWithInvalidToolsVersionInFile()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            var project = new Project(xmlReader) { FullPath = "c:\\123.proj" };
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
+            project.FullPath="c:\\123.proj";
 
             Project project2 = ProjectCollection.GlobalProjectCollection.LoadProject("c:\\123.proj", null, null);
 
@@ -548,8 +549,9 @@ public void ReloadProjectWithProjectToolsVersionDifferentFromEffectiveToolsVersi
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            var project = new Project(xmlReader) { FullPath = "c:\\123.proj" };
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
+            project.FullPath = "c:\\123.proj";
 
             Project project2 = ProjectCollection.GlobalProjectCollection.LoadProject("c:\\123.proj", null, null);
 
@@ -1153,8 +1155,8 @@ public void SetDefaultToolsVersion()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            var project = new Project(xmlReader, null, null, collection);
+            using ProjectFromString projectFromString = new(content, null, null, collection);
+            Project project = projectFromString.Project;
 
             // ... and after all that, we end up defaulting to the current ToolsVersion instead.  There's a way
             // to turn this behavior (new in Dev12) off, but it requires setting an environment variable and
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
index b167ec09551..bceb63d86cf 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItemDefinition_Tests.cs
@@ -211,8 +211,8 @@ public void BatchingConsidersItemDefinitionMetadata()
   </Target>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             List<ILogger> loggers = new List<ILogger>() { logger };
@@ -242,8 +242,8 @@ public void ExpandBuiltInMetadataAtPointOfUse()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item = project.GetItems("i").ElementAt(0);
             Assert.Equal("b", item.GetMetadataValue("m"));
@@ -269,8 +269,8 @@ public void ExpandBuiltInMetadataAtPointOfUse_ReferToMetadataAbove()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item = project.GetItems("i").ElementAt(0);
             Assert.Equal("b.ext", item.GetMetadataValue("m"));
@@ -296,8 +296,8 @@ public void ExpandBuiltInMetadataAtPointOfUse_MixtureOfCustomAndBuiltIn()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item = project.GetItems("i").ElementAt(0);
             Assert.Equal("b.l1", item.GetMetadataValue("m"));
@@ -327,8 +327,8 @@ public void ExpandBuiltInMetadataAtPointOfUse_CustomEvaluationNeverDelayed()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item = project.GetItems("i").ElementAt(0);
             Assert.Equal("b.n1", item.GetMetadataValue("m"));
@@ -355,8 +355,8 @@ public void ExpandBuiltInMetadataAtPointOfUse_DoNotDoubleEvaluate()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item = project.GetItems("i").ElementAt(0);
 
@@ -385,8 +385,8 @@ public void ExpandBuiltInMetadataAtPointOfUse_CopyItems()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item = project.GetItems("i").ElementAt(0);
             Assert.Equal(".bar", item.GetMetadataValue("m"));
@@ -413,8 +413,8 @@ public void ExpandBuiltInMetadataAtPointOfUse_UseInTransform()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item = project.GetItems("i").ElementAt(0);
             Assert.Equal(".foo", item.EvaluatedInclude);
@@ -448,8 +448,8 @@ public void ExpandBuiltInMetadataAtPointOfUse_UseInBatching()
   </Target>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectInstance instance = project.CreateProjectInstance();
             MockLogger l = new MockLogger();
@@ -655,8 +655,8 @@ public void ExpandBuiltInMetadataAtPointOfUse_UnquotedQualifiedCustomAllowedOnIt
   </ItemDefinitionGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);  // No exception
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;  // No exception
         }
     }
 }
diff --git a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
index 0e6b4c13f3b..ffdd743ab07 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectItem_Tests.cs
@@ -158,8 +158,8 @@ public void GetMetadataObjectsFromDefinition()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item = Helpers.GetFirst(project.GetItems("i"));
             ProjectMetadata m0 = item.GetMetadata("m0");
@@ -1193,8 +1193,8 @@ public void CopyFromWithItemListExpressionClonesMetadata()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             project.GetItems("i").First().SetMetadataValue("m", "m2");
 
@@ -1236,8 +1236,8 @@ public void CopyFromWithItemListExpressionDoesNotCloneDefinitionMetadata()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item1 = project.GetItems("i").First();
             ProjectItem item1b = project.GetItems("i").ElementAt(1);
@@ -1287,8 +1287,8 @@ public void CopyFromWithItemListExpressionClonesDefinitionMetadata_Variation()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item1 = project.GetItems("i").First();
             ProjectItem item1b = project.GetItems("i").ElementAt(1);
@@ -1357,8 +1357,8 @@ public void CopyWithItemDefinition()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             Assert.Equal("l0", project.GetItems("i").First().GetMetadataValue("l"));
             Assert.Equal("m1", project.GetItems("i").First().GetMetadataValue("m"));
@@ -1455,8 +1455,8 @@ public void CopyWithItemDefinition2()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             Assert.Equal("l0", project.GetItems("i").First().GetMetadataValue("l"));
             Assert.Equal("m1", project.GetItems("i").First().GetMetadataValue("m"));
diff --git a/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs
index f7482435c35..ce247e2ac96 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectMetadata_Tests.cs
@@ -50,8 +50,9 @@ public void SetUnevaluatedValue()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement projectXml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement projectXml = projectRootElementFromString.Project;
+
             Project project = new Project(projectXml);
 
             Assert.False(project.IsDirty);
@@ -155,8 +156,8 @@ public void SetValueWithQualifiedMetadataExpressionOtherItemType()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = Helpers.GetFirst(project.GetItems("j")).GetMetadata("m1");
             metadatum.UnevaluatedValue = "%(i.m1)";
@@ -182,8 +183,8 @@ public void SetValueWithQualifiedMetadataExpressionSameItemType()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = Helpers.GetFirst(project.GetItems("i")).GetMetadata("m1");
             metadatum.UnevaluatedValue = "%(i.m0)";
@@ -208,8 +209,8 @@ public void SetValueWithQualifiedMetadataExpressionSameMetadata()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = Helpers.GetFirst(project.GetItems("i")).GetMetadata("m1");
             metadatum.UnevaluatedValue = "%(i.m1)";
@@ -235,8 +236,8 @@ public void SetValueWithUnqualifiedMetadataExpression()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = Helpers.GetFirst(project.GetItems("i")).GetMetadata("m1");
             metadatum.UnevaluatedValue = "%(m0)";
@@ -267,8 +268,8 @@ public void SetValueWithUnqualifiedMetadataExpressionFromItemDefinition()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = Helpers.GetFirst(project.GetItems("i")).GetMetadata("m1");
             metadatum.UnevaluatedValue = "%(m0)";
@@ -299,8 +300,8 @@ public void SetValueWithQualifiedMetadataExpressionFromItemDefinition()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = Helpers.GetFirst(project.GetItems("i")).GetMetadata("m1");
             metadatum.UnevaluatedValue = "%(i.m0)";
@@ -331,8 +332,8 @@ public void SetValueWithQualifiedMetadataExpressionWrongItemType()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = Helpers.GetFirst(project.GetItems("i")).GetMetadata("m1");
             metadatum.UnevaluatedValue = "%(j.m0)";
@@ -362,8 +363,8 @@ public void SetValueOnItemDefinitionWithUnqualifiedMetadataExpression()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItemDefinition itemDefinition;
             project.ItemDefinitions.TryGetValue("i", out itemDefinition);
@@ -391,8 +392,8 @@ public void SetValueOnItemDefinitionWithQualifiedMetadataExpression()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItemDefinition itemDefinition;
             project.ItemDefinitions.TryGetValue("i", out itemDefinition);
@@ -425,8 +426,8 @@ public void SetValueOnItemDefinitionWithQualifiedMetadataExpressionWrongItemType
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+          using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItemDefinition itemDefinition;
             project.ItemDefinitions.TryGetValue("i", out itemDefinition);
@@ -488,9 +489,9 @@ public void SpecialCharactersInMetadataValueConstruction()
         </None>
     </ItemGroup>
 </Project>");
-            using System.Xml.XmlReader reader = XmlReader.Create(new StringReader(projectString));
-            Microsoft.Build.Evaluation.Project project = new Microsoft.Build.Evaluation.Project(reader);
-            Microsoft.Build.Evaluation.ProjectItem item = project.GetItems("None").Single();
+            using ProjectFromString projectFromString = new(projectString);
+            Project project = projectFromString.Project;
+            ProjectItem item = project.GetItems("None").Single();
 
             SpecialCharactersInMetadataValueTests(item);
         }
diff --git a/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs b/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
index 7f6db56e704..3ecc456a3cb 100644
--- a/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProjectProperty_Tests.cs
@@ -285,8 +285,9 @@ public void SetPropertyImported()
         /// </summary>
         private static ProjectProperty GetFirstProperty(string content)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement projectXml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement projectXml = projectRootElementFromString.Project;
+
             Project project = new Project(projectXml);
             ProjectProperty property = project.GetProperty("p");
 
diff --git a/src/Build.OM.UnitTests/Definition/Project_Tests.cs b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
index 61e62d81bb2..c08c7f83bf7 100644
--- a/src/Build.OM.UnitTests/Definition/Project_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/Project_Tests.cs
@@ -105,8 +105,8 @@ public void VerifyNewLinesAndTabsEvaluateToEmpty()
                        </Target>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             Project project = new Project(xml);
             bool result = project.Build(new ILogger[] { mockLogger });
             result.ShouldBeTrue();
@@ -131,8 +131,8 @@ public void LogWithLoggersOnProjectCollection()
                        </Target>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             using ProjectCollection collection = new ProjectCollection();
             collection.RegisterLogger(mockLogger);
             Project project = new Project(xml, null, null, collection);
@@ -159,8 +159,8 @@ public void LogWithLoggersOnProjectCollectionCustomOneUsed()
                        </Target>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             using ProjectCollection collection = new ProjectCollection();
             collection.RegisterLogger(mockLogger2);
             Project project = new Project(xml, null, null, collection);
@@ -594,8 +594,8 @@ public void BasicFromXmlFollowImport()
 
             projectFileContent = string.Format(projectFileContent, importPath);
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             Project project = new Project(xml);
 
             project.GetPropertyValue("p2").ShouldBe("v3");
@@ -639,8 +639,8 @@ public void TransformsUseCorrectDirectory_Basic()
                          </ItemGroup>
                      </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+            ProjectRootElement xml = projectRootElementFromString.Project;
 
             Project project = new Project(xml);
 
@@ -674,8 +674,8 @@ public void TransformsUseCorrectDirectory_Basic_NotSaved()
                         </ItemGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+            ProjectRootElement xml = projectRootElementFromString.Project;
 
             Project project = new Project(xml);
             ProjectInstance projectInstance = new ProjectInstance(xml);
@@ -707,8 +707,8 @@ public void TransformsUseCorrectDirectory_DirectoryTransform()
                         </ItemGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+            ProjectRootElement xml = projectRootElementFromString.Project;
 
             try
             {
@@ -743,8 +743,8 @@ public void TransformsUseCorrectDirectory_DirectoryItemFunction()
                         </ItemGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+            ProjectRootElement xml = projectRootElementFromString.Project;
 
             try
             {
@@ -781,8 +781,8 @@ public void TransformsUseCorrectDirectory_DirectoryNameItemFunction()
                         </ItemGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+            ProjectRootElement xml = projectRootElementFromString.Project;
 
             try
             {
@@ -1445,13 +1445,13 @@ public void ImportingExistingPREObjectShouldPreserveTheObject()
             {
                 var projectFiles = env.CreateTestProjectWithFiles("", new[] { "import.proj" });
                 var importFile = projectFiles.CreatedFiles.First();
-                using var xmlReader = XmlReader.Create(new StringReader(importProjectContents));
-                ProjectRootElement import =
-                    ProjectRootElement.Create(
-                        xmlReader,
-                        projectCollection,
-                        // preserve formatting to simulate IDE usage
-                        preserveFormatting: true);
+                using ProjectRootElementFromString projectRootElementFromString = new(
+                importProjectContents,
+                projectCollection,
+                // preserve formatting to simulate IDE usage
+                preserveFormatting: true);
+
+                ProjectRootElement import = projectRootElementFromString.Project;
 
                 // puts the import in the PRE cache
                 import.Save(importFile);
@@ -1511,12 +1511,12 @@ public void ReloadedImportsMarkProjectAsDirty()
                 var projectFiles = env.CreateTestProjectWithFiles("", new[] { "import.proj" });
                 var importFile = projectFiles.CreatedFiles.First();
 
-                using var xmlReader = XmlReader.Create(new StringReader(importProjectContents));
-                var import = ProjectRootElement.Create(
-                    xmlReader,
-                    projectCollection,
-                    // preserve formatting to simulate IDE usage
-                    preserveFormatting: true);
+                using ProjectRootElementFromString projectRootElementFromString = new(
+                importProjectContents,
+                projectCollection,
+                // preserve formatting to simulate IDE usage
+                preserveFormatting: true);
+                ProjectRootElement import = projectRootElementFromString.Project;
 
                 // add to cache by saving
                 import.Save(importFile);
@@ -1593,18 +1593,14 @@ public void ReloadedProjectRootElementMarksProjectAsDirty()
 
             using (var env = TestEnvironment.Create())
             using (var projectCollection = new ProjectCollection())
-            using (var xmlReaderContents  = XmlReader.Create(new StringReader(projectContents)))
+            using (var projectRootElementFromString = new ProjectRootElementFromString(projectContents, projectCollection, preserveFormatting: true))
             using (var xmlReaderChangedContents = XmlReader.Create(new StringReader(changedProjectContents)))
             {
                 var projectFiles = env.CreateTestProjectWithFiles("", new[] { "build.proj" });
                 var projectFile = projectFiles.CreatedFiles.First();
 
 
-                var projectRootElement = ProjectRootElement.Create(
-                    xmlReaderContents,
-                    projectCollection,
-                    // preserve formatting to simulate IDE usage
-                    preserveFormatting: true);
+                var projectRootElement = projectRootElementFromString.Project;
 
                 // add to cache by saving
                 projectRootElement.Save(projectFile);
@@ -1855,8 +1851,8 @@ public void ChooseWhenTrue()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             project.GetPropertyValue("p").ShouldBe("v1");
             Helpers.MakeList(project.GetItems("i"))[0].EvaluatedInclude.ShouldBe("i1");
@@ -1891,8 +1887,8 @@ public void ChooseSecondWhenTrue()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             project.GetPropertyValue("p").ShouldBe("v2");
             Helpers.MakeList(project.GetItems("i"))[0].EvaluatedInclude.ShouldBe("i2");
@@ -1927,8 +1923,8 @@ public void ChooseOtherwise()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             project.GetPropertyValue("p").ShouldBe("v2");
             Helpers.MakeList(project.GetItems("i"))[0].EvaluatedInclude.ShouldBe("i2");
@@ -1976,8 +1972,8 @@ public void ChooseTwoPasses()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             project.GetPropertyValue("p").ShouldBe("@(i);v1");
             project.GetPropertyValue("q").ShouldBe("@(j);v1");
@@ -2010,8 +2006,8 @@ public void ChooseEvaluateConditionOnlyOnce()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             project.GetItems("i").ShouldBeEmpty();
         }
@@ -2043,8 +2039,8 @@ public void ChooseSeesItemDefinitions()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             project.GetItems("i").ElementAt(0).GetMetadataValue("m").ShouldBe("m0;m1");
         }
@@ -2106,8 +2102,8 @@ public void BuildEvaluationUsesCustomLoggers()
                     <Target Name=""Build"" />
                 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent);
+            Project project = projectFromString.Project;
             project.MarkDirty();
 
             MockLogger collectionLogger = new MockLogger();
@@ -2183,8 +2179,8 @@ public void UsingTaskExpansion3()
         public void SavingProjectClearsDirtyBit()
         {
             string contents = ObjectModelHelpers.CleanupFileContents(@"<Project xmlns='msbuildnamespace'/>");
-            using var xmlReader = XmlReader.Create(new StringReader(contents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(contents);
+            Project project = projectFromString.Project;
 
             project.Xml.HasUnsavedChanges.ShouldBeTrue(); // Not dirty for saving
             project.IsDirty.ShouldBeFalse(); // "1" // was evaluated on load
@@ -2220,8 +2216,9 @@ public void RemoveItemTwiceEvaluationProject()
                     </ItemGroup>
                 </Project>
                 ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectOriginalContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectOriginalContents);
+            Project project = projectFromString.Project;
+
             ProjectItem itemToRemove = Helpers.GetFirst(project.GetItems("Compile"));
             project.RemoveItem(itemToRemove);
             project.RemoveItem(itemToRemove); // should not throw
@@ -2242,8 +2239,8 @@ public void RemoveItemOutdatedByUpdate()
                     </ItemGroup>
                 </Project>
                 ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectOriginalContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectOriginalContents);
+            Project project = projectFromString.Project;
             ProjectItem itemToRemove = Helpers.GetFirst(project.GetItems("Compile"));
             itemToRemove.UnevaluatedInclude = "b.cs";
             project.RemoveItem(itemToRemove); // should not throw
@@ -2265,8 +2262,8 @@ public void RemoveSeveralItems()
                     </ItemGroup>
                 </Project>
                 ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectOriginalContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectOriginalContents);
+            Project project = projectFromString.Project;
 
             project.RemoveItems(project.GetItems("i"));
 
@@ -2289,8 +2286,9 @@ public void RemoveSeveralItemsOfVariousTypes()
                     </ItemGroup>
                 </Project>
                 ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectOriginalContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectOriginalContents);
+            Project project = projectFromString.Project;
+
 
             List<ProjectItem> list = new List<ProjectItem>() { project.GetItems("i").FirstOrDefault(), project.GetItems("j").FirstOrDefault() };
 
@@ -2313,8 +2311,8 @@ public void RemoveSeveralItemsExpandExpression()
                     </ItemGroup>
                 </Project>
                 ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectOriginalContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectOriginalContents);
+            Project project = projectFromString.Project;
 
             project.RemoveItems(project.GetItems("j").Take(2));
             project.Items.Count.ShouldBe(3);
@@ -2348,8 +2346,8 @@ public void RemoveSeveralItemsFirstZombiesSecond()
                     </ItemGroup>
                 </Project>
                 ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectOriginalContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectOriginalContents);
+            Project project = projectFromString.Project;
 
             project.RemoveItems(project.GetItems("i"));
 
@@ -2401,8 +2399,8 @@ public void RemoveZombiedItem()
                     </ItemGroup>
                 </Project>
                 ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectOriginalContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectOriginalContents);
+            Project project = projectFromString.Project;
             ProjectItem item = project.GetItems("i").FirstOrDefault();
 
             project.RemoveItems(new List<ProjectItem>() { item });
@@ -4329,8 +4327,8 @@ private ProjectRootElement GetSampleProjectRootElement()
         {
             string projectFileContent = GetSampleProjectContent();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+            ProjectRootElement xml = projectRootElementFromString.Project;
 
             return xml;
         }
diff --git a/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs b/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
index 7795984bfdd..b22c8bf0ab9 100644
--- a/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
+++ b/src/Build.OM.UnitTests/Definition/ProtectImports_Tests.cs
@@ -603,8 +603,9 @@ private Project GetProject()
                 </Project>";
 
             projectContents = Expand(projectContents);
-            using var xmlReader = XmlReader.Create(new StringReader(projectContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContents);
+            Project project = projectFromString.Project;
+
             return project;
         }
 
diff --git a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
index b41856f405c..b8845cd6244 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectInstance_Tests.cs
@@ -1027,8 +1027,8 @@ private static ProjectInstance GetProjectInstance(string content, bool immutable
             var globalProperties = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             globalProperties["g"] = "gv";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion);
+            using ProjectFromString projectFromString = new(content, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, ProjectCollection.GlobalProjectCollection);
+            Project project = projectFromString.Project;
             ProjectInstance instance = immutable ? project.CreateProjectInstance(ProjectInstanceSettings.Immutable) : project.CreateProjectInstance();
 
             return instance;
diff --git a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
index a1f76b8dd15..475b5457fa6 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectItemInstance_Tests.cs
@@ -1167,8 +1167,8 @@ private static ProjectItemInstance GetOneItem(string content)
         /// </summary>
         private static IList<ProjectItemInstance> GetItems(string content)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             ProjectInstance project = new ProjectInstance(xml);
 
             return Helpers.MakeList(project.GetItems("i"));
diff --git a/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs
index 25c81f9eaca..14346060f12 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectOnErrorInstance_Tests.cs
@@ -42,8 +42,8 @@ private static ProjectOnErrorInstance GetSampleOnErrorInstance()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             Project project = new Project(xml);
             ProjectInstance instance = project.CreateProjectInstance();
             ProjectOnErrorInstance onError = (ProjectOnErrorInstance)instance.Targets["t"].OnErrorChildren[0];
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs
index edf7ad58d2c..3e9ab10b3df 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTargetInstance_Tests.cs
@@ -142,8 +142,8 @@ private static ProjectTargetInstance GetSampleTargetInstance()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             Project project = new Project(xml);
             ProjectInstance instance = project.CreateProjectInstance();
             ProjectTargetInstance target = instance.Targets["t"];
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs
index 5e55009f4a5..2acc85a6995 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTaskInstance_Tests.cs
@@ -72,8 +72,8 @@ private static ProjectTaskInstance GetTaskInstance(string taskXmlString)
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             Project project = new Project(xml);
             ProjectInstance instance = project.CreateProjectInstance();
             ProjectTaskInstance task = (ProjectTaskInstance)(instance.Targets["t"].Children[0]);
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs
index 3e50731babf..3025a115129 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputItemInstance_Tests.cs
@@ -45,8 +45,8 @@ private static ProjectTaskOutputItemInstance GetSampleTaskOutputInstance()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+           using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             Project project = new Project(xml);
             ProjectInstance instance = project.CreateProjectInstance();
             ProjectTaskInstance task = (ProjectTaskInstance)instance.Targets["t"].Children[0];
diff --git a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs
index 627a406adbf..8f5d86e1c81 100644
--- a/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs
+++ b/src/Build.OM.UnitTests/Instance/ProjectTaskOutputPropertyInstance_Tests.cs
@@ -45,8 +45,8 @@ private static ProjectTaskOutputPropertyInstance GetSampleTaskOutputInstance()
                     </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+           using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             Project project = new Project(xml);
             ProjectInstance instance = project.CreateProjectInstance();
             ProjectTaskInstance task = (ProjectTaskInstance)instance.Targets["t"].Children[0];
diff --git a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
index 110ba244d5c..516bbd834ff 100644
--- a/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
+++ b/src/Build.OM.UnitTests/ObjectModelRemoting/RemoteProjectsProviderMock/ExporterMock.cs
@@ -167,8 +167,8 @@ private ProjectCollectionLinker(ConnectedProjectCollections group)
         public Project LoadInMemoryWithSettings(string content, ProjectLoadSettings settings = ProjectLoadSettings.Default)
         {
             content = ObjectModelHelpers.CleanupFileContents(content);
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+           using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             Project project = new Project(xml, null, null, this.Collection, settings);
             return project;
         }
diff --git a/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs b/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
index 122887d1ae7..05b47ddb724 100644
--- a/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BatchingEngine_Tests.cs
@@ -484,8 +484,8 @@ public void UndefinedAndEmptyMetadataValues()
                 </Project>
                 ";
 
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(content)));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(content));
+            Project project = projectFromString.Project;
             MockLogger logger = new MockLogger();
             project.Build(logger);
 
diff --git a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
index 54e90098c59..faf9f3f8ccf 100644
--- a/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildManager_Tests.cs
@@ -293,11 +293,9 @@ public void VerifyEnvironmentSavedBetweenCalls()
 </Project>
 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(contents1));
-            var project = new Project(xmlReader, null, null, _projectCollection)
-            {
-                FullPath = _env.CreateFile(".proj").Path
-            };
+            using ProjectFromString projectFromString = new(contents1, null, null, _projectCollection);
+            Project project = projectFromString.Project;
+            project.FullPath = _env.CreateFile(".proj").Path;
 
             project.Save();
 
@@ -3529,11 +3527,9 @@ private ProjectGraph CreateProjectGraph(string contents, ProjectCollection proje
         /// </summary>
         private Project CreateProject(string contents, string toolsVersion, ProjectCollection projectCollection, bool deleteTempProject)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(contents));
-            var project = new Project(xmlReader, null, toolsVersion, projectCollection)
-            {
-                FullPath = _env.CreateFile().Path
-            };
+            using ProjectFromString projectFromString = new(contents, null, toolsVersion, projectCollection);
+            Project project = projectFromString.Project;
+            project.FullPath = _env.CreateFile().Path;
 
             if (!deleteTempProject)
             {
@@ -3631,8 +3627,8 @@ public void ShouldBuildMutatedProjectInstanceWhoseProjectWasPreviouslyBuiltAsAP2
                     var p2pProjectPath = testFiles.CreatedFiles[0];
                     File.WriteAllText(p2pProjectPath, p2pProjectContents);
 
-                    using var xmlReader = XmlReader.Create(new StringReader(string.Format(mainProjectContents, p2pProjectPath)));
-                    var mainRootElement = ProjectRootElement.Create(xmlReader, collection);
+                    using ProjectRootElementFromString projectRootElementFromString = new(string.Format(mainProjectContents, p2pProjectPath), collection);
+                    ProjectRootElement mainRootElement = projectRootElementFromString.Project;
 
                     mainRootElement.FullPath = testFiles.CreatedFiles[1];
                     mainRootElement.Save();
@@ -3783,9 +3779,8 @@ public void OutOfProcProjectInstanceBasedBuildDoesNotReloadFromDisk(bool shouldS
             var importPath = testFiles.CreatedFiles[1];
             File.WriteAllText(importPath, CleanupFileContents(importProject));
 
-            using var xmlReader = XmlReader.Create(new StringReader(string.Format(mainProject, importPath)));
-            var root = ProjectRootElement.Create(
-                xmlReader, _projectCollection);
+            using ProjectRootElementFromString projectRootElementFromString = new(string.Format(mainProject, importPath), _projectCollection);
+            ProjectRootElement root = projectRootElementFromString.Project;
             root.FullPath = Path.GetTempFileName();
             root.Save();
 
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
index 095b8cb0c0c..c35fc6a2b3f 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestConfiguration_Tests.cs
@@ -182,8 +182,8 @@ public void TestSetProjectGood()
             BuildRequestData data1 = new BuildRequestData("file", new Dictionary<string, string>(), "toolsVersion", Array.Empty<string>(), null);
             BuildRequestConfiguration config1 = new BuildRequestConfiguration(data1, "2.0");
             Assert.Null(config1.Project);
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace' />")));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace' />"));
+            Project project = projectFromString.Project;
 
             ProjectInstance projectInstance = project.CreateProjectInstance();
             config1.Project = projectInstance;
@@ -275,13 +275,13 @@ public void TestTranslationWithEntireProjectState()
             Dictionary<string, string> globalProperties = new(StringComparer.OrdinalIgnoreCase);
             globalProperties["ThreeIn"] = "3";
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectBody));
             using var collection = new ProjectCollection();
-            Project project = new Project(
-                xmlReader,
+            using ProjectFromString projectFromString = new(
+                projectBody,
                 globalProperties,
                 ObjectModelHelpers.MSBuildDefaultToolsVersion,
                 collection);
+            Project project = projectFromString.Project;
             project.FullPath = "foo";
             ProjectInstance instance = project.CreateProjectInstance();
 
@@ -353,13 +353,12 @@ public void TestCache()
             globalProperties["ThreeIn"] = "3";
             globalProperties["BazIn"] = "bazfile";
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectBody));
             using var collection = new ProjectCollection();
-            Project project = new Project(
-                xmlReader,
+            using ProjectFromString projectFromString = new(projectBody,
                 globalProperties,
                 ObjectModelHelpers.MSBuildDefaultToolsVersion,
                 collection);
+            Project project = projectFromString.Project;
             project.FullPath = "foo";
             ProjectInstance instance = project.CreateProjectInstance();
             BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, Array.Empty<string>(), null), "2.0");
@@ -459,9 +458,9 @@ public void WorksCorrectlyWithCurlyBraces()
             globalProperties["ThreeIn"] = "3";
             globalProperties["BazIn"] = "bazfile";
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectBody));
             using var collection = new ProjectCollection();
-            Project project = new Project(xmlReader, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, collection);
+            using ProjectFromString projectFromString = new(projectBody, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion, collection);
+            Project project = projectFromString.Project;
             project.FullPath = "foo";
             ProjectInstance instance = project.CreateProjectInstance();
             BuildRequestConfiguration configuration = new BuildRequestConfiguration(new BuildRequestData(instance, Array.Empty<string>(), null), "2.0");
diff --git a/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
index 64b5901e0ea..9ad9bacf084 100644
--- a/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/BuildRequestEngine_Tests.cs
@@ -243,8 +243,8 @@ private ProjectInstance CreateStandinProject()
             </Target>
             </Project>");
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader);
+                using ProjectFromString projectFromString = new(content);
+                Project project = projectFromString.Project;
                 return project.CreateProjectInstance();
             }
         }
diff --git a/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs b/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
index edd0cdf2ffd..7900e9564cb 100644
--- a/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/ConfigurationMetadata_Tests.cs
@@ -150,8 +150,8 @@ private Project CreateProject()
 </Project>");
 
             Dictionary<string, string> globalProperties = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
-            using var xmlReader = XmlReader.Create(new StringReader(projectBody));
-            Project project = new Project(xmlReader, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion);
+            using ProjectFromString projectFromString = new(projectBody, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion);
+            Project project = projectFromString.Project;
             project.FullPath = "file";
 
             return project;
diff --git a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
index 0548478afd3..225ea077970 100644
--- a/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/IntrinsicTask_Tests.cs
@@ -176,7 +176,7 @@ public void PropertyGroupWithInvalidSyntax2()
         public void PropertyGroupWithConditionOnGroup()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
             <Target Name='t'>
                 <PropertyGroup Condition='false'>
@@ -185,14 +185,15 @@ public void PropertyGroupWithConditionOnGroup()
                 </PropertyGroup>
                 <Message Text='[$(P1)][$(P2)]'/>
             </Target>
-            </Project>")));
-            Project p = new Project(xmlReader);
+            </Project>");
+            using ProjectFromString projectFromString = new(content);
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "t" }, new ILogger[] { logger });
             logger.AssertLogDoesntContain("[v1][v2]");
             logger.ClearLog();
 
-            using var xmlReaderProject = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            content = ObjectModelHelpers.CleanupFileContents(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
             <Target Name='t'>
                 <PropertyGroup Condition='true'>
@@ -201,8 +202,9 @@ public void PropertyGroupWithConditionOnGroup()
                 </PropertyGroup>
                 <Message Text='[$(P1)][$(P2)]'/>
             </Target>
-            </Project>")));
-            p = new Project(xmlReaderProject);
+            </Project>");
+            using ProjectFromString projectFromString1 = new(content);
+            p = projectFromString1.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
             logger.AssertLogContains("[v1][v2]");
         }
@@ -211,7 +213,7 @@ public void PropertyGroupWithConditionOnGroup()
         public void PropertyGroupWithConditionOnGroupUsingMetadataErrors()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
             @"
             <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
             <Target Name='t'>
@@ -220,8 +222,9 @@ public void PropertyGroupWithConditionOnGroupUsingMetadataErrors()
                     <p2>%(i0.m)</p2>
                 </PropertyGroup>
             </Target>
-            </Project>")));
-            Project p = new Project(xmlReader);
+            </Project>");
+            using ProjectFromString projectFromString = new(content);
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "t" }, new ILogger[] { logger });
             logger.AssertLogContains("MSB4191"); // Metadata not allowed
@@ -876,7 +879,7 @@ public void ItemGroupWithMetadataInExclude()
         public void ItemGroupWithConditionOnGroup()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
             <Target Name='t'>
                 <ItemGroup Condition='false'>
@@ -885,14 +888,15 @@ public void ItemGroupWithConditionOnGroup()
                 </ItemGroup>
                 <Message Text='[@(i1)][@(i2)]'/>
             </Target>
-            </Project>")));
-            Project p = new Project(xmlReader);
+            </Project>");
+            using ProjectFromString projectFromString = new(content);
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "t" }, new ILogger[] { logger });
             logger.AssertLogDoesntContain("[a1][b1]");
             logger.ClearLog();
 
-            using var xmlReaderProject = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+           content = ObjectModelHelpers.CleanupFileContents(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
             <Target Name='t'>
                 <ItemGroup Condition='true'>
@@ -901,8 +905,9 @@ public void ItemGroupWithConditionOnGroup()
                 </ItemGroup>
                 <Message Text='[@(i1)][@(i2)]'/>
             </Target>
-            </Project>")));
-            p = new Project(xmlReaderProject);
+            </Project>");
+            using ProjectFromString projectFromString1 = new(content);
+            p = projectFromString1.Project;
 
             p.Build(new string[] { "t" }, new ILogger[] { logger });
             logger.AssertLogContains("[a1][b1]");
@@ -912,7 +917,7 @@ public void ItemGroupWithConditionOnGroup()
         public void ItemGroupWithConditionOnGroupUsingMetadataErrors()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
             <Target Name='t'>
                 <ItemGroup Condition=""'%(i0.m)'!='m1'"">
@@ -922,8 +927,9 @@ public void ItemGroupWithConditionOnGroupUsingMetadataErrors()
                     <i4 Include='@(i0)'/>
                 </ItemGroup>
             </Target>
-            </Project>")));
-            Project p = new Project(xmlReader);
+            </Project>");
+            using ProjectFromString projectFromString = new(content);
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "t" }, new ILogger[] { logger });
             logger.AssertLogContains("MSB4191"); // Metadata not allowed
@@ -1047,14 +1053,15 @@ public void ItemGroupWithMetadataReferencesOnMetadataConditions()
         public void ItemGroupWithMetadataReferencesOnItemGroupAndItemConditionsErrors()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
-            @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
+            var content = ObjectModelHelpers.CleanupFileContents(
+                        @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
             <Target Name='t'>
                 <ItemGroup Condition=""'%(i0.m)' != m1"" >
                     <i1 Include=""%(m)"" Condition=""'%(i0.m)' != m3""/>
                 </ItemGroup>
-            </Target></Project>")));
-            Project p = new Project(xmlReader);
+            </Target></Project>");
+            using ProjectFromString projectFromString = new(content);
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "t" }, new ILogger[] { logger });
             logger.AssertLogContains("MSB4191"); // Metadata not allowed
@@ -1130,14 +1137,15 @@ public void PropertyGroupWithCumulativePropertyReferences()
         public void PropertyGroupWithMetadataReferencesOnGroupErrors()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
             <Target Name='t'>
                 <PropertyGroup Condition=""'%(i0.m)' != m1"">
                     <p1>%(i0.m)</p1>
                 </PropertyGroup>
-            </Target></Project>")));
-            Project p = new Project(xmlReader);
+            </Target></Project>");
+            using ProjectFromString projectFromString = new(content);
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "t" }, new ILogger[] { logger });
             logger.AssertLogContains("MSB4191");
@@ -1179,7 +1187,7 @@ public void PropertyGroupWithMetadataReferencesOnProperty()
         public void PropertiesCanReferenceItemsInSameTarget()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <Target Name='t'>
                     <ItemGroup>
@@ -1191,8 +1199,8 @@ public void PropertiesCanReferenceItemsInSameTarget()
                     <Message Text='[$(p)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains("[#a1#*#a2#]");
@@ -1202,7 +1210,7 @@ public void PropertiesCanReferenceItemsInSameTarget()
         public void ItemsCanReferencePropertiesInSameTarget()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <Target Name='t'>
                     <PropertyGroup>
@@ -1214,8 +1222,8 @@ public void ItemsCanReferencePropertiesInSameTarget()
                     <Message Text='[@(i1)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains("[v0]");
@@ -1228,7 +1236,7 @@ public void PropertyGroupInTargetCanOverwriteGlobalProperties()
             Dictionary<string, string> globalProperties = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             globalProperties.Add("global", "v0");
 
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <PropertyGroup>
                     <global>v1</global>
@@ -1244,9 +1252,9 @@ public void PropertyGroupInTargetCanOverwriteGlobalProperties()
                     <Message Text='end:[$(global)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project project = new Project(xmlReader, globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion);
+            "), globalProperties, ObjectModelHelpers.MSBuildDefaultToolsVersion);
 
+            Project project = projectFromString.Project;
             ProjectInstance p = project.CreateProjectInstance();
 
             Assert.Equal("v0", p.GetProperty("global").EvaluatedValue);
@@ -1266,7 +1274,7 @@ public void PropertyGroupInTargetCanOverwriteGlobalProperties()
         public void PropertiesAreRevertedAfterBuild()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <PropertyGroup>
                     <p>p0</p>
@@ -1277,8 +1285,8 @@ public void PropertiesAreRevertedAfterBuild()
                     </PropertyGroup>
                   </Target>
                 </Project>
-            ")));
-            Project project = new Project(xmlReader);
+            "));
+            Project project = projectFromString.Project;
 
             ProjectInstance p = project.CreateProjectInstance();
             p.Build(new string[] { "t" }, new ILogger[] { logger });
@@ -1296,7 +1304,7 @@ public void PropertiesAreRevertedAfterBuild()
         public void PropertiesVisibleToSubsequentTask()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <Target Name='t'>
                     <PropertyGroup>
@@ -1305,8 +1313,8 @@ public void PropertiesVisibleToSubsequentTask()
                     <Message Text='[$(p)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains("[p1]");
@@ -1316,7 +1324,7 @@ public void PropertiesVisibleToSubsequentTask()
         public void PropertiesVisibleToSubsequentTarget()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <Target Name='t2' DependsOnTargets='t'>
                     <Message Text='[$(p)]'/>
@@ -1327,8 +1335,8 @@ public void PropertiesVisibleToSubsequentTarget()
                     </PropertyGroup>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t2" }, new ILogger[] { logger });
 
             logger.AssertLogContains("[p1]");
@@ -1338,7 +1346,7 @@ public void PropertiesVisibleToSubsequentTarget()
         public void ItemsVisibleToSubsequentTask()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <Target Name='t'>
                     <ItemGroup>
@@ -1347,8 +1355,8 @@ public void ItemsVisibleToSubsequentTask()
                     <Message Text='[@(i)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains("[i1]");
@@ -1358,7 +1366,7 @@ public void ItemsVisibleToSubsequentTask()
         public void ItemsVisibleToSubsequentTarget()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <Target Name='t2' DependsOnTargets='t'>
                     <Message Text='[@(i)]'/>
@@ -1369,8 +1377,8 @@ public void ItemsVisibleToSubsequentTarget()
                     </ItemGroup>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t2" }, new ILogger[] { logger });
 
             logger.AssertLogContains("[i1]");
@@ -1380,7 +1388,7 @@ public void ItemsVisibleToSubsequentTarget()
         public void ItemsNotVisibleToParallelTargetBatches()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i Include='1.in'><output>1.out</output></i>
@@ -1394,8 +1402,8 @@ public void ItemsNotVisibleToParallelTargetBatches()
                     <Message Text='end:[@(j)]'/>
                 </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "start:[1.in]", "end:[1.in]", "start:[2.in]", "end:[2.in]" });
@@ -1405,7 +1413,7 @@ public void ItemsNotVisibleToParallelTargetBatches()
         public void PropertiesNotVisibleToParallelTargetBatches()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i Include='1.in'><output>1.out</output></i>
@@ -1419,8 +1427,8 @@ public void PropertiesNotVisibleToParallelTargetBatches()
                     <Message Text='end:[$(p)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "start:[]", "end:[p1]", "start:[]", "end:[p1]" });
@@ -1437,7 +1445,7 @@ public void ItemsInPartialBuild()
                 newFiles = ObjectModelHelpers.GetTempFiles(2, new DateTime(2006, 1, 1));
 
                 MockLogger logger = new MockLogger();
-                using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+                using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i Include='" + oldFiles.First() + "'><output>" + newFiles.First() + @"</output></i>
@@ -1454,8 +1462,8 @@ public void ItemsInPartialBuild()
                     <Message Text='end:[@(j)]'/>
                 </Target>
                 </Project>
-            ")));
-                Project p = new Project(xmlReader);
+            "));
+                Project p = projectFromString.Project;
                 p.Build(new string[] { "t2" }, new ILogger[] { logger });
 
                 // We should only see messages for the out of date inputs, but the itemgroup should do its work for both inputs
@@ -1479,7 +1487,7 @@ public void PropertiesInPartialBuild()
                 newFiles = ObjectModelHelpers.GetTempFiles(2, new DateTime(2006, 1, 1));
 
                 MockLogger logger = new MockLogger();
-                using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+                using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i Include='" + oldFiles.First() + "'><output>" + newFiles.First() + @"</output></i>
@@ -1496,8 +1504,8 @@ public void PropertiesInPartialBuild()
                     <Message Text='end:[$(p)]'/>
                 </Target>
                 </Project>
-            ")));
-                Project p = new Project(xmlReader);
+            "));
+                Project p = projectFromString.Project;
                 p.Build(new string[] { "t2" }, new ILogger[] { logger });
 
                 // We should only see messages for the out of date inputs, but the propertygroup should do its work for both inputs
@@ -1526,7 +1534,7 @@ public void ItemsInPartialBuildVisibleToSubsequentlyInferringTasks()
                 string newOutput = newFiles.First();
 
                 MockLogger logger = new MockLogger();
-                using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+                using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i Include='" + oldInput + "'><output>" + newOutput + @"</output></i>
@@ -1547,8 +1555,8 @@ public void ItemsInPartialBuildVisibleToSubsequentlyInferringTasks()
                     <Message Text='end:[@(i)]'/>
                 </Target>
                 </Project>
-            ")));
-                Project p = new Project(xmlReader);
+            "));
+                Project p = projectFromString.Project;
                 p.Build(new string[] { "t2" }, new ILogger[] { logger });
 
                 // We should only see messages for the out of date inputs, but the itemgroup should do its work for both inputs;
@@ -1628,7 +1636,7 @@ public void RemoveItemInTarget()
         public void RemoveOfItemAddedInTargetByParallelTargetBatchDoesNothing()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <!-- just to cause two target batches -->
@@ -1657,8 +1665,8 @@ public void RemoveOfItemAddedInTargetByParallelTargetBatchDoesNothing()
                     <Message Text='final:[@(j)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t", "t2" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "final:[a;b;d]" });
@@ -2252,7 +2260,7 @@ public void RegressPCHBug()
         public void RemovesOfPersistedItemsAreReversed()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i0 Include='a1'/>
@@ -2264,8 +2272,8 @@ public void RemovesOfPersistedItemsAreReversed()
                     <Message Text='[@(i0)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project project = new Project(xmlReader);
+            "));
+            Project project = projectFromString.Project;
 
             ProjectInstance p = project.CreateProjectInstance();
             p.Build(new string[] { "t" }, new ILogger[] { logger });
@@ -2285,7 +2293,7 @@ public void RemovesOfPersistedItemsAreReversed()
         public void RemovesOfPersistedItemsAreReversed1()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i0 Include='a1'/>
@@ -2298,8 +2306,8 @@ public void RemovesOfPersistedItemsAreReversed1()
                     <Message Text='[@(i0)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project project = new Project(xmlReader);
+            "));
+            Project project = projectFromString.Project;
 
             ProjectInstance p = project.CreateProjectInstance();
             p.Build(new string[] { "t" }, new ILogger[] { logger });
@@ -2318,7 +2326,7 @@ public void RemovesOfPersistedItemsAreReversed1()
         public void RemovesOfPersistedItemsAreReversed2()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i0 Include='a1'/>
@@ -2335,8 +2343,8 @@ public void RemovesOfPersistedItemsAreReversed2()
                     <Message Text='[@(i0)][@(i1)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project project = new Project(xmlReader);
+            "));
+            Project project = projectFromString.Project;
 
             ProjectInstance p = project.CreateProjectInstance();
             p.Build(new string[] { "t" }, new ILogger[] { logger });
@@ -2356,7 +2364,7 @@ public void RemovesOfPersistedItemsAreReversed2()
         public void RemovesOfPersistedItemsAreReversed3()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i0 Include='a1'>
@@ -2373,8 +2381,8 @@ public void RemovesOfPersistedItemsAreReversed3()
                     <Message Text='[%(i0.m)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project project = new Project(xmlReader);
+            "));
+            Project project = projectFromString.Project;
             ProjectInstance p = project.CreateProjectInstance();
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
@@ -2396,7 +2404,7 @@ public void RemovesOfPersistedItemsAreReversed3()
         public void RemovesOfPersistedItemsAreReversed4()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i0 Include='a1'/>
@@ -2409,8 +2417,8 @@ public void RemovesOfPersistedItemsAreReversed4()
                     <Message Text='[@(i0)][@(i1)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project project = new Project(xmlReader);
+            "));
+            Project project = projectFromString.Project;
 
             ProjectInstance p = project.CreateProjectInstance();
             p.Build(new string[] { "t" }, new ILogger[] { logger });
@@ -2431,7 +2439,7 @@ public void RemovesOfPersistedItemsAreReversed4()
         public void RemovesOfItemsOnlyWithMetadataValue()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i0 Include='a1'>
@@ -2448,8 +2456,8 @@ public void RemovesOfItemsOnlyWithMetadataValue()
                     <Message Text='[%(i0.m)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project project = new Project(xmlReader);
+            "));
+            Project project = projectFromString.Project;
             ProjectInstance p = project.CreateProjectInstance();
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
@@ -2461,7 +2469,7 @@ public void RemovesOfItemsOnlyWithMetadataValue()
         public void RemoveBatchingOnRemoveValue()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i0 Include='m1;m2;m3'/>
@@ -2479,8 +2487,8 @@ public void RemoveBatchingOnRemoveValue()
                     <Message Text='[@(i0)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project project = new Project(xmlReader);
+            "));
+            Project project = projectFromString.Project;
             ProjectInstance p = project.CreateProjectInstance();
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
@@ -2521,7 +2529,7 @@ public void RemoveWithWildcards()
         public void RemovesNotVisibleToParallelTargetBatches()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i Include='1.in'><output>1.out</output></i>
@@ -2535,8 +2543,8 @@ public void RemovesNotVisibleToParallelTargetBatches()
                     <Message Text='end:[@(i)]'/>
                 </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "start:[1.in]", "end:[]", "start:[2.in]", "end:[]" });
@@ -2546,7 +2554,7 @@ public void RemovesNotVisibleToParallelTargetBatches()
         public void RemovesNotVisibleToParallelTargetBatches2()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i Include='1.in'><output>1.out</output></i>
@@ -2561,8 +2569,8 @@ public void RemovesNotVisibleToParallelTargetBatches2()
                     <Message Text='end:[@(j)]'/>
                 </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "start:[j1]", "end:[]", "start:[j1]", "end:[]" });
@@ -2577,7 +2585,7 @@ public void RemovesNotVisibleToParallelTargetBatches2()
         public void CalledTargetItemsAreNotVisibleToCallerTarget()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i Include='a'/>
@@ -2605,8 +2613,8 @@ public void CalledTargetItemsAreNotVisibleToCallerTarget()
                     </PropertyGroup>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t3" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "in target:[a][a]", "after target:[a;b;c][a;b;c]" });
@@ -2619,7 +2627,7 @@ public void CalledTargetItemsAreNotVisibleToCallerTarget()
         public void CalledTargetItemsAreVisibleWhenTargetsRunFromSeperateTasks()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
     <Target Name='Build' DependsOnTargets='t'>
         <Message Text='Props During Build:[$(SomeProperty)]'/>
@@ -2648,8 +2656,8 @@ public void CalledTargetItemsAreVisibleWhenTargetsRunFromSeperateTasks()
         <Message Text='Items During t2:[@(SomeItem)]'/>
     </Target>
 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "Build" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "Props During t1:[prop]", "Props During t2:[prop]", "Props After t1;t2:[]", "Props During Build:[prop]" });
@@ -2664,7 +2672,7 @@ public void CalledTargetItemsAreVisibleWhenTargetsRunFromSeperateTasks()
         public void CalledTargetItemsAreVisibleWhenTargetsRunSeperately()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
     <Target Name='Build' DependsOnTargets='t'>
         <Message Text='Props During Build:[$(SomeProperty)]'/>
@@ -2692,8 +2700,8 @@ public void CalledTargetItemsAreVisibleWhenTargetsRunSeperately()
         <Message Text='Items During t2:[@(SomeItem)]'/>
     </Target>
 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "Build" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "Props During t1:[prop]", "Props During t2:[prop]", "Props After t1;t2:[]", "Props During Build:[prop]" });
@@ -2708,7 +2716,7 @@ public void CalledTargetItemsAreVisibleWhenTargetsRunSeperately()
         public void CalledTargetItemsAreVisibleWhenTargetsRunTogether()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
     <Target Name='Build' DependsOnTargets='t'>
         <Message Text='Props During Build:[$(SomeProperty)]'/>
@@ -2736,8 +2744,8 @@ public void CalledTargetItemsAreVisibleWhenTargetsRunTogether()
         <Message Text='Items During t2:[@(SomeItem)]'/>
     </Target>
 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "Build" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "Props During t1:[prop]", "Props During t2:[prop]", "Props After t1;t2:[]", "Props During Build:[prop]" });
@@ -2753,7 +2761,7 @@ public void CalledTargetItemsAreVisibleWhenTargetsRunTogether()
         public void CallerTargetItemsAreNotVisibleToCalledTarget()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i Include='a'/>
@@ -2781,8 +2789,8 @@ public void CallerTargetItemsAreNotVisibleToCalledTarget()
                     <Message Text='in target:[$(p)][@(i)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t3" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "in target:[a][a]", "after target:[a;b;c][a;b;c]" });
@@ -2832,7 +2840,7 @@ public void ModifyItemInTarget()
         public void ModifyItemInTargetComplex()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
               <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                 <PropertyGroup>
                   <p1>true</p1>
@@ -2854,8 +2862,8 @@ public void ModifyItemInTargetComplex()
                     <Message Text='[%(i.identity)|%(i.m1)|%(i.m2)|%(i.m3)]'/>
                 </Target>
               </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains(@"[item1|v1|v2|v3]");
@@ -2890,7 +2898,7 @@ public void ModifyItemInTargetLastMetadataWins()
         public void ModifyItemEmittedByTask()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <Target Name='t'>
                     <CreateItem Include='a1' AdditionalMetadata='m=m1;n=n1'>
@@ -2904,8 +2912,8 @@ public void ModifyItemEmittedByTask()
                     <Message Text='[%(i1.m)][%(i1.n)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "[m2][n1]" });
@@ -3096,7 +3104,7 @@ public void ModifyItemOutsideTarget()
         public void RemoveComplexMidlExample()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
   <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
     <PropertyGroup>
       <UseIdlBasedDllData>true</UseIdlBasedDllData>
@@ -3134,8 +3142,8 @@ public void RemoveComplexMidlExample()
         <Message Text='[%(idl.identity)|%(idl.dlldatafilename)|%(idl.headerfilename)|%(idl.TypeLibraryName)|%(idl.ProxyFileName)|%(idl.InterfaceIdentifierFileName)]'/>
     </Target>
   </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "MIDL" }, new ILogger[] { logger });
 
             logger.AssertLogContains(@"[a.idl|dlldatadir\a_dlldata.c|headerdir\a.h|tlbdir\a.tlb|proxydir\a_p.c|interfacedir\a_i.c]",
@@ -3147,7 +3155,7 @@ public void RemoveComplexMidlExample()
         public void ModifiesOfPersistedItemsAreReversed1()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i0 Include='i1'>
@@ -3165,8 +3173,8 @@ public void ModifiesOfPersistedItemsAreReversed1()
                     <Message Text='[%(i0.m)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project project = new Project(xmlReader);
+            "));
+            Project project = projectFromString.Project;
 
             ProjectInstance p = project.CreateProjectInstance();
             p.Build(new string[] { "t", "t2" }, new ILogger[] { logger });
@@ -3188,7 +3196,7 @@ public void ModifiesOfPersistedItemsAreReversed1()
         public void ModifiesOfPersistedItemsAreReversed2()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i0 Include='i1'>
@@ -3211,8 +3219,8 @@ public void ModifiesOfPersistedItemsAreReversed2()
                     <Message Text='[%(i1.m)][%(i1.n)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project project = new Project(xmlReader);
+            "));
+            Project project = projectFromString.Project;
 
             ProjectInstance p = project.CreateProjectInstance();
             p.Build(new string[] { "t", "t2" }, new ILogger[] { logger });
@@ -3243,7 +3251,7 @@ public void IncludeCheckOnMetadata()
         {
             MockLogger logger = new MockLogger();
 
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project xmlns='msbuildnamespace'>
                    <Target Name='a'>
                      <ItemGroup>
@@ -3253,8 +3261,8 @@ public void IncludeCheckOnMetadata()
 
                       <Message Text='[%(Content.Identity)]->[%(Content.Extension)]' Importance='High'/>
                    </Target>
-                </Project> ")));
-            Project p = new Project(xmlReader);
+                </Project> "));
+            Project p = projectFromString.Project;
             bool success = p.Build(new string[] { "a" }, new ILogger[] { logger });
             Assert.True(success);
             logger.AssertLogContains("[a.dll]->[.dll]");
@@ -3270,7 +3278,7 @@ public void IncludeCheckOnMetadata2()
         {
             MockLogger logger = new MockLogger();
 
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project xmlns='msbuildnamespace'>
                    <Target Name='a'>
                      <ItemGroup>
@@ -3281,8 +3289,8 @@ public void IncludeCheckOnMetadata2()
 
                       <Message Text='[%(Content.Identity)]->[%(Content.Extension)]' Importance='High'/>
                    </Target>
-                </Project> ")));
-            Project p = new Project(xmlReader);
+                </Project> "));
+            Project p = projectFromString.Project;
             bool success = p.Build(new string[] { "a" }, new ILogger[] { logger });
             Assert.True(success);
             logger.AssertLogContains("[a.dll]->[.dll]");
@@ -3318,7 +3326,7 @@ public void IncludeCheckOnMetadata_3()
 
                 File.WriteAllText(fileForTest, fileForTest);
 
-                using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+                using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project xmlns='msbuildnamespace'>
                    <Target Name='a'>
                      <ItemGroup>
@@ -3327,8 +3335,8 @@ public void IncludeCheckOnMetadata_3()
                     </ItemGroup>
                          <Message Text='[%(Content.Identity)]->[%(Content.Extension)]->[%(Content.RecursiveDir)]' Importance='High'/>
                      </Target>
-                </Project> ")));
-                Project p = new Project(xmlReader);
+                </Project> "));
+                Project p = projectFromString.Project;
                 bool success = p.Build(new string[] { "a" }, new ILogger[] { logger });
                 Assert.True(success);
                 logger.AssertLogContains("[a.dll]->[.dll]->[]");
@@ -3361,7 +3369,7 @@ public void RemoveItemInImportedFile()
                   </ItemGroup>
                 </Project>
             "));
-                using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+                using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                     <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                       <Import Project='" + importedFile + @"'/>
                       <Target Name='t'>
@@ -3372,8 +3380,8 @@ public void RemoveItemInImportedFile()
                         <Message Text='[@(i1)]'/>
                       </Target>
                     </Project>
-                ")));
-                Project p = new Project(xmlReader);
+                "));
+                Project p = projectFromString.Project;
                 p.Build(new string[] { "t" }, new ILogger[] { logger });
 
                 logger.AssertLogContains("[imported]", "[]");
@@ -3400,7 +3408,7 @@ public void ModifyItemInImportedFile()
                   </ItemGroup>
                 </Project>
             "));
-                using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+                using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                     <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                       <Import Project='" + importedFile + @"'/>
                       <Target Name='t'>
@@ -3412,8 +3420,8 @@ public void ModifyItemInImportedFile()
                         <Message Text='[%(i1.m)]'/>
                       </Target>
                     </Project>
-                ")));
-                Project p = new Project(xmlReader);
+                "));
+                Project p = projectFromString.Project;
                 p.Build(new string[] { "t" }, new ILogger[] { logger });
 
                 logger.AssertLogContains("[m1]");
@@ -3431,7 +3439,7 @@ public void ModifyItemInImportedFile()
         public void OutputPropertiesInTargetBatchesCreateItem()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <!-- just to cause two target batches -->
@@ -3449,8 +3457,8 @@ public void OutputPropertiesInTargetBatchesCreateItem()
                     <Message Text='final:[$(p)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t", "t2" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "start:[]", "end:[--1.in]", "start:[]", "end:[--2.in]", "final:[--2.in]" });
@@ -3463,7 +3471,7 @@ public void OutputPropertiesInTargetBatchesCreateItem()
         public void OutputPropertiesInTaskBatchesCreateItem()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <Target Name='t'>
                     <ItemGroup>
@@ -3475,8 +3483,8 @@ public void OutputPropertiesInTaskBatchesCreateItem()
                     <Message Text='end:[$(p)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains(new string[] { "end:[--2.in]" });
@@ -3488,7 +3496,7 @@ public void OutputPropertiesInTaskBatchesCreateItem()
         [Fact]
         public void PhoenixBatchingIssue()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectRootElementFromString projectRootElementFromString = new(ObjectModelHelpers.CleanupFileContents(@"
             <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                 <ItemGroup>
                     <CppCompile Include='gen.cpp'/>
@@ -3508,8 +3516,8 @@ public void PhoenixBatchingIssue()
                     </ItemGroup>
                 </Target>
             </Project>
-            ")));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            "));
+            ProjectRootElement xml = projectRootElementFromString.Project;
             ProjectInstance instance = new ProjectInstance(xml);
             instance.Build();
 
@@ -3527,7 +3535,7 @@ public void PropertiesInInferredBuildCreateProperty()
                 files = ObjectModelHelpers.GetTempFiles(2, new DateTime(2005, 1, 1));
 
                 MockLogger logger = new MockLogger();
-                using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+                using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <i Include='" + files.First() + "'><output>" + files.ElementAt(1) + @"</output></i>
@@ -3543,8 +3551,8 @@ public void PropertiesInInferredBuildCreateProperty()
                     <Message Text='end:[$(p)]'/>
                 </Target>
                 </Project>
-            ")));
-                Project p = new Project(xmlReader);
+            "));
+                Project p = projectFromString.Project;
                 p.Build(new string[] { "t2" }, new ILogger[] { logger });
 
                 // We should only see messages from the second target, as the first is only inferred
@@ -3562,7 +3570,7 @@ public void PropertiesInInferredBuildCreateProperty()
         public void ModifyItemPreviouslyModified()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <x Include='a'/>
@@ -3579,8 +3587,8 @@ public void ModifyItemPreviouslyModified()
                     <Message Text='[%(x.m1)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogDoesntContain("[1]");
@@ -3591,7 +3599,7 @@ public void ModifyItemPreviouslyModified()
         public void ModifyItemPreviouslyModified2()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <x Include='a'/>
@@ -3610,8 +3618,8 @@ public void ModifyItemPreviouslyModified2()
                     <Message Text='[%(x.m1)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogDoesntContain("[1]");
@@ -3622,7 +3630,7 @@ public void ModifyItemPreviouslyModified2()
         public void RemoveItemPreviouslyModified()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <x Include='a'/>
@@ -3637,8 +3645,8 @@ public void RemoveItemPreviouslyModified()
                     <Message Text='[%(x.m1)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogDoesntContain("[1]");
@@ -3649,7 +3657,7 @@ public void RemoveItemPreviouslyModified()
         public void RemoveItemPreviouslyModified2()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <x Include='a'/>
@@ -3666,8 +3674,8 @@ public void RemoveItemPreviouslyModified2()
                     <Message Text='[%(x.m1)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogDoesntContain("[1]");
@@ -3678,7 +3686,7 @@ public void RemoveItemPreviouslyModified2()
         public void FilterItemPreviouslyModified()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <x Include='a'/>
@@ -3695,8 +3703,8 @@ public void FilterItemPreviouslyModified()
                     <Message Text='[%(x.m1)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogDoesntContain("[1]");
@@ -3707,7 +3715,7 @@ public void FilterItemPreviouslyModified()
         public void FilterItemPreviouslyModified2()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                   <ItemGroup>
                     <x Include='a'/>
@@ -3724,8 +3732,8 @@ public void FilterItemPreviouslyModified2()
                     <Message Text='[%(x.m1)]'/>
                   </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogDoesntContain("[1]");
@@ -3736,7 +3744,7 @@ public void FilterItemPreviouslyModified2()
         public void FilterItemPreviouslyModified3()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <ItemGroup>
                        <A Include='a;b;c'>
@@ -3762,8 +3770,8 @@ public void FilterItemPreviouslyModified3()
                        <Message Text='[@(A) = %(A.m)]'/>
                    </Target>
                 </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains("[a;b;c = m4]");
@@ -3773,7 +3781,7 @@ public void FilterItemPreviouslyModified3()
         public void FilterItemPreviouslyModified4()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='t'>
                        <ItemGroup>
@@ -3790,8 +3798,8 @@ public void FilterItemPreviouslyModified4()
                        <Message Text='[@(A) = %(A.m)]'/>
                    </Target>
                </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains("[b = m1]");
@@ -3802,7 +3810,7 @@ public void FilterItemPreviouslyModified4()
         public void FilterItemPreviouslyModified5()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='t'>
                        <ItemGroup>
@@ -3819,8 +3827,8 @@ public void FilterItemPreviouslyModified5()
                        <Message Text='[@(A) = %(A.m)]'/>
                    </Target>
                </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains("[a = m3]");
@@ -3832,7 +3840,7 @@ public void FilterItemPreviouslyModified5()
         public void FilterItemPreviouslyModified6()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                     <ItemGroup>
                         <A Include='a;b;c'>
@@ -3858,8 +3866,8 @@ public void FilterItemPreviouslyModified6()
                         <Message Text='[@(A)=%(A.m)]'/>
                     </Target>
                </Project>
-            ")));
-            Project p = new Project(xmlReader);
+            "));
+            Project p = projectFromString.Project;
             p.Build(new string[] { "t" }, new ILogger[] { logger });
 
             logger.AssertLogContains("[a;b;c=]");
@@ -3920,8 +3928,8 @@ private static Lookup GenerateLookup(ProjectInstance project, PropertyDictionary
 
         private static IntrinsicTask CreateIntrinsicTask(string content)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
             ProjectInstance projectInstance = project.CreateProjectInstance();
             ProjectTargetInstanceChild targetChild = projectInstance.Targets["t"].Children.First();
 
diff --git a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
index a67a03159b9..1b284256d39 100644
--- a/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/LoggingServicesLogMethod_Tests.cs
@@ -462,11 +462,11 @@ public void VerifyErrorPostfixForInvalidProjectFileException()
             try
             {
                 Directory.CreateDirectory(testTempPath);
-                using var projectfileReader = XmlReader.Create(new StringReader(projectfileContent));
-                ProjectRootElement project = ProjectRootElement.Create(projectfileReader);
+                using ProjectRootElementFromString projectRootElementFromString = new(projectfileContent);
+                ProjectRootElement project = projectRootElementFromString.Project;
                 project.Save(projectFile);
-                using var targetsfileReader = XmlReader.Create(new StringReader(targetsfileContent));
-                project = ProjectRootElement.Create(targetsfileReader);
+                using ProjectRootElementFromString projectRootElementFromtargetString = new(targetsfileContent);
+                project = projectRootElementFromtargetString.Project;
                 project.Save(targetsFile);
                 Project msbuildProject = new Project(projectFile);
                 msbuildProject.Build(mockLogger);
diff --git a/src/Build.UnitTests/BackEnd/OnError_Tests.cs b/src/Build.UnitTests/BackEnd/OnError_Tests.cs
index 311eae53bed..ef37988daff 100644
--- a/src/Build.UnitTests/BackEnd/OnError_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/OnError_Tests.cs
@@ -33,8 +33,7 @@ public sealed class OnError_Tests
         public void Basic()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
-
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='CleanUp'>
                       <Message Text='CleanUp-was-called.'/>
@@ -43,8 +42,8 @@ public void Basic()
                       <Error Text='This is an error.'/>
                       <OnError ExecuteTargets='CleanUp'/>
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -89,7 +88,7 @@ public void FailingTaskStillPublishesOutputs()
                       </data>
                     </root>");
 
-                using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+                using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
                     <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                         <Target Name='Build'>
 
@@ -108,8 +107,8 @@ public void FailingTaskStillPublishesOutputs()
                             <Message Text='[@(fileswrittenitem)]'/>
                             <Message Text='[$(fileswrittenproperty)]'/>
                         </Target>
-                    </Project>")));
-                Project project = new Project(xmlReader);
+                    </Project>"));
+                Project project = projectFromString.Project;
 
                 ProjectInstance p = project.CreateProjectInstance();
                 p.Build(new string[] { "Build" }, new ILogger[] { l });
@@ -144,7 +143,7 @@ public void FailingTaskStillPublishesOutputs()
         public void OnErrorSeesPropertiesAndItemsFromFirstTarget()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
 
@@ -171,8 +170,8 @@ public void OnErrorSeesPropertiesAndItemsFromFirstTarget()
                       <Message Text='[@(i1)][$(p1)][$(p2)]'/>
                    </Target>
 
-                </Project>")));
-            Project p = new Project(xmlReader);
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -189,7 +188,7 @@ public void OnErrorSeesPropertiesAndItemsFromFirstTarget()
         public void TwoExecuteTargets()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='CleanUp'>
@@ -202,8 +201,8 @@ public void TwoExecuteTargets()
                       <Error Text='This is an error.'/>
                       <OnError ExecuteTargets='CleanUp;CleanUp2'/>
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -221,7 +220,7 @@ public void TwoExecuteTargets()
         public void TwoOnErrorClauses()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='CleanUp'>
@@ -235,8 +234,8 @@ public void TwoOnErrorClauses()
                       <OnError ExecuteTargets='CleanUp'/>
                       <OnError ExecuteTargets='CleanUp2'/>
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -255,7 +254,7 @@ public void TwoOnErrorClauses()
         public void DependentTarget()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='CleanUp' DependsOnTargets='CleanUp2'>
@@ -268,8 +267,8 @@ public void DependentTarget()
                       <Error Text='This is an error.'/>
                       <OnError ExecuteTargets='CleanUp'/>
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -288,7 +287,7 @@ public void DependentTarget()
         public void ErrorInChildIsHandledInParent()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='CleanUp'>
@@ -300,8 +299,8 @@ public void ErrorInChildIsHandledInParent()
                    <Target Name='Build' DependsOnTargets='BuildStep1'>
                       <OnError ExecuteTargets='CleanUp'/>
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -320,15 +319,15 @@ public void ErrorInChildIsHandledInParent()
         public void NonExistentExecuteTarget()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='Build'>
                       <Error Text='This is an error.'/>
                       <OnError ExecuteTargets='CleanUp'/>
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -345,7 +344,7 @@ public void NonExistentExecuteTarget()
         public void TrueCondition()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='CleanUp'>
@@ -355,8 +354,8 @@ public void TrueCondition()
                       <Error Text='This is an error.'/>
                       <OnError Condition=""'A'!='B'"" ExecuteTargets='CleanUp'/>
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -373,7 +372,7 @@ public void TrueCondition()
         public void FalseCondition()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='CleanUp'>
@@ -383,9 +382,8 @@ public void FalseCondition()
                       <Error Text='This is an error.'/>
                       <OnError Condition=""'A'=='B'"" ExecuteTargets='CleanUp'/>
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
-
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -402,7 +400,7 @@ public void FalseCondition()
         public void PropertiesInExecuteTargets()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <PropertyGroup>
@@ -416,8 +414,8 @@ public void PropertiesInExecuteTargets()
                       <Error Text='This is an error.'/>
                       <OnError Condition=""'A'!='B'"" ExecuteTargets='$(Part1)$(Part2)'/>
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -435,7 +433,7 @@ public void PropertiesInExecuteTargets()
         public void ErrorTargetsContinueAfterErrorsInErrorHandler()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='CleanUp1'>
@@ -457,8 +455,8 @@ public void ErrorTargetsContinueAfterErrorsInErrorHandler()
                    <Target Name='Build' DependsOnTargets='CoreBuild'>
                       <OnError ExecuteTargets='CleanUp3'/>
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -477,15 +475,15 @@ public void ErrorTargetsContinueAfterErrorsInErrorHandler()
         public void ExecuteTargetIsMissing()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='Build'>
                       <Error Text='This is an error.'/>
                       <OnError Condition=""'A'!='B'"" ExecuteTargets='CleanUp'/>
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -502,7 +500,7 @@ public void ExecuteTargetIsMissing()
         public void CommentsAroundOnError()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='CleanUp'>
@@ -514,8 +512,8 @@ public void CommentsAroundOnError()
                       <OnError Condition=""'A'!='B'"" ExecuteTargets='CleanUp'/>
                       <!-- Comment after OnError -->
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -532,16 +530,15 @@ public void CommentsAroundOnError()
         public void CircularDependency()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+            using ProjectFromString projectFromString = new(ObjectModelHelpers.CleanupFileContents(@"
 
                 <Project DefaultTargets='Build' ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
                    <Target Name='Build'>
                       <Error Text='Error in Build-Target'/>
                       <OnError ExecuteTargets='Build'/>
                    </Target>
-                </Project>")));
-            Project p = new Project(xmlReader);
-
+                </Project>"));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -611,8 +608,8 @@ public void ErrorWhenTaskFailsWithoutLoggingErrorEscapeHatch(string failureRespo
         public void PostBuildBasic()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(PostBuildBuilder("On_Success", FailAt.Nowhere)));
-            Project p = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(PostBuildBuilder("On_Success", FailAt.Nowhere));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -633,8 +630,8 @@ public void PostBuildBasic()
         public void PostBuildOnSuccessWhereCompileFailed()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(PostBuildBuilder("On_Success", FailAt.Compile)));
-            Project p = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(PostBuildBuilder("On_Success", FailAt.Compile));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -656,8 +653,8 @@ public void PostBuildOnSuccessWhereCompileFailed()
         public void PostBuildOnSuccessWhereGenerateSatellitesFailed()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(PostBuildBuilder("On_Success", FailAt.GenerateSatellites)));
-            Project p = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(PostBuildBuilder("On_Success", FailAt.GenerateSatellites));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -679,8 +676,8 @@ public void PostBuildOnSuccessWhereGenerateSatellitesFailed()
         public void PostBuildAlwaysWhereCompileFailed()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(PostBuildBuilder("Always", FailAt.Compile)));
-            Project p = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(PostBuildBuilder("Always", FailAt.Compile));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -702,8 +699,8 @@ public void PostBuildAlwaysWhereCompileFailed()
         public void PostBuildFinalOutputChangedWhereCompileFailed()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(PostBuildBuilder("Final_Output_Changed", FailAt.Compile)));
-            Project p = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(PostBuildBuilder("Final_Output_Changed", FailAt.Compile));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -725,8 +722,8 @@ public void PostBuildFinalOutputChangedWhereCompileFailed()
         public void PostBuildFinalOutputChangedWhereGenerateSatellitesFailed()
         {
             MockLogger l = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(PostBuildBuilder("Final_Output_Changed", FailAt.GenerateSatellites)));
-            Project p = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(PostBuildBuilder("Final_Output_Changed", FailAt.GenerateSatellites));
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { l });
 
@@ -738,7 +735,6 @@ public void PostBuildFinalOutputChangedWhereGenerateSatellitesFailed()
             Assert.True(l.FullLog.IndexOf("PostBuild-was-called") != -1); // "The PostBuild target should have been called."
         }
 
-
         /*
          * The different places that PostBuildBuilder might be instructed to fail at
          */
diff --git a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
index 5a70b2ff927..7b0cd8745c6 100644
--- a/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/Scheduler_Tests.cs
@@ -710,8 +710,8 @@ public void TestDetailedSummary()
 ");
 
             _parameters.DetailedSummary = true;
-            using var xmlReader = new XmlTextReader(new StringReader(contents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(contents);
+            Project project = projectFromString.Project;
             BuildRequestData data = new BuildRequestData(project.CreateProjectInstance(), new string[] { "test" });
             BuildResult result = _buildManager.Build(_parameters, data);
             Assert.Equal(BuildResultCode.Success, result.OverallResult);
diff --git a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
index 37a785b1639..8807b4c2979 100644
--- a/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetBuilder_Tests.cs
@@ -319,9 +319,8 @@ public void SkippedTargetsShouldOnlyInferOutputsOnce()
 </Project>
             ",
              path);
-
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project p = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project p = projectFromString.Project;
             p.Build(new string[] { "Build" }, new ILogger[] { logger });
 
             // There should be no duplicates in the list - if there are, then skipped targets are being inferred multiple times
@@ -1316,9 +1315,8 @@ public void TestCircularDependencyInCallTarget()
     </Target>
 </Project>
       ";
-            StringReader reader = new StringReader(projectContents);
-            using var xmlReader = new XmlTextReader(reader);
-            Project project = new Project(xmlReader, null, null);
+            using ProjectFromString projectFromString = new(projectContents, null, null);
+            Project project = projectFromString.Project;
             bool success = project.Build(_mockLogger);
             Assert.False(success);
         }
@@ -1344,9 +1342,8 @@ public void TestCircularDependencyTarget()
       ";
             string errorMessage = @"There is a circular dependency in the target dependency graph involving target ""TargetA"". Since ""TargetC"" has ""DependsOn"" dependence on ""TargetA"", the circular is ""TargetA<-TargetC<-TargetB<-TargetA"".";
 
-            StringReader reader = new StringReader(projectContents);
-            using var xmlReader = new XmlTextReader(reader);
-            Project project = new Project(xmlReader, null, null);
+            using ProjectFromString projectFromString = new(projectContents, null, null);
+            Project project = projectFromString.Project;
             project.Build(_mockLogger).ShouldBeFalse();
             _mockLogger.ErrorCount.ShouldBe(1);
             _mockLogger.Errors[0].Message.ShouldBe(errorMessage);
@@ -1645,8 +1642,8 @@ private ProjectInstance CreateTestProject(string projectBodyContents, string ini
 
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("testFile", new Dictionary<string, string>(), "3.5", Array.Empty<string>(), null), "2.0");
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
 
             config.Project = project.CreateProjectInstance();
             cache.AddConfiguration(config);
diff --git a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
index e9092f7b457..3dea23f8e46 100644
--- a/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetEntry_Tests.cs
@@ -854,13 +854,14 @@ public void AfterTargetsShouldReportFailedBuild()
                 loggers.Add(logger);
 
                 using ProjectCollection collection = new ProjectCollection();
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(
-                    xmlReader,
+                using ProjectFromString projectFromString = new(
+                    content,
                     (IDictionary<string, string>)null,
                     ObjectModelHelpers.MSBuildDefaultToolsVersion,
-                    collection)
-                { FullPath = FileUtilities.GetTemporaryFile() };
+                    collection);
+                Project project = projectFromString.Project;
+
+                project.FullPath = FileUtilities.GetTemporaryFile();
                 project.Save();
                 File.Delete(project.FullPath);
 
@@ -1177,9 +1178,8 @@ private ProjectInstance CreateTestProject(bool returnsAttributeEnabled)
 
             FileStream stream = File.Create("testProject.proj");
             stream.Dispose();
-
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             return project.CreateProjectInstance();
         }
 
diff --git a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
index aa23a5bf538..5745da4823c 100644
--- a/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TargetUpToDateChecker_Tests.cs
@@ -45,7 +45,7 @@ public void Dispose()
         public void EmptyItemSpecInTargetInputs()
         {
             MockLogger ml = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
 	                <ItemGroup>
 	                    <MyFile Include='a.cs; b.cs; c.cs'/>
@@ -55,8 +55,9 @@ public void EmptyItemSpecInTargetInputs()
 	                        Outputs='foo.exe'>
 	                        <Message Text='Running Build target' Importance='High'/>
 	                </Target>
-	            </Project>")));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            using ProjectFromString projectFromString = new(content);
+            Project p = projectFromString.Project;
 
             bool success = p.Build(new string[] { "Build" }, new ILogger[] { ml });
 
@@ -73,7 +74,7 @@ public void EmptyItemSpecInTargetInputs()
         public void EmptyItemSpecInTargetOutputs()
         {
             MockLogger ml = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            var content = ObjectModelHelpers.CleanupFileContents(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
       	        <Target Name='Build'
 		            Inputs='@(TASKXML)'
@@ -88,8 +89,9 @@ public void EmptyItemSpecInTargetOutputs()
                         <PasFile>ccc32task.pas</PasFile>
 		            </TASKXML>
 	            </ItemGroup>
-              </Project>")));
-            Project p = new Project(xmlReader);
+              </Project>");
+            using ProjectFromString projectFromString = new(content);
+            Project p = projectFromString.Project;
 
             bool success = p.Build("Build", new ILogger[] { ml });
 
@@ -99,7 +101,7 @@ public void EmptyItemSpecInTargetOutputs()
             ml.AssertLogContains("Running Build target");
 
             ml = new MockLogger();
-            using var projectReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(
+            content = ObjectModelHelpers.CleanupFileContents(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion' xmlns='msbuildnamespace'>
       	        <Target Name='Build'
 		            Inputs='@(TASKXML)'
@@ -112,8 +114,9 @@ public void EmptyItemSpecInTargetOutputs()
       		        <TASKXML Include='ccc32task.xml'>
 		            </TASKXML>
 	            </ItemGroup>
-              </Project>")));
-            p = new Project(projectReader);
+              </Project>");
+            using ProjectFromString projectFromString1 = new(content);
+            p = projectFromString1.Project;
 
             success = p.Build("Build", new ILogger[] { ml });
 
@@ -286,8 +289,8 @@ public void InputItemsTransformedToDifferentNumberOfOutputsFewer()
     </Target>
 </Project>
             ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectText.Replace("`", "\"")));
-            Project p = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectText.Replace("`", "\""));
+            Project p = projectFromString.Project;
 
             Assert.True(p.Build(new string[] { "Build" }, new ILogger[] { logger }));
 
@@ -315,8 +318,8 @@ public void InputItemsTransformedToDifferentNumberOfOutputsFewer1()
     </Target>
 </Project>
             ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectText.Replace("`", "\"")));
-            Project p = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectText.Replace("`", "\""));
+            Project p = projectFromString.Project;
 
             Assert.True(p.Build(new string[] { "Build" }, new ILogger[] { logger }));
 
@@ -344,8 +347,8 @@ public void InputItemsTransformedToDifferentNumberOfOutputsMore()
     </Target>
 </Project>
             ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectText.Replace("`", "\"")));
-            Project p = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectText.Replace("`", "\""));
+            Project p = projectFromString.Project;
 
             Assert.True(p.Build(new string[] { "Build" }, new ILogger[] { logger }));
 
@@ -374,8 +377,8 @@ public void InputItemsTransformedToDifferentNumberOfOutputsMore1()
     </Target>
 </Project>
             ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectText.Replace("`", "\"")));
-            Project p = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectText.Replace("`", "\""));
+            Project p = projectFromString.Project;
 
             Assert.True(p.Build(new string[] { "Build" }, new ILogger[] { logger }));
 
@@ -409,8 +412,8 @@ public void InputItemsTransformedToDifferentNumberOfOutputsTwoWays()
     </Target>
 </Project>
             ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectText.Replace("`", "\"")));
-            Project p = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectText.Replace("`", "\""));
+            Project p = projectFromString.Project;
 
             Assert.True(p.Build(new string[] { "Build" }, new ILogger[] { logger }));
 
@@ -436,7 +439,7 @@ public void MultiInputItemsThatCorrelatesWithMultipleTransformOutputItems2()
             {
                 Directory.SetCurrentDirectory(ObjectModelHelpers.TempProjectDir);
                 MockLogger logger = new MockLogger();
-                using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(@"
+                var content = ObjectModelHelpers.CleanupFileContents(@"
 <Project InitialTargets='Setup' xmlns='msbuildnamespace'>
 
   <ItemGroup>
@@ -486,8 +489,9 @@ public void MultiInputItemsThatCorrelatesWithMultipleTransformOutputItems2()
         <Message Text='GAFT B:@(B)' />
   </Target>
 </Project>
-                ")));
-                Project p = new Project(xmlReader);
+                ");
+                using ProjectFromString projectFromString = new(content);
+                Project p = projectFromString.Project;
 
                 p.Build(new string[] { "Build" }, new ILogger[] { logger });
 
diff --git a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
index 4dc1365ffe5..c4a3d2bda19 100644
--- a/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskBuilder_Tests.cs
@@ -76,8 +76,8 @@ public void TasksAreDiscoveredWhenTaskConditionTrue()
                       </Target>
                       </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             List<ILogger> loggers = new List<ILogger>();
             loggers.Add(logger);
             project.Build("t", loggers);
@@ -129,8 +129,8 @@ public void TasksNotDiscoveredWhenTaskConditionFalse()
                       </Target>
                       </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             List<ILogger> loggers = new List<ILogger>();
             loggers.Add(logger);
             project.Build("t", loggers);
@@ -165,11 +165,9 @@ public void CanceledTasksDoNotLogMSB4181()
                     }
                 });
 
-                using var xmlReader = XmlReader.Create(new StringReader(contents));
-                var project = new Project(xmlReader, null, MSBuildConstants.CurrentToolsVersion, collection)
-                {
-                    FullPath = env.CreateFile().Path
-                };
+                using ProjectFromString projectFromString = new(contents, null, MSBuildConstants.CurrentToolsVersion, collection);
+                Project project = projectFromString.Project;
+                project.FullPath = env.CreateFile().Path;
 
                 var _parameters = new BuildParameters
                 {
@@ -237,8 +235,8 @@ public void OverridePropertiesInCreateProperty()
                       </Target>
                       </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             List<ILogger> loggers = new List<ILogger>();
             loggers.Add(logger);
             project.Build("t", loggers);
@@ -290,8 +288,8 @@ public void OverridePropertiesInInferredCreateProperty()
                     </Target>
                     </Project>");
 
-                using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-                Project project = new Project(xmlReader);
+                using ProjectFromString projectFromString = new(projectFileContents);
+                Project project = projectFromString.Project;
                 List<ILogger> loggers = new List<ILogger>();
                 loggers.Add(logger);
                 project.Build("t2", loggers);
@@ -361,8 +359,8 @@ public void TaskOutputBatching()
                     </Target>
                 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             List<ILogger> loggers = new List<ILogger>();
             loggers.Add(logger);
             project.Build(loggers);
@@ -411,8 +409,8 @@ public void MSBuildLastTaskResult()
     </Target>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             List<ILogger> loggers = new List<ILogger>();
             MockLogger logger = new MockLogger();
             loggers.Add(logger);
@@ -449,8 +447,8 @@ public void TasksCanAddRecursiveDirBuiltInMetadata()
 </Target>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             project.Build("t", new[] { logger }).ShouldBeTrue();
 
             // Assuming the current directory of the test .dll has at least one subfolder
@@ -477,8 +475,8 @@ public void OtherBuiltInMetadataErrors()
 </Target>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             List<ILogger> loggers = new List<ILogger>();
             loggers.Add(logger);
             bool result = project.Build("t", loggers);
@@ -501,8 +499,8 @@ public void OtherBuiltInMetadataErrors2()
 </Target>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             List<ILogger> loggers = new List<ILogger>();
             loggers.Add(logger);
             bool result = project.Build("t", loggers);
@@ -532,8 +530,8 @@ public void PropertiesInItemsOutOfTask()
 </Target>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             List<ILogger> loggers = new List<ILogger>();
             loggers.Add(logger);
             bool result = project.Build("t", loggers);
@@ -563,8 +561,8 @@ public void IllegalFileCharsInItemsOutOfTask()
 </Target>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             List<ILogger> loggers = new List<ILogger>();
             loggers.Add(logger);
             bool result = project.Build("t", loggers);
@@ -1096,8 +1094,8 @@ private Project CreateSTATestProject(bool requireSTA, bool failTask, bool throwE
 	</Target>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
 
             return project;
         }
@@ -1242,8 +1240,8 @@ private ProjectInstance CreateTestProject()
 
             IConfigCache cache = (IConfigCache)_host.GetComponent(BuildComponentType.ConfigCache);
             BuildRequestConfiguration config = new BuildRequestConfiguration(1, new BuildRequestData("testfile", new Dictionary<string, string>(), "3.5", Array.Empty<string>(), null), "2.0");
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             config.Project = project.CreateProjectInstance();
             cache.AddConfiguration(config);
 
diff --git a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
index e3545c85c46..61b1551576c 100644
--- a/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
+++ b/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs
@@ -1560,8 +1560,8 @@ private ProjectInstance CreateTestProject()
                 </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContents));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectFileContents);
+            Project project = projectFromString.Project;
             return project.CreateProjectInstance();
         }
     }
diff --git a/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs b/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
index 46a8d8f00b8..f7cb141db85 100644
--- a/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
+++ b/src/Build.UnitTests/Definition/ItemDefinitionGroup_Tests.cs
@@ -30,7 +30,7 @@ public class ItemDefinitionGroup_Tests
         [Fact]
         public void ItemDefinitionGroupExistsInProject()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
@@ -39,8 +39,8 @@ public void ItemDefinitionGroupExistsInProject()
                         </Compile>
                     </ItemDefinitionGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(ContainsMetadata(p.ItemDefinitions["Compile"].Metadata, "First", "1st"));
             Assert.True(ContainsMetadata(p.ItemDefinitions["Compile"].Metadata, "Second", "2nd"));
@@ -52,7 +52,7 @@ public void ItemDefinitionGroupExistsInProject()
         [Fact]
         public void MultipleItemDefinitionGroupExistsInProject()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
@@ -67,8 +67,8 @@ public void MultipleItemDefinitionGroupExistsInProject()
                         </Link>
                     </ItemDefinitionGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(ContainsMetadata(p.ItemDefinitions["Compile"].Metadata, "First", "1st"));
             Assert.True(ContainsMetadata(p.ItemDefinitions["Compile"].Metadata, "Second", "2nd"));
@@ -82,7 +82,7 @@ public void MultipleItemDefinitionGroupExistsInProject()
         [Fact]
         public void EmptyItemsInheritValues()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
@@ -100,8 +100,8 @@ public void EmptyItemsInheritValues()
                         <Compile Include='a.cs;b.cs' />
                     </ItemGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(ItemContainsMetadata(p, "Compile", "a.cs", "First", "1st"));
             Assert.True(ItemContainsMetadata(p, "Compile", "b.cs", "First", "1st"));
@@ -116,7 +116,7 @@ public void EmptyItemsInheritValues()
         [Fact]
         public void ItemMetadataOverridesInheritedValues()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
@@ -143,8 +143,8 @@ public void ItemMetadataOverridesInheritedValues()
                         <Link Include='a.o'/>
                     </ItemGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(ItemContainsMetadata(p, "Compile", "a.cs", "First", "Not1st"));
             Assert.True(ItemContainsMetadata(p, "Compile", "a.cs", "Second", "2nd"));
@@ -246,7 +246,7 @@ public void ItemDefinitionMetadataDoesntAllowItemExpansion()
         [Fact]
         public void ItemMetadataReferringToDifferentItemGivesEmptyValue()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
@@ -273,8 +273,8 @@ public void ItemMetadataReferringToDifferentItemGivesEmptyValue()
                         <Link Include='a.o'/>
                     </ItemGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(ItemContainsMetadata(p, "Link", "a.o", "Third", "----"));
         }
@@ -285,7 +285,7 @@ public void ItemMetadataReferringToDifferentItemGivesEmptyValue()
         [Fact]
         public void EmptyItemDefinitionGroup()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                     </ItemDefinitionGroup>
@@ -293,8 +293,8 @@ public void EmptyItemDefinitionGroup()
                         <Compile Include='a.cs;b.cs' />
                     </ItemGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
         }
 
         /// <summary>
@@ -303,7 +303,7 @@ public void EmptyItemDefinitionGroup()
         [Fact]
         public void EmptyItemDefinitions()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile />
@@ -314,8 +314,8 @@ public void EmptyItemDefinitions()
                         </Compile>
                     </ItemGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(ItemContainsMetadata(p, "Compile", "a.cs", "Foo", "Bar"));
             Assert.True(ItemContainsMetadata(p, "Compile", "b.cs", "Foo", "Bar"));
@@ -325,7 +325,7 @@ public void EmptyItemDefinitions()
         public void SelfReferencingMetadataReferencesUseItemDefinition()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
    <Project ToolsVersion='msbuilddefaulttoolsversion'>
 
     <ItemDefinitionGroup>
@@ -343,8 +343,8 @@ public void SelfReferencingMetadataReferencesUseItemDefinition()
     <Target Name='Build'>
       <Message Text='[{@(CppCompile)}{%(CppCompile.Defines)}]' />
     </Target>
-  </Project>"));
-            Project p = new Project(xmlReader);
+  </Project>");
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { logger });
             logger.AssertLogContains("[{a.cpp}{DEBUG;CODEANALYSIS}]"); // Unexpected value after evaluation
@@ -355,7 +355,7 @@ public void SelfReferencingMetadataReferencesUseItemDefinition()
         public void SelfReferencingMetadataReferencesUseItemDefinitionInTarget()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
    <Project ToolsVersion='msbuilddefaulttoolsversion'>
 
     <ItemDefinitionGroup>
@@ -373,8 +373,8 @@ public void SelfReferencingMetadataReferencesUseItemDefinitionInTarget()
 
       <Message Text='[{@(CppCompile)}{%(CppCompile.Defines)}]' />
     </Target>
-  </Project>"));
-            Project p = new Project(xmlReader);
+  </Project>");
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { logger });
             logger.AssertLogContains("[{a.cpp}{DEBUG;CODEANALYSIS}]"); // Unexpected value after evaluation
@@ -384,7 +384,7 @@ public void SelfReferencingMetadataReferencesUseItemDefinitionInTarget()
         public void SelfReferencingMetadataReferencesUseItemDefinitionInTargetModify()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
    <Project ToolsVersion='msbuilddefaulttoolsversion'>
 
     <ItemDefinitionGroup>
@@ -405,8 +405,8 @@ public void SelfReferencingMetadataReferencesUseItemDefinitionInTargetModify()
 
       <Message Text='[{@(CppCompile)}{%(CppCompile.Defines)}]' />
     </Target>
-  </Project>"));
-            Project p = new Project(xmlReader);
+  </Project>");
+            Project p = projectFromString.Project;
 
             p.Build(new string[] { "Build" }, new ILogger[] { logger });
             logger.AssertLogContains("[{a.cpp}{DEBUG;CODEANALYSIS}]"); // Unexpected value after evaluation
@@ -418,7 +418,7 @@ public void SelfReferencingMetadataReferencesUseItemDefinitionInTargetModify()
         [Fact]
         public void ItemDefinitionGroupWithFalseCondition()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup Condition=""'$(Foo)'!=''"">
                         <Compile>
@@ -431,8 +431,8 @@ public void ItemDefinitionGroupWithFalseCondition()
                         </Compile>
                     </ItemGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.False(p.ItemDefinitions.ContainsKey("Compile"));
             Assert.True(ItemContainsMetadata(p, "Compile", "a.cs", "Foo", "Bar"));
@@ -445,7 +445,7 @@ public void ItemDefinitionGroupWithFalseCondition()
         [Fact]
         public void ItemDefinitionGroupWithTrueCondition()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup Condition=""'$(Foo)'==''"">
                         <Compile>
@@ -458,8 +458,8 @@ public void ItemDefinitionGroupWithTrueCondition()
                         </Compile>
                     </ItemGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(p.ItemDefinitions.ContainsKey("Compile"));
             Assert.True(ItemContainsMetadata(p, "Compile", "a.cs", "Foo", "Bar"));
@@ -472,7 +472,7 @@ public void ItemDefinitionGroupWithTrueCondition()
         [Fact]
         public void ItemDefinitionWithFalseCondition()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile  Condition=""'$(Foo)'!=''"">
@@ -485,8 +485,8 @@ public void ItemDefinitionWithFalseCondition()
                         </Compile>
                     </ItemGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.False(p.ItemDefinitions.ContainsKey("Compile"));
             Assert.True(ItemContainsMetadata(p, "Compile", "a.cs", "Foo", "Bar"));
@@ -499,7 +499,7 @@ public void ItemDefinitionWithFalseCondition()
         [Fact]
         public void ItemDefinitionWithTrueCondition()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile Condition=""'$(Foo)'==''"">
@@ -512,8 +512,8 @@ public void ItemDefinitionWithTrueCondition()
                         </Compile>
                     </ItemGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(p.ItemDefinitions.ContainsKey("Compile"));
             Assert.True(ItemContainsMetadata(p, "Compile", "a.cs", "Foo", "Bar"));
@@ -526,7 +526,7 @@ public void ItemDefinitionWithTrueCondition()
         [Fact]
         public void ItemDefinitionMetadataWithFalseCondition()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
@@ -539,8 +539,8 @@ public void ItemDefinitionMetadataWithFalseCondition()
                         </Compile>
                     </ItemGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(p.ItemDefinitions.ContainsKey("Compile"));
             Assert.True(ItemContainsMetadata(p, "Compile", "a.cs", "Foo", "Bar"));
@@ -553,7 +553,7 @@ public void ItemDefinitionMetadataWithFalseCondition()
         [Fact]
         public void ItemDefinitionMetadataWithTrueCondition()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                     <ItemDefinitionGroup>
                         <Compile>
@@ -566,8 +566,8 @@ public void ItemDefinitionMetadataWithTrueCondition()
                         </Compile>
                     </ItemGroup>
 	                <Target Name='Build' />
-	            </Project>"));
-            Project p = new Project(xmlReader);
+	            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(p.ItemDefinitions.ContainsKey("Compile"));
             Assert.True(ItemContainsMetadata(p, "Compile", "a.cs", "Foo", "Bar"));
@@ -580,7 +580,7 @@ public void ItemDefinitionMetadataWithTrueCondition()
         [Fact]
         public void ItemDefinitionMetadataCopiedToTaskItem()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                 <ItemDefinitionGroup>
                     <ItemA>
@@ -588,8 +588,8 @@ public void ItemDefinitionMetadataCopiedToTaskItem()
                         <MetaB>M-B(b)</MetaB>
                     </ItemA>
                 </ItemDefinitionGroup>
-            </Project>"));
-            Project p = new Project(xmlReader);
+            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(p.ItemDefinitions.ContainsKey("ItemA"));
 
@@ -616,7 +616,7 @@ public void ItemDefinitionMetadataCopiedToTaskItem()
         [Fact]
         public void ItemDefinitionMetadataCopiedToTaskItem2()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                 <ItemDefinitionGroup>
                     <ItemA>
@@ -624,8 +624,8 @@ public void ItemDefinitionMetadataCopiedToTaskItem2()
                         <MetaB>M-B(b)</MetaB>
                     </ItemA>
                 </ItemDefinitionGroup>
-            </Project>"));
-            Project p = new Project(xmlReader);
+            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(p.ItemDefinitions.ContainsKey("ItemA"));
 
@@ -655,7 +655,7 @@ public void ItemDefinitionMetadataCopiedToTaskItem2()
         [Fact]
         public void ItemDefinitionMetadataCopiedToTaskItem3()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(
+            using ProjectFromString projectFromString = new(
             @"<Project ToolsVersion='msbuilddefaulttoolsversion'>
                 <ItemDefinitionGroup>
                     <ItemA>
@@ -666,8 +666,8 @@ public void ItemDefinitionMetadataCopiedToTaskItem3()
                 <ItemGroup>
                     <ItemA Include='SomeItemA' />
                 </ItemGroup>
-            </Project>"));
-            Project p = new Project(xmlReader);
+            </Project>");
+            Project p = projectFromString.Project;
 
             Assert.True(p.ItemDefinitions.ContainsKey("ItemA"));
 
@@ -699,7 +699,7 @@ public void ItemDefinitionMetadataCopiedToTaskItem3()
         public void BasicItemDefinitionInProject()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <CppCompile Include='a.cpp'/>
@@ -716,8 +716,8 @@ public void BasicItemDefinitionInProject()
                     <Message Text=""[%(CppCompile.Identity)==%(CppCompile.Defines)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[a.cpp==DEBUG]", "[b.cpp==DEBUG]");
@@ -727,7 +727,7 @@ public void BasicItemDefinitionInProject()
         public void EscapingInItemDefinitionInProject()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
@@ -741,8 +741,8 @@ public void EscapingInItemDefinitionInProject()
                     <Message Text=""[%(i.m)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[$(xyz)]");
@@ -753,7 +753,7 @@ public void EscapingInItemDefinitionInProject()
         public void ItemDefinitionForOtherItemType()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
@@ -767,8 +767,8 @@ public void ItemDefinitionForOtherItemType()
                     <Message Text=""[%(i.m)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[]");
@@ -778,7 +778,7 @@ public void ItemDefinitionForOtherItemType()
         public void RedefinitionLastOneWins()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
@@ -799,8 +799,8 @@ public void RedefinitionLastOneWins()
                     <Message Text=""[%(i.m)-%(i.n)-%(i.o)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[m2-n1-o1]");
@@ -860,7 +860,7 @@ public void QualifiedMetadataConditionOnItemDefinitionGroupErrors()
         public void MetadataConditionOnItemDefinition()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
@@ -888,8 +888,8 @@ public void MetadataConditionOnItemDefinition()
                     <Message Text=""[%(j.n)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[m2]", "[n2]");
@@ -899,7 +899,7 @@ public void MetadataConditionOnItemDefinition()
         public void QualifiedMetadataConditionOnItemDefinitionBothQualifiedAndUnqualified()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
@@ -918,8 +918,8 @@ public void QualifiedMetadataConditionOnItemDefinitionBothQualifiedAndUnqualifie
                     <Message Text=""[%(i.m)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[m2]");
@@ -929,7 +929,7 @@ public void QualifiedMetadataConditionOnItemDefinitionBothQualifiedAndUnqualifie
         public void FalseMetadataConditionOnItemDefinitionBothQualifiedAndUnqualified()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
@@ -948,8 +948,8 @@ public void FalseMetadataConditionOnItemDefinitionBothQualifiedAndUnqualified()
                     <Message Text=""[%(i.m)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[m1]");
@@ -959,7 +959,7 @@ public void FalseMetadataConditionOnItemDefinitionBothQualifiedAndUnqualified()
         public void MetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualified()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
@@ -979,8 +979,8 @@ public void MetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualified()
                     <Message Text=""[%(i.m)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[m2]");
@@ -990,7 +990,7 @@ public void MetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualified()
         public void FalseMetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualified()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
@@ -1010,8 +1010,8 @@ public void FalseMetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualifi
                     <Message Text=""[%(i.m)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[m1]");
@@ -1021,7 +1021,7 @@ public void FalseMetadataConditionOnItemDefinitionChildBothQualifiedAndUnqualifi
         public void MetadataConditionOnItemDefinitionAndChildQualifiedWithUnrelatedItemType()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
@@ -1040,8 +1040,8 @@ public void MetadataConditionOnItemDefinitionAndChildQualifiedWithUnrelatedItemT
                     <Message Text=""[%(i.m)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[m2]");
@@ -1093,7 +1093,7 @@ public void ItemDefinitionGroupTask()
         public void MetadataOnItemWins()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <CppCompile Include='a.cpp'>
@@ -1110,8 +1110,8 @@ public void MetadataOnItemWins()
                     <Message Text=""[%(CppCompile.Identity)==%(CppCompile.Defines)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[a.cpp==RETAIL]", "[b.cpp==DEBUG]");
@@ -1121,7 +1121,7 @@ public void MetadataOnItemWins()
         public void MixtureOfItemAndDefaultMetadata()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <CppCompile Include='a.cpp'>
@@ -1138,8 +1138,8 @@ public void MixtureOfItemAndDefaultMetadata()
                     <Message Text=""[%(CppCompile.Identity)==%(CppCompile.WarningLevel)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[a.cpp==DEBUG]", "[a.cpp==4]");
@@ -1149,7 +1149,7 @@ public void MixtureOfItemAndDefaultMetadata()
         public void IntrinsicTaskModifyingDefaultMetadata()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
@@ -1168,8 +1168,8 @@ public void IntrinsicTaskModifyingDefaultMetadata()
                     <Message Text=""[%(i.m)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[m2]");
@@ -1179,7 +1179,7 @@ public void IntrinsicTaskModifyingDefaultMetadata()
         public void IntrinsicTaskConsumingDefaultMetadata()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
@@ -1198,8 +1198,8 @@ public void IntrinsicTaskConsumingDefaultMetadata()
                     <Message Text=""[%(i.n)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
             p.Build("t", new ILogger[] { logger });
 
             logger.AssertLogContains("[n2]");
@@ -1223,7 +1223,7 @@ public void DefinitionInImportedFile()
                   </ItemDefinitionGroup>
                 </Project>
             ");
-                using var xmlReader = XmlReader.Create(new StringReader(@"
+                using ProjectFromString projectFromString = new(@"
                     <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                       <ItemGroup>
                         <CppCompile Include='a.cpp'/>
@@ -1233,8 +1233,8 @@ public void DefinitionInImportedFile()
                         <Message Text=""[%(CppCompile.Identity)==%(CppCompile.Defines)]""/>
                       </Target>
                     </Project>
-                "));
-                Project p = new Project(xmlReader);
+                ");
+                Project p = projectFromString.Project;
                 p.Build("t", new ILogger[] { logger });
 
                 logger.AssertLogContains("[a.cpp==DEBUG]");
@@ -1252,7 +1252,7 @@ public void DefinitionInImportedFile()
         [Fact]
         public void ProjectAddNewItemPicksUpProjectItemDefinitions()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
@@ -1260,8 +1260,8 @@ public void ProjectAddNewItemPicksUpProjectItemDefinitions()
                     </i>
                   </ItemDefinitionGroup>
                 </Project>
-                "));
-            Project p = new Project(xmlReader);
+                ");
+            Project p = projectFromString.Project;
 
             p.AddItem("i", "i1");
             p.ReevaluateIfNecessary();
@@ -1276,7 +1276,7 @@ public void ProjectAddNewItemPicksUpProjectItemDefinitions()
         [Fact]
         public void ProjectAddNewItemExistingGroupPicksUpProjectItemDefinitions()
         {
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
@@ -1289,8 +1289,8 @@ public void ProjectAddNewItemExistingGroupPicksUpProjectItemDefinitions()
                     </i>
                   </ItemGroup>
                 </Project>
-                "));
-            Project p = new Project(xmlReader);
+                ");
+            Project p = projectFromString.Project;
 
             p.AddItem("i", "i1");
             p.ReevaluateIfNecessary();
@@ -1303,7 +1303,7 @@ public void ProjectAddNewItemExistingGroupPicksUpProjectItemDefinitions()
         public void ItemsEmittedByTaskPickUpItemDefinitions()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
@@ -1318,8 +1318,8 @@ public void ItemsEmittedByTaskPickUpItemDefinitions()
                     <Message Text=""[%(i.m)][%(i.n)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
 
             p.Build("t", new ILogger[] { logger });
 
@@ -1330,7 +1330,7 @@ public void ItemsEmittedByTaskPickUpItemDefinitions()
         public void ItemsEmittedByIntrinsicTaskPickUpItemDefinitions()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
@@ -1347,8 +1347,8 @@ public void ItemsEmittedByIntrinsicTaskPickUpItemDefinitions()
                     <Message Text=""[%(i.m)][%(i.n)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
 
             p.Build("t", new ILogger[] { logger });
 
@@ -1363,7 +1363,7 @@ public void ItemsEmittedByIntrinsicTaskPickUpItemDefinitions()
         public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_SourceDefaultMetadataPassed()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
@@ -1380,8 +1380,8 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_SourceDefaultMeta
                     <Message Text=""[%(j.m)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
 
             p.Build("t", new ILogger[] { logger });
 
@@ -1395,7 +1395,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_SourceDefaultMeta
         public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_DestinationExplicitMetadataBeatsSourceDefaultMetadata()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
@@ -1414,8 +1414,8 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_DestinationExplic
                     <Message Text=""[%(j.m)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
 
             p.Build("t", new ILogger[] { logger });
 
@@ -1434,7 +1434,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_DestinationExplic
         public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_DestinationDefaultMetadataOverriddenBySourceDefaultMetadata()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
@@ -1456,8 +1456,8 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_DestinationDefaul
                     <Message Text=""[%(j.m)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
 
             Assert.Equal("m1", p.GetItems("j").First().GetMetadataValue("m"));
 
@@ -1475,7 +1475,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_DestinationDefaul
         public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_OutsideTarget()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
@@ -1514,8 +1514,8 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_Outsi
                     </k>
                   </ItemGroup>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
 
             Assert.Equal("im1", p.GetItems("i").First().GetMetadataValue("m"));
             Assert.Equal("in1", p.GetItems("i").First().GetMetadataValue("n"));
@@ -1568,7 +1568,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_Outsi
         public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_InsideTarget()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
@@ -1608,8 +1608,8 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_Insid
                     <Message Text=""k:%(identity) [%(k.m)][%(k.n)][%(k.o)][%(k.p)][%(k.q)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
 
             p.Build("t", new ILogger[] { logger });
 
@@ -1625,7 +1625,7 @@ public void ItemsEmittedByIntrinsicTaskConsumingItemExpression_Combination_Insid
         public void MutualReferenceToDefinition1()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
@@ -1640,8 +1640,8 @@ public void MutualReferenceToDefinition1()
                     <Message Text=""[%(i.m)][%(i.n)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
 
             p.Build("t", new ILogger[] { logger });
 
@@ -1652,7 +1652,7 @@ public void MutualReferenceToDefinition1()
         public void MutualReferenceToDefinition2()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
@@ -1667,8 +1667,8 @@ public void MutualReferenceToDefinition2()
                     <Message Text=""[%(i.m)][%(i.n)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
 
             p.Build("t", new ILogger[] { logger });
 
@@ -1679,7 +1679,7 @@ public void MutualReferenceToDefinition2()
         public void MutualReferenceToDefinition3()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemDefinitionGroup>
                     <i>
@@ -1695,8 +1695,8 @@ public void MutualReferenceToDefinition3()
                     <Message Text=""[%(i.m)][%(i.n)][%(i.o)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
 
             p.Build("t", new ILogger[] { logger });
 
@@ -1707,7 +1707,7 @@ public void MutualReferenceToDefinition3()
         public void ProjectReevaluationReevaluatesItemDefinitions()
         {
             MockLogger logger = new MockLogger();
-            using var xmlReader = XmlReader.Create(new StringReader(@"
+            using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <PropertyGroup>
                     <Defines>CODEANALYSIS</Defines>
@@ -1725,8 +1725,8 @@ public void ProjectReevaluationReevaluatesItemDefinitions()
                     <Message Text=""[%(CppCompile.Identity)==%(CppCompile.Defines)]""/>
                   </Target>
                 </Project>
-            "));
-            Project p = new Project(xmlReader);
+            ");
+            Project p = projectFromString.Project;
 
             p.SetProperty("BuildFlavor", "ret");
 
@@ -1770,7 +1770,7 @@ public void MSBuildCallDoesNotAffectCallingProjectsDefinitions()
                 }
 
                 MockLogger logger = new MockLogger();
-                using var xmlReader = XmlReader.Create(new StringReader(@"
+                using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <ItemGroup>
                     <i Include='i1'/>
@@ -1786,8 +1786,8 @@ public void MSBuildCallDoesNotAffectCallingProjectsDefinitions()
                     <Message Text=""[PARENT-after:%(i.m)]""/>
                   </Target>
                 </Project>
-            "));
-                Project p = new Project(xmlReader);
+            ");
+                Project p = projectFromString.Project;
 
                 p.Build("t", new ILogger[] { logger });
 
@@ -1829,7 +1829,7 @@ public void DefaultMetadataTravelWithTargetOutputs()
                 }
 
                 MockLogger logger = new MockLogger();
-                using var xmlReader = XmlReader.Create(new StringReader(@"
+                using ProjectFromString projectFromString = new(@"
                 <Project ToolsVersion=""msbuilddefaulttoolsversion"">
                   <Target Name=""t"">
                     <MSBuild Projects=""" + otherProject + @""">
@@ -1838,8 +1838,8 @@ public void DefaultMetadataTravelWithTargetOutputs()
                     <Message Text=""[PARENT:%(i.Identity):m=%(i.m),n=%(i.n)]""/>
                   </Target>
                 </Project>
-            "));
-                Project p = new Project(xmlReader);
+            ");
+                Project p = projectFromString.Project;
 
                 p.Build("t", new ILogger[] { logger });
 
diff --git a/src/Build.UnitTests/Definition/ProjectHelpers.cs b/src/Build.UnitTests/Definition/ProjectHelpers.cs
index 03d5a6e13b1..a04020480e3 100644
--- a/src/Build.UnitTests/Definition/ProjectHelpers.cs
+++ b/src/Build.UnitTests/Definition/ProjectHelpers.cs
@@ -21,12 +21,10 @@ internal static class ProjectHelpers
         /// <returns>A project instance.</returns>
         internal static ProjectInstance CreateEmptyProjectInstance()
         {
-            using XmlReader reader = XmlReader.Create(new StringReader(
-                @"<Project>
+            using ProjectFromString projectFromString = new( @"<Project>
                       <Target Name='foo'/>
-                  </Project>"));
-
-            Project project = new Project(reader);
+                  </Project>");
+            Project project = projectFromString.Project;
             ProjectInstance instance = project.CreateProjectInstance();
 
             return instance;
diff --git a/src/Build.UnitTests/Definition/ProjectItem_Tests.cs b/src/Build.UnitTests/Definition/ProjectItem_Tests.cs
index 763a7d6141a..ce86f880e14 100644
--- a/src/Build.UnitTests/Definition/ProjectItem_Tests.cs
+++ b/src/Build.UnitTests/Definition/ProjectItem_Tests.cs
@@ -77,8 +77,9 @@ private static ProjectItem GetOneItemFromFragment(string fragment)
         /// </summary>
         private static IList<ProjectItem> GetItems(string content)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement projectXml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement projectXml = projectRootElementFromString.Project;
+
             Project project = new Project(projectXml);
             IList<ProjectItem> item = Helpers.MakeList(project.GetItems("i"));
 
diff --git a/src/Build.UnitTests/Definition/Project_Internal_Tests.cs b/src/Build.UnitTests/Definition/Project_Internal_Tests.cs
index f01479e9ff7..8255424b6a7 100644
--- a/src/Build.UnitTests/Definition/Project_Internal_Tests.cs
+++ b/src/Build.UnitTests/Definition/Project_Internal_Tests.cs
@@ -52,8 +52,8 @@ public void SetDefaultToolsVersion()
                     </Project>
                 ";
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader, null, null, collection);
+                using ProjectFromString projectFromString = new(content, null, null, collection);
+                Project project = projectFromString.Project;
 
                 Assert.Equal("x", project.ToolsVersion);
             }
@@ -89,8 +89,8 @@ public void ReloadProjectWithInvalidToolsVersionInFile()
                     </Project>
                 ";
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader);
+                using ProjectFromString projectFromString = new(content);
+                Project project = projectFromString.Project;
                 project.FullPath = "c:\\123.proj";
 
                 Project project2 = ProjectCollection.GlobalProjectCollection.LoadProject("c:\\123.proj", null, null);
@@ -235,9 +235,8 @@ public void ProjectEvaluationShouldRespectConditionsIfProjectLoadSettingsSaysSo(
             {
                 var projectCollection = env.CreateProjectCollection().Collection;
 
-                using var xmlReader = XmlReader.Create(new StringReader(projectContents));
-                var project = new Project(xmlReader, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection, ProjectLoadSettings.DoNotEvaluateElementsWithFalseCondition);
-
+                using ProjectFromString projectFromString = new(projectContents, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, projectCollection, ProjectLoadSettings.DoNotEvaluateElementsWithFalseCondition);
+                Project project = projectFromString.Project;
                 var data = project.TestOnlyGetPrivateData;
 
                 project.GetProperty("P1").ShouldBeNull();
diff --git a/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs b/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
index 919ed918dd3..5a925f57330 100644
--- a/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
+++ b/src/Build.UnitTests/Definition/ToolsVersion_Tests.cs
@@ -306,11 +306,11 @@ public void InvalidToolsVersionTooHighMappedToCurrent()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                using var collection = XmlReader.Create(new StringReader(@"<Project ToolsVersion='98.6'>
+                var content = @"<Project ToolsVersion='98.6'>
                         <Target Name='Foo'>
-                        </Target>
-                       </Project>"));
-                Project project = new Project(collection, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                        </Target>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                Project project = projectFromString.Project;
                 success = project.Build(mockLogger);
 
                 Assert.True(success);
@@ -342,11 +342,13 @@ public void InvalidToolsVersionMissingLowMappedToCurrent()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='0.1'>
+                var content = @"<Project ToolsVersion='98.6'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-                Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                   </Project>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                Project project = projectFromString.Project;
+
                 success = project.Build(mockLogger);
 
                 Assert.True(success);
@@ -376,12 +378,12 @@ public void InvalidToolsVersionMissingMappedToCurrent()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='invalidToolsVersion'>
+                var content = @"<Project ToolsVersion='invalidToolsVersion'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-                Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
-                success = project.Build(mockLogger);
+                   </Project>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                Project project = projectFromString.Project;
 
                 Assert.True(success);
                 mockLogger.AssertLogContains("ToolsVersion=\"invalidToolsVersion\"");
@@ -405,10 +407,12 @@ public void InvalidToolsVersion()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                Project project = new Project(XmlReader.Create(new StringReader(@"<Project ToolsVersion='invalidToolsVersion'>
+                var content = @"<Project ToolsVersion='invalidToolsVersion'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>")), null /* no global properties */, "goober", p);
+                   </Project>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, "goober", p);
+                Project project = projectFromString.Project;
                 success = project.Build(mockLogger);
                 // BANG!
             });
@@ -435,11 +439,12 @@ public void ToolsVersionMappedToCurrent()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
+                var content = @"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-                Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                   </Project>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                Project project = projectFromString.Project;
                 success = project.Build(mockLogger);
 
                 Assert.True(success);
@@ -505,11 +510,12 @@ public void ToolsVersionFallbackIfCurrentToolsVersionDoesNotExist()
             MockLogger mockLogger = new MockLogger();
             LoggingService service = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             service.RegisterLogger(mockLogger);
-            using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
+            var content = @"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-            Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                   </Project>";
+            using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+            Project project = projectFromString.Project;
 
             Assert.Equal("4.0", project.ToolsVersion);
             bool success = project.Build(mockLogger);
@@ -541,12 +547,12 @@ public void ToolsVersionFromEnvironmentVariable()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
+                var content = @"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-                Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
-                success = project.Build(mockLogger);
+                   </Project>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                success = projectFromString.Project.Build(mockLogger);
 
                 Assert.True(success);
                 mockLogger.AssertLogContains("ToolsVersion=\"4.0\"");
@@ -579,12 +585,12 @@ public void InvalidToolsVersionFromEnvironmentVariable()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
+                var content = @"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-                Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
-                success = project.Build(mockLogger);
+                   </Project>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                success = projectFromString.Project.Build(mockLogger);
 
                 Assert.True(success);
                 mockLogger.AssertLogContains("ToolsVersion=\"4.0\"");
@@ -620,13 +626,13 @@ public void ToolsVersionMappedToCurrent_CreateProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
+                var content = @"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-                Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                   </Project>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
 
-                ProjectInstance pi = project.CreateProjectInstance();
+                ProjectInstance pi = projectFromString.Project.CreateProjectInstance();
                 success = pi.Build(new ILogger[] { mockLogger });
 
                 Assert.True(success);
@@ -654,13 +660,13 @@ public void ToolsVersionFallbackIfCurrentToolsVersionDoesNotExist_CreateProjectI
             MockLogger mockLogger = new MockLogger();
             LoggingService service = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             service.RegisterLogger(mockLogger);
-            using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
+            var content = @"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-            Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                   </Project>";
+            using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
 
-            ProjectInstance pi = project.CreateProjectInstance();
+            ProjectInstance pi = projectFromString.Project.CreateProjectInstance();
             Assert.Equal("4.0", pi.ToolsVersion);
             bool success = pi.Build(new ILogger[] { mockLogger });
 
@@ -691,13 +697,13 @@ public void ToolsVersionFromEnvironmentVariable_CreateProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
+                var content = @"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-                Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                   </Project>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
 
-                ProjectInstance pi = project.CreateProjectInstance();
+                ProjectInstance pi = projectFromString.Project.CreateProjectInstance();
                 success = pi.Build(new ILogger[] { mockLogger });
 
                 Assert.True(success);
@@ -732,13 +738,13 @@ public void InvalidToolsVersionFromEnvironmentVariable_CreateProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
+                var content = @"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-                Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                   </Project>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
 
-                ProjectInstance pi = project.CreateProjectInstance();
+                ProjectInstance pi = projectFromString.Project.CreateProjectInstance();
                 success = pi.Build(new ILogger[] { mockLogger });
 
                 Assert.True(success);
@@ -776,13 +782,13 @@ public void ToolsVersionMappedToCurrent_ProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
+                var content = @"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-                Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                   </Project>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
 
-                ProjectInstance pi = new ProjectInstance(project.Xml, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                ProjectInstance pi = new ProjectInstance(projectFromString.Project.Xml, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
                 success = pi.Build(new ILogger[] { mockLogger });
 
                 Assert.True(success);
@@ -810,13 +816,13 @@ public void ToolsVersionFallbackIfCurrentToolsVersionDoesNotExist_ProjectInstanc
             MockLogger mockLogger = new MockLogger();
             LoggingService service = (LoggingService)LoggingService.CreateLoggingService(LoggerMode.Synchronous, 1);
             service.RegisterLogger(mockLogger);
-            using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
+            var content = @"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-            Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                   </Project>";
+            using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
 
-            ProjectInstance pi = new ProjectInstance(project.Xml, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+            ProjectInstance pi = new ProjectInstance(projectFromString.Project.Xml, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
             Assert.Equal("4.0", pi.ToolsVersion);
             bool success = pi.Build(new ILogger[] { mockLogger });
 
@@ -846,13 +852,13 @@ public void ToolsVersionFromEnvironmentVariable_ProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
+                var content = @"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-                Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                   </Project>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
 
-                ProjectInstance pi = new ProjectInstance(project.Xml, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                ProjectInstance pi = new ProjectInstance(projectFromString.Project.Xml, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
                 success = pi.Build(new ILogger[] { mockLogger });
 
                 Assert.True(success);
@@ -887,13 +893,12 @@ public void InvalidToolsVersionFromEnvironmentVariable_ProjectInstance()
                 service.RegisterLogger(mockLogger);
 
                 bool success = false;
-                using var xmlReader = XmlReader.Create(new StringReader(@"<Project ToolsVersion='4.0'>
+                var content = @"<Project ToolsVersion='4.0'>
                     <Target Name='Foo'>
                     </Target>
-                   </Project>"));
-                Project project = new Project(xmlReader, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
-
-                ProjectInstance pi = new ProjectInstance(project.Xml, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                   </Project>";
+                using ProjectFromString projectFromString = new(content, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
+                ProjectInstance pi = new ProjectInstance(projectFromString.Project.Xml, null /* no global properties */, null /* don't explicitly set the toolsversion */, p);
                 success = pi.Build(new ILogger[] { mockLogger });
 
                 Assert.True(success);
diff --git a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
index 0abc00ebebb..64c352cd512 100644
--- a/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Evaluator_Tests.cs
@@ -144,16 +144,16 @@ public void VerifyExistsInMemoryProjects()
                                 </Project>");
 
             // no imports should be loaded
-            using var xmlReader = XmlReader.Create(new StringReader(projXml));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projXml);
+            Project project = projectFromString.Project;
             project.ReevaluateIfNecessary();
 
             Assert.Null(project.GetProperty("foo"));
             Assert.Null(project.GetProperty("bar"));
 
             // add in-memory project c:\temp\foo.import
-            using var fooXmlReader = XmlReader.Create(new StringReader(fooXml));
-            Project fooImport = new Project(fooXmlReader);
+            using ProjectFromString projectFromStringFoo = new(fooXml);
+            Project fooImport = projectFromStringFoo.Project;
             fooImport.FullPath = fooPath;
 
             // force reevaluation
@@ -165,8 +165,8 @@ public void VerifyExistsInMemoryProjects()
             Assert.Null(project.GetProperty("bar"));
 
             // add in-memory project c:\temp\bar.import
-            using var barXmlReader = XmlReader.Create(new StringReader(barXml));
-            Project barImport = new Project(barXmlReader);
+            using ProjectFromString projectFromStringBar = new(barXml);
+            Project barImport = projectFromStringBar.Project;
             barImport.FullPath = barPath;
 
             // force reevaluation
@@ -825,8 +825,8 @@ public void ImportsOnlyIncludedOnce()
                     </Project>
                 ");
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader);
+                using ProjectFromString projectFromString = new(content);
+                Project project = projectFromString.Project;
 
                 MockLogger logger = new MockLogger();
                 bool result = project.Build(logger);
@@ -902,8 +902,8 @@ public void MultipleImportsVerifyImportsIncludingDuplicates()
                 ");
 
                 using ProjectCollection pc = new ProjectCollection();
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader, null, null, pc, ProjectLoadSettings.RecordDuplicateButNotCircularImports);
+                using ProjectFromString projectFromString = new(content, null, null, pc, ProjectLoadSettings.RecordDuplicateButNotCircularImports);
+                Project project = projectFromString.Project;
                 IList<ResolvedImport> imports = project.Imports;
                 IList<ResolvedImport> importsIncludingDuplicates = project.ImportsIncludingDuplicates;
                 Assert.Equal(3, imports.Count);
@@ -938,7 +938,7 @@ public void ImportWithVSPathThrowsCorrectError()
 
                 InvalidProjectFileException ex = Assert.Throws<InvalidProjectFileException>(() =>
                 {
-                        Project project = new Project(content.ProjectFile, null, null);
+                    Project project = new Project(content.ProjectFile, null, null);
                 });
 
                 Assert.Contains("MSB4278", ex.ErrorCode);
@@ -987,8 +987,9 @@ public void RecordDuplicateButNotCircularImportsWithCircularImports()
                 ");
 
                 using ProjectCollection pc = new ProjectCollection();
-                using var xmlReader = XmlReader.Create(new StringReader(manifest));
-                Project project = new Project(xmlReader, null, null, pc, ProjectLoadSettings.RecordDuplicateButNotCircularImports);
+                using ProjectFromString projectFromString = new(manifest, null, null, pc, ProjectLoadSettings.RecordDuplicateButNotCircularImports);
+                Project project = projectFromString.Project;
+
 
                 // In the list returned by ImportsIncludingDuplicates, check if there are any imports that are imported by importPath2.
                 bool circularImportsAreRecorded = project.ImportsIncludingDuplicates.Any(resolvedImport => string.Equals(resolvedImport.ImportingElement.ContainingProject.FullPath, importPath2, StringComparison.OrdinalIgnoreCase));
@@ -1188,8 +1189,8 @@ public void ImportListOfItems()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -1252,8 +1253,8 @@ public void ImportListOfItemsWithWildcards()
                 </Project>
             ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -1289,8 +1290,8 @@ public void ImportListOfItemsOneFileDoesNotExist()
                     </Project>
                 ");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -1405,8 +1406,8 @@ public void RepeatedTaskParameters()
                         </Target>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
             ProjectInstance instance = project.CreateProjectInstance();
 
             Assert.Equal("3", (Helpers.GetFirst(instance.Targets["t"].Tasks)).GetParameter("Text"));
@@ -1428,8 +1429,8 @@ public void PropertyPredecessors()
                         </PropertyGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectProperty property = project.GetProperty("p");
 
@@ -1455,8 +1456,8 @@ public void PropertyPredecessorsAndImports()
                         </PropertyGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             // Verify the predecessor is the one in the import document
             ProjectRootElement importXml = ProjectRootElement.Open(project.Items.ElementAt(0).Xml.ContainingProject.FullPath);
@@ -1478,8 +1479,8 @@ public void PropertyPredecessorsSetProperty()
                         <Import Project='$(MSBuildToolsPath)\Microsoft.Common.targets'/>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectProperty property = project.SetProperty("outdir", "x"); // Outdir is set in microsoft.common.targets
 
@@ -1504,8 +1505,8 @@ public void ItemDefinitionPredecessorToItemDefinition()
                         </ItemDefinitionGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = project.ItemDefinitions["i"].GetMetadata("m");
 
@@ -1532,8 +1533,8 @@ public void NewItemPredecessor()
                         </ItemDefinitionGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectItem item = project.AddItem("i", "i1")[0];
             ProjectMetadata metadatum = item.SetMetadataValue("m", "m2");
@@ -1563,8 +1564,8 @@ public void ItemDefinitionPredecessorToItem()
                         </ItemGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = project.GetItems("i").ElementAt(0).GetMetadata("m");
 
@@ -1602,8 +1603,8 @@ public void PredecessorOnSameItem()
                         </ItemGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = project.GetItems("i").ElementAt(1).GetMetadata("m");
 
@@ -1634,8 +1635,8 @@ public void ItemPredecessorToItem()
                         </ItemGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = project.GetItems("i").ElementAt(0).GetMetadata("m");
 
@@ -1663,8 +1664,8 @@ public void ItemPredecessorToItemWithCaseChange()
                         </ItemGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadataElement metadataElementFromProjectRootElement =
                 project.Xml.Items.First().Metadata.First();
@@ -1702,8 +1703,8 @@ public void ItemPredecessorToItemWithCaseChangeAndEscapeHatch()
                         </ItemGroup>
                     </Project>");
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader);
+                using ProjectFromString projectFromString = new(content);
+                Project project = projectFromString.Project;
 
                 ProjectMetadataElement metadataElementFromProjectRootElement =
                     project.Xml.Items.First().Metadata.First();
@@ -1731,8 +1732,8 @@ public void ItemPredecessorToItemViaTransform()
                         </ItemGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             ProjectMetadata metadatum = project.GetItems("i").ElementAt(0).GetMetadata("m");
 
@@ -1756,8 +1757,8 @@ public void ItemPredecessorToItemViaTransformWithCaseChange()
                     </Project>");
 
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             Assert.Collection(project.GetItems("i"), item =>
             {
@@ -1786,8 +1787,8 @@ public void ItemPredecessorToItemViaTransformWithCaseChangeWithEscapeHatch()
                         </ItemGroup>
                     </Project>");
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader);
+                using ProjectFromString projectFromString = new(content);
+                Project project = projectFromString.Project;
 
                 // Should be empty because of the case mismatch
                 Assert.Empty(project.GetItems("i"));
@@ -1825,8 +1826,8 @@ public void ItemPredecessorsAndImports()
                             </ItemGroup>
                         </Project>");
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader);
+                using ProjectFromString projectFromString = new(content);
+                Project project = projectFromString.Project;
 
                 ProjectMetadata predecessor = project.GetItems("i").ElementAt(0).GetMetadata("m").Predecessor;
 
@@ -1862,8 +1863,8 @@ public void NoPredecessors()
                         </ItemGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             Assert.Null(project.GetProperty("p").Predecessor);
             Assert.Null(project.ItemDefinitions["i"].GetMetadata("m").Predecessor);
@@ -1894,8 +1895,8 @@ public void AllEvaluatedProperties()
                         </PropertyGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             IDictionary<string, ProjectProperty> allEvaluatedPropertiesWithNoBackingXmlAndNoDuplicates = new Dictionary<string, ProjectProperty>(StringComparer.OrdinalIgnoreCase);
 
@@ -1999,8 +2000,8 @@ public void AllEvaluatedItems()
                         <Import Project='" + file + @"'/>
                     </Project>");
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader);
+                using ProjectFromString projectFromString = new(content);
+                Project project = projectFromString.Project;
 
                 Assert.Equal(6, project.AllEvaluatedItems.Count);
                 Assert.Equal("i1", project.AllEvaluatedItems.ElementAt(0).EvaluatedInclude);
@@ -2056,8 +2057,8 @@ public void AllEvaluatedPropertiesAndImports()
                         </PropertyGroup>
                     </Project>");
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader);
+                using ProjectFromString projectFromString = new(content);
+                Project project = projectFromString.Project;
 
                 IDictionary<string, ProjectProperty> allEvaluatedPropertiesWithNoBackingXmlAndNoDuplicates = new Dictionary<string, ProjectProperty>(StringComparer.OrdinalIgnoreCase);
 
@@ -2117,8 +2118,8 @@ public void AllEvaluatedPropertiesSetProperty()
                         <Import Project='$(MSBuildToolsPath)\Microsoft.Common.targets'/>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             int initial = project.AllEvaluatedProperties.Count;
 
@@ -2154,8 +2155,8 @@ public void AllEvaluatedItemDefinitionMetadata()
                         </ItemDefinitionGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             Assert.Equal(4, project.AllEvaluatedItemDefinitionMetadata.Count);
 
@@ -2181,8 +2182,8 @@ public void AllEvaluatedItemDefinitionItem()
                         </ItemGroup>
                     </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             Assert.Empty(project.AllEvaluatedItemDefinitionMetadata);
         }
@@ -2292,8 +2293,8 @@ public void BadConditional()
             List<ILogger> loggerList = new List<ILogger>();
             loggerList.Add(mockLogger);
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
             ProjectInstance instance = project.CreateProjectInstance();
             instance.Build(loggerList);
 
@@ -2317,8 +2318,8 @@ public void DefaultTargetsWithBlanks()
             List<ILogger> loggerList = new List<ILogger>();
             loggerList.Add(mockLogger);
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
             ProjectInstance instance = project.CreateProjectInstance();
             Assert.Equal(2, instance.DefaultTargets.Count);
             Assert.Equal("t", instance.DefaultTargets[0]);
@@ -2341,8 +2342,8 @@ public void InitialTargetsWithBlanks()
             List<ILogger> loggerList = new List<ILogger>();
             loggerList.Add(mockLogger);
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
             ProjectInstance instance = project.CreateProjectInstance();
             Assert.Equal(2, instance.InitialTargets.Count);
             Assert.Equal("t", instance.InitialTargets[0]);
@@ -2840,8 +2841,8 @@ public void VerifyMsBuildNodeCountReservedProperty()
                                    4,
                     false);
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, collection);
+            using ProjectFromString projectFromString = new(content, new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion, collection);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -2867,8 +2868,8 @@ public void VerifyMsBuildNodeCountReservedPropertyDefault()
                                 </Target>
                               </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -2892,8 +2893,8 @@ public void VerifyMsbuildProgramFiles32ReservedProperty()
                                     <Message Text='[$(abcdef)]' />
                                 </Target>
                               </Project>");
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -2917,8 +2918,8 @@ public void VerifyTreatAsLocalPropertyTagDoesNothingIfNoGlobalProperty()
                                     <Message Text='[$(Foo)]' />
                                 </Target>
                               </Project>");
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -2947,8 +2948,8 @@ public void VerifyGlobalPropertyOverridesIfNoTreatAsLocalProperty()
             IDictionary<string, string> globalProperties = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             globalProperties.Add("Foo", "Baz");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, globalProperties, null);
+            using ProjectFromString projectFromString = new(content, globalProperties, null);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -2977,8 +2978,8 @@ public void VerifyLocalPropertyOverridesIfTreatAsLocalPropertySet()
             IDictionary<string, string> globalProperties = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             globalProperties.Add("Foo", "Baz");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, globalProperties, null);
+            using ProjectFromString projectFromString = new(content, globalProperties, null);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -3007,8 +3008,8 @@ public void VerifyGlobalPropertyOverridesNonSpecifiedLocalProperty()
             IDictionary<string, string> globalProperties = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             globalProperties.Add("Foo", "Baz");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, globalProperties, null);
+            using ProjectFromString projectFromString = new(content, globalProperties, null);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -3037,8 +3038,8 @@ public void VerifyLocalPropertyInheritsFromOverriddenGlobalProperty()
             IDictionary<string, string> globalProperties = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             globalProperties.Add("Foo", "Baz");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, globalProperties, null);
+            using ProjectFromString projectFromString = new(content, globalProperties, null);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -3080,9 +3081,9 @@ public void VerifyTreatAsLocalPropertySpecificationWorksIfSpecificationIsItselfA
                 globalProperties.Add("Baz", "Baz1");
                 globalProperties.Add("GlobalProperty", "Foo");
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
                 using var collection = new ProjectCollection();
-                Project project = new Project(xmlReader, globalProperties, null, collection);
+                using ProjectFromString projectFromString = new(content, globalProperties, null, collection);
+                Project project = projectFromString.Project;
 
                 MockLogger logger = new MockLogger();
                 bool result = project.Build(logger);
@@ -3153,8 +3154,8 @@ public void VerifyTreatAsLocalPropertyTrimmed()
             globalProperties.Add("Foo", "Baz");
             globalProperties.Add("Goo", "Foo");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, globalProperties, null);
+            using ProjectFromString projectFromString = new(content, globalProperties, null);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -3187,8 +3188,8 @@ public void VerifyTreatAsLocalPropertyEmptySplits()
             globalProperties.Add("Foo", "Baz");
             globalProperties.Add("Goo", "Foo");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, globalProperties, null);
+            using ProjectFromString projectFromString = new(content, globalProperties, null);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -3219,8 +3220,8 @@ public void VerifyGlobalPropertyRetainsOriginalValue()
             IDictionary<string, string> globalProperties = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
             globalProperties.Add("Foo", "Baz");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, globalProperties, null);
+            using ProjectFromString projectFromString = new(content, globalProperties, null);
+            Project project = projectFromString.Project;
 
             Assert.Equal("BazBar", project.GetPropertyValue("Foo"));
             Assert.Equal("Baz", project.GlobalProperties["Foo"]);
@@ -3249,8 +3250,8 @@ public void VerifyModificationsToTreatAsLocalPropertyRespected()
             globalProperties.Add("Foo", "Baz");
             globalProperties.Add("Goo", "Foo");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, globalProperties, null);
+            using ProjectFromString projectFromString = new(content, globalProperties, null);
+            Project project = projectFromString.Project;
 
             Assert.Equal("Foo;Goo", project.Xml.TreatAsLocalProperty);
 
@@ -3286,8 +3287,8 @@ public void VerifyModificationsToGlobalPropertiesRespected()
                                 </Target>
                               </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(content);
+            Project project = projectFromString.Project;
 
             Assert.Equal("Bar", project.GetPropertyValue("Foo"));
             Assert.False(project.GlobalProperties.ContainsKey("Foo"));
@@ -3332,8 +3333,8 @@ public void VerifyOnlySpecifiedPropertiesOverridden()
             globalProperties.Add("Bar", "Bar1");
             globalProperties.Add("Baz", "Baz1");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, globalProperties, null);
+            using ProjectFromString projectFromString = new(content, globalProperties, null);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -3832,8 +3833,8 @@ public void VerifyDefaultSubToolsetPropertiesAreEvaluated()
                               </Project>");
 
                 using ProjectCollection fakeProjectCollection = GetProjectCollectionWithFakeToolset(null /* no global properties */);
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader, null, "Fake", fakeProjectCollection);
+                using ProjectFromString projectFromString = new(content, null, "Fake", fakeProjectCollection);
+                Project project = projectFromString.Project;
 
                 MockLogger logger = new MockLogger();
                 bool result = project.Build(logger);
@@ -3898,8 +3899,8 @@ public void VerifyNoSubToolsetPropertiesAreEvaluatedWithInvalidSubToolset()
                               </Project>");
 
                 using ProjectCollection fakeProjectCollection = GetProjectCollectionWithFakeToolset(null /* no global properties */);
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader, null, "Fake", fakeProjectCollection);
+                using ProjectFromString projectFromString = new(content, null, "Fake", fakeProjectCollection);
+                Project project = projectFromString.Project;
 
                 MockLogger logger = new MockLogger();
                 bool result = project.Build(logger);
@@ -3950,8 +3951,8 @@ public void VerifyExplicitSubToolsetPropertiesAreEvaluated()
                               </Project>");
 
                 using ProjectCollection fakeProjectCollection = GetProjectCollectionWithFakeToolset(null /* no global properties */);
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader, null, "Fake", fakeProjectCollection);
+                using ProjectFromString projectFromString = new(content, null, "Fake", fakeProjectCollection);
+                Project project = projectFromString.Project;
 
                 MockLogger logger = new MockLogger();
                 bool result = project.Build(logger);
@@ -4002,8 +4003,8 @@ public void VerifyExplicitNonExistentSubToolsetPropertiesAreEvaluated()
                               </Project>");
 
                 using ProjectCollection fakeProjectCollection = GetProjectCollectionWithFakeToolset(null /* no global properties */);
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader, null, "Fake", fakeProjectCollection);
+                using ProjectFromString projectFromString = new(content, null, "Fake", fakeProjectCollection);
+                Project project = projectFromString.Project;
 
                 MockLogger logger = new MockLogger();
                 bool result = project.Build(logger);
@@ -4061,8 +4062,8 @@ public void VerifySubToolsetPropertiesOverrideEnvironment()
                               </Project>");
 
                 using ProjectCollection fakeProjectCollection = GetProjectCollectionWithFakeToolset(null /* no global properties */);
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader, null, "Fake", fakeProjectCollection);
+                using ProjectFromString projectFromString = new(content, null, "Fake", fakeProjectCollection);
+                Project project = projectFromString.Project;
 
                 MockLogger logger = new MockLogger();
                 bool result = project.Build(logger);
@@ -4124,8 +4125,8 @@ public void VerifyGlobalPropertiesOverrideSubToolset()
                 globalProperties.Add("c", "c5");
                 globalProperties.Add("d", "d5");
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader, globalProperties, "Fake", fakeProjectCollection);
+                using ProjectFromString projectFromString = new(content, globalProperties, "Fake", fakeProjectCollection);
+                Project project = projectFromString.Project;
 
                 MockLogger logger = new MockLogger();
                 bool result = project.Build(logger);
@@ -4183,8 +4184,8 @@ public void VerifySubToolsetVersionSetByGlobalPropertyStillOverridable()
                 IDictionary<string, string> globalProperties = new Dictionary<string, string>();
                 globalProperties.Add("VisualStudioVersion", "11.0");
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader, globalProperties, "Fake", fakeProjectCollection);
+                using ProjectFromString projectFromString = new(content, globalProperties, "Fake", fakeProjectCollection);
+                Project project = projectFromString.Project;
 
                 MockLogger logger = new MockLogger();
                 bool result = project.Build(logger);
@@ -4235,8 +4236,8 @@ public void VerifySubToolsetVersionSetByConstructorOverridable_OverridesGlobalPr
             IDictionary<string, string> globalProperties = new Dictionary<string, string>();
             globalProperties.Add("VisualStudioVersion", "11.0");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, globalProperties, "Fake", "FakeSubToolset", fakeProjectCollection, ProjectLoadSettings.Default);
+            using ProjectFromString projectFromString = new(content, globalProperties, "Fake", "FakeSubToolset", fakeProjectCollection, ProjectLoadSettings.Default);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -4279,8 +4280,8 @@ public void VerifySubToolsetVersionSetByConstructorOverridable()
 
             using ProjectCollection fakeProjectCollection = GetProjectCollectionWithFakeToolset(null /* no project collection global properties */);
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, null, "Fake", "FakeSubToolset", fakeProjectCollection, ProjectLoadSettings.Default);
+            using ProjectFromString projectFromString = new(content, null, "Fake", "FakeSubToolset", fakeProjectCollection, ProjectLoadSettings.Default);
+            Project project = projectFromString.Project;
 
             MockLogger logger = new MockLogger();
             bool result = project.Build(logger);
@@ -4557,8 +4558,8 @@ public void ConditionWithShortCircuitAndErrorDoesNotFailBuild(string projectInne
             using (var env = TestEnvironment.Create())
             {
                 env.SetEnvironmentVariable("MSBUILDLOGIMPORTS", "1");
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                Project project = new Project(xmlReader);
+                using ProjectFromString projectFromString = new(content);
+                Project project = projectFromString.Project;
 
                 MockLogger logger = new MockLogger();
 
@@ -4675,15 +4676,10 @@ public void VerifyMSBuildLogsAMessageWhenLocalPropertyCannotOverrideValueOfGloba
 
             MockLogger logger = new MockLogger();
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
             using var collection = new ProjectCollection(
                         globalProperties, new List<ILogger> { logger }, ToolsetDefinitionLocations.Default);
-            Project project =
-                new Project(
-                    xmlReader,
-                    globalProperties,
-                    null,
-                    collection);
+            using ProjectFromString projectFromString = new(content, globalProperties, null, collection);
+            Project project = projectFromString.Project;
 
             project.Build(logger);
             logger.AssertLogContains(
@@ -5060,8 +5056,7 @@ public void VerifyLogPropertyReassignment()
                       .ShouldContain(r => r.PropertyName == propertyName
                       && r.PreviousValue == propertyOldValue
                       && r.NewValue == propertyNewValue
-                      && r.Message.StartsWith($"{
-                          ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
+                      && r.Message.StartsWith($"{ResourceUtilities.FormatResourceStringIgnoreCodeAndKeyword(
                               "PropertyReassignment", propertyName, propertyNewValue, propertyOldValue, string.Empty)}"));
             }
         }
diff --git a/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs b/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
index f431c07bd58..9ca64ef3923 100644
--- a/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/IntrinsicFunctionOverload_Tests.cs
@@ -43,8 +43,8 @@ public void MSBuildAddInteger(bool isIntrinsicFunctionOverloadsEnabled)
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
             }
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -65,8 +65,8 @@ public void MSBuildAddIntegerGreaterThanMax()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -87,8 +87,8 @@ public void MSBuildAddIntegerLessThanMin()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -109,8 +109,8 @@ public void MSBuildAddReal()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -138,8 +138,8 @@ public void MSBuildSubtractInteger(bool isIntrinsicFunctionOverloadsEnabled)
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
             }
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -160,8 +160,8 @@ public void MSBuildSubtractIntegerGreaterThanMax()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -182,8 +182,8 @@ public void MSBuildSubtractIntegerLessThanMin()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -204,8 +204,8 @@ public void MSBuildSubtractReal()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -233,8 +233,8 @@ public void MSBuildMultiplyInteger(bool isIntrinsicFunctionOverloadsEnabled)
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
             }
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -255,8 +255,8 @@ public void MSBuildMultiplyIntegerGreaterThanMax()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -277,8 +277,8 @@ public void MSBuildMultiplyIntegerLessThanMin()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -299,8 +299,8 @@ public void MSBuildMultiplyReal()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -328,8 +328,8 @@ public void MSBuildDivideInteger(bool isIntrinsicFunctionOverloadsEnabled)
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
             }
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -350,8 +350,8 @@ public void MSBuildDivideIntegerGreaterThanMax()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -372,8 +372,8 @@ public void MSBuildDivideIntegerLessThanMin()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -394,8 +394,8 @@ public void MSBuildDivideReal()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -423,8 +423,8 @@ public void MSBuildModuloInteger(bool isIntrinsicFunctionOverloadsEnabled)
                 BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();
             }
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -445,8 +445,8 @@ public void MSBuildModuloIntegerGreaterThanMax()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -467,8 +467,8 @@ public void MSBuildModuloIntegerLessThanMin()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
@@ -489,8 +489,8 @@ public void MSBuildModuloReal()
 
             ChangeWaves.ResetStateForTests();
 
-            using var xmlReader = XmlReader.Create(new StringReader(projectContent.Cleanup()));
-            var project = new Project(xmlReader);
+            using ProjectFromString projectFromString = new(projectContent.Cleanup());
+            Project project = projectFromString.Project;
             ProjectProperty? actualProperty = project.GetProperty("Actual");
             actualProperty.EvaluatedValue.ShouldBe(expected);
         }
diff --git a/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs b/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
index 2d92b24abac..cbc0cab9082 100644
--- a/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/Preprocessor_Tests.cs
@@ -356,8 +356,8 @@ public void TwoWithContent()
     <p>v1</p>
   </PropertyGroup>
 </Project>");
-            using var xmlReader = XmlReader.Create(new StringReader(two));
-            ProjectRootElement twoXml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(two);
+            ProjectRootElement twoXml = projectRootElementFromString.Project;
             twoXml.FullPath = "p2";
 
             Project project;
@@ -821,8 +821,8 @@ public void ProjectMetadata()
   </ItemGroup>
 </Project>");
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+           using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement xml = projectRootElementFromString.Project;
             Project project = new Project(xml);
 
             using StringWriter writer = new StringWriter();
@@ -876,9 +876,9 @@ public void SdkImportsAreInPreprocessedOutput()
   </PropertyGroup>
 </Project>";
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
+                using ProjectRootElementFromString projectRootElementFromString = new(content);
                 Project project = Project.FromProjectRootElement(
-                    ProjectRootElement.Create(xmlReader),
+                    projectRootElementFromString.Project,
                     projectOptions);
 
                 using StringWriter writer = new StringWriter();
@@ -1103,9 +1103,9 @@ public void ImportedProjectsSdkImportsAreInPreprocessedOutput()
   </PropertyGroup>
 </Project>";
 
-                using var xmlReader = XmlReader.Create(new StringReader(content));
+                using ProjectRootElementFromString projectRootElementFromString = new(content);
                 Project project = Project.FromProjectRootElement(
-                    ProjectRootElement.Create(xmlReader),
+                    projectRootElementFromString.Project,
                     projectOptions);
 
                 using StringWriter writer = new StringWriter();
diff --git a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
index 1603833f5ba..cdd4b7fd0e0 100644
--- a/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
+++ b/src/Build.UnitTests/Evaluation/ProjectSdkImplicitImport_Tests.cs
@@ -106,8 +106,8 @@ public void SdkImportsAreInLogicalProject(string projectFormatString, bool expec
 
             string content = string.Format(projectFormatString, SdkName, projectInnerContents);
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement projectRootElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement projectRootElement = projectRootElementFromString.Project;
 
             var project = new Project(projectRootElement);
 
@@ -129,8 +129,8 @@ public void SdkImportsAreInImportList(string projectFormatString, bool expectImp
             File.WriteAllText(_sdkTargetsPath, _sdkTargetsContent);
             string content = string.Format(projectFormatString, SdkName, projectInnerContents);
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement projectRootElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement projectRootElement = projectRootElementFromString.Project;
 
             var project = new Project(projectRootElement);
 
@@ -196,8 +196,8 @@ public void SdkSupportsMultiple(string projectFormatString, bool expectImportInL
             }
             string content = string.Format(projectFormatString, sdkNames[0], sdkNames[1], sdkNames[2]);
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement projectRootElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement projectRootElement = projectRootElementFromString.Project;
 
             Project project = new Project(projectRootElement);
 
@@ -240,8 +240,8 @@ public void ProjectWithSdkImportsIsCloneable(string projectFormatString)
             // Based on the new-console-project CLI template (but not matching exactly
             // should not be a deal-breaker).
             string content = string.Format(projectFormatString, SdkName, projectInnerContents);
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
 
             project.DeepClone();
         }
@@ -274,10 +274,9 @@ public void ProjectWithSdkImportsIsRemoveable(string projectFormatString)
             // Based on the new-console-project CLI template (but not matching exactly
             // should not be a deal-breaker).
             string content = string.Format(projectFormatString, SdkName, projectInnerContents);
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            using var cloneXmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement project = ProjectRootElement.Create(xmlReader);
-            ProjectRootElement clone = ProjectRootElement.Create(cloneXmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement project = projectRootElementFromString.Project;
+            ProjectRootElement clone = projectRootElementFromString.Project;
 
             clone.DeepCopyFrom(project);
 
@@ -331,8 +330,8 @@ public void ProjectWithEmptySdkName(string projectFormatString, bool throwsOnEva
             }
             else
             {
-                using var xmlReader = XmlReader.Create(new StringReader(content));
-                var project = new Project(ProjectRootElement.Create(xmlReader));
+                using ProjectRootElementFromString projectRootElementFromString = new(content);
+                var project = new Project(projectRootElementFromString.Project);
                 Assert.Empty(project.Imports);
             }
         }
@@ -441,8 +440,8 @@ public void SdkImportsSupportVersion(string projectFormatString, string sdkVersi
 
             string content = string.Format(projectFormatString, SdkName, projectInnerContents, sdkVersion, minimumSdkVersion);
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            ProjectRootElement projectRootElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement projectRootElement = projectRootElementFromString.Project;
             var project = new Project(projectRootElement);
             project.Imports.Count.ShouldBe(2);
             var importElement = project.Imports[0].ImportingElement;
diff --git a/src/Build.UnitTests/EvaluationProfiler_Tests.cs b/src/Build.UnitTests/EvaluationProfiler_Tests.cs
index 0cdd1b2bafd..ff450b8a77b 100644
--- a/src/Build.UnitTests/EvaluationProfiler_Tests.cs
+++ b/src/Build.UnitTests/EvaluationProfiler_Tests.cs
@@ -301,11 +301,9 @@ private ProfilerResult BuildAndGetProfilerResult(string projectContent, bool set
         /// </summary>
         private Project CreateProject(string contents, string toolsVersion, ProjectCollection projectCollection)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(contents));
-            Project project = new Project(xmlReader, null, toolsVersion, projectCollection)
-            {
-                FullPath = _env.CreateFile().Path
-            };
+            using ProjectFromString projectFromString = new(contents, null, toolsVersion, projectCollection);
+            Project project = projectFromString.Project;
+            project.FullPath = _env.CreateFile().Path;
 
             project.Save();
 
diff --git a/src/Build.UnitTests/Instance/HostServices_Tests.cs b/src/Build.UnitTests/Instance/HostServices_Tests.cs
index 01d63bbecd0..ed18f318540 100644
--- a/src/Build.UnitTests/Instance/HostServices_Tests.cs
+++ b/src/Build.UnitTests/Instance/HostServices_Tests.cs
@@ -480,9 +480,8 @@ public ProjectInstance CreateDummyProject(string fileName)
  </Target>
 </Project>
 ");
-
-            using var xmlReader = new XmlTextReader(new StringReader(contents));
-            Project project = new Project(xmlReader, new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion);
+            using ProjectFromString projectFromString = new(contents, new Dictionary<string, string>(), ObjectModelHelpers.MSBuildDefaultToolsVersion);
+            Project project = projectFromString.Project;
             project.FullPath = fileName;
             ProjectInstance instance = project.CreateProjectInstance();
 
diff --git a/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs b/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
index 84501149cb7..cb3ceade820 100644
--- a/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
+++ b/src/Build.UnitTests/Instance/ProjectInstance_Internal_Tests.cs
@@ -67,8 +67,8 @@ public void GetTaskRegistrations()
                 string importPath = ObjectModelHelpers.CreateFileInTempProjectDirectory("import.targets", importContent);
                 projectFileContent = String.Format(projectFileContent, importPath);
 
-                using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-                ProjectInstance project = new Project(ProjectRootElement.Create(xmlReader)).CreateProjectInstance();
+                using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+                ProjectInstance project = new Project(projectRootElementFromString.Project).CreateProjectInstance();
 
                 project.TaskRegistry.TaskRegistrations.Count.ShouldBe(3);
                 project.TaskRegistry.TaskRegistrations[new TaskRegistry.RegisteredTaskIdentity("t0", null)][0].TaskFactoryAssemblyLoadInfo.AssemblyFile.ShouldBe(Path.Combine(Directory.GetCurrentDirectory(), "af0"));
@@ -115,8 +115,8 @@ public void InitialTargetsDefaultTargets()
 
                 projectFileContent = String.Format(projectFileContent, import1Path, import2Path);
 
-                using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-                ProjectInstance project = new Project(ProjectRootElement.Create(xmlReader)).CreateProjectInstance();
+                using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+                ProjectInstance project = new Project(projectRootElementFromString.Project).CreateProjectInstance();
 
                 project.DefaultTargets.ShouldBe(new string[] { "d0a", "d0b" });
                 project.InitialTargets.ShouldBe(new string[] { "i0a", "i0b", "i1a", "i1b", "i3a", "i3b", "i2a", "i2b" });
@@ -141,8 +141,8 @@ public void InitialTargetsDefaultTargetsEscaped()
                     <Project DefaultTargets='d0a%3bd0b' InitialTargets='i0a%3bi0b'>
                     </Project>";
 
-                using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-                ProjectInstance project = new Project(ProjectRootElement.Create(xmlReader)).CreateProjectInstance();
+                using ProjectFromString projectFromString = new(projectFileContent);
+                ProjectInstance project = projectFromString.Project.CreateProjectInstance();
 
                 project.DefaultTargets.ShouldBe(new string[] { "d0a;d0b" });
                 project.InitialTargets.ShouldBe(new string[] { "i0a;i0b" });
@@ -285,10 +285,9 @@ public void GetToolsVersion()
         [Fact]
         public void UsingExplicitToolsVersionShouldBeFalseWhenNoToolsetIsReferencedInProject()
         {
-            using var xmlReader = XmlReader.Create(new StringReader("<Project></Project>"));
+            using ProjectRootElementFromString projectRootElementFromString = new("<Project></Project>", ProjectCollection.GlobalProjectCollection, false, false);
             var projectInstance = new ProjectInstance(
-                new ProjectRootElement(
-                    xmlReader, ProjectCollection.GlobalProjectCollection.ProjectRootElementCache, false, false));
+                projectRootElementFromString.Project);
 
             projectInstance.UsingDifferentToolsVersionFromProjectFile.ShouldBeFalse();
         }
@@ -414,8 +413,8 @@ public void GetSubToolsetVersion_FromConstructor()
                         </Target>
                     </Project>";
 
-                using var xmlReader = XmlReader.Create(new StringReader(projectContent));
-                ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+                using ProjectRootElementFromString projectRootElementFromString = new(projectContent);
+                ProjectRootElement xml = projectRootElementFromString.Project;
 
                 IDictionary<string, string> globalProperties = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);
                 globalProperties.Add("VisualStudioVersion", "ABCD");
@@ -688,8 +687,9 @@ public void ProjectInstanceCanSerializeEntireStateViaTranslator(string projectCo
         {
             projectContents = string.Format(projectContents, MSBuildConstants.CurrentToolsVersion);
 
-            using var xmlReader = XmlReader.Create(new StringReader(ObjectModelHelpers.CleanupFileContents(projectContents)));
-            var original = new ProjectInstance(ProjectRootElement.Create(xmlReader));
+            using ProjectRootElementFromString projectRootElementFromString = new(ObjectModelHelpers.CleanupFileContents(projectContents));
+            ProjectRootElement rootElement = projectRootElementFromString.Project;
+            var original = new ProjectInstance(rootElement);
 
             original.TranslateEntireState = true;
 
@@ -780,8 +780,8 @@ public void AddTargetAddsNewTarget()
                     <Project>
                         <Target Name='a' />
                     </Project>";
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-            ProjectRootElement rootElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+            ProjectRootElement rootElement = projectRootElementFromString.Project;
             ProjectInstance projectInstance = new ProjectInstance(rootElement);
 
             ProjectTargetInstance targetInstance = projectInstance.AddTarget("b", "1==1", "inputs", "outputs", "returns", "keepDuplicateOutputs", "dependsOnTargets", "beforeTargets", "afterTargets", true);
@@ -816,8 +816,8 @@ public void AddTargetThrowsWithExistingTarget()
                     <Project>
                         <Target Name='a' />
                     </Project>";
-            using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-            ProjectRootElement rootElement = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+            ProjectRootElement rootElement = projectRootElementFromString.Project;
             ProjectInstance projectInstance = new ProjectInstance(rootElement);
 
             Should.Throw<InternalErrorException>(() => projectInstance.AddTarget("a", "1==1", "inputs", "outputs", "returns", "keepDuplicateOutputs", "dependsOnTargets", "beforeTargets", "afterTargets", true));
@@ -860,8 +860,8 @@ public void GetImportPathsAndImportPathsIncludingDuplicates(bool useDirectConstr
                 BuildParameters buildParameters = new BuildParameters(projectCollection) { ProjectLoadSettings = projectLoadSettings };
                 BuildEventContext buildEventContext = new BuildEventContext(0, BuildEventContext.InvalidTargetId, BuildEventContext.InvalidProjectContextId, BuildEventContext.InvalidTaskId);
 
-                using var xmlReader = XmlReader.Create(new StringReader(projectFileContent));
-                ProjectRootElement rootElement = ProjectRootElement.Create(xmlReader);
+                using ProjectRootElementFromString projectRootElementFromString = new(projectFileContent);
+                ProjectRootElement rootElement = projectRootElementFromString.Project;
                 ProjectInstance projectInstance = useDirectConstruction
                     ? new ProjectInstance(rootElement, globalProperties: null, toolsVersion: null, buildParameters, projectCollection.LoggingService, buildEventContext, sdkResolverService: null, 0)
                     : new Project(rootElement, globalProperties: null, toolsVersion: null, projectCollection, projectLoadSettings).CreateProjectInstance();
@@ -957,8 +957,6 @@ private static ProjectInstance GetProjectInstance(string content, HostServices h
         /// </summary>
         private static ProjectInstance GetProjectInstance(string content, HostServices hostServices, IDictionary<string, string> globalProperties, ProjectCollection projectCollection, string toolsVersion = null)
         {
-            using XmlReader reader = XmlReader.Create(new StringReader(content));
-
             if (globalProperties == null)
             {
                 // choose some interesting defaults if we weren't explicitly asked to use a set.
@@ -967,7 +965,8 @@ private static ProjectInstance GetProjectInstance(string content, HostServices h
                 globalProperties.Add("g2", "v2");
             }
 
-            Project project = new Project(reader, globalProperties, toolsVersion ?? ObjectModelHelpers.MSBuildDefaultToolsVersion, projectCollection ?? ProjectCollection.GlobalProjectCollection);
+            using ProjectFromString projectFromString = new(content, globalProperties, toolsVersion ?? ObjectModelHelpers.MSBuildDefaultToolsVersion, projectCollection ?? ProjectCollection.GlobalProjectCollection);
+            Project project = projectFromString.Project;
 
             ProjectInstance instance = project.CreateProjectInstance();
 
diff --git a/src/Build.UnitTests/Instance/TaskItem_Tests.cs b/src/Build.UnitTests/Instance/TaskItem_Tests.cs
index 18a1e31d198..7dc46593e79 100644
--- a/src/Build.UnitTests/Instance/TaskItem_Tests.cs
+++ b/src/Build.UnitTests/Instance/TaskItem_Tests.cs
@@ -274,8 +274,8 @@ public void Escaping1()
                 </Project>
                 ");
 
-            using var xmlReader = XmlTextReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement xml = projectRootElementFromString.Project;
 
             Project project = new Project(xml);
             MockLogger logger = new MockLogger();
@@ -328,8 +328,8 @@ public void Escaping2()
                 </Project>
                 ");
 
-            using var xmlReader = XmlTextReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement xml = projectRootElementFromString.Project;
 
             Project project = new Project(xml);
             MockLogger logger = new MockLogger();
@@ -363,8 +363,8 @@ public void Escaping3()
                 </Project>
                 ");
 
-            using var xmlReader = XmlTextReader.Create(new StringReader(content));
-            ProjectRootElement xml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(content);
+            ProjectRootElement xml = projectRootElementFromString.Project;
 
             Project project = new Project(xml);
             MockLogger logger = new MockLogger();
diff --git a/src/UnitTests.Shared/ObjectModelHelpers.cs b/src/UnitTests.Shared/ObjectModelHelpers.cs
index c48c4dc5bf2..48f0f504b59 100644
--- a/src/UnitTests.Shared/ObjectModelHelpers.cs
+++ b/src/UnitTests.Shared/ObjectModelHelpers.cs
@@ -1096,8 +1096,8 @@ public static IList<ProjectItem> GetItemsFromFragment(string fragment, bool allI
         /// </summary>
         public static IList<ProjectItem> GetItems(string content, bool allItems = false, bool ignoreCondition = false)
         {
-            using var xmlReader = XmlReader.Create(new StringReader(CleanupFileContents(content)));
-            var projectXml = ProjectRootElement.Create(xmlReader);
+            using ProjectRootElementFromString projectRootElementFromString = new(CleanupFileContents(content));
+            ProjectRootElement projectXml = projectRootElementFromString.Project;
             Project project = new Project(projectXml);
             IList<ProjectItem> item = Helpers.MakeList(
                 ignoreCondition ?
@@ -1354,9 +1354,8 @@ private static void BuildProjectWithNewOM(string content, ref MockLogger logger,
         {
             // Replace the nonstandard quotes with real ones
             content = ObjectModelHelpers.CleanupFileContents(content);
-
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, globalProperties, toolsVersion: null);
+            using ProjectFromString projectFromString = new(content, globalProperties, toolsVersion: null);
+            Project project = projectFromString.Project;
             logger ??= new MockLogger
             {
                 AllowTaskCrashes = allowTaskCrash
@@ -1371,8 +1370,8 @@ public static void BuildProjectWithNewOMAndBinaryLogger(string content, BinaryLo
             // Replace the nonstandard quotes with real ones
             content = ObjectModelHelpers.CleanupFileContents(content);
 
-            using var xmlReader = XmlReader.Create(new StringReader(content));
-            Project project = new Project(xmlReader, null, toolsVersion: null);
+            using ProjectFromString projectFromString = new(content, null, toolsVersion: null);
+            Project project = projectFromString.Project;
 
             List<ILogger> loggers = new List<ILogger>() { binaryLogger };
 
diff --git a/src/UnitTests.Shared/ProjectFromString.cs b/src/UnitTests.Shared/ProjectFromString.cs
new file mode 100644
index 00000000000..bd5ecacbed8
--- /dev/null
+++ b/src/UnitTests.Shared/ProjectFromString.cs
@@ -0,0 +1,80 @@
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Xml;
+using Microsoft.Build.Construction;
+using Microsoft.Build.Evaluation;
+
+#nullable disable
+
+namespace Microsoft.Build.UnitTests
+{
+    public class ProjectFromString : IDisposable
+    {
+        public Project Project { get; init; }
+
+        private XmlReader _reader;
+
+        public ProjectFromString(string s)
+            : this(s, null, null)
+        {
+        }
+
+        public ProjectFromString(string s, IDictionary<string, string> globalProperties, string toolsVersion)
+            : this(s, globalProperties, toolsVersion, ProjectCollection.GlobalProjectCollection)
+        {
+        }
+
+        public ProjectFromString(string s, IDictionary<string, string> globalProperties, string toolsVersion, ProjectCollection collection, ProjectLoadSettings loadSettings = ProjectLoadSettings.Default)
+        : this(s, globalProperties, toolsVersion, null, collection, loadSettings)
+        {
+        }
+
+        public ProjectFromString(string s, IDictionary<string, string> globalProperties, string toolsVersion, string subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings)
+        {
+            _reader = XmlReader.Create(new StringReader(s));
+            Project = new(_reader, globalProperties, toolsVersion, subToolsetVersion, projectCollection, loadSettings);
+        }
+
+        public void Dispose()
+        {
+            ((IDisposable)_reader).Dispose();
+        }
+    }
+
+    public class ProjectRootElementFromString : IDisposable
+    {
+        public ProjectRootElement Project { get; init; }
+
+        private XmlReader _reader;
+
+        public ProjectRootElementFromString(string s)
+            : this(s, ProjectCollection.GlobalProjectCollection)
+        {
+        }
+
+        public ProjectRootElementFromString(string s, ProjectCollection projectCollection)
+            : this(s, projectCollection, false)
+        {
+        }
+
+        public ProjectRootElementFromString(string s, ProjectCollection projectCollection, bool preserveFormatting)
+        {
+            _reader = XmlReader.Create(new StringReader(s));
+
+            Project = ProjectRootElement.Create(_reader, projectCollection, preserveFormatting);
+        }
+
+        public ProjectRootElementFromString(string s, ProjectCollection projectCollection, bool isExplicitlyLoaded, bool preserveFormatting)
+        {
+            _reader = XmlReader.Create(new StringReader(s));
+
+            Project = new ProjectRootElement(_reader, projectCollection.ProjectRootElementCache, isExplicitlyLoaded, preserveFormatting);
+        }
+
+        public void Dispose()
+        {
+            ((IDisposable)_reader).Dispose();
+        }
+    }
+}
diff --git a/src/Utilities.UnitTests/MuxLogger_Tests.cs b/src/Utilities.UnitTests/MuxLogger_Tests.cs
index a58b2a52f13..ee3441facfc 100644
--- a/src/Utilities.UnitTests/MuxLogger_Tests.cs
+++ b/src/Utilities.UnitTests/MuxLogger_Tests.cs
@@ -50,8 +50,8 @@ public void SimpleBuildWithNoLoggers()
     </Target>
 </Project>
 ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectBody));
-            ProjectInstance project = (new Project(xmlReader)).CreateProjectInstance();
+            using ProjectFromString projectFromString = new(projectBody);
+            ProjectInstance project = (projectFromString.Project).CreateProjectInstance();
 
             BuildManager buildManager = BuildManager.DefaultBuildManager;
             MuxLogger muxLogger = new MuxLogger();
@@ -93,8 +93,8 @@ public void BuildWithMuxLoggerEquivalentToNormalLogger()
             MockLogger mockLogger2 = new MockLogger();
             mockLogger2.LogBuildFinished = false;
             using ProjectCollection projectCollection = new ProjectCollection();
-            using var xmlReader = XmlReader.Create(new StringReader(projectBody));
-            ProjectInstance project = (new Project(xmlReader, null, ObjectModelHelpers.MSBuildDefaultToolsVersion, projectCollection)).CreateProjectInstance();
+            using ProjectFromString projectFromString = new(projectBody, null, ObjectModelHelpers.MSBuildDefaultToolsVersion, projectCollection);
+            ProjectInstance project = projectFromString.Project.CreateProjectInstance();
             BuildParameters parameters = new BuildParameters(projectCollection);
             parameters.Loggers = new ILogger[] { mockLogger2 };
             buildManager.Build(parameters, new BuildRequestData(project, Array.Empty<string>(), null));
@@ -103,8 +103,8 @@ public void BuildWithMuxLoggerEquivalentToNormalLogger()
             MuxLogger muxLogger = new MuxLogger();
             muxLogger.Verbosity = LoggerVerbosity.Normal;
             using var collection = new ProjectCollection();
-            using var projectBodyReader = XmlReader.Create(new StringReader(projectBody));
-            project = (new Project(projectBodyReader, null, ObjectModelHelpers.MSBuildDefaultToolsVersion, collection)).CreateProjectInstance();
+            using ProjectFromString projectFromString1 = new(projectBody, null, ObjectModelHelpers.MSBuildDefaultToolsVersion, collection);
+            project = projectFromString1.Project.CreateProjectInstance();
             parameters = new BuildParameters(collection);
             parameters.Loggers = new ILogger[] { muxLogger };
             buildManager.BeginBuild(parameters);
@@ -142,8 +142,8 @@ public void OneSubmissionOneLogger()
     </Target>
 </Project>
 ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectBody));
-            ProjectInstance project = (new Project(xmlReader)).CreateProjectInstance();
+            using ProjectFromString projectFromString = new(projectBody);
+            ProjectInstance project = (projectFromString.Project).CreateProjectInstance();
 
             BuildManager buildManager = BuildManager.DefaultBuildManager;
             MuxLogger muxLogger = new MuxLogger();
@@ -194,10 +194,10 @@ public void TwoSubmissionsWithSeparateLoggers()
 </Project>
 ");
 
-            using var xmlReader1 = XmlReader.Create(new StringReader(projectBody1));
-            using var xmlReader2 = XmlReader.Create(new StringReader(projectBody2));
-            ProjectInstance project1 = (new Project(xmlReader1)).CreateProjectInstance();
-            ProjectInstance project2 = (new Project(xmlReader2)).CreateProjectInstance();
+            using ProjectFromString projectFromString1 = new(projectBody1);
+            using ProjectFromString projectFromString2 = new(projectBody2);
+            ProjectInstance project1 = projectFromString1.Project.CreateProjectInstance();
+            ProjectInstance project2 = projectFromString2.Project.CreateProjectInstance();
 
             BuildManager buildManager = BuildManager.DefaultBuildManager;
             MuxLogger muxLogger = new MuxLogger();
@@ -251,8 +251,8 @@ public void OneSubmissionTwoLoggers()
     </Target>
 </Project>
 ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectBody));
-            ProjectInstance project = (new Project(xmlReader)).CreateProjectInstance();
+            using ProjectFromString projectFromString = new(projectBody);
+            ProjectInstance project = (projectFromString.Project).CreateProjectInstance();
 
             BuildManager buildManager = BuildManager.DefaultBuildManager;
             MuxLogger muxLogger = new MuxLogger();
@@ -300,8 +300,8 @@ public void RegisteringLoggerDuringBuildThrowsException()
     </Target>
 </Project>
 ");
-            using var xmlReader = XmlReader.Create(new StringReader(projectBody));
-            ProjectInstance project = (new Project(xmlReader)).CreateProjectInstance();
+            using ProjectFromString projectFromString = new(projectBody);
+            ProjectInstance project = (projectFromString.Project).CreateProjectInstance();
 
             BuildManager buildManager = BuildManager.DefaultBuildManager;
             MuxLogger muxLogger = new MuxLogger();
