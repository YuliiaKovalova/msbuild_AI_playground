diff --git a/src/Build/Graph/GraphBuilder.cs b/src/Build/Graph/GraphBuilder.cs
index 51d5acb6b99..0ef9df25409 100644
--- a/src/Build/Graph/GraphBuilder.cs
+++ b/src/Build/Graph/GraphBuilder.cs
@@ -525,30 +525,25 @@ private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata,
         {
             // TODO: ProjectInstance just converts the dictionary back to a PropertyDictionary, so find a way to directly provide it.
             var globalProperties = configurationMetadata.GlobalProperties.ToDictionary();
+            ProjectGraphNode graphNode;
 
-            var projectInstance = _projectInstanceFactory(
-                configurationMetadata.ProjectFullPath,
-                globalProperties,
-                _projectCollection);
-
-            if (projectInstance == null)
-            {
-                throw new InvalidOperationException(ResourceUtilities.GetResourceString("NullReferenceFromProjectInstanceFactory"));
-            }
+            if (enableDynamicPlatformResolution){
 
+                var projectInstance = _projectInstanceFactory(
+                    configurationMetadata.ProjectFullPath,
+                    null,
+                    _projectCollection);
 
+                if (projectInstance == null)
+                {
+                    throw new InvalidOperationException(ResourceUtilities.GetResourceString("NullReferenceFromProjectInstanceFactory"));
+                }
 
-            var graphNode = new ProjectGraphNode(projectInstance);
-            if(enableDynamicPlatformResolution){
-                
-                var Platforms = projectInstance.GetProperty("Platforms");
-                var Platform = projectInstance.GetProperty("Platform");
                 var SelectedPlatform = PlatformNegotiation.GetNearestPlatform(projectInstance.GetPropertyValue(PlatformsMetadataName), projectInstance.GetPropertyValue(PlatformLookupTableMetadataName), globalProperties[PlatformMetadataName], "", projectInstance.FullPath);
 
 
-                if (SelectedPlatform != null)
+                if (!string.IsNullOrEmpty(SelectedPlatform))
                 {
-                    // configurationMetadata.GlobalProperties.GetProperty("platform").EvaluatedValue = SelectedPlatform;
                     globalProperties["platform"] = SelectedPlatform;
                 }
 
@@ -559,6 +554,20 @@ private ParsedProject ParseProject(ConfigurationMetadata configurationMetadata,
 
                 graphNode = new ProjectGraphNode(projectInstance);
             }
+            else
+            {
+                var projectInstance = _projectInstanceFactory(
+                    configurationMetadata.ProjectFullPath,
+                    globalProperties,
+                    _projectCollection);
+
+                if (projectInstance == null)
+                {
+                    throw new InvalidOperationException(ResourceUtilities.GetResourceString("NullReferenceFromProjectInstanceFactory"));
+                }
+
+               graphNode = new ProjectGraphNode(projectInstance);
+            }
             
             var referenceInfos = ParseReferences(graphNode, ConversionUtilities.ValidBooleanTrue(projectInstance.GetPropertyValue(EnableDynamicPlatformResolutionMetadataName)));
 
