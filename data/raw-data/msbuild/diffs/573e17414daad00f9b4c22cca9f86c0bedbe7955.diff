diff --git a/eng/Versions.props b/eng/Versions.props
index fec2a927020..77edb6e9b5f 100644
--- a/eng/Versions.props
+++ b/eng/Versions.props
@@ -2,7 +2,7 @@
 <!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->
 <Project>
   <PropertyGroup>
-    <VersionPrefix>17.1.0</VersionPrefix>
+    <VersionPrefix>17.1.0</VersionPrefix><DotNetFinalVersionKind>release</DotNetFinalVersionKind>
     <AssemblyVersion>15.1.0.0</AssemblyVersion>
     <PreReleaseVersionLabel>preview</PreReleaseVersionLabel>
     <DotNetUseShippingVersions>true</DotNetUseShippingVersions>
diff --git a/src/Build/PublicAPI/net/PublicAPI.Shipped.txt b/src/Build/PublicAPI/net/PublicAPI.Shipped.txt
index 027d79e6239..03d0963d09f 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Shipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Shipped.txt
@@ -578,6 +578,8 @@ Microsoft.Build.Construction.UsingTaskParameterGroupElement.AddParameter(string
 Microsoft.Build.Construction.UsingTaskParameterGroupElement.AddParameter(string name, string output, string required, string parameterType) -> Microsoft.Build.Construction.ProjectUsingTaskParameterElement
 Microsoft.Build.Construction.UsingTaskParameterGroupElement.Parameters.get -> System.Collections.Generic.ICollection<Microsoft.Build.Construction.ProjectUsingTaskParameterElement>
 Microsoft.Build.Definition.ProjectOptions
+Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
+Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
 Microsoft.Build.Definition.ProjectOptions.EvaluationContext.get -> Microsoft.Build.Evaluation.Context.EvaluationContext
 Microsoft.Build.Definition.ProjectOptions.EvaluationContext.set -> void
 Microsoft.Build.Definition.ProjectOptions.GlobalProperties.get -> System.Collections.Generic.IDictionary<string, string>
@@ -1320,6 +1322,7 @@ Microsoft.Build.Experimental.ProjectCache.CacheResultType.CacheMiss = 2 -> Micro
 Microsoft.Build.Experimental.ProjectCache.CacheResultType.CacheNotApplicable = 3 -> Microsoft.Build.Experimental.ProjectCache.CacheResultType
 Microsoft.Build.Experimental.ProjectCache.CacheResultType.None = 0 -> Microsoft.Build.Experimental.ProjectCache.CacheResultType
 Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase
+Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult.PluginTargetResult() -> void
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult.PluginTargetResult(string targetName, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.ITaskItem2> taskItems, Microsoft.Build.Execution.BuildResultCode resultCode) -> void
@@ -1341,6 +1344,15 @@ Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase.ProjectCachePlu
 Microsoft.Build.Experimental.ProjectCache.ProxyTargets
 Microsoft.Build.Experimental.ProjectCache.ProxyTargets.ProxyTargets(System.Collections.Generic.IReadOnlyDictionary<string, string> proxyTargetToRealTargetMap) -> void
 Microsoft.Build.Experimental.ProjectCache.ProxyTargets.ProxyTargetToRealTargetMap.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>
+Microsoft.Build.FileSystem.FindPredicate
+Microsoft.Build.FileSystem.FindTransform<TResult>
+Microsoft.Build.FileSystem.IDirectoryCache
+Microsoft.Build.FileSystem.IDirectoryCache.DirectoryExists(string path) -> bool
+Microsoft.Build.FileSystem.IDirectoryCache.EnumerateDirectories<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
+Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
+Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool
+Microsoft.Build.FileSystem.IDirectoryCacheFactory
+Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache
 Microsoft.Build.FileSystem.MSBuildFileSystemBase
 Microsoft.Build.FileSystem.MSBuildFileSystemBase.MSBuildFileSystemBase() -> void
 Microsoft.Build.Globbing.CompositeGlob
@@ -1771,6 +1783,7 @@ static Microsoft.Build.Experimental.ProjectCache.CacheResult.IndicateCacheHit(Sy
 static Microsoft.Build.Experimental.ProjectCache.CacheResult.IndicateNonCacheHit(Microsoft.Build.Experimental.ProjectCache.CacheResultType resultType) -> Microsoft.Build.Experimental.ProjectCache.CacheResult
 static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor.FromAssemblyPath(string pluginAssemblyPath, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings = null) -> Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor
 static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor.FromInstance(Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase pluginInstance, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings = null) -> Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor
+static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
 static Microsoft.Build.Globbing.Extensions.MSBuildGlobExtensions.GetParsedGlobs(this Microsoft.Build.Globbing.IMSBuildGlob glob) -> System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.MSBuildGlob>
 static Microsoft.Build.Globbing.MSBuildGlob.Parse(string fileSpec) -> Microsoft.Build.Globbing.MSBuildGlob
 static Microsoft.Build.Globbing.MSBuildGlob.Parse(string globRoot, string fileSpec) -> Microsoft.Build.Globbing.MSBuildGlob
@@ -1818,4 +1831,4 @@ virtual Microsoft.Build.Logging.ConfigurableForwardingLogger.Shutdown() -> void
 virtual Microsoft.Build.Logging.ConsoleLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource) -> void
 virtual Microsoft.Build.Logging.ConsoleLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource, int nodeCount) -> void
 virtual Microsoft.Build.Logging.ConsoleLogger.Shutdown() -> void
-virtual Microsoft.Build.ObjectModelRemoting.ExternalProjectsProvider.Disconnected(Microsoft.Build.Evaluation.ProjectCollection collection) -> void
+virtual Microsoft.Build.ObjectModelRemoting.ExternalProjectsProvider.Disconnected(Microsoft.Build.Evaluation.ProjectCollection collection) -> void
\ No newline at end of file
diff --git a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
index 9281b0c3cf8..e69de29bb2d 100644
--- a/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/net/PublicAPI.Unshipped.txt
@@ -1,13 +0,0 @@
-Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
-Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
-Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
-Microsoft.Build.FileSystem.FindPredicate
-Microsoft.Build.FileSystem.FindTransform<TResult>
-Microsoft.Build.FileSystem.IDirectoryCache
-Microsoft.Build.FileSystem.IDirectoryCache.DirectoryExists(string path) -> bool
-Microsoft.Build.FileSystem.IDirectoryCache.EnumerateDirectories<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
-Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
-Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool
-Microsoft.Build.FileSystem.IDirectoryCacheFactory
-Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache
-static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt
index b2b3f82f392..f34fab4b645 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Shipped.txt
@@ -578,6 +578,8 @@ Microsoft.Build.Construction.UsingTaskParameterGroupElement.AddParameter(string
 Microsoft.Build.Construction.UsingTaskParameterGroupElement.AddParameter(string name, string output, string required, string parameterType) -> Microsoft.Build.Construction.ProjectUsingTaskParameterElement
 Microsoft.Build.Construction.UsingTaskParameterGroupElement.Parameters.get -> System.Collections.Generic.ICollection<Microsoft.Build.Construction.ProjectUsingTaskParameterElement>
 Microsoft.Build.Definition.ProjectOptions
+Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
+Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
 Microsoft.Build.Definition.ProjectOptions.EvaluationContext.get -> Microsoft.Build.Evaluation.Context.EvaluationContext
 Microsoft.Build.Definition.ProjectOptions.EvaluationContext.set -> void
 Microsoft.Build.Definition.ProjectOptions.GlobalProperties.get -> System.Collections.Generic.IDictionary<string, string>
@@ -1317,6 +1319,7 @@ Microsoft.Build.Experimental.ProjectCache.CacheResultType.CacheMiss = 2 -> Micro
 Microsoft.Build.Experimental.ProjectCache.CacheResultType.CacheNotApplicable = 3 -> Microsoft.Build.Experimental.ProjectCache.CacheResultType
 Microsoft.Build.Experimental.ProjectCache.CacheResultType.None = 0 -> Microsoft.Build.Experimental.ProjectCache.CacheResultType
 Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase
+Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult.PluginTargetResult() -> void
 Microsoft.Build.Experimental.ProjectCache.PluginTargetResult.PluginTargetResult(string targetName, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Framework.ITaskItem2> taskItems, Microsoft.Build.Execution.BuildResultCode resultCode) -> void
@@ -1338,6 +1341,15 @@ Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase.ProjectCachePlu
 Microsoft.Build.Experimental.ProjectCache.ProxyTargets
 Microsoft.Build.Experimental.ProjectCache.ProxyTargets.ProxyTargets(System.Collections.Generic.IReadOnlyDictionary<string, string> proxyTargetToRealTargetMap) -> void
 Microsoft.Build.Experimental.ProjectCache.ProxyTargets.ProxyTargetToRealTargetMap.get -> System.Collections.Generic.IReadOnlyDictionary<string, string>
+Microsoft.Build.FileSystem.FindPredicate
+Microsoft.Build.FileSystem.FindTransform<TResult>
+Microsoft.Build.FileSystem.IDirectoryCache
+Microsoft.Build.FileSystem.IDirectoryCache.DirectoryExists(string path) -> bool
+Microsoft.Build.FileSystem.IDirectoryCache.EnumerateDirectories<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
+Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
+Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool
+Microsoft.Build.FileSystem.IDirectoryCacheFactory
+Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache
 Microsoft.Build.FileSystem.MSBuildFileSystemBase
 Microsoft.Build.FileSystem.MSBuildFileSystemBase.MSBuildFileSystemBase() -> void
 Microsoft.Build.Globbing.CompositeGlob
@@ -1768,6 +1780,7 @@ static Microsoft.Build.Experimental.ProjectCache.CacheResult.IndicateCacheHit(Sy
 static Microsoft.Build.Experimental.ProjectCache.CacheResult.IndicateNonCacheHit(Microsoft.Build.Experimental.ProjectCache.CacheResultType resultType) -> Microsoft.Build.Experimental.ProjectCache.CacheResult
 static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor.FromAssemblyPath(string pluginAssemblyPath, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings = null) -> Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor
 static Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor.FromInstance(Microsoft.Build.Experimental.ProjectCache.ProjectCachePluginBase pluginInstance, System.Collections.Generic.IReadOnlyCollection<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Graph.ProjectGraph projectGraph, System.Collections.Generic.IReadOnlyDictionary<string, string> pluginSettings = null) -> Microsoft.Build.Experimental.ProjectCache.ProjectCacheDescriptor
+static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
 static Microsoft.Build.Globbing.Extensions.MSBuildGlobExtensions.GetParsedGlobs(this Microsoft.Build.Globbing.IMSBuildGlob glob) -> System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.MSBuildGlob>
 static Microsoft.Build.Globbing.MSBuildGlob.Parse(string fileSpec) -> Microsoft.Build.Globbing.MSBuildGlob
 static Microsoft.Build.Globbing.MSBuildGlob.Parse(string globRoot, string fileSpec) -> Microsoft.Build.Globbing.MSBuildGlob
diff --git a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index 218e7d4593d..e69de29bb2d 100644
--- a/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Build/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1,13 +0,0 @@
-Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.get -> Microsoft.Build.FileSystem.IDirectoryCacheFactory
-Microsoft.Build.Definition.ProjectOptions.DirectoryCacheFactory.set -> void
-Microsoft.Build.Experimental.ProjectCache.PluginLoggerBase.PluginLoggerBase() -> void
-Microsoft.Build.FileSystem.FindPredicate
-Microsoft.Build.FileSystem.FindTransform<TResult>
-Microsoft.Build.FileSystem.IDirectoryCache
-Microsoft.Build.FileSystem.IDirectoryCache.DirectoryExists(string path) -> bool
-Microsoft.Build.FileSystem.IDirectoryCache.EnumerateDirectories<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
-Microsoft.Build.FileSystem.IDirectoryCache.EnumerateFiles<TResult>(string path, string pattern, Microsoft.Build.FileSystem.FindPredicate predicate, Microsoft.Build.FileSystem.FindTransform<TResult> transform) -> System.Collections.Generic.IEnumerable<TResult>
-Microsoft.Build.FileSystem.IDirectoryCache.FileExists(string path) -> bool
-Microsoft.Build.FileSystem.IDirectoryCacheFactory
-Microsoft.Build.FileSystem.IDirectoryCacheFactory.GetDirectoryCacheForEvaluation(int evaluationId) -> Microsoft.Build.FileSystem.IDirectoryCache
-static Microsoft.Build.Globbing.CompositeGlob.Create(System.Collections.Generic.IEnumerable<Microsoft.Build.Globbing.IMSBuildGlob> globs) -> Microsoft.Build.Globbing.IMSBuildGlob
\ No newline at end of file
diff --git a/src/Framework/PublicAPI/net/PublicAPI.Shipped.txt b/src/Framework/PublicAPI/net/PublicAPI.Shipped.txt
index 4ba35aaf1b9..ec298ae0076 100644
--- a/src/Framework/PublicAPI/net/PublicAPI.Shipped.txt
+++ b/src/Framework/PublicAPI/net/PublicAPI.Shipped.txt
@@ -916,4 +916,4 @@ virtual Microsoft.Build.Framework.SdkResult.Version.set -> void
 virtual Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(string path, string version, System.Collections.Generic.IDictionary<string, string> propertiesToAdd, System.Collections.Generic.IDictionary<string, Microsoft.Build.Framework.SdkResultItem> itemsToAdd, System.Collections.Generic.IEnumerable<string> warnings = null) -> Microsoft.Build.Framework.SdkResult
 virtual Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(System.Collections.Generic.IEnumerable<string> paths, string version, System.Collections.Generic.IDictionary<string, string> propertiesToAdd = null, System.Collections.Generic.IDictionary<string, Microsoft.Build.Framework.SdkResultItem> itemsToAdd = null, System.Collections.Generic.IEnumerable<string> warnings = null) -> Microsoft.Build.Framework.SdkResult
 virtual Microsoft.Build.Framework.XamlTypes.BaseProperty.BeginInit() -> void
-virtual Microsoft.Build.Framework.XamlTypes.BaseProperty.EndInit() -> void
+virtual Microsoft.Build.Framework.XamlTypes.BaseProperty.EndInit() -> void
\ No newline at end of file
diff --git a/src/Framework/PublicAPI/netstandard/PublicAPI.Shipped.txt b/src/Framework/PublicAPI/netstandard/PublicAPI.Shipped.txt
index 49f59b81603..fa0dac7c7ef 100644
--- a/src/Framework/PublicAPI/netstandard/PublicAPI.Shipped.txt
+++ b/src/Framework/PublicAPI/netstandard/PublicAPI.Shipped.txt
@@ -629,4 +629,4 @@ virtual Microsoft.Build.Framework.SdkResult.Success.set -> void
 virtual Microsoft.Build.Framework.SdkResult.Version.get -> string
 virtual Microsoft.Build.Framework.SdkResult.Version.set -> void
 virtual Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(string path, string version, System.Collections.Generic.IDictionary<string, string> propertiesToAdd, System.Collections.Generic.IDictionary<string, Microsoft.Build.Framework.SdkResultItem> itemsToAdd, System.Collections.Generic.IEnumerable<string> warnings = null) -> Microsoft.Build.Framework.SdkResult
-virtual Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(System.Collections.Generic.IEnumerable<string> paths, string version, System.Collections.Generic.IDictionary<string, string> propertiesToAdd = null, System.Collections.Generic.IDictionary<string, Microsoft.Build.Framework.SdkResultItem> itemsToAdd = null, System.Collections.Generic.IEnumerable<string> warnings = null) -> Microsoft.Build.Framework.SdkResult
+virtual Microsoft.Build.Framework.SdkResultFactory.IndicateSuccess(System.Collections.Generic.IEnumerable<string> paths, string version, System.Collections.Generic.IDictionary<string, string> propertiesToAdd = null, System.Collections.Generic.IDictionary<string, Microsoft.Build.Framework.SdkResultItem> itemsToAdd = null, System.Collections.Generic.IEnumerable<string> warnings = null) -> Microsoft.Build.Framework.SdkResult
\ No newline at end of file
diff --git a/src/StringTools/PublicAPI/net/PublicAPI.Shipped.txt b/src/StringTools/PublicAPI/net/PublicAPI.Shipped.txt
index 2cd09cc29ef..9086e5e2c2a 100644
--- a/src/StringTools/PublicAPI/net/PublicAPI.Shipped.txt
+++ b/src/StringTools/PublicAPI/net/PublicAPI.Shipped.txt
@@ -1,7 +1,6 @@
-#nullable enable
 Microsoft.NET.StringTools.SpanBasedStringBuilder
-Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string! value) -> void
-Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string! value, int startIndex, int count) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string value) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string value, int startIndex, int count) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(System.ReadOnlyMemory<char> span) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Capacity.get -> int
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Clear() -> void
@@ -13,14 +12,14 @@ Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.MoveNext() -> bool
 Microsoft.NET.StringTools.SpanBasedStringBuilder.GetEnumerator() -> Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Length.get -> int
 Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(int capacity = 4) -> void
-Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(string! str) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(string str) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Trim() -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.TrimEnd() -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.TrimStart() -> void
 Microsoft.NET.StringTools.Strings
-override Microsoft.NET.StringTools.SpanBasedStringBuilder.ToString() -> string!
-static Microsoft.NET.StringTools.Strings.CreateDiagnosticReport() -> string!
+override Microsoft.NET.StringTools.SpanBasedStringBuilder.ToString() -> string
+static Microsoft.NET.StringTools.Strings.CreateDiagnosticReport() -> string
 static Microsoft.NET.StringTools.Strings.EnableDiagnostics() -> void
-static Microsoft.NET.StringTools.Strings.GetSpanBasedStringBuilder() -> Microsoft.NET.StringTools.SpanBasedStringBuilder!
-static Microsoft.NET.StringTools.Strings.WeakIntern(string! str) -> string!
-static Microsoft.NET.StringTools.Strings.WeakIntern(System.ReadOnlySpan<char> str) -> string!
+static Microsoft.NET.StringTools.Strings.GetSpanBasedStringBuilder() -> Microsoft.NET.StringTools.SpanBasedStringBuilder
+static Microsoft.NET.StringTools.Strings.WeakIntern(string str) -> string
+static Microsoft.NET.StringTools.Strings.WeakIntern(System.ReadOnlySpan<char> str) -> string
\ No newline at end of file
diff --git a/src/StringTools/PublicAPI/net35/PublicAPI.Shipped.txt b/src/StringTools/PublicAPI/net35/PublicAPI.Shipped.txt
index 3ac8d4a6e79..e2b05b1bd03 100644
--- a/src/StringTools/PublicAPI/net35/PublicAPI.Shipped.txt
+++ b/src/StringTools/PublicAPI/net35/PublicAPI.Shipped.txt
@@ -1,21 +1,20 @@
-#nullable enable
 Microsoft.NET.StringTools.SpanBasedStringBuilder
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Clear() -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Dispose() -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.Current.get -> char
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.Enumerator() -> void
-Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.Enumerator(System.Text.StringBuilder! builder) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.Enumerator(System.Text.StringBuilder builder) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.MoveNext() -> bool
 Microsoft.NET.StringTools.SpanBasedStringBuilder.GetEnumerator() -> Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Length.get -> int
 Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(int capacity = 4) -> void
-Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(string! str) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(string str) -> void
 Microsoft.NET.StringTools.Strings
-override Microsoft.NET.StringTools.SpanBasedStringBuilder.ToString() -> string!
-static Microsoft.NET.StringTools.Strings.CreateDiagnosticReport() -> string!
+override Microsoft.NET.StringTools.SpanBasedStringBuilder.ToString() -> string
+static Microsoft.NET.StringTools.Strings.CreateDiagnosticReport() -> string
 static Microsoft.NET.StringTools.Strings.EnableDiagnostics() -> void
-static Microsoft.NET.StringTools.Strings.GetSpanBasedStringBuilder() -> Microsoft.NET.StringTools.SpanBasedStringBuilder!
-static Microsoft.NET.StringTools.Strings.WeakIntern(string! str) -> string!
-static System.MemoryExtensions.AsSpan<T>(this T[]! array, int start, int length) -> string!
-System.MemoryExtensions
+static Microsoft.NET.StringTools.Strings.GetSpanBasedStringBuilder() -> Microsoft.NET.StringTools.SpanBasedStringBuilder
+static Microsoft.NET.StringTools.Strings.WeakIntern(string str) -> string
+static System.MemoryExtensions.AsSpan<T>(this T[] array, int start, int length) -> string
+System.MemoryExtensions
\ No newline at end of file
diff --git a/src/StringTools/PublicAPI/netstandard/PublicAPI.Shipped.txt b/src/StringTools/PublicAPI/netstandard/PublicAPI.Shipped.txt
index 2cd09cc29ef..9086e5e2c2a 100644
--- a/src/StringTools/PublicAPI/netstandard/PublicAPI.Shipped.txt
+++ b/src/StringTools/PublicAPI/netstandard/PublicAPI.Shipped.txt
@@ -1,7 +1,6 @@
-#nullable enable
 Microsoft.NET.StringTools.SpanBasedStringBuilder
-Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string! value) -> void
-Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string! value, int startIndex, int count) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string value) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(string value, int startIndex, int count) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Append(System.ReadOnlyMemory<char> span) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Capacity.get -> int
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Clear() -> void
@@ -13,14 +12,14 @@ Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator.MoveNext() -> bool
 Microsoft.NET.StringTools.SpanBasedStringBuilder.GetEnumerator() -> Microsoft.NET.StringTools.SpanBasedStringBuilder.Enumerator
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Length.get -> int
 Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(int capacity = 4) -> void
-Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(string! str) -> void
+Microsoft.NET.StringTools.SpanBasedStringBuilder.SpanBasedStringBuilder(string str) -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.Trim() -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.TrimEnd() -> void
 Microsoft.NET.StringTools.SpanBasedStringBuilder.TrimStart() -> void
 Microsoft.NET.StringTools.Strings
-override Microsoft.NET.StringTools.SpanBasedStringBuilder.ToString() -> string!
-static Microsoft.NET.StringTools.Strings.CreateDiagnosticReport() -> string!
+override Microsoft.NET.StringTools.SpanBasedStringBuilder.ToString() -> string
+static Microsoft.NET.StringTools.Strings.CreateDiagnosticReport() -> string
 static Microsoft.NET.StringTools.Strings.EnableDiagnostics() -> void
-static Microsoft.NET.StringTools.Strings.GetSpanBasedStringBuilder() -> Microsoft.NET.StringTools.SpanBasedStringBuilder!
-static Microsoft.NET.StringTools.Strings.WeakIntern(string! str) -> string!
-static Microsoft.NET.StringTools.Strings.WeakIntern(System.ReadOnlySpan<char> str) -> string!
+static Microsoft.NET.StringTools.Strings.GetSpanBasedStringBuilder() -> Microsoft.NET.StringTools.SpanBasedStringBuilder
+static Microsoft.NET.StringTools.Strings.WeakIntern(string str) -> string
+static Microsoft.NET.StringTools.Strings.WeakIntern(System.ReadOnlySpan<char> str) -> string
\ No newline at end of file
diff --git a/src/Tasks/PublicAPI/netstandard/PublicAPI.Shipped.txt b/src/Tasks/PublicAPI/netstandard/PublicAPI.Shipped.txt
index 37b2642bb9b..092772496e2 100644
--- a/src/Tasks/PublicAPI/netstandard/PublicAPI.Shipped.txt
+++ b/src/Tasks/PublicAPI/netstandard/PublicAPI.Shipped.txt
@@ -1277,6 +1277,24 @@ Microsoft.Build.Tasks.Hosting.IVbcHostObject5.SetPlatformWith32BitPreference(str
 Microsoft.Build.Tasks.Hosting.IVbcHostObject5.SetSubsystemVersion(string subsystemVersion) -> bool
 Microsoft.Build.Tasks.Hosting.IVbcHostObjectFreeThreaded
 Microsoft.Build.Tasks.Hosting.IVbcHostObjectFreeThreaded.Compile() -> bool
+Microsoft.Build.Tasks.LC
+Microsoft.Build.Tasks.LC.LC() -> void
+Microsoft.Build.Tasks.LC.LicenseTarget.get -> Microsoft.Build.Framework.ITaskItem
+Microsoft.Build.Tasks.LC.LicenseTarget.set -> void
+Microsoft.Build.Tasks.LC.NoLogo.get -> bool
+Microsoft.Build.Tasks.LC.NoLogo.set -> void
+Microsoft.Build.Tasks.LC.OutputDirectory.get -> string
+Microsoft.Build.Tasks.LC.OutputDirectory.set -> void
+Microsoft.Build.Tasks.LC.OutputLicense.get -> Microsoft.Build.Framework.ITaskItem
+Microsoft.Build.Tasks.LC.OutputLicense.set -> void
+Microsoft.Build.Tasks.LC.ReferencedAssemblies.get -> Microsoft.Build.Framework.ITaskItem[]
+Microsoft.Build.Tasks.LC.ReferencedAssemblies.set -> void
+Microsoft.Build.Tasks.LC.SdkToolsPath.get -> string
+Microsoft.Build.Tasks.LC.SdkToolsPath.set -> void
+Microsoft.Build.Tasks.LC.Sources.get -> Microsoft.Build.Framework.ITaskItem[]
+Microsoft.Build.Tasks.LC.Sources.set -> void
+Microsoft.Build.Tasks.LC.TargetFrameworkVersion.get -> string
+Microsoft.Build.Tasks.LC.TargetFrameworkVersion.set -> void
 Microsoft.Build.Tasks.MakeDir
 Microsoft.Build.Tasks.MakeDir.Directories.get -> Microsoft.Build.Framework.ITaskItem[]
 Microsoft.Build.Tasks.MakeDir.Directories.set -> void
@@ -1840,6 +1858,12 @@ override Microsoft.Build.Tasks.GetFileHash.Execute() -> bool
 override Microsoft.Build.Tasks.GetFrameworkPath.Execute() -> bool
 override Microsoft.Build.Tasks.GetReferenceAssemblyPaths.Execute() -> bool
 override Microsoft.Build.Tasks.Hash.Execute() -> bool
+override Microsoft.Build.Tasks.LC.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension commandLine) -> void
+override Microsoft.Build.Tasks.LC.AddResponseFileCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension commandLine) -> void
+override Microsoft.Build.Tasks.LC.Execute() -> bool
+override Microsoft.Build.Tasks.LC.GenerateFullPathToTool() -> string
+override Microsoft.Build.Tasks.LC.ToolName.get -> string
+override Microsoft.Build.Tasks.LC.ValidateParameters() -> bool
 override Microsoft.Build.Tasks.MakeDir.Execute() -> bool
 override Microsoft.Build.Tasks.Message.Execute() -> bool
 override Microsoft.Build.Tasks.Move.Execute() -> bool
diff --git a/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt b/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt
index 23c8f38efd6..e69de29bb2d 100644
--- a/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt
+++ b/src/Tasks/PublicAPI/netstandard/PublicAPI.Unshipped.txt
@@ -1,24 +0,0 @@
-Microsoft.Build.Tasks.LC
-Microsoft.Build.Tasks.LC.LC() -> void
-Microsoft.Build.Tasks.LC.LicenseTarget.get -> Microsoft.Build.Framework.ITaskItem
-Microsoft.Build.Tasks.LC.LicenseTarget.set -> void
-Microsoft.Build.Tasks.LC.NoLogo.get -> bool
-Microsoft.Build.Tasks.LC.NoLogo.set -> void
-Microsoft.Build.Tasks.LC.OutputDirectory.get -> string
-Microsoft.Build.Tasks.LC.OutputDirectory.set -> void
-Microsoft.Build.Tasks.LC.OutputLicense.get -> Microsoft.Build.Framework.ITaskItem
-Microsoft.Build.Tasks.LC.OutputLicense.set -> void
-Microsoft.Build.Tasks.LC.ReferencedAssemblies.get -> Microsoft.Build.Framework.ITaskItem[]
-Microsoft.Build.Tasks.LC.ReferencedAssemblies.set -> void
-Microsoft.Build.Tasks.LC.SdkToolsPath.get -> string
-Microsoft.Build.Tasks.LC.SdkToolsPath.set -> void
-Microsoft.Build.Tasks.LC.Sources.get -> Microsoft.Build.Framework.ITaskItem[]
-Microsoft.Build.Tasks.LC.Sources.set -> void
-Microsoft.Build.Tasks.LC.TargetFrameworkVersion.get -> string
-Microsoft.Build.Tasks.LC.TargetFrameworkVersion.set -> void
-override Microsoft.Build.Tasks.LC.AddCommandLineCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension commandLine) -> void
-override Microsoft.Build.Tasks.LC.AddResponseFileCommands(Microsoft.Build.Tasks.CommandLineBuilderExtension commandLine) -> void
-override Microsoft.Build.Tasks.LC.Execute() -> bool
-override Microsoft.Build.Tasks.LC.GenerateFullPathToTool() -> string
-override Microsoft.Build.Tasks.LC.ToolName.get -> string
-override Microsoft.Build.Tasks.LC.ValidateParameters() -> bool
\ No newline at end of file
