diff --git a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
index 4bb88b2ca6c..2a9a83b0135 100644
--- a/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
+++ b/src/Build/BackEnd/Components/Logging/ProjectLoggingContext.cs
@@ -111,7 +111,7 @@ private ProjectLoggingContext(
                 }
                 else
                 {
-                    properties = projectProperties.Filter(p => p is not EnvironmentDerivedProjectPropertyInstance || EnvironmentUtilities.IsReservedProperty(p.Name), p => new DictionaryEntry(p.Name, p.EvaluatedValue));
+                    properties = projectProperties.Filter(p => p is not EnvironmentDerivedProjectPropertyInstance || EnvironmentUtilities.IsWellKnownEnvironmentDerivedProperty(p.Name), p => new DictionaryEntry(p.Name, p.EvaluatedValue));
                 }
 
                 items = projectItems?.GetCopyOnReadEnumerable(item => new DictionaryEntry(item.ItemType, new TaskItem(item))) ?? Enumerable.Empty<DictionaryEntry>();
diff --git a/src/Build/Evaluation/Evaluator.cs b/src/Build/Evaluation/Evaluator.cs
index 86f60568c39..e7b023fd46d 100644
--- a/src/Build/Evaluation/Evaluator.cs
+++ b/src/Build/Evaluation/Evaluator.cs
@@ -824,9 +824,11 @@ private IEnumerable FilterOutEnvironmentDerivedProperties(PropertyDictionary<P>
             List<P> list = new(dictionary.Count);
             foreach (P p in dictionary)
             {
+                // This checks if a property was derived from the environment but is not one of the well-known environment variables we
+                // use to change build behavior.
                 if ((p is EnvironmentDerivedProjectPropertyInstance ||
                     (p is ProjectProperty pp && pp.IsEnvironmentProperty)) &&
-                    !EnvironmentUtilities.IsReservedProperty(p.Name))
+                    !EnvironmentUtilities.IsWellKnownEnvironmentDerivedProperty(p.Name))
                 {
                     continue;
                 }
diff --git a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
index f5c969b1d21..46f8eb085de 100644
--- a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
+++ b/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs
@@ -254,7 +254,7 @@ private void Write(BuildStartedEventArgs e)
             }
             else
             {
-                Write(e.BuildEnvironment?.Where(kvp => EnvironmentUtilities.IsReservedProperty(kvp.Key)));
+                Write(e.BuildEnvironment?.Where(kvp => EnvironmentUtilities.IsWellKnownEnvironmentDerivedProperty(kvp.Key)));
             }
         }
 
diff --git a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
index 20cf657e9e7..3d184b648f1 100644
--- a/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
+++ b/src/Build/Logging/ParallelLogger/ParallelConsoleLogger.cs
@@ -238,7 +238,7 @@ public override void BuildStartedHandler(object sender, BuildStartedEventArgs e)
             }
             else
             {
-                WriteEnvironment(e.BuildEnvironment?.Where(kvp => EnvironmentUtilities.IsReservedProperty(kvp.Key)).ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
+                WriteEnvironment(e.BuildEnvironment?.Where(kvp => EnvironmentUtilities.IsWellKnownEnvironmentDerivedProperty(kvp.Key)).ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
             }
         }
 
diff --git a/src/Build/Logging/SerialConsoleLogger.cs b/src/Build/Logging/SerialConsoleLogger.cs
index f4d79a14712..abb9c752d78 100644
--- a/src/Build/Logging/SerialConsoleLogger.cs
+++ b/src/Build/Logging/SerialConsoleLogger.cs
@@ -115,7 +115,7 @@ public override void BuildStartedHandler(object sender, BuildStartedEventArgs e)
             }
             else
             {
-                WriteEnvironment(e.BuildEnvironment?.Where(kvp => EnvironmentUtilities.IsReservedProperty(kvp.Key)).ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
+                WriteEnvironment(e.BuildEnvironment?.Where(kvp => EnvironmentUtilities.IsWellKnownEnvironmentDerivedProperty(kvp.Key)).ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
             }
         }
 
diff --git a/src/Shared/EnvironmentUtilities.cs b/src/Shared/EnvironmentUtilities.cs
index 9920b4c9038..7cb21b1abe2 100644
--- a/src/Shared/EnvironmentUtilities.cs
+++ b/src/Shared/EnvironmentUtilities.cs
@@ -13,7 +13,7 @@ internal static partial class EnvironmentUtilities
         public static bool Is64BitOperatingSystem =>
             Environment.Is64BitOperatingSystem;
 
-        public static bool IsReservedProperty(string propertyName)
+        public static bool IsWellKnownEnvironmentDerivedProperty(string propertyName)
         {
             return propertyName.StartsWith("MSBUILD") ||
                 propertyName.StartsWith("COMPLUS_") ||
diff --git a/src/Utilities/MuxLogger.cs b/src/Utilities/MuxLogger.cs
index 4f17d0a158c..5f67d9265a7 100644
--- a/src/Utilities/MuxLogger.cs
+++ b/src/Utilities/MuxLogger.cs
@@ -866,7 +866,7 @@ private void RaiseProjectStartedEvent(object sender, ProjectStartedEventArgs bui
                         BuildStartedEventArgs startedEvent =
                             new BuildStartedEventArgs(_buildStartedEvent.Message,
                             _buildStartedEvent.HelpKeyword,
-                            Traits.LogAllEnvironmentVariables ? _buildStartedEvent.BuildEnvironment : _buildStartedEvent.BuildEnvironment?.Where(kvp => EnvironmentUtilities.IsReservedProperty(kvp.Key)).ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
+                            Traits.LogAllEnvironmentVariables ? _buildStartedEvent.BuildEnvironment : _buildStartedEvent.BuildEnvironment?.Where(kvp => EnvironmentUtilities.IsWellKnownEnvironmentDerivedProperty(kvp.Key)).ToDictionary(kvp => kvp.Key, kvp => kvp.Value));
                         RaiseBuildStartedEvent(sender, startedEvent);
                     }
 
