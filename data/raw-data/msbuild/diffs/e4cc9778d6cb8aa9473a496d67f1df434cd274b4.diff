diff --git a/src/Build/Instance/ProjectImportInstance.cs b/src/Build/Instance/ProjectImportInstance.cs
new file mode 100644
index 00000000000..107e32e6c27
--- /dev/null
+++ b/src/Build/Instance/ProjectImportInstance.cs
@@ -0,0 +1,37 @@
+ï»¿// Licensed to the .NET Foundation under one or more agreements.
+// The .NET Foundation licenses this file to you under the MIT license.
+
+using System;
+using Microsoft.Build.Shared;
+
+namespace Microsoft.Build.Execution;
+
+/// <summary>
+/// Defines an import from a specific path and that was read at a specified time.
+/// </summary>
+public struct ProjectImportInstance
+{
+    /// <summary>
+    /// Constructor of this instance.
+    /// </summary>
+    /// <param name="fullPath">The full path to the import.</param>
+    /// <param name="lastWriteTimeWhenRead">The last-write-time of the file that was read, when it was read.</param>
+    public ProjectImportInstance(string fullPath, DateTime lastWriteTimeWhenRead)
+    {
+        ErrorUtilities.VerifyThrowArgumentNull(fullPath, nameof(fullPath));
+        FullPath = fullPath;
+        LastWriteTimeWhenRead = lastWriteTimeWhenRead;
+    }
+
+    /// <summary>
+    /// The full path to the import.
+    /// </summary>
+    public string FullPath { get; }
+
+    /// <summary>
+    /// The last-write-time of the file that was read, when it was read.
+    /// This can be used to see whether the file has been changed on disk
+    /// by an external means.
+    /// </summary>
+    public DateTime LastWriteTimeWhenRead { get; }
+}
diff --git a/src/Build/Instance/ProjectInstance.cs b/src/Build/Instance/ProjectInstance.cs
index c3430ba548e..e4eafc15c1d 100644
--- a/src/Build/Instance/ProjectInstance.cs
+++ b/src/Build/Instance/ProjectInstance.cs
@@ -89,6 +89,7 @@ public class ProjectInstance : IPropertyProvider<ProjectPropertyInstance>, IItem
         private List<string> _initialTargets;
 
         private List<string> _importPaths;
+        private List<ProjectImportInstance> _imports;
 
         private List<string> _importPathsIncludingDuplicates;
 
@@ -430,6 +431,8 @@ internal ProjectInstance(string projectFile, ProjectInstance projectToInheritFro
             _isImmutable = projectToInheritFrom._isImmutable;
             _importPaths = projectToInheritFrom._importPaths;
             ImportPaths = _importPaths.AsReadOnly();
+            _imports = projectToInheritFrom._imports;
+            Imports = _imports.AsReadOnly();
             _importPathsIncludingDuplicates = projectToInheritFrom._importPathsIncludingDuplicates;
             ImportPathsIncludingDuplicates = _importPathsIncludingDuplicates.AsReadOnly();
 
@@ -618,6 +621,8 @@ private ProjectInstance(ProjectInstance that, bool isImmutable, RequestedProject
                 _explicitToolsVersionSpecified = that._explicitToolsVersionSpecified;
                 _importPaths = that._importPaths;
                 ImportPaths = _importPaths.AsReadOnly();
+                _imports = that._imports;
+                Imports = _imports.AsReadOnly();
                 _importPathsIncludingDuplicates = that._importPathsIncludingDuplicates;
                 ImportPathsIncludingDuplicates = _importPathsIncludingDuplicates.AsReadOnly();
 
@@ -904,6 +909,10 @@ public IDictionary<string, ProjectItemDefinitionInstance> ItemDefinitions
         /// </summary>
         public IReadOnlyList<string> ImportPaths { get; private set; }
 
+
+        public IReadOnlyList<ProjectImportInstance> Imports { get; private set; }
+
+
         /// <summary>
         /// This list will contain duplicate imports if an import is imported multiple times. However, only the first import was used in evaluation.
         /// </summary>
@@ -1507,6 +1516,7 @@ void IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, ProjectMetadat
             SdkResult sdkResult)
         {
             _importPaths.Add(import.FullPath);
+            _imports.Add(new ProjectImportInstance(import.FullPath, import.LastWriteTimeWhenRead));
             ((IEvaluatorData<ProjectPropertyInstance, ProjectItemInstance, ProjectMetadataInstance, ProjectItemDefinitionInstance>)this).RecordImportWithDuplicates(importElement, import, versionEvaluated);
         }
 
@@ -2681,7 +2691,9 @@ private void Initialize(
             _actualTargets = new RetrievableEntryHashSet<ProjectTargetInstance>(StringComparer.OrdinalIgnoreCase);
             _targets = new ObjectModel.ReadOnlyDictionary<string, ProjectTargetInstance>(_actualTargets);
             _importPaths = new List<string>();
+            _imports = new List<ProjectImportInstance>();
             ImportPaths = _importPaths.AsReadOnly();
+            Imports = _imports.AsReadOnly();
             _importPathsIncludingDuplicates = new List<string>();
             ImportPathsIncludingDuplicates = _importPathsIncludingDuplicates.AsReadOnly();
             _globalProperties = new PropertyDictionary<ProjectPropertyInstance>((globalProperties == null) ? 0 : globalProperties.Count);
@@ -2813,16 +2825,19 @@ private void CreateTargetsSnapshot(
         private void CreateImportsSnapshot(IList<ResolvedImport> importClosure, IList<ResolvedImport> importClosureWithDuplicates)
         {
             _importPaths = new List<string>(Math.Max(0, importClosure.Count - 1) /* outer project */);
+            _imports = new List<ProjectImportInstance>(_importPaths.Count);
             foreach (var resolvedImport in importClosure)
             {
                 // Exclude outer project itself
                 if (resolvedImport.ImportingElement != null)
                 {
                     _importPaths.Add(resolvedImport.ImportedProject.FullPath);
+                    _imports.Add(new ProjectImportInstance(resolvedImport.ImportedProject.FullPath, resolvedImport.ImportedProject.LastWriteTimeWhenRead));
                 }
             }
 
             ImportPaths = _importPaths.AsReadOnly();
+            Imports = _imports.AsReadOnly();
 
             _importPathsIncludingDuplicates = new List<string>(Math.Max(0, importClosureWithDuplicates.Count - 1) /* outer project */);
             foreach (var resolvedImport in importClosureWithDuplicates)
diff --git a/src/Build/Microsoft.Build.csproj b/src/Build/Microsoft.Build.csproj
index cd99bc84721..c28e7bc2b63 100644
--- a/src/Build/Microsoft.Build.csproj
+++ b/src/Build/Microsoft.Build.csproj
@@ -149,6 +149,7 @@
     <Compile Include="BackEnd\Components\SdkResolution\SdkResolverException.cs" />
     <Compile Include="BackEnd\Components\SdkResolution\TranslationHelpers.cs" />
     <Compile Include="FileSystem\*.cs" />
+    <Compile Include="Instance\ProjectImportInstance.cs" />
     <Compile Include="Utilities\ImmutableCollectionsExtensions.cs" />
     <Compile Include="Utilities\NuGetFrameworkWrapper.cs" />
     <Compile Include="ObjectModelRemoting\ConstructionObjectLinks\ProjectUsingTaskParameterElementLink.cs" />
